{"home.repos.pwc.inspect_result.lightly-ai_lightly.None.setup.load_description": [[15, 22], ["open", "f.read", "os.path.join"], "function", ["None"], ["def", "load_description", "(", "path_dir", "=", "PATH_ROOT", ",", "filename", "=", "'DOCS.md'", ")", ":", "\n", "    ", "\"\"\"Load long description from readme in the path_dir/ directory\n\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path_dir", ",", "filename", ")", ")", "as", "f", ":", "\n", "        ", "long_description", "=", "f", ".", "read", "(", ")", "\n", "", "return", "long_description", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.None.setup.load_requirements": [[24, 42], ["open", "ln[].strip.startswith", "os.path.join", "ln[].strip.strip", "ln[].strip", "reqs.append", "file.readlines", "ln[].strip.index"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index"], ["", "def", "load_requirements", "(", "path_dir", "=", "PATH_ROOT", ",", "filename", "=", "'base.txt'", ",", "comment_char", "=", "'#'", ")", ":", "\n", "    ", "\"\"\"From pytorch-lightning repo: https://github.com/PyTorchLightning/pytorch-lightning.\n       Load requirements from text file in the path_dir/requirements/ directory.\n\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path_dir", ",", "'requirements'", ",", "filename", ")", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "[", "ln", ".", "strip", "(", ")", "for", "ln", "in", "file", ".", "readlines", "(", ")", "]", "\n", "", "reqs", "=", "[", "]", "\n", "for", "ln", "in", "lines", ":", "\n", "# filer all comments", "\n", "        ", "if", "comment_char", "in", "ln", ":", "\n", "            ", "ln", "=", "ln", "[", ":", "ln", ".", "index", "(", "comment_char", ")", "]", ".", "strip", "(", ")", "\n", "# skip directly installed dependencies", "\n", "", "if", "ln", ".", "startswith", "(", "'http'", ")", ":", "\n", "            ", "continue", "\n", "", "if", "ln", ":", "# if requirement is not empty", "\n", "            ", "reqs", ".", "append", "(", "ln", ")", "\n", "", "", "return", "reqs", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._get_config_path": [[18, 38], ["os.path.dirname", "os.path.join", "os.path.exists", "ValueError"], "function", ["None"], ["def", "_get_config_path", "(", "config_path", ")", ":", "\n", "    ", "\"\"\"Find path to yaml config file\n\n    Args:\n        config_path: (str) Path to config.yaml file\n\n    Returns:\n        Path to config.yaml if specified else default config.yaml\n\n    Raises:\n        ValueError: If the config_path is not None but doesn't exist\n\n    \"\"\"", "\n", "if", "config_path", "is", "None", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "cli", ".", "__file__", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'config/config.yaml'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Config path {} does not exist!\"", ".", "format", "(", "config_path", ")", ")", "\n", "\n", "", "return", "config_path", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._load_config_file": [[40, 55], ["open", "yaml.load"], "function", ["None"], ["", "def", "_load_config_file", "(", "config_path", ")", ":", "\n", "    ", "\"\"\"Load a yaml config file\n\n    Args:\n        config_path: (str) Path to config.yaml file\n\n    Returns:\n        Dictionary with configs from config.yaml\n\n    \"\"\"", "\n", "Loader", "=", "yaml", ".", "FullLoader", "\n", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "config_file", ":", "\n", "        ", "cfg", "=", "yaml", ".", "load", "(", "config_file", ",", "Loader", "=", "Loader", ")", "\n", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._add_kwargs": [[57, 77], ["kwargs.items", "isinstance", "core._add_kwargs"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._add_kwargs"], ["", "def", "_add_kwargs", "(", "cfg", ",", "kwargs", ")", ":", "\n", "    ", "\"\"\"Add keyword arguments to config\n\n    Args:\n        cfg: (dict) Dictionary of configs from config.yaml\n        kwargs: (dict) Dictionary of keyword arguments\n\n    Returns:\n        Union of cfg and kwargs\n\n    \"\"\"", "\n", "for", "key", ",", "item", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "dict", ")", ":", "\n", "            ", "if", "key", "in", "cfg", ":", "\n", "                ", "cfg", "[", "key", "]", "=", "_add_kwargs", "(", "cfg", "[", "key", "]", ",", "item", ")", "\n", "", "else", ":", "\n", "                ", "cfg", "[", "key", "]", "=", "item", "\n", "", "", "else", ":", "\n", "            ", "cfg", "[", "key", "]", "=", "item", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core.train_model_and_embed_images": [[79, 126], ["core._get_config_path", "core._load_config_file", "core._add_kwargs", "lightly.cli.train_cli._train_cli", "lightly.cli.embed_cli._embed_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._get_config_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._load_config_file", "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._add_kwargs", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli._train_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli._embed_cli"], ["", "def", "train_model_and_embed_images", "(", "config_path", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Tuple", "[", "\n", "np", ".", "ndarray", ",", "List", "[", "int", "]", ",", "List", "[", "str", "]", "\n", "]", ":", "\n", "    ", "\"\"\"Train a self-supervised model and use it to embed images.\n\n    First trains a modle using the _train_cli(),\n    then embeds with the _embed_cli().\n    All arguments passed to the CLI functions\n    can also be passed to this function (see below for an example).\n\n    Args:\n        config_path:\n            Path to config.yaml. If None, the default configs will be used.\n        **kwargs:\n            Overwrite default configs py passing keyword arguments.\n\n    Returns:\n        Embeddings, labels, and filenames of the images.\n        Embeddings are of shape (n_samples, embedding_size)\n        len(labels) = len(filenames) = n_samples\n\n    Examples:\n        >>> import lightly\n        >>>\n        >>> # train a model and embed images with default configs\n        >>> embeddings, _, _ = lightly.train_model_and_embed_images(\n        >>>     input_dir='path/to/data')\n        >>>\n        >>> #\u00a0train a model and embed images with separate config file\n        >>> my_config_path = 'my/config/file.yaml'\n        >>> embeddings, _, _ = lightly.train_model_and_embed_images(\n        >>>     input_dir='path/to/data', config_path=my_config_path)\n        >>>\n        >>> # train a model and embed images with default settings + overwrites\n        >>> my_trainer = {max_epochs: 10}\n        >>> embeddings, _, _ = lightly.train_model_and_embed_images(\n        >>>     input_dir='path/to/data', trainer=my_trainer)\n\n    \"\"\"", "\n", "config_path", "=", "_get_config_path", "(", "config_path", ")", "\n", "config_args", "=", "_load_config_file", "(", "config_path", ")", "\n", "config_args", "=", "_add_kwargs", "(", "config_args", ",", "kwargs", ")", "\n", "\n", "checkpoint", "=", "_train_cli", "(", "config_args", ",", "is_cli_call", "=", "False", ")", "\n", "config_args", "[", "'checkpoint'", "]", "=", "checkpoint", "\n", "embeddings", ",", "labels", ",", "filenames", "=", "_embed_cli", "(", "config_args", ",", "is_cli_call", "=", "False", ")", "\n", "return", "embeddings", ",", "labels", ",", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core.train_embedding_model": [[128, 173], ["core._get_config_path", "core._load_config_file", "core._add_kwargs", "lightly.cli.train_cli._train_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._get_config_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._load_config_file", "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._add_kwargs", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli._train_cli"], ["", "def", "train_embedding_model", "(", "config_path", ":", "str", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Train a self-supervised model.\n\n    Calls the same function as lightly-train. All arguments passed to\n    lightly-train can also be passed to this function (see below for an\n    example).\n\n    Args:\n        config_path:\n            Path to config.yaml. If None, the default configs will be used.\n        **kwargs:\n            Overwrite default configs py passing keyword arguments.\n\n    Returns:\n        Path to checkpoint of the trained embedding model.\n\n    Examples:\n        >>> import lightly\n        >>>\n        >>> # train a model with default configs\n        >>> checkpoint_path = lightly.train_embedding_model(\n        >>>     input_dir='path/to/data')\n        >>>\n        >>> #\u00a0train a model with separate config file\n        >>> my_config_path = 'my/config/file.yaml'\n        >>> checkpoint_path = lightly.train_embedding_model(\n        >>>     input_dir='path/to/data', config_path=my_config_path)\n        >>>\n        >>> # train a model with default settings and overwrites: large batch\n        >>> # sizes are benefitial for self-supervised training and more \n        >>> #\u00a0workers speed up the dataloading process.\n        >>> my_loader = {\n        >>>     batch_size: 100,\n        >>>     num_workers: 8,\n        >>> }\n        >>> checkpoint_path = lightly.train_embedding_model(\n        >>>     input_dir='path/to/data', loader=my_loader)\n        >>> #\u00a0the command above is equivalent to:\n        >>> #\u00a0lightly-train input_dir='path/to/data' loader.batch_size=100 loader.num_workers=8\n    \"\"\"", "\n", "config_path", "=", "_get_config_path", "(", "config_path", ")", "\n", "config_args", "=", "_load_config_file", "(", "config_path", ")", "\n", "config_args", "=", "_add_kwargs", "(", "config_args", ",", "kwargs", ")", "\n", "\n", "return", "_train_cli", "(", "config_args", ",", "is_cli_call", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core.embed_images": [[175, 222], ["core._get_config_path", "core._load_config_file", "core._add_kwargs", "lightly.cli.embed_cli._embed_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._get_config_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._load_config_file", "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core._add_kwargs", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli._embed_cli"], ["", "def", "embed_images", "(", "checkpoint", ":", "str", ",", "config_path", ":", "str", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Embed images with a self-supervised model.\n\n    Calls the same function as lightly-embed. All arguments passed to\n    lightly-embed can also be passed to this function (see below for an\n    example).\n\n    Args:\n        checkpoint:\n            Path to the checkpoint file for the embedding model.\n        config_path:\n            Path to config.yaml. If None, the default configs will be used.\n        **kwargs:\n            Overwrite default configs py passing keyword arguments.\n\n    Returns:\n        Embeddings, labels, and filenames of the images.\n\n    Examples:\n        >>> import lightly\n        >>> my_checkpoint_path = 'path/to/checkpoint.ckpt'\n        >>>\n        >>> # embed images with default configs\n        >>> embeddings, _, _ = lightly.embed_images(\n        >>>     my_checkpoint_path, input_dir='path/to/data')\n        >>>\n        >>> #\u00a0embed images with separate config file\n        >>> my_config_path = 'my/config/file.yaml'\n        >>> embeddings, _, _ = lightly.embed_images(\n        >>>     my_checkpoint_path, input_dir='path/to/data', config_path=my_config_path)\n        >>>\n        >>> # embed images with default settings and overwrites: at inference,\n        >>> #\u00a0we can use larger input_sizes because it requires less memory.\n        >>> my_collate = {input_size: 256}\n        >>> embeddings, _, _ = lightly.embed_images(\n        >>>     my_checkpoint_path, input_dir='path/to/data', collate=my_collate)\n        >>> #\u00a0the command above is equivalent to:\n        >>> #\u00a0lightly-embed input_dir='path/to/data' collate.input_size=256\n\n    \"\"\"", "\n", "config_path", "=", "_get_config_path", "(", "config_path", ")", "\n", "config_args", "=", "_load_config_file", "(", "config_path", ")", "\n", "config_args", "=", "_add_kwargs", "(", "config_args", ",", "kwargs", ")", "\n", "\n", "config_args", "[", "'checkpoint'", "]", "=", "checkpoint", "\n", "\n", "return", "_embed_cli", "(", "config_args", ",", "is_cli_call", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io._is_valid_filename": [[17, 25], ["None"], "function", ["None"], ["def", "_is_valid_filename", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Returns False if the filename is misformatted.\n\n    \"\"\"", "\n", "for", "character", "in", "INVALID_FILENAME_CHARACTERS", ":", "\n", "        ", "if", "character", "in", "filename", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_filenames": [[27, 38], ["len", "ValueError", "io._is_valid_filename"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io._is_valid_filename"], ["", "def", "check_filenames", "(", "filenames", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "\"\"\"Raises an error if one of the filenames is misformatted\n\n    Args:\n        filenames:\n            A list of string being filenames\n\n    \"\"\"", "\n", "invalid_filenames", "=", "[", "f", "for", "f", "in", "filenames", "if", "not", "_is_valid_filename", "(", "f", ")", "]", "\n", "if", "len", "(", "invalid_filenames", ")", ">", "0", ":", "\n", "        ", "raise", "ValueError", "(", "f'Invalid filename(s): {invalid_filenames}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings": [[40, 122], ["open", "csv.reader", "next", "any", "enumerate", "RuntimeError", "RuntimeError", "header.index", "open", "csv.reader", "next", "enumerate", "new_rows.append", "open", "csv.writer", "csv.writer.writerows", "RuntimeError", "re.match", "len", "RuntimeError", "list", "new_rows.append", "x.strip", "RuntimeError", "re.match", "itertools.compress", "list", "itertools.compress"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index"], ["", "", "def", "check_embeddings", "(", "path", ":", "str", ",", "remove_additional_columns", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Raises an error if the embeddings csv file has not the correct format\n    \n    Use this check whenever you want to upload an embedding to the Lightly \n    Platform.\n    This method only checks whether the header row matches the specs:\n    https://docs.lightly.ai/getting_started/command_line_tool.html#id1\n\n    Args:\n        path:\n            Path to the embedding csv file\n        remove_additional_columns:\n            If True, all additional columns\n            which are not in {filenames, embeddings_x, labels} are removed.\n            If false, they are kept unchanged.\n\n    Raises:\n        RuntimeError\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "'r'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "header", ":", "List", "[", "str", "]", "=", "next", "(", "reader", ")", "\n", "\n", "# check for whitespace in the header (we don't allow this)", "\n", "if", "any", "(", "x", "!=", "x", ".", "strip", "(", ")", "for", "x", "in", "header", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Embeddings csv file must not contain whitespaces.'", "\n", ")", "\n", "\n", "# first col is `filenames`", "\n", "", "if", "header", "[", "0", "]", "!=", "'filenames'", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f'Embeddings csv file must start with `filenames` '", "\n", "f'column but had {header[0]} instead.'", "\n", ")", "\n", "\n", "# `labels` exists", "\n", "", "try", ":", "\n", "            ", "header_labels_idx", "=", "header", ".", "index", "(", "'labels'", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'Embeddings csv file has no `labels` column.'", ")", "\n", "\n", "# cols between first and `labels` are `embedding_x`", "\n", "", "for", "embedding_header", "in", "header", "[", "1", ":", "header_labels_idx", "]", ":", "\n", "            ", "if", "not", "re", ".", "match", "(", "r'embedding_\\d+'", ",", "embedding_header", ")", ":", "\n", "# check if we have a special column", "\n", "                ", "if", "not", "embedding_header", "in", "[", "'masked'", ",", "'selected'", "]", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "f'Embeddings csv file must have `embedding_x` columns but '", "\n", "f'found {embedding_header} instead.'", "\n", ")", "\n", "\n", "# check for empty rows in the body of the csv file", "\n", "", "", "", "for", "i", ",", "row", "in", "enumerate", "(", "reader", ")", ":", "\n", "            ", "if", "len", "(", "row", ")", "==", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "f'Embeddings csv file must not have empty rows. '", "\n", "f'Found empty row on line {i}.'", "\n", ")", "\n", "\n", "", "", "", "if", "remove_additional_columns", ":", "\n", "        ", "new_rows", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "header_row", "=", "next", "(", "reader", ")", "\n", "\n", "# create mask of columns to keep only filenames, embedding_ or labels", "\n", "regexp", "=", "r'filenames|(embedding_\\d+)|labels'", "\n", "col_mask", "=", "[", "]", "\n", "for", "i", ",", "col", "in", "enumerate", "(", "header_row", ")", ":", "\n", "                ", "col_mask", "+=", "[", "True", "]", "if", "re", ".", "match", "(", "regexp", ",", "col", ")", "else", "[", "False", "]", "\n", "\n", "# add header row manually here since we use an iterator", "\n", "", "new_rows", ".", "append", "(", "list", "(", "compress", "(", "header_row", ",", "col_mask", ")", ")", ")", "\n", "\n", "for", "row", "in", "reader", ":", "\n", "# apply mask to only use filenames, embedding_ or labels", "\n", "                ", "new_rows", ".", "append", "(", "list", "(", "compress", "(", "row", ",", "col_mask", ")", ")", ")", "\n", "\n", "", "", "with", "open", "(", "path", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerows", "(", "new_rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_embeddings": [[124, 173], ["io.check_filenames", "len", "len", "len", "ValueError", "open", "csv.writer", "csv.writer.writerow", "zip", "csv.writer.writerow", "range", "list", "str"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_filenames"], ["", "", "", "def", "save_embeddings", "(", "path", ":", "str", ",", "\n", "embeddings", ":", "np", ".", "ndarray", ",", "\n", "labels", ":", "List", "[", "int", "]", ",", "\n", "filenames", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "\"\"\"Saves embeddings in a csv file in a Lightly compatible format.\n\n    Creates a csv file at the location specified by path and saves embeddings,\n    labels, and filenames.\n\n    Args:\n        path:\n            Path to the csv file.\n        embeddings:\n            Embeddings of the images as a numpy array (n x d).\n        labels:\n            List of integer labels.\n        filenames:\n            List of filenames.\n\n    Raises:\n        ValueError: If embeddings, labels, and filenames have different lengths.\n\n    Examples:\n        >>> import lightly.utils.io as io\n        >>> io.save_embeddings(\n        >>>     'path/to/my/embeddings.csv',\n        >>>     embeddings,\n        >>>     labels,\n        >>>     filenames)\n    \"\"\"", "\n", "check_filenames", "(", "filenames", ")", "\n", "\n", "n_embeddings", "=", "len", "(", "embeddings", ")", "\n", "n_filenames", "=", "len", "(", "filenames", ")", "\n", "n_labels", "=", "len", "(", "labels", ")", "\n", "\n", "if", "n_embeddings", "!=", "n_labels", "or", "n_filenames", "!=", "n_labels", ":", "\n", "        ", "msg", "=", "'Length of embeddings, labels, and filenames should be equal '", "\n", "msg", "+=", "f' but are not: ({n_embeddings}, {n_filenames}, {n_labels})'", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "header", "=", "[", "'filenames'", "]", "\n", "header", "=", "header", "+", "[", "f'embedding_{i}'", "for", "i", "in", "range", "(", "embeddings", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "header", "=", "header", "+", "[", "'labels'", "]", "\n", "with", "open", "(", "path", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "header", ")", "\n", "for", "filename", ",", "embedding", ",", "label", "in", "zip", "(", "filenames", ",", "embeddings", ",", "labels", ")", ":", "\n", "            ", "writer", ".", "writerow", "(", "[", "filename", "]", "+", "list", "(", "embedding", ")", "+", "[", "str", "(", "label", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.load_embeddings": [[175, 214], ["io.check_embeddings", "io.check_filenames", "numpy.array().astype", "open", "csv.reader", "enumerate", "filenames.append", "labels.append", "np.array().astype.append", "numpy.array", "int"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_filenames"], ["", "", "", "def", "load_embeddings", "(", "path", ":", "str", ")", ":", "\n", "    ", "\"\"\"Loads embeddings from a csv file in a Lightly compatible format.\n\n    Args:\n        path:\n            Path to the csv file.\n\n    Returns:\n        The embeddings as a numpy array, labels as a list of integers, and\n        filenames as a list of strings in the order they were saved.\n\n        The embeddings will always be of the Float32 datatype.\n\n    Examples:\n        >>> import lightly.utils.io as io\n        >>> embeddings, labels, filenames = io.load_embeddings(\n        >>>     'path/to/my/embeddings.csv')\n\n    \"\"\"", "\n", "check_embeddings", "(", "path", ")", "\n", "\n", "filenames", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "embeddings", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "newline", "=", "''", ")", "as", "csv_file", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "reader", ")", ":", "\n", "# skip header", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "# \u00a0read filenames and labels", "\n", "", "filenames", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "int", "(", "row", "[", "-", "1", "]", ")", ")", "\n", "# read embeddings", "\n", "embeddings", ".", "append", "(", "row", "[", "1", ":", "-", "1", "]", ")", "\n", "\n", "", "", "check_filenames", "(", "filenames", ")", "\n", "\n", "embeddings", "=", "np", ".", "array", "(", "embeddings", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "embeddings", ",", "labels", ",", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.load_embeddings_as_dict": [[216, 265], ["io.load_embeddings", "zip", "data[].append", "embedding.tolist"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.load_embeddings"], ["", "def", "load_embeddings_as_dict", "(", "path", ":", "str", ",", "\n", "embedding_name", ":", "str", "=", "'default'", ",", "\n", "return_all", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Loads embeddings from csv and store it in a dictionary for transfer.\n\n    Loads embeddings to a dictionary which can be serialized and sent to the\n    Lightly servers. It is recommended that the embedding_name is always\n    specified because the Lightly web-app does not allow two embeddings with\n    the same name.\n    \n    Args:\n        path:\n            Path to the csv file.\n        embedding_name:\n            Name of the embedding for the platform.\n        return_all:\n            If true, return embeddings, labels, and filenames, too.\n\n    Returns:\n        A dictionary containing the embedding information (see load_embeddings)\n\n    Examples:\n        >>> import lightly.utils.io as io\n        >>> embedding_dict = io.load_embeddings_as_dict(\n        >>>     'path/to/my/embeddings.csv',\n        >>>     embedding_name='MyEmbeddings')\n        >>>\n        >>> result = io.load_embeddings_as_dict(\n        >>>     'path/to/my/embeddings.csv',\n        >>>     embedding_name='MyEmbeddings',\n        >>>     return_all=True)\n        >>> embedding_dict, embeddings, labels, filenames = result\n\n    \"\"\"", "\n", "embeddings", ",", "labels", ",", "filenames", "=", "load_embeddings", "(", "path", ")", "\n", "\n", "# build dictionary", "\n", "data", "=", "{", "'embeddingName'", ":", "embedding_name", ",", "'embeddings'", ":", "[", "]", "}", "\n", "for", "embedding", ",", "filename", ",", "label", "in", "zip", "(", "embeddings", ",", "filenames", ",", "labels", ")", ":", "\n", "        ", "item", "=", "{", "'fileName'", ":", "filename", ",", "\n", "'value'", ":", "embedding", ".", "tolist", "(", ")", ",", "\n", "'label'", ":", "label", "}", "\n", "data", "[", "'embeddings'", "]", ".", "append", "(", "item", ")", "\n", "\n", "# return embeddings along with dictionary", "\n", "", "if", "return_all", ":", "\n", "        ", "return", "data", ",", "embeddings", ",", "labels", ",", "filenames", "\n", "", "else", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.format_custom_metadata": [[281, 320], ["enumerate", "formatted[].append", "formatted[].append"], "function", ["None"], ["", "def", "format_custom_metadata", "(", "custom_metadata", ":", "List", "[", "Tuple", "[", "str", ",", "Dict", "]", "]", ")", ":", "\n", "    ", "\"\"\"Transforms custom metadata into a format which can be handled by Lightly.\n\n    Args:\n        custom_metadata:\n            List of tuples (filename, metadata) where metadata is a dictionary.\n\n    Returns:\n        A dictionary of formatted custom metadata.\n\n    Examples:\n        >>> custom_metadata = [\n        >>>     ('hello.png', {'number_of_people': 1}),\n        >>>     ('world.png', {'number_of_people': 3}),\n        >>> ]\n        >>> \n        >>> format_custom_metadata(custom_metadata)\n        >>> > {\n        >>> >   'images': [{'id': 0, 'file_name': 'hello.png'}, {'id': 1, 'file_name': 'world.png'}],\n        >>> >   'metadata': [{'image_id': 0, 'number_of_people': 1}, {'image_id': 1, 'number_of_people': 3}]\n        >>> > }\n    \n    \"\"\"", "\n", "formatted", "=", "{", "\n", "COCO_ANNOTATION_KEYS", ".", "images", ":", "[", "]", ",", "\n", "COCO_ANNOTATION_KEYS", ".", "custom_metadata", ":", "[", "]", ",", "\n", "}", "\n", "\n", "for", "i", ",", "(", "filename", ",", "metadata", ")", "in", "enumerate", "(", "custom_metadata", ")", ":", "\n", "        ", "formatted", "[", "COCO_ANNOTATION_KEYS", ".", "images", "]", ".", "append", "(", "{", "\n", "COCO_ANNOTATION_KEYS", ".", "images_id", ":", "i", ",", "\n", "COCO_ANNOTATION_KEYS", ".", "images_filename", ":", "filename", ",", "\n", "}", ")", "\n", "formatted", "[", "COCO_ANNOTATION_KEYS", ".", "custom_metadata", "]", ".", "append", "(", "{", "\n", "COCO_ANNOTATION_KEYS", ".", "custom_metadata_image_id", ":", "i", ",", "\n", "**", "metadata", ",", "\n", "}", ")", "\n", "\n", "", "return", "formatted", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_custom_metadata": [[322, 335], ["io.format_custom_metadata", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.format_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump"], ["", "def", "save_custom_metadata", "(", "path", ":", "str", ",", "custom_metadata", ":", "List", "[", "Tuple", "[", "str", ",", "Dict", "]", "]", ")", ":", "\n", "    ", "\"\"\"Saves custom metadata in a .json.\n\n    Args:\n        path:\n            Filename of the .json file where the data should be stored.\n        custom_metadata:\n            List of tuples (filename, metadata) where metadata is a dictionary.\n    \n    \"\"\"", "\n", "formatted", "=", "format_custom_metadata", "(", "custom_metadata", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "formatted", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_tasks": [[338, 353], ["open", "json.dump"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump"], ["", "", "def", "save_tasks", "(", "\n", "path", ":", "str", ",", "\n", "tasks", ":", "List", "[", "str", "]", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Saves a list of prediction task names in the right format.\n\n    Args:\n        path:\n            Where to store the task names.\n        tasks:\n            List of task names.\n\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "tasks", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_schema": [[355, 385], ["len", "len", "ValueError", "open", "json.dump", "zip"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump"], ["", "", "def", "save_schema", "(", "\n", "path", ":", "str", ",", "\n", "task_type", ":", "str", ",", "\n", "ids", ":", "List", "[", "int", "]", ",", "\n", "names", ":", "List", "[", "str", "]", "\n", ")", ":", "\n", "    ", "\"\"\"Saves a prediction schema in the right format.\n\n    Args:\n        path:\n            Where to store the schema.\n        task_type:\n            Task type (e.g. classification, object-detection).\n        ids:\n            List of category ids.\n        names:\n            List of category names.\n    \"\"\"", "\n", "if", "len", "(", "ids", ")", "!=", "len", "(", "names", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'ids and names must have same length!'", ")", "\n", "\n", "", "schema", "=", "{", "\n", "'task_type'", ":", "task_type", ",", "\n", "'categories'", ":", "[", "\n", "{", "'id'", ":", "id", ",", "'name'", ":", "name", "}", "\n", "for", "id", ",", "name", "in", "zip", "(", "ids", ",", "names", ")", "\n", "]", "\n", "}", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "schema", ",", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug._check_matplotlib_available": [[17, 20], ["isinstance"], "function", ["None"], ["", "def", "_check_matplotlib_available", "(", ")", "->", "None", ":", "\n", "    ", "if", "isinstance", "(", "plt", ",", "Exception", ")", ":", "\n", "        ", "raise", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.std_of_l2_normalized": [[22, 51], ["torch.no_grad", "torch.nn.functional.normalize", "torch.std().mean", "len", "ValueError", "torch.std", "len"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.std"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "std_of_l2_normalized", "(", "z", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Calculates the mean of the standard deviation of z along each dimension.\n\n    This measure was used by [0] to determine the level of collapse of the\n    learned representations. If the returned number is 0., the outputs z have\n    collapsed to a constant vector. \"If the output z has a zero-mean isotropic\n    Gaussian distribution\" [0], the returned number should be close to 1/sqrt(d)\n    where d is the dimensionality of the output.\n\n    [0]: https://arxiv.org/abs/2011.10566\n\n    Args:\n        z:\n            A torch tensor of shape batch_size x dimension.\n\n    Returns:\n        The mean of the standard deviation of the l2 normalized tensor z along\n        each dimension.\n    \n    \"\"\"", "\n", "\n", "if", "len", "(", "z", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f'Input tensor must have two dimensions but has {len(z.shape)}!'", "\n", ")", "\n", "\n", "", "z_norm", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "z", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "std", "(", "z_norm", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.apply_transform_without_normalize": [[53, 70], ["isinstance", "debug.apply_transform_without_normalize", "isinstance", "transform"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.apply_transform_without_normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.transform"], ["", "def", "apply_transform_without_normalize", "(", "\n", "image", ":", "Image", ".", "Image", ",", "\n", "transform", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Applies the transform to the image but skips ToTensor and Normalize.\n\n    \"\"\"", "\n", "skippable_transforms", "=", "(", "\n", "torchvision", ".", "transforms", ".", "ToTensor", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", ",", "\n", ")", "\n", "if", "isinstance", "(", "transform", ",", "torchvision", ".", "transforms", ".", "Compose", ")", ":", "\n", "        ", "for", "transform_", "in", "transform", ".", "transforms", ":", "\n", "            ", "image", "=", "apply_transform_without_normalize", "(", "image", ",", "transform_", ")", "\n", "", "", "elif", "not", "isinstance", "(", "transform", ",", "skippable_transforms", ")", ":", "\n", "        ", "image", "=", "transform", "(", "image", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.generate_grid_of_augmented_images": [[72, 111], ["isinstance", "range", "isinstance", "grid.append", "ValueError", "grid.append", "debug.apply_transform_without_normalize", "debug.apply_transform_without_normalize", "type"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.apply_transform_without_normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.apply_transform_without_normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["", "def", "generate_grid_of_augmented_images", "(", "\n", "input_images", ":", "List", "[", "Image", ".", "Image", "]", ",", "\n", "collate_function", ":", "Union", "[", "BaseCollateFunction", ",", "MultiViewCollateFunction", "]", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Returns a grid of augmented images. Images in a column belong together.\n\n    This function ignores the transforms ToTensor and Normalize for visualization purposes.\n\n    Args:\n        input_images:\n            List of PIL images for which the augmentations should be plotted.\n        collate_function:\n            The collate function of the self-supervised learning algorithm.\n            Must be of type BaseCollateFunction or MultiViewCollateFunction.\n\n    Returns:\n        A grid of augmented images. Images in a column belong together.\n\n    \"\"\"", "\n", "grid", "=", "[", "]", "\n", "if", "isinstance", "(", "collate_function", ",", "BaseCollateFunction", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "grid", ".", "append", "(", "[", "\n", "apply_transform_without_normalize", "(", "image", ",", "collate_function", ".", "transform", ")", "\n", "for", "image", "in", "input_images", "\n", "]", ")", "\n", "", "", "elif", "isinstance", "(", "collate_function", ",", "MultiViewCollateFunction", ")", ":", "\n", "        ", "for", "transform", "in", "collate_function", ".", "transforms", ":", "\n", "            ", "grid", ".", "append", "(", "[", "\n", "apply_transform_without_normalize", "(", "image", ",", "transform", ")", "\n", "for", "image", "in", "input_images", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Collate function must be one of '", "\n", "'(BaseCollateFunction, MultiViewCollateFunction) '", "\n", "f'but is {type(collate_function)}.'", "\n", ")", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.plot_augmented_images": [[113, 164], ["debug._check_matplotlib_available", "debug.generate_grid_of_augmented_images", "generate_grid_of_augmented_images.insert", "len", "len", "plt.subplots", "range", "ax_top_left.set", "ax_top_left.title.set_size", "ax_top_next.set", "ax_top_next.title.set_size", "fig.tight_layout", "len", "ValueError", "range", "ax.imshow", "ax.set_axis_off", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug._check_matplotlib_available", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.generate_grid_of_augmented_images"], ["", "def", "plot_augmented_images", "(", "\n", "input_images", ":", "List", "[", "Image", ".", "Image", "]", ",", "\n", "collate_function", ":", "Union", "[", "BaseCollateFunction", ",", "MultiViewCollateFunction", "]", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Returns a figure showing original images in the left column and augmented images to their right.\n\n    This function ignores the transforms ToTensor and Normalize for visualization purposes.\n\n    Args:\n        input_images:\n            List of PIL images for which the augmentations should be plotted.\n        collate_function:\n            The collate function of the self-supervised learning algorithm.\n            Must be of type BaseCollateFunction or MultiViewCollateFunction.\n\n    Returns:\n        A figure showing the original images in the left column and the augmented\n        images to their right. If the collate_function is an instance of the\n        BaseCollateFunction, two example augmentations are shown. For\n        MultiViewCollateFunctions all the generated views are shown.\n\n    \"\"\"", "\n", "\n", "_check_matplotlib_available", "(", ")", "\n", "\n", "if", "len", "(", "input_images", ")", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'There must be at least one input image.'", ")", "\n", "\n", "", "grid", "=", "generate_grid_of_augmented_images", "(", "input_images", ",", "collate_function", ")", "\n", "grid", ".", "insert", "(", "0", ",", "input_images", ")", "\n", "nrows", "=", "len", "(", "input_images", ")", "\n", "ncols", "=", "len", "(", "grid", ")", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", ",", "ncols", ",", "figsize", "=", "(", "ncols", "*", "1.5", ",", "nrows", "*", "1.5", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "nrows", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "ncols", ")", ":", "\n", "            ", "ax", "=", "axs", "[", "i", "]", "[", "j", "]", "if", "len", "(", "input_images", ")", ">", "1", "else", "axs", "[", "j", "]", "\n", "img", "=", "grid", "[", "j", "]", "[", "i", "]", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "\n", "", "", "ax_top_left", "=", "axs", "[", "0", ",", "0", "]", "if", "len", "(", "input_images", ")", ">", "1", "else", "axs", "[", "0", "]", "\n", "ax_top_left", ".", "set", "(", "title", "=", "'Original images'", ")", "\n", "ax_top_left", ".", "title", ".", "set_size", "(", "8", ")", "\n", "ax_top_next", "=", "axs", "[", "0", ",", "1", "]", "if", "len", "(", "input_images", ")", ">", "1", "else", "axs", "[", "1", "]", "\n", "ax_top_next", ".", "set", "(", "title", "=", "'Augmented images'", ")", "\n", "ax_top_next", ".", "title", ".", "set_size", "(", "8", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "return", "fig", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.benchmarking.BenchmarkModule.__init__": [[151, 166], ["pytorch_lightning.LightningModule.__init__", "torch.Module", "torch.Module", "torch.Module", "torch.Module", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "dataloader_kNN", ":", "DataLoader", ",", "\n", "num_classes", ":", "int", ",", "\n", "knn_k", ":", "int", "=", "200", ",", "\n", "knn_t", ":", "float", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Module", "(", ")", "\n", "self", ".", "max_accuracy", "=", "0.0", "\n", "self", ".", "dataloader_kNN", "=", "dataloader_kNN", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "knn_k", "=", "knn_k", "\n", "self", ".", "knn_t", "=", "knn_t", "\n", "\n", "# create dummy param to keep track of the device the model is using", "\n", "self", ".", "dummy_param", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.benchmarking.BenchmarkModule.training_epoch_end": [[167, 186], ["benchmarking.BenchmarkModule.backbone.eval", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "benchmarking.BenchmarkModule.backbone.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.to.to.to", "target.to.to.to", "benchmarking.BenchmarkModule.backbone().squeeze", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "benchmarking.BenchmarkModule.feature_bank.append", "benchmarking.BenchmarkModule.targets_bank.append", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "benchmarking.BenchmarkModule.backbone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.SplitBatchNorm.train", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "# update feature bank at the end of each training epoch", "\n", "        ", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "self", ".", "feature_bank", "=", "[", "]", "\n", "self", ".", "targets_bank", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", "in", "self", ".", "dataloader_kNN", ":", "\n", "                ", "img", ",", "target", ",", "_", "=", "data", "\n", "img", "=", "img", ".", "to", "(", "self", ".", "dummy_param", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "dummy_param", ".", "device", ")", "\n", "feature", "=", "self", ".", "backbone", "(", "img", ")", ".", "squeeze", "(", ")", "\n", "feature", "=", "F", ".", "normalize", "(", "feature", ",", "dim", "=", "1", ")", "\n", "self", ".", "feature_bank", ".", "append", "(", "feature", ")", "\n", "self", ".", "targets_bank", ".", "append", "(", "target", ")", "\n", "", "", "self", ".", "feature_bank", "=", "torch", ".", "cat", "(", "\n", "self", ".", "feature_bank", ",", "dim", "=", "0", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "targets_bank", "=", "torch", ".", "cat", "(", "\n", "self", ".", "targets_bank", ",", "dim", "=", "0", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "backbone", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.benchmarking.BenchmarkModule.validation_step": [[187, 204], ["hasattr", "hasattr", "benchmarking.BenchmarkModule.backbone().squeeze", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "benchmarking.knn_predict", "images.size", "benchmarking.BenchmarkModule.backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.benchmarking.knn_predict"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# we can only do kNN predictions once we have a feature bank", "\n", "        ", "if", "hasattr", "(", "self", ",", "'feature_bank'", ")", "and", "hasattr", "(", "self", ",", "'targets_bank'", ")", ":", "\n", "            ", "images", ",", "targets", ",", "_", "=", "batch", "\n", "feature", "=", "self", ".", "backbone", "(", "images", ")", ".", "squeeze", "(", ")", "\n", "feature", "=", "F", ".", "normalize", "(", "feature", ",", "dim", "=", "1", ")", "\n", "pred_labels", "=", "knn_predict", "(", "\n", "feature", ",", "\n", "self", ".", "feature_bank", ",", "\n", "self", ".", "targets_bank", ",", "\n", "self", ".", "num_classes", ",", "\n", "self", ".", "knn_k", ",", "\n", "self", ".", "knn_t", "\n", ")", "\n", "num", "=", "images", ".", "size", "(", ")", "\n", "top1", "=", "(", "pred_labels", "[", ":", ",", "0", "]", "==", "targets", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "(", "num", ",", "top1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.benchmarking.BenchmarkModule.validation_epoch_end": [[205, 222], ["torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "float", "benchmarking.BenchmarkModule.log", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item", "torch.Tensor().to.item"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "device", "=", "self", ".", "dummy_param", ".", "device", "\n", "if", "outputs", ":", "\n", "            ", "total_num", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "total_top1", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", ".", "to", "(", "device", ")", "\n", "for", "(", "num", ",", "top1", ")", "in", "outputs", ":", "\n", "                ", "total_num", "+=", "num", "[", "0", "]", "\n", "total_top1", "+=", "top1", "\n", "\n", "", "if", "dist", ".", "is_initialized", "(", ")", "and", "dist", ".", "get_world_size", "(", ")", ">", "1", ":", "\n", "                ", "dist", ".", "all_reduce", "(", "total_num", ")", "\n", "dist", ".", "all_reduce", "(", "total_top1", ")", "\n", "\n", "", "acc", "=", "float", "(", "total_top1", ".", "item", "(", ")", "/", "total_num", ".", "item", "(", ")", ")", "\n", "if", "acc", ">", "self", ".", "max_accuracy", ":", "\n", "                ", "self", ".", "max_accuracy", "=", "acc", "\n", "", "self", ".", "log", "(", "'kNN_accuracy'", ",", "acc", "*", "100.0", ",", "prog_bar", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.benchmarking.knn_predict": [[17, 81], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.topk", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "one_hot_label.scatter.scatter", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.argsort", "feature_labels.expand", "feature.size", "feature.size", "torch.gather.view", "one_hot_label.scatter.view", "sim_weight.unsqueeze", "feature.size"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather"], ["def", "knn_predict", "(", "feature", ":", "torch", ".", "Tensor", ",", "\n", "feature_bank", ":", "torch", ".", "Tensor", ",", "\n", "feature_labels", ":", "torch", ".", "Tensor", ",", "\n", "num_classes", ":", "int", ",", "\n", "knn_k", ":", "int", "=", "200", ",", "\n", "knn_t", ":", "float", "=", "0.1", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Run kNN predictions on features based on a feature bank\n\n    This method is commonly used to monitor performance of self-supervised\n    learning methods.\n\n    The default parameters are the ones\n    used in https://arxiv.org/pdf/1805.01978v1.pdf.\n\n    Args:\n        feature: \n            Tensor of shape [N, D] for which you want predictions\n        feature_bank: \n            Tensor of a database of features used for kNN\n        feature_labels: \n            Labels for the features in our feature_bank\n        num_classes: \n            Number of classes (e.g. `10` for CIFAR-10)\n        knn_k: \n            Number of k neighbors used for kNN\n        knn_t: \n            Temperature parameter to reweights similarities for kNN\n\n    Returns:\n        A tensor containing the kNN predictions\n\n    Examples:\n        >>> images, targets, _ = batch\n        >>> feature = backbone(images).squeeze()\n        >>> # we recommend to normalize the features\n        >>> feature = F.normalize(feature, dim=1)\n        >>> pred_labels = knn_predict(\n        >>>     feature,\n        >>>     feature_bank,\n        >>>     targets_bank,\n        >>>     num_classes=10,\n        >>> )\n    \"\"\"", "\n", "\n", "# compute cos similarity between each feature vector and feature bank ---> [B, N]", "\n", "sim_matrix", "=", "torch", ".", "mm", "(", "feature", ",", "feature_bank", ")", "\n", "# [B, K]", "\n", "sim_weight", ",", "sim_indices", "=", "sim_matrix", ".", "topk", "(", "k", "=", "knn_k", ",", "dim", "=", "-", "1", ")", "\n", "# [B, K]", "\n", "sim_labels", "=", "torch", ".", "gather", "(", "feature_labels", ".", "expand", "(", "\n", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ",", "index", "=", "sim_indices", ")", "\n", "# we do a reweighting of the similarities", "\n", "sim_weight", "=", "(", "sim_weight", "/", "knn_t", ")", ".", "exp", "(", ")", "\n", "# counts for each class", "\n", "one_hot_label", "=", "torch", ".", "zeros", "(", "feature", ".", "size", "(", "\n", "0", ")", "*", "knn_k", ",", "num_classes", ",", "device", "=", "sim_labels", ".", "device", ")", "\n", "# [B*K, C]", "\n", "one_hot_label", "=", "one_hot_label", ".", "scatter", "(", "\n", "dim", "=", "-", "1", ",", "index", "=", "sim_labels", ".", "view", "(", "-", "1", ",", "1", ")", ",", "value", "=", "1.0", ")", "\n", "# weighted score ---> [B, C]", "\n", "pred_scores", "=", "torch", ".", "sum", "(", "one_hot_label", ".", "view", "(", "feature", ".", "size", "(", "\n", "0", ")", ",", "-", "1", ",", "num_classes", ")", "*", "sim_weight", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "pred_labels", "=", "pred_scores", ".", "argsort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "return", "pred_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare": [[7, 33], ["ValueError", "list", "int", "int", "len", "len", "zip", "v0.split", "v1.split"], "function", ["None"], ["def", "version_compare", "(", "v0", ":", "str", ",", "v1", ":", "str", ")", ":", "\n", "    ", "\"\"\"Returns 1 if version of v0 is larger than v1 and -1 otherwise\n    \n    Use this method to compare Python package versions and see which one is\n    newer.\n\n    Examples:\n\n        >>> # compare two versions\n        >>> version_compare('1.2.0', '1.1.2')\n        >>> 1\n    \"\"\"", "\n", "v0", "=", "[", "int", "(", "n", ")", "for", "n", "in", "v0", ".", "split", "(", "'.'", ")", "]", "[", ":", ":", "-", "1", "]", "\n", "v1", "=", "[", "int", "(", "n", ")", "for", "n", "in", "v1", ".", "split", "(", "'.'", ")", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "len", "(", "v0", ")", "is", "not", "3", "or", "len", "(", "v1", ")", "is", "not", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f'Length of version strings is not 3 (expected pattern `x.y.z`) but is '", "\n", "f'{v0} and {v1}.'", "\n", ")", "\n", "", "pairs", "=", "list", "(", "zip", "(", "v0", ",", "v1", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "x", ",", "y", "in", "pairs", ":", "\n", "        ", "if", "x", "<", "y", ":", "\n", "            ", "return", "-", "1", "\n", "", "if", "x", ">", "y", ":", "\n", "            ", "return", "1", "\n", "", "", "return", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.reordering.sort_items_by_keys": [[4, 43], ["ValueError", "len", "len", "len", "len", "zip", "len", "len", "len"], "function", ["None"], ["def", "sort_items_by_keys", "(", "\n", "keys", ":", "List", "[", "any", "]", ",", "\n", "items", ":", "List", "[", "any", "]", ",", "\n", "sorted_keys", ":", "List", "[", "any", "]", "\n", ")", ":", "\n", "    ", "\"\"\"Sorts the items in the same order as the sorted keys.\n\n    Args:\n        keys:\n            Keys by which items can be identified.\n        items:\n            Items to sort.\n        sorted_keys:\n            Keys in sorted order.\n\n    Returns:\n        The list of sorted items.\n\n    Examples:\n        >>> keys = [3, 2, 1]\n        >>> items = ['!', 'world', 'hello']\n        >>> sorted_keys = [1, 2, 3]\n        >>> sorted_items = sort_items_by_keys(\n        >>>     keys,\n        >>>     items,\n        >>>     sorted_keys,\n        >>> )\n        >>> print(sorted_items)\n        >>> > ['hello', 'world', '!']\n\n    \"\"\"", "\n", "if", "len", "(", "keys", ")", "!=", "len", "(", "items", ")", "or", "len", "(", "keys", ")", "!=", "len", "(", "sorted_keys", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"All inputs (keys,  items and sorted_keys) \"", "\n", "f\"must have the same length, \"", "\n", "f\"but their lengths are: ({len(keys)},\"", "\n", "f\"{len(items)} and {len(sorted_keys)}).\"", ")", "\n", "", "lookup", "=", "{", "key_", ":", "item_", "for", "key_", ",", "item_", "in", "zip", "(", "keys", ",", "items", ")", "}", "\n", "sorted_", "=", "[", "lookup", "[", "key_", "]", "for", "key_", "in", "sorted_keys", "]", "\n", "return", "sorted_", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.GatherLayer.forward": [[14, 20], ["ctx.save_for_backward", "torch.all_gather", "torch.all_gather", "tuple", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "output", "=", "[", "torch", ".", "empty_like", "(", "input", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "output", ",", "input", ")", "\n", "return", "tuple", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.GatherLayer.backward": [[21, 27], ["torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grads", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "(", "input", ",", ")", "=", "ctx", ".", "saved_tensors", "\n", "grad_out", "=", "torch", ".", "empty_like", "(", "input", ")", "\n", "grad_out", "[", ":", "]", "=", "grads", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "return", "grad_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.rank": [[28, 31], ["torch.is_initialized", "torch.get_rank"], "function", ["None"], ["", "", "def", "rank", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"Returns the rank of the current process.\"\"\"", "\n", "return", "dist", ".", "get_rank", "(", ")", "if", "dist", ".", "is_initialized", "(", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.world_size": [[32, 35], ["torch.is_initialized", "torch.get_world_size"], "function", ["None"], ["", "def", "world_size", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"Returns the current world size (number of distributed processes).\"\"\"", "\n", "return", "dist", ".", "get_world_size", "(", ")", "if", "dist", ".", "is_initialized", "(", ")", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather": [[36, 39], ["GatherLayer.apply"], "function", ["None"], ["", "def", "gather", "(", "input", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Gathers this tensor from all processes. Supports backprop.\"\"\"", "\n", "return", "GatherLayer", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.eye_rank": [[41, 67], ["torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "dist.rank", "dist.world_size"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.rank", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.world_size"], ["", "def", "eye_rank", "(", "n", ":", "int", ",", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Returns an (n, n * world_size) zero matrix with the diagonal for the rank\n    of this process set to 1.\n\n    Example output where n=3, the current process has rank 1, and there are \n    4 processes in total:\n\n        rank0   rank1   rank2   rank3\n        0 0 0 | 1 0 0 | 0 0 0 | 0 0 0\n        0 0 0 | 0 1 0 | 0 0 0 | 0 0 0\n        0 0 0 | 0 0 1 | 0 0 0 | 0 0 0\n\n    Equivalent to torch.eye for undistributed settings or if world size == 1.\n\n    Args:\n        n:\n            Size of the square matrix on a single process.\n        device:\n            Device on which the matrix should be created.\n\n    \"\"\"", "\n", "rows", "=", "torch", ".", "arange", "(", "n", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "cols", "=", "rows", "+", "rank", "(", ")", "*", "n", "\n", "diag_mask", "=", "torch", ".", "zeros", "(", "(", "n", ",", "n", "*", "world_size", "(", ")", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "diag_mask", "[", "(", "rows", ",", "cols", ")", "]", "=", "True", "\n", "return", "diag_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.PCA.__init__": [[19, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_components", ":", "int", "=", "2", ",", "eps", ":", "float", "=", "1e-10", ")", ":", "\n", "        ", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "mean", "=", "None", "\n", "self", ".", "w", "=", "None", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.PCA.fit": [[25, 45], ["X.astype.astype.astype", "X.astype.astype.mean", "numpy.linalg.eig", "numpy.cov", "v.argsort"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "fit", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Fits PCA to data in X.\n\n        Args:\n            X:\n                Datapoints stored in numpy array of size n x d.\n\n        Returns:\n            PCA object to transform datapoints.\n\n        \"\"\"", "\n", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "mean", "=", "X", ".", "mean", "(", "axis", "=", "0", ")", "\n", "X", "=", "X", "-", "self", ".", "mean", "+", "self", ".", "eps", "\n", "cov", "=", "np", ".", "cov", "(", "X", ".", "T", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "v", ",", "w", "=", "np", ".", "linalg", ".", "eig", "(", "cov", ")", "\n", "idx", "=", "v", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "v", ",", "w", "=", "v", "[", "idx", "]", ",", "w", "[", ":", ",", "idx", "]", "\n", "self", ".", "w", "=", "w", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.PCA.transform": [[46, 60], ["X.astype.astype.astype", "X.astype.astype.dot"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Uses PCA to transform data in X.\n\n        Args:\n            X:\n                Datapoints stored in numpy array of size n x d.\n\n        Returns:\n            Numpy array of n x p datapoints where p <= d.\n\n        \"\"\"", "\n", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "X", "=", "X", "-", "self", ".", "mean", "+", "self", ".", "eps", "\n", "return", "X", ".", "dot", "(", "self", ".", "w", ")", "[", ":", ",", ":", "self", ".", "n_components", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.fit_pca": [[62, 94], ["embeddings_2d.PCA.fit", "min", "ValueError", "int", "embeddings_2d.PCA", "numpy.random.permutation"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.PCA.fit"], ["", "", "def", "fit_pca", "(", "embeddings", ":", "np", ".", "ndarray", ",", "n_components", ":", "int", "=", "2", ",", "fraction", ":", "float", "=", "None", ")", ":", "\n", "    ", "\"\"\"Fits PCA to randomly selected subset of embeddings.\n\n    For large datasets, it can be unfeasible to perform PCA on the whole data.\n    This method can fit a PCA on a fraction of the embeddings in order to save\n    computational resources.\n\n    Args:\n        embeddings:\n            Datapoints stored in numpy array of size n x d.\n        n_components:\n            Number of principal components to keep.\n        fraction:\n            Fraction of the dataset to fit PCA on.\n\n    Returns:\n        A transformer which can be used to transform embeddings\n        to lower dimensions.\n\n    Raises:\n        ValueError: If fraction < 0 or fraction > 1.\n\n    \"\"\"", "\n", "if", "fraction", "is", "not", "None", ":", "\n", "        ", "if", "fraction", "<", "0.", "or", "fraction", ">", "1.", ":", "\n", "            ", "msg", "=", "f'fraction must be in [0, 1] but was {fraction}.'", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "", "N", "=", "embeddings", ".", "shape", "[", "0", "]", "\n", "n", "=", "N", "if", "fraction", "is", "None", "else", "min", "(", "N", ",", "int", "(", "N", "*", "fraction", ")", ")", "\n", "X", "=", "embeddings", "[", "np", ".", "random", ".", "permutation", "(", "N", ")", "]", "[", ":", "n", "]", "\n", "return", "PCA", "(", "n_components", "=", "n_components", ")", ".", "fit", "(", "X", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction.__init__": [[29, 35], ["keypoint_predictions.KeypointInstancePrediction._format_check"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction._format_check"], ["def", "__init__", "(", "self", ",", "keypoints", ":", "List", "[", "float", "]", ",", "category_id", ":", "int", "=", "-", "1", ",", "\n", "score", ":", "float", "=", "-", "1.", ")", ":", "\n", "        ", "self", ".", "keypoints", "=", "keypoints", "\n", "self", ".", "category_id", "=", "category_id", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "_format_check", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction.from_dict": [[36, 52], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "dict_", ":", "Dict", "[", "str", ",", "Union", "[", "int", ",", "List", "[", "float", "]", ",", "float", "]", "]", ")", ":", "\n", "        ", "\"\"\"Creates a KeypointInstancePrediction from a dictionary.\n\n        Args:\n            dict_:\n                Must be in the Lightly keypoint prediction format and thus\n                contain the keys \"keypoints\", \"category_id\" and \"score\".\n\n        Returns:\n\n        \"\"\"", "\n", "category_id", "=", "dict_", "[", "'category_id'", "]", "\n", "keypoints", "=", "dict_", "[", "'keypoints'", "]", "\n", "score", "=", "dict_", "[", "'score'", "]", "\n", "return", "cls", "(", "keypoints", "=", "keypoints", ",", "category_id", "=", "category_id", ",", "score", "=", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction._format_check": [[53, 71], ["keypoint_predictions.KeypointInstancePrediction.get_confidences", "any", "any", "isinstance", "ValueError", "isinstance", "ValueError", "ValueError", "ValueError", "ValueError", "len", "type", "type"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction.get_confidences", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["", "def", "_format_check", "(", "self", ")", ":", "\n", "        ", "\"\"\"Raises a ValueError if the format is not as required.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "self", ".", "category_id", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Category_id must be an int, but is a {type(self.category_id)}\"", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "score", ",", "float", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Score must be a float, but is a {type(self.score)}\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "keypoints", ")", "%", "3", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Keypoints must be in the format of \"", "\n", "\"[x0, y0, c0, ... xk, yk, ck].\"", ")", "\n", "", "confidences", "=", "self", ".", "get_confidences", "(", ")", "\n", "if", "any", "(", "c", "<", "0", "for", "c", "in", "confidences", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Confidences contain values < 0.\"", ")", "\n", "", "if", "any", "(", "c", ">", "1", "for", "c", "in", "confidences", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Confidences contain values > 1.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction.get_confidences": [[72, 78], ["None"], "methods", ["None"], ["", "", "def", "get_confidences", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "\"\"\"Returns the confidence of each keypoint\n\n        \"\"\"", "\n", "confidences", "=", "self", ".", "keypoints", "[", "2", ":", ":", "3", "]", "\n", "return", "confidences", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointPrediction.__init__": [[90, 95], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "keypoint_instance_predictions", ":", "List", "[", "KeypointInstancePrediction", "]", "\n", ")", ":", "\n", "        ", "self", ".", "keypoint_instance_predictions", "=", "keypoint_instance_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointPrediction.from_dicts": [[96, 114], ["cls", "keypoint_predictions.KeypointInstancePrediction.from_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction.from_dict"], ["", "@", "classmethod", "\n", "def", "from_dicts", "(", "\n", "cls", ",", "\n", "dicts", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "int", ",", "List", "[", "float", "]", ",", "float", "]", "]", "]", "\n", ")", ":", "\n", "        ", "\"\"\" Creates a KeypointPrediction from predictions for each instance.\n\n        Args:\n            dicts:\n                Each element of the list must be\n                in the Lightly keypoint prediction format and thus\n                contain the keys \"keypoints\", \"category_id\" and \"score\".\n\n        \"\"\"", "\n", "keypoint_instance_predictions", "=", "[", "\n", "KeypointInstancePrediction", ".", "from_dict", "(", "dict_", ")", "for", "dict_", "in", "dicts", "\n", "]", "\n", "return", "cls", "(", "keypoint_instance_predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointPrediction.from_json_string": [[115, 128], ["json.loads", "cls.from_dicts"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointPrediction.from_dicts"], ["", "@", "classmethod", "\n", "def", "from_json_string", "(", "cls", ",", "json_string", ":", "str", ")", ":", "\n", "        ", "\"\"\" Creates a KeypointPrediction from predictions for each instance.\n\n        Args:\n            json_string:\n                A string representing a json-encoded list of dictionaries.\n                Each dictionary must be in the Lightly keypoint prediction format\n                and thus contain the keys \"keypoints\", \"category_id\" and \"score\".\n\n        \"\"\"", "\n", "dicts", "=", "json", ".", "loads", "(", "json_string", ")", "\n", "return", "cls", ".", "from_dicts", "(", "dicts", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.__init__": [[48, 74], ["zip", "ValueError", "scores.append", "labels.append", "len", "len", "len", "len", "c.index", "max", "max", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index"], ["def", "__init__", "(", "self", ",", "\n", "boxes", ":", "List", "[", "BoundingBox", "]", ",", "\n", "object_probabilities", ":", "List", "[", "float", "]", ",", "\n", "class_probabilities", ":", "List", "[", "List", "[", "float", "]", "]", ")", ":", "\n", "\n", "        ", "if", "len", "(", "boxes", ")", "!=", "len", "(", "object_probabilities", ")", "or", "len", "(", "object_probabilities", ")", "!=", "len", "(", "class_probabilities", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Boxes, object and class probabilities must be of '", "\n", "f'same length but are {len(boxes)}, '", "\n", "f'{len(object_probabilities)}, and '", "\n", "f'{len(class_probabilities)}'", ")", "\n", "\n", "", "scores", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "o", ",", "c", "in", "zip", "(", "object_probabilities", ",", "class_probabilities", ")", ":", "\n", "# calculate the score as the object probability times the maximum", "\n", "# of the class probabilities", "\n", "            ", "scores", ".", "append", "(", "o", "*", "max", "(", "c", ")", ")", "\n", "# the label is the argmax of the class probabilities", "\n", "labels", ".", "append", "(", "c", ".", "index", "(", "max", "(", "c", ")", ")", ")", "\n", "\n", "", "self", ".", "boxes", "=", "boxes", "\n", "self", ".", "scores", "=", "scores", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "object_probabilities", "=", "object_probabilities", "\n", "self", ".", "class_probabilities", "=", "class_probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores": [[76, 144], ["any", "any", "zip", "cls", "ValueError", "ValueError", "all", "ValueError", "max", "max", "class_probabilities.append", "len", "isinstance"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_scores", "(", "cls", ",", "\n", "boxes", ":", "List", "[", "BoundingBox", "]", ",", "\n", "scores", ":", "List", "[", "float", "]", ",", "\n", "labels", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "\"\"\"Helper to convert from output format with scores.\n\n        We advise not using this method if you want to use the uncertainty\n        active learning scores correctly.\n\n        Since this output format does not provide class probabilities, they\n        will be replaced by a estimated class probability computed by the\n        objectness. The highest class probability matches the label.\n        The objectness will be set to the score for each bounding box.\n\n        Args:\n            boxes:\n                List of BoundingBox objects with coordinates (x0, y0, x1, y1).\n            scores:\n                List of confidence scores (i.e. max(class prob) * objectness).\n            labels:\n                List of labels.\n\n        Examples:\n            >>> # typical model output\n            >>> prediction = {\n            >>>     'boxes': [[0.1, 0.2, 0.3, 0.4]],\n            >>>     'scores': [0.1234],\n            >>>     'labels': [1]\n            >>> }\n            >>>\n            >>> # convert bbox to objects\n            >>> boxes = [BoundingBox(0.1, 0.2, 0.3, 0.4)]\n            >>> scores = prediction['scores']\n            >>> labels = prediction['labels']\n            >>>\n            >>> # create detection output\n            >>> detection_output = ObjectDetectionOutput.from_scores(\n            >>>     boxes, scores, labels)\n\n        \"\"\"", "\n", "\n", "if", "any", "(", "[", "score", ">", "1", "for", "score", "in", "scores", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Scores must be smaller than or equal to one!'", ")", "\n", "\n", "", "if", "any", "(", "[", "score", "<", "0", "for", "score", "in", "scores", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Scores must be larger than or equal to zero!'", ")", "\n", "\n", "", "if", "not", "all", "(", "[", "isinstance", "(", "label", ",", "int", ")", "for", "label", "in", "labels", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Labels must be list of integers.'", ")", "\n", "\n", "# create fake object probabilities", "\n", "", "object_probabilities", "=", "[", "s", "for", "s", "in", "scores", "]", "\n", "\n", "# create one-hot class probabilities", "\n", "max_label", "=", "max", "(", "labels", ")", "if", "len", "(", "labels", ")", ">", "0", "else", "0", "\n", "class_probabilities", "=", "[", "]", "\n", "for", "object_prob", ",", "label", "in", "zip", "(", "object_probabilities", ",", "labels", ")", ":", "\n", "            ", "num_classes", "=", "max", "(", "max_label", ",", "1", ")", "\n", "c", "=", "[", "(", "1", "-", "object_prob", ")", "/", "num_classes", "]", "*", "(", "num_classes", "+", "1", ")", "\n", "c", "[", "label", "]", "=", "object_prob", "\n", "class_probabilities", ".", "append", "(", "c", ")", "\n", "\n", "# create object detection output", "\n", "", "output", "=", "cls", "(", "boxes", ",", "object_probabilities", ",", "class_probabilities", ")", "\n", "output", ".", "scores", "=", "scores", "\n", "output", ".", "labels", "=", "labels", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.__init__": [[36, 74], ["bounding_box.BoundingBox.__init__.clip_to_0_1"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x0", ":", "float", ",", "y0", ":", "float", ",", "x1", ":", "float", ",", "y1", ":", "float", ",", "clip_values", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n            clip_values:\n                Set to true to clip the values into [0, 1] instead of raising an error if they lie outside.\n        \"\"\"", "\n", "\n", "if", "clip_values", ":", "\n", "            ", "def", "clip_to_0_1", "(", "value", ")", ":", "\n", "                ", "return", "min", "(", "1", ",", "max", "(", "0", ",", "value", ")", ")", "\n", "\n", "", "x0", "=", "clip_to_0_1", "(", "x0", ")", "\n", "y0", "=", "clip_to_0_1", "(", "y0", ")", "\n", "x1", "=", "clip_to_0_1", "(", "x1", ")", "\n", "y1", "=", "clip_to_0_1", "(", "y1", ")", "\n", "\n", "", "if", "x0", ">", "1", "or", "x1", ">", "1", "or", "y0", ">", "1", "or", "y1", ">", "1", "or", "x0", "<", "0", "or", "x1", "<", "0", "or", "y0", "<", "0", "or", "y1", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'Bounding Box Coordinates must be relative to '", "\n", "f'image width and height but are ({x0}, {y0}, {x1}, {y1}).'", "\n", ")", "\n", "\n", "", "if", "x0", ">=", "x1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'x0 must be smaller than x1 for bounding box '", "\n", "f'[{x0}, {y0}, {x1}, {y1}]'", "\n", ")", "\n", "\n", "", "if", "y0", ">=", "y1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'y0 must be smaller than y1 for bounding box '", "\n", "f'[{x0}, {y0}, {x1}, {y1}]'", "\n", ")", "\n", "\n", "", "self", ".", "x0", "=", "x0", "\n", "self", ".", "y0", "=", "y0", "\n", "self", ".", "x1", "=", "x1", "\n", "self", ".", "y1", "=", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.from_x_y_w_h": [[75, 84], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_x_y_w_h", "(", "cls", ",", "x", ":", "float", ",", "y", ":", "float", ",", "w", ":", "float", ",", "h", ":", "float", ")", ":", "\n", "        ", "\"\"\"Helper to convert from bounding box format with width and height.\n\n        Examples:\n            >>> bbox = BoundingBox.from_x_y_w_h(0.1, 0.2, 0.2, 0.2)\n\n        \"\"\"", "\n", "return", "cls", "(", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.from_yolo_label": [[85, 95], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_yolo_label", "(", "cls", ",", "x_center", ":", "float", ",", "y_center", ":", "float", ",", "w", ":", "float", ",", "h", ":", "float", ")", ":", "\n", "        ", "\"\"\"Helper to convert from yolo label format\n        x_center, y_center, w, h --> x0, y0, x1, y1\n\n        Examples:\n            >>> bbox = BoundingBox.from_yolo(0.5, 0.4, 0.2, 0.3)\n\n        \"\"\"", "\n", "return", "cls", "(", "x_center", "-", "w", "/", "2", ",", "y_center", "-", "h", "/", "2", ",", "x_center", "+", "w", "/", "2", ",", "y_center", "+", "h", "/", "2", ",", "clip_values", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.width": [[96, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "width", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the width of the bounding box relative to the image size.\n\n        \"\"\"", "\n", "return", "self", ".", "x1", "-", "self", ".", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.height": [[103, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "height", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the height of the bounding box relative to the image size.\n\n        \"\"\"", "\n", "return", "self", ".", "y1", "-", "self", ".", "y0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.area": [[110, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "area", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the area of the bounding box relative to the area of the image.\n\n        \"\"\"", "\n", "return", "self", ".", "width", "*", "self", ".", "height", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug._generate_random_image": [[22, 26], ["PIL.Image.fromarray().convert", "numpy.random.rand", "PIL.Image.fromarray", "array.astype"], "methods", ["None"], ["    ", "def", "_generate_random_image", "(", "self", ",", "w", ":", "int", ",", "h", ":", "int", ",", "c", ":", "int", ")", ":", "\n", "        ", "array", "=", "np", ".", "random", ".", "rand", "(", "h", ",", "w", ",", "c", ")", "*", "255", "\n", "image", "=", "Image", ".", "fromarray", "(", "array", ".", "astype", "(", "'uint8'", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug.test_std_of_l2_normalized_collapsed": [[27, 30], ["torch.ones", "test_debug.TestDebug.assertEqual", "lightly.utils.debug.std_of_l2_normalized"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.std_of_l2_normalized"], ["", "def", "test_std_of_l2_normalized_collapsed", "(", "self", ")", ":", "\n", "        ", "z", "=", "torch", ".", "ones", "(", "BATCH_SIZE", ",", "DIMENSION", ")", "# collapsed output", "\n", "self", ".", "assertEqual", "(", "debug", ".", "std_of_l2_normalized", "(", "z", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug.test_std_of_l2_normalized_uniform": [[31, 36], ["torch.eye", "test_debug.TestDebug.assertLessEqual", "abs", "lightly.utils.debug.std_of_l2_normalized", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.std_of_l2_normalized"], ["", "def", "test_std_of_l2_normalized_uniform", "(", "self", ",", "eps", ":", "float", "=", "1e-5", ")", ":", "\n", "        ", "z", "=", "torch", ".", "eye", "(", "BATCH_SIZE", ")", "\n", "self", ".", "assertLessEqual", "(", "\n", "abs", "(", "debug", ".", "std_of_l2_normalized", "(", "z", ")", "-", "1", "/", "math", ".", "sqrt", "(", "z", ".", "shape", "[", "1", "]", ")", ")", ",", "\n", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug.test_std_of_l2_normalized_raises": [[38, 45], ["torch.zeros", "torch.zeros", "test_debug.TestDebug.assertRaises", "lightly.utils.debug.std_of_l2_normalized", "test_debug.TestDebug.assertRaises", "lightly.utils.debug.std_of_l2_normalized"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.std_of_l2_normalized", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.std_of_l2_normalized"], ["", "def", "test_std_of_l2_normalized_raises", "(", "self", ")", ":", "\n", "        ", "z", "=", "torch", ".", "zeros", "(", "BATCH_SIZE", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "debug", ".", "std_of_l2_normalized", "(", "z", ")", "\n", "", "z", "=", "torch", ".", "zeros", "(", "BATCH_SIZE", ",", "BATCH_SIZE", ",", "DIMENSION", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "debug", ".", "std_of_l2_normalized", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug.test_plot_augmented_images_image_collate_function": [[46, 60], ["unittest.skipUnless", "lightly.data.collate.SimCLRCollateFunction", "range", "test_debug.TestDebug.subTest", "lightly.utils.debug.plot_augmented_images", "test_debug.TestDebug.assertIsNotNone", "test_debug.TestDebug._generate_random_image", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.plot_augmented_images", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug._generate_random_image"], ["", "", "@", "unittest", ".", "skipUnless", "(", "MATPLOTLIB_AVAILABLE", ",", "\"Matplotlib not installed\"", ")", "\n", "def", "test_plot_augmented_images_image_collate_function", "(", "self", ")", ":", "\n", "\n", "# simclr collate function is a subclass of the image collate function", "\n", "        ", "collate_function", "=", "collate", ".", "SimCLRCollateFunction", "(", ")", "\n", "\n", "for", "n_images", "in", "range", "(", "2", ",", "10", ")", ":", "\n", "            ", "with", "self", ".", "subTest", "(", ")", ":", "\n", "                ", "images", "=", "[", "\n", "self", ".", "_generate_random_image", "(", "100", ",", "100", ",", "3", ")", "\n", "for", "_", "in", "range", "(", "n_images", ")", "\n", "]", "\n", "fig", "=", "debug", ".", "plot_augmented_images", "(", "images", ",", "collate_function", ")", "\n", "self", ".", "assertIsNotNone", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug.test_plot_augmented_images_multi_view_collate_function": [[61, 75], ["unittest.skipUnless", "lightly.data.collate.DINOCollateFunction", "range", "test_debug.TestDebug.subTest", "lightly.utils.debug.plot_augmented_images", "test_debug.TestDebug.assertIsNotNone", "test_debug.TestDebug._generate_random_image", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.plot_augmented_images", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug._generate_random_image"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "MATPLOTLIB_AVAILABLE", ",", "\"Matplotlib not installed\"", ")", "\n", "def", "test_plot_augmented_images_multi_view_collate_function", "(", "self", ")", ":", "\n", "\n", "# dion collate function is a subclass of the multi view collate function", "\n", "        ", "collate_function", "=", "collate", ".", "DINOCollateFunction", "(", ")", "\n", "\n", "for", "n_images", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "with", "self", ".", "subTest", "(", ")", ":", "\n", "                ", "images", "=", "[", "\n", "self", ".", "_generate_random_image", "(", "100", ",", "100", ",", "3", ")", "\n", "for", "_", "in", "range", "(", "n_images", ")", "\n", "]", "\n", "fig", "=", "debug", ".", "plot_augmented_images", "(", "images", ",", "collate_function", ")", "\n", "self", ".", "assertIsNotNone", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug.test_plot_augmented_images_no_images": [[76, 81], ["unittest.skipUnless", "lightly.data.collate.SimCLRCollateFunction", "test_debug.TestDebug.assertRaises", "lightly.utils.debug.plot_augmented_images"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.plot_augmented_images"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "MATPLOTLIB_AVAILABLE", ",", "\"Matplotlib not installed\"", ")", "\n", "def", "test_plot_augmented_images_no_images", "(", "self", ")", ":", "\n", "        ", "collate_function", "=", "collate", ".", "SimCLRCollateFunction", "(", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "debug", ".", "plot_augmented_images", "(", "[", "]", ",", "collate_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug.test_plot_augmented_images_invalid_collate_function": [[82, 87], ["unittest.skipUnless", "test_debug.TestDebug._generate_random_image", "test_debug.TestDebug.assertRaises", "lightly.utils.debug.plot_augmented_images"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_debug.TestDebug._generate_random_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.debug.plot_augmented_images"], ["", "", "@", "unittest", ".", "skipUnless", "(", "MATPLOTLIB_AVAILABLE", ",", "\"Matplotlib not installed\"", ")", "\n", "def", "test_plot_augmented_images_invalid_collate_function", "(", "self", ")", ":", "\n", "        ", "images", "=", "[", "self", ".", "_generate_random_image", "(", "100", ",", "100", ",", "3", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "debug", ".", "plot_augmented_images", "(", "images", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_dist.TestDist.test_eye_rank_undist": [[12, 14], ["test_dist.TestDist.assertTrue", "torch.all", "lightly.utils.dist.eye_rank", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.eye_rank"], ["    ", "def", "test_eye_rank_undist", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "dist", ".", "eye_rank", "(", "3", ")", "==", "torch", ".", "eye", "(", "3", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_dist.TestDist.test_eye_rank_dist": [[15, 32], ["torch.zeros().bool", "torch.eye().bool", "range", "torch.zeros", "torch.eye", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "range", "torch.cat.append", "range", "torch.cat", "test_dist.TestDist.assertTrue", "torch.cat.append", "torch.cat.append", "torch.all", "lightly.utils.dist.eye_rank"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.eye_rank"], ["", "def", "test_eye_rank_dist", "(", "self", ")", ":", "\n", "        ", "n", "=", "3", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", ".", "bool", "(", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "n", ")", ".", "bool", "(", ")", "\n", "for", "world_size", "in", "[", "1", ",", "3", "]", ":", "\n", "            ", "for", "rank", "in", "range", "(", "0", ",", "world_size", ")", ":", "\n", "                ", "with", "mock", ".", "patch", "(", "'torch.distributed.is_initialized'", ",", "lambda", ":", "True", ")", ",", "mock", ".", "patch", "(", "'lightly.utils.dist.world_size'", ",", "lambda", ":", "world_size", ")", ",", "mock", ".", "patch", "(", "'lightly.utils.dist.rank'", ",", "lambda", ":", "rank", ")", ":", "\n", "                    ", "expected", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "0", ",", "rank", ")", ":", "\n", "                        ", "expected", ".", "append", "(", "zeros", ")", "\n", "", "expected", ".", "append", "(", "eye", ")", "\n", "for", "_", "in", "range", "(", "rank", ",", "world_size", "-", "1", ")", ":", "\n", "                        ", "expected", ".", "append", "(", "zeros", ")", "\n", "", "expected", "=", "torch", ".", "cat", "(", "expected", ",", "dim", "=", "1", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "dist", ".", "eye_rank", "(", "n", ")", "==", "expected", ")", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestCLICrop.setUpClass": [[16, 19], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "sys", ".", "modules", "[", "\"lightly.cli.upload_cli\"", "]", ".", "ApiWorkflowClient", "=", "MockedApiWorkflowClient", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestCLICrop.test_save_metadata": [[20, 24], ["tempfile.mktemp", "lightly.utils.save_custom_metadata"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_custom_metadata"], ["", "def", "test_save_metadata", "(", "self", ")", ":", "\n", "        ", "metadata", "=", "[", "(", "\"filename.jpg\"", ",", "{", "\"random_metadata\"", ":", "42", "}", ")", "]", "\n", "metadata_filepath", "=", "tempfile", ".", "mktemp", "(", "'.json'", ",", "'metadata'", ")", "\n", "save_custom_metadata", "(", "metadata_filepath", ",", "metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestCLICrop.test_valid_filenames": [[25, 41], ["test_io.TestCLICrop.subTest", "lightly.utils.io.check_filenames", "test_io.TestCLICrop.assertRaises", "lightly.utils.io.check_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_filenames"], ["", "def", "test_valid_filenames", "(", "self", ")", ":", "\n", "        ", "valid", "=", "'img.png'", "\n", "non_valid", "=", "'img,1.png'", "\n", "filenames_list", "=", "[", "\n", "(", "[", "valid", "]", ",", "True", ")", ",", "\n", "(", "[", "valid", ",", "valid", "]", ",", "True", ")", ",", "\n", "(", "[", "non_valid", "]", ",", "False", ")", ",", "\n", "(", "[", "valid", ",", "non_valid", "]", ",", "False", ")", ",", "\n", "]", "\n", "for", "filenames", ",", "valid", "in", "filenames_list", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "msg", "=", "f\"filenames:{filenames}\"", ")", ":", "\n", "                ", "if", "valid", ":", "\n", "                    ", "check_filenames", "(", "filenames", ")", "\n", "", "else", ":", "\n", "                    ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                        ", "check_filenames", "(", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.setUp": [[44, 51], ["tempfile.mktemp", "numpy.random.rand", "lightly.utils.io.save_embeddings", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_embeddings"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# correct embedding file as created through lightly", "\n", "        ", "self", ".", "embeddings_path", "=", "tempfile", ".", "mktemp", "(", "'.csv'", ",", "'embeddings'", ")", "\n", "embeddings", "=", "np", ".", "random", ".", "rand", "(", "32", ",", "2", ")", "\n", "labels", "=", "[", "0", "for", "i", "in", "range", "(", "len", "(", "embeddings", ")", ")", "]", "\n", "filenames", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "len", "(", "embeddings", ")", ")", "]", "\n", "save_embeddings", "(", "self", ".", "embeddings_path", ",", "embeddings", ",", "labels", ",", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_valid_embeddings": [[52, 54], ["lightly.utils.io.check_embeddings"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings"], ["", "def", "test_valid_embeddings", "(", "self", ")", ":", "\n", "        ", "check_embeddings", "(", "self", ".", "embeddings_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_whitespace_in_embeddings": [[55, 64], ["test_io.TestEmbeddingsIO.assertTrue", "open", "f.writelines", "test_io.TestEmbeddingsIO.assertRaises", "lightly.utils.io.check_embeddings", "str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings"], ["", "def", "test_whitespace_in_embeddings", "(", "self", ")", ":", "\n", "# should fail because there whitespaces in the header columns", "\n", "        ", "lines", "=", "[", "'filenames, embedding_0,embedding_1,labels\\n'", ",", "\n", "'img_1.jpg, 0.351,0.1231'", "]", "\n", "with", "open", "(", "self", ".", "embeddings_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "lines", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", "as", "context", ":", "\n", "            ", "check_embeddings", "(", "self", ".", "embeddings_path", ")", "\n", "", "self", ".", "assertTrue", "(", "'must not contain whitespaces'", "in", "str", "(", "context", ".", "exception", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_no_labels_in_embeddings": [[65, 74], ["test_io.TestEmbeddingsIO.assertTrue", "open", "f.writelines", "test_io.TestEmbeddingsIO.assertRaises", "lightly.utils.io.check_embeddings", "str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings"], ["", "def", "test_no_labels_in_embeddings", "(", "self", ")", ":", "\n", "# should fail because there is no `labels` column in the header", "\n", "        ", "lines", "=", "[", "'filenames,embedding_0,embedding_1\\n'", ",", "\n", "'img_1.jpg,0.351,0.1231'", "]", "\n", "with", "open", "(", "self", ".", "embeddings_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "lines", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", "as", "context", ":", "\n", "            ", "check_embeddings", "(", "self", ".", "embeddings_path", ")", "\n", "", "self", ".", "assertTrue", "(", "'has no `labels` column'", "in", "str", "(", "context", ".", "exception", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_no_empty_rows_in_embeddings": [[75, 85], ["test_io.TestEmbeddingsIO.assertTrue", "open", "f.writelines", "test_io.TestEmbeddingsIO.assertRaises", "lightly.utils.io.check_embeddings", "str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings"], ["", "def", "test_no_empty_rows_in_embeddings", "(", "self", ")", ":", "\n", "# should fail because there are empty rows in the embeddings file", "\n", "        ", "lines", "=", "[", "'filenames,embedding_0,embedding_1,labels\\n'", ",", "\n", "'img_1.jpg,0.351,0.1231\\n\\n'", "\n", "'img_2.jpg,0.311,0.6231'", "]", "\n", "with", "open", "(", "self", ".", "embeddings_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "lines", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", "as", "context", ":", "\n", "            ", "check_embeddings", "(", "self", ".", "embeddings_path", ")", "\n", "", "self", ".", "assertTrue", "(", "'must not have empty rows'", "in", "str", "(", "context", ".", "exception", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_embeddings_extra_rows": [[86, 103], ["lightly.utils.io.check_embeddings", "open", "csv.writer", "csv.writer.writerows", "open", "csv.reader", "zip", "test_io.TestEmbeddingsIO.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings"], ["", "def", "test_embeddings_extra_rows", "(", "self", ")", ":", "\n", "        ", "rows", "=", "[", "\n", "[", "'filenames'", ",", "'embedding_0'", ",", "'embedding_1'", ",", "'labels'", ",", "'selected'", ",", "\n", "'masked'", "]", ",", "\n", "[", "'image_0.jpg'", ",", "'3.4'", ",", "'0.23'", ",", "'0'", ",", "'1'", ",", "'0'", "]", ",", "\n", "[", "'image_1.jpg'", ",", "'3.4'", ",", "'0.23'", ",", "'1'", ",", "'0'", ",", "'1'", "]", "\n", "]", "\n", "with", "open", "(", "self", ".", "embeddings_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "csv_writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "csv_writer", ".", "writerows", "(", "rows", ")", "\n", "\n", "", "check_embeddings", "(", "self", ".", "embeddings_path", ",", "remove_additional_columns", "=", "True", ")", "\n", "\n", "with", "open", "(", "self", ".", "embeddings_path", ")", "as", "csv_file", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "for", "row_read", ",", "row_original", "in", "zip", "(", "csv_reader", ",", "rows", ")", ":", "\n", "                ", "self", ".", "assertListEqual", "(", "row_read", ",", "row_original", "[", ":", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_embeddings_extra_rows_special_order": [[104, 125], ["lightly.utils.io.check_embeddings", "open", "csv.writer", "csv.writer.writerows", "open", "csv.reader", "zip", "test_io.TestEmbeddingsIO.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings"], ["", "", "", "def", "test_embeddings_extra_rows_special_order", "(", "self", ")", ":", "\n", "        ", "input_rows", "=", "[", "\n", "[", "'filenames'", ",", "'embedding_0'", ",", "'embedding_1'", ",", "'masked'", ",", "'labels'", ",", "'selected'", "]", ",", "\n", "[", "'image_0.jpg'", ",", "'3.4'", ",", "'0.23'", ",", "'0'", ",", "'1'", ",", "'0'", "]", ",", "\n", "[", "'image_1.jpg'", ",", "'3.4'", ",", "'0.23'", ",", "'1'", ",", "'0'", ",", "'1'", "]", "\n", "]", "\n", "correct_output_rows", "=", "[", "\n", "[", "'filenames'", ",", "'embedding_0'", ",", "'embedding_1'", ",", "'labels'", "]", ",", "\n", "[", "'image_0.jpg'", ",", "'3.4'", ",", "'0.23'", ",", "'1'", "]", ",", "\n", "[", "'image_1.jpg'", ",", "'3.4'", ",", "'0.23'", ",", "'0'", "]", "\n", "]", "\n", "with", "open", "(", "self", ".", "embeddings_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "csv_writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "csv_writer", ".", "writerows", "(", "input_rows", ")", "\n", "\n", "", "check_embeddings", "(", "self", ".", "embeddings_path", ",", "remove_additional_columns", "=", "True", ")", "\n", "\n", "with", "open", "(", "self", ".", "embeddings_path", ")", "as", "csv_file", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "for", "row_read", ",", "row_original", "in", "zip", "(", "csv_reader", ",", "correct_output_rows", ")", ":", "\n", "                ", "self", ".", "assertListEqual", "(", "row_read", ",", "row_original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_save_tasks": [[126, 137], ["test_io.TestEmbeddingsIO.assertListEqual", "tempfile.NamedTemporaryFile", "lightly.utils.io.save_tasks", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_tasks"], ["", "", "", "def", "test_save_tasks", "(", "self", ")", ":", "\n", "        ", "tasks", "=", "[", "\n", "'task1'", ",", "\n", "'task2'", ",", "\n", "'task3'", ",", "\n", "]", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.json'", ")", "as", "file", ":", "\n", "            ", "save_tasks", "(", "file", ".", "name", ",", "tasks", ")", "\n", "with", "open", "(", "file", ".", "name", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "loaded", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "self", ".", "assertListEqual", "(", "tasks", ",", "loaded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_save_schema": [[138, 168], ["test_io.TestEmbeddingsIO.assertListEqual", "tempfile.NamedTemporaryFile", "lightly.utils.io.save_schema", "sorted", "sorted", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_schema"], ["", "def", "test_save_schema", "(", "self", ")", ":", "\n", "        ", "description", "=", "'classification'", "\n", "ids", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "names", "=", "[", "'name1'", ",", "'name2'", ",", "'name3'", ",", "'name4'", "]", "\n", "expected_format", "=", "{", "\n", "'task_type'", ":", "'classification'", ",", "\n", "'categories'", ":", "[", "\n", "{", "\n", "'id'", ":", "1", ",", "\n", "'name'", ":", "'name1'", "\n", "}", ",", "\n", "{", "\n", "'id'", ":", "2", ",", "\n", "'name'", ":", "'name2'", "\n", "}", ",", "\n", "{", "\n", "'id'", ":", "3", ",", "\n", "'name'", ":", "'name3'", "\n", "}", ",", "\n", "{", "\n", "'id'", ":", "4", ",", "\n", "'name'", ":", "'name4'", "\n", "}", ",", "\n", "]", "\n", "}", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.json'", ")", "as", "file", ":", "\n", "            ", "save_schema", "(", "file", ".", "name", ",", "description", ",", "ids", ",", "names", ")", "\n", "with", "open", "(", "file", ".", "name", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "loaded", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "self", ".", "assertListEqual", "(", "sorted", "(", "expected_format", ")", ",", "sorted", "(", "loaded", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_io.TestEmbeddingsIO.test_save_schema_different": [[169, 176], ["test_io.TestEmbeddingsIO.assertRaises", "lightly.utils.io.save_schema"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_schema"], ["", "def", "test_save_schema_different", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "save_schema", "(", "\n", "'name_doesnt_matter'", ",", "\n", "'description_doesnt_matter'", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "'name1'", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_version_compare.TestVersionCompare.test_valid_versions": [[8, 20], ["test_version_compare.TestVersionCompare.assertEqual", "test_version_compare.TestVersionCompare.assertEqual", "test_version_compare.TestVersionCompare.assertEqual", "test_version_compare.TestVersionCompare.assertEqual", "test_version_compare.TestVersionCompare.assertEqual", "lightly.utils.version_compare", "lightly.utils.version_compare", "lightly.utils.version_compare", "lightly.utils.version_compare", "lightly.utils.version_compare"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare"], ["    ", "def", "test_valid_versions", "(", "self", ")", ":", "\n", "\n", "# general test of smaller than version numbers", "\n", "        ", "self", ".", "assertEqual", "(", "version_compare", "(", "'0.1.4'", ",", "'1.2.0'", ")", ",", "-", "1", ")", "\n", "self", ".", "assertEqual", "(", "version_compare", "(", "'1.1.0'", ",", "'1.2.0'", ")", ",", "-", "1", ")", "\n", "\n", "# test bigger than", "\n", "self", ".", "assertEqual", "(", "version_compare", "(", "'1.2.0'", ",", "'1.1.0'", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "version_compare", "(", "'1.2.0'", ",", "'0.1.4'", ")", ",", "1", ")", "\n", "\n", "# test equal", "\n", "self", ".", "assertEqual", "(", "version_compare", "(", "'1.2.0'", ",", "'1.2.0'", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.test_version_compare.TestVersionCompare.test_invalid_versions": [[22, 35], ["test_version_compare.TestVersionCompare.assertRaises", "lightly.utils.version_compare", "test_version_compare.TestVersionCompare.assertRaises", "lightly.utils.version_compare", "test_version_compare.TestVersionCompare.assertRaises", "test_version_compare.TestVersionCompare.assertEqual", "test_version_compare.TestVersionCompare.assertRaises", "test_version_compare.TestVersionCompare.assertEqual", "lightly.utils.version_compare", "lightly.utils.version_compare"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare"], ["", "def", "test_invalid_versions", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "version_compare", "(", "'1.2'", ",", "'1.1.0'", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "version_compare", "(", "'1.2.0.1'", ",", "'1.1.0'", ")", "\n", "\n", "# test within same minor version and with special cases", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "version_compare", "(", "'1.0.7'", ",", "'1.1.0.dev1'", ")", ",", "-", "1", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "version_compare", "(", "'1.1.0.dev1'", ",", "'1.1.0rc1'", ")", ",", "-", "1", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save": [[13, 99], ["dataset.get_filenames", "print", "tqdm.tqdm", "ValueError", "zip", "dataset.get_filepath_from_filename", "os.path.splitext", "os.path.join().replace", "pathlib.Path().mkdir", "PIL.Image.open", "enumerate", "cropped_image_filepath_list_list.append", "len", "len", "len", "len", "warnings.warn", "zip", "os.path.join", "tuple", "Image.open.crop", "image.crop.save", "os.path.join", "cropped_images_filepaths.append", "len", "len", "len", "UserWarning", "os.path.join", "pathlib.Path", "filename_image.replace", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.get_filepath_from_filename"], ["def", "crop_dataset_by_bounding_boxes_and_save", "(", "dataset", ":", "LightlyDataset", ",", "\n", "output_dir", ":", "str", ",", "\n", "bounding_boxes_list_list", ":", "List", "[", "List", "[", "BoundingBox", "]", "]", ",", "\n", "class_indices_list_list", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "class_names", ":", "List", "[", "str", "]", "=", "None", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"Crops all images in a dataset by the bounding boxes and saves them in the output dir\n\n    Args:\n        dataset:\n            The dataset with the images to be cropped. Must contain M images.\n        output_dir:\n            The output directory to saved the cropped images to.\n        bounding_boxes_list_list:\n            The bounding boxes of the detections for each image. Must have M sublists, one for each image.\n            Each sublist contains the bounding boxes for each detection, thus N_m elements.\n        class_indices_list_list:\n            The object class ids of the detections for each image. Must have M sublists, one for each image.\n            Each sublist contains the bounding boxes for each detection, thus N_m elements.\n        class_names:\n            The names of the classes, used to map the class id to the class name.\n\n\n    Returns:\n        The filepaths to all saved cropped images. Has M sublists, one for each image.\n        Each sublist contains the filepath of the crop each detection, thus N_m elements.\n\n    \"\"\"", "\n", "filenames_images", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "if", "len", "(", "filenames_images", ")", "!=", "len", "(", "bounding_boxes_list_list", ")", "or", "len", "(", "filenames_images", ")", "!=", "len", "(", "class_indices_list_list", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"There must be one bounding box and class index list for each image in the datasets,\"", "\n", "\"but the lengths dont align.\"", ")", "\n", "\n", "", "cropped_image_filepath_list_list", ":", "List", "[", "List", "[", "str", "]", "]", "=", "[", "]", "\n", "\n", "\n", "print", "(", "f\"Cropping objects out of {len(filenames_images)} images...\"", ")", "\n", "for", "filename_image", ",", "class_indices", ",", "bounding_boxes", "in", "tqdm", "(", "zip", "(", "filenames_images", ",", "class_indices_list_list", ",", "bounding_boxes_list_list", ")", ")", ":", "\n", "\n", "        ", "if", "not", "len", "(", "class_indices", ")", "==", "len", "(", "bounding_boxes", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "UserWarning", "(", "f\"Length of class indices ({len(class_indices)} does not equal length of bounding boxes\"", "\n", "f\"({len(bounding_boxes)}. This is an error in the input arguments. \"", "\n", "f\"Skipping this image {filename_image}.\"", ")", ")", "\n", "continue", "\n", "\n", "", "filepath_image", "=", "dataset", ".", "get_filepath_from_filename", "(", "filename_image", ")", "\n", "filepath_image_base", ",", "image_extension", "=", "os", ".", "path", ".", "splitext", "(", "filepath_image", ")", "\n", "\n", "filepath_out_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename_image", ")", ".", "replace", "(", "image_extension", ",", "''", ")", "\n", "Path", "(", "filepath_out_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "image", "=", "Image", ".", "open", "(", "filepath_image", ")", "\n", "\n", "cropped_images_filepaths", "=", "[", "]", "\n", "# For every image, crop out multiple cropped images, one for each", "\n", "# bounding box", "\n", "for", "index", ",", "(", "class_index", ",", "bbox", ")", "in", "enumerate", "(", "(", "zip", "(", "class_indices", ",", "bounding_boxes", ")", ")", ")", ":", "\n", "\n", "# determine the filename and filepath of the cropped image", "\n", "            ", "if", "class_names", ":", "\n", "                ", "class_name", "=", "class_names", "[", "class_index", "]", "\n", "", "else", ":", "\n", "                ", "class_name", "=", "f\"class{class_index}\"", "\n", "", "cropped_image_last_filename", "=", "f'{index}_{class_name}{image_extension}'", "\n", "cropped_image_filepath", "=", "os", ".", "path", ".", "join", "(", "filepath_out_dir", ",", "cropped_image_last_filename", ")", "\n", "\n", "# crop out the image and save it", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "crop_box", "=", "(", "w", "*", "bbox", ".", "x0", ",", "h", "*", "bbox", ".", "y0", ",", "w", "*", "bbox", ".", "x1", ",", "h", "*", "bbox", ".", "y1", ")", "\n", "crop_box", "=", "tuple", "(", "int", "(", "i", ")", "for", "i", "in", "crop_box", ")", "\n", "cropped_image", "=", "image", ".", "crop", "(", "crop_box", ")", "\n", "cropped_image", ".", "save", "(", "cropped_image_filepath", ")", "\n", "\n", "# add the filename of the cropped image to the corresponding list", "\n", "cropped_image_filename", ":", "str", "=", "os", ".", "path", ".", "join", "(", "\n", "filename_image", ".", "replace", "(", "image_extension", ",", "''", ")", ",", "\n", "cropped_image_last_filename", "\n", ")", "\n", "cropped_images_filepaths", ".", "append", "(", "cropped_image_filename", ")", "\n", "\n", "", "cropped_image_filepath_list_list", ".", "append", "(", "cropped_images_filepaths", ")", "\n", "\n", "", "return", "cropped_image_filepath_list_list", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.read_yolo_label_file.read_yolo_label_file": [[6, 39], ["open", "f.readlines", "line.split", "int", "class_indices.append", "lightly.active_learning.utils.BoundingBox.from_yolo_label", "bounding_boxes.append", "float"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.from_yolo_label"], ["def", "read_yolo_label_file", "(", "filepath", ":", "str", ",", "padding", ":", "float", ",", "separator", ":", "str", "=", "' '", ")", "->", "Tuple", "[", "List", "[", "int", "]", ",", "List", "[", "BoundingBox", "]", "]", ":", "\n", "    ", "\"\"\"Reads a file in the yolo file format\n\n    Args:\n        filepath:\n            The path to the yolo file, usually a .txt file.\n        padding:\n            The relative passepartout / padding to be added around the bounding box\n        separator:\n            The separator character between the 5 values (class id, x, y, w, h) per row in the label file.\n\n    Returns:\n        Two lists, each with one element per row in the label file:\n            The class indices.\n            The bounding boxes.\n\n    \"\"\"", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "class_indices", "=", "[", "]", "\n", "bounding_boxes", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "values", "=", "line", ".", "split", "(", "sep", "=", "separator", ")", "\n", "class_id", ",", "x_norm", ",", "y_norm", ",", "w_norm", ",", "h_norm", "=", "(", "float", "(", "val", ")", "for", "val", "in", "values", ")", "\n", "class_id", "=", "int", "(", "class_id", ")", "\n", "class_indices", ".", "append", "(", "class_id", ")", "\n", "\n", "w_norm", "*=", "1", "+", "padding", "\n", "h_norm", "*=", "1", "+", "padding", "\n", "bbox", "=", "BoundingBox", ".", "from_yolo_label", "(", "x_norm", ",", "y_norm", ",", "w_norm", ",", "h_norm", ")", "\n", "bounding_boxes", ".", "append", "(", "bbox", ")", "\n", "", "return", "class_indices", ",", "bounding_boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.validate_cfg": [[21, 41], ["lightly.cli._helpers.print_as_warning"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning"], ["def", "validate_cfg", "(", "cfg", ":", "DictConfig", ")", "->", "bool", ":", "\n", "    ", "\"\"\" Validates a config\n\n    Prints warnings if it is not.\n    Args:\n        cfg:\n            The hydra config object\n\n    Returns:\n        Wether the config is valid\n\n    \"\"\"", "\n", "valid", "=", "True", "\n", "if", "cfg", "[", "'trainer'", "]", "[", "'max_epochs'", "]", ">", "0", "and", "cfg", "[", "'append'", "]", ":", "\n", "        ", "print_as_warning", "(", "'When appending to an existing dataset you must '", "\n", "'use the same embedding model. Thus specify '", "\n", "'trainer.max_epochs=0. If you had trained your own model, '", "\n", "'you can use it with checkpoint=\"path/to/model.ckp\".'", ")", "\n", "valid", "=", "False", "\n", "", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli._lightly_cli": [[43, 69], ["print", "lightly.cli.embed_cli._embed_cli", "print", "lightly_cli.validate_cfg", "print", "lightly.cli.train_cli._train_cli", "print", "lightly.cli.upload_cli._upload_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli._embed_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.validate_cfg", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli._train_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli._upload_cli"], ["", "def", "_lightly_cli", "(", "cfg", ",", "is_cli_call", "=", "True", ")", ":", "\n", "    ", "cfg", "[", "'loader'", "]", "[", "'shuffle'", "]", "=", "True", "\n", "cfg", "[", "'loader'", "]", "[", "'drop_last'", "]", "=", "True", "\n", "\n", "if", "not", "validate_cfg", "(", "cfg", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "cfg", "[", "'trainer'", "]", "[", "'max_epochs'", "]", ">", "0", ":", "\n", "        ", "print", "(", "'#'", "*", "10", "+", "' Starting to train an embedding model.'", ")", "\n", "checkpoint", "=", "_train_cli", "(", "cfg", ",", "is_cli_call", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "''", "\n", "\n", "", "cfg", "[", "'loader'", "]", "[", "'shuffle'", "]", "=", "False", "\n", "cfg", "[", "'loader'", "]", "[", "'drop_last'", "]", "=", "False", "\n", "cfg", "[", "'checkpoint'", "]", "=", "checkpoint", "\n", "\n", "print", "(", "'#'", "*", "10", "+", "' Starting to embed your dataset.'", ")", "\n", "embeddings", "=", "_embed_cli", "(", "cfg", ",", "is_cli_call", ")", "\n", "cfg", "[", "'embeddings'", "]", "=", "embeddings", "\n", "\n", "if", "cfg", "[", "'token'", "]", "and", "(", "cfg", "[", "'dataset_id'", "]", "or", "cfg", "[", "'new_dataset_name'", "]", ")", ":", "\n", "        ", "print", "(", "'#'", "*", "10", "+", "' Starting to upload your dataset to the Lightly platform.'", ")", "\n", "_upload_cli", "(", "cfg", ")", "\n", "\n", "", "print", "(", "'#'", "*", "10", "+", "' Finished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.lightly_cli": [[71, 116], ["hydra.main", "lightly_cli._lightly_cli", "lightly.cli._helpers.fix_hydra_arguments"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli._lightly_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments"], ["", "@", "hydra", ".", "main", "(", "**", "fix_hydra_arguments", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", ")", "\n", "def", "lightly_cli", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Train a self-supervised model and use it to embed your dataset.\n\n    Args:\n        cfg:\n            The default configs are loaded from the config file.\n            To overwrite them please see the section on the config file \n            (.config.config.yaml).\n    \n    Command-Line Args:\n        input_dir:\n            Path to the input directory where images are stored.\n        token:\n            User access token to the Lightly platform. If dataset_id\n            and token are specified, the images and embeddings are \n            uploaded to the platform.\n            (Required for upload)\n        dataset_id:\n            Identifier of the dataset on the Lightly platform. If \n            dataset_id and token are specified, the images and \n            embeddings are uploaded to the platform.\n            (Required for upload)\n        custom_metadata:\n            Path to a .json file containing custom metadata. The file must be in\n            the COCO annotations (although annotations can be empty) format and\n            contain an additional field `metadata` storing a list of metadata entries.\n            The metadata entries are matched with the images via `image_id`.\n\n    Examples:\n        >>> #\u00a0train model and embed images with default settings\n        >>> lightly-magic input_dir=data/\n        >>>\n        >>> # train model for 10 epochs and embed images\n        >>> lightly-magic input_dir=data/ trainer.max_epochs=10\n        >>>\n        >>> # train model, embed images, and upload to the Lightly platform\n        >>> lightly-magic input_dir=data/ token='123' dataset_id='XYZ'\n        >>>\n        >>> # upload images, embeddings, and custom metadata\n        >>> lightly-magic input_dir=data/ token='123' dataset_id='XYZ' custom_metadata=custom_metadata.json\n\n\n    \"\"\"", "\n", "return", "_lightly_cli", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.entry": [[118, 120], ["lightly_cli.lightly_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.lightly_cli"], ["", "def", "entry", "(", ")", ":", "\n", "    ", "lightly_cli", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers._custom_formatwarning": [[25, 28], ["None"], "function", ["None"], ["def", "_custom_formatwarning", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# ignore everything except the message", "\n", "    ", "return", "f\"{bcolors.WARNING}{msg}{bcolors.WARNING}\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning": [[30, 37], ["copy.copy", "warnings.warn"], "function", ["None"], ["", "def", "print_as_warning", "(", "message", ":", "str", ",", "warning_class", ":", "Type", "[", "Warning", "]", "=", "UserWarning", ")", ":", "\n", "    ", "old_format", "=", "copy", ".", "copy", "(", "warnings", ".", "formatwarning", ")", "\n", "\n", "warnings", ".", "formatwarning", "=", "_custom_formatwarning", "\n", "warnings", ".", "warn", "(", "message", ",", "warning_class", ")", "\n", "\n", "warnings", ".", "formatwarning", "=", "old_format", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.cpu_count": [[39, 46], ["os.cpu_count"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.cpu_count"], ["", "def", "cpu_count", "(", ")", ":", "\n", "    ", "\"\"\"Returns the number of CPUs which are present in the system.\n\n    This number is not equivalent to the number of available CPUs to the process.\n\n    \"\"\"", "\n", "return", "os", ".", "cpu_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path": [[48, 55], ["os.path.isabs", "hydra.utils.to_absolute_path"], "function", ["None"], ["", "def", "fix_input_path", "(", "path", ")", ":", "\n", "    ", "\"\"\"Fix broken relative paths.\n\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "path", ")", ":", "\n", "        ", "path", "=", "utils", ".", "to_absolute_path", "(", "path", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments": [[57, 73], ["lightly.utils.version_compare"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare"], ["", "def", "fix_hydra_arguments", "(", "config_path", ":", "str", "=", "'config'", ",", "config_name", ":", "str", "=", "'config'", ")", ":", "\n", "    ", "\"\"\"Helper to make hydra arugments adaptive to installed hydra version\n    \n    Hydra introduced the `version_base` argument in version 1.2.0\n    We use this helper to provide backwards compatibility to older hydra verisons.    \n    \"\"\"", "\n", "\n", "hydra_args", "=", "{", "'config_path'", ":", "config_path", ",", "'config_name'", ":", "config_name", "}", "\n", "\n", "try", ":", "\n", "        ", "if", "version_compare", "(", "hydra", ".", "__version__", ",", "'1.1.2'", ")", ">", "0", ":", "\n", "            ", "hydra_args", "[", "'version_base'", "]", "=", "'1.1'", "\n", "", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "hydra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.is_url": [[75, 81], ["None"], "function", ["None"], ["", "def", "is_url", "(", "checkpoint", ")", ":", "\n", "    ", "\"\"\"Check whether the checkpoint is a url or not.\n\n    \"\"\"", "\n", "is_url", "=", "(", "'https://storage.googleapis.com'", "in", "checkpoint", ")", "\n", "return", "is_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.get_ptmodel_from_config": [[83, 96], ["str", "str", "lightly.models.ZOO.keys", "float"], "function", ["None"], ["", "def", "get_ptmodel_from_config", "(", "model", ")", ":", "\n", "    ", "\"\"\"Get a pre-trained model from the lightly model zoo.\n\n    \"\"\"", "\n", "key", "=", "model", "[", "'name'", "]", "\n", "key", "+=", "'/simclr'", "\n", "key", "+=", "'/d'", "+", "str", "(", "model", "[", "'num_ftrs'", "]", ")", "\n", "key", "+=", "'/w'", "+", "str", "(", "float", "(", "model", "[", "'width'", "]", ")", ")", "\n", "\n", "if", "key", "in", "model_zoo", ".", "keys", "(", ")", ":", "\n", "        ", "return", "model_zoo", "[", "key", "]", ",", "key", "\n", "", "else", ":", "\n", "        ", "return", "''", ",", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_state_dict_from_url": [[98, 122], ["torch.hub.load_state_dict_from_url", "url.replace.replace", "torch.hub.load_state_dict_from_url", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_state_dict_from_url", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_state_dict_from_url"], ["", "", "def", "load_state_dict_from_url", "(", "url", ",", "map_location", "=", "None", ")", ":", "\n", "    ", "\"\"\"Try to load the checkopint from the given url.\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "map_location", "=", "map_location", "\n", ")", "\n", "return", "state_dict", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "'Not able to load state dict from %s'", "%", "(", "url", ")", ")", "\n", "print", "(", "'Retrying with http:// prefix'", ")", "\n", "", "try", ":", "\n", "        ", "url", "=", "url", ".", "replace", "(", "'https'", ",", "'http'", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "map_location", "=", "map_location", "\n", ")", "\n", "return", "state_dict", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "'Not able to load state dict from %s'", "%", "(", "url", ")", ")", "\n", "\n", "# in this case downloading the pre-trained model was not possible", "\n", "# notify the user and return", "\n", "", "return", "{", "'state_dict'", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers._maybe_expand_batchnorm_weights": [[124, 148], ["model_dict.items", "state_dict.get", "state_dict.get.repeat"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "def", "_maybe_expand_batchnorm_weights", "(", "model_dict", ",", "state_dict", ",", "num_splits", ")", ":", "\n", "    ", "\"\"\"Expands the weights of the BatchNorm2d to the size of SplitBatchNorm.\n\n    \"\"\"", "\n", "running_mean", "=", "'running_mean'", "\n", "running_var", "=", "'running_var'", "\n", "\n", "for", "key", ",", "item", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "# not batchnorm -> continue", "\n", "        ", "if", "not", "running_mean", "in", "key", "and", "not", "running_var", "in", "key", ":", "\n", "            ", "continue", "\n", "\n", "", "state", "=", "state_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "# not in dict -> continue", "\n", "if", "state", "is", "None", ":", "\n", "            ", "continue", "\n", "# same shape -> continue", "\n", "", "if", "item", ".", "shape", "==", "state", ".", "shape", ":", "\n", "            ", "continue", "\n", "\n", "# found running mean or running var with different shapes", "\n", "", "state_dict", "[", "key", "]", "=", "state", ".", "repeat", "(", "num_splits", ")", "\n", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers._filter_state_dict": [[150, 174], ["state_dict.items", "key.split"], "function", ["None"], ["", "def", "_filter_state_dict", "(", "state_dict", ",", "remove_model_prefix_offset", ":", "int", "=", "1", ")", ":", "\n", "    ", "\"\"\"Makes the state_dict compatible with the model.\n    \n    Prevents unexpected key error when loading PyTorch-Lightning checkpoints.\n    Allows backwards compatability to checkpoints before v1.0.6.\n\n    \"\"\"", "\n", "\n", "prev_backbone", "=", "'features'", "\n", "curr_backbone", "=", "'backbone'", "\n", "\n", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "item", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "# remove the \"model.\" prefix from the state dict key", "\n", "        ", "key_parts", "=", "key", ".", "split", "(", "'.'", ")", "[", "remove_model_prefix_offset", ":", "]", "\n", "# with v1.0.6 the backbone of the models will be renamed from", "\n", "# \"features\" to \"backbone\", ensure compatability with old ckpts", "\n", "key_parts", "=", "[", "k", "if", "k", "!=", "prev_backbone", "else", "curr_backbone", "for", "k", "in", "key_parts", "]", "\n", "\n", "new_key", "=", "'.'", ".", "join", "(", "key_parts", ")", "\n", "new_state_dict", "[", "new_key", "]", "=", "item", "\n", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers._fix_projection_head_keys": [[176, 205], ["state_dict.items", "key.split", "key.split.insert"], "function", ["None"], ["", "def", "_fix_projection_head_keys", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"Makes the state_dict compatible with the refactored projection heads.\n\n    TODO: Remove once the models are refactored and the old checkpoints were\n    replaced! Relevant issue: https://github.com/lightly-ai/lightly/issues/379\n\n    Prevents unexpected key error when loading old checkpoints.\n    \n    \"\"\"", "\n", "\n", "projection_head_identifier", "=", "'projection_head'", "\n", "prediction_head_identifier", "=", "'prediction_head'", "\n", "projection_head_insert", "=", "'layers'", "\n", "\n", "new_state_dict", "=", "{", "}", "\n", "for", "key", ",", "item", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "(", "projection_head_identifier", "in", "key", "or", "prediction_head_identifier", "in", "key", ")", "and", "projection_head_insert", "not", "in", "key", ":", "\n", "# insert layers if it's not part of the key yet", "\n", "            ", "key_parts", "=", "key", ".", "split", "(", "'.'", ")", "\n", "key_parts", ".", "insert", "(", "1", ",", "projection_head_insert", ")", "\n", "new_key", "=", "'.'", ".", "join", "(", "key_parts", ")", "\n", "", "else", ":", "\n", "            ", "new_key", "=", "key", "\n", "\n", "", "new_state_dict", "[", "new_key", "]", "=", "item", "\n", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_from_state_dict": [[207, 228], ["_helpers._fix_projection_head_keys", "_helpers._maybe_expand_batchnorm_weights", "model.load_state_dict", "_helpers._filter_state_dict", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers._fix_projection_head_keys", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers._maybe_expand_batchnorm_weights", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers._filter_state_dict"], ["", "def", "load_from_state_dict", "(", "model", ",", "\n", "state_dict", ",", "\n", "strict", ":", "bool", "=", "True", ",", "\n", "apply_filter", ":", "bool", "=", "True", ",", "\n", "num_splits", ":", "int", "=", "0", ")", ":", "\n", "    ", "\"\"\"Loads the model weights from the state dictionary.\n\n    \"\"\"", "\n", "\n", "# step 1: filter state dict", "\n", "if", "apply_filter", ":", "\n", "        ", "state_dict", "=", "_filter_state_dict", "(", "state_dict", ")", "\n", "\n", "", "state_dict", "=", "_fix_projection_head_keys", "(", "state_dict", ")", "\n", "\n", "# step 2: expand batchnorm weights", "\n", "state_dict", "=", "_maybe_expand_batchnorm_weights", "(", "model", ".", "state_dict", "(", ")", ",", "state_dict", ",", "num_splits", ")", "\n", "\n", "# step 3: load from checkpoint", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.get_model_from_config": [[230, 269], ["torch.cuda.is_available", "lightly.models.ResNetGenerator", "torch.nn.Sequential", "lightly.cli._cli_simclr._SimCLR().to", "lightly.embedding.SelfSupervisedEmbedding", "torch.device", "torch.device", "_helpers.get_ptmodel_from_config", "lightly.models.batchnorm.get_norm_layer", "torch.nn.Conv2d", "torch.nn.AdaptiveAvgPool2d", "_helpers.load_from_state_dict", "RuntimeError", "_helpers.load_state_dict_from_url", "_helpers.fix_input_path", "torch.load", "list", "lightly.cli._cli_simclr._SimCLR", "lightly.models.ResNetGenerator.children", "list", "lightly.models.ResNetGenerator.children"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.get_ptmodel_from_config", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_from_state_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_state_dict_from_url", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path"], ["", "def", "get_model_from_config", "(", "cfg", ",", "is_cli_call", ":", "bool", "=", "False", ")", "->", "SelfSupervisedEmbedding", ":", "\n", "    ", "checkpoint", "=", "cfg", "[", "'checkpoint'", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "if", "not", "checkpoint", ":", "\n", "        ", "checkpoint", ",", "key", "=", "get_ptmodel_from_config", "(", "cfg", "[", "'model'", "]", ")", "\n", "if", "not", "checkpoint", ":", "\n", "            ", "msg", "=", "'Cannot download checkpoint for key {} '", ".", "format", "(", "key", ")", "\n", "msg", "+=", "'because it does not exist!'", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "", "state_dict", "=", "load_state_dict_from_url", "(", "checkpoint", ",", "map_location", "=", "device", ")", "[", "\n", "'state_dict'", "\n", "]", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "fix_input_path", "(", "checkpoint", ")", "if", "is_cli_call", "else", "checkpoint", "\n", "state_dict", "=", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "device", ")", "[", "'state_dict'", "]", "\n", "\n", "# load model", "\n", "", "resnet", "=", "ResNetGenerator", "(", "cfg", "[", "'model'", "]", "[", "'name'", "]", ",", "cfg", "[", "'model'", "]", "[", "'width'", "]", ")", "\n", "last_conv_channels", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "features", "=", "nn", ".", "Sequential", "(", "\n", "get_norm_layer", "(", "3", ",", "0", ")", ",", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "Conv2d", "(", "last_conv_channels", ",", "cfg", "[", "'model'", "]", "[", "'num_ftrs'", "]", ",", "1", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", ")", "\n", "\n", "model", "=", "_SimCLR", "(", "\n", "features", ",", "num_ftrs", "=", "cfg", "[", "'model'", "]", "[", "'num_ftrs'", "]", ",", "out_dim", "=", "cfg", "[", "'model'", "]", "[", "'out_dim'", "]", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "state_dict", "is", "not", "None", ":", "\n", "        ", "load_from_state_dict", "(", "model", ",", "state_dict", ")", "\n", "\n", "", "encoder", "=", "SelfSupervisedEmbedding", "(", "model", ",", "None", ",", "None", ",", "None", ")", "\n", "return", "encoder", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli._download_cli": [[31, 78], ["str", "str", "str", "lightly.api.api_workflow_client.ApiWorkflowClient", "lightly.api.api_workflow_client.ApiWorkflowClient.get_tag_by_name", "lightly.api.api_workflow_client.ApiWorkflowClient.get_filenames_in_tag", "os.path.join", "print", "lightly.cli._helpers.print_as_warning", "lightly.cli._helpers.print_as_warning", "open", "os.getcwd", "lightly.cli._helpers.fix_input_path", "lightly.api.api_workflow_client.ApiWorkflowClient.download_dataset", "f.write", "lightly.cli._helpers.fix_input_path", "lightly.cli._helpers.fix_input_path", "print", "lightly.LightlyDataset", "data.LightlyDataset.dump"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_filenames_in_tag", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.download_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump"], ["def", "_download_cli", "(", "cfg", ",", "is_cli_call", "=", "True", ")", ":", "\n", "\n", "    ", "tag_name", "=", "str", "(", "cfg", "[", "'tag_name'", "]", ")", "\n", "dataset_id", "=", "str", "(", "cfg", "[", "'dataset_id'", "]", ")", "\n", "token", "=", "str", "(", "cfg", "[", "'token'", "]", ")", "\n", "\n", "if", "not", "tag_name", "or", "not", "token", "or", "not", "dataset_id", ":", "\n", "        ", "print_as_warning", "(", "'Please specify all of the parameters tag_name, token and dataset_id'", ")", "\n", "print_as_warning", "(", "'For help, try: lightly-download --help'", ")", "\n", "return", "\n", "\n", "", "api_workflow_client", "=", "ApiWorkflowClient", "(", "\n", "token", "=", "token", ",", "dataset_id", "=", "dataset_id", "\n", ")", "\n", "\n", "# get tag id", "\n", "tag_data", "=", "api_workflow_client", ".", "get_tag_by_name", "(", "tag_name", ")", "\n", "filenames_tag", "=", "api_workflow_client", ".", "get_filenames_in_tag", "(", "\n", "tag_data", ",", "\n", "exclude_parent_tag", "=", "cfg", "[", "'exclude_parent_tag'", "]", ",", "\n", ")", "\n", "\n", "# store sample names in a .txt file", "\n", "filename", "=", "tag_name", "+", "'.txt'", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "filenames_tag", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n", "", "", "filepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "msg", "=", "f'The list of files in tag {cfg[\"tag_name\"]} is stored at: {bcolors.OKBLUE}{filepath}{bcolors.ENDC}'", "\n", "print", "(", "msg", ",", "flush", "=", "True", ")", "\n", "\n", "if", "not", "cfg", "[", "'input_dir'", "]", "and", "cfg", "[", "'output_dir'", "]", ":", "\n", "# download full images from api", "\n", "        ", "output_dir", "=", "fix_input_path", "(", "cfg", "[", "'output_dir'", "]", ")", "\n", "api_workflow_client", ".", "download_dataset", "(", "output_dir", ",", "tag_name", "=", "tag_name", ")", "\n", "\n", "", "elif", "cfg", "[", "'input_dir'", "]", "and", "cfg", "[", "'output_dir'", "]", ":", "\n", "        ", "input_dir", "=", "fix_input_path", "(", "cfg", "[", "'input_dir'", "]", ")", "\n", "output_dir", "=", "fix_input_path", "(", "cfg", "[", "'output_dir'", "]", ")", "\n", "print", "(", "f'Copying files from {input_dir} to {bcolors.OKBLUE}{output_dir}{bcolors.ENDC}.'", ")", "\n", "\n", "# create a dataset from the input directory", "\n", "dataset", "=", "data", ".", "LightlyDataset", "(", "input_dir", "=", "input_dir", ")", "\n", "\n", "# dump the dataset in the output directory", "\n", "dataset", ".", "dump", "(", "output_dir", ",", "filenames_tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli": [[80, 127], ["hydra.main", "download_cli._download_cli", "lightly.cli._helpers.fix_hydra_arguments"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli._download_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments"], ["", "", "@", "hydra", ".", "main", "(", "**", "fix_hydra_arguments", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", ")", "\n", "def", "download_cli", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Download images from the Lightly platform.\n\n    Args:\n        cfg:\n            The default configs are loaded from the config file.\n            To overwrite them please see the section on the config file \n            (.config.config.yaml).\n    \n    Command-Line Args:\n        tag_name:\n            Download all images from the requested tag. Use initial-tag\n            to get all images from the dataset.\n        token:\n            User access token to the Lightly platform. If dataset_id\n            and token are specified, the images and embeddings are \n            uploaded to the platform.\n        dataset_id:\n            Identifier of the dataset on the Lightly platform. If \n            dataset_id and token are specified, the images and \n            embeddings are uploaded to the platform.\n        input_dir:\n            If input_dir and output_dir are specified, lightly will copy\n            all images belonging to the tag from the input_dir to the \n            output_dir.\n        output_dir:\n            If input_dir and output_dir are specified, lightly will copy\n            all images belonging to the tag from the input_dir to the \n            output_dir.\n\n    Examples:\n        >>> #\u00a0download list of all files in the dataset from the Lightly platform\n        >>> lightly-download token='123' dataset_id='XYZ'\n        >>> \n        >>> # download list of all files in tag 'my-tag' from the Lightly platform\n        >>> lightly-download token='123' dataset_id='XYZ' tag_name='my-tag'\n        >>>\n        >>> # download all images in tag 'my-tag' from the Lightly platform\n        >>> lightly-download token='123' dataset_id='XYZ' tag_name='my-tag' output_dir='my_data/'\n        >>>\n        >>> # copy all files in 'my-tag' to a new directory\n        >>> lightly-download token='123' dataset_id='XYZ' tag_name='my-tag' input_dir='data/' output_dir='my_data/'\n\n\n    \"\"\"", "\n", "_download_cli", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.entry": [[129, 131], ["download_cli.download_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "def", "entry", "(", ")", ":", "\n", "    ", "download_cli", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._cli_simclr._SimCLR.__init__": [[20, 28], ["torch.Module.__init__", "lightly.models.modules.SimCLRProjectionHead"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ":", "nn", ".", "Module", ",", "num_ftrs", ":", "int", "=", "32", ",", "\n", "out_dim", ":", "int", "=", "128", ")", ":", "\n", "\n", "        ", "super", "(", "_SimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SimCLRProjectionHead", "(", "num_ftrs", ",", "num_ftrs", ",", "\n", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._cli_simclr._SimCLR.forward": [[30, 50], ["_cli_simclr._SimCLR.backbone().flatten", "_cli_simclr._SimCLR.projection_head", "_cli_simclr._SimCLR.backbone().flatten", "_cli_simclr._SimCLR.projection_head", "_cli_simclr._SimCLR.backbone", "_cli_simclr._SimCLR.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ":", "torch", ".", "Tensor", ",", "x1", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"Embeds and projects the input images.\n\n        \"\"\"", "\n", "\n", "# forward pass of first input x0", "\n", "f0", "=", "self", ".", "backbone", "(", "x0", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out0", "=", "self", ".", "projection_head", "(", "f0", ")", "\n", "\n", "\n", "# return out0 if x1 is None", "\n", "if", "x1", "is", "None", ":", "\n", "            ", "return", "out0", "\n", "\n", "# forward pass of second input x1", "\n", "", "f1", "=", "self", ".", "backbone", "(", "x1", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out1", "=", "self", ".", "projection_head", "(", "f1", ")", "\n", "\n", "# return both outputs", "\n", "return", "out0", ",", "out1", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli._train_cli": [[37, 144], ["torch.cuda.is_available", "torch.cuda.is_available", "lightly.models.ResNetGenerator", "torch.Sequential", "lightly.cli._cli_simclr._SimCLR", "lightly.loss.NTXentLoss", "torch.optim.SGD", "torch.optim.SGD", "lightly.data.LightlyDataset", "min", "lightly.data.ImageCollateFunction", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "lightly.embedding.SelfSupervisedEmbedding", "lightly.embedding.SelfSupervisedEmbedding.init_checkpoint_callback", "lightly.embedding.SelfSupervisedEmbedding.train_embedding", "print", "lightly.cli._helpers.fix_input_path", "cfg.keys", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "msg.format.format", "warnings.warn", "lightly.cli._helpers.cpu_count", "lightly.cli._helpers.get_ptmodel_from_config", "lightly.cli._helpers.is_url", "lightly.models.batchnorm.get_norm_layer", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "lightly.cli._helpers.load_from_state_dict", "lightly.cli._cli_simclr._SimCLR.parameters", "len", "warnings.warn", "list", "lightly.cli._helpers.fix_input_path", "lightly.cli._helpers.load_state_dict_from_url", "torch.load", "torch.load", "lightly.models.ResNetGenerator.children", "list", "lightly.models.ResNetGenerator.children"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.init_checkpoint_callback", "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.train_embedding", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.cpu_count", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.get_ptmodel_from_config", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.is_url", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_from_state_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.load_state_dict_from_url"], ["def", "_train_cli", "(", "cfg", ",", "is_cli_call", "=", "True", ")", ":", "\n", "\n", "    ", "input_dir", "=", "cfg", "[", "'input_dir'", "]", "\n", "if", "input_dir", "and", "is_cli_call", ":", "\n", "        ", "input_dir", "=", "fix_input_path", "(", "input_dir", ")", "\n", "\n", "", "if", "'seed'", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "        ", "seed", "=", "cfg", "[", "'seed'", "]", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "", "if", "cfg", "[", "\"trainer\"", "]", "[", "\"weights_summary\"", "]", "==", "\"None\"", ":", "\n", "        ", "cfg", "[", "\"trainer\"", "]", "[", "\"weights_summary\"", "]", "=", "None", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "'cuda'", "\n", "", "elif", "cfg", "[", "'trainer'", "]", "and", "cfg", "[", "'trainer'", "]", "[", "'gpus'", "]", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "cfg", "[", "'trainer'", "]", "[", "'gpus'", "]", "=", "0", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "distributed_strategy", "=", "None", "\n", "if", "cfg", "[", "'trainer'", "]", "[", "'gpus'", "]", ">", "1", ":", "\n", "        ", "distributed_strategy", "=", "'ddp'", "\n", "\n", "", "if", "cfg", "[", "'loader'", "]", "[", "'batch_size'", "]", "<", "64", ":", "\n", "        ", "msg", "=", "'Training a self-supervised model with a small batch size: {}! '", "\n", "msg", "=", "msg", ".", "format", "(", "cfg", "[", "'loader'", "]", "[", "'batch_size'", "]", ")", "\n", "msg", "+=", "'Small batch size may harm embedding quality. '", "\n", "msg", "+=", "'You can specify the batch size via the loader key-word: '", "\n", "msg", "+=", "'loader.batch_size=BSZ'", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "\n", "# determine the number of available cores", "\n", "", "if", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", "<", "0", ":", "\n", "        ", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", "=", "cpu_count", "(", ")", "\n", "\n", "", "state_dict", "=", "None", "\n", "checkpoint", "=", "cfg", "[", "'checkpoint'", "]", "\n", "if", "cfg", "[", "'pre_trained'", "]", "and", "not", "checkpoint", ":", "\n", "# if checkpoint wasn't specified explicitly and pre_trained is True", "\n", "# try to load the checkpoint from the model zoo", "\n", "        ", "checkpoint", ",", "key", "=", "get_ptmodel_from_config", "(", "cfg", "[", "'model'", "]", ")", "\n", "if", "not", "checkpoint", ":", "\n", "            ", "msg", "=", "'Cannot download checkpoint for key {} '", ".", "format", "(", "key", ")", "\n", "msg", "+=", "'because it does not exist! '", "\n", "msg", "+=", "'Model will be trained from scratch.'", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "", "", "elif", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "fix_input_path", "(", "checkpoint", ")", "if", "is_cli_call", "else", "checkpoint", "\n", "\n", "", "if", "checkpoint", ":", "\n", "# load the PyTorch state dictionary and map it to the current device", "\n", "        ", "if", "is_url", "(", "checkpoint", ")", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "\n", "checkpoint", ",", "map_location", "=", "device", "\n", ")", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "\n", "checkpoint", ",", "map_location", "=", "device", "\n", ")", "[", "'state_dict'", "]", "\n", "\n", "# load model", "\n", "", "", "resnet", "=", "ResNetGenerator", "(", "cfg", "[", "'model'", "]", "[", "'name'", "]", ",", "cfg", "[", "'model'", "]", "[", "'width'", "]", ")", "\n", "last_conv_channels", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "features", "=", "nn", ".", "Sequential", "(", "\n", "get_norm_layer", "(", "3", ",", "0", ")", ",", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "Conv2d", "(", "last_conv_channels", ",", "cfg", "[", "'model'", "]", "[", "'num_ftrs'", "]", ",", "1", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", ")", "\n", "\n", "model", "=", "_SimCLR", "(", "\n", "features", ",", "\n", "num_ftrs", "=", "cfg", "[", "'model'", "]", "[", "'num_ftrs'", "]", ",", "\n", "out_dim", "=", "cfg", "[", "'model'", "]", "[", "'out_dim'", "]", "\n", ")", "\n", "if", "state_dict", "is", "not", "None", ":", "\n", "        ", "load_from_state_dict", "(", "model", ",", "state_dict", ")", "\n", "\n", "", "criterion", "=", "NTXentLoss", "(", "**", "cfg", "[", "'criterion'", "]", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "**", "cfg", "[", "'optimizer'", "]", ")", "\n", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", ")", "\n", "\n", "cfg", "[", "'loader'", "]", "[", "'batch_size'", "]", "=", "min", "(", "\n", "cfg", "[", "'loader'", "]", "[", "'batch_size'", "]", ",", "\n", "len", "(", "dataset", ")", "\n", ")", "\n", "\n", "collate_fn", "=", "ImageCollateFunction", "(", "**", "cfg", "[", "'collate'", "]", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "**", "cfg", "[", "'loader'", "]", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "encoder", "=", "SelfSupervisedEmbedding", "(", "model", ",", "criterion", ",", "optimizer", ",", "dataloader", ")", "\n", "encoder", ".", "init_checkpoint_callback", "(", "**", "cfg", "[", "'checkpoint_callback'", "]", ")", "\n", "encoder", ".", "train_embedding", "(", "**", "cfg", "[", "'trainer'", "]", ",", "strategy", "=", "distributed_strategy", ")", "\n", "\n", "print", "(", "f'Best model is stored at: {bcolors.OKBLUE}{encoder.checkpoint}{bcolors.ENDC}'", ")", "\n", "os", ".", "environ", "[", "\n", "cfg", "[", "'environment_variable_names'", "]", "[", "'lightly_last_checkpoint_path'", "]", "\n", "]", "=", "encoder", ".", "checkpoint", "\n", "return", "encoder", ".", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli.train_cli": [[146, 175], ["hydra.main", "train_cli._train_cli", "lightly.cli._helpers.fix_hydra_arguments"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli._train_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments"], ["", "@", "hydra", ".", "main", "(", "**", "fix_hydra_arguments", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", ")", "\n", "def", "train_cli", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Train a self-supervised model from the command-line.\n\n    Args:\n        cfg:\n            The default configs are loaded from the config file.\n            To overwrite them please see the section on the config file \n            (.config.config.yaml).\n    \n    Command-Line Args:\n        input_dir:\n            Path to the input directory where images are stored.\n\n    Examples:\n        >>> #\u00a0train model with default settings\n        >>> lightly-train input_dir=data/\n        >>>\n        >>> # train model with batches of size 128\n        >>> lightly-train input_dir=data/ loader.batch_size=128\n        >>>\n        >>> # train model for 10 epochs\n        >>> lightly-train input_dir=data/ trainer.max_epochs=10\n        >>>\n        >>> # print a full summary of the model\n        >>> lightly-train input_dir=data/ trainer.weights_summary=full\n\n    \"\"\"", "\n", "return", "_train_cli", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli.entry": [[177, 179], ["train_cli.train_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli.train_cli"], ["", "def", "entry", "(", ")", ":", "\n", "    ", "train_cli", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.version_cli._version_cli": [[18, 21], ["print"], "function", ["None"], ["def", "_version_cli", "(", ")", ":", "\n", "    ", "version", "=", "lightly", ".", "__version__", "\n", "print", "(", "f'lightly version {version}'", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.version_cli.version_cli": [[23, 29], ["hydra.main", "version_cli._version_cli", "lightly.cli._helpers.fix_hydra_arguments"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.version_cli._version_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments"], ["", "@", "hydra", ".", "main", "(", "**", "fix_hydra_arguments", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", ")", "\n", "def", "version_cli", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Prints the version of the used lightly package to the terminal.\n\n    \"\"\"", "\n", "_version_cli", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.version_cli.entry": [[31, 33], ["version_cli.version_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.version_cli.version_cli"], ["", "def", "entry", "(", ")", ":", "\n", "    ", "version_cli", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli._upload_cli": [[35, 169], ["lightly.cli._helpers.fix_input_path", "lightly.cli._helpers.fix_input_path", "lightly.cli._helpers.print_as_warning", "lightly.cli._helpers.print_as_warning", "lightly.cli._helpers.fix_input_path", "print", "max", "min", "isinstance", "tuple", "isinstance", "torchvision.transforms.Resize", "lightly.data.LightlyDataset", "lightly.api.api_workflow_client.ApiWorkflowClient.upload_dataset", "print", "lightly.api.api_workflow_client.ApiWorkflowClient.upload_embeddings", "print", "lightly.api.api_workflow_client.ApiWorkflowClient.upload_custom_metadata", "print", "lightly.cli._helpers.print_as_warning", "lightly.api.api_workflow_client.ApiWorkflowClient", "lightly.api.api_workflow_client.ApiWorkflowClient", "lightly.api.api_workflow_client.ApiWorkflowClient.create_dataset", "lightly.cli._helpers.print_as_warning", "open", "json.load", "lightly.cli._helpers.cpu_count", "lightly.cli._helpers.print_as_warning", "len", "lightly.api.api_workflow_client.ApiWorkflowClient.get_embedding_by_name", "lightly.cli._helpers.print_as_warning", "lightly.api.api_workflow_client.ApiWorkflowClient.get_all_tags"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.upload_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.cpu_count", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.get_embedding_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags"], ["def", "_upload_cli", "(", "cfg", ",", "is_cli_call", "=", "True", ")", "->", "Union", "[", "str", ",", "None", "]", ":", "\n", "    ", "\"\"\"\n\n    Returns:\n        if no errors were encountered:\n            SUCCESS_RETURN_VALUE\n        else:\n            None\n\n    \"\"\"", "\n", "input_dir", "=", "cfg", "[", "'input_dir'", "]", "\n", "if", "input_dir", "and", "is_cli_call", ":", "\n", "        ", "input_dir", "=", "fix_input_path", "(", "input_dir", ")", "\n", "\n", "", "path_to_embeddings", "=", "cfg", "[", "'embeddings'", "]", "\n", "if", "path_to_embeddings", "and", "is_cli_call", ":", "\n", "        ", "path_to_embeddings", "=", "fix_input_path", "(", "path_to_embeddings", ")", "\n", "\n", "", "dataset_id", "=", "cfg", "[", "'dataset_id'", "]", "\n", "token", "=", "cfg", "[", "'token'", "]", "\n", "new_dataset_name", "=", "cfg", "[", "'new_dataset_name'", "]", "\n", "\n", "cli_api_args_wrong", "=", "False", "\n", "if", "not", "token", ":", "\n", "        ", "print_as_warning", "(", "'Please specify your access token.'", ")", "\n", "cli_api_args_wrong", "=", "True", "\n", "\n", "", "if", "dataset_id", ":", "\n", "        ", "if", "new_dataset_name", ":", "\n", "            ", "print_as_warning", "(", "\n", "'Please specify either the dataset_id of an existing dataset '", "\n", "'or a new_dataset_name, but not both.'", "\n", ")", "\n", "cli_api_args_wrong", "=", "True", "\n", "", "else", ":", "\n", "            ", "api_workflow_client", "=", "ApiWorkflowClient", "(", "token", "=", "token", ",", "dataset_id", "=", "dataset_id", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "new_dataset_name", ":", "\n", "            ", "api_workflow_client", "=", "ApiWorkflowClient", "(", "token", "=", "token", ")", "\n", "api_workflow_client", ".", "create_dataset", "(", "dataset_name", "=", "new_dataset_name", ")", "\n", "", "else", ":", "\n", "            ", "print_as_warning", "(", "\n", "'Please specify either the dataset_id of an existing dataset '", "\n", "'or a new_dataset_name.'", ")", "\n", "cli_api_args_wrong", "=", "True", "\n", "# delete the dataset_id as it might be an empty string", "\n", "# Use api_workflow_client.dataset_id instead", "\n", "", "", "del", "dataset_id", "\n", "\n", "if", "cli_api_args_wrong", ":", "\n", "        ", "print_as_warning", "(", "'For help, try: lightly-upload --help'", ")", "\n", "return", "\n", "\n", "# potentially load custom metadata", "\n", "", "custom_metadata", "=", "None", "\n", "if", "cfg", "[", "'custom_metadata'", "]", ":", "\n", "        ", "path_to_custom_metadata", "=", "fix_input_path", "(", "cfg", "[", "'custom_metadata'", "]", ")", "\n", "print", "(", "\n", "'Loading custom metadata from '", "\n", "f'{bcolors.OKBLUE}{path_to_custom_metadata}{bcolors.ENDC}'", "\n", ")", "\n", "with", "open", "(", "path_to_custom_metadata", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "custom_metadata", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# set the number of workers if unset", "\n", "", "", "if", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", "<", "0", ":", "\n", "# set the number of workers to the number of CPUs available,", "\n", "# but minimum of 8", "\n", "        ", "num_workers", "=", "max", "(", "8", ",", "cpu_count", "(", ")", ")", "\n", "num_workers", "=", "min", "(", "32", ",", "num_workers", ")", "\n", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", "=", "num_workers", "\n", "\n", "", "size", "=", "cfg", "[", "'resize'", "]", "\n", "if", "not", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "size", "=", "tuple", "(", "size", ")", "\n", "", "transform", "=", "None", "\n", "if", "isinstance", "(", "size", ",", "tuple", ")", "or", "size", ">", "0", ":", "\n", "        ", "transform", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "size", ")", "\n", "\n", "", "if", "input_dir", ":", "\n", "        ", "if", "not", "cfg", ".", "append", "and", "len", "(", "api_workflow_client", ".", "get_all_tags", "(", ")", ")", ">", "0", ":", "\n", "            ", "print_as_warning", "(", "\n", "'The dataset you specified already has samples. '", "\n", "'If you want to add additional samples, you need to specify '", "\n", "'append=True as CLI argument.'", "\n", ")", "\n", "return", "\n", "\n", "", "mode", "=", "cfg", "[", "'upload'", "]", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "input_dir", ",", "transform", "=", "transform", ")", "\n", "api_workflow_client", ".", "upload_dataset", "(", "\n", "input", "=", "dataset", ",", "\n", "mode", "=", "mode", ",", "\n", "max_workers", "=", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", ",", "\n", "custom_metadata", "=", "custom_metadata", ",", "\n", ")", "\n", "print", "(", "'Finished the upload of the dataset.'", ")", "\n", "\n", "", "if", "path_to_embeddings", ":", "\n", "        ", "name", "=", "cfg", "[", "'embedding_name'", "]", "\n", "if", "not", "cfg", ".", "append", ":", "\n", "            ", "try", ":", "\n", "                ", "embedding", "=", "api_workflow_client", ".", "get_embedding_by_name", "(", "name", "=", "name", ",", "ignore_suffix", "=", "True", ")", "\n", "print_as_warning", "(", "\n", "'The dataset you specified already has an embedding. '", "\n", "'If you want to add additional samples, you need to specify '", "\n", "'append=True as CLI argument.'", "\n", ")", "\n", "return", "\n", "", "except", "EmbeddingDoesNotExistError", ":", "\n", "                ", "pass", "\n", "", "", "api_workflow_client", ".", "upload_embeddings", "(", "\n", "path_to_embeddings_csv", "=", "path_to_embeddings", ",", "name", "=", "name", "\n", ")", "\n", "print", "(", "'Finished upload of embeddings.'", ")", "\n", "\n", "", "if", "custom_metadata", "is", "not", "None", "and", "not", "input_dir", ":", "\n", "# upload custom metadata separately", "\n", "        ", "api_workflow_client", ".", "upload_custom_metadata", "(", "\n", "custom_metadata", ",", "\n", "verbose", "=", "True", ",", "\n", "max_workers", "=", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", ",", "\n", ")", "\n", "\n", "", "if", "new_dataset_name", ":", "\n", "        ", "print", "(", "f'The dataset_id of the newly created dataset is '", "\n", "f'{bcolors.OKBLUE}{api_workflow_client.dataset_id}{bcolors.ENDC}'", ")", "\n", "\n", "", "os", ".", "environ", "[", "\n", "cfg", "[", "'environment_variable_names'", "]", "[", "'lightly_last_dataset_id'", "]", "\n", "]", "=", "api_workflow_client", ".", "dataset_id", "\n", "\n", "return", "SUCCESS_RETURN_VALUE", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli": [[171, 251], ["hydra.main", "upload_cli._upload_cli", "lightly.cli._helpers.fix_hydra_arguments"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli._upload_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments"], ["", "@", "hydra", ".", "main", "(", "**", "fix_hydra_arguments", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", ")", "\n", "def", "upload_cli", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Upload images/embeddings from the command-line to the Lightly platform.\n\n    Args:\n        cfg:\n            The default configs are loaded from the config file.\n            To overwrite them please see the section on the config file\n            (.config.config.yaml).\n\n    Command-Line Args:\n        input_dir:\n            Path to the input directory where images are stored.\n        embeddings:\n            Path to the csv file storing the embeddings generated by\n            lightly.\n        token:\n            User access token to the Lightly platform. If needs to be\n            specified to upload the images and embeddings to the platform.\n        dataset_id:\n            Identifier of the dataset on the Lightly platform.\n            Either the dataset_id or the new_dataset_name need to be\n            specified.\n        new_dataset_name:\n            The name of the new dataset to create on the Lightly platform.\n            Either the dataset_id or the new_dataset_name need to be\n            specified.\n        upload:\n            String to determine whether to upload the full images,\n            thumbnails only, or metadata only.\n\n            Must be one of ['full', 'thumbnails', 'metadata']\n        embedding_name:\n            Assign the embedding a name in order to identify it on the\n            Lightly platform.\n        resize:\n            Desired size of the uploaded images. If negative, default size is\n            used. If size is a sequence like (h, w), output size will be matched\n            to this. If size is an int, smaller edge of the image will be\n            matched to this number. i.e, if height > width, then image will be\n            rescaled to (size * height / width, size).\n        custom_metadata:\n            Path to a .json file containing custom metadata. The file must be in\n            the COCO annotations (although annotations can be empty) format and\n            contain an additional field `metadata` storing a list of metadata\n            entries. The metadata entries are matched with the images via\n            `image_id`.\n\n    Examples:\n        >>> # create a new dataset on the Lightly platform and upload full images to it\n        >>> lightly-upload input_dir=data/ token='123' new_dataset_name='new_dataset_name_xyz'\n        >>>\n        >>> # upload full images to the Lightly platform to an existing dataset\n        >>> lightly-upload input_dir=data/ token='123' dataset_id='XYZ'\n        >>>\n        >>> # create a new dataset on the Lightly platform and upload thumbnails to it\n        >>> lightly-upload input_dir=data/ token='123' new_dataset_name='new_dataset_name_xyz' upload='thumbnails'\n        >>>\n        >>> # upload metadata to the Lightly platform\n        >>> lightly-upload input_dir=data/ token='123' dataset_id='XYZ' upload='metadata'\n        >>>\n        >>> # upload embeddings to the Lightly platform (must have uploaded images beforehand)\n        >>> lightly-upload embeddings=embeddings.csv token='123' dataset_id='XYZ'\n        >>>\n        >>> # upload both, images and embeddings in a single command\n        >>> lightly-upload input_dir=data/ embeddings=embeddings.csv upload='full' \\\\\n        >>>     token='123' dataset_id='XYZ'\n        >>>\n        >>> # create a new dataset on the Lightly platform and upload both, images and embeddings\n        >>> lightly-upload input_dir=data/ embeddings=embeddings.csv upload='full' \\\\\n        >>>     token='123' new_dataset_name='new_dataset_name_xyz'\n        >>>\n        >>> # upload a dataset with custom metadata\n        >>> lightly-upload input_dir=data/ token='123' dataset_id='XYZ' custom_metadata=custom_metadata.json\n        >>>\n        >>> # upload custom metadata to an existing dataset\n        >>> lightly-upload token='123' dataset_id='XYZ' custom_metadata=custom_metadata.json\n\n    \"\"\"", "\n", "return", "_upload_cli", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.entry": [[253, 255], ["upload_cli.upload_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "def", "entry", "(", ")", ":", "\n", "    ", "upload_cli", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.crop_cli._crop_cli": [[25, 65], ["lightly.data.LightlyDataset", "lightly.data.LightlyDataset.get_filenames", "lightly.utils.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save", "print", "lightly.cli._helpers.fix_input_path", "lightly.cli._helpers.fix_input_path", "lightly.cli._helpers.fix_input_path", "os.path.splitext", "os.path.join().replace", "lightly.utils.cropping.read_yolo_label_file.read_yolo_label_file", "class_indices_list_list.append", "bounding_boxes_list_list.append", "len", "lightly.cli._helpers.fix_input_path", "open", "yaml.full_load", "float", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.read_yolo_label_file.read_yolo_label_file", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path"], ["def", "_crop_cli", "(", "cfg", ",", "is_cli_call", "=", "True", ")", ":", "\n", "    ", "input_dir", "=", "cfg", "[", "'input_dir'", "]", "\n", "if", "input_dir", "and", "is_cli_call", ":", "\n", "        ", "input_dir", "=", "fix_input_path", "(", "input_dir", ")", "\n", "", "output_dir", "=", "cfg", "[", "'output_dir'", "]", "\n", "if", "output_dir", "and", "is_cli_call", ":", "\n", "        ", "output_dir", "=", "fix_input_path", "(", "output_dir", ")", "\n", "", "label_dir", "=", "cfg", "[", "'label_dir'", "]", "\n", "if", "label_dir", "and", "is_cli_call", ":", "\n", "        ", "label_dir", "=", "fix_input_path", "(", "label_dir", ")", "\n", "", "label_names_file", "=", "cfg", "[", "'label_names_file'", "]", "\n", "if", "label_names_file", "and", "len", "(", "label_names_file", ")", ">", "0", ":", "\n", "        ", "if", "is_cli_call", ":", "\n", "            ", "label_names_file", "=", "fix_input_path", "(", "label_names_file", ")", "\n", "", "with", "open", "(", "label_names_file", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "label_names_file_dict", "=", "yaml", ".", "full_load", "(", "file", ")", "\n", "", "class_names", "=", "label_names_file_dict", "[", "'names'", "]", "\n", "", "else", ":", "\n", "        ", "class_names", "=", "None", "\n", "\n", "\n", "", "dataset", "=", "LightlyDataset", "(", "input_dir", ")", "\n", "\n", "\n", "class_indices_list_list", ":", "List", "[", "List", "[", "int", "]", "]", "=", "[", "]", "\n", "bounding_boxes_list_list", ":", "List", "[", "List", "[", "BoundingBox", "]", "]", "=", "[", "]", "\n", "\n", "# YOLO-Specific", "\n", "for", "filename_image", "in", "dataset", ".", "get_filenames", "(", ")", ":", "\n", "        ", "filepath_image_base", ",", "image_extension", "=", "os", ".", "path", ".", "splitext", "(", "filename_image", ")", "\n", "filepath_label", "=", "os", ".", "path", ".", "join", "(", "label_dir", ",", "filename_image", ")", ".", "replace", "(", "image_extension", ",", "'.txt'", ")", "\n", "class_indices", ",", "bounding_boxes", "=", "read_yolo_label_file", "(", "filepath_label", ",", "float", "(", "cfg", "[", "'crop_padding'", "]", ")", ")", "\n", "class_indices_list_list", ".", "append", "(", "class_indices", ")", "\n", "bounding_boxes_list_list", ".", "append", "(", "bounding_boxes", ")", "\n", "\n", "", "cropped_images_list_list", "=", "crop_dataset_by_bounding_boxes_and_save", "(", "dataset", ",", "output_dir", ",", "bounding_boxes_list_list", ",", "class_indices_list_list", ",", "class_names", ")", "\n", "\n", "print", "(", "f'Cropped images are stored at: {bcolors.OKBLUE}{output_dir}{bcolors.ENDC}'", ")", "\n", "return", "cropped_images_list_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.crop_cli.crop_cli": [[67, 104], ["hydra.main", "crop_cli._crop_cli", "lightly.cli._helpers.fix_hydra_arguments"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.crop_cli._crop_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments"], ["", "@", "hydra", ".", "main", "(", "**", "fix_hydra_arguments", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", ")", "\n", "def", "crop_cli", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Crops images into one sub-image for each object.\n\n    Args:\n        cfg:\n            The default configs are loaded from the config file.\n            To overwrite them please see the section on the config file\n            (.config.config.yaml).\n\n    Command-Line Args:\n        input_dir:\n            Path to the input directory where images are stored.\n        labels_dir:\n            Path to the directory where the labels are stored. There must be one label file for each image.\n            The label file must have the same name as the image file, but the extension .txt.\n            For example, img_123.txt for img_123.jpg. The label file must be in YOLO format.\n        output_dir:\n            Path to the directory where the cropped images are stored. They are stored in one directory per input image.\n        crop_padding: Optional\n            The additonal padding about the bounding box. This makes the crops include the context of the object.\n            The padding is relative and added to the width and height.\n        label_names_file: Optional\n            A yaml file including the names of the classes. If it is given, the filenames of the cropped images include\n            the class names instead of the class id. This file is usually included when having a dataset in yolo format.\n            Example contents of such a label_names_file.yaml: \"names: ['class_name_a', 'class_name_b']\"\n\n\n    Examples:\n        >>> # Crop images and set the crop to be 20% around the bounding box\n        >>> lightly-crop input_dir=data/images label_dir=data/labels output_dir=data/cropped_images crop_padding=0.2\n\n        >>> # Crop images and use the class names in the filename\n        >>> lightly-crop input_dir=data/images label_dir=data/labels output_dir=data/cropped_images label_names_file=data/data.yaml\n\n    \"\"\"", "\n", "return", "_crop_cli", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.crop_cli.entry": [[106, 108], ["crop_cli.crop_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.crop_cli.crop_cli"], ["", "def", "entry", "(", ")", ":", "\n", "    ", "crop_cli", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli._embed_cli": [[31, 97], ["torch.cuda.is_available", "torchvision.transforms.Compose", "lightly.data.LightlyDataset", "min", "torch.utils.data.DataLoader", "lightly.cli._helpers.get_model_from_config", "lightly.cli._helpers.get_model_from_config.embed", "lightly.cli._helpers.fix_input_path", "torch.device", "torch.device", "len", "lightly.cli._helpers.cpu_count", "os.path.join", "lightly.utils.save_embeddings", "print", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.get_model_from_config", "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_input_path", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.cpu_count", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_embeddings"], ["def", "_embed_cli", "(", "cfg", ",", "is_cli_call", "=", "True", ")", "->", "Union", "[", "\n", "Tuple", "[", "np", ".", "ndarray", ",", "List", "[", "int", "]", ",", "List", "[", "str", "]", "]", ",", "\n", "str", "\n", "]", ":", "\n", "    ", "\"\"\" See embed_cli() for usage documentation\n\n        is_cli_call:\n            If True:\n                Saves the embeddings as file and returns the filepath.\n            If False:\n                Returns the embeddings, labels, filenames as tuple.\n                Embeddings are of shape (n_samples, embedding_size)\n                len(labels) = len(filenames) = n_samples\n    \"\"\"", "\n", "input_dir", "=", "cfg", "[", "'input_dir'", "]", "\n", "if", "input_dir", "and", "is_cli_call", ":", "\n", "        ", "input_dir", "=", "fix_input_path", "(", "input_dir", ")", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "\n", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "\n", "(", "cfg", "[", "'collate'", "]", "[", "'input_size'", "]", ",", "cfg", "[", "'collate'", "]", "[", "'input_size'", "]", ")", "\n", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", ",", "transform", "=", "transform", ")", "\n", "\n", "# disable drop_last and shuffle", "\n", "cfg", "[", "'loader'", "]", "[", "'drop_last'", "]", "=", "False", "\n", "cfg", "[", "'loader'", "]", "[", "'shuffle'", "]", "=", "False", "\n", "cfg", "[", "'loader'", "]", "[", "'batch_size'", "]", "=", "min", "(", "cfg", "[", "'loader'", "]", "[", "'batch_size'", "]", ",", "len", "(", "dataset", ")", ")", "\n", "\n", "# determine the number of available cores", "\n", "if", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", "<", "0", ":", "\n", "        ", "cfg", "[", "'loader'", "]", "[", "'num_workers'", "]", "=", "cpu_count", "(", ")", "\n", "\n", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "cfg", "[", "'loader'", "]", ")", "\n", "\n", "encoder", "=", "get_model_from_config", "(", "cfg", ",", "is_cli_call", ")", "\n", "\n", "embeddings", ",", "labels", ",", "filenames", "=", "encoder", ".", "embed", "(", "dataloader", ",", "device", "=", "device", ")", "\n", "\n", "if", "is_cli_call", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'embeddings.csv'", ")", "\n", "save_embeddings", "(", "path", ",", "embeddings", ",", "labels", ",", "filenames", ")", "\n", "print", "(", "f'Embeddings are stored at {bcolors.OKBLUE}{path}{bcolors.ENDC}'", ")", "\n", "os", ".", "environ", "[", "\n", "cfg", "[", "'environment_variable_names'", "]", "[", "'lightly_last_embedding_path'", "]", "\n", "]", "=", "path", "\n", "return", "path", "\n", "\n", "", "return", "embeddings", ",", "labels", ",", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli.embed_cli": [[99, 131], ["hydra.main", "embed_cli._embed_cli", "lightly.cli._helpers.fix_hydra_arguments"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli._embed_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.fix_hydra_arguments"], ["", "@", "hydra", ".", "main", "(", "**", "fix_hydra_arguments", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", ")", "\n", "def", "embed_cli", "(", "cfg", ")", "->", "str", ":", "\n", "    ", "\"\"\"Embed images from the command-line.\n\n    Args:\n        cfg:\n            The default configs are loaded from the config file.\n            To overwrite them please see the section on the config file\n            (.config.config.yaml).\n\n    Command-Line Args:\n        input_dir:\n            Path to the input directory where images are stored.\n        checkpoint:\n            Path to the checkpoint of a pretrained model. If left\n            empty, a pretrained model by lightly is used.\n\n    Returns:\n        The path to the created embeddings file.\n\n    Examples:\n        >>> #\u00a0embed images with default settings and a lightly model\n        >>> lightly-embed input_dir=data/\n        >>>\n        >>> # embed images with default settings and a custom checkpoint\n        >>> lightly-embed input_dir=data/ checkpoint=my_checkpoint.ckpt\n        >>>\n        >>> # embed images with custom settings\n        >>> lightly-embed input_dir=data/ model.num_ftrs=32\n\n    \"\"\"", "\n", "return", "_embed_cli", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli.entry": [[133, 135], ["embed_cli.embed_cli"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli.embed_cli"], ["", "def", "entry", "(", ")", ":", "\n", "    ", "embed_cli", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_train.TestCLITrain.setUpClass": [[15, 18], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "sys", ".", "modules", "[", "\"lightly.cli.upload_cli\"", "]", ".", "ApiWorkflowClient", "=", "MockedApiWorkflowClient", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_train.TestCLITrain.setUp": [[19, 27], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowSetup.setUp", "test_cli_train.TestCLITrain.create_fake_dataset", "hydra.experimental.initialize", "hydra.experimental.compose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.setUp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowSetup", ".", "setUp", "(", "self", ")", "\n", "self", ".", "create_fake_dataset", "(", ")", "\n", "with", "initialize", "(", "config_path", "=", "\"../../lightly/cli/config\"", ",", "job_name", "=", "\"test_app\"", ")", ":", "\n", "            ", "self", ".", "cfg", "=", "compose", "(", "config_name", "=", "\"config\"", ",", "overrides", "=", "[", "\n", "\"token='123'\"", ",", "\n", "f\"input_dir={self.folder_path}\"", ",", "\n", "\"trainer.max_epochs=0\"", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_train.TestCLITrain.create_fake_dataset": [[29, 40], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "os.path.join", "data[].save", "range"], "methods", ["None"], ["", "", "def", "create_fake_dataset", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "5", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "self", ".", "sample_names", "=", "sample_names", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_train.TestCLITrain.parse_cli_string": [[41, 57], ["re.split.replace", "re.split", "zip", "value.strip.strip.strip", "value.strip.strip.strip", "key.split", "len", "len", "len"], "methods", ["None"], ["", "", "def", "parse_cli_string", "(", "self", ",", "cli_words", ":", "str", ")", ":", "\n", "        ", "cli_words", "=", "cli_words", ".", "replace", "(", "\"lightly-train \"", ",", "\"\"", ")", "\n", "cli_words", "=", "re", ".", "split", "(", "\"=| \"", ",", "cli_words", ")", "\n", "assert", "len", "(", "cli_words", ")", "%", "2", "==", "0", "\n", "dict_keys", "=", "cli_words", "[", "0", ":", ":", "2", "]", "\n", "dict_values", "=", "cli_words", "[", "1", ":", ":", "2", "]", "\n", "for", "key", ",", "value", "in", "zip", "(", "dict_keys", ",", "dict_values", ")", ":", "\n", "            ", "value", "=", "value", ".", "strip", "(", "'\\\"'", ")", "\n", "value", "=", "value", ".", "strip", "(", "'\\''", ")", "\n", "key_parts", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "if", "len", "(", "key_parts", ")", "==", "1", ":", "\n", "                ", "self", ".", "cfg", "[", "key_parts", "[", "0", "]", "]", "=", "value", "\n", "", "elif", "len", "(", "key_parts", ")", "==", "2", ":", "\n", "                ", "self", ".", "cfg", "[", "key_parts", "[", "0", "]", "]", "[", "key_parts", "[", "1", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_train.TestCLITrain.test_parse_cli_string": [[58, 62], ["test_cli_train.TestCLITrain.parse_cli_string"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string"], ["", "", "", "def", "test_parse_cli_string", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-train trainer.weights_summary=top\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "assert", "self", ".", "cfg", "[", "\"trainer\"", "]", "[", "\"weights_summary\"", "]", "==", "'top'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_train.TestCLITrain.test_train_weights_summary": [[63, 73], ["test_cli_train.TestCLITrain.subTest", "test_cli_train.TestCLITrain.parse_cli_string", "lightly.cli.train_cli", "test_cli_train.TestCLITrain.assertGreater", "len", "os.getenv"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.train_cli.train_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["", "def", "test_train_weights_summary", "(", "self", ")", ":", "\n", "        ", "for", "weights_summary", "in", "[", "\"None\"", ",", "\"top\"", ",", "\"full\"", "]", ":", "\n", "            ", "cli_string", "=", "f\"lightly-train trainer.weights_summary={weights_summary}\"", "\n", "with", "self", ".", "subTest", "(", "cli_string", ")", ":", "\n", "                ", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "train_cli", "(", "self", ".", "cfg", ")", "\n", "\n", "self", ".", "assertGreater", "(", "len", "(", "os", ".", "getenv", "(", "\n", "self", ".", "cfg", "[", "'environment_variable_names'", "]", "[", "\n", "'lightly_last_checkpoint_path'", "]", ")", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_train.TestCLITrain.tearDown": [[74, 80], ["os.remove"], "methods", ["None"], ["", "", "", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "filename", "in", "[", "\"embeddings.csv\"", ",", "\"embeddings_sorted.csv\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "filename", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "pass", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.setUpClass": [[16, 19], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "sys", ".", "modules", "[", "\"lightly.cli.upload_cli\"", "]", ".", "ApiWorkflowClient", "=", "MockedApiWorkflowClient", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.setUp": [[20, 28], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowSetup.setUp", "test_cli_magic.TestCLIMagic.create_fake_dataset", "hydra.experimental.initialize", "hydra.experimental.compose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.setUp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowSetup", ".", "setUp", "(", "self", ")", "\n", "self", ".", "create_fake_dataset", "(", ")", "\n", "with", "initialize", "(", "config_path", "=", "\"../../lightly/cli/config\"", ",", "job_name", "=", "\"test_app\"", ")", ":", "\n", "            ", "self", ".", "cfg", "=", "compose", "(", "config_name", "=", "\"config\"", ",", "overrides", "=", "[", "\n", "\"token='123'\"", ",", "\n", "f\"input_dir={self.folder_path}\"", ",", "\n", "\"trainer.max_epochs=0\"", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.create_fake_dataset": [[30, 41], ["len", "torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "test_cli_magic.TestCLIMagic.api_workflow_client.get_filenames", "os.path.join", "data[].save", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "def", "create_fake_dataset", "(", "self", ",", "filename_appendix", ":", "str", "=", "''", ")", ":", "\n", "        ", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", ")", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_{i}{filename_appendix}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "self", ".", "sample_names", "=", "sample_names", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.parse_cli_string": [[42, 64], ["re.split.replace", "re.split", "zip", "int.strip", "int.strip", "key.split", "len", "int", "len", "len", "ValueError"], "methods", ["None"], ["", "", "def", "parse_cli_string", "(", "self", ",", "cli_words", ":", "str", ")", ":", "\n", "        ", "cli_words", "=", "cli_words", ".", "replace", "(", "\"lightly-magic \"", ",", "\"\"", ")", "\n", "cli_words", "=", "re", ".", "split", "(", "\"=| \"", ",", "cli_words", ")", "\n", "assert", "len", "(", "cli_words", ")", "%", "2", "==", "0", "\n", "dict_keys", "=", "cli_words", "[", "0", ":", ":", "2", "]", "\n", "dict_values", "=", "cli_words", "[", "1", ":", ":", "2", "]", "\n", "for", "key", ",", "value", "in", "zip", "(", "dict_keys", ",", "dict_values", ")", ":", "\n", "            ", "value", "=", "value", ".", "strip", "(", "'\\\"'", ")", "\n", "value", "=", "value", ".", "strip", "(", "'\\''", ")", "\n", "try", ":", "\n", "                ", "value", "=", "int", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "key_subparts", "=", "key", ".", "split", "(", "'.'", ")", "\n", "if", "len", "(", "key_subparts", ")", "==", "1", ":", "\n", "                ", "self", ".", "cfg", "[", "key", "]", "=", "value", "\n", "", "elif", "len", "(", "key_subparts", ")", "==", "2", ":", "\n", "                ", "self", ".", "cfg", "[", "key_subparts", "[", "0", "]", "]", "[", "key_subparts", "[", "1", "]", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f'Keys with more than 2 subparts are not supported,'", "\n", "f'but you entered {key}.'", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.test_parse_cli_string": [[68, 74], ["test_cli_magic.TestCLIMagic.parse_cli_string", "test_cli_magic.TestCLIMagic.assertEqual", "test_cli_magic.TestCLIMagic.assertEqual", "test_cli_magic.TestCLIMagic.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string"], ["", "", "", "def", "test_parse_cli_string", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-magic dataset_id='XYZ' upload='thumbnails' trainer.max_epochs=3\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "cfg", "[", "\"dataset_id\"", "]", ",", "'XYZ'", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "cfg", "[", "\"upload\"", "]", ",", "'thumbnails'", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "cfg", "[", "'trainer'", "]", "[", "'max_epochs'", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.test_magic_new_dataset_name": [[75, 80], ["test_cli_magic.TestCLIMagic.parse_cli_string", "lightly.cli.lightly_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.lightly_cli"], ["", "def", "test_magic_new_dataset_name", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowClient", ".", "n_dims_embeddings_on_server", "=", "32", "\n", "cli_string", "=", "\"lightly-magic new_dataset_name='dataset_name_xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "lightly_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.test_magic_new_dataset_id": [[81, 86], ["test_cli_magic.TestCLIMagic.parse_cli_string", "lightly.cli.lightly_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.lightly_cli"], ["", "def", "test_magic_new_dataset_id", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowClient", ".", "n_dims_embeddings_on_server", "=", "32", "\n", "cli_string", "=", "\"lightly-magic dataset_id='dataset_id_xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "lightly_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.test_magic_without_upload_with_trainer": [[87, 92], ["test_cli_magic.TestCLIMagic.parse_cli_string", "lightly.cli.lightly_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.lightly_cli"], ["", "def", "test_magic_without_upload_with_trainer", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowClient", ".", "n_dims_embeddings_on_server", "=", "32", "\n", "cli_string", "=", "\"lightly-magic trainer.max_epochs=1\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "lightly_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.test_magic_with_trainer_and_append": [[93, 99], ["test_cli_magic.TestCLIMagic.parse_cli_string", "test_cli_magic.TestCLIMagic.assertWarns", "lightly.cli.lightly_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.lightly_cli.lightly_cli"], ["", "def", "test_magic_with_trainer_and_append", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowClient", ".", "n_dims_embeddings_on_server", "=", "32", "\n", "cli_string", "=", "\"lightly-magic trainer.max_epochs=1 append=True\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "lightly", ".", "cli", ".", "lightly_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_magic.TestCLIMagic.tearDown": [[100, 106], ["os.remove"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "filename", "in", "[", "\"embeddings.csv\"", ",", "\"embeddings_sorted.csv\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "filename", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_embed.TestCLIEmbed.setUpClass": [[15, 19], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "sys", ".", "modules", "[", "\"lightly.cli.embed_cli\"", "]", ".", "ApiWorkflowClient", "=", "MockedApiWorkflowClient", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_embed.TestCLIEmbed.setUp": [[20, 28], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowSetup.setUp", "test_cli_embed.TestCLIEmbed.create_fake_dataset", "hydra.experimental.initialize", "hydra.experimental.compose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.setUp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowSetup", ".", "setUp", "(", "self", ")", "\n", "self", ".", "create_fake_dataset", "(", ")", "\n", "with", "initialize", "(", "config_path", "=", "\"../../lightly/cli/config\"", ",", "job_name", "=", "\"test_app\"", ")", ":", "\n", "            ", "self", ".", "cfg", "=", "compose", "(", "config_name", "=", "\"config\"", ",", "overrides", "=", "[", "\n", "\"token='123'\"", ",", "\n", "f\"input_dir={self.folder_path}\"", ",", "\n", "\"trainer.max_epochs=0\"", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_embed.TestCLIEmbed.create_fake_dataset": [[30, 41], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "os.path.join", "data[].save", "range"], "methods", ["None"], ["", "", "def", "create_fake_dataset", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "16", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "self", ".", "sample_names", "=", "sample_names", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_embed.TestCLIEmbed.test_embed": [[42, 48], ["lightly.cli.embed_cli", "test_cli_embed.TestCLIEmbed.assertGreater", "len", "os.getenv"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.embed_cli.embed_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["", "", "def", "test_embed", "(", "self", ")", ":", "\n", "        ", "lightly", ".", "cli", ".", "embed_cli", "(", "self", ".", "cfg", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "os", ".", "getenv", "(", "\n", "self", ".", "cfg", "[", "'environment_variable_names'", "]", "[", "\n", "'lightly_last_embedding_path'", "]", "\n", ")", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_embed.TestCLIEmbed.tearDown": [[50, 56], ["os.remove"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "filename", "in", "[", "\"embeddings.csv\"", ",", "\"embeddings_sorted.csv\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "filename", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.setUpClass": [[24, 27], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "sys", ".", "modules", "[", "\"lightly.cli.upload_cli\"", "]", ".", "ApiWorkflowClient", "=", "MockedApiWorkflowClient", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.set_tags": [[29, 37], ["None"], "methods", ["None"], ["", "def", "set_tags", "(", "self", ",", "zero_tags", ":", "bool", "=", "True", ")", ":", "\n", "# make the dataset appear empty", "\n", "        ", "def", "mocked_get_all_tags_zero", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "zero_tags", ":", "\n", "                ", "return", "[", "]", "\n", "", "else", ":", "\n", "                ", "return", "[", "\"Any tag\"", "]", "\n", "", "", "MockedApiWorkflowClient", ".", "get_all_tags", "=", "mocked_get_all_tags_zero", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.set_embedding": [[38, 53], ["lightly.openapi_generated.swagger_client.DatasetEmbeddingData"], "methods", ["None"], ["", "def", "set_embedding", "(", "self", ",", "has_embedding", ":", "bool", ")", ":", "\n", "        ", "def", "mocked_get_embedding_by_name", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "has_embedding", ":", "\n", "                ", "return", "DatasetEmbeddingData", "(", "\n", "id", "=", "\"embedding_id\"", ",", "\n", "name", "=", "\"name\"", ",", "\n", "is_processed", "=", "True", ",", "\n", "created_at", "=", "0", ",", "\n", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "EmbeddingDoesNotExistError", "\n", "\n", "", "", "MockedApiWorkflowClient", ".", "get_embedding_by_name", "=", "mocked_get_embedding_by_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.setUp": [[56, 63], ["test_cli_upload.TestCLIUpload.set_tags", "test_cli_upload.TestCLIUpload.set_embedding", "test_cli_upload.TestCLIUpload.create_fake_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.set_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.set_embedding", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "# make the API dataset appear empty", "\n", "        ", "self", ".", "set_tags", "(", "zero_tags", "=", "True", ")", "\n", "# make it have no embeddings", "\n", "self", ".", "set_embedding", "(", "has_embedding", "=", "False", ")", "\n", "\n", "self", ".", "create_fake_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.create_fake_dataset": [[64, 104], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "tempfile.NamedTemporaryFile", "json.dump", "test_cli_upload.TestCLIUpload.tfile.flush", "os.path.join", "lightly.utils.save_embeddings", "os.path.join", "data[].save", "len", "numpy.random.randn", "range", "enumerate", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_embeddings"], ["", "def", "create_fake_dataset", "(", "\n", "self", ",", "n_data", ":", "int", "=", "N_FILES_ON_SERVER", ",", "\n", "n_rows_embeddings", ":", "int", "=", "N_FILES_ON_SERVER", ",", "\n", "n_dims_embeddings", ":", "int", "=", "4", "\n", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "self", ".", "sample_names", "=", "sample_names", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n", "", "coco_json", "=", "{", "}", "\n", "coco_json", "[", "'images'", "]", "=", "[", "\n", "{", "'id'", ":", "i", ",", "'file_name'", ":", "fname", "}", "for", "i", ",", "fname", "in", "enumerate", "(", "self", ".", "sample_names", ")", "\n", "]", "\n", "coco_json", "[", "'metadata'", "]", "=", "[", "\n", "{", "'id'", ":", "i", ",", "'image_id'", ":", "i", ",", "'custom_metadata'", ":", "0", "}", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "sample_names", ")", "\n", "]", "\n", "\n", "self", ".", "tfile", "=", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "\"w+\"", ")", "\n", "json", ".", "dump", "(", "coco_json", ",", "self", ".", "tfile", ")", "\n", "self", ".", "tfile", ".", "flush", "(", ")", "\n", "\n", "# create fake embeddings", "\n", "self", ".", "path_to_embeddings", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "'embeddings.csv'", ")", "\n", "sample_names_embeddings", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_rows_embeddings", ")", "]", "\n", "labels", "=", "[", "0", "]", "*", "len", "(", "sample_names_embeddings", ")", "\n", "save_embeddings", "(", "\n", "self", ".", "path_to_embeddings", ",", "\n", "np", ".", "random", ".", "randn", "(", "n_rows_embeddings", ",", "n_dims_embeddings", ")", ",", "\n", "labels", ",", "\n", "sample_names_embeddings", "\n", ")", "\n", "MockedApiWorkflowClient", ".", "n_dims_embeddings_on_server", "=", "n_dims_embeddings", "\n", "MockedApiWorkflowClient", ".", "n_embedding_rows_on_server", "=", "n_rows_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.parse_cli_string": [[106, 121], ["re.split", "test_cli_upload.TestCLIUpload.cfg.merge_with_cli", "hydra.experimental.initialize", "hydra.experimental.compose"], "methods", ["None"], ["", "def", "parse_cli_string", "(", "\n", "self", ",", "\n", "cli_words", ":", "str", ",", "\n", ")", ":", "\n", "        ", "with", "initialize", "(", "config_path", "=", "\"../../lightly/cli/config\"", ",", "\n", "job_name", "=", "\"test_app\"", ")", ":", "\n", "            ", "overrides", "=", "[", "\n", "\"token='123'\"", ",", "\n", "f\"input_dir={self.folder_path}\"", ",", "\n", "f\"embeddings={self.path_to_embeddings}\"", ",", "\n", "]", "\n", "self", ".", "cfg", "=", "compose", "(", "config_name", "=", "\"config\"", ",", "overrides", "=", "overrides", ")", "\n", "\n", "", "sys", ".", "argv", "=", "re", ".", "split", "(", "\" \"", ",", "cli_words", ")", "\n", "self", ".", "cfg", ".", "merge_with_cli", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_parse_cli_string": [[122, 128], ["test_cli_upload.TestCLIUpload.parse_cli_string", "test_cli_upload.TestCLIUpload.assertEqual", "test_cli_upload.TestCLIUpload.assertEqual", "test_cli_upload.TestCLIUpload.assertTrue"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string"], ["", "def", "test_parse_cli_string", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "f\"lightly-upload dataset_id='XYZ' upload='thumbnails' append={True}\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "cfg", "[", "\"dataset_id\"", "]", ",", "'XYZ'", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "cfg", "[", "\"upload\"", "]", ",", "'thumbnails'", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "cfg", "[", "'append'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_no_token": [[129, 135], ["test_cli_upload.TestCLIUpload.parse_cli_string", "test_cli_upload.TestCLIUpload.assertWarns", "lightly.cli.upload_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "def", "test_upload_no_token", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "f\"lightly-upload\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "self", ".", "cfg", "[", "'token'", "]", "=", "''", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_new_dataset_name": [[136, 145], ["test_cli_upload.TestCLIUpload.parse_cli_string", "lightly.cli.upload_cli", "test_cli_upload.TestCLIUpload.assertEqual", "test_cli_upload.TestCLIUpload.assertGreater", "len", "os.getenv"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["", "", "def", "test_upload_new_dataset_name", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-upload new_dataset_name='new_dataset_name_xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "result", "=", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "self", ".", "assertEqual", "(", "result", ",", "SUCCESS_RETURN_VALUE", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "os", ".", "getenv", "(", "\n", "self", ".", "cfg", "[", "'environment_variable_names'", "]", "[", "\n", "'lightly_last_dataset_id'", "]", "\n", ")", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_new_dataset_name_and_embeddings": [[146, 190], ["test_cli_upload.TestCLIUpload.subTest", "test_cli_upload.TestCLIUpload.create_fake_dataset", "test_cli_upload.TestCLIUpload.set_embedding", "test_cli_upload.TestCLIUpload.parse_cli_string", "test_cli_upload.TestCLIUpload.assertRaises", "lightly.cli.upload_cli", "lightly.cli.upload_cli", "test_cli_upload.TestCLIUpload.assertEqual", "test_cli_upload.TestCLIUpload.assertWarns", "lightly.cli.upload_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.set_embedding", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "def", "test_upload_new_dataset_name_and_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Idea of workflow:\n        We have 80 embedding rows on the server (n_embedding_rows_on_server).\n        We have 100 filenames on the server (N_FILES_ON_SERVER).\n        We have a dataset with 100 samples and 100 rows in the embeddings file.\n        Then we upload the dataset -> the 20 new samples get uploaded,\n        the 80 existing samples are skipped.\n        The 80 embeddings on the server are tried to be added\n        to the local embeddings file, but the local one already contains all\n        these embedding rows. Thus the new file after the appending equals\n        the local file before appending.\n\n        \"\"\"", "\n", "dims_embeddings_options", "=", "[", "8", ",", "32", "]", "\n", "n_embedding_rows_on_server", "=", "80", "\n", "for", "append", "in", "[", "True", ",", "False", "]", ":", "\n", "            ", "for", "n_dims_embeddings", "in", "dims_embeddings_options", ":", "\n", "                ", "for", "n_dims_embeddings_server", "in", "dims_embeddings_options", ":", "\n", "                    ", "with", "self", ".", "subTest", "(", "\n", "append", "=", "append", ",", "\n", "n_dims_embeddings", "=", "n_dims_embeddings", ",", "\n", "n_dims_embeddings_server", "=", "n_dims_embeddings_server", "\n", ")", ":", "\n", "\n", "                        ", "self", ".", "create_fake_dataset", "(", "\n", "n_data", "=", "N_FILES_ON_SERVER", ",", "\n", "n_rows_embeddings", "=", "N_FILES_ON_SERVER", ",", "\n", "n_dims_embeddings", "=", "n_dims_embeddings", "\n", ")", "\n", "MockedApiWorkflowClient", ".", "n_embedding_rows_on_server", "=", "n_embedding_rows_on_server", "\n", "MockedApiWorkflowClient", ".", "n_dims_embeddings_on_server", "=", "n_dims_embeddings_server", "\n", "self", ".", "set_embedding", "(", "has_embedding", "=", "True", ")", "\n", "cli_string", "=", "f\"lightly-upload new_dataset_name='new_dataset_name_xyz' embeddings={self.path_to_embeddings} append={append}\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "if", "n_dims_embeddings", "!=", "n_dims_embeddings_server", "and", "append", ":", "\n", "                            ", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "                                ", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "", "", "elif", "not", "append", ":", "\n", "                            ", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "                                ", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "", "", "else", ":", "\n", "                            ", "result", "=", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "self", ".", "assertEqual", "(", "result", ",", "SUCCESS_RETURN_VALUE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_new_dataset_id": [[191, 196], ["test_cli_upload.TestCLIUpload.parse_cli_string", "lightly.cli.upload_cli", "test_cli_upload.TestCLIUpload.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "", "", "", "", "", "def", "test_upload_new_dataset_id", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-upload dataset_id='xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "result", "=", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "self", ".", "assertEqual", "(", "result", ",", "SUCCESS_RETURN_VALUE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_no_dataset": [[197, 202], ["test_cli_upload.TestCLIUpload.parse_cli_string", "test_cli_upload.TestCLIUpload.assertWarns", "lightly.cli.upload_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "def", "test_upload_no_dataset", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-upload input_dir=data/ token='123'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_both_dataset": [[203, 208], ["test_cli_upload.TestCLIUpload.parse_cli_string", "test_cli_upload.TestCLIUpload.assertWarns", "lightly.cli.upload_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "", "def", "test_upload_both_dataset", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-upload new_dataset_name='new_dataset_name_xyz' dataset_id='xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_custom_metadata": [[209, 214], ["test_cli_upload.TestCLIUpload.parse_cli_string", "lightly.cli.upload_cli", "test_cli_upload.TestCLIUpload.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "", "def", "test_upload_custom_metadata", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "f\"lightly-upload token='123' dataset_id='xyz' custom_metadata='{self.tfile.name}'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "result", "=", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "self", ".", "assertEqual", "(", "result", ",", "SUCCESS_RETURN_VALUE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.check_upload_dataset_and_embedding": [[215, 249], ["test_cli_upload.TestCLIUpload.subTest", "test_cli_upload.TestCLIUpload.set_tags", "test_cli_upload.TestCLIUpload.set_embedding", "test_cli_upload.TestCLIUpload.parse_cli_string", "test_cli_upload.TestCLIUpload.assertWarns", "lightly.cli.upload_cli", "lightly.cli.upload_cli", "test_cli_upload.TestCLIUpload.assertEqual", "test_cli_upload.TestCLIUpload.assertWarns", "lightly.cli.upload_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.set_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.set_embedding", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli"], ["", "def", "check_upload_dataset_and_embedding", "(", "\n", "self", ",", "\n", "input_dir", ":", "bool", ",", "\n", "existing_dataset", ":", "bool", ",", "\n", "embeddings_path", ":", "bool", ",", "\n", "existing_embedding", ":", "bool", ",", "\n", "append", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "with", "self", ".", "subTest", "(", "\n", "input_dir", "=", "input_dir", ",", "\n", "existing_dataset", "=", "existing_dataset", ",", "\n", "embeddings_path", "=", "embeddings_path", ",", "\n", "existing_embedding", "=", "existing_embedding", ",", "\n", "append", "=", "append", ",", "\n", ")", ":", "\n", "            ", "self", ".", "set_tags", "(", "zero_tags", "=", "not", "existing_dataset", ")", "\n", "self", ".", "set_embedding", "(", "has_embedding", "=", "existing_embedding", ")", "\n", "\n", "cli_string", "=", "f\"lightly-upload dataset_id='xyz' append={append}\"", "\n", "if", "not", "input_dir", ":", "\n", "                ", "cli_string", "+=", "f\" input_dir=''\"", "\n", "", "if", "not", "embeddings_path", ":", "\n", "                ", "cli_string", "+=", "f\" embeddings=''\"", "\n", "", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "\n", "if", "not", "append", "and", "existing_dataset", "and", "input_dir", ":", "\n", "                ", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "                    ", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "", "", "elif", "not", "append", "and", "existing_embedding", "and", "embeddings_path", ":", "\n", "                ", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "                    ", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "", "", "else", ":", "\n", "                ", "result", "=", "lightly", ".", "cli", ".", "upload_cli", "(", "self", ".", "cfg", ")", "\n", "self", ".", "assertEqual", "(", "result", ",", "SUCCESS_RETURN_VALUE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.test_upload_dataset_and_embedding": [[250, 263], ["test_cli_upload.TestCLIUpload.check_upload_dataset_and_embedding"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_upload.TestCLIUpload.check_upload_dataset_and_embedding"], ["", "", "", "def", "test_upload_dataset_and_embedding", "(", "self", ")", ":", "\n", "\n", "        ", "for", "input_dir", "in", "[", "True", ",", "False", "]", ":", "\n", "            ", "for", "existing_dataset", "in", "[", "True", ",", "False", "]", ":", "\n", "                ", "for", "embeddings_path", "in", "[", "True", ",", "False", "]", ":", "\n", "                    ", "for", "existing_embedding", "in", "[", "True", ",", "False", "]", ":", "\n", "                        ", "for", "append", "in", "[", "True", ",", "False", "]", ":", "\n", "                            ", "self", ".", "check_upload_dataset_and_embedding", "(", "\n", "input_dir", "=", "input_dir", ",", "\n", "existing_dataset", "=", "existing_dataset", ",", "\n", "embeddings_path", "=", "embeddings_path", ",", "\n", "existing_embedding", "=", "existing_embedding", ",", "\n", "append", "=", "append", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.setUpClass": [[21, 24], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "sys", ".", "modules", "[", "\"lightly.cli.upload_cli\"", "]", ".", "ApiWorkflowClient", "=", "MockedApiWorkflowClient", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.setUp": [[25, 35], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowSetup.setUp", "test_cli_crop.TestCLICrop.create_fake_dataset", "test_cli_crop.TestCLICrop.create_fake_yolo_labels", "hydra.experimental.initialize", "hydra.experimental.compose", "tempfile.mkdtemp"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.setUp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.create_fake_yolo_labels"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowSetup", ".", "setUp", "(", "self", ")", "\n", "self", ".", "create_fake_dataset", "(", ")", "\n", "self", ".", "create_fake_yolo_labels", "(", ")", "\n", "with", "initialize", "(", "config_path", "=", "\"../../lightly/cli/config\"", ",", "job_name", "=", "\"test_app\"", ")", ":", "\n", "            ", "self", ".", "cfg", "=", "compose", "(", "config_name", "=", "\"config\"", ",", "overrides", "=", "[", "\n", "f\"input_dir={self.folder_path}\"", ",", "\n", "f\"label_dir={self.folder_path_labels}\"", ",", "\n", "f\"output_dir={tempfile.mkdtemp()}\"", ",", "\n", "f\"label_names_file={self.label_names_file}\"", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.create_fake_dataset": [[37, 48], ["len", "torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "test_cli_crop.TestCLICrop.api_workflow_client.get_filenames", "os.path.join", "data[].save", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "def", "create_fake_dataset", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", ")", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "self", ".", "sample_names", "=", "sample_names", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.create_fake_yolo_labels": [[49, 72], ["random.seed", "len", "tempfile.mkdtemp", "tempfile.mktemp", "test_cli_crop.TestCLICrop.api_workflow_client.get_filenames", "os.path.join", "open", "yaml.dump", "range", "open", "range", "random.randint", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "the_file.write", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump"], ["", "", "def", "create_fake_yolo_labels", "(", "self", ",", "no_classes", ":", "int", "=", "10", ",", "objects_per_image", ":", "int", "=", "13", ")", ":", "\n", "        ", "random", ".", "seed", "(", "42", ")", "\n", "\n", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", ")", "\n", "\n", "self", ".", "folder_path_labels", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "label_names", "=", "[", "f'img_{i}.txt'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "self", ".", "label_names", "=", "label_names", "\n", "for", "filename_label", "in", "label_names", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path_labels", ",", "filename_label", ")", "\n", "with", "open", "(", "path", ",", "'a'", ")", "as", "the_file", ":", "\n", "                ", "for", "i", "in", "range", "(", "objects_per_image", ")", ":", "\n", "                    ", "class_id", "=", "random", ".", "randint", "(", "0", ",", "no_classes", "-", "1", ")", "\n", "x", "=", "random", ".", "uniform", "(", "0.1", ",", "0.9", ")", "\n", "y", "=", "random", ".", "uniform", "(", "0.1", ",", "0.9", ")", "\n", "w", "=", "random", ".", "uniform", "(", "0.1", ",", "1.0", ")", "\n", "h", "=", "random", ".", "uniform", "(", "0.1", ",", "1.0", ")", "\n", "line", "=", "f\"{class_id} {x} {y} {w} {h}\\n\"", "\n", "the_file", ".", "write", "(", "line", ")", "\n", "", "", "", "yaml_dict", "=", "{", "\"names\"", ":", "[", "f\"class{i}\"", "for", "i", "in", "range", "(", "no_classes", ")", "]", "}", "\n", "self", ".", "label_names_file", "=", "tempfile", ".", "mktemp", "(", "'.yaml'", ",", "'data'", ",", "dir", "=", "self", ".", "folder_path_labels", ")", "\n", "with", "open", "(", "self", ".", "label_names_file", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "yaml", ".", "dump", "(", "yaml_dict", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.parse_cli_string": [[73, 83], ["re.split.replace", "re.split", "zip", "value.strip.strip.strip", "value.strip.strip.strip", "len"], "methods", ["None"], ["", "", "def", "parse_cli_string", "(", "self", ",", "cli_words", ":", "str", ")", ":", "\n", "        ", "cli_words", "=", "cli_words", ".", "replace", "(", "\"lightly-crop \"", ",", "\"\"", ")", "\n", "cli_words", "=", "re", ".", "split", "(", "\"=| \"", ",", "cli_words", ")", "\n", "assert", "len", "(", "cli_words", ")", "%", "2", "==", "0", "\n", "dict_keys", "=", "cli_words", "[", "0", ":", ":", "2", "]", "\n", "dict_values", "=", "cli_words", "[", "1", ":", ":", "2", "]", "\n", "for", "key", ",", "value", "in", "zip", "(", "dict_keys", ",", "dict_values", ")", ":", "\n", "            ", "value", "=", "value", ".", "strip", "(", "'\\\"'", ")", "\n", "value", "=", "value", ".", "strip", "(", "'\\''", ")", "\n", "self", ".", "cfg", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.test_parse_cli_string": [[84, 88], ["test_cli_crop.TestCLICrop.parse_cli_string", "test_cli_crop.TestCLICrop.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string"], ["", "", "def", "test_parse_cli_string", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-crop label_dir=/blub\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "cfg", "[", "'label_dir'", "]", ",", "'/blub'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.test_read_yolo": [[89, 94], ["os.listdir", "f.endswith", "os.path.join", "lightly.utils.cropping.read_yolo_label_file.read_yolo_label_file"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.read_yolo_label_file.read_yolo_label_file"], ["", "def", "test_read_yolo", "(", "self", ")", ":", "\n", "        ", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "cfg", ".", "label_dir", ")", ":", "\n", "            ", "if", "f", ".", "endswith", "(", "'.txt'", ")", ":", "\n", "                ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "label_dir", ",", "f", ")", "\n", "read_yolo_label_file", "(", "filepath", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.test_crop_dataset_by_bounding_boxes_and_save": [[95, 123], ["lightly.data.LightlyDataset", "len", "lightly.data.LightlyDataset.get_filenames", "test_cli_crop.TestCLICrop.subTest", "lightly.utils.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save", "test_cli_crop.TestCLICrop.subTest", "test_cli_crop.TestCLICrop.subTest", "test_cli_crop.TestCLICrop.assertRaises", "lightly.utils.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save", "test_cli_crop.TestCLICrop.assertWarns", "lightly.utils.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save", "lightly.active_learning.utils.BoundingBox"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save", "home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save", "home.repos.pwc.inspect_result.lightly-ai_lightly.cropping.crop_image_by_bounding_boxes.crop_dataset_by_bounding_boxes_and_save"], ["", "", "", "def", "test_crop_dataset_by_bounding_boxes_and_save", "(", "self", ")", ":", "\n", "        ", "dataset", "=", "LightlyDataset", "(", "self", ".", "cfg", ".", "input_dir", ")", "\n", "output_dir", "=", "self", ".", "cfg", ".", "output_dir", "\n", "no_files", "=", "len", "(", "dataset", ".", "get_filenames", "(", ")", ")", "\n", "bounding_boxes_list_list", "=", "[", "[", "BoundingBox", "(", "0", ",", "0", ",", "1", ",", "1", ")", "]", "]", "*", "no_files", "\n", "class_indices_list_list", "=", "[", "[", "1", "]", "]", "*", "no_files", "\n", "class_names", "=", "[", "\"class_0\"", ",", "\"class_1\"", "]", "\n", "with", "self", ".", "subTest", "(", "\"all_correct\"", ")", ":", "\n", "            ", "crop_dataset_by_bounding_boxes_and_save", "(", "dataset", ",", "\n", "output_dir", ",", "\n", "bounding_boxes_list_list", ",", "\n", "class_indices_list_list", ",", "\n", "class_names", ")", "\n", "", "with", "self", ".", "subTest", "(", "\"wrong length of bounding_boxes_list_list\"", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "crop_dataset_by_bounding_boxes_and_save", "(", "dataset", ",", "\n", "output_dir", ",", "\n", "bounding_boxes_list_list", "[", ":", "-", "1", "]", ",", "\n", "class_indices_list_list", ",", "\n", "class_names", ")", "\n", "", "", "with", "self", ".", "subTest", "(", "\"wrong internal length of class_indices_list_list\"", ")", ":", "\n", "            ", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "                ", "class_indices_list_list", "[", "0", "]", "*=", "2", "\n", "crop_dataset_by_bounding_boxes_and_save", "(", "dataset", ",", "\n", "output_dir", ",", "\n", "bounding_boxes_list_list", ",", "\n", "class_indices_list_list", ",", "\n", "class_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.test_crop_with_class_names": [[126, 130], ["test_cli_crop.TestCLICrop.parse_cli_string", "lightly.cli.crop_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.crop_cli.crop_cli"], ["", "", "", "def", "test_crop_with_class_names", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-crop crop_padding=0.1\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "crop_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_crop.TestCLICrop.test_crop_without_class_names": [[131, 136], ["test_cli_crop.TestCLICrop.parse_cli_string", "lightly.cli.crop_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.crop_cli.crop_cli"], ["", "def", "test_crop_without_class_names", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-crop crop_padding=0.1\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "self", ".", "cfg", "[", "'label_names_file'", "]", "=", "''", "\n", "lightly", ".", "cli", ".", "crop_cli", "(", "self", ".", "cfg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.setUpClass": [[16, 19], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "sys", ".", "modules", "[", "\"lightly.cli.download_cli\"", "]", ".", "ApiWorkflowClient", "=", "MockedApiWorkflowClient", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.setUp": [[20, 23], ["hydra.experimental.initialize", "hydra.experimental.compose"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "with", "initialize", "(", "config_path", "=", "\"../../lightly/cli/config\"", ",", "job_name", "=", "\"test_app\"", ")", ":", "\n", "            ", "self", ".", "cfg", "=", "compose", "(", "config_name", "=", "\"config\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.create_fake_dataset": [[24, 38], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "tempfile.mkdtemp", "os.path.join", "data[].save", "range"], "methods", ["None"], ["", "", "def", "create_fake_dataset", "(", "self", ",", "n_data", ":", "int", "=", "5", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "input_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "self", ".", "sample_names", "=", "sample_names", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n", "", "self", ".", "output_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string": [[39, 46], ["cli_words.replace.replace.replace", "cli_words.replace.replace.split", "hydra.experimental.initialize", "hydra.experimental.compose"], "methods", ["None"], ["", "def", "parse_cli_string", "(", "self", ",", "cli_words", ":", "str", ")", ":", "\n", "        ", "cli_words", "=", "cli_words", ".", "replace", "(", "'lightly-download '", ",", "''", ")", "\n", "overrides", "=", "cli_words", ".", "split", "(", "' '", ")", "\n", "with", "initialize", "(", "config_path", "=", "'../../lightly/cli/config/'", ")", ":", "\n", "            ", "self", ".", "cfg", "=", "compose", "(", "\n", "config_name", "=", "'config'", ",", "\n", "overrides", "=", "overrides", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_parse_cli_string": [[48, 53], ["test_cli_download.TestCLIDownload.parse_cli_string"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string"], ["", "", "def", "test_parse_cli_string", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-download token='123' dataset_id='XYZ'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "assert", "self", ".", "cfg", "[", "\"token\"", "]", "==", "'123'", "\n", "assert", "self", ".", "cfg", "[", "\"dataset_id\"", "]", "==", "'XYZ'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_base": [[54, 58], ["test_cli_download.TestCLIDownload.parse_cli_string", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "def", "test_download_base", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-download token='123' dataset_id='XYZ'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_tag_name": [[59, 63], ["test_cli_download.TestCLIDownload.parse_cli_string", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "def", "test_download_tag_name", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-download token='123' dataset_id='XYZ' tag_name='selected_tag_xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_tag_name_nonexisting": [[64, 69], ["test_cli_download.TestCLIDownload.parse_cli_string", "test_cli_download.TestCLIDownload.assertRaises", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "def", "test_download_tag_name_nonexisting", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-download token='123' dataset_id='XYZ' tag_name='nonexisting_xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_tag_name_exclude_parent": [[70, 74], ["test_cli_download.TestCLIDownload.parse_cli_string", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "", "def", "test_download_tag_name_exclude_parent", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-download token='123' dataset_id='XYZ' tag_name='selected_tag_xyz' exclude_parent_tag=True\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_no_tag_name": [[75, 80], ["test_cli_download.TestCLIDownload.parse_cli_string", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "def", "test_download_no_tag_name", "(", "self", ")", ":", "\n", "# defaults to initial-tag", "\n", "        ", "cli_string", "=", "\"lightly-download token='123' dataset_id='XYZ'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_no_token": [[81, 86], ["test_cli_download.TestCLIDownload.parse_cli_string", "test_cli_download.TestCLIDownload.assertWarns", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "def", "test_download_no_token", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-download dataset_id='XYZ' tag_name='selected_tag_xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_no_dataset_id": [[87, 92], ["test_cli_download.TestCLIDownload.parse_cli_string", "test_cli_download.TestCLIDownload.assertWarns", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "", "def", "test_download_no_dataset_id", "(", "self", ")", ":", "\n", "        ", "cli_string", "=", "\"lightly-download token='123' tag_name='selected_tag_xyz'\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_copy_from_input_to_output_dir": [[93, 99], ["test_cli_download.TestCLIDownload.create_fake_dataset", "test_cli_download.TestCLIDownload.parse_cli_string", "lightly.cli.download_cli"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "", "def", "test_download_copy_from_input_to_output_dir", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", "n_data", "=", "100", ")", "\n", "cli_string", "=", "f\"lightly-download token='123' dataset_id='dataset_1_id' tag_name='selected_tag_xyz' \"", "f\"input_dir={self.input_dir} output_dir={self.output_dir}\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.test_download_from_tag_with_integer_name": [[100, 111], ["test_cli_download.TestCLIDownload.parse_cli_string", "test_cli_download.TestCLIDownload.assertEqual", "pytest.warns", "lightly.cli.download_cli", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.parse_cli_string", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.download_cli.download_cli"], ["", "def", "test_download_from_tag_with_integer_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test to reproduce issue #575.\"\"\"", "\n", "# use tag name \"1000\"", "\n", "cli_string", "=", "\"lightly-download token='123' dataset_id='dataset_1_id' tag_name=1000\"", "\n", "self", ".", "parse_cli_string", "(", "cli_string", ")", "\n", "with", "pytest", ".", "warns", "(", "None", ")", "as", "record", ":", "\n", "            ", "lightly", ".", "cli", ".", "download_cli", "(", "self", ".", "cfg", ")", "\n", "# check if the warning \"Tag with name 1000 does not exist\" is raised", "\n", "# if so, the cli string was not parsed correctly", "\n", "# (i.e. as int instead of str)", "\n", "", "self", ".", "assertEqual", "(", "len", "(", "record", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.test_cli_download.TestCLIDownload.tearDown": [[112, 117], ["os.remove"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "remove", "(", "f\"{self.cfg['tag_name']}.txt\"", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.config.selection_config.SelectionConfig.__init__": [[37, 47], ["datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "method", ":", "SamplingMethod", "=", "SamplingMethod", ".", "CORESET", ",", "n_samples", ":", "int", "=", "32", ",", "min_distance", ":", "float", "=", "-", "1", ",", "\n", "name", ":", "str", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "method", "=", "method", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "min_distance", "=", "min_distance", "\n", "if", "name", "is", "None", ":", "\n", "            ", "date_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m_%d_%Y__%H_%M_%S\"", ")", "\n", "name", "=", "f\"{self.method}_{self.n_samples}_{self.min_distance}_{date_time}\"", "\n", "", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.config.selection_config.SamplingConfig.__init__": [[51, 58], ["warnings.warn", "selection_config.SelectionConfig.__init__", "PendingDeprecationWarning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "PendingDeprecationWarning", "(", "\n", "\"SamplingConfig() is deprecated \"", "\n", "\"in favour of SelectionConfig() \"", "\n", "\"and will be removed in the future.\"", "\n", ")", ",", ")", "\n", "SelectionConfig", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__init__": [[63, 79], ["lightly.openapi_generated.swagger_client.rest.RESTClientObject", "lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "configuration", "=", "None", ",", "header_name", "=", "None", ",", "header_value", "=", "None", ",", "\n", "cookie", "=", "None", ")", ":", "\n", "        ", "if", "configuration", "is", "None", ":", "\n", "            ", "configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "configuration", "=", "configuration", "\n", "\n", "# Use the pool property to lazily initialize the ThreadPool.", "\n", "self", ".", "_pool", "=", "None", "\n", "self", ".", "rest_client", "=", "rest", ".", "RESTClientObject", "(", "configuration", ")", "\n", "self", ".", "default_headers", "=", "{", "}", "\n", "if", "header_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "default_headers", "[", "header_name", "]", "=", "header_value", "\n", "", "self", ".", "cookie", "=", "cookie", "\n", "# Set default User-Agent.", "\n", "self", ".", "user_agent", "=", "'Swagger-Codegen/1.0.0/python'", "\n", "self", ".", "client_side_validation", "=", "configuration", ".", "client_side_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__del__": [[80, 84], ["api_client.ApiClient._pool.close", "api_client.ApiClient._pool.join"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_pool", "is", "not", "None", ":", "\n", "            ", "self", ".", "_pool", ".", "close", "(", ")", "\n", "self", ".", "_pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.pool": [[85, 90], ["multiprocessing.pool.ThreadPool"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "pool", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_pool", "is", "None", ":", "\n", "            ", "self", ".", "_pool", "=", "ThreadPool", "(", ")", "\n", "", "return", "self", ".", "_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.user_agent": [[96, 99], ["None"], "methods", ["None"], ["", "@", "user_agent", ".", "setter", "\n", "def", "user_agent", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "default_headers", "[", "'User-Agent'", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.set_default_header": [[100, 102], ["None"], "methods", ["None"], ["", "def", "set_default_header", "(", "self", ",", "header_name", ",", "header_value", ")", ":", "\n", "        ", "self", ".", "default_headers", "[", "header_name", "]", "=", "header_value", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__call_api": [[103, 179], ["dict.update", "api_client.ApiClient.update_params_for_auth", "api_client.ApiClient.request", "api_client.ApiClient.sanitize_for_serialization", "dict", "api_client.ApiClient.sanitize_for_serialization", "api_client.ApiClient.parameters_to_tuples", "api_client.ApiClient.sanitize_for_serialization", "api_client.ApiClient.parameters_to_tuples", "api_client.ApiClient.prepare_post_parameters", "api_client.ApiClient.sanitize_for_serialization", "api_client.ApiClient.parameters_to_tuples", "api_client.ApiClient.sanitize_for_serialization", "api_client.ApiClient.parameters_to_tuples", "resource_path.replace.replace.replace", "api_client.ApiClient.deserialize", "api_client.ApiClient.getheaders", "six.moves.urllib.parse.quote", "str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.update_params_for_auth", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.parameters_to_tuples", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.parameters_to_tuples", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.prepare_post_parameters", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.parameters_to_tuples", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.parameters_to_tuples", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.deserialize", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.getheaders"], ["", "def", "__call_api", "(", "\n", "self", ",", "resource_path", ",", "method", ",", "path_params", "=", "None", ",", "\n", "query_params", "=", "None", ",", "header_params", "=", "None", ",", "body", "=", "None", ",", "post_params", "=", "None", ",", "\n", "files", "=", "None", ",", "response_type", "=", "None", ",", "auth_settings", "=", "None", ",", "\n", "_return_http_data_only", "=", "None", ",", "collection_formats", "=", "None", ",", "\n", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "configuration", "\n", "\n", "# header parameters", "\n", "header_params", "=", "header_params", "or", "{", "}", "\n", "header_params", ".", "update", "(", "self", ".", "default_headers", ")", "\n", "if", "self", ".", "cookie", ":", "\n", "            ", "header_params", "[", "'Cookie'", "]", "=", "self", ".", "cookie", "\n", "", "if", "header_params", ":", "\n", "            ", "header_params", "=", "self", ".", "sanitize_for_serialization", "(", "header_params", ")", "\n", "header_params", "=", "dict", "(", "self", ".", "parameters_to_tuples", "(", "header_params", ",", "\n", "collection_formats", ")", ")", "\n", "\n", "# path parameters", "\n", "", "if", "path_params", ":", "\n", "            ", "path_params", "=", "self", ".", "sanitize_for_serialization", "(", "path_params", ")", "\n", "path_params", "=", "self", ".", "parameters_to_tuples", "(", "path_params", ",", "\n", "collection_formats", ")", "\n", "for", "k", ",", "v", "in", "path_params", ":", "\n", "# specified safe chars, encode everything", "\n", "                ", "resource_path", "=", "resource_path", ".", "replace", "(", "\n", "'{%s}'", "%", "k", ",", "\n", "quote", "(", "str", "(", "v", ")", ",", "safe", "=", "config", ".", "safe_chars_for_path_param", ")", "\n", ")", "\n", "\n", "# query parameters", "\n", "", "", "if", "query_params", ":", "\n", "            ", "query_params", "=", "self", ".", "sanitize_for_serialization", "(", "query_params", ")", "\n", "query_params", "=", "self", ".", "parameters_to_tuples", "(", "query_params", ",", "\n", "collection_formats", ")", "\n", "\n", "# post parameters", "\n", "", "if", "post_params", "or", "files", ":", "\n", "            ", "post_params", "=", "self", ".", "prepare_post_parameters", "(", "post_params", ",", "files", ")", "\n", "post_params", "=", "self", ".", "sanitize_for_serialization", "(", "post_params", ")", "\n", "post_params", "=", "self", ".", "parameters_to_tuples", "(", "post_params", ",", "\n", "collection_formats", ")", "\n", "\n", "# auth setting", "\n", "", "self", ".", "update_params_for_auth", "(", "header_params", ",", "query_params", ",", "auth_settings", ")", "\n", "\n", "# body", "\n", "if", "body", ":", "\n", "            ", "body", "=", "self", ".", "sanitize_for_serialization", "(", "body", ")", "\n", "\n", "# request url", "\n", "", "url", "=", "self", ".", "configuration", ".", "host", "+", "resource_path", "\n", "\n", "# perform request and return response", "\n", "response_data", "=", "self", ".", "request", "(", "\n", "method", ",", "url", ",", "query_params", "=", "query_params", ",", "headers", "=", "header_params", ",", "\n", "post_params", "=", "post_params", ",", "body", "=", "body", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ")", "\n", "\n", "self", ".", "last_response", "=", "response_data", "\n", "\n", "return_data", "=", "response_data", "\n", "if", "_preload_content", ":", "\n", "# deserialize response data", "\n", "            ", "if", "response_type", ":", "\n", "                ", "return_data", "=", "self", ".", "deserialize", "(", "response_data", ",", "response_type", ")", "\n", "", "else", ":", "\n", "                ", "return_data", "=", "None", "\n", "\n", "", "", "if", "_return_http_data_only", ":", "\n", "            ", "return", "(", "return_data", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "return_data", ",", "response_data", ".", "status", ",", "\n", "response_data", ".", "getheaders", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization": [[180, 221], ["isinstance", "isinstance", "api_client.ApiClient.sanitize_for_serialization", "isinstance", "getattr", "six.iteritems", "isinstance", "six.iteritems", "api_client.ApiClient.sanitize_for_serialization", "tuple", "isinstance", "getattr", "obj.isoformat", "api_client.ApiClient.sanitize_for_serialization"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.sanitize_for_serialization"], ["", "", "def", "sanitize_for_serialization", "(", "self", ",", "obj", ")", ":", "\n", "        ", "\"\"\"Builds a JSON POST object.\n\n        If obj is None, return None.\n        If obj is str, int, long, float, bool, return directly.\n        If obj is datetime.datetime, datetime.date\n            convert to string in iso8601 format.\n        If obj is list, sanitize each element in the list.\n        If obj is dict, return the dict.\n        If obj is swagger model, return the properties dict.\n\n        :param obj: The data to serialize.\n        :return: The serialized form of data.\n        \"\"\"", "\n", "if", "obj", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "elif", "isinstance", "(", "obj", ",", "self", ".", "PRIMITIVE_TYPES", ")", ":", "\n", "            ", "return", "obj", "\n", "", "elif", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "sanitize_for_serialization", "(", "sub_obj", ")", "\n", "for", "sub_obj", "in", "obj", "]", "\n", "", "elif", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "            ", "return", "tuple", "(", "self", ".", "sanitize_for_serialization", "(", "sub_obj", ")", "\n", "for", "sub_obj", "in", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "(", "datetime", ".", "datetime", ",", "datetime", ".", "date", ")", ")", ":", "\n", "            ", "return", "obj", ".", "isoformat", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "obj_dict", "=", "obj", "\n", "", "else", ":", "\n", "# Convert model obj to dict except", "\n", "# attributes `swagger_types`, `attribute_map`", "\n", "# and attributes which value is not None.", "\n", "# Convert attribute name to json key in", "\n", "# model definition for request.", "\n", "            ", "obj_dict", "=", "{", "obj", ".", "attribute_map", "[", "attr", "]", ":", "getattr", "(", "obj", ",", "attr", ")", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "obj", ".", "swagger_types", ")", "\n", "if", "getattr", "(", "obj", ",", "attr", ")", "is", "not", "None", "}", "\n", "\n", "", "return", "{", "key", ":", "self", ".", "sanitize_for_serialization", "(", "val", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "obj_dict", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.deserialize": [[222, 243], ["api_client.ApiClient.__deserialize", "api_client.ApiClient.__deserialize_file", "json.loads"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_file"], ["", "def", "deserialize", "(", "self", ",", "response", ",", "response_type", ")", ":", "\n", "        ", "\"\"\"Deserializes response into an object.\n\n        :param response: RESTResponse object to be deserialized.\n        :param response_type: class literal for\n            deserialized object, or string of class name.\n\n        :return: deserialized object.\n        \"\"\"", "\n", "# handle file downloading", "\n", "# save response body into a tmp file and return the instance", "\n", "if", "response_type", "==", "\"file\"", ":", "\n", "            ", "return", "self", ".", "__deserialize_file", "(", "response", ")", "\n", "\n", "# fetch data from response object", "\n", "", "try", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "response", ".", "data", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "data", "=", "response", ".", "data", "\n", "\n", "", "return", "self", ".", "__deserialize", "(", "data", ",", "response_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize": [[244, 282], ["type", "getattr.startswith", "getattr.startswith", "api_client.ApiClient.__deserialize_primitive", "re.match().group", "re.match().group", "getattr", "api_client.ApiClient.__deserialize_object", "api_client.ApiClient.__deserialize", "api_client.ApiClient.__deserialize", "api_client.ApiClient.__deserialize_date", "re.match", "re.match", "six.iteritems", "api_client.ApiClient.__deserialize_datatime", "api_client.ApiClient.__deserialize_model"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_primitive", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_object", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_date", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_datatime", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_model"], ["", "def", "__deserialize", "(", "self", ",", "data", ",", "klass", ")", ":", "\n", "        ", "\"\"\"Deserializes dict, list, str into an object.\n\n        :param data: dict, list or str.\n        :param klass: class literal, or string of class name.\n\n        :return: object.\n        \"\"\"", "\n", "if", "data", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "type", "(", "klass", ")", "==", "str", ":", "\n", "            ", "if", "klass", ".", "startswith", "(", "'list['", ")", ":", "\n", "                ", "sub_kls", "=", "re", ".", "match", "(", "r'list\\[(.*)\\]'", ",", "klass", ")", ".", "group", "(", "1", ")", "\n", "return", "[", "self", ".", "__deserialize", "(", "sub_data", ",", "sub_kls", ")", "\n", "for", "sub_data", "in", "data", "]", "\n", "\n", "", "if", "klass", ".", "startswith", "(", "'dict('", ")", ":", "\n", "                ", "sub_kls", "=", "re", ".", "match", "(", "r'dict\\(([^,]*), (.*)\\)'", ",", "klass", ")", ".", "group", "(", "2", ")", "\n", "return", "{", "k", ":", "self", ".", "__deserialize", "(", "v", ",", "sub_kls", ")", "\n", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "data", ")", "}", "\n", "\n", "# convert str to class", "\n", "", "if", "klass", "in", "self", ".", "NATIVE_TYPES_MAPPING", ":", "\n", "                ", "klass", "=", "self", ".", "NATIVE_TYPES_MAPPING", "[", "klass", "]", "\n", "", "else", ":", "\n", "                ", "klass", "=", "getattr", "(", "lightly", ".", "openapi_generated", ".", "swagger_client", ".", "models", ",", "klass", ")", "\n", "\n", "", "", "if", "klass", "in", "self", ".", "PRIMITIVE_TYPES", ":", "\n", "            ", "return", "self", ".", "__deserialize_primitive", "(", "data", ",", "klass", ")", "\n", "", "elif", "klass", "==", "object", ":", "\n", "            ", "return", "self", ".", "__deserialize_object", "(", "data", ")", "\n", "", "elif", "klass", "==", "datetime", ".", "date", ":", "\n", "            ", "return", "self", ".", "__deserialize_date", "(", "data", ")", "\n", "", "elif", "klass", "==", "datetime", ".", "datetime", ":", "\n", "            ", "return", "self", ".", "__deserialize_datatime", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "__deserialize_model", "(", "data", ",", "klass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.call_api": [[283, 342], ["api_client.ApiClient.__call_api", "api_client.ApiClient.pool.apply_async"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__call_api"], ["", "", "def", "call_api", "(", "self", ",", "resource_path", ",", "method", ",", "\n", "path_params", "=", "None", ",", "query_params", "=", "None", ",", "header_params", "=", "None", ",", "\n", "body", "=", "None", ",", "post_params", "=", "None", ",", "files", "=", "None", ",", "\n", "response_type", "=", "None", ",", "auth_settings", "=", "None", ",", "async_req", "=", "None", ",", "\n", "_return_http_data_only", "=", "None", ",", "collection_formats", "=", "None", ",", "\n", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"Makes the HTTP request (synchronous) and returns deserialized data.\n\n        To make an async request, set the async_req parameter.\n\n        :param resource_path: Path to method endpoint.\n        :param method: Method to call.\n        :param path_params: Path parameters in the url.\n        :param query_params: Query parameters in the url.\n        :param header_params: Header parameters to be\n            placed in the request header.\n        :param body: Request body.\n        :param post_params dict: Request post form parameters,\n            for `application/x-www-form-urlencoded`, `multipart/form-data`.\n        :param auth_settings list: Auth Settings names for the request.\n        :param response: Response data type.\n        :param files dict: key -> filename, value -> filepath,\n            for `multipart/form-data`.\n        :param async_req bool: execute request asynchronously\n        :param _return_http_data_only: response data without head status code\n                                       and headers\n        :param collection_formats: dict of collection formats for path, query,\n            header, and post parameters.\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :return:\n            If async_req parameter is True,\n            the request will be called asynchronously.\n            The method will return the request thread.\n            If parameter async_req is False or missing,\n            then the method will return the response directly.\n        \"\"\"", "\n", "if", "not", "async_req", ":", "\n", "            ", "return", "self", ".", "__call_api", "(", "resource_path", ",", "method", ",", "\n", "path_params", ",", "query_params", ",", "header_params", ",", "\n", "body", ",", "post_params", ",", "files", ",", "\n", "response_type", ",", "auth_settings", ",", "\n", "_return_http_data_only", ",", "collection_formats", ",", "\n", "_preload_content", ",", "_request_timeout", ")", "\n", "", "else", ":", "\n", "            ", "thread", "=", "self", ".", "pool", ".", "apply_async", "(", "self", ".", "__call_api", ",", "(", "resource_path", ",", "\n", "method", ",", "path_params", ",", "query_params", ",", "\n", "header_params", ",", "body", ",", "\n", "post_params", ",", "files", ",", "\n", "response_type", ",", "auth_settings", ",", "\n", "_return_http_data_only", ",", "\n", "collection_formats", ",", "\n", "_preload_content", ",", "_request_timeout", ")", ")", "\n", "", "return", "thread", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.request": [[343, 401], ["api_client.ApiClient.rest_client.GET", "api_client.ApiClient.rest_client.HEAD", "api_client.ApiClient.rest_client.OPTIONS", "api_client.ApiClient.rest_client.POST", "api_client.ApiClient.rest_client.PUT", "api_client.ApiClient.rest_client.PATCH", "api_client.ApiClient.rest_client.DELETE", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.GET", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.HEAD", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.OPTIONS", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.POST", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.PUT", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.PATCH", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.DELETE"], ["", "def", "request", "(", "self", ",", "method", ",", "url", ",", "query_params", "=", "None", ",", "headers", "=", "None", ",", "\n", "post_params", "=", "None", ",", "body", "=", "None", ",", "_preload_content", "=", "True", ",", "\n", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"Makes the HTTP request using RESTClient.\"\"\"", "\n", "if", "method", "==", "\"GET\"", ":", "\n", "            ", "return", "self", ".", "rest_client", ".", "GET", "(", "url", ",", "\n", "query_params", "=", "query_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "headers", "=", "headers", ")", "\n", "", "elif", "method", "==", "\"HEAD\"", ":", "\n", "            ", "return", "self", ".", "rest_client", ".", "HEAD", "(", "url", ",", "\n", "query_params", "=", "query_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "headers", "=", "headers", ")", "\n", "", "elif", "method", "==", "\"OPTIONS\"", ":", "\n", "            ", "return", "self", ".", "rest_client", ".", "OPTIONS", "(", "url", ",", "\n", "query_params", "=", "query_params", ",", "\n", "headers", "=", "headers", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "", "elif", "method", "==", "\"POST\"", ":", "\n", "            ", "return", "self", ".", "rest_client", ".", "POST", "(", "url", ",", "\n", "query_params", "=", "query_params", ",", "\n", "headers", "=", "headers", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "", "elif", "method", "==", "\"PUT\"", ":", "\n", "            ", "return", "self", ".", "rest_client", ".", "PUT", "(", "url", ",", "\n", "query_params", "=", "query_params", ",", "\n", "headers", "=", "headers", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "", "elif", "method", "==", "\"PATCH\"", ":", "\n", "            ", "return", "self", ".", "rest_client", ".", "PATCH", "(", "url", ",", "\n", "query_params", "=", "query_params", ",", "\n", "headers", "=", "headers", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "", "elif", "method", "==", "\"DELETE\"", ":", "\n", "            ", "return", "self", ".", "rest_client", ".", "DELETE", "(", "url", ",", "\n", "query_params", "=", "query_params", ",", "\n", "headers", "=", "headers", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"http method must be `GET`, `HEAD`, `OPTIONS`,\"", "\n", "\" `POST`, `PATCH`, `PUT` or `DELETE`.\"", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.parameters_to_tuples": [[404, 433], ["isinstance", "six.iteritems", "new_params.append", "new_params.extend", "new_params.append", "delimiter.join", "str"], "methods", ["None"], ["", "", "def", "parameters_to_tuples", "(", "self", ",", "params", ",", "collection_formats", ")", ":", "\n", "        ", "\"\"\"Get parameters as list of tuples, formatting collections.\n\n        :param params: Parameters as dict or list of two-tuples\n        :param dict collection_formats: Parameter collection formats\n        :return: Parameters as list of tuples, collections formatted\n        \"\"\"", "\n", "new_params", "=", "[", "]", "\n", "if", "collection_formats", "is", "None", ":", "\n", "            ", "collection_formats", "=", "{", "}", "\n", "", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "params", ")", "if", "isinstance", "(", "params", ",", "dict", ")", "else", "params", ":", "# noqa: E501", "\n", "            ", "if", "k", "in", "collection_formats", ":", "\n", "                ", "collection_format", "=", "collection_formats", "[", "k", "]", "\n", "if", "collection_format", "==", "'multi'", ":", "\n", "                    ", "new_params", ".", "extend", "(", "(", "k", ",", "value", ")", "for", "value", "in", "v", ")", "\n", "", "else", ":", "\n", "                    ", "if", "collection_format", "==", "'ssv'", ":", "\n", "                        ", "delimiter", "=", "' '", "\n", "", "elif", "collection_format", "==", "'tsv'", ":", "\n", "                        ", "delimiter", "=", "'\\t'", "\n", "", "elif", "collection_format", "==", "'pipes'", ":", "\n", "                        ", "delimiter", "=", "'|'", "\n", "", "else", ":", "# csv is the default", "\n", "                        ", "delimiter", "=", "','", "\n", "", "new_params", ".", "append", "(", "\n", "(", "k", ",", "delimiter", ".", "join", "(", "str", "(", "value", ")", "for", "value", "in", "v", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "new_params", ".", "append", "(", "(", "k", ",", "v", ")", ")", "\n", "", "", "return", "new_params", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.prepare_post_parameters": [[434, 461], ["six.iteritems", "type", "open", "os.path.basename", "f.read", "params.append", "tuple", "mimetypes.guess_type", "tuple"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["", "def", "prepare_post_parameters", "(", "self", ",", "post_params", "=", "None", ",", "files", "=", "None", ")", ":", "\n", "        ", "\"\"\"Builds form parameters.\n\n        :param post_params: Normal form parameters.\n        :param files: File parameters.\n        :return: Form parameters with files.\n        \"\"\"", "\n", "params", "=", "[", "]", "\n", "\n", "if", "post_params", ":", "\n", "            ", "params", "=", "post_params", "\n", "\n", "", "if", "files", ":", "\n", "            ", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "files", ")", ":", "\n", "                ", "if", "not", "v", ":", "\n", "                    ", "continue", "\n", "", "file_names", "=", "v", "if", "type", "(", "v", ")", "is", "list", "else", "[", "v", "]", "\n", "for", "n", "in", "file_names", ":", "\n", "                    ", "with", "open", "(", "n", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "f", ".", "name", ")", "\n", "filedata", "=", "f", ".", "read", "(", ")", "\n", "mimetype", "=", "(", "mimetypes", ".", "guess_type", "(", "filename", ")", "[", "0", "]", "or", "\n", "'application/octet-stream'", ")", "\n", "params", ".", "append", "(", "\n", "tuple", "(", "[", "k", ",", "tuple", "(", "[", "filename", ",", "filedata", ",", "mimetype", "]", ")", "]", ")", ")", "\n", "\n", "", "", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept": [[462, 477], ["x.lower"], "methods", ["None"], ["", "def", "select_header_accept", "(", "self", ",", "accepts", ")", ":", "\n", "        ", "\"\"\"Returns `Accept` based on an array of accepts provided.\n\n        :param accepts: List of headers.\n        :return: Accept (e.g. application/json).\n        \"\"\"", "\n", "if", "not", "accepts", ":", "\n", "            ", "return", "\n", "\n", "", "accepts", "=", "[", "x", ".", "lower", "(", ")", "for", "x", "in", "accepts", "]", "\n", "\n", "if", "'application/json'", "in", "accepts", ":", "\n", "            ", "return", "'application/json'", "\n", "", "else", ":", "\n", "            ", "return", "', '", ".", "join", "(", "accepts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type": [[478, 493], ["x.lower"], "methods", ["None"], ["", "", "def", "select_header_content_type", "(", "self", ",", "content_types", ")", ":", "\n", "        ", "\"\"\"Returns `Content-Type` based on an array of content_types provided.\n\n        :param content_types: List of content-types.\n        :return: Content-Type (e.g. application/json).\n        \"\"\"", "\n", "if", "not", "content_types", ":", "\n", "            ", "return", "'application/json'", "\n", "\n", "", "content_types", "=", "[", "x", ".", "lower", "(", ")", "for", "x", "in", "content_types", "]", "\n", "\n", "if", "'application/json'", "in", "content_types", "or", "'*/*'", "in", "content_types", ":", "\n", "            ", "return", "'application/json'", "\n", "", "else", ":", "\n", "            ", "return", "content_types", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.update_params_for_auth": [[494, 516], ["api_client.ApiClient.configuration.auth_settings().get", "api_client.ApiClient.configuration.auth_settings", "querys.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.auth_settings"], ["", "", "def", "update_params_for_auth", "(", "self", ",", "headers", ",", "querys", ",", "auth_settings", ")", ":", "\n", "        ", "\"\"\"Updates header and query params based on authentication setting.\n\n        :param headers: Header parameters dict to be updated.\n        :param querys: Query parameters tuple list to be updated.\n        :param auth_settings: Authentication setting identifiers list.\n        \"\"\"", "\n", "if", "not", "auth_settings", ":", "\n", "            ", "return", "\n", "\n", "", "for", "auth", "in", "auth_settings", ":", "\n", "            ", "auth_setting", "=", "self", ".", "configuration", ".", "auth_settings", "(", ")", ".", "get", "(", "auth", ")", "\n", "if", "auth_setting", ":", "\n", "                ", "if", "not", "auth_setting", "[", "'value'", "]", ":", "\n", "                    ", "continue", "\n", "", "elif", "auth_setting", "[", "'in'", "]", "==", "'header'", ":", "\n", "                    ", "headers", "[", "auth_setting", "[", "'key'", "]", "]", "=", "auth_setting", "[", "'value'", "]", "\n", "", "elif", "auth_setting", "[", "'in'", "]", "==", "'query'", ":", "\n", "                    ", "querys", ".", "append", "(", "(", "auth_setting", "[", "'key'", "]", ",", "auth_setting", "[", "'value'", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "'Authentication token must be in `query` or `header`'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_file": [[518, 541], ["tempfile.mkstemp", "os.close", "os.remove", "response.getheader", "re.search().group", "os.path.join", "open", "f.write", "os.path.dirname", "re.search"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.getheader"], ["", "", "", "", "def", "__deserialize_file", "(", "self", ",", "response", ")", ":", "\n", "        ", "\"\"\"Deserializes body to file\n\n        Saves response body into a file in a temporary folder,\n        using the filename from the `Content-Disposition` header if provided.\n\n        :param response:  RESTResponse.\n        :return: file path.\n        \"\"\"", "\n", "fd", ",", "path", "=", "tempfile", ".", "mkstemp", "(", "dir", "=", "self", ".", "configuration", ".", "temp_folder_path", ")", "\n", "os", ".", "close", "(", "fd", ")", "\n", "os", ".", "remove", "(", "path", ")", "\n", "\n", "content_disposition", "=", "response", ".", "getheader", "(", "\"Content-Disposition\"", ")", "\n", "if", "content_disposition", ":", "\n", "            ", "filename", "=", "re", ".", "search", "(", "r'filename=[\\'\"]?([^\\'\"\\s]+)[\\'\"]?'", ",", "\n", "content_disposition", ")", ".", "group", "(", "1", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "filename", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "response", ".", "data", ")", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_primitive": [[542, 556], ["klass", "six.text_type"], "methods", ["None"], ["", "def", "__deserialize_primitive", "(", "self", ",", "data", ",", "klass", ")", ":", "\n", "        ", "\"\"\"Deserializes string to primitive type.\n\n        :param data: str.\n        :param klass: class literal.\n\n        :return: int, long, float, str, bool.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "klass", "(", "data", ")", "\n", "", "except", "UnicodeEncodeError", ":", "\n", "            ", "return", "six", ".", "text_type", "(", "data", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_object": [[557, 563], ["None"], "methods", ["None"], ["", "", "def", "__deserialize_object", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Return a original value.\n\n        :return: object.\n        \"\"\"", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_date": [[564, 579], ["parse().date", "lightly.openapi_generated.swagger_client.rest.ApiException", "parse"], "methods", ["None"], ["", "def", "__deserialize_date", "(", "self", ",", "string", ")", ":", "\n", "        ", "\"\"\"Deserializes string to date.\n\n        :param string: str.\n        :return: date.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "from", "dateutil", ".", "parser", "import", "parse", "\n", "return", "parse", "(", "string", ")", ".", "date", "(", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "return", "string", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "rest", ".", "ApiException", "(", "\n", "status", "=", "0", ",", "\n", "reason", "=", "\"Failed to parse `{0}` as date object\"", ".", "format", "(", "string", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_datatime": [[581, 600], ["parse", "lightly.openapi_generated.swagger_client.rest.ApiException"], "methods", ["None"], ["", "", "def", "__deserialize_datatime", "(", "self", ",", "string", ")", ":", "\n", "        ", "\"\"\"Deserializes string to datetime.\n\n        The string should be in iso8601 datetime format.\n\n        :param string: str.\n        :return: datetime.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "from", "dateutil", ".", "parser", "import", "parse", "\n", "return", "parse", "(", "string", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "return", "string", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "rest", ".", "ApiException", "(", "\n", "status", "=", "0", ",", "\n", "reason", "=", "(", "\n", "\"Failed to parse `{0}` as datetime object\"", "\n", ".", "format", "(", "string", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__hasattr": [[603, 605], ["None"], "methods", ["None"], ["", "", "def", "__hasattr", "(", "self", ",", "object", ",", "name", ")", ":", "\n", "        ", "return", "name", "in", "object", ".", "__class__", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize_model": [[606, 640], ["klass", "api_client.ApiClient.__hasattr", "six.iteritems", "isinstance", "isinstance", "data.items", "api_client.ApiClient.get_real_child_model", "api_client.ApiClient.__hasattr", "api_client.ApiClient.__deserialize", "isinstance", "api_client.ApiClient.__deserialize"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__hasattr", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.get_real_child_model", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__hasattr", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.__deserialize"], ["", "def", "__deserialize_model", "(", "self", ",", "data", ",", "klass", ")", ":", "\n", "        ", "\"\"\"Deserializes list or dict to model.\n\n        :param data: dict, list.\n        :param klass: class literal.\n        :return: model object.\n        \"\"\"", "\n", "\n", "if", "(", "not", "klass", ".", "swagger_types", "and", "\n", "not", "self", ".", "__hasattr", "(", "klass", ",", "'get_real_child_model'", ")", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "kwargs", "=", "{", "}", "\n", "if", "klass", ".", "swagger_types", "is", "not", "None", ":", "\n", "            ", "for", "attr", ",", "attr_type", "in", "six", ".", "iteritems", "(", "klass", ".", "swagger_types", ")", ":", "\n", "                ", "if", "(", "data", "is", "not", "None", "and", "\n", "klass", ".", "attribute_map", "[", "attr", "]", "in", "data", "and", "\n", "isinstance", "(", "data", ",", "(", "list", ",", "dict", ")", ")", ")", ":", "\n", "                    ", "value", "=", "data", "[", "klass", ".", "attribute_map", "[", "attr", "]", "]", "\n", "kwargs", "[", "attr", "]", "=", "self", ".", "__deserialize", "(", "value", ",", "attr_type", ")", "\n", "\n", "", "", "", "instance", "=", "klass", "(", "**", "kwargs", ")", "\n", "\n", "if", "(", "isinstance", "(", "instance", ",", "dict", ")", "and", "\n", "klass", ".", "swagger_types", "is", "not", "None", "and", "\n", "isinstance", "(", "data", ",", "dict", ")", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "klass", ".", "swagger_types", ":", "\n", "                    ", "instance", "[", "key", "]", "=", "value", "\n", "", "", "", "if", "self", ".", "__hasattr", "(", "instance", ",", "'get_real_child_model'", ")", ":", "\n", "            ", "klass_name", "=", "instance", ".", "get_real_child_model", "(", "data", ")", "\n", "if", "klass_name", ":", "\n", "                ", "instance", "=", "self", ".", "__deserialize", "(", "data", ",", "klass_name", ")", "\n", "", "", "return", "instance", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.__init__": [[38, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "resp", ")", ":", "\n", "        ", "self", ".", "urllib3_response", "=", "resp", "\n", "self", ".", "status", "=", "resp", ".", "status", "\n", "self", ".", "reason", "=", "resp", ".", "reason", "\n", "self", ".", "data", "=", "resp", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.getheaders": [[44, 47], ["rest.RESTResponse.urllib3_response.getheaders"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.getheaders"], ["", "def", "getheaders", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a dictionary of the response headers.\"\"\"", "\n", "return", "self", ".", "urllib3_response", ".", "getheaders", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.getheader": [[48, 51], ["rest.RESTResponse.urllib3_response.getheader"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.getheader"], ["", "def", "getheader", "(", "self", ",", "name", ",", "default", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns a given response header.\"\"\"", "\n", "return", "self", ".", "urllib3_response", ".", "getheader", "(", "name", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.__init__": [[55, 106], ["certifi.where", "urllib3.ProxyManager", "urllib3.PoolManager"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "configuration", ",", "pools_size", "=", "4", ",", "maxsize", "=", "None", ")", ":", "\n", "# urllib3.PoolManager will pass all kw parameters to connectionpool", "\n", "# https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/poolmanager.py#L75  # noqa: E501", "\n", "# https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/connectionpool.py#L680  # noqa: E501", "\n", "# maxsize is the number of requests to host that are allowed in parallel  # noqa: E501", "\n", "# Custom SSL certificates and client certificates: http://urllib3.readthedocs.io/en/latest/advanced-usage.html  # noqa: E501", "\n", "\n", "# cert_reqs", "\n", "        ", "if", "configuration", ".", "verify_ssl", ":", "\n", "            ", "cert_reqs", "=", "ssl", ".", "CERT_REQUIRED", "\n", "", "else", ":", "\n", "            ", "cert_reqs", "=", "ssl", ".", "CERT_NONE", "\n", "\n", "# ca_certs", "\n", "", "if", "configuration", ".", "ssl_ca_cert", ":", "\n", "            ", "ca_certs", "=", "configuration", ".", "ssl_ca_cert", "\n", "", "else", ":", "\n", "# if not set certificate file, use Mozilla's root certificates.", "\n", "            ", "ca_certs", "=", "certifi", ".", "where", "(", ")", "\n", "\n", "", "addition_pool_args", "=", "{", "}", "\n", "if", "configuration", ".", "assert_hostname", "is", "not", "None", ":", "\n", "            ", "addition_pool_args", "[", "'assert_hostname'", "]", "=", "configuration", ".", "assert_hostname", "# noqa: E501", "\n", "\n", "", "if", "maxsize", "is", "None", ":", "\n", "            ", "if", "configuration", ".", "connection_pool_maxsize", "is", "not", "None", ":", "\n", "                ", "maxsize", "=", "configuration", ".", "connection_pool_maxsize", "\n", "", "else", ":", "\n", "                ", "maxsize", "=", "4", "\n", "\n", "# https pool manager", "\n", "", "", "if", "configuration", ".", "proxy", ":", "\n", "            ", "self", ".", "pool_manager", "=", "urllib3", ".", "ProxyManager", "(", "\n", "num_pools", "=", "pools_size", ",", "\n", "maxsize", "=", "maxsize", ",", "\n", "cert_reqs", "=", "cert_reqs", ",", "\n", "ca_certs", "=", "ca_certs", ",", "\n", "cert_file", "=", "configuration", ".", "cert_file", ",", "\n", "key_file", "=", "configuration", ".", "key_file", ",", "\n", "proxy_url", "=", "configuration", ".", "proxy", ",", "\n", "**", "addition_pool_args", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pool_manager", "=", "urllib3", ".", "PoolManager", "(", "\n", "num_pools", "=", "pools_size", ",", "\n", "maxsize", "=", "maxsize", ",", "\n", "cert_reqs", "=", "cert_reqs", ",", "\n", "ca_certs", "=", "ca_certs", ",", "\n", "cert_file", "=", "configuration", ".", "cert_file", ",", "\n", "key_file", "=", "configuration", ".", "key_file", ",", "\n", "**", "addition_pool_args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.request": [[108, 231], ["method.upper.upper.upper", "ValueError", "isinstance", "rest.RESTResponse", "logger.debug", "rest.ApiException", "urllib3.Timeout", "re.search", "rest.RESTClientObject.pool_manager.request", "rest.ApiException", "rest.RESTClientObject.data.decode", "isinstance", "urllib3.Timeout", "rest.RESTClientObject.pool_manager.request", "str", "len", "six.moves.urllib.parse.urlencode", "json.dumps", "rest.RESTClientObject.pool_manager.request", "type", "rest.RESTClientObject.pool_manager.request", "isinstance", "rest.RESTClientObject.pool_manager.request", "rest.ApiException"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.debug", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "", "def", "request", "(", "self", ",", "method", ",", "url", ",", "query_params", "=", "None", ",", "headers", "=", "None", ",", "\n", "body", "=", "None", ",", "post_params", "=", "None", ",", "_preload_content", "=", "True", ",", "\n", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"Perform requests.\n\n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"", "\n", "method", "=", "method", ".", "upper", "(", ")", "\n", "assert", "method", "in", "[", "'GET'", ",", "'HEAD'", ",", "'DELETE'", ",", "'POST'", ",", "'PUT'", ",", "\n", "'PATCH'", ",", "'OPTIONS'", "]", "\n", "\n", "if", "post_params", "and", "body", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"body parameter cannot be used with post_params parameter.\"", "\n", ")", "\n", "\n", "", "post_params", "=", "post_params", "or", "{", "}", "\n", "headers", "=", "headers", "or", "{", "}", "\n", "\n", "timeout", "=", "None", "\n", "if", "_request_timeout", ":", "\n", "            ", "if", "isinstance", "(", "_request_timeout", ",", "(", "int", ",", ")", "if", "six", ".", "PY3", "else", "(", "int", ",", "long", ")", ")", ":", "# noqa: E501,F821", "\n", "                ", "timeout", "=", "urllib3", ".", "Timeout", "(", "total", "=", "_request_timeout", ")", "\n", "", "elif", "(", "isinstance", "(", "_request_timeout", ",", "tuple", ")", "and", "\n", "len", "(", "_request_timeout", ")", "==", "2", ")", ":", "\n", "                ", "timeout", "=", "urllib3", ".", "Timeout", "(", "\n", "connect", "=", "_request_timeout", "[", "0", "]", ",", "read", "=", "_request_timeout", "[", "1", "]", ")", "\n", "\n", "", "", "if", "'Content-Type'", "not", "in", "headers", ":", "\n", "            ", "headers", "[", "'Content-Type'", "]", "=", "'application/json'", "\n", "\n", "", "try", ":", "\n", "# For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`", "\n", "            ", "if", "method", "in", "[", "'POST'", ",", "'PUT'", ",", "'PATCH'", ",", "'OPTIONS'", ",", "'DELETE'", "]", ":", "\n", "                ", "if", "query_params", ":", "\n", "                    ", "url", "+=", "'?'", "+", "urlencode", "(", "query_params", ")", "\n", "", "if", "re", ".", "search", "(", "'json'", ",", "headers", "[", "'Content-Type'", "]", ",", "re", ".", "IGNORECASE", ")", ":", "\n", "                    ", "request_body", "=", "'{}'", "\n", "if", "body", "is", "not", "None", ":", "\n", "                        ", "request_body", "=", "json", ".", "dumps", "(", "body", ")", "\n", "", "r", "=", "self", ".", "pool_manager", ".", "request", "(", "\n", "method", ",", "url", ",", "\n", "body", "=", "request_body", ",", "\n", "preload_content", "=", "_preload_content", ",", "\n", "timeout", "=", "timeout", ",", "\n", "headers", "=", "headers", ")", "\n", "", "elif", "headers", "[", "'Content-Type'", "]", "==", "'application/x-www-form-urlencoded'", ":", "# noqa: E501", "\n", "                    ", "r", "=", "self", ".", "pool_manager", ".", "request", "(", "\n", "method", ",", "url", ",", "\n", "fields", "=", "post_params", ",", "\n", "encode_multipart", "=", "False", ",", "\n", "preload_content", "=", "_preload_content", ",", "\n", "timeout", "=", "timeout", ",", "\n", "headers", "=", "headers", ")", "\n", "", "elif", "headers", "[", "'Content-Type'", "]", "==", "'multipart/form-data'", ":", "\n", "# must del headers['Content-Type'], or the correct", "\n", "# Content-Type which generated by urllib3 will be", "\n", "# overwritten.", "\n", "                    ", "del", "headers", "[", "'Content-Type'", "]", "\n", "r", "=", "self", ".", "pool_manager", ".", "request", "(", "\n", "method", ",", "url", ",", "\n", "fields", "=", "post_params", ",", "\n", "encode_multipart", "=", "True", ",", "\n", "preload_content", "=", "_preload_content", ",", "\n", "timeout", "=", "timeout", ",", "\n", "headers", "=", "headers", ")", "\n", "# Pass a `string` parameter directly in the body to support", "\n", "# other content types than Json when `body` argument is", "\n", "# provided in serialized form", "\n", "", "elif", "isinstance", "(", "body", ",", "str", ")", ":", "\n", "                    ", "request_body", "=", "body", "\n", "r", "=", "self", ".", "pool_manager", ".", "request", "(", "\n", "method", ",", "url", ",", "\n", "body", "=", "request_body", ",", "\n", "preload_content", "=", "_preload_content", ",", "\n", "timeout", "=", "timeout", ",", "\n", "headers", "=", "headers", ")", "\n", "", "else", ":", "\n", "# Cannot generate the request from given parameters", "\n", "                    ", "msg", "=", "\"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"", "\n", "raise", "ApiException", "(", "status", "=", "0", ",", "reason", "=", "msg", ")", "\n", "# For `GET`, `HEAD`", "\n", "", "", "else", ":", "\n", "                ", "r", "=", "self", ".", "pool_manager", ".", "request", "(", "method", ",", "url", ",", "\n", "fields", "=", "query_params", ",", "\n", "preload_content", "=", "_preload_content", ",", "\n", "timeout", "=", "timeout", ",", "\n", "headers", "=", "headers", ")", "\n", "", "", "except", "urllib3", ".", "exceptions", ".", "SSLError", "as", "e", ":", "\n", "            ", "msg", "=", "\"{0}\\n{1}\"", ".", "format", "(", "type", "(", "e", ")", ".", "__name__", ",", "str", "(", "e", ")", ")", "\n", "raise", "ApiException", "(", "status", "=", "0", ",", "reason", "=", "msg", ")", "\n", "\n", "", "if", "_preload_content", ":", "\n", "            ", "r", "=", "RESTResponse", "(", "r", ")", "\n", "\n", "# In the python 3, the response.data is bytes.", "\n", "# we need to decode it to string.", "\n", "if", "six", ".", "PY3", ":", "\n", "                ", "r", ".", "data", "=", "r", ".", "data", ".", "decode", "(", "'utf8'", ")", "\n", "\n", "# log response body", "\n", "", "logger", ".", "debug", "(", "\"response body: %s\"", ",", "r", ".", "data", ")", "\n", "\n", "", "if", "not", "200", "<=", "r", ".", "status", "<=", "299", ":", "\n", "            ", "raise", "ApiException", "(", "http_resp", "=", "r", ")", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.GET": [[232, 239], ["rest.RESTClientObject.request"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "def", "GET", "(", "self", ",", "url", ",", "headers", "=", "None", ",", "query_params", "=", "None", ",", "_preload_content", "=", "True", ",", "\n", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "\"GET\"", ",", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "query_params", "=", "query_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.HEAD": [[240, 247], ["rest.RESTClientObject.request"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "def", "HEAD", "(", "self", ",", "url", ",", "headers", "=", "None", ",", "query_params", "=", "None", ",", "_preload_content", "=", "True", ",", "\n", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "\"HEAD\"", ",", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "query_params", "=", "query_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.OPTIONS": [[248, 257], ["rest.RESTClientObject.request"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "def", "OPTIONS", "(", "self", ",", "url", ",", "headers", "=", "None", ",", "query_params", "=", "None", ",", "post_params", "=", "None", ",", "\n", "body", "=", "None", ",", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "\"OPTIONS\"", ",", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "query_params", "=", "query_params", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.DELETE": [[258, 266], ["rest.RESTClientObject.request"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "def", "DELETE", "(", "self", ",", "url", ",", "headers", "=", "None", ",", "query_params", "=", "None", ",", "body", "=", "None", ",", "\n", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "\"DELETE\"", ",", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "query_params", "=", "query_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.POST": [[267, 276], ["rest.RESTClientObject.request"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "def", "POST", "(", "self", ",", "url", ",", "headers", "=", "None", ",", "query_params", "=", "None", ",", "post_params", "=", "None", ",", "\n", "body", "=", "None", ",", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "\"POST\"", ",", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "query_params", "=", "query_params", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.PUT": [[277, 286], ["rest.RESTClientObject.request"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "def", "PUT", "(", "self", ",", "url", ",", "headers", "=", "None", ",", "query_params", "=", "None", ",", "post_params", "=", "None", ",", "\n", "body", "=", "None", ",", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "\"PUT\"", ",", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "query_params", "=", "query_params", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTClientObject.PATCH": [[287, 296], ["rest.RESTClientObject.request"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request"], ["", "def", "PATCH", "(", "self", ",", "url", ",", "headers", "=", "None", ",", "query_params", "=", "None", ",", "post_params", "=", "None", ",", "\n", "body", "=", "None", ",", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "\"PATCH\"", ",", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "query_params", "=", "query_params", ",", "\n", "post_params", "=", "post_params", ",", "\n", "_preload_content", "=", "_preload_content", ",", "\n", "_request_timeout", "=", "_request_timeout", ",", "\n", "body", "=", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.ApiException.__init__": [[300, 311], ["http_resp.getheaders"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.RESTResponse.getheaders"], ["    ", "def", "__init__", "(", "self", ",", "status", "=", "None", ",", "reason", "=", "None", ",", "http_resp", "=", "None", ")", ":", "\n", "        ", "if", "http_resp", ":", "\n", "            ", "self", ".", "status", "=", "http_resp", ".", "status", "\n", "self", ".", "reason", "=", "http_resp", ".", "reason", "\n", "self", ".", "body", "=", "http_resp", ".", "data", "\n", "self", ".", "headers", "=", "http_resp", ".", "getheaders", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "status", "=", "status", "\n", "self", ".", "reason", "=", "reason", "\n", "self", ".", "body", "=", "None", "\n", "self", ".", "headers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.rest.ApiException.__str__": [[312, 324], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Custom error messages for exception\"\"\"", "\n", "error_message", "=", "\"({0})\\n\"", "\"Reason: {1}\\n\"", ".", "format", "(", "self", ".", "status", ",", "self", ".", "reason", ")", "\n", "if", "self", ".", "headers", ":", "\n", "            ", "error_message", "+=", "\"HTTP response headers: {0}\\n\"", ".", "format", "(", "\n", "self", ".", "headers", ")", "\n", "\n", "", "if", "self", ".", "body", ":", "\n", "            ", "error_message", "+=", "\"HTTP response body: {0}\\n\"", ".", "format", "(", "self", ".", "body", ")", "\n", "\n", "", "return", "error_message", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.__init__": [[35, 101], ["logging.getLogger", "logging.getLogger", "configuration.Configuration._default.__dict__.keys", "multiprocessing.cpu_count", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.cpu_count"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Constructor\"\"\"", "\n", "if", "self", ".", "_default", ":", "\n", "            ", "for", "key", "in", "self", ".", "_default", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "copy", ".", "copy", "(", "self", ".", "_default", ".", "__dict__", "[", "key", "]", ")", "\n", "", "return", "\n", "\n", "# Default Base url", "\n", "", "self", ".", "host", "=", "\"https://api.lightly.ai\"", "\n", "# Temp file folder for downloading files", "\n", "self", ".", "temp_folder_path", "=", "None", "\n", "\n", "# Authentication Settings", "\n", "# dict to store API key(s)", "\n", "self", ".", "api_key", "=", "{", "}", "\n", "# dict to store API prefix (e.g. Bearer)", "\n", "self", ".", "api_key_prefix", "=", "{", "}", "\n", "# function to refresh API key if expired", "\n", "self", ".", "refresh_api_key_hook", "=", "None", "\n", "# Username for HTTP basic authentication", "\n", "self", ".", "username", "=", "\"\"", "\n", "# Password for HTTP basic authentication", "\n", "self", ".", "password", "=", "\"\"", "\n", "\n", "# Logging Settings", "\n", "self", ".", "logger", "=", "{", "}", "\n", "self", ".", "logger", "[", "\"package_logger\"", "]", "=", "logging", ".", "getLogger", "(", "\"lightly.openapi_generated.swagger_client\"", ")", "\n", "self", ".", "logger", "[", "\"urllib3_logger\"", "]", "=", "logging", ".", "getLogger", "(", "\"urllib3\"", ")", "\n", "# Log format", "\n", "self", ".", "logger_format", "=", "'%(asctime)s %(levelname)s %(message)s'", "\n", "# Log stream handler", "\n", "self", ".", "logger_stream_handler", "=", "None", "\n", "# Log file handler", "\n", "self", ".", "logger_file_handler", "=", "None", "\n", "# Debug file location", "\n", "self", ".", "logger_file", "=", "None", "\n", "# Debug switch", "\n", "self", ".", "debug", "=", "False", "\n", "\n", "# SSL/TLS verification", "\n", "# Set this to false to skip verifying SSL certificate when calling API", "\n", "# from https server.", "\n", "self", ".", "verify_ssl", "=", "True", "\n", "# Set this to customize the certificate file to verify the peer.", "\n", "self", ".", "ssl_ca_cert", "=", "None", "\n", "# client certificate file", "\n", "self", ".", "cert_file", "=", "None", "\n", "# client key file", "\n", "self", ".", "key_file", "=", "None", "\n", "# Set this to True/False to enable/disable SSL hostname verification.", "\n", "self", ".", "assert_hostname", "=", "None", "\n", "\n", "# urllib3 connection pool's maximum number of connections saved", "\n", "# per pool. urllib3 uses 1 connection as default value, but this is", "\n", "# not the best value when you are making a lot of possibly parallel", "\n", "# requests to the same host, which is often the case here.", "\n", "# cpu_count * 5 is used as default value to increase performance.", "\n", "self", ".", "connection_pool_maxsize", "=", "multiprocessing", ".", "cpu_count", "(", ")", "*", "5", "\n", "\n", "# Proxy URL", "\n", "self", ".", "proxy", "=", "None", "\n", "# Safe chars for path_param", "\n", "self", ".", "safe_chars_for_path_param", "=", "''", "\n", "\n", "# Disable client side validation", "\n", "self", ".", "client_side_validation", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.set_default": [[102, 105], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "set_default", "(", "cls", ",", "default", ")", ":", "\n", "        ", "cls", ".", "_default", "=", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.logger_file": [[118, 147], ["logging.FileHandler", "configuration.Configuration.logger_file_handler.setFormatter", "six.iteritems", "logging.StreamHandler", "configuration.Configuration.logger_stream_handler.setFormatter", "six.iteritems", "logger.addHandler", "logger.addHandler", "logger.removeHandler", "logger.removeHandler"], "methods", ["None"], ["", "@", "logger_file", ".", "setter", "\n", "def", "logger_file", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"The logger file.\n\n        If the logger_file is None, then add stream handler and remove file\n        handler. Otherwise, add file handler and remove stream handler.\n\n        :param value: The logger_file path.\n        :type: str\n        \"\"\"", "\n", "self", ".", "__logger_file", "=", "value", "\n", "if", "self", ".", "__logger_file", ":", "\n", "# If set logging file,", "\n", "# then add file handler and remove stream handler.", "\n", "            ", "self", ".", "logger_file_handler", "=", "logging", ".", "FileHandler", "(", "self", ".", "__logger_file", ")", "\n", "self", ".", "logger_file_handler", ".", "setFormatter", "(", "self", ".", "logger_formatter", ")", "\n", "for", "_", ",", "logger", "in", "six", ".", "iteritems", "(", "self", ".", "logger", ")", ":", "\n", "                ", "logger", ".", "addHandler", "(", "self", ".", "logger_file_handler", ")", "\n", "if", "self", ".", "logger_stream_handler", ":", "\n", "                    ", "logger", ".", "removeHandler", "(", "self", ".", "logger_stream_handler", ")", "\n", "", "", "", "else", ":", "\n", "# If not set logging file,", "\n", "# then add stream handler and remove file handler.", "\n", "            ", "self", ".", "logger_stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "self", ".", "logger_stream_handler", ".", "setFormatter", "(", "self", ".", "logger_formatter", ")", "\n", "for", "_", ",", "logger", "in", "six", ".", "iteritems", "(", "self", ".", "logger", ")", ":", "\n", "                ", "logger", ".", "addHandler", "(", "self", ".", "logger_stream_handler", ")", "\n", "if", "self", ".", "logger_file_handler", ":", "\n", "                    ", "logger", ".", "removeHandler", "(", "self", ".", "logger_file_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.debug": [[157, 178], ["six.iteritems", "six.iteritems", "logger.setLevel", "logger.setLevel"], "methods", ["None"], ["", "@", "debug", ".", "setter", "\n", "def", "debug", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Debug status\n\n        :param value: The debug status, True or False.\n        :type: bool\n        \"\"\"", "\n", "self", ".", "__debug", "=", "value", "\n", "if", "self", ".", "__debug", ":", "\n", "# if debug status is True, turn on debug logging", "\n", "            ", "for", "_", ",", "logger", "in", "six", ".", "iteritems", "(", "self", ".", "logger", ")", ":", "\n", "                ", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# turn on httplib debug", "\n", "", "httplib", ".", "HTTPConnection", ".", "debuglevel", "=", "1", "\n", "", "else", ":", "\n", "# if debug status is False, turn off debug logging,", "\n", "# setting log level to default `logging.WARNING`", "\n", "            ", "for", "_", ",", "logger", "in", "six", ".", "iteritems", "(", "self", ".", "logger", ")", ":", "\n", "                ", "logger", ".", "setLevel", "(", "logging", ".", "WARNING", ")", "\n", "# turn off httplib debug", "\n", "", "httplib", ".", "HTTPConnection", ".", "debuglevel", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.logger_format": [[190, 201], ["logging.Formatter"], "methods", ["None"], ["", "@", "logger_format", ".", "setter", "\n", "def", "logger_format", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"The logger format.\n\n        The logger_formatter will be updated when sets logger_format.\n\n        :param value: The format string.\n        :type: str\n        \"\"\"", "\n", "self", ".", "__logger_format", "=", "value", "\n", "self", ".", "logger_formatter", "=", "logging", ".", "Formatter", "(", "self", ".", "__logger_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.get_api_key_with_prefix": [[202, 219], ["configuration.Configuration.api_key.get", "configuration.Configuration.refresh_api_key_hook", "configuration.Configuration.api_key_prefix.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "def", "get_api_key_with_prefix", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"Gets API key (with prefix if set).\n\n        :param identifier: The identifier of apiKey.\n        :return: The token for api key authentication.\n        \"\"\"", "\n", "\n", "if", "self", ".", "refresh_api_key_hook", ":", "\n", "            ", "self", ".", "refresh_api_key_hook", "(", "self", ")", "\n", "\n", "", "key", "=", "self", ".", "api_key", ".", "get", "(", "identifier", ")", "\n", "if", "key", ":", "\n", "            ", "prefix", "=", "self", ".", "api_key_prefix", ".", "get", "(", "identifier", ")", "\n", "if", "prefix", ":", "\n", "                ", "return", "\"%s %s\"", "%", "(", "prefix", ",", "key", ")", "\n", "", "else", ":", "\n", "                ", "return", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.get_basic_auth_token": [[220, 228], ["urllib3.util.make_headers().get", "urllib3.util.make_headers"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "", "def", "get_basic_auth_token", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets HTTP basic authentication header (string).\n\n        :return: The token for basic HTTP authentication.\n        \"\"\"", "\n", "return", "urllib3", ".", "util", ".", "make_headers", "(", "\n", "basic_auth", "=", "self", ".", "username", "+", "':'", "+", "self", ".", "password", "\n", ")", ".", "get", "(", "'authorization'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.auth_settings": [[229, 255], ["configuration.Configuration.get_api_key_with_prefix", "configuration.Configuration.get_api_key_with_prefix", "configuration.Configuration.get_api_key_with_prefix"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.get_api_key_with_prefix", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.get_api_key_with_prefix", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.get_api_key_with_prefix"], ["", "def", "auth_settings", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets Auth Settings dict for api client.\n\n        :return: The Auth Settings information dict.\n        \"\"\"", "\n", "return", "{", "\n", "'ApiKeyAuth'", ":", "\n", "{", "\n", "'type'", ":", "'api_key'", ",", "\n", "'in'", ":", "'query'", ",", "\n", "'key'", ":", "'token'", ",", "\n", "'value'", ":", "self", ".", "get_api_key_with_prefix", "(", "'token'", ")", "\n", "}", ",", "\n", "'ApiPublicJWTAuth'", ":", "\n", "{", "\n", "'type'", ":", "'api_key'", ",", "\n", "'in'", ":", "'query'", ",", "\n", "'key'", ":", "'publicToken'", ",", "\n", "'value'", ":", "self", ".", "get_api_key_with_prefix", "(", "'publicToken'", ")", "\n", "}", ",", "\n", "'InternalKeyAuth'", ":", "\n", "{", "\n", "'type'", ":", "'api_key'", ",", "\n", "'in'", ":", "'query'", ",", "\n", "'key'", ":", "'secret'", ",", "\n", "'value'", ":", "self", ".", "get_api_key_with_prefix", "(", "'secret'", ")", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.configuration.Configuration.to_debug_report": [[259, 270], ["None"], "methods", ["None"], ["", "def", "to_debug_report", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the essential information for debugging.\n\n        :return: The report for debugging.\n        \"\"\"", "\n", "return", "\"Python SDK Debug Report:\\n\"", "\"OS: {env}\\n\"", "\"Python Version: {pyversion}\\n\"", "\"Version of the API: 1.0.0\\n\"", "\"SDK Package Version: 1.0.0\"", ".", "format", "(", "env", "=", "sys", ".", "platform", ",", "pyversion", "=", "sys", ".", "version", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.path_safe_name.PathSafeName.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PathSafeName - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.path_safe_name.PathSafeName.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "path_safe_name.PathSafeName.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PathSafeName", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.path_safe_name.PathSafeName.to_str": [[75, 78], ["pprint.pformat", "path_safe_name.PathSafeName.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.path_safe_name.PathSafeName.__repr__": [[79, 82], ["path_safe_name.PathSafeName.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.path_safe_name.PathSafeName.__eq__": [[83, 89], ["isinstance", "path_safe_name.PathSafeName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PathSafeName", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.path_safe_name.PathSafeName.__ne__": [[90, 96], ["isinstance", "path_safe_name.PathSafeName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PathSafeName", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "state", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"UpdateDockerWorkerRegistryEntryRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_state", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.state": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Sets the state of this UpdateDockerWorkerRegistryEntryRequest.\n\n\n        :param state: The state of this UpdateDockerWorkerRegistryEntryRequest.  # noqa: E501\n        :type: DockerWorkerState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "state", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `state`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "UpdateDockerWorkerRegistryEntryRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.to_str": [[104, 107], ["pprint.pformat", "update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.__repr__": [[108, 111], ["update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.__eq__": [[112, 118], ["isinstance", "update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "UpdateDockerWorkerRegistryEntryRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.__ne__": [[119, 125], ["isinstance", "update_docker_worker_registry_entry_request.UpdateDockerWorkerRegistryEntryRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "UpdateDockerWorkerRegistryEntryRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.async_task_data.AsyncTaskData.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "job_id", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"AsyncTaskData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_job_id", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "job_id", "=", "job_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.async_task_data.AsyncTaskData.job_id": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "job_id", ".", "setter", "\n", "def", "job_id", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "\"\"\"Sets the job_id of this AsyncTaskData.\n\n\n        :param job_id: The job_id of this AsyncTaskData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "job_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `job_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_job_id", "=", "job_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.async_task_data.AsyncTaskData.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "async_task_data.AsyncTaskData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "AsyncTaskData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.async_task_data.AsyncTaskData.to_str": [[104, 107], ["pprint.pformat", "async_task_data.AsyncTaskData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.async_task_data.AsyncTaskData.__repr__": [[108, 111], ["async_task_data.AsyncTaskData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.async_task_data.AsyncTaskData.__eq__": [[112, 118], ["isinstance", "async_task_data.AsyncTaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "AsyncTaskData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.async_task_data.AsyncTaskData.__ne__": [[119, 125], ["isinstance", "async_task_data.AsyncTaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "AsyncTaskData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.__init__": [[59, 89], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "docker_version", "=", "None", ",", "dataset_id", "=", "None", ",", "state", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "message", "=", "None", ",", "messages", "=", "None", ",", "report_available", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_docker_version", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_state", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "_message", "=", "None", "\n", "self", ".", "_messages", "=", "None", "\n", "self", ".", "_report_available", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "docker_version", "=", "docker_version", "\n", "if", "dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_id", "=", "dataset_id", "\n", "", "self", ".", "state", "=", "state", "\n", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "if", "message", "is", "not", "None", ":", "\n", "            ", "self", ".", "message", "=", "message", "\n", "", "if", "messages", "is", "not", "None", ":", "\n", "            ", "self", ".", "messages", "=", "messages", "\n", "", "if", "report_available", "is", "not", "None", ":", "\n", "            ", "self", ".", "report_available", "=", "report_available", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.id": [[100, 112], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this DockerRunData.\n\n\n        :param id: The id of this DockerRunData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.docker_version": [[123, 135], ["ValueError"], "methods", ["None"], ["", "@", "docker_version", ".", "setter", "\n", "def", "docker_version", "(", "self", ",", "docker_version", ")", ":", "\n", "        ", "\"\"\"Sets the docker_version of this DockerRunData.\n\n\n        :param docker_version: The docker_version of this DockerRunData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "docker_version", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `docker_version`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_docker_version", "=", "docker_version", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.dataset_id": [[146, 156], ["None"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this DockerRunData.\n\n\n        :param dataset_id: The dataset_id of this DockerRunData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.state": [[167, 179], ["ValueError"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Sets the state of this DockerRunData.\n\n\n        :param state: The state of this DockerRunData.  # noqa: E501\n        :type: DockerRunState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "state", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `state`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.created_at": [[190, 202], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this DockerRunData.\n\n\n        :param created_at: The created_at of this DockerRunData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.last_modified_at": [[213, 225], ["ValueError"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this DockerRunData.\n\n\n        :param last_modified_at: The last_modified_at of this DockerRunData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "last_modified_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `last_modified_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.message": [[236, 246], ["None"], "methods", ["None"], ["", "@", "message", ".", "setter", "\n", "def", "message", "(", "self", ",", "message", ")", ":", "\n", "        ", "\"\"\"Sets the message of this DockerRunData.\n\n\n        :param message: The message of this DockerRunData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.messages": [[257, 267], ["None"], "methods", ["None"], ["", "@", "messages", ".", "setter", "\n", "def", "messages", "(", "self", ",", "messages", ")", ":", "\n", "        ", "\"\"\"Sets the messages of this DockerRunData.\n\n\n        :param messages: The messages of this DockerRunData.  # noqa: E501\n        :type: list[DockerRunDataLog]\n        \"\"\"", "\n", "\n", "self", ".", "_messages", "=", "messages", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.report_available": [[278, 288], ["None"], "methods", ["None"], ["", "@", "report_available", ".", "setter", "\n", "def", "report_available", "(", "self", ",", "report_available", ")", ":", "\n", "        ", "\"\"\"Sets the report_available of this DockerRunData.\n\n\n        :param report_available: The report_available of this DockerRunData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "\n", "self", ".", "_report_available", "=", "report_available", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.to_dict": [[289, 315], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_data.DockerRunData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.to_str": [[316, 319], ["pprint.pformat", "docker_run_data.DockerRunData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.__repr__": [[320, 323], ["docker_run_data.DockerRunData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.__eq__": [[324, 330], ["isinstance", "docker_run_data.DockerRunData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data.DockerRunData.__ne__": [[331, 337], ["isinstance", "docker_run_data.DockerRunData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"LabelStudioTask - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.id": [[69, 82], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this LabelStudioTask.\n\n        The task_id for importing into LabelStudio.  # noqa: E501\n\n        :param id: The id of this LabelStudioTask.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.data": [[93, 105], ["ValueError"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Sets the data of this LabelStudioTask.\n\n\n        :param data: The data of this LabelStudioTask.  # noqa: E501\n        :type: LabelStudioTaskData\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.to_dict": [[106, 132], ["six.iteritems", "issubclass", "getattr", "isinstance", "label_studio_task.LabelStudioTask.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "LabelStudioTask", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.to_str": [[133, 136], ["pprint.pformat", "label_studio_task.LabelStudioTask.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.__repr__": [[137, 140], ["label_studio_task.LabelStudioTask.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.__eq__": [[141, 147], ["isinstance", "label_studio_task.LabelStudioTask.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelStudioTask", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task.LabelStudioTask.__ne__": [[148, 154], ["isinstance", "label_studio_task.LabelStudioTask.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelStudioTask", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.__init__": [[47, 63], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "priority", "=", "None", ",", "reserve_for", "=", "None", ",", "data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SamaTask - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_priority", "=", "None", "\n", "self", ".", "_reserve_for", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "priority", "is", "not", "None", ":", "\n", "            ", "self", ".", "priority", "=", "priority", "\n", "", "if", "reserve_for", "is", "not", "None", ":", "\n", "            ", "self", ".", "reserve_for", "=", "reserve_for", "\n", "", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.priority": [[74, 84], ["None"], "methods", ["None"], ["", "@", "priority", ".", "setter", "\n", "def", "priority", "(", "self", ",", "priority", ")", ":", "\n", "        ", "\"\"\"Sets the priority of this SamaTask.\n\n\n        :param priority: The priority of this SamaTask.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "\n", "self", ".", "_priority", "=", "priority", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.reserve_for": [[95, 105], ["None"], "methods", ["None"], ["", "@", "reserve_for", ".", "setter", "\n", "def", "reserve_for", "(", "self", ",", "reserve_for", ")", ":", "\n", "        ", "\"\"\"Sets the reserve_for of this SamaTask.\n\n\n        :param reserve_for: The reserve_for of this SamaTask.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "\n", "self", ".", "_reserve_for", "=", "reserve_for", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.data": [[116, 128], ["ValueError"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Sets the data of this SamaTask.\n\n\n        :param data: The data of this SamaTask.  # noqa: E501\n        :type: SamaTaskData\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.to_dict": [[129, 155], ["six.iteritems", "issubclass", "getattr", "isinstance", "sama_task.SamaTask.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SamaTask", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.to_str": [[156, 159], ["pprint.pformat", "sama_task.SamaTask.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.__repr__": [[160, 163], ["sama_task.SamaTask.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.__eq__": [[164, 170], ["isinstance", "sama_task.SamaTask.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamaTask", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task.SamaTask.__ne__": [[171, 177], ["isinstance", "sama_task.SamaTask.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamaTask", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.__init__": [[69, 111], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "name", "=", "None", ",", "user_id", "=", "None", ",", "access_type", "=", "None", ",", "type", "=", "None", ",", "img_type", "=", "None", ",", "n_samples", "=", "None", ",", "size_in_bytes", "=", "None", ",", "meta_data_configuration_id", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "datasource_processed_until_timestamp", "=", "None", ",", "access_role", "=", "None", ",", "parent_dataset_id", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasetData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_user_id", "=", "None", "\n", "self", ".", "_access_type", "=", "None", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_img_type", "=", "None", "\n", "self", ".", "_n_samples", "=", "None", "\n", "self", ".", "_size_in_bytes", "=", "None", "\n", "self", ".", "_meta_data_configuration_id", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "_datasource_processed_until_timestamp", "=", "None", "\n", "self", ".", "_access_role", "=", "None", "\n", "self", ".", "_parent_dataset_id", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "user_id", "=", "user_id", "\n", "if", "access_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "access_type", "=", "access_type", "\n", "", "self", ".", "type", "=", "type", "\n", "if", "img_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "img_type", "=", "img_type", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "size_in_bytes", "=", "size_in_bytes", "\n", "if", "meta_data_configuration_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "meta_data_configuration_id", "=", "meta_data_configuration_id", "\n", "", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "if", "datasource_processed_until_timestamp", "is", "not", "None", ":", "\n", "            ", "self", ".", "datasource_processed_until_timestamp", "=", "datasource_processed_until_timestamp", "\n", "", "if", "access_role", "is", "not", "None", ":", "\n", "            ", "self", ".", "access_role", "=", "access_role", "\n", "", "if", "parent_dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "parent_dataset_id", "=", "parent_dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.id": [[122, 134], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this DatasetData.\n\n\n        :param id: The id of this DatasetData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.name": [[145, 157], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this DatasetData.\n\n\n        :param name: The name of this DatasetData.  # noqa: E501\n        :type: DatasetName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.user_id": [[169, 182], ["ValueError"], "methods", ["None"], ["", "@", "user_id", ".", "setter", "\n", "def", "user_id", "(", "self", ",", "user_id", ")", ":", "\n", "        ", "\"\"\"Sets the user_id of this DatasetData.\n\n        The owner of the dataset  # noqa: E501\n\n        :param user_id: The user_id of this DatasetData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "user_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `user_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_user_id", "=", "user_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.access_type": [[193, 203], ["None"], "methods", ["None"], ["", "@", "access_type", ".", "setter", "\n", "def", "access_type", "(", "self", ",", "access_type", ")", ":", "\n", "        ", "\"\"\"Sets the access_type of this DatasetData.\n\n\n        :param access_type: The access_type of this DatasetData.  # noqa: E501\n        :type: SharedAccessType\n        \"\"\"", "\n", "\n", "self", ".", "_access_type", "=", "access_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.type": [[214, 226], ["ValueError"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this DatasetData.\n\n\n        :param type: The type of this DatasetData.  # noqa: E501\n        :type: DatasetType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.img_type": [[237, 247], ["None"], "methods", ["None"], ["", "@", "img_type", ".", "setter", "\n", "def", "img_type", "(", "self", ",", "img_type", ")", ":", "\n", "        ", "\"\"\"Sets the img_type of this DatasetData.\n\n\n        :param img_type: The img_type of this DatasetData.  # noqa: E501\n        :type: ImageType\n        \"\"\"", "\n", "\n", "self", ".", "_img_type", "=", "img_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.n_samples": [[258, 270], ["ValueError"], "methods", ["None"], ["", "@", "n_samples", ".", "setter", "\n", "def", "n_samples", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"Sets the n_samples of this DatasetData.\n\n\n        :param n_samples: The n_samples of this DatasetData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "n_samples", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `n_samples`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_n_samples", "=", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.size_in_bytes": [[281, 293], ["ValueError"], "methods", ["None"], ["", "@", "size_in_bytes", ".", "setter", "\n", "def", "size_in_bytes", "(", "self", ",", "size_in_bytes", ")", ":", "\n", "        ", "\"\"\"Sets the size_in_bytes of this DatasetData.\n\n\n        :param size_in_bytes: The size_in_bytes of this DatasetData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "size_in_bytes", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `size_in_bytes`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_size_in_bytes", "=", "size_in_bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.meta_data_configuration_id": [[304, 314], ["None"], "methods", ["None"], ["", "@", "meta_data_configuration_id", ".", "setter", "\n", "def", "meta_data_configuration_id", "(", "self", ",", "meta_data_configuration_id", ")", ":", "\n", "        ", "\"\"\"Sets the meta_data_configuration_id of this DatasetData.\n\n\n        :param meta_data_configuration_id: The meta_data_configuration_id of this DatasetData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_meta_data_configuration_id", "=", "meta_data_configuration_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.created_at": [[325, 337], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this DatasetData.\n\n\n        :param created_at: The created_at of this DatasetData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.last_modified_at": [[348, 360], ["ValueError"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this DatasetData.\n\n\n        :param last_modified_at: The last_modified_at of this DatasetData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "last_modified_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `last_modified_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.datasource_processed_until_timestamp": [[371, 381], ["None"], "methods", ["None"], ["", "@", "datasource_processed_until_timestamp", ".", "setter", "\n", "def", "datasource_processed_until_timestamp", "(", "self", ",", "datasource_processed_until_timestamp", ")", ":", "\n", "        ", "\"\"\"Sets the datasource_processed_until_timestamp of this DatasetData.\n\n\n        :param datasource_processed_until_timestamp: The datasource_processed_until_timestamp of this DatasetData.  # noqa: E501\n        :type: TimestampSeconds\n        \"\"\"", "\n", "\n", "self", ".", "_datasource_processed_until_timestamp", "=", "datasource_processed_until_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.access_role": [[392, 402], ["None"], "methods", ["None"], ["", "@", "access_role", ".", "setter", "\n", "def", "access_role", "(", "self", ",", "access_role", ")", ":", "\n", "        ", "\"\"\"Sets the access_role of this DatasetData.\n\n\n        :param access_role: The access_role of this DatasetData.  # noqa: E501\n        :type: AccessRole\n        \"\"\"", "\n", "\n", "self", ".", "_access_role", "=", "access_role", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.parent_dataset_id": [[413, 423], ["None"], "methods", ["None"], ["", "@", "parent_dataset_id", ".", "setter", "\n", "def", "parent_dataset_id", "(", "self", ",", "parent_dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the parent_dataset_id of this DatasetData.\n\n\n        :param parent_dataset_id: The parent_dataset_id of this DatasetData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_parent_dataset_id", "=", "parent_dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.to_dict": [[424, 450], ["six.iteritems", "issubclass", "getattr", "isinstance", "dataset_data.DatasetData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasetData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.to_str": [[451, 454], ["pprint.pformat", "dataset_data.DatasetData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.__repr__": [[455, 458], ["dataset_data.DatasetData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.__eq__": [[459, 465], ["isinstance", "dataset_data.DatasetData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data.DatasetData.__ne__": [[466, 472], ["isinstance", "dataset_data.DatasetData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_state.DockerRunScheduledState.__init__": [[49, 55], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunScheduledState - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_state.DockerRunScheduledState.to_dict": [[56, 82], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_scheduled_state.DockerRunScheduledState.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunScheduledState", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_state.DockerRunScheduledState.to_str": [[83, 86], ["pprint.pformat", "docker_run_scheduled_state.DockerRunScheduledState.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_state.DockerRunScheduledState.__repr__": [[87, 90], ["docker_run_scheduled_state.DockerRunScheduledState.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_state.DockerRunScheduledState.__eq__": [[91, 97], ["isinstance", "docker_run_scheduled_state.DockerRunScheduledState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledState", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_state.DockerRunScheduledState.__ne__": [[98, 104], ["isinstance", "docker_run_scheduled_state.DockerRunScheduledState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledState", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "has_more", "=", "None", ",", "cursor", "=", "None", ",", "data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceRawSamplesMetadataData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_has_more", "=", "None", "\n", "self", ".", "_cursor", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "has_more", "=", "has_more", "\n", "self", ".", "cursor", "=", "cursor", "\n", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.has_more": [[73, 86], ["ValueError"], "methods", ["None"], ["", "@", "has_more", ".", "setter", "\n", "def", "has_more", "(", "self", ",", "has_more", ")", ":", "\n", "        ", "\"\"\"Sets the has_more of this DatasourceRawSamplesMetadataData.\n\n        Set to `false` if end of list is reached. Otherwise `true`.  # noqa: E501\n\n        :param has_more: The has_more of this DatasourceRawSamplesMetadataData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "has_more", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `has_more`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_has_more", "=", "has_more", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.cursor": [[98, 111], ["ValueError"], "methods", ["None"], ["", "@", "cursor", ".", "setter", "\n", "def", "cursor", "(", "self", ",", "cursor", ")", ":", "\n", "        ", "\"\"\"Sets the cursor of this DatasourceRawSamplesMetadataData.\n\n        A cursor that indicates the current position in the list. Must be passed to future requests to continue reading from the same list.   # noqa: E501\n\n        :param cursor: The cursor of this DatasourceRawSamplesMetadataData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "cursor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `cursor`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_cursor", "=", "cursor", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.data": [[123, 136], ["ValueError"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Sets the data of this DatasourceRawSamplesMetadataData.\n\n        Array containing the raw samples metadata objects  # noqa: E501\n\n        :param data: The data of this DatasourceRawSamplesMetadataData.  # noqa: E501\n        :type: list[DatasourceRawSamplesMetadataDataRow]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.to_dict": [[137, 163], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceRawSamplesMetadataData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.to_str": [[164, 167], ["pprint.pformat", "datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.__repr__": [[168, 171], ["datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.__eq__": [[172, 178], ["isinstance", "datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesMetadataData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.__ne__": [[179, 185], ["isinstance", "datasource_raw_samples_metadata_data.DatasourceRawSamplesMetadataData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesMetadataData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.s3_region.S3Region.__init__": [[70, 76], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"S3Region - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.s3_region.S3Region.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "s3_region.S3Region.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "S3Region", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.s3_region.S3Region.to_str": [[104, 107], ["pprint.pformat", "s3_region.S3Region.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.s3_region.S3Region.__repr__": [[108, 111], ["s3_region.S3Region.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.s3_region.S3Region.__eq__": [[112, 118], ["isinstance", "s3_region.S3Region.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "S3Region", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.s3_region.S3Region.__ne__": [[119, 125], ["isinstance", "s3_region.S3Region.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "S3Region", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.__init__": [[51, 69], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "name", "=", "None", ",", "configs", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ConfigurationData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_configs", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.id": [[80, 92], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this ConfigurationData.\n\n\n        :param id: The id of this ConfigurationData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.name": [[103, 115], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this ConfigurationData.\n\n\n        :param name: The name of this ConfigurationData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.configs": [[126, 138], ["ValueError"], "methods", ["None"], ["", "@", "configs", ".", "setter", "\n", "def", "configs", "(", "self", ",", "configs", ")", ":", "\n", "        ", "\"\"\"Sets the configs of this ConfigurationData.\n\n\n        :param configs: The configs of this ConfigurationData.  # noqa: E501\n        :type: list[ConfigurationEntry]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "configs", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `configs`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_configs", "=", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.created_at": [[149, 161], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this ConfigurationData.\n\n\n        :param created_at: The created_at of this ConfigurationData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.last_modified_at": [[172, 184], ["ValueError"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this ConfigurationData.\n\n\n        :param last_modified_at: The last_modified_at of this ConfigurationData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "last_modified_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `last_modified_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.to_dict": [[185, 211], ["six.iteritems", "issubclass", "getattr", "isinstance", "configuration_data.ConfigurationData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ConfigurationData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.to_str": [[212, 215], ["pprint.pformat", "configuration_data.ConfigurationData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.__repr__": [[216, 219], ["configuration_data.ConfigurationData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.__eq__": [[220, 226], ["isinstance", "configuration_data.ConfigurationData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_data.ConfigurationData.__ne__": [[227, 233], ["isinstance", "configuration_data.ConfigurationData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.custom_sample_meta_data.CustomSampleMetaData.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"CustomSampleMetaData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.custom_sample_meta_data.CustomSampleMetaData.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "custom_sample_meta_data.CustomSampleMetaData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "CustomSampleMetaData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.custom_sample_meta_data.CustomSampleMetaData.to_str": [[75, 78], ["pprint.pformat", "custom_sample_meta_data.CustomSampleMetaData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.custom_sample_meta_data.CustomSampleMetaData.__repr__": [[79, 82], ["custom_sample_meta_data.CustomSampleMetaData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.custom_sample_meta_data.CustomSampleMetaData.__eq__": [[83, 89], ["isinstance", "custom_sample_meta_data.CustomSampleMetaData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CustomSampleMetaData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.custom_sample_meta_data.CustomSampleMetaData.__ne__": [[90, 96], ["isinstance", "custom_sample_meta_data.CustomSampleMetaData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CustomSampleMetaData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_response.TagBitMaskResponse.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bit_mask_data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagBitMaskResponse - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_bit_mask_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "bit_mask_data", "=", "bit_mask_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_response.TagBitMaskResponse.bit_mask_data": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "bit_mask_data", ".", "setter", "\n", "def", "bit_mask_data", "(", "self", ",", "bit_mask_data", ")", ":", "\n", "        ", "\"\"\"Sets the bit_mask_data of this TagBitMaskResponse.\n\n\n        :param bit_mask_data: The bit_mask_data of this TagBitMaskResponse.  # noqa: E501\n        :type: TagBitMaskData\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "bit_mask_data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `bit_mask_data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_bit_mask_data", "=", "bit_mask_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_response.TagBitMaskResponse.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_bit_mask_response.TagBitMaskResponse.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagBitMaskResponse", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_response.TagBitMaskResponse.to_str": [[104, 107], ["pprint.pformat", "tag_bit_mask_response.TagBitMaskResponse.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_response.TagBitMaskResponse.__repr__": [[108, 111], ["tag_bit_mask_response.TagBitMaskResponse.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_response.TagBitMaskResponse.__eq__": [[112, 118], ["isinstance", "tag_bit_mask_response.TagBitMaskResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagBitMaskResponse", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_response.TagBitMaskResponse.__ne__": [[119, 125], ["isinstance", "tag_bit_mask_response.TagBitMaskResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagBitMaskResponse", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.__init__": [[57, 82], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "dataset_id", "=", "None", ",", "config_id", "=", "None", ",", "priority", "=", "None", ",", "state", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "owner", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunScheduledData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_config_id", "=", "None", "\n", "self", ".", "_priority", "=", "None", "\n", "self", ".", "_state", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "_owner", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "dataset_id", "=", "dataset_id", "\n", "self", ".", "config_id", "=", "config_id", "\n", "self", ".", "priority", "=", "priority", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "if", "owner", "is", "not", "None", ":", "\n", "            ", "self", ".", "owner", "=", "owner", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.id": [[93, 105], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this DockerRunScheduledData.\n\n\n        :param id: The id of this DockerRunScheduledData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.dataset_id": [[116, 128], ["ValueError"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this DockerRunScheduledData.\n\n\n        :param dataset_id: The dataset_id of this DockerRunScheduledData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "dataset_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `dataset_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.config_id": [[139, 151], ["ValueError"], "methods", ["None"], ["", "@", "config_id", ".", "setter", "\n", "def", "config_id", "(", "self", ",", "config_id", ")", ":", "\n", "        ", "\"\"\"Sets the config_id of this DockerRunScheduledData.\n\n\n        :param config_id: The config_id of this DockerRunScheduledData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "config_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `config_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_config_id", "=", "config_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.priority": [[162, 174], ["ValueError"], "methods", ["None"], ["", "@", "priority", ".", "setter", "\n", "def", "priority", "(", "self", ",", "priority", ")", ":", "\n", "        ", "\"\"\"Sets the priority of this DockerRunScheduledData.\n\n\n        :param priority: The priority of this DockerRunScheduledData.  # noqa: E501\n        :type: DockerRunScheduledPriority\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "priority", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `priority`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_priority", "=", "priority", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.state": [[185, 197], ["ValueError"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Sets the state of this DockerRunScheduledData.\n\n\n        :param state: The state of this DockerRunScheduledData.  # noqa: E501\n        :type: DockerRunScheduledState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "state", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `state`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.created_at": [[208, 220], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this DockerRunScheduledData.\n\n\n        :param created_at: The created_at of this DockerRunScheduledData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.last_modified_at": [[231, 243], ["ValueError"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this DockerRunScheduledData.\n\n\n        :param last_modified_at: The last_modified_at of this DockerRunScheduledData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "last_modified_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `last_modified_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.owner": [[254, 264], ["None"], "methods", ["None"], ["", "@", "owner", ".", "setter", "\n", "def", "owner", "(", "self", ",", "owner", ")", ":", "\n", "        ", "\"\"\"Sets the owner of this DockerRunScheduledData.\n\n\n        :param owner: The owner of this DockerRunScheduledData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_owner", "=", "owner", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.to_dict": [[265, 291], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_scheduled_data.DockerRunScheduledData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunScheduledData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.to_str": [[292, 295], ["pprint.pformat", "docker_run_scheduled_data.DockerRunScheduledData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.__repr__": [[296, 299], ["docker_run_scheduled_data.DockerRunScheduledData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.__eq__": [[300, 306], ["isinstance", "docker_run_scheduled_data.DockerRunScheduledData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_data.DockerRunScheduledData.__ne__": [[307, 313], ["isinstance", "docker_run_scheduled_data.DockerRunScheduledData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_creator.TagCreator.__init__": [[52, 58], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagCreator - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_creator.TagCreator.to_dict": [[59, 85], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_creator.TagCreator.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagCreator", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_creator.TagCreator.to_str": [[86, 89], ["pprint.pformat", "tag_creator.TagCreator.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_creator.TagCreator.__repr__": [[90, 93], ["tag_creator.TagCreator.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_creator.TagCreator.__eq__": [[94, 100], ["isinstance", "tag_creator.TagCreator.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagCreator", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_creator.TagCreator.__ne__": [[101, 107], ["isinstance", "tag_creator.TagCreator.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagCreator", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_id.CategoryId.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"CategoryId - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_id.CategoryId.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "category_id.CategoryId.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "CategoryId", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_id.CategoryId.to_str": [[75, 78], ["pprint.pformat", "category_id.CategoryId.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_id.CategoryId.__repr__": [[79, 82], ["category_id.CategoryId.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_id.CategoryId.__eq__": [[83, 89], ["isinstance", "category_id.CategoryId.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CategoryId", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_id.CategoryId.__ne__": [[90, 96], ["isinstance", "category_id.CategoryId.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CategoryId", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_name.DockerWorkerName.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerWorkerName - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_name.DockerWorkerName.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_worker_name.DockerWorkerName.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerWorkerName", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_name.DockerWorkerName.to_str": [[75, 78], ["pprint.pformat", "docker_worker_name.DockerWorkerName.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_name.DockerWorkerName.__repr__": [[79, 82], ["docker_worker_name.DockerWorkerName.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_name.DockerWorkerName.__eq__": [[83, 89], ["isinstance", "docker_worker_name.DockerWorkerName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerName", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_name.DockerWorkerName.__ne__": [[90, 96], ["isinstance", "docker_worker_name.DockerWorkerName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerName", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "account_name", "=", "None", ",", "account_key", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigAzure - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_account_name", "=", "None", "\n", "self", ".", "_account_key", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "account_name", "=", "account_name", "\n", "self", ".", "account_key", "=", "account_key", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.account_name": [[69, 82], ["ValueError"], "methods", ["None"], ["", "@", "account_name", ".", "setter", "\n", "def", "account_name", "(", "self", ",", "account_name", ")", ":", "\n", "        ", "\"\"\"Sets the account_name of this DatasourceConfigAzure.\n\n        name of the Azure Storage Account  # noqa: E501\n\n        :param account_name: The account_name of this DatasourceConfigAzure.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "account_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `account_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_account_name", "=", "account_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.account_key": [[94, 107], ["ValueError"], "methods", ["None"], ["", "@", "account_key", ".", "setter", "\n", "def", "account_key", "(", "self", ",", "account_key", ")", ":", "\n", "        ", "\"\"\"Sets the account_key of this DatasourceConfigAzure.\n\n        key of the Azure Storage Account  # noqa: E501\n\n        :param account_key: The account_key of this DatasourceConfigAzure.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "account_key", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `account_key`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_account_key", "=", "account_key", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.to_dict": [[108, 134], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_azure.DatasourceConfigAzure.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigAzure", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.to_str": [[135, 138], ["pprint.pformat", "datasource_config_azure.DatasourceConfigAzure.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.__repr__": [[139, 142], ["datasource_config_azure.DatasourceConfigAzure.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.__eq__": [[143, 149], ["isinstance", "datasource_config_azure.DatasourceConfigAzure.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigAzure", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_azure.DatasourceConfigAzure.__ne__": [[150, 156], ["isinstance", "datasource_config_azure.DatasourceConfigAzure.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigAzure", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_lightly.DatasourceConfigLIGHTLY.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigLIGHTLY - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_lightly.DatasourceConfigLIGHTLY.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_lightly.DatasourceConfigLIGHTLY.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigLIGHTLY", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_lightly.DatasourceConfigLIGHTLY.to_str": [[75, 78], ["pprint.pformat", "datasource_config_lightly.DatasourceConfigLIGHTLY.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_lightly.DatasourceConfigLIGHTLY.__repr__": [[79, 82], ["datasource_config_lightly.DatasourceConfigLIGHTLY.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_lightly.DatasourceConfigLIGHTLY.__eq__": [[83, 89], ["isinstance", "datasource_config_lightly.DatasourceConfigLIGHTLY.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigLIGHTLY", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_lightly.DatasourceConfigLIGHTLY.__ne__": [[90, 96], ["isinstance", "datasource_config_lightly.DatasourceConfigLIGHTLY.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigLIGHTLY", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.__init__": [[51, 70], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "name", "=", "None", ",", "is_processed", "=", "None", ",", "created_at", "=", "None", ",", "is2d", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasetEmbeddingData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_is_processed", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_is2d", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "is_processed", "=", "is_processed", "\n", "self", ".", "created_at", "=", "created_at", "\n", "if", "is2d", "is", "not", "None", ":", "\n", "            ", "self", ".", "is2d", "=", "is2d", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.id": [[81, 93], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this DatasetEmbeddingData.\n\n\n        :param id: The id of this DatasetEmbeddingData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.name": [[105, 118], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this DatasetEmbeddingData.\n\n        name of the embedding chosen by the user calling writeCSVUrl  # noqa: E501\n\n        :param name: The name of this DatasetEmbeddingData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.is_processed": [[130, 143], ["ValueError"], "methods", ["None"], ["", "@", "is_processed", ".", "setter", "\n", "def", "is_processed", "(", "self", ",", "is_processed", ")", ":", "\n", "        ", "\"\"\"Sets the is_processed of this DatasetEmbeddingData.\n\n        indicator whether embeddings have already been processed by a background worker  # noqa: E501\n\n        :param is_processed: The is_processed of this DatasetEmbeddingData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "is_processed", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `is_processed`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_is_processed", "=", "is_processed", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.created_at": [[154, 166], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this DatasetEmbeddingData.\n\n\n        :param created_at: The created_at of this DatasetEmbeddingData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.is2d": [[178, 189], ["None"], "methods", ["None"], ["", "@", "is2d", ".", "setter", "\n", "def", "is2d", "(", "self", ",", "is2d", ")", ":", "\n", "        ", "\"\"\"Sets the is2d of this DatasetEmbeddingData.\n\n        flag set by the background worker if the embedding is 2d  # noqa: E501\n\n        :param is2d: The is2d of this DatasetEmbeddingData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "\n", "self", ".", "_is2d", "=", "is2d", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.to_dict": [[190, 216], ["six.iteritems", "issubclass", "getattr", "isinstance", "dataset_embedding_data.DatasetEmbeddingData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasetEmbeddingData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.to_str": [[217, 220], ["pprint.pformat", "dataset_embedding_data.DatasetEmbeddingData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.__repr__": [[221, 224], ["dataset_embedding_data.DatasetEmbeddingData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.__eq__": [[225, 231], ["isinstance", "dataset_embedding_data.DatasetEmbeddingData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetEmbeddingData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_embedding_data.DatasetEmbeddingData.__ne__": [[232, 238], ["isinstance", "dataset_embedding_data.DatasetEmbeddingData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetEmbeddingData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "s3_region", "=", "None", ",", "s3_access_key_id", "=", "None", ",", "s3_secret_access_key", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigS3 - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_s3_region", "=", "None", "\n", "self", ".", "_s3_access_key_id", "=", "None", "\n", "self", ".", "_s3_secret_access_key", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "s3_region", "=", "s3_region", "\n", "self", ".", "s3_access_key_id", "=", "s3_access_key_id", "\n", "self", ".", "s3_secret_access_key", "=", "s3_secret_access_key", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.s3_region": [[72, 84], ["ValueError"], "methods", ["None"], ["", "@", "s3_region", ".", "setter", "\n", "def", "s3_region", "(", "self", ",", "s3_region", ")", ":", "\n", "        ", "\"\"\"Sets the s3_region of this DatasourceConfigS3.\n\n\n        :param s3_region: The s3_region of this DatasourceConfigS3.  # noqa: E501\n        :type: S3Region\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "s3_region", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `s3_region`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_s3_region", "=", "s3_region", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.s3_access_key_id": [[96, 109], ["ValueError"], "methods", ["None"], ["", "@", "s3_access_key_id", ".", "setter", "\n", "def", "s3_access_key_id", "(", "self", ",", "s3_access_key_id", ")", ":", "\n", "        ", "\"\"\"Sets the s3_access_key_id of this DatasourceConfigS3.\n\n        the accessKeyId of the credential you are providing Lightly to use  # noqa: E501\n\n        :param s3_access_key_id: The s3_access_key_id of this DatasourceConfigS3.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "s3_access_key_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `s3_access_key_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_s3_access_key_id", "=", "s3_access_key_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.s3_secret_access_key": [[121, 134], ["ValueError"], "methods", ["None"], ["", "@", "s3_secret_access_key", ".", "setter", "\n", "def", "s3_secret_access_key", "(", "self", ",", "s3_secret_access_key", ")", ":", "\n", "        ", "\"\"\"Sets the s3_secret_access_key of this DatasourceConfigS3.\n\n        the secretAccessKey of the credential you are providing Lightly to use  # noqa: E501\n\n        :param s3_secret_access_key: The s3_secret_access_key of this DatasourceConfigS3.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "s3_secret_access_key", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `s3_secret_access_key`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_s3_secret_access_key", "=", "s3_secret_access_key", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.to_dict": [[135, 161], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_s3.DatasourceConfigS3.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigS3", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.to_str": [[162, 165], ["pprint.pformat", "datasource_config_s3.DatasourceConfigS3.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.__repr__": [[166, 169], ["datasource_config_s3.DatasourceConfigS3.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.__eq__": [[170, 176], ["isinstance", "datasource_config_s3.DatasourceConfigS3.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigS3", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3.DatasourceConfigS3.__ne__": [[177, 183], ["isinstance", "datasource_config_s3.DatasourceConfigS3.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigS3", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_code.ApiErrorCode.__init__": [[108, 114], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ApiErrorCode - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_code.ApiErrorCode.to_dict": [[115, 141], ["six.iteritems", "issubclass", "getattr", "isinstance", "api_error_code.ApiErrorCode.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ApiErrorCode", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_code.ApiErrorCode.to_str": [[142, 145], ["pprint.pformat", "api_error_code.ApiErrorCode.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_code.ApiErrorCode.__repr__": [[146, 149], ["api_error_code.ApiErrorCode.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_code.ApiErrorCode.__eq__": [[150, 156], ["isinstance", "api_error_code.ApiErrorCode.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ApiErrorCode", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_code.ApiErrorCode.__ne__": [[157, 163], ["isinstance", "api_error_code.ApiErrorCode.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ApiErrorCode", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_name.TaskName.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TaskName - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_name.TaskName.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "task_name.TaskName.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TaskName", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_name.TaskName.to_str": [[75, 78], ["pprint.pformat", "task_name.TaskName.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_name.TaskName.__repr__": [[79, 82], ["task_name.TaskName.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_name.TaskName.__eq__": [[83, 89], ["isinstance", "task_name.TaskName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TaskName", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_name.TaskName.__ne__": [[90, 96], ["isinstance", "task_name.TaskName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TaskName", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "external_id", "=", "None", ",", "image_url", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"LabelBoxDataRow - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_external_id", "=", "None", "\n", "self", ".", "_image_url", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "external_id", "=", "external_id", "\n", "self", ".", "image_url", "=", "image_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.external_id": [[69, 82], ["ValueError"], "methods", ["None"], ["", "@", "external_id", ".", "setter", "\n", "def", "external_id", "(", "self", ",", "external_id", ")", ":", "\n", "        ", "\"\"\"Sets the external_id of this LabelBoxDataRow.\n\n        The task_id for importing into LabelBox.  # noqa: E501\n\n        :param external_id: The external_id of this LabelBoxDataRow.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "external_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `external_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_external_id", "=", "external_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.image_url": [[93, 105], ["ValueError"], "methods", ["None"], ["", "@", "image_url", ".", "setter", "\n", "def", "image_url", "(", "self", ",", "image_url", ")", ":", "\n", "        ", "\"\"\"Sets the image_url of this LabelBoxDataRow.\n\n\n        :param image_url: The image_url of this LabelBoxDataRow.  # noqa: E501\n        :type: RedirectedReadUrl\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "image_url", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `image_url`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_image_url", "=", "image_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.to_dict": [[106, 132], ["six.iteritems", "issubclass", "getattr", "isinstance", "label_box_data_row.LabelBoxDataRow.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "LabelBoxDataRow", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.to_str": [[133, 136], ["pprint.pformat", "label_box_data_row.LabelBoxDataRow.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.__repr__": [[137, 140], ["label_box_data_row.LabelBoxDataRow.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.__eq__": [[141, 147], ["isinstance", "label_box_data_row.LabelBoxDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelBoxDataRow", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_row.LabelBoxDataRow.__ne__": [[148, 154], ["isinstance", "label_box_data_row.LabelBoxDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelBoxDataRow", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.__init__": [[45, 58], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "state", "=", "None", ",", "priority", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunScheduledUpdateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_state", "=", "None", "\n", "self", ".", "_priority", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "state", "=", "state", "\n", "if", "priority", "is", "not", "None", ":", "\n", "            ", "self", ".", "priority", "=", "priority", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.state": [[69, 81], ["ValueError"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Sets the state of this DockerRunScheduledUpdateRequest.\n\n\n        :param state: The state of this DockerRunScheduledUpdateRequest.  # noqa: E501\n        :type: DockerRunScheduledState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "state", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `state`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.priority": [[92, 102], ["None"], "methods", ["None"], ["", "@", "priority", ".", "setter", "\n", "def", "priority", "(", "self", ",", "priority", ")", ":", "\n", "        ", "\"\"\"Sets the priority of this DockerRunScheduledUpdateRequest.\n\n\n        :param priority: The priority of this DockerRunScheduledUpdateRequest.  # noqa: E501\n        :type: DockerRunScheduledPriority\n        \"\"\"", "\n", "\n", "self", ".", "_priority", "=", "priority", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.to_dict": [[103, 129], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunScheduledUpdateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.to_str": [[130, 133], ["pprint.pformat", "docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.__repr__": [[134, 137], ["docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.__eq__": [[138, 144], ["isinstance", "docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledUpdateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.__ne__": [[145, 151], ["isinstance", "docker_run_scheduled_update_request.DockerRunScheduledUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledUpdateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.__init__": [[45, 58], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keypoints", "=", "None", ",", "probabilities", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionSingletonKeypointDetection - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_keypoints", "=", "None", "\n", "self", ".", "_probabilities", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "keypoints", "=", "keypoints", "\n", "if", "probabilities", "is", "not", "None", ":", "\n", "            ", "self", ".", "probabilities", "=", "probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.keypoints": [[70, 83], ["ValueError"], "methods", ["None"], ["", "@", "keypoints", ".", "setter", "\n", "def", "keypoints", "(", "self", ",", "keypoints", ")", ":", "\n", "        ", "\"\"\"Sets the keypoints of this PredictionSingletonKeypointDetection.\n\n        [x1, y2, v1, ..., xk, yk, vk] as outlined by the coco format https://cocodataset.org/#format-results   # noqa: E501\n\n        :param keypoints: The keypoints of this PredictionSingletonKeypointDetection.  # noqa: E501\n        :type: list[int]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "keypoints", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `keypoints`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_keypoints", "=", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.probabilities": [[94, 104], ["None"], "methods", ["None"], ["", "@", "probabilities", ".", "setter", "\n", "def", "probabilities", "(", "self", ",", "probabilities", ")", ":", "\n", "        ", "\"\"\"Sets the probabilities of this PredictionSingletonKeypointDetection.\n\n\n        :param probabilities: The probabilities of this PredictionSingletonKeypointDetection.  # noqa: E501\n        :type: Probabilities\n        \"\"\"", "\n", "\n", "self", ".", "_probabilities", "=", "probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.to_dict": [[105, 131], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionSingletonKeypointDetection", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.to_str": [[132, 135], ["pprint.pformat", "prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.__repr__": [[136, 139], ["prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.__eq__": [[140, 146], ["isinstance", "prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonKeypointDetection", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.__ne__": [[147, 153], ["isinstance", "prediction_singleton_keypoint_detection.PredictionSingletonKeypointDetection.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonKeypointDetection", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_state.DockerWorkerState.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerWorkerState - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_state.DockerWorkerState.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_worker_state.DockerWorkerState.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerWorkerState", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_state.DockerWorkerState.to_str": [[82, 85], ["pprint.pformat", "docker_worker_state.DockerWorkerState.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_state.DockerWorkerState.__repr__": [[86, 89], ["docker_worker_state.DockerWorkerState.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_state.DockerWorkerState.__eq__": [[90, 96], ["isinstance", "docker_worker_state.DockerWorkerState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerState", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_state.DockerWorkerState.__ne__": [[97, 103], ["isinstance", "docker_worker_state.DockerWorkerState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerState", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.image_type.ImageType.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ImageType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.image_type.ImageType.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "image_type.ImageType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ImageType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.image_type.ImageType.to_str": [[82, 85], ["pprint.pformat", "image_type.ImageType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.image_type.ImageType.__repr__": [[86, 89], ["image_type.ImageType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.image_type.ImageType.__eq__": [[90, 96], ["isinstance", "image_type.ImageType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ImageType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.image_type.ImageType.__ne__": [[97, 103], ["isinstance", "image_type.ImageType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ImageType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.__init__": [[49, 65], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "dimensionality_reduction_method", "=", "None", ",", "coordinates_dimension1", "=", "None", ",", "coordinates_dimension2", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"Embedding2dCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_dimensionality_reduction_method", "=", "None", "\n", "self", ".", "_coordinates_dimension1", "=", "None", "\n", "self", ".", "_coordinates_dimension2", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "dimensionality_reduction_method", "=", "dimensionality_reduction_method", "\n", "self", ".", "coordinates_dimension1", "=", "coordinates_dimension1", "\n", "self", ".", "coordinates_dimension2", "=", "coordinates_dimension2", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.name": [[77, 90], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this Embedding2dCreateRequest.\n\n        Name of the 2d embedding (default is embedding name + __2d)  # noqa: E501\n\n        :param name: The name of this Embedding2dCreateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.dimensionality_reduction_method": [[101, 113], ["ValueError"], "methods", ["None"], ["", "@", "dimensionality_reduction_method", ".", "setter", "\n", "def", "dimensionality_reduction_method", "(", "self", ",", "dimensionality_reduction_method", ")", ":", "\n", "        ", "\"\"\"Sets the dimensionality_reduction_method of this Embedding2dCreateRequest.\n\n\n        :param dimensionality_reduction_method: The dimensionality_reduction_method of this Embedding2dCreateRequest.  # noqa: E501\n        :type: DimensionalityReductionMethod\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "dimensionality_reduction_method", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `dimensionality_reduction_method`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_dimensionality_reduction_method", "=", "dimensionality_reduction_method", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.coordinates_dimension1": [[124, 136], ["ValueError"], "methods", ["None"], ["", "@", "coordinates_dimension1", ".", "setter", "\n", "def", "coordinates_dimension1", "(", "self", ",", "coordinates_dimension1", ")", ":", "\n", "        ", "\"\"\"Sets the coordinates_dimension1 of this Embedding2dCreateRequest.\n\n\n        :param coordinates_dimension1: The coordinates_dimension1 of this Embedding2dCreateRequest.  # noqa: E501\n        :type: Embedding2dCoordinates\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "coordinates_dimension1", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `coordinates_dimension1`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_coordinates_dimension1", "=", "coordinates_dimension1", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.coordinates_dimension2": [[147, 159], ["ValueError"], "methods", ["None"], ["", "@", "coordinates_dimension2", ".", "setter", "\n", "def", "coordinates_dimension2", "(", "self", ",", "coordinates_dimension2", ")", ":", "\n", "        ", "\"\"\"Sets the coordinates_dimension2 of this Embedding2dCreateRequest.\n\n\n        :param coordinates_dimension2: The coordinates_dimension2 of this Embedding2dCreateRequest.  # noqa: E501\n        :type: Embedding2dCoordinates\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "coordinates_dimension2", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `coordinates_dimension2`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_coordinates_dimension2", "=", "coordinates_dimension2", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.to_dict": [[160, 186], ["six.iteritems", "issubclass", "getattr", "isinstance", "embedding2d_create_request.Embedding2dCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "Embedding2dCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.to_str": [[187, 190], ["pprint.pformat", "embedding2d_create_request.Embedding2dCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.__repr__": [[191, 194], ["embedding2d_create_request.Embedding2dCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.__eq__": [[195, 201], ["isinstance", "embedding2d_create_request.Embedding2dCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Embedding2dCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_create_request.Embedding2dCreateRequest.__ne__": [[202, 208], ["isinstance", "embedding2d_create_request.Embedding2dCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Embedding2dCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.read_url.ReadUrl.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ReadUrl - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.read_url.ReadUrl.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "read_url.ReadUrl.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ReadUrl", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.read_url.ReadUrl.to_str": [[75, 78], ["pprint.pformat", "read_url.ReadUrl.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.read_url.ReadUrl.__repr__": [[79, 82], ["read_url.ReadUrl.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.read_url.ReadUrl.__eq__": [[83, 89], ["isinstance", "read_url.ReadUrl.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ReadUrl", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.read_url.ReadUrl.__ne__": [[90, 96], ["isinstance", "read_url.ReadUrl.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ReadUrl", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "worker_type", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"CreateDockerWorkerRegistryEntryRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_worker_type", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "worker_type", "=", "worker_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.name": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this CreateDockerWorkerRegistryEntryRequest.\n\n\n        :param name: The name of this CreateDockerWorkerRegistryEntryRequest.  # noqa: E501\n        :type: DockerWorkerName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.worker_type": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "worker_type", ".", "setter", "\n", "def", "worker_type", "(", "self", ",", "worker_type", ")", ":", "\n", "        ", "\"\"\"Sets the worker_type of this CreateDockerWorkerRegistryEntryRequest.\n\n\n        :param worker_type: The worker_type of this CreateDockerWorkerRegistryEntryRequest.  # noqa: E501\n        :type: DockerWorkerType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "worker_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `worker_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_worker_type", "=", "worker_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "CreateDockerWorkerRegistryEntryRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.to_str": [[131, 134], ["pprint.pformat", "create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.__repr__": [[135, 138], ["create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.__eq__": [[139, 145], ["isinstance", "create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CreateDockerWorkerRegistryEntryRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.__ne__": [[146, 152], ["isinstance", "create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CreateDockerWorkerRegistryEntryRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.__init__": [[57, 85], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "prev_tag_id", "=", "None", ",", "query_tag_id", "=", "None", ",", "preselected_tag_id", "=", "None", ",", "bit_mask_data", "=", "None", ",", "tot_size", "=", "None", ",", "creator", "=", "None", ",", "changes", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_prev_tag_id", "=", "None", "\n", "self", ".", "_query_tag_id", "=", "None", "\n", "self", ".", "_preselected_tag_id", "=", "None", "\n", "self", ".", "_bit_mask_data", "=", "None", "\n", "self", ".", "_tot_size", "=", "None", "\n", "self", ".", "_creator", "=", "None", "\n", "self", ".", "_changes", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "prev_tag_id", "=", "prev_tag_id", "\n", "if", "query_tag_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "query_tag_id", "=", "query_tag_id", "\n", "", "if", "preselected_tag_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "preselected_tag_id", "=", "preselected_tag_id", "\n", "", "self", ".", "bit_mask_data", "=", "bit_mask_data", "\n", "self", ".", "tot_size", "=", "tot_size", "\n", "if", "creator", "is", "not", "None", ":", "\n", "            ", "self", ".", "creator", "=", "creator", "\n", "", "if", "changes", "is", "not", "None", ":", "\n", "            ", "self", ".", "changes", "=", "changes", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.name": [[96, 108], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this TagCreateRequest.\n\n\n        :param name: The name of this TagCreateRequest.  # noqa: E501\n        :type: TagName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.prev_tag_id": [[119, 131], ["ValueError"], "methods", ["None"], ["", "@", "prev_tag_id", ".", "setter", "\n", "def", "prev_tag_id", "(", "self", ",", "prev_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the prev_tag_id of this TagCreateRequest.\n\n\n        :param prev_tag_id: The prev_tag_id of this TagCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "prev_tag_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `prev_tag_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_prev_tag_id", "=", "prev_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.query_tag_id": [[142, 152], ["None"], "methods", ["None"], ["", "@", "query_tag_id", ".", "setter", "\n", "def", "query_tag_id", "(", "self", ",", "query_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the query_tag_id of this TagCreateRequest.\n\n\n        :param query_tag_id: The query_tag_id of this TagCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_query_tag_id", "=", "query_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.preselected_tag_id": [[163, 173], ["None"], "methods", ["None"], ["", "@", "preselected_tag_id", ".", "setter", "\n", "def", "preselected_tag_id", "(", "self", ",", "preselected_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the preselected_tag_id of this TagCreateRequest.\n\n\n        :param preselected_tag_id: The preselected_tag_id of this TagCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_preselected_tag_id", "=", "preselected_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.bit_mask_data": [[184, 196], ["ValueError"], "methods", ["None"], ["", "@", "bit_mask_data", ".", "setter", "\n", "def", "bit_mask_data", "(", "self", ",", "bit_mask_data", ")", ":", "\n", "        ", "\"\"\"Sets the bit_mask_data of this TagCreateRequest.\n\n\n        :param bit_mask_data: The bit_mask_data of this TagCreateRequest.  # noqa: E501\n        :type: TagBitMaskData\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "bit_mask_data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `bit_mask_data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_bit_mask_data", "=", "bit_mask_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.tot_size": [[207, 219], ["ValueError"], "methods", ["None"], ["", "@", "tot_size", ".", "setter", "\n", "def", "tot_size", "(", "self", ",", "tot_size", ")", ":", "\n", "        ", "\"\"\"Sets the tot_size of this TagCreateRequest.\n\n\n        :param tot_size: The tot_size of this TagCreateRequest.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "tot_size", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `tot_size`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_tot_size", "=", "tot_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.creator": [[230, 240], ["None"], "methods", ["None"], ["", "@", "creator", ".", "setter", "\n", "def", "creator", "(", "self", ",", "creator", ")", ":", "\n", "        ", "\"\"\"Sets the creator of this TagCreateRequest.\n\n\n        :param creator: The creator of this TagCreateRequest.  # noqa: E501\n        :type: TagCreator\n        \"\"\"", "\n", "\n", "self", ".", "_creator", "=", "creator", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.changes": [[251, 261], ["None"], "methods", ["None"], ["", "@", "changes", ".", "setter", "\n", "def", "changes", "(", "self", ",", "changes", ")", ":", "\n", "        ", "\"\"\"Sets the changes of this TagCreateRequest.\n\n\n        :param changes: The changes of this TagCreateRequest.  # noqa: E501\n        :type: TagChangeData\n        \"\"\"", "\n", "\n", "self", ".", "_changes", "=", "changes", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.to_dict": [[262, 288], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_create_request.TagCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.to_str": [[289, 292], ["pprint.pformat", "tag_create_request.TagCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.__repr__": [[293, 296], ["tag_create_request.TagCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.__eq__": [[297, 303], ["isinstance", "tag_create_request.TagCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_create_request.TagCreateRequest.__ne__": [[304, 310], ["isinstance", "tag_create_request.TagCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "code", "=", "None", ",", "message", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ApiErrorResponse - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_code", "=", "None", "\n", "self", ".", "_message", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "code", "=", "code", "\n", "self", ".", "message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.code": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "code", ".", "setter", "\n", "def", "code", "(", "self", ",", "code", ")", ":", "\n", "        ", "\"\"\"Sets the code of this ApiErrorResponse.\n\n\n        :param code: The code of this ApiErrorResponse.  # noqa: E501\n        :type: ApiErrorCode\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "code", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `code`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_code", "=", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.message": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "message", ".", "setter", "\n", "def", "message", "(", "self", ",", "message", ")", ":", "\n", "        ", "\"\"\"Sets the message of this ApiErrorResponse.\n\n\n        :param message: The message of this ApiErrorResponse.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "message", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `message`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "api_error_response.ApiErrorResponse.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ApiErrorResponse", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.to_str": [[131, 134], ["pprint.pformat", "api_error_response.ApiErrorResponse.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.__repr__": [[135, 138], ["api_error_response.ApiErrorResponse.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.__eq__": [[139, 145], ["isinstance", "api_error_response.ApiErrorResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ApiErrorResponse", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.api_error_response.ApiErrorResponse.__ne__": [[146, 152], ["isinstance", "api_error_response.ApiErrorResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ApiErrorResponse", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp.Timestamp.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"Timestamp - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp.Timestamp.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "timestamp.Timestamp.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "Timestamp", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp.Timestamp.to_str": [[75, 78], ["pprint.pformat", "timestamp.Timestamp.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp.Timestamp.__repr__": [[79, 82], ["timestamp.Timestamp.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp.Timestamp.__eq__": [[83, 89], ["isinstance", "timestamp.Timestamp.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Timestamp", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp.Timestamp.__ne__": [[90, 96], ["isinstance", "timestamp.Timestamp.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Timestamp", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_data.TagBitMaskData.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagBitMaskData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_data.TagBitMaskData.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_bit_mask_data.TagBitMaskData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagBitMaskData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_data.TagBitMaskData.to_str": [[75, 78], ["pprint.pformat", "tag_bit_mask_data.TagBitMaskData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_data.TagBitMaskData.__repr__": [[79, 82], ["tag_bit_mask_data.TagBitMaskData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_data.TagBitMaskData.__eq__": [[83, 89], ["isinstance", "tag_bit_mask_data.TagBitMaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagBitMaskData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_bit_mask_data.TagBitMaskData.__ne__": [[90, 96], ["isinstance", "tag_bit_mask_data.TagBitMaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagBitMaskData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.__init__": [[45, 58], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "state", "=", "None", ",", "message", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunUpdateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_state", "=", "None", "\n", "self", ".", "_message", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "state", "=", "state", "\n", "if", "message", "is", "not", "None", ":", "\n", "            ", "self", ".", "message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.state": [[69, 81], ["ValueError"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Sets the state of this DockerRunUpdateRequest.\n\n\n        :param state: The state of this DockerRunUpdateRequest.  # noqa: E501\n        :type: DockerRunState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "state", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `state`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.message": [[92, 102], ["None"], "methods", ["None"], ["", "@", "message", ".", "setter", "\n", "def", "message", "(", "self", ",", "message", ")", ":", "\n", "        ", "\"\"\"Sets the message of this DockerRunUpdateRequest.\n\n\n        :param message: The message of this DockerRunUpdateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.to_dict": [[103, 129], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_update_request.DockerRunUpdateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunUpdateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.to_str": [[130, 133], ["pprint.pformat", "docker_run_update_request.DockerRunUpdateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.__repr__": [[134, 137], ["docker_run_update_request.DockerRunUpdateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.__eq__": [[138, 144], ["isinstance", "docker_run_update_request.DockerRunUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunUpdateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_update_request.DockerRunUpdateRequest.__ne__": [[145, 151], ["isinstance", "docker_run_update_request.DockerRunUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunUpdateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_update_request.DatasetUpdateRequest.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasetUpdateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_update_request.DatasetUpdateRequest.name": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this DatasetUpdateRequest.\n\n\n        :param name: The name of this DatasetUpdateRequest.  # noqa: E501\n        :type: DatasetName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_update_request.DatasetUpdateRequest.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "dataset_update_request.DatasetUpdateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasetUpdateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_update_request.DatasetUpdateRequest.to_str": [[104, 107], ["pprint.pformat", "dataset_update_request.DatasetUpdateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_update_request.DatasetUpdateRequest.__repr__": [[108, 111], ["dataset_update_request.DatasetUpdateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_update_request.DatasetUpdateRequest.__eq__": [[112, 118], ["isinstance", "dataset_update_request.DatasetUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetUpdateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_update_request.DatasetUpdateRequest.__ne__": [[119, 125], ["isinstance", "dataset_update_request.DatasetUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetUpdateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.general_job_result.GeneralJobResult.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"GeneralJobResult - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.general_job_result.GeneralJobResult.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "general_job_result.GeneralJobResult.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "GeneralJobResult", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.general_job_result.GeneralJobResult.to_str": [[75, 78], ["pprint.pformat", "general_job_result.GeneralJobResult.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.general_job_result.GeneralJobResult.__repr__": [[79, 82], ["general_job_result.GeneralJobResult.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.general_job_result.GeneralJobResult.__eq__": [[83, 89], ["isinstance", "general_job_result.GeneralJobResult.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "GeneralJobResult", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.general_job_result.GeneralJobResult.__ne__": [[90, 96], ["isinstance", "general_job_result.GeneralJobResult.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "GeneralJobResult", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.__init__": [[47, 64], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "source_video", "=", "None", ",", "source_video_frame_index", "=", "None", ",", "source_video_frame_timestamp", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"VideoFrameData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_source_video", "=", "None", "\n", "self", ".", "_source_video_frame_index", "=", "None", "\n", "self", ".", "_source_video_frame_timestamp", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "source_video", "is", "not", "None", ":", "\n", "            ", "self", ".", "source_video", "=", "source_video", "\n", "", "if", "source_video_frame_index", "is", "not", "None", ":", "\n", "            ", "self", ".", "source_video_frame_index", "=", "source_video_frame_index", "\n", "", "if", "source_video_frame_timestamp", "is", "not", "None", ":", "\n", "            ", "self", ".", "source_video_frame_timestamp", "=", "source_video_frame_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.source_video": [[76, 87], ["None"], "methods", ["None"], ["", "@", "source_video", ".", "setter", "\n", "def", "source_video", "(", "self", ",", "source_video", ")", ":", "\n", "        ", "\"\"\"Sets the source_video of this VideoFrameData.\n\n        Name of the source video.  # noqa: E501\n\n        :param source_video: The source_video of this VideoFrameData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_source_video", "=", "source_video", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.source_video_frame_index": [[99, 110], ["None"], "methods", ["None"], ["", "@", "source_video_frame_index", ".", "setter", "\n", "def", "source_video_frame_index", "(", "self", ",", "source_video_frame_index", ")", ":", "\n", "        ", "\"\"\"Sets the source_video_frame_index of this VideoFrameData.\n\n        Index of the frame in the source video.  # noqa: E501\n\n        :param source_video_frame_index: The source_video_frame_index of this VideoFrameData.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "\n", "self", ".", "_source_video_frame_index", "=", "source_video_frame_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.source_video_frame_timestamp": [[122, 133], ["None"], "methods", ["None"], ["", "@", "source_video_frame_timestamp", ".", "setter", "\n", "def", "source_video_frame_timestamp", "(", "self", ",", "source_video_frame_timestamp", ")", ":", "\n", "        ", "\"\"\"Sets the source_video_frame_timestamp of this VideoFrameData.\n\n        Timestamp of the frame in the source video.  # noqa: E501\n\n        :param source_video_frame_timestamp: The source_video_frame_timestamp of this VideoFrameData.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "\n", "self", ".", "_source_video_frame_timestamp", "=", "source_video_frame_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.to_dict": [[134, 160], ["six.iteritems", "issubclass", "getattr", "isinstance", "video_frame_data.VideoFrameData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "VideoFrameData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.to_str": [[161, 164], ["pprint.pformat", "video_frame_data.VideoFrameData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.__repr__": [[165, 168], ["video_frame_data.VideoFrameData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.__eq__": [[169, 175], ["isinstance", "video_frame_data.VideoFrameData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "VideoFrameData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.video_frame_data.VideoFrameData.__ne__": [[176, 182], ["isinstance", "video_frame_data.VideoFrameData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "VideoFrameData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_type.ActiveLearningScoreType.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ActiveLearningScoreType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_type.ActiveLearningScoreType.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "active_learning_score_type.ActiveLearningScoreType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ActiveLearningScoreType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_type.ActiveLearningScoreType.to_str": [[75, 78], ["pprint.pformat", "active_learning_score_type.ActiveLearningScoreType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_type.ActiveLearningScoreType.__repr__": [[79, 82], ["active_learning_score_type.ActiveLearningScoreType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_type.ActiveLearningScoreType.__eq__": [[83, 89], ["isinstance", "active_learning_score_type.ActiveLearningScoreType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScoreType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_type.ActiveLearningScoreType.__ne__": [[90, 96], ["isinstance", "active_learning_score_type.ActiveLearningScoreType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScoreType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "full", "=", "None", ",", "thumb", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SampleWriteUrls - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_full", "=", "None", "\n", "self", ".", "_thumb", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "full", "=", "full", "\n", "self", ".", "thumb", "=", "thumb", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.full": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "full", ".", "setter", "\n", "def", "full", "(", "self", ",", "full", ")", ":", "\n", "        ", "\"\"\"Sets the full of this SampleWriteUrls.\n\n\n        :param full: The full of this SampleWriteUrls.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "full", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `full`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_full", "=", "full", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.thumb": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "thumb", ".", "setter", "\n", "def", "thumb", "(", "self", ",", "thumb", ")", ":", "\n", "        ", "\"\"\"Sets the thumb of this SampleWriteUrls.\n\n\n        :param thumb: The thumb of this SampleWriteUrls.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "thumb", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `thumb`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_thumb", "=", "thumb", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "sample_write_urls.SampleWriteUrls.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SampleWriteUrls", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.to_str": [[131, 134], ["pprint.pformat", "sample_write_urls.SampleWriteUrls.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.__repr__": [[135, 138], ["sample_write_urls.SampleWriteUrls.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.__eq__": [[139, 145], ["isinstance", "sample_write_urls.SampleWriteUrls.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleWriteUrls", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_write_urls.SampleWriteUrls.__ne__": [[146, 152], ["isinstance", "sample_write_urls.SampleWriteUrls.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleWriteUrls", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_purpose.DatasourcePurpose.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourcePurpose - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_purpose.DatasourcePurpose.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_purpose.DatasourcePurpose.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourcePurpose", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_purpose.DatasourcePurpose.to_str": [[82, 85], ["pprint.pformat", "datasource_purpose.DatasourcePurpose.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_purpose.DatasourcePurpose.__repr__": [[86, 89], ["datasource_purpose.DatasourcePurpose.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_purpose.DatasourcePurpose.__eq__": [[90, 96], ["isinstance", "datasource_purpose.DatasourcePurpose.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourcePurpose", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_purpose.DatasourcePurpose.__ne__": [[97, 103], ["isinstance", "datasource_purpose.DatasourcePurpose.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourcePurpose", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_datasource_config.OneOfDatasourceConfig.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"OneOfDatasourceConfig - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_datasource_config.OneOfDatasourceConfig.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "one_of_datasource_config.OneOfDatasourceConfig.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "OneOfDatasourceConfig", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_datasource_config.OneOfDatasourceConfig.to_str": [[75, 78], ["pprint.pformat", "one_of_datasource_config.OneOfDatasourceConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_datasource_config.OneOfDatasourceConfig.__repr__": [[79, 82], ["one_of_datasource_config.OneOfDatasourceConfig.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_datasource_config.OneOfDatasourceConfig.__eq__": [[83, 89], ["isinstance", "one_of_datasource_config.OneOfDatasourceConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "OneOfDatasourceConfig", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_datasource_config.OneOfDatasourceConfig.__ne__": [[90, 96], ["isinstance", "one_of_datasource_config.OneOfDatasourceConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "OneOfDatasourceConfig", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.__init__": [[49, 67], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "url", "=", "None", ",", "lightly_file_name", "=", "None", ",", "lightly_meta_info", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SamaTaskData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_url", "=", "None", "\n", "self", ".", "_lightly_file_name", "=", "None", "\n", "self", ".", "_lightly_meta_info", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "url", "=", "url", "\n", "if", "lightly_file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "lightly_file_name", "=", "lightly_file_name", "\n", "", "if", "lightly_meta_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "lightly_meta_info", "=", "lightly_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.id": [[78, 90], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this SamaTaskData.\n\n\n        :param id: The id of this SamaTaskData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.url": [[101, 113], ["ValueError"], "methods", ["None"], ["", "@", "url", ".", "setter", "\n", "def", "url", "(", "self", ",", "url", ")", ":", "\n", "        ", "\"\"\"Sets the url of this SamaTaskData.\n\n\n        :param url: The url of this SamaTaskData.  # noqa: E501\n        :type: RedirectedReadUrl\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "url", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `url`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_url", "=", "url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.lightly_file_name": [[125, 136], ["None"], "methods", ["None"], ["", "@", "lightly_file_name", ".", "setter", "\n", "def", "lightly_file_name", "(", "self", ",", "lightly_file_name", ")", ":", "\n", "        ", "\"\"\"Sets the lightly_file_name of this SamaTaskData.\n\n        The original fileName of the sample. This is unique within a dataset  # noqa: E501\n\n        :param lightly_file_name: The lightly_file_name of this SamaTaskData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_lightly_file_name", "=", "lightly_file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.lightly_meta_info": [[147, 157], ["None"], "methods", ["None"], ["", "@", "lightly_meta_info", ".", "setter", "\n", "def", "lightly_meta_info", "(", "self", ",", "lightly_meta_info", ")", ":", "\n", "        ", "\"\"\"Sets the lightly_meta_info of this SamaTaskData.\n\n\n        :param lightly_meta_info: The lightly_meta_info of this SamaTaskData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_lightly_meta_info", "=", "lightly_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.to_dict": [[158, 184], ["six.iteritems", "issubclass", "getattr", "isinstance", "sama_task_data.SamaTaskData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SamaTaskData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.to_str": [[185, 188], ["pprint.pformat", "sama_task_data.SamaTaskData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.__repr__": [[189, 192], ["sama_task_data.SamaTaskData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.__eq__": [[193, 199], ["isinstance", "sama_task_data.SamaTaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamaTaskData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_task_data.SamaTaskData.__ne__": [[200, 206], ["isinstance", "sama_task_data.SamaTaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamaTaskData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "score_type", "=", "None", ",", "scores", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ActiveLearningScoreCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_score_type", "=", "None", "\n", "self", ".", "_scores", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "score_type", "=", "score_type", "\n", "self", ".", "scores", "=", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.score_type": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "score_type", ".", "setter", "\n", "def", "score_type", "(", "self", ",", "score_type", ")", ":", "\n", "        ", "\"\"\"Sets the score_type of this ActiveLearningScoreCreateRequest.\n\n\n        :param score_type: The score_type of this ActiveLearningScoreCreateRequest.  # noqa: E501\n        :type: ActiveLearningScoreType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "score_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `score_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_score_type", "=", "score_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.scores": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "scores", ".", "setter", "\n", "def", "scores", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Sets the scores of this ActiveLearningScoreCreateRequest.\n\n\n        :param scores: The scores of this ActiveLearningScoreCreateRequest.  # noqa: E501\n        :type: ActiveLearningScores\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "scores", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `scores`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_scores", "=", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "active_learning_score_create_request.ActiveLearningScoreCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ActiveLearningScoreCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.to_str": [[131, 134], ["pprint.pformat", "active_learning_score_create_request.ActiveLearningScoreCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.__repr__": [[135, 138], ["active_learning_score_create_request.ActiveLearningScoreCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.__eq__": [[139, 145], ["isinstance", "active_learning_score_create_request.ActiveLearningScoreCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScoreCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_create_request.ActiveLearningScoreCreateRequest.__ne__": [[146, 152], ["isinstance", "active_learning_score_create_request.ActiveLearningScoreCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScoreCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "configs", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ConfigurationSetRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_configs", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "configs", "=", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.name": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this ConfigurationSetRequest.\n\n\n        :param name: The name of this ConfigurationSetRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.configs": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "configs", ".", "setter", "\n", "def", "configs", "(", "self", ",", "configs", ")", ":", "\n", "        ", "\"\"\"Sets the configs of this ConfigurationSetRequest.\n\n\n        :param configs: The configs of this ConfigurationSetRequest.  # noqa: E501\n        :type: list[ConfigurationEntry]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "configs", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `configs`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_configs", "=", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "configuration_set_request.ConfigurationSetRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ConfigurationSetRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.to_str": [[131, 134], ["pprint.pformat", "configuration_set_request.ConfigurationSetRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.__repr__": [[135, 138], ["configuration_set_request.ConfigurationSetRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.__eq__": [[139, 145], ["isinstance", "configuration_set_request.ConfigurationSetRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationSetRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_set_request.ConfigurationSetRequest.__ne__": [[146, 152], ["isinstance", "configuration_set_request.ConfigurationSetRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationSetRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_state.JobState.__init__": [[50, 56], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"JobState - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_state.JobState.to_dict": [[57, 83], ["six.iteritems", "issubclass", "getattr", "isinstance", "job_state.JobState.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "JobState", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_state.JobState.to_str": [[84, 87], ["pprint.pformat", "job_state.JobState.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_state.JobState.__repr__": [[88, 91], ["job_state.JobState.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_state.JobState.__eq__": [[92, 98], ["isinstance", "job_state.JobState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobState", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_state.JobState.__ne__": [[99, 105], ["isinstance", "job_state.JobState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobState", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.__init__": [[53, 73], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "name", "=", "None", ",", "worker_type", "=", "None", ",", "state", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerWorkerRegistryEntryData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_worker_type", "=", "None", "\n", "self", ".", "_state", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "worker_type", "=", "worker_type", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.id": [[84, 96], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this DockerWorkerRegistryEntryData.\n\n\n        :param id: The id of this DockerWorkerRegistryEntryData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.name": [[107, 119], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this DockerWorkerRegistryEntryData.\n\n\n        :param name: The name of this DockerWorkerRegistryEntryData.  # noqa: E501\n        :type: DockerWorkerName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.worker_type": [[130, 142], ["ValueError"], "methods", ["None"], ["", "@", "worker_type", ".", "setter", "\n", "def", "worker_type", "(", "self", ",", "worker_type", ")", ":", "\n", "        ", "\"\"\"Sets the worker_type of this DockerWorkerRegistryEntryData.\n\n\n        :param worker_type: The worker_type of this DockerWorkerRegistryEntryData.  # noqa: E501\n        :type: DockerWorkerType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "worker_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `worker_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_worker_type", "=", "worker_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.state": [[153, 165], ["ValueError"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Sets the state of this DockerWorkerRegistryEntryData.\n\n\n        :param state: The state of this DockerWorkerRegistryEntryData.  # noqa: E501\n        :type: DockerWorkerState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "state", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `state`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.created_at": [[176, 188], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this DockerWorkerRegistryEntryData.\n\n\n        :param created_at: The created_at of this DockerWorkerRegistryEntryData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.last_modified_at": [[199, 211], ["ValueError"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this DockerWorkerRegistryEntryData.\n\n\n        :param last_modified_at: The last_modified_at of this DockerWorkerRegistryEntryData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "last_modified_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `last_modified_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.to_dict": [[212, 238], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerWorkerRegistryEntryData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.to_str": [[239, 242], ["pprint.pformat", "docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.__repr__": [[243, 246], ["docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.__eq__": [[247, 253], ["isinstance", "docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerRegistryEntryData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.__ne__": [[254, 260], ["isinstance", "docker_worker_registry_entry_data.DockerWorkerRegistryEntryData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerRegistryEntryData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.probabilities.Probabilities.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"Probabilities - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.probabilities.Probabilities.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "probabilities.Probabilities.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "Probabilities", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.probabilities.Probabilities.to_str": [[75, 78], ["pprint.pformat", "probabilities.Probabilities.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.probabilities.Probabilities.__repr__": [[79, 82], ["probabilities.Probabilities.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.probabilities.Probabilities.__eq__": [[83, 89], ["isinstance", "probabilities.Probabilities.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Probabilities", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.probabilities.Probabilities.__ne__": [[90, 96], ["isinstance", "probabilities.Probabilities.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Probabilities", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "segmentation", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionSingletonInstanceSegmentation - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_segmentation", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "segmentation", "=", "segmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.segmentation": [[65, 78], ["ValueError"], "methods", ["None"], ["", "@", "segmentation", ".", "setter", "\n", "def", "segmentation", "(", "self", ",", "segmentation", ")", ":", "\n", "        ", "\"\"\"Sets the segmentation of this PredictionSingletonInstanceSegmentation.\n\n        Run Length Encoding (RLE) as outlined by the coco format https://cocodataset.org/#format-results   # noqa: E501\n\n        :param segmentation: The segmentation of this PredictionSingletonInstanceSegmentation.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "segmentation", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `segmentation`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_segmentation", "=", "segmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.to_dict": [[79, 105], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionSingletonInstanceSegmentation", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.to_str": [[106, 109], ["pprint.pformat", "prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.__repr__": [[110, 113], ["prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.__eq__": [[114, 120], ["isinstance", "prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonInstanceSegmentation", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.__ne__": [[121, 127], ["isinstance", "prediction_singleton_instance_segmentation.PredictionSingletonInstanceSegmentation.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonInstanceSegmentation", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "processed_until_timestamp", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceProcessedUntilTimestampRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_processed_until_timestamp", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "processed_until_timestamp", "=", "processed_until_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.processed_until_timestamp": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "processed_until_timestamp", ".", "setter", "\n", "def", "processed_until_timestamp", "(", "self", ",", "processed_until_timestamp", ")", ":", "\n", "        ", "\"\"\"Sets the processed_until_timestamp of this DatasourceProcessedUntilTimestampRequest.\n\n\n        :param processed_until_timestamp: The processed_until_timestamp of this DatasourceProcessedUntilTimestampRequest.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "processed_until_timestamp", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `processed_until_timestamp`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_processed_until_timestamp", "=", "processed_until_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceProcessedUntilTimestampRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.to_str": [[104, 107], ["pprint.pformat", "datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.__repr__": [[108, 111], ["datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.__eq__": [[112, 118], ["isinstance", "datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceProcessedUntilTimestampRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.__ne__": [[119, 125], ["isinstance", "datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceProcessedUntilTimestampRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_coordinates.Embedding2dCoordinates.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"Embedding2dCoordinates - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_coordinates.Embedding2dCoordinates.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "embedding2d_coordinates.Embedding2dCoordinates.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "Embedding2dCoordinates", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_coordinates.Embedding2dCoordinates.to_str": [[75, 78], ["pprint.pformat", "embedding2d_coordinates.Embedding2dCoordinates.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_coordinates.Embedding2dCoordinates.__repr__": [[79, 82], ["embedding2d_coordinates.Embedding2dCoordinates.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_coordinates.Embedding2dCoordinates.__eq__": [[83, 89], ["isinstance", "embedding2d_coordinates.Embedding2dCoordinates.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Embedding2dCoordinates", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_coordinates.Embedding2dCoordinates.__ne__": [[90, 96], ["isinstance", "embedding2d_coordinates.Embedding2dCoordinates.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Embedding2dCoordinates", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.__init__": [[57, 81], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "embeddings_filename", "=", "None", ",", "embeddings_hash", "=", "None", ",", "method", "=", "None", ",", "existing_selection_column_name", "=", "None", ",", "active_learning_scores_column_name", "=", "None", ",", "masked_out_column_name", "=", "None", ",", "sampling_config", "=", "None", ",", "n_data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerTaskDescription - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_embeddings_filename", "=", "None", "\n", "self", ".", "_embeddings_hash", "=", "None", "\n", "self", ".", "_method", "=", "None", "\n", "self", ".", "_existing_selection_column_name", "=", "None", "\n", "self", ".", "_active_learning_scores_column_name", "=", "None", "\n", "self", ".", "_masked_out_column_name", "=", "None", "\n", "self", ".", "_sampling_config", "=", "None", "\n", "self", ".", "_n_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "embeddings_filename", "=", "embeddings_filename", "\n", "self", ".", "embeddings_hash", "=", "embeddings_hash", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "existing_selection_column_name", "=", "existing_selection_column_name", "\n", "self", ".", "active_learning_scores_column_name", "=", "active_learning_scores_column_name", "\n", "self", ".", "masked_out_column_name", "=", "masked_out_column_name", "\n", "self", ".", "sampling_config", "=", "sampling_config", "\n", "self", ".", "n_data", "=", "n_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.embeddings_filename": [[92, 104], ["ValueError"], "methods", ["None"], ["", "@", "embeddings_filename", ".", "setter", "\n", "def", "embeddings_filename", "(", "self", ",", "embeddings_filename", ")", ":", "\n", "        ", "\"\"\"Sets the embeddings_filename of this DockerTaskDescription.\n\n\n        :param embeddings_filename: The embeddings_filename of this DockerTaskDescription.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "embeddings_filename", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `embeddings_filename`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_embeddings_filename", "=", "embeddings_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.embeddings_hash": [[115, 127], ["ValueError"], "methods", ["None"], ["", "@", "embeddings_hash", ".", "setter", "\n", "def", "embeddings_hash", "(", "self", ",", "embeddings_hash", ")", ":", "\n", "        ", "\"\"\"Sets the embeddings_hash of this DockerTaskDescription.\n\n\n        :param embeddings_hash: The embeddings_hash of this DockerTaskDescription.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "embeddings_hash", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `embeddings_hash`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_embeddings_hash", "=", "embeddings_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.method": [[138, 150], ["ValueError"], "methods", ["None"], ["", "@", "method", ".", "setter", "\n", "def", "method", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"Sets the method of this DockerTaskDescription.\n\n\n        :param method: The method of this DockerTaskDescription.  # noqa: E501\n        :type: SamplingMethod\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "method", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `method`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_method", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.existing_selection_column_name": [[161, 173], ["ValueError"], "methods", ["None"], ["", "@", "existing_selection_column_name", ".", "setter", "\n", "def", "existing_selection_column_name", "(", "self", ",", "existing_selection_column_name", ")", ":", "\n", "        ", "\"\"\"Sets the existing_selection_column_name of this DockerTaskDescription.\n\n\n        :param existing_selection_column_name: The existing_selection_column_name of this DockerTaskDescription.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "existing_selection_column_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `existing_selection_column_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_existing_selection_column_name", "=", "existing_selection_column_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.active_learning_scores_column_name": [[184, 196], ["ValueError"], "methods", ["None"], ["", "@", "active_learning_scores_column_name", ".", "setter", "\n", "def", "active_learning_scores_column_name", "(", "self", ",", "active_learning_scores_column_name", ")", ":", "\n", "        ", "\"\"\"Sets the active_learning_scores_column_name of this DockerTaskDescription.\n\n\n        :param active_learning_scores_column_name: The active_learning_scores_column_name of this DockerTaskDescription.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "active_learning_scores_column_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `active_learning_scores_column_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_active_learning_scores_column_name", "=", "active_learning_scores_column_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.masked_out_column_name": [[207, 219], ["ValueError"], "methods", ["None"], ["", "@", "masked_out_column_name", ".", "setter", "\n", "def", "masked_out_column_name", "(", "self", ",", "masked_out_column_name", ")", ":", "\n", "        ", "\"\"\"Sets the masked_out_column_name of this DockerTaskDescription.\n\n\n        :param masked_out_column_name: The masked_out_column_name of this DockerTaskDescription.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "masked_out_column_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `masked_out_column_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_masked_out_column_name", "=", "masked_out_column_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.sampling_config": [[230, 242], ["ValueError"], "methods", ["None"], ["", "@", "sampling_config", ".", "setter", "\n", "def", "sampling_config", "(", "self", ",", "sampling_config", ")", ":", "\n", "        ", "\"\"\"Sets the sampling_config of this DockerTaskDescription.\n\n\n        :param sampling_config: The sampling_config of this DockerTaskDescription.  # noqa: E501\n        :type: SamplingConfig\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "sampling_config", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `sampling_config`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_sampling_config", "=", "sampling_config", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.n_data": [[254, 267], ["ValueError"], "methods", ["None"], ["", "@", "n_data", ".", "setter", "\n", "def", "n_data", "(", "self", ",", "n_data", ")", ":", "\n", "        ", "\"\"\"Sets the n_data of this DockerTaskDescription.\n\n        the number of samples in the current embeddings file  # noqa: E501\n\n        :param n_data: The n_data of this DockerTaskDescription.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "n_data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `n_data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_n_data", "=", "n_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.to_dict": [[268, 294], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_task_description.DockerTaskDescription.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerTaskDescription", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.to_str": [[295, 298], ["pprint.pformat", "docker_task_description.DockerTaskDescription.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.__repr__": [[299, 302], ["docker_task_description.DockerTaskDescription.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.__eq__": [[303, 309], ["isinstance", "docker_task_description.DockerTaskDescription.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerTaskDescription", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_task_description.DockerTaskDescription.__ne__": [[310, 316], ["isinstance", "docker_task_description.DockerTaskDescription.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerTaskDescription", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.__init__": [[45, 58], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "type", "=", "None", ",", "data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"JobStatusDataResult - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "type", "=", "type", "\n", "if", "data", "is", "not", "None", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.type": [[69, 81], ["ValueError"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this JobStatusDataResult.\n\n\n        :param type: The type of this JobStatusDataResult.  # noqa: E501\n        :type: JobResultType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.data": [[92, 102], ["None"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Sets the data of this JobStatusDataResult.\n\n\n        :param data: The data of this JobStatusDataResult.  # noqa: E501\n        :type: GeneralJobResult\n        \"\"\"", "\n", "\n", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.to_dict": [[103, 129], ["six.iteritems", "issubclass", "getattr", "isinstance", "job_status_data_result.JobStatusDataResult.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "JobStatusDataResult", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.to_str": [[130, 133], ["pprint.pformat", "job_status_data_result.JobStatusDataResult.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.__repr__": [[134, 137], ["job_status_data_result.JobStatusDataResult.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.__eq__": [[138, 144], ["isinstance", "job_status_data_result.JobStatusDataResult.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusDataResult", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data_result.JobStatusDataResult.__ne__": [[145, 151], ["isinstance", "job_status_data_result.JobStatusDataResult.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusDataResult", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.__init__": [[47, 63], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "notification_email", "=", "None", ",", "tasks_file_name", "=", "None", ",", "tasks", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SamaTasks - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_notification_email", "=", "None", "\n", "self", ".", "_tasks_file_name", "=", "None", "\n", "self", ".", "_tasks", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "notification_email", "is", "not", "None", ":", "\n", "            ", "self", ".", "notification_email", "=", "notification_email", "\n", "", "if", "tasks_file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "tasks_file_name", "=", "tasks_file_name", "\n", "", "self", ".", "tasks", "=", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.notification_email": [[74, 84], ["None"], "methods", ["None"], ["", "@", "notification_email", ".", "setter", "\n", "def", "notification_email", "(", "self", ",", "notification_email", ")", ":", "\n", "        ", "\"\"\"Sets the notification_email of this SamaTasks.\n\n\n        :param notification_email: The notification_email of this SamaTasks.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_notification_email", "=", "notification_email", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.tasks_file_name": [[95, 105], ["None"], "methods", ["None"], ["", "@", "tasks_file_name", ".", "setter", "\n", "def", "tasks_file_name", "(", "self", ",", "tasks_file_name", ")", ":", "\n", "        ", "\"\"\"Sets the tasks_file_name of this SamaTasks.\n\n\n        :param tasks_file_name: The tasks_file_name of this SamaTasks.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_tasks_file_name", "=", "tasks_file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.tasks": [[116, 128], ["ValueError"], "methods", ["None"], ["", "@", "tasks", ".", "setter", "\n", "def", "tasks", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "\"\"\"Sets the tasks of this SamaTasks.\n\n\n        :param tasks: The tasks of this SamaTasks.  # noqa: E501\n        :type: list[SamaTask]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "tasks", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `tasks`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_tasks", "=", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.to_dict": [[129, 155], ["six.iteritems", "issubclass", "getattr", "isinstance", "sama_tasks.SamaTasks.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SamaTasks", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.to_str": [[156, 159], ["pprint.pformat", "sama_tasks.SamaTasks.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.__repr__": [[160, 163], ["sama_tasks.SamaTasks.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.__eq__": [[164, 170], ["isinstance", "sama_tasks.SamaTasks.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamaTasks", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sama_tasks.SamaTasks.__ne__": [[171, 177], ["isinstance", "sama_tasks.SamaTasks.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamaTasks", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "has_more", "=", "None", ",", "cursor", "=", "None", ",", "data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceRawSamplesData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_has_more", "=", "None", "\n", "self", ".", "_cursor", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "has_more", "=", "has_more", "\n", "self", ".", "cursor", "=", "cursor", "\n", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.has_more": [[73, 86], ["ValueError"], "methods", ["None"], ["", "@", "has_more", ".", "setter", "\n", "def", "has_more", "(", "self", ",", "has_more", ")", ":", "\n", "        ", "\"\"\"Sets the has_more of this DatasourceRawSamplesData.\n\n        Set to `false` if end of list is reached. Otherwise `true`.  # noqa: E501\n\n        :param has_more: The has_more of this DatasourceRawSamplesData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "has_more", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `has_more`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_has_more", "=", "has_more", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.cursor": [[98, 111], ["ValueError"], "methods", ["None"], ["", "@", "cursor", ".", "setter", "\n", "def", "cursor", "(", "self", ",", "cursor", ")", ":", "\n", "        ", "\"\"\"Sets the cursor of this DatasourceRawSamplesData.\n\n        A cursor that indicates the current position in the list. Must be passed to future requests to continue reading from the same list.   # noqa: E501\n\n        :param cursor: The cursor of this DatasourceRawSamplesData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "cursor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `cursor`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_cursor", "=", "cursor", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.data": [[123, 136], ["ValueError"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Sets the data of this DatasourceRawSamplesData.\n\n        Array containing the sample objects  # noqa: E501\n\n        :param data: The data of this DatasourceRawSamplesData.  # noqa: E501\n        :type: list[DatasourceRawSamplesDataRow]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.to_dict": [[137, 163], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_raw_samples_data.DatasourceRawSamplesData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceRawSamplesData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.to_str": [[164, 167], ["pprint.pformat", "datasource_raw_samples_data.DatasourceRawSamplesData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.__repr__": [[168, 171], ["datasource_raw_samples_data.DatasourceRawSamplesData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.__eq__": [[172, 178], ["isinstance", "datasource_raw_samples_data.DatasourceRawSamplesData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data.DatasourceRawSamplesData.__ne__": [[179, 185], ["isinstance", "datasource_raw_samples_data.DatasourceRawSamplesData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", "=", "None", ",", "read_url", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceRawSamplesPredictionsDataRow - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_file_name", "=", "None", "\n", "self", ".", "_read_url", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "file_name", "=", "file_name", "\n", "self", ".", "read_url", "=", "read_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.file_name": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "file_name", ".", "setter", "\n", "def", "file_name", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Sets the file_name of this DatasourceRawSamplesPredictionsDataRow.\n\n\n        :param file_name: The file_name of this DatasourceRawSamplesPredictionsDataRow.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "file_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `file_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.read_url": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "read_url", ".", "setter", "\n", "def", "read_url", "(", "self", ",", "read_url", ")", ":", "\n", "        ", "\"\"\"Sets the read_url of this DatasourceRawSamplesPredictionsDataRow.\n\n\n        :param read_url: The read_url of this DatasourceRawSamplesPredictionsDataRow.  # noqa: E501\n        :type: ReadUrl\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "read_url", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `read_url`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_read_url", "=", "read_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceRawSamplesPredictionsDataRow", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.to_str": [[131, 134], ["pprint.pformat", "datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.__repr__": [[135, 138], ["datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.__eq__": [[139, 145], ["isinstance", "datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesPredictionsDataRow", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.__ne__": [[146, 152], ["isinstance", "datasource_raw_samples_predictions_data_row.DatasourceRawSamplesPredictionsDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesPredictionsDataRow", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_method.SamplingMethod.__init__": [[49, 55], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SamplingMethod - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_method.SamplingMethod.to_dict": [[56, 82], ["six.iteritems", "issubclass", "getattr", "isinstance", "sampling_method.SamplingMethod.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SamplingMethod", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_method.SamplingMethod.to_str": [[83, 86], ["pprint.pformat", "sampling_method.SamplingMethod.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_method.SamplingMethod.__repr__": [[87, 90], ["sampling_method.SamplingMethod.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_method.SamplingMethod.__eq__": [[91, 97], ["isinstance", "sampling_method.SamplingMethod.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingMethod", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_method.SamplingMethod.__ne__": [[98, 104], ["isinstance", "sampling_method.SamplingMethod.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingMethod", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_name.CategoryName.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"CategoryName - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_name.CategoryName.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "category_name.CategoryName.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "CategoryName", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_name.CategoryName.to_str": [[75, 78], ["pprint.pformat", "category_name.CategoryName.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_name.CategoryName.__repr__": [[79, 82], ["category_name.CategoryName.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_name.CategoryName.__eq__": [[83, 89], ["isinstance", "category_name.CategoryName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CategoryName", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.category_name.CategoryName.__ne__": [[90, 96], ["isinstance", "category_name.CategoryName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CategoryName", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.__init__": [[53, 73], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "parent_id", "=", "None", ",", "prediction_uuid_timestamp", "=", "None", ",", "prediction_index", "=", "None", ",", "prediction_task_name", "=", "None", ",", "prediction_task_category_id", "=", "None", ",", "prediction_task_score", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"CropData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_parent_id", "=", "None", "\n", "self", ".", "_prediction_uuid_timestamp", "=", "None", "\n", "self", ".", "_prediction_index", "=", "None", "\n", "self", ".", "_prediction_task_name", "=", "None", "\n", "self", ".", "_prediction_task_category_id", "=", "None", "\n", "self", ".", "_prediction_task_score", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "parent_id", "=", "parent_id", "\n", "self", ".", "prediction_uuid_timestamp", "=", "prediction_uuid_timestamp", "\n", "self", ".", "prediction_index", "=", "prediction_index", "\n", "self", ".", "prediction_task_name", "=", "prediction_task_name", "\n", "self", ".", "prediction_task_category_id", "=", "prediction_task_category_id", "\n", "self", ".", "prediction_task_score", "=", "prediction_task_score", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.parent_id": [[84, 96], ["ValueError"], "methods", ["None"], ["", "@", "parent_id", ".", "setter", "\n", "def", "parent_id", "(", "self", ",", "parent_id", ")", ":", "\n", "        ", "\"\"\"Sets the parent_id of this CropData.\n\n\n        :param parent_id: The parent_id of this CropData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "parent_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `parent_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_parent_id", "=", "parent_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.prediction_uuid_timestamp": [[107, 119], ["ValueError"], "methods", ["None"], ["", "@", "prediction_uuid_timestamp", ".", "setter", "\n", "def", "prediction_uuid_timestamp", "(", "self", ",", "prediction_uuid_timestamp", ")", ":", "\n", "        ", "\"\"\"Sets the prediction_uuid_timestamp of this CropData.\n\n\n        :param prediction_uuid_timestamp: The prediction_uuid_timestamp of this CropData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "prediction_uuid_timestamp", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `prediction_uuid_timestamp`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_prediction_uuid_timestamp", "=", "prediction_uuid_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.prediction_index": [[131, 144], ["ValueError"], "methods", ["None"], ["", "@", "prediction_index", ".", "setter", "\n", "def", "prediction_index", "(", "self", ",", "prediction_index", ")", ":", "\n", "        ", "\"\"\"Sets the prediction_index of this CropData.\n\n        the index of this crop within all found prediction singletons of a sampleId (the parentId)  # noqa: E501\n\n        :param prediction_index: The prediction_index of this CropData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "prediction_index", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `prediction_index`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_prediction_index", "=", "prediction_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.prediction_task_name": [[155, 167], ["ValueError"], "methods", ["None"], ["", "@", "prediction_task_name", ".", "setter", "\n", "def", "prediction_task_name", "(", "self", ",", "prediction_task_name", ")", ":", "\n", "        ", "\"\"\"Sets the prediction_task_name of this CropData.\n\n\n        :param prediction_task_name: The prediction_task_name of this CropData.  # noqa: E501\n        :type: TaskName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "prediction_task_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `prediction_task_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_prediction_task_name", "=", "prediction_task_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.prediction_task_category_id": [[178, 190], ["ValueError"], "methods", ["None"], ["", "@", "prediction_task_category_id", ".", "setter", "\n", "def", "prediction_task_category_id", "(", "self", ",", "prediction_task_category_id", ")", ":", "\n", "        ", "\"\"\"Sets the prediction_task_category_id of this CropData.\n\n\n        :param prediction_task_category_id: The prediction_task_category_id of this CropData.  # noqa: E501\n        :type: CategoryId\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "prediction_task_category_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `prediction_task_category_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_prediction_task_category_id", "=", "prediction_task_category_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.prediction_task_score": [[201, 213], ["ValueError"], "methods", ["None"], ["", "@", "prediction_task_score", ".", "setter", "\n", "def", "prediction_task_score", "(", "self", ",", "prediction_task_score", ")", ":", "\n", "        ", "\"\"\"Sets the prediction_task_score of this CropData.\n\n\n        :param prediction_task_score: The prediction_task_score of this CropData.  # noqa: E501\n        :type: Score\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "prediction_task_score", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `prediction_task_score`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_prediction_task_score", "=", "prediction_task_score", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.to_dict": [[214, 240], ["six.iteritems", "issubclass", "getattr", "isinstance", "crop_data.CropData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "CropData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.to_str": [[241, 244], ["pprint.pformat", "crop_data.CropData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.__repr__": [[245, 248], ["crop_data.CropData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.__eq__": [[249, 255], ["isinstance", "crop_data.CropData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CropData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.crop_data.CropData.__ne__": [[256, 262], ["isinstance", "crop_data.CropData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CropData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.__init__": [[47, 63], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "creator", "=", "None", ",", "img_type", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"InitialTagCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_creator", "=", "None", "\n", "self", ".", "_img_type", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "", "if", "creator", "is", "not", "None", ":", "\n", "            ", "self", ".", "creator", "=", "creator", "\n", "", "self", ".", "img_type", "=", "img_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.name": [[74, 84], ["None"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this InitialTagCreateRequest.\n\n\n        :param name: The name of this InitialTagCreateRequest.  # noqa: E501\n        :type: TagName\n        \"\"\"", "\n", "\n", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.creator": [[95, 105], ["None"], "methods", ["None"], ["", "@", "creator", ".", "setter", "\n", "def", "creator", "(", "self", ",", "creator", ")", ":", "\n", "        ", "\"\"\"Sets the creator of this InitialTagCreateRequest.\n\n\n        :param creator: The creator of this InitialTagCreateRequest.  # noqa: E501\n        :type: TagCreator\n        \"\"\"", "\n", "\n", "self", ".", "_creator", "=", "creator", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.img_type": [[116, 128], ["ValueError"], "methods", ["None"], ["", "@", "img_type", ".", "setter", "\n", "def", "img_type", "(", "self", ",", "img_type", ")", ":", "\n", "        ", "\"\"\"Sets the img_type of this InitialTagCreateRequest.\n\n\n        :param img_type: The img_type of this InitialTagCreateRequest.  # noqa: E501\n        :type: ImageType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "img_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `img_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_img_type", "=", "img_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.to_dict": [[129, 155], ["six.iteritems", "issubclass", "getattr", "isinstance", "initial_tag_create_request.InitialTagCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "InitialTagCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.to_str": [[156, 159], ["pprint.pformat", "initial_tag_create_request.InitialTagCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.__repr__": [[160, 163], ["initial_tag_create_request.InitialTagCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.__eq__": [[164, 170], ["isinstance", "initial_tag_create_request.InitialTagCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "InitialTagCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.initial_tag_create_request.InitialTagCreateRequest.__ne__": [[171, 177], ["isinstance", "initial_tag_create_request.InitialTagCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "InitialTagCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "license_type", "=", "None", ",", "license_expiration_date", "=", "None", ",", "license_is_valid", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerLicenseInformation - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_license_type", "=", "None", "\n", "self", ".", "_license_expiration_date", "=", "None", "\n", "self", ".", "_license_is_valid", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "license_type", "=", "license_type", "\n", "self", ".", "license_expiration_date", "=", "license_expiration_date", "\n", "self", ".", "license_is_valid", "=", "license_is_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.license_type": [[72, 84], ["ValueError"], "methods", ["None"], ["", "@", "license_type", ".", "setter", "\n", "def", "license_type", "(", "self", ",", "license_type", ")", ":", "\n", "        ", "\"\"\"Sets the license_type of this DockerLicenseInformation.\n\n\n        :param license_type: The license_type of this DockerLicenseInformation.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "license_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `license_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_license_type", "=", "license_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.license_expiration_date": [[95, 107], ["ValueError"], "methods", ["None"], ["", "@", "license_expiration_date", ".", "setter", "\n", "def", "license_expiration_date", "(", "self", ",", "license_expiration_date", ")", ":", "\n", "        ", "\"\"\"Sets the license_expiration_date of this DockerLicenseInformation.\n\n\n        :param license_expiration_date: The license_expiration_date of this DockerLicenseInformation.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "license_expiration_date", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `license_expiration_date`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_license_expiration_date", "=", "license_expiration_date", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.license_is_valid": [[118, 130], ["ValueError"], "methods", ["None"], ["", "@", "license_is_valid", ".", "setter", "\n", "def", "license_is_valid", "(", "self", ",", "license_is_valid", ")", ":", "\n", "        ", "\"\"\"Sets the license_is_valid of this DockerLicenseInformation.\n\n\n        :param license_is_valid: The license_is_valid of this DockerLicenseInformation.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "license_is_valid", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `license_is_valid`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_license_is_valid", "=", "license_is_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.to_dict": [[131, 157], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_license_information.DockerLicenseInformation.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerLicenseInformation", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.to_str": [[158, 161], ["pprint.pformat", "docker_license_information.DockerLicenseInformation.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.__repr__": [[162, 165], ["docker_license_information.DockerLicenseInformation.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.__eq__": [[166, 172], ["isinstance", "docker_license_information.DockerLicenseInformation.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerLicenseInformation", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_license_information.DockerLicenseInformation.__ne__": [[173, 179], ["isinstance", "docker_license_information.DockerLicenseInformation.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerLicenseInformation", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.__init__": [[51, 69], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "tag_id", "=", "None", ",", "score_type", "=", "None", ",", "scores", "=", "None", ",", "created_at", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ActiveLearningScoreData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_tag_id", "=", "None", "\n", "self", ".", "_score_type", "=", "None", "\n", "self", ".", "_scores", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "tag_id", "=", "tag_id", "\n", "self", ".", "score_type", "=", "score_type", "\n", "self", ".", "scores", "=", "scores", "\n", "self", ".", "created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.id": [[80, 92], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this ActiveLearningScoreData.\n\n\n        :param id: The id of this ActiveLearningScoreData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.tag_id": [[103, 115], ["ValueError"], "methods", ["None"], ["", "@", "tag_id", ".", "setter", "\n", "def", "tag_id", "(", "self", ",", "tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the tag_id of this ActiveLearningScoreData.\n\n\n        :param tag_id: The tag_id of this ActiveLearningScoreData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "tag_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `tag_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_tag_id", "=", "tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.score_type": [[126, 138], ["ValueError"], "methods", ["None"], ["", "@", "score_type", ".", "setter", "\n", "def", "score_type", "(", "self", ",", "score_type", ")", ":", "\n", "        ", "\"\"\"Sets the score_type of this ActiveLearningScoreData.\n\n\n        :param score_type: The score_type of this ActiveLearningScoreData.  # noqa: E501\n        :type: ActiveLearningScoreType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "score_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `score_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_score_type", "=", "score_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.scores": [[149, 161], ["ValueError"], "methods", ["None"], ["", "@", "scores", ".", "setter", "\n", "def", "scores", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Sets the scores of this ActiveLearningScoreData.\n\n\n        :param scores: The scores of this ActiveLearningScoreData.  # noqa: E501\n        :type: ActiveLearningScores\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "scores", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `scores`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_scores", "=", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.created_at": [[172, 184], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this ActiveLearningScoreData.\n\n\n        :param created_at: The created_at of this ActiveLearningScoreData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.to_dict": [[185, 211], ["six.iteritems", "issubclass", "getattr", "isinstance", "active_learning_score_data.ActiveLearningScoreData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ActiveLearningScoreData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.to_str": [[212, 215], ["pprint.pformat", "active_learning_score_data.ActiveLearningScoreData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.__repr__": [[216, 219], ["active_learning_score_data.ActiveLearningScoreData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.__eq__": [[220, 226], ["isinstance", "active_learning_score_data.ActiveLearningScoreData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScoreData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_score_data.ActiveLearningScoreData.__ne__": [[227, 233], ["isinstance", "active_learning_score_data.ActiveLearningScoreData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScoreData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.__init__": [[61, 95], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "dataset_id", "=", "None", ",", "status", "=", "None", ",", "meta", "=", "None", ",", "wait_time_till_next_poll", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "finished_at", "=", "None", ",", "error", "=", "None", ",", "result", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"JobStatusData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_status", "=", "None", "\n", "self", ".", "_meta", "=", "None", "\n", "self", ".", "_wait_time_till_next_poll", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "_finished_at", "=", "None", "\n", "self", ".", "_error", "=", "None", "\n", "self", ".", "_result", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "if", "dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_id", "=", "dataset_id", "\n", "", "self", ".", "status", "=", "status", "\n", "if", "meta", "is", "not", "None", ":", "\n", "            ", "self", ".", "meta", "=", "meta", "\n", "", "self", ".", "wait_time_till_next_poll", "=", "wait_time_till_next_poll", "\n", "self", ".", "created_at", "=", "created_at", "\n", "if", "last_modified_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "", "if", "finished_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "finished_at", "=", "finished_at", "\n", "", "if", "error", "is", "not", "None", ":", "\n", "            ", "self", ".", "error", "=", "error", "\n", "", "if", "result", "is", "not", "None", ":", "\n", "            ", "self", ".", "result", "=", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.id": [[106, 118], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this JobStatusData.\n\n\n        :param id: The id of this JobStatusData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.dataset_id": [[129, 139], ["None"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this JobStatusData.\n\n\n        :param dataset_id: The dataset_id of this JobStatusData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.status": [[150, 162], ["ValueError"], "methods", ["None"], ["", "@", "status", ".", "setter", "\n", "def", "status", "(", "self", ",", "status", ")", ":", "\n", "        ", "\"\"\"Sets the status of this JobStatusData.\n\n\n        :param status: The status of this JobStatusData.  # noqa: E501\n        :type: JobState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "status", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `status`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_status", "=", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.meta": [[173, 183], ["None"], "methods", ["None"], ["", "@", "meta", ".", "setter", "\n", "def", "meta", "(", "self", ",", "meta", ")", ":", "\n", "        ", "\"\"\"Sets the meta of this JobStatusData.\n\n\n        :param meta: The meta of this JobStatusData.  # noqa: E501\n        :type: JobStatusMeta\n        \"\"\"", "\n", "\n", "self", ".", "_meta", "=", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.wait_time_till_next_poll": [[195, 208], ["ValueError"], "methods", ["None"], ["", "@", "wait_time_till_next_poll", ".", "setter", "\n", "def", "wait_time_till_next_poll", "(", "self", ",", "wait_time_till_next_poll", ")", ":", "\n", "        ", "\"\"\"Sets the wait_time_till_next_poll of this JobStatusData.\n\n        The time in seconds the client should wait before doing the next poll.  # noqa: E501\n\n        :param wait_time_till_next_poll: The wait_time_till_next_poll of this JobStatusData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "wait_time_till_next_poll", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `wait_time_till_next_poll`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_wait_time_till_next_poll", "=", "wait_time_till_next_poll", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.created_at": [[219, 231], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this JobStatusData.\n\n\n        :param created_at: The created_at of this JobStatusData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.last_modified_at": [[242, 252], ["None"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this JobStatusData.\n\n\n        :param last_modified_at: The last_modified_at of this JobStatusData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.finished_at": [[263, 273], ["None"], "methods", ["None"], ["", "@", "finished_at", ".", "setter", "\n", "def", "finished_at", "(", "self", ",", "finished_at", ")", ":", "\n", "        ", "\"\"\"Sets the finished_at of this JobStatusData.\n\n\n        :param finished_at: The finished_at of this JobStatusData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_finished_at", "=", "finished_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.error": [[284, 294], ["None"], "methods", ["None"], ["", "@", "error", ".", "setter", "\n", "def", "error", "(", "self", ",", "error", ")", ":", "\n", "        ", "\"\"\"Sets the error of this JobStatusData.\n\n\n        :param error: The error of this JobStatusData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_error", "=", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.result": [[305, 315], ["None"], "methods", ["None"], ["", "@", "result", ".", "setter", "\n", "def", "result", "(", "self", ",", "result", ")", ":", "\n", "        ", "\"\"\"Sets the result of this JobStatusData.\n\n\n        :param result: The result of this JobStatusData.  # noqa: E501\n        :type: JobStatusDataResult\n        \"\"\"", "\n", "\n", "self", ".", "_result", "=", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.to_dict": [[316, 342], ["six.iteritems", "issubclass", "getattr", "isinstance", "job_status_data.JobStatusData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "JobStatusData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.to_str": [[343, 346], ["pprint.pformat", "job_status_data.JobStatusData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.__repr__": [[347, 350], ["job_status_data.JobStatusData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.__eq__": [[351, 357], ["isinstance", "job_status_data.JobStatusData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.__ne__": [[358, 364], ["isinstance", "job_status_data.JobStatusData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_operation.TagArithmeticsOperation.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagArithmeticsOperation - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_operation.TagArithmeticsOperation.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_arithmetics_operation.TagArithmeticsOperation.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagArithmeticsOperation", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_operation.TagArithmeticsOperation.to_str": [[82, 85], ["pprint.pformat", "tag_arithmetics_operation.TagArithmeticsOperation.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_operation.TagArithmeticsOperation.__repr__": [[86, 89], ["tag_arithmetics_operation.TagArithmeticsOperation.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_operation.TagArithmeticsOperation.__eq__": [[90, 96], ["isinstance", "tag_arithmetics_operation.TagArithmeticsOperation.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagArithmeticsOperation", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_operation.TagArithmeticsOperation.__ne__": [[97, 103], ["isinstance", "tag_arithmetics_operation.TagArithmeticsOperation.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagArithmeticsOperation", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_response.TagArithmeticsResponse.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagArithmeticsResponse - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_response.TagArithmeticsResponse.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_arithmetics_response.TagArithmeticsResponse.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagArithmeticsResponse", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_response.TagArithmeticsResponse.to_str": [[75, 78], ["pprint.pformat", "tag_arithmetics_response.TagArithmeticsResponse.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_response.TagArithmeticsResponse.__repr__": [[79, 82], ["tag_arithmetics_response.TagArithmeticsResponse.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_response.TagArithmeticsResponse.__eq__": [[83, 89], ["isinstance", "tag_arithmetics_response.TagArithmeticsResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagArithmeticsResponse", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_response.TagArithmeticsResponse.__ne__": [[90, 96], ["isinstance", "tag_arithmetics_response.TagArithmeticsResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagArithmeticsResponse", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_update_request.TagUpdateRequest.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagUpdateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_update_request.TagUpdateRequest.name": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this TagUpdateRequest.\n\n\n        :param name: The name of this TagUpdateRequest.  # noqa: E501\n        :type: TagName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_update_request.TagUpdateRequest.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_update_request.TagUpdateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagUpdateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_update_request.TagUpdateRequest.to_str": [[104, 107], ["pprint.pformat", "tag_update_request.TagUpdateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_update_request.TagUpdateRequest.__repr__": [[108, 111], ["tag_update_request.TagUpdateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_update_request.TagUpdateRequest.__eq__": [[112, 118], ["isinstance", "tag_update_request.TagUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagUpdateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_update_request.TagUpdateRequest.__ne__": [[119, 125], ["isinstance", "tag_update_request.TagUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagUpdateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_filenames_data.TagFilenamesData.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagFilenamesData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_filenames_data.TagFilenamesData.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_filenames_data.TagFilenamesData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagFilenamesData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_filenames_data.TagFilenamesData.to_str": [[75, 78], ["pprint.pformat", "tag_filenames_data.TagFilenamesData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_filenames_data.TagFilenamesData.__repr__": [[79, 82], ["tag_filenames_data.TagFilenamesData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_filenames_data.TagFilenamesData.__eq__": [[83, 89], ["isinstance", "tag_filenames_data.TagFilenamesData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagFilenamesData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_filenames_data.TagFilenamesData.__ne__": [[90, 96], ["isinstance", "tag_filenames_data.TagFilenamesData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagFilenamesData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerWorkerConfigCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_config", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest.config": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "config", ".", "setter", "\n", "def", "config", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"Sets the config of this DockerWorkerConfigCreateRequest.\n\n\n        :param config: The config of this DockerWorkerConfigCreateRequest.  # noqa: E501\n        :type: DockerWorkerConfig\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "config", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `config`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_worker_config_create_request.DockerWorkerConfigCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerWorkerConfigCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest.to_str": [[104, 107], ["pprint.pformat", "docker_worker_config_create_request.DockerWorkerConfigCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest.__repr__": [[108, 111], ["docker_worker_config_create_request.DockerWorkerConfigCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest.__eq__": [[112, 118], ["isinstance", "docker_worker_config_create_request.DockerWorkerConfigCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerConfigCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest.__ne__": [[119, 125], ["isinstance", "docker_worker_config_create_request.DockerWorkerConfigCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerConfigCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.__init__": [[55, 83], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", "=", "None", ",", "thumb_name", "=", "None", ",", "exif", "=", "None", ",", "meta_data", "=", "None", ",", "custom_meta_data", "=", "None", ",", "video_frame_data", "=", "None", ",", "crop_data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SampleCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_file_name", "=", "None", "\n", "self", ".", "_thumb_name", "=", "None", "\n", "self", ".", "_exif", "=", "None", "\n", "self", ".", "_meta_data", "=", "None", "\n", "self", ".", "_custom_meta_data", "=", "None", "\n", "self", ".", "_video_frame_data", "=", "None", "\n", "self", ".", "_crop_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "file_name", "=", "file_name", "\n", "if", "thumb_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "thumb_name", "=", "thumb_name", "\n", "", "if", "exif", "is", "not", "None", ":", "\n", "            ", "self", ".", "exif", "=", "exif", "\n", "", "if", "meta_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "meta_data", "=", "meta_data", "\n", "", "if", "custom_meta_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "custom_meta_data", "=", "custom_meta_data", "\n", "", "if", "video_frame_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "video_frame_data", "=", "video_frame_data", "\n", "", "if", "crop_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "crop_data", "=", "crop_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.file_name": [[94, 106], ["ValueError"], "methods", ["None"], ["", "@", "file_name", ".", "setter", "\n", "def", "file_name", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Sets the file_name of this SampleCreateRequest.\n\n\n        :param file_name: The file_name of this SampleCreateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "file_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `file_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.thumb_name": [[117, 127], ["None"], "methods", ["None"], ["", "@", "thumb_name", ".", "setter", "\n", "def", "thumb_name", "(", "self", ",", "thumb_name", ")", ":", "\n", "        ", "\"\"\"Sets the thumb_name of this SampleCreateRequest.\n\n\n        :param thumb_name: The thumb_name of this SampleCreateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_thumb_name", "=", "thumb_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.exif": [[138, 148], ["None"], "methods", ["None"], ["", "@", "exif", ".", "setter", "\n", "def", "exif", "(", "self", ",", "exif", ")", ":", "\n", "        ", "\"\"\"Sets the exif of this SampleCreateRequest.\n\n\n        :param exif: The exif of this SampleCreateRequest.  # noqa: E501\n        :type: dict(str, object)\n        \"\"\"", "\n", "\n", "self", ".", "_exif", "=", "exif", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.meta_data": [[159, 169], ["None"], "methods", ["None"], ["", "@", "meta_data", ".", "setter", "\n", "def", "meta_data", "(", "self", ",", "meta_data", ")", ":", "\n", "        ", "\"\"\"Sets the meta_data of this SampleCreateRequest.\n\n\n        :param meta_data: The meta_data of this SampleCreateRequest.  # noqa: E501\n        :type: SampleMetaData\n        \"\"\"", "\n", "\n", "self", ".", "_meta_data", "=", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.custom_meta_data": [[180, 190], ["None"], "methods", ["None"], ["", "@", "custom_meta_data", ".", "setter", "\n", "def", "custom_meta_data", "(", "self", ",", "custom_meta_data", ")", ":", "\n", "        ", "\"\"\"Sets the custom_meta_data of this SampleCreateRequest.\n\n\n        :param custom_meta_data: The custom_meta_data of this SampleCreateRequest.  # noqa: E501\n        :type: CustomSampleMetaData\n        \"\"\"", "\n", "\n", "self", ".", "_custom_meta_data", "=", "custom_meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.video_frame_data": [[201, 211], ["None"], "methods", ["None"], ["", "@", "video_frame_data", ".", "setter", "\n", "def", "video_frame_data", "(", "self", ",", "video_frame_data", ")", ":", "\n", "        ", "\"\"\"Sets the video_frame_data of this SampleCreateRequest.\n\n\n        :param video_frame_data: The video_frame_data of this SampleCreateRequest.  # noqa: E501\n        :type: VideoFrameData\n        \"\"\"", "\n", "\n", "self", ".", "_video_frame_data", "=", "video_frame_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.crop_data": [[222, 232], ["None"], "methods", ["None"], ["", "@", "crop_data", ".", "setter", "\n", "def", "crop_data", "(", "self", ",", "crop_data", ")", ":", "\n", "        ", "\"\"\"Sets the crop_data of this SampleCreateRequest.\n\n\n        :param crop_data: The crop_data of this SampleCreateRequest.  # noqa: E501\n        :type: CropData\n        \"\"\"", "\n", "\n", "self", ".", "_crop_data", "=", "crop_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.to_dict": [[233, 259], ["six.iteritems", "issubclass", "getattr", "isinstance", "sample_create_request.SampleCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SampleCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.to_str": [[260, 263], ["pprint.pformat", "sample_create_request.SampleCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.__repr__": [[264, 267], ["sample_create_request.SampleCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.__eq__": [[268, 274], ["isinstance", "sample_create_request.SampleCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_create_request.SampleCreateRequest.__ne__": [[275, 281], ["isinstance", "sample_create_request.SampleCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_local.DatasourceConfigLOCAL.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigLOCAL - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_local.DatasourceConfigLOCAL.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_local.DatasourceConfigLOCAL.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigLOCAL", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_local.DatasourceConfigLOCAL.to_str": [[75, 78], ["pprint.pformat", "datasource_config_local.DatasourceConfigLOCAL.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_local.DatasourceConfigLOCAL.__repr__": [[79, 82], ["datasource_config_local.DatasourceConfigLOCAL.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_local.DatasourceConfigLOCAL.__eq__": [[83, 89], ["isinstance", "datasource_config_local.DatasourceConfigLOCAL.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigLOCAL", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_local.DatasourceConfigLOCAL.__ne__": [[90, 96], ["isinstance", "datasource_config_local.DatasourceConfigLOCAL.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigLOCAL", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.__init__": [[58, 75], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "purpose", "=", "None", ",", "type", "=", "None", ",", "full_path", "=", "None", ",", "thumb_suffix", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigBase - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_purpose", "=", "None", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_full_path", "=", "None", "\n", "self", ".", "_thumb_suffix", "=", "None", "\n", "self", ".", "discriminator", "=", "'Discriminator{propertyName&#x3D;&#39;type&#39;, mapping&#x3D;null}'", "\n", "\n", "self", ".", "purpose", "=", "purpose", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "full_path", "=", "full_path", "\n", "if", "thumb_suffix", "is", "not", "None", ":", "\n", "            ", "self", ".", "thumb_suffix", "=", "thumb_suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.purpose": [[86, 98], ["ValueError"], "methods", ["None"], ["", "@", "purpose", ".", "setter", "\n", "def", "purpose", "(", "self", ",", "purpose", ")", ":", "\n", "        ", "\"\"\"Sets the purpose of this DatasourceConfigBase.\n\n\n        :param purpose: The purpose of this DatasourceConfigBase.  # noqa: E501\n        :type: DatasourcePurpose\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "purpose", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `purpose`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_purpose", "=", "purpose", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.type": [[109, 121], ["ValueError"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this DatasourceConfigBase.\n\n\n        :param type: The type of this DatasourceConfigBase.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.full_path": [[133, 146], ["ValueError"], "methods", ["None"], ["", "@", "full_path", ".", "setter", "\n", "def", "full_path", "(", "self", ",", "full_path", ")", ":", "\n", "        ", "\"\"\"Sets the full_path of this DatasourceConfigBase.\n\n        path includes the bucket name and the path within the bucket where you have stored your information  # noqa: E501\n\n        :param full_path: The full_path of this DatasourceConfigBase.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "full_path", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `full_path`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_full_path", "=", "full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.thumb_suffix": [[158, 169], ["None"], "methods", ["None"], ["", "@", "thumb_suffix", ".", "setter", "\n", "def", "thumb_suffix", "(", "self", ",", "thumb_suffix", ")", ":", "\n", "        ", "\"\"\"Sets the thumb_suffix of this DatasourceConfigBase.\n\n        the suffix of where to find the thumbnail image. If none is provided, the full image will be loaded where thumbnails would be loaded otherwise. - [filename]: represents the filename without the extension - [extension]: represents the files extension (e.g jpg, png, webp)   # noqa: E501\n\n        :param thumb_suffix: The thumb_suffix of this DatasourceConfigBase.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_thumb_suffix", "=", "thumb_suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.get_real_child_model": [[170, 174], ["data[].lower", "datasource_config_base.DatasourceConfigBase.discriminator_value_class_map.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "def", "get_real_child_model", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Returns the real base class specified by the discriminator\"\"\"", "\n", "discriminator_value", "=", "data", "[", "self", ".", "discriminator", "]", ".", "lower", "(", ")", "\n", "return", "self", ".", "discriminator_value_class_map", ".", "get", "(", "discriminator_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.to_dict": [[175, 201], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_base.DatasourceConfigBase.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigBase", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.to_str": [[202, 205], ["pprint.pformat", "datasource_config_base.DatasourceConfigBase.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.__repr__": [[206, 209], ["datasource_config_base.DatasourceConfigBase.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.__eq__": [[210, 216], ["isinstance", "datasource_config_base.DatasourceConfigBase.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigBase", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_base.DatasourceConfigBase.__ne__": [[217, 223], ["isinstance", "datasource_config_base.DatasourceConfigBase.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigBase", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.__init__": [[45, 58], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bbox", "=", "None", ",", "probabilities", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionSingletonObjectDetection - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_bbox", "=", "None", "\n", "self", ".", "_probabilities", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "bbox", "=", "bbox", "\n", "if", "probabilities", "is", "not", "None", ":", "\n", "            ", "self", ".", "probabilities", "=", "probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.bbox": [[70, 83], ["ValueError"], "methods", ["None"], ["", "@", "bbox", ".", "setter", "\n", "def", "bbox", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"Sets the bbox of this PredictionSingletonObjectDetection.\n\n        The bbox of where a prediction task yielded a finding. [x, y, width, height]  # noqa: E501\n\n        :param bbox: The bbox of this PredictionSingletonObjectDetection.  # noqa: E501\n        :type: list[int]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "bbox", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `bbox`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_bbox", "=", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.probabilities": [[94, 104], ["None"], "methods", ["None"], ["", "@", "probabilities", ".", "setter", "\n", "def", "probabilities", "(", "self", ",", "probabilities", ")", ":", "\n", "        ", "\"\"\"Sets the probabilities of this PredictionSingletonObjectDetection.\n\n\n        :param probabilities: The probabilities of this PredictionSingletonObjectDetection.  # noqa: E501\n        :type: Probabilities\n        \"\"\"", "\n", "\n", "self", ".", "_probabilities", "=", "probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.to_dict": [[105, 131], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_singleton_object_detection.PredictionSingletonObjectDetection.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionSingletonObjectDetection", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.to_str": [[132, 135], ["pprint.pformat", "prediction_singleton_object_detection.PredictionSingletonObjectDetection.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.__repr__": [[136, 139], ["prediction_singleton_object_detection.PredictionSingletonObjectDetection.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.__eq__": [[140, 146], ["isinstance", "prediction_singleton_object_detection.PredictionSingletonObjectDetection.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonObjectDetection", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_object_detection.PredictionSingletonObjectDetection.__ne__": [[147, 153], ["isinstance", "prediction_singleton_object_detection.PredictionSingletonObjectDetection.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonObjectDetection", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gcs_project_id", "=", "None", ",", "gcs_credentials", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigGCS - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_gcs_project_id", "=", "None", "\n", "self", ".", "_gcs_credentials", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "gcs_project_id", "=", "gcs_project_id", "\n", "self", ".", "gcs_credentials", "=", "gcs_credentials", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.gcs_project_id": [[69, 82], ["ValueError"], "methods", ["None"], ["", "@", "gcs_project_id", ".", "setter", "\n", "def", "gcs_project_id", "(", "self", ",", "gcs_project_id", ")", ":", "\n", "        ", "\"\"\"Sets the gcs_project_id of this DatasourceConfigGCS.\n\n        the projectId where you have your bucket configured  # noqa: E501\n\n        :param gcs_project_id: The gcs_project_id of this DatasourceConfigGCS.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "gcs_project_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `gcs_project_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_gcs_project_id", "=", "gcs_project_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.gcs_credentials": [[94, 107], ["ValueError"], "methods", ["None"], ["", "@", "gcs_credentials", ".", "setter", "\n", "def", "gcs_credentials", "(", "self", ",", "gcs_credentials", ")", ":", "\n", "        ", "\"\"\"Sets the gcs_credentials of this DatasourceConfigGCS.\n\n        this is the content of the credentials JSON file stringified which you downloaded from Google Cloud Platform  # noqa: E501\n\n        :param gcs_credentials: The gcs_credentials of this DatasourceConfigGCS.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "gcs_credentials", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `gcs_credentials`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_gcs_credentials", "=", "gcs_credentials", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.to_dict": [[108, 134], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_gcs.DatasourceConfigGCS.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigGCS", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.to_str": [[135, 138], ["pprint.pformat", "datasource_config_gcs.DatasourceConfigGCS.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.__repr__": [[139, 142], ["datasource_config_gcs.DatasourceConfigGCS.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.__eq__": [[143, 149], ["isinstance", "datasource_config_gcs.DatasourceConfigGCS.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigGCS", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_gcs.DatasourceConfigGCS.__ne__": [[150, 156], ["isinstance", "datasource_config_gcs.DatasourceConfigGCS.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigGCS", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.__init__": [[51, 74], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", "=", "None", ",", "thumb_name", "=", "None", ",", "exif", "=", "None", ",", "meta_data", "=", "None", ",", "custom_meta_data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SampleUpdateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_file_name", "=", "None", "\n", "self", ".", "_thumb_name", "=", "None", "\n", "self", ".", "_exif", "=", "None", "\n", "self", ".", "_meta_data", "=", "None", "\n", "self", ".", "_custom_meta_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "file_name", "=", "file_name", "\n", "", "if", "thumb_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "thumb_name", "=", "thumb_name", "\n", "", "if", "exif", "is", "not", "None", ":", "\n", "            ", "self", ".", "exif", "=", "exif", "\n", "", "if", "meta_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "meta_data", "=", "meta_data", "\n", "", "if", "custom_meta_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "custom_meta_data", "=", "custom_meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.file_name": [[85, 95], ["None"], "methods", ["None"], ["", "@", "file_name", ".", "setter", "\n", "def", "file_name", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Sets the file_name of this SampleUpdateRequest.\n\n\n        :param file_name: The file_name of this SampleUpdateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.thumb_name": [[106, 116], ["None"], "methods", ["None"], ["", "@", "thumb_name", ".", "setter", "\n", "def", "thumb_name", "(", "self", ",", "thumb_name", ")", ":", "\n", "        ", "\"\"\"Sets the thumb_name of this SampleUpdateRequest.\n\n\n        :param thumb_name: The thumb_name of this SampleUpdateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_thumb_name", "=", "thumb_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.exif": [[127, 137], ["None"], "methods", ["None"], ["", "@", "exif", ".", "setter", "\n", "def", "exif", "(", "self", ",", "exif", ")", ":", "\n", "        ", "\"\"\"Sets the exif of this SampleUpdateRequest.\n\n\n        :param exif: The exif of this SampleUpdateRequest.  # noqa: E501\n        :type: dict(str, object)\n        \"\"\"", "\n", "\n", "self", ".", "_exif", "=", "exif", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.meta_data": [[148, 158], ["None"], "methods", ["None"], ["", "@", "meta_data", ".", "setter", "\n", "def", "meta_data", "(", "self", ",", "meta_data", ")", ":", "\n", "        ", "\"\"\"Sets the meta_data of this SampleUpdateRequest.\n\n\n        :param meta_data: The meta_data of this SampleUpdateRequest.  # noqa: E501\n        :type: SampleMetaData\n        \"\"\"", "\n", "\n", "self", ".", "_meta_data", "=", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.custom_meta_data": [[169, 179], ["None"], "methods", ["None"], ["", "@", "custom_meta_data", ".", "setter", "\n", "def", "custom_meta_data", "(", "self", ",", "custom_meta_data", ")", ":", "\n", "        ", "\"\"\"Sets the custom_meta_data of this SampleUpdateRequest.\n\n\n        :param custom_meta_data: The custom_meta_data of this SampleUpdateRequest.  # noqa: E501\n        :type: CustomSampleMetaData\n        \"\"\"", "\n", "\n", "self", ".", "_custom_meta_data", "=", "custom_meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.to_dict": [[180, 206], ["six.iteritems", "issubclass", "getattr", "isinstance", "sample_update_request.SampleUpdateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SampleUpdateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.to_str": [[207, 210], ["pprint.pformat", "sample_update_request.SampleUpdateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.__repr__": [[211, 214], ["sample_update_request.SampleUpdateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.__eq__": [[215, 221], ["isinstance", "sample_update_request.SampleUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleUpdateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_update_request.SampleUpdateRequest.__ne__": [[222, 228], ["isinstance", "sample_update_request.SampleUpdateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleUpdateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_entity_response.CreateEntityResponse.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"CreateEntityResponse - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_entity_response.CreateEntityResponse.id": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this CreateEntityResponse.\n\n\n        :param id: The id of this CreateEntityResponse.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_entity_response.CreateEntityResponse.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "create_entity_response.CreateEntityResponse.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "CreateEntityResponse", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_entity_response.CreateEntityResponse.to_str": [[104, 107], ["pprint.pformat", "create_entity_response.CreateEntityResponse.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_entity_response.CreateEntityResponse.__repr__": [[108, 111], ["create_entity_response.CreateEntityResponse.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_entity_response.CreateEntityResponse.__eq__": [[112, 118], ["isinstance", "create_entity_response.CreateEntityResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CreateEntityResponse", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.create_entity_response.CreateEntityResponse.__ne__": [[119, 125], ["isinstance", "create_entity_response.CreateEntityResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "CreateEntityResponse", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", "=", "None", ",", "read_url", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceRawSamplesMetadataDataRow - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_file_name", "=", "None", "\n", "self", ".", "_read_url", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "file_name", "=", "file_name", "\n", "self", ".", "read_url", "=", "read_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.file_name": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "file_name", ".", "setter", "\n", "def", "file_name", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Sets the file_name of this DatasourceRawSamplesMetadataDataRow.\n\n\n        :param file_name: The file_name of this DatasourceRawSamplesMetadataDataRow.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "file_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `file_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.read_url": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "read_url", ".", "setter", "\n", "def", "read_url", "(", "self", ",", "read_url", ")", ":", "\n", "        ", "\"\"\"Sets the read_url of this DatasourceRawSamplesMetadataDataRow.\n\n\n        :param read_url: The read_url of this DatasourceRawSamplesMetadataDataRow.  # noqa: E501\n        :type: ReadUrl\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "read_url", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `read_url`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_read_url", "=", "read_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceRawSamplesMetadataDataRow", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.to_str": [[131, 134], ["pprint.pformat", "datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.__repr__": [[135, 138], ["datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.__eq__": [[139, 145], ["isinstance", "datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesMetadataDataRow", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.__ne__": [[146, 152], ["isinstance", "datasource_raw_samples_metadata_data_row.DatasourceRawSamplesMetadataDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesMetadataDataRow", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.__init__": [[55, 79], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "job_id", "=", "None", ",", "job_type", "=", "None", ",", "dataset_id", "=", "None", ",", "status", "=", "None", ",", "finished_at", "=", "None", ",", "created_at", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"JobsData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_job_id", "=", "None", "\n", "self", ".", "_job_type", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_status", "=", "None", "\n", "self", ".", "_finished_at", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "job_id", "=", "job_id", "\n", "self", ".", "job_type", "=", "job_type", "\n", "if", "dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_id", "=", "dataset_id", "\n", "", "self", ".", "status", "=", "status", "\n", "if", "finished_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "finished_at", "=", "finished_at", "\n", "", "self", ".", "created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.id": [[90, 102], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this JobsData.\n\n\n        :param id: The id of this JobsData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.job_id": [[113, 125], ["ValueError"], "methods", ["None"], ["", "@", "job_id", ".", "setter", "\n", "def", "job_id", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "\"\"\"Sets the job_id of this JobsData.\n\n\n        :param job_id: The job_id of this JobsData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "job_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `job_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_job_id", "=", "job_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.job_type": [[136, 148], ["ValueError"], "methods", ["None"], ["", "@", "job_type", ".", "setter", "\n", "def", "job_type", "(", "self", ",", "job_type", ")", ":", "\n", "        ", "\"\"\"Sets the job_type of this JobsData.\n\n\n        :param job_type: The job_type of this JobsData.  # noqa: E501\n        :type: JobResultType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "job_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `job_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_job_type", "=", "job_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.dataset_id": [[159, 169], ["None"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this JobsData.\n\n\n        :param dataset_id: The dataset_id of this JobsData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.status": [[180, 192], ["ValueError"], "methods", ["None"], ["", "@", "status", ".", "setter", "\n", "def", "status", "(", "self", ",", "status", ")", ":", "\n", "        ", "\"\"\"Sets the status of this JobsData.\n\n\n        :param status: The status of this JobsData.  # noqa: E501\n        :type: JobState\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "status", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `status`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_status", "=", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.finished_at": [[203, 213], ["None"], "methods", ["None"], ["", "@", "finished_at", ".", "setter", "\n", "def", "finished_at", "(", "self", ",", "finished_at", ")", ":", "\n", "        ", "\"\"\"Sets the finished_at of this JobsData.\n\n\n        :param finished_at: The finished_at of this JobsData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_finished_at", "=", "finished_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.created_at": [[224, 236], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this JobsData.\n\n\n        :param created_at: The created_at of this JobsData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.to_dict": [[237, 263], ["six.iteritems", "issubclass", "getattr", "isinstance", "jobs_data.JobsData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "JobsData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.to_str": [[264, 267], ["pprint.pformat", "jobs_data.JobsData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.__repr__": [[268, 271], ["jobs_data.JobsData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.__eq__": [[272, 278], ["isinstance", "jobs_data.JobsData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobsData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.jobs_data.JobsData.__ne__": [[279, 285], ["isinstance", "jobs_data.JobsData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobsData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.__init__": [[67, 111], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "type", "=", "None", ",", "dataset_id", "=", "None", ",", "file_name", "=", "None", ",", "thumb_name", "=", "None", ",", "exif", "=", "None", ",", "index", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "meta_data", "=", "None", ",", "custom_meta_data", "=", "None", ",", "video_frame_data", "=", "None", ",", "crop_data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SampleData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_file_name", "=", "None", "\n", "self", ".", "_thumb_name", "=", "None", "\n", "self", ".", "_exif", "=", "None", "\n", "self", ".", "_index", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "_meta_data", "=", "None", "\n", "self", ".", "_custom_meta_data", "=", "None", "\n", "self", ".", "_video_frame_data", "=", "None", "\n", "self", ".", "_crop_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "type", "=", "type", "\n", "if", "dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_id", "=", "dataset_id", "\n", "", "self", ".", "file_name", "=", "file_name", "\n", "if", "thumb_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "thumb_name", "=", "thumb_name", "\n", "", "if", "exif", "is", "not", "None", ":", "\n", "            ", "self", ".", "exif", "=", "exif", "\n", "", "if", "index", "is", "not", "None", ":", "\n", "            ", "self", ".", "index", "=", "index", "\n", "", "if", "created_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "created_at", "=", "created_at", "\n", "", "if", "last_modified_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "", "if", "meta_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "meta_data", "=", "meta_data", "\n", "", "if", "custom_meta_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "custom_meta_data", "=", "custom_meta_data", "\n", "", "if", "video_frame_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "video_frame_data", "=", "video_frame_data", "\n", "", "if", "crop_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "crop_data", "=", "crop_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.id": [[122, 134], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this SampleData.\n\n\n        :param id: The id of this SampleData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.type": [[145, 157], ["ValueError"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this SampleData.\n\n\n        :param type: The type of this SampleData.  # noqa: E501\n        :type: SampleType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.dataset_id": [[168, 178], ["None"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this SampleData.\n\n\n        :param dataset_id: The dataset_id of this SampleData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.file_name": [[189, 201], ["ValueError"], "methods", ["None"], ["", "@", "file_name", ".", "setter", "\n", "def", "file_name", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Sets the file_name of this SampleData.\n\n\n        :param file_name: The file_name of this SampleData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "file_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `file_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.thumb_name": [[212, 222], ["None"], "methods", ["None"], ["", "@", "thumb_name", ".", "setter", "\n", "def", "thumb_name", "(", "self", ",", "thumb_name", ")", ":", "\n", "        ", "\"\"\"Sets the thumb_name of this SampleData.\n\n\n        :param thumb_name: The thumb_name of this SampleData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_thumb_name", "=", "thumb_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.exif": [[233, 243], ["None"], "methods", ["None"], ["", "@", "exif", ".", "setter", "\n", "def", "exif", "(", "self", ",", "exif", ")", ":", "\n", "        ", "\"\"\"Sets the exif of this SampleData.\n\n\n        :param exif: The exif of this SampleData.  # noqa: E501\n        :type: dict(str, object)\n        \"\"\"", "\n", "\n", "self", ".", "_exif", "=", "exif", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index": [[254, 264], ["None"], "methods", ["None"], ["", "@", "index", ".", "setter", "\n", "def", "index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Sets the index of this SampleData.\n\n\n        :param index: The index of this SampleData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "\n", "self", ".", "_index", "=", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.created_at": [[275, 285], ["None"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this SampleData.\n\n\n        :param created_at: The created_at of this SampleData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.last_modified_at": [[296, 306], ["None"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this SampleData.\n\n\n        :param last_modified_at: The last_modified_at of this SampleData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.meta_data": [[317, 327], ["None"], "methods", ["None"], ["", "@", "meta_data", ".", "setter", "\n", "def", "meta_data", "(", "self", ",", "meta_data", ")", ":", "\n", "        ", "\"\"\"Sets the meta_data of this SampleData.\n\n\n        :param meta_data: The meta_data of this SampleData.  # noqa: E501\n        :type: SampleMetaData\n        \"\"\"", "\n", "\n", "self", ".", "_meta_data", "=", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.custom_meta_data": [[338, 348], ["None"], "methods", ["None"], ["", "@", "custom_meta_data", ".", "setter", "\n", "def", "custom_meta_data", "(", "self", ",", "custom_meta_data", ")", ":", "\n", "        ", "\"\"\"Sets the custom_meta_data of this SampleData.\n\n\n        :param custom_meta_data: The custom_meta_data of this SampleData.  # noqa: E501\n        :type: CustomSampleMetaData\n        \"\"\"", "\n", "\n", "self", ".", "_custom_meta_data", "=", "custom_meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.video_frame_data": [[359, 369], ["None"], "methods", ["None"], ["", "@", "video_frame_data", ".", "setter", "\n", "def", "video_frame_data", "(", "self", ",", "video_frame_data", ")", ":", "\n", "        ", "\"\"\"Sets the video_frame_data of this SampleData.\n\n\n        :param video_frame_data: The video_frame_data of this SampleData.  # noqa: E501\n        :type: VideoFrameData\n        \"\"\"", "\n", "\n", "self", ".", "_video_frame_data", "=", "video_frame_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.crop_data": [[380, 390], ["None"], "methods", ["None"], ["", "@", "crop_data", ".", "setter", "\n", "def", "crop_data", "(", "self", ",", "crop_data", ")", ":", "\n", "        ", "\"\"\"Sets the crop_data of this SampleData.\n\n\n        :param crop_data: The crop_data of this SampleData.  # noqa: E501\n        :type: CropData\n        \"\"\"", "\n", "\n", "self", ".", "_crop_data", "=", "crop_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.to_dict": [[391, 417], ["six.iteritems", "issubclass", "getattr", "isinstance", "sample_data.SampleData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SampleData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.to_str": [[418, 421], ["pprint.pformat", "sample_data.SampleData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.__repr__": [[422, 425], ["sample_data.SampleData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.__eq__": [[426, 432], ["isinstance", "sample_data.SampleData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.__ne__": [[433, 439], ["isinstance", "sample_data.SampleData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.object_id.ObjectId.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ObjectId - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.object_id.ObjectId.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "object_id.ObjectId.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ObjectId", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.object_id.ObjectId.to_str": [[75, 78], ["pprint.pformat", "object_id.ObjectId.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.object_id.ObjectId.__repr__": [[79, 82], ["object_id.ObjectId.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.object_id.ObjectId.__eq__": [[83, 89], ["isinstance", "object_id.ObjectId.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ObjectId", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.object_id.ObjectId.__ne__": [[90, 96], ["isinstance", "object_id.ObjectId.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ObjectId", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_name_format.FileNameFormat.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"FileNameFormat - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_name_format.FileNameFormat.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "file_name_format.FileNameFormat.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "FileNameFormat", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_name_format.FileNameFormat.to_str": [[82, 85], ["pprint.pformat", "file_name_format.FileNameFormat.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_name_format.FileNameFormat.__repr__": [[86, 89], ["file_name_format.FileNameFormat.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_name_format.FileNameFormat.__eq__": [[90, 96], ["isinstance", "file_name_format.FileNameFormat.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "FileNameFormat", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_name_format.FileNameFormat.__ne__": [[97, 103], ["isinstance", "file_name_format.FileNameFormat.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "FileNameFormat", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "row_count", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"EmbeddingIdIsProcessedBody - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_row_count", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "row_count", "=", "row_count", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.row_count": [[65, 78], ["ValueError"], "methods", ["None"], ["", "@", "row_count", ".", "setter", "\n", "def", "row_count", "(", "self", ",", "row_count", ")", ":", "\n", "        ", "\"\"\"Sets the row_count of this EmbeddingIdIsProcessedBody.\n\n        Number of rows in the embeddings file  # noqa: E501\n\n        :param row_count: The row_count of this EmbeddingIdIsProcessedBody.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "row_count", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `row_count`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_row_count", "=", "row_count", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.to_dict": [[79, 105], ["six.iteritems", "issubclass", "getattr", "isinstance", "embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "EmbeddingIdIsProcessedBody", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.to_str": [[106, 109], ["pprint.pformat", "embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.__repr__": [[110, 113], ["embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.__eq__": [[114, 120], ["isinstance", "embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "EmbeddingIdIsProcessedBody", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.__ne__": [[121, 127], ["isinstance", "embedding_id_is_processed_body.EmbeddingIdIsProcessedBody.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "EmbeddingIdIsProcessedBody", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "s3_region", "=", "None", ",", "s3_external_id", "=", "None", ",", "s3_arn", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigS3DelegatedAccess - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_s3_region", "=", "None", "\n", "self", ".", "_s3_external_id", "=", "None", "\n", "self", ".", "_s3_arn", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "s3_region", "=", "s3_region", "\n", "self", ".", "s3_external_id", "=", "s3_external_id", "\n", "self", ".", "s3_arn", "=", "s3_arn", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.s3_region": [[72, 84], ["ValueError"], "methods", ["None"], ["", "@", "s3_region", ".", "setter", "\n", "def", "s3_region", "(", "self", ",", "s3_region", ")", ":", "\n", "        ", "\"\"\"Sets the s3_region of this DatasourceConfigS3DelegatedAccess.\n\n\n        :param s3_region: The s3_region of this DatasourceConfigS3DelegatedAccess.  # noqa: E501\n        :type: S3Region\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "s3_region", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `s3_region`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_s3_region", "=", "s3_region", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.s3_external_id": [[96, 109], ["ValueError"], "methods", ["None"], ["", "@", "s3_external_id", ".", "setter", "\n", "def", "s3_external_id", "(", "self", ",", "s3_external_id", ")", ":", "\n", "        ", "\"\"\"Sets the s3_external_id of this DatasourceConfigS3DelegatedAccess.\n\n        the external ID specified when creating the role.  # noqa: E501\n\n        :param s3_external_id: The s3_external_id of this DatasourceConfigS3DelegatedAccess.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "s3_external_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `s3_external_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_s3_external_id", "=", "s3_external_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.s3_arn": [[121, 134], ["ValueError"], "methods", ["None"], ["", "@", "s3_arn", ".", "setter", "\n", "def", "s3_arn", "(", "self", ",", "s3_arn", ")", ":", "\n", "        ", "\"\"\"Sets the s3_arn of this DatasourceConfigS3DelegatedAccess.\n\n        the ARN of the role you created  # noqa: E501\n\n        :param s3_arn: The s3_arn of this DatasourceConfigS3DelegatedAccess.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "s3_arn", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `s3_arn`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_s3_arn", "=", "s3_arn", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.to_dict": [[135, 161], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigS3DelegatedAccess", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.to_str": [[162, 165], ["pprint.pformat", "datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.__repr__": [[166, 169], ["datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.__eq__": [[170, 176], ["isinstance", "datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigS3DelegatedAccess", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.__ne__": [[177, 183], ["isinstance", "datasource_config_s3_delegated_access.DatasourceConfigS3DelegatedAccess.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigS3DelegatedAccess", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_upload_method.JobStatusUploadMethod.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"JobStatusUploadMethod - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_upload_method.JobStatusUploadMethod.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "job_status_upload_method.JobStatusUploadMethod.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "JobStatusUploadMethod", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_upload_method.JobStatusUploadMethod.to_str": [[82, 85], ["pprint.pformat", "job_status_upload_method.JobStatusUploadMethod.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_upload_method.JobStatusUploadMethod.__repr__": [[86, 89], ["job_status_upload_method.JobStatusUploadMethod.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_upload_method.JobStatusUploadMethod.__eq__": [[90, 96], ["isinstance", "job_status_upload_method.JobStatusUploadMethod.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusUploadMethod", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_upload_method.JobStatusUploadMethod.__ne__": [[97, 103], ["isinstance", "job_status_upload_method.JobStatusUploadMethod.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusUploadMethod", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config.SamplingConfig.__init__": [[43, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stopping_condition", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SamplingConfig - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_stopping_condition", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "stopping_condition", "is", "not", "None", ":", "\n", "            ", "self", ".", "stopping_condition", "=", "stopping_condition", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config.SamplingConfig.stopping_condition": [[65, 75], ["None"], "methods", ["None"], ["", "@", "stopping_condition", ".", "setter", "\n", "def", "stopping_condition", "(", "self", ",", "stopping_condition", ")", ":", "\n", "        ", "\"\"\"Sets the stopping_condition of this SamplingConfig.\n\n\n        :param stopping_condition: The stopping_condition of this SamplingConfig.  # noqa: E501\n        :type: SamplingConfigStoppingCondition\n        \"\"\"", "\n", "\n", "self", ".", "_stopping_condition", "=", "stopping_condition", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config.SamplingConfig.to_dict": [[76, 102], ["six.iteritems", "issubclass", "getattr", "isinstance", "sampling_config.SamplingConfig.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SamplingConfig", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config.SamplingConfig.to_str": [[103, 106], ["pprint.pformat", "sampling_config.SamplingConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config.SamplingConfig.__repr__": [[107, 110], ["sampling_config.SamplingConfig.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config.SamplingConfig.__eq__": [[111, 117], ["isinstance", "sampling_config.SamplingConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingConfig", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config.SamplingConfig.__ne__": [[118, 124], ["isinstance", "sampling_config.SamplingConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingConfig", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "dataset", "=", "None", ",", "name", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"EmbeddingData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_dataset", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.id": [[72, 84], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this EmbeddingData.\n\n\n        :param id: The id of this EmbeddingData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.dataset": [[95, 107], ["ValueError"], "methods", ["None"], ["", "@", "dataset", ".", "setter", "\n", "def", "dataset", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Sets the dataset of this EmbeddingData.\n\n\n        :param dataset: The dataset of this EmbeddingData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "dataset", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `dataset`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.name": [[118, 130], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this EmbeddingData.\n\n\n        :param name: The name of this EmbeddingData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.to_dict": [[131, 157], ["six.iteritems", "issubclass", "getattr", "isinstance", "embedding_data.EmbeddingData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "EmbeddingData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.to_str": [[158, 161], ["pprint.pformat", "embedding_data.EmbeddingData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.__repr__": [[162, 165], ["embedding_data.EmbeddingData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.__eq__": [[166, 172], ["isinstance", "embedding_data.EmbeddingData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "EmbeddingData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding_data.EmbeddingData.__ne__": [[173, 179], ["isinstance", "embedding_data.EmbeddingData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "EmbeddingData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.__init__": [[53, 73], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "run_id", "=", "None", ",", "action", "=", "None", ",", "data", "=", "None", ",", "timestamp", "=", "None", ",", "pip_version", "=", "None", ",", "docker_version", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerUserStats - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_run_id", "=", "None", "\n", "self", ".", "_action", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_timestamp", "=", "None", "\n", "self", ".", "_pip_version", "=", "None", "\n", "self", ".", "_docker_version", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "run_id", "=", "run_id", "\n", "self", ".", "action", "=", "action", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "timestamp", "=", "timestamp", "\n", "self", ".", "pip_version", "=", "pip_version", "\n", "self", ".", "docker_version", "=", "docker_version", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.run_id": [[84, 96], ["ValueError"], "methods", ["None"], ["", "@", "run_id", ".", "setter", "\n", "def", "run_id", "(", "self", ",", "run_id", ")", ":", "\n", "        ", "\"\"\"Sets the run_id of this DockerUserStats.\n\n\n        :param run_id: The run_id of this DockerUserStats.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "run_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `run_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_run_id", "=", "run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.action": [[107, 119], ["ValueError"], "methods", ["None"], ["", "@", "action", ".", "setter", "\n", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Sets the action of this DockerUserStats.\n\n\n        :param action: The action of this DockerUserStats.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "action", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `action`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_action", "=", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.data": [[130, 142], ["ValueError"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Sets the data of this DockerUserStats.\n\n\n        :param data: The data of this DockerUserStats.  # noqa: E501\n        :type: object\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.timestamp": [[153, 165], ["ValueError"], "methods", ["None"], ["", "@", "timestamp", ".", "setter", "\n", "def", "timestamp", "(", "self", ",", "timestamp", ")", ":", "\n", "        ", "\"\"\"Sets the timestamp of this DockerUserStats.\n\n\n        :param timestamp: The timestamp of this DockerUserStats.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "timestamp", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `timestamp`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_timestamp", "=", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.pip_version": [[176, 188], ["ValueError"], "methods", ["None"], ["", "@", "pip_version", ".", "setter", "\n", "def", "pip_version", "(", "self", ",", "pip_version", ")", ":", "\n", "        ", "\"\"\"Sets the pip_version of this DockerUserStats.\n\n\n        :param pip_version: The pip_version of this DockerUserStats.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "pip_version", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `pip_version`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_pip_version", "=", "pip_version", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.docker_version": [[199, 211], ["ValueError"], "methods", ["None"], ["", "@", "docker_version", ".", "setter", "\n", "def", "docker_version", "(", "self", ",", "docker_version", ")", ":", "\n", "        ", "\"\"\"Sets the docker_version of this DockerUserStats.\n\n\n        :param docker_version: The docker_version of this DockerUserStats.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "docker_version", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `docker_version`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_docker_version", "=", "docker_version", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.to_dict": [[212, 238], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_user_stats.DockerUserStats.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerUserStats", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.to_str": [[239, 242], ["pprint.pformat", "docker_user_stats.DockerUserStats.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.__repr__": [[243, 246], ["docker_user_stats.DockerUserStats.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.__eq__": [[247, 253], ["isinstance", "docker_user_stats.DockerUserStats.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerUserStats", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_user_stats.DockerUserStats.__ne__": [[254, 260], ["isinstance", "docker_user_stats.DockerUserStats.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerUserStats", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.__init__": [[47, 63], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "access_type", "=", "None", ",", "users", "=", "None", ",", "organizations", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SharedAccessConfigCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_access_type", "=", "None", "\n", "self", ".", "_users", "=", "None", "\n", "self", ".", "_organizations", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "access_type", "=", "access_type", "\n", "if", "users", "is", "not", "None", ":", "\n", "            ", "self", ".", "users", "=", "users", "\n", "", "if", "organizations", "is", "not", "None", ":", "\n", "            ", "self", ".", "organizations", "=", "organizations", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.access_type": [[74, 86], ["ValueError"], "methods", ["None"], ["", "@", "access_type", ".", "setter", "\n", "def", "access_type", "(", "self", ",", "access_type", ")", ":", "\n", "        ", "\"\"\"Sets the access_type of this SharedAccessConfigCreateRequest.\n\n\n        :param access_type: The access_type of this SharedAccessConfigCreateRequest.  # noqa: E501\n        :type: SharedAccessType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "access_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `access_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_access_type", "=", "access_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.users": [[98, 109], ["None"], "methods", ["None"], ["", "@", "users", ".", "setter", "\n", "def", "users", "(", "self", ",", "users", ")", ":", "\n", "        ", "\"\"\"Sets the users of this SharedAccessConfigCreateRequest.\n\n        List of users with access to the dataset.  # noqa: E501\n\n        :param users: The users of this SharedAccessConfigCreateRequest.  # noqa: E501\n        :type: list[str]\n        \"\"\"", "\n", "\n", "self", ".", "_users", "=", "users", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.organizations": [[121, 132], ["None"], "methods", ["None"], ["", "@", "organizations", ".", "setter", "\n", "def", "organizations", "(", "self", ",", "organizations", ")", ":", "\n", "        ", "\"\"\"Sets the organizations of this SharedAccessConfigCreateRequest.\n\n        List of organizations with access to the dataset.  # noqa: E501\n\n        :param organizations: The organizations of this SharedAccessConfigCreateRequest.  # noqa: E501\n        :type: list[str]\n        \"\"\"", "\n", "\n", "self", ".", "_organizations", "=", "organizations", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.to_dict": [[133, 159], ["six.iteritems", "issubclass", "getattr", "isinstance", "shared_access_config_create_request.SharedAccessConfigCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SharedAccessConfigCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.to_str": [[160, 163], ["pprint.pformat", "shared_access_config_create_request.SharedAccessConfigCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.__repr__": [[164, 167], ["shared_access_config_create_request.SharedAccessConfigCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.__eq__": [[168, 174], ["isinstance", "shared_access_config_create_request.SharedAccessConfigCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SharedAccessConfigCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_create_request.SharedAccessConfigCreateRequest.__ne__": [[175, 181], ["isinstance", "shared_access_config_create_request.SharedAccessConfigCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SharedAccessConfigCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.__init__": [[57, 83], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "dataset_id", "=", "None", ",", "embedding_id", "=", "None", ",", "name", "=", "None", ",", "created_at", "=", "None", ",", "dimensionality_reduction_method", "=", "None", ",", "coordinates_dimension1", "=", "None", ",", "coordinates_dimension2", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"Embedding2dData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_embedding_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_dimensionality_reduction_method", "=", "None", "\n", "self", ".", "_coordinates_dimension1", "=", "None", "\n", "self", ".", "_coordinates_dimension2", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "dataset_id", "=", "dataset_id", "\n", "self", ".", "embedding_id", "=", "embedding_id", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "dimensionality_reduction_method", "=", "dimensionality_reduction_method", "\n", "if", "coordinates_dimension1", "is", "not", "None", ":", "\n", "            ", "self", ".", "coordinates_dimension1", "=", "coordinates_dimension1", "\n", "", "if", "coordinates_dimension2", "is", "not", "None", ":", "\n", "            ", "self", ".", "coordinates_dimension2", "=", "coordinates_dimension2", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.id": [[94, 106], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this Embedding2dData.\n\n\n        :param id: The id of this Embedding2dData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.dataset_id": [[117, 129], ["ValueError"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this Embedding2dData.\n\n\n        :param dataset_id: The dataset_id of this Embedding2dData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "dataset_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `dataset_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.embedding_id": [[140, 152], ["ValueError"], "methods", ["None"], ["", "@", "embedding_id", ".", "setter", "\n", "def", "embedding_id", "(", "self", ",", "embedding_id", ")", ":", "\n", "        ", "\"\"\"Sets the embedding_id of this Embedding2dData.\n\n\n        :param embedding_id: The embedding_id of this Embedding2dData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "embedding_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `embedding_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_embedding_id", "=", "embedding_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.name": [[164, 177], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this Embedding2dData.\n\n        Name of the 2d embedding (default is embedding name + __2d)  # noqa: E501\n\n        :param name: The name of this Embedding2dData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.created_at": [[188, 200], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this Embedding2dData.\n\n\n        :param created_at: The created_at of this Embedding2dData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.dimensionality_reduction_method": [[211, 223], ["ValueError"], "methods", ["None"], ["", "@", "dimensionality_reduction_method", ".", "setter", "\n", "def", "dimensionality_reduction_method", "(", "self", ",", "dimensionality_reduction_method", ")", ":", "\n", "        ", "\"\"\"Sets the dimensionality_reduction_method of this Embedding2dData.\n\n\n        :param dimensionality_reduction_method: The dimensionality_reduction_method of this Embedding2dData.  # noqa: E501\n        :type: DimensionalityReductionMethod\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "dimensionality_reduction_method", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `dimensionality_reduction_method`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_dimensionality_reduction_method", "=", "dimensionality_reduction_method", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.coordinates_dimension1": [[234, 244], ["None"], "methods", ["None"], ["", "@", "coordinates_dimension1", ".", "setter", "\n", "def", "coordinates_dimension1", "(", "self", ",", "coordinates_dimension1", ")", ":", "\n", "        ", "\"\"\"Sets the coordinates_dimension1 of this Embedding2dData.\n\n\n        :param coordinates_dimension1: The coordinates_dimension1 of this Embedding2dData.  # noqa: E501\n        :type: Embedding2dCoordinates\n        \"\"\"", "\n", "\n", "self", ".", "_coordinates_dimension1", "=", "coordinates_dimension1", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.coordinates_dimension2": [[255, 265], ["None"], "methods", ["None"], ["", "@", "coordinates_dimension2", ".", "setter", "\n", "def", "coordinates_dimension2", "(", "self", ",", "coordinates_dimension2", ")", ":", "\n", "        ", "\"\"\"Sets the coordinates_dimension2 of this Embedding2dData.\n\n\n        :param coordinates_dimension2: The coordinates_dimension2 of this Embedding2dData.  # noqa: E501\n        :type: Embedding2dCoordinates\n        \"\"\"", "\n", "\n", "self", ".", "_coordinates_dimension2", "=", "coordinates_dimension2", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.to_dict": [[266, 292], ["six.iteritems", "issubclass", "getattr", "isinstance", "embedding2d_data.Embedding2dData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "Embedding2dData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.to_str": [[293, 296], ["pprint.pformat", "embedding2d_data.Embedding2dData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.__repr__": [[297, 300], ["embedding2d_data.Embedding2dData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.__eq__": [[301, 307], ["isinstance", "embedding2d_data.Embedding2dData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Embedding2dData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.embedding2d_data.Embedding2dData.__ne__": [[308, 314], ["isinstance", "embedding2d_data.Embedding2dData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Embedding2dData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.__init__": [[49, 65], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "path", "=", "None", ",", "default_value", "=", "None", ",", "value_data_type", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ConfigurationEntry - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_path", "=", "None", "\n", "self", ".", "_default_value", "=", "None", "\n", "self", ".", "_value_data_type", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "default_value", "=", "default_value", "\n", "self", ".", "value_data_type", "=", "value_data_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.name": [[77, 90], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this ConfigurationEntry.\n\n        the name of this entry which is displayed in the UI  # noqa: E501\n\n        :param name: The name of this ConfigurationEntry.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.path": [[102, 115], ["ValueError"], "methods", ["None"], ["", "@", "path", ".", "setter", "\n", "def", "path", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Sets the path of this ConfigurationEntry.\n\n        the path is the dotnotation which is used to easily access the customMetadata JSON structure of a sample e.g myArray[0].myObject.field  # noqa: E501\n\n        :param path: The path of this ConfigurationEntry.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "path", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `path`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.default_value": [[127, 140], ["ValueError"], "methods", ["None"], ["", "@", "default_value", ".", "setter", "\n", "def", "default_value", "(", "self", ",", "default_value", ")", ":", "\n", "        ", "\"\"\"Sets the default_value of this ConfigurationEntry.\n\n        the default value used if its not possible to extract the value using the path or if the value extracted is nullish  # noqa: E501\n\n        :param default_value: The default_value of this ConfigurationEntry.  # noqa: E501\n        :type: object\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "default_value", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `default_value`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_default_value", "=", "default_value", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.value_data_type": [[151, 163], ["ValueError"], "methods", ["None"], ["", "@", "value_data_type", ".", "setter", "\n", "def", "value_data_type", "(", "self", ",", "value_data_type", ")", ":", "\n", "        ", "\"\"\"Sets the value_data_type of this ConfigurationEntry.\n\n\n        :param value_data_type: The value_data_type of this ConfigurationEntry.  # noqa: E501\n        :type: ConfigurationValueDataType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "value_data_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `value_data_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_value_data_type", "=", "value_data_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.to_dict": [[164, 190], ["six.iteritems", "issubclass", "getattr", "isinstance", "configuration_entry.ConfigurationEntry.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ConfigurationEntry", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.to_str": [[191, 194], ["pprint.pformat", "configuration_entry.ConfigurationEntry.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.__repr__": [[195, 198], ["configuration_entry.ConfigurationEntry.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.__eq__": [[199, 205], ["isinstance", "configuration_entry.ConfigurationEntry.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationEntry", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_entry.ConfigurationEntry.__ne__": [[206, 212], ["isinstance", "configuration_entry.ConfigurationEntry.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationEntry", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_result_type.JobResultType.__init__": [[50, 56], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"JobResultType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_result_type.JobResultType.to_dict": [[57, 83], ["six.iteritems", "issubclass", "getattr", "isinstance", "job_result_type.JobResultType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "JobResultType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_result_type.JobResultType.to_str": [[84, 87], ["pprint.pformat", "job_result_type.JobResultType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_result_type.JobResultType.__repr__": [[88, 91], ["job_result_type.JobResultType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_result_type.JobResultType.__eq__": [[92, 98], ["isinstance", "job_result_type.JobResultType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobResultType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_result_type.JobResultType.__ne__": [[99, 105], ["isinstance", "job_result_type.JobResultType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobResultType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.__init__": [[47, 62], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "config", "=", "None", ",", "created_at", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerWorkerConfigData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_config", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "config", "=", "config", "\n", "if", "created_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.id": [[73, 85], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this DockerWorkerConfigData.\n\n\n        :param id: The id of this DockerWorkerConfigData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.config": [[96, 108], ["ValueError"], "methods", ["None"], ["", "@", "config", ".", "setter", "\n", "def", "config", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"Sets the config of this DockerWorkerConfigData.\n\n\n        :param config: The config of this DockerWorkerConfigData.  # noqa: E501\n        :type: DockerWorkerConfig\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "config", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `config`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.created_at": [[119, 129], ["None"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this DockerWorkerConfigData.\n\n\n        :param created_at: The created_at of this DockerWorkerConfigData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.to_dict": [[130, 156], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_worker_config_data.DockerWorkerConfigData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerWorkerConfigData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.to_str": [[157, 160], ["pprint.pformat", "docker_worker_config_data.DockerWorkerConfigData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.__repr__": [[161, 164], ["docker_worker_config_data.DockerWorkerConfigData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.__eq__": [[165, 171], ["isinstance", "docker_worker_config_data.DockerWorkerConfigData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerConfigData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config_data.DockerWorkerConfigData.__ne__": [[172, 178], ["isinstance", "docker_worker_config_data.DockerWorkerConfigData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerConfigData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.__init__": [[49, 67], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "total", "=", "None", ",", "processed", "=", "None", ",", "upload_method", "=", "None", ",", "is_registered", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"JobStatusMeta - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_total", "=", "None", "\n", "self", ".", "_processed", "=", "None", "\n", "self", ".", "_upload_method", "=", "None", "\n", "self", ".", "_is_registered", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "total", "=", "total", "\n", "self", ".", "processed", "=", "processed", "\n", "if", "upload_method", "is", "not", "None", ":", "\n", "            ", "self", ".", "upload_method", "=", "upload_method", "\n", "", "if", "is_registered", "is", "not", "None", ":", "\n", "            ", "self", ".", "is_registered", "=", "is_registered", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.total": [[78, 90], ["ValueError"], "methods", ["None"], ["", "@", "total", ".", "setter", "\n", "def", "total", "(", "self", ",", "total", ")", ":", "\n", "        ", "\"\"\"Sets the total of this JobStatusMeta.\n\n\n        :param total: The total of this JobStatusMeta.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "total", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `total`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_total", "=", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.processed": [[101, 113], ["ValueError"], "methods", ["None"], ["", "@", "processed", ".", "setter", "\n", "def", "processed", "(", "self", ",", "processed", ")", ":", "\n", "        ", "\"\"\"Sets the processed of this JobStatusMeta.\n\n\n        :param processed: The processed of this JobStatusMeta.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "processed", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `processed`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_processed", "=", "processed", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.upload_method": [[124, 134], ["None"], "methods", ["None"], ["", "@", "upload_method", ".", "setter", "\n", "def", "upload_method", "(", "self", ",", "upload_method", ")", ":", "\n", "        ", "\"\"\"Sets the upload_method of this JobStatusMeta.\n\n\n        :param upload_method: The upload_method of this JobStatusMeta.  # noqa: E501\n        :type: JobStatusUploadMethod\n        \"\"\"", "\n", "\n", "self", ".", "_upload_method", "=", "upload_method", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.is_registered": [[146, 157], ["None"], "methods", ["None"], ["", "@", "is_registered", ".", "setter", "\n", "def", "is_registered", "(", "self", ",", "is_registered", ")", ":", "\n", "        ", "\"\"\"Sets the is_registered of this JobStatusMeta.\n\n        Flag which indicates whether the job was registered or not.  # noqa: E501\n\n        :param is_registered: The is_registered of this JobStatusMeta.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "\n", "self", ".", "_is_registered", "=", "is_registered", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.to_dict": [[158, 184], ["six.iteritems", "issubclass", "getattr", "isinstance", "job_status_meta.JobStatusMeta.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "JobStatusMeta", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.to_str": [[185, 188], ["pprint.pformat", "job_status_meta.JobStatusMeta.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.__repr__": [[189, 192], ["job_status_meta.JobStatusMeta.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.__eq__": [[193, 199], ["isinstance", "job_status_meta.JobStatusMeta.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusMeta", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_meta.JobStatusMeta.__ne__": [[200, 206], ["isinstance", "job_status_meta.JobStatusMeta.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "JobStatusMeta", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp_seconds.TimestampSeconds.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TimestampSeconds - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp_seconds.TimestampSeconds.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "timestamp_seconds.TimestampSeconds.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TimestampSeconds", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp_seconds.TimestampSeconds.to_str": [[75, 78], ["pprint.pformat", "timestamp_seconds.TimestampSeconds.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp_seconds.TimestampSeconds.__repr__": [[79, 82], ["timestamp_seconds.TimestampSeconds.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp_seconds.TimestampSeconds.__eq__": [[83, 89], ["isinstance", "timestamp_seconds.TimestampSeconds.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TimestampSeconds", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.timestamp_seconds.TimestampSeconds.__ne__": [[90, 96], ["isinstance", "timestamp_seconds.TimestampSeconds.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TimestampSeconds", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config.DatasourceConfig.__init__": [[45, 51], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfig - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "'Discriminator{propertyName&#x3D;&#39;type&#39;, mapping&#x3D;{LIGHTLY&#x3D;#/components/schemas/DatasourceConfigLIGHTLY, S3&#x3D;#/components/schemas/DatasourceConfigS3, S3DelegatedAccess&#x3D;#/components/schemas/DatasourceConfigS3DelegatedAccess, GCS&#x3D;#/components/schemas/DatasourceConfigGCS, AZURE&#x3D;#/components/schemas/DatasourceConfigAzure, LOCAL&#x3D;#/components/schemas/DatasourceConfigLOCAL}}'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config.DatasourceConfig.get_real_child_model": [[52, 56], ["data[].lower", "datasource_config.DatasourceConfig.discriminator_value_class_map.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "def", "get_real_child_model", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Returns the real base class specified by the discriminator\"\"\"", "\n", "discriminator_value", "=", "data", "[", "self", ".", "discriminator", "]", ".", "lower", "(", ")", "\n", "return", "self", ".", "discriminator_value_class_map", ".", "get", "(", "discriminator_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config.DatasourceConfig.to_dict": [[57, 83], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config.DatasourceConfig.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfig", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config.DatasourceConfig.to_str": [[84, 87], ["pprint.pformat", "datasource_config.DatasourceConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config.DatasourceConfig.__repr__": [[88, 91], ["datasource_config.DatasourceConfig.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config.DatasourceConfig.__eq__": [[92, 98], ["isinstance", "datasource_config.DatasourceConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfig", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config.DatasourceConfig.__ne__": [[99, 105], ["isinstance", "datasource_config.DatasourceConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfig", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton.PredictionSingleton.__init__": [[45, 51], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionSingleton - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "'Discriminator{propertyName&#x3D;&#39;type&#39;, mapping&#x3D;{CLASSIFICATION&#x3D;#/components/schemas/PredictionSingletonClassification, OBJECT_DETECTION&#x3D;#/components/schemas/PredictionSingletonObjectDetection, INSTANCE_SEGMENTATION&#x3D;#/components/schemas/PredictionSingletonInstanceSegmentation, KEYPOINT_DETECTION&#x3D;#/components/schemas/PredictionSingletonKeypointDetection}}'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton.PredictionSingleton.get_real_child_model": [[52, 56], ["data[].lower", "prediction_singleton.PredictionSingleton.discriminator_value_class_map.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "def", "get_real_child_model", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Returns the real base class specified by the discriminator\"\"\"", "\n", "discriminator_value", "=", "data", "[", "self", ".", "discriminator", "]", ".", "lower", "(", ")", "\n", "return", "self", ".", "discriminator_value_class_map", ".", "get", "(", "discriminator_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton.PredictionSingleton.to_dict": [[57, 83], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_singleton.PredictionSingleton.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionSingleton", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton.PredictionSingleton.to_str": [[84, 87], ["pprint.pformat", "prediction_singleton.PredictionSingleton.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton.PredictionSingleton.__repr__": [[88, 91], ["prediction_singleton.PredictionSingleton.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton.PredictionSingleton.__eq__": [[92, 98], ["isinstance", "prediction_singleton.PredictionSingleton.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingleton", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton.PredictionSingleton.__ne__": [[99, 105], ["isinstance", "prediction_singleton.PredictionSingleton.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingleton", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.version_number.VersionNumber.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"VersionNumber - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.version_number.VersionNumber.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "version_number.VersionNumber.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "VersionNumber", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.version_number.VersionNumber.to_str": [[75, 78], ["pprint.pformat", "version_number.VersionNumber.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.version_number.VersionNumber.__repr__": [[79, 82], ["version_number.VersionNumber.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.version_number.VersionNumber.__eq__": [[83, 89], ["isinstance", "version_number.VersionNumber.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "VersionNumber", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.version_number.VersionNumber.__ne__": [[90, 96], ["isinstance", "version_number.VersionNumber.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "VersionNumber", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_change_data.TagChangeData.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagChangeData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_change_data.TagChangeData.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_change_data.TagChangeData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagChangeData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_change_data.TagChangeData.to_str": [[75, 78], ["pprint.pformat", "tag_change_data.TagChangeData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_change_data.TagChangeData.__repr__": [[79, 82], ["tag_change_data.TagChangeData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_change_data.TagChangeData.__eq__": [[83, 89], ["isinstance", "tag_change_data.TagChangeData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagChangeData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_change_data.TagChangeData.__ne__": [[90, 96], ["isinstance", "tag_change_data.TagChangeData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagChangeData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_name.DatasetName.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasetName - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_name.DatasetName.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "dataset_name.DatasetName.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasetName", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_name.DatasetName.to_str": [[75, 78], ["pprint.pformat", "dataset_name.DatasetName.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_name.DatasetName.__repr__": [[79, 82], ["dataset_name.DatasetName.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_name.DatasetName.__eq__": [[83, 89], ["isinstance", "dataset_name.DatasetName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetName", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_name.DatasetName.__ne__": [[90, 96], ["isinstance", "dataset_name.DatasetName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetName", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config_id", "=", "None", ",", "priority", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunScheduledCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_config_id", "=", "None", "\n", "self", ".", "_priority", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "config_id", "=", "config_id", "\n", "self", ".", "priority", "=", "priority", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.config_id": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "config_id", ".", "setter", "\n", "def", "config_id", "(", "self", ",", "config_id", ")", ":", "\n", "        ", "\"\"\"Sets the config_id of this DockerRunScheduledCreateRequest.\n\n\n        :param config_id: The config_id of this DockerRunScheduledCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "config_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `config_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_config_id", "=", "config_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.priority": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "priority", ".", "setter", "\n", "def", "priority", "(", "self", ",", "priority", ")", ":", "\n", "        ", "\"\"\"Sets the priority of this DockerRunScheduledCreateRequest.\n\n\n        :param priority: The priority of this DockerRunScheduledCreateRequest.  # noqa: E501\n        :type: DockerRunScheduledPriority\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "priority", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `priority`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_priority", "=", "priority", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunScheduledCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.to_str": [[131, 134], ["pprint.pformat", "docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.__repr__": [[135, 138], ["docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.__eq__": [[139, 145], ["isinstance", "docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.__ne__": [[146, 152], ["isinstance", "docker_run_scheduled_create_request.DockerRunScheduledCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.__init__": [[60, 82], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "type", "=", "None", ",", "task_name", "=", "None", ",", "crop_dataset_id", "=", "None", ",", "crop_sample_id", "=", "None", ",", "category_id", "=", "None", ",", "score", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionSingletonBase - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_task_name", "=", "None", "\n", "self", ".", "_crop_dataset_id", "=", "None", "\n", "self", ".", "_crop_sample_id", "=", "None", "\n", "self", ".", "_category_id", "=", "None", "\n", "self", ".", "_score", "=", "None", "\n", "self", ".", "discriminator", "=", "'Discriminator{propertyName&#x3D;&#39;type&#39;, mapping&#x3D;null}'", "\n", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "task_name", "=", "task_name", "\n", "if", "crop_dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "crop_dataset_id", "=", "crop_dataset_id", "\n", "", "if", "crop_sample_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "crop_sample_id", "=", "crop_sample_id", "\n", "", "self", ".", "category_id", "=", "category_id", "\n", "self", ".", "score", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.type": [[93, 105], ["ValueError"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this PredictionSingletonBase.\n\n\n        :param type: The type of this PredictionSingletonBase.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.task_name": [[116, 128], ["ValueError"], "methods", ["None"], ["", "@", "task_name", ".", "setter", "\n", "def", "task_name", "(", "self", ",", "task_name", ")", ":", "\n", "        ", "\"\"\"Sets the task_name of this PredictionSingletonBase.\n\n\n        :param task_name: The task_name of this PredictionSingletonBase.  # noqa: E501\n        :type: TaskName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "task_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `task_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_task_name", "=", "task_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.crop_dataset_id": [[139, 149], ["None"], "methods", ["None"], ["", "@", "crop_dataset_id", ".", "setter", "\n", "def", "crop_dataset_id", "(", "self", ",", "crop_dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the crop_dataset_id of this PredictionSingletonBase.\n\n\n        :param crop_dataset_id: The crop_dataset_id of this PredictionSingletonBase.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_crop_dataset_id", "=", "crop_dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.crop_sample_id": [[160, 170], ["None"], "methods", ["None"], ["", "@", "crop_sample_id", ".", "setter", "\n", "def", "crop_sample_id", "(", "self", ",", "crop_sample_id", ")", ":", "\n", "        ", "\"\"\"Sets the crop_sample_id of this PredictionSingletonBase.\n\n\n        :param crop_sample_id: The crop_sample_id of this PredictionSingletonBase.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_crop_sample_id", "=", "crop_sample_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.category_id": [[181, 193], ["ValueError"], "methods", ["None"], ["", "@", "category_id", ".", "setter", "\n", "def", "category_id", "(", "self", ",", "category_id", ")", ":", "\n", "        ", "\"\"\"Sets the category_id of this PredictionSingletonBase.\n\n\n        :param category_id: The category_id of this PredictionSingletonBase.  # noqa: E501\n        :type: CategoryId\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "category_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `category_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_category_id", "=", "category_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.score": [[204, 216], ["ValueError"], "methods", ["None"], ["", "@", "score", ".", "setter", "\n", "def", "score", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Sets the score of this PredictionSingletonBase.\n\n\n        :param score: The score of this PredictionSingletonBase.  # noqa: E501\n        :type: Score\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "score", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `score`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_score", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.get_real_child_model": [[217, 221], ["data[].lower", "prediction_singleton_base.PredictionSingletonBase.discriminator_value_class_map.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "def", "get_real_child_model", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Returns the real base class specified by the discriminator\"\"\"", "\n", "discriminator_value", "=", "data", "[", "self", ".", "discriminator", "]", ".", "lower", "(", ")", "\n", "return", "self", ".", "discriminator_value_class_map", ".", "get", "(", "discriminator_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.to_dict": [[222, 248], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_singleton_base.PredictionSingletonBase.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionSingletonBase", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.to_str": [[249, 252], ["pprint.pformat", "prediction_singleton_base.PredictionSingletonBase.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.__repr__": [[253, 256], ["prediction_singleton_base.PredictionSingletonBase.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.__eq__": [[257, 263], ["isinstance", "prediction_singleton_base.PredictionSingletonBase.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonBase", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_base.PredictionSingletonBase.__ne__": [[264, 270], ["isinstance", "prediction_singleton_base.PredictionSingletonBase.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonBase", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_type.SharedAccessType.__init__": [[46, 52], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SharedAccessType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_type.SharedAccessType.to_dict": [[53, 79], ["six.iteritems", "issubclass", "getattr", "isinstance", "shared_access_type.SharedAccessType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SharedAccessType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_type.SharedAccessType.to_str": [[80, 83], ["pprint.pformat", "shared_access_type.SharedAccessType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_type.SharedAccessType.__repr__": [[84, 87], ["shared_access_type.SharedAccessType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_type.SharedAccessType.__eq__": [[88, 94], ["isinstance", "shared_access_type.SharedAccessType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SharedAccessType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_type.SharedAccessType.__ne__": [[95, 101], ["isinstance", "shared_access_type.SharedAccessType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SharedAccessType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_name.TagName.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagName - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_name.TagName.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_name.TagName.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagName", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_name.TagName.to_str": [[75, 78], ["pprint.pformat", "tag_name.TagName.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_name.TagName.__repr__": [[79, 82], ["tag_name.TagName.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_name.TagName.__eq__": [[83, 89], ["isinstance", "tag_name.TagName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagName", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_name.TagName.__ne__": [[90, 96], ["isinstance", "tag_name.TagName.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagName", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "signed_write_url", "=", "None", ",", "embedding_id", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"WriteCSVUrlData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_signed_write_url", "=", "None", "\n", "self", ".", "_embedding_id", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "signed_write_url", "=", "signed_write_url", "\n", "self", ".", "embedding_id", "=", "embedding_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.signed_write_url": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "signed_write_url", ".", "setter", "\n", "def", "signed_write_url", "(", "self", ",", "signed_write_url", ")", ":", "\n", "        ", "\"\"\"Sets the signed_write_url of this WriteCSVUrlData.\n\n\n        :param signed_write_url: The signed_write_url of this WriteCSVUrlData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "signed_write_url", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `signed_write_url`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_signed_write_url", "=", "signed_write_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.embedding_id": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "embedding_id", ".", "setter", "\n", "def", "embedding_id", "(", "self", ",", "embedding_id", ")", ":", "\n", "        ", "\"\"\"Sets the embedding_id of this WriteCSVUrlData.\n\n\n        :param embedding_id: The embedding_id of this WriteCSVUrlData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "embedding_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `embedding_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_embedding_id", "=", "embedding_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "write_csv_url_data.WriteCSVUrlData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "WriteCSVUrlData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.to_str": [[131, 134], ["pprint.pformat", "write_csv_url_data.WriteCSVUrlData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.__repr__": [[135, 138], ["write_csv_url_data.WriteCSVUrlData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.__eq__": [[139, 145], ["isinstance", "write_csv_url_data.WriteCSVUrlData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "WriteCSVUrlData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.write_csv_url_data.WriteCSVUrlData.__ne__": [[146, 152], ["isinstance", "write_csv_url_data.WriteCSVUrlData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "WriteCSVUrlData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.redirected_read_url.RedirectedReadUrl.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"RedirectedReadUrl - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.redirected_read_url.RedirectedReadUrl.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "redirected_read_url.RedirectedReadUrl.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "RedirectedReadUrl", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.redirected_read_url.RedirectedReadUrl.to_str": [[75, 78], ["pprint.pformat", "redirected_read_url.RedirectedReadUrl.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.redirected_read_url.RedirectedReadUrl.__repr__": [[79, 82], ["redirected_read_url.RedirectedReadUrl.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.redirected_read_url.RedirectedReadUrl.__eq__": [[83, 89], ["isinstance", "redirected_read_url.RedirectedReadUrl.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "RedirectedReadUrl", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.redirected_read_url.RedirectedReadUrl.__ne__": [[90, 96], ["isinstance", "redirected_read_url.RedirectedReadUrl.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "RedirectedReadUrl", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.mongo_object_id.MongoObjectID.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"MongoObjectID - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.mongo_object_id.MongoObjectID.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "mongo_object_id.MongoObjectID.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "MongoObjectID", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.mongo_object_id.MongoObjectID.to_str": [[75, 78], ["pprint.pformat", "mongo_object_id.MongoObjectID.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.mongo_object_id.MongoObjectID.__repr__": [[79, 82], ["mongo_object_id.MongoObjectID.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.mongo_object_id.MongoObjectID.__eq__": [[83, 89], ["isinstance", "mongo_object_id.MongoObjectID.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "MongoObjectID", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.mongo_object_id.MongoObjectID.__ne__": [[90, 96], ["isinstance", "mongo_object_id.MongoObjectID.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "MongoObjectID", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"OneOfTagArithmeticsResponse - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "OneOfTagArithmeticsResponse", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.to_str": [[75, 78], ["pprint.pformat", "one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.__repr__": [[79, 82], ["one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.__eq__": [[83, 89], ["isinstance", "one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "OneOfTagArithmeticsResponse", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.__ne__": [[90, 96], ["isinstance", "one_of_tag_arithmetics_response.OneOfTagArithmeticsResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "OneOfTagArithmeticsResponse", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.__init__": [[47, 64], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ts", "=", "None", ",", "state", "=", "None", ",", "log", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunDataLog - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_ts", "=", "None", "\n", "self", ".", "_state", "=", "None", "\n", "self", ".", "_log", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "ts", "is", "not", "None", ":", "\n", "            ", "self", ".", "ts", "=", "ts", "\n", "", "if", "state", "is", "not", "None", ":", "\n", "            ", "self", ".", "state", "=", "state", "\n", "", "if", "log", "is", "not", "None", ":", "\n", "            ", "self", ".", "log", "=", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.ts": [[75, 85], ["None"], "methods", ["None"], ["", "@", "ts", ".", "setter", "\n", "def", "ts", "(", "self", ",", "ts", ")", ":", "\n", "        ", "\"\"\"Sets the ts of this DockerRunDataLog.\n\n\n        :param ts: The ts of this DockerRunDataLog.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_ts", "=", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.state": [[96, 106], ["None"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Sets the state of this DockerRunDataLog.\n\n\n        :param state: The state of this DockerRunDataLog.  # noqa: E501\n        :type: DockerRunState\n        \"\"\"", "\n", "\n", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log": [[117, 127], ["None"], "methods", ["None"], ["", "@", "log", ".", "setter", "\n", "def", "log", "(", "self", ",", "log", ")", ":", "\n", "        ", "\"\"\"Sets the log of this DockerRunDataLog.\n\n\n        :param log: The log of this DockerRunDataLog.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_log", "=", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.to_dict": [[128, 154], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_data_log.DockerRunDataLog.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunDataLog", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.to_str": [[155, 158], ["pprint.pformat", "docker_run_data_log.DockerRunDataLog.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.__repr__": [[159, 162], ["docker_run_data_log.DockerRunDataLog.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.__eq__": [[163, 169], ["isinstance", "docker_run_data_log.DockerRunDataLog.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunDataLog", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.__ne__": [[170, 176], ["isinstance", "docker_run_data_log.DockerRunDataLog.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunDataLog", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_type.SampleType.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SampleType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_type.SampleType.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "sample_type.SampleType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SampleType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_type.SampleType.to_str": [[82, 85], ["pprint.pformat", "sample_type.SampleType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_type.SampleType.__repr__": [[86, 89], ["sample_type.SampleType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_type.SampleType.__eq__": [[90, 96], ["isinstance", "sample_type.SampleType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_type.SampleType.__ne__": [[97, 103], ["isinstance", "sample_type.SampleType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "can_read", "=", "None", ",", "can_write", "=", "None", ",", "can_list", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceConfigVerifyData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_can_read", "=", "None", "\n", "self", ".", "_can_write", "=", "None", "\n", "self", ".", "_can_list", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "can_read", "=", "can_read", "\n", "self", ".", "can_write", "=", "can_write", "\n", "self", ".", "can_list", "=", "can_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.can_read": [[72, 84], ["ValueError"], "methods", ["None"], ["", "@", "can_read", ".", "setter", "\n", "def", "can_read", "(", "self", ",", "can_read", ")", ":", "\n", "        ", "\"\"\"Sets the can_read of this DatasourceConfigVerifyData.\n\n\n        :param can_read: The can_read of this DatasourceConfigVerifyData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "can_read", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `can_read`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_can_read", "=", "can_read", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.can_write": [[95, 107], ["ValueError"], "methods", ["None"], ["", "@", "can_write", ".", "setter", "\n", "def", "can_write", "(", "self", ",", "can_write", ")", ":", "\n", "        ", "\"\"\"Sets the can_write of this DatasourceConfigVerifyData.\n\n\n        :param can_write: The can_write of this DatasourceConfigVerifyData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "can_write", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `can_write`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_can_write", "=", "can_write", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.can_list": [[118, 130], ["ValueError"], "methods", ["None"], ["", "@", "can_list", ".", "setter", "\n", "def", "can_list", "(", "self", ",", "can_list", ")", ":", "\n", "        ", "\"\"\"Sets the can_list of this DatasourceConfigVerifyData.\n\n\n        :param can_list: The can_list of this DatasourceConfigVerifyData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "can_list", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `can_list`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_can_list", "=", "can_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.to_dict": [[131, 157], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_config_verify_data.DatasourceConfigVerifyData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceConfigVerifyData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.to_str": [[158, 161], ["pprint.pformat", "datasource_config_verify_data.DatasourceConfigVerifyData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.__repr__": [[162, 165], ["datasource_config_verify_data.DatasourceConfigVerifyData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.__eq__": [[166, 172], ["isinstance", "datasource_config_verify_data.DatasourceConfigVerifyData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigVerifyData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_config_verify_data.DatasourceConfigVerifyData.__ne__": [[173, 179], ["isinstance", "datasource_config_verify_data.DatasourceConfigVerifyData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceConfigVerifyData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_type.TaskType.__init__": [[49, 55], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TaskType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_type.TaskType.to_dict": [[56, 82], ["six.iteritems", "issubclass", "getattr", "isinstance", "task_type.TaskType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TaskType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_type.TaskType.to_str": [[83, 86], ["pprint.pformat", "task_type.TaskType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_type.TaskType.__repr__": [[87, 90], ["task_type.TaskType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_type.TaskType.__eq__": [[91, 97], ["isinstance", "task_type.TaskType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TaskType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.task_type.TaskType.__ne__": [[98, 104], ["isinstance", "task_type.TaskType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TaskType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "processed_until_timestamp", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceProcessedUntilTimestampResponse - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_processed_until_timestamp", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "processed_until_timestamp", "=", "processed_until_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.processed_until_timestamp": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "processed_until_timestamp", ".", "setter", "\n", "def", "processed_until_timestamp", "(", "self", ",", "processed_until_timestamp", ")", ":", "\n", "        ", "\"\"\"Sets the processed_until_timestamp of this DatasourceProcessedUntilTimestampResponse.\n\n\n        :param processed_until_timestamp: The processed_until_timestamp of this DatasourceProcessedUntilTimestampResponse.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "processed_until_timestamp", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `processed_until_timestamp`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_processed_until_timestamp", "=", "processed_until_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceProcessedUntilTimestampResponse", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.to_str": [[104, 107], ["pprint.pformat", "datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.__repr__": [[108, 111], ["datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.__eq__": [[112, 118], ["isinstance", "datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceProcessedUntilTimestampResponse", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.__ne__": [[119, 125], ["isinstance", "datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceProcessedUntilTimestampResponse", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.__init__": [[49, 65], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "tag_id", "=", "None", ",", "score_type", "=", "None", ",", "created_at", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagActiveLearningScoresData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_tag_id", "=", "None", "\n", "self", ".", "_score_type", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "tag_id", "=", "tag_id", "\n", "self", ".", "score_type", "=", "score_type", "\n", "self", ".", "created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.id": [[76, 88], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this TagActiveLearningScoresData.\n\n\n        :param id: The id of this TagActiveLearningScoresData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.tag_id": [[99, 111], ["ValueError"], "methods", ["None"], ["", "@", "tag_id", ".", "setter", "\n", "def", "tag_id", "(", "self", ",", "tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the tag_id of this TagActiveLearningScoresData.\n\n\n        :param tag_id: The tag_id of this TagActiveLearningScoresData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "tag_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `tag_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_tag_id", "=", "tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.score_type": [[122, 134], ["ValueError"], "methods", ["None"], ["", "@", "score_type", ".", "setter", "\n", "def", "score_type", "(", "self", ",", "score_type", ")", ":", "\n", "        ", "\"\"\"Sets the score_type of this TagActiveLearningScoresData.\n\n\n        :param score_type: The score_type of this TagActiveLearningScoresData.  # noqa: E501\n        :type: ActiveLearningScoreType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "score_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `score_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_score_type", "=", "score_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.created_at": [[145, 157], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this TagActiveLearningScoresData.\n\n\n        :param created_at: The created_at of this TagActiveLearningScoresData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.to_dict": [[158, 184], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_active_learning_scores_data.TagActiveLearningScoresData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagActiveLearningScoresData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.to_str": [[185, 188], ["pprint.pformat", "tag_active_learning_scores_data.TagActiveLearningScoresData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.__repr__": [[189, 192], ["tag_active_learning_scores_data.TagActiveLearningScoresData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.__eq__": [[193, 199], ["isinstance", "tag_active_learning_scores_data.TagActiveLearningScoresData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagActiveLearningScoresData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_active_learning_scores_data.TagActiveLearningScoresData.__ne__": [[200, 206], ["isinstance", "tag_active_learning_scores_data.TagActiveLearningScoresData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagActiveLearningScoresData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_output_format.FileOutputFormat.__init__": [[47, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"FileOutputFormat - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_output_format.FileOutputFormat.to_dict": [[54, 80], ["six.iteritems", "issubclass", "getattr", "isinstance", "file_output_format.FileOutputFormat.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "FileOutputFormat", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_output_format.FileOutputFormat.to_str": [[81, 84], ["pprint.pformat", "file_output_format.FileOutputFormat.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_output_format.FileOutputFormat.__repr__": [[85, 88], ["file_output_format.FileOutputFormat.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_output_format.FileOutputFormat.__eq__": [[89, 95], ["isinstance", "file_output_format.FileOutputFormat.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "FileOutputFormat", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.file_output_format.FileOutputFormat.__ne__": [[96, 102], ["isinstance", "file_output_format.FileOutputFormat.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "FileOutputFormat", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singletons.PredictionSingletons.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionSingletons - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singletons.PredictionSingletons.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_singletons.PredictionSingletons.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionSingletons", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singletons.PredictionSingletons.to_str": [[75, 78], ["pprint.pformat", "prediction_singletons.PredictionSingletons.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singletons.PredictionSingletons.__repr__": [[79, 82], ["prediction_singletons.PredictionSingletons.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singletons.PredictionSingletons.__eq__": [[83, 89], ["isinstance", "prediction_singletons.PredictionSingletons.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletons", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singletons.PredictionSingletons.__ne__": [[90, 96], ["isinstance", "prediction_singletons.PredictionSingletons.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletons", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_scores.ActiveLearningScores.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ActiveLearningScores - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_scores.ActiveLearningScores.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "active_learning_scores.ActiveLearningScores.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ActiveLearningScores", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_scores.ActiveLearningScores.to_str": [[75, 78], ["pprint.pformat", "active_learning_scores.ActiveLearningScores.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_scores.ActiveLearningScores.__repr__": [[79, 82], ["active_learning_scores.ActiveLearningScores.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_scores.ActiveLearningScores.__eq__": [[83, 89], ["isinstance", "active_learning_scores.ActiveLearningScores.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScores", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.active_learning_scores.ActiveLearningScores.__ne__": [[90, 96], ["isinstance", "active_learning_scores.ActiveLearningScores.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ActiveLearningScores", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "has_more", "=", "None", ",", "cursor", "=", "None", ",", "data", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceRawSamplesPredictionsData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_has_more", "=", "None", "\n", "self", ".", "_cursor", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "has_more", "=", "has_more", "\n", "self", ".", "cursor", "=", "cursor", "\n", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.has_more": [[73, 86], ["ValueError"], "methods", ["None"], ["", "@", "has_more", ".", "setter", "\n", "def", "has_more", "(", "self", ",", "has_more", ")", ":", "\n", "        ", "\"\"\"Sets the has_more of this DatasourceRawSamplesPredictionsData.\n\n        Set to `false` if end of list is reached. Otherwise `true`.  # noqa: E501\n\n        :param has_more: The has_more of this DatasourceRawSamplesPredictionsData.  # noqa: E501\n        :type: bool\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "has_more", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `has_more`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_has_more", "=", "has_more", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.cursor": [[98, 111], ["ValueError"], "methods", ["None"], ["", "@", "cursor", ".", "setter", "\n", "def", "cursor", "(", "self", ",", "cursor", ")", ":", "\n", "        ", "\"\"\"Sets the cursor of this DatasourceRawSamplesPredictionsData.\n\n        A cursor that indicates the current position in the list. Must be passed to future requests to continue reading from the same list.   # noqa: E501\n\n        :param cursor: The cursor of this DatasourceRawSamplesPredictionsData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "cursor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `cursor`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_cursor", "=", "cursor", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.data": [[123, 136], ["ValueError"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Sets the data of this DatasourceRawSamplesPredictionsData.\n\n        Array containing the raw samples prediction objects  # noqa: E501\n\n        :param data: The data of this DatasourceRawSamplesPredictionsData.  # noqa: E501\n        :type: list[DatasourceRawSamplesPredictionsDataRow]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.to_dict": [[137, 163], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceRawSamplesPredictionsData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.to_str": [[164, 167], ["pprint.pformat", "datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.__repr__": [[168, 171], ["datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.__eq__": [[172, 178], ["isinstance", "datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesPredictionsData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.__ne__": [[179, 185], ["isinstance", "datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesPredictionsData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.__init__": [[55, 81], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "new_tag_name", "=", "None", ",", "method", "=", "None", ",", "config", "=", "None", ",", "preselected_tag_id", "=", "None", ",", "query_tag_id", "=", "None", ",", "score_type", "=", "None", ",", "row_count", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SamplingCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_new_tag_name", "=", "None", "\n", "self", ".", "_method", "=", "None", "\n", "self", ".", "_config", "=", "None", "\n", "self", ".", "_preselected_tag_id", "=", "None", "\n", "self", ".", "_query_tag_id", "=", "None", "\n", "self", ".", "_score_type", "=", "None", "\n", "self", ".", "_row_count", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "new_tag_name", "=", "new_tag_name", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "config", "=", "config", "\n", "if", "preselected_tag_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "preselected_tag_id", "=", "preselected_tag_id", "\n", "", "if", "query_tag_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "query_tag_id", "=", "query_tag_id", "\n", "", "if", "score_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "score_type", "=", "score_type", "\n", "", "if", "row_count", "is", "not", "None", ":", "\n", "            ", "self", ".", "row_count", "=", "row_count", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.new_tag_name": [[92, 104], ["ValueError"], "methods", ["None"], ["", "@", "new_tag_name", ".", "setter", "\n", "def", "new_tag_name", "(", "self", ",", "new_tag_name", ")", ":", "\n", "        ", "\"\"\"Sets the new_tag_name of this SamplingCreateRequest.\n\n\n        :param new_tag_name: The new_tag_name of this SamplingCreateRequest.  # noqa: E501\n        :type: TagName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "new_tag_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `new_tag_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_new_tag_name", "=", "new_tag_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.method": [[115, 127], ["ValueError"], "methods", ["None"], ["", "@", "method", ".", "setter", "\n", "def", "method", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"Sets the method of this SamplingCreateRequest.\n\n\n        :param method: The method of this SamplingCreateRequest.  # noqa: E501\n        :type: SamplingMethod\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "method", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `method`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_method", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.config": [[138, 150], ["ValueError"], "methods", ["None"], ["", "@", "config", ".", "setter", "\n", "def", "config", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"Sets the config of this SamplingCreateRequest.\n\n\n        :param config: The config of this SamplingCreateRequest.  # noqa: E501\n        :type: SamplingConfig\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "config", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `config`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.preselected_tag_id": [[161, 171], ["None"], "methods", ["None"], ["", "@", "preselected_tag_id", ".", "setter", "\n", "def", "preselected_tag_id", "(", "self", ",", "preselected_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the preselected_tag_id of this SamplingCreateRequest.\n\n\n        :param preselected_tag_id: The preselected_tag_id of this SamplingCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_preselected_tag_id", "=", "preselected_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.query_tag_id": [[182, 192], ["None"], "methods", ["None"], ["", "@", "query_tag_id", ".", "setter", "\n", "def", "query_tag_id", "(", "self", ",", "query_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the query_tag_id of this SamplingCreateRequest.\n\n\n        :param query_tag_id: The query_tag_id of this SamplingCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_query_tag_id", "=", "query_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.score_type": [[203, 213], ["None"], "methods", ["None"], ["", "@", "score_type", ".", "setter", "\n", "def", "score_type", "(", "self", ",", "score_type", ")", ":", "\n", "        ", "\"\"\"Sets the score_type of this SamplingCreateRequest.\n\n\n        :param score_type: The score_type of this SamplingCreateRequest.  # noqa: E501\n        :type: ActiveLearningScoreType\n        \"\"\"", "\n", "\n", "self", ".", "_score_type", "=", "score_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.row_count": [[225, 236], ["None"], "methods", ["None"], ["", "@", "row_count", ".", "setter", "\n", "def", "row_count", "(", "self", ",", "row_count", ")", ":", "\n", "        ", "\"\"\"Sets the row_count of this SamplingCreateRequest.\n\n        temporary rowCount until the API/DB is aware how many they are..  # noqa: E501\n\n        :param row_count: The row_count of this SamplingCreateRequest.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "\n", "self", ".", "_row_count", "=", "row_count", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.to_dict": [[237, 263], ["six.iteritems", "issubclass", "getattr", "isinstance", "sampling_create_request.SamplingCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SamplingCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.to_str": [[264, 267], ["pprint.pformat", "sampling_create_request.SamplingCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.__repr__": [[268, 271], ["sampling_create_request.SamplingCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.__eq__": [[272, 278], ["isinstance", "sampling_create_request.SamplingCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.__ne__": [[279, 285], ["isinstance", "sampling_create_request.SamplingCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.__init__": [[61, 99], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "custom", "=", "None", ",", "dynamic", "=", "None", ",", "sharpness", "=", "None", ",", "size_in_bytes", "=", "None", ",", "snr", "=", "None", ",", "mean", "=", "None", ",", "shape", "=", "None", ",", "std", "=", "None", ",", "sum_of_squares", "=", "None", ",", "sum_of_values", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SampleMetaData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_custom", "=", "None", "\n", "self", ".", "_dynamic", "=", "None", "\n", "self", ".", "_sharpness", "=", "None", "\n", "self", ".", "_size_in_bytes", "=", "None", "\n", "self", ".", "_snr", "=", "None", "\n", "self", ".", "_mean", "=", "None", "\n", "self", ".", "_shape", "=", "None", "\n", "self", ".", "_std", "=", "None", "\n", "self", ".", "_sum_of_squares", "=", "None", "\n", "self", ".", "_sum_of_values", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "custom", "is", "not", "None", ":", "\n", "            ", "self", ".", "custom", "=", "custom", "\n", "", "if", "dynamic", "is", "not", "None", ":", "\n", "            ", "self", ".", "dynamic", "=", "dynamic", "\n", "", "if", "sharpness", "is", "not", "None", ":", "\n", "            ", "self", ".", "sharpness", "=", "sharpness", "\n", "", "if", "size_in_bytes", "is", "not", "None", ":", "\n", "            ", "self", ".", "size_in_bytes", "=", "size_in_bytes", "\n", "", "if", "snr", "is", "not", "None", ":", "\n", "            ", "self", ".", "snr", "=", "snr", "\n", "", "if", "mean", "is", "not", "None", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "", "if", "shape", "is", "not", "None", ":", "\n", "            ", "self", ".", "shape", "=", "shape", "\n", "", "if", "std", "is", "not", "None", ":", "\n", "            ", "self", ".", "std", "=", "std", "\n", "", "if", "sum_of_squares", "is", "not", "None", ":", "\n", "            ", "self", ".", "sum_of_squares", "=", "sum_of_squares", "\n", "", "if", "sum_of_values", "is", "not", "None", ":", "\n", "            ", "self", ".", "sum_of_values", "=", "sum_of_values", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.custom": [[110, 120], ["None"], "methods", ["None"], ["", "@", "custom", ".", "setter", "\n", "def", "custom", "(", "self", ",", "custom", ")", ":", "\n", "        ", "\"\"\"Sets the custom of this SampleMetaData.\n\n\n        :param custom: The custom of this SampleMetaData.  # noqa: E501\n        :type: dict(str, object)\n        \"\"\"", "\n", "\n", "self", ".", "_custom", "=", "custom", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.dynamic": [[131, 141], ["None"], "methods", ["None"], ["", "@", "dynamic", ".", "setter", "\n", "def", "dynamic", "(", "self", ",", "dynamic", ")", ":", "\n", "        ", "\"\"\"Sets the dynamic of this SampleMetaData.\n\n\n        :param dynamic: The dynamic of this SampleMetaData.  # noqa: E501\n        :type: dict(str, object)\n        \"\"\"", "\n", "\n", "self", ".", "_dynamic", "=", "dynamic", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.sharpness": [[152, 162], ["None"], "methods", ["None"], ["", "@", "sharpness", ".", "setter", "\n", "def", "sharpness", "(", "self", ",", "sharpness", ")", ":", "\n", "        ", "\"\"\"Sets the sharpness of this SampleMetaData.\n\n\n        :param sharpness: The sharpness of this SampleMetaData.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "\n", "self", ".", "_sharpness", "=", "sharpness", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.size_in_bytes": [[173, 183], ["None"], "methods", ["None"], ["", "@", "size_in_bytes", ".", "setter", "\n", "def", "size_in_bytes", "(", "self", ",", "size_in_bytes", ")", ":", "\n", "        ", "\"\"\"Sets the size_in_bytes of this SampleMetaData.\n\n\n        :param size_in_bytes: The size_in_bytes of this SampleMetaData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "\n", "self", ".", "_size_in_bytes", "=", "size_in_bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.snr": [[194, 204], ["None"], "methods", ["None"], ["", "@", "snr", ".", "setter", "\n", "def", "snr", "(", "self", ",", "snr", ")", ":", "\n", "        ", "\"\"\"Sets the snr of this SampleMetaData.\n\n\n        :param snr: The snr of this SampleMetaData.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "\n", "self", ".", "_snr", "=", "snr", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean": [[215, 225], ["None"], "methods", ["None"], ["", "@", "mean", ".", "setter", "\n", "def", "mean", "(", "self", ",", "mean", ")", ":", "\n", "        ", "\"\"\"Sets the mean of this SampleMetaData.\n\n\n        :param mean: The mean of this SampleMetaData.  # noqa: E501\n        :type: list[float]\n        \"\"\"", "\n", "\n", "self", ".", "_mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.shape": [[236, 246], ["None"], "methods", ["None"], ["", "@", "shape", ".", "setter", "\n", "def", "shape", "(", "self", ",", "shape", ")", ":", "\n", "        ", "\"\"\"Sets the shape of this SampleMetaData.\n\n\n        :param shape: The shape of this SampleMetaData.  # noqa: E501\n        :type: list[int]\n        \"\"\"", "\n", "\n", "self", ".", "_shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.std": [[257, 267], ["None"], "methods", ["None"], ["", "@", "std", ".", "setter", "\n", "def", "std", "(", "self", ",", "std", ")", ":", "\n", "        ", "\"\"\"Sets the std of this SampleMetaData.\n\n\n        :param std: The std of this SampleMetaData.  # noqa: E501\n        :type: list[float]\n        \"\"\"", "\n", "\n", "self", ".", "_std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.sum_of_squares": [[278, 288], ["None"], "methods", ["None"], ["", "@", "sum_of_squares", ".", "setter", "\n", "def", "sum_of_squares", "(", "self", ",", "sum_of_squares", ")", ":", "\n", "        ", "\"\"\"Sets the sum_of_squares of this SampleMetaData.\n\n\n        :param sum_of_squares: The sum_of_squares of this SampleMetaData.  # noqa: E501\n        :type: list[float]\n        \"\"\"", "\n", "\n", "self", ".", "_sum_of_squares", "=", "sum_of_squares", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.sum_of_values": [[299, 309], ["None"], "methods", ["None"], ["", "@", "sum_of_values", ".", "setter", "\n", "def", "sum_of_values", "(", "self", ",", "sum_of_values", ")", ":", "\n", "        ", "\"\"\"Sets the sum_of_values of this SampleMetaData.\n\n\n        :param sum_of_values: The sum_of_values of this SampleMetaData.  # noqa: E501\n        :type: list[float]\n        \"\"\"", "\n", "\n", "self", ".", "_sum_of_values", "=", "sum_of_values", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.to_dict": [[310, 336], ["six.iteritems", "issubclass", "getattr", "isinstance", "sample_meta_data.SampleMetaData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SampleMetaData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.to_str": [[337, 340], ["pprint.pformat", "sample_meta_data.SampleMetaData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.__repr__": [[341, 344], ["sample_meta_data.SampleMetaData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.__eq__": [[345, 351], ["isinstance", "sample_meta_data.SampleMetaData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleMetaData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.__ne__": [[352, 358], ["isinstance", "sample_meta_data.SampleMetaData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SampleMetaData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.__init__": [[47, 63], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "docker_version", "=", "None", ",", "dataset_id", "=", "None", ",", "message", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_docker_version", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_message", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "docker_version", "=", "docker_version", "\n", "if", "dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_id", "=", "dataset_id", "\n", "", "if", "message", "is", "not", "None", ":", "\n", "            ", "self", ".", "message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.docker_version": [[74, 86], ["ValueError"], "methods", ["None"], ["", "@", "docker_version", ".", "setter", "\n", "def", "docker_version", "(", "self", ",", "docker_version", ")", ":", "\n", "        ", "\"\"\"Sets the docker_version of this DockerRunCreateRequest.\n\n\n        :param docker_version: The docker_version of this DockerRunCreateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "docker_version", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `docker_version`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_docker_version", "=", "docker_version", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.dataset_id": [[97, 107], ["None"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this DockerRunCreateRequest.\n\n\n        :param dataset_id: The dataset_id of this DockerRunCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.message": [[118, 128], ["None"], "methods", ["None"], ["", "@", "message", ".", "setter", "\n", "def", "message", "(", "self", ",", "message", ")", ":", "\n", "        ", "\"\"\"Sets the message of this DockerRunCreateRequest.\n\n\n        :param message: The message of this DockerRunCreateRequest.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.to_dict": [[129, 155], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_create_request.DockerRunCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.to_str": [[156, 159], ["pprint.pformat", "docker_run_create_request.DockerRunCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.__repr__": [[160, 163], ["docker_run_create_request.DockerRunCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.__eq__": [[164, 170], ["isinstance", "docker_run_create_request.DockerRunCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_create_request.DockerRunCreateRequest.__ne__": [[171, 177], ["isinstance", "docker_run_create_request.DockerRunCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.__init__": [[55, 77], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "owner", "=", "None", ",", "access_type", "=", "None", ",", "users", "=", "None", ",", "organizations", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SharedAccessConfigData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_owner", "=", "None", "\n", "self", ".", "_access_type", "=", "None", "\n", "self", ".", "_users", "=", "None", "\n", "self", ".", "_organizations", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "owner", "=", "owner", "\n", "self", ".", "access_type", "=", "access_type", "\n", "self", ".", "users", "=", "users", "\n", "self", ".", "organizations", "=", "organizations", "\n", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.id": [[88, 100], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this SharedAccessConfigData.\n\n\n        :param id: The id of this SharedAccessConfigData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.owner": [[112, 125], ["ValueError"], "methods", ["None"], ["", "@", "owner", ".", "setter", "\n", "def", "owner", "(", "self", ",", "owner", ")", ":", "\n", "        ", "\"\"\"Sets the owner of this SharedAccessConfigData.\n\n        Id of the user who owns the dataset  # noqa: E501\n\n        :param owner: The owner of this SharedAccessConfigData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "owner", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `owner`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_owner", "=", "owner", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.access_type": [[136, 148], ["ValueError"], "methods", ["None"], ["", "@", "access_type", ".", "setter", "\n", "def", "access_type", "(", "self", ",", "access_type", ")", ":", "\n", "        ", "\"\"\"Sets the access_type of this SharedAccessConfigData.\n\n\n        :param access_type: The access_type of this SharedAccessConfigData.  # noqa: E501\n        :type: SharedAccessType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "access_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `access_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_access_type", "=", "access_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.users": [[160, 173], ["ValueError"], "methods", ["None"], ["", "@", "users", ".", "setter", "\n", "def", "users", "(", "self", ",", "users", ")", ":", "\n", "        ", "\"\"\"Sets the users of this SharedAccessConfigData.\n\n        List of user mails with access to the dataset  # noqa: E501\n\n        :param users: The users of this SharedAccessConfigData.  # noqa: E501\n        :type: list[str]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "users", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `users`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_users", "=", "users", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.organizations": [[185, 198], ["ValueError"], "methods", ["None"], ["", "@", "organizations", ".", "setter", "\n", "def", "organizations", "(", "self", ",", "organizations", ")", ":", "\n", "        ", "\"\"\"Sets the organizations of this SharedAccessConfigData.\n\n        List of organizations with access to the dataset  # noqa: E501\n\n        :param organizations: The organizations of this SharedAccessConfigData.  # noqa: E501\n        :type: list[str]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "organizations", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `organizations`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_organizations", "=", "organizations", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.created_at": [[209, 221], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this SharedAccessConfigData.\n\n\n        :param created_at: The created_at of this SharedAccessConfigData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.last_modified_at": [[232, 244], ["ValueError"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this SharedAccessConfigData.\n\n\n        :param last_modified_at: The last_modified_at of this SharedAccessConfigData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "last_modified_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `last_modified_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.to_dict": [[245, 271], ["six.iteritems", "issubclass", "getattr", "isinstance", "shared_access_config_data.SharedAccessConfigData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SharedAccessConfigData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.to_str": [[272, 275], ["pprint.pformat", "shared_access_config_data.SharedAccessConfigData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.__repr__": [[276, 279], ["shared_access_config_data.SharedAccessConfigData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.__eq__": [[280, 286], ["isinstance", "shared_access_config_data.SharedAccessConfigData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SharedAccessConfigData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.shared_access_config_data.SharedAccessConfigData.__ne__": [[287, 293], ["isinstance", "shared_access_config_data.SharedAccessConfigData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SharedAccessConfigData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "type", "=", "None", ",", "categories", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionTaskSchema - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_categories", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.name": [[72, 84], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this PredictionTaskSchema.\n\n\n        :param name: The name of this PredictionTaskSchema.  # noqa: E501\n        :type: TaskName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.type": [[95, 107], ["ValueError"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this PredictionTaskSchema.\n\n\n        :param type: The type of this PredictionTaskSchema.  # noqa: E501\n        :type: TaskType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.categories": [[119, 132], ["ValueError"], "methods", ["None"], ["", "@", "categories", ".", "setter", "\n", "def", "categories", "(", "self", ",", "categories", ")", ":", "\n", "        ", "\"\"\"Sets the categories of this PredictionTaskSchema.\n\n        An array of the categories that exist for this prediction task. The id needs to be unique  # noqa: E501\n\n        :param categories: The categories of this PredictionTaskSchema.  # noqa: E501\n        :type: list[PredictionTaskSchemaCategory]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "categories", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `categories`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.to_dict": [[133, 159], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_task_schema.PredictionTaskSchema.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionTaskSchema", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.to_str": [[160, 163], ["pprint.pformat", "prediction_task_schema.PredictionTaskSchema.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.__repr__": [[164, 167], ["prediction_task_schema.PredictionTaskSchema.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.__eq__": [[168, 174], ["isinstance", "prediction_task_schema.PredictionTaskSchema.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionTaskSchema", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema.PredictionTaskSchema.__ne__": [[175, 181], ["isinstance", "prediction_task_schema.PredictionTaskSchema.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionTaskSchema", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.__init__": [[45, 59], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "name", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionTaskSchemaCategory - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "id", "is", "not", "None", ":", "\n", "            ", "self", ".", "id", "=", "id", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.id": [[70, 80], ["None"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this PredictionTaskSchemaCategory.\n\n\n        :param id: The id of this PredictionTaskSchemaCategory.  # noqa: E501\n        :type: CategoryId\n        \"\"\"", "\n", "\n", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.name": [[91, 101], ["None"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this PredictionTaskSchemaCategory.\n\n\n        :param name: The name of this PredictionTaskSchemaCategory.  # noqa: E501\n        :type: CategoryName\n        \"\"\"", "\n", "\n", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.to_dict": [[102, 128], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_task_schema_category.PredictionTaskSchemaCategory.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionTaskSchemaCategory", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.to_str": [[129, 132], ["pprint.pformat", "prediction_task_schema_category.PredictionTaskSchemaCategory.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.__repr__": [[133, 136], ["prediction_task_schema_category.PredictionTaskSchemaCategory.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.__eq__": [[137, 143], ["isinstance", "prediction_task_schema_category.PredictionTaskSchemaCategory.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionTaskSchemaCategory", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_task_schema_category.PredictionTaskSchemaCategory.__ne__": [[144, 150], ["isinstance", "prediction_task_schema_category.PredictionTaskSchemaCategory.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionTaskSchemaCategory", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.__init__": [[63, 97], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "dataset_id", "=", "None", ",", "prev_tag_id", "=", "None", ",", "query_tag_id", "=", "None", ",", "preselected_tag_id", "=", "None", ",", "name", "=", "None", ",", "bit_mask_data", "=", "None", ",", "tot_size", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "changes", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_dataset_id", "=", "None", "\n", "self", ".", "_prev_tag_id", "=", "None", "\n", "self", ".", "_query_tag_id", "=", "None", "\n", "self", ".", "_preselected_tag_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_bit_mask_data", "=", "None", "\n", "self", ".", "_tot_size", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "_changes", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "dataset_id", "=", "dataset_id", "\n", "self", ".", "prev_tag_id", "=", "prev_tag_id", "\n", "if", "query_tag_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "query_tag_id", "=", "query_tag_id", "\n", "", "if", "preselected_tag_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "preselected_tag_id", "=", "preselected_tag_id", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "bit_mask_data", "=", "bit_mask_data", "\n", "self", ".", "tot_size", "=", "tot_size", "\n", "self", ".", "created_at", "=", "created_at", "\n", "if", "last_modified_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "", "if", "changes", "is", "not", "None", ":", "\n", "            ", "self", ".", "changes", "=", "changes", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.id": [[108, 120], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this TagData.\n\n\n        :param id: The id of this TagData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.dataset_id": [[131, 143], ["ValueError"], "methods", ["None"], ["", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the dataset_id of this TagData.\n\n\n        :param dataset_id: The dataset_id of this TagData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "dataset_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `dataset_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.prev_tag_id": [[155, 166], ["None"], "methods", ["None"], ["", "@", "prev_tag_id", ".", "setter", "\n", "def", "prev_tag_id", "(", "self", ",", "prev_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the prev_tag_id of this TagData.\n\n        MongoObjectID or null.  Generally: The prevTagId is this tag's parent, i.e. it is a superset of this tag. Sampler: The prevTagId is the initial-tag if there was no preselectedTagId, otherwise, it's the preselectedTagId.   # noqa: E501\n\n        :param prev_tag_id: The prev_tag_id of this TagData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_prev_tag_id", "=", "prev_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.query_tag_id": [[177, 187], ["None"], "methods", ["None"], ["", "@", "query_tag_id", ".", "setter", "\n", "def", "query_tag_id", "(", "self", ",", "query_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the query_tag_id of this TagData.\n\n\n        :param query_tag_id: The query_tag_id of this TagData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_query_tag_id", "=", "query_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.preselected_tag_id": [[198, 208], ["None"], "methods", ["None"], ["", "@", "preselected_tag_id", ".", "setter", "\n", "def", "preselected_tag_id", "(", "self", ",", "preselected_tag_id", ")", ":", "\n", "        ", "\"\"\"Sets the preselected_tag_id of this TagData.\n\n\n        :param preselected_tag_id: The preselected_tag_id of this TagData.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_preselected_tag_id", "=", "preselected_tag_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.name": [[219, 231], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this TagData.\n\n\n        :param name: The name of this TagData.  # noqa: E501\n        :type: TagName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.bit_mask_data": [[242, 254], ["ValueError"], "methods", ["None"], ["", "@", "bit_mask_data", ".", "setter", "\n", "def", "bit_mask_data", "(", "self", ",", "bit_mask_data", ")", ":", "\n", "        ", "\"\"\"Sets the bit_mask_data of this TagData.\n\n\n        :param bit_mask_data: The bit_mask_data of this TagData.  # noqa: E501\n        :type: TagBitMaskData\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "bit_mask_data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `bit_mask_data`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_bit_mask_data", "=", "bit_mask_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.tot_size": [[265, 277], ["ValueError"], "methods", ["None"], ["", "@", "tot_size", ".", "setter", "\n", "def", "tot_size", "(", "self", ",", "tot_size", ")", ":", "\n", "        ", "\"\"\"Sets the tot_size of this TagData.\n\n\n        :param tot_size: The tot_size of this TagData.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "tot_size", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `tot_size`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_tot_size", "=", "tot_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.created_at": [[288, 300], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this TagData.\n\n\n        :param created_at: The created_at of this TagData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.last_modified_at": [[311, 321], ["None"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this TagData.\n\n\n        :param last_modified_at: The last_modified_at of this TagData.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "\n", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.changes": [[332, 342], ["None"], "methods", ["None"], ["", "@", "changes", ".", "setter", "\n", "def", "changes", "(", "self", ",", "changes", ")", ":", "\n", "        ", "\"\"\"Sets the changes of this TagData.\n\n\n        :param changes: The changes of this TagData.  # noqa: E501\n        :type: TagChangeData\n        \"\"\"", "\n", "\n", "self", ".", "_changes", "=", "changes", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.to_dict": [[343, 369], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_data.TagData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.to_str": [[370, 373], ["pprint.pformat", "tag_data.TagData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.__repr__": [[374, 377], ["tag_data.TagData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.__eq__": [[378, 384], ["isinstance", "tag_data.TagData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_data.TagData.__ne__": [[385, 391], ["isinstance", "tag_data.TagData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_priority.DockerRunScheduledPriority.__init__": [[49, 55], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunScheduledPriority - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_priority.DockerRunScheduledPriority.to_dict": [[56, 82], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_scheduled_priority.DockerRunScheduledPriority.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunScheduledPriority", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_priority.DockerRunScheduledPriority.to_str": [[83, 86], ["pprint.pformat", "docker_run_scheduled_priority.DockerRunScheduledPriority.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_priority.DockerRunScheduledPriority.__repr__": [[87, 90], ["docker_run_scheduled_priority.DockerRunScheduledPriority.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_priority.DockerRunScheduledPriority.__eq__": [[91, 97], ["isinstance", "docker_run_scheduled_priority.DockerRunScheduledPriority.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledPriority", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_scheduled_priority.DockerRunScheduledPriority.__ne__": [[98, 104], ["isinstance", "docker_run_scheduled_priority.DockerRunScheduledPriority.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunScheduledPriority", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_state.DockerRunState.__init__": [[59, 65], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerRunState - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_state.DockerRunState.to_dict": [[66, 92], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_run_state.DockerRunState.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerRunState", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_state.DockerRunState.to_str": [[93, 96], ["pprint.pformat", "docker_run_state.DockerRunState.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_state.DockerRunState.__repr__": [[97, 100], ["docker_run_state.DockerRunState.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_state.DockerRunState.__eq__": [[101, 107], ["isinstance", "docker_run_state.DockerRunState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunState", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_state.DockerRunState.__ne__": [[108, 114], ["isinstance", "docker_run_state.DockerRunState.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerRunState", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.score.Score.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"Score - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.score.Score.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "score.Score.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "Score", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.score.Score.to_str": [[75, 78], ["pprint.pformat", "score.Score.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.score.Score.__repr__": [[79, 82], ["score.Score.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.score.Score.__eq__": [[83, 89], ["isinstance", "score.Score.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Score", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.score.Score.__ne__": [[90, 96], ["isinstance", "score.Score.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Score", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", "=", "None", ",", "read_url", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasourceRawSamplesDataRow - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_file_name", "=", "None", "\n", "self", ".", "_read_url", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "file_name", "=", "file_name", "\n", "self", ".", "read_url", "=", "read_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.file_name": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "file_name", ".", "setter", "\n", "def", "file_name", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Sets the file_name of this DatasourceRawSamplesDataRow.\n\n\n        :param file_name: The file_name of this DatasourceRawSamplesDataRow.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "file_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `file_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.read_url": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "read_url", ".", "setter", "\n", "def", "read_url", "(", "self", ",", "read_url", ")", ":", "\n", "        ", "\"\"\"Sets the read_url of this DatasourceRawSamplesDataRow.\n\n\n        :param read_url: The read_url of this DatasourceRawSamplesDataRow.  # noqa: E501\n        :type: ReadUrl\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "read_url", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `read_url`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_read_url", "=", "read_url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasourceRawSamplesDataRow", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.to_str": [[131, 134], ["pprint.pformat", "datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.__repr__": [[135, 138], ["datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.__eq__": [[139, 145], ["isinstance", "datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesDataRow", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.__ne__": [[146, 152], ["isinstance", "datasource_raw_samples_data_row.DatasourceRawSamplesDataRow.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasourceRawSamplesDataRow", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.__init__": [[51, 71], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tag_id1", "=", "None", ",", "tag_id2", "=", "None", ",", "operation", "=", "None", ",", "new_tag_name", "=", "None", ",", "creator", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagArithmeticsRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_tag_id1", "=", "None", "\n", "self", ".", "_tag_id2", "=", "None", "\n", "self", ".", "_operation", "=", "None", "\n", "self", ".", "_new_tag_name", "=", "None", "\n", "self", ".", "_creator", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "tag_id1", "=", "tag_id1", "\n", "self", ".", "tag_id2", "=", "tag_id2", "\n", "self", ".", "operation", "=", "operation", "\n", "if", "new_tag_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "new_tag_name", "=", "new_tag_name", "\n", "", "if", "creator", "is", "not", "None", ":", "\n", "            ", "self", ".", "creator", "=", "creator", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.tag_id1": [[82, 94], ["ValueError"], "methods", ["None"], ["", "@", "tag_id1", ".", "setter", "\n", "def", "tag_id1", "(", "self", ",", "tag_id1", ")", ":", "\n", "        ", "\"\"\"Sets the tag_id1 of this TagArithmeticsRequest.\n\n\n        :param tag_id1: The tag_id1 of this TagArithmeticsRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "tag_id1", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `tag_id1`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_tag_id1", "=", "tag_id1", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.tag_id2": [[105, 117], ["ValueError"], "methods", ["None"], ["", "@", "tag_id2", ".", "setter", "\n", "def", "tag_id2", "(", "self", ",", "tag_id2", ")", ":", "\n", "        ", "\"\"\"Sets the tag_id2 of this TagArithmeticsRequest.\n\n\n        :param tag_id2: The tag_id2 of this TagArithmeticsRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "tag_id2", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `tag_id2`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_tag_id2", "=", "tag_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.operation": [[128, 140], ["ValueError"], "methods", ["None"], ["", "@", "operation", ".", "setter", "\n", "def", "operation", "(", "self", ",", "operation", ")", ":", "\n", "        ", "\"\"\"Sets the operation of this TagArithmeticsRequest.\n\n\n        :param operation: The operation of this TagArithmeticsRequest.  # noqa: E501\n        :type: TagArithmeticsOperation\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "operation", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `operation`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_operation", "=", "operation", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.new_tag_name": [[151, 161], ["None"], "methods", ["None"], ["", "@", "new_tag_name", ".", "setter", "\n", "def", "new_tag_name", "(", "self", ",", "new_tag_name", ")", ":", "\n", "        ", "\"\"\"Sets the new_tag_name of this TagArithmeticsRequest.\n\n\n        :param new_tag_name: The new_tag_name of this TagArithmeticsRequest.  # noqa: E501\n        :type: TagName\n        \"\"\"", "\n", "\n", "self", ".", "_new_tag_name", "=", "new_tag_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.creator": [[172, 182], ["None"], "methods", ["None"], ["", "@", "creator", ".", "setter", "\n", "def", "creator", "(", "self", ",", "creator", ")", ":", "\n", "        ", "\"\"\"Sets the creator of this TagArithmeticsRequest.\n\n\n        :param creator: The creator of this TagArithmeticsRequest.  # noqa: E501\n        :type: TagCreator\n        \"\"\"", "\n", "\n", "self", ".", "_creator", "=", "creator", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.to_dict": [[183, 209], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_arithmetics_request.TagArithmeticsRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagArithmeticsRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.to_str": [[210, 213], ["pprint.pformat", "tag_arithmetics_request.TagArithmeticsRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.__repr__": [[214, 217], ["tag_arithmetics_request.TagArithmeticsRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.__eq__": [[218, 224], ["isinstance", "tag_arithmetics_request.TagArithmeticsRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagArithmeticsRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_arithmetics_request.TagArithmeticsRequest.__ne__": [[225, 231], ["isinstance", "tag_arithmetics_request.TagArithmeticsRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagArithmeticsRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dimensionality_reduction_method.DimensionalityReductionMethod.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DimensionalityReductionMethod - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dimensionality_reduction_method.DimensionalityReductionMethod.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "dimensionality_reduction_method.DimensionalityReductionMethod.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DimensionalityReductionMethod", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dimensionality_reduction_method.DimensionalityReductionMethod.to_str": [[82, 85], ["pprint.pformat", "dimensionality_reduction_method.DimensionalityReductionMethod.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dimensionality_reduction_method.DimensionalityReductionMethod.__repr__": [[86, 89], ["dimensionality_reduction_method.DimensionalityReductionMethod.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dimensionality_reduction_method.DimensionalityReductionMethod.__eq__": [[90, 96], ["isinstance", "dimensionality_reduction_method.DimensionalityReductionMethod.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DimensionalityReductionMethod", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dimensionality_reduction_method.DimensionalityReductionMethod.__ne__": [[97, 103], ["isinstance", "dimensionality_reduction_method.DimensionalityReductionMethod.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DimensionalityReductionMethod", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_tasks.LabelStudioTasks.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"LabelStudioTasks - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_tasks.LabelStudioTasks.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "label_studio_tasks.LabelStudioTasks.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "LabelStudioTasks", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_tasks.LabelStudioTasks.to_str": [[75, 78], ["pprint.pformat", "label_studio_tasks.LabelStudioTasks.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_tasks.LabelStudioTasks.__repr__": [[79, 82], ["label_studio_tasks.LabelStudioTasks.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_tasks.LabelStudioTasks.__eq__": [[83, 89], ["isinstance", "label_studio_tasks.LabelStudioTasks.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelStudioTasks", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_tasks.LabelStudioTasks.__ne__": [[90, 96], ["isinstance", "label_studio_tasks.LabelStudioTasks.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelStudioTasks", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_value_data_type.ConfigurationValueDataType.__init__": [[53, 59], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"ConfigurationValueDataType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_value_data_type.ConfigurationValueDataType.to_dict": [[60, 86], ["six.iteritems", "issubclass", "getattr", "isinstance", "configuration_value_data_type.ConfigurationValueDataType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "ConfigurationValueDataType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_value_data_type.ConfigurationValueDataType.to_str": [[87, 90], ["pprint.pformat", "configuration_value_data_type.ConfigurationValueDataType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_value_data_type.ConfigurationValueDataType.__repr__": [[91, 94], ["configuration_value_data_type.ConfigurationValueDataType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_value_data_type.ConfigurationValueDataType.__eq__": [[95, 101], ["isinstance", "configuration_value_data_type.ConfigurationValueDataType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationValueDataType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.configuration_value_data_type.ConfigurationValueDataType.__ne__": [[102, 108], ["isinstance", "configuration_value_data_type.ConfigurationValueDataType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "ConfigurationValueDataType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.__init__": [[47, 61], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "worker_type", "=", "None", ",", "docker", "=", "None", ",", "lightly", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerWorkerConfig - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_worker_type", "=", "None", "\n", "self", ".", "_docker", "=", "None", "\n", "self", ".", "_lightly", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "worker_type", "=", "worker_type", "\n", "self", ".", "docker", "=", "docker", "\n", "self", ".", "lightly", "=", "lightly", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.worker_type": [[72, 84], ["ValueError"], "methods", ["None"], ["", "@", "worker_type", ".", "setter", "\n", "def", "worker_type", "(", "self", ",", "worker_type", ")", ":", "\n", "        ", "\"\"\"Sets the worker_type of this DockerWorkerConfig.\n\n\n        :param worker_type: The worker_type of this DockerWorkerConfig.  # noqa: E501\n        :type: DockerWorkerType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "worker_type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `worker_type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_worker_type", "=", "worker_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.docker": [[96, 107], ["None"], "methods", ["None"], ["", "@", "docker", ".", "setter", "\n", "def", "docker", "(", "self", ",", "docker", ")", ":", "\n", "        ", "\"\"\"Sets the docker of this DockerWorkerConfig.\n\n        docker run configurations, keys should match the structure of https://github.com/lightly-ai/lightly-core/blob/develop/onprem-docker/resources/docker/docker.yaml   # noqa: E501\n\n        :param docker: The docker of this DockerWorkerConfig.  # noqa: E501\n        :type: dict(str, object)\n        \"\"\"", "\n", "\n", "self", ".", "_docker", "=", "docker", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.lightly": [[119, 130], ["None"], "methods", ["None"], ["", "@", "lightly", ".", "setter", "\n", "def", "lightly", "(", "self", ",", "lightly", ")", ":", "\n", "        ", "\"\"\"Sets the lightly of this DockerWorkerConfig.\n\n        lightly configurations which are passed to a docker run, keys should match structure of https://github.com/lightly-ai/lightly/blob/master/lightly/cli/config/config.yaml   # noqa: E501\n\n        :param lightly: The lightly of this DockerWorkerConfig.  # noqa: E501\n        :type: dict(str, object)\n        \"\"\"", "\n", "\n", "self", ".", "_lightly", "=", "lightly", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.to_dict": [[131, 157], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_worker_config.DockerWorkerConfig.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerWorkerConfig", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.to_str": [[158, 161], ["pprint.pformat", "docker_worker_config.DockerWorkerConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.__repr__": [[162, 165], ["docker_worker_config.DockerWorkerConfig.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.__eq__": [[166, 172], ["isinstance", "docker_worker_config.DockerWorkerConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerConfig", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_config.DockerWorkerConfig.__ne__": [[173, 179], ["isinstance", "docker_worker_config.DockerWorkerConfig.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerConfig", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.__init__": [[47, 63], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image", "=", "None", ",", "lightly_file_name", "=", "None", ",", "lightly_meta_info", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"LabelStudioTaskData - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_image", "=", "None", "\n", "self", ".", "_lightly_file_name", "=", "None", "\n", "self", ".", "_lightly_meta_info", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "image", "=", "image", "\n", "if", "lightly_file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "lightly_file_name", "=", "lightly_file_name", "\n", "", "if", "lightly_meta_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "lightly_meta_info", "=", "lightly_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.image": [[74, 86], ["ValueError"], "methods", ["None"], ["", "@", "image", ".", "setter", "\n", "def", "image", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"Sets the image of this LabelStudioTaskData.\n\n\n        :param image: The image of this LabelStudioTaskData.  # noqa: E501\n        :type: RedirectedReadUrl\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "image", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `image`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_image", "=", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.lightly_file_name": [[98, 109], ["None"], "methods", ["None"], ["", "@", "lightly_file_name", ".", "setter", "\n", "def", "lightly_file_name", "(", "self", ",", "lightly_file_name", ")", ":", "\n", "        ", "\"\"\"Sets the lightly_file_name of this LabelStudioTaskData.\n\n        The original fileName of the sample. This is unique within a dataset  # noqa: E501\n\n        :param lightly_file_name: The lightly_file_name of this LabelStudioTaskData.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "\n", "self", ".", "_lightly_file_name", "=", "lightly_file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.lightly_meta_info": [[120, 130], ["None"], "methods", ["None"], ["", "@", "lightly_meta_info", ".", "setter", "\n", "def", "lightly_meta_info", "(", "self", ",", "lightly_meta_info", ")", ":", "\n", "        ", "\"\"\"Sets the lightly_meta_info of this LabelStudioTaskData.\n\n\n        :param lightly_meta_info: The lightly_meta_info of this LabelStudioTaskData.  # noqa: E501\n        :type: SampleData\n        \"\"\"", "\n", "\n", "self", ".", "_lightly_meta_info", "=", "lightly_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.to_dict": [[131, 157], ["six.iteritems", "issubclass", "getattr", "isinstance", "label_studio_task_data.LabelStudioTaskData.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "LabelStudioTaskData", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.to_str": [[158, 161], ["pprint.pformat", "label_studio_task_data.LabelStudioTaskData.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.__repr__": [[162, 165], ["label_studio_task_data.LabelStudioTaskData.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.__eq__": [[166, 172], ["isinstance", "label_studio_task_data.LabelStudioTaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelStudioTaskData", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_studio_task_data.LabelStudioTaskData.__ne__": [[173, 179], ["isinstance", "label_studio_task_data.LabelStudioTaskData.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelStudioTaskData", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.__init__": [[69, 108], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", "=", "None", ",", "name", "=", "None", ",", "user_id", "=", "None", ",", "access_type", "=", "None", ",", "type", "=", "None", ",", "img_type", "=", "None", ",", "n_samples", "=", "None", ",", "size_in_bytes", "=", "None", ",", "created_at", "=", "None", ",", "last_modified_at", "=", "None", ",", "meta_data_configuration_id", "=", "None", ",", "samples", "=", "None", ",", "n_tags", "=", "None", ",", "n_embeddings", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasetDataEnriched - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_id", "=", "None", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_user_id", "=", "None", "\n", "self", ".", "_access_type", "=", "None", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_img_type", "=", "None", "\n", "self", ".", "_n_samples", "=", "None", "\n", "self", ".", "_size_in_bytes", "=", "None", "\n", "self", ".", "_created_at", "=", "None", "\n", "self", ".", "_last_modified_at", "=", "None", "\n", "self", ".", "_meta_data_configuration_id", "=", "None", "\n", "self", ".", "_samples", "=", "None", "\n", "self", ".", "_n_tags", "=", "None", "\n", "self", ".", "_n_embeddings", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "user_id", "=", "user_id", "\n", "if", "access_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "access_type", "=", "access_type", "\n", "", "self", ".", "type", "=", "type", "\n", "if", "img_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "img_type", "=", "img_type", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "size_in_bytes", "=", "size_in_bytes", "\n", "self", ".", "created_at", "=", "created_at", "\n", "self", ".", "last_modified_at", "=", "last_modified_at", "\n", "if", "meta_data_configuration_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "meta_data_configuration_id", "=", "meta_data_configuration_id", "\n", "", "self", ".", "samples", "=", "samples", "\n", "self", ".", "n_tags", "=", "n_tags", "\n", "self", ".", "n_embeddings", "=", "n_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.id": [[119, 131], ["ValueError"], "methods", ["None"], ["", "@", "id", ".", "setter", "\n", "def", "id", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"Sets the id of this DatasetDataEnriched.\n\n\n        :param id: The id of this DatasetDataEnriched.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.name": [[142, 154], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this DatasetDataEnriched.\n\n\n        :param name: The name of this DatasetDataEnriched.  # noqa: E501\n        :type: DatasetName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.user_id": [[166, 179], ["ValueError"], "methods", ["None"], ["", "@", "user_id", ".", "setter", "\n", "def", "user_id", "(", "self", ",", "user_id", ")", ":", "\n", "        ", "\"\"\"Sets the user_id of this DatasetDataEnriched.\n\n        The owner of the dataset  # noqa: E501\n\n        :param user_id: The user_id of this DatasetDataEnriched.  # noqa: E501\n        :type: str\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "user_id", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `user_id`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_user_id", "=", "user_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.access_type": [[190, 200], ["None"], "methods", ["None"], ["", "@", "access_type", ".", "setter", "\n", "def", "access_type", "(", "self", ",", "access_type", ")", ":", "\n", "        ", "\"\"\"Sets the access_type of this DatasetDataEnriched.\n\n\n        :param access_type: The access_type of this DatasetDataEnriched.  # noqa: E501\n        :type: SharedAccessType\n        \"\"\"", "\n", "\n", "self", ".", "_access_type", "=", "access_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.type": [[211, 223], ["ValueError"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this DatasetDataEnriched.\n\n\n        :param type: The type of this DatasetDataEnriched.  # noqa: E501\n        :type: DatasetType\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "type", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `type`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.img_type": [[234, 244], ["None"], "methods", ["None"], ["", "@", "img_type", ".", "setter", "\n", "def", "img_type", "(", "self", ",", "img_type", ")", ":", "\n", "        ", "\"\"\"Sets the img_type of this DatasetDataEnriched.\n\n\n        :param img_type: The img_type of this DatasetDataEnriched.  # noqa: E501\n        :type: ImageType\n        \"\"\"", "\n", "\n", "self", ".", "_img_type", "=", "img_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.n_samples": [[255, 267], ["ValueError"], "methods", ["None"], ["", "@", "n_samples", ".", "setter", "\n", "def", "n_samples", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"Sets the n_samples of this DatasetDataEnriched.\n\n\n        :param n_samples: The n_samples of this DatasetDataEnriched.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "n_samples", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `n_samples`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_n_samples", "=", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.size_in_bytes": [[278, 290], ["ValueError"], "methods", ["None"], ["", "@", "size_in_bytes", ".", "setter", "\n", "def", "size_in_bytes", "(", "self", ",", "size_in_bytes", ")", ":", "\n", "        ", "\"\"\"Sets the size_in_bytes of this DatasetDataEnriched.\n\n\n        :param size_in_bytes: The size_in_bytes of this DatasetDataEnriched.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "size_in_bytes", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `size_in_bytes`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_size_in_bytes", "=", "size_in_bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.created_at": [[301, 313], ["ValueError"], "methods", ["None"], ["", "@", "created_at", ".", "setter", "\n", "def", "created_at", "(", "self", ",", "created_at", ")", ":", "\n", "        ", "\"\"\"Sets the created_at of this DatasetDataEnriched.\n\n\n        :param created_at: The created_at of this DatasetDataEnriched.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "created_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `created_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_created_at", "=", "created_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.last_modified_at": [[324, 336], ["ValueError"], "methods", ["None"], ["", "@", "last_modified_at", ".", "setter", "\n", "def", "last_modified_at", "(", "self", ",", "last_modified_at", ")", ":", "\n", "        ", "\"\"\"Sets the last_modified_at of this DatasetDataEnriched.\n\n\n        :param last_modified_at: The last_modified_at of this DatasetDataEnriched.  # noqa: E501\n        :type: Timestamp\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "last_modified_at", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `last_modified_at`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_last_modified_at", "=", "last_modified_at", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.meta_data_configuration_id": [[347, 357], ["None"], "methods", ["None"], ["", "@", "meta_data_configuration_id", ".", "setter", "\n", "def", "meta_data_configuration_id", "(", "self", ",", "meta_data_configuration_id", ")", ":", "\n", "        ", "\"\"\"Sets the meta_data_configuration_id of this DatasetDataEnriched.\n\n\n        :param meta_data_configuration_id: The meta_data_configuration_id of this DatasetDataEnriched.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_meta_data_configuration_id", "=", "meta_data_configuration_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.samples": [[368, 380], ["ValueError"], "methods", ["None"], ["", "@", "samples", ".", "setter", "\n", "def", "samples", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Sets the samples of this DatasetDataEnriched.\n\n\n        :param samples: The samples of this DatasetDataEnriched.  # noqa: E501\n        :type: list[MongoObjectID]\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "samples", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `samples`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_samples", "=", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.n_tags": [[391, 403], ["ValueError"], "methods", ["None"], ["", "@", "n_tags", ".", "setter", "\n", "def", "n_tags", "(", "self", ",", "n_tags", ")", ":", "\n", "        ", "\"\"\"Sets the n_tags of this DatasetDataEnriched.\n\n\n        :param n_tags: The n_tags of this DatasetDataEnriched.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "n_tags", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `n_tags`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_n_tags", "=", "n_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.n_embeddings": [[414, 426], ["ValueError"], "methods", ["None"], ["", "@", "n_embeddings", ".", "setter", "\n", "def", "n_embeddings", "(", "self", ",", "n_embeddings", ")", ":", "\n", "        ", "\"\"\"Sets the n_embeddings of this DatasetDataEnriched.\n\n\n        :param n_embeddings: The n_embeddings of this DatasetDataEnriched.  # noqa: E501\n        :type: int\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "n_embeddings", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `n_embeddings`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_n_embeddings", "=", "n_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.to_dict": [[427, 453], ["six.iteritems", "issubclass", "getattr", "isinstance", "dataset_data_enriched.DatasetDataEnriched.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasetDataEnriched", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.to_str": [[454, 457], ["pprint.pformat", "dataset_data_enriched.DatasetDataEnriched.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.__repr__": [[458, 461], ["dataset_data_enriched.DatasetDataEnriched.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.__eq__": [[462, 468], ["isinstance", "dataset_data_enriched.DatasetDataEnriched.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetDataEnriched", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_data_enriched.DatasetDataEnriched.__ne__": [[469, 475], ["isinstance", "dataset_data_enriched.DatasetDataEnriched.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetDataEnriched", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_classification.PredictionSingletonClassification.__init__": [[43, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probabilities", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"PredictionSingletonClassification - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_probabilities", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "probabilities", "is", "not", "None", ":", "\n", "            ", "self", ".", "probabilities", "=", "probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_classification.PredictionSingletonClassification.probabilities": [[65, 75], ["None"], "methods", ["None"], ["", "@", "probabilities", ".", "setter", "\n", "def", "probabilities", "(", "self", ",", "probabilities", ")", ":", "\n", "        ", "\"\"\"Sets the probabilities of this PredictionSingletonClassification.\n\n\n        :param probabilities: The probabilities of this PredictionSingletonClassification.  # noqa: E501\n        :type: Probabilities\n        \"\"\"", "\n", "\n", "self", ".", "_probabilities", "=", "probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_classification.PredictionSingletonClassification.to_dict": [[76, 102], ["six.iteritems", "issubclass", "getattr", "isinstance", "prediction_singleton_classification.PredictionSingletonClassification.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "PredictionSingletonClassification", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_classification.PredictionSingletonClassification.to_str": [[103, 106], ["pprint.pformat", "prediction_singleton_classification.PredictionSingletonClassification.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_classification.PredictionSingletonClassification.__repr__": [[107, 110], ["prediction_singleton_classification.PredictionSingletonClassification.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_classification.PredictionSingletonClassification.__eq__": [[111, 117], ["isinstance", "prediction_singleton_classification.PredictionSingletonClassification.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonClassification", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.prediction_singleton_classification.PredictionSingletonClassification.__ne__": [[118, 124], ["isinstance", "prediction_singleton_classification.PredictionSingletonClassification.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "PredictionSingletonClassification", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.__init__": [[49, 68], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "type", "=", "None", ",", "img_type", "=", "None", ",", "parent_dataset_id", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasetCreateRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_name", "=", "None", "\n", "self", ".", "_type", "=", "None", "\n", "self", ".", "_img_type", "=", "None", "\n", "self", ".", "_parent_dataset_id", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "name", "=", "name", "\n", "if", "type", "is", "not", "None", ":", "\n", "            ", "self", ".", "type", "=", "type", "\n", "", "if", "img_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "img_type", "=", "img_type", "\n", "", "if", "parent_dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "parent_dataset_id", "=", "parent_dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.name": [[79, 91], ["ValueError"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Sets the name of this DatasetCreateRequest.\n\n\n        :param name: The name of this DatasetCreateRequest.  # noqa: E501\n        :type: DatasetName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type": [[102, 112], ["None"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"Sets the type of this DatasetCreateRequest.\n\n\n        :param type: The type of this DatasetCreateRequest.  # noqa: E501\n        :type: DatasetType\n        \"\"\"", "\n", "\n", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.img_type": [[123, 133], ["None"], "methods", ["None"], ["", "@", "img_type", ".", "setter", "\n", "def", "img_type", "(", "self", ",", "img_type", ")", ":", "\n", "        ", "\"\"\"Sets the img_type of this DatasetCreateRequest.\n\n\n        :param img_type: The img_type of this DatasetCreateRequest.  # noqa: E501\n        :type: ImageType\n        \"\"\"", "\n", "\n", "self", ".", "_img_type", "=", "img_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.parent_dataset_id": [[144, 154], ["None"], "methods", ["None"], ["", "@", "parent_dataset_id", ".", "setter", "\n", "def", "parent_dataset_id", "(", "self", ",", "parent_dataset_id", ")", ":", "\n", "        ", "\"\"\"Sets the parent_dataset_id of this DatasetCreateRequest.\n\n\n        :param parent_dataset_id: The parent_dataset_id of this DatasetCreateRequest.  # noqa: E501\n        :type: MongoObjectID\n        \"\"\"", "\n", "\n", "self", ".", "_parent_dataset_id", "=", "parent_dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.to_dict": [[155, 181], ["six.iteritems", "issubclass", "getattr", "isinstance", "dataset_create_request.DatasetCreateRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasetCreateRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.to_str": [[182, 185], ["pprint.pformat", "dataset_create_request.DatasetCreateRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.__repr__": [[186, 189], ["dataset_create_request.DatasetCreateRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.__eq__": [[190, 196], ["isinstance", "dataset_create_request.DatasetCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetCreateRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.__ne__": [[197, 203], ["isinstance", "dataset_create_request.DatasetCreateRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetCreateRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_type.DockerWorkerType.__init__": [[46, 52], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DockerWorkerType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_type.DockerWorkerType.to_dict": [[53, 79], ["six.iteritems", "issubclass", "getattr", "isinstance", "docker_worker_type.DockerWorkerType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DockerWorkerType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_type.DockerWorkerType.to_str": [[80, 83], ["pprint.pformat", "docker_worker_type.DockerWorkerType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_type.DockerWorkerType.__repr__": [[84, 87], ["docker_worker_type.DockerWorkerType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_type.DockerWorkerType.__eq__": [[88, 94], ["isinstance", "docker_worker_type.DockerWorkerType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_worker_type.DockerWorkerType.__ne__": [[95, 101], ["isinstance", "docker_worker_type.DockerWorkerType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DockerWorkerType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_prediction_singleton.OneOfPredictionSingleton.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"OneOfPredictionSingleton - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_prediction_singleton.OneOfPredictionSingleton.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "one_of_prediction_singleton.OneOfPredictionSingleton.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "OneOfPredictionSingleton", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_prediction_singleton.OneOfPredictionSingleton.to_str": [[75, 78], ["pprint.pformat", "one_of_prediction_singleton.OneOfPredictionSingleton.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_prediction_singleton.OneOfPredictionSingleton.__repr__": [[79, 82], ["one_of_prediction_singleton.OneOfPredictionSingleton.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_prediction_singleton.OneOfPredictionSingleton.__eq__": [[83, 89], ["isinstance", "one_of_prediction_singleton.OneOfPredictionSingleton.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "OneOfPredictionSingleton", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.one_of_prediction_singleton.OneOfPredictionSingleton.__ne__": [[90, 96], ["isinstance", "one_of_prediction_singleton.OneOfPredictionSingleton.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "OneOfPredictionSingleton", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_rows.LabelBoxDataRows.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"LabelBoxDataRows - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_rows.LabelBoxDataRows.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "label_box_data_rows.LabelBoxDataRows.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "LabelBoxDataRows", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_rows.LabelBoxDataRows.to_str": [[75, 78], ["pprint.pformat", "label_box_data_rows.LabelBoxDataRows.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_rows.LabelBoxDataRows.__repr__": [[79, 82], ["label_box_data_rows.LabelBoxDataRows.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_rows.LabelBoxDataRows.__eq__": [[83, 89], ["isinstance", "label_box_data_rows.LabelBoxDataRows.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelBoxDataRows", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.label_box_data_rows.LabelBoxDataRows.__ne__": [[90, 96], ["isinstance", "label_box_data_rows.LabelBoxDataRows.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "LabelBoxDataRows", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.__init__": [[45, 59], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_samples", "=", "None", ",", "min_distance", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"SamplingConfigStoppingCondition - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_n_samples", "=", "None", "\n", "self", ".", "_min_distance", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "if", "n_samples", "is", "not", "None", ":", "\n", "            ", "self", ".", "n_samples", "=", "n_samples", "\n", "", "if", "min_distance", "is", "not", "None", ":", "\n", "            ", "self", ".", "min_distance", "=", "min_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.n_samples": [[71, 82], ["None"], "methods", ["None"], ["", "@", "n_samples", ".", "setter", "\n", "def", "n_samples", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"Sets the n_samples of this SamplingConfigStoppingCondition.\n\n        How many samples/images should be used for the sampling. 0-1 represents a percentage of all. 1-N are absolute numbers  # noqa: E501\n\n        :param n_samples: The n_samples of this SamplingConfigStoppingCondition.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "\n", "self", ".", "_n_samples", "=", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.min_distance": [[94, 105], ["None"], "methods", ["None"], ["", "@", "min_distance", ".", "setter", "\n", "def", "min_distance", "(", "self", ",", "min_distance", ")", ":", "\n", "        ", "\"\"\"Sets the min_distance of this SamplingConfigStoppingCondition.\n\n        The minimum distance sampled images should have. Before the distance would fall below, the sampling is stopped.  # noqa: E501\n\n        :param min_distance: The min_distance of this SamplingConfigStoppingCondition.  # noqa: E501\n        :type: float\n        \"\"\"", "\n", "\n", "self", ".", "_min_distance", "=", "min_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.to_dict": [[106, 132], ["six.iteritems", "issubclass", "getattr", "isinstance", "sampling_config_stopping_condition.SamplingConfigStoppingCondition.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "SamplingConfigStoppingCondition", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.to_str": [[133, 136], ["pprint.pformat", "sampling_config_stopping_condition.SamplingConfigStoppingCondition.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.__repr__": [[137, 140], ["sampling_config_stopping_condition.SamplingConfigStoppingCondition.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.__eq__": [[141, 147], ["isinstance", "sampling_config_stopping_condition.SamplingConfigStoppingCondition.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingConfigStoppingCondition", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition.__ne__": [[148, 154], ["isinstance", "sampling_config_stopping_condition.SamplingConfigStoppingCondition.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "SamplingConfigStoppingCondition", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.__init__": [[45, 57], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "upsize_tag_name", "=", "None", ",", "upsize_tag_creator", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"TagUpsizeRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_upsize_tag_name", "=", "None", "\n", "self", ".", "_upsize_tag_creator", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "upsize_tag_name", "=", "upsize_tag_name", "\n", "self", ".", "upsize_tag_creator", "=", "upsize_tag_creator", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.upsize_tag_name": [[68, 80], ["ValueError"], "methods", ["None"], ["", "@", "upsize_tag_name", ".", "setter", "\n", "def", "upsize_tag_name", "(", "self", ",", "upsize_tag_name", ")", ":", "\n", "        ", "\"\"\"Sets the upsize_tag_name of this TagUpsizeRequest.\n\n\n        :param upsize_tag_name: The upsize_tag_name of this TagUpsizeRequest.  # noqa: E501\n        :type: TagName\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "upsize_tag_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `upsize_tag_name`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_upsize_tag_name", "=", "upsize_tag_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.upsize_tag_creator": [[91, 103], ["ValueError"], "methods", ["None"], ["", "@", "upsize_tag_creator", ".", "setter", "\n", "def", "upsize_tag_creator", "(", "self", ",", "upsize_tag_creator", ")", ":", "\n", "        ", "\"\"\"Sets the upsize_tag_creator of this TagUpsizeRequest.\n\n\n        :param upsize_tag_creator: The upsize_tag_creator of this TagUpsizeRequest.  # noqa: E501\n        :type: TagCreator\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "upsize_tag_creator", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `upsize_tag_creator`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_upsize_tag_creator", "=", "upsize_tag_creator", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.to_dict": [[104, 130], ["six.iteritems", "issubclass", "getattr", "isinstance", "tag_upsize_request.TagUpsizeRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "TagUpsizeRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.to_str": [[131, 134], ["pprint.pformat", "tag_upsize_request.TagUpsizeRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.__repr__": [[135, 138], ["tag_upsize_request.TagUpsizeRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.__eq__": [[139, 145], ["isinstance", "tag_upsize_request.TagUpsizeRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagUpsizeRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.tag_upsize_request.TagUpsizeRequest.__ne__": [[146, 152], ["isinstance", "tag_upsize_request.TagUpsizeRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "TagUpsizeRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_type.DatasetType.__init__": [[48, 54], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"DatasetType - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_type.DatasetType.to_dict": [[55, 81], ["six.iteritems", "issubclass", "getattr", "isinstance", "dataset_type.DatasetType.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "DatasetType", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_type.DatasetType.to_str": [[82, 85], ["pprint.pformat", "dataset_type.DatasetType.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_type.DatasetType.__repr__": [[86, 89], ["dataset_type.DatasetType.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_type.DatasetType.__eq__": [[90, 96], ["isinstance", "dataset_type.DatasetType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetType", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_type.DatasetType.__ne__": [[97, 103], ["isinstance", "dataset_type.DatasetType.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "DatasetType", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.__init__": [[43, 53], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dimensionality_reduction_method", "=", "None", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"Trigger2dEmbeddingJobRequest - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "\n", "self", ".", "_dimensionality_reduction_method", "=", "None", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n", "self", ".", "dimensionality_reduction_method", "=", "dimensionality_reduction_method", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.dimensionality_reduction_method": [[64, 76], ["ValueError"], "methods", ["None"], ["", "@", "dimensionality_reduction_method", ".", "setter", "\n", "def", "dimensionality_reduction_method", "(", "self", ",", "dimensionality_reduction_method", ")", ":", "\n", "        ", "\"\"\"Sets the dimensionality_reduction_method of this Trigger2dEmbeddingJobRequest.\n\n\n        :param dimensionality_reduction_method: The dimensionality_reduction_method of this Trigger2dEmbeddingJobRequest.  # noqa: E501\n        :type: DimensionalityReductionMethod\n        \"\"\"", "\n", "if", "self", ".", "_configuration", ".", "client_side_validation", "and", "dimensionality_reduction_method", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid value for `dimensionality_reduction_method`, must not be `None`\"", ")", "# noqa: E501", "\n", "\n", "", "self", ".", "_dimensionality_reduction_method", "=", "dimensionality_reduction_method", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.to_dict": [[77, 103], ["six.iteritems", "issubclass", "getattr", "isinstance", "trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "Trigger2dEmbeddingJobRequest", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.to_str": [[104, 107], ["pprint.pformat", "trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.__repr__": [[108, 111], ["trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.__eq__": [[112, 118], ["isinstance", "trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Trigger2dEmbeddingJobRequest", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.__ne__": [[119, 125], ["isinstance", "trigger2d_embedding_job_request.Trigger2dEmbeddingJobRequest.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "Trigger2dEmbeddingJobRequest", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.__init__": [[41, 47], ["lightly.openapi_generated.swagger_client.configuration.Configuration"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "_configuration", "=", "None", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"AccessRole - a model defined in Swagger\"\"\"", "# noqa: E501", "\n", "if", "_configuration", "is", "None", ":", "\n", "            ", "_configuration", "=", "Configuration", "(", ")", "\n", "", "self", ".", "_configuration", "=", "_configuration", "\n", "self", ".", "discriminator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict": [[48, 74], ["six.iteritems", "issubclass", "getattr", "isinstance", "access_role.AccessRole.items", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model properties as a dict\"\"\"", "\n", "result", "=", "{", "}", "\n", "\n", "for", "attr", ",", "_", "in", "six", ".", "iteritems", "(", "self", ".", "swagger_types", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to_dict", "(", ")", "if", "hasattr", "(", "x", ",", "\"to_dict\"", ")", "else", "x", ",", "\n", "value", "\n", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"to_dict\"", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", ".", "to_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "result", "[", "attr", "]", "=", "dict", "(", "map", "(", "\n", "lambda", "item", ":", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ".", "to_dict", "(", ")", ")", "\n", "if", "hasattr", "(", "item", "[", "1", "]", ",", "\"to_dict\"", ")", "else", "item", ",", "\n", "value", ".", "items", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "attr", "]", "=", "value", "\n", "", "", "if", "issubclass", "(", "AccessRole", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str": [[75, 78], ["pprint.pformat", "access_role.AccessRole.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the string representation of the model\"\"\"", "\n", "return", "pprint", ".", "pformat", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.__repr__": [[79, 82], ["access_role.AccessRole.to_str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"For `print` and `pprint`\"\"\"", "\n", "return", "self", ".", "to_str", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.__eq__": [[83, 89], ["isinstance", "access_role.AccessRole.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "AccessRole", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "==", "other", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.__ne__": [[90, 96], ["isinstance", "access_role.AccessRole.to_dict", "other.to_dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Returns true if both objects are not equal\"\"\"", "\n", "if", "not", "isinstance", "(", "other", ",", "AccessRole", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "self", ".", "to_dict", "(", ")", "!=", "other", ".", "to_dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.simclr.SimCLR.__init__": [[31, 46], ["torch.Module.__init__", "lightly.models.modules.SimCLRProjectionHead", "warnings.warn", "Warning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "32", ",", "\n", "out_dim", ":", "int", "=", "128", ")", ":", "\n", "\n", "        ", "super", "(", "SimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SimCLRProjectionHead", "(", "num_ftrs", ",", "num_ftrs", ",", "out_dim", ")", "\n", "\n", "warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block SimCLR will be deprecated in version 1.3.0. '", "\n", "+", "'Use low-level building blocks instead. '", "\n", "+", "'See https://docs.lightly.ai/lightly.models.html for more information'", ")", ",", "\n", "PendingDeprecationWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.simclr.SimCLR.forward": [[47, 109], ["simclr.SimCLR.backbone().flatten", "simclr.SimCLR.projection_head", "simclr.SimCLR.backbone().flatten", "simclr.SimCLR.projection_head", "simclr.SimCLR.backbone", "simclr.SimCLR.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x0", ":", "torch", ".", "Tensor", ",", "\n", "x1", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "return_features", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Embeds and projects the input images.\n\n        Extracts features with the backbone and applies the projection\n        head to the output space. If both x0 and x1 are not None, both will be\n        passed through the backbone and projection head. If x1 is None, only\n        x0 will be forwarded.\n\n        Args:\n            x0:\n                Tensor of shape bsz x channels x W x H.\n            x1:\n                Tensor of shape bsz x channels x W x H.\n            return_features:\n                Whether or not to return the intermediate features backbone(x).\n\n        Returns:\n            The output projection of x0 and (if x1 is not None) the output\n            projection of x1. If return_features is True, the output for each x\n            is a tuple (out, f) where f are the features before the projection\n            head.\n\n        Examples:\n            >>> # single input, single output\n            >>> out = model(x) \n            >>> \n            >>> # single input with return_features=True\n            >>> out, f = model(x, return_features=True)\n            >>>\n            >>> # two inputs, two outputs\n            >>> out0, out1 = model(x0, x1)\n            >>>\n            >>> # two inputs, two outputs with return_features=True\n            >>> (out0, f0), (out1, f1) = model(x0, x1, return_features=True)\n\n        \"\"\"", "\n", "\n", "# forward pass of first input x0", "\n", "f0", "=", "self", ".", "backbone", "(", "x0", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out0", "=", "self", ".", "projection_head", "(", "f0", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out0", "=", "(", "out0", ",", "f0", ")", "\n", "\n", "# return out0 if x1 is None", "\n", "", "if", "x1", "is", "None", ":", "\n", "            ", "return", "out0", "\n", "\n", "# forward pass of second input x1", "\n", "", "f1", "=", "self", ".", "backbone", "(", "x1", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out1", "=", "self", ".", "projection_head", "(", "f1", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out1", "=", "(", "out1", ",", "f1", ")", "\n", "\n", "# return both outputs", "\n", "", "return", "out0", ",", "out1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.simsiam.SimSiam.__init__": [[38, 70], ["torch.Module.__init__", "lightly.models.modules.SimSiamProjectionHead", "lightly.models.modules.SimSiamPredictionHead", "warnings.warn", "Warning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "2048", ",", "\n", "proj_hidden_dim", ":", "int", "=", "2048", ",", "\n", "pred_hidden_dim", ":", "int", "=", "512", ",", "\n", "out_dim", ":", "int", "=", "2048", ")", ":", "\n", "\n", "        ", "super", "(", "SimSiam", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "num_ftrs", "=", "num_ftrs", "\n", "self", ".", "proj_hidden_dim", "=", "proj_hidden_dim", "\n", "self", ".", "pred_hidden_dim", "=", "pred_hidden_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "self", ".", "projection_mlp", "=", "SimSiamProjectionHead", "(", "\n", "num_ftrs", ",", "\n", "proj_hidden_dim", ",", "\n", "out_dim", ",", "\n", ")", "\n", "\n", "self", ".", "prediction_mlp", "=", "SimSiamPredictionHead", "(", "\n", "out_dim", ",", "\n", "pred_hidden_dim", ",", "\n", "out_dim", ",", "\n", ")", "\n", "\n", "warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block SimSiam will be deprecated in version 1.3.0. '", "\n", "+", "'Use low-level building blocks instead. '", "\n", "+", "'See https://docs.lightly.ai/lightly.models.html for more information'", ")", ",", "\n", "PendingDeprecationWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.simsiam.SimSiam.forward": [[71, 133], ["simsiam.SimSiam.backbone().flatten", "simsiam.SimSiam.projection_mlp", "simsiam.SimSiam.prediction_mlp", "simsiam.SimSiam.backbone().flatten", "simsiam.SimSiam.projection_mlp", "simsiam.SimSiam.prediction_mlp", "simsiam.SimSiam.backbone", "simsiam.SimSiam.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x0", ":", "torch", ".", "Tensor", ",", "\n", "x1", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "return_features", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Forward pass through SimSiam.\n\n        Extracts features with the backbone and applies the projection\n        head and prediction head to the output space. If both x0 and x1 are not\n        None, both will be passed through the backbone, projection, and\n        prediction head. If x1 is None, only x0 will be forwarded.\n\n        Args:\n            x0:\n                Tensor of shape bsz x channels x W x H.\n            x1:\n                Tensor of shape bsz x channels x W x H.\n            return_features:\n                Whether or not to return the intermediate features backbone(x).\n\n        Returns:\n            The output prediction and projection of x0 and (if x1 is not None)\n            the output prediction and projection of x1. If return_features is\n            True, the output for each x is a tuple (out, f) where f are the\n            features before the projection head.\n            \n        Examples:\n            >>> # single input, single output\n            >>> out = model(x) \n            >>> \n            >>> # single input with return_features=True\n            >>> out, f = model(x, return_features=True)\n            >>>\n            >>> # two inputs, two outputs\n            >>> out0, out1 = model(x0, x1)\n            >>>\n            >>> # two inputs, two outputs with return_features=True\n            >>> (out0, f0), (out1, f1) = model(x0, x1, return_features=True)\n        \"\"\"", "\n", "f0", "=", "self", ".", "backbone", "(", "x0", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z0", "=", "self", ".", "projection_mlp", "(", "f0", ")", "\n", "p0", "=", "self", ".", "prediction_mlp", "(", "z0", ")", "\n", "\n", "out0", "=", "(", "z0", ",", "p0", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out0", "=", "(", "out0", ",", "f0", ")", "\n", "\n", "", "if", "x1", "is", "None", ":", "\n", "            ", "return", "out0", "\n", "\n", "", "f1", "=", "self", ".", "backbone", "(", "x1", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z1", "=", "self", ".", "projection_mlp", "(", "f1", ")", "\n", "p1", "=", "self", ".", "prediction_mlp", "(", "z1", ")", "\n", "\n", "out1", "=", "(", "z1", ",", "p1", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out1", "=", "(", "out1", ",", "f1", ")", "\n", "\n", "", "return", "out0", ",", "out1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._init_momentum_encoder": [[66, 78], ["copy.deepcopy", "copy.deepcopy", "_momentum._deactivate_requires_grad", "_momentum._deactivate_requires_grad", "_momentum._MomentumEncoderMixin.momentum_backbone.parameters", "_momentum._MomentumEncoderMixin.momentum_projection_head.parameters"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._deactivate_requires_grad"], ["def", "_init_momentum_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initializes momentum backbone and a momentum projection head.\n\n        \"\"\"", "\n", "assert", "self", ".", "backbone", "is", "not", "None", "\n", "assert", "self", ".", "projection_head", "is", "not", "None", "\n", "\n", "self", ".", "momentum_backbone", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "momentum_projection_head", "=", "copy", ".", "deepcopy", "(", "self", ".", "projection_head", ")", "\n", "\n", "_deactivate_requires_grad", "(", "self", ".", "momentum_backbone", ".", "parameters", "(", ")", ")", "\n", "_deactivate_requires_grad", "(", "self", ".", "momentum_projection_head", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._momentum_update": [[79, 93], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "_momentum._do_momentum_update", "_momentum._do_momentum_update", "_momentum._MomentumEncoderMixin.momentum_backbone.parameters", "_momentum._MomentumEncoderMixin.backbone.parameters", "_momentum._MomentumEncoderMixin.momentum_projection_head.parameters", "_momentum._MomentumEncoderMixin.projection_head.parameters"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._do_momentum_update", "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._do_momentum_update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update", "(", "self", ",", "m", ":", "float", "=", "0.999", ")", ":", "\n", "        ", "\"\"\"Performs the momentum update for the backbone and projection head.\n\n        \"\"\"", "\n", "_do_momentum_update", "(", "\n", "self", ".", "momentum_backbone", ".", "parameters", "(", ")", ",", "\n", "self", ".", "backbone", ".", "parameters", "(", ")", ",", "\n", "m", "=", "m", ",", "\n", ")", "\n", "_do_momentum_update", "(", "\n", "self", ".", "momentum_projection_head", ".", "parameters", "(", ")", ",", "\n", "self", ".", "projection_head", ".", "parameters", "(", ")", ",", "\n", "m", "=", "m", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._batch_shuffle": [[95, 103], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Returns the shuffled batch and the indices to undo.\n\n        \"\"\"", "\n", "batch_size", "=", "batch", ".", "shape", "[", "0", "]", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "batch_size", ",", "device", "=", "batch", ".", "device", ")", "\n", "return", "batch", "[", "shuffle", "]", ",", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._batch_unshuffle": [[104, 111], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ",", "shuffle", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Returns the unshuffled batch.\n\n        \"\"\"", "\n", "unshuffle", "=", "torch", ".", "argsort", "(", "shuffle", ")", "\n", "return", "batch", "[", "unshuffle", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._deactivate_requires_grad": [[12, 18], ["None"], "function", ["None"], ["def", "_deactivate_requires_grad", "(", "params", ")", ":", "\n", "    ", "\"\"\"Deactivates the requires_grad flag for all parameters.\n\n    \"\"\"", "\n", "for", "param", "in", "params", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._do_momentum_update": [[20, 26], ["zip"], "function", ["None"], ["", "", "def", "_do_momentum_update", "(", "prev_params", ",", "params", ",", "m", ")", ":", "\n", "    ", "\"\"\"Updates the weights of the previous parameters.\n\n    \"\"\"", "\n", "for", "prev_param", ",", "param", "in", "zip", "(", "prev_params", ",", "params", ")", ":", "\n", "        ", "prev_param", ".", "data", "=", "prev_param", ".", "data", "*", "m", "+", "param", ".", "data", "*", "(", "1.", "-", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.barlowtwins.BarlowTwins.__init__": [[38, 62], ["torch.Module.__init__", "lightly.models.modules.BarlowTwinsProjectionHead", "warnings.warn", "Warning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "2048", ",", "\n", "proj_hidden_dim", ":", "int", "=", "8192", ",", "\n", "out_dim", ":", "int", "=", "8192", ")", ":", "\n", "\n", "        ", "super", "(", "BarlowTwins", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "num_ftrs", "=", "num_ftrs", "\n", "self", ".", "proj_hidden_dim", "=", "proj_hidden_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "self", ".", "projection_mlp", "=", "BarlowTwinsProjectionHead", "(", "\n", "num_ftrs", ",", "\n", "proj_hidden_dim", ",", "\n", "out_dim", "\n", ")", "\n", "\n", "warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block BarlowTwins will be deprecated in version 1.3.0. '", "\n", "+", "'Use low-level building blocks instead. '", "\n", "+", "'See https://docs.lightly.ai/lightly.models.html for more information'", ")", ",", "\n", "PendingDeprecationWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.barlowtwins.BarlowTwins.forward": [[63, 123], ["barlowtwins.BarlowTwins.backbone().flatten", "barlowtwins.BarlowTwins.projection_mlp", "barlowtwins.BarlowTwins.backbone().flatten", "barlowtwins.BarlowTwins.projection_mlp", "barlowtwins.BarlowTwins.backbone", "barlowtwins.BarlowTwins.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x0", ":", "torch", ".", "Tensor", ",", "\n", "x1", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "return_features", ":", "bool", "=", "False", ")", ":", "\n", "\n", "        ", "\"\"\"Forward pass through BarlowTwins.\n\n        Extracts features with the backbone and applies the projection\n        head to the output space. If both x0 and x1 are not None, both will be\n        passed through the backbone and projection. If x1 is None, only x0 will\n        be forwarded.\n        Barlow Twins only implement a projection head unlike SimSiam.\n\n        Args:\n            x0:\n                Tensor of shape bsz x channels x W x H.\n            x1:\n                Tensor of shape bsz x channels x W x H.\n            return_features:\n                Whether or not to return the intermediate features backbone(x).\n\n        Returns:\n            The output projection of x0 and (if x1 is not None)\n            the output projection of x1. If return_features is\n            True, the output for each x is a tuple (out, f) where f are the\n            features before the projection head.\n\n        Examples:\n            >>> # single input, single output\n            >>> out = model(x)\n            >>>\n            >>> # single input with return_features=True\n            >>> out, f = model(x, return_features=True)\n            >>>\n            >>> # two inputs, two outputs\n            >>> out0, out1 = model(x0, x1)\n            >>>\n            >>> # two inputs, two outputs with return_features=True\n            >>> (out0, f0), (out1, f1) = model(x0, x1, return_features=True)\n        \"\"\"", "\n", "# forward pass first input", "\n", "f0", "=", "self", ".", "backbone", "(", "x0", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out0", "=", "self", ".", "projection_mlp", "(", "f0", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out0", "=", "(", "out0", ",", "f0", ")", "\n", "\n", "", "if", "x1", "is", "None", ":", "\n", "            ", "return", "out0", "\n", "\n", "# forward pass second input", "\n", "", "f1", "=", "self", ".", "backbone", "(", "x1", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out1", "=", "self", ".", "projection_mlp", "(", "f1", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out1", "=", "(", "out1", ",", "f1", ")", "\n", "\n", "", "return", "out0", ",", "out1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.nnclr.NNCLR.__init__": [[129, 161], ["torch.Module.__init__", "lightly.models.modules.NNCLRProjectionHead", "lightly.models.modules.NNCLRPredictionHead", "warnings.warn", "Warning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "512", ",", "\n", "proj_hidden_dim", ":", "int", "=", "2048", ",", "\n", "pred_hidden_dim", ":", "int", "=", "4096", ",", "\n", "out_dim", ":", "int", "=", "256", ")", ":", "\n", "\n", "        ", "super", "(", "NNCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "num_ftrs", "=", "num_ftrs", "\n", "self", ".", "proj_hidden_dim", "=", "proj_hidden_dim", "\n", "self", ".", "pred_hidden_dim", "=", "pred_hidden_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "self", ".", "projection_mlp", "=", "NNCLRProjectionHead", "(", "\n", "num_ftrs", ",", "\n", "proj_hidden_dim", ",", "\n", "out_dim", ",", "\n", ")", "\n", "\n", "self", ".", "prediction_mlp", "=", "NNCLRPredictionHead", "(", "\n", "out_dim", ",", "\n", "pred_hidden_dim", ",", "\n", "out_dim", ",", "\n", ")", "\n", "\n", "warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block NNCLR will be deprecated in version 1.3.0. '", "\n", "+", "'Use low-level building blocks instead. '", "\n", "+", "'See https://docs.lightly.ai/lightly.models.html for more information'", ")", ",", "\n", "PendingDeprecationWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.nnclr.NNCLR.forward": [[162, 230], ["nnclr.NNCLR.backbone().flatten", "nnclr.NNCLR.projection_mlp", "nnclr.NNCLR.prediction_mlp", "nnclr.NNCLR.backbone().flatten", "nnclr.NNCLR.projection_mlp", "nnclr.NNCLR.prediction_mlp", "nnclr.NNCLR.backbone", "nnclr.NNCLR.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x0", ":", "torch", ".", "Tensor", ",", "\n", "x1", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "return_features", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Embeds and projects the input images.\n\n        Extracts features with the backbone and applies the projection\n        head to the output space. If both x0 and x1 are not None, both will be\n        passed through the backbone and projection head. If x1 is None, only\n        x0 will be forwarded.\n\n        Args:\n            x0:\n                Tensor of shape bsz x channels x W x H.\n            x1:\n                Tensor of shape bsz x channels x W x H.\n            return_features:\n                Whether or not to return the intermediate features backbone(x).\n\n        Returns:\n            The output projection of x0 and (if x1 is not None) the output\n            projection of x1. If return_features is True, the output for each x\n            is a tuple (out, f) where f are the features before the projection\n            head.\n\n        Examples:\n            >>> # single input, single output\n            >>> out = model(x) \n            >>> \n            >>> # single input with return_features=True\n            >>> out, f = model(x, return_features=True)\n            >>>\n            >>> # two inputs, two outputs\n            >>> out0, out1 = model(x0, x1)\n            >>>\n            >>> # two inputs, two outputs with return_features=True\n            >>> (out0, f0), (out1, f1) = model(x0, x1, return_features=True)\n\n        \"\"\"", "\n", "\n", "# forward pass of first input x0", "\n", "f0", "=", "self", ".", "backbone", "(", "x0", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z0", "=", "self", ".", "projection_mlp", "(", "f0", ")", "\n", "p0", "=", "self", ".", "prediction_mlp", "(", "z0", ")", "\n", "\n", "out0", "=", "(", "z0", ",", "p0", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out0", "=", "(", "out0", ",", "f0", ")", "\n", "\n", "# return out0 if x1 is None", "\n", "", "if", "x1", "is", "None", ":", "\n", "            ", "return", "out0", "\n", "\n", "# forward pass of second input x1", "\n", "", "f1", "=", "self", ".", "backbone", "(", "x1", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z1", "=", "self", ".", "projection_mlp", "(", "f1", ")", "\n", "p1", "=", "self", ".", "prediction_mlp", "(", "z1", ")", "\n", "\n", "out1", "=", "(", "z1", ",", "p1", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out1", "=", "(", "out1", ",", "f1", ")", "\n", "\n", "# return both outputs", "\n", "", "return", "out0", ",", "out1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.nnclr._prediction_mlp": [[15, 47], ["torch.Sequential", "torch.Linear", "torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU"], "function", ["None"], ["def", "_prediction_mlp", "(", "in_dims", ":", "int", ",", "\n", "h_dims", ":", "int", ",", "\n", "out_dims", ":", "int", ")", "->", "nn", ".", "Sequential", ":", "\n", "    ", "\"\"\"Prediction MLP. The original paper's implementation has 2 layers, with \n    BN applied to its hidden fc layers but no BN or ReLU on the output fc layer.\n\n    Note that the hidden dimensions should be smaller than the input/output \n    dimensions (bottleneck structure). The default implementation using a \n    ResNet50 backbone has an input dimension of 2048, hidden dimension of 512, \n    and output dimension of 2048\n\n    Args:\n        in_dims:\n            Input dimension of the first linear layer.\n        h_dims: \n            Hidden dimension of all the fully connected layers (should be a\n            bottleneck!)\n        out_dims: \n            Output Dimension of the final linear layer.\n\n    Returns:\n        nn.Sequential:\n            The projection head.\n    \"\"\"", "\n", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "in_dims", ",", "h_dims", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "h_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "l2", "=", "nn", ".", "Linear", "(", "h_dims", ",", "out_dims", ")", "\n", "\n", "prediction", "=", "nn", ".", "Sequential", "(", "l1", ",", "l2", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.nnclr._projection_mlp": [[49, 90], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.BatchNorm1d", "torch.Sequential", "torch.Sequential", "NotImplementedError"], "function", ["None"], ["", "def", "_projection_mlp", "(", "num_ftrs", ":", "int", ",", "\n", "h_dims", ":", "int", ",", "\n", "out_dim", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "3", ")", "->", "nn", ".", "Sequential", ":", "\n", "    ", "\"\"\"Projection MLP. The original paper's implementation has 3 layers, with \n    BN applied to its hidden fc layers but no ReLU on the output fc layer. \n    The CIFAR-10 study used a MLP with only two layers.\n\n    Args:\n        in_dims:\n            Input dimension of the first linear layer.\n        h_dims: \n            Hidden dimension of all the fully connected layers.\n        out_dims: \n            Output Dimension of the final linear layer.\n        num_layers:\n            Controls the number of layers; must be 2 or 3. Defaults to 3.\n\n    Returns:\n        nn.Sequential:\n            The projection head.\n    \"\"\"", "\n", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "num_ftrs", ",", "h_dims", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "h_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "l2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "h_dims", ",", "h_dims", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "h_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "l3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "h_dims", ",", "out_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", ")", "\n", "\n", "if", "num_layers", "==", "3", ":", "\n", "        ", "projection", "=", "nn", ".", "Sequential", "(", "l1", ",", "l2", ",", "l3", ")", "\n", "", "elif", "num_layers", "==", "2", ":", "\n", "        ", "projection", "=", "nn", ".", "Sequential", "(", "l1", ",", "l3", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only MLPs with 2 and 3 layers are implemented.\"", ")", "\n", "\n", "", "return", "projection", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.zoo.checkpoints": [[28, 50], ["ZOO.items"], "function", ["None"], ["def", "checkpoints", "(", ")", ":", "\n", "    ", "\"\"\"Returns the Lightly model zoo as a list of checkpoints.\n\n    Checkpoints:\n        ResNet-9:\n            SimCLR with width = 0.0625 and num_ftrs = 16\n        ResNet-9:\n            SimCLR with width = 0.125 and num_ftrs = 16\n        ResNet-18:\n            SimCLR with width = 1.0 and num_ftrs = 16\n        ResNet-18:\n            SimCLR with width = 1.0 and num_ftrs = 32\n        ResNet-34:\n            SimCLR with width = 1.0 and num_ftrs = 16\n        ResNet-34:\n            SimCLR with width = 1.0 and num_ftrs = 32\n\n    Returns:\n        A list of available checkpoints as URLs.\n\n    \"\"\"", "\n", "return", "[", "item", "for", "key", ",", "item", "in", "ZOO", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.BasicBlock.__init__": [[35, 64], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer"], ["def", "__init__", "(", "self", ",", "in_planes", ":", "int", ",", "planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "num_splits", ":", "int", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "get_norm_layer", "(", "planes", ",", "num_splits", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "get_norm_layer", "(", "planes", ",", "num_splits", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "get_norm_layer", "(", "self", ".", "expansion", "*", "planes", ",", "num_splits", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.BasicBlock.forward": [[66, 88], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Forward pass through basic ResNet block.\n\n        Args:\n            x:\n                Tensor of shape bsz x channels x W x H\n\n        Returns:\n            Tensor of shape bsz x channels x W x H\n        \"\"\"", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.Bottleneck.__init__": [[104, 134], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer"], ["def", "__init__", "(", "self", ",", "in_planes", ":", "int", ",", "planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "num_splits", ":", "int", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "get_norm_layer", "(", "planes", ",", "num_splits", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "get_norm_layer", "(", "planes", ",", "num_splits", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "get_norm_layer", "(", "self", ".", "expansion", "*", "planes", ",", "num_splits", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "get_norm_layer", "(", "self", ".", "expansion", "*", "planes", ",", "num_splits", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.Bottleneck.forward": [[136, 162], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward pass through bottleneck ResNet block.\n\n        Args:\n            x:\n                Tensor of shape bsz x channels x W x H\n\n        Returns:\n            Tensor of shape bsz x channels x W x H\n        \"\"\"", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNet.__init__": [[181, 205], ["torch.Module.__init__", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "lightly.models.batchnorm.get_norm_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "block", ":", "nn", ".", "Module", "=", "BasicBlock", ",", "\n", "layers", ":", "List", "[", "int", "]", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "num_classes", ":", "int", "=", "10", ",", "\n", "width", ":", "float", "=", "1.", ",", "\n", "num_splits", ":", "int", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "int", "(", "64", "*", "width", ")", "\n", "\n", "self", ".", "base", "=", "int", "(", "64", "*", "width", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "\n", "self", ".", "base", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "get_norm_layer", "(", "self", ".", "base", ",", "num_splits", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "num_splits", "=", "num_splits", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "num_splits", "=", "num_splits", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "num_splits", "=", "num_splits", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "num_splits", "=", "num_splits", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "base", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNet._make_layer": [[206, 213], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "layers", ",", "stride", ",", "num_splits", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "layers", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ",", "num_splits", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNet.forward": [[214, 234], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Forward pass through ResNet.\n\n        Args:\n            x:\n                Tensor of shape bsz x channels x W x H\n        \n        Returns:\n            Output tensor of shape bsz x num_classes\n\n        \"\"\"", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator": [[236, 279], ["resnet.ResNet", "model_params.keys", "ValueError"], "function", ["None"], ["", "", "def", "ResNetGenerator", "(", "name", ":", "str", "=", "'resnet-18'", ",", "\n", "width", ":", "float", "=", "1", ",", "\n", "num_classes", ":", "int", "=", "10", ",", "\n", "num_splits", ":", "int", "=", "0", ")", ":", "\n", "    ", "\"\"\"Builds and returns the specified ResNet.\n\n    Args:\n        name:\n            ResNet version from resnet-{9, 18, 34, 50, 101, 152}.\n        width:\n            ResNet width.\n        num_classes:\n            Output dim of the last layer.\n        num_splits:\n            Number of splits to use for SplitBatchNorm (for MoCo model).\n            Increase this number to simulate multi-gpu behavior.\n            E.g. `num_splits=8` simulates a 8-GPU cluster.\n            `num_splits=0` uses normal PyTorch BatchNorm.\n\n    Returns:\n        ResNet as nn.Module.\n\n    Examples:\n        >>> # binary classifier with ResNet-34\n        >>> from lightly.models import ResNetGenerator\n        >>> resnet = ResNetGenerator('resnet-34', num_classes=2)\n\n    \"\"\"", "\n", "\n", "model_params", "=", "{", "\n", "'resnet-9'", ":", "{", "'block'", ":", "BasicBlock", ",", "'layers'", ":", "[", "1", ",", "1", ",", "1", ",", "1", "]", "}", ",", "\n", "'resnet-18'", ":", "{", "'block'", ":", "BasicBlock", ",", "'layers'", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", "}", ",", "\n", "'resnet-34'", ":", "{", "'block'", ":", "BasicBlock", ",", "'layers'", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", "}", ",", "\n", "'resnet-50'", ":", "{", "'block'", ":", "Bottleneck", ",", "'layers'", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", "}", ",", "\n", "'resnet-101'", ":", "{", "'block'", ":", "Bottleneck", ",", "'layers'", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", "}", ",", "\n", "'resnet-152'", ":", "{", "'block'", ":", "Bottleneck", ",", "'layers'", ":", "[", "3", ",", "8", ",", "36", ",", "3", "]", "}", ",", "\n", "}", "\n", "\n", "if", "name", "not", "in", "model_params", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Illegal name: {%s}. \\\n        Try resnet-9, resnet-18, resnet-34, resnet-50, resnet-101, resnet-152.'", "%", "(", "name", ")", ")", "\n", "\n", "", "return", "ResNet", "(", "**", "model_params", "[", "name", "]", ",", "width", "=", "width", ",", "num_classes", "=", "num_classes", ",", "num_splits", "=", "num_splits", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.moco.MoCo.__init__": [[35, 60], ["super().__init__", "lightly.models.modules.MoCoProjectionHead", "moco.MoCo._init_momentum_encoder", "warnings.warn", "Warning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._init_momentum_encoder"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "32", ",", "\n", "out_dim", ":", "int", "=", "128", ",", "\n", "m", ":", "float", "=", "0.999", ",", "\n", "batch_shuffle", ":", "bool", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "MoCoProjectionHead", "(", "num_ftrs", ",", "num_ftrs", ",", "out_dim", ")", "\n", "self", ".", "momentum_features", "=", "None", "\n", "self", ".", "momentum_projection_head", "=", "None", "\n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "batch_shuffle", "=", "batch_shuffle", "\n", "\n", "# initialize momentum features and momentum projection head", "\n", "self", ".", "_init_momentum_encoder", "(", ")", "\n", "\n", "warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block MoCo will be deprecated in version 1.3.0. '", "\n", "+", "'Use low-level building blocks instead. '", "\n", "+", "'See https://docs.lightly.ai/lightly.models.html for more information'", ")", ",", "\n", "PendingDeprecationWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.moco.MoCo.forward": [[61, 135], ["moco.MoCo._momentum_update", "moco.MoCo.backbone().flatten", "moco.MoCo.projection_head", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.MoCo.momentum_backbone().flatten", "moco.MoCo.momentum_projection_head().detach", "moco.MoCo.backbone", "moco.MoCo._batch_shuffle", "moco.MoCo._batch_unshuffle", "moco.MoCo._batch_unshuffle", "moco.MoCo.momentum_backbone", "moco.MoCo.momentum_projection_head"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._momentum_update", "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._batch_shuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._batch_unshuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._batch_unshuffle"], ["", "def", "forward", "(", "self", ",", "\n", "x0", ":", "torch", ".", "Tensor", ",", "\n", "x1", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "return_features", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Embeds and projects the input image.\n\n        Performs the momentum update, extracts features with the backbone and \n        applies the projection head to the output space. If both x0 and x1 are\n        not None, both will be passed through the backbone and projection head.\n        If x1 is None, only x0 will be forwarded.\n\n        Args:\n            x0:\n                Tensor of shape bsz x channels x W x H.\n            x1:\n                Tensor of shape bsz x channels x W x H.\n            return_features:\n                Whether or not to return the intermediate features backbone(x).\n\n        Returns:\n            The output projection of x0 and (if x1 is not None) the output\n            projection of x1. If return_features is True, the output for each x\n            is a tuple (out, f) where f are the features before the projection\n            head.\n\n        Examples:\n            >>> # single input, single output\n            >>> out = model(x) \n            >>> \n            >>> # single input with return_features=True\n            >>> out, f = model(x, return_features=True)\n            >>>\n            >>> # two inputs, two outputs\n            >>> out0, out1 = model(x0, x1)\n            >>>\n            >>> # two inputs, two outputs with return_features=True\n            >>> (out0, f0), (out1, f1) = model(x0, x1, return_features=True)\n\n        \"\"\"", "\n", "self", ".", "_momentum_update", "(", "self", ".", "m", ")", "\n", "\n", "# forward pass of first input x0", "\n", "f0", "=", "self", ".", "backbone", "(", "x0", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out0", "=", "self", ".", "projection_head", "(", "f0", ")", "\n", "\n", "# append features if requested", "\n", "if", "return_features", ":", "\n", "            ", "out0", "=", "(", "out0", ",", "f0", ")", "\n", "\n", "# return out0 if x1 is None", "\n", "", "if", "x1", "is", "None", ":", "\n", "            ", "return", "out0", "\n", "\n", "# forward pass of second input x1", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "# shuffle for batchnorm", "\n", "            ", "if", "self", ".", "batch_shuffle", ":", "\n", "                ", "x1", ",", "shuffle", "=", "self", ".", "_batch_shuffle", "(", "x1", ")", "\n", "\n", "# run x1 through momentum encoder", "\n", "", "f1", "=", "self", ".", "momentum_backbone", "(", "x1", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out1", "=", "self", ".", "momentum_projection_head", "(", "f1", ")", ".", "detach", "(", ")", "\n", "\n", "# unshuffle for batchnorm", "\n", "if", "self", ".", "batch_shuffle", ":", "\n", "                ", "f1", "=", "self", ".", "_batch_unshuffle", "(", "f1", ",", "shuffle", ")", "\n", "out1", "=", "self", ".", "_batch_unshuffle", "(", "out1", ",", "shuffle", ")", "\n", "\n", "# append features if requested", "\n", "", "if", "return_features", ":", "\n", "                ", "out1", "=", "(", "out1", ",", "f1", ")", "\n", "\n", "", "", "return", "out0", ",", "out1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.SplitBatchNorm.__init__": [[23, 31], ["torch.BatchNorm2d.__init__", "batchnorm.SplitBatchNorm.register_buffer", "batchnorm.SplitBatchNorm.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "num_splits", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ",", "**", "kw", ")", "\n", "self", ".", "num_splits", "=", "num_splits", "\n", "self", ".", "register_buffer", "(", "\n", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", "*", "self", ".", "num_splits", ")", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", "*", "self", ".", "num_splits", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.SplitBatchNorm.train": [[33, 48], ["super().train", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "batchnorm.SplitBatchNorm.running_mean.view", "batchnorm.SplitBatchNorm.running_var.view"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.SplitBatchNorm.train", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# lazily collate stats when we are going to use them", "\n", "        ", "if", "(", "self", ".", "training", "is", "True", ")", "and", "(", "mode", "is", "False", ")", ":", "\n", "            ", "self", ".", "running_mean", "=", "torch", ".", "mean", "(", "\n", "self", ".", "running_mean", ".", "view", "(", "self", ".", "num_splits", ",", "self", ".", "num_features", ")", ",", "\n", "dim", "=", "0", "\n", ")", ".", "repeat", "(", "self", ".", "num_splits", ")", "\n", "self", ".", "running_var", "=", "torch", ".", "mean", "(", "\n", "self", ".", "running_var", ".", "view", "(", "self", ".", "num_splits", ",", "self", ".", "num_features", ")", ",", "\n", "dim", "=", "0", "\n", ")", ".", "repeat", "(", "self", ".", "num_splits", ")", "\n", "\n", "", "return", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.SplitBatchNorm.forward": [[49, 81], ["torch.functional.batch_norm().view", "torch.functional.batch_norm().view", "torch.functional.batch_norm", "torch.functional.batch_norm", "torch.functional.batch_norm", "torch.functional.batch_norm", "input.view", "batchnorm.SplitBatchNorm.weight.repeat", "batchnorm.SplitBatchNorm.bias.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Computes the SplitBatchNorm on the input.\n\n        \"\"\"", "\n", "# get input shape", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "input", ".", "shape", "\n", "\n", "# during training, use different stats for each split and otherwise", "\n", "# use the stats from the first split", "\n", "if", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "result", "=", "nn", ".", "functional", ".", "batch_norm", "(", "\n", "input", ".", "view", "(", "-", "1", ",", "C", "*", "self", ".", "num_splits", ",", "H", ",", "W", ")", ",", "\n", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "weight", ".", "repeat", "(", "self", ".", "num_splits", ")", ",", "\n", "self", ".", "bias", ".", "repeat", "(", "self", ".", "num_splits", ")", ",", "\n", "True", ",", "\n", "self", ".", "momentum", ",", "\n", "self", ".", "eps", "\n", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "nn", ".", "functional", ".", "batch_norm", "(", "\n", "input", ",", "\n", "self", ".", "running_mean", "[", ":", "self", ".", "num_features", "]", ",", "\n", "self", ".", "running_var", "[", ":", "self", ".", "num_features", "]", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "False", ",", "\n", "self", ".", "momentum", ",", "\n", "self", ".", "eps", "\n", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer": [[83, 91], ["batchnorm.SplitBatchNorm", "torch.BatchNorm2d"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "num_features", ":", "int", ",", "num_splits", ":", "int", ",", "**", "kw", ")", ":", "\n", "    ", "\"\"\"Utility to switch between BatchNorm2d and SplitBatchNorm.\n\n    \"\"\"", "\n", "if", "num_splits", ">", "0", ":", "\n", "        ", "return", "SplitBatchNorm", "(", "num_features", ",", "num_splits", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.byol.BYOL.__init__": [[47, 71], ["super().__init__", "lightly.models.modules.BYOLProjectionHead", "lightly.models.modules.BYOLProjectionHead", "byol.BYOL._init_momentum_encoder", "warnings.warn", "Warning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._init_momentum_encoder"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "4096", ",", "\n", "out_dim", ":", "int", "=", "256", ",", "\n", "m", ":", "float", "=", "0.9", ")", ":", "\n", "\n", "        ", "super", "(", "BYOL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "# the architecture of the projection and prediction head is the same", "\n", "self", ".", "projection_head", "=", "BYOLProjectionHead", "(", "num_ftrs", ",", "hidden_dim", ",", "out_dim", ")", "\n", "self", ".", "prediction_head", "=", "BYOLProjectionHead", "(", "out_dim", ",", "hidden_dim", ",", "out_dim", ")", "\n", "self", ".", "momentum_backbone", "=", "None", "\n", "self", ".", "momentum_projection_head", "=", "None", "\n", "\n", "self", ".", "_init_momentum_encoder", "(", ")", "\n", "self", ".", "m", "=", "m", "\n", "\n", "warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block BYOL will be deprecated in version 1.3.0. '", "\n", "+", "'Use low-level building blocks instead. '", "\n", "+", "'See https://docs.lightly.ai/lightly.models.html for more information'", ")", ",", "\n", "PendingDeprecationWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.byol.BYOL._forward": [[72, 118], ["byol.BYOL._momentum_update", "byol.BYOL.backbone().flatten", "byol.BYOL.projection_head", "byol.BYOL.prediction_head", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "byol.BYOL.momentum_backbone().flatten", "byol.BYOL.momentum_projection_head", "byol.BYOL.backbone", "byol.BYOL.momentum_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models._momentum._MomentumEncoderMixin._momentum_update"], ["", "def", "_forward", "(", "self", ",", "\n", "x0", ":", "torch", ".", "Tensor", ",", "\n", "x1", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"Forward pass through the encoder and the momentum encoder.\n\n        Performs the momentum update, extracts features with the backbone and\n        applies the projection (and prediciton) head to the output space. If\n        x1 is None, only x0 will be processed otherwise, x0 is processed with\n        the encoder and x1 with the momentum encoder.\n\n        Args:\n            x0:\n                Tensor of shape bsz x channels x W x H.\n            x1:\n                Tensor of shape bsz x channels x W x H.\n\n        Returns:\n            The output proejction of x0 and (if x1 is not None) the output \n            projection of x1.\n        \n        Examples:\n            >>> # single input, single output\n            >>> out = model._forward(x)\n            >>>\n            >>> # two inputs, two outputs\n            >>> out0, out1 = model._forward(x0, x1)\n\n        \"\"\"", "\n", "\n", "self", ".", "_momentum_update", "(", "self", ".", "m", ")", "\n", "\n", "# forward pass of first input x0", "\n", "f0", "=", "self", ".", "backbone", "(", "x0", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z0", "=", "self", ".", "projection_head", "(", "f0", ")", "\n", "out0", "=", "self", ".", "prediction_head", "(", "z0", ")", "\n", "\n", "if", "x1", "is", "None", ":", "\n", "            ", "return", "out0", "\n", "\n", "# forward pass of second input x1", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "f1", "=", "self", ".", "momentum_backbone", "(", "x1", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out1", "=", "self", ".", "momentum_projection_head", "(", "f1", ")", "\n", "\n", "", "return", "out0", ",", "out1", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.byol.BYOL.forward": [[119, 168], ["byol.BYOL._forward", "byol.BYOL._forward", "ValueError", "ValueError", "all", "ValueError", "zip"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.byol.BYOL._forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.byol.BYOL._forward"], ["", "def", "forward", "(", "self", ",", "\n", "x0", ":", "torch", ".", "Tensor", ",", "\n", "x1", ":", "torch", ".", "Tensor", ",", "\n", "return_features", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Symmetrizes the forward pass (see _forward).\n\n        Performs two forward passes, once where x0 is passed through the encoder\n        and x1 through the momentum encoder and once the other way around.\n\n        Note that this model currently requires two inputs for the forward pass \n        (x0 and x1) which correspond to the two augmentations.\n        Furthermore, `the return_features` argument does not work yet.\n\n        Args:\n            x0:\n                Tensor of shape bsz x channels x W x H.\n            x1:\n                Tensor of shape bsz x channels x W x H.\n\n        Returns: \n            A tuple out0, out1, where out0 and out1 are tuples containing the\n            predictions and projections of x0 and x1: out0 = (z0, p0) and\n            out1 = (z1, p1).\n\n        Examples:\n            >>> # initialize the model and the loss function\n            >>> model = BYOL()\n            >>> criterion = SymNegCosineSimilarityLoss()\n            >>>\n            >>> # forward pass for two batches of transformed images x1 and x2\n            >>> out0, out1 = model(x0, x1)\n            >>> loss = criterion(out0, out1)\n\n        \"\"\"", "\n", "\n", "if", "x0", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'x0 must not be None!'", ")", "\n", "", "if", "x1", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'x1 must not be None!'", ")", "\n", "\n", "", "if", "not", "all", "(", "[", "s0", "==", "s1", "for", "s0", ",", "s1", "in", "zip", "(", "x0", ".", "shape", ",", "x1", ".", "shape", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'x0 and x1 must have same shape but got shapes {x0.shape} and {x1.shape}!'", "\n", ")", "\n", "\n", "", "p0", ",", "z1", "=", "self", ".", "_forward", "(", "x0", ",", "x1", ")", "\n", "p1", ",", "z0", "=", "self", ".", "_forward", "(", "x1", ",", "x0", ")", "\n", "\n", "return", "(", "z0", ",", "p0", ")", ",", "(", "z1", ",", "p1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.byol._get_byol_mlp": [[15, 29], ["torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear"], "function", ["None"], ["def", "_get_byol_mlp", "(", "num_ftrs", ":", "int", ",", "hidden_dim", ":", "int", ",", "out_dim", ":", "int", ")", ":", "\n", "    ", "\"\"\"Returns a 2-layer MLP with batch norm on the hidden layer.\n\n    Reference (12.03.2021)\n    https://arxiv.org/abs/2006.07733\n\n    \"\"\"", "\n", "modules", "=", "[", "\n", "nn", ".", "Linear", "(", "num_ftrs", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "\n", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle": [[14, 43], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randperm", "torch.randperm", "torch.randperm", "utils.batch_shuffle_distributed"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle_distributed"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "batch_shuffle", "(", "\n", "batch", ":", "torch", ".", "Tensor", ",", "\n", "distributed", ":", "bool", "=", "False", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Randomly shuffles all tensors in the batch.\n\n    Args:\n        batch:\n            The batch to shuffle.\n        distributed:\n            If True then batches are shuffles across multiple gpus.\n\n    Returns:\n        A (batch, shuffle) tuple where batch is the shuffled version of the \n        input batch and shuffle is an index to restore the original order.\n\n    Examples:\n        >>> # forward pass through the momentum model with batch shuffling\n        >>> x1_shuffled, shuffle = batch_shuffle(x1)\n        >>> f1 = moco_momentum(x1)\n        >>> out0 = projection_head_momentum(f0)\n        >>> out1 = batch_unshuffle(out1, shuffle)\n    \"\"\"", "\n", "if", "distributed", ":", "\n", "        ", "return", "batch_shuffle_distributed", "(", "batch", ")", "\n", "", "batch_size", "=", "batch", ".", "shape", "[", "0", "]", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "batch_size", ",", "device", "=", "batch", ".", "device", ")", "\n", "return", "batch", "[", "shuffle", "]", ",", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle": [[44, 74], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.argsort", "torch.argsort", "torch.argsort", "utils.batch_unshuffle_distributed"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle_distributed"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "batch_unshuffle", "(", "\n", "batch", ":", "torch", ".", "Tensor", ",", "\n", "shuffle", ":", "torch", ".", "Tensor", ",", "\n", "distributed", ":", "bool", "=", "False", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Unshuffles a batch. \n\n    Args:\n        batch:\n            The batch to unshuffle.\n        shuffle:\n            Index to unshuffle the batch.\n        distributed:\n            If True then the batch is unshuffled across multiple gpus.\n    \n    Returns:\n        The unshuffled batch.\n\n    Examples:\n        >>> # forward pass through the momentum model with batch shuffling\n        >>> x1_shuffled, shuffle = batch_shuffle(x1)\n        >>> f1 = moco_momentum(x1)\n        >>> out0 = projection_head_momentum(f0)\n        >>> out1 = batch_unshuffle(out1, shuffle)\n    \"\"\"", "\n", "if", "distributed", ":", "\n", "        ", "return", "batch_unshuffle_distributed", "(", "batch", ",", "shuffle", ")", "\n", "", "unshuffle", "=", "torch", ".", "argsort", "(", "shuffle", ")", "\n", "return", "batch", "[", "unshuffle", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.concat_all_gather": [[75, 87], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.empty_like", "torch.empty_like", "torch.empty_like", "range", "torch.get_world_size"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Returns concatenated instances of x gathered from all gpus.\n\n    This code was taken and adapted from here:\n    https://github.com/facebookresearch/moco.\n\n    \"\"\"", "\n", "output", "=", "[", "torch", ".", "empty_like", "(", "x", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "output", ",", "x", ",", "async_op", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "output", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle_distributed": [[88, 125], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.get_rank", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "batch_shuffle_distributed", "(", "batch", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Shuffles batch over multiple gpus.\n\n    This code was taken and adapted from here:\n    https://github.com/facebookresearch/moco.\n\n    Args:\n        batch:\n            The tensor to shuffle.\n\n    Returns:\n        A (batch, shuffle) tuple where batch is the shuffled version of the \n        input batch and shuffle is an index to restore the original order.\n    \n    \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "batch", ".", "shape", "[", "0", "]", "\n", "batch_gather", "=", "concat_all_gather", "(", "batch", ")", "\n", "batch_size_all", "=", "batch_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "dist", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "shuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "dist", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "batch_gather", "[", "idx_this", "]", ",", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle_distributed": [[126, 158], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.concat_all_gather", "torch.get_rank", "shuffle.view"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "batch_unshuffle_distributed", "(", "\n", "batch", ":", "torch", ".", "Tensor", ",", "\n", "shuffle", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Undo batch shuffle over multiple gpus.\n\n    This code was taken and adapted from here:\n    https://github.com/facebookresearch/moco.\n\n    Args:\n        batch:\n            The tensor to unshuffle.\n        shuffle:\n            Index to restore the original tensor.\n\n    Returns:\n        The unshuffled tensor.\n\n    \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "batch", ".", "shape", "[", "0", "]", "\n", "batch_gather", "=", "concat_all_gather", "(", "batch", ")", "\n", "batch_size_all", "=", "batch_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "dist", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "batch_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad": [[159, 172], ["model.parameters"], "function", ["None"], ["", "def", "deactivate_requires_grad", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Deactivates the requires_grad flag for all parameters of a model.\n    \n    This has the same effect as permanently executing the model within a `torch.no_grad()`\n    context. Use this method to disable gradient computation and therefore\n    training for a model.\n\n    Examples:\n        >>> backbone = resnet18()\n        >>> deactivate_requires_grad(backbone)\n    \"\"\"", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.activate_requires_grad": [[173, 185], ["model.parameters"], "function", ["None"], ["", "", "def", "activate_requires_grad", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Activates the requires_grad flag for all parameters of a model.\n\n    Use this method to activate gradients for a model (e.g. after deactivating\n    them using `deactivate_requires_grad(...)`).\n\n    Examples:\n        >>> backbone = resnet18()\n        >>> activate_requires_grad(backbone)\n    \"\"\"", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum": [[186, 203], ["zip", "model_ema.parameters", "model.parameters"], "function", ["None"], ["", "", "def", "update_momentum", "(", "model", ":", "nn", ".", "Module", ",", "model_ema", ":", "nn", ".", "Module", ",", "m", ":", "float", ")", ":", "\n", "    ", "\"\"\"Updates parameters of `model_ema` with Exponential Moving Average of `model`\n\n    Momentum encoders are a crucial component fo models such as MoCo or BYOL. \n\n    Examples:\n        >>> backbone = resnet18()\n        >>> projection_head = MoCoProjectionHead()\n        >>> backbone_momentum = copy.deepcopy(moco)\n        >>> projection_head_momentum = copy.deepcopy(projection_head)\n        >>>\n        >>> # update momentum\n        >>> update_momentum(moco, moco_momentum, m=0.999)\n        >>> update_momentum(projection_head, projection_head_momentum, m=0.999)\n    \"\"\"", "\n", "for", "model_ema", ",", "model", "in", "zip", "(", "model_ema", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "model_ema", ".", "data", "=", "model_ema", ".", "data", "*", "m", "+", "model", ".", "data", "*", "(", "1.", "-", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.normalize_weight": [[205, 211], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "weight.div_", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "normalize_weight", "(", "weight", ":", "nn", ".", "Parameter", ",", "dim", ":", "int", "=", "1", ",", "keepdim", ":", "bool", "=", "True", ")", ":", "\n", "    ", "\"\"\"Normalizes the weight to unit length along the specified dimension.\n\n    \"\"\"", "\n", "weight", ".", "div_", "(", "torch", ".", "norm", "(", "weight", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils._no_grad_trunc_normal": [[215, 272], ["warnings.warn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils._no_grad_trunc_normal.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal", "(", "\n", "tensor", ":", "torch", ".", "Tensor", ",", "\n", "mean", ":", "float", ",", "\n", "std", ":", "float", ",", "\n", "a", ":", "float", ",", "\n", "b", ":", "float", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Initializes the input tensor with a truncated normal distribution.\n\n    This method is based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf\n\n    Args:\n        tensor:\n            The tensor to initialize.\n        mean:\n            Mean of the distribution.\n        std:\n            Standard deviation of the distribution.\n        a:\n            Minimum value of the distribution, values below will be clamped.\n        b:\n            Maximum value of the distribution, values above will be clamped.\n\n    \"\"\"", "\n", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", "\n", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.repeat_token": [[273, 289], ["token.repeat"], "function", ["None"], ["", "", "def", "repeat_token", "(", "token", ":", "torch", ".", "Tensor", ",", "size", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Repeats a token size times.\n\n    Args:\n        token:\n            Token tensor with shape (1, 1, dim).\n        size:\n            (batch_size, sequence_length) tuple.\n\n    Returns:\n        Tensor with shape (batch_size, sequence_length, dim) containing copies\n        of the input token.\n\n    \"\"\"", "\n", "batch_size", ",", "sequence_length", "=", "size", "\n", "return", "token", ".", "repeat", "(", "batch_size", ",", "sequence_length", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.expand_index_like": [[290, 308], ["index.unsqueeze().expand.unsqueeze().expand", "index.unsqueeze().expand.unsqueeze"], "function", ["None"], ["", "def", "expand_index_like", "(", "index", ":", "torch", ".", "Tensor", ",", "tokens", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Expands the index along the last dimension of the input tokens.\n\n    Args:\n        index:\n            Index tensor with shape (batch_size, idx_length) where each entry is\n            an index in [0, sequence_length).\n        tokens:\n            Tokens tensor with shape (batch_size, sequence_length, dim).\n\n    Returns:\n        Index tensor with shape (batch_size, idx_length, dim) where the original\n        indices are repeated dim times along the last dimension.\n\n    \"\"\"", "\n", "dim", "=", "tokens", ".", "shape", "[", "-", "1", "]", "\n", "index", "=", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index": [[309, 326], ["utils.expand_index_like", "torch.gather", "torch.gather", "torch.gather"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.expand_index_like", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather"], ["", "def", "get_at_index", "(", "tokens", ":", "torch", ".", "Tensor", ",", "index", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Selects tokens at index.\n    \n    Args:\n        tokens:\n            Token tensor with shape (batch_size, sequence_length, dim).\n        index:\n            Index tensor with shape (batch_size, index_length) where each entry is\n            an index in [0, sequence_length).\n\n    Returns:\n        Token tensor with shape (batch_size, index_length, dim) containing the\n        selected tokens.\n\n    \"\"\"", "\n", "index", "=", "expand_index_like", "(", "index", ",", "tokens", ")", "\n", "return", "torch", ".", "gather", "(", "tokens", ",", "1", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.set_at_index": [[327, 349], ["utils.expand_index_like", "torch.scatter", "torch.scatter", "torch.scatter"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.expand_index_like"], ["", "def", "set_at_index", "(", "\n", "tokens", ":", "torch", ".", "Tensor", ",", "\n", "index", ":", "torch", ".", "Tensor", ",", "\n", "value", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Copies all values into the input tensor at the given indices.\n    \n    Args:\n        tokens:\n            Tokens tensor with shape (batch_size, sequence_length, dim).\n        index:\n            Index tensor with shape (batch_size, index_length).\n        value:\n            Value tensor with shape (batch_size, index_length, dim).\n    \n    Returns:\n        Tokens tensor with shape (batch_size, sequence_length, dim) containing\n        the new values.\n\n    \"\"\"", "\n", "index", "=", "expand_index_like", "(", "index", ",", "tokens", ")", "\n", "return", "torch", ".", "scatter", "(", "tokens", ",", "1", ",", "index", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.prepend_class_token": [[350, 369], ["class_token.expand", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "prepend_class_token", "(", "\n", "tokens", ":", "torch", ".", "Tensor", ",", "\n", "class_token", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Prepends class token to tokens.\n    \n    Args:\n        tokens:\n            Tokens tensor with shape (batch_size, sequence_length, dim).\n        class_token:\n            Class token with shape (1, 1, dim).\n    \n    Returns:\n        Tokens tensor with the class token prepended at index 0 in every\n        sequence. The tensor has shape (batch_size, sequence_length + 1, dim).\n    \"\"\"", "\n", "batch_size", "=", "tokens", ".", "shape", "[", "0", "]", "\n", "batch_class_token", "=", "class_token", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "return", "torch", ".", "cat", "(", "[", "batch_class_token", ",", "tokens", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.patchify": [[370, 395], ["images.reshape", "torch.einsum", "torch.einsum", "torch.einsum", "patches.reshape.reshape"], "function", ["None"], ["", "def", "patchify", "(", "images", ":", "torch", ".", "Tensor", ",", "patch_size", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Converts a batch of input images into patches.\n    \n    Args:\n        images:\n            Images tensor with shape (batch_size, channels, height, width)\n        patch_size:\n            Patch size in pixels. Image width and height must be multiples of\n            the patch size.\n\n    Returns:\n        Patches tensor with shape (batch_size, num_patches, channels * patch_size ** 2)\n        where num_patches = image_width / patch_size * image_height / patch_size.\n\n    \"\"\"", "\n", "# N, C, H, W = (batch_size, channels, height, width)", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "images", ".", "shape", "\n", "assert", "H", "==", "W", "and", "H", "%", "patch_size", "==", "0", "\n", "\n", "patch_h", "=", "patch_w", "=", "H", "//", "patch_size", "\n", "num_patches", "=", "patch_h", "*", "patch_w", "\n", "patches", "=", "images", ".", "reshape", "(", "shape", "=", "(", "N", ",", "C", ",", "patch_h", ",", "patch_size", ",", "patch_w", ",", "patch_size", ")", ")", "\n", "patches", "=", "torch", ".", "einsum", "(", "'nchpwq->nhwpqc'", ",", "patches", ")", "\n", "patches", "=", "patches", ".", "reshape", "(", "shape", "=", "(", "N", ",", "num_patches", ",", "patch_size", "**", "2", "*", "C", ")", ")", "\n", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask": [[397, 440], ["int", "torch.rand", "torch.rand", "torch.rand", "torch.argsort", "torch.argsort", "torch.argsort", "max"], "function", ["None"], ["", "def", "random_token_mask", "(", "\n", "size", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "mask_ratio", ":", "float", "=", "0.6", ",", "\n", "mask_class_token", ":", "bool", "=", "False", ",", "\n", "device", ":", "Optional", "[", "Union", "[", "torch", ".", "device", ",", "str", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Creates random token masks.\n\n    Args:\n        size:\n            Size of the token batch for which to generate masks.\n            Should be (batch_size, sequence_length).\n        mask_ratio:\n            Percentage of tokens to mask.\n        mask_class_token:\n            If False the class token is never masked. If True the class token\n            might be masked.\n        device:\n            Device on which to create the index masks.\n\n    Returns:\n        A (index_keep, index_mask) tuple where each index is a tensor.\n        index_keep contains the indices of the unmasked tokens and has shape\n        (batch_size, num_keep). index_mask contains the indices of the masked\n        tokens and has shape (batch_size, sequence_length - num_keep). \n        num_keep is equal to sequence_length * (1- mask_ratio).\n\n    \"\"\"", "\n", "batch_size", ",", "sequence_length", "=", "size", "\n", "num_keep", "=", "int", "(", "sequence_length", "*", "(", "1", "-", "mask_ratio", ")", ")", "\n", "\n", "noise", "=", "torch", ".", "rand", "(", "batch_size", ",", "sequence_length", ",", "device", "=", "device", ")", "\n", "if", "not", "mask_class_token", "and", "sequence_length", ">", "0", ":", "\n", "#\u00a0make sure that class token is not masked", "\n", "        ", "noise", "[", ":", ",", "0", "]", "=", "-", "1", "\n", "num_keep", "=", "max", "(", "1", ",", "num_keep", ")", "\n", "\n", "#\u00a0get indices of tokens to keep", "\n", "", "indices", "=", "torch", ".", "argsort", "(", "noise", ",", "dim", "=", "1", ")", "\n", "idx_keep", "=", "indices", "[", ":", ",", ":", "num_keep", "]", "\n", "idx_mask", "=", "indices", "[", ":", ",", "num_keep", ":", "]", "\n", "\n", "return", "idx_keep", ",", "idx_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimSiam.TestSimSiam.setUp": [[25, 42], ["dict", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "dict", "dict"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "resnet_variants", "=", "dict", "(", "\n", "resnet18", "=", "dict", "(", "\n", "num_ftrs", "=", "512", ",", "\n", "proj_hidden_dim", "=", "512", ",", "\n", "pred_hidden_dim", "=", "128", ",", "\n", "out_dim", "=", "512", ",", "\n", ")", ",", "\n", "resnet50", "=", "dict", "(", "\n", "num_ftrs", "=", "2048", ",", "\n", "proj_hidden_dim", "=", "2048", ",", "\n", "pred_hidden_dim", "=", "512", ",", "\n", "out_dim", "=", "2048", ",", "\n", ")", "\n", ")", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimSiam.TestSimSiam.test_create_variations_cpu": [[43, 48], ["test_ModelsSimSiam.TestSimSiam.resnet_variants.items", "test_ModelsSimSiam.resnet_generator", "lightly.models.SimSiam", "test_ModelsSimSiam.TestSimSiam.assertIsNotNone", "test_ModelsSimSiam.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "def", "test_create_variations_cpu", "(", "self", ")", ":", "\n", "        ", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "SimSiam", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimSiam.TestSimSiam.test_create_variations_gpu": [[49, 57], ["test_ModelsSimSiam.TestSimSiam.resnet_variants.items", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_ModelsSimSiam.resnet_generator", "lightly.models.SimSiam().to", "test_ModelsSimSiam.TestSimSiam.assertIsNotNone", "lightly.models.SimSiam", "test_ModelsSimSiam.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_create_variations_gpu", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "SimSiam", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", ".", "to", "(", "'cuda'", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimSiam.TestSimSiam.test_feature_dim_configurable": [[58, 84], ["test_ModelsSimSiam.TestSimSiam.resnet_variants.items", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_ModelsSimSiam.resnet_generator", "lightly.models.SimSiam().to", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.SimSiam().to.backbone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.SimSiam().to.projection_mlp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.SimSiam().to.prediction_mlp", "lightly.models.SimSiam", "test_ModelsSimSiam.TestSimSiam.input_tensor.to", "SimSiam().to.backbone.squeeze", "SimSiam().to.projection_mlp.squeeze", "test_ModelsSimSiam.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_feature_dim_configurable", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "SimSiam", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", ".", "to", "(", "device", ")", "\n", "\n", "# check that feature vector has correct dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_features", "=", "model", ".", "backbone", "(", "\n", "self", ".", "input_tensor", ".", "to", "(", "device", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_features", ".", "shape", "[", "1", "]", ",", "config", "[", "'num_ftrs'", "]", ")", "\n", "\n", "# check that projection head output has right dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_projection", "=", "model", ".", "projection_mlp", "(", "\n", "out_features", ".", "squeeze", "(", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_projection", ".", "shape", "[", "1", "]", ",", "config", "[", "'out_dim'", "]", ")", "\n", "\n", "# check that prediction head output has right dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_prediction", "=", "model", ".", "prediction_mlp", "(", "\n", "out_projection", ".", "squeeze", "(", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_prediction", ".", "shape", "[", "1", "]", ",", "config", "[", "'out_dim'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimSiam.TestSimSiam.test_tuple_input": [[85, 116], ["test_ModelsSimSiam.TestSimSiam.resnet_variants.items", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_ModelsSimSiam.resnet_generator", "lightly.models.SimSiam().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "lightly.models.SimSiam().to.", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "lightly.models.SimSiam().to.", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "lightly.models.SimSiam().to.", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "lightly.models.SimSiam().to.", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "test_ModelsSimSiam.TestSimSiam.assertEqual", "lightly.models.SimSiam", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsSimSiam.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_tuple_input", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "SimSiam", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", ".", "to", "(", "device", ")", "\n", "\n", "x0", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "x1", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "out", "=", "model", "(", "x0", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "\n", "out", ",", "features", "=", "model", "(", "x0", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "features", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'num_ftrs'", "]", ")", ")", "\n", "\n", "out0", ",", "out1", "=", "model", "(", "x0", ",", "x1", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "\n", "(", "out0", ",", "f0", ")", ",", "(", "out1", ",", "f1", ")", "=", "model", "(", "x0", ",", "x1", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "f0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'num_ftrs'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "f1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'num_ftrs'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimSiam.resnet_generator": [[10, 16], ["torchvision.models.resnet18", "torchvision.models.resnet50"], "function", ["None"], ["def", "resnet_generator", "(", "name", ":", "str", ")", ":", "\n", "    ", "if", "name", "==", "'resnet18'", ":", "\n", "        ", "return", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "", "elif", "name", "==", "'resnet50'", ":", "\n", "        ", "return", "torchvision", ".", "models", ".", "resnet50", "(", ")", "\n", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimSiam.get_backbone": [[18, 21], ["torch.nn.Sequential", "torch.nn.Sequential", "list", "model.children"], "function", ["None"], ["", "def", "get_backbone", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "backbone", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "(", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.TestNNCLR.setUp": [[25, 42], ["dict", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "dict", "dict"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "resnet_variants", "=", "dict", "(", "\n", "resnet18", "=", "dict", "(", "\n", "num_ftrs", "=", "512", ",", "\n", "proj_hidden_dim", "=", "512", ",", "\n", "pred_hidden_dim", "=", "128", ",", "\n", "out_dim", "=", "512", ",", "\n", ")", ",", "\n", "resnet50", "=", "dict", "(", "\n", "num_ftrs", "=", "2048", ",", "\n", "proj_hidden_dim", "=", "2048", ",", "\n", "pred_hidden_dim", "=", "512", ",", "\n", "out_dim", "=", "2048", ",", "\n", ")", "\n", ")", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.TestNNCLR.test_create_variations_cpu": [[43, 48], ["test_ModelsNNCLR.TestNNCLR.resnet_variants.items", "test_ModelsNNCLR.resnet_generator", "lightly.models.NNCLR", "test_ModelsNNCLR.TestNNCLR.assertIsNotNone", "test_ModelsNNCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "def", "test_create_variations_cpu", "(", "self", ")", ":", "\n", "        ", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "NNCLR", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.TestNNCLR.test_create_variations_gpu": [[49, 57], ["test_ModelsNNCLR.TestNNCLR.resnet_variants.items", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_ModelsNNCLR.resnet_generator", "lightly.models.NNCLR().to", "test_ModelsNNCLR.TestNNCLR.assertIsNotNone", "lightly.models.NNCLR", "test_ModelsNNCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_create_variations_gpu", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "NNCLR", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", ".", "to", "(", "'cuda'", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.TestNNCLR.test_feature_dim_configurable": [[58, 84], ["test_ModelsNNCLR.TestNNCLR.resnet_variants.items", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_ModelsNNCLR.resnet_generator", "lightly.models.NNCLR().to", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.NNCLR().to.backbone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.NNCLR().to.projection_mlp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.NNCLR().to.prediction_mlp", "lightly.models.NNCLR", "test_ModelsNNCLR.TestNNCLR.input_tensor.to", "NNCLR().to.backbone.squeeze", "NNCLR().to.projection_mlp.squeeze", "test_ModelsNNCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_feature_dim_configurable", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "NNCLR", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", ".", "to", "(", "device", ")", "\n", "\n", "# check that feature vector has correct dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_features", "=", "model", ".", "backbone", "(", "\n", "self", ".", "input_tensor", ".", "to", "(", "device", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_features", ".", "shape", "[", "1", "]", ",", "config", "[", "'num_ftrs'", "]", ")", "\n", "\n", "# check that projection head output has right dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_projection", "=", "model", ".", "projection_mlp", "(", "\n", "out_features", ".", "squeeze", "(", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_projection", ".", "shape", "[", "1", "]", ",", "config", "[", "'out_dim'", "]", ")", "\n", "\n", "# check that prediction head output has right dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_prediction", "=", "model", ".", "prediction_mlp", "(", "\n", "out_projection", ".", "squeeze", "(", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_prediction", ".", "shape", "[", "1", "]", ",", "config", "[", "'out_dim'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.TestNNCLR.test_tuple_input": [[85, 116], ["test_ModelsNNCLR.TestNNCLR.resnet_variants.items", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_ModelsNNCLR.resnet_generator", "lightly.models.NNCLR().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "lightly.models.NNCLR().to.", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "lightly.models.NNCLR().to.", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "lightly.models.NNCLR().to.", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "lightly.models.NNCLR().to.", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "test_ModelsNNCLR.TestNNCLR.assertEqual", "lightly.models.NNCLR", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsNNCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_tuple_input", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "NNCLR", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", ".", "to", "(", "device", ")", "\n", "\n", "x0", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "x1", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "out", "=", "model", "(", "x0", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "\n", "out", ",", "features", "=", "model", "(", "x0", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "features", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'num_ftrs'", "]", ")", ")", "\n", "\n", "out0", ",", "out1", "=", "model", "(", "x0", ",", "x1", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "\n", "(", "out0", ",", "f0", ")", ",", "(", "out1", ",", "f1", ")", "=", "model", "(", "x0", ",", "x1", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out0", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "0", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", "[", "1", "]", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'out_dim'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "f0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'num_ftrs'", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "f1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "config", "[", "'num_ftrs'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.TestNNCLR.test_memory_bank": [[117, 133], ["test_ModelsNNCLR.TestNNCLR.resnet_variants.items", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test_ModelsNNCLR.resnet_generator", "lightly.models.NNCLR().to", "lightly.models.modules.NNMemoryBankModule", "lightly.models.NNCLR", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "test_ModelsNNCLR.get_backbone", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "lightly.models.NNCLR().to.", "lightly.models.modules.NNMemoryBankModule.", "lightly.models.modules.NNMemoryBankModule.", "lightly.models.modules.NNMemoryBankModule.detach", "lightly.models.modules.NNMemoryBankModule.detach", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_memory_bank", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", ",", "config", "in", "self", ".", "resnet_variants", ".", "items", "(", ")", ":", "\n", "            ", "resnet", "=", "resnet_generator", "(", "model_name", ")", "\n", "model", "=", "NNCLR", "(", "get_backbone", "(", "resnet", ")", ",", "**", "config", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "nn_size", "in", "[", "2", "**", "3", ",", "2", "**", "8", "]", ":", "\n", "                ", "nn_replacer", "=", "NNMemoryBankModule", "(", "size", "=", "nn_size", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                        ", "x0", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "x1", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "(", "z0", ",", "p0", ")", ",", "(", "z1", ",", "p1", ")", "=", "model", "(", "x0", ",", "x1", ")", "\n", "z0", "=", "nn_replacer", "(", "z0", ".", "detach", "(", ")", ",", "update", "=", "False", ")", "\n", "z1", "=", "nn_replacer", "(", "z1", ".", "detach", "(", ")", ",", "update", "=", "True", ")", "", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.resnet_generator": [[11, 17], ["torchvision.models.resnet18", "torchvision.models.resnet50"], "function", ["None"], ["def", "resnet_generator", "(", "name", ":", "str", ")", ":", "\n", "    ", "if", "name", "==", "'resnet18'", ":", "\n", "        ", "return", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "", "elif", "name", "==", "'resnet50'", ":", "\n", "        ", "return", "torchvision", ".", "models", ".", "resnet50", "(", ")", "\n", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsNNCLR.get_backbone": [[19, 22], ["torch.nn.Sequential", "torch.nn.Sequential", "list", "model.children"], "function", ["None"], ["", "def", "get_backbone", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "backbone", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "(", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._assert_tensor_equal": [[30, 38], ["print", "print", "test_ModelUtils.TestModelUtils.assertTrue", "torch.equal", "torch.equal", "torch.equal", "torch.equal"], "methods", ["None"], ["    ", "def", "_assert_tensor_equal", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# If the assertion fails then only an \"assertion is not True\" error is", "\n", "#\u00a0shown without showing the contents of x and y. To help debugging, x", "\n", "#\u00a0and y are printed. Note that the output is only shown if the assertion", "\n", "#\u00a0fails.", "\n", "        ", "print", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "x", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_batch_shuffle": [[39, 46], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "lightly.models.utils.batch_shuffle", "lightly.models.utils.batch_unshuffle", "test_ModelUtils.TestModelUtils.assertTrue", "test_ModelUtils.TestModelUtils.assertFalse", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle"], ["", "def", "test_batch_shuffle", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "x1", "=", "torch", ".", "rand", "(", "(", "4", ",", "3", ",", "64", ",", "64", ")", ")", "\n", "x1_shuffled", ",", "shuffle", "=", "batch_shuffle", "(", "x1", ")", "\n", "out1", "=", "batch_unshuffle", "(", "x1_shuffled", ",", "shuffle", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "x1", ",", "out1", ")", ")", "\n", "self", ".", "assertFalse", "(", "torch", ".", "equal", "(", "x1", ",", "x1_shuffled", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_activate_requires_grad": [[47, 57], ["torch.Sequential", "torch.Sequential", "test_ModelUtils.TestModelUtils.assertTrue", "lightly.models.utils.deactivate_requires_grad", "test_ModelUtils.TestModelUtils.assertFalse", "lightly.models.utils.activate_requires_grad", "test_ModelUtils.TestModelUtils.assertTrue", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "test_ModelUtils.has_grad", "test_ModelUtils.has_grad", "test_ModelUtils.has_grad"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.activate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.has_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.has_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.has_grad"], ["", "def", "test_activate_requires_grad", "(", "self", ")", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "assertTrue", "(", "has_grad", "(", "model", ")", ")", "\n", "deactivate_requires_grad", "(", "model", ")", "\n", "self", ".", "assertFalse", "(", "has_grad", "(", "model", ")", ")", "\n", "activate_requires_grad", "(", "model", ")", "\n", "self", ".", "assertTrue", "(", "has_grad", "(", "model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_momentum_works": [[58, 65], ["torch.Sequential", "torch.Sequential", "copy.deepcopy", "lightly.models.utils.update_momentum", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum"], ["", "def", "test_momentum_works", "(", "self", ")", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "model_momentum", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "update_momentum", "(", "model", ",", "model_momentum", ",", "0.99", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_normalize_weight_linear": [[66, 74], ["torch.Linear", "torch.Linear", "lightly.models.utils.normalize_weight", "test_ModelUtils.TestModelUtils.assertEqual", "lightly.models.utils.normalize_weight", "test_ModelUtils.TestModelUtils.assertEqual", "torch.Linear.weight.norm().sum", "torch.Linear.weight.norm().sum", "torch.Linear.weight.norm", "torch.Linear.weight.norm"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.normalize_weight", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.normalize_weight"], ["", "def", "test_normalize_weight_linear", "(", "self", ")", ":", "\n", "        ", "input_dim", "=", "32", "\n", "output_dim", "=", "64", "\n", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "False", ")", "\n", "normalize_weight", "(", "linear", ".", "weight", ",", "dim", "=", "0", ")", "\n", "self", ".", "assertEqual", "(", "linear", ".", "weight", ".", "norm", "(", "dim", "=", "0", ")", ".", "sum", "(", ")", ",", "input_dim", ")", "\n", "normalize_weight", "(", "linear", ".", "weight", ",", "dim", "=", "1", ")", "\n", "self", ".", "assertEqual", "(", "linear", ".", "weight", ".", "norm", "(", "dim", "=", "1", ")", ".", "sum", "(", ")", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_no_grad_trunc_normal": [[75, 83], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "lightly.models.utils._no_grad_trunc_normal", "test_ModelUtils.TestModelUtils.assertTrue", "test_ModelUtils.TestModelUtils.assertTrue", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand().to.min", "torch.rand().to.min", "torch.rand().to.max", "torch.rand().to.max"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils._no_grad_trunc_normal"], ["", "def", "test_no_grad_trunc_normal", "(", "self", ",", "device", "=", "\"cpu\"", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "tensor", "=", "torch", ".", "rand", "(", "(", "8", ",", "16", ")", ")", ".", "to", "(", "device", ")", "\n", "a", "=", "-", "2", "\n", "b", "=", "2", "\n", "_no_grad_trunc_normal", "(", "tensor", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "a", "=", "-", "2", ",", "b", "=", "2", ")", "\n", "self", ".", "assertTrue", "(", "tensor", ".", "min", "(", ")", ">=", "a", ")", "\n", "self", ".", "assertTrue", "(", "tensor", ".", "max", "(", ")", "<=", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_no_grad_trunc_normal_cuda": [[84, 87], ["unittest.skipUnless", "test_ModelUtils.TestModelUtils.test_no_grad_trunc_normal", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_no_grad_trunc_normal"], ["", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"No cuda available\"", ")", "\n", "def", "test_no_grad_trunc_normal_cuda", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "test_no_grad_trunc_normal", "(", "device", "=", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_repeat_token": [[88, 93], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "lightly.models.utils.repeat_token", "test_ModelUtils.TestModelUtils.assertEqual", "test_ModelUtils.TestModelUtils.assertListEqual", "tuple", "[].tolist"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.repeat_token"], ["", "def", "test_repeat_token", "(", "self", ")", ":", "\n", "        ", "token", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", "]", ")", "\n", "out", "=", "utils", ".", "repeat_token", "(", "token", ",", "size", "=", "(", "2", ",", "3", ")", ")", "\n", "self", ".", "assertEqual", "(", "tuple", "(", "out", ".", "shape", ")", ",", "(", "2", ",", "3", ",", "4", ")", ")", "\n", "self", ".", "assertListEqual", "(", "out", "[", "-", "1", "]", "[", "-", "1", "]", ".", "tolist", "(", ")", ",", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_expand_index_like": [[94, 104], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "lightly.models.utils.expand_index_like", "test_ModelUtils.TestModelUtils.assertEqual", "tuple", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.expand_index_like"], ["", "def", "test_expand_index_like", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "index", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "1", ",", "0", ",", "3", "]", ",", "\n", "[", "1", ",", "2", ",", "4", "]", ",", "\n", "]", ")", ".", "long", "(", ")", "\n", "tokens", "=", "torch", ".", "rand", "(", "2", ",", "4", ",", "5", ")", "\n", "expanded_index", "=", "utils", ".", "expand_index_like", "(", "index", ",", "tokens", ")", "\n", "\n", "self", ".", "assertEqual", "(", "tuple", "(", "expanded_index", ".", "shape", ")", ",", "(", "2", ",", "3", ",", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_get_at_index": [[105, 120], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "lightly.models.utils.get_at_index", "test_ModelUtils.TestModelUtils.assertEqual", "range", "tuple", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "test_ModelUtils.TestModelUtils._assert_tensor_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._assert_tensor_equal"], ["", "def", "test_get_at_index", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "index", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "1", ",", "0", ",", "3", "]", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ",", "\n", "]", ")", ".", "long", "(", ")", "\n", "tokens", "=", "torch", ".", "rand", "(", "2", ",", "4", ",", "5", ")", "\n", "selected", "=", "utils", ".", "get_at_index", "(", "tokens", ",", "index", ")", "\n", "\n", "self", ".", "assertEqual", "(", "tuple", "(", "selected", ".", "shape", ")", ",", "(", "2", ",", "3", ",", "5", ")", ")", "\n", "\n", "# make sure that correct tokens were selected", "\n", "for", "i", "in", "range", "(", "index", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "index", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "self", ".", "_assert_tensor_equal", "(", "tokens", "[", "i", ",", "index", "[", "i", ",", "j", "]", "]", ",", "selected", "[", "i", ",", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_set_at_index": [[121, 135], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "lightly.models.utils.set_at_index", "range", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "test_ModelUtils.TestModelUtils._assert_tensor_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.set_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._assert_tensor_equal"], ["", "", "", "def", "test_set_at_index", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "index", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "1", ",", "0", ",", "3", "]", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ",", "\n", "]", ")", ".", "long", "(", ")", "\n", "tokens", "=", "torch", ".", "rand", "(", "2", ",", "4", ",", "5", ")", "\n", "values", "=", "torch", ".", "rand", "(", "2", ",", "3", ",", "5", ")", "\n", "new_tokens", "=", "utils", ".", "set_at_index", "(", "tokens", ",", "index", ",", "values", ")", "\n", "\n", "# make sure that values are copied correctly", "\n", "for", "i", "in", "range", "(", "index", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "index", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "self", ".", "_assert_tensor_equal", "(", "new_tokens", "[", "i", ",", "index", "[", "i", ",", "j", "]", "]", ",", "values", "[", "i", ",", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_prepend_class_token": [[136, 146], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "lightly.models.utils.prepend_class_token", "test_ModelUtils.TestModelUtils.assertListEqual", "range", "list", "test_ModelUtils.TestModelUtils._assert_tensor_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.prepend_class_token", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._assert_tensor_equal"], ["", "", "", "def", "test_prepend_class_token", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "tokens", "=", "torch", ".", "rand", "(", "2", ",", "3", ",", "5", ")", "\n", "class_token", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "5", ")", "\n", "new_tokens", "=", "utils", ".", "prepend_class_token", "(", "tokens", ",", "class_token", ")", "\n", "self", ".", "assertListEqual", "(", "list", "(", "new_tokens", ".", "shape", ")", ",", "[", "2", ",", "4", ",", "5", "]", ")", "\n", "\n", "# make sure that class token is inserted in correct place", "\n", "for", "i", "in", "range", "(", "new_tokens", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "_assert_tensor_equal", "(", "new_tokens", "[", "i", "]", "[", "0", "]", ",", "class_token", "[", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_patchify": [[147, 171], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "lightly.models.utils.patchify", "test_ModelUtils.TestModelUtils.assertListEqual", "zip", "list", "range", "range", "expected_patch.permute().flatten.permute().flatten.permute().flatten", "test_ModelUtils.TestModelUtils._assert_tensor_equal", "expected_patch.permute().flatten.permute().flatten.permute"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.patchify", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._assert_tensor_equal"], ["", "", "def", "test_patchify", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "(", "2", ",", "3", ",", "8", ",", "8", ")", "\n", "patch_size", "=", "4", "\n", "images", "=", "torch", ".", "rand", "(", "batch_size", ",", "channels", ",", "height", ",", "width", ")", "\n", "batch_patches", "=", "utils", ".", "patchify", "(", "images", ",", "patch_size", ")", "\n", "\n", "height_patches", "=", "(", "height", "//", "patch_size", ")", "\n", "width_patches", "=", "(", "width", "//", "patch_size", ")", "\n", "num_patches", "=", "height_patches", "*", "width_patches", "\n", "patch_dim", "=", "channels", "*", "patch_size", "**", "2", "\n", "\n", "self", ".", "assertListEqual", "(", "list", "(", "batch_patches", ".", "shape", ")", ",", "[", "batch_size", ",", "num_patches", ",", "patch_dim", "]", ")", "\n", "\n", "# make sure that patches are correctly formed", "\n", "for", "(", "image", ",", "img_patches", ")", "in", "zip", "(", "images", ",", "batch_patches", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "height_patches", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "width_patches", ")", ":", "\n", "# extract patch from original image", "\n", "                    ", "expected_patch", "=", "image", "[", ":", ",", "i", "*", "patch_size", ":", "(", "i", "+", "1", ")", "*", "patch_size", ",", "j", "*", "patch_size", ":", "(", "j", "+", "1", ")", "*", "patch_size", "]", "\n", "#\u00a0permute and flatten to match order of patchified images", "\n", "expected_patch", "=", "expected_patch", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "flatten", "(", ")", "\n", "img_patch", "=", "img_patches", "[", "i", "*", "width_patches", "+", "j", "]", "\n", "self", ".", "_assert_tensor_equal", "(", "img_patch", ",", "expected_patch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._test_random_token_mask": [[172, 198], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "lightly.models.utils.random_token_mask", "torch.cat().sort", "torch.cat().sort", "torch.cat().sort", "torch.cat().sort", "torch.arange().repeat().reshape", "torch.arange().repeat().reshape", "torch.arange().repeat().reshape", "torch.arange().repeat().reshape", "expected_idx.to.to.to", "test_ModelUtils.TestModelUtils._assert_tensor_equal", "test_ModelUtils.TestModelUtils.assertTrue", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.all", "torch.all", "torch.all", "torch.all", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._assert_tensor_equal"], ["", "", "", "", "def", "_test_random_token_mask", "(", "\n", "self", ",", "\n", "seed", "=", "0", ",", "\n", "mask_ratio", "=", "0.6", ",", "\n", "mask_class_token", "=", "False", ",", "\n", "device", "=", "'cpu'", "\n", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "batch_size", ",", "seq_length", "=", "2", ",", "5", "\n", "idx_keep", ",", "idx_mask", "=", "utils", ".", "random_token_mask", "(", "\n", "size", "=", "(", "batch_size", ",", "seq_length", ")", ",", "\n", "mask_ratio", "=", "mask_ratio", ",", "\n", "mask_class_token", "=", "mask_class_token", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "# concatenating and sorting the two index tensors should result in a tensor", "\n", "# with every index appearing exactly once", "\n", "idx", ",", "_", "=", "torch", ".", "cat", "(", "[", "idx_keep", ",", "idx_mask", "]", ",", "dim", "=", "1", ")", ".", "sort", "(", "dim", "=", "1", ")", "\n", "expected_idx", "=", "torch", ".", "arange", "(", "seq_length", ")", ".", "repeat", "(", "batch_size", ")", ".", "reshape", "(", "batch_size", ",", "seq_length", ")", "\n", "expected_idx", "=", "expected_idx", ".", "to", "(", "device", ")", "\n", "self", ".", "_assert_tensor_equal", "(", "idx", ",", "expected_idx", ")", "\n", "\n", "if", "not", "mask_class_token", ":", "\n", "# class token should be first in index", "\n", "            ", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "idx_keep", "[", ":", ",", "0", "]", "==", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._test_random_token_mask_parameters": [[199, 206], ["test_ModelUtils.TestModelUtils._test_random_token_mask"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._test_random_token_mask"], ["", "", "def", "_test_random_token_mask_parameters", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "mask_ratio", "in", "[", "0", ",", "0.6", ",", "1.0", "]", ":", "\n", "            ", "for", "mask_class_token", "in", "[", "False", ",", "True", "]", ":", "\n", "                ", "self", ".", "_test_random_token_mask", "(", "\n", "mask_ratio", "=", "mask_ratio", ",", "\n", "mask_class_token", "=", "mask_class_token", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_random_token_mask": [[208, 210], ["test_ModelUtils.TestModelUtils._test_random_token_mask_parameters"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._test_random_token_mask_parameters"], ["", "", "", "def", "test_random_token_mask", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_random_token_mask_parameters", "(", "device", "=", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils.test_random_token_mask_cuda": [[211, 214], ["unittest.skipUnless", "test_ModelUtils.TestModelUtils._test_random_token_mask_parameters", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.TestModelUtils._test_random_token_mask_parameters"], ["", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"No cuda available\"", ")", "\n", "def", "test_random_token_mask_cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_random_token_mask_parameters", "(", "device", "=", "\"cuda\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelUtils.has_grad": [[17, 26], ["model.parameters"], "function", ["None"], ["def", "has_grad", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Helper method to check if a model has `requires_grad` set to True\n    \"\"\"", "\n", "has_grad_", "=", "False", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", "==", "True", ":", "\n", "            ", "has_grad_", "=", "True", "\n", "break", "\n", "", "", "return", "has_grad_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.TestModelsBYOL.setUp": [[26, 33], ["torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "resnet_variants", "=", "[", "\n", "'resnet-18'", ",", "\n", "'resnet-50'", "\n", "]", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.TestModelsBYOL.test_create_variations_cpu": [[34, 39], ["lightly.models.ResNetGenerator", "lightly.models.BYOL", "test_ModelsBYOL.TestModelsBYOL.assertIsNotNone", "test_ModelsBYOL.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "def", "test_create_variations_cpu", "(", "self", ")", ":", "\n", "        ", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "BYOL", "(", "get_backbone", "(", "resnet", ")", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.TestModelsBYOL.test_create_variations_gpu": [[40, 49], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lightly.models.ResNetGenerator", "lightly.models.BYOL().to", "test_ModelsBYOL.TestModelsBYOL.assertIsNotNone", "lightly.models.BYOL", "test_ModelsBYOL.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_create_variations_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "if", "device", "==", "'cuda'", ":", "\n", "            ", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "BYOL", "(", "get_backbone", "(", "resnet", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.TestModelsBYOL.test_feature_dim_configurable": [[50, 73], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "zip", "lightly.models.ResNetGenerator", "lightly.models.BYOL().to", "test_ModelsBYOL.TestModelsBYOL.assertEqual", "test_ModelsBYOL.TestModelsBYOL.assertEqual", "test_ModelsBYOL.TestModelsBYOL.assertIsNotNone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.BYOL().to.backbone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.BYOL().to.projection_head", "lightly.models.BYOL", "test_ModelsBYOL.TestModelsBYOL.input_tensor.to", "BYOL().to.backbone.squeeze", "test_ModelsBYOL.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_feature_dim_configurable", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "for", "num_ftrs", ",", "out_dim", "in", "zip", "(", "[", "16", ",", "64", "]", ",", "[", "64", ",", "256", "]", ")", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "BYOL", "(", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "num_ftrs", ")", ",", "\n", "num_ftrs", "=", "num_ftrs", ",", "\n", "out_dim", "=", "out_dim", ")", ".", "to", "(", "device", ")", "\n", "\n", "# check that feature vector has correct dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_features", "=", "model", ".", "backbone", "(", "\n", "self", ".", "input_tensor", ".", "to", "(", "device", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_features", ".", "shape", "[", "1", "]", ",", "num_ftrs", ")", "\n", "\n", "# check that projection head output has right dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_projection", "=", "model", ".", "projection_head", "(", "\n", "out_features", ".", "squeeze", "(", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_projection", ".", "shape", "[", "1", "]", ",", "out_dim", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.TestModelsBYOL.test_variations_input_dimension": [[74, 96], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "zip", "lightly.models.ResNetGenerator", "lightly.models.BYOL().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsBYOL.TestModelsBYOL.assertIsNotNone", "test_ModelsBYOL.TestModelsBYOL.assertIsNotNone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.BYOL().to.", "lightly.models.BYOL", "torch.rand.to", "torch.rand.to", "torch.rand.to", "torch.rand.to", "test_ModelsBYOL.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "", "def", "test_variations_input_dimension", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "for", "input_width", ",", "input_height", "in", "zip", "(", "[", "32", ",", "64", "]", ",", "[", "64", ",", "64", "]", ")", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "BYOL", "(", "\n", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "32", ")", ",", "\n", "num_ftrs", "=", "32", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "\n", "3", ",", "\n", "input_height", ",", "\n", "input_width", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out", ",", "_", "=", "model", "(", "\n", "input_tensor", ".", "to", "(", "device", ")", ",", "\n", "input_tensor", ".", "to", "(", "device", ")", "\n", ")", "\n", "\n", "", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsNotNone", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.TestModelsBYOL.test_tuple_input": [[97, 114], ["lightly.models.ResNetGenerator", "lightly.models.BYOL().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "lightly.models.BYOL().to.", "test_ModelsBYOL.TestModelsBYOL.assertEqual", "test_ModelsBYOL.TestModelsBYOL.assertEqual", "test_ModelsBYOL.TestModelsBYOL.assertEqual", "test_ModelsBYOL.TestModelsBYOL.assertEqual", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lightly.models.BYOL", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsBYOL.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "", "def", "test_tuple_input", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "resnet", "=", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "model", "=", "BYOL", "(", "\n", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "32", ")", ",", "\n", "num_ftrs", "=", "32", ",", "\n", "out_dim", "=", "128", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "x0", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "x1", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "(", "z0", ",", "p0", ")", ",", "(", "z1", ",", "p1", ")", "=", "model", "(", "x0", ",", "x1", ")", "\n", "self", ".", "assertEqual", "(", "z0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "z1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "p0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "p1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.TestModelsBYOL.test_raises": [[115, 131], ["lightly.models.ResNetGenerator", "lightly.models.BYOL", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsBYOL.get_backbone", "test_ModelsBYOL.TestModelsBYOL.assertRaises", "lightly.models.BYOL.", "test_ModelsBYOL.TestModelsBYOL.assertRaises", "lightly.models.BYOL.", "test_ModelsBYOL.TestModelsBYOL.assertRaises", "lightly.models.BYOL."], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "def", "test_raises", "(", "self", ")", ":", "\n", "\n", "        ", "resnet", "=", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "model", "=", "BYOL", "(", "get_backbone", "(", "resnet", ")", ")", "\n", "x0", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "model", "(", "x0", ",", "None", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "model", "(", "None", ",", "x0", ")", "\n", "\n", "# test different input shape", "\n", "", "x1", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "5", ",", "32", ",", "32", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "model", "(", "x0", ",", "x1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsBYOL.get_backbone": [[13, 22], ["torch.Sequential", "lightly.models.batchnorm.get_norm_layer", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "list", "resnet.children", "list", "resnet.children"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer"], ["def", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "64", ")", ":", "\n", "    ", "last_conv_channels", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "lightly", ".", "models", ".", "batchnorm", ".", "get_norm_layer", "(", "3", ",", "0", ")", ",", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "Conv2d", "(", "last_conv_channels", ",", "num_ftrs", ",", "1", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimCLR.TestModelsSimCLR.setUp": [[25, 32], ["torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "resnet_variants", "=", "[", "\n", "'resnet-18'", ",", "\n", "'resnet-50'", "\n", "]", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimCLR.TestModelsSimCLR.test_create_variations_cpu": [[33, 38], ["lightly.models.ResNetGenerator", "lightly.models.SimCLR", "test_ModelsSimCLR.TestModelsSimCLR.assertIsNotNone", "test_ModelsSimCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "def", "test_create_variations_cpu", "(", "self", ")", ":", "\n", "        ", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "SimCLR", "(", "get_backbone", "(", "resnet", ")", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimCLR.TestModelsSimCLR.test_create_variations_gpu": [[39, 48], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lightly.models.ResNetGenerator", "lightly.models.SimCLR().to", "test_ModelsSimCLR.TestModelsSimCLR.assertIsNotNone", "lightly.models.SimCLR", "test_ModelsSimCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_create_variations_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "if", "device", "==", "'cuda'", ":", "\n", "            ", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "SimCLR", "(", "get_backbone", "(", "resnet", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimCLR.TestModelsSimCLR.test_feature_dim_configurable": [[49, 72], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "zip", "lightly.models.ResNetGenerator", "lightly.models.SimCLR().to", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "test_ModelsSimCLR.TestModelsSimCLR.assertIsNotNone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.SimCLR().to.backbone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.SimCLR().to.projection_head", "lightly.models.SimCLR", "test_ModelsSimCLR.TestModelsSimCLR.input_tensor.to", "SimCLR().to.backbone.squeeze", "test_ModelsSimCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_feature_dim_configurable", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "for", "num_ftrs", ",", "out_dim", "in", "zip", "(", "[", "16", ",", "64", "]", ",", "[", "64", ",", "256", "]", ")", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "SimCLR", "(", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "num_ftrs", ")", ",", "\n", "num_ftrs", "=", "num_ftrs", ",", "\n", "out_dim", "=", "out_dim", ")", ".", "to", "(", "device", ")", "\n", "\n", "# check that feature vector has correct dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_features", "=", "model", ".", "backbone", "(", "\n", "self", ".", "input_tensor", ".", "to", "(", "device", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_features", ".", "shape", "[", "1", "]", ",", "num_ftrs", ")", "\n", "\n", "# check that projection head output has right dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_projection", "=", "model", ".", "projection_head", "(", "\n", "out_features", ".", "squeeze", "(", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_projection", ".", "shape", "[", "1", "]", ",", "out_dim", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimCLR.TestModelsSimCLR.test_variations_input_dimension": [[73, 89], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "zip", "lightly.models.ResNetGenerator", "lightly.models.SimCLR().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsSimCLR.TestModelsSimCLR.assertIsNotNone", "test_ModelsSimCLR.TestModelsSimCLR.assertIsNotNone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.SimCLR().to.", "lightly.models.SimCLR", "torch.rand.to", "torch.rand.to", "test_ModelsSimCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "", "def", "test_variations_input_dimension", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "for", "input_width", ",", "input_height", "in", "zip", "(", "[", "32", ",", "64", "]", ",", "[", "64", ",", "64", "]", ")", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "SimCLR", "(", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "32", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "\n", "3", ",", "\n", "input_height", ",", "\n", "input_width", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out", "=", "model", "(", "input_tensor", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsNotNone", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimCLR.TestModelsSimCLR.test_tuple_input": [[90, 114], ["lightly.models.ResNetGenerator", "lightly.models.SimCLR().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "lightly.models.SimCLR().to.", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "lightly.models.SimCLR().to.", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "lightly.models.SimCLR().to.", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "lightly.models.SimCLR().to.", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "test_ModelsSimCLR.TestModelsSimCLR.assertEqual", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lightly.models.SimCLR", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsSimCLR.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "", "def", "test_tuple_input", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "resnet", "=", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "model", "=", "SimCLR", "(", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "32", ")", ",", "out_dim", "=", "128", ")", ".", "to", "(", "device", ")", "\n", "\n", "x0", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "x1", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "out", "=", "model", "(", "x0", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "\n", "out", ",", "features", "=", "model", "(", "x0", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "features", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "32", ")", ")", "\n", "\n", "out0", ",", "out1", "=", "model", "(", "x0", ",", "x1", ")", "\n", "self", ".", "assertEqual", "(", "out0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "\n", "(", "out0", ",", "f0", ")", ",", "(", "out1", ",", "f1", ")", "=", "model", "(", "x0", ",", "x1", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "f0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "32", ")", ")", "\n", "self", ".", "assertEqual", "(", "f1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsSimCLR.get_backbone": [[12, 21], ["torch.Sequential", "lightly.models.batchnorm.get_norm_layer", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "list", "resnet.children", "list", "resnet.children"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer"], ["def", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "64", ")", ":", "\n", "    ", "last_conv_channels", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "lightly", ".", "models", ".", "batchnorm", ".", "get_norm_layer", "(", "3", ",", "0", ")", ",", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "Conv2d", "(", "last_conv_channels", ",", "num_ftrs", ",", "1", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.setUp": [[22, 44], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "n_features", "=", "[", "\n", "(", "8", ",", "16", ",", "32", ")", ",", "\n", "(", "8", ",", "32", ",", "16", ")", ",", "\n", "(", "16", ",", "8", ",", "32", ")", ",", "\n", "(", "16", ",", "32", ",", "8", ")", ",", "\n", "(", "32", ",", "8", ",", "16", ")", ",", "\n", "(", "32", ",", "16", ",", "8", ")", ",", "\n", "]", "\n", "self", ".", "heads", "=", "[", "\n", "BarlowTwinsProjectionHead", ",", "\n", "BYOLProjectionHead", ",", "\n", "BYOLPredictionHead", ",", "\n", "MoCoProjectionHead", ",", "\n", "NNCLRProjectionHead", ",", "\n", "NNCLRPredictionHead", ",", "\n", "SimCLRProjectionHead", ",", "\n", "SimSiamProjectionHead", ",", "\n", "SimSiamPredictionHead", ",", "\n", "SwaVProjectionHead", ",", "\n", "DINOProjectionHead", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_single_projection_head": [[47, 68], ["torch.manual_seed", "head_cls.eval", "head_cls.to", "head_cls", "head_cls", "test_ProjectionHeads.TestProjectionHeads.subTest", "torch.torch.rand().to", "test_ProjectionHeads.TestProjectionHeads.assertEqual", "test_ProjectionHeads.TestProjectionHeads.assertEqual", "torch.no_grad", "head_cls.", "torch.torch.rand"], "methods", ["None"], ["", "def", "test_single_projection_head", "(", "self", ",", "device", ":", "str", "=", "'cpu'", ",", "seed", "=", "0", ")", ":", "\n", "        ", "for", "head_cls", "in", "self", ".", "heads", ":", "\n", "            ", "for", "in_features", ",", "hidden_features", ",", "out_features", "in", "self", ".", "n_features", ":", "\n", "                ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "head_cls", "==", "DINOProjectionHead", ":", "\n", "                    ", "bottleneck_features", "=", "hidden_features", "\n", "head", "=", "head_cls", "(", "in_features", ",", "hidden_features", ",", "bottleneck_features", ",", "out_features", ")", "\n", "", "else", ":", "\n", "                    ", "head", "=", "head_cls", "(", "in_features", ",", "hidden_features", ",", "out_features", ")", "\n", "", "head", "=", "head", ".", "eval", "(", ")", "\n", "head", "=", "head", ".", "to", "(", "device", ")", "\n", "for", "batch_size", "in", "[", "1", ",", "2", "]", ":", "\n", "                    ", "msg", "=", "f'head: {head_cls}'", "+", "f'd_in, d_h, d_out = '", "+", "f'{in_features}x{hidden_features}x{out_features}'", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "msg", ")", ":", "\n", "                        ", "x", "=", "torch", ".", "torch", ".", "rand", "(", "(", "batch_size", ",", "in_features", ")", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "y", "=", "head", "(", "x", ")", "\n", "", "self", ".", "assertEqual", "(", "y", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", "[", "1", "]", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_single_projection_head_cuda": [[69, 72], ["unittest.skipUnless", "test_ProjectionHeads.TestProjectionHeads.test_single_projection_head", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_single_projection_head"], ["", "", "", "", "", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"skip\"", ")", "\n", "def", "test_single_projection_head_cuda", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "test_single_projection_head", "(", "device", "=", "'cuda'", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_swav_prototypes": [[73, 88], ["torch.manual_seed", "lightly.models.modules.heads.SwaVPrototypes", "prototypes.to.to.eval", "prototypes.to.to.to", "test_ProjectionHeads.TestProjectionHeads.subTest", "torch.torch.rand().to", "test_ProjectionHeads.TestProjectionHeads.assertEqual", "test_ProjectionHeads.TestProjectionHeads.assertEqual", "torch.no_grad", "prototypes.to.to.", "torch.torch.rand"], "methods", ["None"], ["", "def", "test_swav_prototypes", "(", "self", ",", "device", ":", "str", "=", "'cpu'", ",", "seed", "=", "0", ")", ":", "\n", "        ", "for", "in_features", ",", "_", ",", "n_prototypes", "in", "self", ".", "n_features", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "prototypes", "=", "SwaVPrototypes", "(", "in_features", ",", "n_prototypes", ")", "\n", "prototypes", "=", "prototypes", ".", "eval", "(", ")", "\n", "prototypes", "=", "prototypes", ".", "to", "(", "device", ")", "\n", "for", "batch_size", "in", "[", "1", ",", "2", "]", ":", "\n", "                ", "msg", "=", "'prototypes d_in, n_prototypes = '", "+", "f'{in_features} x {n_prototypes}'", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "msg", ")", ":", "\n", "                        ", "x", "=", "torch", ".", "torch", ".", "rand", "(", "(", "batch_size", ",", "in_features", ")", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "y", "=", "prototypes", "(", "x", ")", "\n", "", "self", ".", "assertEqual", "(", "y", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", "[", "1", "]", ",", "n_prototypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_swav_prototypes_cuda": [[89, 92], ["unittest.skipUnless", "test_ProjectionHeads.TestProjectionHeads.test_swav_prototypes", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_swav_prototypes"], ["", "", "", "", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"skip\"", ")", "\n", "def", "test_swav_prototypes_cuda", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "test_swav_prototypes", "(", "device", "=", "'cuda'", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_dino_projection_head": [[93, 118], ["torch.manual_seed", "lightly.models.modules.heads.DINOProjectionHead", "head.to.to.eval", "head.to.to.to", "test_ProjectionHeads.TestProjectionHeads.subTest", "torch.torch.rand().to", "test_ProjectionHeads.TestProjectionHeads.assertEqual", "test_ProjectionHeads.TestProjectionHeads.assertEqual", "torch.no_grad", "head.to.to.", "torch.torch.rand"], "methods", ["None"], ["", "def", "test_dino_projection_head", "(", "self", ",", "device", "=", "\"cpu\"", ",", "seed", "=", "0", ")", ":", "\n", "        ", "input_dim", ",", "hidden_dim", ",", "output_dim", "=", "self", ".", "n_features", "[", "0", "]", "\n", "for", "bottleneck_dim", "in", "[", "8", ",", "16", ",", "32", "]", ":", "\n", "            ", "for", "batch_norm", "in", "[", "False", ",", "True", "]", ":", "\n", "                ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "head", "=", "DINOProjectionHead", "(", "\n", "input_dim", "=", "input_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "bottleneck_dim", "=", "bottleneck_dim", ",", "\n", "batch_norm", "=", "batch_norm", ",", "\n", ")", "\n", "head", "=", "head", ".", "eval", "(", ")", "\n", "head", "=", "head", ".", "to", "(", "device", ")", "\n", "for", "batch_size", "in", "[", "1", ",", "2", "]", ":", "\n", "                    ", "msg", "=", "(", "\n", "f\"bottleneck_dim={bottleneck_dim}, \"", "\n", "f\"batch_norm={batch_norm}\"", "\n", ")", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "msg", ")", ":", "\n", "                        ", "x", "=", "torch", ".", "torch", ".", "rand", "(", "(", "batch_size", ",", "input_dim", ")", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "y", "=", "head", "(", "x", ")", "\n", "", "self", ".", "assertEqual", "(", "y", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", "[", "1", "]", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_dino_projection_head_cuda": [[119, 122], ["unittest.skipUnless", "test_ProjectionHeads.TestProjectionHeads.test_dino_projection_head", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_dino_projection_head"], ["", "", "", "", "", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"skip\"", ")", "\n", "def", "test_dino_projection_head_cuda", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "test_dino_projection_head", "(", "device", "=", "\"cuda\"", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ProjectionHeads.TestProjectionHeads.test_dino_projection_head_freeze_last_layer": [[123, 166], ["torch.manual_seed", "range", "lightly.models.modules.heads.DINOProjectionHead", "torch.optim.SGD", "lightly.loss.DINOLoss", "range", "lightly.models.modules.heads.DINOProjectionHead.parameters", "param.data.detach().clone", "lightly.models.modules.heads.DINOProjectionHead.last_layer.parameters", "test_ProjectionHeads.TestProjectionHeads.subTest", "lightly.loss.DINOLoss.", "torch.optim.SGD.zero_grad", "lightly.loss.DINOLoss.backward", "lightly.models.modules.heads.DINOProjectionHead.cancel_last_layer_gradients", "torch.optim.SGD.step", "lightly.models.modules.heads.DINOProjectionHead.last_layer.parameters", "zip", "param.data.detach", "torch.rand", "lightly.models.modules.heads.DINOProjectionHead.", "lightly.models.modules.heads.DINOProjectionHead.", "range", "torch.allclose", "test_ProjectionHeads.TestProjectionHeads.assertFalse", "test_ProjectionHeads.TestProjectionHeads.assertTrue"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.GatherLayer.backward", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.DINOProjectionHead.cancel_last_layer_gradients"], ["", "def", "test_dino_projection_head_freeze_last_layer", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "\"\"\"Test if freeze last layer cancels backprop.\"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "for", "norm_last_layer", "in", "[", "False", ",", "True", "]", ":", "\n", "            ", "for", "freeze_last_layer", "in", "range", "(", "-", "1", ",", "3", ")", ":", "\n", "                ", "head", "=", "DINOProjectionHead", "(", "\n", "input_dim", "=", "4", ",", "\n", "hidden_dim", "=", "4", ",", "\n", "output_dim", "=", "4", ",", "\n", "bottleneck_dim", "=", "4", ",", "\n", "freeze_last_layer", "=", "freeze_last_layer", ",", "\n", "norm_last_layer", "=", "norm_last_layer", ",", "\n", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "head", ".", "parameters", "(", ")", ",", "lr", "=", "1", ")", "\n", "criterion", "=", "lightly", ".", "loss", ".", "DINOLoss", "(", "output_dim", "=", "4", ")", "\n", "# Store initial weights of last layer", "\n", "initial_data", "=", "[", "\n", "param", ".", "data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "for", "param", "in", "head", ".", "last_layer", ".", "parameters", "(", ")", "\n", "]", "\n", "for", "epoch", "in", "range", "(", "5", ")", ":", "\n", "                    ", "with", "self", ".", "subTest", "(", "\n", "f'norm_last_layer={norm_last_layer}, '", "\n", "f'freeze_last_layer={freeze_last_layer}, '", "\n", "f'epoch={epoch}'", "\n", ")", ":", "\n", "                        ", "views", "=", "[", "torch", ".", "rand", "(", "(", "3", ",", "4", ")", ")", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "teacher_out", "=", "[", "head", "(", "view", ")", "for", "view", "in", "views", "]", "\n", "student_out", "=", "[", "head", "(", "view", ")", "for", "view", "in", "views", "]", "\n", "loss", "=", "criterion", "(", "teacher_out", ",", "student_out", ",", "epoch", "=", "epoch", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "head", ".", "cancel_last_layer_gradients", "(", "current_epoch", "=", "epoch", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "params", "=", "head", ".", "last_layer", ".", "parameters", "(", ")", "\n", "# Verify that weights have (not) changed depending on epoch.", "\n", "for", "param", ",", "init_data", "in", "zip", "(", "params", ",", "initial_data", ")", ":", "\n", "                            ", "if", "param", ".", "requires_grad", ":", "\n", "                                ", "are_same", "=", "torch", ".", "allclose", "(", "param", ".", "data", ",", "init_data", ")", "\n", "if", "epoch", ">=", "freeze_last_layer", ":", "\n", "                                    ", "self", ".", "assertFalse", "(", "are_same", ")", "\n", "", "else", ":", "\n", "                                    ", "self", ".", "assertTrue", "(", "are_same", ")", "\n", "", "", "", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.TestModelsMoCo.setUp": [[25, 32], ["torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "resnet_variants", "=", "[", "\n", "'resnet-18'", ",", "\n", "'resnet-50'", "\n", "]", "\n", "self", ".", "batch_size", "=", "2", "\n", "self", ".", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.TestModelsMoCo.test_create_variations_cpu": [[33, 38], ["lightly.models.ResNetGenerator", "lightly.models.MoCo", "test_ModelsMoCo.TestModelsMoCo.assertIsNotNone", "test_ModelsMoCo.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "def", "test_create_variations_cpu", "(", "self", ")", ":", "\n", "        ", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "MoCo", "(", "get_backbone", "(", "resnet", ")", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.TestModelsMoCo.test_create_variations_gpu": [[39, 48], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lightly.models.ResNetGenerator", "lightly.models.MoCo().to", "test_ModelsMoCo.TestModelsMoCo.assertIsNotNone", "lightly.models.MoCo", "test_ModelsMoCo.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_create_variations_gpu", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "if", "device", "==", "'cuda'", ":", "\n", "            ", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "MoCo", "(", "get_backbone", "(", "resnet", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.TestModelsMoCo.test_feature_dim_configurable": [[49, 72], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "zip", "lightly.models.ResNetGenerator", "lightly.models.MoCo().to", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "test_ModelsMoCo.TestModelsMoCo.assertIsNotNone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.MoCo().to.backbone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.MoCo().to.projection_head", "lightly.models.MoCo", "test_ModelsMoCo.TestModelsMoCo.input_tensor.to", "MoCo().to.backbone.squeeze", "test_ModelsMoCo.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "def", "test_feature_dim_configurable", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "for", "num_ftrs", ",", "out_dim", "in", "zip", "(", "[", "16", ",", "64", "]", ",", "[", "64", ",", "256", "]", ")", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "MoCo", "(", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "num_ftrs", ")", ",", "\n", "num_ftrs", "=", "num_ftrs", ",", "\n", "out_dim", "=", "out_dim", ")", ".", "to", "(", "device", ")", "\n", "\n", "# check that feature vector has correct dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_features", "=", "model", ".", "backbone", "(", "\n", "self", ".", "input_tensor", ".", "to", "(", "device", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_features", ".", "shape", "[", "1", "]", ",", "num_ftrs", ")", "\n", "\n", "# check that projection head output has right dimension", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_projection", "=", "model", ".", "projection_head", "(", "\n", "out_features", ".", "squeeze", "(", ")", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "out_projection", ".", "shape", "[", "1", "]", ",", "out_dim", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.TestModelsMoCo.test_variations_input_dimension": [[73, 89], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "zip", "lightly.models.ResNetGenerator", "lightly.models.MoCo().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsMoCo.TestModelsMoCo.assertIsNotNone", "test_ModelsMoCo.TestModelsMoCo.assertIsNotNone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lightly.models.MoCo().to.", "lightly.models.MoCo", "torch.rand.to", "torch.rand.to", "test_ModelsMoCo.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "", "def", "test_variations_input_dimension", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "model_name", "in", "self", ".", "resnet_variants", ":", "\n", "            ", "for", "input_width", ",", "input_height", "in", "zip", "(", "[", "32", ",", "64", "]", ",", "[", "64", ",", "64", "]", ")", ":", "\n", "                ", "resnet", "=", "ResNetGenerator", "(", "model_name", ")", "\n", "model", "=", "MoCo", "(", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "32", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "input_tensor", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "\n", "3", ",", "\n", "input_height", ",", "\n", "input_width", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out", "=", "model", "(", "input_tensor", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsNotNone", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.TestModelsMoCo.test_tuple_input": [[90, 114], ["lightly.models.ResNetGenerator", "lightly.models.MoCo().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "lightly.models.MoCo().to.", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "lightly.models.MoCo().to.", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "lightly.models.MoCo().to.", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "lightly.models.MoCo().to.", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "test_ModelsMoCo.TestModelsMoCo.assertEqual", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lightly.models.MoCo", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "test_ModelsMoCo.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone"], ["", "", "", "def", "test_tuple_input", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "resnet", "=", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "model", "=", "MoCo", "(", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "32", ")", ",", "out_dim", "=", "128", ")", ".", "to", "(", "device", ")", "\n", "\n", "x0", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "x1", "=", "torch", ".", "rand", "(", "(", "self", ".", "batch_size", ",", "3", ",", "64", ",", "64", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "out", "=", "model", "(", "x0", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "\n", "out", ",", "features", "=", "model", "(", "x0", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "features", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "32", ")", ")", "\n", "\n", "out0", ",", "out1", "=", "model", "(", "x0", ",", "x1", ")", "\n", "self", ".", "assertEqual", "(", "out0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "\n", "(", "out0", ",", "f0", ")", ",", "(", "out1", ",", "f1", ")", "=", "model", "(", "x0", ",", "x1", ",", "return_features", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "out1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "128", ")", ")", "\n", "self", ".", "assertEqual", "(", "f0", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "32", ")", ")", "\n", "self", ".", "assertEqual", "(", "f1", ".", "shape", ",", "(", "self", ".", "batch_size", ",", "32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.models.test_ModelsMoCo.get_backbone": [[12, 21], ["torch.Sequential", "lightly.models.batchnorm.get_norm_layer", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "list", "resnet.children", "list", "resnet.children"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.batchnorm.get_norm_layer"], ["def", "get_backbone", "(", "resnet", ",", "num_ftrs", "=", "64", ")", ":", "\n", "    ", "last_conv_channels", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "lightly", ".", "models", ".", "batchnorm", ".", "get_norm_layer", "(", "3", ",", "0", ")", ",", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "Conv2d", "(", "last_conv_channels", ",", "num_ftrs", ",", "1", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.create_or_update_shared_access_config_by_dataset_id": [[36, 58], ["kwargs.get", "collaboration_api.CollaborationApi.create_or_update_shared_access_config_by_dataset_id_with_http_info", "collaboration_api.CollaborationApi.create_or_update_shared_access_config_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.create_or_update_shared_access_config_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.create_or_update_shared_access_config_by_dataset_id_with_http_info"], ["", "def", "create_or_update_shared_access_config_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_shared_access_config_by_dataset_id  # noqa: E501\n\n        Create or update a shared access config.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_shared_access_config_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SharedAccessConfigCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_or_update_shared_access_config_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_or_update_shared_access_config_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.create_or_update_shared_access_config_by_dataset_id_with_http_info": [[59, 142], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "collaboration_api.CollaborationApi.api_client.select_header_accept", "collaboration_api.CollaborationApi.api_client.select_header_content_type", "collaboration_api.CollaborationApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_or_update_shared_access_config_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_shared_access_config_by_dataset_id  # noqa: E501\n\n        Create or update a shared access config.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_shared_access_config_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SharedAccessConfigCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_or_update_shared_access_config_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_or_update_shared_access_config_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_or_update_shared_access_config_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/collaboration/access'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.delete_shared_access_config_by_id": [[143, 165], ["kwargs.get", "collaboration_api.CollaborationApi.delete_shared_access_config_by_id_with_http_info", "collaboration_api.CollaborationApi.delete_shared_access_config_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.delete_shared_access_config_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.delete_shared_access_config_by_id_with_http_info"], ["", "def", "delete_shared_access_config_by_id", "(", "self", ",", "dataset_id", ",", "access_config_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_shared_access_config_by_id  # noqa: E501\n\n        Delete shared access config by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_shared_access_config_by_id(dataset_id, access_config_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID access_config_id: ObjectId of the shared access config. (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "delete_shared_access_config_by_id_with_http_info", "(", "dataset_id", ",", "access_config_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "delete_shared_access_config_by_id_with_http_info", "(", "dataset_id", ",", "access_config_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.delete_shared_access_config_by_id_with_http_info": [[166, 245], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "collaboration_api.CollaborationApi.api_client.select_header_accept", "collaboration_api.CollaborationApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "delete_shared_access_config_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "access_config_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_shared_access_config_by_id  # noqa: E501\n\n        Delete shared access config by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_shared_access_config_by_id_with_http_info(dataset_id, access_config_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID access_config_id: ObjectId of the shared access config. (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'access_config_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method delete_shared_access_config_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `delete_shared_access_config_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'access_config_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'access_config_id'", "not", "in", "params", "or", "\n", "params", "[", "'access_config_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `access_config_id` when calling `delete_shared_access_config_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'access_config_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'accessConfigId'", "]", "=", "params", "[", "'access_config_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/collaboration/access/{accessConfigId}'", ",", "'DELETE'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.get_shared_access_configs_by_dataset_id": [[246, 267], ["kwargs.get", "collaboration_api.CollaborationApi.get_shared_access_configs_by_dataset_id_with_http_info", "collaboration_api.CollaborationApi.get_shared_access_configs_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.get_shared_access_configs_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.get_shared_access_configs_by_dataset_id_with_http_info"], ["", "def", "get_shared_access_configs_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_shared_access_configs_by_dataset_id  # noqa: E501\n\n        Get shared access configs by datasetId.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_shared_access_configs_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[SharedAccessConfigData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_shared_access_configs_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_shared_access_configs_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.collaboration_api.CollaborationApi.get_shared_access_configs_by_dataset_id_with_http_info": [[268, 340], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "collaboration_api.CollaborationApi.api_client.select_header_accept", "collaboration_api.CollaborationApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_shared_access_configs_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_shared_access_configs_by_dataset_id  # noqa: E501\n\n        Get shared access configs by datasetId.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_shared_access_configs_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[SharedAccessConfigData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_shared_access_configs_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_shared_access_configs_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/collaboration/access'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[SharedAccessConfigData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.create_embeddings2d_by_embedding_id": [[36, 59], ["kwargs.get", "embeddings2d_api.Embeddings2dApi.create_embeddings2d_by_embedding_id_with_http_info", "embeddings2d_api.Embeddings2dApi.create_embeddings2d_by_embedding_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.create_embeddings2d_by_embedding_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.create_embeddings2d_by_embedding_id_with_http_info"], ["", "def", "create_embeddings2d_by_embedding_id", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_embeddings2d_by_embedding_id  # noqa: E501\n\n        Create a new 2d embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_embeddings2d_by_embedding_id(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param Embedding2dCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_embeddings2d_by_embedding_id_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_embeddings2d_by_embedding_id_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.create_embeddings2d_by_embedding_id_with_http_info": [[60, 150], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings2d_api.Embeddings2dApi.api_client.select_header_accept", "embeddings2d_api.Embeddings2dApi.api_client.select_header_content_type", "embeddings2d_api.Embeddings2dApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_embeddings2d_by_embedding_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_embeddings2d_by_embedding_id  # noqa: E501\n\n        Create a new 2d embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_embeddings2d_by_embedding_id_with_http_info(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param Embedding2dCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'embedding_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_embeddings2d_by_embedding_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_embeddings2d_by_embedding_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_embeddings2d_by_embedding_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `create_embeddings2d_by_embedding_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}/2d'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embedding2d_by_id": [[151, 174], ["kwargs.get", "embeddings2d_api.Embeddings2dApi.get_embedding2d_by_id_with_http_info", "embeddings2d_api.Embeddings2dApi.get_embedding2d_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embedding2d_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embedding2d_by_id_with_http_info"], ["", "def", "get_embedding2d_by_id", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "embedding2d_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embedding2d_by_id  # noqa: E501\n\n        Get the 2d embeddings by id  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embedding2d_by_id(dataset_id, embedding_id, embedding2d_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :param MongoObjectID embedding2d_id: ObjectId of the 2d embedding (required)\n        :return: Embedding2dData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_embedding2d_by_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "embedding2d_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_embedding2d_by_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "embedding2d_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embedding2d_by_id_with_http_info": [[175, 261], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings2d_api.Embeddings2dApi.api_client.select_header_accept", "embeddings2d_api.Embeddings2dApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_embedding2d_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "embedding2d_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embedding2d_by_id  # noqa: E501\n\n        Get the 2d embeddings by id  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embedding2d_by_id_with_http_info(dataset_id, embedding_id, embedding2d_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :param MongoObjectID embedding2d_id: ObjectId of the 2d embedding (required)\n        :return: Embedding2dData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'embedding_id'", ",", "'embedding2d_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_embedding2d_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_embedding2d_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `get_embedding2d_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding2d_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding2d_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding2d_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding2d_id` when calling `get_embedding2d_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding2d_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embedding2dId'", "]", "=", "params", "[", "'embedding2d_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}/2d/{embedding2dId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'Embedding2dData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embeddings2d_by_embedding_id": [[262, 284], ["kwargs.get", "embeddings2d_api.Embeddings2dApi.get_embeddings2d_by_embedding_id_with_http_info", "embeddings2d_api.Embeddings2dApi.get_embeddings2d_by_embedding_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embeddings2d_by_embedding_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embeddings2d_by_embedding_id_with_http_info"], ["", "def", "get_embeddings2d_by_embedding_id", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings2d_by_embedding_id  # noqa: E501\n\n        Get all 2d embeddings of an embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings2d_by_embedding_id(dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: list[Embedding2dData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_embeddings2d_by_embedding_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_embeddings2d_by_embedding_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings2d_api.Embeddings2dApi.get_embeddings2d_by_embedding_id_with_http_info": [[285, 364], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings2d_api.Embeddings2dApi.api_client.select_header_accept", "embeddings2d_api.Embeddings2dApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_embeddings2d_by_embedding_id_with_http_info", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings2d_by_embedding_id  # noqa: E501\n\n        Get all 2d embeddings of an embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings2d_by_embedding_id_with_http_info(dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: list[Embedding2dData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'embedding_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_embeddings2d_by_embedding_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_embeddings2d_by_embedding_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `get_embeddings2d_by_embedding_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}/2d'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[Embedding2dData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_initial_tag_by_dataset_id": [[36, 58], ["kwargs.get", "tags_api.TagsApi.create_initial_tag_by_dataset_id_with_http_info", "tags_api.TagsApi.create_initial_tag_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_initial_tag_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_initial_tag_by_dataset_id_with_http_info"], ["", "def", "create_initial_tag_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_initial_tag_by_dataset_id  # noqa: E501\n\n        create the intitial tag for a dataset which then locks the dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_initial_tag_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param InitialTagCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_initial_tag_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_initial_tag_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_initial_tag_by_dataset_id_with_http_info": [[59, 142], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.select_header_content_type", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_initial_tag_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_initial_tag_by_dataset_id  # noqa: E501\n\n        create the intitial tag for a dataset which then locks the dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_initial_tag_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param InitialTagCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_initial_tag_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_initial_tag_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_initial_tag_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/initial'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_tag_by_dataset_id": [[143, 165], ["kwargs.get", "tags_api.TagsApi.create_tag_by_dataset_id_with_http_info", "tags_api.TagsApi.create_tag_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_tag_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_tag_by_dataset_id_with_http_info"], ["", "def", "create_tag_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_tag_by_dataset_id  # noqa: E501\n\n        create new tag for dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_tag_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_tag_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_tag_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.create_tag_by_dataset_id_with_http_info": [[166, 249], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.select_header_content_type", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_tag_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_tag_by_dataset_id  # noqa: E501\n\n        create new tag for dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_tag_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_tag_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_tag_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_tag_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.delete_tag_by_tag_id": [[250, 272], ["kwargs.get", "tags_api.TagsApi.delete_tag_by_tag_id_with_http_info", "tags_api.TagsApi.delete_tag_by_tag_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.delete_tag_by_tag_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.delete_tag_by_tag_id_with_http_info"], ["", "def", "delete_tag_by_tag_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_tag_by_tag_id  # noqa: E501\n\n        delete a specific tag if its a leaf-tag (e.g is not a dependency of another tag)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_tag_by_tag_id(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "delete_tag_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "delete_tag_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.delete_tag_by_tag_id_with_http_info": [[273, 352], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "delete_tag_by_tag_id_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_tag_by_tag_id  # noqa: E501\n\n        delete a specific tag if its a leaf-tag (e.g is not a dependency of another tag)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_tag_by_tag_id_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method delete_tag_by_tag_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `delete_tag_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `delete_tag_by_tag_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}'", ",", "'DELETE'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.download_zip_of_samples_by_tag_id": [[353, 375], ["kwargs.get", "tags_api.TagsApi.download_zip_of_samples_by_tag_id_with_http_info", "tags_api.TagsApi.download_zip_of_samples_by_tag_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.download_zip_of_samples_by_tag_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.download_zip_of_samples_by_tag_id_with_http_info"], ["", "def", "download_zip_of_samples_by_tag_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"download_zip_of_samples_by_tag_id  # noqa: E501\n\n        Download a zip file of the samples of a tag. Limited to 1000 images  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.download_zip_of_samples_by_tag_id(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "download_zip_of_samples_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "download_zip_of_samples_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.download_zip_of_samples_by_tag_id_with_http_info": [[376, 455], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "download_zip_of_samples_by_tag_id_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"download_zip_of_samples_by_tag_id  # noqa: E501\n\n        Download a zip file of the samples of a tag. Limited to 1000 images  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.download_zip_of_samples_by_tag_id_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method download_zip_of_samples_by_tag_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `download_zip_of_samples_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `download_zip_of_samples_by_tag_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/zip'", ",", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/export/zip'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_basic_filenames": [[456, 484], ["kwargs.get", "tags_api.TagsApi.export_tag_to_basic_filenames_with_http_info", "tags_api.TagsApi.export_tag_to_basic_filenames_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_basic_filenames_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_basic_filenames_with_http_info"], ["", "def", "export_tag_to_basic_filenames", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_basic_filenames  # noqa: E501\n\n        Export the samples filenames of a specific tag   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_basic_filenames(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "export_tag_to_basic_filenames_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "export_tag_to_basic_filenames_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_basic_filenames_with_http_info": [[485, 582], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "export_tag_to_basic_filenames_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_basic_filenames  # noqa: E501\n\n        Export the samples filenames of a specific tag   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_basic_filenames_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", ",", "'expires_in'", ",", "'access_control'", ",", "'file_name_format'", ",", "'include_meta_data'", ",", "'format'", ",", "'preview_example'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method export_tag_to_basic_filenames\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `export_tag_to_basic_filenames`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `export_tag_to_basic_filenames`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'expires_in'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'expiresIn'", ",", "params", "[", "'expires_in'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'access_control'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'accessControl'", ",", "params", "[", "'access_control'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'file_name_format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileNameFormat'", ",", "params", "[", "'file_name_format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'include_meta_data'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'includeMetaData'", ",", "params", "[", "'include_meta_data'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'format'", ",", "params", "[", "'format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'preview_example'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'previewExample'", ",", "params", "[", "'preview_example'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'text/plain'", ",", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/export/basic/filenames'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_box_data_rows": [[583, 611], ["kwargs.get", "tags_api.TagsApi.export_tag_to_label_box_data_rows_with_http_info", "tags_api.TagsApi.export_tag_to_label_box_data_rows_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_box_data_rows_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_box_data_rows_with_http_info"], ["", "def", "export_tag_to_label_box_data_rows", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_label_box_data_rows  # noqa: E501\n\n        Export samples of a tag as a json for importing into LabelBox as outlined here; https://docs.labelbox.com/docs/images-json ```openapi\\\\+warning The image URLs are special in that the resource can be accessed by anyone in possession of said URL for the time specified by the expiresIn query param ```   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_label_box_data_rows(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: LabelBoxDataRows\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "export_tag_to_label_box_data_rows_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "export_tag_to_label_box_data_rows_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_box_data_rows_with_http_info": [[612, 709], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "export_tag_to_label_box_data_rows_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_label_box_data_rows  # noqa: E501\n\n        Export samples of a tag as a json for importing into LabelBox as outlined here; https://docs.labelbox.com/docs/images-json ```openapi\\\\+warning The image URLs are special in that the resource can be accessed by anyone in possession of said URL for the time specified by the expiresIn query param ```   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_label_box_data_rows_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: LabelBoxDataRows\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", ",", "'expires_in'", ",", "'access_control'", ",", "'file_name_format'", ",", "'include_meta_data'", ",", "'format'", ",", "'preview_example'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method export_tag_to_label_box_data_rows\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `export_tag_to_label_box_data_rows`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `export_tag_to_label_box_data_rows`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'expires_in'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'expiresIn'", ",", "params", "[", "'expires_in'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'access_control'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'accessControl'", ",", "params", "[", "'access_control'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'file_name_format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileNameFormat'", ",", "params", "[", "'file_name_format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'include_meta_data'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'includeMetaData'", ",", "params", "[", "'include_meta_data'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'format'", ",", "params", "[", "'format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'preview_example'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'previewExample'", ",", "params", "[", "'preview_example'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/export/LabelBox/datarows'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'LabelBoxDataRows'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_studio_tasks": [[710, 738], ["kwargs.get", "tags_api.TagsApi.export_tag_to_label_studio_tasks_with_http_info", "tags_api.TagsApi.export_tag_to_label_studio_tasks_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_studio_tasks_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_studio_tasks_with_http_info"], ["", "def", "export_tag_to_label_studio_tasks", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_label_studio_tasks  # noqa: E501\n\n        Export samples of a tag as a json for importing into LabelStudio as outlined here; https://labelstud.io/guide/tasks.html#Basic-Label-Studio-JSON-format ```openapi\\\\+warning The image URLs are special in that the resource can be accessed by anyone in possession of said URL for the time specified by the expiresIn query param ```   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_label_studio_tasks(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: LabelStudioTasks\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "export_tag_to_label_studio_tasks_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "export_tag_to_label_studio_tasks_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_label_studio_tasks_with_http_info": [[739, 836], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "export_tag_to_label_studio_tasks_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_label_studio_tasks  # noqa: E501\n\n        Export samples of a tag as a json for importing into LabelStudio as outlined here; https://labelstud.io/guide/tasks.html#Basic-Label-Studio-JSON-format ```openapi\\\\+warning The image URLs are special in that the resource can be accessed by anyone in possession of said URL for the time specified by the expiresIn query param ```   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_label_studio_tasks_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: LabelStudioTasks\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", ",", "'expires_in'", ",", "'access_control'", ",", "'file_name_format'", ",", "'include_meta_data'", ",", "'format'", ",", "'preview_example'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method export_tag_to_label_studio_tasks\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `export_tag_to_label_studio_tasks`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `export_tag_to_label_studio_tasks`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'expires_in'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'expiresIn'", ",", "params", "[", "'expires_in'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'access_control'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'accessControl'", ",", "params", "[", "'access_control'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'file_name_format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileNameFormat'", ",", "params", "[", "'file_name_format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'include_meta_data'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'includeMetaData'", ",", "params", "[", "'include_meta_data'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'format'", ",", "params", "[", "'format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'preview_example'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'previewExample'", ",", "params", "[", "'preview_example'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/export/LabelStudio/tasks'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'LabelStudioTasks'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_sama_tasks": [[837, 865], ["kwargs.get", "tags_api.TagsApi.export_tag_to_sama_tasks_with_http_info", "tags_api.TagsApi.export_tag_to_sama_tasks_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_sama_tasks_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_sama_tasks_with_http_info"], ["", "def", "export_tag_to_sama_tasks", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_sama_tasks  # noqa: E501\n\n        Export samples of a tag as a json for importing into Sama as tasks with the upload form or via the API as outlined here; - https://docs.sama.com/reference/taskcreate - https://docs.sama.com/reference/createbatch  ```openapi\\\\+warning The image URLs are special in that the resource can be accessed by anyone in possession of said URL for the time specified by the expiresIn query param ```   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_sama_tasks(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: SamaTasks\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "export_tag_to_sama_tasks_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "export_tag_to_sama_tasks_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.export_tag_to_sama_tasks_with_http_info": [[866, 963], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "export_tag_to_sama_tasks_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"export_tag_to_sama_tasks  # noqa: E501\n\n        Export samples of a tag as a json for importing into Sama as tasks with the upload form or via the API as outlined here; - https://docs.sama.com/reference/taskcreate - https://docs.sama.com/reference/createbatch  ```openapi\\\\+warning The image URLs are special in that the resource can be accessed by anyone in possession of said URL for the time specified by the expiresIn query param ```   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.export_tag_to_sama_tasks_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param int expires_in: if defined, the URLs provided will only be valid for amount of seconds from time of issuence\n        :param str access_control: which access control name to be used\n        :param FileNameFormat file_name_format:\n        :param bool include_meta_data: if true, will also include metadata\n        :param FileOutputFormat format:\n        :param bool preview_example: if true, will generate a preview example of how the structure will look\n        :return: SamaTasks\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", ",", "'expires_in'", ",", "'access_control'", ",", "'file_name_format'", ",", "'include_meta_data'", ",", "'format'", ",", "'preview_example'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method export_tag_to_sama_tasks\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `export_tag_to_sama_tasks`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `export_tag_to_sama_tasks`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'expires_in'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'expiresIn'", ",", "params", "[", "'expires_in'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'access_control'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'accessControl'", ",", "params", "[", "'access_control'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'file_name_format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileNameFormat'", ",", "params", "[", "'file_name_format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'include_meta_data'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'includeMetaData'", ",", "params", "[", "'include_meta_data'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'format'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'format'", ",", "params", "[", "'format'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'preview_example'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'previewExample'", ",", "params", "[", "'preview_example'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/export/Sama/tasks'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'SamaTasks'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_filenames_by_tag_id": [[964, 986], ["kwargs.get", "tags_api.TagsApi.get_filenames_by_tag_id_with_http_info", "tags_api.TagsApi.get_filenames_by_tag_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_filenames_by_tag_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_filenames_by_tag_id_with_http_info"], ["", "def", "get_filenames_by_tag_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_filenames_by_tag_id  # noqa: E501\n\n        Get list of filenames by tag. Deprecated, please use  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_filenames_by_tag_id(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: TagFilenamesData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_filenames_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_filenames_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_filenames_by_tag_id_with_http_info": [[987, 1066], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_filenames_by_tag_id_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_filenames_by_tag_id  # noqa: E501\n\n        Get list of filenames by tag. Deprecated, please use  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_filenames_by_tag_id_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: TagFilenamesData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_filenames_by_tag_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_filenames_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `get_filenames_by_tag_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'text/plain'", ",", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/filenames'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'TagFilenamesData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tag_by_tag_id": [[1067, 1089], ["kwargs.get", "tags_api.TagsApi.get_tag_by_tag_id_with_http_info", "tags_api.TagsApi.get_tag_by_tag_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tag_by_tag_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tag_by_tag_id_with_http_info"], ["", "def", "get_tag_by_tag_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_tag_by_tag_id  # noqa: E501\n\n        Get information about a specific tag  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_tag_by_tag_id(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: TagData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_tag_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_tag_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tag_by_tag_id_with_http_info": [[1090, 1169], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_tag_by_tag_id_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_tag_by_tag_id  # noqa: E501\n\n        Get information about a specific tag  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_tag_by_tag_id_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: TagData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_tag_by_tag_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_tag_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `get_tag_by_tag_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'TagData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tags_by_dataset_id": [[1170, 1191], ["kwargs.get", "tags_api.TagsApi.get_tags_by_dataset_id_with_http_info", "tags_api.TagsApi.get_tags_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tags_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tags_by_dataset_id_with_http_info"], ["", "def", "get_tags_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_tags_by_dataset_id  # noqa: E501\n\n        Get all tags of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_tags_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[TagData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_tags_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_tags_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.get_tags_by_dataset_id_with_http_info": [[1192, 1264], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_tags_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_tags_by_dataset_id  # noqa: E501\n\n        Get all tags of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_tags_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[TagData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_tags_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_tags_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[TagData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics": [[1265, 1287], ["kwargs.get", "tags_api.TagsApi.perform_tag_arithmetics_with_http_info", "tags_api.TagsApi.perform_tag_arithmetics_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics_with_http_info"], ["", "def", "perform_tag_arithmetics", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"perform_tag_arithmetics  # noqa: E501\n\n        performs tag arithmetics to compute a new bitmask out of two existing tags and optionally create a tag for it  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.perform_tag_arithmetics(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagArithmeticsRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: TagArithmeticsResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "perform_tag_arithmetics_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "perform_tag_arithmetics_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics_with_http_info": [[1288, 1371], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.select_header_content_type", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "perform_tag_arithmetics_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"perform_tag_arithmetics  # noqa: E501\n\n        performs tag arithmetics to compute a new bitmask out of two existing tags and optionally create a tag for it  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.perform_tag_arithmetics_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagArithmeticsRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: TagArithmeticsResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method perform_tag_arithmetics\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `perform_tag_arithmetics`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `perform_tag_arithmetics`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/arithmetics'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'TagArithmeticsResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics_bitmask": [[1372, 1394], ["kwargs.get", "tags_api.TagsApi.perform_tag_arithmetics_bitmask_with_http_info", "tags_api.TagsApi.perform_tag_arithmetics_bitmask_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics_bitmask_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics_bitmask_with_http_info"], ["", "def", "perform_tag_arithmetics_bitmask", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"perform_tag_arithmetics_bitmask  # noqa: E501\n\n        Performs tag arithmetics to compute a new bitmask out of two existing tags. Does not create a new tag regardless if newTagName is provided  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.perform_tag_arithmetics_bitmask(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagArithmeticsRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: TagBitMaskResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "perform_tag_arithmetics_bitmask_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "perform_tag_arithmetics_bitmask_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.perform_tag_arithmetics_bitmask_with_http_info": [[1395, 1478], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.select_header_content_type", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "perform_tag_arithmetics_bitmask_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"perform_tag_arithmetics_bitmask  # noqa: E501\n\n        Performs tag arithmetics to compute a new bitmask out of two existing tags. Does not create a new tag regardless if newTagName is provided  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.perform_tag_arithmetics_bitmask_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagArithmeticsRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: TagBitMaskResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method perform_tag_arithmetics_bitmask\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `perform_tag_arithmetics_bitmask`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `perform_tag_arithmetics_bitmask`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/arithmetics/bitmask'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'TagBitMaskResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.update_tag_by_tag_id": [[1479, 1502], ["kwargs.get", "tags_api.TagsApi.update_tag_by_tag_id_with_http_info", "tags_api.TagsApi.update_tag_by_tag_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.update_tag_by_tag_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.update_tag_by_tag_id_with_http_info"], ["", "def", "update_tag_by_tag_id", "(", "self", ",", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_tag_by_tag_id  # noqa: E501\n\n        update information about a specific tag  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_tag_by_tag_id(body, dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagUpdateRequest body: updated data for tag (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_tag_by_tag_id_with_http_info", "(", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_tag_by_tag_id_with_http_info", "(", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.update_tag_by_tag_id_with_http_info": [[1503, 1593], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.select_header_content_type", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_tag_by_tag_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_tag_by_tag_id  # noqa: E501\n\n        update information about a specific tag  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_tag_by_tag_id_with_http_info(body, dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagUpdateRequest body: updated data for tag (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'tag_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_tag_by_tag_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_tag_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `update_tag_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `update_tag_by_tag_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.upsize_tags_by_dataset_id": [[1594, 1616], ["kwargs.get", "tags_api.TagsApi.upsize_tags_by_dataset_id_with_http_info", "tags_api.TagsApi.upsize_tags_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.upsize_tags_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.upsize_tags_by_dataset_id_with_http_info"], ["", "def", "upsize_tags_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"upsize_tags_by_dataset_id  # noqa: E501\n\n        Upsize all tags for the dataset to the current size of the dataset. Use this after adding more samples to a dataset with an initial-tag. | Creates a new tag holding all samples which are not yet in the initial-tag.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.upsize_tags_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagUpsizeRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "upsize_tags_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "upsize_tags_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.tags_api.TagsApi.upsize_tags_by_dataset_id_with_http_info": [[1617, 1700], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "tags_api.TagsApi.api_client.select_header_accept", "tags_api.TagsApi.api_client.select_header_content_type", "tags_api.TagsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "upsize_tags_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"upsize_tags_by_dataset_id  # noqa: E501\n\n        Upsize all tags for the dataset to the current size of the dataset. Use this after adding more samples to a dataset with an initial-tag. | Creates a new tag holding all samples which are not yet in the initial-tag.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.upsize_tags_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param TagUpsizeRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method upsize_tags_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `upsize_tags_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `upsize_tags_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/upsize'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.create_sample_by_dataset_id": [[36, 58], ["kwargs.get", "samples_api.SamplesApi.create_sample_by_dataset_id_with_http_info", "samples_api.SamplesApi.create_sample_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.create_sample_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.create_sample_by_dataset_id_with_http_info"], ["", "def", "create_sample_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_sample_by_dataset_id  # noqa: E501\n\n        Create a new sample in a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_sample_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SampleCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_sample_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_sample_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.create_sample_by_dataset_id_with_http_info": [[59, 142], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.select_header_content_type", "samples_api.SamplesApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_sample_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_sample_by_dataset_id  # noqa: E501\n\n        Create a new sample in a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_sample_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SampleCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_sample_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_sample_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_sample_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_by_id": [[143, 165], ["kwargs.get", "samples_api.SamplesApi.get_sample_by_id_with_http_info", "samples_api.SamplesApi.get_sample_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_by_id_with_http_info"], ["", "def", "get_sample_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_by_id  # noqa: E501\n\n        Get a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_by_id(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :return: SampleData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_sample_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_sample_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_by_id_with_http_info": [[166, 245], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_sample_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_by_id  # noqa: E501\n\n        Get a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_by_id_with_http_info(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :return: SampleData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'sample_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_sample_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_sample_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `get_sample_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples/{sampleId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'SampleData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_read_url_by_id": [[246, 269], ["kwargs.get", "samples_api.SamplesApi.get_sample_image_read_url_by_id_with_http_info", "samples_api.SamplesApi.get_sample_image_read_url_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_read_url_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_read_url_by_id_with_http_info"], ["", "def", "get_sample_image_read_url_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_read_url_by_id  # noqa: E501\n\n        Get the image path of a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_read_url_by_id(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param str type: if we want to get the full image or just the thumbnail\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_sample_image_read_url_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_sample_image_read_url_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_read_url_by_id_with_http_info": [[270, 352], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_sample_image_read_url_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_read_url_by_id  # noqa: E501\n\n        Get the image path of a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_read_url_by_id_with_http_info(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param str type: if we want to get the full image or just the thumbnail\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'sample_id'", ",", "'type'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_sample_image_read_url_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_sample_image_read_url_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `get_sample_image_read_url_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'type'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'type'", ",", "params", "[", "'type'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples/{sampleId}/readurl'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_resource_redirect_by_id": [[353, 376], ["kwargs.get", "samples_api.SamplesApi.get_sample_image_resource_redirect_by_id_with_http_info", "samples_api.SamplesApi.get_sample_image_resource_redirect_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_resource_redirect_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_resource_redirect_by_id_with_http_info"], ["", "def", "get_sample_image_resource_redirect_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "type", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_resource_redirect_by_id  # noqa: E501\n\n        This endpoint enables anyone given the correct credentials to access the actual image directly. By creating a readURL for the resource and redirecting to that URL, the client can use this endpoint to always have a way to access the resource as there is no expiration   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_resource_redirect_by_id(dataset_id, sample_id, type, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param str type: if we want to get the full image or just the thumbnail (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_sample_image_resource_redirect_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "type", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_sample_image_resource_redirect_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "type", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_resource_redirect_by_id_with_http_info": [[377, 463], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_sample_image_resource_redirect_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "type", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_resource_redirect_by_id  # noqa: E501\n\n        This endpoint enables anyone given the correct credentials to access the actual image directly. By creating a readURL for the resource and redirecting to that URL, the client can use this endpoint to always have a way to access the resource as there is no expiration   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_resource_redirect_by_id_with_http_info(dataset_id, sample_id, type, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param str type: if we want to get the full image or just the thumbnail (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'sample_id'", ",", "'type'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_sample_image_resource_redirect_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_sample_image_resource_redirect_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `get_sample_image_resource_redirect_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'type' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'type'", "not", "in", "params", "or", "\n", "params", "[", "'type'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `type` when calling `get_sample_image_resource_redirect_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'type'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'type'", ",", "params", "[", "'type'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiPublicJWTAuth'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples/{sampleId}/readurlRedirect'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_url_by_id": [[464, 487], ["kwargs.get", "samples_api.SamplesApi.get_sample_image_write_url_by_id_with_http_info", "samples_api.SamplesApi.get_sample_image_write_url_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_url_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_url_by_id_with_http_info"], ["", "def", "get_sample_image_write_url_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "is_thumbnail", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_write_url_by_id  # noqa: E501\n\n        Get the signed url to upload an image to for a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_write_url_by_id(dataset_id, sample_id, is_thumbnail, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param bool is_thumbnail: Whether or not the image to upload is a thumbnail (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_sample_image_write_url_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "is_thumbnail", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_sample_image_write_url_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "is_thumbnail", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_url_by_id_with_http_info": [[488, 574], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_sample_image_write_url_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "is_thumbnail", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_write_url_by_id  # noqa: E501\n\n        Get the signed url to upload an image to for a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_write_url_by_id_with_http_info(dataset_id, sample_id, is_thumbnail, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param bool is_thumbnail: Whether or not the image to upload is a thumbnail (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'sample_id'", ",", "'is_thumbnail'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_sample_image_write_url_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_sample_image_write_url_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `get_sample_image_write_url_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'is_thumbnail' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'is_thumbnail'", "not", "in", "params", "or", "\n", "params", "[", "'is_thumbnail'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `is_thumbnail` when calling `get_sample_image_write_url_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'is_thumbnail'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'isThumbnail'", ",", "params", "[", "'is_thumbnail'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples/{sampleId}/writeurl'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_urls_by_id": [[575, 597], ["kwargs.get", "samples_api.SamplesApi.get_sample_image_write_urls_by_id_with_http_info", "samples_api.SamplesApi.get_sample_image_write_urls_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_urls_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_urls_by_id_with_http_info"], ["", "def", "get_sample_image_write_urls_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_write_urls_by_id  # noqa: E501\n\n        Get all signed write URLs to upload all images (full image and thumbnail) of a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_write_urls_by_id(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :return: SampleWriteUrls\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_sample_image_write_urls_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_sample_image_write_urls_by_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_sample_image_write_urls_by_id_with_http_info": [[598, 677], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_sample_image_write_urls_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_image_write_urls_by_id  # noqa: E501\n\n        Get all signed write URLs to upload all images (full image and thumbnail) of a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_image_write_urls_by_id_with_http_info(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :return: SampleWriteUrls\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'sample_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_sample_image_write_urls_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_sample_image_write_urls_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `get_sample_image_write_urls_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples/{sampleId}/writeurls'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'SampleWriteUrls'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_samples_by_dataset_id": [[678, 701], ["kwargs.get", "samples_api.SamplesApi.get_samples_by_dataset_id_with_http_info", "samples_api.SamplesApi.get_samples_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_samples_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_samples_by_dataset_id_with_http_info"], ["", "def", "get_samples_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_samples_by_dataset_id  # noqa: E501\n\n        Get all samples of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_samples_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str mode: if we want everything (full) or just the ObjectIds\n        :param str file_name: filter the samples by filename\n        :return: list[SampleData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_samples_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_samples_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.get_samples_by_dataset_id_with_http_info": [[702, 780], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.call_api", "ValueError", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_samples_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_samples_by_dataset_id  # noqa: E501\n\n        Get all samples of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_samples_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str mode: if we want everything (full) or just the ObjectIds\n        :param str file_name: filter the samples by filename\n        :return: list[SampleData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'mode'", ",", "'file_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_samples_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_samples_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'mode'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'mode'", ",", "params", "[", "'mode'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'file_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileName'", ",", "params", "[", "'file_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[SampleData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.update_sample_by_id": [[781, 805], ["kwargs.get", "samples_api.SamplesApi.update_sample_by_id_with_http_info", "samples_api.SamplesApi.update_sample_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.update_sample_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.update_sample_by_id_with_http_info"], ["", "def", "update_sample_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_sample_by_id  # noqa: E501\n\n        update a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_sample_by_id(body, dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SampleUpdateRequest body: The updated sample to set (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param bool enable_dataset_update:\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_sample_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_sample_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samples_api.SamplesApi.update_sample_by_id_with_http_info": [[806, 899], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samples_api.SamplesApi.api_client.select_header_accept", "samples_api.SamplesApi.api_client.select_header_content_type", "samples_api.SamplesApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_sample_by_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_sample_by_id  # noqa: E501\n\n        update a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_sample_by_id_with_http_info(body, dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SampleUpdateRequest body: The updated sample to set (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param bool enable_dataset_update:\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'sample_id'", ",", "'enable_dataset_update'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_sample_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_sample_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `update_sample_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `update_sample_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'enable_dataset_update'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'enableDatasetUpdate'", ",", "params", "[", "'enable_dataset_update'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/samples/{sampleId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.mappings_api.MappingsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.mappings_api.MappingsApi.get_sample_mappings_by_dataset_id": [[36, 58], ["kwargs.get", "mappings_api.MappingsApi.get_sample_mappings_by_dataset_id_with_http_info", "mappings_api.MappingsApi.get_sample_mappings_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.mappings_api.MappingsApi.get_sample_mappings_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.mappings_api.MappingsApi.get_sample_mappings_by_dataset_id_with_http_info"], ["", "def", "get_sample_mappings_by_dataset_id", "(", "self", ",", "dataset_id", ",", "field", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_mappings_by_dataset_id  # noqa: E501\n\n        Get all samples of a dataset as a list. List index is the index of the sample2bitmask mapping and the value is the 'field' you wanted (e.g _id, fileName)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_mappings_by_dataset_id(dataset_id, field, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str field: the field to return as the value (required)\n        :return: list[str]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_sample_mappings_by_dataset_id_with_http_info", "(", "dataset_id", ",", "field", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_sample_mappings_by_dataset_id_with_http_info", "(", "dataset_id", ",", "field", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.mappings_api.MappingsApi.get_sample_mappings_by_dataset_id_with_http_info": [[59, 138], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "mappings_api.MappingsApi.api_client.select_header_accept", "mappings_api.MappingsApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_sample_mappings_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "field", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_sample_mappings_by_dataset_id  # noqa: E501\n\n        Get all samples of a dataset as a list. List index is the index of the sample2bitmask mapping and the value is the 'field' you wanted (e.g _id, fileName)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_sample_mappings_by_dataset_id_with_http_info(dataset_id, field, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str field: the field to return as the value (required)\n        :return: list[str]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'field'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_sample_mappings_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_sample_mappings_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'field' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'field'", "not", "in", "params", "or", "\n", "params", "[", "'field'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `field` when calling `get_sample_mappings_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'field'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'field'", ",", "params", "[", "'field'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/mappings'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[str]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.create_meta_data_configuration": [[36, 58], ["kwargs.get", "meta_data_configurations_api.MetaDataConfigurationsApi.create_meta_data_configuration_with_http_info", "meta_data_configurations_api.MetaDataConfigurationsApi.create_meta_data_configuration_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.create_meta_data_configuration_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.create_meta_data_configuration_with_http_info"], ["", "def", "create_meta_data_configuration", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_meta_data_configuration  # noqa: E501\n\n        Create a new metadata configuration  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_meta_data_configuration(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param ConfigurationSetRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_meta_data_configuration_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_meta_data_configuration_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.create_meta_data_configuration_with_http_info": [[59, 142], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.select_header_accept", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.select_header_content_type", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_meta_data_configuration_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_meta_data_configuration  # noqa: E501\n\n        Create a new metadata configuration  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_meta_data_configuration_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param ConfigurationSetRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_meta_data_configuration\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_meta_data_configuration`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_meta_data_configuration`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/configuration/metadata'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configuration_by_id": [[143, 165], ["kwargs.get", "meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configuration_by_id_with_http_info", "meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configuration_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configuration_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configuration_by_id_with_http_info"], ["", "def", "get_meta_data_configuration_by_id", "(", "self", ",", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_meta_data_configuration_by_id  # noqa: E501\n\n        Get a specific metadata configuration  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_meta_data_configuration_by_id(dataset_id, configuration_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID configuration_id: ObjectId of the metadata configuration (required)\n        :return: ConfigurationData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_meta_data_configuration_by_id_with_http_info", "(", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_meta_data_configuration_by_id_with_http_info", "(", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configuration_by_id_with_http_info": [[166, 245], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.select_header_accept", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_meta_data_configuration_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_meta_data_configuration_by_id  # noqa: E501\n\n        Get a specific metadata configuration  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_meta_data_configuration_by_id_with_http_info(dataset_id, configuration_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID configuration_id: ObjectId of the metadata configuration (required)\n        :return: ConfigurationData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'configuration_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_meta_data_configuration_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_meta_data_configuration_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'configuration_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'configuration_id'", "not", "in", "params", "or", "\n", "params", "[", "'configuration_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `configuration_id` when calling `get_meta_data_configuration_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'configuration_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'configurationId'", "]", "=", "params", "[", "'configuration_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/configuration/metadata/{configurationId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'ConfigurationData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configurations": [[246, 267], ["kwargs.get", "meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configurations_with_http_info", "meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configurations_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configurations_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configurations_with_http_info"], ["", "def", "get_meta_data_configurations", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_meta_data_configurations  # noqa: E501\n\n        Get the all metadata configurations that exist for a user  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_meta_data_configurations(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[ConfigurationData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_meta_data_configurations_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_meta_data_configurations_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.get_meta_data_configurations_with_http_info": [[268, 340], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.select_header_accept", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_meta_data_configurations_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_meta_data_configurations  # noqa: E501\n\n        Get the all metadata configurations that exist for a user  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_meta_data_configurations_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[ConfigurationData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_meta_data_configurations\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_meta_data_configurations`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/configuration/metadata'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[ConfigurationData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.update_meta_data_configuration_by_id": [[341, 364], ["kwargs.get", "meta_data_configurations_api.MetaDataConfigurationsApi.update_meta_data_configuration_by_id_with_http_info", "meta_data_configurations_api.MetaDataConfigurationsApi.update_meta_data_configuration_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.update_meta_data_configuration_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.update_meta_data_configuration_by_id_with_http_info"], ["", "def", "update_meta_data_configuration_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_meta_data_configuration_by_id  # noqa: E501\n\n        update a specific metadata configuration  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_meta_data_configuration_by_id(body, dataset_id, configuration_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param ConfigurationSetRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID configuration_id: ObjectId of the metadata configuration (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_meta_data_configuration_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_meta_data_configuration_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.update_meta_data_configuration_by_id_with_http_info": [[365, 455], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.select_header_accept", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.select_header_content_type", "meta_data_configurations_api.MetaDataConfigurationsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_meta_data_configuration_by_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "configuration_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_meta_data_configuration_by_id  # noqa: E501\n\n        update a specific metadata configuration  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_meta_data_configuration_by_id_with_http_info(body, dataset_id, configuration_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param ConfigurationSetRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID configuration_id: ObjectId of the metadata configuration (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'configuration_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_meta_data_configuration_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_meta_data_configuration_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `update_meta_data_configuration_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'configuration_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'configuration_id'", "not", "in", "params", "or", "\n", "params", "[", "'configuration_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `configuration_id` when calling `update_meta_data_configuration_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'configuration_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'configurationId'", "]", "=", "params", "[", "'configuration_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/configuration/metadata/{configurationId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.cancel_scheduled_docker_run_state_by_id": [[36, 58], ["kwargs.get", "docker_api.DockerApi.cancel_scheduled_docker_run_state_by_id_with_http_info", "docker_api.DockerApi.cancel_scheduled_docker_run_state_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.cancel_scheduled_docker_run_state_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.cancel_scheduled_docker_run_state_by_id_with_http_info"], ["", "def", "cancel_scheduled_docker_run_state_by_id", "(", "self", ",", "dataset_id", ",", "scheduled_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"cancel_scheduled_docker_run_state_by_id  # noqa: E501\n\n        Cancel a scheduled run. This will fail if the state of the scheduled run is no longer OPEN (e.g when it is LOCKED)   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.cancel_scheduled_docker_run_state_by_id(dataset_id, scheduled_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID scheduled_id: ObjectId of the docker worker run configg (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "cancel_scheduled_docker_run_state_by_id_with_http_info", "(", "dataset_id", ",", "scheduled_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "cancel_scheduled_docker_run_state_by_id_with_http_info", "(", "dataset_id", ",", "scheduled_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.cancel_scheduled_docker_run_state_by_id_with_http_info": [[59, 138], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "cancel_scheduled_docker_run_state_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "scheduled_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"cancel_scheduled_docker_run_state_by_id  # noqa: E501\n\n        Cancel a scheduled run. This will fail if the state of the scheduled run is no longer OPEN (e.g when it is LOCKED)   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.cancel_scheduled_docker_run_state_by_id_with_http_info(dataset_id, scheduled_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID scheduled_id: ObjectId of the docker worker run configg (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'scheduled_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method cancel_scheduled_docker_run_state_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `cancel_scheduled_docker_run_state_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'scheduled_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'scheduled_id'", "not", "in", "params", "or", "\n", "params", "[", "'scheduled_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `scheduled_id` when calling `cancel_scheduled_docker_run_state_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'scheduled_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'scheduledId'", "]", "=", "params", "[", "'scheduled_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/docker/worker/schedule/{scheduledId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run": [[139, 160], ["kwargs.get", "docker_api.DockerApi.create_docker_run_with_http_info", "docker_api.DockerApi.create_docker_run_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run_with_http_info"], ["", "def", "create_docker_run", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_docker_run  # noqa: E501\n\n        Creates a new docker run database entry.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_docker_run(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunCreateRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_docker_run_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_docker_run_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run_with_http_info": [[161, 237], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_docker_run_with_http_info", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_docker_run  # noqa: E501\n\n        Creates a new docker run database entry.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_docker_run_with_http_info(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunCreateRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_docker_run\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_docker_run`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/runs'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run_scheduled_by_dataset_id": [[238, 260], ["kwargs.get", "docker_api.DockerApi.create_docker_run_scheduled_by_dataset_id_with_http_info", "docker_api.DockerApi.create_docker_run_scheduled_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run_scheduled_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run_scheduled_by_dataset_id_with_http_info"], ["", "def", "create_docker_run_scheduled_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_docker_run_scheduled_by_dataset_id  # noqa: E501\n\n        Schedule a docker run by dataset id. With docker runs it's possible to process unlabeled images from a datasource and use active learning to select the most relevant samples for further processing and visualization in the web app   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_docker_run_scheduled_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunScheduledCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_docker_run_scheduled_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_docker_run_scheduled_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_run_scheduled_by_dataset_id_with_http_info": [[261, 344], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_docker_run_scheduled_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_docker_run_scheduled_by_dataset_id  # noqa: E501\n\n        Schedule a docker run by dataset id. With docker runs it's possible to process unlabeled images from a datasource and use active learning to select the most relevant samples for further processing and visualization in the web app   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_docker_run_scheduled_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunScheduledCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_docker_run_scheduled_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_docker_run_scheduled_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_docker_run_scheduled_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/docker/worker/schedule'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_worker_config": [[345, 366], ["kwargs.get", "docker_api.DockerApi.create_docker_worker_config_with_http_info", "docker_api.DockerApi.create_docker_worker_config_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_worker_config_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_worker_config_with_http_info"], ["", "def", "create_docker_worker_config", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_docker_worker_config  # noqa: E501\n\n        Creates a docker worker configuration.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_docker_worker_config(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerWorkerConfigCreateRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_docker_worker_config_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_docker_worker_config_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.create_docker_worker_config_with_http_info": [[367, 443], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_docker_worker_config_with_http_info", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_docker_worker_config  # noqa: E501\n\n        Creates a docker worker configuration.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_docker_worker_config_with_http_info(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerWorkerConfigCreateRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_docker_worker_config\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_docker_worker_config`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/config'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.delete_docker_worker_registry_entry_by_id": [[444, 465], ["kwargs.get", "docker_api.DockerApi.delete_docker_worker_registry_entry_by_id_with_http_info", "docker_api.DockerApi.delete_docker_worker_registry_entry_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.delete_docker_worker_registry_entry_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.delete_docker_worker_registry_entry_by_id_with_http_info"], ["", "def", "delete_docker_worker_registry_entry_by_id", "(", "self", ",", "worker_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_docker_worker_registry_entry_by_id  # noqa: E501\n\n        Deletes a worker registry entry by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_docker_worker_registry_entry_by_id(worker_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "delete_docker_worker_registry_entry_by_id_with_http_info", "(", "worker_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "delete_docker_worker_registry_entry_by_id_with_http_info", "(", "worker_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.delete_docker_worker_registry_entry_by_id_with_http_info": [[466, 538], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "delete_docker_worker_registry_entry_by_id_with_http_info", "(", "self", ",", "worker_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_docker_worker_registry_entry_by_id  # noqa: E501\n\n        Deletes a worker registry entry by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_docker_worker_registry_entry_by_id_with_http_info(worker_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'worker_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method delete_docker_worker_registry_entry_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'worker_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'worker_id'", "not", "in", "params", "or", "\n", "params", "[", "'worker_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `worker_id` when calling `delete_docker_worker_registry_entry_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'worker_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'workerId'", "]", "=", "params", "[", "'worker_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/{workerId}'", ",", "'DELETE'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_license_information": [[539, 559], ["kwargs.get", "docker_api.DockerApi.get_docker_license_information_with_http_info", "docker_api.DockerApi.get_docker_license_information_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_license_information_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_license_information_with_http_info"], ["", "def", "get_docker_license_information", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_license_information  # noqa: E501\n\n        Requests license information to run the container.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_license_information(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: DockerLicenseInformation\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_license_information_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_license_information_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_license_information_with_http_info": [[560, 625], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_license_information_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_license_information  # noqa: E501\n\n        Requests license information to run the container.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_license_information_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: DockerLicenseInformation\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_license_information\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/licenseInformation'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DockerLicenseInformation'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_by_id": [[626, 647], ["kwargs.get", "docker_api.DockerApi.get_docker_run_by_id_with_http_info", "docker_api.DockerApi.get_docker_run_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_by_id_with_http_info"], ["", "def", "get_docker_run_by_id", "(", "self", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_run_by_id  # noqa: E501\n\n        Gets a docker run by docker run id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_run_by_id(run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: DockerRunData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_run_by_id_with_http_info", "(", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_run_by_id_with_http_info", "(", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_by_id_with_http_info": [[648, 720], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_run_by_id_with_http_info", "(", "self", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_run_by_id  # noqa: E501\n\n        Gets a docker run by docker run id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_run_by_id_with_http_info(run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: DockerRunData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'run_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_run_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'run_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'run_id'", "not", "in", "params", "or", "\n", "params", "[", "'run_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `run_id` when calling `get_docker_run_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'run_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'runId'", "]", "=", "params", "[", "'run_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/runs/{runId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DockerRunData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_read_url_by_id": [[721, 742], ["kwargs.get", "docker_api.DockerApi.get_docker_run_report_read_url_by_id_with_http_info", "docker_api.DockerApi.get_docker_run_report_read_url_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_read_url_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_read_url_by_id_with_http_info"], ["", "def", "get_docker_run_report_read_url_by_id", "(", "self", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_run_report_read_url_by_id  # noqa: E501\n\n        Get the url of a specific docker runs report  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_run_report_read_url_by_id(run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_run_report_read_url_by_id_with_http_info", "(", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_run_report_read_url_by_id_with_http_info", "(", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_read_url_by_id_with_http_info": [[743, 815], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_run_report_read_url_by_id_with_http_info", "(", "self", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_run_report_read_url_by_id  # noqa: E501\n\n        Get the url of a specific docker runs report  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_run_report_read_url_by_id_with_http_info(run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'run_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_run_report_read_url_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'run_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'run_id'", "not", "in", "params", "or", "\n", "params", "[", "'run_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `run_id` when calling `get_docker_run_report_read_url_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'run_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'runId'", "]", "=", "params", "[", "'run_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/runs/{runId}/readReportUrl'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_write_url_by_id": [[816, 837], ["kwargs.get", "docker_api.DockerApi.get_docker_run_report_write_url_by_id_with_http_info", "docker_api.DockerApi.get_docker_run_report_write_url_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_write_url_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_write_url_by_id_with_http_info"], ["", "def", "get_docker_run_report_write_url_by_id", "(", "self", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_run_report_write_url_by_id  # noqa: E501\n\n        Get the signed url to upload a report of a docker run  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_run_report_write_url_by_id(run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_run_report_write_url_by_id_with_http_info", "(", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_run_report_write_url_by_id_with_http_info", "(", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_run_report_write_url_by_id_with_http_info": [[838, 910], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_run_report_write_url_by_id_with_http_info", "(", "self", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_run_report_write_url_by_id  # noqa: E501\n\n        Get the signed url to upload a report of a docker run  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_run_report_write_url_by_id_with_http_info(run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'run_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_run_report_write_url_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'run_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'run_id'", "not", "in", "params", "or", "\n", "params", "[", "'run_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `run_id` when calling `get_docker_run_report_write_url_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'run_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'runId'", "]", "=", "params", "[", "'run_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/runs/{runId}/writeReportUrl'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs": [[911, 931], ["kwargs.get", "docker_api.DockerApi.get_docker_runs_with_http_info", "docker_api.DockerApi.get_docker_runs_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_with_http_info"], ["", "def", "get_docker_runs", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_runs  # noqa: E501\n\n        Gets all docker runs for a user.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_runs(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[DockerRunData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_runs_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_runs_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_with_http_info": [[932, 997], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_runs_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_runs  # noqa: E501\n\n        Gets all docker runs for a user.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_runs_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[DockerRunData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_runs\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/runs'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DockerRunData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_dataset_id": [[998, 1019], ["kwargs.get", "docker_api.DockerApi.get_docker_runs_scheduled_by_dataset_id_with_http_info", "docker_api.DockerApi.get_docker_runs_scheduled_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_dataset_id_with_http_info"], ["", "def", "get_docker_runs_scheduled_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_runs_scheduled_by_dataset_id  # noqa: E501\n\n        Get all scheduled docker runs by dataset id which have not finished (not DONE or CANCLED).  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_runs_scheduled_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DockerRunScheduledData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_runs_scheduled_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_runs_scheduled_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_dataset_id_with_http_info": [[1020, 1092], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_runs_scheduled_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_runs_scheduled_by_dataset_id  # noqa: E501\n\n        Get all scheduled docker runs by dataset id which have not finished (not DONE or CANCLED).  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_runs_scheduled_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DockerRunScheduledData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_runs_scheduled_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_docker_runs_scheduled_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/docker/worker/schedule'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DockerRunScheduledData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_state": [[1093, 1114], ["kwargs.get", "docker_api.DockerApi.get_docker_runs_scheduled_by_state_with_http_info", "docker_api.DockerApi.get_docker_runs_scheduled_by_state_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_state_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_state_with_http_info"], ["", "def", "get_docker_runs_scheduled_by_state", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_runs_scheduled_by_state  # noqa: E501\n\n        Get all scheduled docker runs of the user with the specified state.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_runs_scheduled_by_state(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunScheduledState state:\n        :return: list[DockerRunScheduledData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_runs_scheduled_by_state_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_runs_scheduled_by_state_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_runs_scheduled_by_state_with_http_info": [[1115, 1183], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_runs_scheduled_by_state_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_runs_scheduled_by_state  # noqa: E501\n\n        Get all scheduled docker runs of the user with the specified state.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_runs_scheduled_by_state_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunScheduledState state:\n        :return: list[DockerRunScheduledData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'state'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_runs_scheduled_by_state\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "if", "'state'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'state'", ",", "params", "[", "'state'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/schedule'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DockerRunScheduledData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_config_by_id": [[1184, 1205], ["kwargs.get", "docker_api.DockerApi.get_docker_worker_config_by_id_with_http_info", "docker_api.DockerApi.get_docker_worker_config_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_config_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_config_by_id_with_http_info"], ["", "def", "get_docker_worker_config_by_id", "(", "self", ",", "config_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_config_by_id  # noqa: E501\n\n        Gets a docker worker configuration by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_config_by_id(config_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID config_id: ObjectId of the docker worker config (required)\n        :return: DockerWorkerConfigData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_worker_config_by_id_with_http_info", "(", "config_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_worker_config_by_id_with_http_info", "(", "config_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_config_by_id_with_http_info": [[1206, 1278], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_worker_config_by_id_with_http_info", "(", "self", ",", "config_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_config_by_id  # noqa: E501\n\n        Gets a docker worker configuration by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_config_by_id_with_http_info(config_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID config_id: ObjectId of the docker worker config (required)\n        :return: DockerWorkerConfigData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'config_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_worker_config_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'config_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'config_id'", "not", "in", "params", "or", "\n", "params", "[", "'config_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `config_id` when calling `get_docker_worker_config_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'config_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'configId'", "]", "=", "params", "[", "'config_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/config/{configId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DockerWorkerConfigData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_configs": [[1279, 1299], ["kwargs.get", "docker_api.DockerApi.get_docker_worker_configs_with_http_info", "docker_api.DockerApi.get_docker_worker_configs_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_configs_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_configs_with_http_info"], ["", "def", "get_docker_worker_configs", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_configs  # noqa: E501\n\n        Get docker worker configurations.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_configs(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[DockerWorkerConfigData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_worker_configs_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_worker_configs_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_configs_with_http_info": [[1300, 1365], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_worker_configs_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_configs  # noqa: E501\n\n        Get docker worker configurations.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_configs_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[DockerWorkerConfigData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_worker_configs\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/config'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DockerWorkerConfigData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entries": [[1366, 1386], ["kwargs.get", "docker_api.DockerApi.get_docker_worker_registry_entries_with_http_info", "docker_api.DockerApi.get_docker_worker_registry_entries_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entries_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entries_with_http_info"], ["", "def", "get_docker_worker_registry_entries", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_registry_entries  # noqa: E501\n\n        Returns all worker registry entries for a given user.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_registry_entries(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[DockerWorkerRegistryEntryData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_worker_registry_entries_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_worker_registry_entries_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entries_with_http_info": [[1387, 1452], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_worker_registry_entries_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_registry_entries  # noqa: E501\n\n        Returns all worker registry entries for a given user.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_registry_entries_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[DockerWorkerRegistryEntryData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_worker_registry_entries\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DockerWorkerRegistryEntryData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entry_by_id": [[1453, 1474], ["kwargs.get", "docker_api.DockerApi.get_docker_worker_registry_entry_by_id_with_http_info", "docker_api.DockerApi.get_docker_worker_registry_entry_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entry_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entry_by_id_with_http_info"], ["", "def", "get_docker_worker_registry_entry_by_id", "(", "self", ",", "worker_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_registry_entry_by_id  # noqa: E501\n\n        Returns worker registry entry by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_registry_entry_by_id(worker_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :return: DockerWorkerRegistryEntryData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_docker_worker_registry_entry_by_id_with_http_info", "(", "worker_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_docker_worker_registry_entry_by_id_with_http_info", "(", "worker_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.get_docker_worker_registry_entry_by_id_with_http_info": [[1475, 1547], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_docker_worker_registry_entry_by_id_with_http_info", "(", "self", ",", "worker_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_docker_worker_registry_entry_by_id  # noqa: E501\n\n        Returns worker registry entry by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_docker_worker_registry_entry_by_id_with_http_info(worker_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :return: DockerWorkerRegistryEntryData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'worker_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_docker_worker_registry_entry_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'worker_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'worker_id'", "not", "in", "params", "or", "\n", "params", "[", "'worker_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `worker_id` when calling `get_docker_worker_registry_entry_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'worker_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'workerId'", "]", "=", "params", "[", "'worker_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/{workerId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DockerWorkerRegistryEntryData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_authorization_request": [[1548, 1569], ["kwargs.get", "docker_api.DockerApi.post_docker_authorization_request_with_http_info", "docker_api.DockerApi.post_docker_authorization_request_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_authorization_request_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_authorization_request_with_http_info"], ["", "def", "post_docker_authorization_request", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"post_docker_authorization_request  # noqa: E501\n\n        Performs an authorization to run the container.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.post_docker_authorization_request(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerAuthorizationRequest body: (required)\n        :return: DockerAuthorizationResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "post_docker_authorization_request_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "post_docker_authorization_request_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_authorization_request_with_http_info": [[1570, 1646], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "post_docker_authorization_request_with_http_info", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"post_docker_authorization_request  # noqa: E501\n\n        Performs an authorization to run the container.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.post_docker_authorization_request_with_http_info(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerAuthorizationRequest body: (required)\n        :return: DockerAuthorizationResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method post_docker_authorization_request\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `post_docker_authorization_request`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/authorization'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DockerAuthorizationResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_usage_stats": [[1647, 1668], ["kwargs.get", "docker_api.DockerApi.post_docker_usage_stats_with_http_info", "docker_api.DockerApi.post_docker_usage_stats_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_usage_stats_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_usage_stats_with_http_info"], ["", "def", "post_docker_usage_stats", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"post_docker_usage_stats  # noqa: E501\n\n        Adds a diagnostic entry of user stats.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.post_docker_usage_stats(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerUserStats body: (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "post_docker_usage_stats_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "post_docker_usage_stats_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.post_docker_usage_stats_with_http_info": [[1669, 1745], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "post_docker_usage_stats_with_http_info", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"post_docker_usage_stats  # noqa: E501\n\n        Adds a diagnostic entry of user stats.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.post_docker_usage_stats_with_http_info(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerUserStats body: (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method post_docker_usage_stats\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `post_docker_usage_stats`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.register_docker_worker": [[1746, 1767], ["kwargs.get", "docker_api.DockerApi.register_docker_worker_with_http_info", "docker_api.DockerApi.register_docker_worker_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.register_docker_worker_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.register_docker_worker_with_http_info"], ["", "def", "register_docker_worker", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"register_docker_worker  # noqa: E501\n\n        Registers a worker for a user.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.register_docker_worker(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param CreateDockerWorkerRegistryEntryRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "register_docker_worker_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "register_docker_worker_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.register_docker_worker_with_http_info": [[1768, 1844], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "register_docker_worker_with_http_info", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"register_docker_worker  # noqa: E501\n\n        Registers a worker for a user.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.register_docker_worker_with_http_info(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param CreateDockerWorkerRegistryEntryRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method register_docker_worker\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `register_docker_worker`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_run_by_id": [[1845, 1867], ["kwargs.get", "docker_api.DockerApi.update_docker_run_by_id_with_http_info", "docker_api.DockerApi.update_docker_run_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_run_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_run_by_id_with_http_info"], ["", "def", "update_docker_run_by_id", "(", "self", ",", "body", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_docker_run_by_id  # noqa: E501\n\n        Updates a docker run database entry.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_docker_run_by_id(body, run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunUpdateRequest body: (required)\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_docker_run_by_id_with_http_info", "(", "body", ",", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_docker_run_by_id_with_http_info", "(", "body", ",", "run_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_run_by_id_with_http_info": [[1868, 1951], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_docker_run_by_id_with_http_info", "(", "self", ",", "body", ",", "run_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_docker_run_by_id  # noqa: E501\n\n        Updates a docker run database entry.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_docker_run_by_id_with_http_info(body, run_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunUpdateRequest body: (required)\n        :param MongoObjectID run_id: ObjectId of the docker run (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'run_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_docker_run_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_docker_run_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'run_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'run_id'", "not", "in", "params", "or", "\n", "params", "[", "'run_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `run_id` when calling `update_docker_run_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'run_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'runId'", "]", "=", "params", "[", "'run_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/runs/{runId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_config_by_id": [[1952, 1974], ["kwargs.get", "docker_api.DockerApi.update_docker_worker_config_by_id_with_http_info", "docker_api.DockerApi.update_docker_worker_config_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_config_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_config_by_id_with_http_info"], ["", "def", "update_docker_worker_config_by_id", "(", "self", ",", "body", ",", "config_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_docker_worker_config_by_id  # noqa: E501\n\n        Updates a docker worker configuration by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_docker_worker_config_by_id(body, config_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerWorkerConfigCreateRequest body: (required)\n        :param MongoObjectID config_id: ObjectId of the docker worker config (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_docker_worker_config_by_id_with_http_info", "(", "body", ",", "config_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_docker_worker_config_by_id_with_http_info", "(", "body", ",", "config_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_config_by_id_with_http_info": [[1975, 2058], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_docker_worker_config_by_id_with_http_info", "(", "self", ",", "body", ",", "config_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_docker_worker_config_by_id  # noqa: E501\n\n        Updates a docker worker configuration by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_docker_worker_config_by_id_with_http_info(body, config_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerWorkerConfigCreateRequest body: (required)\n        :param MongoObjectID config_id: ObjectId of the docker worker config (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'config_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_docker_worker_config_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_docker_worker_config_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'config_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'config_id'", "not", "in", "params", "or", "\n", "params", "[", "'config_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `config_id` when calling `update_docker_worker_config_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'config_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'configId'", "]", "=", "params", "[", "'config_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/config/{configId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_registry_entry_by_id": [[2059, 2081], ["kwargs.get", "docker_api.DockerApi.update_docker_worker_registry_entry_by_id_with_http_info", "docker_api.DockerApi.update_docker_worker_registry_entry_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_registry_entry_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_registry_entry_by_id_with_http_info"], ["", "def", "update_docker_worker_registry_entry_by_id", "(", "self", ",", "body", ",", "worker_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_docker_worker_registry_entry_by_id  # noqa: E501\n\n        Updates the worker status by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_docker_worker_registry_entry_by_id(body, worker_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param UpdateDockerWorkerRegistryEntryRequest body: (required)\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_docker_worker_registry_entry_by_id_with_http_info", "(", "body", ",", "worker_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_docker_worker_registry_entry_by_id_with_http_info", "(", "body", ",", "worker_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_docker_worker_registry_entry_by_id_with_http_info": [[2082, 2165], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_docker_worker_registry_entry_by_id_with_http_info", "(", "self", ",", "body", ",", "worker_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_docker_worker_registry_entry_by_id  # noqa: E501\n\n        Updates the worker status by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_docker_worker_registry_entry_by_id_with_http_info(body, worker_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param UpdateDockerWorkerRegistryEntryRequest body: (required)\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'worker_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_docker_worker_registry_entry_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_docker_worker_registry_entry_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'worker_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'worker_id'", "not", "in", "params", "or", "\n", "params", "[", "'worker_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `worker_id` when calling `update_docker_worker_registry_entry_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'worker_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'workerId'", "]", "=", "params", "[", "'worker_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/docker/worker/{workerId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_scheduled_docker_run_state_by_id": [[2166, 2190], ["kwargs.get", "docker_api.DockerApi.update_scheduled_docker_run_state_by_id_with_http_info", "docker_api.DockerApi.update_scheduled_docker_run_state_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_scheduled_docker_run_state_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_scheduled_docker_run_state_by_id_with_http_info"], ["", "def", "update_scheduled_docker_run_state_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "worker_id", ",", "scheduled_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_scheduled_docker_run_state_by_id  # noqa: E501\n\n        Update the state of a scheduled run. This will fail if the state of the scheduled run is LOCKED.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_scheduled_docker_run_state_by_id(body, dataset_id, worker_id, scheduled_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunScheduledUpdateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :param MongoObjectID scheduled_id: ObjectId of the docker worker run configg (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_scheduled_docker_run_state_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "worker_id", ",", "scheduled_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_scheduled_docker_run_state_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "worker_id", ",", "scheduled_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.docker_api.DockerApi.update_scheduled_docker_run_state_by_id_with_http_info": [[2191, 2288], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "docker_api.DockerApi.api_client.select_header_accept", "docker_api.DockerApi.api_client.select_header_content_type", "docker_api.DockerApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_scheduled_docker_run_state_by_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "worker_id", ",", "scheduled_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_scheduled_docker_run_state_by_id  # noqa: E501\n\n        Update the state of a scheduled run. This will fail if the state of the scheduled run is LOCKED.   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_scheduled_docker_run_state_by_id_with_http_info(body, dataset_id, worker_id, scheduled_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DockerRunScheduledUpdateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID worker_id: ObjectId of the docker worker (required)\n        :param MongoObjectID scheduled_id: ObjectId of the docker worker run configg (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'worker_id'", ",", "'scheduled_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_scheduled_docker_run_state_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_scheduled_docker_run_state_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `update_scheduled_docker_run_state_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'worker_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'worker_id'", "not", "in", "params", "or", "\n", "params", "[", "'worker_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `worker_id` when calling `update_scheduled_docker_run_state_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'scheduled_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'scheduled_id'", "not", "in", "params", "or", "\n", "params", "[", "'scheduled_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `scheduled_id` when calling `update_scheduled_docker_run_state_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'worker_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'workerId'", "]", "=", "params", "[", "'worker_id'", "]", "# noqa: E501", "\n", "", "if", "'scheduled_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'scheduledId'", "]", "=", "params", "[", "'scheduled_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/docker/worker/{workerId}/schedule/{scheduledId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.create_or_update_active_learning_score_by_tag_id": [[36, 59], ["kwargs.get", "scores_api.ScoresApi.create_or_update_active_learning_score_by_tag_id_with_http_info", "scores_api.ScoresApi.create_or_update_active_learning_score_by_tag_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.create_or_update_active_learning_score_by_tag_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.create_or_update_active_learning_score_by_tag_id_with_http_info"], ["", "def", "create_or_update_active_learning_score_by_tag_id", "(", "self", ",", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_active_learning_score_by_tag_id  # noqa: E501\n\n        Create or update active learning score object by tag id  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_active_learning_score_by_tag_id(body, dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param ActiveLearningScoreCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_or_update_active_learning_score_by_tag_id_with_http_info", "(", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_or_update_active_learning_score_by_tag_id_with_http_info", "(", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.create_or_update_active_learning_score_by_tag_id_with_http_info": [[60, 150], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "scores_api.ScoresApi.api_client.select_header_accept", "scores_api.ScoresApi.api_client.select_header_content_type", "scores_api.ScoresApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_or_update_active_learning_score_by_tag_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_active_learning_score_by_tag_id  # noqa: E501\n\n        Create or update active learning score object by tag id  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_active_learning_score_by_tag_id_with_http_info(body, dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param ActiveLearningScoreCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'tag_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_or_update_active_learning_score_by_tag_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_or_update_active_learning_score_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_or_update_active_learning_score_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `create_or_update_active_learning_score_by_tag_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/scores'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_score_by_score_id": [[151, 174], ["kwargs.get", "scores_api.ScoresApi.get_active_learning_score_by_score_id_with_http_info", "scores_api.ScoresApi.get_active_learning_score_by_score_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_score_by_score_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_score_by_score_id_with_http_info"], ["", "def", "get_active_learning_score_by_score_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "score_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_active_learning_score_by_score_id  # noqa: E501\n\n        Get active learning score object by id  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_active_learning_score_by_score_id(dataset_id, tag_id, score_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param MongoObjectID score_id: ObjectId of the scores (required)\n        :return: ActiveLearningScoreData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_active_learning_score_by_score_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "score_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_active_learning_score_by_score_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "score_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_score_by_score_id_with_http_info": [[175, 261], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "scores_api.ScoresApi.api_client.select_header_accept", "scores_api.ScoresApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_active_learning_score_by_score_id_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "score_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_active_learning_score_by_score_id  # noqa: E501\n\n        Get active learning score object by id  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_active_learning_score_by_score_id_with_http_info(dataset_id, tag_id, score_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :param MongoObjectID score_id: ObjectId of the scores (required)\n        :return: ActiveLearningScoreData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", ",", "'score_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_active_learning_score_by_score_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_active_learning_score_by_score_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `get_active_learning_score_by_score_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'score_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'score_id'", "not", "in", "params", "or", "\n", "params", "[", "'score_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `score_id` when calling `get_active_learning_score_by_score_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "", "if", "'score_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'scoreId'", "]", "=", "params", "[", "'score_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/scores/{scoreId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'ActiveLearningScoreData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_scores_by_tag_id": [[262, 284], ["kwargs.get", "scores_api.ScoresApi.get_active_learning_scores_by_tag_id_with_http_info", "scores_api.ScoresApi.get_active_learning_scores_by_tag_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_scores_by_tag_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_scores_by_tag_id_with_http_info"], ["", "def", "get_active_learning_scores_by_tag_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_active_learning_scores_by_tag_id  # noqa: E501\n\n        Get all scoreIds for the given tag  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_active_learning_scores_by_tag_id(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: list[TagActiveLearningScoresData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_active_learning_scores_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_active_learning_scores_by_tag_id_with_http_info", "(", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.scores_api.ScoresApi.get_active_learning_scores_by_tag_id_with_http_info": [[285, 364], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "scores_api.ScoresApi.api_client.select_header_accept", "scores_api.ScoresApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_active_learning_scores_by_tag_id_with_http_info", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_active_learning_scores_by_tag_id  # noqa: E501\n\n        Get all scoreIds for the given tag  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_active_learning_scores_by_tag_id_with_http_info(dataset_id, tag_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID tag_id: ObjectId of the tag (required)\n        :return: list[TagActiveLearningScoresData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'tag_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_active_learning_scores_by_tag_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_active_learning_scores_by_tag_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'tag_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'tag_id'", "not", "in", "params", "or", "\n", "params", "[", "'tag_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `tag_id` when calling `get_active_learning_scores_by_tag_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'tag_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'tagId'", "]", "=", "params", "[", "'tag_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/tags/{tagId}/scores'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[TagActiveLearningScoresData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_latest_pip_version": [[36, 57], ["kwargs.get", "versioning_api.VersioningApi.get_latest_pip_version_with_http_info", "versioning_api.VersioningApi.get_latest_pip_version_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_latest_pip_version_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_latest_pip_version_with_http_info"], ["", "def", "get_latest_pip_version", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_latest_pip_version  # noqa: E501\n\n        Get latest pip version available  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_latest_pip_version(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str current_version:\n        :return: VersionNumber\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_latest_pip_version_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_latest_pip_version_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_latest_pip_version_with_http_info": [[58, 126], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "versioning_api.VersioningApi.api_client.select_header_accept", "versioning_api.VersioningApi.api_client.call_api", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_latest_pip_version_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_latest_pip_version  # noqa: E501\n\n        Get latest pip version available  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_latest_pip_version_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str current_version:\n        :return: VersionNumber\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'current_version'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_latest_pip_version\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "if", "'current_version'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'currentVersion'", ",", "params", "[", "'current_version'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/versions/pip/latest'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'VersionNumber'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_minimum_compatible_pip_version": [[127, 147], ["kwargs.get", "versioning_api.VersioningApi.get_minimum_compatible_pip_version_with_http_info", "versioning_api.VersioningApi.get_minimum_compatible_pip_version_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_minimum_compatible_pip_version_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_minimum_compatible_pip_version_with_http_info"], ["", "def", "get_minimum_compatible_pip_version", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_minimum_compatible_pip_version  # noqa: E501\n\n        Get minimum pip version needed for compatability  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_minimum_compatible_pip_version(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: VersionNumber\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_minimum_compatible_pip_version_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_minimum_compatible_pip_version_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.versioning_api.VersioningApi.get_minimum_compatible_pip_version_with_http_info": [[148, 213], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "versioning_api.VersioningApi.api_client.select_header_accept", "versioning_api.VersioningApi.api_client.call_api", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_minimum_compatible_pip_version_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_minimum_compatible_pip_version  # noqa: E501\n\n        Get minimum pip version needed for compatability  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_minimum_compatible_pip_version_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: VersionNumber\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_minimum_compatible_pip_version\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/versions/pip/minimum'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'VersionNumber'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_by_sample_id": [[36, 60], ["kwargs.get", "predictions_api.PredictionsApi.create_or_update_prediction_by_sample_id_with_http_info", "predictions_api.PredictionsApi.create_or_update_prediction_by_sample_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_by_sample_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_by_sample_id_with_http_info"], ["", "def", "create_or_update_prediction_by_sample_id", "(", "self", ",", "body", ",", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_prediction_by_sample_id  # noqa: E501\n\n        Create/Update all the prediction singletons for a sampleId in the order/index of them being discovered   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_prediction_by_sample_id(body, dataset_id, sample_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param list[PredictionSingleton] body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_or_update_prediction_by_sample_id_with_http_info", "(", "body", ",", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_or_update_prediction_by_sample_id_with_http_info", "(", "body", ",", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_by_sample_id_with_http_info": [[61, 158], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "predictions_api.PredictionsApi.api_client.select_header_accept", "predictions_api.PredictionsApi.api_client.select_header_content_type", "predictions_api.PredictionsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_or_update_prediction_by_sample_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_prediction_by_sample_id  # noqa: E501\n\n        Create/Update all the prediction singletons for a sampleId in the order/index of them being discovered   # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_prediction_by_sample_id_with_http_info(body, dataset_id, sample_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param list[PredictionSingleton] body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'sample_id'", ",", "'prediction_uuid_timestamp'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_or_update_prediction_by_sample_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_or_update_prediction_by_sample_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_or_update_prediction_by_sample_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `create_or_update_prediction_by_sample_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'prediction_uuid_timestamp' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'prediction_uuid_timestamp'", "not", "in", "params", "or", "\n", "params", "[", "'prediction_uuid_timestamp'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `prediction_uuid_timestamp` when calling `create_or_update_prediction_by_sample_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'prediction_uuid_timestamp'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'predictionUUIDTimestamp'", ",", "params", "[", "'prediction_uuid_timestamp'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/predictions/samples/{sampleId}'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_task_schema_by_dataset_id": [[159, 182], ["kwargs.get", "predictions_api.PredictionsApi.create_or_update_prediction_task_schema_by_dataset_id_with_http_info", "predictions_api.PredictionsApi.create_or_update_prediction_task_schema_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_task_schema_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_task_schema_by_dataset_id_with_http_info"], ["", "def", "create_or_update_prediction_task_schema_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_prediction_task_schema_by_dataset_id  # noqa: E501\n\n        Creates/updates a prediction task schema with the task name  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_prediction_task_schema_by_dataset_id(body, dataset_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param PredictionTaskSchema body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_or_update_prediction_task_schema_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_or_update_prediction_task_schema_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.create_or_update_prediction_task_schema_by_dataset_id_with_http_info": [[183, 273], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "predictions_api.PredictionsApi.api_client.select_header_accept", "predictions_api.PredictionsApi.api_client.select_header_content_type", "predictions_api.PredictionsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_or_update_prediction_task_schema_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_or_update_prediction_task_schema_by_dataset_id  # noqa: E501\n\n        Creates/updates a prediction task schema with the task name  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_or_update_prediction_task_schema_by_dataset_id_with_http_info(body, dataset_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param PredictionTaskSchema body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'prediction_uuid_timestamp'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_or_update_prediction_task_schema_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_or_update_prediction_task_schema_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `create_or_update_prediction_task_schema_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'prediction_uuid_timestamp' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'prediction_uuid_timestamp'", "not", "in", "params", "or", "\n", "params", "[", "'prediction_uuid_timestamp'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `prediction_uuid_timestamp` when calling `create_or_update_prediction_task_schema_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'prediction_uuid_timestamp'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'predictionUUIDTimestamp'", ",", "params", "[", "'prediction_uuid_timestamp'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/predictions/tasks'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_by_sample_id": [[274, 297], ["kwargs.get", "predictions_api.PredictionsApi.get_prediction_by_sample_id_with_http_info", "predictions_api.PredictionsApi.get_prediction_by_sample_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_by_sample_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_by_sample_id_with_http_info"], ["", "def", "get_prediction_by_sample_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_by_sample_id  # noqa: E501\n\n        Get all prediction singletons of a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_by_sample_id(dataset_id, sample_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :return: PredictionSingletons\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_prediction_by_sample_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_prediction_by_sample_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_by_sample_id_with_http_info": [[298, 384], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "predictions_api.PredictionsApi.api_client.select_header_accept", "predictions_api.PredictionsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_prediction_by_sample_id_with_http_info", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_by_sample_id  # noqa: E501\n\n        Get all prediction singletons of a specific sample of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_by_sample_id_with_http_info(dataset_id, sample_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :return: PredictionSingletons\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'sample_id'", ",", "'prediction_uuid_timestamp'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_prediction_by_sample_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_prediction_by_sample_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `get_prediction_by_sample_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'prediction_uuid_timestamp' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'prediction_uuid_timestamp'", "not", "in", "params", "or", "\n", "params", "[", "'prediction_uuid_timestamp'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `prediction_uuid_timestamp` when calling `get_prediction_by_sample_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'prediction_uuid_timestamp'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'predictionUUIDTimestamp'", ",", "params", "[", "'prediction_uuid_timestamp'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/predictions/samples/{sampleId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'PredictionSingletons'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schema_by_task_name": [[385, 408], ["kwargs.get", "predictions_api.PredictionsApi.get_prediction_task_schema_by_task_name_with_http_info", "predictions_api.PredictionsApi.get_prediction_task_schema_by_task_name_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schema_by_task_name_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schema_by_task_name_with_http_info"], ["", "def", "get_prediction_task_schema_by_task_name", "(", "self", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "task_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_task_schema_by_task_name  # noqa: E501\n\n        Get a prediction task schemas named taskName for a datasetId  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_task_schema_by_task_name(dataset_id, prediction_uuid_timestamp, task_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :param TaskName task_name: The prediction task name for which one wants to list the predictions (required)\n        :return: PredictionTaskSchema\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_prediction_task_schema_by_task_name_with_http_info", "(", "dataset_id", ",", "prediction_uuid_timestamp", ",", "task_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_prediction_task_schema_by_task_name_with_http_info", "(", "dataset_id", ",", "prediction_uuid_timestamp", ",", "task_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schema_by_task_name_with_http_info": [[409, 495], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "predictions_api.PredictionsApi.api_client.select_header_accept", "predictions_api.PredictionsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_prediction_task_schema_by_task_name_with_http_info", "(", "self", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "task_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_task_schema_by_task_name  # noqa: E501\n\n        Get a prediction task schemas named taskName for a datasetId  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_task_schema_by_task_name_with_http_info(dataset_id, prediction_uuid_timestamp, task_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :param TaskName task_name: The prediction task name for which one wants to list the predictions (required)\n        :return: PredictionTaskSchema\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'prediction_uuid_timestamp'", ",", "'task_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_prediction_task_schema_by_task_name\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_prediction_task_schema_by_task_name`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'prediction_uuid_timestamp' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'prediction_uuid_timestamp'", "not", "in", "params", "or", "\n", "params", "[", "'prediction_uuid_timestamp'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `prediction_uuid_timestamp` when calling `get_prediction_task_schema_by_task_name`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'task_name' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'task_name'", "not", "in", "params", "or", "\n", "params", "[", "'task_name'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `task_name` when calling `get_prediction_task_schema_by_task_name`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'task_name'", "in", "params", ":", "\n", "            ", "path_params", "[", "'taskName'", "]", "=", "params", "[", "'task_name'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'prediction_uuid_timestamp'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'predictionUUIDTimestamp'", ",", "params", "[", "'prediction_uuid_timestamp'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/predictions/tasks/{taskName}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'PredictionTaskSchema'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schemas_by_dataset_id": [[496, 518], ["kwargs.get", "predictions_api.PredictionsApi.get_prediction_task_schemas_by_dataset_id_with_http_info", "predictions_api.PredictionsApi.get_prediction_task_schemas_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schemas_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schemas_by_dataset_id_with_http_info"], ["", "def", "get_prediction_task_schemas_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_task_schemas_by_dataset_id  # noqa: E501\n\n        Get list of all the prediction task schemas for a datasetId at a specific predictionUUIDTimestamp. If no predictionUUIDTimestamp is set, it defaults to the newest  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_task_schemas_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset. \n        :return: list[PredictionTaskSchema]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_prediction_task_schemas_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_prediction_task_schemas_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_prediction_task_schemas_by_dataset_id_with_http_info": [[519, 594], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "predictions_api.PredictionsApi.api_client.select_header_accept", "predictions_api.PredictionsApi.api_client.call_api", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_prediction_task_schemas_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_task_schemas_by_dataset_id  # noqa: E501\n\n        Get list of all the prediction task schemas for a datasetId at a specific predictionUUIDTimestamp. If no predictionUUIDTimestamp is set, it defaults to the newest  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_task_schemas_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset. \n        :return: list[PredictionTaskSchema]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'prediction_uuid_timestamp'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_prediction_task_schemas_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_prediction_task_schemas_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'prediction_uuid_timestamp'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'predictionUUIDTimestamp'", ",", "params", "[", "'prediction_uuid_timestamp'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/predictions/tasks'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[PredictionTaskSchema]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_predictions_by_dataset_id": [[595, 618], ["kwargs.get", "predictions_api.PredictionsApi.get_predictions_by_dataset_id_with_http_info", "predictions_api.PredictionsApi.get_predictions_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_predictions_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_predictions_by_dataset_id_with_http_info"], ["", "def", "get_predictions_by_dataset_id", "(", "self", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_predictions_by_dataset_id  # noqa: E501\n\n        Get all prediction singletons of all samples of a dataset ordered by the sample mapping  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_predictions_by_dataset_id(dataset_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :param TaskName task_name: If provided, only gets all prediction singletons of all samples of a dataset that were yielded by a specific prediction task name\n        :return: list[PredictionSingletons]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_predictions_by_dataset_id_with_http_info", "(", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_predictions_by_dataset_id_with_http_info", "(", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.predictions_api.PredictionsApi.get_predictions_by_dataset_id_with_http_info": [[619, 701], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "predictions_api.PredictionsApi.api_client.select_header_accept", "predictions_api.PredictionsApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_predictions_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "prediction_uuid_timestamp", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_predictions_by_dataset_id  # noqa: E501\n\n        Get all prediction singletons of all samples of a dataset ordered by the sample mapping  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_predictions_by_dataset_id_with_http_info(dataset_id, prediction_uuid_timestamp, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp prediction_uuid_timestamp: The timestamp of when the actual predictions were created. This is used as a peg to version predictions. E.g one could upload predictions on day 1 and then create new predictions with an improved model on day 30. One can then upload the new predictions to the same dataset.  (required)\n        :param TaskName task_name: If provided, only gets all prediction singletons of all samples of a dataset that were yielded by a specific prediction task name\n        :return: list[PredictionSingletons]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'prediction_uuid_timestamp'", ",", "'task_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_predictions_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_predictions_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'prediction_uuid_timestamp' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'prediction_uuid_timestamp'", "not", "in", "params", "or", "\n", "params", "[", "'prediction_uuid_timestamp'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `prediction_uuid_timestamp` when calling `get_predictions_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'prediction_uuid_timestamp'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'predictionUUIDTimestamp'", ",", "params", "[", "'prediction_uuid_timestamp'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'task_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'taskName'", ",", "params", "[", "'task_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/predictions/samples'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[PredictionSingletons]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.create_dataset": [[36, 57], ["kwargs.get", "datasets_api.DatasetsApi.create_dataset_with_http_info", "datasets_api.DatasetsApi.create_dataset_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.create_dataset_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.create_dataset_with_http_info"], ["", "def", "create_dataset", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_dataset  # noqa: E501\n\n        Creates a new dataset for a user  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_dataset(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasetCreateRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "create_dataset_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "create_dataset_with_http_info", "(", "body", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.create_dataset_with_http_info": [[58, 134], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.select_header_content_type", "datasets_api.DatasetsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "create_dataset_with_http_info", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"create_dataset  # noqa: E501\n\n        Creates a new dataset for a user  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_dataset_with_http_info(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasetCreateRequest body: (required)\n        :return: CreateEntityResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method create_dataset\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `create_dataset`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'CreateEntityResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.delete_dataset_by_id": [[135, 156], ["kwargs.get", "datasets_api.DatasetsApi.delete_dataset_by_id_with_http_info", "datasets_api.DatasetsApi.delete_dataset_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.delete_dataset_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.delete_dataset_by_id_with_http_info"], ["", "def", "delete_dataset_by_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_dataset_by_id  # noqa: E501\n\n        Delete a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_dataset_by_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "delete_dataset_by_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "delete_dataset_by_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.delete_dataset_by_id_with_http_info": [[157, 229], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "delete_dataset_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_dataset_by_id  # noqa: E501\n\n        Delete a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_dataset_by_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method delete_dataset_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `delete_dataset_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}'", ",", "'DELETE'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_children_of_dataset_id": [[230, 251], ["kwargs.get", "datasets_api.DatasetsApi.get_children_of_dataset_id_with_http_info", "datasets_api.DatasetsApi.get_children_of_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_children_of_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_children_of_dataset_id_with_http_info"], ["", "def", "get_children_of_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_children_of_dataset_id  # noqa: E501\n\n        Get all datasets which are the children of a specific dataset (e.g crop datasets)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_children_of_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DatasetData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_children_of_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_children_of_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_children_of_dataset_id_with_http_info": [[252, 324], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_children_of_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_children_of_dataset_id  # noqa: E501\n\n        Get all datasets which are the children of a specific dataset (e.g crop datasets)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_children_of_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DatasetData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_children_of_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_children_of_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/children'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DatasetData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_dataset_by_id": [[325, 346], ["kwargs.get", "datasets_api.DatasetsApi.get_dataset_by_id_with_http_info", "datasets_api.DatasetsApi.get_dataset_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_dataset_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_dataset_by_id_with_http_info"], ["", "def", "get_dataset_by_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_dataset_by_id  # noqa: E501\n\n        Get a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_dataset_by_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: DatasetData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_dataset_by_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_dataset_by_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_dataset_by_id_with_http_info": [[347, 419], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_dataset_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_dataset_by_id  # noqa: E501\n\n        Get a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_dataset_by_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: DatasetData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_dataset_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_dataset_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DatasetData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets": [[420, 441], ["kwargs.get", "datasets_api.DatasetsApi.get_datasets_with_http_info", "datasets_api.DatasetsApi.get_datasets_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets_with_http_info"], ["", "def", "get_datasets", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasets  # noqa: E501\n\n        Get all datasets for a user  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasets(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param bool shared: if set, only returns the datasets which have been shared with the user\n        :return: list[DatasetData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_datasets_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_datasets_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets_with_http_info": [[442, 510], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.call_api", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_datasets_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasets  # noqa: E501\n\n        Get all datasets for a user  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasets_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param bool shared: if set, only returns the datasets which have been shared with the user\n        :return: list[DatasetData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'shared'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_datasets\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "if", "'shared'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'shared'", ",", "params", "[", "'shared'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DatasetData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets_enriched": [[511, 533], ["kwargs.get", "datasets_api.DatasetsApi.get_datasets_enriched_with_http_info", "datasets_api.DatasetsApi.get_datasets_enriched_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets_enriched_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets_enriched_with_http_info"], ["", "def", "get_datasets_enriched", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasets_enriched  # noqa: E501\n\n        Get all datasets for a user but enriched with additional information as nTags, nEmbeddings, samples  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasets_enriched(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param bool shared: if set, only returns the datasets which have been shared with the user\n        :param int limit: if set, only returns the newest up until limit\n        :return: list[DatasetDataEnriched]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_datasets_enriched_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_datasets_enriched_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.get_datasets_enriched_with_http_info": [[534, 605], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.call_api", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_datasets_enriched_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasets_enriched  # noqa: E501\n\n        Get all datasets for a user but enriched with additional information as nTags, nEmbeddings, samples  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasets_enriched_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param bool shared: if set, only returns the datasets which have been shared with the user\n        :param int limit: if set, only returns the newest up until limit\n        :return: list[DatasetDataEnriched]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'shared'", ",", "'limit'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_datasets_enriched\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "if", "'shared'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'shared'", ",", "params", "[", "'shared'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'limit'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'limit'", ",", "params", "[", "'limit'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/enriched'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DatasetDataEnriched]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.register_dataset_upload_by_id": [[606, 628], ["kwargs.get", "datasets_api.DatasetsApi.register_dataset_upload_by_id_with_http_info", "datasets_api.DatasetsApi.register_dataset_upload_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.register_dataset_upload_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.register_dataset_upload_by_id_with_http_info"], ["", "def", "register_dataset_upload_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"register_dataset_upload_by_id  # noqa: E501\n\n        Registers a job to track the dataset upload  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.register_dataset_upload_by_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param JobStatusMeta body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "register_dataset_upload_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "register_dataset_upload_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.register_dataset_upload_by_id_with_http_info": [[629, 712], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.select_header_content_type", "datasets_api.DatasetsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "register_dataset_upload_by_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"register_dataset_upload_by_id  # noqa: E501\n\n        Registers a job to track the dataset upload  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.register_dataset_upload_by_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param JobStatusMeta body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method register_dataset_upload_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `register_dataset_upload_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `register_dataset_upload_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/registerDatasetUpload'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.update_dataset_by_id": [[713, 735], ["kwargs.get", "datasets_api.DatasetsApi.update_dataset_by_id_with_http_info", "datasets_api.DatasetsApi.update_dataset_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.update_dataset_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.update_dataset_by_id_with_http_info"], ["", "def", "update_dataset_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_dataset_by_id  # noqa: E501\n\n        Update a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_dataset_by_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasetUpdateRequest body: updated data for dataset (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_dataset_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_dataset_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasets_api.DatasetsApi.update_dataset_by_id_with_http_info": [[736, 819], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasets_api.DatasetsApi.api_client.select_header_accept", "datasets_api.DatasetsApi.api_client.select_header_content_type", "datasets_api.DatasetsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_dataset_by_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_dataset_by_id  # noqa: E501\n\n        Update a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_dataset_by_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasetUpdateRequest body: updated data for dataset (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_dataset_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_dataset_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `update_dataset_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samplings_api.SamplingsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samplings_api.SamplingsApi.trigger_sampling_by_id": [[36, 59], ["kwargs.get", "samplings_api.SamplingsApi.trigger_sampling_by_id_with_http_info", "samplings_api.SamplingsApi.trigger_sampling_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samplings_api.SamplingsApi.trigger_sampling_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samplings_api.SamplingsApi.trigger_sampling_by_id_with_http_info"], ["", "def", "trigger_sampling_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"trigger_sampling_by_id  # noqa: E501\n\n        Trigger a sampling on a specific tag of a dataset with specific prior uploaded csv embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.trigger_sampling_by_id(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SamplingCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: AsyncTaskData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "trigger_sampling_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "trigger_sampling_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.samplings_api.SamplingsApi.trigger_sampling_by_id_with_http_info": [[60, 150], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "samplings_api.SamplingsApi.api_client.select_header_accept", "samplings_api.SamplingsApi.api_client.select_header_content_type", "samplings_api.SamplingsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "trigger_sampling_by_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"trigger_sampling_by_id  # noqa: E501\n\n        Trigger a sampling on a specific tag of a dataset with specific prior uploaded csv embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.trigger_sampling_by_id_with_http_info(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param SamplingCreateRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: AsyncTaskData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'embedding_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method trigger_sampling_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `trigger_sampling_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `trigger_sampling_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `trigger_sampling_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}/sampling'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'AsyncTaskData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.quota_api.QuotaApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.quota_api.QuotaApi.get_quota_maximum_dataset_size": [[36, 56], ["kwargs.get", "quota_api.QuotaApi.get_quota_maximum_dataset_size_with_http_info", "quota_api.QuotaApi.get_quota_maximum_dataset_size_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.quota_api.QuotaApi.get_quota_maximum_dataset_size_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.quota_api.QuotaApi.get_quota_maximum_dataset_size_with_http_info"], ["", "def", "get_quota_maximum_dataset_size", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_quota_maximum_dataset_size  # noqa: E501\n\n        Get quota of the current user for the maximum dataset size  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_quota_maximum_dataset_size(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_quota_maximum_dataset_size_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_quota_maximum_dataset_size_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.quota_api.QuotaApi.get_quota_maximum_dataset_size_with_http_info": [[57, 122], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "quota_api.QuotaApi.api_client.select_header_accept", "quota_api.QuotaApi.api_client.call_api", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_quota_maximum_dataset_size_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_quota_maximum_dataset_size  # noqa: E501\n\n        Get quota of the current user for the maximum dataset size  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_quota_maximum_dataset_size_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_quota_maximum_dataset_size\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/quota'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_by_dataset_id": [[36, 58], ["kwargs.get", "datasources_api.DatasourcesApi.get_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_by_dataset_id_with_http_info"], ["", "def", "get_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasource_by_dataset_id  # noqa: E501\n\n        Get the datasource of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasource_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param DatasourcePurpose purpose: Which datasource with which purpose we want to get. Defaults to INPUT_OUTPUT\n        :return: DatasourceConfig\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_by_dataset_id_with_http_info": [[59, 134], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasource_by_dataset_id  # noqa: E501\n\n        Get the datasource of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasource_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param DatasourcePurpose purpose: Which datasource with which purpose we want to get. Defaults to INPUT_OUTPUT\n        :return: DatasourceConfig\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'purpose'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'purpose'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'purpose'", ",", "params", "[", "'purpose'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DatasourceConfig'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id": [[135, 156], ["kwargs.get", "datasources_api.DatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id_with_http_info"], ["", "def", "get_datasource_processed_until_timestamp_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasource_processed_until_timestamp_by_dataset_id  # noqa: E501\n\n        Get timestamp of last treated resource  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasource_processed_until_timestamp_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: DatasourceProcessedUntilTimestampResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id_with_http_info": [[157, 229], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasource_processed_until_timestamp_by_dataset_id  # noqa: E501\n\n        Get timestamp of last treated resource  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasource_processed_until_timestamp_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: DatasourceProcessedUntilTimestampResponse\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_datasource_processed_until_timestamp_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_datasource_processed_until_timestamp_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/processedUntilTimestamp'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DatasourceProcessedUntilTimestampResponse'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasources_by_dataset_id": [[230, 251], ["kwargs.get", "datasources_api.DatasourcesApi.get_datasources_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_datasources_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasources_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasources_by_dataset_id_with_http_info"], ["", "def", "get_datasources_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasources_by_dataset_id  # noqa: E501\n\n        Get all the datasources of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasources_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DatasourceConfig]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_datasources_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_datasources_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_datasources_by_dataset_id_with_http_info": [[252, 324], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_datasources_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_datasources_by_dataset_id  # noqa: E501\n\n        Get all the datasources of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_datasources_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DatasourceConfig]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_datasources_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_datasources_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/all'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DatasourceConfig]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id": [[325, 350], ["kwargs.get", "datasources_api.DatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info"], ["", "def", "get_list_of_raw_samples_from_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_list_of_raw_samples_from_datasource_by_dataset_id  # noqa: E501\n\n        Get list of raw samples from datasource  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_list_of_raw_samples_from_datasource_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp _from: Unix timestamp, only samples with a creation date after `from` will be returned. This parameter is ignored if `cursor` is specified. \n        :param Timestamp to: Unix timestamp, only samples with a creation date before `to` will be returned. This parameter is ignored if `cursor` is specified. \n        :param str cursor: Cursor from previous request, encodes `from` and `to` parameters. Specify to continue reading samples from the list. \n        :param str relevant_filenames_file_name: The name of the file within your datasource which contains a list of relevant filenames to list. See https://docs.lightly.ai/docker/getting_started/first_steps.html#specify-relevant-files for more details  \n        :return: DatasourceRawSamplesData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info": [[351, 435], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_list_of_raw_samples_from_datasource_by_dataset_id  # noqa: E501\n\n        Get list of raw samples from datasource  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_list_of_raw_samples_from_datasource_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp _from: Unix timestamp, only samples with a creation date after `from` will be returned. This parameter is ignored if `cursor` is specified. \n        :param Timestamp to: Unix timestamp, only samples with a creation date before `to` will be returned. This parameter is ignored if `cursor` is specified. \n        :param str cursor: Cursor from previous request, encodes `from` and `to` parameters. Specify to continue reading samples from the list. \n        :param str relevant_filenames_file_name: The name of the file within your datasource which contains a list of relevant filenames to list. See https://docs.lightly.ai/docker/getting_started/first_steps.html#specify-relevant-files for more details  \n        :return: DatasourceRawSamplesData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'_from'", ",", "'to'", ",", "'cursor'", ",", "'relevant_filenames_file_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_list_of_raw_samples_from_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_list_of_raw_samples_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'_from'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'from'", ",", "params", "[", "'_from'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'to'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'to'", ",", "params", "[", "'to'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'cursor'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'cursor'", ",", "params", "[", "'cursor'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'relevant_filenames_file_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'relevantFilenamesFileName'", ",", "params", "[", "'relevant_filenames_file_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/list'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DatasourceRawSamplesData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id": [[436, 461], ["kwargs.get", "datasources_api.DatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info"], ["", "def", "get_list_of_raw_samples_metadata_from_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_list_of_raw_samples_metadata_from_datasource_by_dataset_id  # noqa: E501\n\n        Get list of the raw samples metadata from datasource for a specific taskName  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp _from: Unix timestamp, only samples with a creation date after `from` will be returned. This parameter is ignored if `cursor` is specified. \n        :param Timestamp to: Unix timestamp, only samples with a creation date before `to` will be returned. This parameter is ignored if `cursor` is specified. \n        :param str cursor: Cursor from previous request, encodes `from` and `to` parameters. Specify to continue reading samples from the list. \n        :param str relevant_filenames_file_name: The name of the file within your datasource which contains a list of relevant filenames to list. See https://docs.lightly.ai/docker/getting_started/first_steps.html#specify-relevant-files for more details  \n        :return: DatasourceRawSamplesMetadataData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info": [[462, 546], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_list_of_raw_samples_metadata_from_datasource_by_dataset_id  # noqa: E501\n\n        Get list of the raw samples metadata from datasource for a specific taskName  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param Timestamp _from: Unix timestamp, only samples with a creation date after `from` will be returned. This parameter is ignored if `cursor` is specified. \n        :param Timestamp to: Unix timestamp, only samples with a creation date before `to` will be returned. This parameter is ignored if `cursor` is specified. \n        :param str cursor: Cursor from previous request, encodes `from` and `to` parameters. Specify to continue reading samples from the list. \n        :param str relevant_filenames_file_name: The name of the file within your datasource which contains a list of relevant filenames to list. See https://docs.lightly.ai/docker/getting_started/first_steps.html#specify-relevant-files for more details  \n        :return: DatasourceRawSamplesMetadataData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'_from'", ",", "'to'", ",", "'cursor'", ",", "'relevant_filenames_file_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_list_of_raw_samples_metadata_from_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_list_of_raw_samples_metadata_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'_from'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'from'", ",", "params", "[", "'_from'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'to'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'to'", ",", "params", "[", "'to'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'cursor'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'cursor'", ",", "params", "[", "'cursor'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'relevant_filenames_file_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'relevantFilenamesFileName'", ",", "params", "[", "'relevant_filenames_file_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/metadata/list'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DatasourceRawSamplesMetadataData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id": [[547, 573], ["kwargs.get", "datasources_api.DatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info"], ["", "def", "get_list_of_raw_samples_predictions_from_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "task_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_list_of_raw_samples_predictions_from_datasource_by_dataset_id  # noqa: E501\n\n        Get list of the raw samples predictions from datasource for a specific taskName  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id(dataset_id, task_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param TaskName task_name: The prediction task name for which one wants to list the predictions (required)\n        :param Timestamp _from: Unix timestamp, only samples with a creation date after `from` will be returned. This parameter is ignored if `cursor` is specified. \n        :param Timestamp to: Unix timestamp, only samples with a creation date before `to` will be returned. This parameter is ignored if `cursor` is specified. \n        :param str cursor: Cursor from previous request, encodes `from` and `to` parameters. Specify to continue reading samples from the list. \n        :param str relevant_filenames_file_name: The name of the file within your datasource which contains a list of relevant filenames to list. See https://docs.lightly.ai/docker/getting_started/first_steps.html#specify-relevant-files for more details  \n        :return: DatasourceRawSamplesPredictionsData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "task_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "task_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info": [[574, 665], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "task_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_list_of_raw_samples_predictions_from_datasource_by_dataset_id  # noqa: E501\n\n        Get list of the raw samples predictions from datasource for a specific taskName  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id_with_http_info(dataset_id, task_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param TaskName task_name: The prediction task name for which one wants to list the predictions (required)\n        :param Timestamp _from: Unix timestamp, only samples with a creation date after `from` will be returned. This parameter is ignored if `cursor` is specified. \n        :param Timestamp to: Unix timestamp, only samples with a creation date before `to` will be returned. This parameter is ignored if `cursor` is specified. \n        :param str cursor: Cursor from previous request, encodes `from` and `to` parameters. Specify to continue reading samples from the list. \n        :param str relevant_filenames_file_name: The name of the file within your datasource which contains a list of relevant filenames to list. See https://docs.lightly.ai/docker/getting_started/first_steps.html#specify-relevant-files for more details  \n        :return: DatasourceRawSamplesPredictionsData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'task_name'", ",", "'_from'", ",", "'to'", ",", "'cursor'", ",", "'relevant_filenames_file_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_list_of_raw_samples_predictions_from_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_list_of_raw_samples_predictions_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'task_name' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'task_name'", "not", "in", "params", "or", "\n", "params", "[", "'task_name'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `task_name` when calling `get_list_of_raw_samples_predictions_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'task_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'taskName'", ",", "params", "[", "'task_name'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'_from'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'from'", ",", "params", "[", "'_from'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'to'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'to'", ",", "params", "[", "'to'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'cursor'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'cursor'", ",", "params", "[", "'cursor'", "]", ")", ")", "# noqa: E501", "\n", "", "if", "'relevant_filenames_file_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'relevantFilenamesFileName'", ",", "params", "[", "'relevant_filenames_file_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/predictions/list'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DatasourceRawSamplesPredictionsData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_metadata_file_read_url_from_datasource_by_dataset_id": [[666, 688], ["kwargs.get", "datasources_api.DatasourcesApi.get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info"], ["", "def", "get_metadata_file_read_url_from_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_metadata_file_read_url_from_datasource_by_dataset_id  # noqa: E501\n\n        Get the ReadURL of a file within the metadata folder (e.g. my_image.json or my_video-099-mp4.json)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_metadata_file_read_url_from_datasource_by_dataset_id(dataset_id, file_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str file_name: The name of the file within the metadata folder to get the readUrl for (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info": [[689, 768], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_metadata_file_read_url_from_datasource_by_dataset_id  # noqa: E501\n\n        Get the ReadURL of a file within the metadata folder (e.g. my_image.json or my_video-099-mp4.json)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_metadata_file_read_url_from_datasource_by_dataset_id_with_http_info(dataset_id, file_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str file_name: The name of the file within the metadata folder to get the readUrl for (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'file_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_metadata_file_read_url_from_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_metadata_file_read_url_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'file_name' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'file_name'", "not", "in", "params", "or", "\n", "params", "[", "'file_name'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `file_name` when calling `get_metadata_file_read_url_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'file_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileName'", ",", "params", "[", "'file_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/metadata/file'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id": [[769, 791], ["kwargs.get", "datasources_api.DatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info"], ["", "def", "get_prediction_file_read_url_from_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_file_read_url_from_datasource_by_dataset_id  # noqa: E501\n\n        Get the ReadURL of a file within the predictions folder (e.g tasks.json or my_classification_task/schema.json)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_file_read_url_from_datasource_by_dataset_id(dataset_id, file_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str file_name: The name of the file within the prediction folder to get the readUrl for (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info": [[792, 871], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_file_read_url_from_datasource_by_dataset_id  # noqa: E501\n\n        Get the ReadURL of a file within the predictions folder (e.g tasks.json or my_classification_task/schema.json)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_file_read_url_from_datasource_by_dataset_id_with_http_info(dataset_id, file_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str file_name: The name of the file within the prediction folder to get the readUrl for (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'file_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_prediction_file_read_url_from_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_prediction_file_read_url_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'file_name' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'file_name'", "not", "in", "params", "or", "\n", "params", "[", "'file_name'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `file_name` when calling `get_prediction_file_read_url_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'file_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileName'", ",", "params", "[", "'file_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/predictions/file'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_write_url_from_datasource_by_dataset_id": [[872, 894], ["kwargs.get", "datasources_api.DatasourcesApi.get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info"], ["", "def", "get_prediction_file_write_url_from_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_file_write_url_from_datasource_by_dataset_id  # noqa: E501\n\n        Get the WriteURL of a file within the predictions folder (e.g tasks.json or my_classification_task/schema.json)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_file_write_url_from_datasource_by_dataset_id(dataset_id, file_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str file_name: The name of the file within the prediction folder to get the readUrl for (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info": [[895, 974], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "file_name", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_prediction_file_write_url_from_datasource_by_dataset_id  # noqa: E501\n\n        Get the WriteURL of a file within the predictions folder (e.g tasks.json or my_classification_task/schema.json)  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_prediction_file_write_url_from_datasource_by_dataset_id_with_http_info(dataset_id, file_name, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str file_name: The name of the file within the prediction folder to get the readUrl for (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'file_name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_prediction_file_write_url_from_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_prediction_file_write_url_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'file_name' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'file_name'", "not", "in", "params", "or", "\n", "params", "[", "'file_name'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `file_name` when calling `get_prediction_file_write_url_from_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'file_name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'fileName'", ",", "params", "[", "'file_name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/predictions/writeUrl'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_by_dataset_id": [[975, 997], ["kwargs.get", "datasources_api.DatasourcesApi.update_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.update_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_by_dataset_id_with_http_info"], ["", "def", "update_datasource_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_datasource_by_dataset_id  # noqa: E501\n\n        Update the datasource of a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_datasource_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasourceConfig body: updated datasource configuration for a dataset (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_datasource_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_datasource_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_by_dataset_id_with_http_info": [[998, 1081], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.select_header_content_type", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_datasource_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_datasource_by_dataset_id  # noqa: E501\n\n        Update the datasource of a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_datasource_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasourceConfig body: updated datasource configuration for a dataset (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `update_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id": [[1082, 1104], ["kwargs.get", "datasources_api.DatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id_with_http_info"], ["", "def", "update_datasource_processed_until_timestamp_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_datasource_processed_until_timestamp_by_dataset_id  # noqa: E501\n\n        Update timestamp of last resource in datapool  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_datasource_processed_until_timestamp_by_dataset_id(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasourceProcessedUntilTimestampRequest body: The updated timestamp to set (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "update_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "update_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "(", "body", ",", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id_with_http_info": [[1105, 1188], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.select_header_content_type", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "update_datasource_processed_until_timestamp_by_dataset_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"update_datasource_processed_until_timestamp_by_dataset_id  # noqa: E501\n\n        Update timestamp of last resource in datapool  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.update_datasource_processed_until_timestamp_by_dataset_id_with_http_info(body, dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param DatasourceProcessedUntilTimestampRequest body: The updated timestamp to set (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method update_datasource_processed_until_timestamp_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `update_datasource_processed_until_timestamp_by_dataset_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `update_datasource_processed_until_timestamp_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/processedUntilTimestamp'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.verify_datasource_by_dataset_id": [[1189, 1210], ["kwargs.get", "datasources_api.DatasourcesApi.verify_datasource_by_dataset_id_with_http_info", "datasources_api.DatasourcesApi.verify_datasource_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.verify_datasource_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.verify_datasource_by_dataset_id_with_http_info"], ["", "def", "verify_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"verify_datasource_by_dataset_id  # noqa: E501\n\n        Test and verify that the configured datasource can be accessed correctly  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.verify_datasource_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: DatasourceConfigVerifyData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "verify_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "verify_datasource_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.verify_datasource_by_dataset_id_with_http_info": [[1211, 1283], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "datasources_api.DatasourcesApi.api_client.select_header_accept", "datasources_api.DatasourcesApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "verify_datasource_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"verify_datasource_by_dataset_id  # noqa: E501\n\n        Test and verify that the configured datasource can be accessed correctly  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.verify_datasource_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: DatasourceConfigVerifyData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method verify_datasource_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `verify_datasource_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/datasource/verify'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'DatasourceConfigVerifyData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.delete_embedding_by_id": [[36, 58], ["kwargs.get", "embeddings_api.EmbeddingsApi.delete_embedding_by_id_with_http_info", "embeddings_api.EmbeddingsApi.delete_embedding_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.delete_embedding_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.delete_embedding_by_id_with_http_info"], ["", "def", "delete_embedding_by_id", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_embedding_by_id  # noqa: E501\n\n        Deletes a embedding entry by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_embedding_by_id(dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "delete_embedding_by_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "delete_embedding_by_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.delete_embedding_by_id_with_http_info": [[59, 138], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings_api.EmbeddingsApi.api_client.select_header_accept", "embeddings_api.EmbeddingsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "delete_embedding_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"delete_embedding_by_id  # noqa: E501\n\n        Deletes a embedding entry by id.  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.delete_embedding_by_id_with_http_info(dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'embedding_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method delete_embedding_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `delete_embedding_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `delete_embedding_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}'", ",", "'DELETE'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_dataset_id": [[139, 160], ["kwargs.get", "embeddings_api.EmbeddingsApi.get_embeddings_by_dataset_id_with_http_info", "embeddings_api.EmbeddingsApi.get_embeddings_by_dataset_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_dataset_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_dataset_id_with_http_info"], ["", "def", "get_embeddings_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_by_dataset_id  # noqa: E501\n\n        Get all annotations of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_by_dataset_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DatasetEmbeddingData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_embeddings_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_embeddings_by_dataset_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_dataset_id_with_http_info": [[161, 233], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings_api.EmbeddingsApi.api_client.select_header_accept", "embeddings_api.EmbeddingsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_embeddings_by_dataset_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_by_dataset_id  # noqa: E501\n\n        Get all annotations of a dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_by_dataset_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :return: list[DatasetEmbeddingData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_embeddings_by_dataset_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_embeddings_by_dataset_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[DatasetEmbeddingData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_sample_id": [[234, 257], ["kwargs.get", "embeddings_api.EmbeddingsApi.get_embeddings_by_sample_id_with_http_info", "embeddings_api.EmbeddingsApi.get_embeddings_by_sample_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_sample_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_sample_id_with_http_info"], ["", "def", "get_embeddings_by_sample_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_by_sample_id  # noqa: E501\n\n        Get all embeddings of a datasets sample  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_by_sample_id(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param str mode: if we want everything (full) or just the summaries\n        :return: list[EmbeddingData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_embeddings_by_sample_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_embeddings_by_sample_id_with_http_info", "(", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_by_sample_id_with_http_info": [[258, 340], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings_api.EmbeddingsApi.api_client.select_header_accept", "embeddings_api.EmbeddingsApi.api_client.call_api", "ValueError", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_embeddings_by_sample_id_with_http_info", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_by_sample_id  # noqa: E501\n\n        Get all embeddings of a datasets sample  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_by_sample_id_with_http_info(dataset_id, sample_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID sample_id: ObjectId of the sample (required)\n        :param str mode: if we want everything (full) or just the summaries\n        :return: list[EmbeddingData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'sample_id'", ",", "'mode'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_embeddings_by_sample_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_embeddings_by_sample_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'sample_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'sample_id'", "not", "in", "params", "or", "\n", "params", "[", "'sample_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `sample_id` when calling `get_embeddings_by_sample_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'sample_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'sampleId'", "]", "=", "params", "[", "'sample_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'mode'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'mode'", ",", "params", "[", "'mode'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/users/datasets/{datasetId}/samples/{sampleId}/embeddings'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[EmbeddingData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_read_url_by_id": [[341, 363], ["kwargs.get", "embeddings_api.EmbeddingsApi.get_embeddings_csv_read_url_by_id_with_http_info", "embeddings_api.EmbeddingsApi.get_embeddings_csv_read_url_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_read_url_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_read_url_by_id_with_http_info"], ["", "def", "get_embeddings_csv_read_url_by_id", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_csv_read_url_by_id  # noqa: E501\n\n        Get the url of a specific embeddings CSV  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_csv_read_url_by_id(dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_embeddings_csv_read_url_by_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_embeddings_csv_read_url_by_id_with_http_info", "(", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_read_url_by_id_with_http_info": [[364, 443], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings_api.EmbeddingsApi.api_client.select_header_accept", "embeddings_api.EmbeddingsApi.api_client.call_api", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_embeddings_csv_read_url_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_csv_read_url_by_id  # noqa: E501\n\n        Get the url of a specific embeddings CSV  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_csv_read_url_by_id_with_http_info(dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: str\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'embedding_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_embeddings_csv_read_url_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_embeddings_csv_read_url_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `get_embeddings_csv_read_url_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}/readCSVUrl'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'str'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_write_url_by_id": [[444, 466], ["kwargs.get", "embeddings_api.EmbeddingsApi.get_embeddings_csv_write_url_by_id_with_http_info", "embeddings_api.EmbeddingsApi.get_embeddings_csv_write_url_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_write_url_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_write_url_by_id_with_http_info"], ["", "def", "get_embeddings_csv_write_url_by_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_csv_write_url_by_id  # noqa: E501\n\n        Get the signed url to upload an CSVembedding to for a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_csv_write_url_by_id(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str name: the sampling requests name to create a signed url for\n        :return: WriteCSVUrlData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_embeddings_csv_write_url_by_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_embeddings_csv_write_url_by_id_with_http_info", "(", "dataset_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.get_embeddings_csv_write_url_by_id_with_http_info": [[467, 542], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings_api.EmbeddingsApi.api_client.select_header_accept", "embeddings_api.EmbeddingsApi.api_client.call_api", "ValueError", "query_params.append", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_embeddings_csv_write_url_by_id_with_http_info", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_embeddings_csv_write_url_by_id  # noqa: E501\n\n        Get the signed url to upload an CSVembedding to for a specific dataset  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_embeddings_csv_write_url_by_id_with_http_info(dataset_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param str name: the sampling requests name to create a signed url for\n        :return: WriteCSVUrlData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'dataset_id'", ",", "'name'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_embeddings_csv_write_url_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `get_embeddings_csv_write_url_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "if", "'name'", "in", "params", ":", "\n", "            ", "query_params", ".", "append", "(", "(", "'name'", ",", "params", "[", "'name'", "]", ")", ")", "# noqa: E501", "\n", "\n", "", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/writeCSVUrl'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'WriteCSVUrlData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.set_embeddings_is_processed_flag_by_id": [[543, 566], ["kwargs.get", "embeddings_api.EmbeddingsApi.set_embeddings_is_processed_flag_by_id_with_http_info", "embeddings_api.EmbeddingsApi.set_embeddings_is_processed_flag_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.set_embeddings_is_processed_flag_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.set_embeddings_is_processed_flag_by_id_with_http_info"], ["", "def", "set_embeddings_is_processed_flag_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"set_embeddings_is_processed_flag_by_id  # noqa: E501\n\n        Sets the isProcessed flag of the specified embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.set_embeddings_is_processed_flag_by_id(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param EmbeddingIdIsProcessedBody body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "set_embeddings_is_processed_flag_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "set_embeddings_is_processed_flag_by_id_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.set_embeddings_is_processed_flag_by_id_with_http_info": [[567, 657], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings_api.EmbeddingsApi.api_client.select_header_accept", "embeddings_api.EmbeddingsApi.api_client.select_header_content_type", "embeddings_api.EmbeddingsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "set_embeddings_is_processed_flag_by_id_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"set_embeddings_is_processed_flag_by_id  # noqa: E501\n\n        Sets the isProcessed flag of the specified embedding  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.set_embeddings_is_processed_flag_by_id_with_http_info(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param EmbeddingIdIsProcessedBody body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'embedding_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method set_embeddings_is_processed_flag_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `set_embeddings_is_processed_flag_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `set_embeddings_is_processed_flag_by_id`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `set_embeddings_is_processed_flag_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}/isProcessed'", ",", "'PUT'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.trigger2d_embeddings_job": [[658, 681], ["kwargs.get", "embeddings_api.EmbeddingsApi.trigger2d_embeddings_job_with_http_info", "embeddings_api.EmbeddingsApi.trigger2d_embeddings_job_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.trigger2d_embeddings_job_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.trigger2d_embeddings_job_with_http_info"], ["", "def", "trigger2d_embeddings_job", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"trigger2d_embeddings_job  # noqa: E501\n\n        Trigger job to get 2d embeddings from embeddings  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.trigger2d_embeddings_job(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param Trigger2dEmbeddingJobRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "trigger2d_embeddings_job_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "trigger2d_embeddings_job_with_http_info", "(", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.embeddings_api.EmbeddingsApi.trigger2d_embeddings_job_with_http_info": [[682, 772], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "embeddings_api.EmbeddingsApi.api_client.select_header_accept", "embeddings_api.EmbeddingsApi.api_client.select_header_content_type", "embeddings_api.EmbeddingsApi.api_client.call_api", "ValueError", "ValueError", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_content_type", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "trigger2d_embeddings_job_with_http_info", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"trigger2d_embeddings_job  # noqa: E501\n\n        Trigger job to get 2d embeddings from embeddings  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.trigger2d_embeddings_job_with_http_info(body, dataset_id, embedding_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param Trigger2dEmbeddingJobRequest body: (required)\n        :param MongoObjectID dataset_id: ObjectId of the dataset (required)\n        :param MongoObjectID embedding_id: ObjectId of the embedding (required)\n        :return: None\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'body'", ",", "'dataset_id'", ",", "'embedding_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method trigger2d_embeddings_job\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'body' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'body'", "not", "in", "params", "or", "\n", "params", "[", "'body'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `body` when calling `trigger2d_embeddings_job`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'dataset_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'dataset_id'", "not", "in", "params", "or", "\n", "params", "[", "'dataset_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `dataset_id` when calling `trigger2d_embeddings_job`\"", ")", "# noqa: E501", "\n", "# verify the required parameter 'embedding_id' is set", "\n", "", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'embedding_id'", "not", "in", "params", "or", "\n", "params", "[", "'embedding_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `embedding_id` when calling `trigger2d_embeddings_job`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'dataset_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'datasetId'", "]", "=", "params", "[", "'dataset_id'", "]", "# noqa: E501", "\n", "", "if", "'embedding_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'embeddingId'", "]", "=", "params", "[", "'embedding_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "if", "'body'", "in", "params", ":", "\n", "            ", "body_params", "=", "params", "[", "'body'", "]", "\n", "# HTTP header `Accept`", "\n", "", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# HTTP header `Content-Type`", "\n", "header_params", "[", "'Content-Type'", "]", "=", "self", ".", "api_client", ".", "select_header_content_type", "(", "# noqa: E501", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/datasets/{datasetId}/embeddings/{embeddingId}/trigger2dEmbeddingsJob'", ",", "'POST'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "None", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.__init__": [[31, 35], ["lightly.openapi_generated.swagger_client.api_client.ApiClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "if", "api_client", "is", "None", ":", "\n", "            ", "api_client", "=", "ApiClient", "(", ")", "\n", "", "self", ".", "api_client", "=", "api_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_job_status_by_id": [[36, 57], ["kwargs.get", "jobs_api.JobsApi.get_job_status_by_id_with_http_info", "jobs_api.JobsApi.get_job_status_by_id_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_job_status_by_id_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_job_status_by_id_with_http_info"], ["", "def", "get_job_status_by_id", "(", "self", ",", "job_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_job_status_by_id  # noqa: E501\n\n        Get status of a specific job  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_job_status_by_id(job_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str job_id: id of the job (required)\n        :return: JobStatusData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_job_status_by_id_with_http_info", "(", "job_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_job_status_by_id_with_http_info", "(", "job_id", ",", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_job_status_by_id_with_http_info": [[58, 130], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "jobs_api.JobsApi.api_client.select_header_accept", "jobs_api.JobsApi.api_client.call_api", "ValueError", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_job_status_by_id_with_http_info", "(", "self", ",", "job_id", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_job_status_by_id  # noqa: E501\n\n        Get status of a specific job  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_job_status_by_id_with_http_info(job_id, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str job_id: id of the job (required)\n        :return: JobStatusData\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "'job_id'", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_job_status_by_id\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "# verify the required parameter 'job_id' is set", "\n", "if", "self", ".", "api_client", ".", "client_side_validation", "and", "(", "'job_id'", "not", "in", "params", "or", "\n", "params", "[", "'job_id'", "]", "is", "None", ")", ":", "# noqa: E501", "\n", "            ", "raise", "ValueError", "(", "\"Missing the required parameter `job_id` when calling `get_job_status_by_id`\"", ")", "# noqa: E501", "\n", "\n", "", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "if", "'job_id'", "in", "params", ":", "\n", "            ", "path_params", "[", "'jobId'", "]", "=", "params", "[", "'job_id'", "]", "# noqa: E501", "\n", "\n", "", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/jobs/{jobId}'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'JobStatusData'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_jobs": [[131, 151], ["kwargs.get", "jobs_api.JobsApi.get_jobs_with_http_info", "jobs_api.JobsApi.get_jobs_with_http_info"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_jobs_with_http_info", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_jobs_with_http_info"], ["", "def", "get_jobs", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_jobs  # noqa: E501\n\n        Get all jobs you have created  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_jobs(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[JobsData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "kwargs", "[", "'_return_http_data_only'", "]", "=", "True", "\n", "if", "kwargs", ".", "get", "(", "'async_req'", ")", ":", "\n", "            ", "return", "self", ".", "get_jobs_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "", "else", ":", "\n", "            ", "(", "data", ")", "=", "self", ".", "get_jobs_with_http_info", "(", "**", "kwargs", ")", "# noqa: E501", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.jobs_api.JobsApi.get_jobs_with_http_info": [[152, 217], ["all_params.append", "all_params.append", "all_params.append", "all_params.append", "locals", "six.iteritems", "jobs_api.JobsApi.api_client.select_header_accept", "jobs_api.JobsApi.api_client.call_api", "TypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.swagger_client.api_client.ApiClient.select_header_accept", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "", "def", "get_jobs_with_http_info", "(", "self", ",", "**", "kwargs", ")", ":", "# noqa: E501", "\n", "        ", "\"\"\"get_jobs  # noqa: E501\n\n        Get all jobs you have created  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.get_jobs_with_http_info(async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :return: list[JobsData]\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"", "\n", "\n", "all_params", "=", "[", "]", "# noqa: E501", "\n", "all_params", ".", "append", "(", "'async_req'", ")", "\n", "all_params", ".", "append", "(", "'_return_http_data_only'", ")", "\n", "all_params", ".", "append", "(", "'_preload_content'", ")", "\n", "all_params", ".", "append", "(", "'_request_timeout'", ")", "\n", "\n", "params", "=", "locals", "(", ")", "\n", "for", "key", ",", "val", "in", "six", ".", "iteritems", "(", "params", "[", "'kwargs'", "]", ")", ":", "\n", "            ", "if", "key", "not", "in", "all_params", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Got an unexpected keyword argument '%s'\"", "\n", "\" to method get_jobs\"", "%", "key", "\n", ")", "\n", "", "params", "[", "key", "]", "=", "val", "\n", "", "del", "params", "[", "'kwargs'", "]", "\n", "\n", "collection_formats", "=", "{", "}", "\n", "\n", "path_params", "=", "{", "}", "\n", "\n", "query_params", "=", "[", "]", "\n", "\n", "header_params", "=", "{", "}", "\n", "\n", "form_params", "=", "[", "]", "\n", "local_var_files", "=", "{", "}", "\n", "\n", "body_params", "=", "None", "\n", "# HTTP header `Accept`", "\n", "header_params", "[", "'Accept'", "]", "=", "self", ".", "api_client", ".", "select_header_accept", "(", "\n", "[", "'application/json'", "]", ")", "# noqa: E501", "\n", "\n", "# Authentication setting", "\n", "auth_settings", "=", "[", "'ApiKeyAuth'", ",", "'auth0Bearer'", "]", "# noqa: E501", "\n", "\n", "return", "self", ".", "api_client", ".", "call_api", "(", "\n", "'/v1/jobs'", ",", "'GET'", ",", "\n", "path_params", ",", "\n", "query_params", ",", "\n", "header_params", ",", "\n", "body", "=", "body_params", ",", "\n", "post_params", "=", "form_params", ",", "\n", "files", "=", "local_var_files", ",", "\n", "response_type", "=", "'list[JobsData]'", ",", "# noqa: E501", "\n", "auth_settings", "=", "auth_settings", ",", "\n", "async_req", "=", "params", ".", "get", "(", "'async_req'", ")", ",", "\n", "_return_http_data_only", "=", "params", ".", "get", "(", "'_return_http_data_only'", ")", ",", "\n", "_preload_content", "=", "params", ".", "get", "(", "'_preload_content'", ",", "True", ")", ",", "\n", "_request_timeout", "=", "params", ".", "get", "(", "'_request_timeout'", ")", ",", "\n", "collection_formats", "=", "collection_formats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.verify_custom_metadata_format": [[37, 55], ["api_workflow_upload_metadata._assert_key_exists_in_custom_metadata", "api_workflow_upload_metadata._assert_key_exists_in_custom_metadata"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._assert_key_exists_in_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._assert_key_exists_in_custom_metadata"], ["def", "verify_custom_metadata_format", "(", "self", ",", "custom_metadata", ":", "Dict", ")", ":", "\n", "        ", "\"\"\"Verifies that the custom metadata is in the correct format.\n\n        Args:\n            custom_metadata:\n                Dictionary of custom metadata, see upload_custom_metadata for\n                the required format.\n\n        Raises:\n            KeyError:\n                If \"images\" or \"metadata\" aren't a key of custom_metadata.\n\n        \"\"\"", "\n", "_assert_key_exists_in_custom_metadata", "(", "\n", "COCO_ANNOTATION_KEYS", ".", "images", ",", "custom_metadata", "\n", ")", "\n", "_assert_key_exists_in_custom_metadata", "(", "\n", "COCO_ANNOTATION_KEYS", ".", "custom_metadata", ",", "custom_metadata", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.index_custom_metadata_by_filename": [[57, 93], ["image_id_to_custom_metadata.get", "filename_to_image_id.items"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["", "def", "index_custom_metadata_by_filename", "(", "self", ",", "custom_metadata", ":", "Dict", ")", "->", "Dict", "[", "str", ",", "Union", "[", "Dict", ",", "None", "]", "]", ":", "\n", "        ", "\"\"\"Creates an index to lookup custom metadata by filename.\n\n        Args:\n            custom_metadata:\n                Dictionary of custom metadata, see upload_custom_metadata for\n                the required format.\n\n        Returns:\n            A dictionary mapping from filenames to custom metadata.\n            If there are no annotations for a filename, the custom metadata\n            is None instead.\n\n        \"\"\"", "\n", "\n", "# The mapping is filename -> image_id -> custom_metadata", "\n", "# This mapping is created in linear time.", "\n", "filename_to_image_id", "=", "{", "\n", "image_info", "[", "COCO_ANNOTATION_KEYS", ".", "images_filename", "]", ":", "\n", "image_info", "[", "COCO_ANNOTATION_KEYS", ".", "images_id", "]", "\n", "for", "image_info", "\n", "in", "custom_metadata", "[", "COCO_ANNOTATION_KEYS", ".", "images", "]", "\n", "}", "\n", "image_id_to_custom_metadata", "=", "{", "\n", "metadata", "[", "COCO_ANNOTATION_KEYS", ".", "custom_metadata_image_id", "]", ":", "\n", "metadata", "\n", "for", "metadata", "\n", "in", "custom_metadata", "[", "COCO_ANNOTATION_KEYS", ".", "custom_metadata", "]", "\n", "}", "\n", "filename_to_metadata", "=", "{", "\n", "filename", ":", "image_id_to_custom_metadata", ".", "get", "(", "image_id", ",", "None", ")", "\n", "for", "(", "filename", ",", "image_id", ")", "\n", "in", "filename_to_image_id", ".", "items", "(", ")", "\n", "}", "\n", "return", "filename_to_metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata": [[96, 218], ["api_workflow_upload_metadata._UploadCustomMetadataMixin.verify_custom_metadata_format", "api_workflow_upload_metadata._UploadCustomMetadataMixin._samples_api.get_samples_by_dataset_id", "image_id_to_filename.get", "filename_to_sample_id.get", "upload_requests.append", "lightly.openapi_generated.swagger_client.models.sample_update_request.SampleUpdateRequest", "lightly.api.utils.retry", "concurrent.futures.ThreadPoolExecutor", "executor.map", "list", "lightly.cli._helpers.print_as_warning", "lightly.cli._helpers.print_as_warning", "tqdm.tqdm.tqdm", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.verify_custom_metadata_format", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.retry", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.print_as_warning"], ["", "def", "upload_custom_metadata", "(", "self", ",", "\n", "custom_metadata", ":", "Dict", ",", "\n", "verbose", ":", "bool", "=", "False", ",", "\n", "max_workers", ":", "int", "=", "8", ")", ":", "\n", "        ", "\"\"\"Uploads custom metadata to the Lightly platform.\n\n        The custom metadata is expected in a format similar to the COCO annotations:\n        Under the key \"images\" there should be a list of dictionaries, each with\n        a file_name and id. Under the key \"metadata\" the custom metadata is stored\n        as a list of dictionaries, each with a image_id to match it to the image.\n\n        Example:\n            >>> custom_metadata = {\n            >>>     \"images\": [\n            >>>         {\n            >>>             \"file_name\": \"image0.jpg\",\n            >>>             \"id\": 0,\n            >>>         },\n            >>>         {\n            >>>             \"file_name\": \"image1.jpg\",\n            >>>             \"id\": 1,\n            >>>         }\n            >>>     ],\n            >>>     \"metadata\": [\n            >>>         {\n            >>>             \"image_id\": 0,\n            >>>             \"number_of_people\": 3,\n            >>>             \"weather\": {\n            >>>                 \"scenario\": \"cloudy\",\n            >>>                 \"temperature\": 20.3\n            >>>             }\n            >>>         },\n            >>>         {\n            >>>             \"image_id\": 1,\n            >>>             \"number_of_people\": 1,\n            >>>             \"weather\": {\n            >>>                 \"scenario\": \"rainy\",\n            >>>                 \"temperature\": 15.0\n            >>>             }\n            >>>         }\n            >>>     ]\n            >>> }\n\n        Args:\n            custom_metadata:\n                Custom metadata as described above.\n            verbose:\n                If True displays a progress bar during the upload.\n            max_workers:\n                Maximum number of concurrent threads during upload.\n\n        \"\"\"", "\n", "\n", "self", ".", "verify_custom_metadata_format", "(", "custom_metadata", ")", "\n", "\n", "\n", "\n", "# For each metadata, we need the corresponding sample_id", "\n", "# on the server. The mapping is:", "\n", "# metadata -> image_id -> filename -> sample_id", "\n", "\n", "image_id_to_filename", "=", "{", "\n", "image_info", "[", "COCO_ANNOTATION_KEYS", ".", "images_id", "]", ":", "\n", "image_info", "[", "COCO_ANNOTATION_KEYS", ".", "images_filename", "]", "\n", "for", "image_info", "in", "custom_metadata", "[", "COCO_ANNOTATION_KEYS", ".", "images", "]", "\n", "}", "\n", "\n", "samples", "=", "self", ".", "_samples_api", ".", "get_samples_by_dataset_id", "(", "self", ".", "dataset_id", ")", "\n", "filename_to_sample_id", "=", "{", "\n", "sample", ".", "file_name", ":", "sample", ".", "id", "\n", "for", "sample", "in", "samples", "\n", "}", "\n", "\n", "upload_requests", "=", "[", "]", "\n", "for", "metadata", "in", "custom_metadata", "[", "COCO_ANNOTATION_KEYS", ".", "custom_metadata", "]", ":", "\n", "            ", "image_id", "=", "metadata", "[", "COCO_ANNOTATION_KEYS", ".", "custom_metadata_image_id", "]", "\n", "filename", "=", "image_id_to_filename", ".", "get", "(", "image_id", ",", "None", ")", "\n", "if", "filename", "is", "None", ":", "\n", "                ", "print_as_warning", "(", "\n", "f'No image found for custom metadata annotation '", "\n", "f'with image_id {image_id}. '", "\n", "f'This custom metadata annotation is skipped. '", ",", "\n", "InvalidCustomMetadataWarning", "\n", ")", "\n", "continue", "\n", "", "sample_id", "=", "filename_to_sample_id", ".", "get", "(", "filename", ",", "None", ")", "\n", "if", "sample_id", "is", "None", ":", "\n", "                ", "print_as_warning", "(", "\n", "f'You tried to upload custom metadata for a sample with '", "\n", "f'filename {{{filename}}}, '", "\n", "f'but a sample with this filename '", "\n", "f'does not exist on the server. '", "\n", "f'This custom metadata annotation is skipped. '", ",", "\n", "InvalidCustomMetadataWarning", "\n", ")", "\n", "continue", "\n", "", "upload_request", "=", "(", "metadata", ",", "sample_id", ")", "\n", "upload_requests", ".", "append", "(", "upload_request", ")", "\n", "\n", "# retry upload if it times out", "\n", "", "def", "upload_sample_metadata", "(", "upload_request", ")", ":", "\n", "            ", "metadata", ",", "sample_id", "=", "upload_request", "\n", "request", "=", "SampleUpdateRequest", "(", "custom_meta_data", "=", "metadata", ")", "\n", "return", "retry", "(", "\n", "self", ".", "_samples_api", ".", "update_sample_by_id", ",", "\n", "request", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", "sample_id", "=", "sample_id", ",", "\n", ")", "\n", "\n", "# Upload in parallel with a limit on the number of concurrent requests", "\n", "", "with", "ThreadPoolExecutor", "(", "max_workers", "=", "max_workers", ")", "as", "executor", ":", "\n", "# get iterator over results", "\n", "            ", "results", "=", "executor", ".", "map", "(", "upload_sample_metadata", ",", "upload_requests", ")", "\n", "if", "verbose", ":", "\n", "                ", "results", "=", "tqdm", "(", "\n", "results", ",", "\n", "unit", "=", "'metadata'", ",", "\n", "total", "=", "len", "(", "upload_requests", ")", "\n", ")", "\n", "# iterate over results to make sure they are completed", "\n", "", "list", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.create_custom_metadata_config": [[219, 257], ["lightly.openapi_generated.swagger_client.models.configuration_set_request.ConfigurationSetRequest", "api_workflow_upload_metadata._UploadCustomMetadataMixin._metadata_configurations_api.create_meta_data_configuration"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.meta_data_configurations_api.MetaDataConfigurationsApi.create_meta_data_configuration"], ["", "", "def", "create_custom_metadata_config", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "configs", ":", "List", "[", "ConfigurationEntry", "]", "\n", ")", ":", "\n", "        ", "\"\"\"Creates custom metadata config from a list of configurations.\n\n        Args:\n            name:\n                The name of the custom metadata configuration.\n            configs:\n                List of configuration entries each specifying.\n\n        Returns:\n            The API response.\n\n        Examples:\n            >>> from lightly.openapi_generated.swagger_codegen.models.configuration_entry import ConfigurationEntry\n            >>> entry = ConfigurationEntry(\n            >>>     name='Weather',\n            >>>     path='weather',\n            >>>     default_value='unknown',\n            >>>     value_data_type='CATEGORICAL_STRING',\n            >>> )\n            >>>  \n            >>> client.create_custom_metadata_config(\n            >>>     'My Custom Metadata',\n            >>>     [entry],\n            >>> )\n        \n        \n        \"\"\"", "\n", "config_set_request", "=", "ConfigurationSetRequest", "(", "name", "=", "name", ",", "configs", "=", "configs", ")", "\n", "resp", "=", "self", ".", "_metadata_configurations_api", ".", "create_meta_data_configuration", "(", "\n", "body", "=", "config_set_request", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n", "return", "resp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._assert_key_exists_in_custom_metadata": [[21, 28], ["dictionary.keys", "KeyError", "dictionary.keys", "lightly.utils.io.COCO_ANNOTATION_KEYS.images", "lightly.utils.io.COCO_ANNOTATION_KEYS.custom_metadata"], "function", ["None"], ["", "def", "_assert_key_exists_in_custom_metadata", "(", "key", ":", "str", ",", "dictionary", ":", "Dict", ")", ":", "\n", "    ", "\"\"\"Raises a formatted KeyError if key is not a key of the dictionary.\n    \n    \"\"\"", "\n", "if", "key", "not", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\n", "f'Key {key} not found in custom metadata.\\n'", "\n", "f'Found keys: {dictionary.keys()}'", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.register_compute_worker": [[15, 32], ["lightly.openapi_generated.swagger_client.models.create_docker_worker_registry_entry_request.CreateDockerWorkerRegistryEntryRequest", "api_workflow_compute_worker._ComputeWorkerMixin._compute_worker_api.register_docker_worker"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.register_docker_worker"], ["    ", "def", "register_compute_worker", "(", "self", ",", "name", ":", "str", "=", "'Default'", ")", "->", "str", ":", "\n", "        ", "\"\"\"Registers a new compute worker.\n        \n        Args:\n            name:\n                The name of the compute worker.\n        \n        Returns:\n            The id of the newly registered compute worker.\n\n        \"\"\"", "\n", "request", "=", "CreateDockerWorkerRegistryEntryRequest", "(", "\n", "name", "=", "name", ",", "\n", "worker_type", "=", "DockerWorkerType", ".", "FULL", "\n", ")", "\n", "response", "=", "self", ".", "_compute_worker_api", ".", "register_docker_worker", "(", "request", ")", "\n", "return", "response", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.get_compute_worker_ids": [[33, 37], ["api_workflow_compute_worker._ComputeWorkerMixin._compute_worker_api.get_docker_worker_registry_entries"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.get_docker_worker_registry_entries"], ["", "def", "get_compute_worker_ids", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns the ids of all registered compute workers.\"\"\"", "\n", "entries", "=", "self", ".", "_compute_worker_api", ".", "get_docker_worker_registry_entries", "(", ")", "\n", "return", "[", "entry", ".", "id", "for", "entry", "in", "entries", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.delete_compute_worker": [[38, 47], ["api_workflow_compute_worker._ComputeWorkerMixin._compute_worker_api.delete_docker_worker_registry_entry_by_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.delete_docker_worker_registry_entry_by_id"], ["", "def", "delete_compute_worker", "(", "self", ",", "worker_id", ":", "str", ")", ":", "\n", "        ", "\"\"\"Removes a compute worker.\n        \n        Args:\n            worker_id:\n                The id of the worker to remove.\n\n        \"\"\"", "\n", "self", ".", "_compute_worker_api", ".", "delete_docker_worker_registry_entry_by_id", "(", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.create_compute_worker_config": [[48, 75], ["lightly.openapi_generated.swagger_client.models.docker_worker_config.DockerWorkerConfig", "lightly.openapi_generated.swagger_client.models.docker_worker_config_create_request.DockerWorkerConfigCreateRequest", "api_workflow_compute_worker._ComputeWorkerMixin._compute_worker_api.create_docker_worker_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.create_docker_worker_config"], ["", "def", "create_compute_worker_config", "(", "\n", "self", ",", "\n", "worker_config", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "lightly_config", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"Creates a new configuration for a compute worker run.\n        \n        Args:\n            worker_config:\n                Compute worker configuration. All possible values are listed in \n                our docs: https://docs.lightly.ai/docker/configuration/configuration.html#list-of-parameters\n            lightly_config:\n                Lightly configuration. All possible values are listed in our\n                docs: https://docs.lightly.ai/lightly.cli.html#default-settings\n\n        Returns:\n            The id of the created config.\n\n        \"\"\"", "\n", "config", "=", "DockerWorkerConfig", "(", "\n", "worker_type", "=", "DockerWorkerType", ".", "FULL", ",", "\n", "docker", "=", "worker_config", ",", "\n", "lightly", "=", "lightly_config", "\n", ")", "\n", "request", "=", "DockerWorkerConfigCreateRequest", "(", "config", ")", "\n", "response", "=", "self", ".", "_compute_worker_api", ".", "create_docker_worker_config", "(", "request", ")", "\n", "return", "response", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.schedule_compute_worker_run": [[76, 108], ["api_workflow_compute_worker._ComputeWorkerMixin.create_compute_worker_config", "lightly.openapi_generated.swagger_client.models.docker_run_scheduled_create_request.DockerRunScheduledCreateRequest", "api_workflow_compute_worker._ComputeWorkerMixin._compute_worker_api.create_docker_run_scheduled_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.create_compute_worker_config", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.create_docker_run_scheduled_by_dataset_id"], ["", "def", "schedule_compute_worker_run", "(", "\n", "self", ",", "\n", "worker_config", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "lightly_config", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "priority", ":", "str", "=", "DockerRunScheduledPriority", ".", "MID", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"Schedules a run with the given configurations.\n        \n        Args:\n            worker_config:\n                Compute worker configuration. All possible values are listed in \n                our docs: https://docs.lightly.ai/docker/configuration/configuration.html#list-of-parameters\n            lightly_config:\n                Lightly configuration. All possible values are listed in our\n                docs: https://docs.lightly.ai/lightly.cli.html#default-settings\n\n        Returns:\n            The id of the scheduled run.\n        \"\"\"", "\n", "config_id", "=", "self", ".", "create_compute_worker_config", "(", "\n", "worker_config", "=", "worker_config", ",", "\n", "lightly_config", "=", "lightly_config", ",", "\n", ")", "\n", "request", "=", "DockerRunScheduledCreateRequest", "(", "\n", "config_id", "=", "config_id", ",", "\n", "priority", "=", "priority", "\n", ")", "\n", "response", "=", "self", ".", "_compute_worker_api", ".", "create_docker_run_scheduled_by_dataset_id", "(", "\n", "body", "=", "request", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n", "return", "response", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.get_compute_worker_runs": [[109, 112], ["api_workflow_compute_worker._ComputeWorkerMixin._compute_worker_api.get_docker_runs"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.get_docker_runs"], ["", "def", "get_compute_worker_runs", "(", "self", ")", "->", "List", "[", "DockerRunData", "]", ":", "\n", "        ", "\"\"\"Returns all compute worker runs for the user.\"\"\"", "\n", "return", "self", ".", "_compute_worker_api", ".", "get_docker_runs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.get_scheduled_compute_worker_runs": [[113, 121], ["api_workflow_compute_worker._ComputeWorkerMixin._compute_worker_api.get_docker_runs_scheduled_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.get_docker_runs_scheduled_by_dataset_id"], ["", "def", "get_scheduled_compute_worker_runs", "(", "\n", "self", ",", "\n", ")", "->", "List", "[", "DockerRunScheduledData", "]", ":", "\n", "        ", "\"\"\"Returns a list of all scheduled compute worker runs for the current\n        dataset.\n        \"\"\"", "\n", "return", "self", ".", "_compute_worker_api", ".", "get_docker_runs_scheduled_by_dataset_id", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.upload_scores": [[32, 54], ["api_workflow_selection._SelectionMixin.get_all_tags", "al_scores.items", "next", "lightly.openapi_generated.swagger_client.ActiveLearningScoreCreateRequest", "api_workflow_selection._SelectionMixin._scores_api.create_or_update_active_learning_score_by_tag_id", "api_workflow_selection._parse_active_learning_scores"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedScoresApi.create_or_update_active_learning_score_by_tag_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._parse_active_learning_scores"], ["    ", "def", "upload_scores", "(", "self", ",", "al_scores", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "query_tag_id", ":", "str", "=", "None", ")", ":", "\n", "\n", "        ", "tags", "=", "self", ".", "get_all_tags", "(", ")", "\n", "\n", "# upload the active learning scores to the api", "\n", "# change @20210422: we store the active learning scores with the query", "\n", "# tag. policy is that if there's no explicit query tag, the whole dataset", "\n", "# will be the query tag (i.e. query_tag = initial-tag)", "\n", "# set the query tag to the initial-tag if necessary", "\n", "if", "query_tag_id", "is", "None", ":", "\n", "            ", "query_tag", "=", "next", "(", "t", "for", "t", "in", "tags", "if", "t", ".", "name", "==", "'initial-tag'", ")", "\n", "query_tag_id", "=", "query_tag", ".", "id", "\n", "# iterate over all available score types and upload them", "\n", "", "for", "score_type", ",", "score_values", "in", "al_scores", ".", "items", "(", ")", ":", "\n", "            ", "body", "=", "ActiveLearningScoreCreateRequest", "(", "\n", "score_type", "=", "score_type", ",", "\n", "scores", "=", "_parse_active_learning_scores", "(", "score_values", ")", "\n", ")", "\n", "self", ".", "_scores_api", ".", "create_or_update_active_learning_score_by_tag_id", "(", "\n", "body", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", "tag_id", "=", "query_tag_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.sampling": [[56, 65], ["warnings.warn", "api_workflow_selection._SelectionMixin.selection", "PendingDeprecationWarning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.selection"], ["", "", "def", "sampling", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "PendingDeprecationWarning", "(", "\n", "\"ApiWorkflowClient.sampling() is deprecated \"", "\n", "\"in favour of ApiWorkflowClient.selection() \"", "\n", "\"and will be removed in the future.\"", "\n", ")", ",", "\n", ")", "\n", "return", "self", ".", "selection", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.selection": [[66, 138], ["api_workflow_selection._SelectionMixin.get_all_tags", "api_workflow_selection._SelectionMixin._create_selection_create_request", "api_workflow_selection._SelectionMixin._selection_api.trigger_sampling_by_id", "getattr", "api_workflow_selection._SelectionMixin._tags_api.get_tag_by_tag_id", "RuntimeError", "len", "RuntimeError", "time.sleep", "RuntimeError", "RuntimeError", "api_workflow_selection._SelectionMixin.set_embedding_id_to_latest", "api_workflow_selection._SelectionMixin.get_all_tags", "api_workflow_selection._SelectionMixin._jobs_api.get_job_status_by_id", "print"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin._create_selection_create_request", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplingsApi.trigger_sampling_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tag_by_tag_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.set_embedding_id_to_latest", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedJobsApi.get_job_status_by_id"], ["", "def", "selection", "(", "self", ",", "selection_config", ":", "SelectionConfig", ",", "preselected_tag_id", ":", "str", "=", "None", ",", "query_tag_id", ":", "str", "=", "None", ")", "->", "TagData", ":", "\n", "        ", "\"\"\"Performs a selection given the arguments.\n\n        Args:\n            selection_config:\n                The configuration of the selection.\n            preselected_tag_id:\n                The tag defining the already chosen samples (e.g. already labelled ones), default: None.\n            query_tag_id:\n                The tag defining where to sample from, default: None resolves to the initial-tag.\n\n        Returns:\n            The newly created tag of the selection.\n\n        Raises:\n            ApiException\n            ValueError\n            RuntimeError\n\n        \"\"\"", "\n", "\n", "# make sure the tag name does not exist yet", "\n", "tags", "=", "self", ".", "get_all_tags", "(", ")", "\n", "if", "selection_config", ".", "name", "in", "[", "tag", ".", "name", "for", "tag", "in", "tags", "]", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'There already exists a tag with tag_name {selection_config.name}.'", ")", "\n", "", "if", "len", "(", "tags", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'There exists no initial-tag for this dataset.'", ")", "\n", "\n", "# make sure we have an embedding id", "\n", "", "try", ":", "\n", "            ", "self", ".", "embedding_id", "\n", "", "except", "AttributeError", ":", "\n", "            ", "self", ".", "set_embedding_id_to_latest", "(", ")", "\n", "\n", "# trigger the selection", "\n", "", "payload", "=", "self", ".", "_create_selection_create_request", "(", "selection_config", ",", "preselected_tag_id", ",", "query_tag_id", ")", "\n", "payload", ".", "row_count", "=", "self", ".", "get_all_tags", "(", ")", "[", "0", "]", ".", "tot_size", "\n", "response", "=", "self", ".", "_selection_api", ".", "trigger_sampling_by_id", "(", "payload", ",", "self", ".", "dataset_id", ",", "self", ".", "embedding_id", ")", "\n", "job_id", "=", "response", ".", "job_id", "\n", "\n", "# poll the job status till the job is not running anymore", "\n", "exception_counter", "=", "0", "# TODO; remove after solving https://github.com/lightly-ai/lightly-core/issues/156", "\n", "job_status_data", "=", "None", "\n", "\n", "wait_time_till_next_poll", "=", "getattr", "(", "self", ",", "\"wait_time_till_next_poll\"", ",", "1", ")", "\n", "while", "job_status_data", "is", "None", "or", "job_status_data", ".", "status", "==", "JobState", ".", "RUNNING", "or", "job_status_data", ".", "status", "==", "JobState", ".", "WAITING", "or", "job_status_data", ".", "status", "==", "JobState", ".", "UNKNOWN", ":", "\n", "# sleep before polling again", "\n", "            ", "time", ".", "sleep", "(", "wait_time_till_next_poll", ")", "\n", "# try to read the sleep time until the next poll from the status data", "\n", "try", ":", "\n", "                ", "job_status_data", ":", "JobStatusData", "=", "self", ".", "_jobs_api", ".", "get_job_status_by_id", "(", "job_id", "=", "job_id", ")", "\n", "wait_time_till_next_poll", "=", "job_status_data", ".", "wait_time_till_next_poll", "\n", "", "except", "Exception", "as", "err", ":", "\n", "                ", "exception_counter", "+=", "1", "\n", "if", "exception_counter", "==", "20", ":", "\n", "                    ", "print", "(", "f\"Selection job with job_id {job_id} could not be started because of error: {err}\"", ")", "\n", "raise", "err", "\n", "\n", "", "", "", "if", "job_status_data", ".", "status", "==", "JobState", ".", "FAILED", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Selection job with job_id {job_id} failed with error {job_status_data.error}\"", ")", "\n", "\n", "# get the new tag from the job status", "\n", "", "new_tag_id", "=", "job_status_data", ".", "result", ".", "data", "\n", "if", "new_tag_id", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"TagId returned by job with job_id {job_id} is None.\"", ")", "\n", "", "new_tag_data", "=", "self", ".", "_tags_api", ".", "get_tag_by_tag_id", "(", "self", ".", "dataset_id", ",", "tag_id", "=", "new_tag_id", ")", "\n", "\n", "return", "new_tag_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin._create_selection_create_request": [[139, 163], ["lightly.openapi_generated.swagger_client.models.sampling_config.SamplingConfig", "lightly.openapi_generated.swagger_client.models.sampling_create_request.SamplingCreateRequest", "lightly.openapi_generated.swagger_client.models.sampling_config_stopping_condition.SamplingConfigStoppingCondition"], "methods", ["None"], ["", "def", "_create_selection_create_request", "(", "self", ",", "selection_config", ":", "SelectionConfig", ",", "preselected_tag_id", ":", "str", ",", "query_tag_id", ":", "str", "\n", ")", "->", "SamplingCreateRequest", ":", "\n", "        ", "\"\"\"Creates a SamplingCreateRequest\n\n        First, it checks how many samples are already labeled by\n            getting the number of samples in the preselected_tag_id.\n        Then the stopping_condition.n_samples\n            is set to be the number of already labeled samples + the selection_config.batch_size.\n        Last the SamplingCreateRequest is created with the necessary nested class instances.\n\n        \"\"\"", "\n", "\n", "sampling_config", "=", "SamplingConfig", "(", "\n", "stopping_condition", "=", "SamplingConfigStoppingCondition", "(", "\n", "n_samples", "=", "selection_config", ".", "n_samples", ",", "\n", "min_distance", "=", "selection_config", ".", "min_distance", "\n", ")", "\n", ")", "\n", "sampling_create_request", "=", "SamplingCreateRequest", "(", "new_tag_name", "=", "selection_config", ".", "name", ",", "\n", "method", "=", "selection_config", ".", "method", ",", "\n", "config", "=", "sampling_config", ",", "\n", "preselected_tag_id", "=", "preselected_tag_id", ",", "\n", "query_tag_id", "=", "query_tag_id", ")", "\n", "return", "sampling_create_request", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._parse_active_learning_scores": [[18, 28], ["isinstance", "list", "scores.astype.astype"], "function", ["None"], ["def", "_parse_active_learning_scores", "(", "scores", ":", "Union", "[", "np", ".", "ndarray", ",", "List", "]", ")", ":", "\n", "    ", "\"\"\"Makes list/np.array of active learning scores serializable.\n\n    \"\"\"", "\n", "# the api only accepts float64s", "\n", "if", "isinstance", "(", "scores", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "scores", "=", "scores", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "# convert to list and return", "\n", "", "return", "list", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin._get_csv_reader_from_read_url": [[24, 34], ["urllib.request.Request", "urllib.request.urlopen", "io.StringIO", "csv.reader", "response.read().decode", "response.read"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode"], ["    ", "def", "_get_csv_reader_from_read_url", "(", "self", ",", "read_url", ":", "str", ")", ":", "\n", "        ", "\"\"\"Makes a get request to the signed read url and returns the .csv file.\n\n        \"\"\"", "\n", "request", "=", "Request", "(", "read_url", ",", "method", "=", "'GET'", ")", "\n", "with", "urlopen", "(", "request", ")", "as", "response", ":", "\n", "            ", "buffer", "=", "io", ".", "StringIO", "(", "response", ".", "read", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "buffer", ")", "\n", "\n", "", "return", "reader", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.set_embedding_id_to_latest": [[35, 44], ["api_workflow_upload_embeddings._UploadEmbeddingsMixin._embeddings_api.get_embeddings_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.get_embeddings_by_dataset_id"], ["", "def", "set_embedding_id_to_latest", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sets the self.embedding_id to the one of the latest on the server.\n\n        \"\"\"", "\n", "embeddings_on_server", ":", "List", "[", "DatasetEmbeddingData", "]", "=", "self", ".", "_embeddings_api", ".", "get_embeddings_by_dataset_id", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", "\n", ")", "\n", "self", ".", "embedding_id", "=", "embeddings_on_server", "[", "-", "1", "]", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.get_embedding_by_name": [[45, 87], ["api_workflow_upload_embeddings._UploadEmbeddingsMixin._embeddings_api.get_embeddings_by_dataset_id", "next", "next", "api_workflow_upload_embeddings.EmbeddingDoesNotExistError", "next.name.startswith"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.get_embeddings_by_dataset_id"], ["", "def", "get_embedding_by_name", "(", "\n", "self", ",", "name", ":", "str", ",", "ignore_suffix", ":", "bool", "=", "True", "\n", ")", "->", "DatasetEmbeddingData", ":", "\n", "        ", "\"\"\"Gets an embedding form the server by name.\n\n        Args:\n            name:\n                The name of the embedding to get.\n            ignore_suffix:\n                If true, a suffix of the embedding name on the server\n                is ignored.\n\n        Returns:\n            The embedding data.\n\n        Raises:\n            EmbeddingDoesNotExistError:\n                If the name does not match the name of an embedding\n                on the server.\n\n        \"\"\"", "\n", "embeddings_on_server", ":", "List", "[", "DatasetEmbeddingData", "]", "=", "self", ".", "_embeddings_api", ".", "get_embeddings_by_dataset_id", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", "\n", ")", "\n", "try", ":", "\n", "            ", "if", "ignore_suffix", ":", "\n", "                ", "embedding", "=", "next", "(", "\n", "embedding", "for", "embedding", "in", "embeddings_on_server", "if", "\n", "embedding", ".", "name", ".", "startswith", "(", "name", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "embedding", "=", "next", "(", "\n", "embedding", "for", "embedding", "in", "embeddings_on_server", "if", "\n", "embedding", ".", "name", "==", "name", "\n", ")", "\n", "", "", "except", "StopIteration", ":", "\n", "            ", "raise", "EmbeddingDoesNotExistError", "(", "\n", "f\"Embedding with the specified name \"", "\n", "f\"does not exist on the server: {name}\"", "\n", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.upload_embeddings": [[88, 153], ["lightly.utils.io.check_embeddings", "api_workflow_upload_embeddings._UploadEmbeddingsMixin._order_csv_by_filenames", "api_workflow_upload_embeddings._UploadEmbeddingsMixin._embeddings_api.get_embeddings_csv_write_url_by_id", "api_workflow_upload_embeddings._UploadEmbeddingsMixin.get_embedding_by_name", "print", "api_workflow_upload_embeddings._UploadEmbeddingsMixin.append_embeddings", "datetime.datetime.datetime.now().strftime", "tempfile.SpooledTemporaryFile", "csv.writer", "csv.writer.writerows", "f.seek", "f.read().encode", "tempfile.SpooledTemporaryFile", "f_bytes.write", "f_bytes.seek", "api_workflow_upload_embeddings._UploadEmbeddingsMixin.upload_file_with_signed_url", "lightly.openapi_generated.swagger_client.Trigger2dEmbeddingJobRequest", "api_workflow_upload_embeddings._UploadEmbeddingsMixin._embeddings_api.trigger2d_embeddings_job", "datetime.datetime.datetime.now", "f.read"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin._order_csv_by_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.get_embeddings_csv_write_url_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.get_embedding_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.append_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.upload_file_with_signed_url", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.trigger2d_embeddings_job"], ["", "def", "upload_embeddings", "(", "self", ",", "path_to_embeddings_csv", ":", "str", ",", "name", ":", "str", ")", ":", "\n", "        ", "\"\"\"Uploads embeddings to the server.\n\n        First checks that the specified embedding name is not on the server. If it is, the upload is aborted.\n        Then creates a new csv with the embeddings in the order specified on the server. Next it uploads it to the server.\n        The received embedding_id is saved as a property of self.\n\n        Args:\n            path_to_embeddings_csv:\n                The path to the .csv containing the embeddings, e.g. \"path/to/embeddings.csv\"\n            name:\n                The name of the embedding. If an embedding with such a name already exists on the server,\n                the upload is aborted.\n\n        \"\"\"", "\n", "check_embeddings", "(", "path_to_embeddings_csv", ",", "remove_additional_columns", "=", "True", ")", "\n", "\n", "# Try to append the embeddings on the server, if they exist", "\n", "try", ":", "\n", "            ", "embedding", "=", "self", ".", "get_embedding_by_name", "(", "name", ",", "ignore_suffix", "=", "True", ")", "\n", "# -> append rows from server", "\n", "print", "(", "'Appending embeddings from server.'", ")", "\n", "self", ".", "append_embeddings", "(", "path_to_embeddings_csv", ",", "embedding", ".", "id", ")", "\n", "now", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d_%Hh%Mm%Ss'", ")", "\n", "name", "=", "f'{name}_{now}'", "\n", "", "except", "EmbeddingDoesNotExistError", ":", "\n", "            ", "pass", "\n", "\n", "# create a new csv with the filenames in the desired order", "\n", "", "rows_csv", "=", "self", ".", "_order_csv_by_filenames", "(", "\n", "path_to_embeddings_csv", "=", "path_to_embeddings_csv", ")", "\n", "\n", "# get the URL to upload the csv to", "\n", "response", ":", "WriteCSVUrlData", "=", "self", ".", "_embeddings_api", ".", "get_embeddings_csv_write_url_by_id", "(", "self", ".", "dataset_id", ",", "name", "=", "name", ")", "\n", "self", ".", "embedding_id", "=", "response", ".", "embedding_id", "\n", "signed_write_url", "=", "response", ".", "signed_write_url", "\n", "\n", "# save the csv rows in a temporary in-memory string file", "\n", "# using a csv writer and then read them as bytes", "\n", "with", "tempfile", ".", "SpooledTemporaryFile", "(", "mode", "=", "\"rw\"", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerows", "(", "rows_csv", ")", "\n", "f", ".", "seek", "(", "0", ")", "\n", "embeddings_csv_as_bytes", "=", "f", ".", "read", "(", ")", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "# write the bytes to a temporary in-memory byte file", "\n", "", "with", "tempfile", ".", "SpooledTemporaryFile", "(", "mode", "=", "'r+b'", ")", "as", "f_bytes", ":", "\n", "            ", "f_bytes", ".", "write", "(", "embeddings_csv_as_bytes", ")", "\n", "f_bytes", ".", "seek", "(", "0", ")", "\n", "self", ".", "upload_file_with_signed_url", "(", "file", "=", "f_bytes", ",", "signed_write_url", "=", "signed_write_url", ")", "\n", "\n", "# trigger the 2d embeddings job", "\n", "", "for", "dimensionality_reduction_method", "in", "[", "\n", "DimensionalityReductionMethod", ".", "PCA", ",", "\n", "DimensionalityReductionMethod", ".", "TSNE", ",", "\n", "DimensionalityReductionMethod", ".", "UMAP", "\n", "]", ":", "\n", "\n", "            ", "body", "=", "Trigger2dEmbeddingJobRequest", "(", "\n", "dimensionality_reduction_method", "=", "dimensionality_reduction_method", ")", "\n", "self", ".", "_embeddings_api", ".", "trigger2d_embeddings_job", "(", "\n", "body", "=", "body", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", "embedding_id", "=", "self", ".", "embedding_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.append_embeddings": [[156, 211], ["api_workflow_upload_embeddings._UploadEmbeddingsMixin._embeddings_api.get_embeddings_csv_read_url_by_id", "api_workflow_upload_embeddings._UploadEmbeddingsMixin._get_csv_reader_from_read_url", "list", "total_rows.extend", "open", "list", "total_rows.append", "list", "open", "csv.writer", "csv.writer.writerows", "csv.reader", "len", "len", "RuntimeError", "filename_to_local_row.pop", "filename_to_local_row.values", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.get_embeddings_csv_read_url_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient._get_csv_reader_from_read_url"], ["", "", "def", "append_embeddings", "(", "self", ",", "\n", "path_to_embeddings_csv", ":", "str", ",", "\n", "embedding_id", ":", "str", ")", ":", "\n", "        ", "\"\"\"Concatenates the embeddings from the server to the local ones.\n\n        Loads the embedding csv file belonging to the embedding_id, and\n        appends all of its rows to the local embeddings file located at\n        'path_to_embeddings_csv'.\n\n        Args:\n            path_to_embeddings_csv:\n                The path to the csv containing the local embeddings.\n            embedding_id:\n                Id of the embedding summary of the embeddings on the server.\n\n        Raises:\n            RuntimeError:\n                If the number of columns in the local and the remote\n                embeddings file mismatch.\n        \n        \"\"\"", "\n", "\n", "# read embedding from API", "\n", "embedding_read_url", "=", "self", ".", "_embeddings_api", ".", "get_embeddings_csv_read_url_by_id", "(", "self", ".", "dataset_id", ",", "embedding_id", ")", "\n", "embedding_reader", "=", "self", ".", "_get_csv_reader_from_read_url", "(", "embedding_read_url", ")", "\n", "rows", "=", "list", "(", "embedding_reader", ")", "\n", "header", ",", "online_rows", "=", "rows", "[", "0", "]", ",", "rows", "[", "1", ":", "]", "\n", "\n", "# read local embedding", "\n", "with", "open", "(", "path_to_embeddings_csv", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "local_rows", "=", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "\n", "\n", "if", "len", "(", "local_rows", "[", "0", "]", ")", "!=", "len", "(", "header", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'Column mismatch! Number of columns in local and remote'", "\n", "f' embeddings files must match but are {len(local_rows[0])}'", "\n", "f' and {len(header)} respectively.'", "\n", ")", "\n", "\n", "", "local_rows", "=", "local_rows", "[", "1", ":", "]", "\n", "\n", "# combine online and local embeddings", "\n", "", "total_rows", "=", "[", "header", "]", "\n", "filename_to_local_row", "=", "{", "row", "[", "0", "]", ":", "row", "for", "row", "in", "local_rows", "}", "\n", "for", "row", "in", "online_rows", ":", "\n", "# pick local over online filename if it exists", "\n", "            ", "total_rows", ".", "append", "(", "filename_to_local_row", ".", "pop", "(", "row", "[", "0", "]", ",", "row", ")", ")", "\n", "# add all local rows which were not added yet", "\n", "", "total_rows", ".", "extend", "(", "list", "(", "filename_to_local_row", ".", "values", "(", ")", ")", ")", "\n", "\n", "# save embeddings again", "\n", "with", "open", "(", "path_to_embeddings_csv", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerows", "(", "total_rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin._order_csv_by_filenames": [[213, 250], ["open", "csv.reader", "list", "header_row.index", "api_workflow_upload_embeddings._UploadEmbeddingsMixin.get_filenames", "lightly.utils.io.check_filenames", "api_workflow_upload_embeddings._UploadEmbeddingsMixin._order_list_by_filenames", "len", "len", "ValueError", "set", "set", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient._order_list_by_filenames"], ["", "", "def", "_order_csv_by_filenames", "(", "self", ",", "path_to_embeddings_csv", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Orders the rows in a csv according to the order specified on the server and saves it as a new file.\n\n        Args:\n            path_to_embeddings_csv:\n                the path to the csv to order\n\n        Returns:\n            the filepath to the new csv\n\n        \"\"\"", "\n", "with", "open", "(", "path_to_embeddings_csv", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "csv", ".", "reader", "(", "f", ")", "\n", "\n", "rows", "=", "list", "(", "data", ")", "\n", "header_row", "=", "rows", "[", "0", "]", "\n", "rows_without_header", "=", "rows", "[", "1", ":", "]", "\n", "index_filenames", "=", "header_row", ".", "index", "(", "'filenames'", ")", "\n", "filenames", "=", "[", "row", "[", "index_filenames", "]", "for", "row", "in", "rows_without_header", "]", "\n", "\n", "filenames_on_server", "=", "self", ".", "get_filenames", "(", ")", "\n", "\n", "if", "len", "(", "filenames", ")", "!=", "len", "(", "filenames_on_server", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f'There are {len(filenames)} rows in the embedding file, but '", "\n", "f'{len(filenames_on_server)} filenames/samples on the server.'", ")", "\n", "", "if", "set", "(", "filenames", ")", "!=", "set", "(", "filenames_on_server", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f'The filenames in the embedding file and '", "\n", "f'the filenames on the server do not align'", ")", "\n", "", "check_filenames", "(", "filenames", ")", "\n", "\n", "rows_without_header_ordered", "=", "self", ".", "_order_list_by_filenames", "(", "filenames", ",", "rows_without_header", ")", "\n", "\n", "rows_csv", "=", "[", "header_row", "]", "\n", "rows_csv", "+=", "rows_without_header_ordered", "\n", "\n", "", "return", "rows_csv", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin._download_raw_files": [[14, 52], ["download_function", "int", "dict", "download_function", "samples.extend", "time.time"], "methods", ["None"], ["    ", "def", "_download_raw_files", "(", "\n", "self", ",", "\n", "download_function", ":", "Union", "[", "\n", "\"DatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id\"", ",", "\n", "\"DatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id\"", ",", "\n", "\"DatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id\"", "\n", "]", ",", "\n", "from_", ":", "int", "=", "0", ",", "\n", "to", ":", "int", "=", "None", ",", "\n", "relevant_filenames_file_name", ":", "str", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "to", "is", "None", ":", "\n", "            ", "to", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "", "relevant_filenames_kwargs", "=", "{", "\n", "\"relevant_filenames_file_name\"", ":", "relevant_filenames_file_name", "\n", "}", "if", "relevant_filenames_file_name", "else", "dict", "(", ")", "\n", "\n", "response", ":", "DatasourceRawSamplesData", "=", "download_function", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", "_from", "=", "from_", ",", "\n", "to", "=", "to", ",", "\n", "**", "relevant_filenames_kwargs", ",", "\n", "**", "kwargs", "\n", ")", "\n", "cursor", "=", "response", ".", "cursor", "\n", "samples", "=", "response", ".", "data", "\n", "while", "response", ".", "has_more", ":", "\n", "            ", "response", ":", "DatasourceRawSamplesData", "=", "download_function", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", "cursor", "=", "cursor", ",", "\n", "**", "relevant_filenames_kwargs", ",", "\n", "**", "kwargs", "\n", ")", "\n", "cursor", "=", "response", ".", "cursor", "\n", "samples", ".", "extend", "(", "response", ".", "data", ")", "\n", "", "samples", "=", "[", "(", "s", ".", "file_name", ",", "s", ".", "read_url", ")", "for", "s", "in", "samples", "]", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_samples": [[53, 83], ["api_workflow_datasources._DatasourcesMixin._download_raw_files"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin._download_raw_files"], ["", "def", "download_raw_samples", "(", "\n", "self", ",", "\n", "from_", ":", "int", "=", "0", ",", "\n", "to", ":", "int", "=", "None", ",", "\n", "relevant_filenames_file_name", ":", "str", "=", "None", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "        ", "\"\"\"Downloads all filenames and read urls from the datasource between `from_` and `to`.\n\n        Samples which have timestamp == `from_` or timestamp == `to` will also be included.\n        \n        Args:\n            from_: \n                Unix timestamp from which on samples are downloaded.\n            to: \n                Unix timestamp up to and including which samples are downloaded.\n            relevant_filenames_file_name:\n                The path to the relevant filenames text file in the cloud bucket.\n                The path is relative to the datasource root.\n        \n        Returns:\n           A list of (filename, url) tuples, where each tuple represents a sample\n\n        \"\"\"", "\n", "samples", "=", "self", ".", "_download_raw_files", "(", "\n", "self", ".", "_datasources_api", ".", "get_list_of_raw_samples_from_datasource_by_dataset_id", ",", "\n", "from_", ",", "\n", "to", ",", "\n", "relevant_filenames_file_name", "\n", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_predictions": [[84, 118], ["api_workflow_datasources._DatasourcesMixin._download_raw_files"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin._download_raw_files"], ["", "def", "download_raw_predictions", "(", "\n", "self", ",", "\n", "task_name", ":", "str", ",", "\n", "from_", ":", "int", "=", "0", ",", "\n", "to", ":", "int", "=", "None", ",", "\n", "relevant_filenames_file_name", ":", "str", "=", "None", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "        ", "\"\"\"Downloads all prediction filenames and read urls from the datasource between `from_` and `to`.\n\n        Samples which have timestamp == `from_` or timestamp == `to` will also be included.\n\n        Args:\n            task_name:\n                Name of the prediction task.\n            from_:\n                Unix timestamp from which on samples are downloaded.\n            to:\n                Unix timestamp up to and including which samples are downloaded.\n            relevant_filenames_file_name:\n                The path to the relevant filenames text file in the cloud bucket.\n                The path is relative to the datasource root.\n\n        Returns:\n           A list of (filename, url) tuples, where each tuple represents a sample\n\n        \"\"\"", "\n", "samples", "=", "self", ".", "_download_raw_files", "(", "\n", "self", ".", "_datasources_api", ".", "get_list_of_raw_samples_predictions_from_datasource_by_dataset_id", ",", "\n", "from_", ",", "\n", "to", ",", "\n", "relevant_filenames_file_name", ",", "\n", "task_name", "=", "task_name", "\n", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_metadata": [[119, 149], ["api_workflow_datasources._DatasourcesMixin._download_raw_files"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin._download_raw_files"], ["", "def", "download_raw_metadata", "(", "\n", "self", ",", "\n", "from_", ":", "int", "=", "0", ",", "\n", "to", ":", "int", "=", "None", ",", "\n", "relevant_filenames_file_name", ":", "str", "=", "None", "\n", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "        ", "\"\"\"Downloads all metadata filenames and read urls from the datasource between `from_` and `to`.\n\n        Samples which have timestamp == `from_` or timestamp == `to` will also be included.\n\n        Args:\n            from_:\n                Unix timestamp from which on samples are downloaded.\n            to:\n                Unix timestamp up to and including which samples are downloaded.\n            relevant_filenames_file_name:\n                The path to the relevant filenames text file in the cloud bucket.\n                The path is relative to the datasource root.\n\n        Returns:\n           A list of (filename, url) tuples, where each tuple represents a sample\n\n        \"\"\"", "\n", "samples", "=", "self", ".", "_download_raw_files", "(", "\n", "self", ".", "_datasources_api", ".", "get_list_of_raw_samples_metadata_from_datasource_by_dataset_id", ",", "\n", "from_", ",", "\n", "to", ",", "\n", "relevant_filenames_file_name", "\n", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_new_raw_samples": [[150, 173], ["api_workflow_datasources._DatasourcesMixin.get_processed_until_timestamp", "int", "api_workflow_datasources._DatasourcesMixin.download_raw_samples", "api_workflow_datasources._DatasourcesMixin.update_processed_until_timestamp", "time.time"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_processed_until_timestamp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_samples", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.update_processed_until_timestamp"], ["", "def", "download_new_raw_samples", "(", "self", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "        ", "\"\"\"Downloads filenames and read urls of unprocessed samples from the datasource.\n\n        All samples after the timestamp of `ApiWorkflowClient.get_processed_until_timestamp()` are \n        fetched. After downloading the samples the timestamp is updated to the current time.\n        This function can be repeatedly called to retrieve new samples from the datasource.\n        \n        Returns:\n            A list of (filename, url) tuples, where each tuple represents a sample\n\n        \"\"\"", "\n", "from_", "=", "self", ".", "get_processed_until_timestamp", "(", ")", "\n", "\n", "if", "from_", "!=", "0", ":", "\n", "# We already processed samples at some point.", "\n", "# Add 1 because the samples with timestamp == from_", "\n", "# have already been processed", "\n", "            ", "from_", "+=", "1", "\n", "\n", "", "to", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "data", "=", "self", ".", "download_raw_samples", "(", "from_", "=", "from_", ",", "to", "=", "to", ")", "\n", "self", ".", "update_processed_until_timestamp", "(", "timestamp", "=", "to", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_processed_until_timestamp": [[174, 187], ["api_workflow_datasources._DatasourcesMixin._datasources_api.get_datasource_processed_until_timestamp_by_dataset_id", "int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id"], ["", "def", "get_processed_until_timestamp", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Returns the timestamp until which samples have been processed.\n        \n        Returns:\n            Unix timestamp of last processed sample\n        \"\"\"", "\n", "response", ":", "DatasourceProcessedUntilTimestampResponse", "=", "(", "\n", "self", ".", "_datasources_api", ".", "get_datasource_processed_until_timestamp_by_dataset_id", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", "\n", ")", "\n", ")", "\n", "timestamp", "=", "int", "(", "response", ".", "processed_until_timestamp", ")", "\n", "return", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.update_processed_until_timestamp": [[188, 200], ["lightly.openapi_generated.swagger_client.models.datasource_processed_until_timestamp_request.DatasourceProcessedUntilTimestampRequest", "api_workflow_datasources._DatasourcesMixin._datasources_api.update_datasource_processed_until_timestamp_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id"], ["", "def", "update_processed_until_timestamp", "(", "self", ",", "timestamp", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"Sets the timestamp until which samples have been processed.\n        \n        Args:\n            timestamp: \n                Unix timestamp of last processed sample\n        \"\"\"", "\n", "body", "=", "DatasourceProcessedUntilTimestampRequest", "(", "\n", "processed_until_timestamp", "=", "timestamp", "\n", ")", "\n", "self", ".", "_datasources_api", ".", "update_datasource_processed_until_timestamp_by_dataset_id", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "body", "=", "body", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_datasource": [[202, 214], ["api_workflow_datasources._DatasourcesMixin._datasources_api.get_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_datasource_by_dataset_id"], ["", "def", "get_datasource", "(", "self", ")", "->", "DatasourceConfig", ":", "\n", "        ", "\"\"\"Calls the api to return the datasource of the current dataset.\n\n        Returns:\n            Datasource data of the datasource of the current dataset.\n\n        Raises:\n            ApiException if no datasource was configured.\n\n        \"\"\"", "\n", "return", "self", ".", "_datasources_api", ".", "get_datasource_by_dataset_id", "(", "\n", "self", ".", "dataset_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_azure_config": [[216, 258], ["api_workflow_datasources._DatasourcesMixin._datasources_api.update_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_by_dataset_id"], ["", "def", "set_azure_config", "(", "\n", "self", ",", "\n", "container_name", ":", "str", ",", "\n", "account_name", ":", "str", ",", "\n", "sas_token", ":", "str", ",", "\n", "thumbnail_suffix", ":", "Optional", "[", "str", "]", "=", "\".lightly/thumbnails/[filename]_thumb.[extension]\"", ",", "\n", "purpose", ":", "str", "=", "DatasourcePurpose", ".", "INPUT_OUTPUT", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Sets the Azure configuration for the datasource of the current dataset.\n        \n        Find a detailed explanation on how to setup Lightly with \n        Azure Blob Storage in our docs: https://docs.lightly.ai/getting_started/dataset_creation/dataset_creation_azure_storage.html#\n\n        Args:\n            container_name:\n                Container name of the dataset, for example: \"my-container/path/to/my/data\".\n            account_name:\n                Azure account name.\n            sas_token:\n                Secure Access Signature token.\n            thumbnail_suffix:\n                Where to save thumbnails of the images in the dataset, for\n                example \".lightly/thumbnails/[filename]_thumb.[extension]\". \n                Set to None to disable thumbnails and use the full images from the \n                datasource instead.\n            purpose:\n                Datasource purpose, determines if datasource is read only (INPUT)\n                or can be written to as well (LIGHTLY, INPUT_OUTPUT).\n                The latter is required when Lightly extracts frames from input videos.\n\n        \"\"\"", "\n", "#\u00a0TODO: Use DatasourceConfigAzure once we switch/update the api generator.", "\n", "self", ".", "_datasources_api", ".", "update_datasource_by_dataset_id", "(", "\n", "body", "=", "{", "\n", "'type'", ":", "'AZURE'", ",", "\n", "'fullPath'", ":", "container_name", ",", "\n", "'thumbSuffix'", ":", "thumbnail_suffix", ",", "\n", "'accountName'", ":", "account_name", ",", "\n", "'accountKey'", ":", "sas_token", ",", "\n", "'purpose'", ":", "purpose", ",", "\n", "}", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_gcs_config": [[260, 304], ["api_workflow_datasources._DatasourcesMixin._datasources_api.update_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_by_dataset_id"], ["", "def", "set_gcs_config", "(", "\n", "self", ",", "\n", "resource_path", ":", "str", ",", "\n", "project_id", ":", "str", ",", "\n", "credentials", ":", "str", ",", "\n", "thumbnail_suffix", ":", "Optional", "[", "str", "]", "=", "\".lightly/thumbnails/[filename]_thumb.[extension]\"", ",", "\n", "purpose", ":", "str", "=", "DatasourcePurpose", ".", "INPUT_OUTPUT", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Sets the Google Cloud Storage configuration for the datasource of the\n        current dataset.\n\n        Find a detailed explanation on how to setup Lightly with \n        Google Cloud Storage in our docs: https://docs.lightly.ai/getting_started/dataset_creation/dataset_creation_gcloud_bucket.html\n        \n        Args:\n            resource_path:\n                GCS url of your dataset, for example: \"gs://my_bucket/path/to/my/data\"\n            project_id:\n                GCS project id.\n            credentials:\n                Content of the credentials JSON file stringified which you \n                download from Google Cloud Platform.\n            thumbnail_suffix:\n                Where to save thumbnails of the images in the dataset, for\n                example \".lightly/thumbnails/[filename]_thumb.[extension]\". \n                Set to None to disable thumbnails and use the full images from the \n                datasource instead.\n            purpose:\n                Datasource purpose, determines if datasource is read only (INPUT)\n                or can be written to as well (LIGHTLY, INPUT_OUTPUT).\n                The latter is required when Lightly extracts frames from input videos.\n\n        \"\"\"", "\n", "#\u00a0TODO: Use DatasourceConfigGCS once we switch/update the api generator.", "\n", "self", ".", "_datasources_api", ".", "update_datasource_by_dataset_id", "(", "\n", "body", "=", "{", "\n", "'type'", ":", "'GCS'", ",", "\n", "'fullPath'", ":", "resource_path", ",", "\n", "'thumbSuffix'", ":", "thumbnail_suffix", ",", "\n", "'gcsProjectId'", ":", "project_id", ",", "\n", "'gcsCredentials'", ":", "credentials", ",", "\n", "'purpose'", ":", "purpose", ",", "\n", "}", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_local_config": [[306, 334], ["api_workflow_datasources._DatasourcesMixin._datasources_api.update_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_by_dataset_id"], ["", "def", "set_local_config", "(", "\n", "self", ",", "\n", "resource_path", ":", "str", ",", "\n", "thumbnail_suffix", ":", "Optional", "[", "str", "]", "=", "\".lightly/thumbnails/[filename]_thumb.[extension]\"", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Sets the local configuration for the datasource of the current dataset.\n\n        Find a detailed explanation on how to setup Lightly with a local file\n        server in our docs: https://docs.lightly.ai/getting_started/dataset_creation/dataset_creation_local_server.html\n        \n        Args:\n            resource_path:\n                Url to your local file server, for example: \"http://localhost:1234/path/to/my/data\".\n            thumbnail_suffix:\n                Where to save thumbnails of the images in the dataset, for\n                example \".lightly/thumbnails/[filename]_thumb.[extension]\". \n                Set to None to disable thumbnails and use the full images from the \n                datasource instead.\n        \"\"\"", "\n", "#\u00a0TODO: Use DatasourceConfigLocal once we switch/update the api generator.", "\n", "self", ".", "_datasources_api", ".", "update_datasource_by_dataset_id", "(", "\n", "body", "=", "{", "\n", "'type'", ":", "'LOCAL'", ",", "\n", "'fullPath'", ":", "resource_path", ",", "\n", "'thumbSuffix'", ":", "thumbnail_suffix", ",", "\n", "'purpose'", ":", "DatasourcePurpose", ".", "INPUT_OUTPUT", ",", "\n", "}", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_s3_config": [[336, 379], ["api_workflow_datasources._DatasourcesMixin._datasources_api.update_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_by_dataset_id"], ["", "def", "set_s3_config", "(", "\n", "self", ",", "\n", "resource_path", ":", "str", ",", "\n", "region", ":", "str", ",", "\n", "access_key", ":", "str", ",", "\n", "secret_access_key", ":", "str", ",", "\n", "thumbnail_suffix", ":", "Optional", "[", "str", "]", "=", "\".lightly/thumbnails/[filename]_thumb.[extension]\"", ",", "\n", "purpose", ":", "str", "=", "DatasourcePurpose", ".", "INPUT_OUTPUT", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Sets the S3 configuration for the datasource of the current dataset.\n        \n        Args:\n            resource_path:\n                S3 url of your dataset, for example \"s3://my_bucket/path/to/my/data\".\n            region:\n                S3 region where the dataset bucket is located, for example \"eu-central-1\".\n            access_key:\n                S3 access key.\n            secret_access_key:\n                Secret for the S3 access key.\n            thumbnail_suffix:\n                Where to save thumbnails of the images in the dataset, for\n                example \".lightly/thumbnails/[filename]_thumb.[extension]\". \n                Set to None to disable thumbnails and use the full images from the \n                datasource instead.\n            purpose:\n                Datasource purpose, determines if datasource is read only (INPUT)\n                or can be written to as well (LIGHTLY, INPUT_OUTPUT).\n                The latter is required when Lightly extracts frames from input videos.\n\n        \"\"\"", "\n", "#\u00a0TODO: Use DatasourceConfigS3 once we switch/update the api generator.", "\n", "self", ".", "_datasources_api", ".", "update_datasource_by_dataset_id", "(", "\n", "body", "=", "{", "\n", "'type'", ":", "'S3'", ",", "\n", "'fullPath'", ":", "resource_path", ",", "\n", "'thumbSuffix'", ":", "thumbnail_suffix", ",", "\n", "'s3Region'", ":", "region", ",", "\n", "'s3AccessKeyId'", ":", "access_key", ",", "\n", "'s3SecretAccessKey'", ":", "secret_access_key", ",", "\n", "'purpose'", ":", "purpose", ",", "\n", "}", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_s3_delegated_access_config": [[381, 424], ["api_workflow_datasources._DatasourcesMixin._datasources_api.update_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_by_dataset_id"], ["", "def", "set_s3_delegated_access_config", "(", "\n", "self", ",", "\n", "resource_path", ":", "str", ",", "\n", "region", ":", "str", ",", "\n", "role_arn", ":", "str", ",", "\n", "external_id", ":", "str", ",", "\n", "thumbnail_suffix", ":", "Optional", "[", "str", "]", "=", "\".lightly/thumbnails/[filename]_thumb.[extension]\"", ",", "\n", "purpose", ":", "str", "=", "DatasourcePurpose", ".", "INPUT_OUTPUT", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Sets the S3 configuration for the datasource of the current dataset.\n        \n        Args:\n            resource_path:\n                S3 url of your dataset, for example \"s3://my_bucket/path/to/my/data\".\n            region:\n                S3 region where the dataset bucket is located, for example \"eu-central-1\".\n            role_arn:\n                Unique ARN identifier of the role.\n            external_id:\n                External ID of the role.\n            thumbnail_suffix:\n                Where to save thumbnails of the images in the dataset, for\n                example \".lightly/thumbnails/[filename]_thumb.[extension]\". \n                Set to None to disable thumbnails and use the full images from the \n                datasource instead.\n            purpose:\n                Datasource purpose, determines if datasource is read only (INPUT)\n                or can be written to as well (LIGHTLY, INPUT_OUTPUT).\n                The latter is required when Lightly extracts frames from input videos.\n\n        \"\"\"", "\n", "#\u00a0TODO: Use DatasourceConfigS3 once we switch/update the api generator.", "\n", "self", ".", "_datasources_api", ".", "update_datasource_by_dataset_id", "(", "\n", "body", "=", "{", "\n", "'type'", ":", "'S3DelegatedAccess'", ",", "\n", "'fullPath'", ":", "resource_path", ",", "\n", "'thumbSuffix'", ":", "thumbnail_suffix", ",", "\n", "'s3Region'", ":", "region", ",", "\n", "'s3ARN'", ":", "role_arn", ",", "\n", "'s3ExternalId'", ":", "external_id", ",", "\n", "'purpose'", ":", "purpose", ",", "\n", "}", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_prediction_read_url": [[427, 444], ["api_workflow_datasources._DatasourcesMixin._datasources_api.get_prediction_file_read_url_from_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id"], ["", "def", "get_prediction_read_url", "(", "\n", "self", ",", "\n", "filename", ":", "str", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Returns a read-url for .lightly/predictions/{filename}.\n    \n        Args:\n            filename:\n                Filename for which to get the read-url.\n\n        Returns the read-url. If the file does not exist, a read-url is returned\n        anyways.\n        \n        \"\"\"", "\n", "return", "self", ".", "_datasources_api", ".", "get_prediction_file_read_url_from_datasource_by_dataset_id", "(", "\n", "self", ".", "dataset_id", ",", "\n", "filename", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_metadata_read_url": [[446, 463], ["api_workflow_datasources._DatasourcesMixin._datasources_api.get_metadata_file_read_url_from_datasource_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.datasources_api.DatasourcesApi.get_metadata_file_read_url_from_datasource_by_dataset_id"], ["", "def", "get_metadata_read_url", "(", "\n", "self", ",", "\n", "filename", ":", "str", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Returns a read-url for .lightly/metadata/{filename}.\n    \n        Args:\n            filename:\n                Filename for which to get the read-url.\n\n        Returns the read-url. If the file does not exist, a read-url is returned\n        anyways.\n        \n        \"\"\"", "\n", "return", "self", ".", "_datasources_api", ".", "get_metadata_file_read_url_from_datasource_by_dataset_id", "(", "\n", "self", ".", "dataset_id", ",", "\n", "filename", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.dataset_type": [[11, 18], ["api_workflow_datasets._DatasetsMixin._get_current_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin._get_current_dataset"], ["    ", "@", "property", "\n", "def", "dataset_type", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"Returns the dataset type of the current dataset.\n        \n        \"\"\"", "\n", "dataset", "=", "self", ".", "_get_current_dataset", "(", ")", "\n", "return", "dataset", ".", "type", "#\u00a0type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin._get_current_dataset": [[19, 24], ["api_workflow_datasets._DatasetsMixin.get_dataset_by_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_dataset_by_id"], ["", "def", "_get_current_dataset", "(", "self", ")", "->", "DatasetData", ":", "\n", "        ", "\"\"\"Returns the dataset with id == self.dataset_id.\n        \n        \"\"\"", "\n", "return", "self", ".", "get_dataset_by_id", "(", "self", ".", "dataset_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.dataset_exists": [[25, 32], ["api_workflow_datasets._DatasetsMixin.get_dataset_by_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_dataset_by_id"], ["", "def", "dataset_exists", "(", "self", ",", "dataset_id", ":", "str", ")", ":", "\n", "        ", "\"\"\"Returns True if a dataset with dataset_id exists. \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "get_dataset_by_id", "(", "dataset_id", ")", "\n", "return", "True", "\n", "", "except", "ApiException", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.get_dataset_by_id": [[33, 37], ["api_workflow_datasets._DatasetsMixin._datasets_api.get_dataset_by_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_dataset_by_id"], ["", "", "def", "get_dataset_by_id", "(", "self", ",", "dataset_id", ":", "str", ")", ":", "\n", "        ", "\"\"\"Returns the dataset for the given dataset id. \"\"\"", "\n", "dataset", "=", "self", ".", "_datasets_api", ".", "get_dataset_by_id", "(", "dataset_id", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.get_datasets": [[38, 49], ["api_workflow_datasets._DatasetsMixin._datasets_api.get_datasets"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets"], ["", "def", "get_datasets", "(", "self", ",", "shared", ":", "bool", "=", "False", ")", "->", "List", "[", "DatasetData", "]", ":", "\n", "        ", "\"\"\"Returns all datasets the user owns.\n\n        Args:\n            shared:\n                If True, only returns the datasets which have been shared with\n                the user.\n\n        \"\"\"", "\n", "datasets", "=", "self", ".", "_datasets_api", ".", "get_datasets", "(", "shared", "=", "shared", ")", "\n", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.get_all_datasets": [[50, 56], ["api_workflow_datasets._DatasetsMixin.get_datasets", "api_workflow_datasets._DatasetsMixin.get_datasets", "api_workflow_datasets._DatasetsMixin.extend"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets"], ["", "def", "get_all_datasets", "(", "self", ")", "->", "List", "[", "DatasetData", "]", ":", "\n", "        ", "\"\"\"Returns all datasets the user has access to. \"\"\"", "\n", "owned_datasets", "=", "self", ".", "get_datasets", "(", "shared", "=", "False", ")", "\n", "shared_datasets", "=", "self", ".", "get_datasets", "(", "shared", "=", "True", ")", "\n", "owned_datasets", ".", "extend", "(", "shared_datasets", ")", "\n", "return", "owned_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.set_dataset_id_by_name": [[57, 76], ["api_workflow_datasets._DatasetsMixin.get_all_datasets", "next", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_all_datasets"], ["", "def", "set_dataset_id_by_name", "(", "self", ",", "dataset_name", ":", "str", ")", ":", "\n", "        ", "\"\"\"Sets the dataset id given the name of the dataset\n\n        Args:\n            dataset_name:\n                The name of the dataset for which the dataset_id\n                should be set as attribute\n\n        Raises: ValueError\n\n        \"\"\"", "\n", "current_datasets", ":", "List", "[", "DatasetData", "]", "=", "self", ".", "get_all_datasets", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "dataset_with_specified_name", "=", "next", "(", "dataset", "for", "dataset", "in", "current_datasets", "if", "dataset", ".", "name", "==", "dataset_name", ")", "\n", "self", ".", "_dataset_id", "=", "dataset_with_specified_name", ".", "id", "\n", "", "except", "StopIteration", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"A dataset with the name {dataset_name} does not exist on the \"", "\n", "f\"Lightly Platform. Please create it first.\"", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.create_dataset": [[79, 107], ["api_workflow_datasets._DatasetsMixin.set_dataset_id_by_name", "api_workflow_datasets._DatasetsMixin._create_dataset_without_check_existing"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.set_dataset_id_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin._create_dataset_without_check_existing"], ["", "", "def", "create_dataset", "(", "self", ",", "dataset_name", ":", "str", ",", "dataset_type", ":", "str", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates a dataset on the Lightly Platform..\n\n        If a dataset with that name already exists, instead the dataset_id is set.\n\n        Args:\n            dataset_name:\n                The name of the dataset to be created.\n            dataset_type:\n                The type of the dataset. We recommend to use the API provided constants\n                `DatasetType.IMAGES` and `DatasetType.VIDEOS`.\n\n        Examples:\n            >>> from lightly.api import ApiWorkflowClient\n            >>> from lightly.openapi_generated.swagger_client.models.dataset_type import DatasetType\n            >>>\n            >>> client = lightly.api.ApiWorkflowClient(token=\"YOUR_TOKEN\")\n            >>> client.create_dataset('your-dataset-name', dataset_type=DatasetType.IMAGES)\n            >>>\n            >>> # or to work with videos\n            >>> client.create_dataset('your-dataset-name', dataset_type=DatasetType.VIDEOS)\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "set_dataset_id_by_name", "(", "dataset_name", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "self", ".", "_create_dataset_without_check_existing", "(", "\n", "dataset_name", "=", "dataset_name", ",", "dataset_type", "=", "dataset_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin._create_dataset_without_check_existing": [[108, 124], ["lightly.openapi_generated.swagger_client.models.dataset_create_request.DatasetCreateRequest", "api_workflow_datasets._DatasetsMixin._datasets_api.create_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "", "def", "_create_dataset_without_check_existing", "(", "self", ",", "dataset_name", ":", "str", ",", "dataset_type", ":", "str", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates a dataset on the Lightly Platform.\n\n        No checking if a dataset with such a name already exists is performed.\n\n        Args:\n            dataset_name:\n                The name of the dataset to be created.\n            dataset_type:\n                The type of the dataset. We recommend to use the API provided \n                constants `DatasetType.IMAGES` and `DatasetType.VIDEOS`.\n\n        \"\"\"", "\n", "body", "=", "DatasetCreateRequest", "(", "name", "=", "dataset_name", ",", "type", "=", "dataset_type", ")", "\n", "response", ":", "CreateEntityResponse", "=", "self", ".", "_datasets_api", ".", "create_dataset", "(", "body", "=", "body", ")", "\n", "self", ".", "_dataset_id", "=", "response", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.create_new_dataset_with_unique_name": [[125, 156], ["api_workflow_datasets._DatasetsMixin.get_datasets", "api_workflow_datasets._DatasetsMixin._create_dataset_without_check_existing", "api_workflow_datasets._DatasetsMixin._create_dataset_without_check_existing"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin._create_dataset_without_check_existing", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin._create_dataset_without_check_existing"], ["", "def", "create_new_dataset_with_unique_name", "(", "self", ",", "dataset_basename", ":", "str", ",", "dataset_type", ":", "str", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates a new dataset on the Lightly Platform.\n\n        If a dataset with the specified name already exists,\n        a counter is added to the name to be able to still create it.\n\n        Args:\n            dataset_basename:\n                The name of the dataset to be created.\n            dataset_type:\n                The type of the dataset. We recommend to use the API provided \n                constants `DatasetType.IMAGES` and `DatasetType.VIDEOS`.\n\n        \"\"\"", "\n", "current_datasets", "=", "self", ".", "get_datasets", "(", ")", "\n", "current_datasets_names", "=", "[", "dataset", ".", "name", "for", "dataset", "in", "current_datasets", "]", "\n", "\n", "if", "dataset_basename", "not", "in", "current_datasets_names", ":", "\n", "            ", "self", ".", "_create_dataset_without_check_existing", "(", "\n", "dataset_name", "=", "dataset_basename", ",", "\n", "dataset_type", "=", "dataset_type", "\n", ")", "\n", "", "else", ":", "\n", "            ", "counter", "=", "1", "\n", "dataset_name", "=", "f\"{dataset_basename}_{counter}\"", "\n", "while", "dataset_name", "in", "current_datasets_names", ":", "\n", "                ", "counter", "+=", "1", "\n", "dataset_name", "=", "f\"{dataset_basename}_{counter}\"", "\n", "", "self", ".", "_create_dataset_without_check_existing", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "dataset_type", "=", "dataset_type", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.delete_dataset_by_id": [[158, 168], ["api_workflow_datasets._DatasetsMixin._datasets_api.delete_dataset_by_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.delete_dataset_by_id"], ["", "", "def", "delete_dataset_by_id", "(", "self", ",", "dataset_id", ":", "str", ")", ":", "\n", "        ", "\"\"\"Deletes a dataset on the Lightly Platform.\n\n        Args:\n            dataset_id:\n                The id of the dataset to be deleted.\n\n        \"\"\"", "\n", "self", ".", "_datasets_api", ".", "delete_dataset_by_id", "(", "dataset_id", "=", "dataset_id", ")", "\n", "del", "self", ".", "_dataset_id", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient.__init__": [[76, 112], ["api_workflow_client.ApiWorkflowClient.check_version_compatibility", "lightly.openapi_generated.swagger_client.configuration.Configuration", "lightly.api.utils.getenv", "lightly.openapi_generated.swagger_client.api_client.ApiClient", "lightly.openapi_generated.swagger_client.api.docker_api.DockerApi", "lightly.openapi_generated.swagger_client.api.datasets_api.DatasetsApi", "lightly.openapi_generated.swagger_client.api.datasources_api.DatasourcesApi", "lightly.openapi_generated.swagger_client.api.samplings_api.SamplingsApi", "lightly.openapi_generated.swagger_client.api.jobs_api.JobsApi", "lightly.openapi_generated.swagger_client.api.tags_api.TagsApi", "lightly.openapi_generated.swagger_client.api.embeddings_api.EmbeddingsApi", "lightly.openapi_generated.swagger_client.api.mappings_api.MappingsApi", "lightly.openapi_generated.swagger_client.ScoresApi", "lightly.openapi_generated.swagger_client.api.samples_api.SamplesApi", "lightly.openapi_generated.swagger_client.QuotaApi", "lightly.openapi_generated.swagger_client.MetaDataConfigurationsApi", "lightly.api.utils.getenv", "ValueError", "platform.platform"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient.check_version_compatibility", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["def", "__init__", "(", "self", ",", "token", ":", "str", "=", "None", ",", "dataset_id", ":", "str", "=", "None", ",", "embedding_id", ":", "str", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "check_version_compatibility", "(", ")", "\n", "\n", "configuration", "=", "Configuration", "(", ")", "\n", "configuration", ".", "host", "=", "getenv", "(", "'LIGHTLY_SERVER_LOCATION'", ",", "'https://api.lightly.ai'", ")", "\n", "if", "token", "is", "None", ":", "\n", "            ", "token", "=", "getenv", "(", "'LIGHTLY_TOKEN'", ",", "None", ")", "\n", "if", "token", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Either provide a 'token' argument or export\"", "\n", "f\" a LIGHTLY_TOKEN environment variable\"", ")", "\n", "\n", "", "", "configuration", ".", "api_key", "=", "{", "'token'", ":", "token", "}", "\n", "api_client", "=", "ApiClient", "(", "configuration", "=", "configuration", ")", "\n", "self", ".", "user_agent", "=", "f\"Lightly/{__version__}/python ({platform.platform()})\"", "\n", "self", ".", "api_client", "=", "api_client", "\n", "\n", "self", ".", "token", "=", "token", "\n", "if", "dataset_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "", "if", "embedding_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "embedding_id", "=", "embedding_id", "\n", "\n", "", "self", ".", "_compute_worker_api", "=", "DockerApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_datasets_api", "=", "DatasetsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_datasources_api", "=", "DatasourcesApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_selection_api", "=", "SamplingsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_jobs_api", "=", "JobsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_tags_api", "=", "TagsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_embeddings_api", "=", "EmbeddingsApi", "(", "api_client", "=", "api_client", ")", "\n", "self", ".", "_mappings_api", "=", "MappingsApi", "(", "api_client", "=", "api_client", ")", "\n", "self", ".", "_scores_api", "=", "ScoresApi", "(", "api_client", "=", "api_client", ")", "\n", "self", ".", "_samples_api", "=", "SamplesApi", "(", "api_client", "=", "api_client", ")", "\n", "self", ".", "_quota_api", "=", "QuotaApi", "(", "api_client", "=", "api_client", ")", "\n", "self", ".", "_metadata_configurations_api", "=", "MetaDataConfigurationsApi", "(", "api_client", "=", "api_client", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient.check_version_compatibility": [[113, 117], ["lightly.api.version_checking.get_minimum_compatible_version", "lightly.api.version_checking.version_compare", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_minimum_compatible_version", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare"], ["", "def", "check_version_compatibility", "(", "self", ")", ":", "\n", "        ", "minimum_version", "=", "get_minimum_compatible_version", "(", ")", "\n", "if", "version_compare", "(", "__version__", ",", "minimum_version", ")", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Incompatible Version of lightly pip package. \"", "\n", "f\"Please upgrade to at least version {minimum_version} \"", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient.dataset_id": [[138, 155], ["api_workflow_client.ApiWorkflowClient.dataset_exists", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.dataset_exists"], ["", "", "@", "dataset_id", ".", "setter", "\n", "def", "dataset_id", "(", "self", ",", "dataset_id", ":", "str", ")", ":", "\n", "        ", "\"\"\"Sets the current dataset id for the client.\n        \n        Args:\n            dataset_id:\n                The new dataset id.\n\n        Raises:\n            ValueError if the dataset id does not exist.\n        \"\"\"", "\n", "if", "not", "self", ".", "dataset_exists", "(", "dataset_id", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"A dataset with the id {dataset_id} does not exist on the web\"", "\n", "f\"platform.\"", "\n", ")", "\n", "", "self", ".", "_dataset_id", "=", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient._order_list_by_filenames": [[157, 182], ["api_workflow_client.ApiWorkflowClient.get_filenames", "lightly.utils.reordering.sort_items_by_keys"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.reordering.sort_items_by_keys"], ["", "def", "_order_list_by_filenames", "(", "\n", "self", ",", "filenames_for_list", ":", "List", "[", "str", "]", ",", "\n", "list_to_order", ":", "List", "[", "object", "]", "\n", ")", "->", "List", "[", "object", "]", ":", "\n", "        ", "\"\"\"Orders a list such that it is in the order of the filenames specified on the server.\n\n        Args:\n            filenames_for_list:\n                The filenames of samples in a specific order\n            list_to_order:\n                Some values belonging to the samples\n\n        Returns:\n            The list reordered.\n            The same reorder applied on the filenames_for_list would put them\n            in the order of the filenames in self.filenames_on_server.\n            every filename in self.filenames_on_server must be in the\n            filenames_for_list.\n\n        \"\"\"", "\n", "filenames_on_server", "=", "self", ".", "get_filenames", "(", ")", "\n", "list_ordered", "=", "sort_items_by_keys", "(", "\n", "filenames_for_list", ",", "list_to_order", ",", "filenames_on_server", "\n", ")", "\n", "return", "list_ordered", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient.get_filenames": [[183, 191], ["api_workflow_client.ApiWorkflowClient._mappings_api.get_sample_mappings_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedMappingsApi.get_sample_mappings_by_dataset_id"], ["", "def", "get_filenames", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Downloads the list of filenames from the server.\n\n        This is an expensive operation, especially for large datasets.\n        \"\"\"", "\n", "filenames_on_server", "=", "self", ".", "_mappings_api", ".", "get_sample_mappings_by_dataset_id", "(", "dataset_id", "=", "self", ".", "dataset_id", ",", "field", "=", "\"fileName\"", ")", "\n", "return", "filenames_on_server", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient.upload_file_with_signed_url": [[192, 223], ["sess.put.raise_for_status", "sess.put", "sess.put"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.raise_for_status"], ["", "def", "upload_file_with_signed_url", "(", "\n", "self", ",", "\n", "file", ":", "IOBase", ",", "\n", "signed_write_url", ":", "str", ",", "\n", "headers", ":", "Optional", "[", "Dict", "]", "=", "None", ",", "\n", "session", ":", "Optional", "[", "requests", ".", "Session", "]", "=", "None", ",", "\n", ")", "->", "Response", ":", "\n", "        ", "\"\"\"Uploads a file to a url via a put request.\n\n        Args:\n            file:\n                The file to upload.\n            signed_write_url:\n                The url to upload the file to. As no authorization is used,\n                the url must be a signed write url.\n            headers:\n                Specific headers for the request.\n            session:\n                Optional requests session used to upload the file.\n\n        Returns:\n            The response of the put request, usually a 200 for the success case.\n\n        \"\"\"", "\n", "sess", "=", "session", "or", "requests", "\n", "if", "headers", "is", "not", "None", ":", "\n", "            ", "response", "=", "sess", ".", "put", "(", "signed_write_url", ",", "data", "=", "file", ",", "headers", "=", "headers", ")", "\n", "", "else", ":", "\n", "            ", "response", "=", "sess", ".", "put", "(", "signed_write_url", ",", "data", "=", "file", ")", "\n", "", "response", ".", "raise_for_status", "(", ")", "\n", "return", "response", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.TimeoutDecorator.__init__": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seconds", ")", ":", "\n", "        ", "self", ".", "seconds", "=", "seconds", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.TimeoutDecorator.handle_timeout_method": [[24, 26], ["None"], "methods", ["None"], ["", "def", "handle_timeout_method", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "LightlyAPITimeoutException", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.TimeoutDecorator.__enter__": [[27, 30], ["signal.signal", "signal.alarm"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGALRM", ",", "self", ".", "handle_timeout_method", ")", "\n", "signal", ".", "alarm", "(", "self", ".", "seconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.TimeoutDecorator.__exit__": [[31, 33], ["signal.alarm"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "signal", ".", "alarm", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.do_version_check": [[35, 49], ["multiprocessing.current_process", "version_checking.TimeoutDecorator", "version_checking.get_versioning_api", "get_versioning_api.get_latest_pip_version", "get_versioning_api.get_minimum_compatible_pip_version", "lightly.utils.version_compare", "version_checking.pretty_print_latest_version"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_versioning_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedVersioningApi.get_latest_pip_version", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedVersioningApi.get_minimum_compatible_pip_version", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.version_compare.version_compare", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.pretty_print_latest_version"], ["", "", "def", "do_version_check", "(", "current_version", ":", "str", ")", ":", "\n", "    ", "if", "current_process", "(", ")", ".", "name", "==", "'MainProcess'", ":", "\n", "        ", "with", "TimeoutDecorator", "(", "1", ")", ":", "\n", "            ", "versioning_api", "=", "get_versioning_api", "(", ")", "\n", "current_version", ":", "str", "=", "versioning_api", ".", "get_latest_pip_version", "(", "\n", "current_version", "=", "current_version", ")", "\n", "latest_version", ":", "str", "=", "versioning_api", ".", "get_minimum_compatible_pip_version", "(", ")", "\n", "\n", "try", ":", "\n", "                ", "if", "version_compare", "(", "current_version", ",", "latest_version", ")", "<", "0", ":", "\n", "# local version is behind latest version", "\n", "                    ", "pretty_print_latest_version", "(", "current_version", ",", "latest_version", ")", "\n", "", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "# error during version compare", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_versioning_api": [[54, 60], ["lightly.openapi_generated.swagger_client.configuration.Configuration", "lightly.api.utils.getenv", "lightly.openapi_generated.swagger_client.api_client.ApiClient", "lightly.openapi_generated.swagger_client.VersioningApi"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["", "", "", "", "def", "get_versioning_api", "(", ")", "->", "VersioningApi", ":", "\n", "    ", "configuration", "=", "Configuration", "(", ")", "\n", "configuration", ".", "host", "=", "getenv", "(", "'LIGHTLY_SERVER_LOCATION'", ",", "'https://api.lightly.ai'", ")", "\n", "api_client", "=", "ApiClient", "(", "configuration", "=", "configuration", ")", "\n", "versioning_api", "=", "VersioningApi", "(", "api_client", ")", "\n", "return", "versioning_api", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_latest_version": [[62, 69], ["version_checking.get_versioning_api", "get_versioning_api.get_latest_pip_version"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_versioning_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedVersioningApi.get_latest_pip_version"], ["", "def", "get_latest_version", "(", "current_version", ":", "str", ")", "->", "Tuple", "[", "None", ",", "str", "]", ":", "\n", "    ", "try", ":", "\n", "        ", "versioning_api", "=", "get_versioning_api", "(", ")", "\n", "version_number", ":", "str", "=", "versioning_api", ".", "get_latest_pip_version", "(", "current_version", "=", "current_version", ")", "\n", "return", "version_number", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_minimum_compatible_version": [[71, 75], ["version_checking.get_versioning_api", "get_versioning_api.get_minimum_compatible_pip_version"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_versioning_api", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedVersioningApi.get_minimum_compatible_pip_version"], ["", "", "def", "get_minimum_compatible_version", "(", ")", ":", "\n", "    ", "versioning_api", "=", "get_versioning_api", "(", ")", "\n", "version_number", ":", "str", "=", "versioning_api", ".", "get_minimum_compatible_pip_version", "(", ")", "\n", "return", "version_number", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.pretty_print_latest_version": [[77, 83], ["warnings.warn", "Warning"], "function", ["None"], ["", "def", "pretty_print_latest_version", "(", "current_version", ",", "latest_version", ",", "width", "=", "70", ")", ":", "\n", "    ", "warning", "=", "f\"You are using lightly version {current_version}. \"", "f\"There is a newer version of the package available. \"", "f\"For compatability reasons, please upgrade your current version: \"", "f\"pip install lightly=={latest_version}\"", "\n", "warnings", ".", "warn", "(", "Warning", "(", "warning", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.download_dataset": [[40, 107], ["api_workflow_download_dataset._DownloadDatasetMixin._datasets_api.get_dataset_by_id", "api_workflow_download_dataset._DownloadDatasetMixin.get_all_tags", "api_workflow_download_dataset._DownloadDatasetMixin._mappings_api.get_sample_mappings_by_dataset_id", "lightly.api.bitmask.BitMask.from_hex().to_indices", "api_workflow_download_dataset._DownloadDatasetMixin.get_filenames", "zip", "ValueError", "next", "print", "tqdm.tqdm", "api_workflow_download_dataset._DownloadDatasetMixin._samples_api.get_sample_image_read_url_by_id", "api_workflow_download_dataset._get_image_from_read_url", "api_workflow_download_dataset._make_dir_and_save_image", "ValueError", "lightly.api.bitmask.BitMask.from_hex", "tqdm.tqdm.update", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_dataset_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedMappingsApi.get_sample_mappings_by_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_indices", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_sample_image_read_url_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._get_image_from_read_url", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._make_dir_and_save_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_hex"], ["    ", "def", "download_dataset", "(", "self", ",", "\n", "output_dir", ":", "str", ",", "\n", "tag_name", ":", "str", "=", "'initial-tag'", ",", "\n", "verbose", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"Downloads images from the web-app and stores them in output_dir.\n\n        Args:\n            output_dir:\n                Where to store the downloaded images.\n            tag_name:\n                Name of the tag which should be downloaded.\n            verbose:\n                Whether or not to show the progress bar.\n\n        Raises:\n            ValueError:\n                If the specified tag does not exist on the dataset.\n            RuntimeError:\n                If the connection to the server failed.\n\n        \"\"\"", "\n", "\n", "# check if images are available", "\n", "dataset", "=", "self", ".", "_datasets_api", ".", "get_dataset_by_id", "(", "self", ".", "dataset_id", ")", "\n", "if", "dataset", ".", "img_type", "!=", "ImageType", ".", "FULL", ":", "\n", "# only thumbnails or metadata available", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Dataset with id {self.dataset_id} has no downloadable images!\"", "\n", ")", "\n", "\n", "# check if tag exists", "\n", "", "available_tags", "=", "self", ".", "get_all_tags", "(", ")", "\n", "try", ":", "\n", "            ", "tag", "=", "next", "(", "tag", "for", "tag", "in", "available_tags", "if", "tag", ".", "name", "==", "tag_name", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Dataset with id {self.dataset_id} has no tag {tag_name}!\"", "\n", ")", "\n", "\n", "# get sample ids", "\n", "", "sample_ids", "=", "self", ".", "_mappings_api", ".", "get_sample_mappings_by_dataset_id", "(", "\n", "self", ".", "dataset_id", ",", "\n", "field", "=", "'_id'", "\n", ")", "\n", "\n", "indices", "=", "BitMask", ".", "from_hex", "(", "tag", ".", "bit_mask_data", ")", ".", "to_indices", "(", ")", "\n", "sample_ids", "=", "[", "sample_ids", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "filenames_on_server", "=", "self", ".", "get_filenames", "(", ")", "\n", "filenames", "=", "[", "filenames_on_server", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "f'Downloading {len(sample_ids)} images:'", ",", "flush", "=", "True", ")", "\n", "pbar", "=", "tqdm", ".", "tqdm", "(", "unit", "=", "'imgs'", ",", "total", "=", "len", "(", "sample_ids", ")", ")", "\n", "\n", "# download images", "\n", "", "for", "sample_id", ",", "filename", "in", "zip", "(", "sample_ids", ",", "filenames", ")", ":", "\n", "            ", "read_url", "=", "self", ".", "_samples_api", ".", "get_sample_image_read_url_by_id", "(", "\n", "self", ".", "dataset_id", ",", "\n", "sample_id", ",", "\n", "type", "=", "\"full\"", ",", "\n", ")", "\n", "\n", "img", "=", "_get_image_from_read_url", "(", "read_url", ")", "\n", "_make_dir_and_save_image", "(", "output_dir", ",", "filename", ",", "img", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "pbar", ".", "update", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_studio_tasks_by_tag_id": [[108, 130], ["api_workflow_download_dataset._DownloadDatasetMixin._tags_api.export_tag_to_label_studio_tasks"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.export_tag_to_label_studio_tasks"], ["", "", "", "def", "export_label_studio_tasks_by_tag_id", "(", "\n", "self", ",", "\n", "tag_id", ":", "str", ",", "\n", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "\"\"\"Exports samples in a format compatible with Label Studio.\n\n        The format is documented here:\n        https://labelstud.io/guide/tasks.html#Basic-Label-Studio-JSON-format\n\n        Args:\n            tag_id:\n                Id of the tag which should exported.\n\n        Returns:\n            A list of dictionaries in a format compatible with Label Studio.\n\n        \"\"\"", "\n", "label_studio_tasks", "=", "self", ".", "_tags_api", ".", "export_tag_to_label_studio_tasks", "(", "\n", "self", ".", "dataset_id", ",", "\n", "tag_id", "\n", ")", "\n", "return", "label_studio_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_studio_tasks_by_tag_name": [[131, 159], ["api_workflow_download_dataset._DownloadDatasetMixin.get_tag_by_name", "api_workflow_download_dataset._DownloadDatasetMixin.export_label_studio_tasks_by_tag_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_studio_tasks_by_tag_id"], ["", "def", "export_label_studio_tasks_by_tag_name", "(", "\n", "self", ",", "\n", "tag_name", ":", "str", ",", "\n", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "\"\"\"Exports samples in a format compatible with Label Studio.\n\n        The format is documented here:\n        https://labelstud.io/guide/tasks.html#Basic-Label-Studio-JSON-format\n\n        Args:\n            tag_name:\n                Name of the tag which should exported.\n\n        Returns:\n            A list of dictionaries in a format compatible with Label Studio.\n\n        Examples:\n            >>> # write json file which can be imported in Label Studio\n            >>> tasks = client.export_label_studio_tasks_by_tag_name(\n            >>>     'initial-tag'\n            >>> )\n            >>> \n            >>> with open('my-label-studio-tasks.json', 'w') as f:\n            >>>     json.dump(tasks, f)\n\n        \"\"\"", "\n", "tag", "=", "self", ".", "get_tag_by_name", "(", "tag_name", ")", "\n", "return", "self", ".", "export_label_studio_tasks_by_tag_id", "(", "tag", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_box_data_rows_by_tag_id": [[160, 182], ["api_workflow_download_dataset._DownloadDatasetMixin._tags_api.export_tag_to_label_box_data_rows"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.export_tag_to_label_box_data_rows"], ["", "def", "export_label_box_data_rows_by_tag_id", "(", "\n", "self", ",", "\n", "tag_id", ":", "str", ",", "\n", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "\"\"\"Exports samples in a format compatible with Labelbox.\n\n        The format is documented here:\n        https://docs.labelbox.com/docs/images-json\n\n        Args:\n            tag_id:\n                Id of the tag which should exported.\n\n        Returns:\n            A list of dictionaries in a format compatible with Labelbox.\n\n        \"\"\"", "\n", "label_box_data_rows", "=", "self", ".", "_tags_api", ".", "export_tag_to_label_box_data_rows", "(", "\n", "self", ".", "dataset_id", ",", "\n", "tag_id", ",", "\n", ")", "\n", "return", "label_box_data_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_box_data_rows_by_tag_name": [[183, 211], ["api_workflow_download_dataset._DownloadDatasetMixin.get_tag_by_name", "api_workflow_download_dataset._DownloadDatasetMixin.export_label_box_data_rows_by_tag_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_box_data_rows_by_tag_id"], ["", "def", "export_label_box_data_rows_by_tag_name", "(", "\n", "self", ",", "\n", "tag_name", ":", "str", ",", "\n", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "\"\"\"Exports samples in a format compatible with Labelbox.\n\n        The format is documented here:\n        https://docs.labelbox.com/docs/images-json\n\n        Args:\n            tag_name:\n                Name of the tag which should exported.\n\n        Returns:\n            A list of dictionaries in a format compatible with Labelbox.\n\n        Examples:\n            >>> # write json file which can be imported in Label Studio\n            >>> tasks = client.export_label_box_data_rows_by_tag_name(\n            >>>     'initial-tag'\n            >>> )\n            >>> \n            >>> with open('my-labelbox-rows.json', 'w') as f:\n            >>>     json.dump(tasks, f)\n\n        \"\"\"", "\n", "tag", "=", "self", ".", "get_tag_by_name", "(", "tag_name", ")", "\n", "return", "self", ".", "export_label_box_data_rows_by_tag_id", "(", "tag", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_filenames_by_tag_id": [[213, 232], ["api_workflow_download_dataset._DownloadDatasetMixin._tags_api.export_tag_to_basic_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.export_tag_to_basic_filenames"], ["", "def", "export_filenames_by_tag_id", "(", "\n", "self", ",", "\n", "tag_id", ":", "str", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"Exports a list of the samples filenames within a certain tag.\n\n        Args:\n            tag_id:\n                Id of the tag which should exported.\n\n        Returns:\n            A list of the samples filenames within a certain tag.\n\n        \"\"\"", "\n", "filenames", "=", "self", ".", "_tags_api", ".", "export_tag_to_basic_filenames", "(", "\n", "self", ".", "dataset_id", ",", "\n", "tag_id", ",", "\n", ")", "\n", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_filenames_by_tag_name": [[233, 258], ["api_workflow_download_dataset._DownloadDatasetMixin.get_tag_by_name", "api_workflow_download_dataset._DownloadDatasetMixin.export_filenames_by_tag_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_filenames_by_tag_id"], ["", "def", "export_filenames_by_tag_name", "(", "\n", "self", ",", "\n", "tag_name", ":", "str", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"Exports a list of the samples filenames within a certain tag.\n\n        Args:\n            tag_name:\n                Name of the tag which should exported.\n\n        Returns:\n            A list of the samples filenames within a certain tag.\n\n        Examples:\n            >>> # write json file which can be imported in Label Studio\n            >>> filenames = client.export_filenames_by_tag_name(\n            >>>     'initial-tag'\n            >>> )\n            >>> \n            >>> with open('filenames-of-initial-tag.txt', 'w') as f:\n            >>>     f.write(filenames)\n\n        \"\"\"", "\n", "tag", "=", "self", ".", "get_tag_by_name", "(", "tag_name", ")", "\n", "return", "self", ".", "export_filenames_by_tag_id", "(", "tag", ".", "id", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._make_dir_and_save_image": [[13, 25], ["os.path.join", "img.save", "img.close", "os.path.split", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "_make_dir_and_save_image", "(", "output_dir", ":", "str", ",", "filename", ":", "str", ",", "img", ":", "Image", ")", ":", "\n", "    ", "\"\"\"Saves the images and creates necessary subdirectories.\n\n    \"\"\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "\n", "head", "=", "os", ".", "path", ".", "split", "(", "path", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "head", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "head", ")", "\n", "\n", "", "img", ".", "save", "(", "path", ")", "\n", "img", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._get_image_from_read_url": [[27, 36], ["urllib.request.Request", "urllib.request.urlopen", "response.read", "PIL.Image.open", "io.BytesIO"], "function", ["None"], ["", "def", "_get_image_from_read_url", "(", "read_url", ":", "str", ")", ":", "\n", "    ", "\"\"\"Makes a get request to the signed read url and returns the image.\n\n    \"\"\"", "\n", "request", "=", "Request", "(", "read_url", ",", "method", "=", "'GET'", ")", "\n", "with", "urlopen", "(", "request", ")", "as", "response", ":", "\n", "        ", "blob", "=", "response", ".", "read", "(", ")", "\n", "img", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "blob", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download._check_av_available": [[24, 27], ["isinstance"], "function", ["None"], ["", "def", "_check_av_available", "(", ")", "->", "None", ":", "\n", "    ", "if", "isinstance", "(", "av", ",", "Exception", ")", ":", "\n", "        ", "raise", "av", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_image": [[28, 64], ["request_kwargs.setdefault", "request_kwargs.setdefault", "retry_fn", "req.get", "response.raise_for_status", "PIL.Image.open", "PIL.Image.open.load"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.raise_for_status"], ["", "", "def", "download_image", "(", "\n", "url", ":", "str", ",", "\n", "session", ":", "requests", ".", "Session", "=", "None", ",", "\n", "retry_fn", ":", "Callable", "=", "utils", ".", "retry", ",", "\n", "request_kwargs", ":", "Optional", "[", "Dict", "]", "=", "None", ",", "\n", ")", "->", "PIL", ".", "Image", ".", "Image", ":", "\n", "    ", "\"\"\"Downloads an image from a url.\n\n    Args:\n        url: \n            The url where the image is downloaded from.\n        session: \n            Session object to persist certain parameters across requests.\n        retry_fn:\n            Retry function that handles failed downloads.\n        request_kwargs:\n            Additional parameters passed to requests.get().\n\n    Returns:\n        The downloaded image.\n\n    \"\"\"", "\n", "request_kwargs", "=", "request_kwargs", "or", "{", "}", "\n", "request_kwargs", ".", "setdefault", "(", "'stream'", ",", "True", ")", "\n", "request_kwargs", ".", "setdefault", "(", "'timeout'", ",", "10", ")", "\n", "\n", "def", "load_image", "(", "url", ",", "req", ",", "request_kwargs", ")", ":", "\n", "        ", "with", "req", ".", "get", "(", "url", "=", "url", ",", "**", "request_kwargs", ")", "as", "response", ":", "\n", "            ", "response", ".", "raise_for_status", "(", ")", "\n", "image", "=", "PIL", ".", "Image", ".", "open", "(", "response", ".", "raw", ")", "\n", "image", ".", "load", "(", ")", "\n", "", "return", "image", "\n", "\n", "", "req", "=", "requests", "if", "session", "is", "None", "else", "session", "\n", "image", "=", "retry_fn", "(", "load_image", ",", "url", ",", "req", ",", "request_kwargs", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_and_write_file": [[355, 385], ["request_kwargs.setdefault", "request_kwargs.setdefault", "pathlib.Path", "pathlib.Path.parent.mkdir", "retry_fn", "response.raise_for_status", "open", "shutil.copyfileobj"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.raise_for_status"], ["", "", "def", "download_and_write_file", "(", "\n", "url", ":", "str", ",", "output_path", ":", "str", ",", "\n", "session", ":", "requests", ".", "Session", "=", "None", ",", "\n", "retry_fn", ":", "Callable", "=", "utils", ".", "retry", ",", "\n", "request_kwargs", ":", "Optional", "[", "Dict", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"Downloads a file from a url and saves it to disk\n\n    Args:\n        url:\n            Url of the file to download.\n        output_path:\n            Where to store the file, including filename and extension.\n        session:\n            Session object to persist certain parameters across requests.\n        retry_fn:\n            Retry function that handles failed downloads.\n        request_kwargs:\n            Additional parameters passed to requests.get().\n    \"\"\"", "\n", "request_kwargs", "=", "request_kwargs", "or", "{", "}", "\n", "request_kwargs", ".", "setdefault", "(", "'stream'", ",", "True", ")", "\n", "request_kwargs", ".", "setdefault", "(", "'timeout'", ",", "10", ")", "\n", "req", "=", "requests", "if", "session", "is", "None", "else", "session", "\n", "out_path", "=", "pathlib", ".", "Path", "(", "output_path", ")", "\n", "out_path", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "retry_fn", "(", "req", ".", "get", ",", "url", "=", "url", ",", "**", "request_kwargs", ")", "as", "response", ":", "\n", "        ", "response", ".", "raise_for_status", "(", ")", "\n", "with", "open", "(", "out_path", ",", "\"wb\"", ")", "as", "file", ":", "\n", "            ", "shutil", ".", "copyfileobj", "(", "response", ".", "raw", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_and_write_all_files": [[387, 465], ["dict", "threading.Lock", "os.path.join", "threading.get_ident", "threading.Lock.acquire", "dict.get", "threading.Lock.release", "download.download_and_write_file", "retry_fn", "concurrent.futures.ThreadPoolExecutor", "concurrent.futures.as_completed", "requests.Session", "executor.submit", "tqdm.tqdm", "future.result", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_and_write_file", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.job_status_data.JobStatusData.result"], ["", "", "", "def", "download_and_write_all_files", "(", "\n", "file_infos", ":", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ",", "\n", "output_dir", ":", "str", ",", "\n", "max_workers", ":", "int", "=", "None", ",", "\n", "verbose", ":", "bool", "=", "False", ",", "\n", "retry_fn", ":", "Callable", "=", "utils", ".", "retry", ",", "\n", "request_kwargs", ":", "Optional", "[", "Dict", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"Downloads all files and writes them to disk.\n\n    Args:\n        file_infos:\n            List containing (filename, url) tuples.\n        output_dir:\n            Output directory where files will stored in.\n        max_workers:\n            Maximum number of workers. If `None` the number of workers is chosen\n            based on the number of available cores.\n        verbose:\n            Shows progress bar if set to `True`.\n        retry_fn:\n            Retry function that handles failed downloads.\n        request_kwargs:\n            Additional parameters passed to requests.get().\n\n    \"\"\"", "\n", "\n", "def", "thread_download_and_write", "(", "\n", "file_info", ":", "Tuple", "[", "str", ",", "str", "]", ",", "\n", "output_dir", ":", "str", ",", "\n", "lock", ":", "threading", ".", "Lock", ",", "\n", "sessions", ":", "Dict", "[", "str", ",", "requests", ".", "Session", "]", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "filename", ",", "url", "=", "file_info", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "thread_id", "=", "threading", ".", "get_ident", "(", ")", "\n", "\n", "lock", ".", "acquire", "(", ")", "\n", "session", "=", "sessions", ".", "get", "(", "thread_id", ")", "\n", "if", "session", "is", "None", ":", "\n", "            ", "session", "=", "requests", ".", "Session", "(", ")", "\n", "sessions", "[", "thread_id", "]", "=", "session", "\n", "", "lock", ".", "release", "(", ")", "\n", "\n", "download_and_write_file", "(", "url", ",", "output_path", ",", "session", ",", "**", "kwargs", ")", "\n", "\n", "# retry download if failed", "\n", "", "def", "job", "(", "**", "kwargs", ")", ":", "\n", "        ", "retry_fn", "(", "thread_download_and_write", ",", "**", "kwargs", ")", "\n", "\n", "# dict where every thread stores its requests.Session", "\n", "", "sessions", "=", "dict", "(", ")", "\n", "# use lock because sessions dict is shared between threads", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "with", "ThreadPoolExecutor", "(", "max_workers", "=", "max_workers", ")", "as", "executor", ":", "\n", "        ", "futures_to_file_info", "=", "{", "\n", "executor", ".", "submit", "(", "\n", "job", ",", "\n", "file_info", "=", "file_info", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "lock", "=", "lock", ",", "\n", "sessions", "=", "sessions", ",", "\n", "retry_fn", "=", "retry_fn", ",", "\n", "request_kwargs", "=", "request_kwargs", ",", "\n", ")", ":", "file_info", "\n", "for", "file_info", "in", "file_infos", "\n", "}", "\n", "futures", "=", "concurrent", ".", "futures", ".", "as_completed", "(", "futures_to_file_info", ")", "\n", "if", "verbose", ":", "\n", "            ", "futures", "=", "tqdm", ".", "tqdm", "(", "futures", ")", "\n", "", "for", "future", "in", "futures", ":", "\n", "            ", "filename", ",", "url", "=", "futures_to_file_info", "[", "future", "]", "\n", "try", ":", "\n", "                ", "future", ".", "result", "(", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warnings", ".", "warn", "(", "f\"Could not download {filename} from {url}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_prediction_file": [[466, 485], ["download.download_json_file"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_json_file"], ["", "", "", "", "def", "download_prediction_file", "(", "\n", "url", ":", "str", ",", "\n", "session", ":", "requests", ".", "Session", "=", "None", ",", "\n", "request_kwargs", ":", "Optional", "[", "Dict", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "Dict", ",", "None", "]", ":", "\n", "    ", "\"\"\"Same as download_json_file. Keep this for backwards compatability.\n\n    Args:\n        url:\n            Url of the file to download.\n        session:\n            Session object to persist certain parameters across requests.\n        request_kwargs:\n            Additional parameters passed to requests.get().\n\n    Returns the content of the json file as dictionary or None.\n\n    \"\"\"", "\n", "return", "download_json_file", "(", "url", ",", "session", "=", "session", ",", "request_kwargs", "=", "request_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_json_file": [[486, 514], ["request_kwargs.setdefault", "request_kwargs.setdefault", "req.get", "req.get.json"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.json"], ["", "def", "download_json_file", "(", "\n", "url", ":", "str", ",", "\n", "session", ":", "requests", ".", "Session", "=", "None", ",", "\n", "request_kwargs", ":", "Optional", "[", "Dict", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "Dict", ",", "None", "]", ":", "\n", "    ", "\"\"\"Downloads a json file from the provided read-url.\n\n    Args:\n        url:\n            Url of the file to download.\n        session: \n            Session object to persist certain parameters across requests.\n        request_kwargs:\n            Additional parameters passed to requests.get().\n\n    Returns the content of the json file as dictionary or None.\n\n    \"\"\"", "\n", "request_kwargs", "=", "request_kwargs", "or", "{", "}", "\n", "request_kwargs", ".", "setdefault", "(", "'stream'", ",", "True", ")", "\n", "request_kwargs", ".", "setdefault", "(", "'timeout'", ",", "10", ")", "\n", "req", "=", "requests", "if", "session", "is", "None", "else", "session", "\n", "response", "=", "req", ".", "get", "(", "url", ",", "**", "request_kwargs", ")", "\n", "\n", "if", "response", ".", "status_code", "<", "200", "or", "response", ".", "status_code", ">=", "300", ":", "\n", "        ", "return", "None", "# the file doesn't exist!", "\n", "\n", "", "return", "response", ".", "json", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.__init__": [[107, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_hex": [[110, 115], ["cls", "bitmask._hex_to_int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._hex_to_int"], ["", "@", "classmethod", "\n", "def", "from_hex", "(", "cls", ",", "hexstring", ":", "str", ")", ":", "\n", "        ", "\"\"\"Creates a bit mask object from a hexstring.\n        \"\"\"", "\n", "return", "cls", "(", "_hex_to_int", "(", "hexstring", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin": [[116, 121], ["cls", "bitmask._bin_to_int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._bin_to_int"], ["", "@", "classmethod", "\n", "def", "from_bin", "(", "cls", ",", "binstring", ":", "str", ")", ":", "\n", "        ", "\"\"\"Creates a BitMask from a binary string.\n        \"\"\"", "\n", "return", "cls", "(", "_bin_to_int", "(", "binstring", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_length": [[122, 128], ["cls.from_bin"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin"], ["", "@", "classmethod", "\n", "def", "from_length", "(", "cls", ",", "length", ":", "int", ")", ":", "\n", "        ", "\"\"\"Creates a all-true bitmask of a predefined length\n        \"\"\"", "\n", "binstring", "=", "'0b'", "+", "'1'", "*", "length", "\n", "return", "cls", ".", "from_bin", "(", "binstring", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_hex": [[129, 133], ["bitmask._int_to_hex"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._int_to_hex"], ["", "def", "to_hex", "(", "self", ")", ":", "\n", "        ", "\"\"\"Creates a BitMask from a hex string.\n        \"\"\"", "\n", "return", "_int_to_hex", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_bin": [[134, 138], ["bitmask._int_to_bin"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._int_to_bin"], ["", "def", "to_bin", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a binary string representing the bit mask.\n        \"\"\"", "\n", "return", "_int_to_bin", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_indices": [[139, 147], ["bitmask._get_nonzero_bits"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._get_nonzero_bits"], ["", "def", "to_indices", "(", "self", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "\"\"\"Returns the list of indices bits which are set to 1 from the right.\n        Examples:\n            >>> mask = BitMask('0b0101')\n            >>> indices = mask.to_indices()\n            >>> # indices is [0, 2]\n        \"\"\"", "\n", "return", "_get_nonzero_bits", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.invert": [[148, 157], ["bitmask._invert"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._invert"], ["", "def", "invert", "(", "self", ",", "total_size", ":", "int", ")", ":", "\n", "        ", "\"\"\"Sets every 0 to 1 and every 1 to 0 in the bitstring.\n\n        Args:\n            total_size:\n                Total size of the tag.\n\n        \"\"\"", "\n", "self", ".", "x", "=", "_invert", "(", "self", ".", "x", ",", "total_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.complement": [[158, 162], ["bitmask.BitMask.invert"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.invert"], ["", "def", "complement", "(", "self", ")", ":", "\n", "        ", "\"\"\"Same as invert but with the appropriate name.\n        \"\"\"", "\n", "self", ".", "invert", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.union": [[163, 172], ["bitmask._union"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._union"], ["", "def", "union", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Calculates the union of two bit masks.\n        Examples:\n            >>> mask1 = BitMask.from_bin('0b0011')\n            >>> mask2 = BitMask.from_bin('0b1100')\n            >>> mask1.union(mask2)\n            >>> # mask1.binstring is '0b1111'\n        \"\"\"", "\n", "self", ".", "x", "=", "_union", "(", "self", ".", "x", ",", "other", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.intersection": [[173, 182], ["bitmask._intersection"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._intersection"], ["", "def", "intersection", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Calculates the intersection of two bit masks.\n        Examples:\n            >>> mask1 = BitMask.from_bin('0b0011')\n            >>> mask2 = BitMask.from_bin('0b1100')\n            >>> mask1.intersection(mask2)\n            >>> # mask1.binstring is '0b0000'\n        \"\"\"", "\n", "self", ".", "x", "=", "_intersection", "(", "self", ".", "x", ",", "other", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.difference": [[183, 193], ["bitmask.BitMask.union"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.union"], ["", "def", "difference", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Calculates the difference of two bit masks.\n        Examples:\n            >>> mask1 = BitMask.from_bin('0b0111')\n            >>> mask2 = BitMask.from_bin('0b1100')\n            >>> mask1.difference(mask2)\n            >>> # mask1.binstring is '0b0011'\n        \"\"\"", "\n", "self", ".", "union", "(", "other", ")", "\n", "self", ".", "x", "=", "self", ".", "x", "-", "other", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.__sub__": [[194, 198], ["copy.deepcopy", "copy.deepcopy.difference"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.difference"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "ret", "=", "deepcopy", "(", "self", ")", "\n", "ret", ".", "difference", "(", "other", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.__eq__": [[199, 201], ["bitmask.BitMask.to_bin", "other.to_bin"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_bin"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "to_bin", "(", ")", "==", "other", ".", "to_bin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list": [[202, 217], ["bitmask.BitMask.to_indices"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_indices"], ["", "def", "masked_select_from_list", "(", "self", ",", "list_", ":", "List", ")", ":", "\n", "        ", "\"\"\"Returns a subset of a list depending on the bitmask.\n\n        The bitmask is read from right to left, i.e. the least significant bit\n        corresponds to index 0.\n\n        Examples:\n            >>> list_to_subset = [4, 7, 9, 1]\n            >>> mask = BitMask.from_bin(\"0b0101\")\n            >>> masked_list = mask.masked_select_from_list(list_to_subset)\n            >>> # masked_list = [4, 9]\n\n        \"\"\"", "\n", "indices", "=", "self", ".", "to_indices", "(", ")", "\n", "return", "[", "list_", "[", "index", "]", "for", "index", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.get_kth_bit": [[218, 222], ["bitmask._get_kth_bit"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._get_kth_bit"], ["", "def", "get_kth_bit", "(", "self", ",", "k", ":", "int", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Returns the boolean value of the kth bit from the right.\n        \"\"\"", "\n", "return", "_get_kth_bit", "(", "self", ".", "x", ",", "k", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit": [[223, 231], ["bitmask._set_kth_bit"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._set_kth_bit"], ["", "def", "set_kth_bit", "(", "self", ",", "k", ":", "int", ")", ":", "\n", "        ", "\"\"\"Sets the kth bit from the right to '1'.\n        Examples:\n            >>> mask = BitMask('0b0000')\n            >>> mask.set_kth_bit(2)\n            >>> # mask.binstring is '0b0100'\n        \"\"\"", "\n", "self", ".", "x", "=", "_set_kth_bit", "(", "self", ".", "x", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.unset_kth_bit": [[232, 240], ["bitmask._unset_kth_bit"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._unset_kth_bit"], ["", "def", "unset_kth_bit", "(", "self", ",", "k", ":", "int", ")", ":", "\n", "        ", "\"\"\"Unsets the kth bit from the right to '0'.\n        Examples:\n            >>> mask = BitMask('0b1111')\n            >>> mask.unset_kth_bit(2)\n            >>> # mask.binstring is '0b1011'\n        \"\"\"", "\n", "self", ".", "x", "=", "_unset_kth_bit", "(", "self", ".", "x", ",", "k", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._hex_to_int": [[9, 13], ["int"], "function", ["None"], ["def", "_hex_to_int", "(", "hexstring", ":", "str", ")", "->", "int", ":", "\n", "    ", "\"\"\"Converts a hex string representation of an integer to an integer.\n    \"\"\"", "\n", "return", "int", "(", "hexstring", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._bin_to_int": [[15, 19], ["int"], "function", ["None"], ["", "def", "_bin_to_int", "(", "binstring", ":", "str", ")", "->", "int", ":", "\n", "    ", "\"\"\"Converts a binary string representation of an integer to an integer.\n    \"\"\"", "\n", "return", "int", "(", "binstring", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._int_to_hex": [[21, 25], ["hex"], "function", ["None"], ["", "def", "_int_to_hex", "(", "x", ":", "int", ")", "->", "str", ":", "\n", "    ", "\"\"\"Converts an integer to a hex string representation.\n    \"\"\"", "\n", "return", "hex", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._int_to_bin": [[27, 31], ["bin"], "function", ["None"], ["", "def", "_int_to_bin", "(", "x", ":", "int", ")", "->", "str", ":", "\n", "    ", "\"\"\"Converts an integer to a binary string representation.\n    \"\"\"", "\n", "return", "bin", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._get_nonzero_bits": [[33, 46], ["nonzero_bit_indices.append"], "function", ["None"], ["", "def", "_get_nonzero_bits", "(", "x", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "    ", "\"\"\"Returns a list of indices of nonzero bits in x.\n    \"\"\"", "\n", "offset", "=", "0", "\n", "nonzero_bit_indices", "=", "[", "]", "\n", "while", "x", ">", "0", ":", "\n", "# if the number is odd, there is a nonzero bit at offset", "\n", "        ", "if", "x", "%", "2", ">", "0", ":", "\n", "            ", "nonzero_bit_indices", ".", "append", "(", "offset", ")", "\n", "# increment the offset and divide the number x by two (rounding down)", "\n", "", "offset", "+=", "1", "\n", "x", "=", "x", "//", "2", "\n", "", "return", "nonzero_bit_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._invert": [[48, 53], ["None"], "function", ["None"], ["", "def", "_invert", "(", "x", ":", "int", ",", "total_size", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"Flips every bit of x as if x was an unsigned integer.\n    \"\"\"", "\n", "# use XOR of x and 0xFFFFFF to get the inverse", "\n", "return", "x", "^", "(", "2", "**", "total_size", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._union": [[55, 59], ["None"], "function", ["None"], ["", "def", "_union", "(", "x", ":", "int", ",", "y", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"Uses bitwise OR to get the union of the two masks.\n    \"\"\"", "\n", "return", "x", "|", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._intersection": [[61, 65], ["None"], "function", ["None"], ["", "def", "_intersection", "(", "x", ":", "int", ",", "y", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"Uses bitwise AND to get the intersection of the two masks.\n    \"\"\"", "\n", "return", "x", "&", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._get_kth_bit": [[67, 72], ["None"], "function", ["None"], ["", "def", "_get_kth_bit", "(", "x", ":", "int", ",", "k", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"Returns the kth bit in the mask from the right.\n    \"\"\"", "\n", "mask", "=", "1", "<<", "k", "\n", "return", "x", "&", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._set_kth_bit": [[74, 79], ["None"], "function", ["None"], ["", "def", "_set_kth_bit", "(", "x", ":", "int", ",", "k", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"Sets the kth bit in the mask from the right.\n    \"\"\"", "\n", "mask", "=", "1", "<<", "k", "\n", "return", "x", "|", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask._unset_kth_bit": [[81, 86], ["None"], "function", ["None"], ["", "def", "_unset_kth_bit", "(", "x", ":", "int", ",", "k", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"Clears the kth bit in the mask from the right.\n    \"\"\"", "\n", "mask", "=", "~", "(", "1", "<<", "k", ")", "\n", "return", "x", "&", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags": [[13, 21], ["api_workflow_tags._TagsMixin._tags_api.get_tags_by_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tags_by_dataset_id"], ["    ", "def", "get_all_tags", "(", "self", ")", "->", "List", "[", "TagData", "]", ":", "\n", "        ", "\"\"\" Gets all tags on the server\n\n        Returns:\n            one TagData entry for each tag on the server\n\n        \"\"\"", "\n", "return", "self", ".", "_tags_api", ".", "get_tags_by_dataset_id", "(", "self", ".", "dataset_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_id": [[22, 25], ["api_workflow_tags._TagsMixin._tags_api.get_tag_by_tag_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tag_by_tag_id"], ["", "def", "get_tag_by_id", "(", "self", ",", "tag_id", ":", "str", ")", "->", "TagData", ":", "\n", "        ", "tag_data", "=", "self", ".", "_tags_api", ".", "get_tag_by_tag_id", "(", "self", ".", "dataset_id", ",", "tag_id", ")", "\n", "return", "tag_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name": [[26, 32], ["tag_name_id_dict.get", "api_workflow_tags._TagsMixin.get_tag_by_id", "api_workflow_tags.TagDoesNotExistError", "api_workflow_tags._TagsMixin.get_all_tags"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags"], ["", "def", "get_tag_by_name", "(", "self", ",", "tag_name", ":", "str", ")", "->", "TagData", ":", "\n", "        ", "tag_name_id_dict", "=", "{", "tag", ".", "name", ":", "tag", ".", "id", "for", "tag", "in", "self", ".", "get_all_tags", "(", ")", "}", "\n", "tag_id", "=", "tag_name_id_dict", ".", "get", "(", "tag_name", ",", "None", ")", "\n", "if", "tag_id", "is", "None", ":", "\n", "            ", "raise", "TagDoesNotExistError", "(", "f'Your tag_name does not exist: {tag_name}.'", ")", "\n", "", "return", "self", ".", "get_tag_by_id", "(", "tag_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_filenames_in_tag": [[33, 76], ["lightly.api.bitmask.BitMask.from_hex().masked_select_from_list", "lightly.openapi_generated.swagger_client.TagArithmeticsRequest", "api_workflow_tags._TagsMixin._tags_api.perform_tag_arithmetics_bitmask", "api_workflow_tags._TagsMixin.get_filenames", "lightly.api.bitmask.BitMask.from_hex"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.perform_tag_arithmetics_bitmask", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_hex"], ["", "def", "get_filenames_in_tag", "(", "\n", "self", ",", "\n", "tag_data", ":", "TagData", ",", "\n", "filenames_on_server", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "exclude_parent_tag", ":", "bool", "=", "False", ",", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\" Gets the filenames of a tag\n\n        Args:\n            tag_data:\n                The data of the tag.\n            filenames_on_server:\n                List of all filenames on the server. If they are not given,\n                they need to be downloaded, which is quite expensive.\n            exclude_parent_tag:\n                Excludes the parent tag in the returned filenames.\n\n        Returns:\n            filenames_tag:\n                The filenames of all samples in the tag.\n\n        \"\"\"", "\n", "\n", "if", "exclude_parent_tag", ":", "\n", "            ", "parent_tag_id", "=", "tag_data", ".", "prev_tag_id", "\n", "tag_arithmetics_request", "=", "TagArithmeticsRequest", "(", "\n", "tag_id1", "=", "tag_data", ".", "id", ",", "tag_id2", "=", "parent_tag_id", ",", "\n", "operation", "=", "TagArithmeticsOperation", ".", "DIFFERENCE", ")", "\n", "bit_mask_response", ":", "TagBitMaskResponse", "=", "self", ".", "_tags_api", ".", "perform_tag_arithmetics_bitmask", "(", "\n", "body", "=", "tag_arithmetics_request", ",", "dataset_id", "=", "self", ".", "dataset_id", "\n", ")", "\n", "bit_mask_data", "=", "bit_mask_response", ".", "bit_mask_data", "\n", "", "else", ":", "\n", "            ", "bit_mask_data", "=", "tag_data", ".", "bit_mask_data", "\n", "\n", "", "if", "not", "filenames_on_server", ":", "\n", "            ", "filenames_on_server", "=", "self", ".", "get_filenames", "(", ")", "\n", "\n", "", "filenames_tag", "=", "BitMask", ".", "from_hex", "(", "bit_mask_data", ")", ".", "masked_select_from_list", "(", "filenames_on_server", ")", "\n", "\n", "return", "filenames_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.create_tag_from_filenames": [[77, 148], ["api_workflow_tags._TagsMixin.get_all_tags", "api_workflow_tags._TagsMixin.get_filenames", "len", "lightly.api.bitmask.BitMask", "set", "enumerate", "len", "api_workflow_tags._TagsMixin._tags_api.create_tag_by_dataset_id", "RuntimeError", "len", "RuntimeError", "next", "lightly.api.bitmask.BitMask.to_indices", "len", "RuntimeError", "lightly.api.bitmask.BitMask.to_hex", "lightly.api.bitmask.BitMask.set_kth_bit", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.create_tag_by_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_indices", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_hex", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit"], ["", "def", "create_tag_from_filenames", "(", "\n", "self", ",", "\n", "fnames_new_tag", ":", "List", "[", "str", "]", ",", "\n", "new_tag_name", ":", "str", ",", "\n", "parent_tag_id", ":", "str", "=", "None", "\n", ")", "->", "TagData", ":", "\n", "        ", "\"\"\"Creates a new tag from a list of filenames.\n\n        Args:\n            fnames_new_tag:\n                A list of filenames to be included in the new tag.\n            new_tag_name:\n                The name of the new tag.\n            parent_tag_id:\n                The tag defining where to sample from, default: None resolves to the initial-tag.\n\n        Returns:\n            The newly created tag.\n\n        Raises:\n            RuntimeError\n        \"\"\"", "\n", "\n", "# make sure the tag name does not exist yet", "\n", "tags", "=", "self", ".", "get_all_tags", "(", ")", "\n", "if", "new_tag_name", "in", "[", "tag", ".", "name", "for", "tag", "in", "tags", "]", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'There already exists a tag with tag_name {new_tag_name}.'", ")", "\n", "", "if", "len", "(", "tags", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'There exists no initial-tag for this dataset.'", ")", "\n", "\n", "# fallback to initial tag if no parent tag is provided", "\n", "", "if", "parent_tag_id", "is", "None", ":", "\n", "            ", "parent_tag_id", "=", "next", "(", "tag", ".", "id", "for", "tag", "in", "tags", "if", "tag", ".", "name", "==", "'initial-tag'", ")", "\n", "\n", "# get list of filenames from tag", "\n", "", "fnames_server", "=", "self", ".", "get_filenames", "(", ")", "\n", "tot_size", "=", "len", "(", "fnames_server", ")", "\n", "\n", "# create new bitmask for the new tag", "\n", "bitmask", "=", "BitMask", "(", "0", ")", "\n", "fnames_new_tag", "=", "set", "(", "fnames_new_tag", ")", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "fnames_server", ")", ":", "\n", "            ", "if", "fname", "in", "fnames_new_tag", ":", "\n", "                ", "bitmask", ".", "set_kth_bit", "(", "i", ")", "\n", "\n", "# quick sanity check", "\n", "", "", "num_selected_samples", "=", "len", "(", "bitmask", ".", "to_indices", "(", ")", ")", "\n", "if", "num_selected_samples", "!=", "len", "(", "fnames_new_tag", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f'An error occured when creating the new subset! '", "\n", "f'Out of the {len(fnames_new_tag)} filenames you provided '", "\n", "f'to create a new tag, only {num_selected_samples} have been '", "\n", "f'found on the server. '", "\n", "f'Make sure you use the correct filenames. '", "\n", "f'Valid filename example from the dataset: {fnames_server[0]}'", "\n", ")", "\n", "\n", "# create new tag", "\n", "", "tag_data_dict", "=", "{", "\n", "'name'", ":", "new_tag_name", ",", "\n", "'prevTagId'", ":", "parent_tag_id", ",", "\n", "'bitMaskData'", ":", "bitmask", ".", "to_hex", "(", ")", ",", "\n", "'totSize'", ":", "tot_size", "\n", "}", "\n", "\n", "new_tag", "=", "self", ".", "_tags_api", ".", "create_tag_by_dataset_id", "(", "\n", "tag_data_dict", ",", "\n", "self", ".", "dataset_id", "\n", ")", "\n", "\n", "return", "new_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.delete_tag_by_id": [[149, 158], ["api_workflow_tags._TagsMixin._tags_api.delete_tag_by_tag_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.delete_tag_by_tag_id"], ["", "def", "delete_tag_by_id", "(", "self", ",", "tag_id", ":", "str", ")", ":", "\n", "        ", "\"\"\"Deletes a tag on the web platform.\n        \n        Args:\n            tag_id:\n                The id of the tag to be deleted.\n        \n        \"\"\"", "\n", "self", ".", "_tags_api", ".", "delete_tag_by_tag_id", "(", "self", ".", "dataset_id", ",", "tag_id", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.retry": [[23, 62], ["random.random", "func", "time.sleep", "RuntimeError", "type", "str"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["\n", "if", "distributed", ":", "\n", "        ", "return", "batch_shuffle_distributed", "(", "batch", ")", "\n", "", "batch_size", "=", "batch", ".", "shape", "[", "0", "]", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "batch_size", ",", "device", "=", "batch", ".", "device", ")", "\n", "return", "batch", "[", "shuffle", "]", ",", "shuffle", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "batch_unshuffle", "(", "\n", "batch", ":", "torch", ".", "Tensor", ",", "\n", "shuffle", ":", "torch", ".", "Tensor", ",", "\n", "distributed", ":", "bool", "=", "False", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv": [[64, 78], ["os.getenvb().decode", "os.getenv", "os.getenvb", "key.encode", "default.encode"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode"], ["\n", "if", "distributed", ":", "\n", "        ", "return", "batch_unshuffle_distributed", "(", "batch", ",", "shuffle", ")", "\n", "", "unshuffle", "=", "torch", ".", "argsort", "(", "shuffle", ")", "\n", "return", "batch", "[", "unshuffle", "]", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.PIL_to_bytes": [[80, 92], ["io.BytesIO", "io.BytesIO.seek", "img.save", "img.save", "ext.lower"], "function", ["None"], ["\n", "output", "=", "[", "torch", ".", "empty_like", "(", "x", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "output", ",", "x", ",", "async_op", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "output", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "batch_shuffle_distributed", "(", "batch", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.check_filename": [[94, 103], ["len"], "function", ["None"], ["\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.build_azure_signed_url_write_headers": [[106, 134], ["None"], "function", ["None"], ["batch_gather", "=", "concat_all_gather", "(", "batch", ")", "\n", "batch_size_all", "=", "batch_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "dist", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "shuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "dist", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "batch_gather", "[", "idx_this", "]", ",", "shuffle", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "batch_unshuffle_distributed", "(", "\n", "batch", ":", "torch", ".", "Tensor", ",", "\n", "shuffle", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset": [[39, 229], ["api_workflow_upload_dataset._UploadDatasetMixin.get_all_tags", "isinstance", "min", "max", "print", "api_workflow_upload_dataset._UploadDatasetMixin._samples_api.get_samples_by_dataset_id", "set", "set().union", "int", "lightly.openapi_generated.swagger_client.models.job_status_meta.JobStatusMeta", "api_workflow_upload_dataset._UploadDatasetMixin._datasets_api.register_dataset_upload_by_id", "tqdm.tqdm", "tqdm.tqdm.get_lock", "len", "print", "lightly.data.dataset.LightlyDataset", "isinstance", "len", "len", "print", "api_workflow_upload_dataset._UploadDatasetMixin._quota_api.get_quota_maximum_dataset_size", "len", "ValueError", "api_workflow_upload_dataset._UploadDatasetMixin.verify_custom_metadata_format", "api_workflow_upload_dataset._UploadDatasetMixin.index_custom_metadata_by_filename", "api_workflow_upload_dataset._UploadDatasetMixin.get_datasource", "lightly.data.dataset.LightlyDataset.get_filepath_from_filename", "api_workflow_upload_dataset._UploadDatasetMixin.get", "tqdm.tqdm.get_lock.acquire", "tqdm.tqdm.update", "tqdm.tqdm.get_lock.release", "concurrent.futures.thread.ThreadPoolExecutor", "list", "all", "warnings.warn", "len", "lightly.openapi_generated.swagger_client.models.initial_tag_create_request.InitialTagCreateRequest", "api_workflow_upload_dataset._UploadDatasetMixin._tags_api.create_initial_tag_by_dataset_id", "lightly.openapi_generated.swagger_client.models.tag_upsize_request.TagUpsizeRequest", "api_workflow_upload_dataset._UploadDatasetMixin._tags_api.upsize_tags_by_dataset_id", "ValueError", "set", "len", "len", "api_workflow_upload_dataset._UploadDatasetMixin._upload_single_image", "executor.map", "list.index", "lightly.data.dataset.LightlyDataset.get_filenames", "len", "len", "len", "warnings.warn", "datetime.datetime.datetime.now().strftime", "len", "len", "type", "range", "datetime.datetime.datetime.now", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.union", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.register_dataset_upload_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedQuotaApi.get_quota_maximum_dataset_size", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.verify_custom_metadata_format", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.index_custom_metadata_by_filename", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_datasource", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.get_filepath_from_filename", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.create_initial_tag_by_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.upsize_tags_by_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin._upload_single_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["def", "upload_dataset", "(", "self", ",", "\n", "input", ":", "Union", "[", "str", ",", "LightlyDataset", "]", ",", "\n", "max_workers", ":", "int", "=", "8", ",", "\n", "mode", ":", "str", "=", "'thumbnails'", ",", "\n", "custom_metadata", ":", "Union", "[", "Dict", ",", "None", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"Uploads a dataset to to the Lightly cloud solution.\n\n        Args:\n            input:\n                Either the path to the dataset, e.g. \"path/to/dataset\",\n                or the dataset in form of a LightlyDataset\n            max_workers:\n                Maximum number of workers uploading images in parallel.\n            mode:\n                One of [full, thumbnails, metadata]. Whether to upload\n                thumbnails, full images, or metadata only.\n            custom_metadata:\n                COCO-style dictionary of custom metadata to be uploaded.\n\n        Raises:\n            ValueError:\n                If dataset is too large or input has the wrong type\n            RuntimeError:\n                If the connection to the server failed.\n\n        \"\"\"", "\n", "\n", "# get all tags of the dataset", "\n", "tags", "=", "self", ".", "get_all_tags", "(", ")", "\n", "if", "len", "(", "tags", ")", ">", "0", ":", "\n", "            ", "print", "(", "\n", "f'Dataset with id {self.dataset_id} has {len(tags)} tags.'", ",", "\n", "flush", "=", "True", "\n", ")", "\n", "\n", "# parse \"input\" variable", "\n", "", "if", "isinstance", "(", "input", ",", "str", ")", ":", "\n", "            ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "input", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "LightlyDataset", ")", ":", "\n", "            ", "dataset", "=", "input", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'input must either be a LightlyDataset or the path to the'", "\n", "f'dataset as str, but has type {type(input)}'", "\n", ")", "\n", "\n", "# handle the case where len(dataset) < max_workers", "\n", "", "max_workers", "=", "min", "(", "len", "(", "dataset", ")", ",", "max_workers", ")", "\n", "max_workers", "=", "max", "(", "max_workers", ",", "1", ")", "\n", "\n", "# upload the samples", "\n", "print", "(", "\n", "f'Uploading images (with {max_workers} workers).'", ",", "\n", "flush", "=", "True", "\n", ")", "\n", "\n", "# TODO: remove _size_in_bytes from image_processing", "\n", "image_processing", ".", "metadata", ".", "_size_in_bytes", "=", "lambda", "img", ":", "0", "# pylint: disable=protected-access", "\n", "\n", "# get the filenames of the samples already on the server", "\n", "samples", "=", "self", ".", "_samples_api", ".", "get_samples_by_dataset_id", "(", "\n", "dataset_id", "=", "self", ".", "dataset_id", "\n", ")", "\n", "filenames_on_server", "=", "[", "sample", ".", "file_name", "for", "sample", "in", "samples", "]", "\n", "filenames_on_server_set", "=", "set", "(", "filenames_on_server", ")", "\n", "if", "len", "(", "filenames_on_server", ")", ">", "0", ":", "\n", "            ", "print", "(", "\n", "f'Found {len(filenames_on_server)} images already on the server'", "\n", "', they are skipped during the upload.'", "\n", ")", "\n", "\n", "# check the maximum allowed dataset size", "\n", "", "total_filenames", "=", "set", "(", "dataset", ".", "get_filenames", "(", ")", ")", ".", "union", "(", "\n", "filenames_on_server_set", "\n", ")", "\n", "max_dataset_size", "=", "int", "(", "self", ".", "_quota_api", ".", "get_quota_maximum_dataset_size", "(", ")", ")", "\n", "if", "len", "(", "total_filenames", ")", ">", "max_dataset_size", ":", "\n", "            ", "msg", "=", "f'Your dataset has {len(dataset)} samples which'", "\n", "msg", "+=", "f' is more than the allowed maximum of {max_dataset_size}'", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# index custom metadata by filename (only if it exists)", "\n", "", "filename_to_metadata", "=", "{", "}", "\n", "if", "custom_metadata", "is", "not", "None", ":", "\n", "            ", "self", ".", "verify_custom_metadata_format", "(", "custom_metadata", ")", "\n", "filename_to_metadata", "=", "self", ".", "index_custom_metadata_by_filename", "(", "\n", "custom_metadata", ",", "\n", ")", "\n", "\n", "# get the datasource", "\n", "", "try", ":", "\n", "            ", "datasource_config", ":", "DatasourceConfigBase", "=", "self", ".", "get_datasource", "(", ")", "\n", "datasource_type", "=", "datasource_config", "[", "'type'", "]", "\n", "", "except", "ApiException", ":", "\n", "            ", "datasource_type", "=", "'LIGHTLY'", "# default to lightly datasource", "\n", "\n", "# register dataset upload", "\n", "", "job_status_meta", "=", "JobStatusMeta", "(", "\n", "total", "=", "len", "(", "total_filenames", ")", ",", "\n", "processed", "=", "len", "(", "filenames_on_server", ")", ",", "\n", "is_registered", "=", "True", ",", "\n", "upload_method", "=", "JobStatusUploadMethod", ".", "USER_PIP", ",", "\n", ")", "\n", "self", ".", "_datasets_api", ".", "register_dataset_upload_by_id", "(", "\n", "job_status_meta", ",", "\n", "self", ".", "dataset_id", "\n", ")", "\n", "\n", "pbar", "=", "tqdm", ".", "tqdm", "(", "\n", "unit", "=", "'imgs'", ",", "\n", "total", "=", "len", "(", "total_filenames", ")", "-", "len", "(", "filenames_on_server", ")", ",", "\n", ")", "\n", "tqdm_lock", "=", "tqdm", ".", "tqdm", ".", "get_lock", "(", ")", "\n", "\n", "# define lambda function for concurrent upload", "\n", "def", "lambda_", "(", "i", ")", ":", "\n", "# load image", "\n", "            ", "image", ",", "_", ",", "filename", "=", "dataset", "[", "i", "]", "\n", "if", "filename", "in", "filenames_on_server_set", ":", "\n", "# the sample was already uploaded", "\n", "                ", "return", "True", "\n", "\n", "", "filepath", "=", "dataset", ".", "get_filepath_from_filename", "(", "filename", ",", "image", ")", "\n", "\n", "# get custom metadata (evaluates to None if there is none)", "\n", "custom_metadata_item", "=", "filename_to_metadata", ".", "get", "(", "filename", ",", "None", ")", "\n", "\n", "# try to upload image", "\n", "try", ":", "\n", "                ", "self", ".", "_upload_single_image", "(", "\n", "image", "=", "image", ",", "\n", "filename", "=", "filename", ",", "\n", "filepath", "=", "filepath", ",", "\n", "mode", "=", "mode", ",", "\n", "custom_metadata", "=", "custom_metadata_item", ",", "\n", "datasource_type", "=", "datasource_type", ",", "\n", ")", "\n", "success", "=", "True", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "                ", "warnings", ".", "warn", "(", "\n", "f'Upload of image {filename} failed with error {e}'", "\n", ")", "\n", "success", "=", "False", "\n", "\n", "# update the progress bar", "\n", "", "tqdm_lock", ".", "acquire", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "tqdm_lock", ".", "release", "(", ")", "\n", "# return whether the upload was successful", "\n", "return", "success", "\n", "\n", "", "with", "ThreadPoolExecutor", "(", "max_workers", "=", "max_workers", ")", "as", "executor", ":", "\n", "            ", "results", "=", "list", "(", "executor", ".", "map", "(", "\n", "lambda_", ",", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", ",", "chunksize", "=", "1", ")", ")", "\n", "\n", "", "if", "not", "all", "(", "results", ")", ":", "\n", "            ", "msg", "=", "'Warning: Unsuccessful upload(s)! '", "\n", "msg", "+=", "'This could cause problems when uploading embeddings.'", "\n", "msg", "+=", "'Failed at image: {}'", ".", "format", "(", "results", ".", "index", "(", "False", ")", ")", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "\n", "# set image type of data and create initial tag", "\n", "", "if", "mode", "==", "'full'", ":", "\n", "            ", "img_type", "=", "'full'", "\n", "", "elif", "mode", "==", "'thumbnails'", ":", "\n", "            ", "img_type", "=", "'thumbnail'", "\n", "", "else", ":", "\n", "            ", "img_type", "=", "'meta'", "\n", "\n", "", "if", "len", "(", "tags", ")", "==", "0", ":", "\n", "# create initial tag", "\n", "            ", "initial_tag_create_request", "=", "InitialTagCreateRequest", "(", "\n", "img_type", "=", "img_type", ",", "\n", "creator", "=", "TagCreator", ".", "USER_PIP", "\n", ")", "\n", "self", ".", "_tags_api", ".", "create_initial_tag_by_dataset_id", "(", "\n", "body", "=", "initial_tag_create_request", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n", "", "else", ":", "\n", "# upsize existing tags", "\n", "            ", "upsize_tags_request", "=", "TagUpsizeRequest", "(", "\n", "upsize_tag_name", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d_%Hh%Mm%Ss'", ")", ",", "\n", "upsize_tag_creator", "=", "TagCreator", ".", "USER_PIP", ",", "\n", ")", "\n", "self", ".", "_tags_api", ".", "upsize_tags_by_dataset_id", "(", "\n", "body", "=", "upsize_tags_request", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin._upload_single_image": [[231, 331], ["lightly_utils.image_processing.Metadata().to_dict", "os.path.getsize", "lightly.openapi_generated.swagger_client.models.sample_create_request.SampleCreateRequest", "image.close", "lightly.api.utils.check_filename", "ValueError", "lightly_utils.image_processing.Exifdata", "lightly.api.utils.retry", "lightly_utils.image_processing.Metadata", "lightly_utils.image_processing.Thumbnail", "lightly_utils.image_processing.Thumbnail.to_bytes", "lightly.api.utils.retry", "lightly_utils.image_processing.Thumbnail.thumbnail.close", "lightly.api.utils.retry", "api_workflow_upload_dataset._UploadDatasetMixin._upload_single_image.upload_thumbnail"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.check_filename", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.retry", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.retry", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.retry"], ["", "", "def", "_upload_single_image", "(", "self", ",", "\n", "image", ",", "\n", "filename", ":", "str", ",", "\n", "filepath", ":", "str", ",", "\n", "mode", ":", "str", ",", "\n", "custom_metadata", ":", "Union", "[", "Dict", ",", "None", "]", "=", "None", ",", "\n", "datasource_type", ":", "str", "=", "'LIGHTLY'", ")", ":", "\n", "        ", "\"\"\"Uploads a single image to the Lightly platform.\n\n        \"\"\"", "\n", "# check whether the filepath is too long", "\n", "if", "not", "check_filename", "(", "filepath", ")", ":", "\n", "            ", "msg", "=", "(", "'Filepath {filepath} is longer than the allowed maximum of '", "\n", "f'{MAXIMUM_FILENAME_LENGTH} characters and will be skipped.'", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "# calculate metadata, and check if corrupted", "\n", "", "metadata", "=", "image_processing", ".", "Metadata", "(", "image", ")", ".", "to_dict", "(", ")", "\n", "metadata", "[", "'sizeInBytes'", "]", "=", "os", ".", "path", ".", "getsize", "(", "filepath", ")", "\n", "\n", "# try to get exif data", "\n", "try", ":", "\n", "            ", "exifdata", "=", "image_processing", ".", "Exifdata", "(", "image", ")", "\n", "", "except", "Exception", ":", "# pylint disable=broad-except", "\n", "            ", "exifdata", "=", "None", "\n", "\n", "# generate thumbnail if necessary", "\n", "", "thumbname", "=", "None", "\n", "if", "not", "metadata", "[", "'is_corrupted'", "]", "and", "mode", "in", "[", "'thumbnails'", ",", "'full'", "]", ":", "\n", "            ", "thumbname", "=", "'.'", ".", "join", "(", "filename", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "+", "'_thumb.webp'", "\n", "\n", "", "body", "=", "SampleCreateRequest", "(", "\n", "file_name", "=", "filename", ",", "\n", "thumb_name", "=", "thumbname", ",", "\n", "meta_data", "=", "metadata", ",", "\n", "exif", "=", "exifdata", "if", "exifdata", "is", "None", "else", "exifdata", ".", "to_dict", "(", ")", ",", "\n", "custom_meta_data", "=", "custom_metadata", ",", "\n", ")", "\n", "sample_id", "=", "retry", "(", "\n", "self", ".", "_samples_api", ".", "create_sample_by_dataset_id", ",", "\n", "body", "=", "body", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", "\n", ")", ".", "id", "\n", "\n", "if", "not", "metadata", "[", "'is_corrupted'", "]", "and", "mode", "in", "[", "'thumbnails'", ",", "'full'", "]", ":", "\n", "\n", "            ", "def", "upload_thumbnail", "(", "image", ",", "signed_url", ")", ":", "\n", "                ", "thumbnail", "=", "image_processing", ".", "Thumbnail", "(", "image", ")", "\n", "image_to_upload", "=", "thumbnail", ".", "to_bytes", "(", ")", "\n", "headers", "=", "None", "\n", "if", "datasource_type", "==", "'AZURE'", ":", "\n", "# build headers for Azure blob storage", "\n", "                    ", "size_in_bytes", "=", "str", "(", "image_to_upload", ".", "getbuffer", "(", ")", ".", "nbytes", ")", "\n", "headers", "=", "build_azure_signed_url_write_headers", "(", "\n", "size_in_bytes", "\n", ")", "\n", "", "retry", "(", "\n", "self", ".", "upload_file_with_signed_url", ",", "\n", "image_to_upload", ",", "\n", "signed_url", ",", "\n", "headers", "=", "headers", ",", "\n", ")", "\n", "thumbnail", ".", "thumbnail", ".", "close", "(", ")", "\n", "\n", "", "def", "upload_full_image", "(", "filepath", ",", "signed_url", ")", ":", "\n", "                ", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "image_to_upload", ":", "\n", "                    ", "headers", "=", "None", "\n", "if", "datasource_type", "==", "'AZURE'", ":", "\n", "# build headers for Azure blob storage", "\n", "                        ", "image_to_upload", ".", "seek", "(", "0", ",", "2", ")", "\n", "size_in_bytes", "=", "str", "(", "image_to_upload", ".", "tell", "(", ")", ")", "\n", "image_to_upload", ".", "seek", "(", "0", ",", "0", ")", "\n", "headers", "=", "build_azure_signed_url_write_headers", "(", "\n", "size_in_bytes", "\n", ")", "\n", "", "retry", "(", "\n", "self", ".", "upload_file_with_signed_url", ",", "\n", "image_to_upload", ",", "\n", "signed_url", ",", "\n", "headers", "=", "headers", "\n", ")", "\n", "\n", "", "", "if", "mode", "==", "'thumbnails'", ":", "\n", "                ", "thumbnail_url", "=", "retry", "(", "\n", "self", ".", "_samples_api", ".", "get_sample_image_write_url_by_id", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", "sample_id", "=", "sample_id", ",", "\n", "is_thumbnail", "=", "True", "\n", ")", "\n", "upload_thumbnail", "(", "image", ",", "thumbnail_url", ")", "\n", "", "elif", "mode", "==", "'full'", ":", "\n", "                ", "sample_write_urls", ":", "SampleWriteUrls", "=", "retry", "(", "\n", "self", ".", "_samples_api", ".", "get_sample_image_write_urls_by_id", ",", "\n", "dataset_id", "=", "self", ".", "dataset_id", ",", "\n", "sample_id", "=", "sample_id", "\n", ")", "\n", "upload_thumbnail", "(", "image", ",", "sample_write_urls", ".", "thumb", ")", "\n", "upload_full_image", "(", "filepath", ",", "sample_write_urls", ".", "full", ")", "\n", "\n", "", "", "image", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModule.get": [[24, 26], ["test_download.MockedResponse"], "methods", ["None"], ["    ", "def", "get", "(", "self", ",", "url", ",", "stream", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "MockedResponse", "(", "url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get": [[33, 35], ["test_download.MockedResponsePartialStream"], "methods", ["None"], ["    ", "def", "get", "(", "self", ",", "url", ",", "stream", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "MockedResponsePartialStream", "(", "url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.raise_for_status": [[36, 38], ["None"], "methods", ["None"], ["", "def", "raise_for_status", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.__init__": [[45, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "raw", ")", ":", "\n", "        ", "self", ".", "_raw", "=", "raw", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.raw": [[48, 53], ["open"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw", "(", "self", ")", ":", "\n", "#\u00a0instead of returning the byte stream from the url", "\n", "# we just give back an openend filehandle", "\n", "        ", "return", "open", "(", "self", ".", "_raw", ",", "'rb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.status_code": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "status_code", "(", "self", ")", ":", "\n", "        ", "return", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.raise_for_status": [[58, 60], ["None"], "methods", ["None"], ["", "def", "raise_for_status", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.json": [[61, 66], ["open", "json.load"], "methods", ["None"], ["", "def", "json", "(", "self", ")", ":", "\n", "#\u00a0instead of returning the byte stream from the url", "\n", "# we just load the json and return the dictionary", "\n", "        ", "with", "open", "(", "self", ".", "_raw", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.__enter__": [[67, 69], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponse.__exit__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedResponsePartialStream.raw": [[77, 89], ["open", "open.read", "io.BytesIO"], "methods", ["None"], ["@", "property", "\n", "def", "raw", "(", "self", ")", ":", "\n", "# instead of returning the byte stream from the url", "\n", "# we just give back an openend filehandle", "\n", "        ", "stream", "=", "open", "(", "self", ".", "_raw", ",", "'rb'", ")", "\n", "if", "self", ".", "return_partial_stream", ":", "\n", "            ", "bytes", "=", "stream", ".", "read", "(", ")", "\n", "stream_first_part", "=", "BytesIO", "(", "bytes", "[", ":", "1024", "]", ")", "\n", "MockedResponsePartialStream", ".", "return_partial_stream", "=", "False", "\n", "return", "stream_first_part", "\n", "", "else", ":", "\n", "            ", "return", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownloadPartialRespons.setUp": [[97, 103], ["warnings.filterwarnings"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "_max_retries", "=", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "\n", "self", ".", "_max_backoff", "=", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_BACKOFF", "\n", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "=", "1", "\n", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_BACKOFF", "=", "0", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownloadPartialRespons.tearDown": [[104, 108], ["warnings.filterwarnings"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "=", "self", ".", "_max_retries", "\n", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_BACKOFF", "=", "self", ".", "_max_backoff", "\n", "warnings", ".", "filterwarnings", "(", "\"default\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownloadPartialRespons.test_download_image_half_broken_retry_once": [[109, 121], ["test_download._pil_image", "tempfile.NamedTemporaryFile", "_pil_image.save", "test_download.TestDownloadPartialRespons.assertTrue", "test_download.TestDownloadPartialRespons.assertTrue", "test_download.TestDownloadPartialRespons.assertTrue", "test_download.TestDownloadPartialRespons.assertRaises", "lightly.api.download.download_image", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_image"], ["", "def", "test_download_image_half_broken_retry_once", "(", "self", ")", ":", "\n", "        ", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "=", "1", "\n", "\n", "original", "=", "_pil_image", "(", ")", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file", ":", "\n", "            ", "original", ".", "save", "(", "file", ".", "name", ")", "\n", "# assert that the retry fails", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", "as", "error", ":", "\n", "                ", "image", "=", "lightly", ".", "api", ".", "download", ".", "download_image", "(", "file", ".", "name", ")", "\n", "", "self", ".", "assertTrue", "(", "\"Maximum retries exceeded\"", "in", "str", "(", "error", ".", "exception", ")", ")", "\n", "self", ".", "assertTrue", "(", "\"<class 'OSError'>\"", "in", "str", "(", "error", ".", "exception", ")", ")", "\n", "self", ".", "assertTrue", "(", "\"image file is truncated\"", "in", "str", "(", "error", ".", "exception", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownloadPartialRespons.test_download_image_half_broken_retry_twice": [[122, 130], ["test_download._pil_image", "tempfile.NamedTemporaryFile", "_pil_image.save", "lightly.api.download.download_image", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "def", "test_download_image_half_broken_retry_twice", "(", "self", ")", ":", "\n", "        ", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "=", "2", "\n", "MockedResponse", ".", "return_partial_stream", "=", "True", "\n", "original", "=", "_pil_image", "(", ")", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file", ":", "\n", "            ", "original", ".", "save", "(", "file", ".", "name", ")", "\n", "image", "=", "lightly", ".", "api", ".", "download", ".", "download_image", "(", "file", ".", "name", ")", "\n", "assert", "_images_equal", "(", "image", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.setUp": [[136, 142], ["warnings.filterwarnings"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "_max_retries", "=", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "\n", "self", ".", "_max_backoff", "=", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_BACKOFF", "\n", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "=", "1", "\n", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_BACKOFF", "=", "0", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.tearDown": [[143, 147], ["warnings.filterwarnings"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_RETRIES", "=", "self", ".", "_max_retries", "\n", "lightly", ".", "api", ".", "utils", ".", "RETRY_MAX_BACKOFF", "=", "self", ".", "_max_backoff", "\n", "warnings", ".", "filterwarnings", "(", "\"default\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_image": [[148, 159], ["test_download._pil_image", "tempfile.NamedTemporaryFile", "_pil_image.save", "test_download.TestDownload.subTest", "lightly.api.download.download_image", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "def", "test_download_image", "(", "self", ")", ":", "\n", "        ", "original", "=", "_pil_image", "(", ")", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file", ":", "\n", "            ", "original", ".", "save", "(", "file", ".", "name", ")", "\n", "for", "request_kwargs", "in", "[", "None", ",", "{", "'stream'", ":", "False", "}", "]", ":", "\n", "                ", "with", "self", ".", "subTest", "(", "request_kwargs", "=", "request_kwargs", ")", ":", "\n", "                    ", "image", "=", "lightly", ".", "api", ".", "download", ".", "download_image", "(", "\n", "file", ".", "name", ",", "\n", "request_kwargs", "=", "request_kwargs", "\n", ")", "\n", "assert", "_images_equal", "(", "image", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_prediction": [[160, 172], ["test_download._json_prediction", "tempfile.NamedTemporaryFile", "open", "json.dump", "test_download.TestDownload.subTest", "lightly.api.download.download_prediction_file", "test_download.TestDownload.assertDictEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._json_prediction", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_prediction_file"], ["", "", "", "", "def", "test_download_prediction", "(", "self", ")", ":", "\n", "        ", "original", "=", "_json_prediction", "(", ")", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.json'", ",", "mode", "=", "\"w+\"", ")", "as", "file", ":", "\n", "            ", "with", "open", "(", "file", ".", "name", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "original", ",", "f", ")", "\n", "", "for", "request_kwargs", "in", "[", "None", ",", "{", "'stream'", ":", "False", "}", "]", ":", "\n", "                ", "with", "self", ".", "subTest", "(", "request_kwargs", "=", "request_kwargs", ")", ":", "\n", "                    ", "response", "=", "lightly", ".", "api", ".", "download", ".", "download_prediction_file", "(", "\n", "file", ".", "name", ",", "\n", "request_kwargs", "=", "request_kwargs", ",", "\n", ")", "\n", "self", ".", "assertDictEqual", "(", "response", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_image_with_session": [[173, 180], ["MockedRequestsModule.Session", "test_download._pil_image", "tempfile.NamedTemporaryFile", "_pil_image.save", "lightly.api.download.download_image", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "", "", "def", "test_download_image_with_session", "(", "self", ")", ":", "\n", "        ", "session", "=", "MockedRequestsModule", ".", "Session", "(", ")", "\n", "original", "=", "_pil_image", "(", ")", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file", ":", "\n", "            ", "original", ".", "save", "(", "file", ".", "name", ")", "\n", "image", "=", "lightly", ".", "api", ".", "download", ".", "download_image", "(", "file", ".", "name", ",", "session", "=", "session", ")", "\n", "assert", "_images_equal", "(", "image", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_all_video_frames": [[181, 188], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download._generate_video", "list", "zip", "lightly.api.download.download_all_video_frames", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_all_video_frames", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "original", "=", "_generate_video", "(", "file", ".", "name", ")", "\n", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_all_video_frames", "(", "file", ".", "name", ")", ")", "\n", "for", "frame", ",", "orig", "in", "zip", "(", "frames", ",", "original", ")", ":", "\n", "                ", "assert", "_images_equal", "(", "frame", ",", "orig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_last_video_frame": [[189, 202], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download._generate_video", "list", "range", "test_download.TestDownload.subTest", "lightly.api.download.download_video_frame", "test_download.TestDownload.assertRaises", "lightly.api.download.download_video_frame"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_last_video_frame", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "n_frames", "=", "5", "\n", "original", "=", "_generate_video", "(", "file", ".", "name", ",", "n_frames", "=", "n_frames", ")", "\n", "timestamps", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "for", "timestamp", "in", "timestamps", ":", "\n", "                ", "with", "self", ".", "subTest", "(", "timestamp", "=", "timestamp", ")", ":", "\n", "                    ", "if", "timestamp", ">", "n_frames", ":", "\n", "                        ", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "                            ", "frame", "=", "lightly", ".", "api", ".", "download", ".", "download_video_frame", "(", "file", ".", "name", ",", "timestamp", ")", "\n", "", "", "else", ":", "\n", "                        ", "frame", "=", "lightly", ".", "api", ".", "download", ".", "download_video_frame", "(", "file", ".", "name", ",", "timestamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frames_at_timestamps": [[203, 218], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download._generate_video", "list", "list", "list", "test_download.TestDownload.assertEqual", "zip", "range", "range", "lightly.api.download.download_video_frames_at_timestamps", "len", "len", "test_download._images_equal", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frames_at_timestamps", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "n_frames", "=", "5", "\n", "original", "=", "_generate_video", "(", "file", ".", "name", ",", "n_frames", "=", "n_frames", ")", "\n", "original_timestamps", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "frame_indices", "=", "list", "(", "range", "(", "2", ",", "len", "(", "original", ")", "-", "1", ",", "2", ")", ")", "\n", "timestamps", "=", "[", "original_timestamps", "[", "i", "]", "for", "i", "in", "frame_indices", "]", "\n", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_video_frames_at_timestamps", "(", "\n", "file", ".", "name", ",", "timestamps", "\n", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "frames", ")", ",", "len", "(", "timestamps", ")", ")", "\n", "for", "frame", ",", "timestamp", "in", "zip", "(", "frames", ",", "frame_indices", ")", ":", "\n", "                ", "orig", "=", "original", "[", "timestamp", "]", "\n", "assert", "_images_equal", "(", "frame", ",", "orig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frames_at_timestamps_wrong_order": [[219, 227], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download._generate_video", "test_download.TestDownload.assertRaises", "list", "lightly.api.download.download_video_frames_at_timestamps"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frames_at_timestamps_wrong_order", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "original", "=", "_generate_video", "(", "file", ".", "name", ")", "\n", "timestamps", "=", "[", "2", ",", "1", "]", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_video_frames_at_timestamps", "(", "\n", "file", ".", "name", ",", "timestamps", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frames_at_timestamps_emtpy": [[229, 236], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "list", "test_download.TestDownload.assertEqual", "lightly.api.download.download_video_frames_at_timestamps", "len"], "methods", ["None"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frames_at_timestamps_emtpy", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_video_frames_at_timestamps", "(", "\n", "file", ".", "name", ",", "timestamps", "=", "[", "]", "\n", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "frames", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_all_video_frames_restart_throws": [[237, 248], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download._generate_video", "list", "test_download.TestDownload.assertEqual", "test_download.TestDownload.assertRaises", "list", "lightly.api.download.download_all_video_frames", "len", "lightly.api.download.download_all_video_frames", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_all_video_frames_restart_throws", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "original", "=", "_generate_video", "(", "file", ".", "name", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "# timestamp too small", "\n", "                ", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_all_video_frames", "(", "file", ".", "name", ",", "timestamp", "=", "-", "1", ")", ")", "\n", "\n", "# timestamp too large", "\n", "", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_all_video_frames", "(", "file", ".", "name", ",", "timestamp", "=", "len", "(", "original", ")", "+", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "frames", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_all_video_frames_restart_at_0": [[250, 259], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download._generate_video", "list", "zip", "lightly.api.download.download_all_video_frames", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_all_video_frames_restart_at_0", "(", "self", ")", ":", "\n", "# relevant for restarting if the frame iterator is empty", "\n", "# although it shouldn't be", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "original", "=", "_generate_video", "(", "file", ".", "name", ")", "\n", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_all_video_frames", "(", "file", ".", "name", ",", "timestamp", "=", "None", ")", ")", "\n", "for", "frame", ",", "orig", "in", "zip", "(", "frames", ",", "original", ")", ":", "\n", "                ", "assert", "_images_equal", "(", "frame", ",", "orig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_all_video_frames_restart": [[260, 270], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download._generate_video", "list", "zip", "lightly.api.download.download_all_video_frames", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_all_video_frames_restart", "(", "self", ")", ":", "\n", "# relevant if decoding a frame goes wrong for some reason and we", "\n", "# want to try again", "\n", "        ", "restart_timestamp", "=", "3", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "            ", "original", "=", "_generate_video", "(", "file", ".", "name", ")", "\n", "frames", "=", "list", "(", "lightly", ".", "api", ".", "download", ".", "download_all_video_frames", "(", "file", ".", "name", ",", "restart_timestamp", ")", ")", "\n", "for", "frame", ",", "orig", "in", "zip", "(", "frames", ",", "original", "[", "2", ":", "]", ")", ":", "\n", "                ", "assert", "_images_equal", "(", "frame", ",", "orig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frame_fps": [[272, 290], ["unittest.skipUnless", "test_download.TestDownload.subTest", "tempfile.NamedTemporaryFile", "test_download._generate_video", "lightly.api.download.download_all_video_frames", "lightly.api.download.download_video_frame"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frame_fps", "(", "self", ")", ":", "\n", "        ", "for", "fps", "in", "[", "24", ",", "30", ",", "60", "]", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "msg", "=", "f\"fps={fps}\"", ")", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "\n", "                ", "original", "=", "_generate_video", "(", "file", ".", "name", ",", "fps", "=", "fps", ")", "\n", "all_frames", "=", "lightly", ".", "api", ".", "download", ".", "download_all_video_frames", "(", "\n", "file", ".", "name", ",", "\n", "as_pil_image", "=", "False", ",", "\n", ")", "\n", "for", "true_frame", "in", "all_frames", ":", "\n", "                    ", "frame", "=", "lightly", ".", "api", ".", "download", ".", "download_video_frame", "(", "\n", "file", ".", "name", ",", "\n", "timestamp", "=", "true_frame", ".", "pts", ",", "\n", "as_pil_image", "=", "False", ",", "\n", ")", "\n", "assert", "frame", ".", "pts", "==", "true_frame", ".", "pts", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frame_timestamp_exception": [[291, 306], ["unittest.skipUnless", "test_download.TestDownload.subTest", "tempfile.NamedTemporaryFile", "test_download._generate_video", "lightly.api.download.download_video_frame", "test_download._images_equal", "len", "test_download.TestDownload.assertRaises", "lightly.api.download.download_video_frame", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frame_timestamp_exception", "(", "self", ")", ":", "\n", "        ", "for", "fps", "in", "[", "24", ",", "30", ",", "60", "]", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "msg", "=", "f\"fps={fps}\"", ")", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "\n", "                ", "original", "=", "_generate_video", "(", "file", ".", "name", ",", "fps", "=", "fps", ")", "\n", "\n", "# this should be the last frame and exist", "\n", "frame", "=", "lightly", ".", "api", ".", "download", ".", "download_video_frame", "(", "file", ".", "name", ",", "len", "(", "original", ")", ")", "\n", "assert", "_images_equal", "(", "frame", ",", "original", "[", "-", "1", "]", ")", "\n", "\n", "#\u00a0timestamp after last frame", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "                    ", "lightly", ".", "api", ".", "download", ".", "download_video_frame", "(", "file", ".", "name", ",", "len", "(", "original", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frame_negative_timestamp_exception": [[307, 316], ["unittest.skipUnless", "test_download.TestDownload.subTest", "tempfile.NamedTemporaryFile", "test_download._generate_video", "test_download.TestDownload.assertRaises", "lightly.api.download.download_video_frame"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frame_negative_timestamp_exception", "(", "self", ")", ":", "\n", "        ", "for", "fps", "in", "[", "24", ",", "30", ",", "60", "]", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "msg", "=", "f\"fps={fps}\"", ")", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.avi'", ")", "as", "file", ":", "\n", "\n", "                ", "_generate_video", "(", "file", ".", "name", ",", "fps", "=", "fps", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                    ", "lightly", ".", "api", ".", "download", ".", "download_video_frame", "(", "file", ".", "name", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_and_write_file": [[317, 326], ["test_download._pil_image", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "_pil_image.save", "lightly.api.download.download_and_write_file", "PIL.Image.open", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_and_write_file", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "", "", "def", "test_download_and_write_file", "(", "self", ")", ":", "\n", "        ", "original", "=", "_pil_image", "(", ")", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file1", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file2", ":", "\n", "\n", "            ", "original", ".", "save", "(", "file1", ".", "name", ")", "\n", "lightly", ".", "api", ".", "download", ".", "download_and_write_file", "(", "file1", ".", "name", ",", "file2", ".", "name", ")", "\n", "image", "=", "Image", ".", "open", "(", "file2", ".", "name", ")", "\n", "assert", "_images_equal", "(", "original", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_and_write_file_with_session": [[327, 337], ["MockedRequestsModule.Session", "test_download._pil_image", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "_pil_image.save", "lightly.api.download.download_and_write_file", "PIL.Image.open", "test_download._images_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_and_write_file", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "def", "test_download_and_write_file_with_session", "(", "self", ")", ":", "\n", "        ", "session", "=", "MockedRequestsModule", ".", "Session", "(", ")", "\n", "original", "=", "_pil_image", "(", ")", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file1", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.png'", ")", "as", "file2", ":", "\n", "\n", "            ", "original", ".", "save", "(", "file1", ".", "name", ")", "\n", "lightly", ".", "api", ".", "download", ".", "download_and_write_file", "(", "file1", ".", "name", ",", "file2", ".", "name", ",", "session", "=", "session", ")", "\n", "image", "=", "Image", ".", "open", "(", "file2", ".", "name", ")", "\n", "assert", "_images_equal", "(", "original", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_and_write_all_files": [[338, 366], ["test_download._pil_image", "tempfile.TemporaryDirectory", "tempfile.TemporaryDirectory", "range", "range", "test_download.TestDownload.subTest", "zip", "list", "lightly.api.download.download_and_write_all_files", "zip", "os.path.join", "PIL.Image.open.save", "zip", "PIL.Image.open", "test_download._images_equal", "range", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.download.download_and_write_all_files", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal"], ["", "", "def", "test_download_and_write_all_files", "(", "self", ")", ":", "\n", "        ", "n_files", "=", "3", "\n", "max_workers", "=", "2", "\n", "originals", "=", "[", "_pil_image", "(", "seed", "=", "i", ")", "for", "i", "in", "range", "(", "n_files", ")", "]", "\n", "filenames", "=", "[", "f'filename_{i}.png'", "for", "i", "in", "range", "(", "n_files", ")", "]", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tempdir1", ",", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tempdir2", ":", "\n", "\n", "            ", "for", "request_kwargs", "in", "[", "None", ",", "{", "'stream'", ":", "False", "}", "]", ":", "\n", "                ", "with", "self", ".", "subTest", "(", "request_kwargs", "=", "request_kwargs", ")", ":", "\n", "\n", "# save images at \"remote\" location", "\n", "                    ", "urls", "=", "[", "os", ".", "path", ".", "join", "(", "tempdir1", ",", "f'url_{i}.png'", ")", "for", "i", "in", "range", "(", "n_files", ")", "]", "\n", "for", "image", ",", "url", "in", "zip", "(", "originals", ",", "urls", ")", ":", "\n", "                        ", "image", ".", "save", "(", "url", ")", "\n", "\n", "# download images from remote to local", "\n", "", "file_infos", "=", "list", "(", "zip", "(", "filenames", ",", "urls", ")", ")", "\n", "lightly", ".", "api", ".", "download", ".", "download_and_write_all_files", "(", "\n", "file_infos", ",", "\n", "output_dir", "=", "tempdir2", ",", "\n", "max_workers", "=", "max_workers", ",", "\n", "request_kwargs", "=", "request_kwargs", ",", "\n", ")", "\n", "\n", "for", "orig", ",", "filename", "in", "zip", "(", "originals", ",", "filenames", ")", ":", "\n", "                        ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "tempdir2", ",", "filename", ")", ")", "\n", "assert", "_images_equal", "(", "orig", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frame_count": [[367, 378], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download.TestDownload.subTest", "test_download._generate_video", "lightly.api.download.video_frame_count"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frame_count", "(", "self", ")", ":", "\n", "        ", "fps", "=", "24", "\n", "for", "true_n_frames", "in", "[", "24", ",", "30", ",", "60", "]", ":", "\n", "            ", "for", "suffix", "in", "[", "'.avi'", ",", "'.mpeg'", "]", ":", "\n", "                ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "suffix", ")", "as", "file", ",", "self", ".", "subTest", "(", "msg", "=", "f'n_frames={true_n_frames}, extension={suffix}'", ")", ":", "\n", "\n", "                    ", "_generate_video", "(", "file", ".", "name", ",", "n_frames", "=", "true_n_frames", ",", "fps", "=", "fps", ")", "\n", "n_frames", "=", "lightly", ".", "api", ".", "download", ".", "video_frame_count", "(", "file", ".", "name", ")", "\n", "assert", "n_frames", "==", "true_n_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_video_frame_count_no_metadata": [[379, 393], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "test_download.TestDownload.subTest", "test_download._generate_video", "lightly.api.download.video_frame_count"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_video_frame_count_no_metadata", "(", "self", ")", ":", "\n", "        ", "fps", "=", "24", "\n", "for", "true_n_frames", "in", "[", "24", ",", "30", ",", "60", "]", ":", "\n", "            ", "for", "suffix", "in", "[", "'.avi'", ",", "'.mpeg'", "]", ":", "\n", "                ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "suffix", ")", "as", "file", ",", "self", ".", "subTest", "(", "msg", "=", "f'n_frames={true_n_frames}, extension={suffix}'", ")", ":", "\n", "\n", "                    ", "_generate_video", "(", "file", ".", "name", ",", "n_frames", "=", "true_n_frames", ",", "fps", "=", "fps", ")", "\n", "n_frames", "=", "lightly", ".", "api", ".", "download", ".", "video_frame_count", "(", "\n", "file", ".", "name", ",", "\n", "ignore_metadata", "=", "True", "\n", ")", "\n", "assert", "n_frames", "==", "true_n_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_all_video_frame_counts": [[394, 410], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "test_download.TestDownload.subTest", "test_download._generate_video", "test_download._generate_video", "lightly.api.download.all_video_frame_counts", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_all_video_frame_counts", "(", "self", ")", ":", "\n", "        ", "true_n_frames", "=", "[", "3", ",", "5", "]", "\n", "fps", "=", "24", "\n", "for", "suffix", "in", "[", "'.avi'", ",", "'.mpeg'", "]", ":", "\n", "            ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "suffix", ")", "as", "file1", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "suffix", ")", "as", "file2", ",", "self", ".", "subTest", "(", "msg", "=", "f'extension={suffix}'", ")", ":", "\n", "\n", "                ", "_generate_video", "(", "file1", ".", "name", ",", "n_frames", "=", "true_n_frames", "[", "0", "]", ",", "fps", "=", "fps", ")", "\n", "_generate_video", "(", "file2", ".", "name", ",", "n_frames", "=", "true_n_frames", "[", "1", "]", ",", "fps", "=", "fps", ")", "\n", "frame_counts", "=", "lightly", ".", "api", ".", "download", ".", "all_video_frame_counts", "(", "\n", "urls", "=", "[", "file1", ".", "name", ",", "file2", ".", "name", "]", ",", "\n", ")", "\n", "assert", "sum", "(", "frame_counts", ")", "==", "sum", "(", "true_n_frames", ")", "\n", "assert", "frame_counts", "==", "true_n_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_all_video_frame_counts_broken": [[411, 424], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "test_download._generate_video", "test_download._generate_video", "lightly.api.download.all_video_frame_counts"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_all_video_frame_counts_broken", "(", "self", ")", ":", "\n", "        ", "fps", "=", "24", "\n", "n_frames", "=", "5", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.mpeg'", ")", "as", "file1", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.mpeg'", ")", "as", "file2", ":", "\n", "\n", "            ", "_generate_video", "(", "file1", ".", "name", ",", "fps", "=", "fps", ",", "n_frames", "=", "n_frames", ")", "\n", "_generate_video", "(", "file2", ".", "name", ",", "fps", "=", "fps", ",", "broken", "=", "True", ")", "\n", "\n", "urls", "=", "[", "file1", ".", "name", ",", "file2", ".", "name", "]", "\n", "result", "=", "lightly", ".", "api", ".", "download", ".", "all_video_frame_counts", "(", "urls", ")", "\n", "assert", "result", "==", "[", "n_frames", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.TestDownload.test_download_all_video_frame_counts_broken_ignore_exceptions": [[425, 440], ["unittest.skipUnless", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "test_download._generate_video", "test_download._generate_video", "test_download.TestDownload.assertRaises", "lightly.api.download.all_video_frame_counts", "tuple"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video"], ["", "", "@", "unittest", ".", "skipUnless", "(", "AV_AVAILABLE", ",", "\"Pyav not installed\"", ")", "\n", "def", "test_download_all_video_frame_counts_broken_ignore_exceptions", "(", "self", ")", ":", "\n", "        ", "fps", "=", "24", "\n", "n_frames", "=", "5", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.mpeg'", ")", "as", "file1", ",", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.mpeg'", ")", "as", "file2", ":", "\n", "\n", "            ", "_generate_video", "(", "file1", ".", "name", ",", "fps", "=", "fps", ",", "n_frames", "=", "n_frames", ")", "\n", "_generate_video", "(", "file2", ".", "name", ",", "fps", "=", "fps", ",", "broken", "=", "True", ")", "\n", "\n", "urls", "=", "[", "file1", ".", "name", ",", "file2", ".", "name", "]", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "                ", "result", "=", "lightly", ".", "api", ".", "download", ".", "all_video_frame_counts", "(", "\n", "urls", ",", "\n", "exceptions_indicating_empty_video", "=", "tuple", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._images_equal": [[443, 447], ["numpy.all", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "", "", "def", "_images_equal", "(", "image1", ",", "image2", ")", ":", "\n", "# note that images saved and loaded from disk must", "\n", "# use a lossless format, otherwise this equality will not hold", "\n", "    ", "return", "np", ".", "all", "(", "np", ".", "array", "(", "image1", ")", "==", "np", ".", "array", "(", "image2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._pil_image": [[448, 453], ["numpy.random.seed", "PIL.Image.fromarray", "numpy.random.randn"], "function", ["None"], ["", "def", "_pil_image", "(", "width", "=", "100", ",", "height", "=", "50", ",", "seed", "=", "0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "image", "=", "(", "np", ".", "random", ".", "randn", "(", "width", ",", "height", ",", "3", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "image", ",", "mode", "=", "'RGB'", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._json_prediction": [[454, 459], ["None"], "function", ["None"], ["", "def", "_json_prediction", "(", ")", ":", "\n", "    ", "return", "{", "\n", "'string'", ":", "'Hello World'", ",", "\n", "'int'", ":", "1", ",", "\n", "'float'", ":", "0.5", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download._generate_video": [[461, 518], ["out_file.endswith", "numpy.random.seed", "av.open", "av.open.add_stream", "av.open.close", "container.add_stream.encode", "container.add_stream.encode", "av.open.mux", "frame.to_image", "av.VideoFrame", "av.VideoFrame.from_ndarray", "av.open.mux", "range", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode"], ["", "def", "_generate_video", "(", "\n", "out_file", ",", "\n", "n_frames", "=", "5", ",", "\n", "width", "=", "100", ",", "\n", "height", "=", "50", ",", "\n", "seed", "=", "0", ",", "\n", "fps", "=", "24", ",", "\n", "broken", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Generate a video.\n\n    Use .avi extension if you want to save a lossless video. Use '.mpeg' for\n    videos which should have streams.frames = 0, so that the whole video must\n    be loaded to find the total number of frames. Note that mpeg requires\n    fps = 24.\n\n    \"\"\"", "\n", "is_mpeg", "=", "out_file", ".", "endswith", "(", "'.mpeg'", ")", "\n", "video_format", "=", "'libx264rgb'", "\n", "pixel_format", "=", "'rgb24'", "\n", "\n", "if", "is_mpeg", ":", "\n", "        ", "video_format", "=", "'mpeg1video'", "\n", "pixel_format", "=", "'yuv420p'", "\n", "\n", "", "if", "broken", ":", "\n", "        ", "n_frames", "=", "0", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "container", "=", "av", ".", "open", "(", "out_file", ",", "mode", "=", "'w'", ")", "\n", "stream", "=", "container", ".", "add_stream", "(", "video_format", ",", "rate", "=", "fps", ")", "\n", "stream", ".", "width", "=", "width", "\n", "stream", ".", "height", "=", "height", "\n", "stream", ".", "pix_fmt", "=", "pixel_format", "\n", "\n", "if", "is_mpeg", ":", "\n", "        ", "frames", "=", "[", "av", ".", "VideoFrame", "(", "width", ",", "height", ",", "pixel_format", ")", "for", "i", "in", "range", "(", "n_frames", ")", "]", "\n", "", "else", ":", "\n", "# save lossless video", "\n", "        ", "stream", ".", "options", "[", "\"crf\"", "]", "=", "\"0\"", "\n", "images", "=", "(", "np", ".", "random", ".", "randn", "(", "n_frames", ",", "height", ",", "width", ",", "3", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "frames", "=", "[", "av", ".", "VideoFrame", ".", "from_ndarray", "(", "image", ",", "format", "=", "pixel_format", ")", "for", "image", "in", "images", "]", "\n", "\n", "", "for", "frame", "in", "frames", ":", "\n", "        ", "for", "packet", "in", "stream", ".", "encode", "(", "frame", ")", ":", "\n", "            ", "container", ".", "mux", "(", "packet", ")", "\n", "\n", "", "", "if", "not", "broken", ":", "\n", "# flush the stream", "\n", "#\u00a0video cannot be loaded if this is omitted", "\n", "        ", "packet", "=", "stream", ".", "encode", "(", "None", ")", "\n", "container", ".", "mux", "(", "packet", ")", "\n", "\n", "", "container", ".", "close", "(", ")", "\n", "\n", "pil_images", "=", "[", "frame", ".", "to_image", "(", ")", "for", "frame", "in", "frames", "]", "\n", "return", "pil_images", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_utils.TestUtils.test_retry_success": [[15, 21], ["test_utils.TestUtils.assertEqual", "lightly.api.utils.retry"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.retry"], ["    ", "def", "test_retry_success", "(", "self", ")", ":", "\n", "\n", "        ", "def", "my_func", "(", "arg", ",", "kwarg", "=", "5", ")", ":", "\n", "            ", "return", "arg", "+", "kwarg", "\n", "\n", "", "self", ".", "assertEqual", "(", "retry", "(", "my_func", ",", "5", ",", "kwarg", "=", "5", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_utils.TestUtils.test_retry_fail": [[23, 30], ["RuntimeError", "test_utils.TestUtils.assertRaises", "lightly.api.utils.retry"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.retry"], ["", "def", "test_retry_fail", "(", "self", ")", ":", "\n", "\n", "        ", "def", "my_func", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "retry", "(", "my_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_utils.TestUtils.test_getenv": [[31, 35], ["lightly.api.utils.getenv", "test_utils.TestUtils.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["", "", "def", "test_getenv", "(", "self", ")", ":", "\n", "        ", "os", ".", "environ", "[", "'TEST_ENV_VARIABLE'", "]", "=", "'hello world'", "\n", "env", "=", "getenv", "(", "'TEST_ENV_VARIABLE'", ",", "'default'", ")", "\n", "self", ".", "assertEqual", "(", "env", ",", "'hello world'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_utils.TestUtils.test_getenv_fail": [[36, 39], ["lightly.api.utils.getenv", "test_utils.TestUtils.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["", "def", "test_getenv_fail", "(", "self", ")", ":", "\n", "        ", "env", "=", "getenv", "(", "'TEST_ENV_VARIABLE_WHICH_DOES_NOT_EXIST'", ",", "'hello world'", ")", "\n", "self", ".", "assertEqual", "(", "env", ",", "'hello world'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_utils.TestUtils.test_PIL_to_bytes": [[40, 51], ["PIL.Image.new", "lightly.api.utils.PIL_to_bytes", "lightly.api.utils.PIL_to_bytes", "lightly.api.utils.PIL_to_bytes"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.PIL_to_bytes", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.PIL_to_bytes", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.PIL_to_bytes"], ["", "def", "test_PIL_to_bytes", "(", "self", ")", ":", "\n", "        ", "image", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "128", ",", "128", ")", ")", "\n", "\n", "# test with quality=None", "\n", "PIL_to_bytes", "(", "image", ")", "\n", "\n", "# test with quality=90", "\n", "PIL_to_bytes", "(", "image", ",", "quality", "=", "90", ")", "\n", "\n", "# test with quality=90 and ext=jpg", "\n", "PIL_to_bytes", "(", "image", ",", "ext", "=", "'JPEG'", ",", "quality", "=", "90", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_rest_parser.TestRestParser.test_parse_active_learning_scores": [[12, 32], ["unittest.skip", "lightly.openapi_generated.swagger_client.ApiClient", "lightly.openapi_generated.swagger_client.ScoresApi", "enumerate", "numpy.random.normal().astype", "numpy.random.normal().astype", "test_rest_parser.TestRestParser.subTest", "lightly.openapi_generated.swagger_client.ActiveLearningScoreCreateRequest", "isinstance", "numpy.random.normal", "numpy.random.normal", "str", "list", "test_rest_parser.TestRestParser.assertRaises", "test_rest_parser.TestRestParser._scores_api.create_or_update_active_learning_score_by_tag_id", "test_rest_parser.TestRestParser.assertRaises", "test_rest_parser.TestRestParser._scores_api.create_or_update_active_learning_score_by_tag_id", "type"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedScoresApi.create_or_update_active_learning_score_by_tag_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedScoresApi.create_or_update_active_learning_score_by_tag_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["    ", "@", "unittest", ".", "skip", "(", "\"This test only shows the error, it does not ensure it is solved.\"", ")", "\n", "def", "test_parse_active_learning_scores", "(", "self", ")", ":", "\n", "        ", "score_value_tuple", "=", "(", "\n", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "999", ",", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "999", ",", ")", ")", ".", "astype", "(", "np", ".", "float64", ")", ",", "\n", "[", "12.0", "]", "*", "999", "\n", ")", "\n", "api_client", "=", "ApiClient", "(", ")", "\n", "self", ".", "_scores_api", "=", "ScoresApi", "(", "api_client", ")", "\n", "for", "i", ",", "score_values", "in", "enumerate", "(", "score_value_tuple", ")", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "i", "=", "i", ",", "msg", "=", "str", "(", "type", "(", "score_values", ")", ")", ")", ":", "\n", "                ", "body", "=", "ActiveLearningScoreCreateRequest", "(", "score_type", "=", "SamplingMethod", ".", "CORESET", ",", "scores", "=", "list", "(", "score_values", ")", ")", "\n", "if", "isinstance", "(", "score_values", "[", "0", "]", ",", "float", ")", ":", "\n", "                    ", "with", "self", ".", "assertRaises", "(", "ApiException", ")", ":", "\n", "                        ", "self", ".", "_scores_api", ".", "create_or_update_active_learning_score_by_tag_id", "(", "\n", "body", ",", "dataset_id", "=", "\"dataset_id_xyz\"", ",", "tag_id", "=", "\"tag_id_xyz\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "                        ", "self", ".", "_scores_api", ".", "create_or_update_active_learning_score_by_tag_id", "(", "\n", "body", ",", "dataset_id", "=", "\"dataset_id_xyz\"", ",", "tag_id", "=", "\"tag_id_xyz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.benchmark_video_download.BenchmarkDownloadVideoFrames.setUpClass": [[17, 25], ["numpy.linspace().astype().tolist", "av.open", "numpy.linspace().astype", "numpy.linspace"], "methods", ["None"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "video_url_12min_100mb", "=", "\"https://mediandr-a.akamaihd.net/progressive/2018/0912/TV-20180912-1628-0000.ln.mp4\"", "\n", "with", "av", ".", "open", "(", "cls", ".", "video_url_12min_100mb", ")", "as", "container", ":", "\n", "            ", "stream", "=", "container", ".", "streams", ".", "video", "[", "0", "]", "\n", "duration", "=", "stream", ".", "duration", "\n", "# This video has its timestamps 0-based", "\n", "", "cls", ".", "timestamps", "=", "np", ".", "linspace", "(", "0", ",", "duration", ",", "num", "=", "1000", ")", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.benchmark_video_download.BenchmarkDownloadVideoFrames.setUp": [[26, 28], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.benchmark_video_download.BenchmarkDownloadVideoFrames.test_download_full": [[29, 33], ["lightly.api.download.download_all_video_frames", "enumerate", "tqdm.tqdm.tqdm"], "methods", ["None"], ["", "def", "test_download_full", "(", "self", ")", ":", "\n", "        ", "all_video_frames", "=", "download_all_video_frames", "(", "self", ".", "video_url_12min_100mb", ")", "\n", "for", "i", ",", "frame", "in", "enumerate", "(", "tqdm", "(", "all_video_frames", ")", ")", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.benchmark_video_download.BenchmarkDownloadVideoFrames.test_download_at_timestamps_for_loop": [[38, 41], ["tqdm.tqdm.tqdm", "lightly.api.download.download_video_frame"], "methods", ["None"], ["", "", "def", "test_download_at_timestamps_for_loop", "(", "self", ")", ":", "\n", "        ", "for", "timestamp", "in", "tqdm", "(", "self", ".", "timestamps", ")", ":", "\n", "            ", "frame", "=", "download_video_frame", "(", "self", ".", "video_url_12min_100mb", ",", "timestamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.benchmark_video_download.BenchmarkDownloadVideoFrames.test_download_at_timestamps": [[42, 45], ["lightly.api.download.download_video_frames_at_timestamps", "list", "tqdm.tqdm.tqdm", "len"], "methods", ["None"], ["", "", "def", "test_download_at_timestamps", "(", "self", ")", ":", "\n", "        ", "frames", "=", "download_video_frames_at_timestamps", "(", "self", ".", "video_url_12min_100mb", ",", "self", ".", "timestamps", ")", "\n", "frames", "=", "list", "(", "tqdm", "(", "frames", ",", "total", "=", "len", "(", "self", ".", "timestamps", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.benchmark_video_download.BenchmarkDownloadVideoFrames.test_download_at_indices_decord": [[49, 58], ["decord.VideoReader", "decord.bridge.set_bridge", "print", "decord.VideoReader.get_batch", "list", "range", "time.time"], "methods", ["None"], ["", "def", "test_download_at_indices_decord", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        See https://github.com/dmlc/decord/issues/199\n        \"\"\"", "\n", "import", "decord", "\n", "vr", "=", "decord", ".", "VideoReader", "(", "self", ".", "video_url_12min_100mb", ")", "\n", "decord", ".", "bridge", ".", "set_bridge", "(", "'torch'", ")", "\n", "print", "(", "f\"Took {time.time() - self.start_time}s for creating the video reader.\"", ")", "\n", "frames", "=", "vr", ".", "get_batch", "(", "list", "(", "range", "(", "0", ",", "18000", ",", "18", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.benchmark_video_download.BenchmarkDownloadVideoFrames.tearDown": [[59, 61], ["print", "time.time"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "print", "(", "f\"Took {time.time()-self.start_time}s\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_version_checking.TestVersionChecking.setUp": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "lightly", ".", "api", ".", "version_checking", ".", "VersioningApi", "=", "MockedVersioningApi", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_version_checking.TestVersionChecking.test_get_latest_version": [[18, 20], ["lightly.api.version_checking.get_latest_version"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_latest_version"], ["", "def", "test_get_latest_version", "(", "self", ")", ":", "\n", "        ", "get_latest_version", "(", "\"1.2.3\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_version_checking.TestVersionChecking.test_get_minimum_compatible_version": [[21, 23], ["lightly.api.version_checking.get_minimum_compatible_version"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.get_minimum_compatible_version"], ["", "def", "test_get_minimum_compatible_version", "(", "self", ")", ":", "\n", "        ", "get_minimum_compatible_version", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_version_checking.TestVersionChecking.test_pretty_print": [[24, 26], ["lightly.api.version_checking.pretty_print_latest_version"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.pretty_print_latest_version"], ["", "def", "test_pretty_print", "(", "self", ")", ":", "\n", "        ", "pretty_print_latest_version", "(", "current_version", "=", "\"curr\"", ",", "latest_version", "=", "\"1.1.1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_version_checking.TestVersionChecking.test_version_check_timout_mocked": [[27, 59], ["time.time", "test_version_checking.TestVersionChecking.assertLess", "time.sleep", "print", "sys.exit", "test_version_checking.TestVersionChecking.assertRaises", "lightly.api.version_checking.do_version_check", "time.time"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.version_checking.do_version_check"], ["", "def", "test_version_check_timout_mocked", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            We cannot check for other errors as we don't know whether the\n            current LIGHTLY_SERVER_URL is\n            - unreachable (error in < 1 second)\n            - causing a timeout and thus raising a LightlyAPITimeoutException\n            - reachable (success in < 1 second\n\n            Thus this only checks that the actual lightly.do_version_check()\n            with needing >1s internally causes a LightlyAPITimeoutException\n        \"\"\"", "\n", "try", ":", "\n", "            ", "old_get_versioning_api", "=", "lightly", ".", "api", ".", "version_checking", ".", "get_versioning_api", "\n", "\n", "def", "mocked_get_versioning_api_timeout", "(", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "10", ")", "\n", "print", "(", "\"This line should never be reached, calling sys.exit()\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "lightly", ".", "api", ".", "version_checking", ".", "get_versioning_api", "=", "mocked_get_versioning_api_timeout", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "LightlyAPITimeoutException", ")", ":", "\n", "                ", "do_version_check", "(", "lightly", ".", "__version__", ")", "\n", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "self", ".", "assertLess", "(", "duration", ",", "1.5", ")", "\n", "\n", "", "finally", ":", "\n", "            ", "lightly", ".", "api", ".", "version_checking", ".", "get_versioning_api", "=", "old_get_versioning_api", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.setup": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "setup", "(", "self", ",", "psuccess", "=", "1.", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_get_and_set": [[15, 26], ["lightly.api.bitmask.BitMask.from_bin", "test_BitMask.TestBitMask.assertFalse", "lightly.api.bitmask.BitMask.from_bin.set_kth_bit", "test_BitMask.TestBitMask.assertTrue", "test_BitMask.TestBitMask.assertTrue", "lightly.api.bitmask.BitMask.from_bin.unset_kth_bit", "test_BitMask.TestBitMask.assertFalse", "lightly.api.bitmask.BitMask.from_bin.get_kth_bit", "lightly.api.bitmask.BitMask.from_bin.get_kth_bit", "lightly.api.bitmask.BitMask.from_bin.get_kth_bit", "lightly.api.bitmask.BitMask.from_bin.get_kth_bit"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.unset_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.get_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.get_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.get_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.get_kth_bit"], ["", "def", "test_get_and_set", "(", "self", ")", ":", "\n", "\n", "        ", "mask", "=", "BitMask", ".", "from_bin", "(", "\"0b11110000\"", ")", "\n", "\n", "self", ".", "assertFalse", "(", "mask", ".", "get_kth_bit", "(", "2", ")", ")", "\n", "mask", ".", "set_kth_bit", "(", "2", ")", "\n", "self", ".", "assertTrue", "(", "mask", ".", "get_kth_bit", "(", "2", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "mask", ".", "get_kth_bit", "(", "4", ")", ")", "\n", "mask", ".", "unset_kth_bit", "(", "4", ")", "\n", "self", ".", "assertFalse", "(", "mask", ".", "get_kth_bit", "(", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_large_bitmasks": [[27, 32], ["lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin.to_bin", "test_BitMask.TestBitMask.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_bin"], ["", "def", "test_large_bitmasks", "(", "self", ")", ":", "\n", "        ", "bitstring", "=", "\"0b\"", "+", "\"1\"", "*", "5678", "\n", "mask", "=", "BitMask", ".", "from_bin", "(", "bitstring", ")", "\n", "mask_as_bitstring", "=", "mask", ".", "to_bin", "(", ")", "\n", "self", ".", "assertEqual", "(", "mask_as_bitstring", ",", "bitstring", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_bitmask_from_length": [[33, 37], ["lightly.api.bitmask.BitMask.from_length", "test_BitMask.TestBitMask.assertEqual", "lightly.api.bitmask.BitMask.from_length.to_bin"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_length", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_bin"], ["", "def", "test_bitmask_from_length", "(", "self", ")", ":", "\n", "        ", "length", "=", "4", "\n", "mask", "=", "BitMask", ".", "from_length", "(", "length", ")", "\n", "self", ".", "assertEqual", "(", "mask", ".", "to_bin", "(", ")", ",", "\"0b1111\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_get_and_set_outside_of_range": [[38, 45], ["lightly.api.bitmask.BitMask.from_bin", "test_BitMask.TestBitMask.assertFalse", "lightly.api.bitmask.BitMask.from_bin.set_kth_bit", "test_BitMask.TestBitMask.assertTrue", "lightly.api.bitmask.BitMask.from_bin.get_kth_bit", "lightly.api.bitmask.BitMask.from_bin.get_kth_bit"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.get_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.get_kth_bit"], ["", "def", "test_get_and_set_outside_of_range", "(", "self", ")", ":", "\n", "\n", "        ", "mask", "=", "BitMask", ".", "from_bin", "(", "\"0b11110000\"", ")", "\n", "\n", "self", ".", "assertFalse", "(", "mask", ".", "get_kth_bit", "(", "100", ")", ")", "\n", "mask", ".", "set_kth_bit", "(", "100", ")", "\n", "self", ".", "assertTrue", "(", "mask", ".", "get_kth_bit", "(", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_inverse": [[46, 61], ["int", "int", "lightly.api.bitmask.BitMask", "lightly.api.bitmask.BitMask.invert", "test_BitMask.TestBitMask.assertEqual", "int", "int", "lightly.api.bitmask.BitMask", "lightly.api.bitmask.BitMask.invert", "test_BitMask.TestBitMask.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.invert", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.invert"], ["", "def", "test_inverse", "(", "self", ")", ":", "\n", "# TODO: proper implementation", "\n", "        ", "return", "\n", "\n", "x", "=", "int", "(", "\"0b11110000\"", ",", "2", ")", "\n", "y", "=", "int", "(", "\"0b00001111\"", ",", "2", ")", "\n", "mask", "=", "BitMask", "(", "x", ")", "\n", "mask", ".", "invert", "(", ")", "\n", "self", ".", "assertEqual", "(", "mask", ".", "x", ",", "y", ")", "\n", "\n", "x", "=", "int", "(", "\"0b010101010101010101\"", ",", "2", ")", "\n", "y", "=", "int", "(", "\"0b101010101010101010\"", ",", "2", ")", "\n", "mask", "=", "BitMask", "(", "x", ")", "\n", "mask", ".", "invert", "(", ")", "\n", "self", ".", "assertEqual", "(", "mask", ".", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_store_and_retrieve": [[62, 84], ["int", "lightly.api.bitmask.BitMask", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.set_kth_bit", "lightly.api.bitmask.BitMask.to_hex", "lightly.api.bitmask.BitMask.to_bin", "lightly.api.bitmask.BitMask.from_hex", "lightly.api.bitmask.BitMask.from_bin", "test_BitMask.TestBitMask.assertEqual", "test_BitMask.TestBitMask.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_hex", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_hex", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin"], ["", "def", "test_store_and_retrieve", "(", "self", ")", ":", "\n", "\n", "        ", "x", "=", "int", "(", "\"0b01010100100100100100100010010100100100101001001010101010\"", ",", "2", ")", "\n", "mask", "=", "BitMask", "(", "x", ")", "\n", "mask", ".", "set_kth_bit", "(", "11", ")", "\n", "mask", ".", "set_kth_bit", "(", "22", ")", "\n", "mask", ".", "set_kth_bit", "(", "33", ")", "\n", "mask", ".", "set_kth_bit", "(", "44", ")", "\n", "mask", ".", "set_kth_bit", "(", "55", ")", "\n", "mask", ".", "set_kth_bit", "(", "66", ")", "\n", "mask", ".", "set_kth_bit", "(", "77", ")", "\n", "mask", ".", "set_kth_bit", "(", "88", ")", "\n", "mask", ".", "set_kth_bit", "(", "99", ")", "\n", "\n", "somewhere", "=", "mask", ".", "to_hex", "(", ")", "\n", "somewhere_else", "=", "mask", ".", "to_bin", "(", ")", "\n", "\n", "mask_somewhere", "=", "BitMask", ".", "from_hex", "(", "somewhere", ")", "\n", "mask_somewhere_else", "=", "BitMask", ".", "from_bin", "(", "somewhere_else", ")", "\n", "\n", "self", ".", "assertEqual", "(", "mask", ".", "x", ",", "mask_somewhere", ".", "x", ")", "\n", "self", ".", "assertEqual", "(", "mask", ".", "x", ",", "mask_somewhere_else", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_union": [[85, 90], ["lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin.union", "test_BitMask.TestBitMask.assertEqual", "int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.union"], ["", "def", "test_union", "(", "self", ")", ":", "\n", "        ", "mask_a", "=", "BitMask", ".", "from_bin", "(", "\"0b001\"", ")", "\n", "mask_b", "=", "BitMask", ".", "from_bin", "(", "\"0b100\"", ")", "\n", "mask_a", ".", "union", "(", "mask_b", ")", "\n", "self", ".", "assertEqual", "(", "mask_a", ".", "x", ",", "int", "(", "\"0b101\"", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_intersection": [[91, 96], ["lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin.intersection", "test_BitMask.TestBitMask.assertEqual", "int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.intersection"], ["", "def", "test_intersection", "(", "self", ")", ":", "\n", "        ", "mask_a", "=", "BitMask", ".", "from_bin", "(", "\"0b101\"", ")", "\n", "mask_b", "=", "BitMask", ".", "from_bin", "(", "\"0b100\"", ")", "\n", "mask_a", ".", "intersection", "(", "mask_b", ")", "\n", "self", ".", "assertEqual", "(", "mask_a", ".", "x", ",", "int", "(", "\"0b100\"", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.assert_difference": [[97, 102], ["lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin.difference", "test_BitMask.TestBitMask.assertEqual", "int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.difference"], ["", "def", "assert_difference", "(", "self", ",", "bistring_1", ":", "str", ",", "bitstring_2", ":", "str", ",", "target", ":", "str", ")", ":", "\n", "        ", "mask_a", "=", "BitMask", ".", "from_bin", "(", "bistring_1", ")", "\n", "mask_b", "=", "BitMask", ".", "from_bin", "(", "bitstring_2", ")", "\n", "mask_a", ".", "difference", "(", "mask_b", ")", "\n", "self", ".", "assertEqual", "(", "mask_a", ".", "x", ",", "int", "(", "target", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_differences": [[103, 107], ["test_BitMask.TestBitMask.assert_difference", "test_BitMask.TestBitMask.assert_difference", "test_BitMask.TestBitMask.assert_difference"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.assert_difference", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.assert_difference", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.assert_difference"], ["", "def", "test_differences", "(", "self", ")", ":", "\n", "        ", "self", ".", "assert_difference", "(", "\"0b101\"", ",", "\"0b001\"", ",", "\"0b100\"", ")", "\n", "self", ".", "assert_difference", "(", "\"0b0111\"", ",", "\"0b1100\"", ",", "\"0b0011\"", ")", "\n", "self", ".", "assert_difference", "(", "\"0b10111\"", ",", "\"0b01100\"", ",", "\"0b10011\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.random_bitstring": [[108, 113], ["range", "str", "random.random.randint"], "methods", ["None"], ["", "def", "random_bitstring", "(", "self", ",", "length", ":", "int", ")", ":", "\n", "        ", "bitsting", "=", "'0b'", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "bitsting", "+=", "str", "(", "randint", "(", "0", ",", "1", ")", ")", "\n", "", "return", "bitsting", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_difference_random": [[114, 127], ["random.random.seed", "range", "range", "test_BitMask.TestBitMask.random_bitstring", "test_BitMask.TestBitMask.random_bitstring", "zip", "test_BitMask.TestBitMask.assert_difference"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.random_bitstring", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.random_bitstring", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.assert_difference"], ["", "def", "test_difference_random", "(", "self", ")", ":", "\n", "        ", "seed", "(", "42", ")", "\n", "for", "rep", "in", "range", "(", "10", ")", ":", "\n", "            ", "for", "string_length", "in", "range", "(", "1", ",", "100", ",", "10", ")", ":", "\n", "                ", "bitstring_1", "=", "self", ".", "random_bitstring", "(", "string_length", ")", "\n", "bitstring_2", "=", "self", ".", "random_bitstring", "(", "string_length", ")", "\n", "target", "=", "'0b'", "\n", "for", "bit_1", ",", "bit_2", "in", "zip", "(", "bitstring_1", "[", "2", ":", "]", ",", "bitstring_2", "[", "2", ":", "]", ")", ":", "\n", "                    ", "if", "bit_1", "==", "'1'", "and", "bit_2", "==", "'0'", ":", "\n", "                        ", "target", "+=", "'1'", "\n", "", "else", ":", "\n", "                        ", "target", "+=", "'0'", "\n", "", "", "self", ".", "assert_difference", "(", "bitstring_1", ",", "bitstring_2", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_operator_minus": [[128, 136], ["lightly.api.bitmask.BitMask.from_bin", "copy.deepcopy", "lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin", "test_BitMask.TestBitMask.assertEqual", "test_BitMask.TestBitMask.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin"], ["", "", "", "def", "test_operator_minus", "(", "self", ")", ":", "\n", "        ", "mask_a", "=", "BitMask", ".", "from_bin", "(", "\"0b10111\"", ")", "\n", "mask_a_old", "=", "deepcopy", "(", "mask_a", ")", "\n", "mask_b", "=", "BitMask", ".", "from_bin", "(", "\"0b01100\"", ")", "\n", "mask_target", "=", "BitMask", ".", "from_bin", "(", "\"0b10011\"", ")", "\n", "diff", "=", "mask_a", "-", "mask_b", "\n", "self", ".", "assertEqual", "(", "diff", ",", "mask_target", ")", "\n", "self", ".", "assertEqual", "(", "mask_a_old", ",", "mask_a", ")", "# make sure the original mask is unchanged.", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_equal": [[137, 141], ["lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin", "test_BitMask.TestBitMask.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin"], ["", "def", "test_equal", "(", "self", ")", ":", "\n", "        ", "mask_a", "=", "BitMask", ".", "from_bin", "(", "\"0b101\"", ")", "\n", "mask_b", "=", "BitMask", ".", "from_bin", "(", "\"0b101\"", ")", "\n", "self", ".", "assertEqual", "(", "mask_a", ",", "mask_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_masked_select_from_list": [[142, 159], ["lightly.api.bitmask.BitMask.from_length", "enumerate", "lightly.api.bitmask.BitMask.from_length.masked_select_from_list", "lightly.api.bitmask.BitMask.from_length.invert", "lightly.api.bitmask.BitMask.from_length.masked_select_from_list", "test_BitMask.TestBitMask.assertGreater", "test_BitMask.TestBitMask.assertGreater", "test_BitMask.TestBitMask.assertTrue", "test_BitMask.TestBitMask.assertTrue", "len", "len", "all", "all", "random.random.randint", "lightly.api.bitmask.BitMask.from_length.unset_kth_bit", "lightly.api.bitmask.BitMask.from_length.set_kth_bit", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_length", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.invert", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.unset_kth_bit", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit"], ["", "def", "test_masked_select_from_list", "(", "self", ")", ":", "\n", "        ", "n", "=", "1000", "\n", "list_", "=", "[", "randint", "(", "0", ",", "1", ")", "for", "_", "in", "range", "(", "n", "-", "2", ")", "]", "+", "[", "0", ",", "1", "]", "\n", "mask", "=", "BitMask", ".", "from_length", "(", "n", ")", "\n", "for", "index", ",", "item_", "in", "enumerate", "(", "list_", ")", ":", "\n", "            ", "if", "item_", "==", "0", ":", "\n", "                ", "mask", ".", "unset_kth_bit", "(", "index", ")", "\n", "", "else", ":", "\n", "                ", "mask", ".", "set_kth_bit", "(", "index", ")", "\n", "\n", "", "", "all_ones", "=", "mask", ".", "masked_select_from_list", "(", "list_", ")", "\n", "mask", ".", "invert", "(", "n", ")", "\n", "all_zeros", "=", "mask", ".", "masked_select_from_list", "(", "list_", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "all_ones", ")", ",", "0", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "all_zeros", ")", ",", "0", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "item_", ">", "0", "for", "item_", "in", "all_ones", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "item_", "==", "0", "for", "item_", "in", "all_zeros", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_masked_select_from_list_example": [[161, 166], ["lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin.masked_select_from_list", "test_BitMask.TestBitMask.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list"], ["", "def", "test_masked_select_from_list_example", "(", "self", ")", ":", "\n", "        ", "list_", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "\n", "mask", "=", "BitMask", ".", "from_bin", "(", "'0b001101'", ")", "# expected result is [1, 3, 4]", "\n", "selected", "=", "mask", ".", "masked_select_from_list", "(", "list_", ")", "\n", "self", ".", "assertListEqual", "(", "selected", ",", "[", "1", ",", "3", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_invert": [[168, 186], ["test_BitMask.TestBitMask.random_bitstring", "lightly.api.bitmask.BitMask.from_bin", "lightly.api.bitmask.BitMask.from_bin.invert", "lightly.api.bitmask.BitMask.from_bin.to_bin", "range", "min", "len", "len", "test_BitMask.TestBitMask.assertEqual", "test_BitMask.TestBitMask.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.random_bitstring", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.invert", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_bin"], ["", "def", "test_invert", "(", "self", ")", ":", "\n", "# get random bitstring", "\n", "        ", "length", "=", "10", "\n", "bitstring", "=", "self", ".", "random_bitstring", "(", "10", ")", "\n", "\n", "#get inverse", "\n", "mask", "=", "BitMask", ".", "from_bin", "(", "bitstring", ")", "\n", "mask", ".", "invert", "(", "length", ")", "\n", "inverted", "=", "mask", ".", "to_bin", "(", ")", "\n", "\n", "# remove 0b", "\n", "inverted", "=", "inverted", "[", "2", ":", "]", "\n", "bitstring", "=", "bitstring", "[", "2", ":", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "len", "(", "bitstring", ")", ",", "len", "(", "inverted", ")", ")", ")", ":", "\n", "            ", "if", "bitstring", "[", "-", "i", "-", "1", "]", "==", "'0'", ":", "\n", "                ", "self", ".", "assertEqual", "(", "inverted", "[", "-", "i", "-", "1", "]", ",", "'1'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "assertEqual", "(", "inverted", "[", "-", "i", "-", "1", "]", ",", "'0'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_BitMask.TestBitMask.test_nonzero_bits": [[188, 202], ["lightly.api.bitmask.BitMask.from_bin", "test_BitMask.TestBitMask.assertEqual", "test_BitMask.TestBitMask.assertGreaterEqual", "lightly.api.bitmask.BitMask.from_bin.to_indices", "zip", "lightly.api.bitmask.BitMask.from_bin.set_kth_bit", "test_BitMask.TestBitMask.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_bin", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.to_indices", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.set_kth_bit"], ["", "", "", "def", "test_nonzero_bits", "(", "self", ")", ":", "\n", "\n", "        ", "mask", "=", "BitMask", ".", "from_bin", "(", "\"0b0\"", ")", "\n", "indices", "=", "[", "100", ",", "1000", ",", "10_000", ",", "100_000", "]", "\n", "\n", "self", ".", "assertEqual", "(", "mask", ".", "x", ",", "0", ")", "\n", "for", "index", "in", "indices", ":", "\n", "            ", "mask", ".", "set_kth_bit", "(", "index", ")", "\n", "\n", "", "self", ".", "assertGreaterEqual", "(", "mask", ".", "x", ",", "0", ")", "\n", "also_indices", "=", "mask", ".", "to_indices", "(", ")", "\n", "\n", "for", "i", ",", "j", "in", "zip", "(", "indices", ",", "also_indices", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "i", ",", "j", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.nn_memory_bank.NNMemoryBankModule.__init__": [[38, 40], ["lightly.loss.memory_bank.MemoryBankModule.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "size", ":", "int", "=", "2", "**", "16", ")", ":", "\n", "        ", "super", "(", "NNMemoryBankModule", ",", "self", ")", ".", "__init__", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.nn_memory_bank.NNMemoryBankModule.forward": [[41, 66], ["super().forward", "bank.to().t.to().t.to().t", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.einsum", "torch.argmax", "torch.index_select", "bank.to().t.to().t.to"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["", "def", "forward", "(", "self", ",", "\n", "output", ":", "torch", ".", "Tensor", ",", "\n", "update", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns nearest neighbour of output tensor from memory bank\n\n        Args:\n            output: The torch tensor for which you want the nearest neighbour\n            update: If `True` updated the memory bank by adding output to it\n\n        \"\"\"", "\n", "\n", "output", ",", "bank", "=", "super", "(", "NNMemoryBankModule", ",", "self", ")", ".", "forward", "(", "output", ",", "update", "=", "update", ")", "\n", "bank", "=", "bank", ".", "to", "(", "output", ".", "device", ")", ".", "t", "(", ")", "\n", "\n", "output_normed", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "output", ",", "dim", "=", "1", ")", "\n", "bank_normed", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "bank", ",", "dim", "=", "1", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "einsum", "(", "\"nd,md->nm\"", ",", "output_normed", ",", "bank_normed", ")", "\n", "index_nearest_neighbours", "=", "torch", ".", "argmax", "(", "similarity_matrix", ",", "dim", "=", "1", ")", "\n", "nearest_neighbours", "=", "torch", ".", "index_select", "(", "bank", ",", "dim", "=", "0", ",", "index", "=", "index_nearest_neighbours", ")", "\n", "\n", "return", "nearest_neighbours", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEEncoder.from_vit_encoder": [[39, 58], ["cls"], "methods", ["None"], ["@", "classmethod", "\n", "def", "from_vit_encoder", "(", "cls", ",", "vit_encoder", ":", "vision_transformer", ".", "Encoder", ")", "->", "MAEEncoder", ":", "\n", "        ", "\"\"\"Creates a MAEEncoder from a torchvision ViT encoder.\"\"\"", "\n", "# Create a new instance with dummy values as they will be overwritten", "\n", "#\u00a0by the copied vit_encoder attributes", "\n", "encoder", "=", "cls", "(", "\n", "seq_length", "=", "1", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "1", ",", "\n", "hidden_dim", "=", "1", ",", "\n", "mlp_dim", "=", "1", ",", "\n", "dropout", "=", "0", ",", "\n", "attention_dropout", "=", "0", ",", "\n", ")", "\n", "encoder", ".", "pos_embedding", "=", "vit_encoder", ".", "pos_embedding", "\n", "encoder", ".", "dropout", "=", "vit_encoder", ".", "dropout", "\n", "encoder", ".", "layers", "=", "vit_encoder", ".", "layers", "\n", "encoder", ".", "ln", "=", "vit_encoder", ".", "ln", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEEncoder.forward": [[59, 81], ["masked_autoencoder.MAEEncoder.ln", "lightly.models.utils.get_at_index", "masked_autoencoder.MAEEncoder.layers", "masked_autoencoder.MAEEncoder.dropout"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "idx_keep", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Encode input tokens.\n\n        Args:\n            input:\n                Batch of token sequences.\n            idx_keep:\n                Tensor with shape (batch_size, num_tokens_to_keep) where each\n                entry is an index of the token to keep in the respective batch.\n                If specified, only the indexed tokens will be encoded.\n\n        Returns:\n            Batch of encoded output tokens.\n        \"\"\"", "\n", "input", "=", "input", "+", "self", ".", "pos_embedding", "\n", "if", "idx_keep", "is", "not", "None", ":", "\n", "            ", "input", "=", "utils", ".", "get_at_index", "(", "input", ",", "idx_keep", ")", "\n", "", "return", "self", ".", "ln", "(", "self", ".", "layers", "(", "self", ".", "dropout", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.from_vit": [[126, 150], ["cls", "masked_autoencoder.MAEEncoder.from_vit_encoder"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEEncoder.from_vit_encoder"], ["@", "classmethod", "\n", "def", "from_vit", "(", "cls", ",", "vit", ":", "vision_transformer", ".", "VisionTransformer", ")", "->", "MAEBackbone", ":", "\n", "        ", "\"\"\"Creates a MAEBackbone from a torchvision ViT model.\"\"\"", "\n", "# Create a new instance with dummy values as they will be overwritten", "\n", "#\u00a0by the copied vit_encoder attributes", "\n", "backbone", "=", "cls", "(", "\n", "image_size", "=", "vit", ".", "image_size", ",", "\n", "patch_size", "=", "vit", ".", "patch_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "1", ",", "\n", "hidden_dim", "=", "vit", ".", "hidden_dim", ",", "\n", "mlp_dim", "=", "vit", ".", "mlp_dim", ",", "\n", "dropout", "=", "vit", ".", "dropout", ",", "\n", "attention_dropout", "=", "vit", ".", "attention_dropout", ",", "\n", "num_classes", "=", "vit", ".", "num_classes", ",", "\n", "representation_size", "=", "vit", ".", "representation_size", ",", "\n", "norm_layer", "=", "vit", ".", "norm_layer", ",", "\n", ")", "\n", "backbone", ".", "conv_proj", "=", "vit", ".", "conv_proj", "\n", "backbone", ".", "class_token", "=", "vit", ".", "class_token", "\n", "backbone", ".", "seq_length", "=", "vit", ".", "seq_length", "\n", "backbone", ".", "heads", "=", "vit", ".", "heads", "\n", "backbone", ".", "encoder", "=", "MAEEncoder", ".", "from_vit_encoder", "(", "vit", ".", "encoder", ")", "\n", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.forward": [[151, 175], ["masked_autoencoder.MAEBackbone.encode"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "images", ":", "torch", ".", "Tensor", ",", "\n", "idx_keep", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Returns encoded class tokens from a batch of images.\n\n        Args:\n            images:\n                Tensor with shape (batch_size, channels, image_size, image_size).\n            idx_keep:\n                Tensor with shape (batch_size, num_tokens_to_keep) where each\n                entry is an index of the token to keep in the respective batch.\n                If specified, only the indexed tokens will be passed to the\n                encoder.\n        \n        Returns:\n            Tensor with shape (batch_size, hidden_dim) containing the \n            encoded class token for every image.\n\n        \"\"\"", "\n", "out", "=", "self", ".", "encode", "(", "images", ",", "idx_keep", ")", "\n", "class_token", "=", "out", "[", ":", ",", "0", "]", "\n", "return", "class_token", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode": [[176, 200], ["masked_autoencoder.MAEBackbone.images_to_tokens", "lightly.models.utils.prepend_class_token", "masked_autoencoder.MAEBackbone.encoder"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.images_to_tokens", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.prepend_class_token"], ["", "def", "encode", "(", "\n", "self", ",", "\n", "images", ":", "torch", ".", "Tensor", ",", "\n", "idx_keep", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Returns encoded class and patch tokens from images.\n\n        Args:\n            images:\n                Tensor with shape (batch_size, channels, image_size, image_size).\n            idx_keep:\n                Tensor with shape (batch_size, num_tokens_to_keep) where each\n                entry is an index of the token to keep in the respective batch.\n                If specified, only the indexed tokens will be passed to the\n                encoder.\n        \n        Returns:\n            Tensor with shape (batch_size, sequence_length, hidden_dim) \n            containing the encoded class and patch tokens for every image.\n\n        \"\"\"", "\n", "out", "=", "self", ".", "images_to_tokens", "(", "images", ")", "\n", "out", "=", "utils", ".", "prepend_class_token", "(", "out", ",", "self", ".", "class_token", ")", "\n", "return", "self", ".", "encoder", "(", "out", ",", "idx_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.images_to_tokens": [[201, 214], ["masked_autoencoder.MAEBackbone.conv_proj", "masked_autoencoder.MAEBackbone.flatten().transpose", "masked_autoencoder.MAEBackbone.flatten"], "methods", ["None"], ["", "def", "images_to_tokens", "(", "self", ",", "images", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Converts images into patch tokens.\n        \n        Args:\n            images:\n                Tensor with shape (batch_size, channels, image_size, image_size).\n        \n        Returns:\n            Tensor with shape (batch_size, sequence_length - 1, hidden_dim)\n            containing the patch tokens.\n        \"\"\"", "\n", "x", "=", "self", ".", "conv_proj", "(", "images", ")", "\n", "return", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.__init__": [[248, 273], ["functools.partial", "torchvision.models.vision_transformer.Encoder.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "seq_length", ":", "int", ",", "\n", "num_layers", ":", "int", ",", "\n", "num_heads", ":", "int", ",", "\n", "embed_input_dim", ":", "int", ",", "\n", "hidden_dim", ":", "int", ",", "\n", "mlp_dim", ":", "int", ",", "\n", "out_dim", ":", "int", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "attention_dropout", ":", "float", "=", "0.0", ",", "\n", "norm_layer", ":", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seq_length", "=", "seq_length", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "mlp_dim", "=", "mlp_dim", ",", "\n", "dropout", "=", "dropout", ",", "\n", "attention_dropout", "=", "attention_dropout", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", "\n", "self", ".", "decoder_embed", "=", "nn", ".", "Linear", "(", "embed_input_dim", ",", "hidden_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "prediction_head", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.forward": [[274, 288], ["masked_autoencoder.MAEDecoder.embed", "masked_autoencoder.MAEDecoder.decode", "masked_autoencoder.MAEDecoder.predict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.predict"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Returns predicted pixel values from encoded tokens.\n\n        Args:\n            input:\n                Tensor with shape (batch_size, seq_length, embed_input_dim).\n\n        Returns:\n            Tensor with shape (batch_size, seq_length, out_dim).\n\n        \"\"\"", "\n", "out", "=", "self", ".", "embed", "(", "input", ")", "\n", "out", "=", "self", ".", "decode", "(", "out", ")", "\n", "return", "self", ".", "predict", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.embed": [[289, 306], ["masked_autoencoder.MAEDecoder.decoder_embed"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Embeds encoded input tokens into decoder token dimension.\n\n        This is a single linear layer that changes the token dimension from\n        embed_input_dim to hidden_dim.\n\n        Args:\n            input:\n                Tensor with shape (batch_size, seq_length, embed_input_dim)\n                containing the encoded tokens.\n\n        Returns:\n            Tensor with shape (batch_size, seq_length, hidden_dim) containing\n            the embedded tokens.\n\n        \"\"\"", "\n", "return", "self", ".", "decoder_embed", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode": [[307, 321], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "decode", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Forward pass through the decoder transformer.\n\n        Args:\n            input:\n                Tensor with shape (batch_size, seq_length, hidden_dim) containing\n                the encoded tokens.\n\n        Returns:\n            Tensor with shape (batch_size, seq_length, hidden_dim) containing\n            the decoded tokens.\n\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.predict": [[322, 336], ["masked_autoencoder.MAEDecoder.prediction_head"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Predics pixel values from decoded tokens.\n\n        Args:\n            input:\n                Tensor with shape (batch_size, seq_length, hidden_dim) containing\n                the decoded tokens.\n\n        Returns:\n            Tensor with shape (batch_size, seq_length, out_dim) containing\n            predictions for each token.\n\n        \"\"\"", "\n", "return", "self", ".", "prediction_head", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.ProjectionHead.__init__": [[34, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "layers.append", "bool", "torch.Linear", "torch.Linear", "layers.append", "layers.append"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "blocks", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "Optional", "[", "nn", ".", "Module", "]", ",", "Optional", "[", "nn", ".", "Module", "]", "]", "]", "\n", ")", ":", "\n", "        ", "super", "(", "ProjectionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "input_dim", ",", "output_dim", ",", "batch_norm", ",", "non_linearity", "in", "blocks", ":", "\n", "            ", "use_bias", "=", "not", "bool", "(", "batch_norm", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", ".", "append", "(", "batch_norm", ")", "\n", "", "if", "non_linearity", ":", "\n", "                ", "layers", ".", "append", "(", "non_linearity", ")", "\n", "", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.ProjectionHead.forward": [[50, 59], ["heads.ProjectionHead.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Computes one forward pass through the projection head.\n\n        Args:\n            x:\n                Input of shape bsz x num_ftrs.\n\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.BarlowTwinsProjectionHead.__init__": [[72, 80], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "8192", ",", "\n", "output_dim", ":", "int", "=", "8192", ")", ":", "\n", "        ", "super", "(", "BarlowTwinsProjectionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.BYOLProjectionHead.__init__": [[93, 100], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "4096", ",", "\n", "output_dim", ":", "int", "=", "256", ")", ":", "\n", "        ", "super", "(", "BYOLProjectionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.BYOLPredictionHead.__init__": [[113, 120], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "256", ",", "\n", "hidden_dim", ":", "int", "=", "4096", ",", "\n", "output_dim", ":", "int", "=", "256", ")", ":", "\n", "        ", "super", "(", "BYOLPredictionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.MoCoProjectionHead.__init__": [[133, 140], ["heads.ProjectionHead.__init__", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "2048", ",", "\n", "output_dim", ":", "int", "=", "128", ")", ":", "\n", "        ", "super", "(", "MoCoProjectionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "None", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.NNCLRProjectionHead.__init__": [[155, 163], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "2048", ",", "\n", "output_dim", ":", "int", "=", "256", ")", ":", "\n", "        ", "super", "(", "NNCLRProjectionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.NNCLRPredictionHead.__init__": [[176, 183], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "256", ",", "\n", "hidden_dim", ":", "int", "=", "4096", ",", "\n", "output_dim", ":", "int", "=", "256", ")", ":", "\n", "        ", "super", "(", "NNCLRPredictionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SimCLRProjectionHead.__init__": [[195, 202], ["heads.ProjectionHead.__init__", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "2048", ",", "\n", "output_dim", ":", "int", "=", "128", ")", ":", "\n", "        ", "super", "(", "SimCLRProjectionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "None", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SimSiamProjectionHead.__init__": [[215, 223], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "2048", ",", "\n", "output_dim", ":", "int", "=", "2048", ")", ":", "\n", "        ", "super", "(", "SimSiamProjectionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "nn", ".", "BatchNorm1d", "(", "output_dim", ",", "affine", "=", "False", ")", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SimSiamPredictionHead.__init__": [[235, 242], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "512", ",", "\n", "output_dim", ":", "int", "=", "2048", ")", ":", "\n", "        ", "super", "(", "SimSiamPredictionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVProjectionHead.__init__": [[250, 257], ["heads.ProjectionHead.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "2048", ",", "\n", "output_dim", ":", "int", "=", "128", ")", ":", "\n", "        ", "super", "(", "SwaVProjectionHead", ",", "self", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "output_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.__init__": [[279, 284], ["heads.ProjectionHead.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", "=", "128", ",", "\n", "n_prototypes", ":", "int", "=", "3000", ")", ":", "\n", "        ", "super", "(", "SwaVPrototypes", ",", "self", ")", ".", "__init__", "(", "[", "]", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_prototypes", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize": [[285, 288], ["lightly.models.utils.normalize_weight"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.normalize_weight"], ["", "def", "normalize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Normalizes the prototypes so that they are on the unit sphere.\"\"\"", "\n", "utils", ".", "normalize_weight", "(", "self", ".", "layers", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.DINOProjectionHead.__init__": [[323, 347], ["heads.ProjectionHead.__init__", "heads.DINOProjectionHead.apply", "torch.utils.weight_norm", "torch.utils.weight_norm", "heads.DINOProjectionHead.last_layer.weight_g.data.fill_", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "2048", ",", "\n", "bottleneck_dim", ":", "int", "=", "256", ",", "\n", "output_dim", ":", "int", "=", "65536", ",", "\n", "batch_norm", ":", "bool", "=", "False", ",", "\n", "freeze_last_layer", ":", "int", "=", "-", "1", ",", "\n", "norm_last_layer", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "if", "batch_norm", "else", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "[", "\n", "(", "input_dim", ",", "hidden_dim", ",", "bn", ",", "nn", ".", "GELU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "hidden_dim", ",", "bn", ",", "nn", ".", "GELU", "(", ")", ")", ",", "\n", "(", "hidden_dim", ",", "bottleneck_dim", ",", "None", ",", "None", ")", ",", "\n", "]", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "freeze_last_layer", "=", "freeze_last_layer", "\n", "self", ".", "last_layer", "=", "nn", ".", "utils", ".", "weight_norm", "(", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "output_dim", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "last_layer", ".", "weight_g", ".", "data", ".", "fill_", "(", "1", ")", "\n", "# Option to normalize last layer. ", "\n", "if", "norm_last_layer", ":", "\n", "            ", "self", ".", "last_layer", ".", "weight_g", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.DINOProjectionHead.cancel_last_layer_gradients": [[348, 356], ["heads.DINOProjectionHead.last_layer.parameters"], "methods", ["None"], ["", "", "def", "cancel_last_layer_gradients", "(", "self", ",", "current_epoch", ":", "int", ")", ":", "\n", "        ", "\"\"\"Cancel last layer gradients to stabilize the training.\n        \n        \"\"\"", "\n", "if", "current_epoch", ">=", "self", ".", "freeze_last_layer", ":", "\n", "            ", "return", "\n", "", "for", "param", "in", "self", ".", "last_layer", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.DINOProjectionHead._init_weights": [[357, 371], ["isinstance", "lightly.models.utils._no_grad_trunc_normal", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils._no_grad_trunc_normal"], ["", "", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\"Initializes layers with a truncated normal distribution.\n        \n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "utils", ".", "_no_grad_trunc_normal", "(", "\n", "module", ".", "weight", ",", "\n", "mean", "=", "0", ",", "\n", "std", "=", "0.2", ",", "\n", "a", "=", "-", "2", ",", "\n", "b", "=", "2", ",", "\n", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.DINOProjectionHead.forward": [[372, 381], ["heads.DINOProjectionHead.layers", "torch.functional.normalize", "torch.functional.normalize", "heads.DINOProjectionHead.last_layer"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["", "", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Computes one forward pass through the head.\n        \n        \"\"\"", "\n", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "# l2 normalization", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEEncoder._vit": [[12, 14], ["torchvision.models.vision_transformer.vit_b_32"], "methods", ["None"], ["    ", "def", "_vit", "(", "self", ")", ":", "\n", "        ", "return", "torchvision", ".", "models", ".", "vision_transformer", ".", "vit_b_32", "(", "progress", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEEncoder.test_from_vit": [[15, 17], ["MAEEncoder.from_vit_encoder", "test_masked_autoencoder.TestMAEEncoder._vit"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEEncoder.from_vit_encoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone._vit"], ["", "def", "test_from_vit", "(", "self", ")", ":", "\n", "        ", "MAEEncoder", ".", "from_vit_encoder", "(", "self", ".", "_vit", "(", ")", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEEncoder._test_forward": [[18, 39], ["torch.manual_seed", "test_masked_autoencoder.TestMAEEncoder._vit", "MAEEncoder.from_vit_encoder().to", "torch.rand().to", "lightly.models.utils.random_token_mask", "MAEEncoder.from_vit_encoder", "torch.rand", "test_masked_autoencoder.TestMAEEncoder.subTest", "MAEEncoder.from_vit_encoder().to.", "list", "test_masked_autoencoder.TestMAEEncoder.assertListEqual", "test_masked_autoencoder.TestMAEEncoder.assertTrue", "list", "torch.all", "torch.not_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone._vit", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEEncoder.from_vit_encoder"], ["", "def", "_test_forward", "(", "self", ",", "device", ",", "batch_size", "=", "8", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "vit", "=", "self", ".", "_vit", "(", ")", "\n", "encoder", "=", "MAEEncoder", ".", "from_vit_encoder", "(", "vit", ".", "encoder", ")", ".", "to", "(", "device", ")", "\n", "tokens", "=", "torch", ".", "rand", "(", "batch_size", ",", "vit", ".", "seq_length", ",", "vit", ".", "hidden_dim", ")", ".", "to", "(", "device", ")", "\n", "_idx_keep", ",", "_", "=", "utils", ".", "random_token_mask", "(", "\n", "size", "=", "(", "batch_size", ",", "vit", ".", "seq_length", ")", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "for", "idx_keep", "in", "[", "None", ",", "_idx_keep", "]", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "idx_keep", "=", "idx_keep", ")", ":", "\n", "                ", "out", "=", "encoder", "(", "tokens", ",", "idx_keep", ")", "\n", "\n", "# output shape must be correct", "\n", "expected_shape", "=", "list", "(", "tokens", ".", "shape", ")", "\n", "if", "idx_keep", "is", "not", "None", ":", "\n", "                    ", "expected_shape", "[", "1", "]", "=", "idx_keep", ".", "shape", "[", "1", "]", "\n", "", "self", ".", "assertListEqual", "(", "list", "(", "out", ".", "shape", ")", ",", "expected_shape", ")", "\n", "\n", "#\u00a0output must have reasonable numbers", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "not_equal", "(", "out", ",", "torch", ".", "inf", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEEncoder.test_forward": [[40, 42], ["test_masked_autoencoder.TestMAEEncoder._test_forward", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder._test_forward"], ["", "", "", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEEncoder.test_forward_cuda": [[43, 46], ["unittest.skipUnless", "test_masked_autoencoder.TestMAEEncoder._test_forward", "torch.cuda.is_available", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder._test_forward"], ["", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"Cuda not available.\"", ")", "\n", "def", "test_forward_cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone._vit": [[50, 52], ["torchvision.models.vision_transformer.vit_b_32"], "methods", ["None"], ["    ", "def", "_vit", "(", "self", ")", ":", "\n", "        ", "return", "torchvision", ".", "models", ".", "vision_transformer", ".", "vit_b_32", "(", "progress", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone.test_from_vit": [[53, 55], ["MAEBackbone.from_vit", "test_masked_autoencoder.TestMAEBackbone._vit"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.from_vit", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone._vit"], ["", "def", "test_from_vit", "(", "self", ")", ":", "\n", "        ", "MAEBackbone", ".", "from_vit", "(", "self", ".", "_vit", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone._test_forward": [[56, 75], ["torch.manual_seed", "test_masked_autoencoder.TestMAEBackbone._vit", "MAEBackbone.from_vit().to", "torch.rand().to", "lightly.models.utils.random_token_mask", "MAEBackbone.from_vit", "torch.rand", "test_masked_autoencoder.TestMAEBackbone.subTest", "MAEBackbone.from_vit().to.", "test_masked_autoencoder.TestMAEBackbone.assertListEqual", "test_masked_autoencoder.TestMAEBackbone.assertTrue", "list", "torch.all", "torch.not_equal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone._vit", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.from_vit"], ["", "def", "_test_forward", "(", "self", ",", "device", ",", "batch_size", "=", "8", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "vit", "=", "self", ".", "_vit", "(", ")", "\n", "backbone", "=", "MAEBackbone", ".", "from_vit", "(", "vit", ")", ".", "to", "(", "device", ")", "\n", "images", "=", "torch", ".", "rand", "(", "batch_size", ",", "3", ",", "vit", ".", "image_size", ",", "vit", ".", "image_size", ")", ".", "to", "(", "device", ")", "\n", "_idx_keep", ",", "_", "=", "utils", ".", "random_token_mask", "(", "\n", "size", "=", "(", "batch_size", ",", "vit", ".", "seq_length", ")", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "for", "idx_keep", "in", "[", "None", ",", "_idx_keep", "]", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "idx_keep", "=", "idx_keep", ")", ":", "\n", "                ", "class_tokens", "=", "backbone", "(", "images", ",", "idx_keep", ")", "\n", "\n", "# output shape must be correct", "\n", "expected_shape", "=", "[", "batch_size", ",", "vit", ".", "hidden_dim", "]", "\n", "self", ".", "assertListEqual", "(", "list", "(", "class_tokens", ".", "shape", ")", ",", "expected_shape", ")", "\n", "\n", "#\u00a0output must have reasonable numbers", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "not_equal", "(", "class_tokens", ",", "torch", ".", "inf", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone.test_forward": [[76, 78], ["test_masked_autoencoder.TestMAEBackbone._test_forward", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder._test_forward"], ["", "", "", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEBackbone.test_forward_cuda": [[79, 82], ["unittest.skipUnless", "test_masked_autoencoder.TestMAEBackbone._test_forward", "torch.cuda.is_available", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder._test_forward"], ["", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"Cuda not available.\"", ")", "\n", "def", "test_forward_cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder.test_init": [[86, 95], ["MAEDecoder"], "methods", ["None"], ["    ", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "return", "MAEDecoder", "(", "\n", "seq_length", "=", "50", ",", "\n", "num_layers", "=", "2", ",", "\n", "num_heads", "=", "4", ",", "\n", "embed_input_dim", "=", "128", ",", "\n", "hidden_dim", "=", "256", ",", "\n", "mlp_dim", "=", "256", "*", "4", ",", "\n", "out_dim", "=", "3", "*", "32", "**", "2", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder._test_forward": [[97, 120], ["torch.manual_seed", "MAEDecoder().to", "torch.rand().to", "MAEDecoder().to.", "test_masked_autoencoder.TestMAEDecoder.assertListEqual", "test_masked_autoencoder.TestMAEDecoder.assertTrue", "list", "torch.all", "MAEDecoder", "torch.rand", "torch.not_equal"], "methods", ["None"], ["", "def", "_test_forward", "(", "self", ",", "device", ",", "batch_size", "=", "8", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "seq_length", "=", "50", "\n", "embed_input_dim", "=", "128", "\n", "out_dim", "=", "3", "*", "32", "**", "2", "\n", "decoder", "=", "MAEDecoder", "(", "\n", "seq_length", "=", "seq_length", ",", "\n", "num_layers", "=", "2", ",", "\n", "num_heads", "=", "4", ",", "\n", "embed_input_dim", "=", "embed_input_dim", ",", "\n", "hidden_dim", "=", "256", ",", "\n", "mlp_dim", "=", "256", "*", "4", ",", "\n", "out_dim", "=", "out_dim", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "tokens", "=", "torch", ".", "rand", "(", "batch_size", ",", "seq_length", ",", "embed_input_dim", ")", ".", "to", "(", "device", ")", "\n", "predictions", "=", "decoder", "(", "tokens", ")", "\n", "\n", "# output shape must be correct", "\n", "expected_shape", "=", "[", "batch_size", ",", "seq_length", ",", "out_dim", "]", "\n", "self", ".", "assertListEqual", "(", "list", "(", "predictions", ".", "shape", ")", ",", "expected_shape", ")", "\n", "\n", "#\u00a0output must have reasonable numbers", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "torch", ".", "not_equal", "(", "predictions", ",", "torch", ".", "inf", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder.test_forward": [[121, 123], ["test_masked_autoencoder.TestMAEDecoder._test_forward", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder._test_forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder.test_forward_cuda": [[124, 127], ["unittest.skipUnless", "test_masked_autoencoder.TestMAEDecoder._test_forward", "torch.cuda.is_available", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.test_masked_autoencoder.TestMAEDecoder._test_forward"], ["", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"Cuda not available.\"", ")", "\n", "def", "test_forward_cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_forward", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.__init__": [[21, 48], ["pytorch_lightning.LightningModule.__init__", "os.getcwd", "_base.BaseEmbedding.init_checkpoint_callback"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.init_checkpoint_callback"], ["def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "dataloader", ",", "\n", "scheduler", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            model: (torch.nn.Module)\n            criterion: (torch.nn.Module)\n            optimizer: (torch.optim.Optimizer)\n            dataloader: (torch.utils.data.DataLoader)\n\n        \"\"\"", "\n", "\n", "super", "(", "BaseEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "checkpoint", "=", "None", "\n", "self", ".", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "self", ".", "checkpoint_callback", "=", "None", "\n", "self", ".", "init_checkpoint_callback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.forward": [[49, 51], ["_base.BaseEmbedding.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x0", ",", "x1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.training_step": [[52, 63], ["_base.BaseEmbedding.", "_base.BaseEmbedding.criterion", "_base.BaseEmbedding.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\n", "# get the two image transformations", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "# forward pass of the transformations", "\n", "y0", ",", "y1", "=", "self", "(", "x0", ",", "x1", ")", "\n", "# calculate loss", "\n", "loss", "=", "self", ".", "criterion", "(", "y0", ",", "y1", ")", "\n", "# log loss and return", "\n", "self", ".", "log", "(", "'loss'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.configure_optimizers": [[64, 69], ["None"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "scheduler", "is", "None", ":", "\n", "            ", "return", "self", ".", "optimizer", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "optimizer", "]", ",", "[", "self", ".", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.train_dataloader": [[70, 72], ["None"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.train_embedding": [[73, 94], ["pytorch_lightning.Trainer", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer.fit", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.PCA.fit"], ["", "def", "train_embedding", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Train the model on the provided dataset.\n\n        Args:\n            **kwargs: pylightning_trainer arguments, examples include:\n                min_epochs: (int) Minimum number of epochs to train\n                max_epochs: (int) Maximum number of epochs to train\n                gpus: (int) number of gpus to use\n                weights_summary: (str) how to print a summary of the model and weights (number, size)\n\n        Returns:\n            A trained encoder, ready for embedding datasets.\n\n        \"\"\"", "\n", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "**", "kwargs", ",", "callbacks", "=", "[", "self", ".", "checkpoint_callback", "]", ")", "\n", "\n", "trainer", ".", "fit", "(", "self", ")", "\n", "\n", "self", ".", "checkpoint", "=", "self", ".", "checkpoint_callback", ".", "best_model_path", "\n", "self", ".", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cwd", ",", "self", ".", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.embed": [[95, 100], ["NotImplementedError"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Must be implemented by classes which inherit from BaseEmbedding.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._base.BaseEmbedding.init_checkpoint_callback": [[101, 137], ["lightly.embedding._callback.CustomModelCheckpoint", "pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint", "pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint"], "methods", ["None"], ["", "def", "init_checkpoint_callback", "(", "self", ",", "\n", "save_last", "=", "False", ",", "\n", "save_top_k", "=", "0", ",", "\n", "monitor", "=", "'loss'", ",", "\n", "dirpath", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initializes the checkpoint callback.\n\n        Args:\n            save_last:\n                Whether or not to save the checkpoint of the last epoch.\n            save_top_k:\n                Save the top_k model checkpoints.\n            monitor:\n                Which quantity to monitor.\n            dirpath:\n                Where to save the checkpoint.\n\n        \"\"\"", "\n", "\n", "if", "pl", ".", "__version__", "[", ":", "3", "]", "in", "[", "'1.0'", ",", "'1.1'", ",", "'1.2'", "]", ":", "\n", "# initialize custom model checkpoint", "\n", "            ", "self", ".", "checkpoint_callback", "=", "CustomModelCheckpoint", "(", ")", "\n", "self", ".", "checkpoint_callback", ".", "save_last", "=", "save_last", "\n", "self", ".", "checkpoint_callback", ".", "save_top_k", "=", "save_top_k", "\n", "self", ".", "checkpoint_callback", ".", "monitor", "=", "monitor", "\n", "\n", "dirpath", "=", "self", ".", "cwd", "if", "dirpath", "is", "None", "else", "dirpath", "\n", "self", ".", "checkpoint_callback", ".", "dirpath", "=", "dirpath", "\n", "", "else", ":", "\n", "            ", "self", ".", "checkpoint_callback", "=", "ModelCheckpoint", "(", "\n", "dirpath", "=", "self", ".", "cwd", "if", "dirpath", "is", "None", "else", "dirpath", ",", "\n", "filename", "=", "'lightly_epoch_{epoch:d}'", ",", "\n", "save_last", "=", "save_last", ",", "\n", "save_top_k", "=", "save_top_k", ",", "\n", "monitor", "=", "monitor", ",", "\n", "auto_insert_metric_name", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._callback.CustomModelCheckpoint.__init__": [[17, 22], ["pytorch_lightning.ModelCheckpoint.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "checkpoint_fmt", ":", "str", "=", "'lightly_epoch_{epoch}.ckpt'", ")", ":", "\n", "# use default initialization to prevent compatability", "\n", "# issues in case pytorch_lightning changes attributes", "\n", "        ", "super", "(", "CustomModelCheckpoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "checkpoint_fmt", "=", "checkpoint_fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding._callback.CustomModelCheckpoint.format_checkpoint_name": [[23, 35], ["_callback.CustomModelCheckpoint.checkpoint_fmt.format"], "methods", ["None"], ["", "def", "format_checkpoint_name", "(", "\n", "self", ",", "epoch", ":", "int", ",", "metrics", ":", "Dict", "[", "str", ",", "Any", "]", ",", "ver", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"Formats the format string to an actual checkpoint name.\n\n        Args:\n            epoch:\n                Training epoch of the checkpoint.\n\n        \"\"\"", "\n", "# use custom template to prevent the = in the checkpoint name", "\n", "return", "self", ".", "checkpoint_fmt", ".", "format", "(", "epoch", "=", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.__init__": [[63, 74], ["lightly.embedding._base.BaseEmbedding.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "dataloader", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", ",", "\n", "scheduler", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "SelfSupervisedEmbedding", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "criterion", ",", "optimizer", ",", "dataloader", ",", "scheduler", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed": [[76, 172], ["embedding.SelfSupervisedEmbedding.model.eval", "lightly._is_prefetch_generator_available", "tqdm.tqdm.tqdm", "dataset.get_filenames", "lightly.utils.reordering.sort_items_by_keys", "lightly.utils.reordering.sort_items_by_keys", "numpy.stack", "numpy.stack", "BackgroundGenerator", "torch.no_grad", "time.time", "torch.cat", "torch.cat", "embeddings.cpu().numpy.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy.cpu().numpy", "len", "image_batch.to.to.to", "label_batch.clone.clone.clone", "time.time", "embedding.SelfSupervisedEmbedding.model.backbone", "embedding_batch.detach().reshape.detach().reshape.detach().reshape", "embeddings.cpu().numpy.cpu().numpy.append", "labels.cpu().numpy.cpu().numpy.append", "time.time", "tqdm.tqdm.tqdm.set_description", "time.time", "tqdm.tqdm.tqdm.update", "embeddings.cpu().numpy.cpu().numpy.cpu", "labels.cpu().numpy.cpu().numpy.cpu", "embedding_batch.detach().reshape.detach().reshape.detach"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.reordering.sort_items_by_keys", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.reordering.sort_items_by_keys"], ["", "def", "embed", "(", "self", ",", "\n", "dataloader", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", ",", "\n", "device", ":", "torch", ".", "device", "=", "None", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"Embeds images in a vector space.\n\n        Args:\n            dataloader:\n                A PyTorch dataloader.\n            device:\n                Selected device (`cpu`, `cuda`, see PyTorch documentation)\n\n        Returns:\n            Tuple of (embeddings, labels, filenames) ordered by the\n            samples in the dataset of the dataloader.\n                embeddings:\n                    Embedding of shape (n_samples, embedding_feature_size).\n                    One embedding for each sample.\n                labels:\n                    Labels of shape (n_samples, ).\n                filenames:\n                    The filenames from dataloader.dataset.get_filenames().\n\n\n        Examples:\n            >>> # embed images in vector space\n            >>> embeddings, labels, fnames = encoder.embed(dataloader)\n\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "embeddings", ",", "labels", ",", "filenames", "=", "None", ",", "None", ",", "[", "]", "\n", "\n", "dataset", "=", "dataloader", ".", "dataset", "\n", "if", "lightly", ".", "_is_prefetch_generator_available", "(", ")", ":", "\n", "            ", "dataloader", "=", "BackgroundGenerator", "(", "dataloader", ",", "max_prefetch", "=", "3", ")", "\n", "\n", "", "pbar", "=", "tqdm", "(", "\n", "total", "=", "len", "(", "dataset", ")", ",", "\n", "unit", "=", "'imgs'", "\n", ")", "\n", "\n", "efficiency", "=", "0.0", "\n", "embeddings", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "start_timepoint", "=", "time", ".", "time", "(", ")", "\n", "for", "(", "image_batch", ",", "label_batch", ",", "filename_batch", ")", "in", "dataloader", ":", "\n", "\n", "                ", "batch_size", "=", "image_batch", ".", "shape", "[", "0", "]", "\n", "\n", "# the following 2 lines are needed to prevent a file handler leak,", "\n", "# see https://github.com/lightly-ai/lightly/pull/676", "\n", "image_batch", "=", "image_batch", ".", "to", "(", "device", ")", "\n", "label_batch", "=", "label_batch", ".", "clone", "(", ")", "\n", "\n", "filenames", "+=", "[", "*", "filename_batch", "]", "\n", "\n", "prepared_timepoint", "=", "time", ".", "time", "(", ")", "\n", "\n", "embedding_batch", "=", "self", ".", "model", ".", "backbone", "(", "image_batch", ")", "\n", "embedding_batch", "=", "embedding_batch", ".", "detach", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "embeddings", ".", "append", "(", "embedding_batch", ")", "\n", "labels", ".", "append", "(", "label_batch", ")", "\n", "\n", "finished_timepoint", "=", "time", ".", "time", "(", ")", "\n", "\n", "data_loading_time", "=", "prepared_timepoint", "-", "start_timepoint", "\n", "inference_time", "=", "finished_timepoint", "-", "prepared_timepoint", "\n", "total_batch_time", "=", "data_loading_time", "+", "inference_time", "\n", "\n", "efficiency", "=", "inference_time", "/", "total_batch_time", "\n", "pbar", ".", "set_description", "(", "\"Compute efficiency: {:.2f}\"", ".", "format", "(", "efficiency", ")", ")", "\n", "start_timepoint", "=", "time", ".", "time", "(", ")", "\n", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "\n", "", "embeddings", "=", "torch", ".", "cat", "(", "embeddings", ",", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "0", ")", "\n", "\n", "embeddings", "=", "embeddings", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "sorted_filenames", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "sorted_embeddings", "=", "sort_items_by_keys", "(", "\n", "filenames", ",", "embeddings", ",", "sorted_filenames", "\n", ")", "\n", "sorted_labels", "=", "sort_items_by_keys", "(", "\n", "filenames", ",", "labels", ",", "sorted_filenames", "\n", ")", "\n", "embeddings", "=", "np", ".", "stack", "(", "sorted_embeddings", ")", "\n", "labels", "=", "np", ".", "stack", "(", "sorted_labels", ")", "\n", "\n", "return", "embeddings", ",", "labels", ",", "sorted_filenames", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.test_embedding.TestLightlyDataset.setUp": [[18, 27], ["test_embedding.TestLightlyDataset.create_dataset_no_subdir", "hydra.experimental.initialize", "hydra.experimental.compose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_dataset_no_subdir"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "folder_path", ",", "self", ".", "sample_names", "=", "self", ".", "create_dataset_no_subdir", "(", "10", ")", "\n", "with", "initialize", "(", "config_path", "=", "'../../lightly/cli/config'", ",", "job_name", "=", "'test_app'", ")", ":", "\n", "            ", "self", ".", "cfg", "=", "compose", "(", "\n", "config_name", "=", "'config'", ",", "\n", "overrides", "=", "[", "\n", "'token=\"123\"'", ",", "\n", "f'input_dir={self.folder_path}'", ",", "\n", "'trainer.max_epochs=0'", ",", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.test_embedding.TestLightlyDataset.create_dataset_no_subdir": [[30, 40], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "os.path.join", "data[].save", "range"], "methods", ["None"], ["", "", "def", "create_dataset_no_subdir", "(", "self", ",", "n_samples", ":", "int", ")", "->", "Tuple", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_samples", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_samples", ")", "]", "\n", "for", "sample_idx", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "data", "=", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "", "return", "tmp_dir", ",", "sample_names", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.test_embedding.TestLightlyDataset.test_embed_correct_order": [[41, 74], ["torchvision.transforms.ToTensor", "lightly.data.LightlyDataset", "lightly.cli._helpers.get_model_from_config", "torch.cuda.is_available", "torch.manual_seed", "torch.utils.data.DataLoader", "lightly.cli._helpers.get_model_from_config.embed", "torch.manual_seed", "torch.utils.data.DataLoader", "lightly.cli._helpers.get_model_from_config.embed", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "test_embedding.TestLightlyDataset.assertListEqual", "test_embedding.TestLightlyDataset.assertListEqual", "torch.device", "torch.device", "lightly.data.LightlyDataset.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.cli._helpers.get_model_from_config", "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "def", "test_embed_correct_order", "(", "self", ")", ":", "\n", "# get dataset and encoder", "\n", "        ", "transform", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "dataset", "=", "LightlyDataset", "(", "self", ".", "folder_path", ",", "transform", "=", "transform", ")", "\n", "encoder", "=", "get_model_from_config", "(", "self", ".", "cfg", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "manual_seed", "(", "42", ")", "\n", "dataloader_1_worker", "=", "DataLoader", "(", "\n", "dataset", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "batch_size", "=", "4", "\n", ")", "\n", "embeddings_1_worker", ",", "labels_1_worker", ",", "filenames_1_worker", "=", "encoder", ".", "embed", "(", "\n", "dataloader_1_worker", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "manual_seed", "(", "43", ")", "\n", "dataloader_4_worker", "=", "DataLoader", "(", "\n", "dataset", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "batch_size", "=", "4", "\n", ")", "\n", "embeddings_4_worker", ",", "labels_4_worker", ",", "filenames_4_worker", "=", "encoder", ".", "embed", "(", "\n", "dataloader_4_worker", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "embeddings_1_worker", ",", "embeddings_4_worker", ",", "rtol", "=", "1e-5", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "labels_1_worker", ",", "labels_4_worker", ",", "rtol", "=", "1e-5", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "filenames_1_worker", ",", "filenames_4_worker", ")", "\n", "self", ".", "assertListEqual", "(", "filenames_1_worker", ",", "dataset", ".", "get_filenames", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box": [[8, 14], ["lightly.active_learning.utils.bounding_box.BoundingBox", "test_BoundingBox.TestBoundingBox.assertEqual", "test_BoundingBox.TestBoundingBox.assertEqual", "test_BoundingBox.TestBoundingBox.assertEqual", "test_BoundingBox.TestBoundingBox.assertEqual"], "methods", ["None"], ["    ", "def", "test_bounding_box", "(", "self", ")", ":", "\n", "        ", "bbox", "=", "BoundingBox", "(", "0.2", ",", "0.3", ",", "0.5", ",", "0.6", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "x0", ",", "0.2", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "y0", ",", "0.3", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "x1", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "y1", ",", "0.6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box_2": [[15, 21], ["lightly.active_learning.utils.bounding_box.BoundingBox.from_x_y_w_h", "test_BoundingBox.TestBoundingBox.assertEqual", "test_BoundingBox.TestBoundingBox.assertEqual", "test_BoundingBox.TestBoundingBox.assertEqual", "test_BoundingBox.TestBoundingBox.assertEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.bounding_box.BoundingBox.from_x_y_w_h"], ["", "def", "test_bounding_box_2", "(", "self", ")", ":", "\n", "        ", "bbox", "=", "BoundingBox", ".", "from_x_y_w_h", "(", "0.2", ",", "0.3", ",", "0.3", ",", "0.3", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "x0", ",", "0.2", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "y0", ",", "0.3", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "x1", ",", "0.5", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "y1", ",", "0.6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box_illogical_argument": [[22, 26], ["test_BoundingBox.TestBoundingBox.assertRaises", "lightly.active_learning.utils.bounding_box.BoundingBox"], "methods", ["None"], ["", "def", "test_bounding_box_illogical_argument", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "# let x1 < x0", "\n", "            ", "bbox", "=", "BoundingBox", "(", "0.5", ",", "0.3", ",", "0.1", ",", "0.6", ",", "clip_values", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box_illogical_argument_2": [[27, 31], ["test_BoundingBox.TestBoundingBox.assertRaises", "lightly.active_learning.utils.bounding_box.BoundingBox"], "methods", ["None"], ["", "", "def", "test_bounding_box_illogical_argument_2", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "# let y1 < y0", "\n", "            ", "bbox", "=", "BoundingBox", "(", "0.2", ",", "0.6", ",", "0.5", ",", "0.3", ",", "clip_values", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box_oob_arguments": [[33, 36], ["test_BoundingBox.TestBoundingBox.assertRaises", "lightly.active_learning.utils.bounding_box.BoundingBox"], "methods", ["None"], ["", "", "def", "test_bounding_box_oob_arguments", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bbox", "=", "BoundingBox", "(", "20", ",", "30", ",", "100", ",", "200", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box_width": [[37, 40], ["lightly.active_learning.utils.bounding_box.BoundingBox", "test_BoundingBox.TestBoundingBox.assertEqual"], "methods", ["None"], ["", "", "def", "test_bounding_box_width", "(", "self", ")", ":", "\n", "        ", "bbox", "=", "BoundingBox", "(", "0.2", ",", "0.3", ",", "0.5", ",", "0.6", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "width", ",", "0.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box_height": [[41, 44], ["lightly.active_learning.utils.bounding_box.BoundingBox", "test_BoundingBox.TestBoundingBox.assertEqual"], "methods", ["None"], ["", "def", "test_bounding_box_height", "(", "self", ")", ":", "\n", "        ", "bbox", "=", "BoundingBox", "(", "0.2", ",", "0.3", ",", "0.5", ",", "0.6", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "height", ",", "0.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_BoundingBox.TestBoundingBox.test_bounding_box_area": [[45, 48], ["lightly.active_learning.utils.bounding_box.BoundingBox", "test_BoundingBox.TestBoundingBox.assertEqual"], "methods", ["None"], ["", "def", "test_bounding_box_area", "(", "self", ")", ":", "\n", "        ", "bbox", "=", "BoundingBox", "(", "0.2", ",", "0.3", ",", "0.5", ",", "0.6", ")", "\n", "self", ".", "assertEqual", "(", "bbox", ".", "area", ",", "0.09", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerKeypointDetection.TestScorerKeypointDetection.setUp": [[14, 41], ["numpy.asarray", "lightly.active_learning.utils.keypoint_predictions.KeypointPrediction", "model_output.append", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "keypoint_detections.append"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "predictions_over_images", "=", "[", "\n", "[", "\n", "{", "\n", "\"keypoints\"", ":", "[", "123.", ",", "456.", ",", "0.1", ",", "565.", ",", "32.", ",", "0.2", "]", "\n", "}", ",", "{", "\n", "\"keypoints\"", ":", "[", "342.", ",", "432.", ",", "0.3", ",", "43.", ",", "2.", ",", "0.4", "]", "\n", "}", "\n", "]", ",", "[", "\n", "{", "\n", "\"keypoints\"", ":", "[", "23.", ",", "43.", ",", "0.5", ",", "43.", ",", "2.", ",", "0.6", "]", "\n", "}", "\n", "]", ",", "[", "\n", "]", "\n", "]", "\n", "model_output", "=", "[", "]", "\n", "for", "predictions_one_image", "in", "predictions_over_images", ":", "\n", "            ", "keypoint_detections", "=", "[", "]", "\n", "for", "prediction", "in", "predictions_one_image", ":", "\n", "                ", "keypoints", "=", "prediction", "[", "\"keypoints\"", "]", "\n", "keypoint_detection", "=", "KeypointInstancePrediction", "(", "keypoints", ")", "\n", "keypoint_detections", ".", "append", "(", "keypoint_detection", ")", "\n", "", "output", "=", "KeypointPrediction", "(", "keypoint_detections", ")", "\n", "model_output", ".", "append", "(", "output", ")", "\n", "\n", "", "self", ".", "model_output", "=", "model_output", "\n", "self", ".", "expected_scores_mean_uncertainty", "=", "np", ".", "asarray", "(", "[", "0.75", ",", "0.45", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerKeypointDetection.TestScorerKeypointDetection.test_scorer_calculate_scores": [[42, 49], ["lightly.active_learning.scorers.keypoint_detection.ScorerKeypointDetection", "lightly.active_learning.scorers.keypoint_detection.ScorerKeypointDetection.calculate_scores", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "def", "test_scorer_calculate_scores", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerKeypointDetection", "(", "self", ".", "model_output", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "scores_mean_uncertainty", "=", "scores", "[", "\"mean_uncertainty\"", "]", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "scores_mean_uncertainty", ",", "self", ".", "expected_scores_mean_uncertainty", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerKeypointDetection.TestScorerKeypointDetection.test_scorer_get_score_names": [[50, 55], ["lightly.active_learning.scorers.keypoint_detection.ScorerKeypointDetection", "lightly.active_learning.scorers.keypoint_detection.ScorerKeypointDetection", "test_ScorerKeypointDetection.TestScorerKeypointDetection.assertGreater", "test_ScorerKeypointDetection.TestScorerKeypointDetection.assertListEqual", "len", "lightly.active_learning.scorers.keypoint_detection.ScorerKeypointDetection.score_names", "lightly.active_learning.scorers.keypoint_detection.ScorerKeypointDetection.score_names", "lightly.active_learning.scorers.keypoint_detection.ScorerKeypointDetection.score_names"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names"], ["", "def", "test_scorer_get_score_names", "(", "self", ")", ":", "\n", "        ", "scorer_1", "=", "ScorerKeypointDetection", "(", "self", ".", "model_output", ")", "\n", "scorer_2", "=", "ScorerKeypointDetection", "(", "[", "]", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "scorer_1", ".", "score_names", "(", ")", ")", ",", "0", ")", "\n", "self", ".", "assertListEqual", "(", "scorer_1", ".", "score_names", "(", ")", ",", "scorer_2", ".", "score_names", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerKeypointDetection.TestScorerKeypointDetection.test_keypoint_instance_prediction_creation": [[56, 81], ["test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction.from_dict", "test_ScorerKeypointDetection.TestScorerKeypointDetection.assertRaises", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "test_ScorerKeypointDetection.TestScorerKeypointDetection.assertRaises", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "test_ScorerKeypointDetection.TestScorerKeypointDetection.assertRaises", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction.from_dict"], ["", "def", "test_keypoint_instance_prediction_creation", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "subTest", "(", "\"create correct\"", ")", ":", "\n", "            ", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "0.3", "]", ")", "\n", "", "with", "self", ".", "subTest", "(", "\"create correct with object_id\"", ")", ":", "\n", "            ", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "0.3", "]", ",", "3", ")", "\n", "", "with", "self", ".", "subTest", "(", "\"create correct with object_id and score\"", ")", ":", "\n", "            ", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "0.3", "]", ",", "3", ",", "0.3", ")", "\n", "", "with", "self", ".", "subTest", "(", "\"create correct with score\"", ")", ":", "\n", "            ", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "0.3", "]", ",", "score", "=", "0.3", ")", "\n", "", "with", "self", ".", "subTest", "(", "\"create wrong keypoints format\"", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "0.3", ",", "1", "]", ",", "3", ")", "\n", "", "", "with", "self", ".", "subTest", "(", "\"create confidence < 0\"", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "-", "0.1", "]", ",", "3", ")", "\n", "", "", "with", "self", ".", "subTest", "(", "\"create confidence > 1\"", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "1.5", "]", ",", "3", ")", "\n", "", "", "with", "self", ".", "subTest", "(", "\"create from dict\"", ")", ":", "\n", "            ", "dict_", "=", "{", "\n", "\"category_id\"", ":", "3", ",", "\n", "\"keypoints\"", ":", "[", "423", ",", "432", ",", "0.4", ",", "231", ",", "655", ",", "0.3", "]", ",", "\n", "\"score\"", ":", "-", "1.9", "\n", "}", "\n", "KeypointInstancePrediction", ".", "from_dict", "(", "dict_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerKeypointDetection.TestScorerKeypointDetection.test_keypoint_prediction_creation": [[82, 108], ["test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointPrediction", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointPrediction.from_dicts", "test_ScorerKeypointDetection.TestScorerKeypointDetection.subTest", "lightly.active_learning.utils.keypoint_predictions.KeypointPrediction.from_json_string", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction", "lightly.active_learning.utils.keypoint_predictions.KeypointInstancePrediction"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointPrediction.from_dicts", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointPrediction.from_json_string"], ["", "", "def", "test_keypoint_prediction_creation", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "subTest", "(", "\"create from KeypointInstancePrediction\"", ")", ":", "\n", "            ", "keypoints", "=", "[", "\n", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "0.3", "]", ")", ",", "\n", "KeypointInstancePrediction", "(", "[", "456.", ",", "32.", ",", "0.3", "]", ",", "3", ",", "0.3", ")", "\n", "]", "\n", "KeypointPrediction", "(", "keypoints", ")", "\n", "", "with", "self", ".", "subTest", "(", "\"create from dicts\"", ")", ":", "\n", "            ", "dicts", "=", "[", "\n", "{", "\n", "\"category_id\"", ":", "3", ",", "\n", "\"keypoints\"", ":", "[", "423", ",", "432", ",", "0.4", ",", "231", ",", "655", ",", "0.3", "]", ",", "\n", "\"score\"", ":", "-", "1.9", "\n", "}", "\n", "]", "\n", "KeypointPrediction", ".", "from_dicts", "(", "dicts", ")", "\n", "\n", "", "with", "self", ".", "subTest", "(", "\"create from string\"", ")", ":", "\n", "            ", "json_str", "=", "\"\"\"[\n                {\n                    \"category_id\": 3, \n                    \"keypoints\": [423, 432, 0.4, 231, 655, 0.3], \n                    \"score\": -1.9\n                }\n            ]\"\"\"", "\n", "KeypointPrediction", ".", "from_json_string", "(", "json_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerObjectDetection.TestScorerObjectDetection.setUp": [[14, 51], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "dummy_data", "=", "[", "\n", "{", "\n", "'boxes'", ":", "[", "\n", "[", "14", ",", "16", ",", "52", ",", "85", "]", ",", "\n", "[", "58", ",", "23", ",", "124", ",", "49", "]", "\n", "]", ",", "\n", "'object_probabilities'", ":", "[", "\n", "0.57573", ",", "\n", "0.988", "\n", "]", ",", "\n", "'class_probabilities'", ":", "[", "\n", "[", "0.7", ",", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.4", ",", "0.5", ",", "0.1", "]", "\n", "]", ",", "\n", "'labels'", ":", "[", "\n", "0", ",", "\n", "1", ",", "\n", "]", "\n", "}", ",", "\n", "{", "\n", "'boxes'", ":", "[", "\n", "[", "14", ",", "16", ",", "52", ",", "85", "]", ",", "\n", "]", ",", "\n", "'object_probabilities'", ":", "[", "\n", "0.1024", ",", "\n", "]", ",", "\n", "'class_probabilities'", ":", "[", "\n", "[", "0.5", ",", "0.41", ",", "0.09", "]", ",", "\n", "]", ",", "\n", "'labels'", ":", "[", "0", "]", "\n", "}", ",", "\n", "{", "\n", "'boxes'", ":", "[", "]", ",", "\n", "'object_probabilities'", ":", "[", "]", ",", "\n", "'class_probabilities'", ":", "[", "]", ",", "\n", "'labels'", ":", "[", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerObjectDetection.TestScorerObjectDetection.test_object_detection_scorer": [[55, 108], ["enumerate", "lightly.active_learning.scorers.detection.ScorerObjectDetection", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores", "test_ScorerObjectDetection.TestScorerObjectDetection.assertTrue", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores.items", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores.items", "test_ScorerObjectDetection.TestScorerObjectDetection.assertEqual", "test_ScorerObjectDetection.TestScorerObjectDetection.assertListEqual", "test_ScorerObjectDetection.TestScorerObjectDetection.assertEqual", "test_ScorerObjectDetection.TestScorerObjectDetection.assertListEqual", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores.items", "enumerate", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput", "set", "set", "test_ScorerObjectDetection.TestScorerObjectDetection.assertNotEqual", "test_ScorerObjectDetection.TestScorerObjectDetection.assertEqual", "len", "len", "res.tolist", "len", "len", "res.tolist", "lightly.active_learning.utils.bounding_box.BoundingBox", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores.keys", "lightly.active_learning.scorers.detection.ScorerObjectDetection.score_names", "max", "type", "type", "test_ScorerObjectDetection.TestScorerObjectDetection.assertEqual", "test_ScorerObjectDetection.TestScorerObjectDetection.assertListEqual", "numpy.array", "len", "len", "list", "test_ScorerObjectDetection.TestScorerObjectDetection.assertListEqual", "list", "zip", "max", "max", "lightly.active_learning.scorers.classification._entropy", "numpy.log2", "lightly.active_learning.scorers.classification._entropy", "numpy.log2", "float", "float", "test_ScorerObjectDetection.TestScorerObjectDetection.assertAlmostEqual", "numpy.array", "numpy.array", "max", "max"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._entropy", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._entropy"], ["", "def", "test_object_detection_scorer", "(", "self", ")", ":", "\n", "\n", "# convert bounding boxes", "\n", "        ", "W", ",", "H", "=", "128", ",", "128", "\n", "for", "data", "in", "self", ".", "dummy_data", ":", "\n", "            ", "for", "i", ",", "box", "in", "enumerate", "(", "data", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x0", "=", "box", "[", "0", "]", "/", "W", "\n", "y0", "=", "box", "[", "1", "]", "/", "H", "\n", "x1", "=", "box", "[", "2", "]", "/", "W", "\n", "y1", "=", "box", "[", "3", "]", "/", "H", "\n", "data", "[", "'boxes'", "]", "[", "i", "]", "=", "BoundingBox", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "\n", "", "", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dummy_data", ")", ":", "\n", "            ", "self", ".", "dummy_data", "[", "i", "]", "=", "ObjectDetectionOutput", "(", "\n", "data", "[", "'boxes'", "]", ",", "\n", "data", "[", "'object_probabilities'", "]", ",", "\n", "data", "[", "'class_probabilities'", "]", ",", "\n", ")", "\n", "\n", "", "scorer", "=", "ScorerObjectDetection", "(", "self", ".", "dummy_data", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "self", ".", "assertTrue", "(", "set", "(", "scores", ".", "keys", "(", ")", ")", ",", "set", "(", "ScorerObjectDetection", ".", "score_names", "(", ")", ")", ")", "\n", "\n", "# make sure the max entry of a score is not 0.0", "\n", "for", "key", ",", "val", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertNotEqual", "(", "max", "(", "val", ")", ",", "0.0", ")", "\n", "\n", "# make sure all scores are numpy arrays", "\n", "", "for", "key", ",", "val", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "type", "(", "scores", "[", "key", "]", ")", ",", "type", "(", "np", ".", "array", "(", "[", "]", ")", ")", ")", "\n", "\n", "", "res", "=", "scores", "[", "'object_frequency'", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "res", ")", ",", "len", "(", "self", ".", "dummy_data", ")", ")", "\n", "self", ".", "assertListEqual", "(", "res", ".", "tolist", "(", ")", ",", "[", "1.0", ",", "0.95", ",", "0.9", "]", ")", "\n", "\n", "res", "=", "scores", "[", "'objectness_least_confidence'", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "res", ")", ",", "len", "(", "self", ".", "dummy_data", ")", ")", "\n", "self", ".", "assertListEqual", "(", "res", ".", "tolist", "(", ")", ",", "[", "0.5514945", ",", "0.9488", ",", "0.", "]", ")", "\n", "\n", "for", "score_name", ",", "score", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "if", "\"classification\"", "in", "score_name", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "res", ")", ",", "len", "(", "self", ".", "dummy_data", ")", ")", "\n", "", "if", "score_name", "==", "\"classification_uncertainty_least_confidence\"", ":", "\n", "                ", "self", ".", "assertListEqual", "(", "list", "(", "score", ")", ",", "[", "max", "(", "1", "-", "0.7", ",", "1", "-", "0.5", ")", "/", "(", "1", "-", "1", "/", "3", ")", ",", "(", "1", "-", "0.5", ")", "/", "(", "1", "-", "1", "/", "3", ")", ",", "0", "]", ")", "\n", "", "elif", "score_name", "==", "\"classification_uncertainty_margin\"", ":", "\n", "                ", "self", ".", "assertListEqual", "(", "list", "(", "score", ")", ",", "[", "max", "(", "1", "-", "(", "0.7", "-", "0.2", ")", ",", "1", "-", "(", "0.5", "-", "0.4", ")", ")", ",", "1", "-", "(", "0.5", "-", "0.41", ")", ",", "0", "]", ")", "\n", "", "elif", "score_name", "==", "\"classification_uncertainty_entropy\"", ":", "\n", "                ", "entropies_0", "=", "_entropy", "(", "np", ".", "array", "(", "self", ".", "dummy_data", "[", "0", "]", ".", "class_probabilities", ")", ")", "/", "np", ".", "log2", "(", "3", ")", "\n", "entropies_1", "=", "_entropy", "(", "np", ".", "array", "(", "self", ".", "dummy_data", "[", "1", "]", ".", "class_probabilities", ")", ")", "/", "np", ".", "log2", "(", "3", ")", "\n", "score_target", "=", "[", "float", "(", "max", "(", "entropies_0", ")", ")", ",", "float", "(", "max", "(", "entropies_1", ")", ")", ",", "0", "]", "\n", "for", "val1", ",", "val2", "in", "zip", "(", "score", ",", "score_target", ")", ":", "\n", "                    ", "self", ".", "assertAlmostEqual", "(", "val1", ",", "val2", ",", "places", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerObjectDetection.TestScorerObjectDetection.test_object_detection_scorer_config": [[110, 162], ["enumerate", "lightly.active_learning.scorers.detection.ScorerObjectDetection", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores", "test_ScorerObjectDetection.TestScorerObjectDetection.assertDictEqual", "lightly.active_learning.scorers.detection.ScorerObjectDetection", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores", "test_ScorerObjectDetection.TestScorerObjectDetection.assertDictEqual", "enumerate", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput", "test_ScorerObjectDetection.TestScorerObjectDetection.assertRaises", "lightly.active_learning.scorers.detection.ScorerObjectDetection", "test_ScorerObjectDetection.TestScorerObjectDetection.assertRaises", "lightly.active_learning.scorers.detection.ScorerObjectDetection", "lightly.active_learning.utils.bounding_box.BoundingBox"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "", "", "def", "test_object_detection_scorer_config", "(", "self", ")", ":", "\n", "\n", "# convert bounding boxes", "\n", "        ", "W", ",", "H", "=", "128", ",", "128", "\n", "for", "data", "in", "self", ".", "dummy_data", ":", "\n", "            ", "for", "i", ",", "box", "in", "enumerate", "(", "data", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x0", "=", "box", "[", "0", "]", "/", "W", "\n", "y0", "=", "box", "[", "1", "]", "/", "H", "\n", "x1", "=", "box", "[", "2", "]", "/", "W", "\n", "y1", "=", "box", "[", "3", "]", "/", "H", "\n", "data", "[", "'boxes'", "]", "[", "i", "]", "=", "BoundingBox", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "\n", "", "", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dummy_data", ")", ":", "\n", "            ", "self", ".", "dummy_data", "[", "i", "]", "=", "ObjectDetectionOutput", "(", "\n", "data", "[", "'boxes'", "]", ",", "\n", "data", "[", "'object_probabilities'", "]", ",", "\n", "data", "[", "'class_probabilities'", "]", ",", "\n", ")", "\n", "\n", "# check for default config", "\n", "", "scorer", "=", "ScorerObjectDetection", "(", "self", ".", "dummy_data", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "expected_default_config", "=", "{", "\n", "'frequency_penalty'", ":", "0.25", ",", "\n", "'min_score'", ":", "0.9", "\n", "}", "\n", "self", ".", "assertDictEqual", "(", "scorer", ".", "config", ",", "expected_default_config", ")", "\n", "\n", "# check for config override", "\n", "new_config", "=", "{", "\n", "'frequency_penalty'", ":", "0.55", ",", "\n", "'min_score'", ":", "0.6", "\n", "}", "\n", "scorer", "=", "ScorerObjectDetection", "(", "self", ".", "dummy_data", ",", "config", "=", "new_config", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "self", ".", "assertDictEqual", "(", "scorer", ".", "config", ",", "new_config", ")", "\n", "\n", "# check for invalid key passed", "\n", "new_config", "=", "{", "\n", "'frequenci_penalty'", ":", "0.55", ",", "\n", "'minimum_score'", ":", "0.6", "\n", "}", "\n", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "scorer", "=", "ScorerObjectDetection", "(", "self", ".", "dummy_data", ",", "config", "=", "new_config", ")", "\n", "\n", "# check for wrong value passed", "\n", "", "new_config", "=", "{", "\n", "'frequency_penalty'", ":", "'test'", ",", "\n", "'min_score'", ":", "1.6", "\n", "}", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "scorer", "=", "ScorerObjectDetection", "(", "self", ".", "dummy_data", ",", "config", "=", "new_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerObjectDetection.TestScorerObjectDetection.test_object_detection_from_class_labels": [[163, 193], ["enumerate", "lightly.active_learning.scorers.detection.ScorerObjectDetection", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores.items", "lightly.active_learning.scorers.detection.ScorerObjectDetection.calculate_scores.items", "enumerate", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput.from_scores", "test_ScorerObjectDetection.TestScorerObjectDetection.assertNotEqual", "test_ScorerObjectDetection.TestScorerObjectDetection.assertEqual", "lightly.active_learning.utils.bounding_box.BoundingBox", "max", "type", "type", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["", "", "def", "test_object_detection_from_class_labels", "(", "self", ")", ":", "\n", "# convert bounding boxes", "\n", "        ", "W", ",", "H", "=", "128", ",", "128", "\n", "for", "data", "in", "self", ".", "dummy_data", ":", "\n", "            ", "for", "i", ",", "box", "in", "enumerate", "(", "data", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x0", "=", "box", "[", "0", "]", "/", "W", "\n", "y0", "=", "box", "[", "1", "]", "/", "H", "\n", "x1", "=", "box", "[", "2", "]", "/", "W", "\n", "y1", "=", "box", "[", "3", "]", "/", "H", "\n", "data", "[", "'boxes'", "]", "[", "i", "]", "=", "BoundingBox", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "\n", "", "", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dummy_data", ")", ":", "\n", "            ", "self", ".", "dummy_data", "[", "i", "]", "=", "ObjectDetectionOutput", ".", "from_scores", "(", "\n", "data", "[", "'boxes'", "]", ",", "\n", "data", "[", "'object_probabilities'", "]", ",", "\n", "data", "[", "'labels'", "]", "\n", ")", "\n", "\n", "# check for default config", "\n", "", "scorer", "=", "ScorerObjectDetection", "(", "self", ".", "dummy_data", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "# UNCOMMENT TO BREAK", "\n", "# make sure the max entry of a score is not 0.0", "\n", "for", "key", ",", "val", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertNotEqual", "(", "max", "(", "val", ")", ",", "0.0", ")", "\n", "\n", "# make sure all scores are numpy arrays", "\n", "", "for", "key", ",", "val", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "type", "(", "scores", "[", "key", "]", ")", ",", "type", "(", "np", ".", "array", "(", "[", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerClassification.TestScorerClassification.test_score_calculation_random": [[9, 26], ["numpy.random.seed", "numpy.random.rand", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores", "test_ScorerClassification.TestScorerClassification.assertEqual", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores.items", "set", "set", "test_ScorerClassification.TestScorerClassification.assertEqual", "test_ScorerClassification.TestScorerClassification.assertTrue", "test_ScorerClassification.TestScorerClassification.assertTrue", "test_ScorerClassification.TestScorerClassification.assertEqual", "numpy.sum", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores.keys", "lightly.active_learning.scorers.classification.ScorerClassification.score_names", "all", "all", "type"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["    ", "def", "test_score_calculation_random", "(", "self", ")", ":", "\n", "        ", "n_samples", "=", "10000", "\n", "n_classes", "=", "10", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "predictions", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ",", "n_classes", ")", "\n", "predictions_normalized", "=", "predictions", "/", "np", ".", "sum", "(", "predictions", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "model_output", "=", "predictions_normalized", "\n", "scorer", "=", "ScorerClassification", "(", "model_output", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "set", "(", "scores", ".", "keys", "(", ")", ")", ",", "set", "(", "ScorerClassification", ".", "score_names", "(", ")", ")", ")", "\n", "\n", "for", "score_name", ",", "score", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "score", ".", "shape", ",", "(", "n_samples", ",", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "score", ">=", "0", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "score", "<=", "1", ")", ")", "\n", "self", ".", "assertEqual", "(", "type", "(", "score", ")", ",", "np", ".", "ndarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerClassification.TestScorerClassification.test_score_calculation_specific": [[27, 41], ["numpy.array", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores", "test_ScorerClassification.TestScorerClassification.assertListEqual", "test_ScorerClassification.TestScorerClassification.assertListEqual", "zip", "list", "list", "test_ScorerClassification.TestScorerClassification.assertAlmostEqual", "lightly.active_learning.scorers.classification._entropy", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._entropy"], ["", "", "def", "test_score_calculation_specific", "(", "self", ")", ":", "\n", "        ", "model_output", "=", "[", "\n", "[", "0.7", ",", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.4", ",", "0.5", ",", "0.1", "]", "\n", "]", "\n", "model_output", "=", "np", ".", "array", "(", "model_output", ")", "\n", "scorer", "=", "ScorerClassification", "(", "model_output", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "list", "(", "scores", "[", "\"uncertainty_least_confidence\"", "]", ")", ",", "\n", "[", "(", "1", "-", "0.7", ")", "/", "(", "1", "-", "1.", "/", "3.", ")", ",", "(", "1", "-", "0.5", ")", "/", "(", "1", "-", "1.", "/", "3.", ")", "]", ")", "\n", "self", ".", "assertListEqual", "(", "list", "(", "scores", "[", "\"uncertainty_margin\"", "]", ")", ",", "[", "1", "-", "(", "0.7", "-", "0.2", ")", ",", "1", "-", "(", "0.5", "-", "0.4", ")", "]", ")", "\n", "for", "val1", ",", "val2", "in", "zip", "(", "scores", "[", "\"uncertainty_entropy\"", "]", ",", "_entropy", "(", "model_output", ")", "/", "np", ".", "log2", "(", "3", ")", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "val1", ",", "val2", ",", "places", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerClassification.TestScorerClassification.test_score_calculation_binary": [[42, 57], ["numpy.array", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores", "test_ScorerClassification.TestScorerClassification.assertListEqual", "test_ScorerClassification.TestScorerClassification.assertListEqual", "numpy.concatenate", "zip", "list", "list", "test_ScorerClassification.TestScorerClassification.assertAlmostEqual", "lightly.active_learning.scorers.classification._entropy", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._entropy"], ["", "", "def", "test_score_calculation_binary", "(", "self", ")", ":", "\n", "        ", "model_output", "=", "[", "\n", "[", "0.7", "]", ",", "\n", "[", "0.4", "]", "\n", "]", "\n", "model_output", "=", "np", ".", "array", "(", "model_output", ")", "\n", "scorer", "=", "ScorerClassification", "(", "model_output", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "list", "(", "scores", "[", "\"uncertainty_least_confidence\"", "]", ")", ",", "\n", "[", "(", "1", "-", "0.7", ")", "/", "(", "1", "-", "1.", "/", "2.", ")", ",", "(", "1", "-", "0.6", ")", "/", "(", "1", "-", "1.", "/", "2.", ")", "]", ")", "\n", "self", ".", "assertListEqual", "(", "list", "(", "scores", "[", "\"uncertainty_margin\"", "]", ")", ",", "[", "1", "-", "(", "0.7", "-", "0.3", ")", ",", "1", "-", "(", "0.6", "-", "0.4", ")", "]", ")", "\n", "model_output", "=", "np", ".", "concatenate", "(", "[", "model_output", ",", "1", "-", "model_output", "]", ",", "axis", "=", "1", ")", "\n", "for", "val1", ",", "val2", "in", "zip", "(", "scores", "[", "\"uncertainty_entropy\"", "]", ",", "_entropy", "(", "model_output", ")", "/", "np", ".", "log2", "(", "2", ")", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "val1", ",", "val2", ",", "places", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerClassification.TestScorerClassification.test_scorer_classification_empty_model_output": [[58, 62], ["lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores", "test_ScorerClassification.TestScorerClassification.assertEqual", "set", "set", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores.keys", "lightly.active_learning.scorers.classification.ScorerClassification.score_names"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names"], ["", "", "def", "test_scorer_classification_empty_model_output", "(", "self", ")", ":", "\n", "        ", "scorer", "=", "ScorerClassification", "(", "model_output", "=", "[", "]", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "scores", ".", "keys", "(", ")", ")", ",", "set", "(", "ScorerClassification", ".", "score_names", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerClassification.TestScorerClassification.test_scorer_classification_variable_model_output_dimension": [[63, 85], ["range", "range", "test_ScorerClassification.TestScorerClassification.subTest", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores", "test_ScorerClassification.TestScorerClassification.assertEqual", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores.values", "test_ScorerClassification.TestScorerClassification.assertRaises", "lightly.active_learning.scorers.classification.ScorerClassification", "set", "set", "test_ScorerClassification.TestScorerClassification.assertEqual", "test_ScorerClassification.TestScorerClassification.assertEqual", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores.keys", "lightly.active_learning.scorers.classification.ScorerClassification.score_names", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["", "def", "test_scorer_classification_variable_model_output_dimension", "(", "self", ")", ":", "\n", "\n", "        ", "for", "num_samples", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "num_classes", "in", "range", "(", "5", ")", ":", "\n", "\n", "                ", "with", "self", ".", "subTest", "(", "msg", "=", "f\"model_output.shape = ({num_samples},{num_classes})\"", ")", ":", "\n", "                    ", "if", "num_samples", ">", "0", ":", "\n", "                        ", "preds", "=", "[", "1.", "/", "num_samples", "]", "*", "num_classes", "\n", "", "else", ":", "\n", "                        ", "preds", "=", "[", "]", "\n", "", "model_output", "=", "[", "preds", "]", "*", "num_samples", "\n", "\n", "if", "num_classes", "==", "0", "and", "num_samples", ">", "0", ":", "\n", "                        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                            ", "scorer", "=", "ScorerClassification", "(", "model_output", "=", "model_output", ")", "\n", "", "", "else", ":", "\n", "                        ", "scorer", "=", "ScorerClassification", "(", "model_output", "=", "model_output", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "scores", ".", "keys", "(", ")", ")", ",", "set", "(", "ScorerClassification", ".", "score_names", "(", ")", ")", ")", "\n", "for", "score_values", "in", "scores", ".", "values", "(", ")", ":", "\n", "                            ", "self", ".", "assertEqual", "(", "len", "(", "score_values", ")", ",", "len", "(", "model_output", ")", ")", "\n", "self", ".", "assertEqual", "(", "type", "(", "score_values", ")", ",", "np", ".", "ndarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerClassification.TestScorerClassification.test_scorer_classification_variable_model_output_tensor_order": [[86, 99], ["range", "numpy.ndarray", "test_ScorerClassification.TestScorerClassification.subTest", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores", "lightly.active_learning.scorers.classification.ScorerClassification.calculate_scores.values", "test_ScorerClassification.TestScorerClassification.assertEqual", "test_ScorerClassification.TestScorerClassification.assertRaises", "lightly.active_learning.scorers.classification.ScorerClassification", "type"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["", "", "", "", "", "", "def", "test_scorer_classification_variable_model_output_tensor_order", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tensor_order", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "model_output", "=", "np", ".", "ndarray", "(", "(", "3", ",", ")", "*", "tensor_order", ")", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "f\"model_output.shape = {model_output.shape}\"", ")", ":", "\n", "                ", "if", "tensor_order", "==", "2", "or", "tensor_order", "==", "0", ":", "\n", "                    ", "scorer", "=", "ScorerClassification", "(", "model_output", "=", "model_output", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "for", "score_values", "in", "scores", ".", "values", "(", ")", ":", "\n", "                        ", "self", ".", "assertEqual", "(", "type", "(", "score_values", ")", ",", "np", ".", "ndarray", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                        ", "scorer", "=", "ScorerClassification", "(", "model_output", "=", "model_output", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ObjectDetectionOutput.TestObjectDetectionOutput.setUp": [[11, 72], ["enumerate", "lightly.active_learning.utils.bounding_box.BoundingBox"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "dummy_data", "=", "[", "\n", "{", "\n", "'boxes'", ":", "[", "\n", "[", "14", ",", "16", ",", "52", ",", "85", "]", ",", "\n", "[", "58", ",", "23", ",", "124", ",", "49", "]", "\n", "]", ",", "\n", "'object_probabilities'", ":", "[", "\n", "0.57573", ",", "\n", "0.988", "\n", "]", ",", "\n", "'class_probabilities'", ":", "[", "\n", "[", "0.7", ",", "0.2", ",", "0.1", "]", ",", "\n", "[", "0.4", ",", "0.5", ",", "0.1", "]", "\n", "]", ",", "\n", "'labels'", ":", "[", "\n", "0", ",", "\n", "1", ",", "\n", "]", "\n", "}", ",", "\n", "{", "\n", "'boxes'", ":", "[", "\n", "[", "14", ",", "16", ",", "52", ",", "85", "]", ",", "\n", "]", ",", "\n", "'object_probabilities'", ":", "[", "\n", "0.1024", ",", "\n", "]", ",", "\n", "'class_probabilities'", ":", "[", "\n", "[", "0.5", ",", "0.41", ",", "0.09", "]", ",", "\n", "]", ",", "\n", "'labels'", ":", "[", "0", "]", "\n", "}", ",", "\n", "{", "\n", "'boxes'", ":", "[", "\n", "[", "14", ",", "16", ",", "52", ",", "85", "]", ",", "\n", "]", ",", "\n", "'object_probabilities'", ":", "[", "\n", "1.0", ",", "\n", "]", ",", "\n", "'class_probabilities'", ":", "[", "\n", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "]", ",", "\n", "'labels'", ":", "[", "4", "]", "\n", "}", ",", "\n", "{", "\n", "'boxes'", ":", "[", "]", ",", "\n", "'object_probabilities'", ":", "[", "]", ",", "\n", "'class_probabilities'", ":", "[", "]", ",", "\n", "'labels'", ":", "[", "]", "\n", "}", "\n", "]", "\n", "\n", "# convert bounding boxes", "\n", "W", ",", "H", "=", "128", ",", "128", "\n", "for", "data", "in", "self", ".", "dummy_data", ":", "\n", "            ", "for", "i", ",", "box", "in", "enumerate", "(", "data", "[", "'boxes'", "]", ")", ":", "\n", "                ", "x0", "=", "box", "[", "0", "]", "/", "W", "\n", "y0", "=", "box", "[", "1", "]", "/", "H", "\n", "x1", "=", "box", "[", "2", "]", "/", "W", "\n", "y1", "=", "box", "[", "3", "]", "/", "H", "\n", "data", "[", "'boxes'", "]", "[", "i", "]", "=", "BoundingBox", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ObjectDetectionOutput.TestObjectDetectionOutput.test_object_detection_output": [[73, 97], ["enumerate", "zip", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput", "outputs_1.append", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput.from_scores", "zip", "zip", "test_ObjectDetectionOutput.TestObjectDetectionOutput.assertEqual", "test_ObjectDetectionOutput.TestObjectDetectionOutput.assertEqual", "max", "zip"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores"], ["", "", "", "def", "test_object_detection_output", "(", "self", ")", ":", "\n", "\n", "        ", "outputs_1", "=", "[", "]", "\n", "outputs_2", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dummy_data", ")", ":", "\n", "            ", "output", "=", "ObjectDetectionOutput", "(", "\n", "data", "[", "'boxes'", "]", ",", "\n", "data", "[", "'object_probabilities'", "]", ",", "\n", "data", "[", "'class_probabilities'", "]", ",", "\n", ")", "\n", "outputs_1", ".", "append", "(", "output", ")", "\n", "\n", "scores", "=", "[", "o", "*", "max", "(", "c", ")", "for", "o", ",", "c", "in", "zip", "(", "data", "[", "'object_probabilities'", "]", ",", "data", "[", "'class_probabilities'", "]", ")", "]", "\n", "output_2", "=", "ObjectDetectionOutput", ".", "from_scores", "(", "\n", "data", "[", "'boxes'", "]", ",", "\n", "scores", ",", "\n", "data", "[", "'labels'", "]", ",", "\n", ")", "\n", "\n", "", "for", "output_1", ",", "output_2", "in", "zip", "(", "outputs_1", ",", "outputs_2", ")", ":", "\n", "            ", "for", "x", ",", "y", "in", "zip", "(", "output_1", ".", "labels", ",", "output_2", ".", "labels", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "x", ",", "y", ")", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "output_1", ".", "scores", ",", "output_2", ".", "scores", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ObjectDetectionOutput.TestObjectDetectionOutput.test_object_detection_output_from_scores": [[99, 112], ["enumerate", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput.from_scores", "outputs.append", "test_ObjectDetectionOutput.TestObjectDetectionOutput.assertEqual", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores"], ["", "", "", "def", "test_object_detection_output_from_scores", "(", "self", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dummy_data", ")", ":", "\n", "            ", "output", "=", "ObjectDetectionOutput", ".", "from_scores", "(", "\n", "data", "[", "'boxes'", "]", ",", "\n", "data", "[", "'object_probabilities'", "]", ",", "\n", "data", "[", "'labels'", "]", ",", "\n", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "", "for", "output", "in", "outputs", ":", "\n", "            ", "for", "class_probs", "in", "output", ".", "class_probabilities", ":", "\n", "                ", "self", ".", "assertEqual", "(", "np", ".", "sum", "(", "class_probs", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ObjectDetectionOutput.TestObjectDetectionOutput.test_object_detection_output_illegal_args": [[114, 146], ["test_ObjectDetectionOutput.TestObjectDetectionOutput.assertRaises", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput.from_scores", "test_ObjectDetectionOutput.TestObjectDetectionOutput.assertRaises", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput.from_scores", "test_ObjectDetectionOutput.TestObjectDetectionOutput.assertRaises", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput", "test_ObjectDetectionOutput.TestObjectDetectionOutput.assertRaises", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput.from_scores", "lightly.active_learning.utils.bounding_box.BoundingBox", "lightly.active_learning.utils.bounding_box.BoundingBox", "lightly.active_learning.utils.bounding_box.BoundingBox", "lightly.active_learning.utils.bounding_box.BoundingBox"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores"], ["", "", "", "def", "test_object_detection_output_illegal_args", "(", "self", ")", ":", "\n", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "# score > 1", "\n", "            ", "ObjectDetectionOutput", ".", "from_scores", "(", "\n", "[", "BoundingBox", "(", "0", ",", "0", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "1.1", "]", ",", "\n", "[", "0", "]", "\n", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "# score < 0", "\n", "            ", "ObjectDetectionOutput", ".", "from_scores", "(", "\n", "[", "BoundingBox", "(", "0", ",", "0", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "-", "1.", "]", ",", "\n", "[", "1", "]", "\n", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "# different length", "\n", "            ", "ObjectDetectionOutput", "(", "\n", "[", "BoundingBox", "(", "0", ",", "0", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "0.5", ",", "0.2", "]", ",", "\n", "[", "1", ",", "2", "]", "\n", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "# string labels", "\n", "            ", "ObjectDetectionOutput", ".", "from_scores", "(", "\n", "[", "BoundingBox", "(", "0", ",", "0", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "1.1", "]", ",", "\n", "[", "'hello'", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_active_learning_agent.TestActiveLearningAgent.test_agent": [[12, 48], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "lightly.active_learning.agents.agent.ActiveLearningAgent", "lightly.active_learning.agents.agent.ActiveLearningAgent", "lightly.active_learning.agents.agent.ActiveLearningAgent", "len", "len", "test_active_learning_agent.TestActiveLearningAgent.assertEqual", "test_active_learning_agent.TestActiveLearningAgent.assertTrue", "test_active_learning_agent.TestActiveLearningAgent.assertEqual", "test_active_learning_agent.TestActiveLearningAgent.assertEqual", "len", "lightly.active_learning.config.selection_config.SelectionConfig", "lightly.active_learning.config.selection_config.SelectionConfig", "numpy.random.rand().astype", "lightly.active_learning.scorers.classification.ScorerClassification", "agent.query", "lightly.active_learning.config.selection_config.SelectionConfig", "agent.query", "len", "set().issubset", "len", "len", "len", "len", "list", "len", "numpy.random.rand", "numpy.sum", "set", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query"], ["    ", "def", "test_agent", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "\n", "agent_0", "=", "ActiveLearningAgent", "(", "self", ".", "api_workflow_client", ")", "\n", "agent_1", "=", "ActiveLearningAgent", "(", "self", ".", "api_workflow_client", ",", "query_tag_name", "=", "\"query_tag_name_xyz\"", ")", "\n", "agent_2", "=", "ActiveLearningAgent", "(", "self", ".", "api_workflow_client", ",", "query_tag_name", "=", "\"query_tag_name_xyz\"", ",", "\n", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", ")", "\n", "agent_3", "=", "ActiveLearningAgent", "(", "self", ".", "api_workflow_client", ",", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", ")", "\n", "\n", "for", "method", "in", "[", "SamplingMethod", ".", "CORAL", ",", "SamplingMethod", ".", "CORESET", ",", "SamplingMethod", ".", "RANDOM", "]", ":", "\n", "            ", "for", "agent", "in", "[", "agent_0", ",", "agent_1", ",", "agent_2", ",", "agent_3", "]", ":", "\n", "                ", "for", "batch_size", "in", "[", "2", ",", "6", "]", ":", "\n", "                    ", "n_old_labeled", "=", "len", "(", "agent", ".", "labeled_set", ")", "\n", "n_old_unlabeled", "=", "len", "(", "agent", ".", "unlabeled_set", ")", "\n", "\n", "n_samples", "=", "len", "(", "agent", ".", "labeled_set", ")", "+", "batch_size", "\n", "if", "method", "==", "SamplingMethod", ".", "CORAL", "and", "len", "(", "agent", ".", "labeled_set", ")", "==", "0", ":", "\n", "                        ", "selection_config", "=", "SelectionConfig", "(", "n_samples", "=", "n_samples", ",", "method", "=", "SamplingMethod", ".", "CORESET", ")", "\n", "", "else", ":", "\n", "                        ", "selection_config", "=", "SelectionConfig", "(", "n_samples", "=", "n_samples", ",", "method", "=", "method", ")", "\n", "\n", "", "if", "selection_config", ".", "method", "==", "SamplingMethod", ".", "CORAL", ":", "\n", "                        ", "predictions", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "agent", ".", "query_set", ")", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "predictions_normalized", "=", "predictions", "/", "np", ".", "sum", "(", "predictions", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "al_scorer", "=", "ScorerClassification", "(", "predictions_normalized", ")", "\n", "agent", ".", "query", "(", "selection_config", "=", "selection_config", ",", "al_scorer", "=", "al_scorer", ")", "\n", "", "else", ":", "\n", "                        ", "selection_config", "=", "SelectionConfig", "(", "n_samples", "=", "n_samples", ")", "\n", "agent", ".", "query", "(", "selection_config", "=", "selection_config", ")", "\n", "\n", "", "labeled_set", ",", "added_set", "=", "agent", ".", "labeled_set", ",", "agent", ".", "added_set", "\n", "\n", "self", ".", "assertEqual", "(", "n_old_labeled", "+", "len", "(", "added_set", ")", ",", "len", "(", "labeled_set", ")", ")", "\n", "self", ".", "assertTrue", "(", "set", "(", "added_set", ")", ".", "issubset", "(", "labeled_set", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "list", "(", "set", "(", "agent", ".", "labeled_set", ")", "&", "set", "(", "agent", ".", "unlabeled_set", ")", ")", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "n_old_unlabeled", "-", "len", "(", "added_set", ")", ",", "len", "(", "agent", ".", "unlabeled_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_active_learning_agent.TestActiveLearningAgent.test_agent_wrong_number_of_scores": [[49, 64], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "numpy.random.rand().astype", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.config.selection_config.SelectionConfig", "len", "len", "test_active_learning_agent.TestActiveLearningAgent.assertRaises", "lightly.active_learning.agents.agent.ActiveLearningAgent.query", "numpy.random.rand", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query"], ["", "", "", "", "def", "test_agent_wrong_number_of_scores", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "\n", "agent", "=", "ActiveLearningAgent", "(", "self", ".", "api_workflow_client", ",", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", ")", "\n", "method", "=", "SamplingMethod", ".", "CORAL", "\n", "n_samples", "=", "len", "(", "agent", ".", "labeled_set", ")", "+", "2", "\n", "\n", "n_predictions", "=", "len", "(", "agent", ".", "query_set", ")", "-", "3", "# the -3 should cause an error", "\n", "predictions", "=", "np", ".", "random", ".", "rand", "(", "n_predictions", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "predictions_normalized", "=", "predictions", "/", "np", ".", "sum", "(", "predictions", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "al_scorer", "=", "ScorerClassification", "(", "predictions_normalized", ")", "\n", "\n", "selection_config", "=", "SelectionConfig", "(", "n_samples", "=", "n_samples", ",", "method", "=", "method", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "agent", ".", "query", "(", "selection_config", "=", "selection_config", ",", "al_scorer", "=", "al_scorer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_active_learning_agent.TestActiveLearningAgent.test_agent_with_generator": [[65, 87], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "len", "numpy.random.rand().astype", "lightly.active_learning.scorers.ScorerSemanticSegmentation", "lightly.active_learning.config.selection_config.SelectionConfig", "lightly.active_learning.agents.agent.ActiveLearningAgent.query", "len", "test_active_learning_agent.TestActiveLearningAgent.assertRaises", "lightly.active_learning.agents.agent.ActiveLearningAgent.upload_scores", "numpy.random.rand", "numpy.sum", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.upload_scores"], ["", "", "def", "test_agent_with_generator", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "width", "=", "32", "\n", "height", "=", "32", "\n", "no_classes", "=", "13", "\n", "\n", "agent", "=", "ActiveLearningAgent", "(", "self", ".", "api_workflow_client", ",", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", ")", "\n", "method", "=", "SamplingMethod", ".", "CORAL", "\n", "n_samples", "=", "len", "(", "agent", ".", "labeled_set", ")", "+", "2", "\n", "\n", "n_predictions", "=", "len", "(", "agent", ".", "query_set", ")", "\n", "predictions", "=", "np", ".", "random", ".", "rand", "(", "n_predictions", ",", "no_classes", ",", "width", ",", "height", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "predictions_normalized", "=", "predictions", "/", "np", ".", "sum", "(", "predictions", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "predictions_generator", "=", "(", "predictions_normalized", "[", "i", "]", "for", "i", "in", "range", "(", "n_predictions", ")", ")", "\n", "al_scorer", "=", "ScorerSemanticSegmentation", "(", "predictions_generator", ")", "\n", "\n", "selection_config", "=", "SelectionConfig", "(", "n_samples", "=", "n_samples", ",", "method", "=", "method", ")", "\n", "agent", ".", "query", "(", "selection_config", "=", "selection_config", ",", "al_scorer", "=", "al_scorer", ")", "\n", "\n", "# make sure we throw an error if generator is already consumed", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "agent", ".", "upload_scores", "(", "al_scorer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_active_learning_agent.TestActiveLearningAgent.test_agent_added_set_before_query": [[88, 101], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "test_active_learning_agent.TestActiveLearningAgent.assertRaises"], "methods", ["None"], ["", "", "def", "test_agent_added_set_before_query", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "agent", "=", "ActiveLearningAgent", "(", "\n", "self", ".", "api_workflow_client", ",", "\n", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", "\n", ")", "\n", "\n", "agent", ".", "query_set", "\n", "agent", ".", "labeled_set", "\n", "agent", ".", "unlabeled_set", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "agent", ".", "added_set", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_active_learning_agent.TestActiveLearningAgent.test_agent_query_too_few": [[102, 117], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "lightly.active_learning.config.selection_config.SelectionConfig", "lightly.active_learning.agents.agent.ActiveLearningAgent.query"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query"], ["", "", "def", "test_agent_query_too_few", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "agent", "=", "ActiveLearningAgent", "(", "\n", "self", ".", "api_workflow_client", ",", "\n", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", ",", "\n", ")", "\n", "\n", "# sample 0 samples", "\n", "selection_config", "=", "SelectionConfig", "(", "\n", "n_samples", "=", "0", ",", "\n", "method", "=", "SamplingMethod", ".", "RANDOM", "\n", ")", "\n", "\n", "agent", ".", "query", "(", "selection_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_active_learning_agent.TestActiveLearningAgent.test_agent_only_upload_scores": [[118, 131], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "len", "numpy.random.rand().astype", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.agents.agent.ActiveLearningAgent.upload_scores", "numpy.random.rand", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.upload_scores"], ["", "def", "test_agent_only_upload_scores", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "agent", "=", "ActiveLearningAgent", "(", "\n", "self", ".", "api_workflow_client", ",", "\n", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", ",", "\n", ")", "\n", "\n", "n_predictions", "=", "len", "(", "agent", ".", "query_set", ")", "\n", "predictions", "=", "np", ".", "random", ".", "rand", "(", "n_predictions", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "predictions_normalized", "=", "predictions", "/", "np", ".", "sum", "(", "predictions", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "al_scorer", "=", "ScorerClassification", "(", "predictions_normalized", ")", "\n", "\n", "agent", ".", "upload_scores", "(", "al_scorer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_active_learning_agent.TestActiveLearningAgent.test_agent_without_embedding_id": [[132, 147], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "len", "numpy.random.rand().astype", "lightly.active_learning.scorers.classification.ScorerClassification", "lightly.active_learning.config.selection_config.SelectionConfig", "lightly.active_learning.agents.agent.ActiveLearningAgent.query", "len", "numpy.random.rand", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query"], ["", "def", "test_agent_without_embedding_id", "(", "self", ")", ":", "\n", "        ", "agent", "=", "ActiveLearningAgent", "(", "\n", "self", ".", "api_workflow_client", ",", "\n", "preselected_tag_name", "=", "\"preselected_tag_name_xyz\"", "\n", ")", "\n", "method", "=", "SamplingMethod", ".", "CORAL", "\n", "n_samples", "=", "len", "(", "agent", ".", "labeled_set", ")", "+", "2", "\n", "\n", "n_predictions", "=", "len", "(", "agent", ".", "query_set", ")", "\n", "predictions", "=", "np", ".", "random", ".", "rand", "(", "n_predictions", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "predictions_normalized", "=", "predictions", "/", "np", ".", "sum", "(", "predictions", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "al_scorer", "=", "ScorerClassification", "(", "predictions_normalized", ")", "\n", "\n", "selection_config", "=", "SelectionConfig", "(", "n_samples", "=", "n_samples", ",", "method", "=", "method", ")", "\n", "agent", ".", "query", "(", "selection_config", "=", "selection_config", ",", "al_scorer", "=", "al_scorer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.setUp": [[11, 38], ["numpy.random.randn", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data.reshape", "numpy.random.randn", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data_width_1.reshape", "numpy.random.randn", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data_height_1.reshape", "numpy.random.randn", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data_width_height_1.reshape", "numpy.random.randn", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data_classes_1.reshape", "numpy.random.randn", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "N", "=", "100", "\n", "self", ".", "W", ",", "self", ".", "H", ",", "self", ".", "C", "=", "32", ",", "32", ",", "10", "\n", "\n", "# the following data should always pass", "\n", "self", ".", "dummy_data", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "N", "*", "self", ".", "W", "*", "self", ".", "H", ",", "self", ".", "C", ")", "\n", "self", ".", "dummy_data", "/=", "np", ".", "sum", "(", "self", ".", "dummy_data", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "self", ".", "dummy_data", "=", "self", ".", "dummy_data", ".", "reshape", "(", "self", ".", "N", ",", "self", ".", "W", ",", "self", ".", "H", ",", "self", ".", "C", ")", "\n", "\n", "self", ".", "dummy_data_width_1", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "N", "*", "self", ".", "H", ",", "self", ".", "C", ")", "\n", "self", ".", "dummy_data_width_1", "/=", "np", ".", "sum", "(", "self", ".", "dummy_data_width_1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "self", ".", "dummy_data_width_1", "=", "self", ".", "dummy_data_width_1", ".", "reshape", "(", "self", ".", "N", ",", "1", ",", "self", ".", "H", ",", "self", ".", "C", ")", "\n", "\n", "self", ".", "dummy_data_height_1", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "N", "*", "self", ".", "W", ",", "self", ".", "C", ")", "\n", "self", ".", "dummy_data_height_1", "/=", "np", ".", "sum", "(", "self", ".", "dummy_data_height_1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "self", ".", "dummy_data_height_1", "=", "self", ".", "dummy_data_height_1", ".", "reshape", "(", "self", ".", "N", ",", "self", ".", "W", ",", "1", ",", "self", ".", "C", ")", "\n", "\n", "self", ".", "dummy_data_width_height_1", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "N", ",", "self", ".", "C", ")", "\n", "self", ".", "dummy_data_width_height_1", "/=", "np", ".", "sum", "(", "self", ".", "dummy_data_width_height_1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "self", ".", "dummy_data_width_height_1", "=", "self", ".", "dummy_data_width_height_1", ".", "reshape", "(", "self", ".", "N", ",", "1", ",", "1", ",", "self", ".", "C", ")", "\n", "\n", "self", ".", "dummy_data_classes_1", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "N", "*", "self", ".", "W", "*", "self", ".", "H", ",", "1", ")", "\n", "self", ".", "dummy_data_classes_1", "=", "self", ".", "dummy_data_classes_1", ".", "reshape", "(", "self", ".", "N", ",", "self", ".", "W", ",", "self", ".", "H", ",", "1", ")", "\n", "\n", "# the following data should always fail", "\n", "self", ".", "dummy_data_valerr", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "N", ",", "self", ".", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data_generator": [[39, 44], ["range", "numpy.random.randn", "numpy.sum"], "methods", ["None"], ["", "def", "dummy_data_generator", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "N", ")", ":", "\n", "            ", "prediction", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "W", ",", "self", ".", "H", ",", "self", ".", "C", ")", "\n", "prediction", "/=", "np", ".", "sum", "(", "prediction", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "yield", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.test_scorer_default_case": [[45, 53], ["lightly.active_learning.scorers.ScorerSemanticSegmentation", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores.items", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertTrue", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertEqual", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "def", "test_scorer_default_case", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerSemanticSegmentation", "(", "self", ".", "dummy_data", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "for", "score_name", ",", "score_array", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "isinstance", "(", "score_array", ",", "np", ".", "ndarray", ")", ")", "\n", "self", ".", "assertEqual", "(", "score_array", ".", "shape", ",", "(", "self", ".", "N", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.test_scorer_width_1_case": [[54, 62], ["lightly.active_learning.scorers.ScorerSemanticSegmentation", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores.items", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertTrue", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertEqual", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "def", "test_scorer_width_1_case", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerSemanticSegmentation", "(", "self", ".", "dummy_data_width_1", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "for", "score_name", ",", "score_array", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "isinstance", "(", "score_array", ",", "np", ".", "ndarray", ")", ")", "\n", "self", ".", "assertEqual", "(", "score_array", ".", "shape", ",", "(", "self", ".", "N", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.test_scorer_height_1_case": [[63, 71], ["lightly.active_learning.scorers.ScorerSemanticSegmentation", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores.items", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertTrue", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertEqual", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "def", "test_scorer_height_1_case", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerSemanticSegmentation", "(", "self", ".", "dummy_data_height_1", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "for", "score_name", ",", "score_array", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "isinstance", "(", "score_array", ",", "np", ".", "ndarray", ")", ")", "\n", "self", ".", "assertEqual", "(", "score_array", ".", "shape", ",", "(", "self", ".", "N", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.test_scorer_width_height_1_case": [[72, 80], ["lightly.active_learning.scorers.ScorerSemanticSegmentation", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores.items", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertTrue", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertEqual", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "def", "test_scorer_width_height_1_case", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerSemanticSegmentation", "(", "self", ".", "dummy_data_width_height_1", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "for", "score_name", ",", "score_array", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "isinstance", "(", "score_array", ",", "np", ".", "ndarray", ")", ")", "\n", "self", ".", "assertEqual", "(", "score_array", ".", "shape", ",", "(", "self", ".", "N", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.test_scorer_classes_1_case": [[81, 89], ["lightly.active_learning.scorers.ScorerSemanticSegmentation", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores.items", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertTrue", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertEqual", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "def", "test_scorer_classes_1_case", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerSemanticSegmentation", "(", "self", ".", "dummy_data_classes_1", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "for", "score_name", ",", "score_array", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "isinstance", "(", "score_array", ",", "np", ".", "ndarray", ")", ")", "\n", "self", ".", "assertEqual", "(", "score_array", ".", "shape", ",", "(", "self", ".", "N", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.test_scorer_generator_case": [[90, 98], ["lightly.active_learning.scorers.ScorerSemanticSegmentation", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores.items", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data_generator", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertTrue", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertEqual", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.dummy_data_generator"], ["", "", "def", "test_scorer_generator_case", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerSemanticSegmentation", "(", "self", ".", "dummy_data_generator", "(", ")", ")", "\n", "scores", "=", "scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "for", "score_name", ",", "score_array", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "isinstance", "(", "score_array", ",", "np", ".", "ndarray", ")", ")", "\n", "self", ".", "assertEqual", "(", "score_array", ".", "shape", ",", "(", "self", ".", "N", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.active_learning.test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.test_wrong_input_shape": [[99, 105], ["lightly.active_learning.scorers.ScorerSemanticSegmentation", "test_ScorerSemanticSegmentation.TestScorerSemanticSegmentation.assertRaises", "lightly.active_learning.scorers.ScorerSemanticSegmentation.calculate_scores"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "def", "test_wrong_input_shape", "(", "self", ")", ":", "\n", "\n", "        ", "scorer", "=", "ScorerSemanticSegmentation", "(", "self", ".", "dummy_data_valerr", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "scorer", ".", "calculate_scores", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.keypoint_detection.ScorerKeypointDetection.__init__": [[80, 82], ["lightly.active_learning.scorers.Scorer.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "model_output", ":", "List", "[", "KeypointPrediction", "]", ")", ":", "\n", "        ", "super", "(", "ScorerKeypointDetection", ",", "self", ")", ".", "__init__", "(", "model_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.keypoint_detection.ScorerKeypointDetection.calculate_scores": [[83, 90], ["dict", "keypoint_detection._mean_uncertainty"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.keypoint_detection._mean_uncertainty"], ["", "def", "calculate_scores", "(", "self", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Calculates and returns active learning scores in a dictionary.\n        \"\"\"", "\n", "# add classification scores", "\n", "scores", "=", "dict", "(", ")", "\n", "scores", "[", "'mean_uncertainty'", "]", "=", "_mean_uncertainty", "(", "self", ".", "model_output", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.keypoint_detection.ScorerKeypointDetection.score_names": [[91, 98], ["cls", "list", "cls.calculate_scores().keys", "cls.calculate_scores"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "@", "classmethod", "\n", "def", "score_names", "(", "cls", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns the names of the calculated active learning scores\n        \"\"\"", "\n", "scorer", "=", "cls", "(", "model_output", "=", "[", "]", ")", "\n", "score_names", "=", "list", "(", "scorer", ".", "calculate_scores", "(", ")", ".", "keys", "(", ")", ")", "\n", "return", "score_names", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.keypoint_detection._mean_uncertainty": [[10, 39], ["numpy.asarray", "keypoint_instance_prediction.get_confidences", "len", "scores.append", "scores.append", "len", "numpy.mean", "confidences_image.append", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.keypoint_predictions.KeypointInstancePrediction.get_confidences", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["def", "_mean_uncertainty", "(", "\n", "model_output", ":", "List", "[", "KeypointPrediction", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Score which prefers samples with low confidence score.\n    \n    The uncertainty score per image is 1 minus the mean confidence\n    score of all its keypoints.\n\n    Args:\n        model_output:\n            Predictions of the model of length N.\n\n    Returns:\n        Numpy array of length N with the computed scores.\n\n    \"\"\"", "\n", "scores", "=", "[", "]", "\n", "for", "keypoint_prediction", "in", "model_output", ":", "\n", "        ", "confidences_image", "=", "[", "]", "\n", "for", "keypoint_instance_prediction", "in", "keypoint_prediction", ".", "keypoint_instance_predictions", ":", "\n", "            ", "confidences_instance", "=", "keypoint_instance_prediction", ".", "get_confidences", "(", ")", "\n", "if", "len", "(", "confidences_instance", ")", ">", "0", ":", "\n", "                ", "conf", "=", "np", ".", "mean", "(", "confidences_instance", ")", "\n", "confidences_image", ".", "append", "(", "conf", ")", "\n", "", "", "if", "len", "(", "confidences_image", ")", ">", "0", ":", "\n", "            ", "score", "=", "1.", "-", "np", ".", "mean", "(", "confidences_image", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "else", ":", "\n", "            ", "scores", ".", "append", "(", "0", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.semantic_segmentation.ScorerSemanticSegmentation.__init__": [[106, 109], ["lightly.active_learning.scorers.scorer.Scorer.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "model_output", ":", "Union", "[", "List", "[", "np", ".", "ndarray", "]", ",", "Generator", "[", "np", ".", "ndarray", ",", "None", ",", "None", "]", "]", ")", ":", "\n", "        ", "super", "(", "ScorerSemanticSegmentation", ",", "self", ")", ".", "__init__", "(", "model_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.semantic_segmentation.ScorerSemanticSegmentation.calculate_scores": [[110, 140], ["scores.items", "semantic_segmentation._calculate_scores_for_single_prediction", "_calculate_scores_for_single_prediction.items", "numpy.array", "scores[].append"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.semantic_segmentation._calculate_scores_for_single_prediction"], ["", "def", "calculate_scores", "(", "self", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Calculates and returns the active learning scores.\n\n        Returns:\n            A dictionary mapping from the score name (as string) to the scores\n            (as a single-dimensional numpy array).\n\n        \"\"\"", "\n", "scores", "=", "{", "}", "\n", "# iterate over list or generator of model outputs", "\n", "# careful! we can only iterate once if it's a generator", "\n", "for", "prediction", "in", "self", ".", "model_output", ":", "\n", "\n", "# get all active learning scores for this prediction", "\n", "# scores_ is a dictionary where each key is a score name and each ", "\n", "# item is a floating point number indicating the score", "\n", "            ", "scores_", "=", "_calculate_scores_for_single_prediction", "(", "prediction", ")", "\n", "\n", "# append the scores for this prediction to the lists of scores", "\n", "for", "score_name", ",", "score", "in", "scores_", ".", "items", "(", ")", ":", "\n", "                ", "if", "score_name", "in", "scores", ":", "\n", "                    ", "scores", "[", "score_name", "]", ".", "append", "(", "score", ")", "\n", "", "else", ":", "\n", "                    ", "scores", "[", "score_name", "]", "=", "[", "score", "]", "\n", "\n", "# make sure all returned lists are numpy arrays", "\n", "", "", "", "for", "score_name", ",", "score_list", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "scores", "[", "score_name", "]", "=", "np", ".", "array", "(", "score_list", ")", "\n", "\n", "", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.semantic_segmentation._reduce_classification_scores_over_pixels": [[15, 30], ["float", "reduce_fn_over_pixels"], "function", ["None"], ["def", "_reduce_classification_scores_over_pixels", "(", "scores", ":", "np", ".", "ndarray", ",", "\n", "reduce_fn_over_pixels", ":", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "float", "]", "=", "np", ".", "mean", ")", ":", "\n", "    ", "\"\"\"Reduces classification scores to a single floating point number.\n\n    Args:\n        scores:\n            Numpy array of length N = W x H.\n        reduce_fn_over_pixels:\n            Function which reduces the scores in the array to a single float.\n\n    Returns:\n        A single floating point active learning score.\n\n    \"\"\"", "\n", "return", "float", "(", "reduce_fn_over_pixels", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.semantic_segmentation._calculate_scores_for_single_prediction": [[32, 66], ["prediction.reshape", "lightly.active_learning.scorers.ScorerClassification", "lightly.active_learning.scorers.ScorerClassification.calculate_scores().items", "len", "ValueError", "semantic_segmentation._reduce_classification_scores_over_pixels", "lightly.active_learning.scorers.ScorerClassification.calculate_scores"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.semantic_segmentation._reduce_classification_scores_over_pixels", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "def", "_calculate_scores_for_single_prediction", "(", "prediction", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\"Takes a single prediction array and calculates all scores for it.\n\n    Args:\n        prediction:\n            The W x H x C array of predictions where C is the number of classes.\n\n    Returns:\n        A dictionary where each key is a score name and each item is the\n        respective score (single float) for this prediction.\n\n    \"\"\"", "\n", "if", "len", "(", "prediction", ".", "shape", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Invalid shape for semantic segmentation prediction! Expected '", "\n", "f'input of shape W x H x C but got {prediction.shape}.'", "\n", ")", "\n", "\n", "# reshape the W x H x C prediction into (W x H) x C", "\n", "", "w", ",", "h", ",", "c", "=", "prediction", ".", "shape", "\n", "prediction_flat", "=", "prediction", ".", "reshape", "(", "w", "*", "h", ",", "c", ")", "\n", "\n", "# calculate the scores", "\n", "classification_scorer", "=", "ScorerClassification", "(", "prediction_flat", ")", "\n", "\n", "# initialize dictionary to store results", "\n", "scores_dict", "=", "{", "}", "\n", "\n", "# reduce over pixels", "\n", "for", "score_name", ",", "scores", "in", "classification_scorer", ".", "calculate_scores", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "scores_dict", "[", "score_name", "]", "=", "_reduce_classification_scores_over_pixels", "(", "scores", ")", "\n", "\n", "", "return", "scores_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification.__init__": [[97, 104], ["classification.ScorerClassification.ensure_valid_model_output", "lightly.active_learning.scorers.scorer.Scorer.__init__", "isinstance", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification.ensure_valid_model_output", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "model_output", ":", "Union", "[", "np", ".", "ndarray", ",", "List", "[", "List", "[", "float", "]", "]", "]", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "model_output", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "model_output", "=", "np", ".", "array", "(", "model_output", ")", "\n", "\n", "", "validated_model_output", "=", "self", ".", "ensure_valid_model_output", "(", "model_output", ")", "\n", "\n", "super", "(", "ScorerClassification", ",", "self", ")", ".", "__init__", "(", "validated_model_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification.ensure_valid_model_output": [[105, 117], ["len", "len", "ValueError", "ValueError", "numpy.concatenate"], "methods", ["None"], ["", "def", "ensure_valid_model_output", "(", "self", ",", "model_output", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "if", "len", "(", "model_output", ")", "==", "0", ":", "\n", "            ", "return", "model_output", "\n", "", "if", "len", "(", "model_output", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"ScorerClassification model_output must be a 2-dimensional array\"", ")", "\n", "", "if", "model_output", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"ScorerClassification model_output must not have an empty dimension 1\"", ")", "\n", "", "if", "model_output", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "# assuming a binary classification problem with", "\n", "# the model_output denoting the probability of the first class", "\n", "            ", "model_output", "=", "np", ".", "concatenate", "(", "[", "model_output", ",", "1", "-", "model_output", "]", ",", "axis", "=", "1", ")", "\n", "", "return", "model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification.score_names": [[118, 124], ["list", "cls().calculate_scores().keys", "cls().calculate_scores", "cls"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "@", "classmethod", "\n", "def", "score_names", "(", "cls", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns the names of the calculated active learning scores\n        \"\"\"", "\n", "score_names", "=", "list", "(", "cls", "(", "model_output", "=", "[", "[", "0.5", ",", "0.5", "]", "]", ")", ".", "calculate_scores", "(", ")", ".", "keys", "(", ")", ")", "\n", "return", "score_names", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification.calculate_scores": [[125, 155], ["dict", "len", "classification.ScorerClassification._get_scores_uncertainty_least_confidence", "classification.ScorerClassification._get_scores_uncertainty_margin", "classification.ScorerClassification._get_scores_uncertainty_entropy", "numpy.nan_to_num", "classification.ScorerClassification.normalize_scores_0_1", "numpy.array", "classification.ScorerClassification.score_names"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification._get_scores_uncertainty_least_confidence", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification._get_scores_uncertainty_margin", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification._get_scores_uncertainty_entropy", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification.normalize_scores_0_1", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names"], ["", "def", "calculate_scores", "(", "self", ",", "normalize_to_0_1", ":", "bool", "=", "True", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Calculates and returns the active learning scores.\n\n        Args:\n            normalize_to_0_1:\n                If this is true, each score is normalized to have a\n                theoretical minimum of 0 and a theoretical maximum of 1.\n\n        Returns:\n            A dictionary mapping from the score name (as string)\n            to the scores (as a single-dimensional numpy array).\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "model_output", ")", "==", "0", ":", "\n", "            ", "return", "{", "score_name", ":", "np", ".", "array", "(", "[", "]", ")", "for", "score_name", "in", "self", ".", "score_names", "(", ")", "}", "\n", "\n", "", "scores_with_names", "=", "[", "\n", "self", ".", "_get_scores_uncertainty_least_confidence", "(", ")", ",", "\n", "self", ".", "_get_scores_uncertainty_margin", "(", ")", ",", "\n", "self", ".", "_get_scores_uncertainty_entropy", "(", ")", "\n", "]", "\n", "\n", "scores", "=", "dict", "(", ")", "\n", "for", "score", ",", "score_name", "in", "scores_with_names", ":", "\n", "            ", "score", "=", "np", ".", "nan_to_num", "(", "score", ")", "\n", "scores", "[", "score_name", "]", "=", "score", "\n", "\n", "", "if", "normalize_to_0_1", ":", "\n", "            ", "scores", "=", "self", ".", "normalize_scores_0_1", "(", "scores", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification.normalize_scores_0_1": [[156, 171], ["numpy.zeros", "classification.ScorerClassification.calculate_scores", "classification.ScorerClassification.calculate_scores", "scores.keys", "numpy.ones_like", "numpy.interp", "classification.ScorerClassification", "classification.ScorerClassification", "float", "float"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "def", "normalize_scores_0_1", "(", "self", ",", "scores", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "num_classes", "=", "self", ".", "model_output", ".", "shape", "[", "1", "]", "\n", "model_output_very_sure", "=", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "num_classes", ")", ")", "\n", "model_output_very_sure", "[", "0", ",", "0", "]", "=", "1", "\n", "model_output_very_unsure", "=", "np", ".", "ones_like", "(", "model_output_very_sure", ")", "/", "num_classes", "\n", "\n", "scores_minimum", "=", "ScorerClassification", "(", "model_output_very_sure", ")", ".", "calculate_scores", "(", "normalize_to_0_1", "=", "False", ")", "\n", "scores_maximum", "=", "ScorerClassification", "(", "model_output_very_unsure", ")", ".", "calculate_scores", "(", "normalize_to_0_1", "=", "False", ")", "\n", "\n", "for", "score_name", "in", "scores", ".", "keys", "(", ")", ":", "\n", "            ", "interp_xp", "=", "[", "float", "(", "scores_minimum", "[", "score_name", "]", ")", ",", "float", "(", "scores_maximum", "[", "score_name", "]", ")", "]", "\n", "interp_fp", "=", "[", "0", ",", "1", "]", "\n", "scores", "[", "score_name", "]", "=", "np", ".", "interp", "(", "scores", "[", "score_name", "]", ",", "interp_xp", ",", "interp_fp", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification._get_scores_uncertainty_least_confidence": [[172, 175], ["numpy.max"], "methods", ["None"], ["", "def", "_get_scores_uncertainty_least_confidence", "(", "self", ")", ":", "\n", "        ", "scores", "=", "1", "-", "np", ".", "max", "(", "self", ".", "model_output", ",", "axis", "=", "1", ")", "\n", "return", "scores", ",", "\"uncertainty_least_confidence\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification._get_scores_uncertainty_margin": [[176, 179], ["classification._margin_largest_secondlargest"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._margin_largest_secondlargest"], ["", "def", "_get_scores_uncertainty_margin", "(", "self", ")", ":", "\n", "        ", "scores", "=", "1", "-", "_margin_largest_secondlargest", "(", "self", ".", "model_output", ")", "\n", "return", "scores", ",", "\"uncertainty_margin\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification.ScorerClassification._get_scores_uncertainty_entropy": [[180, 183], ["classification._entropy"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._entropy"], ["", "def", "_get_scores_uncertainty_entropy", "(", "self", ")", ":", "\n", "        ", "scores", "=", "_entropy", "(", "self", ".", "model_output", ",", "axis", "=", "1", ")", "\n", "return", "scores", ",", "\"uncertainty_entropy\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._entropy": [[9, 28], ["numpy.zeros_like", "numpy.log2", "numpy.sum"], "function", ["None"], ["def", "_entropy", "(", "probs", ":", "np", ".", "ndarray", ",", "axis", ":", "int", "=", "1", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Computes the entropy of a probability matrix over one array\n\n    Args:\n        probs:\n            A probability matrix of shape (N, M)\n        axis:\n            The axis the compute the probability over, the output does not have this axis anymore\n\n    Exammple:\n        if probs.shape = (N, C) and axis = 1 then entropies.shape = (N, )\n\n    Returns:\n        The entropy of the prediction vectors, shape: probs.shape, but without the specified axis\n    \"\"\"", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "probs", ")", "\n", "log_probs", "=", "np", ".", "log2", "(", "probs", ",", "out", "=", "zeros", ",", "where", "=", "probs", ">", "0", ")", "\n", "entropies", "=", "-", "1", "*", "np", ".", "sum", "(", "probs", "*", "log_probs", ",", "axis", "=", "axis", ")", "\n", "return", "entropies", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.classification._margin_largest_secondlargest": [[29, 45], ["numpy.partition"], "function", ["None"], ["", "def", "_margin_largest_secondlargest", "(", "probs", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Computes the margin of a probability matrix\n\n        Args:\n            probs:\n                A probability matrix of shape (N, M)\n\n        Exammple:\n            if probs.shape = (N, C) then margins.shape = (N, )\n\n        Returns:\n            The margin of the prediction vectors\n        \"\"\"", "\n", "sorted_probs", "=", "np", ".", "partition", "(", "probs", ",", "-", "2", ",", "axis", "=", "1", ")", "\n", "margins", "=", "sorted_probs", "[", ":", ",", "-", "1", "]", "-", "sorted_probs", "[", ":", ",", "-", "2", "]", "\n", "return", "margins", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection.__init__": [[197, 203], ["lightly.active_learning.scorers.scorer.Scorer.__init__", "detection.ScorerObjectDetection._check_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection._check_config"], ["def", "__init__", "(", "self", ",", "\n", "model_output", ":", "List", "[", "ObjectDetectionOutput", "]", ",", "\n", "config", ":", "Dict", "=", "None", ")", ":", "\n", "        ", "super", "(", "ScorerObjectDetection", ",", "self", ")", ".", "__init__", "(", "model_output", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_check_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection._check_config": [[204, 239], ["isinstance", "detection.ScorerObjectDetection.config.keys", "detection.ScorerObjectDetection.config.items", "default_conf.items", "default_conf.keys", "KeyError", "ValueError", "ValueError", "detection.ScorerObjectDetection.config.get", "isinstance", "isinstance", "default_conf.keys", "type"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.dataset_create_request.DatasetCreateRequest.type"], ["", "def", "_check_config", "(", "self", ")", ":", "\n", "        ", "default_conf", "=", "{", "\n", "'frequency_penalty'", ":", "0.25", ",", "\n", "'min_score'", ":", "0.9", "\n", "}", "\n", "\n", "# Check if we have a config dictionary passed in constructor", "\n", "if", "self", ".", "config", "is", "not", "None", "and", "isinstance", "(", "self", ".", "config", ",", "dict", ")", ":", "\n", "# check if constructor received keys which are wrong", "\n", "            ", "for", "k", "in", "self", ".", "config", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "not", "in", "default_conf", ".", "keys", "(", ")", ":", "\n", "                    ", "raise", "KeyError", "(", "\n", "f'Scorer config parameter {k} is not a valid key. '", "\n", "f'Use one of: {default_conf.keys()}'", "\n", ")", "\n", "\n", "# for now all values in config should be between 0.0 and 1.0 and numbers", "\n", "", "", "for", "k", ",", "v", "in", "self", ".", "config", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "(", "isinstance", "(", "v", ",", "float", ")", "or", "isinstance", "(", "v", ",", "int", ")", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f'Scorer config values must be numbers. However, '", "\n", "f'{k} has a value of type {type(v)}.'", "\n", ")", "\n", "\n", "", "if", "v", "<", "0.0", "or", "v", ">", "1.0", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f'Scorer config parameter {k} value ({v}) out of range. '", "\n", "f'Should be between 0.0 and 1.0.'", "\n", ")", "\n", "\n", "# use default config if not specified in config", "\n", "", "for", "key", ",", "val", "in", "default_conf", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "config", "[", "key", "]", "=", "self", ".", "config", ".", "get", "(", "key", ",", "val", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "config", "=", "default_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection.score_names": [[240, 247], ["cls", "list", "cls.calculate_scores().keys", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput", "cls.calculate_scores"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "", "@", "classmethod", "\n", "def", "score_names", "(", "cls", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns the names of the calculated active learning scores\n        \"\"\"", "\n", "scorer", "=", "cls", "(", "model_output", "=", "[", "ObjectDetectionOutput", "(", "[", "]", ",", "[", "]", ",", "[", "]", ")", "]", ")", "\n", "score_names", "=", "list", "(", "scorer", ".", "calculate_scores", "(", ")", ".", "keys", "(", ")", ")", "\n", "return", "score_names", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection.calculate_scores": [[248, 271], ["dict", "detection._reduce_classification_scores_over_boxes", "_reduce_classification_scores_over_boxes.items", "detection.ScorerObjectDetection._get_object_frequency", "detection.ScorerObjectDetection._get_objectness_least_confidence", "numpy.nan_to_num", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection._reduce_classification_scores_over_boxes", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection._get_object_frequency", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection._get_objectness_least_confidence"], ["", "def", "calculate_scores", "(", "self", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Calculates and returns the active learning scores.\n\n        Returns:\n            A dictionary mapping from the score name (as string)\n            to the scores (as a single-dimensional numpy array).\n        \"\"\"", "\n", "scores", "=", "dict", "(", ")", "\n", "scores_with_names", "=", "[", "\n", "self", ".", "_get_object_frequency", "(", ")", ",", "\n", "self", ".", "_get_objectness_least_confidence", "(", ")", "\n", "]", "\n", "for", "score", ",", "score_name", "in", "scores_with_names", ":", "\n", "            ", "score", "=", "np", ".", "nan_to_num", "(", "score", ")", "\n", "scores", "[", "score_name", "]", "=", "score", "\n", "\n", "# add classification scores", "\n", "", "scores_dict_classification", "=", "_reduce_classification_scores_over_boxes", "(", "model_output", "=", "self", ".", "model_output", ")", "\n", "for", "score_name", ",", "score", "in", "scores_dict_classification", ".", "items", "(", ")", ":", "\n", "            ", "scores", "[", "score_name", "]", "=", "np", ".", "array", "(", "score", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection._get_object_frequency": [[272, 277], ["detection._object_frequency"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection._object_frequency"], ["", "def", "_get_object_frequency", "(", "self", ")", ":", "\n", "        ", "return", "_object_frequency", "(", "\n", "self", ".", "model_output", ",", "\n", "self", ".", "config", "[", "'frequency_penalty'", "]", ",", "\n", "self", ".", "config", "[", "'min_score'", "]", ")", ",", "\"object_frequency\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection.ScorerObjectDetection._get_objectness_least_confidence": [[278, 280], ["detection._objectness_least_confidence"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection._objectness_least_confidence"], ["", "def", "_get_objectness_least_confidence", "(", "self", ")", ":", "\n", "        ", "return", "_objectness_least_confidence", "(", "self", ".", "model_output", ")", ",", "\"objectness_least_confidence\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection._object_frequency": [[13, 49], ["min", "max", "numpy.asarray", "objs.items", "n_objs.append", "numpy.interp"], "function", ["None"], ["def", "_object_frequency", "(", "model_output", ":", "List", "[", "ObjectDetectionOutput", "]", ",", "\n", "frequency_penalty", ":", "float", ",", "\n", "min_score", ":", "float", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Score which prefers samples with many and diverse objects.\n\n    Args:\n        model_output:\n            Predictions of the model of length N.\n        frequency_penalty:\n            Penalty applied on multiple objects of the same category. A value\n            of 0.25 would count the first object fully and every additional\n            object only as 0.25.\n        min_score:\n            The minimum score a single sample can have\n\n    Returns:\n        Numpy array of length N with the computed scores\n\n    \"\"\"", "\n", "n_objs", "=", "[", "]", "\n", "for", "output", "in", "model_output", ":", "\n", "        ", "val", "=", "0", "\n", "objs", "=", "{", "}", "\n", "for", "label", "in", "output", ".", "labels", ":", "\n", "            ", "if", "label", "in", "objs", ":", "\n", "                ", "objs", "[", "label", "]", "+=", "frequency_penalty", "\n", "", "else", ":", "\n", "                ", "objs", "[", "label", "]", "=", "1", "\n", "", "", "for", "k", ",", "v", "in", "objs", ".", "items", "(", ")", ":", "\n", "            ", "val", "+=", "v", "\n", "", "n_objs", ".", "append", "(", "val", ")", "\n", "\n", "", "_min", "=", "min", "(", "n_objs", ")", "\n", "_max", "=", "max", "(", "n_objs", ")", "\n", "scores", "=", "[", "np", ".", "interp", "(", "x", ",", "(", "_min", ",", "_max", ")", ",", "(", "min_score", ",", "1.0", ")", ")", "for", "x", "in", "n_objs", "]", "\n", "return", "np", ".", "asarray", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection._objectness_least_confidence": [[51, 74], ["numpy.asarray", "scores.append", "len", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "_objectness_least_confidence", "(", "model_output", ":", "List", "[", "ObjectDetectionOutput", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Score which prefers samples with low max(class prob) * objectness.\n\n    Args:\n        model_output:\n            Predictions of the model of length N.\n\n    Returns:\n        Numpy array of length N with the computed scores.\n\n    \"\"\"", "\n", "scores", "=", "[", "]", "\n", "for", "output", "in", "model_output", ":", "\n", "        ", "if", "len", "(", "output", ".", "scores", ")", ">", "0", ":", "\n", "# prediction margin is 1 - max(class probs), therefore the mean margin", "\n", "# is mean(1 - max(class probs)) which is 1 - mean(max(class probs))", "\n", "            ", "score", "=", "1.", "-", "np", ".", "mean", "(", "output", ".", "scores", ")", "\n", "", "else", ":", "\n", "# set the score to 0 if there was no bounding box detected", "\n", "            ", "score", "=", "0.", "\n", "", "scores", ".", "append", "(", "score", ")", "\n", "\n", "", "return", "np", ".", "asarray", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.detection._reduce_classification_scores_over_boxes": [[76, 121], ["enumerate", "lightly.active_learning.scorers.ScorerClassification.score_names", "numpy.array", "lightly.active_learning.scorers.ScorerClassification().calculate_scores", "scores_dict_list.append", "output_scores_dict[].append", "lightly.active_learning.scorers.ScorerClassification", "len", "float", "reduce_fn_over_bounding_boxes"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names", "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores"], ["", "def", "_reduce_classification_scores_over_boxes", "(", "\n", "model_output", ":", "List", "[", "ObjectDetectionOutput", "]", ",", "\n", "reduce_fn_over_bounding_boxes", ":", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "float", "]", "=", "np", ".", "max", ",", "\n", "default_value_no_bounding_box", ":", "float", "=", "0", "\n", ")", "->", "Dict", "[", "str", ",", "List", "[", "float", "]", "]", ":", "\n", "    ", "\"\"\"Calculates classification scores over the mean of all found objects\n\n    Args:\n        model_output:\n            Predictions of the model of length N.\n        reduce_fn_over_bounding_boxes:\n            This function reduces the scores for each bounding box of an image\n            to one score per image.\n        default_value_no_bounding_box:\n            This is the default score if the image does not have any bounding boxes found.\n\n    Returns:\n        Numpy array of length N with the computed scores.\n\n    \"\"\"", "\n", "# calculate a score dictionary for each sample", "\n", "scores_dict_list", ":", "List", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "=", "[", "]", "\n", "for", "index_sample", ",", "output", "in", "enumerate", "(", "model_output", ")", ":", "\n", "        ", "probs", "=", "np", ".", "array", "(", "output", ".", "class_probabilities", ")", "\n", "scores_dict_this_sample", "=", "ScorerClassification", "(", "model_output", "=", "probs", ")", ".", "calculate_scores", "(", ")", "\n", "scores_dict_list", ".", "append", "(", "scores_dict_this_sample", ")", "\n", "\n", "", "score_names", "=", "ScorerClassification", ".", "score_names", "(", ")", "\n", "\n", "# reduce it to one score per sample", "\n", "\n", "# Initialize the dictionary", "\n", "output_scores_dict", "=", "{", "score_name", ":", "[", "]", "for", "score_name", "in", "score_names", "}", "\n", "\n", "# Fill the dictionary", "\n", "for", "scores_dict", "in", "scores_dict_list", ":", "\n", "        ", "for", "score_name", "in", "score_names", ":", "\n", "            ", "score", ":", "np", ".", "ndarray", "=", "scores_dict", "[", "score_name", "]", "\n", "if", "len", "(", "score", ")", ">", "0", ":", "\n", "                ", "scalar_score", "=", "float", "(", "reduce_fn_over_bounding_boxes", "(", "score", ")", ")", "\n", "", "else", ":", "\n", "                ", "scalar_score", "=", "default_value_no_bounding_box", "\n", "", "output_scores_dict", "[", "score_name", "]", ".", "append", "(", "scalar_score", ")", "\n", "\n", "", "", "return", "output_scores_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_output", ")", ":", "\n", "        ", "self", ".", "model_output", "=", "model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores": [[11, 15], ["None"], "methods", ["None"], ["", "def", "calculate_scores", "(", "self", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Calculates and returns active learning scores in a dictionary.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.score_names": [[16, 21], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "score_names", "(", "cls", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns the names of the calculated active learning scores\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.__init__": [[63, 88], ["agent.ActiveLearningAgent.api_workflow_client.get_all_tags", "agent.ActiveLearningAgent._get_query_tag_bitmask", "agent.ActiveLearningAgent._get_preselected_tag_bitmask"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent._get_query_tag_bitmask", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent._get_preselected_tag_bitmask"], ["def", "__init__", "(", "self", ",", "\n", "api_workflow_client", ":", "ApiWorkflowClient", ",", "\n", "query_tag_name", ":", "str", "=", "'initial-tag'", ",", "\n", "preselected_tag_name", ":", "str", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "api_workflow_client", "=", "api_workflow_client", "\n", "\n", "# set the query_tag_id and preselected_tag_id", "\n", "self", ".", "_query_tag_id", "=", "None", "\n", "self", ".", "_preselected_tag_id", "=", "None", "\n", "\n", "# build lookup table for tag_name to tag_id", "\n", "tag_name_id_dict", "=", "{", "}", "\n", "for", "tag", "in", "self", ".", "api_workflow_client", ".", "get_all_tags", "(", ")", ":", "\n", "            ", "tag_name_id_dict", "[", "tag", ".", "name", "]", "=", "tag", ".", "id", "\n", "# use lookup table to set ids", "\n", "", "self", ".", "_query_tag_id", "=", "tag_name_id_dict", "[", "query_tag_name", "]", "\n", "if", "preselected_tag_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "_preselected_tag_id", "=", "tag_name_id_dict", "[", "preselected_tag_name", "]", "\n", "\n", "# set the filename lists based on preselected and query tag", "\n", "", "self", ".", "_query_tag_bitmask", "=", "self", ".", "_get_query_tag_bitmask", "(", ")", "\n", "self", ".", "_preselected_tag_bitmask", "=", "self", ".", "_get_preselected_tag_bitmask", "(", ")", "\n", "# keep track of the last preselected tag to compute added samples", "\n", "self", ".", "_old_preselected_tag_bitmask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent._get_query_tag_bitmask": [[90, 102], ["agent.ActiveLearningAgent.api_workflow_client._tags_api.get_tag_by_tag_id", "lightly.api.bitmask.BitMask.from_hex"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tag_by_tag_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_hex"], ["", "def", "_get_query_tag_bitmask", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initializes the query tag bitmask.\n\n        \"\"\"", "\n", "# get query tag from api and set bitmask accordingly", "\n", "query_tag_data", "=", "self", ".", "api_workflow_client", ".", "_tags_api", ".", "get_tag_by_tag_id", "(", "\n", "self", ".", "api_workflow_client", ".", "dataset_id", ",", "\n", "tag_id", "=", "self", ".", "_query_tag_id", "\n", ")", "\n", "query_tag_bitmask", "=", "BitMask", ".", "from_hex", "(", "query_tag_data", ".", "bit_mask_data", ")", "\n", "\n", "return", "query_tag_bitmask", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent._get_preselected_tag_bitmask": [[103, 119], ["lightly.api.bitmask.BitMask.from_hex", "agent.ActiveLearningAgent.api_workflow_client._tags_api.get_tag_by_tag_id", "lightly.api.bitmask.BitMask.from_hex"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_hex", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tag_by_tag_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.from_hex"], ["", "def", "_get_preselected_tag_bitmask", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initializes the preselected tag bitmask.\n\n        \"\"\"", "\n", "if", "self", ".", "_preselected_tag_id", "is", "None", ":", "\n", "# if not specified, no samples belong to the preselected tag", "\n", "            ", "preselected_tag_bitmask", "=", "BitMask", ".", "from_hex", "(", "'0x0'", ")", "\n", "", "else", ":", "\n", "# get preselected tag from api and set bitmask accordingly", "\n", "            ", "preselected_tag_data", "=", "self", ".", "api_workflow_client", ".", "_tags_api", ".", "get_tag_by_tag_id", "(", "\n", "self", ".", "api_workflow_client", ".", "dataset_id", ",", "\n", "tag_id", "=", "self", ".", "_preselected_tag_id", "\n", ")", "\n", "preselected_tag_bitmask", "=", "BitMask", ".", "from_hex", "(", "preselected_tag_data", ".", "bit_mask_data", ")", "\n", "\n", "", "return", "preselected_tag_bitmask", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query_set": [[120, 127], ["agent.ActiveLearningAgent._query_tag_bitmask.masked_select_from_list", "agent.ActiveLearningAgent.api_workflow_client.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "@", "property", "\n", "def", "query_set", "(", "self", ")", ":", "\n", "        ", "\"\"\"List of filenames for which to calculate active learning scores.\n\n        \"\"\"", "\n", "return", "self", ".", "_query_tag_bitmask", ".", "masked_select_from_list", "(", "\n", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.labeled_set": [[129, 136], ["agent.ActiveLearningAgent._preselected_tag_bitmask.masked_select_from_list", "agent.ActiveLearningAgent.api_workflow_client.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "@", "property", "\n", "def", "labeled_set", "(", "self", ")", ":", "\n", "        ", "\"\"\"List of filenames indicating selected samples.\n\n        \"\"\"", "\n", "return", "self", ".", "_preselected_tag_bitmask", ".", "masked_select_from_list", "(", "\n", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.unlabeled_set": [[138, 147], ["unlabeled_tag_bitmask.masked_select_from_list", "agent.ActiveLearningAgent.api_workflow_client.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "@", "property", "\n", "def", "unlabeled_set", "(", "self", ")", ":", "\n", "        ", "\"\"\"List of filenames which belong to the query set but are not selected.\n\n        \"\"\"", "\n", "# unlabeled set is the query set minus the preselected set", "\n", "unlabeled_tag_bitmask", "=", "self", ".", "_query_tag_bitmask", "-", "self", ".", "_preselected_tag_bitmask", "\n", "return", "unlabeled_tag_bitmask", ".", "masked_select_from_list", "(", "\n", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.added_set": [[149, 164], ["added_tag_bitmask.masked_select_from_list", "RuntimeError", "agent.ActiveLearningAgent.api_workflow_client.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.bitmask.BitMask.masked_select_from_list", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "@", "property", "\n", "def", "added_set", "(", "self", ")", ":", "\n", "        ", "\"\"\"List of filenames of newly added samples (in the last query).\n\n        Raises:\n            RuntimeError: If executed before a query.\n\n        \"\"\"", "\n", "# the added set only exists after a query", "\n", "if", "self", ".", "_old_preselected_tag_bitmask", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Cannot compute \\\"added set\\\" before querying.'", ")", "\n", "# added set is new preselected set minus the old one", "\n", "", "added_tag_bitmask", "=", "self", ".", "_preselected_tag_bitmask", "-", "self", ".", "_old_preselected_tag_bitmask", "\n", "return", "added_tag_bitmask", ".", "masked_select_from_list", "(", "\n", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.upload_scores": [[167, 195], ["al_scorer.calculate_scores", "len", "al_scorer.calculate_scores.values", "agent.ActiveLearningAgent.api_workflow_client.upload_scores", "ValueError", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.scorers.scorer.Scorer.calculate_scores", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.upload_scores"], ["", "def", "upload_scores", "(", "self", ",", "al_scorer", ":", "Scorer", ")", ":", "\n", "        ", "\"\"\"Computes and uploads active learning scores to the Lightly webapp.\n\n        Args:\n            al_scorer:\n                An instance of a class inheriting from Scorer, e.g. a ClassificationScorer.\n\n        \"\"\"", "\n", "# calculate active learning scores", "\n", "al_scores_dict", "=", "al_scorer", ".", "calculate_scores", "(", ")", "\n", "\n", "if", "al_scores_dict", "==", "{", "}", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'No scores found when calling `.calculate_scores()` of the '", "\n", "'Scorer! If you use a generator, please make sure it is freshly '", "\n", "' initialized.'", "\n", ")", "\n", "\n", "# Check if the length of the query_set and each of the scores are the same", "\n", "", "no_query_samples", "=", "len", "(", "self", ".", "query_set", ")", "\n", "for", "score", "in", "al_scores_dict", ".", "values", "(", ")", ":", "\n", "            ", "no_query_samples_with_scores", "=", "len", "(", "score", ")", "\n", "if", "no_query_samples", "!=", "no_query_samples_with_scores", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f'Number of query samples ({no_query_samples}) must match '", "\n", "f'the number of predictions ({no_query_samples_with_scores})!'", "\n", ")", "\n", "", "", "self", ".", "api_workflow_client", ".", "upload_scores", "(", "al_scores_dict", ",", "self", ".", "_query_tag_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query": [[197, 240], ["agent.ActiveLearningAgent.api_workflow_client.selection", "agent.ActiveLearningAgent._get_preselected_tag_bitmask", "len", "warnings.warn", "agent.ActiveLearningAgent.upload_scores", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.selection", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent._get_preselected_tag_bitmask", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.upload_scores"], ["", "def", "query", "(", "self", ",", "\n", "selection_config", ":", "SelectionConfig", ",", "\n", "al_scorer", ":", "Scorer", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs an active learning query.\n\n        First the active learning scores are computed and uploaded,\n        then the query is performed.\n        After the query, the labeled set is updated to contain all selected samples,\n        the added set is recalculated as (new labeled set - old labeled set), and\n        the query set stays the same.\n\n        Args:\n            selection_config:\n                The selection configuration.\n            al_scorer:\n                An instance of a class inheriting from Scorer, e.g. a ClassificationScorer.\n\n        \"\"\"", "\n", "\n", "# handle illogical stopping condition", "\n", "if", "selection_config", ".", "n_samples", "<", "len", "(", "self", ".", "labeled_set", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "f'ActiveLearningAgent.query: The number of samples ({selection_config.n_samples}) is '", "\n", "f'smaller than the number of preselected samples ({len(self.labeled_set)}).'", "\n", "'Skipping the active learning query.'", "\n", ")", "\n", "return", "\n", "\n", "", "if", "al_scorer", ":", "\n", "            ", "self", ".", "upload_scores", "(", "al_scorer", ")", "\n", "\n", "# perform the selection", "\n", "", "new_tag_data", "=", "self", ".", "api_workflow_client", ".", "selection", "(", "\n", "selection_config", "=", "selection_config", ",", "\n", "preselected_tag_id", "=", "self", ".", "_preselected_tag_id", ",", "\n", "query_tag_id", "=", "self", ".", "_query_tag_id", "\n", ")", "\n", "\n", "# update the old preselected_tag", "\n", "self", ".", "_old_preselected_tag_bitmask", "=", "self", ".", "_preselected_tag_bitmask", "\n", "# set the newly chosen tag as the new preselected_tag", "\n", "self", ".", "_preselected_tag_id", "=", "new_tag_data", ".", "id", "\n", "self", ".", "_preselected_tag_bitmask", "=", "self", ".", "_get_preselected_tag_bitmask", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.rotation.RandomRotate.__init__": [[30, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", ":", "float", "=", "0.5", ",", "angle", ":", "int", "=", "90", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "angle", "=", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.rotation.RandomRotate.__call__": [[34, 49], ["numpy.random.random_sample", "torchvision.transforms.functional.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Rotates the images with a given probability.\n\n        Args:\n            sample:\n                PIL image which will be rotated.\n        \n        Returns:\n            Rotated image or original image.\n\n        \"\"\"", "\n", "prob", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "if", "prob", "<", "self", ".", "prob", ":", "\n", "            ", "sample", "=", "TF", ".", "rotate", "(", "sample", ",", "self", ".", "angle", ")", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.jigsaw.Jigsaw.__init__": [[37, 48], ["torchvision.transforms.ToTensor", "int", "numpy.meshgrid", "numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.arange"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_grid", "=", "3", ",", "img_size", "=", "255", ",", "crop_size", "=", "64", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", ":", "\n", "        ", "self", ".", "n_grid", "=", "n_grid", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "grid_size", "=", "int", "(", "img_size", "/", "self", ".", "n_grid", ")", "\n", "self", ".", "side", "=", "self", ".", "grid_size", "-", "self", ".", "crop_size", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "yy", ",", "xx", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n_grid", ")", ",", "np", ".", "arange", "(", "n_grid", ")", ")", "\n", "self", ".", "yy", "=", "np", ".", "reshape", "(", "yy", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "self", ".", "xx", "=", "np", ".", "reshape", "(", "xx", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.jigsaw.Jigsaw.__call__": [[49, 69], ["numpy.random.randint", "numpy.random.randint", "numpy.asarray", "range", "torch.stack", "torch.stack.append", "PIL.Image.fromarray", "jigsaw.Jigsaw.transform", "numpy.random.permutation"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.transform"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Performs the Jigsaw augmentation\n        Args:\n            img:\n                PIL image to perform Jigsaw augmentation on.\n\n        Returns:\n            Torch tensor with stacked crops.\n        \"\"\"", "\n", "r_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "side", "+", "1", ",", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", "\n", "r_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "side", "+", "1", ",", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "crops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", ":", "\n", "            ", "crops", ".", "append", "(", "img", "[", "self", ".", "xx", "[", "i", "]", "+", "r_x", "[", "i", "]", ":", "self", ".", "xx", "[", "i", "]", "+", "r_x", "[", "i", "]", "+", "self", ".", "crop_size", ",", "\n", "self", ".", "yy", "[", "i", "]", "+", "r_y", "[", "i", "]", ":", "self", ".", "yy", "[", "i", "]", "+", "r_y", "[", "i", "]", "+", "self", ".", "crop_size", ",", ":", "]", ")", "\n", "", "crops", "=", "[", "Image", ".", "fromarray", "(", "crop", ")", "for", "crop", "in", "crops", "]", "\n", "crops", "=", "torch", ".", "stack", "(", "[", "self", ".", "transform", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", "\n", "crops", "=", "crops", "[", "np", ".", "random", ".", "permutation", "(", "self", ".", "n_grid", "**", "2", ")", "]", "\n", "return", "crops", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.solarize.RandomSolarization.__init__": [[23, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", ":", "float", "=", "0.5", ",", "\n", "threshold", ":", "int", "=", "128", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.solarize.RandomSolarization.__call__": [[28, 45], ["numpy.random.random_sample", "PIL.ImageOps.solarize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Solarizes the given input image\n\n        Args:\n            sample:\n                PIL image to which solarize will be applied.\n\n        Returns:\n            Solarized image or original image.\n\n        \"\"\"", "\n", "prob", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "if", "prob", "<", "self", ".", "prob", ":", "\n", "# return solarized image", "\n", "            ", "return", "ImageOps", ".", "solarize", "(", "sample", ",", "threshold", "=", "self", ".", "threshold", ")", "\n", "# return original image", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.gaussian_blur.GaussianBlur.__init__": [[29, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "kernel_size", ":", "float", ",", "prob", ":", "float", "=", "0.5", ",", "\n", "scale", ":", "float", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "scale", "=", "scale", "\n", "# limits for random kernel sizes", "\n", "self", ".", "min_size", "=", "(", "1", "-", "scale", ")", "*", "kernel_size", "\n", "self", ".", "max_size", "=", "(", "1", "+", "scale", ")", "*", "kernel_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.gaussian_blur.GaussianBlur.__call__": [[38, 62], ["numpy.random.random_sample", "numpy.random.normal", "max", "min", "int", "sample.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Blurs the image with a given probability.\n\n        Args:\n            sample:\n                PIL image to which blur will be applied.\n        \n        Returns:\n            Blurred image or original image.\n\n        \"\"\"", "\n", "prob", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "if", "prob", "<", "self", ".", "prob", ":", "\n", "# choose randomized kernel size", "\n", "            ", "kernel_size", "=", "np", ".", "random", ".", "normal", "(", "\n", "self", ".", "kernel_size", ",", "self", ".", "scale", "*", "self", ".", "kernel_size", "\n", ")", "\n", "kernel_size", "=", "max", "(", "self", ".", "min_size", ",", "kernel_size", ")", "\n", "kernel_size", "=", "min", "(", "self", ".", "max_size", ",", "kernel_size", ")", "\n", "radius", "=", "int", "(", "kernel_size", "/", "2", ")", "\n", "#\u00a0return blurred image", "\n", "return", "sample", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "radius", ")", ")", "\n", "# return original image", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.test_Jigsaw.TestJigsaw.test_on_pil_image": [[9, 13], ["lightly.transforms.Jigsaw", "PIL.Image.new", "lightly.transforms.Jigsaw."], "methods", ["None"], ["    ", "def", "test_on_pil_image", "(", "self", ")", ":", "\n", "        ", "crop", "=", "Jigsaw", "(", ")", "\n", "sample", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "255", ",", "255", ")", ")", "\n", "crop", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.test_GaussianBlur.TestGaussianBlur.test_on_pil_image": [[9, 15], ["range", "range", "lightly.transforms.GaussianBlur", "PIL.Image.new", "lightly.transforms.GaussianBlur."], "methods", ["None"], ["    ", "def", "test_on_pil_image", "(", "self", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "1", ",", "100", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "1", ",", "100", ")", ":", "\n", "                ", "gaussian_blur", "=", "GaussianBlur", "(", "w", "*", "0.1", ")", "\n", "sample", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", ",", "h", ")", ")", "\n", "gaussian_blur", "(", "sample", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.test_Solarize.TestRandomSolarization.test_on_pil_image": [[9, 15], ["lightly.transforms.solarize.RandomSolarization", "PIL.Image.new", "lightly.transforms.solarize.RandomSolarization."], "methods", ["None"], ["    ", "def", "test_on_pil_image", "(", "self", ")", ":", "\n", "        ", "for", "w", "in", "[", "32", ",", "64", ",", "128", "]", ":", "\n", "            ", "for", "h", "in", "[", "32", ",", "64", ",", "128", "]", ":", "\n", "                ", "solarization", "=", "RandomSolarization", "(", "0.5", ")", "\n", "sample", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", ",", "h", ")", ")", "\n", "solarization", "(", "sample", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.transforms.test_Rotation.TestGaussianBlur.test_on_pil_image": [[9, 15], ["range", "range", "lightly.transforms.RandomRotate", "PIL.Image.new", "lightly.transforms.RandomRotate."], "methods", ["None"], ["    ", "def", "test_on_pil_image", "(", "self", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "1", ",", "100", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "1", ",", "100", ")", ":", "\n", "                ", "random_rotate", "=", "RandomRotate", "(", ")", "\n", "sample", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", ",", "h", ")", ")", "\n", "random_rotate", "(", "sample", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.BaseCollateFunction.__init__": [[41, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "transform", ":", "torchvision", ".", "transforms", ".", "Compose", ")", ":", "\n", "\n", "        ", "super", "(", "BaseCollateFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.BaseCollateFunction.forward": [[46, 91], ["len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "collate.BaseCollateFunction.transform().unsqueeze_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "collate.BaseCollateFunction.transform"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.transform"], ["", "def", "forward", "(", "self", ",", "batch", ":", "List", "[", "tuple", "]", ")", ":", "\n", "        ", "\"\"\"Turns a batch of tuples into a tuple of batches.\n\n            Args:\n                batch:\n                    A batch of tuples of images, labels, and filenames which\n                    is automatically provided if the dataloader is built from \n                    a LightlyDataset.\n\n            Returns:\n                A tuple of images, labels, and filenames. The images consist of \n                two batches corresponding to the two transformations of the\n                input images.\n\n            Examples:\n                >>> # define a random transformation and the collate function\n                >>> transform = ... # some random augmentations\n                >>> collate_fn = BaseCollateFunction(transform)\n                >>>\n                >>> # input is a batch of tuples (here, batch_size = 1)\n                >>> input = [(img, 0, 'my-image.png')]\n                >>> output = collate_fn(input)\n                >>>\n                >>> # output consists of two random transforms of the images,\n                >>> # the labels, and the filenames in the batch\n                >>> (img_t0, img_t1), label, filename = output\n\n        \"\"\"", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "\n", "# list of transformed images", "\n", "transforms", "=", "[", "self", ".", "transform", "(", "batch", "[", "i", "%", "batch_size", "]", "[", "0", "]", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "2", "*", "batch_size", ")", "]", "\n", "# list of labels", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ")", "\n", "# list of filenames", "\n", "fnames", "=", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", "\n", "\n", "# tuple of transforms", "\n", "transforms", "=", "(", "\n", "torch", ".", "cat", "(", "transforms", "[", ":", "batch_size", "]", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "transforms", "[", "batch_size", ":", "]", ",", "0", ")", "\n", ")", "\n", "\n", "return", "transforms", ",", "labels", ",", "fnames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.ImageCollateFunction.__init__": [[134, 182], ["isinstance", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.Compose", "torchvision.Compose", "collate.BaseCollateFunction.__init__", "max", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "lightly.transforms.RandomRotate", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomVerticalFlip", "torchvision.RandomVerticalFlip", "torchvision.RandomApply", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomGrayscale", "lightly.transforms.GaussianBlur", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", "=", "64", ",", "\n", "cj_prob", ":", "float", "=", "0.8", ",", "\n", "cj_bright", ":", "float", "=", "0.7", ",", "\n", "cj_contrast", ":", "float", "=", "0.7", ",", "\n", "cj_sat", ":", "float", "=", "0.7", ",", "\n", "cj_hue", ":", "float", "=", "0.2", ",", "\n", "min_scale", ":", "float", "=", "0.15", ",", "\n", "random_gray_scale", ":", "float", "=", "0.2", ",", "\n", "gaussian_blur", ":", "float", "=", "0.5", ",", "\n", "kernel_size", ":", "float", "=", "0.1", ",", "\n", "vf_prob", ":", "float", "=", "0.0", ",", "\n", "hf_prob", ":", "float", "=", "0.5", ",", "\n", "rr_prob", ":", "float", "=", "0.0", ",", "\n", "normalize", ":", "dict", "=", "imagenet_normalize", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "input_size", ",", "tuple", ")", ":", "\n", "            ", "input_size_", "=", "max", "(", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "input_size_", "=", "input_size", "\n", "\n", "", "color_jitter", "=", "T", ".", "ColorJitter", "(", "\n", "cj_bright", ",", "cj_contrast", ",", "cj_sat", ",", "cj_hue", "\n", ")", "\n", "\n", "transform", "=", "[", "T", ".", "RandomResizedCrop", "(", "size", "=", "input_size", ",", "\n", "scale", "=", "(", "min_scale", ",", "1.0", ")", ")", ",", "\n", "RandomRotate", "(", "prob", "=", "rr_prob", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "hf_prob", ")", ",", "\n", "T", ".", "RandomVerticalFlip", "(", "p", "=", "vf_prob", ")", ",", "\n", "T", ".", "RandomApply", "(", "[", "color_jitter", "]", ",", "p", "=", "cj_prob", ")", ",", "\n", "T", ".", "RandomGrayscale", "(", "p", "=", "random_gray_scale", ")", ",", "\n", "GaussianBlur", "(", "\n", "kernel_size", "=", "kernel_size", "*", "input_size_", ",", "\n", "prob", "=", "gaussian_blur", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", "\n", "]", "\n", "\n", "if", "normalize", ":", "\n", "            ", "transform", "+=", "[", "\n", "T", ".", "Normalize", "(", "\n", "mean", "=", "normalize", "[", "'mean'", "]", ",", "\n", "std", "=", "normalize", "[", "'std'", "]", ")", "\n", "]", "\n", "\n", "", "transform", "=", "T", ".", "Compose", "(", "transform", ")", "\n", "\n", "super", "(", "ImageCollateFunction", ",", "self", ")", ".", "__init__", "(", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.MultiViewCollateFunction.__init__": [[193, 196], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "transforms", ":", "List", "[", "torchvision", ".", "transforms", ".", "Compose", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.MultiViewCollateFunction.forward": [[197, 218], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "views.append", "transform"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.transform"], ["", "def", "forward", "(", "self", ",", "batch", ":", "List", "[", "tuple", "]", ")", ":", "\n", "        ", "\"\"\"Turns a batch of tuples into a tuple of batches.\n\n        Args:\n            batch:\n                The input batch.\n        \n        Returns:\n            A (views, labels, fnames) tuple where views is a list of tensors\n            with each tensor containing one view of the batch.\n\n        \"\"\"", "\n", "views", "=", "[", "]", "\n", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "            ", "view", "=", "torch", ".", "stack", "(", "[", "transform", "(", "img", ")", "for", "img", ",", "_", ",", "_", "in", "batch", "]", ")", "\n", "views", ".", "append", "(", "view", ")", "\n", "# list of labels", "\n", "", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", ",", "_", "in", "batch", "]", ")", "\n", "# list of filenames", "\n", "fnames", "=", "[", "fname", "for", "_", ",", "_", ",", "fname", "in", "batch", "]", "\n", "return", "views", ",", "labels", ",", "fnames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.SimCLRCollateFunction.__init__": [[259, 287], ["collate.ImageCollateFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", "=", "224", ",", "\n", "cj_prob", ":", "float", "=", "0.8", ",", "\n", "cj_strength", ":", "float", "=", "0.5", ",", "\n", "min_scale", ":", "float", "=", "0.08", ",", "\n", "random_gray_scale", ":", "float", "=", "0.2", ",", "\n", "gaussian_blur", ":", "float", "=", "0.5", ",", "\n", "kernel_size", ":", "float", "=", "0.1", ",", "\n", "vf_prob", ":", "float", "=", "0.0", ",", "\n", "hf_prob", ":", "float", "=", "0.5", ",", "\n", "rr_prob", ":", "float", "=", "0.0", ",", "\n", "normalize", ":", "dict", "=", "imagenet_normalize", ")", ":", "\n", "\n", "        ", "super", "(", "SimCLRCollateFunction", ",", "self", ")", ".", "__init__", "(", "\n", "input_size", "=", "input_size", ",", "\n", "cj_prob", "=", "cj_prob", ",", "\n", "cj_bright", "=", "cj_strength", "*", "0.8", ",", "\n", "cj_contrast", "=", "cj_strength", "*", "0.8", ",", "\n", "cj_sat", "=", "cj_strength", "*", "0.8", ",", "\n", "cj_hue", "=", "cj_strength", "*", "0.2", ",", "\n", "min_scale", "=", "min_scale", ",", "\n", "random_gray_scale", "=", "random_gray_scale", ",", "\n", "gaussian_blur", "=", "gaussian_blur", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "vf_prob", "=", "vf_prob", ",", "\n", "hf_prob", "=", "hf_prob", ",", "\n", "rr_prob", "=", "rr_prob", ",", "\n", "normalize", "=", "normalize", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.MoCoCollateFunction.__init__": [[331, 359], ["collate.ImageCollateFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", "=", "224", ",", "\n", "cj_prob", ":", "float", "=", "0.8", ",", "\n", "cj_strength", ":", "float", "=", "0.4", ",", "\n", "min_scale", ":", "float", "=", "0.2", ",", "\n", "random_gray_scale", ":", "float", "=", "0.2", ",", "\n", "gaussian_blur", ":", "float", "=", "0.", ",", "\n", "kernel_size", ":", "float", "=", "0.1", ",", "\n", "vf_prob", ":", "float", "=", "0.0", ",", "\n", "hf_prob", ":", "float", "=", "0.5", ",", "\n", "rr_prob", ":", "float", "=", "0.0", ",", "\n", "normalize", ":", "dict", "=", "imagenet_normalize", ")", ":", "\n", "\n", "        ", "super", "(", "MoCoCollateFunction", ",", "self", ")", ".", "__init__", "(", "\n", "input_size", "=", "input_size", ",", "\n", "cj_prob", "=", "cj_prob", ",", "\n", "cj_bright", "=", "cj_strength", ",", "\n", "cj_contrast", "=", "cj_strength", ",", "\n", "cj_sat", "=", "cj_strength", ",", "\n", "cj_hue", "=", "cj_strength", ",", "\n", "min_scale", "=", "min_scale", ",", "\n", "random_gray_scale", "=", "random_gray_scale", ",", "\n", "gaussian_blur", "=", "gaussian_blur", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "vf_prob", "=", "vf_prob", ",", "\n", "hf_prob", "=", "hf_prob", ",", "\n", "rr_prob", "=", "rr_prob", ",", "\n", "normalize", "=", "normalize", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.MultiCropCollateFunction.__init__": [[380, 418], ["range", "collate.MultiViewCollateFunction.__init__", "len", "len", "ValueError", "len", "len", "ValueError", "len", "len", "ValueError", "len", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "crop_transforms.extend", "len", "len", "len", "len", "len", "len", "torchvision.Compose", "torchvision.Compose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "crop_sizes", ":", "List", "[", "int", "]", ",", "\n", "crop_counts", ":", "List", "[", "int", "]", ",", "\n", "crop_min_scales", ":", "List", "[", "float", "]", ",", "\n", "crop_max_scales", ":", "List", "[", "float", "]", ",", "\n", "transforms", ":", "T", ".", "Compose", ")", ":", "\n", "\n", "        ", "if", "len", "(", "crop_sizes", ")", "!=", "len", "(", "crop_counts", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Length of crop_sizes and crop_counts must be equal but are'", "\n", "f' {len(crop_sizes)} and {len(crop_counts)}.'", "\n", ")", "\n", "", "if", "len", "(", "crop_sizes", ")", "!=", "len", "(", "crop_min_scales", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Length of crop_sizes and crop_min_scales must be equal but are'", "\n", "f' {len(crop_sizes)} and {len(crop_min_scales)}.'", "\n", ")", "\n", "", "if", "len", "(", "crop_sizes", ")", "!=", "len", "(", "crop_min_scales", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Length of crop_sizes and crop_max_scales must be equal but are'", "\n", "f' {len(crop_sizes)} and {len(crop_min_scales)}.'", "\n", ")", "\n", "\n", "", "crop_transforms", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "crop_sizes", ")", ")", ":", "\n", "\n", "            ", "random_resized_crop", "=", "T", ".", "RandomResizedCrop", "(", "\n", "crop_sizes", "[", "i", "]", ",", "\n", "scale", "=", "(", "crop_min_scales", "[", "i", "]", ",", "crop_max_scales", "[", "i", "]", ")", "\n", ")", "\n", "\n", "crop_transforms", ".", "extend", "(", "[", "\n", "T", ".", "Compose", "(", "[", "\n", "random_resized_crop", ",", "\n", "transforms", ",", "\n", "]", ")", "\n", "]", "*", "crop_counts", "[", "i", "]", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "crop_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.SwaVCollateFunction.__init__": [[464, 501], ["torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.Compose", "torchvision.Compose", "collate.MultiCropCollateFunction.__init__", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomVerticalFlip", "torchvision.RandomVerticalFlip", "lightly.transforms.RandomRotate", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomApply", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomGrayscale", "lightly.transforms.GaussianBlur", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "crop_sizes", ":", "List", "[", "int", "]", "=", "[", "224", ",", "96", "]", ",", "\n", "crop_counts", ":", "List", "[", "int", "]", "=", "[", "2", ",", "6", "]", ",", "\n", "crop_min_scales", ":", "List", "[", "float", "]", "=", "[", "0.14", ",", "0.05", "]", ",", "\n", "crop_max_scales", ":", "List", "[", "float", "]", "=", "[", "1.0", ",", "0.14", "]", ",", "\n", "hf_prob", ":", "float", "=", "0.5", ",", "\n", "vf_prob", ":", "float", "=", "0.0", ",", "\n", "rr_prob", ":", "float", "=", "0.0", ",", "\n", "cj_prob", ":", "float", "=", "0.8", ",", "\n", "cj_strength", ":", "float", "=", "0.8", ",", "\n", "random_gray_scale", ":", "float", "=", "0.2", ",", "\n", "gaussian_blur", ":", "float", "=", "0.", ",", "\n", "kernel_size", ":", "float", "=", "1.0", ",", "\n", "normalize", ":", "dict", "=", "imagenet_normalize", ")", ":", "\n", "\n", "        ", "color_jitter", "=", "T", ".", "ColorJitter", "(", "\n", "cj_strength", ",", "cj_strength", ",", "cj_strength", ",", "cj_strength", "/", "4.", ",", "\n", ")", "\n", "\n", "transforms", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "hf_prob", ")", ",", "\n", "T", ".", "RandomVerticalFlip", "(", "p", "=", "vf_prob", ")", ",", "\n", "RandomRotate", "(", "prob", "=", "rr_prob", ")", ",", "\n", "T", ".", "ColorJitter", "(", ")", ",", "\n", "T", ".", "RandomApply", "(", "[", "color_jitter", "]", ",", "p", "=", "cj_prob", ")", ",", "\n", "T", ".", "RandomGrayscale", "(", "p", "=", "random_gray_scale", ")", ",", "\n", "GaussianBlur", "(", "kernel_size", ",", "prob", "=", "gaussian_blur", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "normalize", "[", "'mean'", "]", ",", "std", "=", "normalize", "[", "'std'", "]", ")", "\n", "]", ")", "\n", "\n", "super", "(", "SwaVCollateFunction", ",", "self", ")", ".", "__init__", "(", "\n", "crop_sizes", "=", "crop_sizes", ",", "\n", "crop_counts", "=", "crop_counts", ",", "\n", "crop_min_scales", "=", "crop_min_scales", ",", "\n", "crop_max_scales", "=", "crop_max_scales", ",", "\n", "transforms", "=", "transforms", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.DINOCollateFunction.__init__": [[557, 650], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "transforms.extend", "collate.MultiViewCollateFunction.__init__", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomVerticalFlip", "torchvision.RandomVerticalFlip", "lightly.transforms.RandomRotate", "torchvision.RandomApply", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomGrayscale", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "lightly.transforms.GaussianBlur", "lightly.transforms.GaussianBlur", "lightly.transforms.RandomSolarization", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "lightly.transforms.GaussianBlur", "torchvision.ColorJitter", "torchvision.ColorJitter"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "global_crop_size", "=", "224", ",", "\n", "global_crop_scale", "=", "(", "0.4", ",", "1.0", ")", ",", "\n", "local_crop_size", "=", "96", ",", "\n", "local_crop_scale", "=", "(", "0.05", ",", "0.4", ")", ",", "\n", "n_local_views", "=", "6", ",", "\n", "hf_prob", "=", "0.5", ",", "\n", "vf_prob", "=", "0", ",", "\n", "rr_prob", "=", "0", ",", "\n", "cj_prob", "=", "0.8", ",", "\n", "cj_bright", "=", "0.4", ",", "\n", "cj_contrast", "=", "0.4", ",", "\n", "cj_sat", "=", "0.2", ",", "\n", "cj_hue", "=", "0.1", ",", "\n", "random_gray_scale", "=", "0.2", ",", "\n", "gaussian_blur", "=", "(", "1.0", ",", "0.1", ",", "0.5", ")", ",", "\n", "kernel_size", "=", "1.4", ",", "\n", "kernel_scale", "=", "0.6", ",", "\n", "solarization_prob", "=", "0.2", ",", "\n", "normalize", "=", "imagenet_normalize", ",", "\n", ")", ":", "\n", "\n", "        ", "flip_and_color_jitter", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "hf_prob", ")", ",", "\n", "T", ".", "RandomVerticalFlip", "(", "p", "=", "vf_prob", ")", ",", "\n", "RandomRotate", "(", "prob", "=", "rr_prob", ")", ",", "\n", "T", ".", "RandomApply", "(", "\n", "[", "T", ".", "ColorJitter", "(", "\n", "brightness", "=", "cj_bright", ",", "\n", "contrast", "=", "cj_contrast", ",", "\n", "saturation", "=", "cj_sat", ",", "\n", "hue", "=", "cj_hue", "\n", ")", "]", ",", "\n", "p", "=", "cj_prob", ",", "\n", ")", ",", "\n", "T", ".", "RandomGrayscale", "(", "p", "=", "random_gray_scale", ")", ",", "\n", "]", ")", "\n", "normalize", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "normalize", "[", "'mean'", "]", ",", "std", "=", "normalize", "[", "'std'", "]", ")", ",", "\n", "]", ")", "\n", "global_crop", "=", "T", ".", "RandomResizedCrop", "(", "\n", "global_crop_size", ",", "\n", "scale", "=", "global_crop_scale", ",", "\n", "interpolation", "=", "Image", ".", "BICUBIC", ",", "\n", ")", "\n", "\n", "# first global crop", "\n", "global_transform_0", "=", "T", ".", "Compose", "(", "[", "\n", "global_crop", ",", "\n", "flip_and_color_jitter", ",", "\n", "GaussianBlur", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "prob", "=", "gaussian_blur", "[", "0", "]", ",", "\n", "scale", "=", "kernel_scale", "\n", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "# second global crop", "\n", "global_transform_1", "=", "T", ".", "Compose", "(", "[", "\n", "global_crop", ",", "\n", "flip_and_color_jitter", ",", "\n", "GaussianBlur", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "prob", "=", "gaussian_blur", "[", "1", "]", ",", "\n", "scale", "=", "kernel_scale", "\n", ")", ",", "\n", "RandomSolarization", "(", "prob", "=", "solarization_prob", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "# transformation for the local small crops", "\n", "local_transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResizedCrop", "(", "\n", "local_crop_size", ",", "\n", "scale", "=", "local_crop_scale", ",", "\n", "interpolation", "=", "Image", ".", "BICUBIC", "\n", ")", ",", "\n", "flip_and_color_jitter", ",", "\n", "GaussianBlur", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "prob", "=", "gaussian_blur", "[", "2", "]", ",", "\n", "scale", "=", "kernel_scale", "\n", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "local_transforms", "=", "[", "local_transform", "]", "*", "n_local_views", "\n", "\n", "transforms", "=", "[", "global_transform_0", ",", "global_transform_1", "]", "\n", "transforms", ".", "extend", "(", "local_transforms", ")", "\n", "super", "(", ")", ".", "__init__", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.MAECollateFunction.__init__": [[666, 686], ["collate.MultiViewCollateFunction.__init__", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "transforms.append", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "int", "]", "]", "=", "224", ",", "\n", "min_scale", ":", "float", "=", "0.2", ",", "\n", "normalize", ":", "dict", "=", "imagenet_normalize", ",", "\n", ")", ":", "\n", "        ", "transforms", "=", "[", "\n", "T", ".", "RandomResizedCrop", "(", "input_size", ",", "scale", "=", "(", "min_scale", ",", "1.0", ")", ",", "interpolation", "=", "3", ")", ",", "# 3 is bicubic", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", "\n", "if", "normalize", ":", "\n", "            ", "transforms", ".", "append", "(", "\n", "T", ".", "Normalize", "(", "\n", "mean", "=", "normalize", "[", "'mean'", "]", ",", "\n", "std", "=", "normalize", "[", "'std'", "]", "\n", ")", "\n", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "[", "T", ".", "Compose", "(", "transforms", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.MAECollateFunction.forward": [[687, 691], ["collate.MultiViewCollateFunction.forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "forward", "(", "self", ",", "batch", ":", "List", "[", "tuple", "]", ")", ":", "\n", "        ", "views", ",", "labels", ",", "fnames", "=", "super", "(", ")", ".", "forward", "(", "batch", ")", "\n", "#\u00a0Return only first view as MAE needs only a single view per image.", "\n", "return", "views", "[", "0", "]", ",", "labels", ",", "fnames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.PIRLCollateFunction.__init__": [[734, 786], ["torch.Module.__init__", "isinstance", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.Compose", "torchvision.Compose", "lightly.transforms.Jigsaw", "max", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomApply", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomGrayscale", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "int", "torchvision.Compose", "torchvision.Compose"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", "=", "64", ",", "\n", "cj_prob", ":", "float", "=", "0.8", ",", "\n", "cj_bright", ":", "float", "=", "0.4", ",", "\n", "cj_contrast", ":", "float", "=", "0.4", ",", "\n", "cj_sat", ":", "float", "=", "0.4", ",", "\n", "cj_hue", ":", "float", "=", "0.4", ",", "\n", "min_scale", ":", "float", "=", "0.08", ",", "\n", "random_gray_scale", ":", "float", "=", "0.2", ",", "\n", "hf_prob", ":", "float", "=", "0.5", ",", "\n", "n_grid", ":", "int", "=", "3", ",", "\n", "normalize", ":", "dict", "=", "imagenet_normalize", "\n", ")", ":", "\n", "        ", "super", "(", "PIRLCollateFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "isinstance", "(", "input_size", ",", "tuple", ")", ":", "\n", "            ", "input_size_", "=", "max", "(", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "input_size_", "=", "input_size", "\n", "\n", "", "color_jitter", "=", "T", ".", "ColorJitter", "(", "\n", "cj_bright", ",", "cj_contrast", ",", "cj_sat", ",", "cj_hue", "\n", ")", "\n", "\n", "# Transform for transformed jigsaw image", "\n", "transform", "=", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "hf_prob", ")", ",", "\n", "T", ".", "RandomApply", "(", "[", "color_jitter", "]", ",", "p", "=", "cj_prob", ")", ",", "\n", "T", ".", "RandomGrayscale", "(", "p", "=", "random_gray_scale", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", "\n", "]", "\n", "\n", "if", "normalize", ":", "\n", "            ", "transform", "+=", "[", "\n", "T", ".", "Normalize", "(", "\n", "mean", "=", "normalize", "[", "'mean'", "]", ",", "\n", "std", "=", "normalize", "[", "'std'", "]", ")", "\n", "]", "\n", "\n", "# Cropping and normalisation for untransformed image", "\n", "", "self", ".", "no_augment", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResizedCrop", "(", "size", "=", "input_size", ",", "\n", "scale", "=", "(", "min_scale", ",", "1.0", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "\n", "mean", "=", "normalize", "[", "'mean'", "]", ",", "\n", "std", "=", "normalize", "[", "'std'", "]", ")", "\n", "]", ")", "\n", "self", ".", "jigsaw", "=", "Jigsaw", "(", "n_grid", "=", "n_grid", ",", "\n", "img_size", "=", "input_size_", ",", "\n", "crop_size", "=", "int", "(", "input_size_", "//", "n_grid", ")", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "transform", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.collate.PIRLCollateFunction.forward": [[787, 810], ["len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "collate.PIRLCollateFunction.jigsaw().unsqueeze_", "collate.PIRLCollateFunction.no_augment().unsqueeze_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "collate.PIRLCollateFunction.jigsaw", "collate.PIRLCollateFunction.no_augment"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ":", "List", "[", "tuple", "]", ")", ":", "\n", "        ", "\"\"\"Overriding the BaseCollateFunction class's forward method because\n        for PIRL we need only one augmented batch, as opposed to both, which the\n        BaseCollateFunction creates.\"\"\"", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "\n", "# list of transformed images", "\n", "img_transforms", "=", "[", "self", ".", "jigsaw", "(", "batch", "[", "i", "]", "[", "0", "]", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "img", "=", "[", "self", ".", "no_augment", "(", "batch", "[", "i", "]", "[", "0", "]", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "# list of labels", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ")", "\n", "# list of filenames", "\n", "fnames", "=", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", "\n", "\n", "# tuple of transforms", "\n", "transforms", "=", "(", "\n", "torch", ".", "cat", "(", "img", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "img_transforms", ",", "0", ")", "\n", ")", "\n", "\n", "return", "transforms", ",", "labels", ",", "fnames", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._dir_contains_videos": [[28, 40], ["os.scandir", "any", "f.name.lower().endswith", "f.name.lower"], "function", ["None"], ["\n", "\n", "", "def", "print_as_warning", "(", "message", ":", "str", ",", "warning_class", ":", "Type", "[", "Warning", "]", "=", "UserWarning", ")", ":", "\n", "    ", "old_format", "=", "copy", ".", "copy", "(", "warnings", ".", "formatwarning", ")", "\n", "\n", "warnings", ".", "formatwarning", "=", "_custom_formatwarning", "\n", "warnings", ".", "warn", "(", "message", ",", "warning_class", ")", "\n", "\n", "warnings", ".", "formatwarning", "=", "old_format", "\n", "\n", "\n", "", "def", "cpu_count", "(", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._contains_videos": [[42, 59], ["os.walk", "_helpers._dir_contains_videos"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._dir_contains_videos"], ["\n", "return", "os", ".", "cpu_count", "(", ")", "\n", "\n", "\n", "", "def", "fix_input_path", "(", "path", ")", ":", "\n", "    ", "\"\"\"Fix broken relative paths.\n\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "path", ")", ":", "\n", "        ", "path", "=", "utils", ".", "to_absolute_path", "(", "path", ")", "\n", "", "return", "path", "\n", "\n", "\n", "", "def", "fix_hydra_arguments", "(", "config_path", ":", "str", "=", "'config'", ",", "config_name", ":", "str", "=", "'config'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._is_lightly_output_dir": [[61, 72], ["None"], "function", ["None"], ["\n", "\n", "hydra_args", "=", "{", "'config_path'", ":", "config_path", ",", "'config_name'", ":", "config_name", "}", "\n", "\n", "try", ":", "\n", "        ", "if", "version_compare", "(", "hydra", ".", "__version__", ",", "'1.1.2'", ")", ">", "0", ":", "\n", "            ", "hydra_args", "[", "'version_base'", "]", "=", "'1.1'", "\n", "", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "hydra_args", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._contains_subdirs": [[74, 87], ["os.scandir", "any", "_helpers._is_lightly_output_dir", "f.is_dir"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._is_lightly_output_dir"], ["\n", "", "def", "is_url", "(", "checkpoint", ")", ":", "\n", "    ", "\"\"\"Check whether the checkpoint is a url or not.\n\n    \"\"\"", "\n", "is_url", "=", "(", "'https://storage.googleapis.com'", "in", "checkpoint", ")", "\n", "return", "is_url", "\n", "\n", "\n", "", "def", "get_ptmodel_from_config", "(", "model", ")", ":", "\n", "    ", "\"\"\"Get a pre-trained model from the lightly model zoo.\n\n    \"\"\"", "\n", "key", "=", "model", "[", "'name'", "]", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._load_dataset_from_folder": [[89, 146], ["_helpers._contains_videos", "os.path.exists", "ValueError", "ValueError", "VideoDataset", "_helpers._contains_subdirs", "torchvision.datasets.ImageFolder", "lightly.data._image.DatasetFolder"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._contains_videos", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._contains_subdirs"], ["key", "+=", "'/d'", "+", "str", "(", "model", "[", "'num_ftrs'", "]", ")", "\n", "key", "+=", "'/w'", "+", "str", "(", "float", "(", "model", "[", "'width'", "]", ")", ")", "\n", "\n", "if", "key", "in", "model_zoo", ".", "keys", "(", ")", ":", "\n", "        ", "return", "model_zoo", "[", "key", "]", ",", "key", "\n", "", "else", ":", "\n", "        ", "return", "''", ",", "key", "\n", "\n", "\n", "", "", "def", "load_state_dict_from_url", "(", "url", ",", "map_location", "=", "None", ")", ":", "\n", "    ", "\"\"\"Try to load the checkopint from the given url.\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "map_location", "=", "map_location", "\n", ")", "\n", "return", "state_dict", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "'Not able to load state dict from %s'", "%", "(", "url", ")", ")", "\n", "print", "(", "'Retrying with http:// prefix'", ")", "\n", "", "try", ":", "\n", "        ", "url", "=", "url", ".", "replace", "(", "'https'", ",", "'http'", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", ",", "map_location", "=", "map_location", "\n", ")", "\n", "return", "state_dict", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "'Not able to load state dict from %s'", "%", "(", "url", ")", ")", "\n", "\n", "# in this case downloading the pre-trained model was not possible", "\n", "# notify the user and return", "\n", "", "return", "{", "'state_dict'", ":", "None", "}", "\n", "\n", "\n", "", "def", "_maybe_expand_batchnorm_weights", "(", "model_dict", ",", "state_dict", ",", "num_splits", ")", ":", "\n", "    ", "\"\"\"Expands the weights of the BatchNorm2d to the size of SplitBatchNorm.\n\n    \"\"\"", "\n", "running_mean", "=", "'running_mean'", "\n", "running_var", "=", "'running_var'", "\n", "\n", "for", "key", ",", "item", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "# not batchnorm -> continue", "\n", "        ", "if", "not", "running_mean", "in", "key", "and", "not", "running_var", "in", "key", ":", "\n", "            ", "continue", "\n", "\n", "", "state", "=", "state_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "# not in dict -> continue", "\n", "if", "state", "is", "None", ":", "\n", "            ", "continue", "\n", "# same shape -> continue", "\n", "", "if", "item", ".", "shape", "==", "state", ".", "shape", ":", "\n", "            ", "continue", "\n", "\n", "# found running mean or running var with different shapes", "\n", "", "state_dict", "[", "key", "]", "=", "state", ".", "repeat", "(", "num_splits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._utils.check_images": [[14, 47], ["lightly.data.LightlyDataset", "lightly.data.LightlyDataset.get_filenames", "tqdm.thread_map", "PIL.Image.open", "Image.open.load", "min", "zip", "zip", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["def", "check_images", "(", "data_dir", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "'''Iterate through a directory of images and find corrupt images\n\n    Args:\n        data_dir: Path to the directory containing the images\n\n    Returns:\n        (healthy_images, corrupt_images)\n    '''", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "data_dir", ")", "\n", "filenames", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "\n", "def", "_is_corrupt", "(", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", "\n", ")", "\n", "image", ".", "load", "(", ")", "\n", "", "except", "(", "IOError", ",", "UnidentifiedImageError", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "mapped", "=", "concurrent", ".", "thread_map", "(", "\n", "_is_corrupt", ",", "\n", "filenames", ",", "\n", "chunksize", "=", "min", "(", "32", ",", "len", "(", "filenames", ")", ")", "\n", ")", "\n", "healthy_images", "=", "[", "f", "for", "f", ",", "is_corrupt", "\n", "in", "zip", "(", "filenames", ",", "mapped", ")", "if", "not", "is_corrupt", "]", "\n", "corrupt_images", "=", "[", "f", "for", "f", ",", "is_corrupt", "\n", "in", "zip", "(", "filenames", ",", "mapped", ")", "if", "is_corrupt", "]", "\n", "return", "healthy_images", ",", "corrupt_images", "\n", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoLoader.__init__": [[127, 147], ["hasattr", "torchvision.io.VideoReader"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "path", ":", "str", ",", "\n", "timestamps", ":", "List", "[", "float", "]", ",", "\n", "backend", ":", "str", "=", "'video_reader'", ",", "\n", "eps", ":", "float", "=", "1e-6", ",", "\n", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "timestamps", "=", "timestamps", "\n", "self", ".", "current_index", "=", "None", "\n", "self", ".", "pts_unit", "=", "'sec'", "\n", "self", ".", "backend", "=", "backend", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "has_video_reader", "=", "io", ".", "_HAS_VIDEO_OPT", "and", "hasattr", "(", "io", ",", "'VideoReader'", ")", "\n", "\n", "if", "has_video_reader", "and", "self", ".", "backend", "==", "'video_reader'", ":", "\n", "            ", "self", ".", "reader", "=", "io", ".", "VideoReader", "(", "path", "=", "self", ".", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reader", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoLoader.read_frame": [[148, 297], ["PIL.Image.fromarray", "_video.EmptyVideoError", "frame_info[].permute", "torchvision.io.read_video", "len", "_video.FrameShapeError", "len", "frame.squeeze.squeeze.squeeze", "frame.squeeze.squeeze.numpy", "_video.VideoLoader.timestamps.index", "_video.VideoLoader.reader.seek", "len", "float", "warnings.warn", "len", "len", "StopIteration", "len", "next", "next", "_video.VideoLoader.reader.seek", "float", "next", "next", "_video.VideoLoader.reader.seek", "next", "_video.UnseekableTimestampError", "float", "float"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index"], ["", "", "def", "read_frame", "(", "self", ",", "timestamp", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reads the next frame or from timestamp.\n\n        If no timestamp is provided this method just returns the next frame from\n        the video. This is significantly (up to 10x) faster if the `video_loader` \n        backend is available. If a timestamp is provided we first have to seek\n        to the right position and then load the frame.\n        \n        Args:\n            timestamp: \n                Specific timestamp of frame in seconds or None (default: None)\n\n        Returns:\n            A PIL Image\n\n        Raises:\n            StopIteration:\n                If end of video is reached and timestamp is None.\n            ValueError: \n                If provided timestamp is not in self.timestamps.\n            VideoError:\n                If the frame could not be loaded.\n\n        \"\"\"", "\n", "if", "not", "self", ".", "timestamps", ":", "\n", "            ", "raise", "EmptyVideoError", "(", "\n", "f'Cannot load frame from empty video {self.path}.'", "\n", ")", "\n", "\n", "", "if", "timestamp", "is", "None", ":", "\n", "# Try to read next frame.", "\n", "            ", "if", "self", ".", "current_index", "is", "None", ":", "\n", "# Beginning of video.", "\n", "                ", "index", "=", "0", "\n", "timestamp", "=", "self", ".", "timestamps", "[", "index", "]", "\n", "", "elif", "self", ".", "current_index", ">=", "len", "(", "self", ".", "timestamps", ")", ":", "\n", "# Reached end of video.", "\n", "                ", "raise", "StopIteration", "(", ")", "\n", "", "else", ":", "\n", "#\u00a0Read next frame.", "\n", "                ", "index", "=", "self", ".", "current_index", "+", "1", "\n", "timestamp", "=", "self", ".", "timestamps", "[", "index", "]", "\n", "", "", "elif", "(", "\n", "self", ".", "current_index", "is", "not", "None", "\n", "and", "self", ".", "current_index", "+", "1", "<", "len", "(", "self", ".", "timestamps", ")", "\n", "and", "timestamp", "==", "self", ".", "timestamps", "[", "self", ".", "current_index", "+", "1", "]", "\n", ")", ":", "\n", "#\u00a0Provided timestamp is timestamp of next frame.", "\n", "            ", "index", "=", "self", ".", "current_index", "+", "1", "\n", "", "else", ":", "\n", "#\u00a0Random timestamp, must find corresponding index.", "\n", "            ", "index", "=", "self", ".", "timestamps", ".", "index", "(", "timestamp", ")", "\n", "\n", "", "if", "self", ".", "reader", ":", "\n", "#\u00a0Only seek if we cannot just call next(self.reader).", "\n", "            ", "if", "(", "\n", "self", ".", "current_index", "is", "None", "and", "index", "!=", "0", "\n", "or", "self", ".", "current_index", "is", "not", "None", "and", "index", "!=", "self", ".", "current_index", "+", "1", "\n", ")", ":", "\n", "                ", "self", ".", "reader", ".", "seek", "(", "timestamp", ")", "\n", "\n", "#\u00a0Find next larger timestamp than the one we seek. Used to verify", "\n", "#\u00a0that we did not seek too far in the video and that the correct", "\n", "#\u00a0frame is returned.", "\n", "", "if", "index", "+", "1", "<", "len", "(", "self", ".", "timestamps", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "next_timestamp", "=", "next", "(", "\n", "ts", "for", "ts", "in", "self", ".", "timestamps", "[", "index", "+", "1", ":", "]", "if", "ts", ">", "timestamp", "\n", ")", "\n", "", "except", "StopIteration", ":", "\n", "# All timestamps of future frames are smaller.", "\n", "                    ", "next_timestamp", "=", "float", "(", "'inf'", ")", "\n", "", "", "else", ":", "\n", "#\u00a0Want to load last frame in video.", "\n", "                ", "next_timestamp", "=", "float", "(", "'inf'", ")", "\n", "\n", "#\u00a0Load the frame.", "\n", "", "try", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "frame_info", "=", "next", "(", "self", ".", "reader", ")", "\n", "if", "frame_info", "[", "'pts'", "]", "<", "timestamp", "-", "self", ".", "eps", ":", "\n", "#\u00a0Did not read far enough, let's continue reading more ", "\n", "# frames. This can happen due to decreasing timestamps.", "\n", "                        ", "frame_info", "=", "next", "(", "self", ".", "reader", ")", "\n", "", "elif", "frame_info", "[", "'pts'", "]", ">=", "next_timestamp", ":", "\n", "# Accidentally read too far, let's seek back to the ", "\n", "# correct position and exit. This can happen due to ", "\n", "# imprecise seek.", "\n", "                        ", "self", ".", "reader", ".", "seek", "(", "timestamp", ")", "\n", "frame_info", "=", "next", "(", "self", ".", "reader", ")", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "", "except", "StopIteration", ":", "\n", "# Accidentally reached the end of the video, let's seek back to", "\n", "#\u00a0the correction position. This can happen due to imprecise seek.", "\n", "                ", "self", ".", "reader", ".", "seek", "(", "timestamp", ")", "\n", "try", ":", "\n", "                    ", "frame_info", "=", "next", "(", "self", ".", "reader", ")", "\n", "", "except", "StopIteration", "as", "ex", ":", "\n", "#\u00a0Seeking to this timestamp simply doesn't work.", "\n", "                    ", "raise", "UnseekableTimestampError", "(", "\n", "f'Cannot seek to frame with timestamp {float(timestamp)} '", "\n", "f'in {self.path}.'", "\n", ")", "from", "ex", "\n", "\n", "", "", "if", "(", "\n", "frame_info", "[", "'pts'", "]", "<", "timestamp", "-", "self", ".", "eps", "\n", "or", "frame_info", "[", "'pts'", "]", ">=", "next_timestamp", "\n", ")", ":", "\n", "#\u00a0We accidentally loaded the wrong frame. This should only ", "\n", "# happen if self.reader.seek(timestamp) does not seek to the", "\n", "#\u00a0correct timestamp. In this case there is nothing we can do to", "\n", "# load the correct frame and we alert the user that something", "\n", "# went wrong.", "\n", "                ", "warnings", ".", "warn", "(", "\n", "f'Loaded wrong frame in {self.path}! Tried to load frame '", "\n", "f'with index {index} and timestamp {float(timestamp)} but '", "\n", "f'could only find frame with timestamp {frame_info[\"pts\"]}.'", "\n", ")", "\n", "\n", "# Make sure we have the tensor in correct shape (we want H x W x C)", "\n", "", "frame", "=", "frame_info", "[", "'data'", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "self", ".", "current_index", "=", "index", "\n", "\n", "", "else", ":", "# fallback on pyav", "\n", "            ", "frame", ",", "_", ",", "_", "=", "io", ".", "read_video", "(", "self", ".", "path", ",", "\n", "start_pts", "=", "timestamp", ",", "\n", "end_pts", "=", "timestamp", ",", "\n", "pts_unit", "=", "self", ".", "pts_unit", ")", "\n", "self", ".", "current_index", "=", "index", "\n", "\n", "", "if", "len", "(", "frame", ".", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "FrameShapeError", "(", "\n", "f'Loaded frame has unexpected shape {frame.shape}. '", "\n", "f'Frames are expected to have 3 dimensions: (H, W, C).'", "\n", ")", "\n", "\n", "# sometimes torchvision returns multiple frames for one timestamp (bug?)", "\n", "", "if", "len", "(", "frame", ".", "shape", ")", ">", "3", "and", "frame", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "frame", "=", "frame", "[", "0", "]", "\n", "\n", "# make sure we return a H x W x C tensor and not (1 x H x W x C)", "\n", "", "if", "len", "(", "frame", ".", "shape", ")", "==", "4", ":", "\n", "            ", "frame", "=", "frame", ".", "squeeze", "(", ")", "\n", "\n", "# convert to PIL image", "\n", "", "image", "=", "Image", ".", "fromarray", "(", "frame", ".", "numpy", "(", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._TimestampFpsFromVideosDataset.__init__": [[301, 304], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "video_instances", ":", "List", "[", "str", "]", ",", "pts_unit", ":", "str", ")", ":", "\n", "        ", "self", ".", "video_instances", "=", "video_instances", "\n", "self", ".", "pts_unit", "=", "pts_unit", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._TimestampFpsFromVideosDataset.__len__": [[305, 307], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._TimestampFpsFromVideosDataset.__getitem__": [[308, 312], ["torchvision.io.read_video_timestamps"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "instance", "=", "self", ".", "video_instances", "[", "index", "]", "\n", "ts", ",", "fps", "=", "io", ".", "read_video_timestamps", "(", "instance", ",", "pts_unit", "=", "self", ".", "pts_unit", ")", "\n", "return", "ts", ",", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset.__init__": [[451, 516], ["torchvision.datasets.VisionDataset.__init__", "_video._make_dataset", "torchvision.get_video_backend", "sum", "threading.Lock", "len", "RuntimeError", "_video._find_non_increasing_timestamps", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image._make_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._find_non_increasing_timestamps"], ["def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "extensions", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "is_valid_file", "=", "None", ",", "\n", "exception_on_non_increasing_timestamp", "=", "True", ",", "\n", "tqdm_args", ":", "Dict", "[", "str", ",", "Any", "]", "=", "None", ",", "\n", "num_workers", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "VideoDataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "videos", ",", "video_timestamps", ",", "offsets", ",", "fps", "=", "_make_dataset", "(", "\n", "self", ".", "root", ",", "\n", "extensions", ",", "\n", "is_valid_file", ",", "\n", "tqdm_args", "=", "tqdm_args", ",", "\n", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "if", "len", "(", "videos", ")", "==", "0", ":", "\n", "            ", "msg", "=", "'Found 0 videos in folder: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "if", "extensions", "is", "not", "None", ":", "\n", "                ", "msg", "+=", "'Supported extensions are: {}'", ".", "format", "(", "\n", "','", ".", "join", "(", "extensions", ")", ")", "\n", "", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "extensions", "=", "extensions", "\n", "self", ".", "backend", "=", "torchvision", ".", "get_video_backend", "(", ")", "\n", "self", ".", "exception_on_non_increasing_timestamp", "=", "exception_on_non_increasing_timestamp", "\n", "\n", "self", ".", "videos", "=", "videos", "\n", "self", ".", "video_timestamps", "=", "video_timestamps", "\n", "self", ".", "_length", "=", "sum", "(", "(", "\n", "len", "(", "ts", ")", "for", "ts", "in", "self", ".", "video_timestamps", "\n", ")", ")", "\n", "#\u00a0Boolean value for every timestamp in self.video_timestamps. If True ", "\n", "# the timestamp of the frame is non-increasing compared to timestamps of", "\n", "# previous frames in the video.", "\n", "self", ".", "video_timestamps_is_non_increasing", "=", "[", "\n", "_find_non_increasing_timestamps", "(", "timestamps", ")", "for", "timestamps", "in", "video_timestamps", "\n", "]", "\n", "\n", "# offsets[i] indicates the index of the first frame of the i-th video.", "\n", "# e.g. for two videos of length 10 and 20, the offsets will be [0, 10].", "\n", "self", ".", "offsets", "=", "offsets", "\n", "self", ".", "fps", "=", "fps", "\n", "\n", "# Current VideoLoader instance and the corresponding video index. We ", "\n", "# only keep track of the last accessed video as this is a good trade-off", "\n", "# between speed and memory requirements.", "\n", "# See https://github.com/lightly-ai/lightly/pull/702 for details.", "\n", "self", ".", "_video_loader", "=", "None", "\n", "self", ".", "_video_index", "=", "None", "\n", "\n", "#\u00a0Keep unique reference of dataloader worker. We need this to avoid", "\n", "# accidentaly sharing VideoLoader instances between workers.", "\n", "self", ".", "_worker_ref", "=", "None", "\n", "\n", "# Lock to prevent multiple threads creating a new VideoLoader at the ", "\n", "# same time.", "\n", "self", ".", "_video_loader_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset.__getitem__": [[517, 588], ["_video.VideoDataset._get_video_loader", "_video.VideoDataset.read_frame", "IndexError", "len", "_video.NonIncreasingTimestampError", "_video.VideoDataset.transform", "_video.VideoDataset.target_transform", "_video.VideoDataset.__len__", "_video.VideoDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._get_video_loader", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoLoader.read_frame", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.transform", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__len__", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns item at index.\n\n        Finds the video of the frame at index with the help of the frame \n        offsets. Then, loads the frame from the video, applies the transforms,\n        and returns the frame along with the index of the video (as target).\n\n        For example, if there are two videos with 10 and 20 frames respectively\n        in the input directory:\n\n        Requesting the 5th sample returns the 5th frame from the first video and\n        the target indicates the index of the source video which is 0.\n        >>> dataset[5]\n        >>> > <PIL Image>, 0\n\n        Requesting the 20th sample returns the 10th frame from the second video\n        and the target indicates the index of the source video which is 1.\n        >>> dataset[20]\n        >>> > <PIL Image>, 1\n\n        Args:\n            index:\n                Index of the sample to retrieve.\n\n        Returns:\n            A tuple (sample, target) where target indicates the video index.\n\n        Raises:\n            IndexError:\n                If index is out of bounds.\n            VideoError:\n                If the frame at the given index could not be loaded.\n\n        \"\"\"", "\n", "if", "index", "<", "0", "or", "index", ">=", "self", ".", "__len__", "(", ")", ":", "\n", "            ", "raise", "IndexError", "(", "f'Index {index} is out of bounds for VideoDataset'", "\n", "f' of size {self.__len__()}.'", ")", "\n", "\n", "# each sample belongs to a video, to load the sample at index, we need", "\n", "# to find the video to which the sample belongs and then read the frame", "\n", "# from this video on the disk.", "\n", "", "i", "=", "len", "(", "self", ".", "offsets", ")", "-", "1", "\n", "while", "(", "self", ".", "offsets", "[", "i", "]", ">", "index", ")", ":", "\n", "            ", "i", "=", "i", "-", "1", "\n", "\n", "", "timestamp_idx", "=", "index", "-", "self", ".", "offsets", "[", "i", "]", "\n", "\n", "if", "(", "\n", "self", ".", "exception_on_non_increasing_timestamp", "\n", "and", "self", ".", "video_timestamps_is_non_increasing", "[", "i", "]", "[", "timestamp_idx", "]", "\n", ")", ":", "\n", "            ", "raise", "NonIncreasingTimestampError", "(", "\n", "f'Frame {timestamp_idx} of video {self.videos[i]} has '", "\n", "f'a timestamp that is equal or lower than timestamps of previous '", "\n", "f'frames in the video. Trying to load this frame might result '", "\n", "f'in the wrong frame being returned. Set the VideoDataset.exception_on_non_increasing_timestamp'", "\n", "f'attribute to False to allow unsafe frame loading.'", "\n", ")", "\n", "\n", "# find and return the frame as PIL image", "\n", "", "frame_timestamp", "=", "self", ".", "video_timestamps", "[", "i", "]", "[", "timestamp_idx", "]", "\n", "video_loader", "=", "self", ".", "_get_video_loader", "(", "i", ")", "\n", "sample", "=", "video_loader", ".", "read_frame", "(", "frame_timestamp", ")", "\n", "\n", "target", "=", "i", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset.__len__": [[589, 596], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of samples (frames) in the dataset.\n\n        This can be precomputed, because self.video_timestamps is only\n        set in the __init__\n        \"\"\"", "\n", "return", "self", ".", "_length", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset.get_filename": [[597, 642], ["_video.VideoDataset._video_name_format", "_video.VideoDataset._video_frame_count", "len", "_video.VideoDataset._format_filename", "IndexError", "len", "str", "_video.VideoDataset.__len__", "_video.VideoDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._video_name_format", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._video_frame_count", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._format_filename", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__len__", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__len__"], ["", "def", "get_filename", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns a filename for the frame at index.\n\n        The filename is created from the video filename, the frame number, and\n        the video format. The frame number will be zero padded to make sure \n        all filenames have the same length and can easily be sorted.\n        E.g. when retrieving a sample from the video\n        `my_video.mp4` at frame 153, the filename will be:\n\n        >>> my_video-153-mp4.png\n    \n        Args:\n            index:\n                Index of the frame to retrieve.\n\n        Returns:\n            The filename of the frame as described above.\n                \n        \"\"\"", "\n", "if", "index", "<", "0", "or", "index", ">=", "self", ".", "__len__", "(", ")", ":", "\n", "            ", "raise", "IndexError", "(", "f'Index {index} is out of bounds for VideoDataset'", "\n", "f' of size {self.__len__()}.'", ")", "\n", "\n", "# each sample belongs to a video, to load the sample at index, we need", "\n", "# to find the video to which the sample belongs and then read the frame", "\n", "# from this video on the disk.", "\n", "", "i", "=", "len", "(", "self", ".", "offsets", ")", "-", "1", "\n", "while", "(", "self", ".", "offsets", "[", "i", "]", ">", "index", ")", ":", "\n", "            ", "i", "=", "i", "-", "1", "\n", "\n", "# get filename of the video file", "\n", "", "video", "=", "self", ".", "videos", "[", "i", "]", "\n", "video_name", ",", "video_format", "=", "self", ".", "_video_name_format", "(", "video", ")", "\n", "\n", "# get frame number", "\n", "frame_number", "=", "index", "-", "self", ".", "offsets", "[", "i", "]", "\n", "\n", "n_frames", "=", "self", ".", "_video_frame_count", "(", "i", ")", "\n", "zero_padding", "=", "len", "(", "str", "(", "n_frames", ")", ")", "\n", "\n", "return", "self", ".", "_format_filename", "(", "\n", "video_name", "=", "video_name", ",", "\n", "video_format", "=", "video_format", ",", "\n", "frame_number", "=", "frame_number", ",", "\n", "zero_padding", "=", "zero_padding", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset.get_filenames": [[644, 664], ["enumerate", "_video.VideoDataset._video_name_format", "_video.VideoDataset._video_frame_count", "len", "range", "str", "filenames.append", "_video.VideoDataset._format_filename"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._video_name_format", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._video_frame_count", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._format_filename"], ["", "def", "get_filenames", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns a list filenames for all frames in the dataset.\n        \n        \"\"\"", "\n", "filenames", "=", "[", "]", "\n", "for", "i", ",", "video", "in", "enumerate", "(", "self", ".", "videos", ")", ":", "\n", "            ", "video_name", ",", "video_format", "=", "self", ".", "_video_name_format", "(", "video", ")", "\n", "n_frames", "=", "self", ".", "_video_frame_count", "(", "i", ")", "\n", "\n", "zero_padding", "=", "len", "(", "str", "(", "n_frames", ")", ")", "\n", "for", "frame_number", "in", "range", "(", "n_frames", ")", ":", "\n", "                ", "filenames", ".", "append", "(", "\n", "self", ".", "_format_filename", "(", "\n", "video_name", "=", "video_name", ",", "\n", "frame_number", "=", "frame_number", ",", "\n", "video_format", "=", "video_format", ",", "\n", "zero_padding", "=", "zero_padding", ",", "\n", ")", "\n", ")", "\n", "", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._video_frame_count": [[665, 674], ["len", "len"], "methods", ["None"], ["", "def", "_video_frame_count", "(", "self", ",", "video_index", ":", "int", ")", "->", "int", ":", "\n", "        ", "\"\"\"Returns the number of frames in the video with the given index.\n        \n        \"\"\"", "\n", "if", "video_index", "<", "len", "(", "self", ".", "offsets", ")", "-", "1", ":", "\n", "            ", "n_frames", "=", "self", ".", "offsets", "[", "video_index", "+", "1", "]", "-", "self", ".", "offsets", "[", "video_index", "]", "\n", "", "else", ":", "\n", "            ", "n_frames", "=", "len", "(", "self", ")", "-", "self", ".", "offsets", "[", "video_index", "]", "\n", "", "return", "n_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._video_name_format": [[675, 689], ["os.path.relpath", "os.path.relpath.split"], "methods", ["None"], ["", "def", "_video_name_format", "(", "self", ",", "video_filename", ":", "str", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "        ", "\"\"\"Extracts name and format from the filename of the video.\n\n        Returns:\n            A (video_name, video_format) tuple where video_name is the filename\n            relative to self.root and video_format is the file extension, for \n            example 'mp4'.\n\n        \"\"\"", "\n", "video_filename", "=", "os", ".", "path", ".", "relpath", "(", "video_filename", ",", "self", ".", "root", ")", "\n", "splits", "=", "video_filename", ".", "split", "(", "'.'", ")", "\n", "video_format", "=", "splits", "[", "-", "1", "]", "\n", "video_name", "=", "'.'", ".", "join", "(", "splits", "[", ":", "-", "1", "]", ")", "\n", "return", "video_name", ",", "video_format", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._format_filename": [[690, 699], ["None"], "methods", ["None"], ["", "def", "_format_filename", "(", "\n", "self", ",", "\n", "video_name", ":", "str", ",", "\n", "frame_number", ":", "int", ",", "\n", "video_format", ":", "str", ",", "\n", "zero_padding", ":", "int", "=", "8", ",", "\n", "extension", ":", "str", "=", "'png'", "\n", ")", "->", "str", ":", "\n", "        ", "return", "f'{video_name}-{frame_number:0{zero_padding}}-{video_format}.{extension}'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset._get_video_loader": [[700, 722], ["torch.utils.data.get_worker_info", "weakref.ref", "_video.VideoLoader"], "methods", ["None"], ["", "def", "_get_video_loader", "(", "self", ",", "video_index", ":", "int", ")", "->", "VideoLoader", ":", "\n", "        ", "\"\"\"Returns a video loader unique to the current dataloader worker.\"\"\"", "\n", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "if", "worker_info", "is", "not", "None", ":", "\n", "# Use a weakref instead of worker_info.id as the worker id is reused", "\n", "# by different workers across epochs.", "\n", "            ", "worker_ref", "=", "weakref", ".", "ref", "(", "worker_info", ")", "\n", "if", "worker_ref", "!=", "self", ".", "_worker_ref", ":", "\n", "# This worker has never accessed the dataset before, we have to", "\n", "# reset the video loader.", "\n", "                ", "self", ".", "_video_loader", "=", "None", "\n", "self", ".", "_video_index", "=", "None", "\n", "self", ".", "_worker_ref", "=", "worker_ref", "\n", "\n", "", "", "with", "self", ".", "_video_loader_lock", ":", "\n", "            ", "if", "video_index", "!=", "self", ".", "_video_index", ":", "\n", "                ", "video", "=", "self", ".", "videos", "[", "video_index", "]", "\n", "timestamps", "=", "self", ".", "video_timestamps", "[", "video_index", "]", "\n", "self", ".", "_video_loader", "=", "VideoLoader", "(", "video", ",", "timestamps", ",", "backend", "=", "self", ".", "backend", ")", "\n", "self", ".", "_video_index", "=", "video_index", "\n", "\n", "", "return", "self", ".", "_video_loader", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._make_dataset": [[314, 398], ["os.walk", "min", "torch.utils.data.DataLoader", "dict", "dict.setdefault", "dict.setdefault", "list", "zip", "len", "len", "_video._TimestampFpsFromVideosDataset", "tqdm.tqdm", "len", "list", "ValueError", "filepath.lower().endswith", "os.path.join", "video_instances.append", "numpy.cumsum", "_video._make_dataset._is_valid_file"], "function", ["None"], ["", "", "def", "_make_dataset", "(", "\n", "directory", ",", "\n", "extensions", "=", "None", ",", "\n", "is_valid_file", "=", "None", ",", "\n", "pts_unit", "=", "'sec'", ",", "\n", "tqdm_args", "=", "None", ",", "\n", "num_workers", ":", "int", "=", "0", "\n", ")", ":", "\n", "    ", "\"\"\"Returns a list of all video files, timestamps, and offsets.\n\n    Args:\n        directory:\n            Root directory path (should not contain subdirectories).\n        extensions:\n            Tuple of valid extensions.\n        is_valid_file:\n            Used to find valid files.\n        pts_unit:\n            Unit of the timestamps.\n        tqdm_args:\n            arguments to pass to tqdm\n        num_workers:\n            number of workers to use for multithreading\n\n    Returns:\n        A list of video files, timestamps, frame offsets, and fps.\n\n    \"\"\"", "\n", "\n", "if", "tqdm_args", "is", "None", ":", "\n", "        ", "tqdm_args", "=", "{", "}", "\n", "", "if", "extensions", "is", "None", ":", "\n", "        ", "if", "is_valid_file", "is", "None", ":", "\n", "            ", "ValueError", "(", "'Both extensions and is_valid_file cannot be None'", ")", "\n", "", "else", ":", "\n", "            ", "_is_valid_file", "=", "is_valid_file", "\n", "", "", "else", ":", "\n", "        ", "def", "is_valid_file_extension", "(", "filepath", ")", ":", "\n", "            ", "return", "filepath", ".", "lower", "(", ")", ".", "endswith", "(", "extensions", ")", "\n", "", "if", "is_valid_file", "is", "None", ":", "\n", "            ", "_is_valid_file", "=", "is_valid_file_extension", "\n", "", "else", ":", "\n", "            ", "def", "_is_valid_file", "(", "filepath", ")", ":", "\n", "                ", "return", "is_valid_file_extension", "(", "filepath", ")", "and", "is_valid_file", "(", "filepath", ")", "\n", "\n", "# find all video instances (no subdirectories)", "\n", "", "", "", "video_instances", "=", "[", "]", "\n", "\n", "def", "on_error", "(", "error", ")", ":", "\n", "        ", "raise", "error", "\n", "", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "directory", ",", "onerror", "=", "on_error", ")", ":", "\n", "\n", "        ", "for", "fname", "in", "files", ":", "\n", "# skip invalid files", "\n", "            ", "if", "not", "_is_valid_file", "(", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "# keep track of valid files", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "video_instances", ".", "append", "(", "path", ")", "\n", "\n", "# define loader to get the timestamps", "\n", "", "", "num_workers", "=", "min", "(", "num_workers", ",", "len", "(", "video_instances", ")", ")", "\n", "if", "len", "(", "video_instances", ")", "==", "1", ":", "\n", "        ", "num_workers", "=", "0", "\n", "", "loader", "=", "DataLoader", "(", "\n", "_TimestampFpsFromVideosDataset", "(", "video_instances", ",", "pts_unit", "=", "pts_unit", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "None", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "\n", "# actually load the data", "\n", "tqdm_args", "=", "dict", "(", "tqdm_args", ")", "\n", "tqdm_args", ".", "setdefault", "(", "'unit'", ",", "' video'", ")", "\n", "tqdm_args", ".", "setdefault", "(", "'desc'", ",", "'Counting frames in videos'", ")", "\n", "timestamps_fpss", "=", "list", "(", "tqdm", "(", "loader", ",", "**", "tqdm_args", ")", ")", "\n", "timestamps", ",", "fpss", "=", "zip", "(", "*", "timestamps_fpss", ")", "\n", "\n", "# get frame offsets", "\n", "frame_counts", "=", "[", "len", "(", "ts", ")", "for", "ts", "in", "timestamps", "]", "\n", "offsets", "=", "[", "0", "]", "+", "list", "(", "np", ".", "cumsum", "(", "frame_counts", "[", ":", "-", "1", "]", ")", ")", "\n", "\n", "return", "video_instances", ",", "timestamps", ",", "offsets", ",", "fpss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._find_non_increasing_timestamps": [[400, 425], ["numpy.zeros", "enumerate", "list", "len", "len"], "function", ["None"], ["", "def", "_find_non_increasing_timestamps", "(", "\n", "timestamps", ":", "List", "[", "Fraction", "]", "\n", ")", "->", "List", "[", "bool", "]", ":", "\n", "    ", "\"\"\"Finds all non-increasing timestamps.\n\n    Arguments:\n        timestamps:\n            Video frame timestamps.\n\n    Returns:\n        A boolean for each input timestamp which is True if the timestamp is\n        non-increasing and False otherwise.\n\n    \"\"\"", "\n", "if", "len", "(", "timestamps", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "is_non_increasing", "=", "np", ".", "zeros", "(", "shape", "=", "len", "(", "timestamps", ")", ",", "dtype", "=", "bool", ",", ")", "\n", "max_timestamp", "=", "timestamps", "[", "0", "]", "-", "1", "\n", "for", "i", ",", "timestamp", "in", "enumerate", "(", "timestamps", ")", ":", "\n", "        ", "if", "timestamp", ">", "max_timestamp", ":", "\n", "            ", "max_timestamp", "=", "timestamp", "\n", "", "else", ":", "\n", "            ", "is_non_increasing", "[", "i", "]", "=", "True", "\n", "\n", "", "", "return", "list", "(", "is_non_increasing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.__init__": [[152, 199], ["set", "lightly.data._helpers._load_dataset_from_folder", "lightly.utils.io.check_filenames", "os.path.join", "ValueError", "dataset.LightlyDataset.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._helpers._load_dataset_from_folder", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.check_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["def", "__init__", "(", "self", ",", "\n", "input_dir", ":", "Union", "[", "str", ",", "None", "]", ",", "\n", "transform", ":", "transforms", ".", "Compose", "=", "None", ",", "\n", "index_to_filename", ":", "\n", "Callable", "[", "[", "datasets", ".", "VisionDataset", ",", "int", "]", ",", "str", "]", "=", "None", ",", "\n", "filenames", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "tqdm_args", ":", "Dict", "[", "str", ",", "Any", "]", "=", "None", ",", "\n", "num_workers_video_frame_counting", ":", "int", "=", "0", "\n", ")", ":", "\n", "\n", "# can pass input_dir=None to create an \"empty\" dataset", "\n", "        ", "self", ".", "input_dir", "=", "input_dir", "\n", "if", "filenames", "is", "not", "None", ":", "\n", "            ", "filepaths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "input_dir", ",", "filename", ")", "\n", "for", "filename", "in", "filenames", "\n", "]", "\n", "filepaths", "=", "set", "(", "filepaths", ")", "\n", "\n", "def", "is_valid_file", "(", "filepath", ":", "str", ")", ":", "\n", "                ", "return", "filepath", "in", "filepaths", "\n", "", "", "else", ":", "\n", "            ", "is_valid_file", "=", "None", "\n", "\n", "", "if", "self", ".", "input_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset", "=", "_load_dataset_from_folder", "(", "\n", "self", ".", "input_dir", ",", "\n", "transform", ",", "\n", "is_valid_file", "=", "is_valid_file", ",", "\n", "tqdm_args", "=", "tqdm_args", ",", "\n", "num_workers_video_frame_counting", "=", "num_workers_video_frame_counting", "\n", ")", "\n", "", "elif", "transform", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'transform must be None when input_dir is None but is '", "\n", "f'{transform}'", ",", "\n", ")", "\n", "\n", "# initialize function to get filename of image", "\n", "", "self", ".", "index_to_filename", "=", "_get_filename_by_index", "\n", "if", "index_to_filename", "is", "not", "None", ":", "\n", "            ", "self", ".", "index_to_filename", "=", "index_to_filename", "\n", "\n", "# if created from an input directory with filenames, check if they", "\n", "# are valid", "\n", "", "if", "input_dir", ":", "\n", "            ", "check_filenames", "(", "self", ".", "get_filenames", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.from_torch_dataset": [[200, 237], ["cls"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_torch_dataset", "(", "cls", ",", "\n", "dataset", ",", "\n", "transform", "=", "None", ",", "\n", "index_to_filename", "=", "None", ")", ":", "\n", "        ", "\"\"\"Builds a LightlyDataset from a PyTorch (or torchvision) dataset.\n\n        Args:\n            dataset:\n                PyTorch/torchvision dataset.\n            transform:\n                Image transforms (as in torchvision).\n            index_to_filename:\n                Function which takes the dataset and index as input and returns\n                the filename of the file at the index. If None, uses default.\n\n        Returns:\n            A LightlyDataset object.\n\n        Examples:\n            >>> # load cifar10 from torchvision\n            >>> import torchvision\n            >>> import lightly.data as data\n            >>> base = torchvision.datasets.CIFAR10(root='./')\n            >>> dataset = data.LightlyDataset.from_torch_dataset(base)\n\n        \"\"\"", "\n", "# create an \"empty\" dataset object", "\n", "dataset_obj", "=", "cls", "(", "\n", "None", ",", "\n", "index_to_filename", "=", "index_to_filename", ",", "\n", ")", "\n", "\n", "# populate it with the torch dataset", "\n", "dataset_obj", ".", "dataset", "=", "dataset", "\n", "dataset_obj", ".", "transform", "=", "transform", "\n", "return", "dataset_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.__getitem__": [[238, 253], ["dataset.LightlyDataset.index_to_filename", "dataset.LightlyDataset.dataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.index_to_filename", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"Returns (sample, target, fname) of item at index.\n\n        Args:\n            index:\n                Index of the queried item.\n\n        Returns:\n            The image, target, and filename of the item at index.\n\n        \"\"\"", "\n", "fname", "=", "self", ".", "index_to_filename", "(", "self", ".", "dataset", ",", "index", ")", "\n", "sample", ",", "target", "=", "self", ".", "dataset", ".", "__getitem__", "(", "index", ")", "\n", "\n", "return", "sample", ",", "target", ",", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.__len__": [[254, 259], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the length of the dataset.\n\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.__add__": [[260, 265], ["NotImplementedError"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Adds another item to the dataset.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.get_filenames": [[266, 278], ["hasattr", "range", "dataset.LightlyDataset.dataset.get_filenames", "len", "dataset.LightlyDataset.index_to_filename", "list_of_filenames.append"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.index_to_filename"], ["", "def", "get_filenames", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns all filenames in the dataset.\n\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'get_filenames'", ")", ":", "\n", "            ", "return", "self", ".", "dataset", ".", "get_filenames", "(", ")", "\n", "\n", "", "list_of_filenames", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "fname", "=", "self", ".", "index_to_filename", "(", "self", ".", "dataset", ",", "index", ")", "\n", "list_of_filenames", ".", "append", "(", "fname", ")", "\n", "", "return", "list_of_filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump": [[279, 327], ["os.makedirs", "zip", "RuntimeError", "dataset.LightlyDataset.get_filenames", "sorted", "dataset.LightlyDataset.get_filenames", "enumerate", "dataset._dump_image", "bisect.bisect_left", "range", "indices.append", "dataset.LightlyDataset.__len__", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._dump_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__len__"], ["", "def", "dump", "(", "self", ",", "\n", "output_dir", ":", "str", ",", "\n", "filenames", ":", "Union", "[", "List", "[", "str", "]", ",", "None", "]", "=", "None", ",", "\n", "format", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"Saves images in the dataset to the output directory.\n\n        Will copy the images from the input directory to the output directory\n        if possible. If not (e.g. for VideoDatasets), will load the images and\n        then save them to the output directory with the specified format.\n\n        Args:\n            output_dir:\n                Output directory where the image is stored.\n            filenames:\n                Filenames of the images to store. If None, stores all images.\n            format:\n                Image format. Can be any pillow image format (png, jpg, ...).\n                By default we try to use the same format as the input data. If\n                not possible (e.g. for videos) we dump the image \n                as a png image to prevent compression artifacts.\n\n        \"\"\"", "\n", "\n", "if", "self", ".", "dataset", ".", "transform", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Cannot dump dataset which applies transforms!'", ")", "\n", "\n", "# create directory if it doesn't exist yet", "\n", "", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# dump all the files if no filenames were passed, otherwise dump only", "\n", "# the ones referenced in the list", "\n", "if", "filenames", "is", "None", ":", "\n", "            ", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "__len__", "(", ")", ")", "]", "\n", "filenames", "=", "self", ".", "get_filenames", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "[", "]", "\n", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "all_filenames", "=", "self", ".", "get_filenames", "(", ")", "\n", "for", "index", ",", "filename", "in", "enumerate", "(", "all_filenames", ")", ":", "\n", "                ", "filename_index", "=", "bisect", ".", "bisect_left", "(", "filenames", ",", "filename", ")", "\n", "# make sure the filename exists in filenames", "\n", "if", "filename_index", "<", "len", "(", "filenames", ")", "and", "filenames", "[", "filename_index", "]", "==", "filename", ":", "\n", "                    ", "indices", ".", "append", "(", "index", ")", "\n", "\n", "# dump images", "\n", "", "", "", "for", "i", ",", "filename", "in", "zip", "(", "indices", ",", "filenames", ")", ":", "\n", "            ", "_dump_image", "(", "self", ".", "dataset", ",", "output_dir", ",", "filename", ",", "i", ",", "fmt", "=", "format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.get_filepath_from_filename": [[328, 373], ["tempfile.mkdtemp", "os.path.dirname", "image.save", "hasattr", "isinstance", "os.path.join", "os.path.isfile", "ValueError", "os.path.join", "os.makedirs", "os.path.dirname"], "methods", ["None"], ["", "", "def", "get_filepath_from_filename", "(", "self", ",", "filename", ":", "str", ",", "image", ":", "Image", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns the filepath given the filename of the image\n\n        There are three cases:\n            - The dataset is a regular dataset with the images in the input dir.\n            - The dataset is a video dataset, thus the images have to be saved in a\n              temporary folder.\n            - The dataset is a torch dataset, thus the images have to be saved in a\n              temporary folder.\n\n        Args:\n            filename:\n                The filename of the image\n            image:\n                The image corresponding to the filename\n\n        Returns:\n            The filename to the image, either the existing one (case 1) or a\n            newly created jpg (case 2, 3)\n\n        \"\"\"", "\n", "\n", "has_input_dir", "=", "hasattr", "(", "self", ",", "'input_dir'", ")", "and", "isinstance", "(", "self", ".", "input_dir", ",", "str", ")", "\n", "if", "has_input_dir", ":", "\n", "            ", "path_to_image", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path_to_image", ")", ":", "\n", "# the file exists, return its filepath", "\n", "                ", "return", "path_to_image", "\n", "\n", "", "", "if", "image", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The parameter image must not be None for'", "\n", "'VideoDatasets and TorchDatasets'", "\n", ")", "\n", "\n", "# the file doesn't exist, save it as a jpg and return filepath", "\n", "", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "filename", ")", "+", "'.jpg'", "\n", "\n", "if", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "image", ".", "save", "(", "filepath", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.transform": [[381, 387], ["None"], "methods", ["None"], ["", "@", "transform", ".", "setter", "\n", "def", "transform", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"Setter for the transform of the dataset.\n\n        \"\"\"", "\n", "self", ".", "dataset", ".", "transform", "=", "t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._get_filename_by_index": [[24, 42], ["isinstance", "os.path.relpath", "isinstance", "os.path.relpath", "isinstance", "dataset.get_filename", "str"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset.get_filename"], ["def", "_get_filename_by_index", "(", "dataset", ",", "index", ")", ":", "\n", "    ", "\"\"\"Default function which maps the index of an image to a filename.\n\n    \"\"\"", "\n", "if", "isinstance", "(", "dataset", ",", "datasets", ".", "ImageFolder", ")", ":", "\n", "# filename is the path of the image relative to the dataset root", "\n", "        ", "full_path", "=", "dataset", ".", "imgs", "[", "index", "]", "[", "0", "]", "\n", "return", "os", ".", "path", ".", "relpath", "(", "full_path", ",", "dataset", ".", "root", ")", "\n", "", "elif", "isinstance", "(", "dataset", ",", "DatasetFolder", ")", ":", "\n", "# filename is the path of the image relative to the dataset root", "\n", "        ", "full_path", "=", "dataset", ".", "samples", "[", "index", "]", "[", "0", "]", "\n", "return", "os", ".", "path", ".", "relpath", "(", "full_path", ",", "dataset", ".", "root", ")", "\n", "", "elif", "isinstance", "(", "dataset", ",", "VideoDataset", ")", ":", "\n", "# filename is constructed by the video dataset", "\n", "        ", "return", "dataset", ".", "get_filename", "(", "index", ")", "\n", "", "else", ":", "\n", "# dummy to prevent crashes", "\n", "        ", "return", "str", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._ensure_dir": [[44, 50], ["os.path.dirname", "os.makedirs"], "function", ["None"], ["", "", "def", "_ensure_dir", "(", "path", ")", ":", "\n", "    ", "\"\"\"Makes sure that the directory at path exists.\n\n    \"\"\"", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._copy_image": [[52, 60], ["os.path.join", "os.path.join", "dataset._ensure_dir", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._ensure_dir"], ["", "def", "_copy_image", "(", "input_dir", ",", "output_dir", ",", "filename", ")", ":", "\n", "    ", "\"\"\"Copies an image from the input directory to the output directory.\n\n    \"\"\"", "\n", "source", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "filename", ")", "\n", "target", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "_ensure_dir", "(", "target", ")", "\n", "shutil", ".", "copyfile", "(", "source", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._save_image": [[62, 75], ["os.path.join", "dataset._ensure_dir", "image.save", "image.save"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._ensure_dir"], ["", "def", "_save_image", "(", "image", ",", "output_dir", ",", "filename", ",", "fmt", ")", ":", "\n", "    ", "\"\"\"Saves an image in the output directory.\n\n    \"\"\"", "\n", "target", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "_ensure_dir", "(", "target", ")", "\n", "try", ":", "\n", "# try to save the image with the specified format or", "\n", "# derive the format from the filename (if format=None)", "\n", "        ", "image", ".", "save", "(", "target", ",", "format", "=", "fmt", ")", "\n", "", "except", "ValueError", ":", "\n", "# could not determine format from filename", "\n", "        ", "image", ".", "save", "(", "target", ",", "format", "=", "'png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._dump_image": [[77, 96], ["isinstance", "dataset._copy_image", "isinstance", "dataset._copy_image", "dataset._save_image"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._copy_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._copy_image", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset._save_image"], ["", "", "def", "_dump_image", "(", "dataset", ",", "output_dir", ",", "filename", ",", "index", ",", "fmt", ")", ":", "\n", "    ", "\"\"\"Saves a single image to the output directory.\n\n    Will copy the image from the input directory to the output directory\n    if possible. If not (e.g. for VideoDatasets), will load the image and\n    then save it to the output directory with the specified format.\n\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "dataset", ",", "datasets", ".", "ImageFolder", ")", ":", "\n", "# can safely copy the image from the input to the output directory", "\n", "        ", "_copy_image", "(", "dataset", ".", "root", ",", "output_dir", ",", "filename", ")", "\n", "", "elif", "isinstance", "(", "dataset", ",", "DatasetFolder", ")", ":", "\n", "# can safely copy the image from the input to the output directory", "\n", "        ", "_copy_image", "(", "dataset", ".", "root", ",", "output_dir", ",", "filename", ")", "\n", "", "else", ":", "\n", "# need to load the image and save it to the output directory", "\n", "        ", "image", ",", "_", "=", "dataset", "[", "index", "]", "\n", "_save_image", "(", "image", ",", "output_dir", ",", "filename", ",", "fmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image_loaders.pil_loader": [[12, 18], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning", "\n", "# (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image_loaders.accimage_loader": [[20, 27], ["accimage.Image", "_image_loaders.pil_loader"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._image_loaders.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image_loaders.default_loader": [[29, 35], ["get_image_backend", "_image_loaders.accimage_loader", "_image_loaders.pil_loader"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._image_loaders.accimage_loader", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image_loaders.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image.DatasetFolder.__init__": [[84, 110], ["torchvision.VisionDataset.__init__", "_image._make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image._make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root", ":", "str", ",", "\n", "loader", "=", "default_loader", ",", "\n", "extensions", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "is_valid_file", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "DatasetFolder", ",", "self", ")", ".", "__init__", "(", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "samples", "=", "_make_dataset", "(", "self", ".", "root", ",", "extensions", ",", "is_valid_file", ")", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "msg", "=", "'Found 0 files in folder: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "if", "extensions", "is", "not", "None", ":", "\n", "                ", "msg", "+=", "'Supported extensions are: {}'", ".", "format", "(", "\n", "','", ".", "join", "(", "extensions", ")", ")", "\n", "", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n", "", "self", ".", "loader", "=", "loader", "\n", "self", ".", "extensions", "=", "extensions", "\n", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image.DatasetFolder.__getitem__": [[111, 131], ["_image.DatasetFolder.loader", "_image.DatasetFolder.transform", "_image.DatasetFolder.target_transform"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"Returns item at index.\n\n        Args:\n            index:\n                Index of the sample to retrieve.\n\n        Returns:\n            A tuple (sample, target) where target is 0.\n\n        \"\"\"", "\n", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image.DatasetFolder.__len__": [[132, 137], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of samples in the dataset.\n\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image._make_dataset": [[15, 57], ["os.scandir", "sorted", "instances.append", "ValueError", "filepath.lower().endswith", "_image._make_dataset._is_valid_file"], "function", ["None"], ["def", "_make_dataset", "(", "directory", ",", "extensions", "=", "None", ",", "is_valid_file", "=", "None", ")", "->", "List", "[", "Tuple", "[", "str", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Returns a list of all image files with targets in the directory.\n\n    Args:\n        directory:\n            Root directory path (should not contain subdirectories!).\n        extensions:\n            Tuple of valid extensions.\n        is_valid_file:\n            Used to find valid files.\n\n    Returns:\n        List of instance tuples: (path_i, target_i = 0).\n\n    \"\"\"", "\n", "\n", "if", "extensions", "is", "None", ":", "\n", "        ", "if", "is_valid_file", "is", "None", ":", "\n", "            ", "ValueError", "(", "'Both extensions and is_valid_file cannot be None'", ")", "\n", "", "else", ":", "\n", "            ", "_is_valid_file", "=", "is_valid_file", "\n", "", "", "else", ":", "\n", "        ", "def", "is_valid_file_extension", "(", "filepath", ")", ":", "\n", "            ", "return", "filepath", ".", "lower", "(", ")", ".", "endswith", "(", "extensions", ")", "\n", "", "if", "is_valid_file", "is", "None", ":", "\n", "            ", "_is_valid_file", "=", "is_valid_file_extension", "\n", "", "else", ":", "\n", "            ", "def", "_is_valid_file", "(", "filepath", ")", ":", "\n", "                ", "return", "is_valid_file_extension", "(", "filepath", ")", "and", "is_valid_file", "(", "filepath", ")", "\n", "\n", "", "", "", "instances", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "scandir", "(", "directory", ")", ":", "\n", "\n", "        ", "if", "not", "_is_valid_file", "(", "f", ".", "path", ")", ":", "\n", "            ", "continue", "\n", "\n", "# convention: the label of all images is 0, based on the fact that", "\n", "# they are all in the same directory", "\n", "", "item", "=", "(", "f", ".", "path", ",", "0", ")", "\n", "instances", ".", "append", "(", "item", ")", "\n", "\n", "", "return", "sorted", "(", "instances", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "# sort by path", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__init__": [[7, 26], ["dict", "range", "len", "base_dataset.index_to_filename"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.index_to_filename"], ["    ", "def", "__init__", "(", "self", ",", "base_dataset", ":", "LightlyDataset", ",", "filenames_subset", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "\"\"\"Creates a subset of a LightlyDataset.\n\n        Args:\n            base_dataset:\n                The dataset to subset from.\n            filenames_subset:\n                The filenames of the samples to be part of the subset.\n        \"\"\"", "\n", "self", ".", "base_dataset", "=", "base_dataset", "\n", "self", ".", "filenames_subset", "=", "filenames_subset", "\n", "\n", "dict_base_dataset_filename_index", ":", "Dict", "[", "str", ",", "int", "]", "=", "dict", "(", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "base_dataset", ")", ")", ":", "\n", "            ", "fname", "=", "base_dataset", ".", "index_to_filename", "(", "self", ".", "dataset", ",", "index", ")", "\n", "dict_base_dataset_filename_index", "[", "fname", "]", "=", "index", "\n", "\n", "", "self", ".", "mapping_subset_index_to_baseset_index", "=", "[", "dict_base_dataset_filename_index", "[", "filename", "]", "for", "filename", "in", "filenames_subset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__getitem__": [[27, 43], ["lightly_subset.LightlySubset.base_dataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index_subset", ":", "int", ")", "->", "Tuple", "[", "object", ",", "object", ",", "str", "]", ":", "\n", "        ", "\"\"\"An overwrite for indexing.\n\n        Args:\n            index_subset:\n                The index of a sample w.r.t. to the subset.\n                E.g. if index_subset == 0, the sample belonging to\n                the first filename in self.filenames_subset is returned.\n\n        Returns:\n            A tuple of the sample, its target and its filename.\n\n        \"\"\"", "\n", "index_baseset", "=", "self", ".", "mapping_subset_index_to_baseset_index", "[", "index_subset", "]", "\n", "sample", ",", "target", ",", "fname", "=", "self", ".", "base_dataset", ".", "__getitem__", "(", "index_baseset", ")", "\n", "return", "sample", ",", "target", ",", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__len__": [[44, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Overwrites the len(...) function.\n\n        Returns:\n            The number of samples in the subset.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "filenames_subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames": [[52, 57], ["None"], "methods", ["None"], ["", "def", "get_filenames", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Returns all filenames in the subset.\n\n        \"\"\"", "\n", "return", "self", ".", "filenames_subset", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.index_to_filename": [[58, 73], ["None"], "methods", ["None"], ["", "def", "index_to_filename", "(", "self", ",", "dataset", ",", "index_subset", ":", "int", ")", ":", "\n", "        ", "\"\"\"Maps from an index of a sample to its filename.\n\n        Args:\n            dataset:\n                Unused, but specified by the overwritten\n                function of the parent class.\n            index_subset:\n                The index of the sample w.r.t. the subset.\n\n        Returns:\n            The filename of the sample.\n        \"\"\"", "\n", "fname", "=", "self", ".", "filenames_subset", "[", "index_subset", "]", "\n", "return", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.input_dir": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "input_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.dataset": [[78, 81], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.setUp": [[36, 39], ["test_VideoDataset.TestVideoDataset.skipTest"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "if", "not", "PYAV_AVAILABLE", ":", "\n", "            ", "self", ".", "skipTest", "(", "'PyAV not available'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.ensure_dir": [[40, 43], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["", "", "def", "ensure_dir", "(", "self", ",", "path_to_folder", ":", "str", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_to_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.create_dataset_specified_frames_per_video": [[44, 60], ["tempfile.mkdtemp", "test_VideoDataset.TestVideoDataset.ensure_dir", "os.path.join", "print", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.VideoWriter.write", "numpy.random.randn", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.ensure_dir"], ["", "", "def", "create_dataset_specified_frames_per_video", "(", "self", ",", "frames_per_video", ":", "List", "[", "int", "]", ",", "w", "=", "32", ",", "h", "=", "32", ",", "c", "=", "3", ")", ":", "\n", "        ", "self", ".", "input_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "ensure_dir", "(", "self", ".", "input_dir", ")", "\n", "self", ".", "frames_over_videos", "=", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "frames", ",", "w", ",", "h", ",", "c", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "frames", "in", "frames_per_video", "\n", "]", "\n", "self", ".", "extensions", "=", "(", "'.avi'", ")", "\n", "\n", "for", "frames", "in", "self", ".", "frames_over_videos", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f'output-{len(frames):03}.avi'", ")", "\n", "print", "(", "path", ")", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "path", ",", "0", ",", "1", ",", "(", "w", ",", "h", ")", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "                ", "out", ".", "write", "(", "frame", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.create_dataset": [[61, 78], ["tempfile.mkdtemp", "test_VideoDataset.TestVideoDataset.ensure_dir", "range", "os.path.join", "print", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.VideoWriter.write", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.ensure_dir"], ["", "", "def", "create_dataset", "(", "self", ",", "n_videos", "=", "5", ",", "n_frames_per_video", "=", "10", ",", "w", "=", "32", ",", "h", "=", "32", ",", "c", "=", "3", ")", ":", "\n", "\n", "        ", "self", ".", "n_videos", "=", "n_videos", "\n", "self", ".", "n_frames_per_video", "=", "n_frames_per_video", "\n", "\n", "self", ".", "input_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "ensure_dir", "(", "self", ".", "input_dir", ")", "\n", "self", ".", "frames", "=", "(", "np", ".", "random", ".", "randn", "(", "n_frames_per_video", ",", "w", ",", "h", ",", "c", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "extensions", "=", "(", "'.avi'", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_videos", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f'output-{i}.avi'", ")", "\n", "print", "(", "path", ")", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "path", ",", "0", ",", "1", ",", "(", "w", ",", "h", ")", ")", "\n", "for", "frame", "in", "self", ".", "frames", ":", "\n", "                ", "out", ".", "write", "(", "frame", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_video_similar_timestamps_for_different_backends": [[79, 114], ["list", "test_VideoDataset.TestVideoDataset.create_dataset_specified_frames_per_video", "test_VideoDataset.TestVideoDataset.assertNotEqual", "test_VideoDataset.TestVideoDataset.assertEqual", "test_VideoDataset.TestVideoDataset.assertEqual", "range", "test_VideoDataset.TestVideoDataset.assertEqual", "shutil.rmtree", "range", "torchvision.set_video_backend", "lightly.data._video._make_dataset", "timestamps.append", "offsets.append", "backends.append", "instances.append", "int", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.create_dataset_specified_frames_per_video", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image._make_dataset"], ["", "", "def", "test_video_similar_timestamps_for_different_backends", "(", "self", ")", ":", "\n", "        ", "frames_per_video", "=", "list", "(", "range", "(", "1", ",", "10", ")", ")", "\n", "self", ".", "create_dataset_specified_frames_per_video", "(", "frames_per_video", ")", "\n", "\n", "timestamps", "=", "[", "]", "\n", "offsets", "=", "[", "]", "\n", "backends", "=", "[", "]", "\n", "instances", "=", "[", "]", "\n", "\n", "# iterate through different backends", "\n", "for", "backend", "in", "VIDEO_BACKENDS", ":", "\n", "            ", "torchvision", ".", "set_video_backend", "(", "backend", ")", "\n", "\n", "video_instances", ",", "video_timestamps", ",", "video_offsets", ",", "_", "=", "_make_dataset", "(", "self", ".", "input_dir", ",", "extensions", "=", "self", ".", "extensions", ")", "\n", "timestamps", ".", "append", "(", "video_timestamps", ")", "\n", "offsets", ".", "append", "(", "video_offsets", ")", "\n", "backends", ".", "append", "(", "backend", ")", "\n", "instances", ".", "append", "(", "video_instances", ")", "\n", "\n", "# make sure backends don't match (sanity check)", "\n", "", "self", ".", "assertNotEqual", "(", "backends", "[", "0", "]", ",", "backends", "[", "1", "]", ")", "\n", "\n", "# we expect the same timestamps and offsets", "\n", "self", ".", "assertEqual", "(", "timestamps", "[", "0", "]", ",", "timestamps", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "offsets", "[", "0", "]", ",", "offsets", "[", "1", "]", ")", "\n", "\n", "expected_frame_counts", "=", "[", "int", "(", "filename", "[", "-", "7", ":", "-", "4", "]", ")", "for", "filename", "in", "instances", "[", "0", "]", "]", "\n", "# calculate expected offsets with old (slow) implementation", "\n", "expected_offsets", "=", "[", "0", "]", "+", "expected_frame_counts", "[", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "expected_offsets", ")", ")", ":", "\n", "            ", "expected_offsets", "[", "i", "]", "=", "expected_offsets", "[", "i", "-", "1", "]", "+", "expected_offsets", "[", "i", "]", "\n", "", "self", ".", "assertEqual", "(", "expected_offsets", ",", "offsets", "[", "0", "]", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "self", ".", "input_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_video_dataset_tqdm_args": [[115, 131], ["test_VideoDataset.TestVideoDataset.create_dataset", "io.StringIO", "shutil.rmtree", "io.StringIO.getvalue", "test_VideoDataset.TestVideoDataset.assertTrue", "contextlib.redirect_stderr", "lightly.data._video.VideoDataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "def", "test_video_dataset_tqdm_args", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "create_dataset", "(", ")", "\n", "desc", "=", "\"test_video_dataset_tqdm_args description asdf\"", "\n", "f", "=", "io", ".", "StringIO", "(", ")", "\n", "with", "contextlib", ".", "redirect_stderr", "(", "f", ")", ":", "\n", "            ", "dataset", "=", "VideoDataset", "(", "\n", "self", ".", "input_dir", ",", "\n", "extensions", "=", "self", ".", "extensions", ",", "\n", "tqdm_args", "=", "{", "\n", "\"desc\"", ":", "desc", ",", "\n", "}", "\n", ")", "\n", "", "shutil", ".", "rmtree", "(", "self", ".", "input_dir", ")", "\n", "printed", "=", "f", ".", "getvalue", "(", ")", "\n", "self", ".", "assertTrue", "(", "desc", "in", "printed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_video_dataset_init_dataloader": [[132, 147], ["test_VideoDataset.TestVideoDataset.create_dataset", "lightly.data.LightlyDataset", "lightly.data.LightlyDataset", "test_VideoDataset.TestVideoDataset.assertListEqual", "test_VideoDataset.TestVideoDataset.assertListEqual", "zip", "test_VideoDataset.TestVideoDataset.assertTupleEqual", "lightly.data.LightlyDataset.get_filenames", "lightly.data.LightlyDataset.get_filenames", "test_VideoDataset.TestVideoDataset.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "def", "test_video_dataset_init_dataloader", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_dataset", "(", ")", "\n", "dataset_4_workers", "=", "LightlyDataset", "(", "\n", "self", ".", "input_dir", ",", "\n", "num_workers_video_frame_counting", "=", "4", "\n", ")", "\n", "dataset_0_workers", "=", "LightlyDataset", "(", "\n", "self", ".", "input_dir", ",", "\n", "num_workers_video_frame_counting", "=", "0", "\n", ")", "\n", "self", ".", "assertListEqual", "(", "dataset_0_workers", ".", "get_filenames", "(", ")", ",", "dataset_4_workers", ".", "get_filenames", "(", ")", ")", "\n", "self", ".", "assertListEqual", "(", "dataset_0_workers", ".", "dataset", ".", "offsets", ",", "dataset_4_workers", ".", "dataset", ".", "offsets", ")", "\n", "for", "timestamps_0_workers", ",", "timestamps_4_workers", "in", "zip", "(", "dataset_0_workers", ".", "dataset", ".", "video_timestamps", ",", "dataset_4_workers", ".", "dataset", ".", "video_timestamps", ")", ":", "\n", "            ", "self", ".", "assertListEqual", "(", "timestamps_0_workers", ",", "timestamps_4_workers", ")", "\n", "", "self", ".", "assertTupleEqual", "(", "dataset_0_workers", ".", "dataset", ".", "fps", ",", "dataset_4_workers", ".", "dataset", ".", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_video_dataset_from_folder": [[150, 183], ["test_VideoDataset.TestVideoDataset.create_dataset", "shutil.rmtree", "torchvision.set_video_backend", "lightly.data._video.VideoDataset", "test_VideoDataset.TestVideoDataset.assertEqual", "range", "range", "len", "len", "test_VideoDataset.TestVideoDataset.assertIsInstance", "test_VideoDataset.TestVideoDataset.assertEqual", "len", "lightly.data._video.VideoDataset.get_filename", "print", "test_VideoDataset.TestVideoDataset.assertTrue", "lightly.data._video.VideoDataset.get_filename.endswith"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video.VideoDataset.get_filename"], ["", "def", "test_video_dataset_from_folder", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "create_dataset", "(", ")", "\n", "\n", "# iterate through different backends", "\n", "for", "backend", "in", "VIDEO_BACKENDS", ":", "\n", "            ", "torchvision", ".", "set_video_backend", "(", "backend", ")", "\n", "\n", "# create dataset", "\n", "dataset", "=", "VideoDataset", "(", "self", ".", "input_dir", ",", "extensions", "=", "self", ".", "extensions", ")", "\n", "\n", "# __len__", "\n", "self", ".", "assertEqual", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_frames_per_video", "*", "self", ".", "n_videos", ")", "\n", "\n", "# __getitem__", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "                ", "frame", ",", "label", "=", "dataset", "[", "i", "]", "\n", "self", ".", "assertIsInstance", "(", "frame", ",", "PIL", ".", "Image", ".", "Image", ")", "\n", "self", ".", "assertEqual", "(", "label", ",", "i", "//", "self", ".", "n_frames_per_video", ")", "\n", "\n", "# get_filename", "\n", "", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "                ", "frame", ",", "label", "=", "dataset", "[", "i", "]", "\n", "filename", "=", "dataset", ".", "get_filename", "(", "i", ")", "\n", "print", "(", "filename", ")", "\n", "self", ".", "assertTrue", "(", "\n", "filename", ".", "endswith", "(", "\n", "f\"-{(i % self.n_frames_per_video):02d}-avi.png\"", "\n", ")", "\n", ")", "\n", "\n", "", "", "shutil", ".", "rmtree", "(", "self", ".", "input_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_video_dataset_no_read_rights": [[184, 212], ["test_VideoDataset.TestVideoDataset.create_dataset", "test_VideoDataset.TestVideoDataset.subTest", "os.walk", "test_VideoDataset.TestVideoDataset.assertEqual", "test_VideoDataset.TestVideoDataset.assertEqual", "test_VideoDataset.TestVideoDataset.subTest", "os.walk", "test_VideoDataset.TestVideoDataset.subTest", "os.chmod", "warnings.catch_warnings", "lightly.data.LightlyDataset", "len", "len", "os.chmod", "test_VideoDataset.TestVideoDataset.assertRaises", "lightly.data.LightlyDataset", "test_VideoDataset.TestVideoDataset.assertRaises", "lightly.data.LightlyDataset", "os.path.join", "os.chmod", "str"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "def", "test_video_dataset_no_read_rights", "(", "self", ")", ":", "\n", "        ", "n_videos", "=", "7", "\n", "self", ".", "create_dataset", "(", "n_videos", "=", "n_videos", ")", "\n", "\n", "with", "self", ".", "subTest", "(", "\"no read rights files\"", ")", ":", "\n", "            ", "for", "subdir", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "input_dir", ")", ":", "\n", "                ", "for", "filename", "in", "files", ":", "\n", "                    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "filename", ")", "\n", "os", ".", "chmod", "(", "filepath", ",", "0o000", ")", "\n", "# This will not raise any Permissions error, as they are caught by torchvision:", "\n", "# https://github.com/pytorch/vision/blob/5985504cc32011fbd4312600b4492d8ae0dd13b4/torchvision/io/video.py#L397", "\n", "", "", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "caught_warning", ":", "\n", "                ", "dataset", "=", "LightlyDataset", "(", "self", ".", "input_dir", ")", "\n", "", "expected_warning", "=", "\"Caught error: [Errno 13] Permission denied:\"", "\n", "has_warning", "=", "[", "True", "for", "warning", "in", "caught_warning", "if", "expected_warning", "in", "str", "(", "warning", ")", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "has_warning", ")", ",", "n_videos", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n", "", "with", "self", ".", "subTest", "(", "\"no read rights subdirs\"", ")", ":", "\n", "            ", "for", "subdir", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "input_dir", ")", ":", "\n", "                ", "os", ".", "chmod", "(", "subdir", ",", "0o000", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "PermissionError", ")", ":", "\n", "                ", "dataset", "=", "LightlyDataset", "(", "self", ".", "input_dir", ")", "\n", "\n", "", "", "with", "self", ".", "subTest", "(", "\"no read rights root\"", ")", ":", "\n", "            ", "os", ".", "chmod", "(", "self", ".", "input_dir", ",", "0o000", ")", "\n", "with", "self", ".", "assertRaises", "(", "PermissionError", ")", ":", "\n", "                ", "dataset", "=", "LightlyDataset", "(", "self", ".", "input_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_video_dataset_non_increasing_timestamps": [[213, 261], ["test_VideoDataset.TestVideoDataset.create_dataset", "lightly.data._video._make_dataset", "unittest.mock.patch", "torchvision.set_video_backend", "lightly.data._video.VideoDataset", "range", "torch.utils.data.DataLoader", "iter", "range", "test_VideoDataset.TestVideoDataset.assertEqual", "len", "len", "len", "next", "test_VideoDataset.TestVideoDataset.assertRaises", "test_VideoDataset.TestVideoDataset.assertRaises", "next"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._image._make_dataset"], ["", "", "", "def", "test_video_dataset_non_increasing_timestamps", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_dataset", "(", "n_videos", "=", "2", ",", "n_frames_per_video", "=", "5", ")", "\n", "\n", "# overwrite the _make_dataset function to return a wrong timestamp", "\n", "def", "_make_dataset_with_non_increasing_timestamps", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "video_instances", ",", "timestamps", ",", "offsets", ",", "fpss", "=", "_make_dataset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "#\u00a0set timestamp of 4th frame in 1st video to timestamp of 2nd frame.", "\n", "timestamps", "[", "0", "]", "[", "3", "]", "=", "timestamps", "[", "0", "]", "[", "1", "]", "\n", "return", "video_instances", ",", "timestamps", ",", "offsets", ",", "fpss", "\n", "\n", "", "with", "mock", ".", "patch", "(", "'lightly.data._video._make_dataset'", ",", "_make_dataset_with_non_increasing_timestamps", ")", ":", "\n", "            ", "for", "backend", "in", "VIDEO_BACKENDS", ":", "\n", "                ", "torchvision", ".", "set_video_backend", "(", "backend", ")", "\n", "\n", "#\u00a0getting frame at wrong timestamp should throw an exception", "\n", "dataset", "=", "VideoDataset", "(", "self", ".", "input_dir", ",", "extensions", "=", "self", ".", "extensions", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "                    ", "if", "i", "==", "3", ":", "\n", "# frame with wrong timestamp", "\n", "                        ", "with", "self", ".", "assertRaises", "(", "NonIncreasingTimestampError", ")", ":", "\n", "                            ", "dataset", "[", "i", "]", "\n", "", "", "else", ":", "\n", "                        ", "dataset", "[", "i", "]", "\n", "\n", "#\u00a0Getting frame at wrong timestamp should throw an exception", "\n", "# from dataloader but not break the dataloader itself. Future", "\n", "#\u00a0calls to next() should still work.", "\n", "", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "2", ",", "\n", "batch_size", "=", "None", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", "\n", ")", "\n", "dataloader_iter", "=", "iter", "(", "dataloader", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "                    ", "if", "i", "==", "3", ":", "\n", "# frame with wrong timestamp", "\n", "                        ", "with", "self", ".", "assertRaises", "(", "NonIncreasingTimestampError", ")", ":", "\n", "                            ", "next", "(", "dataloader_iter", ")", "\n", "", "", "else", ":", "\n", "                        ", "next", "(", "dataloader_iter", ")", "\n", "\n", "#\u00a0disable exception, should be able to load all frames", "\n", "", "", "dataset", ".", "exception_on_non_increasing_timestamp", "=", "False", "\n", "total_frames", "=", "0", "\n", "for", "_", "in", "dataset", ":", "\n", "                    ", "total_frames", "+=", "1", "\n", "", "self", ".", "assertEqual", "(", "total_frames", ",", "len", "(", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_video_dataset_dataloader": [[263, 277], ["test_VideoDataset.TestVideoDataset.create_dataset", "torchvision.set_video_backend", "lightly.data._video.VideoDataset", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "", "", "def", "test_video_dataset_dataloader", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_dataset", "(", ")", "\n", "for", "backend", "in", "VIDEO_BACKENDS", ":", "\n", "            ", "torchvision", ".", "set_video_backend", "(", "backend", ")", "\n", "dataset", "=", "VideoDataset", "(", "self", ".", "input_dir", ",", "extensions", "=", "self", ".", "extensions", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "2", ",", "\n", "batch_size", "=", "3", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "x", ",", "\n", ")", "\n", "for", "batch", "in", "dataloader", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_VideoDataset.TestVideoDataset.test_find_non_increasing_timestamps": [[279, 307], ["lightly.data._video._find_non_increasing_timestamps", "test_VideoDataset.TestVideoDataset.assertListEqual", "lightly.data._video._find_non_increasing_timestamps", "test_VideoDataset.TestVideoDataset.assertListEqual", "lightly.data._video._find_non_increasing_timestamps", "test_VideoDataset.TestVideoDataset.assertListEqual", "lightly.data._video._find_non_increasing_timestamps", "test_VideoDataset.TestVideoDataset.assertListEqual", "lightly.data._video._find_non_increasing_timestamps", "test_VideoDataset.TestVideoDataset.assertListEqual", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction", "fractions.Fraction"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._find_non_increasing_timestamps", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._find_non_increasing_timestamps", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._find_non_increasing_timestamps", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._find_non_increasing_timestamps", "home.repos.pwc.inspect_result.lightly-ai_lightly.data._video._find_non_increasing_timestamps"], ["", "", "", "def", "test_find_non_increasing_timestamps", "(", "self", ")", ":", "\n", "# no timestamps", "\n", "        ", "non_increasing", "=", "_find_non_increasing_timestamps", "(", "[", "]", ")", "\n", "self", ".", "assertListEqual", "(", "non_increasing", ",", "[", "]", ")", "\n", "\n", "# single timestamp", "\n", "timestamps", "=", "[", "Fraction", "(", "0", ",", "1", ")", "]", "\n", "expected", "=", "[", "False", "]", "\n", "non_increasing", "=", "_find_non_increasing_timestamps", "(", "timestamps", ")", "\n", "self", ".", "assertListEqual", "(", "non_increasing", ",", "expected", ")", "\n", "\n", "#\u00a0all timestamps increasing", "\n", "timestamps", "=", "[", "Fraction", "(", "0", ",", "1", ")", ",", "Fraction", "(", "1", ",", "1", ")", ",", "Fraction", "(", "2", ",", "1", ")", "]", "\n", "expected", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "non_increasing", "=", "_find_non_increasing_timestamps", "(", "timestamps", ")", "\n", "self", ".", "assertListEqual", "(", "non_increasing", ",", "expected", ")", "\n", "\n", "#\u00a0all timestamps equal", "\n", "timestamps", "=", "[", "Fraction", "(", "0", ",", "1", ")", ",", "Fraction", "(", "0", ",", "1", ")", ",", "Fraction", "(", "0", ",", "1", ")", "]", "\n", "expected", "=", "[", "False", ",", "True", ",", "True", "]", "\n", "non_increasing", "=", "_find_non_increasing_timestamps", "(", "timestamps", ")", "\n", "self", ".", "assertListEqual", "(", "non_increasing", ",", "expected", ")", "\n", "\n", "# some timestamps equal and some decreasing", "\n", "timestamps", "=", "[", "Fraction", "(", "-", "1", ",", "1", ")", ",", "Fraction", "(", "0", ",", "1", ")", ",", "Fraction", "(", "1", ",", "1", ")", ",", "Fraction", "(", "2", ",", "3", ")", ",", "Fraction", "(", "2", ",", "3", ")", ",", "Fraction", "(", "2", ",", "1", ")", ",", "Fraction", "(", "3", ",", "2", ")", "]", "\n", "expected", "=", "[", "False", ",", "False", ",", "False", ",", "True", ",", "True", ",", "False", ",", "True", "]", "\n", "non_increasing", "=", "_find_non_increasing_timestamps", "(", "timestamps", ")", "\n", "self", ".", "assertListEqual", "(", "non_increasing", ",", "expected", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch": [[19, 32], ["torch.manual_seed", "torchvision.datasets.FakeData", "torchvision.datasets.FakeData", "torchvision.datasets.FakeData", "torchvision.datasets.FakeData", "range", "random.randint", "batch.append", "range", "range"], "methods", ["None"], ["    ", "def", "create_batch", "(", "self", ",", "batch_size", "=", "16", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "rnd_images", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "batch_size", ")", "\n", "\n", "fnames", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "labels", "=", "[", "random", ".", "randint", "(", "0", ",", "5", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "batch", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "batch", ".", "append", "(", "(", "rnd_images", "[", "i", "]", "[", "0", "]", ",", "labels", "[", "i", "]", ",", "fnames", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_base_collate": [[33, 43], ["test_data_collate.TestDataCollate.create_batch", "torchvision.ToTensor", "torchvision.ToTensor", "lightly.data.BaseCollateFunction", "lightly.data.BaseCollateFunction.", "test_data_collate.TestDataCollate.assertIsNotNone", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_base_collate", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "collate", "=", "BaseCollateFunction", "(", "transform", ")", "\n", "samples", ",", "labels", ",", "fnames", "=", "collate", "(", "batch", ")", "\n", "samples0", ",", "samples1", "=", "samples", "\n", "\n", "self", ".", "assertIsNotNone", "(", "collate", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples0", ")", ",", "len", "(", "samples1", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples1", ")", ",", "len", "(", "labels", ")", ",", "len", "(", "fnames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_image_collate": [[44, 53], ["test_data_collate.TestDataCollate.create_batch", "lightly.data.ImageCollateFunction", "lightly.data.ImageCollateFunction.", "test_data_collate.TestDataCollate.assertIsNotNone", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_image_collate", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "img_collate", "=", "ImageCollateFunction", "(", ")", "\n", "samples", ",", "labels", ",", "fnames", "=", "img_collate", "(", "batch", ")", "\n", "samples0", ",", "samples1", "=", "samples", "\n", "\n", "self", ".", "assertIsNotNone", "(", "img_collate", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples0", ")", ",", "len", "(", "samples1", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples1", ")", ",", "len", "(", "labels", ")", ",", "len", "(", "fnames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_image_collate_tuple_input_size": [[54, 65], ["test_data_collate.TestDataCollate.create_batch", "lightly.data.ImageCollateFunction", "lightly.data.ImageCollateFunction.", "test_data_collate.TestDataCollate.assertIsNotNone", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_image_collate_tuple_input_size", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "img_collate", "=", "ImageCollateFunction", "(", "\n", "input_size", "=", "(", "32", ",", "32", ")", ",", "\n", ")", "\n", "samples", ",", "labels", ",", "fnames", "=", "img_collate", "(", "batch", ")", "\n", "samples0", ",", "samples1", "=", "samples", "\n", "\n", "self", ".", "assertIsNotNone", "(", "img_collate", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples0", ")", ",", "len", "(", "samples1", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples1", ")", ",", "len", "(", "labels", ")", ",", "len", "(", "fnames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_simclr_collate_tuple_input_size": [[66, 77], ["test_data_collate.TestDataCollate.create_batch", "lightly.data.SimCLRCollateFunction", "lightly.data.SimCLRCollateFunction.", "test_data_collate.TestDataCollate.assertIsNotNone", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_simclr_collate_tuple_input_size", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "img_collate", "=", "SimCLRCollateFunction", "(", "\n", "input_size", "=", "(", "32", ",", "32", ")", ",", "\n", ")", "\n", "samples", ",", "labels", ",", "fnames", "=", "img_collate", "(", "batch", ")", "\n", "samples0", ",", "samples1", "=", "samples", "\n", "\n", "self", ".", "assertIsNotNone", "(", "img_collate", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples0", ")", ",", "len", "(", "samples1", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples1", ")", ",", "len", "(", "labels", ")", ",", "len", "(", "fnames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_multi_crop_collate": [[78, 101], ["test_data_collate.TestDataCollate.create_batch", "range", "range", "test_data_collate.TestDataCollate.subTest", "lightly.data.MultiCropCollateFunction", "lightly.data.MultiCropCollateFunction.", "test_data_collate.TestDataCollate.assertIsNotNone", "test_data_collate.TestDataCollate.assertEqual", "enumerate", "len", "test_data_collate.TestDataCollate.assertEqual", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_multi_crop_collate", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "for", "high", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "for", "low", "in", "range", "(", "6", ")", ":", "\n", "                ", "with", "self", ".", "subTest", "(", "msg", "=", "'n_low_res={low}, n_high_res={high}'", ")", ":", "\n", "                    ", "multi_crop_collate", "=", "MultiCropCollateFunction", "(", "\n", "crop_sizes", "=", "[", "32", ",", "16", "]", ",", "\n", "crop_counts", "=", "[", "high", ",", "low", "]", ",", "\n", "crop_min_scales", "=", "[", "0.14", ",", "0.04", "]", ",", "\n", "crop_max_scales", "=", "[", "1.0", ",", "0.14", "]", ",", "\n", "transforms", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", ")", "\n", "samples", ",", "labels", ",", "fnames", "=", "multi_crop_collate", "(", "batch", ")", "\n", "self", ".", "assertIsNotNone", "(", "multi_crop_collate", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples", ")", ",", "low", "+", "high", ")", "\n", "for", "i", ",", "crop", "in", "enumerate", "(", "samples", ")", ":", "\n", "                        ", "if", "i", "<", "high", ":", "\n", "                            ", "self", ".", "assertEqual", "(", "crop", ".", "shape", "[", "-", "1", "]", ",", "32", ")", "\n", "self", ".", "assertEqual", "(", "crop", ".", "shape", "[", "-", "2", "]", ",", "32", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "assertEqual", "(", "crop", ".", "shape", "[", "-", "1", "]", ",", "16", ")", "\n", "self", ".", "assertEqual", "(", "crop", ".", "shape", "[", "-", "2", "]", ",", "16", ")", "\n", "", "self", ".", "assertEqual", "(", "len", "(", "crop", ")", ",", "len", "(", "labels", ")", ",", "len", "(", "fnames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_swav_collate_init": [[103, 105], ["lightly.data.SwaVCollateFunction"], "methods", ["None"], ["", "", "", "", "", "def", "test_swav_collate_init", "(", "self", ")", ":", "\n", "        ", "swav_collate", "=", "SwaVCollateFunction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_swav_collate_init_fail": [[106, 111], ["test_data_collate.TestDataCollate.assertRaises", "lightly.data.SwaVCollateFunction"], "methods", ["None"], ["", "def", "test_swav_collate_init_fail", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "SwaVCollateFunction", "(", "\n", "crop_sizes", "=", "[", "1", "]", ",", "\n", "crop_counts", "=", "[", "2", ",", "3", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_multi_view_collate": [[113, 135], ["torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "lightly.data.collate.MultiViewCollateFunction", "test_data_collate.TestDataCollate.create_batch", "lightly.data.collate.MultiViewCollateFunction.", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertTrue", "test_data_collate.TestDataCollate.assertTrue", "test_data_collate.TestDataCollate.assertTrue", "len", "len", "len", "len", "torch.equal", "torch.equal", "torch.equal", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomVerticalFlip", "torchvision.RandomVerticalFlip", "torchvision.ToTensor.", "torchvision.Compose.", "torchvision.Compose."], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "", "def", "test_multi_view_collate", "(", "self", ")", ":", "\n", "        ", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "hflip", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "1", ")", ",", "\n", "to_tensor", ",", "\n", "]", ")", "\n", "vflip", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomVerticalFlip", "(", "p", "=", "1", ")", ",", "\n", "to_tensor", ",", "\n", "]", ")", "\n", "trans", "=", "[", "to_tensor", ",", "hflip", ",", "vflip", "]", "\n", "\n", "collate_fn", "=", "MultiViewCollateFunction", "(", "trans", ")", "\n", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "imgs", "=", "batch", "[", "0", "]", "\n", "views", ",", "labels", ",", "fnames", "=", "collate_fn", "(", "batch", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "labels", ")", ",", "len", "(", "batch", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "fnames", ")", ",", "len", "(", "batch", ")", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "views", "[", "0", "]", "[", "0", "]", ",", "to_tensor", "(", "imgs", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "views", "[", "1", "]", "[", "0", "]", ",", "hflip", "(", "imgs", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "equal", "(", "views", "[", "2", "]", "[", "0", "]", ",", "vflip", "(", "imgs", "[", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_dino_collate_init": [[136, 138], ["lightly.data.collate.DINOCollateFunction"], "methods", ["None"], ["", "def", "test_dino_collate_init", "(", "self", ")", ":", "\n", "        ", "DINOCollateFunction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_dino_collate_forward": [[139, 143], ["test_data_collate.TestDataCollate.create_batch", "lightly.data.collate.DINOCollateFunction", "lightly.data.collate.DINOCollateFunction."], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_dino_collate_forward", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "collate_fn", "=", "DINOCollateFunction", "(", ")", "\n", "views", ",", "labels", ",", "fnames", "=", "collate_fn", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_mae_collate_init": [[144, 146], ["lightly.data.collate.MAECollateFunction"], "methods", ["None"], ["", "def", "test_mae_collate_init", "(", "self", ")", ":", "\n", "        ", "MAECollateFunction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_mae_collate_forward": [[147, 151], ["test_data_collate.TestDataCollate.create_batch", "lightly.data.collate.MAECollateFunction", "lightly.data.collate.MAECollateFunction."], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_mae_collate_forward", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "collate_fn", "=", "MAECollateFunction", "(", ")", "\n", "views", ",", "labels", ",", "fnames", "=", "collate_fn", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_pirl_collate_init": [[152, 154], ["lightly.data.PIRLCollateFunction"], "methods", ["None"], ["", "def", "test_pirl_collate_init", "(", "self", ")", ":", "\n", "        ", "PIRLCollateFunction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_pirl_collate_forward_tuple_input_size": [[155, 166], ["test_data_collate.TestDataCollate.create_batch", "lightly.data.PIRLCollateFunction", "lightly.data.PIRLCollateFunction.", "test_data_collate.TestDataCollate.assertIsNotNone", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_pirl_collate_forward_tuple_input_size", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "img_collate", "=", "PIRLCollateFunction", "(", "\n", "input_size", "=", "(", "32", ",", "32", ")", ",", "\n", ")", "\n", "samples", ",", "labels", ",", "fnames", "=", "img_collate", "(", "batch", ")", "\n", "samples0", ",", "samples1", "=", "samples", "\n", "\n", "self", ".", "assertIsNotNone", "(", "img_collate", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples0", ")", ",", "len", "(", "samples1", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples1", ")", ",", "len", "(", "labels", ")", ",", "len", "(", "fnames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.test_pirl_collate_forward_n_grid": [[167, 180], ["test_data_collate.TestDataCollate.create_batch", "lightly.data.PIRLCollateFunction", "lightly.data.PIRLCollateFunction.", "test_data_collate.TestDataCollate.assertIsNotNone", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "test_data_collate.TestDataCollate.assertEqual", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_data_collate.TestDataCollate.create_batch"], ["", "def", "test_pirl_collate_forward_n_grid", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_batch", "(", ")", "\n", "img_collate", "=", "PIRLCollateFunction", "(", "\n", "input_size", "=", "32", ",", "\n", "n_grid", "=", "3", "\n", ")", "\n", "samples", ",", "labels", ",", "fnames", "=", "img_collate", "(", "batch", ")", "\n", "samples0", ",", "samples1", "=", "samples", "\n", "\n", "self", ".", "assertIsNotNone", "(", "img_collate", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples0", ")", ",", "len", "(", "samples1", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "samples1", ")", ",", "len", "(", "labels", ")", ",", "len", "(", "fnames", ")", ")", "\n", "self", ".", "assertEqual", "(", "samples1", ".", "shape", ",", "(", "16", ",", "9", ",", "3", ",", "10", ",", "10", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.ensure_dir": [[32, 34], ["os.makedirs"], "methods", ["None"], ["    ", "def", "ensure_dir", "(", "self", ",", "path_to_folder", ":", "str", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path_to_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_dataset_no_subdir": [[35, 46], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "os.path.join", "data[].save", "range"], "methods", ["None"], ["", "def", "create_dataset_no_subdir", "(", "self", ",", "n_samples", ":", "int", ")", "->", "Tuple", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_samples", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_samples", ")", "]", "\n", "for", "sample_idx", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "data", "=", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "", "return", "tmp_dir", ",", "sample_names", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_dataset": [[47, 69], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "range", "range", "range", "test_LightlyDataset.TestLightlyDataset.ensure_dir", "data[].save", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.ensure_dir"], ["", "def", "create_dataset", "(", "self", ",", "n_subfolders", "=", "5", ",", "n_samples_per_subfolder", "=", "20", ")", ":", "\n", "        ", "n_tot", "=", "n_subfolders", "*", "n_samples_per_subfolder", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_tot", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "folder_names", "=", "[", "f'folder_{i}'", "for", "i", "in", "range", "(", "n_subfolders", ")", "]", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_samples_per_subfolder", ")", "]", "\n", "\n", "for", "folder_idx", "in", "range", "(", "n_subfolders", ")", ":", "\n", "            ", "for", "sample_idx", "in", "range", "(", "n_samples_per_subfolder", ")", ":", "\n", "                ", "idx", "=", "(", "folder_idx", "*", "n_subfolders", ")", "+", "sample_idx", "\n", "data", "=", "dataset", "[", "idx", "]", "\n", "\n", "self", ".", "ensure_dir", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "\n", "folder_names", "[", "folder_idx", "]", ")", ")", "\n", "\n", "data", "[", "0", "]", ".", "save", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "\n", "folder_names", "[", "folder_idx", "]", ",", "\n", "sample_names", "[", "sample_idx", "]", ")", ")", "\n", "", "", "return", "tmp_dir", ",", "folder_names", ",", "sample_names", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_video_dataset": [[70, 89], ["tempfile.mkdtemp", "test_LightlyDataset.TestLightlyDataset.ensure_dir", "range", "test_LightlyDataset.TestLightlyDataset.filenames.append", "os.path.join", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.VideoWriter.write", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.ensure_dir"], ["", "def", "create_video_dataset", "(", "self", ",", "n_videos", "=", "5", ",", "n_frames_per_video", "=", "10", ",", "w", "=", "32", ",", "h", "=", "32", ",", "c", "=", "3", ")", ":", "\n", "\n", "        ", "self", ".", "n_videos", "=", "n_videos", "\n", "self", ".", "n_frames_per_video", "=", "n_frames_per_video", "\n", "\n", "self", ".", "input_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "ensure_dir", "(", "self", ".", "input_dir", ")", "\n", "self", ".", "frames", "=", "(", "np", ".", "random", ".", "randn", "(", "n_frames_per_video", ",", "w", ",", "h", ",", "c", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "extensions", "=", "(", "'.avi'", ",", ")", "\n", "self", ".", "filenames", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "filename", "=", "f'output-{i}.avi'", "\n", "self", ".", "filenames", ".", "append", "(", "filename", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "filename", ")", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "path", ",", "0", ",", "1", ",", "(", "w", ",", "h", ")", ")", "\n", "for", "frame", "in", "self", ".", "frames", ":", "\n", "                ", "out", ".", "write", "(", "frame", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_create_lightly_dataset_from_folder": [[90, 121], ["test_LightlyDataset.TestLightlyDataset.create_dataset", "lightly.data.LightlyDataset", "lightly.data.LightlyDataset.get_filenames", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertListEqual", "tempfile.mkdtemp", "lightly.data.LightlyDataset.dump", "test_LightlyDataset.TestLightlyDataset.assertEqual", "shutil.rmtree", "shutil.rmtree", "len", "len", "sorted", "sorted", "sum", "len", "fnames.append", "os.path.join", "len", "os.listdir", "os.listdir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump"], ["", "", "def", "test_create_lightly_dataset_from_folder", "(", "self", ")", ":", "\n", "        ", "n_subfolders", "=", "5", "\n", "n_samples_per_subfolder", "=", "10", "\n", "n_tot_files", "=", "n_subfolders", "*", "n_samples_per_subfolder", "\n", "\n", "dataset_dir", ",", "folder_names", ",", "sample_names", "=", "self", ".", "create_dataset", "(", "\n", "n_subfolders", ",", "\n", "n_samples_per_subfolder", "\n", ")", "\n", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "dataset_dir", ")", "\n", "filenames", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "\n", "fnames", "=", "[", "]", "\n", "for", "dir_name", "in", "folder_names", ":", "\n", "            ", "for", "fname", "in", "sample_names", ":", "\n", "                ", "fnames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dir_name", ",", "fname", ")", ")", "\n", "\n", "", "", "self", ".", "assertEqual", "(", "len", "(", "filenames", ")", ",", "n_tot_files", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "dataset", ")", ",", "n_tot_files", ")", "\n", "self", ".", "assertListEqual", "(", "sorted", "(", "fnames", ")", ",", "sorted", "(", "filenames", ")", ")", "\n", "\n", "out_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "dataset", ".", "dump", "(", "out_dir", ")", "\n", "self", ".", "assertEqual", "(", "\n", "sum", "(", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "subdir", ")", ")", ")", "for", "subdir", "in", "os", ".", "listdir", "(", "out_dir", ")", ")", ",", "\n", "len", "(", "dataset", ")", ",", "\n", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "dataset_dir", ")", "\n", "shutil", ".", "rmtree", "(", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_create_lightly_dataset_from_folder_nosubdir": [[122, 139], ["test_LightlyDataset.TestLightlyDataset.create_dataset_no_subdir", "lightly.data.LightlyDataset", "lightly.data.LightlyDataset.get_filenames", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertListEqual", "range", "len", "len", "sorted", "sorted"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_dataset_no_subdir", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "def", "test_create_lightly_dataset_from_folder_nosubdir", "(", "self", ")", ":", "\n", "\n", "# create a dataset", "\n", "        ", "n_tot", "=", "100", "\n", "tmp_dir", ",", "sample_names", "=", "self", ".", "create_dataset_no_subdir", "(", "n_tot", ")", "\n", "\n", "# create lightly dataset", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "filenames", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "\n", "# tests", "\n", "self", ".", "assertEqual", "(", "len", "(", "filenames", ")", ",", "n_tot", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "dataset", ")", ",", "n_tot", ")", "\n", "self", ".", "assertListEqual", "(", "sorted", "(", "sample_names", ")", ",", "sorted", "(", "filenames", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_tot", ")", ":", "\n", "            ", "sample", ",", "target", ",", "fname", "=", "dataset", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_create_lightly_dataset_with_invalid_char_in_filename": [[140, 159], ["torchvision.datasets.FakeData", "test_LightlyDataset.TestLightlyDataset.subTest", "tempfile.mkdtemp", "range", "os.path.join", "data[].save", "range", "test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset"], "methods", ["None"], ["", "", "def", "test_create_lightly_dataset_with_invalid_char_in_filename", "(", "self", ")", ":", "\n", "\n", "# create a dataset", "\n", "        ", "n_tot", "=", "100", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_tot", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "for", "invalid_char", "in", "INVALID_FILENAME_CHARACTERS", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "msg", "=", "f\"invalid_char: {invalid_char}\"", ")", ":", "\n", "                ", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "sample_names", "=", "[", "f'img_,_{i}.jpg'", "for", "i", "in", "range", "(", "n_tot", ")", "]", "\n", "for", "sample_idx", "in", "range", "(", "n_tot", ")", ":", "\n", "                    ", "data", "=", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n", "# create lightly dataset", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                        ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_check_images": [[160, 184], ["tempfile.mkdtemp", "torchvision.datasets.FakeData", "zip", "lightly.data._utils.check_images", "os.path.join", "data[].save", "os.path.join", "len", "len", "range", "range", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data._utils.check_images"], ["", "", "", "", "", "def", "test_check_images", "(", "self", ")", ":", "\n", "\n", "# create a dataset", "\n", "        ", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "n_healthy", "=", "100", "\n", "n_corrupt", "=", "20", "\n", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_healthy", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_healthy", ")", "]", "\n", "for", "sample_name", ",", "data", "in", "zip", "(", "sample_names", ",", "dataset", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "sample_name", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n", "", "corrupt_sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_healthy", ",", "n_healthy", "+", "n_corrupt", ")", "]", "\n", "for", "sample_name", "in", "corrupt_sample_names", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "sample_name", ")", "\n", "with", "open", "(", "path", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "'this_is_not_an_image'", ")", "\n", "\n", "# tests", "\n", "", "", "healthy_images", ",", "corrupt_images", "=", "check_images", "(", "tmp_dir", ")", "\n", "assert", "(", "len", "(", "healthy_images", ")", "==", "n_healthy", ")", "\n", "assert", "(", "len", "(", "corrupt_images", ")", "==", "n_corrupt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_not_existing_folder_dataset": [[185, 189], ["test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset"], "methods", ["None"], ["", "def", "test_not_existing_folder_dataset", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "LightlyDataset", "(", "\n", "'/a-random-hopefully-non/existing-path-to-nowhere/'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_from_torch_dataset": [[191, 196], ["torchvision.datasets.FakeData", "lightly.data.LightlyDataset.from_torch_dataset", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertEqual", "len", "len", "len", "len", "lightly.data.LightlyDataset.from_torch_dataset.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.from_torch_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "def", "test_from_torch_dataset", "(", "self", ")", ":", "\n", "        ", "_dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "1", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "_dataset", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "_dataset", ")", ",", "len", "(", "dataset", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "dataset", ".", "get_filenames", "(", ")", ")", ",", "len", "(", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_from_torch_dataset_with_transform": [[197, 205], ["torchvision.datasets.FakeData", "lightly.data.LightlyDataset.from_torch_dataset", "test_LightlyDataset.TestLightlyDataset.assertIsNotNone", "test_LightlyDataset.TestLightlyDataset.assertIsNotNone", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.from_torch_dataset"], ["", "def", "test_from_torch_dataset_with_transform", "(", "self", ")", ":", "\n", "        ", "dataset_", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "1", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "\n", "dataset_", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "\n", ")", "\n", "self", ".", "assertIsNotNone", "(", "dataset", ".", "transform", ")", "\n", "self", ".", "assertIsNotNone", "(", "dataset", ".", "dataset", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_filenames_dataset_no_samples": [[206, 210], ["test_LightlyDataset.TestLightlyDataset.create_dataset", "test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "def", "test_filenames_dataset_no_samples", "(", "self", ")", ":", "\n", "        ", "tmp_dir", ",", "folder_names", ",", "sample_names", "=", "self", ".", "create_dataset", "(", ")", "\n", "with", "self", ".", "assertRaises", "(", "(", "RuntimeError", ",", "FileNotFoundError", ")", ")", ":", "\n", "            ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ",", "filenames", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_filenames_dataset_with_subdir": [[211, 242], ["unittest.skip", "test_LightlyDataset.TestLightlyDataset.create_dataset", "int", "range", "os.path.join", "numpy.random.seed", "numpy.random.choice", "lightly.data.LightlyDataset", "lightly.data.LightlyDataset.get_filenames", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertEqual", "set", "enumerate", "len", "len", "len", "len", "len", "set", "set", "test_LightlyDataset.TestLightlyDataset.assertIsInstance", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertIsInstance", "filename.split"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "@", "unittest", ".", "skip", "(", "\"https://github.com/lightly-ai/lightly/issues/535\"", ")", "\n", "def", "test_filenames_dataset_with_subdir", "(", "self", ")", ":", "\n", "        ", "tmp_dir", ",", "folder_names", ",", "sample_names", "=", "self", ".", "create_dataset", "(", ")", "\n", "folder_name_to_target", "=", "{", "\n", "folder_name", ":", "i", "for", "i", ",", "folder_name", "in", "enumerate", "(", "folder_names", ")", "\n", "}", "\n", "all_filenames", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "folder_name", ",", "sample_name", ")", "\n", "for", "folder_name", "in", "folder_names", "\n", "for", "sample_name", "in", "sample_names", "\n", "]", "\n", "n_samples", "=", "int", "(", "len", "(", "all_filenames", ")", "/", "2", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "filenames", "=", "np", ".", "random", ".", "choice", "(", "all_filenames", ",", "n_samples", ",", "replace", "=", "False", ")", "\n", "\n", "dataset", "=", "LightlyDataset", "(", "\n", "input_dir", "=", "tmp_dir", ",", "\n", "filenames", "=", "filenames", "\n", ")", "\n", "filenames_dataset", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "filenames_dataset", ")", ",", "len", "(", "dataset", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "filenames_dataset", ")", ",", "len", "(", "filenames", ")", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "filenames_dataset", ")", ",", "set", "(", "filenames", ")", ")", "\n", "filenames_dataset", "=", "set", "(", "filenames_dataset", ")", "\n", "for", "image", ",", "target", ",", "filename", "in", "dataset", ":", "\n", "                ", "self", ".", "assertIsInstance", "(", "image", ",", "Image", ")", "\n", "folder_name", "=", "filename", ".", "split", "(", "sep", "=", "os", ".", "sep", ")", "[", "0", "]", "\n", "self", ".", "assertEqual", "(", "target", ",", "folder_name_to_target", "[", "folder_name", "]", ")", "\n", "self", ".", "assertIsInstance", "(", "filename", ",", "str", ")", "\n", "assert", "filename", "in", "filenames_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_filenames_dataset_no_subdir": [[243, 275], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "range", "os.path.join", "data[].save", "len", "numpy.random.seed", "numpy.random.choice", "lightly.data.LightlyDataset", "lightly.data.LightlyDataset.get_filenames", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertEqual", "set", "range", "len", "len", "len", "len", "set", "set", "test_LightlyDataset.TestLightlyDataset.assertIsInstance", "test_LightlyDataset.TestLightlyDataset.assertEqual", "test_LightlyDataset.TestLightlyDataset.assertIsInstance", "test_LightlyDataset.TestLightlyDataset.assertIn"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "", "def", "test_filenames_dataset_no_subdir", "(", "self", ")", ":", "\n", "# create a dataset", "\n", "        ", "n_tot", "=", "100", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_tot", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "all_filenames", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_tot", ")", "]", "\n", "for", "sample_idx", "in", "range", "(", "n_tot", ")", ":", "\n", "            ", "data", "=", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "all_filenames", "[", "sample_idx", "]", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n", "", "n_samples", "=", "len", "(", "all_filenames", ")", "//", "2", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "filenames", "=", "np", ".", "random", ".", "choice", "(", "all_filenames", ",", "n_samples", ",", "replace", "=", "False", ")", "\n", "\n", "dataset", "=", "LightlyDataset", "(", "\n", "input_dir", "=", "tmp_dir", ",", "\n", "filenames", "=", "filenames", "\n", ")", "\n", "filenames_dataset", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "filenames_dataset", ")", ",", "len", "(", "dataset", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "filenames_dataset", ")", ",", "len", "(", "filenames", ")", ")", "\n", "self", ".", "assertEqual", "(", "set", "(", "filenames_dataset", ")", ",", "set", "(", "filenames", ")", ")", "\n", "filenames_dataset", "=", "set", "(", "filenames_dataset", ")", "\n", "for", "image", ",", "target", ",", "filename", "in", "dataset", ":", "\n", "                ", "self", ".", "assertIsInstance", "(", "image", ",", "Image", ")", "\n", "self", ".", "assertEqual", "(", "target", ",", "0", ")", "\n", "self", ".", "assertIsInstance", "(", "filename", ",", "str", ")", "\n", "self", ".", "assertIn", "(", "filename", ",", "filenames_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_video_dataset_available": [[276, 286], ["unittest.skipUnless", "test_LightlyDataset.TestLightlyDataset.create_video_dataset", "lightly.data.LightlyDataset", "tempfile.mkdtemp", "lightly.data.LightlyDataset.dump", "test_LightlyDataset.TestLightlyDataset.assertEqual", "os.listdir", "len", "test_LightlyDataset.TestLightlyDataset.assertIn", "lightly.data.LightlyDataset.get_filenames", "os.listdir", "len", "lightly.data.LightlyDataset.get_filenames", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_video_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "", "@", "unittest", ".", "skipUnless", "(", "VIDEO_DATASET_AVAILABLE", ",", "\"PyAV and CV2 are both installed\"", ")", "\n", "def", "test_video_dataset_available", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_video_dataset", "(", ")", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "self", ".", "input_dir", ")", "\n", "\n", "out_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "dataset", ".", "dump", "(", "out_dir", ",", "dataset", ".", "get_filenames", "(", ")", "[", "(", "len", "(", "dataset", ")", "//", "2", ")", ":", "]", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "os", ".", "listdir", "(", "out_dir", ")", ")", ",", "len", "(", "dataset", ")", "//", "2", ")", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "out_dir", ")", ":", "\n", "            ", "self", ".", "assertIn", "(", "filename", ",", "dataset", ".", "get_filenames", "(", ")", "[", "(", "len", "(", "dataset", ")", "//", "2", ")", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_video_dataset_unavailable": [[287, 303], ["unittest.skipIf", "tempfile.mkdtemp", "os.path.join", "torchvision.datasets.FakeData", "image.save", "os.rename", "shutil.rmtree", "os.path.join", "test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset"], "methods", ["None"], ["", "", "@", "unittest", ".", "skipIf", "(", "VIDEO_DATASET_AVAILABLE", ",", "\"PyAV or CV2 is/are not installed\"", ")", "\n", "def", "test_video_dataset_unavailable", "(", "self", ")", ":", "\n", "        ", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "# simulate a video", "\n", "# the video dataset will check to see whether there exists a file", "\n", "# with a video extension, it's enough to fake a video file here", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'my_file.png'", ")", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "1", ",", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "image", ",", "_", "=", "dataset", "[", "0", "]", "\n", "image", ".", "save", "(", "path", ")", "\n", "os", ".", "rename", "(", "path", ",", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'my_file.avi'", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ImportError", ")", ":", "\n", "            ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_video_dataset_filenames": [[304, 329], ["unittest.skipUnless", "test_LightlyDataset.TestLightlyDataset.create_video_dataset", "int", "numpy.random.seed", "numpy.random.choice", "lightly.data.LightlyDataset", "lightly.data.LightlyDataset.get_filenames", "test_LightlyDataset.TestLightlyDataset.assertIsInstance", "test_LightlyDataset.TestLightlyDataset.assertTrue", "test_LightlyDataset.TestLightlyDataset.assertIsInstance", "test_LightlyDataset.TestLightlyDataset.assertIn", "len", "test_LightlyDataset.TestLightlyDataset.test_video_dataset_filenames.filename_img_fits_video"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_video_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "@", "unittest", ".", "skipUnless", "(", "VIDEO_DATASET_AVAILABLE", ",", "\"PyAV or CV2 are not available\"", ")", "\n", "def", "test_video_dataset_filenames", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_video_dataset", "(", ")", "\n", "all_filenames", "=", "self", ".", "filenames", "\n", "\n", "def", "filename_img_fits_video", "(", "filename_img", ":", "str", ")", ":", "\n", "            ", "for", "filename_video", "in", "all_filenames", ":", "\n", "                ", "filename_video", "=", "filename_video", "[", ":", "-", "1", "*", "len", "(", "'.avi'", ")", "]", "\n", "if", "filename_video", "in", "filename_img", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "n_samples", "=", "int", "(", "len", "(", "all_filenames", ")", "/", "2", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "filenames", "=", "np", ".", "random", ".", "choice", "(", "all_filenames", ",", "n_samples", ",", "replace", "=", "False", ")", "\n", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "self", ".", "input_dir", ",", "filenames", "=", "filenames", ")", "\n", "\n", "filenames_dataset", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "for", "image", ",", "target", ",", "filename", "in", "dataset", ":", "\n", "            ", "self", ".", "assertIsInstance", "(", "image", ",", "Image", ")", "\n", "self", ".", "assertTrue", "(", "filename_img_fits_video", "(", "filename", ")", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "filename", ",", "str", ")", "\n", "self", ".", "assertIn", "(", "filename", ",", "filenames_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_transform_setter": [[330, 343], ["test_LightlyDataset.TestLightlyDataset.assertIsNone", "test_LightlyDataset.TestLightlyDataset.assertIsNone", "torchvision.transforms.ToTensor", "test_LightlyDataset.TestLightlyDataset.assertIsNotNone", "test_LightlyDataset.TestLightlyDataset.assertIsNotNone", "test_LightlyDataset.TestLightlyDataset.create_dataset", "lightly.data.LightlyDataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "", "def", "test_transform_setter", "(", "self", ",", "dataset", ":", "LightlyDataset", "=", "None", ")", ":", "\n", "\n", "        ", "if", "dataset", "is", "None", ":", "\n", "            ", "tmp_dir", ",", "_", ",", "_", "=", "self", ".", "create_dataset", "(", ")", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "# the transform of both datasets should be None", "\n", "", "self", ".", "assertIsNone", "(", "dataset", ".", "transform", ")", "\n", "self", ".", "assertIsNone", "(", "dataset", ".", "dataset", ".", "transform", ")", "\n", "# use the setter", "\n", "dataset", ".", "transform", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "# assert that the transform is set in the nested dataset", "\n", "self", ".", "assertIsNotNone", "(", "dataset", ".", "transform", ")", "\n", "self", ".", "assertIsNotNone", "(", "dataset", ".", "dataset", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_no_dir_no_transform_fails": [[344, 347], ["test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "test_no_dir_no_transform_fails", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "LightlyDataset", "(", "None", ",", "transform", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_dataset_get_filenames": [[348, 366], ["unittest.skipUnless", "test_LightlyDataset.TestLightlyDataset.create_video_dataset", "lightly.data.LightlyDataset", "video_dataset.get_filenames", "lightly.data.LightlyDataset.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_video_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "@", "unittest", ".", "skipUnless", "(", "VIDEO_DATASET_AVAILABLE", ",", "\"PyAV or CV2 is/are not installed\"", ")", "\n", "def", "test_dataset_get_filenames", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_video_dataset", "(", ")", "\n", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "self", ".", "input_dir", ")", "\n", "video_dataset", "=", "dataset", ".", "dataset", "\n", "\n", "#\u00a0Get filenames using VideoDataset.get_filenames.", "\n", "video_dataset_filenames", "=", "video_dataset", ".", "get_filenames", "(", ")", "\n", "\n", "# Get filenames using calls to VideoDataset.get_filename(index). ", "\n", "# This removes the optimization introduced in VideoDatset.get_filenames. ", "\n", "# Both methods should give the same result.", "\n", "get_filenames", "=", "VideoDataset", ".", "get_filenames", "\n", "del", "VideoDataset", ".", "get_filenames", "\n", "lightly_dataset_filenames", "=", "dataset", ".", "get_filenames", "(", ")", "\n", "VideoDataset", ".", "get_filenames", "=", "get_filenames", "\n", "\n", "assert", "video_dataset_filenames", "==", "lightly_dataset_filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_dataset_with_subdirs": [[367, 391], ["test_LightlyDataset.TestLightlyDataset.create_dataset", "test_LightlyDataset.TestLightlyDataset.subTest", "os.walk", "lightly.data.LightlyDataset", "test_LightlyDataset.TestLightlyDataset.assertGreater", "test_LightlyDataset.TestLightlyDataset.subTest", "os.walk", "test_LightlyDataset.TestLightlyDataset.subTest", "os.chmod", "len", "test_LightlyDataset.TestLightlyDataset.assertRaises", "os.chmod", "test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset", "test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset", "os.path.join", "os.chmod", "lightly.data.LightlyDataset.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "def", "test_dataset_with_subdirs", "(", "self", ")", ":", "\n", "        ", "tmp_dir", ",", "_", ",", "_", "=", "self", ".", "create_dataset", "(", ")", "\n", "\n", "with", "self", ".", "subTest", "(", "\"no read rights files\"", ")", ":", "\n", "            ", "for", "subdir", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "tmp_dir", ")", ":", "\n", "                ", "for", "filename", "in", "files", ":", "\n", "                    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "subdir", ",", "filename", ")", "\n", "os", ".", "chmod", "(", "filepath", ",", "0o000", ")", "\n", "", "", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "dataset", ".", "get_filenames", "(", ")", ")", ",", "0", ")", "\n", "with", "self", ".", "assertRaises", "(", "PermissionError", ")", ":", "\n", "                ", "for", "_", "in", "dataset", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "with", "self", ".", "subTest", "(", "\"no read rights subfolders\"", ")", ":", "\n", "            ", "for", "subdir", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "tmp_dir", ")", ":", "\n", "                ", "os", ".", "chmod", "(", "subdir", ",", "0o000", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "PermissionError", ")", ":", "\n", "                ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "\n", "", "", "with", "self", ".", "subTest", "(", "\"no read rights root\"", ")", ":", "\n", "            ", "os", ".", "chmod", "(", "tmp_dir", ",", "0o000", ")", "\n", "with", "self", ".", "assertRaises", "(", "PermissionError", ")", ":", "\n", "                ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_dataset_plain": [[393, 411], ["test_LightlyDataset.TestLightlyDataset.create_dataset_no_subdir", "test_LightlyDataset.TestLightlyDataset.subTest", "os.walk", "lightly.data.LightlyDataset", "test_LightlyDataset.TestLightlyDataset.assertGreater", "test_LightlyDataset.TestLightlyDataset.subTest", "os.chmod", "len", "test_LightlyDataset.TestLightlyDataset.assertRaises", "test_LightlyDataset.TestLightlyDataset.assertRaises", "lightly.data.LightlyDataset", "os.path.join", "os.chmod", "lightly.data.LightlyDataset.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_dataset_no_subdir", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "", "", "def", "test_dataset_plain", "(", "self", ")", ":", "\n", "        ", "tmp_dir", ",", "_", "=", "self", ".", "create_dataset_no_subdir", "(", "100", ")", "\n", "\n", "with", "self", ".", "subTest", "(", "\"no read rights files\"", ")", ":", "\n", "            ", "for", "subdir", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "tmp_dir", ")", ":", "\n", "                ", "for", "filename", "in", "files", ":", "\n", "                    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "filename", ")", "\n", "os", ".", "chmod", "(", "filepath", ",", "0o000", ")", "\n", "", "", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "dataset", ".", "get_filenames", "(", ")", ")", ",", "0", ")", "\n", "with", "self", ".", "assertRaises", "(", "PermissionError", ")", ":", "\n", "                ", "for", "_", "in", "dataset", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "with", "self", ".", "subTest", "(", "\"no read rights root\"", ")", ":", "\n", "            ", "os", ".", "chmod", "(", "tmp_dir", ",", "0o000", ")", "\n", "with", "self", ".", "assertRaises", "(", "PermissionError", ")", ":", "\n", "                ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "tmp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.setUp": [[15, 18], ["test_LightlySubset.TestLightlySubset.create_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "tmp_dir", ",", "folder_names", ",", "sample_names", "=", "self", ".", "create_dataset", "(", "n_subfolders", "=", "5", ",", "n_samples_per_subfolder", "=", "5", ")", "\n", "self", ".", "input_dir", "=", "tmp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.create_subset": [[19, 29], ["random.seed", "lightly.data.dataset.LightlyDataset", "lightly.data.dataset.LightlyDataset.get_filenames", "int", "random.sample", "lightly.data.lightly_subset.LightlySubset", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "def", "create_subset", "(", "self", ",", "seed", "=", "0", ")", "->", "Tuple", "[", "LightlySubset", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "base_dataset", "=", "LightlyDataset", "(", "input_dir", "=", "self", ".", "input_dir", ")", "\n", "filenames_base_dataset", "=", "base_dataset", ".", "get_filenames", "(", ")", "\n", "\n", "no_samples_subset", "=", "int", "(", "len", "(", "filenames_base_dataset", ")", "*", "0.5", ")", "\n", "filenames_subset", "=", "random", ".", "sample", "(", "filenames_base_dataset", ",", "no_samples_subset", ")", "\n", "\n", "subset", "=", "LightlySubset", "(", "base_dataset", "=", "base_dataset", ",", "filenames_subset", "=", "filenames_subset", ")", "\n", "return", "subset", ",", "filenames_subset", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.create_video_subset": [[30, 41], ["random.seed", "test_LightlySubset.TestLightlySubset.create_video_dataset", "lightly.data.dataset.LightlyDataset", "lightly.data.dataset.LightlyDataset.get_filenames", "int", "random.sample", "lightly.data.lightly_subset.LightlySubset", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.create_video_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "def", "create_video_subset", "(", "self", ",", "seed", "=", "0", ")", "->", "Tuple", "[", "LightlySubset", ",", "List", "[", "str", "]", "]", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "create_video_dataset", "(", "n_videos", "=", "5", ",", "n_frames_per_video", "=", "10", ")", "\n", "base_dataset", "=", "LightlyDataset", "(", "self", ".", "input_dir", ")", "\n", "filenames_base_dataset", "=", "base_dataset", ".", "get_filenames", "(", ")", "\n", "\n", "no_samples_subset", "=", "int", "(", "len", "(", "filenames_base_dataset", ")", "*", "0.5", ")", "\n", "filenames_subset", "=", "random", ".", "sample", "(", "filenames_base_dataset", ",", "no_samples_subset", ")", "\n", "\n", "subset", "=", "LightlySubset", "(", "base_dataset", "=", "base_dataset", ",", "filenames_subset", "=", "filenames_subset", ")", "\n", "return", "subset", ",", "filenames_subset", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.test_create_lightly_subset": [[42, 49], ["test_LightlySubset.TestLightlySubset.create_subset", "enumerate", "subset.get_filenames", "subset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.create_subset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__getitem__"], ["", "def", "test_create_lightly_subset", "(", "self", ")", ":", "\n", "        ", "subset", ",", "filenames_subset", "=", "self", ".", "create_subset", "(", ")", "\n", "\n", "assert", "subset", ".", "get_filenames", "(", ")", "==", "filenames_subset", "\n", "for", "index_subset", ",", "filename_subset", "in", "enumerate", "(", "filenames_subset", ")", ":", "\n", "            ", "sample", ",", "target", ",", "fname", "=", "subset", ".", "__getitem__", "(", "index_subset", ")", "\n", "assert", "filename_subset", "==", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.test_create_lightly_video_subset": [[50, 57], ["test_LightlySubset.TestLightlySubset.create_video_subset", "enumerate", "subset.get_filenames", "subset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.create_video_subset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.__getitem__"], ["", "", "def", "test_create_lightly_video_subset", "(", "self", ")", ":", "\n", "        ", "subset", ",", "filenames_subset", "=", "self", ".", "create_video_subset", "(", ")", "\n", "\n", "assert", "subset", ".", "get_filenames", "(", ")", "==", "filenames_subset", "\n", "for", "index_subset", ",", "filename_subset", "in", "enumerate", "(", "filenames_subset", ")", ":", "\n", "            ", "sample", ",", "target", ",", "fname", "=", "subset", ".", "__getitem__", "(", "index_subset", ")", "\n", "assert", "filename_subset", "==", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.test_lightly_subset_transform": [[58, 61], ["test_LightlySubset.TestLightlySubset.create_subset", "test_LightlySubset.TestLightlySubset.test_transform_setter"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.create_subset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlyDataset.TestLightlyDataset.test_transform_setter"], ["", "", "def", "test_lightly_subset_transform", "(", "self", ")", ":", "\n", "        ", "subset", ",", "filenames_subset", "=", "self", ".", "create_subset", "(", ")", "\n", "self", ".", "test_transform_setter", "(", "dataset", "=", "subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.test_lightly_subset_dump": [[62, 71], ["test_LightlySubset.TestLightlySubset.create_subset", "tempfile.mkdtemp", "dataset.dump", "lightly.data.dataset.LightlyDataset().get_filenames", "set", "set", "lightly.data.dataset.LightlyDataset", "dataset.get_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.test_LightlySubset.TestLightlySubset.create_subset", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["", "def", "test_lightly_subset_dump", "(", "self", ")", ":", "\n", "        ", "subset", ",", "filenames_subset", "=", "self", ".", "create_subset", "(", ")", "\n", "dataset", "=", "subset", "\n", "\n", "out_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "dataset", ".", "dump", "(", "out_dir", ")", "\n", "\n", "files_output_dir", "=", "LightlyDataset", "(", "input_dir", "=", "out_dir", ")", ".", "get_filenames", "(", ")", "\n", "assert", "set", "(", "files_output_dir", ")", "==", "set", "(", "dataset", ".", "get_filenames", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss.__init__": [[31, 39], ["super().__init__", "warnings.warn", "Warning"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "warnings", ".", "warn", "(", "\n", "Warning", "(", "\n", "\"SymNegCosineSimiliarityLoss will be deprecated in favor of \"", "\n", "+", "\"NegativeCosineSimilarity in the future.\"", "\n", ")", ",", "\n", "PendingDeprecationWarning", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity": [[41, 44], ["torch.nn.functional.cosine_similarity().mean", "torch.nn.functional.cosine_similarity", "y.detach"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "_neg_cosine_simililarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "-", "torch", ".", "nn", ".", "functional", ".", "cosine_similarity", "(", "x", ",", "y", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss.forward": [[45, 75], ["sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity"], ["", "def", "forward", "(", "self", ",", "\n", "out0", ":", "torch", ".", "Tensor", ",", "\n", "out1", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Forward pass through Symmetric Loss.\n\n            Args:\n                out0:\n                    Output projections of the first set of transformed images.\n                    Expects the tuple to be of the form (z0, p0), where z0 is\n                    the output of the backbone and projection mlp, and p0 is the\n                    output of the prediction head.\n                out1:\n                    Output projections of the second set of transformed images.\n                    Expects the tuple to be of the form (z1, p1), where z1 is\n                    the output of the backbone and projection mlp, and p1 is the\n                    output of the prediction head.\n \n            Returns:\n                Contrastive Cross Entropy Loss value.\n\n            Raises:\n                ValueError if shape of output is not multiple of batch_size.\n        \"\"\"", "\n", "z0", ",", "p0", "=", "out0", "\n", "z1", ",", "p1", "=", "out1", "\n", "\n", "loss", "=", "self", ".", "_neg_cosine_simililarity", "(", "p0", ",", "z1", ")", "/", "2", "+", "self", ".", "_neg_cosine_simililarity", "(", "p1", ",", "z0", ")", "/", "2", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.memory_bank.MemoryBankModule.__init__": [[40, 52], ["super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "size", ":", "int", "=", "2", "**", "16", ")", ":", "\n", "\n", "        ", "super", "(", "MemoryBankModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "size", "<", "0", ":", "\n", "            ", "msg", "=", "f'Illegal memory bank size {size}, must be non-negative.'", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "bank", "=", "None", "\n", "self", ".", "bank_ptr", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.memory_bank.MemoryBankModule._init_memory_bank": [[53, 69], ["torch.no_grad", "torch.randn", "torch.nn.functional.normalize", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_init_memory_bank", "(", "self", ",", "dim", ":", "int", ")", ":", "\n", "        ", "\"\"\"Initialize the memory bank if it's empty\n\n        Args:\n            dim:\n                The dimension of the which are stored in the bank.\n\n        \"\"\"", "\n", "# create memory bank", "\n", "# we could use register buffers like in the moco repo", "\n", "# https://github.com/facebookresearch/moco but we don't", "\n", "# want to pollute our checkpoints", "\n", "self", ".", "bank", "=", "torch", ".", "randn", "(", "dim", ",", "self", ".", "size", ")", "\n", "self", ".", "bank", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "bank", ",", "dim", "=", "0", ")", "\n", "self", ".", "bank_ptr", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.memory_bank.MemoryBankModule._dequeue_and_enqueue": [[70, 88], ["torch.no_grad", "int", "batch[].T.detach", "batch.T.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Dequeue the oldest batch and add the latest one\n\n        Args:\n            batch:\n                The latest batch of keys to add to the memory bank.\n\n        \"\"\"", "\n", "batch_size", "=", "batch", ".", "shape", "[", "0", "]", "\n", "ptr", "=", "int", "(", "self", ".", "bank_ptr", ")", "\n", "\n", "if", "ptr", "+", "batch_size", ">=", "self", ".", "size", ":", "\n", "            ", "self", ".", "bank", "[", ":", ",", "ptr", ":", "]", "=", "batch", "[", ":", "self", ".", "size", "-", "ptr", "]", ".", "T", ".", "detach", "(", ")", "\n", "self", ".", "bank_ptr", "[", "0", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "bank", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "batch", ".", "T", ".", "detach", "(", ")", "\n", "self", ".", "bank_ptr", "[", "0", "]", "=", "ptr", "+", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.memory_bank.MemoryBankModule.forward": [[89, 125], ["memory_bank.MemoryBankModule.bank.clone().detach", "memory_bank.MemoryBankModule._init_memory_bank", "memory_bank.MemoryBankModule._dequeue_and_enqueue", "memory_bank.MemoryBankModule.bank.clone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.memory_bank.MemoryBankModule._init_memory_bank", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.memory_bank.MemoryBankModule._dequeue_and_enqueue"], ["", "", "def", "forward", "(", "self", ",", "\n", "output", ":", "torch", ".", "Tensor", ",", "\n", "labels", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "update", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Query memory bank for additional negative samples\n\n        Args:\n            output:\n                The output of the model.\n            labels:\n                Should always be None, will be ignored.\n\n        Returns:\n            The output if the memory bank is of size 0, otherwise the output\n            and the entries from the memory bank.\n\n        \"\"\"", "\n", "\n", "# no memory bank, return the output", "\n", "if", "self", ".", "size", "==", "0", ":", "\n", "            ", "return", "output", ",", "None", "\n", "\n", "", "_", ",", "dim", "=", "output", ".", "shape", "\n", "\n", "# initialize the memory bank if it is not already done", "\n", "if", "self", ".", "bank", "is", "None", ":", "\n", "            ", "self", ".", "_init_memory_bank", "(", "dim", ")", "\n", "\n", "# query and update memory bank", "\n", "", "bank", "=", "self", ".", "bank", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# only update memory bank if we later do backward pass (gradient)", "\n", "if", "update", ":", "\n", "            ", "self", ".", "_dequeue_and_enqueue", "(", "output", ")", "\n", "\n", "", "return", "output", ",", "bank", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.barlow_twins_loss.BarlowTwinsLoss.__init__": [[27, 45], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "lambda_param", ":", "float", "=", "5e-3", ",", "\n", "gather_distributed", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Lambda param configuration with default value like in [0]\n\n        Args:\n            lambda_param: \n                Parameter for importance of redundancy reduction term. \n                Defaults to 5e-3 [0].\n            gather_distributed:\n                If True then the cross-correlation matrices from all gpus are \n                gathered and summed before the loss calculation.\n        \"\"\"", "\n", "super", "(", "BarlowTwinsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_param", "=", "lambda_param", "\n", "self", ".", "gather_distributed", "=", "gather_distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.barlow_twins_loss.BarlowTwinsLoss.forward": [[46, 74], ["z_a.size", "z_a.size", "c_diff.sum", "z_a.std", "z_b.std", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.is_initialized", "torch.is_initialized", "torch.get_world_size", "torch.get_world_size", "z_a.mean", "z_b.mean", "torch.all_reduce", "torch.all_reduce", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.std", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.std", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "forward", "(", "self", ",", "z_a", ":", "torch", ".", "Tensor", ",", "z_b", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "device", "=", "z_a", ".", "device", "\n", "\n", "# normalize repr. along the batch dimension", "\n", "z_a_norm", "=", "(", "z_a", "-", "z_a", ".", "mean", "(", "0", ")", ")", "/", "z_a", ".", "std", "(", "0", ")", "# NxD", "\n", "z_b_norm", "=", "(", "z_b", "-", "z_b", ".", "mean", "(", "0", ")", ")", "/", "z_b", ".", "std", "(", "0", ")", "# NxD", "\n", "\n", "N", "=", "z_a", ".", "size", "(", "0", ")", "\n", "D", "=", "z_a", ".", "size", "(", "1", ")", "\n", "\n", "# cross-correlation matrix", "\n", "c", "=", "torch", ".", "mm", "(", "z_a_norm", ".", "T", ",", "z_b_norm", ")", "/", "N", "# DxD", "\n", "\n", "# sum cross-correlation matrix between multiple gpus", "\n", "if", "self", ".", "gather_distributed", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "                ", "c", "=", "c", "/", "world_size", "\n", "dist", ".", "all_reduce", "(", "c", ")", "\n", "\n", "# loss", "\n", "", "", "c_diff", "=", "(", "c", "-", "torch", ".", "eye", "(", "D", ",", "device", "=", "device", ")", ")", ".", "pow", "(", "2", ")", "# DxD", "\n", "# multiply off-diagonal elems of c_diff by lambda", "\n", "c_diff", "[", "~", "torch", ".", "eye", "(", "D", ",", "dtype", "=", "bool", ")", "]", "*=", "self", ".", "lambda_param", "\n", "loss", "=", "c_diff", ".", "sum", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.hypersphere_loss.HypersphereLoss.__init__": [[49, 67], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "t", "=", "1.", ",", "lam", "=", "1.", ",", "alpha", "=", "2.", ")", ":", "\n", "        ", "\"\"\"Parameters as described in [0]\n\n        Args:\n            t : float\n                Temperature parameter;\n                proportional to the inverse variance of the Gaussians used to measure uniformity\n            lam : float:\n                Weight balancing the alignment and uniformity loss terms\n            alpha : float\n                Power applied to the alignment term of the loss. At its default value of 2,\n                distances between positive samples are penalized in an l-2 sense.\n\n        \"\"\"", "\n", "super", "(", "HypersphereLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.hypersphere_loss.HypersphereLoss.forward": [[68, 88], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.pdist().pow", "torch.pdist().pow", "torch.pdist().pow", "torch.pdist().pow", "torch.pdist().pow.mul().exp().mean().log", "torch.pdist().pow.mul().exp().mean().log", "hypersphere_loss.HypersphereLoss.forward.lalign"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "forward", "(", "self", ",", "z_a", ":", "torch", ".", "Tensor", ",", "z_b", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x (torch.Tensor, [b, d], float)\n            y (torch.Tensor, [b, d], float)\n\n        Returns:\n            Loss (torch.Tensor, [], float)\n\n        \"\"\"", "\n", "x", "=", "F", ".", "normalize", "(", "z_a", ")", "\n", "y", "=", "F", ".", "normalize", "(", "z_b", ")", "\n", "\n", "def", "lalign", "(", "x", ",", "y", ")", ":", "\n", "            ", "return", "(", "x", "-", "y", ")", ".", "norm", "(", "dim", "=", "1", ")", ".", "pow", "(", "self", ".", "alpha", ")", ".", "mean", "(", ")", "\n", "", "def", "lunif", "(", "x", ")", ":", "\n", "            ", "sq_pdist", "=", "torch", ".", "pdist", "(", "x", ",", "p", "=", "2", ")", ".", "pow", "(", "2", ")", "\n", "return", "sq_pdist", ".", "mul", "(", "-", "self", ".", "t", ")", ".", "exp", "(", ")", ".", "mean", "(", ")", ".", "log", "(", ")", "\n", "", "return", "lalign", "(", "x", ",", "y", ")", "+", "self", ".", "lam", "*", "(", "lunif", "(", "x", ")", "+", "lunif", "(", "y", ")", ")", "/", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.ntx_ent_loss.NTXentLoss.__init__": [[54, 67], ["lightly.loss.memory_bank.MemoryBankModule.__init__", "torch.nn.CrossEntropyLoss", "abs", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "temperature", ":", "float", "=", "0.5", ",", "\n", "memory_bank_size", ":", "int", "=", "0", ",", "\n", "gather_distributed", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTXentLoss", ",", "self", ")", ".", "__init__", "(", "size", "=", "memory_bank_size", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "gather_distributed", "=", "gather_distributed", "\n", "self", ".", "cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"mean\"", ")", "\n", "self", ".", "eps", "=", "1e-8", "\n", "\n", "if", "abs", "(", "self", ".", "temperature", ")", "<", "self", ".", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "'Illegal temperature: abs({}) < 1e-8'", "\n", ".", "format", "(", "self", ".", "temperature", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.ntx_ent_loss.NTXentLoss.forward": [[68, 168], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "super().forward", "ntx_ent_loss.NTXentLoss.cross_entropy", "negatives.to.to.to", "torch.einsum().unsqueeze", "torch.einsum", "torch.zeros", "logits_00[].view", "logits_11[].view", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "labels.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "lightly.utils.dist.eye_rank", "torch.eye", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "lightly.utils.dist.world_size", "lightly.utils.dist.gather", "lightly.utils.dist.gather", "lightly.utils.dist.rank"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.eye_rank", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.world_size", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.rank"], ["", "", "def", "forward", "(", "self", ",", "\n", "out0", ":", "torch", ".", "Tensor", ",", "\n", "out1", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Forward pass through Contrastive Cross-Entropy Loss.\n\n        If used with a memory bank, the samples from the memory bank are used\n        as negative examples. Otherwise, within-batch samples are used as \n        negative samples.\n\n        Args:\n            out0:\n                Output projections of the first set of transformed images.\n                Shape: (batch_size, embedding_size)\n            out1:\n                Output projections of the second set of transformed images.\n                Shape: (batch_size, embedding_size)\n\n        Returns:\n            Contrastive Cross Entropy Loss value.\n\n        \"\"\"", "\n", "\n", "device", "=", "out0", ".", "device", "\n", "batch_size", ",", "_", "=", "out0", ".", "shape", "\n", "\n", "# normalize the output to length 1", "\n", "out0", "=", "nn", ".", "functional", ".", "normalize", "(", "out0", ",", "dim", "=", "1", ")", "\n", "out1", "=", "nn", ".", "functional", ".", "normalize", "(", "out1", ",", "dim", "=", "1", ")", "\n", "\n", "# ask memory bank for negative samples and extend it with out1 if ", "\n", "# out1 requires a gradient, otherwise keep the same vectors in the ", "\n", "# memory bank (this allows for keeping the memory bank constant e.g.", "\n", "# for evaluating the loss on the test set)", "\n", "# out1: shape: (batch_size, embedding_size)", "\n", "# negatives: shape: (embedding_size, memory_bank_size)", "\n", "out1", ",", "negatives", "=", "super", "(", "NTXentLoss", ",", "self", ")", ".", "forward", "(", "out1", ",", "update", "=", "out0", ".", "requires_grad", ")", "\n", "\n", "# We use the cosine similarity, which is a dot product (einsum) here,", "\n", "# as all vectors are already normalized to unit length.", "\n", "# Notation in einsum: n = batch_size, c = embedding_size and k = memory_bank_size.", "\n", "\n", "if", "negatives", "is", "not", "None", ":", "\n", "# use negatives from memory bank", "\n", "            ", "negatives", "=", "negatives", ".", "to", "(", "device", ")", "\n", "\n", "# sim_pos is of shape (batch_size, 1) and sim_pos[i] denotes the similarity", "\n", "# of the i-th sample in the batch to its positive pair", "\n", "sim_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "out0", ",", "out1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# sim_neg is of shape (batch_size, memory_bank_size) and sim_neg[i,j] denotes the similarity", "\n", "# of the i-th sample to the j-th negative sample", "\n", "sim_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "out0", ",", "negatives", ")", "\n", "\n", "# set the labels to the first \"class\", i.e. sim_pos,", "\n", "# so that it is maximized in relation to sim_neg", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "sim_pos", ",", "sim_neg", "]", ",", "dim", "=", "1", ")", "/", "self", ".", "temperature", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "else", ":", "\n", "# user other samples from batch as negatives", "\n", "#\u00a0and create diagonal mask that only selects similarities between", "\n", "# views of the same image", "\n", "            ", "if", "self", ".", "gather_distributed", "and", "dist", ".", "world_size", "(", ")", ">", "1", ":", "\n", "# gather hidden representations from other processes", "\n", "                ", "out0_large", "=", "torch", ".", "cat", "(", "dist", ".", "gather", "(", "out0", ")", ",", "0", ")", "\n", "out1_large", "=", "torch", ".", "cat", "(", "dist", ".", "gather", "(", "out1", ")", ",", "0", ")", "\n", "diag_mask", "=", "dist", ".", "eye_rank", "(", "batch_size", ",", "device", "=", "out0", ".", "device", ")", "\n", "", "else", ":", "\n", "# single process", "\n", "                ", "out0_large", "=", "out0", "\n", "out1_large", "=", "out1", "\n", "diag_mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "device", "=", "out0", ".", "device", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "# calculate similiarities", "\n", "# here n = batch_size and m = batch_size * world_size", "\n", "# the resulting vectors have shape (n, m)", "\n", "", "logits_00", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "out0", ",", "out0_large", ")", "/", "self", ".", "temperature", "\n", "logits_01", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "out0", ",", "out1_large", ")", "/", "self", ".", "temperature", "\n", "logits_10", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "out1", ",", "out0_large", ")", "/", "self", ".", "temperature", "\n", "logits_11", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "out1", ",", "out1_large", ")", "/", "self", ".", "temperature", "\n", "\n", "# remove simliarities between same views of the same image", "\n", "logits_00", "=", "logits_00", "[", "~", "diag_mask", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "logits_11", "=", "logits_11", "[", "~", "diag_mask", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# concatenate logits", "\n", "# the logits tensor in the end has shape (2*n, 2*m-1)", "\n", "logits_0100", "=", "torch", ".", "cat", "(", "[", "logits_01", ",", "logits_00", "]", ",", "dim", "=", "1", ")", "\n", "logits_1011", "=", "torch", ".", "cat", "(", "[", "logits_10", ",", "logits_11", "]", ",", "dim", "=", "1", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "logits_0100", ",", "logits_1011", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# create labels", "\n", "labels", "=", "torch", ".", "arange", "(", "batch_size", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "labels", "=", "labels", "+", "dist", ".", "rank", "(", ")", "*", "batch_size", "\n", "labels", "=", "labels", ".", "repeat", "(", "2", ")", "\n", "\n", "", "loss", "=", "self", ".", "cross_entropy", "(", "logits", ",", "labels", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dino_loss.DINOLoss.__init__": [[55, 77], ["torch.Module.__init__", "dino_loss.DINOLoss.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "output_dim", ":", "int", ",", "\n", "warmup_teacher_temp", ":", "float", "=", "0.04", ",", "\n", "teacher_temp", ":", "float", "=", "0.04", ",", "\n", "warmup_teacher_temp_epochs", ":", "int", "=", "30", ",", "\n", "student_temp", ":", "float", "=", "0.1", ",", "\n", "center_momentum", ":", "float", "=", "0.9", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "warmup_teacher_temp_epochs", "=", "warmup_teacher_temp_epochs", "\n", "self", ".", "teacher_temp", "=", "teacher_temp", "\n", "self", ".", "student_temp", "=", "student_temp", "\n", "self", ".", "center_momentum", "=", "center_momentum", "\n", "\n", "self", ".", "register_buffer", "(", "\"center\"", ",", "torch", ".", "zeros", "(", "1", ",", "1", ",", "output_dim", ")", ")", "\n", "# we apply a warm up for the teacher temperature because", "\n", "# a too high temperature makes the training instable at the beginning", "\n", "self", ".", "teacher_temp_schedule", "=", "torch", ".", "linspace", "(", "\n", "start", "=", "warmup_teacher_temp", ",", "\n", "end", "=", "teacher_temp", ",", "\n", "steps", "=", "warmup_teacher_temp_epochs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dino_loss.DINOLoss.forward": [[79, 129], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "loss.fill_diagonal_", "dino_loss.DINOLoss.update_center", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "loss.numel", "loss.diagonal().numel", "loss.sum", "loss.diagonal"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DINOLoss.OriginalDINOLoss.update_center"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "teacher_out", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "student_out", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "epoch", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Cross-entropy between softmax outputs of the teacher and student \n        networks.\n\n        Args:\n            teacher_out:\n                List of view feature tensors from the teacher model. Each\n                tensor is assumed to contain features from one view of the batch\n                and have length batch_size.\n            student_out:\n                List of view feature tensors from the student model. Each tensor \n                is assumed to contain features from one view of the batch and \n                have length batch_size.\n            epoch:\n                The current training epoch.\n\n        Returns:\n            The average cross-entropy loss.\n\n        \"\"\"", "\n", "# get teacher temperature", "\n", "if", "epoch", "<", "self", ".", "warmup_teacher_temp_epochs", ":", "\n", "            ", "teacher_temp", "=", "self", ".", "teacher_temp_schedule", "[", "epoch", "]", "\n", "", "else", ":", "\n", "            ", "teacher_temp", "=", "self", ".", "teacher_temp", "\n", "\n", "", "teacher_out", "=", "torch", ".", "stack", "(", "teacher_out", ")", "\n", "t_out", "=", "F", ".", "softmax", "(", "(", "teacher_out", "-", "self", ".", "center", ")", "/", "teacher_temp", ",", "dim", "=", "-", "1", ")", "\n", "\n", "student_out", "=", "torch", ".", "stack", "(", "student_out", ")", "\n", "s_out", "=", "F", ".", "log_softmax", "(", "student_out", "/", "self", ".", "student_temp", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# calculate feature similarities where:", "\n", "# b = batch_size, t = n_views_teacher, s = n_views_student, d = output_dim", "\n", "#\u00a0the diagonal is ignored as it contains features from the same views", "\n", "loss", "=", "-", "torch", ".", "einsum", "(", "'tbd,sbd->ts'", ",", "t_out", ",", "s_out", ")", "\n", "loss", ".", "fill_diagonal_", "(", "0", ")", "\n", "\n", "#\u00a0number of loss terms, ignoring the diagonal", "\n", "n_terms", "=", "loss", ".", "numel", "(", ")", "-", "loss", ".", "diagonal", "(", ")", ".", "numel", "(", ")", "\n", "batch_size", "=", "teacher_out", ".", "shape", "[", "1", "]", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "(", "n_terms", "*", "batch_size", ")", "\n", "\n", "self", ".", "update_center", "(", "teacher_out", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dino_loss.DINOLoss.update_center": [[130, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_center", "(", "self", ",", "teacher_out", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "\"\"\"Moving average update of the center used for the teacher output.\n\n        Args:\n            teacher_out:\n                Stacked output from the teacher model.\n\n        \"\"\"", "\n", "batch_center", "=", "torch", ".", "mean", "(", "teacher_out", ",", "dim", "=", "(", "0", ",", "1", ")", ",", "keepdim", "=", "True", ")", "\n", "if", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "batch_center", ")", "\n", "batch_center", "=", "batch_center", "/", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "# ema update", "\n", "", "self", ".", "center", "=", "self", ".", "center", "*", "self", ".", "center_momentum", "+", "batch_center", "*", "(", "1", "-", "self", ".", "center_momentum", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.DCLLoss.__init__": [[84, 94], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "temperature", ":", "float", "=", "0.1", ",", "\n", "weight_fn", ":", "Optional", "[", "Callable", "[", "[", "Tensor", ",", "Tensor", "]", ",", "Tensor", "]", "]", "=", "None", ",", "\n", "gather_distributed", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "weight_fn", "=", "weight_fn", "\n", "self", ".", "gather_distributed", "=", "gather_distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.DCLLoss.forward": [[95, 129], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "dcl_loss.DCLLoss._loss", "dcl_loss.DCLLoss._loss", "torch.cat", "torch.cat", "lightly.utils.dist.world_size", "lightly.utils.dist.gather", "lightly.utils.dist.gather"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.DCLLoss._loss", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.DCLLoss._loss", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.world_size", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.gather"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "out0", ":", "Tensor", ",", "\n", "out1", ":", "Tensor", ",", "\n", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"Forward pass of the DCL loss.\n        \n        Args:\n            out0:\n                Output projections of the first set of transformed images.\n                Shape: (batch_size, embedding_size)\n            out1:\n                Output projections of the second set of transformed images.\n                Shape: (batch_size, embedding_size)\n        \n        Returns:\n            Mean loss over the mini-batch.\n        \"\"\"", "\n", "# normalize the output to length 1", "\n", "out0", "=", "nn", ".", "functional", ".", "normalize", "(", "out0", ",", "dim", "=", "1", ")", "\n", "out1", "=", "nn", ".", "functional", ".", "normalize", "(", "out1", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "gather_distributed", "and", "dist", ".", "world_size", "(", ")", ">", "1", ":", "\n", "# gather representations from other processes if necessary", "\n", "            ", "out0_all", "=", "torch", ".", "cat", "(", "dist", ".", "gather", "(", "out0", ")", ",", "0", ")", "\n", "out1_all", "=", "torch", ".", "cat", "(", "dist", ".", "gather", "(", "out1", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "out0_all", "=", "out0", "\n", "out1_all", "=", "out1", "\n", "\n", "# calculate symmetric loss", "\n", "", "loss0", "=", "self", ".", "_loss", "(", "out0", ",", "out1", ",", "out0_all", ",", "out1_all", ")", "\n", "loss1", "=", "self", ".", "_loss", "(", "out1", ",", "out0", ",", "out1_all", ",", "out0_all", ")", "\n", "return", "0.5", "*", "(", "loss0", "+", "loss1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.DCLLoss._loss": [[130, 184], ["sim_00[].view", "sim_01[].view", "torch.logsumexp", "torch.logsumexp", "lightly.utils.dist.eye_rank", "torch.eye", "torch.einsum", "torch.einsum", "lightly.utils.dist.world_size", "dcl_loss.DCLLoss.weight_fn"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.eye_rank", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.world_size"], ["", "def", "_loss", "(", "self", ",", "out0", ",", "out1", ",", "out0_all", ",", "out1_all", ")", ":", "\n", "        ", "\"\"\"Calculates DCL loss for out0 with respect to its positives in out1\n        and the negatives in out1, out0_all, and out1_all.\n        \n        This code implements Equation 6 in [0], including the sum over all images `i`\n        but with `k` fixed at 0.\n        \n        Args:\n            out0:\n                Output projections of the first set of transformed images.\n                Shape: (batch_size, embedding_size)\n            out1:\n                Output projections of the second set of transformed images.\n                Shape: (batch_size, embedding_size)\n            out0_all:\n                Output projections of the first set of transformed images from\n                all distributed processes/gpus. Should be equal to out0 in an \n                undistributed setting.\n                Shape (batch_size * world_size, embedding_size)\n            out1_all:\n                Output projections of the second set of transformed images from\n                all distributed processes/gpus. Should be equal to out1 in an \n                undistributed setting.\n                Shape (batch_size * world_size, embedding_size)\n\n        Returns:\n            Mean loss over the mini-batch.\n        \"\"\"", "\n", "# create diagonal mask that only selects similarities between", "\n", "# representations of the same images", "\n", "batch_size", "=", "out0", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "gather_distributed", "and", "dist", ".", "world_size", "(", ")", ">", "1", ":", "\n", "            ", "diag_mask", "=", "dist", ".", "eye_rank", "(", "batch_size", ",", "device", "=", "out0", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "diag_mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "device", "=", "out0", ".", "device", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "# calculate similarities", "\n", "# here n = batch_size and m = batch_size * world_size.", "\n", "", "sim_00", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "out0", ",", "out0_all", ")", "/", "self", ".", "temperature", "\n", "sim_01", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "out0", ",", "out1_all", ")", "/", "self", ".", "temperature", "\n", "\n", "positive_loss", "=", "-", "sim_01", "[", "diag_mask", "]", "\n", "if", "self", ".", "weight_fn", ":", "\n", "            ", "positive_loss", "=", "positive_loss", "*", "self", ".", "weight_fn", "(", "out0", ",", "out1", ")", "\n", "\n", "# remove simliarities between same views of the same image", "\n", "", "sim_00", "=", "sim_00", "[", "~", "diag_mask", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "#\u00a0remove similarities between different views of the same images", "\n", "# this is the key difference compared to NTXentLoss", "\n", "sim_01", "=", "sim_01", "[", "~", "diag_mask", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "negative_loss_00", "=", "torch", ".", "logsumexp", "(", "sim_00", ",", "dim", "=", "1", ")", "\n", "negative_loss_01", "=", "torch", ".", "logsumexp", "(", "sim_01", ",", "dim", "=", "1", ")", "\n", "return", "(", "positive_loss", "+", "negative_loss_00", "+", "negative_loss_01", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.DCLWLoss.__init__": [[222, 232], ["dcl_loss.DCLLoss.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "temperature", ":", "float", "=", "0.1", ",", "\n", "sigma", ":", "float", "=", "0.5", ",", "\n", "gather_distributed", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "temperature", "=", "temperature", ",", "\n", "weight_fn", "=", "partial", "(", "negative_mises_fisher_weights", ",", "sigma", "=", "sigma", ")", ",", "\n", "gather_distributed", "=", "gather_distributed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.negative_mises_fisher_weights": [[10, 39], ["torch.einsum", "out0.detach", "out1.detach", "torch.nn.functional.softmax"], "function", ["None"], ["def", "negative_mises_fisher_weights", "(", "\n", "out0", ":", "Tensor", ",", "\n", "out1", ":", "Tensor", ",", "\n", "sigma", ":", "float", "=", "0.5", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Negative Mises-Fisher weighting function as presented in Decoupled\n    Contrastive Learning [0].\n\n    The implementation was inspired by [1].\n    \n    - [0] Chun-Hsiao Y. et. al., 2021, Decoupled Contrastive Learning https://arxiv.org/abs/2110.06848\n    - [1] https://github.com/raminnakhli/Decoupled-Contrastive-Learning\n\n    Args:\n        out0:\n            Output projections of the first set of transformed images.\n            Shape: (batch_size, embedding_size)\n        out1:\n            Output projections of the second set of transformed images.\n            Shape: (batch_size, embedding_size)\n        sigma:\n            Similarities are scaled by inverse sigma.\n    Returns:\n        A tensor with shape (batch_size,) where each entry is the weight for one\n        of the input images.\n    \n    \"\"\"", "\n", "similarity", "=", "torch", ".", "einsum", "(", "'nm,nm->n'", ",", "out0", ".", "detach", "(", ")", ",", "out1", ".", "detach", "(", ")", ")", "/", "sigma", "\n", "return", "2", "-", "out0", ".", "shape", "[", "0", "]", "*", "nn", ".", "functional", ".", "softmax", "(", "similarity", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.negative_cosine_similarity.NegativeCosineSimilarity.__init__": [[29, 41], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", "=", "1", ",", "eps", ":", "float", "=", "1e-8", ")", "->", "None", ":", "\n", "        ", "\"\"\"Same parameters as in torch.nn.CosineSimilarity\n\n        Args:\n            dim (int, optional):\n                Dimension where cosine similarity is computed. Default: 1\n            eps (float, optional):\n                Small value to avoid division by zero. Default: 1e-8\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.negative_cosine_similarity.NegativeCosineSimilarity.forward": [[42, 44], ["torch.nn.functional.cosine_similarity().mean", "torch.nn.functional.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "forward", "(", "self", ",", "x0", ":", "torch", ".", "Tensor", ",", "x1", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "-", "cosine_similarity", "(", "x0", ",", "x1", ",", "self", ".", "dim", ",", "self", ".", "eps", ")", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.swav_loss.SwaVLoss.__init__": [[81, 91], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "temperature", ":", "float", "=", "0.1", ",", "\n", "sinkhorn_iterations", ":", "int", "=", "3", ",", "\n", "sinkhorn_epsilon", ":", "float", "=", "0.05", ",", "\n", "sinkhorn_gather_distributed", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "SwaVLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "sinkhorn_iterations", "=", "sinkhorn_iterations", "\n", "self", ".", "sinkhorn_epsilon", "=", "sinkhorn_epsilon", "\n", "self", ".", "sinkhorn_gather_distributed", "=", "sinkhorn_gather_distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.swav_loss.SwaVLoss.subloss": [[93, 108], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "subloss", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ",", "q", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Calculates the cross entropy for the SwaV prediction problem.\n\n        Args:\n            z:\n                Similarity of the features and the SwaV prototypes.\n            q:\n                Codes obtained from Sinkhorn iterations.\n\n        Returns:\n            Cross entropy between predictions z and codes q.\n\n        \"\"\"", "\n", "return", "-", "torch", ".", "mean", "(", "\n", "torch", ".", "sum", "(", "q", "*", "F", ".", "log_softmax", "(", "z", "/", "self", ".", "temperature", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.swav_loss.SwaVLoss.forward": [[111, 157], ["range", "len", "len", "len", "range", "range", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "swav_loss.sinkhorn", "len", "len", "swav_loss.SwaVLoss.subloss", "high_resolution_outputs[].detach", "swav_loss.SwaVLoss.subloss"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.swav_loss.sinkhorn", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.swav_loss.SwaVLoss.subloss", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.swav_loss.SwaVLoss.subloss"], ["", "def", "forward", "(", "self", ",", "\n", "high_resolution_outputs", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "low_resolution_outputs", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "\"\"\"Computes the SwaV loss for a set of high and low resolution outputs.\n\n        Args:\n            high_resolution_outputs:\n                List of similarities of features and SwaV prototypes for the\n                high resolution crops.\n            low_resolution_outputs:\n                List of similarities of features and SwaV prototypes for the\n                low resolution crops.\n\n        Returns:\n            Swapping assignments between views loss (SwaV) as described in [0].\n\n        [0]: SwaV, 2020, https://arxiv.org/abs/2006.09882\n\n        \"\"\"", "\n", "n_crops", "=", "len", "(", "high_resolution_outputs", ")", "+", "len", "(", "low_resolution_outputs", ")", "\n", "\n", "# multi-crop iterations", "\n", "loss", "=", "0.", "\n", "for", "i", "in", "range", "(", "len", "(", "high_resolution_outputs", ")", ")", ":", "\n", "\n", "# compute codes of i-th high resolution crop", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "q", "=", "sinkhorn", "(", "\n", "high_resolution_outputs", "[", "i", "]", ".", "detach", "(", ")", ",", "\n", "iterations", "=", "self", ".", "sinkhorn_iterations", ",", "\n", "epsilon", "=", "self", ".", "sinkhorn_epsilon", ",", "\n", "gather_distributed", "=", "self", ".", "sinkhorn_gather_distributed", ",", "\n", ")", "\n", "\n", "# compute subloss for each pair of crops", "\n", "", "subloss", "=", "0.", "\n", "for", "v", "in", "range", "(", "len", "(", "high_resolution_outputs", ")", ")", ":", "\n", "                ", "if", "v", "!=", "i", ":", "\n", "                    ", "subloss", "+=", "self", ".", "subloss", "(", "high_resolution_outputs", "[", "v", "]", ",", "q", ")", "\n", "\n", "", "", "for", "v", "in", "range", "(", "len", "(", "low_resolution_outputs", ")", ")", ":", "\n", "                ", "subloss", "+=", "self", ".", "subloss", "(", "low_resolution_outputs", "[", "v", "]", ",", "q", ")", "\n", "\n", "", "loss", "+=", "subloss", "/", "(", "n_crops", "-", "1", ")", "\n", "\n", "", "return", "loss", "/", "len", "(", "high_resolution_outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.swav_loss.sinkhorn": [[9, 63], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "torch.exp().t.t", "torch.is_initialized", "torch.get_world_size", "torch.all_reduce", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.all_reduce"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sinkhorn", "(", "\n", "out", ":", "torch", ".", "Tensor", ",", "\n", "iterations", ":", "int", "=", "3", ",", "\n", "epsilon", ":", "float", "=", "0.05", ",", "\n", "gather_distributed", ":", "bool", "=", "False", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Distributed sinkhorn algorithm.\n\n    As outlined in [0] and implemented in [1].\n    \n    [0]: SwaV, 2020, https://arxiv.org/abs/2006.09882\n    [1]: https://github.com/facebookresearch/swav/ \n\n    Args:\n        out:\n            Similarity of the features and the SwaV prototypes.\n        iterations:\n            Number of sinkhorn iterations.\n        epsilon:\n            Temperature parameter.\n        gather_distributed:\n            If True then features from all gpus are gathered to calculate the\n            soft codes Q. \n\n    Returns:\n        Soft codes Q assigning each feature to a prototype.\n    \n    \"\"\"", "\n", "world_size", "=", "1", "\n", "if", "gather_distributed", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "# get the exponential matrix and make it sum to 1", "\n", "", "Q", "=", "torch", ".", "exp", "(", "out", "/", "epsilon", ")", ".", "t", "(", ")", "\n", "sum_Q", "=", "torch", ".", "sum", "(", "Q", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "sum_Q", ")", "\n", "", "Q", "/=", "sum_Q", "\n", "\n", "B", "=", "Q", ".", "shape", "[", "1", "]", "*", "world_size", "\n", "\n", "for", "_", "in", "range", "(", "iterations", ")", ":", "\n", "# normalize rows", "\n", "        ", "sum_of_rows", "=", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "sum_of_rows", ")", "\n", "", "Q", "/=", "sum_of_rows", "\n", "# normalize columns", "\n", "Q", "/=", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "Q", "/=", "B", "\n", "\n", "", "Q", "*=", "B", "\n", "return", "Q", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_MemoryBank.TestNTXentLoss.test_NegativeSize": [[9, 12], ["test_MemoryBank.TestNTXentLoss.assertRaises", "lightly.loss.memory_bank.MemoryBankModule"], "methods", ["None"], ["    ", "def", "test_NegativeSize", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "MemoryBankModule", "(", "size", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_MemoryBank.TestNTXentLoss.test_ForwardEasy": [[13, 38], ["lightly.loss.memory_bank.MemoryBankModule", "range", "torch.randn", "lightly.loss.memory_bank.MemoryBankModule.", "test_MemoryBank.TestNTXentLoss.assertGreater", "test_MemoryBank.TestNTXentLoss.assertGreater", "curr_diff.norm", "next_diff.norm"], "methods", ["None"], ["", "", "def", "test_ForwardEasy", "(", "self", ")", ":", "\n", "        ", "bsz", "=", "3", "\n", "dim", ",", "size", "=", "2", ",", "9", "\n", "n", "=", "33", "*", "bsz", "\n", "memory_bank", "=", "MemoryBankModule", "(", "size", "=", "size", ")", "\n", "\n", "ptr", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ",", "bsz", ")", ":", "\n", "\n", "            ", "output", "=", "torch", ".", "randn", "(", "2", "*", "bsz", ",", "dim", ")", "\n", "output", ".", "requires_grad", "=", "True", "\n", "out0", ",", "out1", "=", "output", "[", ":", "bsz", "]", ",", "output", "[", "bsz", ":", "]", "\n", "\n", "_", ",", "curr_memory_bank", "=", "memory_bank", "(", "out1", ",", "update", "=", "True", ")", "\n", "next_memory_bank", "=", "memory_bank", ".", "bank", "\n", "\n", "curr_diff", "=", "out0", ".", "T", "-", "curr_memory_bank", "[", ":", ",", "ptr", ":", "ptr", "+", "bsz", "]", "\n", "next_diff", "=", "out1", ".", "T", "-", "next_memory_bank", "[", ":", ",", "ptr", ":", "ptr", "+", "bsz", "]", "\n", "\n", "# the current memory bank should not hold the batch yet", "\n", "self", ".", "assertGreater", "(", "curr_diff", ".", "norm", "(", ")", ",", "1e-5", ")", "\n", "# the \"next\" memory bank should hold the batch", "\n", "self", ".", "assertGreater", "(", "1e-5", ",", "next_diff", ".", "norm", "(", ")", ")", "\n", "\n", "ptr", "=", "(", "ptr", "+", "bsz", ")", "%", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_MemoryBank.TestNTXentLoss.test_Forward": [[39, 51], ["lightly.loss.memory_bank.MemoryBankModule", "range", "torch.randn", "lightly.loss.memory_bank.MemoryBankModule."], "methods", ["None"], ["", "", "def", "test_Forward", "(", "self", ")", ":", "\n", "        ", "bsz", "=", "3", "\n", "dim", ",", "size", "=", "2", ",", "10", "\n", "n", "=", "33", "*", "bsz", "\n", "memory_bank", "=", "MemoryBankModule", "(", "size", "=", "size", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ",", "bsz", ")", ":", "\n", "\n", "# see if there are any problems when the bank size", "\n", "# is no multiple of the batch size", "\n", "            ", "output", "=", "torch", ".", "randn", "(", "bsz", ",", "dim", ")", "\n", "_", ",", "_", "=", "memory_bank", "(", "output", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DCLLoss.TestDCL.test_negative_mises_fisher_weights": [[8, 15], ["torch.manual_seed", "torch.rand", "torch.rand", "test_DCLLoss.TestDCL.subTest", "lightly.loss.dcl_loss.negative_mises_fisher_weights"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.dcl_loss.negative_mises_fisher_weights"], ["    ", "def", "test_negative_mises_fisher_weights", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "out0", "=", "torch", ".", "rand", "(", "(", "3", ",", "5", ")", ")", "\n", "out1", "=", "torch", ".", "rand", "(", "(", "3", ",", "5", ")", ")", "\n", "for", "sigma", "in", "[", "0.0000001", ",", "0.5", ",", "10000", "]", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "sigma", "=", "sigma", ")", ":", "\n", "                ", "negative_mises_fisher_weights", "(", "out0", ",", "out1", ",", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DCLLoss.TestDCL.test_dclloss_forward": [[16, 41], ["torch.manual_seed", "torch.rand", "torch.rand", "test_DCLLoss.TestDCL.subTest", "lightly.loss.dcl_loss.DCLLoss", "lightly.loss.dcl_loss.DCLLoss.", "lightly.loss.dcl_loss.DCLLoss.", "test_DCLLoss.TestDCL.assertGreater", "test_DCLLoss.TestDCL.assertAlmostEqual"], "methods", ["None"], ["", "", "", "def", "test_dclloss_forward", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", "=", "seed", ")", "\n", "for", "batch_size", "in", "[", "2", ",", "3", "]", ":", "\n", "            ", "for", "dim", "in", "[", "1", ",", "3", "]", ":", "\n", "                ", "out0", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "dim", ")", ")", "\n", "out1", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "dim", ")", ")", "\n", "for", "temperature", "in", "[", "0.1", ",", "0.5", ",", "1.0", "]", ":", "\n", "                    ", "for", "gather_distributed", "in", "[", "False", ",", "True", "]", ":", "\n", "                        ", "for", "weight_fn", "in", "[", "None", ",", "negative_mises_fisher_weights", "]", ":", "\n", "                            ", "with", "self", ".", "subTest", "(", "\n", "batch_size", "=", "batch_size", ",", "\n", "dim", "=", "dim", ",", "\n", "temperature", "=", "temperature", ",", "\n", "gather_distributed", "=", "gather_distributed", ",", "\n", "weight_fn", "=", "weight_fn", ",", "\n", ")", ":", "\n", "                                ", "criterion", "=", "DCLLoss", "(", "\n", "temperature", "=", "temperature", ",", "\n", "gather_distributed", "=", "gather_distributed", ",", "\n", "weight_fn", "=", "weight_fn", ",", "\n", ")", "\n", "loss0", "=", "criterion", "(", "out0", ",", "out1", ")", "\n", "loss1", "=", "criterion", "(", "out1", ",", "out0", ")", "\n", "self", ".", "assertGreater", "(", "loss0", ",", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "loss0", ",", "loss1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DCLLoss.TestDCL.test_dclloss_backprop": [[42, 54], ["torch.manual_seed", "torch.rand", "torch.rand", "torch.nn.Linear", "torch.nn.Linear.", "torch.nn.Linear.", "lightly.loss.dcl_loss.DCLLoss", "torch.optim.SGD", "lightly.loss.dcl_loss.DCLLoss.", "lightly.loss.dcl_loss.DCLLoss.backward", "torch.optim.SGD.step", "torch.nn.Linear.parameters"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.dist.GatherLayer.backward"], ["", "", "", "", "", "", "", "def", "test_dclloss_backprop", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", "=", "seed", ")", "\n", "out0", "=", "torch", ".", "rand", "(", "3", ",", "5", ")", "\n", "out1", "=", "torch", ".", "rand", "(", "3", ",", "5", ")", "\n", "layer", "=", "torch", ".", "nn", ".", "Linear", "(", "5", ",", "5", ")", "\n", "out0", "=", "layer", "(", "out0", ")", "\n", "out1", "=", "layer", "(", "out1", ")", "\n", "criterion", "=", "DCLLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "layer", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ")", "\n", "loss", "=", "criterion", "(", "out0", ",", "out1", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DCLLoss.TestDCL.test_dclwloss_forward": [[55, 64], ["torch.manual_seed", "torch.rand", "torch.rand", "lightly.loss.dcl_loss.DCLWLoss", "lightly.loss.dcl_loss.DCLWLoss.", "lightly.loss.dcl_loss.DCLWLoss.", "test_DCLLoss.TestDCL.assertGreater", "test_DCLLoss.TestDCL.assertAlmostEqual"], "methods", ["None"], ["", "def", "test_dclwloss_forward", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", "=", "seed", ")", "\n", "out0", "=", "torch", ".", "rand", "(", "3", ",", "5", ")", "\n", "out1", "=", "torch", ".", "rand", "(", "3", ",", "5", ")", "\n", "criterion", "=", "DCLWLoss", "(", ")", "\n", "loss0", "=", "criterion", "(", "out0", ",", "out1", ")", "\n", "loss1", "=", "criterion", "(", "out1", ",", "out0", ")", "\n", "self", ".", "assertGreater", "(", "loss0", ",", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "loss0", ",", "loss1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.test_forward_pass": [[8, 21], ["lightly.loss.SymNegCosineSimilarityLoss", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "lightly.loss.SymNegCosineSimilarityLoss.", "lightly.loss.SymNegCosineSimilarityLoss.", "test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.assertAlmostEqual"], "methods", ["None"], ["    ", "def", "test_forward_pass", "(", "self", ")", ":", "\n", "        ", "loss", "=", "SymNegCosineSimilarityLoss", "(", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "z0", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "p0", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "z1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "p1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "(", "z0", ",", "p0", ")", ",", "(", "z1", ",", "p1", ")", ")", "\n", "l2", "=", "loss", "(", "(", "z1", ",", "p1", ")", ",", "(", "z0", ",", "p0", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.test_forward_pass_cuda": [[23, 39], ["lightly.loss.SymNegCosineSimilarityLoss", "range", "torch.cuda.is_available", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "lightly.loss.SymNegCosineSimilarityLoss.", "lightly.loss.SymNegCosineSimilarityLoss.", "test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.assertAlmostEqual", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "", "def", "test_forward_pass_cuda", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "loss", "=", "SymNegCosineSimilarityLoss", "(", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "z0", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "p0", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "z1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "p1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "(", "z0", ",", "p0", ")", ",", "(", "z1", ",", "p1", ")", ")", "\n", "l2", "=", "loss", "(", "(", "z1", ",", "p1", ")", ",", "(", "z0", ",", "p0", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.test_neg_cosine_simililarity": [[41, 52], ["lightly.loss.SymNegCosineSimilarityLoss", "range", "torch.randn", "torch.randn", "lightly.loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "lightly.loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity"], ["", "", "def", "test_neg_cosine_simililarity", "(", "self", ")", ":", "\n", "        ", "loss", "=", "SymNegCosineSimilarityLoss", "(", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "x", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "y", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", ".", "_neg_cosine_simililarity", "(", "x", ",", "y", ")", "\n", "l2", "=", "loss", ".", "_neg_cosine_simililarity", "(", "y", ",", "x", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.test_neg_cosine_simililarity_cuda": [[53, 67], ["lightly.loss.SymNegCosineSimilarityLoss", "range", "torch.cuda.is_available", "torch.randn().cuda", "torch.randn().cuda", "lightly.loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "lightly.loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "test_SymNegCosineSimilarityLoss.TestSymNegCosineSimilarityLoss.assertAlmostEqual", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.sym_neg_cos_sim_loss.SymNegCosineSimilarityLoss._neg_cosine_simililarity"], ["", "", "def", "test_neg_cosine_simililarity_cuda", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "loss", "=", "SymNegCosineSimilarityLoss", "(", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "x", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "y", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", ".", "_neg_cosine_simililarity", "(", "x", ",", "y", ")", "\n", "l2", "=", "loss", ".", "_neg_cosine_simililarity", "(", "y", ",", "x", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NegativeCosineSimilarity.TestNegativeCosineSimilarity.test_forward_pass": [[8, 18], ["lightly.loss.NegativeCosineSimilarity", "range", "torch.randn", "torch.randn", "lightly.loss.NegativeCosineSimilarity.", "lightly.loss.NegativeCosineSimilarity.", "test_NegativeCosineSimilarity.TestNegativeCosineSimilarity.assertAlmostEqual"], "methods", ["None"], ["    ", "def", "test_forward_pass", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NegativeCosineSimilarity", "(", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "x0", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "x1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "x0", ",", "x1", ")", "\n", "l2", "=", "loss", "(", "x1", ",", "x0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NegativeCosineSimilarity.TestNegativeCosineSimilarity.test_forward_pass_cuda": [[19, 30], ["unittest.skipUnless", "lightly.loss.NegativeCosineSimilarity", "range", "torch.cuda.is_available", "torch.randn().cuda", "torch.randn().cuda", "lightly.loss.NegativeCosineSimilarity.", "lightly.loss.NegativeCosineSimilarity.", "test_NegativeCosineSimilarity.TestNegativeCosineSimilarity.assertAlmostEqual", "torch.randn", "torch.randn"], "methods", ["None"], ["", "", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"Cuda not available\"", ")", "\n", "def", "test_forward_pass_cuda", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NegativeCosineSimilarity", "(", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "x0", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "x1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "x0", ",", "x1", ")", "\n", "l2", "=", "loss", "(", "x1", ",", "x0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_HyperSphere.TestHyperSphereLoss.test_forward_pass": [[9, 22], ["lightly.loss.hypersphere_loss.HypersphereLoss", "range", "torch.randn", "torch.randn", "lightly.loss.hypersphere_loss.HypersphereLoss.", "lightly.loss.hypersphere_loss.HypersphereLoss.", "test_HyperSphere.TestHyperSphereLoss.assertAlmostEqual"], "methods", ["None"], ["    ", "def", "test_forward_pass", "(", "self", ")", ":", "\n", "        ", "loss", "=", "HypersphereLoss", "(", ")", "\n", "# NOTE: skipping bsz==1 case as its not relevant to this loss, and will produce nan-values", "\n", "for", "bsz", "in", "range", "(", "2", ",", "20", ")", ":", "\n", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "batch_1", ",", "batch_2", ")", "\n", "l2", "=", "loss", "(", "batch_2", ",", "batch_1", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SwaVLoss.TestNTXentLoss.test_forward_pass": [[11, 26], ["range", "torch.eye", "range", "range", "lightly.loss.SwaVLoss", "torch.eye", "test_SwaVLoss.TestNTXentLoss.subTest", "lightly.loss.SwaVLoss.", "test_SwaVLoss.TestNTXentLoss.assertGreater", "range", "lightly.loss.SwaVLoss.cpu().numpy", "lightly.loss.SwaVLoss.cpu"], "methods", ["None"], ["    ", "def", "test_forward_pass", "(", "self", ")", ":", "\n", "\n", "        ", "n", "=", "32", "\n", "n_high_res", "=", "2", "\n", "high_res", "=", "[", "torch", ".", "eye", "(", "32", ",", "32", ")", "for", "i", "in", "range", "(", "n_high_res", ")", "]", "\n", "\n", "for", "n_low_res", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "sinkhorn_iterations", "in", "range", "(", "3", ")", ":", "\n", "                ", "criterion", "=", "SwaVLoss", "(", "sinkhorn_iterations", "=", "sinkhorn_iterations", ")", "\n", "low_res", "=", "[", "torch", ".", "eye", "(", "n", ",", "n", ")", "for", "i", "in", "range", "(", "n_low_res", ")", "]", "\n", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "f'n_low_res={n_low_res}, sinkhorn_iterations={sinkhorn_iterations}'", ")", ":", "\n", "                    ", "loss", "=", "criterion", "(", "high_res", ",", "low_res", ")", "\n", "# loss should be almost zero for unit matrix", "\n", "self", ".", "assertGreater", "(", "0.5", ",", "loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SwaVLoss.TestNTXentLoss.test_forward_pass_bsz_1": [[27, 40], ["range", "torch.eye", "range", "range", "lightly.loss.SwaVLoss", "torch.eye", "test_SwaVLoss.TestNTXentLoss.subTest", "lightly.loss.SwaVLoss.", "range"], "methods", ["None"], ["", "", "", "", "def", "test_forward_pass_bsz_1", "(", "self", ")", ":", "\n", "\n", "        ", "n", "=", "32", "\n", "n_high_res", "=", "2", "\n", "high_res", "=", "[", "torch", ".", "eye", "(", "1", ",", "n", ")", "for", "i", "in", "range", "(", "n_high_res", ")", "]", "\n", "\n", "for", "n_low_res", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "sinkhorn_iterations", "in", "range", "(", "3", ")", ":", "\n", "                ", "criterion", "=", "SwaVLoss", "(", "sinkhorn_iterations", "=", "sinkhorn_iterations", ")", "\n", "low_res", "=", "[", "torch", ".", "eye", "(", "1", ",", "n", ")", "for", "i", "in", "range", "(", "n_low_res", ")", "]", "\n", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "f'n_low_res={n_low_res}, sinkhorn_iterations={sinkhorn_iterations}'", ")", ":", "\n", "                    ", "loss", "=", "criterion", "(", "high_res", ",", "low_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SwaVLoss.TestNTXentLoss.test_forward_pass_1d": [[41, 55], ["range", "torch.eye", "range", "range", "lightly.loss.SwaVLoss", "torch.eye", "test_SwaVLoss.TestNTXentLoss.subTest", "lightly.loss.SwaVLoss.", "test_SwaVLoss.TestNTXentLoss.assertGreater", "range", "lightly.loss.SwaVLoss.cpu().numpy", "lightly.loss.SwaVLoss.cpu"], "methods", ["None"], ["", "", "", "", "def", "test_forward_pass_1d", "(", "self", ")", ":", "\n", "        ", "n", "=", "32", "\n", "n_high_res", "=", "2", "\n", "high_res", "=", "[", "torch", ".", "eye", "(", "n", ",", "1", ")", "for", "i", "in", "range", "(", "n_high_res", ")", "]", "\n", "\n", "for", "n_low_res", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "sinkhorn_iterations", "in", "range", "(", "3", ")", ":", "\n", "                ", "criterion", "=", "SwaVLoss", "(", "sinkhorn_iterations", "=", "sinkhorn_iterations", ")", "\n", "low_res", "=", "[", "torch", ".", "eye", "(", "n", ",", "1", ")", "for", "i", "in", "range", "(", "n_low_res", ")", "]", "\n", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "f'n_low_res={n_low_res}, sinkhorn_iterations={sinkhorn_iterations}'", ")", ":", "\n", "                    ", "loss", "=", "criterion", "(", "high_res", ",", "low_res", ")", "\n", "# loss should be almost zero for unit matrix", "\n", "self", ".", "assertGreater", "(", "0.5", ",", "loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_SwaVLoss.TestNTXentLoss.test_forward_pass_cuda": [[56, 71], ["unittest.skipUnless", "range", "torch.cuda.is_available", "torch.eye().cuda", "range", "range", "lightly.loss.SwaVLoss", "torch.eye", "torch.eye().cuda", "test_SwaVLoss.TestNTXentLoss.subTest", "lightly.loss.SwaVLoss.", "test_SwaVLoss.TestNTXentLoss.assertGreater", "range", "lightly.loss.SwaVLoss.cpu().numpy", "torch.eye", "lightly.loss.SwaVLoss.cpu"], "methods", ["None"], ["", "", "", "", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"skip\"", ")", "\n", "def", "test_forward_pass_cuda", "(", "self", ")", ":", "\n", "        ", "n", "=", "32", "\n", "n_high_res", "=", "2", "\n", "high_res", "=", "[", "torch", ".", "eye", "(", "n", ",", "n", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "n_high_res", ")", "]", "\n", "\n", "for", "n_low_res", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "sinkhorn_iterations", "in", "range", "(", "3", ")", ":", "\n", "                ", "criterion", "=", "SwaVLoss", "(", "sinkhorn_iterations", "=", "sinkhorn_iterations", ")", "\n", "low_res", "=", "[", "torch", ".", "eye", "(", "n", ",", "n", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "n_low_res", ")", "]", "\n", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "f'n_low_res={n_low_res}, sinkhorn_iterations={sinkhorn_iterations}'", ")", ":", "\n", "                    ", "loss", "=", "criterion", "(", "high_res", ",", "low_res", ")", "\n", "# loss should be almost zero for unit matrix", "\n", "self", ".", "assertGreater", "(", "0.5", ",", "loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DINOLoss.OriginalDINOLoss.__init__": [[24, 38], ["torch.nn.Module.__init__", "test_DINOLoss.OriginalDINOLoss.register_buffer", "numpy.concatenate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.linspace", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "out_dim", ",", "ncrops", ",", "warmup_teacher_temp", ",", "teacher_temp", ",", "\n", "warmup_teacher_temp_epochs", ",", "nepochs", ",", "student_temp", "=", "0.1", ",", "\n", "center_momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "student_temp", "=", "student_temp", "\n", "self", ".", "center_momentum", "=", "center_momentum", "\n", "self", ".", "ncrops", "=", "ncrops", "\n", "self", ".", "register_buffer", "(", "\"center\"", ",", "torch", ".", "zeros", "(", "1", ",", "out_dim", ")", ")", "\n", "# we apply a warm up for the teacher temperature because", "\n", "# a too high temperature makes the training instable at the beginning", "\n", "self", ".", "teacher_temp_schedule", "=", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "linspace", "(", "warmup_teacher_temp", ",", "\n", "teacher_temp", ",", "warmup_teacher_temp_epochs", ")", ",", "\n", "np", ".", "ones", "(", "nepochs", "-", "warmup_teacher_temp_epochs", ")", "*", "teacher_temp", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DINOLoss.OriginalDINOLoss.forward": [[40, 66], ["student_out.chunk.chunk.chunk", "torch.softmax", "torch.softmax", "teacher_out.detach().chunk.detach().chunk.detach().chunk", "enumerate", "test_DINOLoss.OriginalDINOLoss.update_center", "range", "teacher_out.detach().chunk.detach().chunk.detach", "len", "torch.log_softmax", "torch.log_softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.mean", "torch.sum.mean"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DINOLoss.OriginalDINOLoss.update_center", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "def", "forward", "(", "self", ",", "student_output", ",", "teacher_output", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Cross-entropy between softmax outputs of the teacher and student networks.\n        \"\"\"", "\n", "student_out", "=", "student_output", "/", "self", ".", "student_temp", "\n", "student_out", "=", "student_out", ".", "chunk", "(", "self", ".", "ncrops", ")", "\n", "\n", "# teacher centering and sharpening", "\n", "temp", "=", "self", ".", "teacher_temp_schedule", "[", "epoch", "]", "\n", "teacher_out", "=", "F", ".", "softmax", "(", "(", "teacher_output", "-", "self", ".", "center", ")", "/", "temp", ",", "dim", "=", "-", "1", ")", "\n", "teacher_out", "=", "teacher_out", ".", "detach", "(", ")", ".", "chunk", "(", "2", ")", "\n", "\n", "total_loss", "=", "0", "\n", "n_loss_terms", "=", "0", "\n", "for", "iq", ",", "q", "in", "enumerate", "(", "teacher_out", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "student_out", ")", ")", ":", "\n", "                ", "if", "v", "==", "iq", ":", "\n", "# we skip cases where student and teacher operate on the same view", "\n", "                    ", "continue", "\n", "", "s_out", "=", "F", ".", "log_softmax", "(", "student_out", "[", "v", "]", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "-", "q", "*", "s_out", ",", "dim", "=", "-", "1", ")", "\n", "total_loss", "+=", "loss", ".", "mean", "(", ")", "\n", "n_loss_terms", "+=", "1", "\n", "", "", "total_loss", "/=", "n_loss_terms", "\n", "self", ".", "update_center", "(", "teacher_output", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DINOLoss.OriginalDINOLoss.update_center": [[67, 76], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_center", "(", "self", ",", "teacher_output", ")", ":", "\n", "        ", "\"\"\"\n        Update center used for teacher output.\n        \"\"\"", "\n", "batch_center", "=", "torch", ".", "sum", "(", "teacher_output", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "batch_center", "=", "batch_center", "/", "len", "(", "teacher_output", ")", "\n", "# ema update", "\n", "self", ".", "center", "=", "self", ".", "center", "*", "self", ".", "center_momentum", "+", "batch_center", "*", "(", "1", "-", "self", ".", "center_momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DINOLoss.TestDINOLoss.generate_output": [[79, 95], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "range", "out.append", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range"], "methods", ["None"], ["    ", "def", "generate_output", "(", "self", ",", "batch_size", "=", "2", ",", "n_views", "=", "3", ",", "output_dim", "=", "4", ",", "seed", "=", "0", ")", ":", "\n", "        ", "\"\"\"Returns a list of view representations.\n\n        Example output:\n            [\n                torch.Tensor([img0_view0, img1_view0]),\n                torch.Tensor([img0_view1, img1_view1])\n            ]\n        \n        \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "out", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_views", ")", ":", "\n", "            ", "views", "=", "[", "torch", ".", "rand", "(", "output_dim", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "out", ".", "append", "(", "torch", ".", "stack", "(", "views", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_DINOLoss.TestDINOLoss.test_dino_loss_equal_to_original": [[97, 245], ["test_DINOLoss.TestDINOLoss.test_dino_loss_equal_to_original.test_all"], "methods", ["None"], ["", "def", "test_dino_loss_equal_to_original", "(", "self", ")", ":", "\n", "\n", "        ", "def", "test", "(", "\n", "batch_size", "=", "3", ",", "\n", "n_global", "=", "2", ",", "#\u00a0number of global views", "\n", "n_local", "=", "6", ",", "#\u00a0number of local views", "\n", "output_dim", "=", "4", ",", "\n", "warmup_teacher_temp", "=", "0.04", ",", "\n", "teacher_temp", "=", "0.04", ",", "\n", "warmup_teacher_temp_epochs", "=", "30", ",", "\n", "student_temp", "=", "0.1", ",", "\n", "center_momentum", "=", "0.9", ",", "\n", "epoch", "=", "0", ",", "\n", "n_epochs", "=", "100", ",", "\n", ")", ":", "\n", "            ", "\"\"\"Runs test with the given input parameters.\"\"\"", "\n", "with", "self", ".", "subTest", "(", "\n", "f'batch_size={batch_size}, n_global={n_global}, '", "\n", "f'n_local={n_local}, output_dim={output_dim}, '", "\n", "f'warmup_teacher_temp={warmup_teacher_temp}, '", "\n", "f'teacher_temp={teacher_temp}, '", "\n", "f'warmup_teacher_temp_epochs={warmup_teacher_temp_epochs}, '", "\n", "f'student_temp={student_temp}, '", "\n", "f'center_momentum={center_momentum}, epoch={epoch}, '", "\n", "f'n_epochs={n_epochs}'", "\n", ")", ":", "\n", "                ", "loss_fn", "=", "DINOLoss", "(", "\n", "output_dim", "=", "output_dim", ",", "\n", "warmup_teacher_temp", "=", "warmup_teacher_temp", ",", "\n", "teacher_temp", "=", "teacher_temp", ",", "\n", "warmup_teacher_temp_epochs", "=", "warmup_teacher_temp_epochs", ",", "\n", "student_temp", "=", "student_temp", ",", "\n", "center_momentum", "=", "center_momentum", ",", "\n", ")", "\n", "\n", "orig_loss_fn", "=", "OriginalDINOLoss", "(", "\n", "out_dim", "=", "output_dim", ",", "\n", "ncrops", "=", "n_global", "+", "n_local", ",", "\n", "teacher_temp", "=", "teacher_temp", ",", "\n", "warmup_teacher_temp", "=", "warmup_teacher_temp", ",", "\n", "warmup_teacher_temp_epochs", "=", "warmup_teacher_temp_epochs", ",", "\n", "nepochs", "=", "n_epochs", ",", "\n", "student_temp", "=", "student_temp", ",", "\n", "center_momentum", "=", "center_momentum", ",", "\n", ")", "\n", "\n", "# Create dummy single layer network. We use this to verify", "\n", "#\u00a0that the gradient backprop works properly.", "\n", "teacher", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", ")", "\n", "deactivate_requires_grad", "(", "teacher", ")", "\n", "student", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", ")", "\n", "orig_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "orig_student", "=", "copy", ".", "deepcopy", "(", "student", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "student", ".", "parameters", "(", ")", ",", "lr", "=", "1", ")", "\n", "orig_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "orig_student", ".", "parameters", "(", ")", ",", "lr", "=", "1", ")", "\n", "\n", "#\u00a0Create fake output", "\n", "teacher_out", "=", "self", ".", "generate_output", "(", "\n", "batch_size", "=", "batch_size", ",", "\n", "n_views", "=", "n_global", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "seed", "=", "0", ",", "\n", ")", "\n", "student_out", "=", "self", ".", "generate_output", "(", "\n", "batch_size", "=", "batch_size", ",", "\n", "n_views", "=", "n_global", "+", "n_local", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "seed", "=", "1", ",", "\n", ")", "\n", "\n", "#\u00a0Clone input tensors", "\n", "orig_teacher_out", "=", "torch", ".", "cat", "(", "teacher_out", ")", "\n", "orig_teacher_out", "=", "orig_teacher_out", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "orig_student_out", "=", "torch", ".", "cat", "(", "student_out", ")", "\n", "orig_student_out", "=", "orig_student_out", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "#\u00a0Forward pass", "\n", "teacher_out", "=", "[", "teacher", "(", "view", ")", "for", "view", "in", "teacher_out", "]", "\n", "student_out", "=", "[", "student", "(", "view", ")", "for", "view", "in", "student_out", "]", "\n", "orig_teacher_out", "=", "orig_teacher", "(", "orig_teacher_out", ")", "\n", "orig_student_out", "=", "orig_student", "(", "orig_student_out", ")", "\n", "\n", "# Calculate loss", "\n", "loss", "=", "loss_fn", "(", "\n", "teacher_out", "=", "teacher_out", ",", "\n", "student_out", "=", "student_out", ",", "\n", "epoch", "=", "epoch", ",", "\n", ")", "\n", "orig_loss", "=", "orig_loss_fn", "(", "\n", "student_output", "=", "orig_student_out", ",", "\n", "teacher_output", "=", "orig_teacher_out", ",", "\n", "epoch", "=", "epoch", ",", "\n", ")", "\n", "\n", "# Backward pass and optimizer step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "orig_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "orig_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "orig_optimizer", ".", "step", "(", ")", "\n", "\n", "# Loss and loss center should be equal", "\n", "center", "=", "loss_fn", ".", "center", ".", "squeeze", "(", ")", "\n", "orig_center", "=", "orig_loss_fn", ".", "center", ".", "squeeze", "(", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "center", ",", "orig_center", ")", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "loss", ",", "orig_loss", ")", ")", "\n", "\n", "#\u00a0Parameters of network should be equal after backward pass", "\n", "for", "param", ",", "orig_param", "in", "zip", "(", "student", ".", "parameters", "(", ")", ",", "orig_student", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "param", ",", "orig_param", ")", ")", "\n", "", "for", "param", ",", "orig_param", "in", "zip", "(", "teacher", ".", "parameters", "(", ")", ",", "orig_teacher", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "param", ",", "orig_param", ")", ")", "\n", "\n", "\n", "", "", "", "def", "test_all", "(", "**", "kwargs", ")", ":", "\n", "            ", "\"\"\"Tests all combinations of the input parameters\"\"\"", "\n", "parameters", "=", "[", "]", "\n", "for", "name", ",", "values", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "parameters", ".", "append", "(", "[", "(", "name", ",", "value", ")", "for", "value", "in", "values", "]", ")", "\n", "#\u00a0parameters = [", "\n", "#   [(param1, val11), (param1, val12), ..],", "\n", "#   [(param2, val21), (param2, val22), ..],", "\n", "#   ...", "\n", "# ]", "\n", "\n", "", "for", "params", "in", "itertools", ".", "product", "(", "*", "parameters", ")", ":", "\n", "# params = [(param1, value1), (param2, value2), ...]", "\n", "                ", "test", "(", "**", "dict", "(", "params", ")", ")", "\n", "\n", "#\u00a0test input sizes", "\n", "", "", "test_all", "(", "\n", "batch_size", "=", "np", ".", "arange", "(", "1", ",", "4", ")", ",", "\n", "n_local", "=", "np", ".", "arange", "(", "0", ",", "4", ")", ",", "\n", "output_dim", "=", "np", ".", "arange", "(", "1", ",", "4", ")", ",", "\n", ")", "\n", "#\u00a0test teacher temp warmup", "\n", "test_all", "(", "\n", "warmup_teacher_temp", "=", "[", "0.01", ",", "0.04", ",", "0.07", "]", ",", "\n", "teacher_temp", "=", "[", "0.01", ",", "0.04", ",", "0.07", "]", ",", "\n", "warmup_teacher_temp_epochs", "=", "[", "0", ",", "1", ",", "10", "]", ",", "\n", "epoch", "=", "[", "0", ",", "1", ",", "10", ",", "20", "]", ",", "\n", ")", "\n", "# test other params", "\n", "test_all", "(", "\n", "student_temp", "=", "[", "0.05", ",", "0.1", ",", "0.2", "]", ",", "\n", "center_momentum", "=", "[", "0.5", ",", "0.9", ",", "0.95", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_with_values": [[11, 33], ["numpy.random.normal", "numpy.random.normal", "test_NTXentLoss.TestNTXentLoss.subTest", "torch.FloatTensor", "torch.FloatTensor", "lightly.loss.NTXentLoss", "float", "float", "test_NTXentLoss.TestNTXentLoss.calc_ntxent_loss_manual", "test_NTXentLoss.TestNTXentLoss.calc_ntxent_loss_manual", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual", "lightly.loss.NTXentLoss.", "lightly.loss.NTXentLoss."], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.calc_ntxent_loss_manual", "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.calc_ntxent_loss_manual"], ["    ", "def", "test_with_values", "(", "self", ")", ":", "\n", "        ", "for", "n_samples", "in", "[", "1", ",", "2", ",", "4", "]", ":", "\n", "            ", "for", "dimension", "in", "[", "1", ",", "2", ",", "16", ",", "64", "]", ":", "\n", "                ", "for", "temperature", "in", "[", "0.1", ",", "1", ",", "10", "]", ":", "\n", "                    ", "for", "gather_distributed", "in", "[", "False", ",", "True", "]", ":", "\n", "                        ", "out0", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "n_samples", ",", "dimension", ")", ")", "\n", "out1", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "n_samples", ",", "dimension", ")", ")", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "(", "\n", "f\"out0.shape={out0.shape}, temperature={temperature}, \"", "\n", "f\"gather_distributed={gather_distributed}\"", "\n", ")", ")", ":", "\n", "                            ", "out0", "=", "torch", ".", "FloatTensor", "(", "out0", ")", "\n", "out1", "=", "torch", ".", "FloatTensor", "(", "out1", ")", "\n", "\n", "loss_function", "=", "NTXentLoss", "(", "temperature", "=", "temperature", ",", "gather_distributed", "=", "gather_distributed", ")", "\n", "l1", "=", "float", "(", "loss_function", "(", "out0", ",", "out1", ")", ")", "\n", "l2", "=", "float", "(", "loss_function", "(", "out1", ",", "out0", ")", ")", "\n", "l1_manual", "=", "self", ".", "calc_ntxent_loss_manual", "(", "out0", ",", "out1", ",", "temperature", "=", "temperature", ")", "\n", "l2_manual", "=", "self", ".", "calc_ntxent_loss_manual", "(", "out0", ",", "out1", ",", "temperature", "=", "temperature", ")", "\n", "self", ".", "assertAlmostEqual", "(", "l1", ",", "l2", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "l1", ",", "l1_manual", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "l2", ",", "l2_manual", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.calc_ntxent_loss_manual": [[34, 68], ["numpy.array", "numpy.array", "len", "numpy.concatenate", "numpy.zeros", "range", "numpy.exp", "numpy.zeros_like", "range", "range", "range", "range", "range", "len", "len", "numpy.inner", "numpy.log", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "", "", "", "", "", "def", "calc_ntxent_loss_manual", "(", "self", ",", "out0", ",", "out1", ",", "temperature", ":", "float", ")", "->", "float", ":", "\n", "# using the pseudocode directly from https://arxiv.org/pdf/2002.05709.pdf , Algorithm 1", "\n", "\n", "        ", "out0", "=", "np", ".", "array", "(", "out0", ")", "\n", "out1", "=", "np", ".", "array", "(", "out1", ")", "\n", "\n", "N", "=", "len", "(", "out0", ")", "\n", "z", "=", "np", ".", "concatenate", "(", "[", "out0", ",", "out1", "]", ",", "axis", "=", "0", ")", "\n", "# different to the notation in the paper, in our case z[k] and z[k+N]", "\n", "# are different augmentations of the same image", "\n", "\n", "s_i_j", "=", "np", ".", "zeros", "(", "(", "2", "*", "len", "(", "out0", ")", ",", "2", "*", "len", "(", "out1", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "2", "*", "N", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", "*", "N", ")", ":", "\n", "                ", "sim", "=", "np", ".", "inner", "(", "z", "[", "i", "]", ",", "z", "[", "j", "]", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "z", "[", "i", "]", ")", "*", "np", ".", "linalg", ".", "norm", "(", "z", "[", "j", "]", ")", ")", "\n", "s_i_j", "[", "i", ",", "j", "]", "=", "sim", "\n", "\n", "", "", "exponential_i_j", "=", "np", ".", "exp", "(", "s_i_j", "/", "temperature", ")", "\n", "\n", "l_i_j", "=", "np", ".", "zeros_like", "(", "exponential_i_j", ")", "\n", "for", "i", "in", "range", "(", "2", "*", "N", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", "*", "N", ")", ":", "\n", "                ", "nominator", "=", "exponential_i_j", "[", "i", ",", "j", "]", "\n", "denominator", "=", "0", "\n", "for", "k", "in", "range", "(", "2", "*", "N", ")", ":", "\n", "                    ", "if", "k", "!=", "i", ":", "\n", "                        ", "denominator", "+=", "exponential_i_j", "[", "i", ",", "k", "]", "\n", "", "", "l_i_j", "[", "i", ",", "j", "]", "=", "-", "1", "*", "np", ".", "log", "(", "nominator", "/", "denominator", ")", "\n", "\n", "", "", "loss", "=", "0", "\n", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "            ", "loss", "+=", "l_i_j", "[", "k", ",", "k", "+", "N", "]", "+", "l_i_j", "[", "k", "+", "N", ",", "k", "]", "\n", "", "loss", "/=", "(", "2", "*", "N", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_with_correlated_embedding": [[69, 96], ["numpy.random.random", "numpy.random.random", "numpy.concatenate", "numpy.concatenate", "torch.FloatTensor", "torch.FloatTensor", "test_NTXentLoss.TestNTXentLoss.subTest", "lightly.loss.NTXentLoss", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual", "range", "float", "float", "numpy.log", "lightly.loss.NTXentLoss.", "numpy.log", "int", "lightly.loss.NTXentLoss."], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "test_with_correlated_embedding", "(", "self", ")", ":", "\n", "        ", "for", "n_samples", "in", "[", "1", ",", "2", ",", "8", ",", "16", "]", ":", "\n", "            ", "for", "memory_bank_size", "in", "[", "0", ",", "1", ",", "2", ",", "8", ",", "15", ",", "16", ",", "17", "]", ":", "\n", "                ", "for", "temperature", "in", "[", "0.1", ",", "1", ",", "7", "]", ":", "\n", "                    ", "for", "gather_distributed", "in", "[", "False", ",", "True", "]", ":", "\n", "                        ", "out0", "=", "np", ".", "random", ".", "random", "(", "(", "n_samples", ",", "1", ")", ")", "\n", "out1", "=", "np", ".", "random", ".", "random", "(", "(", "n_samples", ",", "1", ")", ")", "\n", "out0", "=", "np", ".", "concatenate", "(", "[", "out0", ",", "2", "*", "out0", "]", ",", "axis", "=", "1", ")", "\n", "out1", "=", "np", ".", "concatenate", "(", "[", "out1", ",", "2", "*", "out1", "]", ",", "axis", "=", "1", ")", "\n", "out0", "=", "torch", ".", "FloatTensor", "(", "out0", ")", "\n", "out1", "=", "torch", ".", "FloatTensor", "(", "out1", ")", "\n", "out0", ".", "requires_grad", "=", "True", "\n", "\n", "with", "self", ".", "subTest", "(", "msg", "=", "(", "\n", "f\"n_samples: {n_samples}, memory_bank_size: {memory_bank_size},\"", "\n", "f\"temperature: {temperature}, gather_distributed: {gather_distributed}\"", "\n", ")", ")", ":", "\n", "                            ", "loss_function", "=", "NTXentLoss", "(", "temperature", "=", "temperature", ",", "memory_bank_size", "=", "memory_bank_size", ")", "\n", "if", "memory_bank_size", ">", "0", ":", "\n", "                                ", "for", "i", "in", "range", "(", "int", "(", "memory_bank_size", "/", "n_samples", ")", "+", "2", ")", ":", "\n", "# fill the memory bank over multiple rounds", "\n", "                                    ", "loss", "=", "float", "(", "loss_function", "(", "out0", ",", "out1", ")", ")", "\n", "", "expected_loss", "=", "-", "1", "*", "np", ".", "log", "(", "1", "/", "(", "memory_bank_size", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "                                ", "loss", "=", "float", "(", "loss_function", "(", "out0", ",", "out1", ")", ")", "\n", "expected_loss", "=", "-", "1", "*", "np", ".", "log", "(", "1", "/", "(", "2", "*", "n_samples", "-", "1", ")", ")", "\n", "", "self", ".", "assertAlmostEqual", "(", "loss", ",", "expected_loss", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_forward_pass": [[97, 107], ["lightly.loss.NTXentLoss", "range", "torch.randn", "torch.randn", "lightly.loss.NTXentLoss.", "lightly.loss.NTXentLoss.", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual"], "methods", ["None"], ["", "", "", "", "", "", "def", "test_forward_pass", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NTXentLoss", "(", "memory_bank_size", "=", "0", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "batch_1", ",", "batch_2", ")", "\n", "l2", "=", "loss", "(", "batch_2", ",", "batch_1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_forward_pass_1d": [[108, 118], ["lightly.loss.NTXentLoss", "range", "torch.randn", "torch.randn", "lightly.loss.NTXentLoss.", "lightly.loss.NTXentLoss.", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual"], "methods", ["None"], ["", "", "def", "test_forward_pass_1d", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NTXentLoss", "(", "memory_bank_size", "=", "0", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "1", ")", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "1", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "batch_1", ",", "batch_2", ")", "\n", "l2", "=", "loss", "(", "batch_2", ",", "batch_1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_forward_pass_neg_temp": [[119, 129], ["lightly.loss.NTXentLoss", "range", "torch.randn", "torch.randn", "lightly.loss.NTXentLoss.", "lightly.loss.NTXentLoss.", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual"], "methods", ["None"], ["", "", "def", "test_forward_pass_neg_temp", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NTXentLoss", "(", "temperature", "=", "-", "1.", ",", "memory_bank_size", "=", "0", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "batch_1", ",", "batch_2", ")", "\n", "l2", "=", "loss", "(", "batch_2", ",", "batch_1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_forward_pass_memory_bank": [[130, 136], ["lightly.loss.NTXentLoss", "range", "torch.randn", "torch.randn", "lightly.loss.NTXentLoss."], "methods", ["None"], ["", "", "def", "test_forward_pass_memory_bank", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NTXentLoss", "(", "memory_bank_size", "=", "64", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "l", "=", "loss", "(", "batch_1", ",", "batch_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_forward_pass_memory_bank_cuda": [[137, 144], ["unittest.skipUnless", "lightly.loss.NTXentLoss", "range", "torch.cuda.is_available", "torch.randn().cuda", "torch.randn().cuda", "lightly.loss.NTXentLoss.", "torch.randn", "torch.randn"], "methods", ["None"], ["", "", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'No cuda'", ")", "\n", "def", "test_forward_pass_memory_bank_cuda", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NTXentLoss", "(", "memory_bank_size", "=", "64", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "l", "=", "loss", "(", "batch_1", ",", "batch_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_NTXentLoss.TestNTXentLoss.test_forward_pass_cuda": [[145, 156], ["unittest.skipUnless", "lightly.loss.NTXentLoss", "range", "torch.cuda.is_available", "torch.randn().cuda", "torch.randn().cuda", "lightly.loss.NTXentLoss.", "lightly.loss.NTXentLoss.", "test_NTXentLoss.TestNTXentLoss.assertAlmostEqual", "torch.randn", "torch.randn"], "methods", ["None"], ["", "", "@", "unittest", ".", "skipUnless", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'No cuda'", ")", "\n", "def", "test_forward_pass_cuda", "(", "self", ")", ":", "\n", "        ", "loss", "=", "NTXentLoss", "(", "memory_bank_size", "=", "0", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "loss", "(", "batch_1", ",", "batch_2", ")", "\n", "l2", "=", "loss", "(", "batch_2", ",", "batch_1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_CO2Regularizer.TestCO2Regularizer.test_forward_pass_no_memory_bank": [[8, 19], ["lightly.loss.regularizer.CO2Regularizer", "range", "torch.randn", "torch.randn", "lightly.loss.regularizer.CO2Regularizer.", "lightly.loss.regularizer.CO2Regularizer.", "test_CO2Regularizer.TestCO2Regularizer.assertAlmostEqual"], "methods", ["None"], ["    ", "def", "test_forward_pass_no_memory_bank", "(", "self", ")", ":", "\n", "        ", "reg", "=", "CO2Regularizer", "(", "memory_bank_size", "=", "0", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "reg", "(", "batch_1", ",", "batch_2", ")", "\n", "l2", "=", "reg", "(", "batch_2", ",", "batch_1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_CO2Regularizer.TestCO2Regularizer.test_forward_pass_memory_bank": [[20, 29], ["lightly.loss.regularizer.CO2Regularizer", "range", "torch.randn", "torch.randn", "lightly.loss.regularizer.CO2Regularizer.", "test_CO2Regularizer.TestCO2Regularizer.assertGreater", "lightly.loss.regularizer.CO2Regularizer.item"], "methods", ["None"], ["", "", "def", "test_forward_pass_memory_bank", "(", "self", ")", ":", "\n", "        ", "reg", "=", "CO2Regularizer", "(", "memory_bank_size", "=", "4096", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", "\n", "\n", "l1", "=", "reg", "(", "batch_1", ",", "batch_2", ")", "\n", "self", ".", "assertGreater", "(", "l1", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_CO2Regularizer.TestCO2Regularizer.test_forward_pass_cuda_no_memory_bank": [[30, 44], ["lightly.loss.regularizer.CO2Regularizer", "range", "torch.cuda.is_available", "torch.randn().cuda", "torch.randn().cuda", "lightly.loss.regularizer.CO2Regularizer.", "lightly.loss.regularizer.CO2Regularizer.", "test_CO2Regularizer.TestCO2Regularizer.assertAlmostEqual", "torch.randn", "torch.randn"], "methods", ["None"], ["", "", "def", "test_forward_pass_cuda_no_memory_bank", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "reg", "=", "CO2Regularizer", "(", "memory_bank_size", "=", "0", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "reg", "(", "batch_1", ",", "batch_2", ")", "\n", "l2", "=", "reg", "(", "batch_2", ",", "batch_1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "(", "l1", "-", "l2", ")", ".", "pow", "(", "2", ")", ".", "item", "(", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.loss.test_CO2Regularizer.TestCO2Regularizer.test_forward_pass_cuda_memory_bank": [[46, 59], ["lightly.loss.regularizer.CO2Regularizer", "range", "torch.cuda.is_available", "torch.randn().cuda", "torch.randn().cuda", "lightly.loss.regularizer.CO2Regularizer.", "test_CO2Regularizer.TestCO2Regularizer.assertGreater", "lightly.loss.regularizer.CO2Regularizer.cpu().item", "torch.randn", "torch.randn", "lightly.loss.regularizer.CO2Regularizer.cpu"], "methods", ["None"], ["", "", "def", "test_forward_pass_cuda_memory_bank", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "reg", "=", "CO2Regularizer", "(", "memory_bank_size", "=", "4096", ")", "\n", "for", "bsz", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "\n", "            ", "batch_1", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "batch_2", "=", "torch", ".", "randn", "(", "(", "bsz", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# symmetry", "\n", "l1", "=", "reg", "(", "batch_1", ",", "batch_2", ")", "\n", "self", ".", "assertGreater", "(", "l1", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.regularizer.co2.CO2Regularizer.__init__": [[43, 64], ["lightly.loss.memory_bank.MemoryBankModule.__init__", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "\n", "alpha", ":", "float", "=", "1", ",", "\n", "t_consistency", ":", "float", "=", "0.05", ",", "\n", "memory_bank_size", ":", "int", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", "CO2Regularizer", ",", "self", ")", ".", "__init__", "(", "size", "=", "memory_bank_size", ")", "\n", "# try-catch the KLDivLoss construction for backwards compatability", "\n", "self", ".", "log_target", "=", "True", "\n", "try", ":", "\n", "            ", "self", ".", "kl_div", "=", "torch", ".", "nn", ".", "KLDivLoss", "(", "\n", "reduction", "=", "'batchmean'", ",", "\n", "log_target", "=", "True", "\n", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "self", ".", "log_target", "=", "False", "\n", "self", ".", "kl_div", "=", "torch", ".", "nn", ".", "KLDivLoss", "(", "\n", "reduction", "=", "'batchmean'", "\n", ")", "\n", "\n", "", "self", ".", "t_consistency", "=", "t_consistency", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.regularizer.co2.CO2Regularizer._get_pseudo_labels": [[65, 114], ["torch.cat", "torch.nn.functional.log_softmax", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum.masked_select().view", "negatives.to.to.to", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "out1.t", "torch.einsum.masked_select", "torch.einsum", "negatives.to.to.clone().detach", "torch.eye", "negatives.to.to.clone"], "methods", ["None"], ["", "def", "_get_pseudo_labels", "(", "self", ",", "\n", "out0", ":", "torch", ".", "Tensor", ",", "\n", "out1", ":", "torch", ".", "Tensor", ",", "\n", "negatives", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"Computes the soft pseudo labels across negative samples.\n\n        Args:\n            out0:\n                Output projections of the first set of transformed images (query).\n                Shape: bsz x n_ftrs\n            out1:\n                Output projections of the second set of transformed images (positive sample).\n                Shape: bsz x n_ftrs\n            negatives:\n                Negative samples to compare against. If this is None, the second\n                batch of images will be used as negative samples.\n                Shape: memory_bank_size x n_ftrs\n\n        Returns:\n            Log probability that a positive samples will classify each negative\n            sample as the positive sample.\n            Shape: bsz x (bsz - 1) or bsz x memory_bank_size\n\n        \"\"\"", "\n", "batch_size", ",", "_", "=", "out0", ".", "shape", "\n", "if", "negatives", "is", "None", ":", "\n", "# use second batch as negative samples", "\n", "# l_pos has shape bsz x 1 and l_neg has shape bsz x bsz", "\n", "            ", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "out0", ",", "out1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "out0", ",", "out1", ".", "t", "(", ")", "]", ")", "\n", "# remove elements on the diagonal", "\n", "# l_neg has shape bsz x (bsz - 1)", "\n", "l_neg", "=", "l_neg", ".", "masked_select", "(", "\n", "~", "torch", ".", "eye", "(", "batch_size", ",", "dtype", "=", "bool", ",", "device", "=", "l_neg", ".", "device", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "batch_size", "-", "1", ")", "\n", "", "else", ":", "\n", "# use memory bank as negative samples", "\n", "# l_pos has shape bsz x 1 and l_neg has shape bsz x memory_bank_size", "\n", "            ", "negatives", "=", "negatives", ".", "to", "(", "out0", ".", "device", ")", "\n", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "out0", ",", "out1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "out0", ",", "negatives", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# concatenate such that positive samples are at index 0", "\n", "", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "# divide by temperature", "\n", "logits", "=", "logits", "/", "self", ".", "t_consistency", "\n", "\n", "# the input to kl_div is expected to be log(p) ", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.regularizer.co2.CO2Regularizer.forward": [[116, 156], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "super().forward", "co2.CO2Regularizer._get_pseudo_labels", "co2.CO2Regularizer._get_pseudo_labels", "co2.CO2Regularizer.kl_div", "co2.CO2Regularizer.kl_div", "co2.CO2Regularizer.kl_div", "co2.CO2Regularizer.kl_div", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.regularizer.co2.CO2Regularizer._get_pseudo_labels", "home.repos.pwc.inspect_result.lightly-ai_lightly.regularizer.co2.CO2Regularizer._get_pseudo_labels"], ["", "def", "forward", "(", "self", ",", "\n", "out0", ":", "torch", ".", "Tensor", ",", "\n", "out1", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Computes the CO2 regularization term for two model outputs.\n\n        Args:\n            out0:\n                Output projections of the first set of transformed images.\n            out1:\n                Output projections of the second set of transformed images.\n\n        Returns:\n            The regularization term multiplied by the weight factor alpha.\n\n        \"\"\"", "\n", "\n", "# normalize the output to length 1", "\n", "out0", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "out0", ",", "dim", "=", "1", ")", "\n", "out1", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "out1", ",", "dim", "=", "1", ")", "\n", "\n", "# ask memory bank for negative samples and extend it with out1 if ", "\n", "# out1 requires a gradient, otherwise keep the same vectors in the ", "\n", "# memory bank (this allows for keeping the memory bank constant e.g.", "\n", "# for evaluating the loss on the test set)", "\n", "# if the memory_bank size is 0, negatives will be None", "\n", "out1", ",", "negatives", "=", "super", "(", "CO2Regularizer", ",", "self", ")", ".", "forward", "(", "out1", ",", "update", "=", "True", ")", "\n", "\n", "# get log probabilities", "\n", "p", "=", "self", ".", "_get_pseudo_labels", "(", "out0", ",", "out1", ",", "negatives", ")", "\n", "q", "=", "self", ".", "_get_pseudo_labels", "(", "out1", ",", "out0", ",", "negatives", ")", "\n", "\n", "# calculate symmetrized kullback leibler divergence", "\n", "if", "self", ".", "log_target", ":", "\n", "            ", "div", "=", "self", ".", "kl_div", "(", "p", ",", "q", ")", "+", "self", ".", "kl_div", "(", "q", ",", "p", ")", "\n", "", "else", ":", "\n", "# can't use log_target because of early torch version", "\n", "            ", "div", "=", "self", ".", "kl_div", "(", "p", ",", "torch", ".", "exp", "(", "q", ")", ")", "+", "self", ".", "kl_div", "(", "q", ",", "torch", ".", "exp", "(", "p", ")", ")", "\n", "\n", "", "return", "self", ".", "alpha", "*", "0.5", "*", "div", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.simclr.SimCLR.__init__": [[16, 20], ["torch.nn.Module.__init__", "lightly.models.modules.SimCLRProjectionHead"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.simclr.SimCLR.forward": [[21, 25], ["simclr.SimCLR.backbone().flatten", "simclr.SimCLR.projection_head", "simclr.SimCLR.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.simsiam.SimSiam.__init__": [[17, 22], ["torch.nn.Module.__init__", "lightly.models.modules.SimSiamProjectionHead", "lightly.models.modules.SimSiamPredictionHead"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.simsiam.SimSiam.forward": [[23, 29], ["simsiam.SimSiam.backbone().flatten", "simsiam.SimSiam.projection_head", "simsiam.SimSiam.prediction_head", "z.detach.detach.detach", "simsiam.SimSiam.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.dino.DINO.__init__": [[18, 26], ["super().__init__", "lightly.models.modules.DINOProjectionHead", "copy.deepcopy", "lightly.models.modules.DINOProjectionHead", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "student_backbone", "=", "backbone", "\n", "self", ".", "student_head", "=", "DINOProjectionHead", "(", "input_dim", ",", "512", ",", "64", ",", "2048", ",", "freeze_last_layer", "=", "1", ")", "\n", "self", ".", "teacher_backbone", "=", "copy", ".", "deepcopy", "(", "backbone", ")", "\n", "self", ".", "teacher_head", "=", "DINOProjectionHead", "(", "input_dim", ",", "512", ",", "64", ",", "2048", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "teacher_backbone", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "teacher_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.dino.DINO.forward": [[27, 31], ["dino.DINO.student_backbone().flatten", "dino.DINO.student_head", "dino.DINO.student_backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "student_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "student_head", "(", "y", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.dino.DINO.forward_teacher": [[32, 36], ["dino.DINO.teacher_backbone().flatten", "dino.DINO.teacher_head", "dino.DINO.teacher_backbone"], "methods", ["None"], ["", "def", "forward_teacher", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "teacher_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "teacher_head", "(", "y", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.mae.MAE.__init__": [[16, 35], ["torch.nn.Module.__init__", "torch.nn.Parameter", "lightly.models.modules.masked_autoencoder.MAEBackbone.from_vit", "lightly.models.modules.masked_autoencoder.MAEDecoder", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.from_vit"], ["    ", "def", "__init__", "(", "self", ",", "vit", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "decoder_dim", "=", "512", "\n", "self", ".", "mask_ratio", "=", "0.75", "\n", "self", ".", "patch_size", "=", "vit", ".", "patch_size", "\n", "self", ".", "sequence_length", "=", "vit", ".", "seq_length", "\n", "self", ".", "mask_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "decoder_dim", ")", ")", "\n", "self", ".", "backbone", "=", "masked_autoencoder", ".", "MAEBackbone", ".", "from_vit", "(", "vit", ")", "\n", "self", ".", "decoder", "=", "masked_autoencoder", ".", "MAEDecoder", "(", "\n", "seq_length", "=", "vit", ".", "seq_length", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "16", ",", "\n", "embed_input_dim", "=", "vit", ".", "hidden_dim", ",", "\n", "hidden_dim", "=", "decoder_dim", ",", "\n", "mlp_dim", "=", "decoder_dim", "*", "4", ",", "\n", "out_dim", "=", "vit", ".", "patch_size", "**", "2", "*", "3", ",", "\n", "dropout", "=", "0", ",", "\n", "attention_dropout", "=", "0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.mae.MAE.forward_encoder": [[37, 39], ["mae.MAE.backbone.encode"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode"], ["", "def", "forward_encoder", "(", "self", ",", "images", ",", "idx_keep", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "backbone", ".", "encode", "(", "images", ",", "idx_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.mae.MAE.forward_decoder": [[40, 54], ["mae.MAE.decoder.embed", "lightly.models.utils.repeat_token", "lightly.models.utils.set_at_index", "mae.MAE.decoder.decode", "lightly.models.utils.get_at_index", "mae.MAE.decoder.predict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.repeat_token", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.set_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.predict"], ["", "def", "forward_decoder", "(", "self", ",", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", ":", "\n", "# build decoder input", "\n", "        ", "batch_size", "=", "x_encoded", ".", "shape", "[", "0", "]", "\n", "x_decode", "=", "self", ".", "decoder", ".", "embed", "(", "x_encoded", ")", "\n", "x_masked", "=", "utils", ".", "repeat_token", "(", "self", ".", "mask_token", ",", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ")", "\n", "x_masked", "=", "utils", ".", "set_at_index", "(", "x_masked", ",", "idx_keep", ",", "x_decode", ")", "\n", "\n", "# decoder forward pass", "\n", "x_decoded", "=", "self", ".", "decoder", ".", "decode", "(", "x_masked", ")", "\n", "\n", "# predict pixel values for masked tokens", "\n", "x_pred", "=", "utils", ".", "get_at_index", "(", "x_decoded", ",", "idx_mask", ")", "\n", "x_pred", "=", "self", ".", "decoder", ".", "predict", "(", "x_pred", ")", "\n", "return", "x_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.mae.MAE.forward": [[55, 70], ["lightly.models.utils.random_token_mask", "mae.MAE.forward_encoder", "mae.MAE.forward_decoder", "lightly.models.utils.patchify", "lightly.models.utils.get_at_index"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_encoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_decoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.patchify", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "idx_keep", ",", "idx_mask", "=", "utils", ".", "random_token_mask", "(", "\n", "size", "=", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ",", "\n", "mask_ratio", "=", "self", ".", "mask_ratio", ",", "\n", "device", "=", "images", ".", "device", ",", "\n", ")", "\n", "x_encoded", "=", "self", ".", "forward_encoder", "(", "images", ",", "idx_keep", ")", "\n", "x_pred", "=", "self", ".", "forward_decoder", "(", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", "\n", "\n", "# get image patches for masked tokens", "\n", "patches", "=", "utils", ".", "patchify", "(", "images", ",", "self", ".", "patch_size", ")", "\n", "# must adjust idx_mask for missing class token", "\n", "target", "=", "utils", ".", "get_at_index", "(", "patches", ",", "idx_mask", "-", "1", ")", "\n", "return", "x_pred", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.barlowtwins.BarlowTwins.__init__": [[16, 20], ["torch.nn.Module.__init__", "lightly.models.modules.BarlowTwinsProjectionHead"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["class", "BarlowTwins", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.barlowtwins.BarlowTwins.forward": [[21, 25], ["barlowtwins.BarlowTwins.backbone().flatten", "barlowtwins.BarlowTwins.projection_head", "barlowtwins.BarlowTwins.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.nnclr.NNCLR.__init__": [[18, 24], ["torch.nn.Module.__init__", "lightly.models.modules.NNCLRProjectionHead", "lightly.models.modules.NNCLRPredictionHead"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.nnclr.NNCLR.forward": [[25, 31], ["nnclr.NNCLR.backbone().flatten", "nnclr.NNCLR.projection_head", "nnclr.NNCLR.prediction_head", "z.detach.detach.detach", "nnclr.NNCLR.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.dcl.DCL.__init__": [[16, 20], ["torch.nn.Module.__init__", "lightly.models.modules.SimCLRProjectionHead"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SimCLRProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.dcl.DCL.forward": [[21, 25], ["dcl.DCL.backbone().flatten", "dcl.DCL.projection_head", "dcl.DCL.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.swav.SwaV.__init__": [[17, 22], ["torch.nn.Module.__init__", "lightly.models.modules.SwaVProjectionHead", "lightly.models.modules.SwaVPrototypes"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SwaVProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "prototypes", "=", "SwaVPrototypes", "(", "128", ",", "n_prototypes", "=", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.swav.SwaV.forward": [[23, 29], ["swav.SwaV.backbone().flatten", "swav.SwaV.projection_head", "torch.nn.functional.normalize", "swav.SwaV.prototypes", "swav.SwaV.backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "p", "=", "self", ".", "prototypes", "(", "x", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.moco.MoCo.__init__": [[19, 30], ["torch.nn.Module.__init__", "lightly.models.modules.MoCoProjectionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.moco.MoCo.forward": [[31, 35], ["moco.MoCo.backbone().flatten", "moco.MoCo.projection_head", "moco.MoCo.backbone"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.moco.MoCo.forward_momentum": [[36, 40], ["moco.MoCo.backbone_momentum().flatten", "moco.MoCo.projection_head_momentum().detach", "moco.MoCo.backbone_momentum", "moco.MoCo.projection_head_momentum"], "methods", ["None"], ["backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "32", ",", "\n", "out_dim", ":", "int", "=", "128", ",", "\n", "m", ":", "float", "=", "0.999", ",", "\n", "batch_shuffle", ":", "bool", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.byol.BYOL.__init__": [[19, 31], ["torch.nn.Module.__init__", "lightly.models.modules.BYOLProjectionHead", "lightly.models.modules.BYOLPredictionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["\n", "modules", "=", "[", "\n", "nn", ".", "Linear", "(", "num_ftrs", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "\n", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "\n", "", "class", "BYOL", "(", "nn", ".", "Module", ",", "_MomentumEncoderMixin", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.byol.BYOL.forward": [[32, 37], ["byol.BYOL.backbone().flatten", "byol.BYOL.projection_head", "byol.BYOL.prediction_head", "byol.BYOL.backbone"], "methods", ["None"], ["    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch.byol.BYOL.forward_momentum": [[38, 43], ["byol.BYOL.backbone_momentum().flatten", "byol.BYOL.projection_head_momentum", "z.detach.detach.detach", "byol.BYOL.backbone_momentum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simclr.SimCLR.__init__": [[12, 21], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SimCLRProjectionHead", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["\n", "\n", "class", "SimCLR", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simclr.SimCLR.forward": [[22, 26], ["simclr.SimCLR.backbone().flatten", "simclr.SimCLR.projection_head", "simclr.SimCLR.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simclr.SimCLR.training_step": [[27, 33], ["simclr.SimCLR.forward", "simclr.SimCLR.forward", "simclr.SimCLR.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "32", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simclr.SimCLR.configure_optimizers": [[34, 37], ["torch.optim.SGD", "simclr.SimCLR.parameters"], "methods", ["None"], ["out_dim", ":", "int", "=", "128", ")", ":", "\n", "\n", "        ", "super", "(", "SimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simsiam.SimSiam.__init__": [[18, 25], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SimSiamProjectionHead", "lightly.models.modules.SimSiamPredictionHead", "lightly.loss.NegativeCosineSimilarity", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simsiam.SimSiam.forward": [[26, 32], ["simsiam.SimSiam.backbone().flatten", "simsiam.SimSiam.projection_head", "simsiam.SimSiam.prediction_head", "z.detach.detach.detach", "simsiam.SimSiam.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simsiam.SimSiam.training_step": [[33, 39], ["simsiam.SimSiam.forward", "simsiam.SimSiam.forward", "simsiam.SimSiam.criterion", "simsiam.SimSiam.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.simsiam.SimSiam.configure_optimizers": [[40, 43], ["torch.optim.SGD", "simsiam.SimSiam.parameters"], "methods", ["None"], ["num_ftrs", ":", "int", "=", "2048", ",", "\n", "proj_hidden_dim", ":", "int", "=", "2048", ",", "\n", "pred_hidden_dim", ":", "int", "=", "512", ",", "\n", "out_dim", ":", "int", "=", "2048", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dino.DINO.__init__": [[20, 38], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.DINOProjectionHead", "copy.deepcopy", "lightly.models.modules.DINOProjectionHead", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.DINOLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["self", ".", "student_backbone", "=", "backbone", "\n", "self", ".", "student_head", "=", "DINOProjectionHead", "(", "input_dim", ",", "512", ",", "64", ",", "2048", ",", "freeze_last_layer", "=", "1", ")", "\n", "self", ".", "teacher_backbone", "=", "copy", ".", "deepcopy", "(", "backbone", ")", "\n", "self", ".", "teacher_head", "=", "DINOProjectionHead", "(", "input_dim", ",", "512", ",", "64", ",", "2048", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "teacher_backbone", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "teacher_head", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "student_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "student_head", "(", "y", ")", "\n", "return", "z", "\n", "\n", "", "def", "forward_teacher", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "teacher_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "teacher_head", "(", "y", ")", "\n", "return", "z", "\n", "\n", "", "", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dino.DINO.forward": [[39, 43], ["dino.DINO.student_backbone().flatten", "dino.DINO.student_head", "dino.DINO.student_backbone"], "methods", ["None"], ["input_dim", "=", "512", "\n", "# instead of a resnet you can also use a vision transformer backbone as in the", "\n", "# original paper (you might have to reduce the batch size in this case):", "\n", "#\u00a0backbone = torch.hub.load('facebookresearch/dino:main', 'dino_vits16', pretrained=False)", "\n", "#\u00a0input_dim = backbone.embed_dim", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dino.DINO.forward_teacher": [[44, 48], ["dino.DINO.teacher_backbone().flatten", "dino.DINO.teacher_head", "dino.DINO.teacher_backbone"], "methods", ["None"], ["\n", "model", "=", "DINO", "(", "backbone", ",", "input_dim", ")", "\n", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "model", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dino.DINO.training_step": [[49, 59], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "dino.DINO.criterion", "view.to", "dino.DINO.forward_teacher", "dino.DINO.forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.forward_teacher", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "# we ignore object detection annotations by setting target_transform to return 0", "\n", "pascal_voc", "=", "torchvision", ".", "datasets", ".", "VOCDetection", "(", "\n", "\"datasets/pascal_voc\"", ",", "download", "=", "True", ",", "target_transform", "=", "lambda", "t", ":", "0", "\n", ")", "\n", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "pascal_voc", ")", "\n", "# or create a dataset from a folder containing images or videos:", "\n", "# dataset = LightlyDataset(\"path/to/folder\")", "\n", "\n", "collate_fn", "=", "DINOCollateFunction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dino.DINO.on_after_backward": [[60, 62], ["dino.DINO.student_head.cancel_last_layer_gradients"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.DINOProjectionHead.cancel_last_layer_gradients"], ["dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "64", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dino.DINO.configure_optimizers": [[63, 66], ["torch.optim.Adam", "dino.DINO.parameters"], "methods", ["None"], ["collate_fn", "=", "collate_fn", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.mae.MAE.__init__": [[17, 39], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.vit_b_32", "torch.nn.Parameter", "lightly.models.modules.masked_autoencoder.MAEBackbone.from_vit", "lightly.models.modules.masked_autoencoder.MAEDecoder", "torch.nn.MSELoss", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.from_vit"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "decoder_dim", "=", "512", "\n", "self", ".", "mask_ratio", "=", "0.75", "\n", "self", ".", "patch_size", "=", "vit", ".", "patch_size", "\n", "self", ".", "sequence_length", "=", "vit", ".", "seq_length", "\n", "self", ".", "mask_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "decoder_dim", ")", ")", "\n", "self", ".", "backbone", "=", "masked_autoencoder", ".", "MAEBackbone", ".", "from_vit", "(", "vit", ")", "\n", "self", ".", "decoder", "=", "masked_autoencoder", ".", "MAEDecoder", "(", "\n", "seq_length", "=", "vit", ".", "seq_length", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "16", ",", "\n", "embed_input_dim", "=", "vit", ".", "hidden_dim", ",", "\n", "hidden_dim", "=", "decoder_dim", ",", "\n", "mlp_dim", "=", "decoder_dim", "*", "4", ",", "\n", "out_dim", "=", "vit", ".", "patch_size", "**", "2", "*", "3", ",", "\n", "dropout", "=", "0", ",", "\n", "attention_dropout", "=", "0", ",", "\n", ")", "\n", "\n", "", "def", "forward_encoder", "(", "self", ",", "images", ",", "idx_keep", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "backbone", ".", "encode", "(", "images", ",", "idx_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.mae.MAE.forward_encoder": [[40, 42], ["mae.MAE.backbone.encode"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode"], ["", "def", "forward_decoder", "(", "self", ",", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", ":", "\n", "# build decoder input", "\n", "        ", "batch_size", "=", "x_encoded", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.mae.MAE.forward_decoder": [[43, 57], ["mae.MAE.decoder.embed", "lightly.models.utils.repeat_token", "lightly.models.utils.set_at_index", "mae.MAE.decoder.decode", "lightly.models.utils.get_at_index", "mae.MAE.decoder.predict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.repeat_token", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.set_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.predict"], ["x_decode", "=", "self", ".", "decoder", ".", "embed", "(", "x_encoded", ")", "\n", "x_masked", "=", "utils", ".", "repeat_token", "(", "self", ".", "mask_token", ",", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ")", "\n", "x_masked", "=", "utils", ".", "set_at_index", "(", "x_masked", ",", "idx_keep", ",", "x_decode", ")", "\n", "\n", "# decoder forward pass", "\n", "x_decoded", "=", "self", ".", "decoder", ".", "decode", "(", "x_masked", ")", "\n", "\n", "# predict pixel values for masked tokens", "\n", "x_pred", "=", "utils", ".", "get_at_index", "(", "x_decoded", ",", "idx_mask", ")", "\n", "x_pred", "=", "self", ".", "decoder", ".", "predict", "(", "x_pred", ")", "\n", "return", "x_pred", "\n", "\n", "", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "idx_keep", ",", "idx_mask", "=", "utils", ".", "random_token_mask", "(", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.mae.MAE.training_step": [[58, 77], ["lightly.models.utils.random_token_mask", "mae.MAE.forward_encoder", "mae.MAE.forward_decoder", "lightly.models.utils.patchify", "lightly.models.utils.get_at_index", "mae.MAE.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_encoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_decoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.patchify", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index"], ["size", "=", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ",", "\n", "mask_ratio", "=", "self", ".", "mask_ratio", ",", "\n", "device", "=", "images", ".", "device", ",", "\n", ")", "\n", "x_encoded", "=", "self", ".", "forward_encoder", "(", "images", ",", "idx_keep", ")", "\n", "x_pred", "=", "self", ".", "forward_decoder", "(", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", "\n", "\n", "# get image patches for masked tokens", "\n", "patches", "=", "utils", ".", "patchify", "(", "images", ",", "self", ".", "patch_size", ")", "\n", "# must adjust idx_mask for missing class token", "\n", "target", "=", "utils", ".", "get_at_index", "(", "patches", ",", "idx_mask", "-", "1", ")", "\n", "return", "x_pred", ",", "target", "\n", "\n", "\n", "", "", "vit", "=", "torchvision", ".", "models", ".", "vit_b_32", "(", "pretrained", "=", "False", ")", "\n", "model", "=", "MAE", "(", "vit", ")", "\n", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.mae.MAE.configure_optimizers": [[78, 81], ["torch.optim.AdamW", "mae.MAE.parameters"], "methods", ["None"], ["# we ignore object detection annotations by setting target_transform to return 0", "\n", "pascal_voc", "=", "torchvision", ".", "datasets", ".", "VOCDetection", "(", "\n", "\"datasets/pascal_voc\"", ",", "download", "=", "True", ",", "target_transform", "=", "lambda", "t", ":", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.barlowtwins.BarlowTwins.__init__": [[16, 25], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.BarlowTwinsProjectionHead", "lightly.loss.BarlowTwinsLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["class", "BarlowTwins", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.barlowtwins.BarlowTwins.forward": [[26, 30], ["barlowtwins.BarlowTwins.backbone().flatten", "barlowtwins.BarlowTwins.projection_head", "barlowtwins.BarlowTwins.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.barlowtwins.BarlowTwins.training_step": [[31, 37], ["barlowtwins.BarlowTwins.forward", "barlowtwins.BarlowTwins.forward", "barlowtwins.BarlowTwins.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.barlowtwins.BarlowTwins.configure_optimizers": [[38, 41], ["torch.optim.SGD", "barlowtwins.BarlowTwins.parameters"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "2048", ",", "\n", "proj_hidden_dim", ":", "int", "=", "8192", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.nnclr.NNCLR.__init__": [[19, 28], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.NNCLRProjectionHead", "lightly.models.modules.NNCLRPredictionHead", "lightly.models.modules.NNMemoryBankModule", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.nnclr.NNCLR.forward": [[29, 35], ["nnclr.NNCLR.backbone().flatten", "nnclr.NNCLR.projection_head", "nnclr.NNCLR.prediction_head", "z.detach.detach.detach", "nnclr.NNCLR.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.nnclr.NNCLR.training_step": [[36, 44], ["nnclr.NNCLR.forward", "nnclr.NNCLR.forward", "nnclr.NNCLR.memory_bank", "nnclr.NNCLR.memory_bank", "nnclr.NNCLR.criterion", "nnclr.NNCLR.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "in_dims", ",", "h_dims", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "h_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "l2", "=", "nn", ".", "Linear", "(", "h_dims", ",", "out_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.nnclr.NNCLR.configure_optimizers": [[45, 48], ["torch.optim.SGD", "nnclr.NNCLR.parameters"], "methods", ["None"], ["prediction", "=", "nn", ".", "Sequential", "(", "l1", ",", "l2", ")", "\n", "return", "prediction", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dcl.DCL.__init__": [[16, 25], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SimCLRProjectionHead", "lightly.loss.DCLLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SimCLRProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dcl.DCL.forward": [[28, 32], ["dcl.DCL.backbone().flatten", "dcl.DCL.projection_head", "dcl.DCL.backbone"], "methods", ["None"], ["backbone", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "model", "=", "DCL", "(", "backbone", ")", "\n", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "model", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dcl.DCL.training_step": [[33, 39], ["dcl.DCL.forward", "dcl.DCL.forward", "dcl.DCL.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "cifar10", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\"datasets/cifar10\"", ",", "download", "=", "True", ")", "\n", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "cifar10", ")", "\n", "# or create a dataset from a folder containing images or videos:", "\n", "# dataset = LightlyDataset(\"path/to/folder\")", "\n", "\n", "collate_fn", "=", "SimCLRCollateFunction", "(", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.dcl.DCL.configure_optimizers": [[40, 43], ["torch.optim.SGD", "dcl.DCL.parameters"], "methods", ["None"], ["input_size", "=", "32", ",", "\n", "gaussian_blur", "=", "0.", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.swav.SwaV.__init__": [[18, 28], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SwaVProjectionHead", "lightly.models.modules.SwaVPrototypes", "lightly.loss.SwaVLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SwaVProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "prototypes", "=", "SwaVPrototypes", "(", "128", ",", "n_prototypes", "=", "512", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "p", "=", "self", ".", "prototypes", "(", "x", ")", "\n", "return", "p", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.swav.SwaV.forward": [[29, 35], ["swav.SwaV.backbone().flatten", "swav.SwaV.projection_head", "torch.nn.functional.normalize", "swav.SwaV.prototypes", "swav.SwaV.backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["\n", "\n", "", "", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "model", "=", "SwaV", "(", "backbone", ")", "\n", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.swav.SwaV.training_step": [[36, 44], ["swav.SwaV.prototypes.normalize", "swav.SwaV.criterion", "swav.SwaV.forward", "x.to"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["model", ".", "to", "(", "device", ")", "\n", "\n", "# we ignore object detection annotations by setting target_transform to return 0", "\n", "pascal_voc", "=", "torchvision", ".", "datasets", ".", "VOCDetection", "(", "\n", "\"datasets/pascal_voc\"", ",", "download", "=", "True", ",", "target_transform", "=", "lambda", "t", ":", "0", "\n", ")", "\n", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "pascal_voc", ")", "\n", "# or create a dataset from a folder containing images or videos:", "\n", "# dataset = LightlyDataset(\"path/to/folder\")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.swav.SwaV.configure_optimizers": [[45, 48], ["torch.optim.Adam", "swav.SwaV.parameters"], "methods", ["None"], ["\n", "collate_fn", "=", "SwaVCollateFunction", "(", ")", "\n", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.moco.MoCo.__init__": [[20, 33], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.MoCoProjectionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.moco.MoCo.forward": [[34, 38], ["moco.MoCo.backbone().flatten", "moco.MoCo.projection_head", "moco.MoCo.backbone"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "32", ",", "\n", "out_dim", ":", "int", "=", "128", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.moco.MoCo.forward_momentum": [[39, 43], ["moco.MoCo.backbone_momentum().flatten", "moco.MoCo.projection_head_momentum().detach", "moco.MoCo.backbone_momentum", "moco.MoCo.projection_head_momentum"], "methods", ["None"], ["m", ":", "float", "=", "0.999", ",", "\n", "batch_shuffle", ":", "bool", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.moco.MoCo.training_step": [[44, 54], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "moco.MoCo.forward", "moco.MoCo.forward_momentum", "moco.MoCo.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum"], ["self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "MoCoProjectionHead", "(", "num_ftrs", ",", "num_ftrs", ",", "out_dim", ")", "\n", "self", ".", "momentum_features", "=", "None", "\n", "self", ".", "momentum_projection_head", "=", "None", "\n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "batch_shuffle", "=", "batch_shuffle", "\n", "\n", "# initialize momentum features and momentum projection head", "\n", "self", ".", "_init_momentum_encoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.moco.MoCo.configure_optimizers": [[55, 58], ["torch.optim.SGD", "moco.MoCo.parameters"], "methods", ["None"], ["warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block MoCo will be deprecated in version 1.3.0. '", "\n", "+", "'Use low-level building blocks instead. '", "\n", "+", "'See https://docs.lightly.ai/lightly.models.html for more information'", ")", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.byol.BYOL.__init__": [[20, 34], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.BYOLProjectionHead", "lightly.models.modules.heads.BYOLPredictionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NegativeCosineSimilarity", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["\n", "modules", "=", "[", "\n", "nn", ".", "Linear", "(", "num_ftrs", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "\n", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "\n", "", "class", "BYOL", "(", "nn", ".", "Module", ",", "_MomentumEncoderMixin", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.byol.BYOL.forward": [[35, 40], ["byol.BYOL.backbone().flatten", "byol.BYOL.projection_head", "byol.BYOL.prediction_head", "byol.BYOL.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.byol.BYOL.forward_momentum": [[41, 46], ["byol.BYOL.backbone_momentum().flatten", "byol.BYOL.projection_head_momentum", "z.detach.detach.detach", "byol.BYOL.backbone_momentum"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.byol.BYOL.training_step": [[47, 57], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "byol.BYOL.forward", "byol.BYOL.forward_momentum", "byol.BYOL.forward", "byol.BYOL.forward_momentum", "byol.BYOL.criterion", "byol.BYOL.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "4096", ",", "\n", "out_dim", ":", "int", "=", "256", ",", "\n", "m", ":", "float", "=", "0.9", ")", ":", "\n", "\n", "        ", "super", "(", "BYOL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "# the architecture of the projection and prediction head is the same", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning_distributed.byol.BYOL.configure_optimizers": [[58, 60], ["torch.optim.SGD", "byol.BYOL.parameters"], "methods", ["None"], ["self", ".", "projection_head", "=", "BYOLProjectionHead", "(", "num_ftrs", ",", "hidden_dim", ",", "out_dim", ")", "\n", "self", ".", "prediction_head", "=", "BYOLProjectionHead", "(", "out_dim", ",", "hidden_dim", ",", "out_dim", ")", "\n", "self", ".", "momentum_backbone", "=", "None", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simclr.SimCLR.__init__": [[17, 23], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SimCLRProjectionHead", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simclr.SimCLR.forward": [[24, 28], ["simclr.SimCLR.backbone().flatten", "simclr.SimCLR.projection_head", "simclr.SimCLR.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simclr.SimCLR.training_step": [[29, 35], ["simclr.SimCLR.forward", "simclr.SimCLR.forward", "simclr.SimCLR.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "32", ",", "\n", "out_dim", ":", "int", "=", "128", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simclr.SimCLR.configure_optimizers": [[36, 39], ["torch.optim.SGD", "simclr.SimCLR.parameters"], "methods", ["None"], ["        ", "super", "(", "SimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SimCLRProjectionHead", "(", "num_ftrs", ",", "num_ftrs", ",", "out_dim", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simsiam.SimSiam.__init__": [[18, 25], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SimSiamProjectionHead", "lightly.models.modules.SimSiamPredictionHead", "lightly.loss.NegativeCosineSimilarity", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simsiam.SimSiam.forward": [[26, 32], ["simsiam.SimSiam.backbone().flatten", "simsiam.SimSiam.projection_head", "simsiam.SimSiam.prediction_head", "z.detach.detach.detach", "simsiam.SimSiam.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simsiam.SimSiam.training_step": [[33, 39], ["simsiam.SimSiam.forward", "simsiam.SimSiam.forward", "simsiam.SimSiam.criterion", "simsiam.SimSiam.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.simsiam.SimSiam.configure_optimizers": [[40, 43], ["torch.optim.SGD", "simsiam.SimSiam.parameters"], "methods", ["None"], ["num_ftrs", ":", "int", "=", "2048", ",", "\n", "proj_hidden_dim", ":", "int", "=", "2048", ",", "\n", "pred_hidden_dim", ":", "int", "=", "512", ",", "\n", "out_dim", ":", "int", "=", "2048", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dino.DINO.__init__": [[20, 38], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.DINOProjectionHead", "copy.deepcopy", "lightly.models.modules.DINOProjectionHead", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.DINOLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["self", ".", "student_backbone", "=", "backbone", "\n", "self", ".", "student_head", "=", "DINOProjectionHead", "(", "input_dim", ",", "512", ",", "64", ",", "2048", ",", "freeze_last_layer", "=", "1", ")", "\n", "self", ".", "teacher_backbone", "=", "copy", ".", "deepcopy", "(", "backbone", ")", "\n", "self", ".", "teacher_head", "=", "DINOProjectionHead", "(", "input_dim", ",", "512", ",", "64", ",", "2048", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "teacher_backbone", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "teacher_head", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "student_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "student_head", "(", "y", ")", "\n", "return", "z", "\n", "\n", "", "def", "forward_teacher", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "teacher_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "teacher_head", "(", "y", ")", "\n", "return", "z", "\n", "\n", "", "", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dino.DINO.forward": [[39, 43], ["dino.DINO.student_backbone().flatten", "dino.DINO.student_head", "dino.DINO.student_backbone"], "methods", ["None"], ["input_dim", "=", "512", "\n", "# instead of a resnet you can also use a vision transformer backbone as in the", "\n", "# original paper (you might have to reduce the batch size in this case):", "\n", "#\u00a0backbone = torch.hub.load('facebookresearch/dino:main', 'dino_vits16', pretrained=False)", "\n", "#\u00a0input_dim = backbone.embed_dim", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dino.DINO.forward_teacher": [[44, 48], ["dino.DINO.teacher_backbone().flatten", "dino.DINO.teacher_head", "dino.DINO.teacher_backbone"], "methods", ["None"], ["\n", "model", "=", "DINO", "(", "backbone", ",", "input_dim", ")", "\n", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "model", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dino.DINO.training_step": [[49, 59], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "dino.DINO.criterion", "view.to", "dino.DINO.forward_teacher", "dino.DINO.forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.forward_teacher", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "# we ignore object detection annotations by setting target_transform to return 0", "\n", "pascal_voc", "=", "torchvision", ".", "datasets", ".", "VOCDetection", "(", "\n", "\"datasets/pascal_voc\"", ",", "download", "=", "True", ",", "target_transform", "=", "lambda", "t", ":", "0", "\n", ")", "\n", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "pascal_voc", ")", "\n", "# or create a dataset from a folder containing images or videos:", "\n", "# dataset = LightlyDataset(\"path/to/folder\")", "\n", "\n", "collate_fn", "=", "DINOCollateFunction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dino.DINO.on_after_backward": [[60, 62], ["dino.DINO.student_head.cancel_last_layer_gradients"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.DINOProjectionHead.cancel_last_layer_gradients"], ["dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "64", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dino.DINO.configure_optimizers": [[63, 66], ["torch.optim.Adam", "dino.DINO.parameters"], "methods", ["None"], ["collate_fn", "=", "collate_fn", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.mae.MAE.__init__": [[17, 39], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.vit_b_32", "torch.nn.Parameter", "lightly.models.modules.masked_autoencoder.MAEBackbone.from_vit", "lightly.models.modules.masked_autoencoder.MAEDecoder", "torch.nn.MSELoss", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.from_vit"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "decoder_dim", "=", "512", "\n", "self", ".", "mask_ratio", "=", "0.75", "\n", "self", ".", "patch_size", "=", "vit", ".", "patch_size", "\n", "self", ".", "sequence_length", "=", "vit", ".", "seq_length", "\n", "self", ".", "mask_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "decoder_dim", ")", ")", "\n", "self", ".", "backbone", "=", "masked_autoencoder", ".", "MAEBackbone", ".", "from_vit", "(", "vit", ")", "\n", "self", ".", "decoder", "=", "masked_autoencoder", ".", "MAEDecoder", "(", "\n", "seq_length", "=", "vit", ".", "seq_length", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "16", ",", "\n", "embed_input_dim", "=", "vit", ".", "hidden_dim", ",", "\n", "hidden_dim", "=", "decoder_dim", ",", "\n", "mlp_dim", "=", "decoder_dim", "*", "4", ",", "\n", "out_dim", "=", "vit", ".", "patch_size", "**", "2", "*", "3", ",", "\n", "dropout", "=", "0", ",", "\n", "attention_dropout", "=", "0", ",", "\n", ")", "\n", "\n", "", "def", "forward_encoder", "(", "self", ",", "images", ",", "idx_keep", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "backbone", ".", "encode", "(", "images", ",", "idx_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.mae.MAE.forward_encoder": [[40, 42], ["mae.MAE.backbone.encode"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode"], ["", "def", "forward_decoder", "(", "self", ",", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", ":", "\n", "# build decoder input", "\n", "        ", "batch_size", "=", "x_encoded", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.mae.MAE.forward_decoder": [[43, 57], ["mae.MAE.decoder.embed", "lightly.models.utils.repeat_token", "lightly.models.utils.set_at_index", "mae.MAE.decoder.decode", "lightly.models.utils.get_at_index", "mae.MAE.decoder.predict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.repeat_token", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.set_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.predict"], ["x_decode", "=", "self", ".", "decoder", ".", "embed", "(", "x_encoded", ")", "\n", "x_masked", "=", "utils", ".", "repeat_token", "(", "self", ".", "mask_token", ",", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ")", "\n", "x_masked", "=", "utils", ".", "set_at_index", "(", "x_masked", ",", "idx_keep", ",", "x_decode", ")", "\n", "\n", "# decoder forward pass", "\n", "x_decoded", "=", "self", ".", "decoder", ".", "decode", "(", "x_masked", ")", "\n", "\n", "# predict pixel values for masked tokens", "\n", "x_pred", "=", "utils", ".", "get_at_index", "(", "x_decoded", ",", "idx_mask", ")", "\n", "x_pred", "=", "self", ".", "decoder", ".", "predict", "(", "x_pred", ")", "\n", "return", "x_pred", "\n", "\n", "", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "idx_keep", ",", "idx_mask", "=", "utils", ".", "random_token_mask", "(", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.mae.MAE.training_step": [[58, 77], ["lightly.models.utils.random_token_mask", "mae.MAE.forward_encoder", "mae.MAE.forward_decoder", "lightly.models.utils.patchify", "lightly.models.utils.get_at_index", "mae.MAE.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_encoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_decoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.patchify", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index"], ["size", "=", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ",", "\n", "mask_ratio", "=", "self", ".", "mask_ratio", ",", "\n", "device", "=", "images", ".", "device", ",", "\n", ")", "\n", "x_encoded", "=", "self", ".", "forward_encoder", "(", "images", ",", "idx_keep", ")", "\n", "x_pred", "=", "self", ".", "forward_decoder", "(", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", "\n", "\n", "# get image patches for masked tokens", "\n", "patches", "=", "utils", ".", "patchify", "(", "images", ",", "self", ".", "patch_size", ")", "\n", "# must adjust idx_mask for missing class token", "\n", "target", "=", "utils", ".", "get_at_index", "(", "patches", ",", "idx_mask", "-", "1", ")", "\n", "return", "x_pred", ",", "target", "\n", "\n", "\n", "", "", "vit", "=", "torchvision", ".", "models", ".", "vit_b_32", "(", "pretrained", "=", "False", ")", "\n", "model", "=", "MAE", "(", "vit", ")", "\n", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.mae.MAE.configure_optimizers": [[78, 81], ["torch.optim.AdamW", "mae.MAE.parameters"], "methods", ["None"], ["# we ignore object detection annotations by setting target_transform to return 0", "\n", "pascal_voc", "=", "torchvision", ".", "datasets", ".", "VOCDetection", "(", "\n", "\"datasets/pascal_voc\"", ",", "download", "=", "True", ",", "target_transform", "=", "lambda", "t", ":", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.barlowtwins.BarlowTwins.__init__": [[17, 23], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.BarlowTwinsProjectionHead", "lightly.loss.BarlowTwinsLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.barlowtwins.BarlowTwins.forward": [[24, 28], ["barlowtwins.BarlowTwins.backbone().flatten", "barlowtwins.BarlowTwins.projection_head", "barlowtwins.BarlowTwins.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.barlowtwins.BarlowTwins.training_step": [[29, 35], ["barlowtwins.BarlowTwins.forward", "barlowtwins.BarlowTwins.forward", "barlowtwins.BarlowTwins.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.barlowtwins.BarlowTwins.configure_optimizers": [[36, 39], ["torch.optim.SGD", "barlowtwins.BarlowTwins.parameters"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.nnclr.NNCLR.__init__": [[19, 28], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.NNCLRProjectionHead", "lightly.models.modules.NNCLRPredictionHead", "lightly.models.modules.NNMemoryBankModule", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.nnclr.NNCLR.forward": [[29, 35], ["nnclr.NNCLR.backbone().flatten", "nnclr.NNCLR.projection_head", "nnclr.NNCLR.prediction_head", "z.detach.detach.detach", "nnclr.NNCLR.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.nnclr.NNCLR.training_step": [[36, 44], ["nnclr.NNCLR.forward", "nnclr.NNCLR.forward", "nnclr.NNCLR.memory_bank", "nnclr.NNCLR.memory_bank", "nnclr.NNCLR.criterion", "nnclr.NNCLR.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["\n", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "in_dims", ",", "h_dims", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "h_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "l2", "=", "nn", ".", "Linear", "(", "h_dims", ",", "out_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.nnclr.NNCLR.configure_optimizers": [[45, 48], ["torch.optim.SGD", "nnclr.NNCLR.parameters"], "methods", ["None"], ["prediction", "=", "nn", ".", "Sequential", "(", "l1", ",", "l2", ")", "\n", "return", "prediction", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dcl.DCL.__init__": [[17, 23], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SimCLRProjectionHead", "lightly.loss.DCLLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SimCLRProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dcl.DCL.forward": [[26, 30], ["dcl.DCL.backbone().flatten", "dcl.DCL.projection_head", "dcl.DCL.backbone"], "methods", ["None"], ["\n", "", "", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "model", "=", "DCL", "(", "backbone", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dcl.DCL.training_step": [[31, 37], ["dcl.DCL.forward", "dcl.DCL.forward", "dcl.DCL.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "cifar10", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\"datasets/cifar10\"", ",", "download", "=", "True", ")", "\n", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "cifar10", ")", "\n", "# or create a dataset from a folder containing images or videos:", "\n", "# dataset = LightlyDataset(\"path/to/folder\")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.dcl.DCL.configure_optimizers": [[38, 41], ["torch.optim.SGD", "dcl.DCL.parameters"], "methods", ["None"], ["\n", "collate_fn", "=", "SimCLRCollateFunction", "(", "\n", "input_size", "=", "32", ",", "\n", "gaussian_blur", "=", "0.", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.swav.SwaV.__init__": [[18, 25], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.SwaVProjectionHead", "lightly.models.modules.SwaVPrototypes", "lightly.loss.SwaVLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SwaVProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "prototypes", "=", "SwaVPrototypes", "(", "128", ",", "n_prototypes", "=", "512", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "projection_head", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.swav.SwaV.forward": [[26, 32], ["swav.SwaV.backbone().flatten", "swav.SwaV.projection_head", "torch.nn.functional.normalize", "swav.SwaV.prototypes", "swav.SwaV.backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "p", "=", "self", ".", "prototypes", "(", "x", ")", "\n", "return", "p", "\n", "\n", "\n", "", "", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "backbone", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.swav.SwaV.training_step": [[33, 41], ["swav.SwaV.prototypes.normalize", "swav.SwaV.criterion", "swav.SwaV.forward", "x.to"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["model", "=", "SwaV", "(", "backbone", ")", "\n", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "# we ignore object detection annotations by setting target_transform to return 0", "\n", "pascal_voc", "=", "torchvision", ".", "datasets", ".", "VOCDetection", "(", "\n", "\"datasets/pascal_voc\"", ",", "download", "=", "True", ",", "target_transform", "=", "lambda", "t", ":", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.swav.SwaV.configure_optimizers": [[42, 45], ["torch.optim.Adam", "swav.SwaV.parameters"], "methods", ["None"], ["dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "pascal_voc", ")", "\n", "# or create a dataset from a folder containing images or videos:", "\n", "# dataset = LightlyDataset(\"path/to/folder\")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.moco.MoCo.__init__": [[20, 33], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.MoCoProjectionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.moco.MoCo.forward": [[34, 38], ["moco.MoCo.backbone().flatten", "moco.MoCo.projection_head", "moco.MoCo.backbone"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "32", ",", "\n", "out_dim", ":", "int", "=", "128", ",", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.moco.MoCo.forward_momentum": [[39, 43], ["moco.MoCo.backbone_momentum().flatten", "moco.MoCo.projection_head_momentum().detach", "moco.MoCo.backbone_momentum", "moco.MoCo.projection_head_momentum"], "methods", ["None"], ["m", ":", "float", "=", "0.999", ",", "\n", "batch_shuffle", ":", "bool", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.moco.MoCo.training_step": [[44, 52], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "moco.MoCo.forward", "moco.MoCo.forward_momentum", "moco.MoCo.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum"], ["self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "MoCoProjectionHead", "(", "num_ftrs", ",", "num_ftrs", ",", "out_dim", ")", "\n", "self", ".", "momentum_features", "=", "None", "\n", "self", ".", "momentum_projection_head", "=", "None", "\n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "batch_shuffle", "=", "batch_shuffle", "\n", "\n", "# initialize momentum features and momentum projection head", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.moco.MoCo.configure_optimizers": [[53, 56], ["torch.optim.SGD", "moco.MoCo.parameters"], "methods", ["None"], ["self", ".", "_init_momentum_encoder", "(", ")", "\n", "\n", "warnings", ".", "warn", "(", "Warning", "(", "\n", "'The high-level building block MoCo will be deprecated in version 1.3.0. '", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.byol.BYOL.__init__": [[20, 34], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.nn.Sequential", "lightly.models.modules.BYOLProjectionHead", "lightly.models.modules.BYOLPredictionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NegativeCosineSimilarity", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["\n", "modules", "=", "[", "\n", "nn", ".", "Linear", "(", "num_ftrs", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "\n", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "\n", "", "class", "BYOL", "(", "nn", ".", "Module", ",", "_MomentumEncoderMixin", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.byol.BYOL.forward": [[35, 40], ["byol.BYOL.backbone().flatten", "byol.BYOL.projection_head", "byol.BYOL.prediction_head", "byol.BYOL.backbone"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.byol.BYOL.forward_momentum": [[41, 46], ["byol.BYOL.backbone_momentum().flatten", "byol.BYOL.projection_head_momentum", "z.detach.detach.detach", "byol.BYOL.backbone_momentum"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.byol.BYOL.training_step": [[47, 57], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "byol.BYOL.forward", "byol.BYOL.forward_momentum", "byol.BYOL.forward", "byol.BYOL.forward_momentum", "byol.BYOL.criterion", "byol.BYOL.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ":", "nn", ".", "Module", ",", "\n", "num_ftrs", ":", "int", "=", "2048", ",", "\n", "hidden_dim", ":", "int", "=", "4096", ",", "\n", "out_dim", ":", "int", "=", "256", ",", "\n", "m", ":", "float", "=", "0.9", ")", ":", "\n", "\n", "        ", "super", "(", "BYOL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "# the architecture of the projection and prediction head is the same", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.pytorch_lightning.byol.BYOL.configure_optimizers": [[58, 60], ["torch.optim.SGD", "byol.BYOL.parameters"], "methods", ["None"], ["self", ".", "projection_head", "=", "BYOLProjectionHead", "(", "num_ftrs", ",", "hidden_dim", ",", "out_dim", ")", "\n", "self", ".", "prediction_head", "=", "BYOLProjectionHead", "(", "out_dim", ",", "hidden_dim", ",", "out_dim", ")", "\n", "self", ".", "momentum_backbone", "=", "None", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MocoModel.__init__": [[203, 227], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.MoCoProjectionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NTXentLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "\n", "# create a ResNet backbone and remove the classification head", "\n", "num_splits", "=", "0", "if", "sync_batchnorm", "else", "8", "\n", "# TODO: Add split batch norm to the resnet model", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "\n", "# create a moco model based on ResNet", "\n", "self", ".", "projection_head", "=", "heads", ".", "MoCoProjectionHead", "(", "feature_dim", ",", "2048", ",", "128", ")", "\n", "self", ".", "backbone_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "projection_head_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "projection_head", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "backbone_momentum", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "projection_head_momentum", ")", "\n", "\n", "# create our loss with the optional memory bank", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", "\n", "temperature", "=", "0.1", ",", "\n", "memory_bank_size", "=", "memory_bank_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MocoModel.forward": [[228, 231], ["imagenette_benchmark.MocoModel.backbone().flatten", "imagenette_benchmark.MocoModel.projection_head", "imagenette_benchmark.MocoModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "return", "self", ".", "projection_head", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MocoModel.training_step": [[232, 257], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "imagenette_benchmark.MocoModel.criterion", "imagenette_benchmark.MocoModel.criterion", "imagenette_benchmark.MocoModel.log", "lightly.models.utils.batch_shuffle", "imagenette_benchmark.MocoModel.backbone().flatten", "imagenette_benchmark.MocoModel.projection_head", "imagenette_benchmark.MocoModel.backbone_momentum().flatten", "imagenette_benchmark.MocoModel.projection_head_momentum", "lightly.models.utils.batch_unshuffle", "imagenette_benchmark.MocoModel.training_step.step"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "\n", "# update momentum", "\n", "utils", ".", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "backbone_momentum", ",", "0.99", ")", "\n", "utils", ".", "update_momentum", "(", "self", ".", "projection_head", ",", "self", ".", "projection_head_momentum", ",", "0.99", ")", "\n", "\n", "def", "step", "(", "x0_", ",", "x1_", ")", ":", "\n", "            ", "x1_", ",", "shuffle", "=", "utils", ".", "batch_shuffle", "(", "x1_", ",", "distributed", "=", "distributed", ")", "\n", "x0_", "=", "self", ".", "backbone", "(", "x0_", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x0_", "=", "self", ".", "projection_head", "(", "x0_", ")", "\n", "\n", "x1_", "=", "self", ".", "backbone_momentum", "(", "x1_", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x1_", "=", "self", ".", "projection_head_momentum", "(", "x1_", ")", "\n", "x1_", "=", "utils", ".", "batch_unshuffle", "(", "x1_", ",", "shuffle", ",", "distributed", "=", "distributed", ")", "\n", "return", "x0_", ",", "x1_", "\n", "\n", "# We use a symmetric loss (model trains faster at little compute overhead)", "\n", "# https://colab.research.google.com/github/facebookresearch/moco/blob/colab-notebook/colab/moco_cifar10_demo.ipynb", "\n", "", "loss_1", "=", "self", ".", "criterion", "(", "*", "step", "(", "x0", ",", "x1", ")", ")", "\n", "loss_2", "=", "self", ".", "criterion", "(", "*", "step", "(", "x1", ",", "x0", ")", ")", "\n", "\n", "loss", "=", "0.5", "*", "(", "loss_1", "+", "loss_2", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MocoModel.configure_optimizers": [[258, 268], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "list", "list", "imagenette_benchmark.MocoModel.backbone.parameters", "imagenette_benchmark.MocoModel.projection_head.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "projection_head", ".", "parameters", "(", ")", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimCLRModel.__init__": [[271, 282], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimCLRProjectionHead", "lightly.loss.NTXentLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "SimCLRProjectionHead", "(", "feature_dim", ",", "feature_dim", ",", "128", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimCLRModel.forward": [[283, 287], ["imagenette_benchmark.SimCLRModel.backbone().flatten", "imagenette_benchmark.SimCLRModel.projection_head", "imagenette_benchmark.SimCLRModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimCLRModel.training_step": [[288, 295], ["imagenette_benchmark.SimCLRModel.forward", "imagenette_benchmark.SimCLRModel.forward", "imagenette_benchmark.SimCLRModel.criterion", "imagenette_benchmark.SimCLRModel.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimCLRModel.configure_optimizers": [[296, 305], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "imagenette_benchmark.SimCLRModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimSiamModel.__init__": [[307, 319], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimSiamProjectionHead", "lightly.models.modules.heads.SimSiamPredictionHead", "lightly.loss.NegativeCosineSimilarity", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "SimSiamProjectionHead", "(", "feature_dim", ",", "2048", ",", "2048", ")", "\n", "self", ".", "prediction_head", "=", "heads", ".", "SimSiamPredictionHead", "(", "2048", ",", "512", ",", "2048", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NegativeCosineSimilarity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimSiamModel.forward": [[320, 326], ["imagenette_benchmark.SimSiamModel.backbone().flatten", "imagenette_benchmark.SimSiamModel.projection_head", "imagenette_benchmark.SimSiamModel.prediction_head", "z.detach.detach.detach", "imagenette_benchmark.SimSiamModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "f", ")", "\n", "p", "=", "self", ".", "prediction_head", "(", "z", ")", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "return", "z", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimSiamModel.training_step": [[327, 334], ["imagenette_benchmark.SimSiamModel.forward", "imagenette_benchmark.SimSiamModel.forward", "imagenette_benchmark.SimSiamModel.log", "imagenette_benchmark.SimSiamModel.criterion", "imagenette_benchmark.SimSiamModel.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", ",", "p0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", ",", "p1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "0.5", "*", "(", "self", ".", "criterion", "(", "z0", ",", "p1", ")", "+", "self", ".", "criterion", "(", "z1", ",", "p0", ")", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SimSiamModel.configure_optimizers": [[335, 344], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "imagenette_benchmark.SimSiamModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", ",", "#\u00a0no lr-scaling, results in better training stability", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BarlowTwinsModel.__init__": [[346, 359], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.BarlowTwinsProjectionHead", "lightly.loss.BarlowTwinsLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "# use a 2-layer projection head for cifar10 as described in the paper", "\n", "self", ".", "projection_head", "=", "heads", ".", "BarlowTwinsProjectionHead", "(", "feature_dim", ",", "2048", ",", "2048", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "BarlowTwinsLoss", "(", "gather_distributed", "=", "gather_distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BarlowTwinsModel.forward": [[360, 364], ["imagenette_benchmark.BarlowTwinsModel.backbone().flatten", "imagenette_benchmark.BarlowTwinsModel.projection_head", "imagenette_benchmark.BarlowTwinsModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BarlowTwinsModel.training_step": [[365, 372], ["imagenette_benchmark.BarlowTwinsModel.forward", "imagenette_benchmark.BarlowTwinsModel.forward", "imagenette_benchmark.BarlowTwinsModel.criterion", "imagenette_benchmark.BarlowTwinsModel.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BarlowTwinsModel.configure_optimizers": [[373, 382], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "imagenette_benchmark.BarlowTwinsModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BYOLModel.__init__": [[384, 405], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.BYOLProjectionHead", "lightly.models.modules.heads.BYOLPredictionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NegativeCosineSimilarity", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "\n", "# create a byol model based on ResNet", "\n", "self", ".", "projection_head", "=", "heads", ".", "BYOLProjectionHead", "(", "feature_dim", ",", "4096", ",", "256", ")", "\n", "self", ".", "prediction_head", "=", "heads", ".", "BYOLPredictionHead", "(", "256", ",", "4096", ",", "256", ")", "\n", "\n", "self", ".", "backbone_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "projection_head_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "projection_head", ")", "\n", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "backbone_momentum", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "projection_head_momentum", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NegativeCosineSimilarity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BYOLModel.forward": [[406, 411], ["imagenette_benchmark.BYOLModel.backbone().flatten", "imagenette_benchmark.BYOLModel.projection_head", "imagenette_benchmark.BYOLModel.prediction_head", "imagenette_benchmark.BYOLModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "y", ")", "\n", "p", "=", "self", ".", "prediction_head", "(", "z", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BYOLModel.forward_momentum": [[412, 417], ["imagenette_benchmark.BYOLModel.backbone_momentum().flatten", "imagenette_benchmark.BYOLModel.projection_head_momentum", "z.detach.detach.detach", "imagenette_benchmark.BYOLModel.backbone_momentum"], "methods", ["None"], ["", "def", "forward_momentum", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone_momentum", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head_momentum", "(", "y", ")", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BYOLModel.training_step": [[418, 429], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "imagenette_benchmark.BYOLModel.forward", "imagenette_benchmark.BYOLModel.forward_momentum", "imagenette_benchmark.BYOLModel.forward", "imagenette_benchmark.BYOLModel.forward_momentum", "imagenette_benchmark.BYOLModel.log", "imagenette_benchmark.BYOLModel.criterion", "imagenette_benchmark.BYOLModel.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "utils", ".", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "backbone_momentum", ",", "m", "=", "0.99", ")", "\n", "utils", ".", "update_momentum", "(", "self", ".", "projection_head", ",", "self", ".", "projection_head_momentum", ",", "m", "=", "0.99", ")", "\n", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "p0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z0", "=", "self", ".", "forward_momentum", "(", "x0", ")", "\n", "p1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "z1", "=", "self", ".", "forward_momentum", "(", "x1", ")", "\n", "loss", "=", "0.5", "*", "(", "self", ".", "criterion", "(", "p0", ",", "z1", ")", "+", "self", ".", "criterion", "(", "p1", ",", "z0", ")", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.BYOLModel.configure_optimizers": [[430, 442], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "list", "list", "list", "imagenette_benchmark.BYOLModel.prediction_head.parameters", "imagenette_benchmark.BYOLModel.backbone.parameters", "imagenette_benchmark.BYOLModel.projection_head.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "projection_head", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "prediction_head", ".", "parameters", "(", ")", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.NNCLRModel.__init__": [[445, 459], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.NNCLRProjectionHead", "lightly.models.modules.heads.NNCLRPredictionHead", "lightly.loss.NTXentLoss", "lightly.models.modules.NNMemoryBankModule", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "NNCLRProjectionHead", "(", "feature_dim", ",", "2048", ",", "256", ")", "\n", "self", ".", "prediction_head", "=", "heads", ".", "NNCLRPredictionHead", "(", "256", ",", "4096", ",", "256", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", ")", "\n", "self", ".", "memory_bank", "=", "modules", ".", "NNMemoryBankModule", "(", "size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.NNCLRModel.forward": [[460, 466], ["imagenette_benchmark.NNCLRModel.backbone().flatten", "imagenette_benchmark.NNCLRModel.projection_head", "imagenette_benchmark.NNCLRModel.prediction_head", "z.detach.detach.detach", "imagenette_benchmark.NNCLRModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "y", ")", "\n", "p", "=", "self", ".", "prediction_head", "(", "z", ")", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "return", "z", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.NNCLRModel.training_step": [[467, 475], ["imagenette_benchmark.NNCLRModel.forward", "imagenette_benchmark.NNCLRModel.forward", "imagenette_benchmark.NNCLRModel.memory_bank", "imagenette_benchmark.NNCLRModel.memory_bank", "imagenette_benchmark.NNCLRModel.criterion", "imagenette_benchmark.NNCLRModel.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", ",", "p0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", ",", "p1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "z0", "=", "self", ".", "memory_bank", "(", "z0", ",", "update", "=", "False", ")", "\n", "z1", "=", "self", ".", "memory_bank", "(", "z1", ",", "update", "=", "True", ")", "\n", "loss", "=", "0.5", "*", "(", "self", ".", "criterion", "(", "z0", ",", "p1", ")", "+", "self", ".", "criterion", "(", "z1", ",", "p0", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.NNCLRModel.configure_optimizers": [[476, 485], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "imagenette_benchmark.NNCLRModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SwaVModel.__init__": [[488, 502], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SwaVProjectionHead", "lightly.models.modules.heads.SwaVPrototypes", "lightly.loss.SwaVLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "\n", "self", ".", "projection_head", "=", "heads", ".", "SwaVProjectionHead", "(", "feature_dim", ",", "2048", ",", "128", ")", "\n", "self", ".", "prototypes", "=", "heads", ".", "SwaVPrototypes", "(", "128", ",", "3000", ")", "# use 3000 prototypes", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "SwaVLoss", "(", "sinkhorn_gather_distributed", "=", "gather_distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SwaVModel.forward": [[503, 508], ["imagenette_benchmark.SwaVModel.backbone().flatten", "imagenette_benchmark.SwaVModel.projection_head", "torch.functional.normalize", "torch.functional.normalize", "imagenette_benchmark.SwaVModel.prototypes", "imagenette_benchmark.SwaVModel.backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "return", "self", ".", "prototypes", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SwaVModel.training_step": [[509, 532], ["imagenette_benchmark.SwaVModel.prototypes.normalize", "imagenette_benchmark.SwaVModel.criterion", "imagenette_benchmark.SwaVModel.log", "imagenette_benchmark.SwaVModel.forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\n", "# normalize the prototypes so they are on the unit sphere", "\n", "        ", "self", ".", "prototypes", ".", "normalize", "(", ")", "\n", "\n", "# the multi-crop dataloader returns a list of image crops where the", "\n", "# first two items are the high resolution crops and the rest are low", "\n", "# resolution crops", "\n", "multi_crops", ",", "_", ",", "_", "=", "batch", "\n", "multi_crop_features", "=", "[", "self", ".", "forward", "(", "x", ")", "for", "x", "in", "multi_crops", "]", "\n", "\n", "# split list of crop features into high and low resolution", "\n", "high_resolution_features", "=", "multi_crop_features", "[", ":", "2", "]", "\n", "low_resolution_features", "=", "multi_crop_features", "[", "2", ":", "]", "\n", "\n", "# calculate the SwaV loss", "\n", "loss", "=", "self", ".", "criterion", "(", "\n", "high_resolution_features", ",", "\n", "low_resolution_features", "\n", ")", "\n", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.SwaVModel.configure_optimizers": [[533, 541], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "imagenette_benchmark.SwaVModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1e-3", "*", "lr_factor", ",", "\n", "weight_decay", "=", "1e-6", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DINOModel.__init__": [[544, 561], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.DINOProjectionHead", "copy.deepcopy", "lightly.models.modules.heads.DINOProjectionHead", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.DINOLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "head", "=", "heads", ".", "DINOProjectionHead", "(", "feature_dim", ",", "2048", ",", "256", ",", "2048", ",", "batch_norm", "=", "True", ")", "\n", "self", ".", "teacher_backbone", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "teacher_head", "=", "heads", ".", "DINOProjectionHead", "(", "feature_dim", ",", "2048", ",", "256", ",", "2048", ",", "batch_norm", "=", "True", ")", "\n", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "teacher_backbone", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "teacher_head", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "DINOLoss", "(", "output_dim", "=", "2048", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DINOModel.forward": [[562, 566], ["imagenette_benchmark.DINOModel.backbone().flatten", "imagenette_benchmark.DINOModel.head", "imagenette_benchmark.DINOModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "head", "(", "y", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DINOModel.forward_teacher": [[567, 571], ["imagenette_benchmark.DINOModel.teacher_backbone().flatten", "imagenette_benchmark.DINOModel.teacher_head", "imagenette_benchmark.DINOModel.teacher_backbone"], "methods", ["None"], ["", "def", "forward_teacher", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "teacher_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "teacher_head", "(", "y", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DINOModel.training_step": [[572, 583], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "imagenette_benchmark.DINOModel.criterion", "imagenette_benchmark.DINOModel.log", "view.to", "imagenette_benchmark.DINOModel.forward_teacher", "imagenette_benchmark.DINOModel.forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.forward_teacher", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "utils", ".", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "teacher_backbone", ",", "m", "=", "0.99", ")", "\n", "utils", ".", "update_momentum", "(", "self", ".", "head", ",", "self", ".", "teacher_head", ",", "m", "=", "0.99", ")", "\n", "views", ",", "_", ",", "_", "=", "batch", "\n", "views", "=", "[", "view", ".", "to", "(", "self", ".", "device", ")", "for", "view", "in", "views", "]", "\n", "global_views", "=", "views", "[", ":", "2", "]", "\n", "teacher_out", "=", "[", "self", ".", "forward_teacher", "(", "view", ")", "for", "view", "in", "global_views", "]", "\n", "student_out", "=", "[", "self", ".", "forward", "(", "view", ")", "for", "view", "in", "views", "]", "\n", "loss", "=", "self", ".", "criterion", "(", "teacher_out", ",", "student_out", ",", "epoch", "=", "self", ".", "current_epoch", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DINOModel.configure_optimizers": [[584, 595], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "list", "list", "imagenette_benchmark.DINOModel.backbone.parameters", "imagenette_benchmark.DINOModel.head.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "param", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "head", ".", "parameters", "(", ")", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "param", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCL.__init__": [[598, 609], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimCLRProjectionHead", "lightly.loss.DCLLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "SimCLRProjectionHead", "(", "feature_dim", ",", "feature_dim", ",", "128", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "DCLLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCL.forward": [[610, 614], ["imagenette_benchmark.DCL.backbone().flatten", "imagenette_benchmark.DCL.projection_head", "imagenette_benchmark.DCL.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCL.training_step": [[615, 622], ["imagenette_benchmark.DCL.forward", "imagenette_benchmark.DCL.forward", "imagenette_benchmark.DCL.criterion", "imagenette_benchmark.DCL.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCL.configure_optimizers": [[623, 632], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "imagenette_benchmark.DCL.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCLW.__init__": [[635, 646], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimCLRProjectionHead", "lightly.loss.DCLWLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torchvision.models.resnet18.children", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "feature_dim", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", "-", "1", "]", ".", "in_features", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "SimCLRProjectionHead", "(", "feature_dim", ",", "feature_dim", ",", "128", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "DCLWLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCLW.forward": [[647, 651], ["imagenette_benchmark.DCLW.backbone().flatten", "imagenette_benchmark.DCLW.projection_head", "imagenette_benchmark.DCLW.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCLW.training_step": [[652, 659], ["imagenette_benchmark.DCLW.forward", "imagenette_benchmark.DCLW.forward", "imagenette_benchmark.DCLW.criterion", "imagenette_benchmark.DCLW.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.DCLW.configure_optimizers": [[660, 669], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "imagenette_benchmark.DCLW.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.__init__": [[672, 696], ["lightly.utils.BenchmarkModule.__init__", "torchvision.models.vit_b_32", "torch.Parameter", "torch.Parameter", "lightly.models.modules.masked_autoencoder.MAEBackbone.from_vit", "lightly.models.modules.masked_autoencoder.MAEDecoder", "torch.MSELoss", "torch.MSELoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.from_vit"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "\n", "decoder_dim", "=", "512", "\n", "vit", "=", "torchvision", ".", "models", ".", "vit_b_32", "(", "pretrained", "=", "False", ")", "\n", "\n", "self", ".", "warmup_epochs", "=", "40", "if", "max_epochs", ">=", "800", "else", "20", "\n", "self", ".", "mask_ratio", "=", "0.75", "\n", "self", ".", "patch_size", "=", "vit", ".", "patch_size", "\n", "self", ".", "sequence_length", "=", "vit", ".", "seq_length", "\n", "self", ".", "mask_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "decoder_dim", ")", ")", "\n", "self", ".", "backbone", "=", "masked_autoencoder", ".", "MAEBackbone", ".", "from_vit", "(", "vit", ")", "\n", "self", ".", "decoder", "=", "masked_autoencoder", ".", "MAEDecoder", "(", "\n", "seq_length", "=", "vit", ".", "seq_length", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "16", ",", "\n", "embed_input_dim", "=", "vit", ".", "hidden_dim", ",", "\n", "hidden_dim", "=", "decoder_dim", ",", "\n", "mlp_dim", "=", "decoder_dim", "*", "4", ",", "\n", "out_dim", "=", "vit", ".", "patch_size", "**", "2", "*", "3", ",", "\n", "dropout", "=", "0", ",", "\n", "attention_dropout", "=", "0", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_encoder": [[697, 699], ["imagenette_benchmark.MAEModel.backbone.encode"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEBackbone.encode"], ["", "def", "forward_encoder", "(", "self", ",", "images", ",", "idx_keep", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "backbone", ".", "encode", "(", "images", ",", "idx_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_decoder": [[700, 714], ["imagenette_benchmark.MAEModel.decoder.embed", "lightly.models.utils.repeat_token", "lightly.models.utils.set_at_index", "imagenette_benchmark.MAEModel.decoder.decode", "lightly.models.utils.get_at_index", "imagenette_benchmark.MAEModel.decoder.predict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.embedding.embedding.SelfSupervisedEmbedding.embed", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.repeat_token", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.set_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.predict"], ["", "def", "forward_decoder", "(", "self", ",", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", ":", "\n", "# build decoder input", "\n", "        ", "batch_size", "=", "x_encoded", ".", "shape", "[", "0", "]", "\n", "x_decode", "=", "self", ".", "decoder", ".", "embed", "(", "x_encoded", ")", "\n", "x_masked", "=", "utils", ".", "repeat_token", "(", "self", ".", "mask_token", ",", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ")", "\n", "x_masked", "=", "utils", ".", "set_at_index", "(", "x_masked", ",", "idx_keep", ",", "x_decode", ")", "\n", "\n", "# decoder forward pass", "\n", "x_decoded", "=", "self", ".", "decoder", ".", "decode", "(", "x_masked", ")", "\n", "\n", "# predict pixel values for masked tokens", "\n", "x_pred", "=", "utils", ".", "get_at_index", "(", "x_decoded", ",", "idx_mask", ")", "\n", "x_pred", "=", "self", ".", "decoder", ".", "predict", "(", "x_pred", ")", "\n", "return", "x_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.training_step": [[715, 735], ["lightly.models.utils.random_token_mask", "imagenette_benchmark.MAEModel.forward_encoder", "imagenette_benchmark.MAEModel.forward_decoder", "lightly.models.utils.patchify", "lightly.models.utils.get_at_index", "imagenette_benchmark.MAEModel.criterion", "imagenette_benchmark.MAEModel.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.random_token_mask", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_encoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.forward_decoder", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.patchify", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.get_at_index", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "images", ",", "_", ",", "_", "=", "batch", "\n", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "idx_keep", ",", "idx_mask", "=", "utils", ".", "random_token_mask", "(", "\n", "size", "=", "(", "batch_size", ",", "self", ".", "sequence_length", ")", ",", "\n", "mask_ratio", "=", "self", ".", "mask_ratio", ",", "\n", "device", "=", "images", ".", "device", ",", "\n", ")", "\n", "x_encoded", "=", "self", ".", "forward_encoder", "(", "images", ",", "idx_keep", ")", "\n", "x_pred", "=", "self", ".", "forward_decoder", "(", "x_encoded", ",", "idx_keep", ",", "idx_mask", ")", "\n", "\n", "# get image patches for masked tokens", "\n", "patches", "=", "utils", ".", "patchify", "(", "images", ",", "self", ".", "patch_size", ")", "\n", "# must adjust idx_mask for missing class token", "\n", "target", "=", "utils", ".", "get_at_index", "(", "patches", ",", "idx_mask", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "x_pred", ",", "target", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.configure_optimizers": [[736, 745], ["torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "imagenette_benchmark.MAEModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1.5e-4", "*", "lr_factor", ",", "\n", "weight_decay", "=", "0.05", ",", "\n", "betas", "=", "(", "0.9", ",", "0.95", ")", ",", "\n", ")", "\n", "cosine_with_warmup_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optim", ",", "self", ".", "scale_lr", ")", "\n", "return", "[", "optim", "]", ",", "[", "cosine_with_warmup_scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.MAEModel.scale_lr": [[746, 751], ["math.cos"], "methods", ["None"], ["", "def", "scale_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "self", ".", "warmup_epochs", ":", "\n", "            ", "return", "epoch", "/", "self", ".", "warmup_epochs", "\n", "", "else", ":", "\n", "            ", "return", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "epoch", "-", "self", ".", "warmup_epochs", ")", "/", "(", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.imagenette_benchmark.get_data_loaders": [[161, 200], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "get_data_loaders", "(", "batch_size", ":", "int", ",", "model", ")", ":", "\n", "    ", "\"\"\"Helper method to create dataloaders for ssl, kNN train and kNN test\n\n    Args:\n        batch_size: Desired batch size for all dataloaders\n    \"\"\"", "\n", "col_fn", "=", "collate_fn", "\n", "if", "model", "==", "SwaVModel", ":", "\n", "        ", "col_fn", "=", "swav_collate_fn", "\n", "", "elif", "model", "==", "DINOModel", ":", "\n", "        ", "col_fn", "=", "dino_collate_fn", "\n", "", "elif", "model", "==", "MAEModel", ":", "\n", "        ", "col_fn", "=", "mae_collate_fn", "\n", "", "dataloader_train_ssl", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train_ssl", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "col_fn", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "dataloader_train_kNN", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train_kNN", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "dataloader_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_test", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "return", "dataloader_train_ssl", ",", "dataloader_train_kNN", ",", "dataloader_test", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.MocoModel.__init__": [[225, 247], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.MoCoProjectionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NTXentLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "\n", "# create a ResNet backbone and remove the classification head", "\n", "num_splits", "=", "0", "if", "sync_batchnorm", "else", "8", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ",", "num_splits", "=", "num_splits", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "\n", "# create a moco model based on ResNet", "\n", "self", ".", "projection_head", "=", "heads", ".", "MoCoProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "backbone_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "projection_head_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "projection_head", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "backbone_momentum", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "projection_head_momentum", ")", "\n", "\n", "# create our loss with the optional memory bank", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", "\n", "temperature", "=", "0.1", ",", "\n", "memory_bank_size", "=", "4096", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.MocoModel.forward": [[249, 252], ["cifar10_benchmark.MocoModel.backbone().flatten", "cifar10_benchmark.MocoModel.projection_head", "cifar10_benchmark.MocoModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "return", "self", ".", "projection_head", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.MocoModel.training_step": [[253, 278], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "cifar10_benchmark.MocoModel.criterion", "cifar10_benchmark.MocoModel.criterion", "cifar10_benchmark.MocoModel.log", "lightly.models.utils.batch_shuffle", "cifar10_benchmark.MocoModel.backbone().flatten", "cifar10_benchmark.MocoModel.projection_head", "cifar10_benchmark.MocoModel.backbone_momentum().flatten", "cifar10_benchmark.MocoModel.projection_head_momentum", "lightly.models.utils.batch_unshuffle", "cifar10_benchmark.MocoModel.training_step.step"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "\n", "# update momentum", "\n", "utils", ".", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "backbone_momentum", ",", "0.99", ")", "\n", "utils", ".", "update_momentum", "(", "self", ".", "projection_head", ",", "self", ".", "projection_head_momentum", ",", "0.99", ")", "\n", "\n", "def", "step", "(", "x0_", ",", "x1_", ")", ":", "\n", "            ", "x1_", ",", "shuffle", "=", "utils", ".", "batch_shuffle", "(", "x1_", ",", "distributed", "=", "distributed", ")", "\n", "x0_", "=", "self", ".", "backbone", "(", "x0_", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x0_", "=", "self", ".", "projection_head", "(", "x0_", ")", "\n", "\n", "x1_", "=", "self", ".", "backbone_momentum", "(", "x1_", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x1_", "=", "self", ".", "projection_head_momentum", "(", "x1_", ")", "\n", "x1_", "=", "utils", ".", "batch_unshuffle", "(", "x1_", ",", "shuffle", ",", "distributed", "=", "distributed", ")", "\n", "return", "x0_", ",", "x1_", "\n", "\n", "# We use a symmetric loss (model trains faster at little compute overhead)", "\n", "# https://colab.research.google.com/github/facebookresearch/moco/blob/colab-notebook/colab/moco_cifar10_demo.ipynb", "\n", "", "loss_1", "=", "self", ".", "criterion", "(", "*", "step", "(", "x0", ",", "x1", ")", ")", "\n", "loss_2", "=", "self", ".", "criterion", "(", "*", "step", "(", "x1", ",", "x0", ")", ")", "\n", "\n", "loss", "=", "0.5", "*", "(", "loss_1", "+", "loss_2", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.MocoModel.configure_optimizers": [[279, 289], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "list", "list", "cifar10_benchmark.MocoModel.backbone.parameters", "cifar10_benchmark.MocoModel.projection_head.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "projection_head", ".", "parameters", "(", ")", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimCLRModel.__init__": [[292, 302], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimCLRProjectionHead", "lightly.loss.NTXentLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "SimCLRProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimCLRModel.forward": [[303, 307], ["cifar10_benchmark.SimCLRModel.backbone().flatten", "cifar10_benchmark.SimCLRModel.projection_head", "cifar10_benchmark.SimCLRModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimCLRModel.training_step": [[308, 315], ["cifar10_benchmark.SimCLRModel.forward", "cifar10_benchmark.SimCLRModel.forward", "cifar10_benchmark.SimCLRModel.criterion", "cifar10_benchmark.SimCLRModel.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimCLRModel.configure_optimizers": [[316, 325], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "cifar10_benchmark.SimCLRModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimSiamModel.__init__": [[328, 353], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimSiamPredictionHead", "lightly.models.modules.heads.ProjectionHead", "lightly.loss.NegativeCosineSimilarity", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "prediction_head", "=", "heads", ".", "SimSiamPredictionHead", "(", "2048", ",", "512", ",", "2048", ")", "\n", "# use a 2-layer projection head for cifar10 as described in the paper", "\n", "self", ".", "projection_head", "=", "heads", ".", "ProjectionHead", "(", "[", "\n", "(", "\n", "512", ",", "\n", "2048", ",", "\n", "nn", ".", "BatchNorm1d", "(", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ",", "\n", "(", "\n", "2048", ",", "\n", "2048", ",", "\n", "nn", ".", "BatchNorm1d", "(", "2048", ")", ",", "\n", "None", "\n", ")", "\n", "]", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NegativeCosineSimilarity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimSiamModel.forward": [[354, 360], ["cifar10_benchmark.SimSiamModel.backbone().flatten", "cifar10_benchmark.SimSiamModel.projection_head", "cifar10_benchmark.SimSiamModel.prediction_head", "z.detach.detach.detach", "cifar10_benchmark.SimSiamModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "f", ")", "\n", "p", "=", "self", ".", "prediction_head", "(", "z", ")", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "return", "z", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimSiamModel.training_step": [[361, 368], ["cifar10_benchmark.SimSiamModel.forward", "cifar10_benchmark.SimSiamModel.forward", "cifar10_benchmark.SimSiamModel.log", "cifar10_benchmark.SimSiamModel.criterion", "cifar10_benchmark.SimSiamModel.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", ",", "p0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", ",", "p1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "0.5", "*", "(", "self", ".", "criterion", "(", "z0", ",", "p1", ")", "+", "self", ".", "criterion", "(", "z1", ",", "p0", ")", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SimSiamModel.configure_optimizers": [[369, 378], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "cifar10_benchmark.SimSiamModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", ",", "#\u00a0no lr-scaling, results in better training stability", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BarlowTwinsModel.__init__": [[380, 405], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.ProjectionHead", "lightly.loss.BarlowTwinsLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "# use a 2-layer projection head for cifar10 as described in the paper", "\n", "self", ".", "projection_head", "=", "heads", ".", "ProjectionHead", "(", "[", "\n", "(", "\n", "512", ",", "\n", "2048", ",", "\n", "nn", ".", "BatchNorm1d", "(", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ",", "\n", "(", "\n", "2048", ",", "\n", "2048", ",", "\n", "None", ",", "\n", "None", "\n", ")", "\n", "]", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "BarlowTwinsLoss", "(", "gather_distributed", "=", "gather_distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BarlowTwinsModel.forward": [[406, 410], ["cifar10_benchmark.BarlowTwinsModel.backbone().flatten", "cifar10_benchmark.BarlowTwinsModel.projection_head", "cifar10_benchmark.BarlowTwinsModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BarlowTwinsModel.training_step": [[411, 418], ["cifar10_benchmark.BarlowTwinsModel.forward", "cifar10_benchmark.BarlowTwinsModel.forward", "cifar10_benchmark.BarlowTwinsModel.criterion", "cifar10_benchmark.BarlowTwinsModel.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BarlowTwinsModel.configure_optimizers": [[419, 428], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "cifar10_benchmark.BarlowTwinsModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.__init__": [[430, 450], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.BYOLProjectionHead", "lightly.models.modules.heads.BYOLPredictionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NegativeCosineSimilarity", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "\n", "# create a byol model based on ResNet", "\n", "self", ".", "projection_head", "=", "heads", ".", "BYOLProjectionHead", "(", "512", ",", "1024", ",", "256", ")", "\n", "self", ".", "prediction_head", "=", "heads", ".", "BYOLPredictionHead", "(", "256", ",", "1024", ",", "256", ")", "\n", "\n", "self", ".", "backbone_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "projection_head_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "projection_head", ")", "\n", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "backbone_momentum", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "projection_head_momentum", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NegativeCosineSimilarity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward": [[451, 456], ["cifar10_benchmark.BYOLModel.backbone().flatten", "cifar10_benchmark.BYOLModel.projection_head", "cifar10_benchmark.BYOLModel.prediction_head", "cifar10_benchmark.BYOLModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "y", ")", "\n", "p", "=", "self", ".", "prediction_head", "(", "z", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum": [[457, 462], ["cifar10_benchmark.BYOLModel.backbone_momentum().flatten", "cifar10_benchmark.BYOLModel.projection_head_momentum", "z.detach.detach.detach", "cifar10_benchmark.BYOLModel.backbone_momentum"], "methods", ["None"], ["", "def", "forward_momentum", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone_momentum", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head_momentum", "(", "y", ")", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.training_step": [[463, 474], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "cifar10_benchmark.BYOLModel.forward", "cifar10_benchmark.BYOLModel.forward_momentum", "cifar10_benchmark.BYOLModel.forward", "cifar10_benchmark.BYOLModel.forward_momentum", "cifar10_benchmark.BYOLModel.log", "cifar10_benchmark.BYOLModel.criterion", "cifar10_benchmark.BYOLModel.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.forward_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "utils", ".", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "backbone_momentum", ",", "m", "=", "0.99", ")", "\n", "utils", ".", "update_momentum", "(", "self", ".", "projection_head", ",", "self", ".", "projection_head_momentum", ",", "m", "=", "0.99", ")", "\n", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "p0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z0", "=", "self", ".", "forward_momentum", "(", "x0", ")", "\n", "p1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "z1", "=", "self", ".", "forward_momentum", "(", "x1", ")", "\n", "loss", "=", "0.5", "*", "(", "self", ".", "criterion", "(", "p0", ",", "z1", ")", "+", "self", ".", "criterion", "(", "p1", ",", "z0", ")", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.BYOLModel.configure_optimizers": [[475, 487], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "list", "list", "list", "cifar10_benchmark.BYOLModel.prediction_head.parameters", "cifar10_benchmark.BYOLModel.backbone.parameters", "cifar10_benchmark.BYOLModel.projection_head.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "projection_head", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "prediction_head", ".", "parameters", "(", ")", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SwaVModel.__init__": [[489, 502], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SwaVProjectionHead", "lightly.models.modules.heads.SwaVPrototypes", "lightly.loss.SwaVLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "\n", "self", ".", "projection_head", "=", "heads", ".", "SwaVProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "prototypes", "=", "heads", ".", "SwaVPrototypes", "(", "128", ",", "512", ")", "# use 512 prototypes", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "SwaVLoss", "(", "sinkhorn_gather_distributed", "=", "gather_distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SwaVModel.forward": [[503, 508], ["cifar10_benchmark.SwaVModel.backbone().flatten", "cifar10_benchmark.SwaVModel.projection_head", "torch.functional.normalize", "torch.functional.normalize", "cifar10_benchmark.SwaVModel.prototypes", "cifar10_benchmark.SwaVModel.backbone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "return", "self", ".", "prototypes", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SwaVModel.training_step": [[509, 531], ["cifar10_benchmark.SwaVModel.prototypes.normalize", "cifar10_benchmark.SwaVModel.criterion", "cifar10_benchmark.SwaVModel.log", "cifar10_benchmark.SwaVModel.forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# normalize the prototypes so they are on the unit sphere", "\n", "        ", "self", ".", "prototypes", ".", "normalize", "(", ")", "\n", "\n", "# the multi-crop dataloader returns a list of image crops where the", "\n", "# first two items are the high resolution crops and the rest are low", "\n", "# resolution crops", "\n", "multi_crops", ",", "_", ",", "_", "=", "batch", "\n", "multi_crop_features", "=", "[", "self", ".", "forward", "(", "x", ")", "for", "x", "in", "multi_crops", "]", "\n", "\n", "# split list of crop features into high and low resolution", "\n", "high_resolution_features", "=", "multi_crop_features", "[", ":", "2", "]", "\n", "low_resolution_features", "=", "multi_crop_features", "[", "2", ":", "]", "\n", "\n", "# calculate the SwaV loss", "\n", "loss", "=", "self", ".", "criterion", "(", "\n", "high_resolution_features", ",", "\n", "low_resolution_features", "\n", ")", "\n", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.SwaVModel.configure_optimizers": [[532, 540], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "cifar10_benchmark.SwaVModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1e-3", "*", "lr_factor", ",", "\n", "weight_decay", "=", "1e-6", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.NNCLRModel.__init__": [[543, 570], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.NNCLRPredictionHead", "lightly.models.modules.heads.ProjectionHead", "lightly.loss.NTXentLoss", "lightly.models.modules.NNMemoryBankModule", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "prediction_head", "=", "heads", ".", "NNCLRPredictionHead", "(", "256", ",", "4096", ",", "256", ")", "\n", "# use only a 2-layer projection head for cifar10", "\n", "self", ".", "projection_head", "=", "heads", ".", "ProjectionHead", "(", "[", "\n", "(", "\n", "512", ",", "\n", "2048", ",", "\n", "nn", ".", "BatchNorm1d", "(", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ",", "\n", "(", "\n", "2048", ",", "\n", "256", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "None", "\n", ")", "\n", "]", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", ")", "\n", "self", ".", "memory_bank", "=", "modules", ".", "NNMemoryBankModule", "(", "size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.NNCLRModel.forward": [[571, 577], ["cifar10_benchmark.NNCLRModel.backbone().flatten", "cifar10_benchmark.NNCLRModel.projection_head", "cifar10_benchmark.NNCLRModel.prediction_head", "z.detach.detach.detach", "cifar10_benchmark.NNCLRModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "y", ")", "\n", "p", "=", "self", ".", "prediction_head", "(", "z", ")", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "return", "z", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.NNCLRModel.training_step": [[578, 586], ["cifar10_benchmark.NNCLRModel.forward", "cifar10_benchmark.NNCLRModel.forward", "cifar10_benchmark.NNCLRModel.memory_bank", "cifar10_benchmark.NNCLRModel.memory_bank", "cifar10_benchmark.NNCLRModel.criterion", "cifar10_benchmark.NNCLRModel.criterion"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", ",", "p0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", ",", "p1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "z0", "=", "self", ".", "memory_bank", "(", "z0", ",", "update", "=", "False", ")", "\n", "z1", "=", "self", ".", "memory_bank", "(", "z1", ",", "update", "=", "True", ")", "\n", "loss", "=", "0.5", "*", "(", "self", ".", "criterion", "(", "z0", ",", "p1", ")", "+", "self", ".", "criterion", "(", "z1", ",", "p0", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.NNCLRModel.configure_optimizers": [[587, 596], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "cifar10_benchmark.NNCLRModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.__init__": [[599, 615], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "cifar10_benchmark.DINOModel._build_projection_head", "copy.deepcopy", "cifar10_benchmark.DINOModel._build_projection_head", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.DINOLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel._build_projection_head", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel._build_projection_head", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "head", "=", "self", ".", "_build_projection_head", "(", ")", "\n", "self", ".", "teacher_backbone", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "teacher_head", "=", "self", ".", "_build_projection_head", "(", ")", "\n", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "teacher_backbone", ")", "\n", "utils", ".", "deactivate_requires_grad", "(", "self", ".", "teacher_head", ")", "\n", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "DINOLoss", "(", "output_dim", "=", "2048", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel._build_projection_head": [[616, 624], ["lightly.models.modules.heads.DINOProjectionHead", "lightly.models.modules.heads.ProjectionHead", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.GELU", "torch.GELU"], "methods", ["None"], ["", "def", "_build_projection_head", "(", "self", ")", ":", "\n", "        ", "head", "=", "heads", ".", "DINOProjectionHead", "(", "512", ",", "2048", ",", "256", ",", "2048", ",", "batch_norm", "=", "True", ")", "\n", "# use only 2 layers for cifar10", "\n", "head", ".", "layers", "=", "heads", ".", "ProjectionHead", "(", "[", "\n", "(", "512", ",", "2048", ",", "nn", ".", "BatchNorm1d", "(", "2048", ")", ",", "nn", ".", "GELU", "(", ")", ")", ",", "\n", "(", "2048", ",", "256", ",", "None", ",", "None", ")", ",", "\n", "]", ")", ".", "layers", "\n", "return", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.forward": [[625, 629], ["cifar10_benchmark.DINOModel.backbone().flatten", "cifar10_benchmark.DINOModel.head", "cifar10_benchmark.DINOModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "head", "(", "y", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.forward_teacher": [[630, 634], ["cifar10_benchmark.DINOModel.teacher_backbone().flatten", "cifar10_benchmark.DINOModel.teacher_head", "cifar10_benchmark.DINOModel.teacher_backbone"], "methods", ["None"], ["", "def", "forward_teacher", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "teacher_backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "teacher_head", "(", "y", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.training_step": [[635, 646], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "cifar10_benchmark.DINOModel.criterion", "cifar10_benchmark.DINOModel.log", "view.to", "cifar10_benchmark.DINOModel.forward_teacher", "cifar10_benchmark.DINOModel.forward"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.forward_teacher", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "utils", ".", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "teacher_backbone", ",", "m", "=", "0.99", ")", "\n", "utils", ".", "update_momentum", "(", "self", ".", "head", ",", "self", ".", "teacher_head", ",", "m", "=", "0.99", ")", "\n", "views", ",", "_", ",", "_", "=", "batch", "\n", "views", "=", "[", "view", ".", "to", "(", "self", ".", "device", ")", "for", "view", "in", "views", "]", "\n", "global_views", "=", "views", "[", ":", "2", "]", "\n", "teacher_out", "=", "[", "self", ".", "forward_teacher", "(", "view", ")", "for", "view", "in", "global_views", "]", "\n", "student_out", "=", "[", "self", ".", "forward", "(", "view", ")", "for", "view", "in", "views", "]", "\n", "loss", "=", "self", ".", "criterion", "(", "teacher_out", ",", "student_out", ",", "epoch", "=", "self", ".", "current_epoch", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DINOModel.configure_optimizers": [[647, 658], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "list", "list", "cifar10_benchmark.DINOModel.backbone.parameters", "cifar10_benchmark.DINOModel.head.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "param", "=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "head", ".", "parameters", "(", ")", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "param", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCL.__init__": [[661, 671], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimCLRProjectionHead", "lightly.loss.DCLLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "SimCLRProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "DCLLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCL.forward": [[672, 676], ["cifar10_benchmark.DCL.backbone().flatten", "cifar10_benchmark.DCL.projection_head", "cifar10_benchmark.DCL.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCL.training_step": [[677, 684], ["cifar10_benchmark.DCL.forward", "cifar10_benchmark.DCL.forward", "cifar10_benchmark.DCL.criterion", "cifar10_benchmark.DCL.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCL.configure_optimizers": [[685, 694], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "cifar10_benchmark.DCL.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCLW.__init__": [[697, 707], ["lightly.utils.BenchmarkModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimCLRProjectionHead", "lightly.loss.DCLWLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_kNN", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataloader_kNN", ",", "num_classes", ")", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", ")", "\n", "self", ".", "projection_head", "=", "heads", ".", "SimCLRProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "DCLWLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCLW.forward": [[708, 712], ["cifar10_benchmark.DCLW.backbone().flatten", "cifar10_benchmark.DCLW.projection_head", "cifar10_benchmark.DCLW.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCLW.training_step": [[713, 720], ["cifar10_benchmark.DCLW.forward", "cifar10_benchmark.DCLW.forward", "cifar10_benchmark.DCLW.criterion", "cifar10_benchmark.DCLW.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "'train_loss_ssl'", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.DCLW.configure_optimizers": [[721, 730], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "cifar10_benchmark.DCLW.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", "*", "lr_factor", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.benchmarks.cifar10_benchmark.get_data_loaders": [[186, 223], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "get_data_loaders", "(", "batch_size", ":", "int", ",", "model", ")", ":", "\n", "    ", "\"\"\"Helper method to create dataloaders for ssl, kNN train and kNN test\n\n    Args:\n        batch_size: Desired batch size for all dataloaders\n    \"\"\"", "\n", "col_fn", "=", "collate_fn", "\n", "if", "model", "==", "SwaVModel", ":", "\n", "        ", "col_fn", "=", "swav_collate_fn", "\n", "", "elif", "model", "==", "DINOModel", ":", "\n", "        ", "col_fn", "=", "dino_collate_fn", "\n", "", "dataloader_train_ssl", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train_ssl", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "col_fn", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "dataloader_train_kNN", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train_kNN", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "dataloader_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_test", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "return", "dataloader_train_ssl", ",", "dataloader_train_kNN", ",", "dataloader_test", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.code_examples.python_create_frame_predictions.model_predict": [[9, 15], ["None"], "function", ["None"], ["def", "model_predict", "(", "frame", ")", "->", "List", "[", "Dict", "]", ":", "\n", "# This function must be overwritten to generate predictions for a frame using", "\n", "# a prediction model of your choice. Here we just return an example prediction.", "\n", "#\u00a0See https://docs.lightly.ai/docker/advanced/datasource_predictions.html#prediction-format", "\n", "# for possible prediction formats.", "\n", "    ", "return", "[", "{", "'category_id'", ":", "0", ",", "'bbox'", ":", "[", "0", ",", "10", ",", "100", ",", "30", "]", ",", "'score'", ":", "0.8", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_pizza_filter.MyModel.__init__": [[156, 168], ["pytorch_lightning.LightningModule.__init__", "tutorial_pizza_filter.MyModel.save_hyperparameters", "torchvision.models.resnet18", "torch.nn.Linear", "torchmetrics.Accuracy"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "# load a pretrained resnet from torchvision", "\n", "self", ".", "model", "=", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "\n", "# add new linear output layer (transfer learning)", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "num_ftrs", ",", "2", ")", "\n", "\n", "self", ".", "accuracy", "=", "torchmetrics", ".", "Accuracy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_pizza_filter.MyModel.forward": [[169, 171], ["tutorial_pizza_filter.MyModel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_pizza_filter.MyModel.training_step": [[172, 178], ["tutorial_pizza_filter.MyModel.", "torch.nn.functional.cross_entropy", "tutorial_pizza_filter.MyModel.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ",", "prog_bar", "=", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_pizza_filter.MyModel.validation_step": [[179, 187], ["tutorial_pizza_filter.MyModel.", "torch.nn.functional.cross_entropy", "torch.nn.functional.softmax", "tutorial_pizza_filter.MyModel.accuracy", "tutorial_pizza_filter.MyModel.log", "tutorial_pizza_filter.MyModel.log", "tutorial_pizza_filter.MyModel.accuracy.compute"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "y_hat", ",", "y", ")", "\n", "y_hat", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "self", ".", "accuracy", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "'val_loss'", ",", "loss", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ")", "\n", "self", ".", "log", "(", "'val_acc'", ",", "self", ".", "accuracy", ".", "compute", "(", ")", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_pizza_filter.MyModel.configure_optimizers": [[188, 190], ["torch.optim.SGD", "tutorial_pizza_filter.MyModel.model.fc.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "fc", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "momentum", "=", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_active_learning_detectron2.try_get_token_and_id_from_env": [[136, 140], ["os.getenv", "os.getenv"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.utils.getenv"], ["def", "try_get_token_and_id_from_env", "(", ")", ":", "\n", "    ", "token", "=", "os", ".", "getenv", "(", "'TOKEN'", ",", "YOUR_TOKEN", ")", "\n", "dataset_id", "=", "os", ".", "getenv", "(", "'AL_TUTORIAL_DATASET_ID'", ",", "YOUR_DATASET_ID", ")", "\n", "return", "token", ",", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_active_learning_detectron2.predict_and_overlay": [[211, 222], ["cv2.imread", "model", "detectron2.utils.visualizer.Visualizer", "detectron2.utils.visualizer.Visualizer.draw_instance_predictions", "matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "matplotlib.tight_layout", "detectron2.data.MetadataCatalog.get", "out[].to", "v.draw_instance_predictions.get_image"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.test_download.MockedRequestsModulePartialResponse.get"], ["def", "predict_and_overlay", "(", "model", ",", "filename", ")", ":", "\n", "# helper method to run the model on an image and overlay the predictions", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "filename", ")", "\n", "out", "=", "model", "(", "im", ")", "\n", "# We can use `Visualizer` to draw the predictions on the image.", "\n", "v", "=", "Visualizer", "(", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "MetadataCatalog", ".", "get", "(", "cfg", ".", "DATASETS", ".", "TRAIN", "[", "0", "]", ")", ",", "scale", "=", "1.2", ")", "\n", "out", "=", "v", ".", "draw_instance_predictions", "(", "out", "[", "\"instances\"", "]", ".", "to", "(", "\"cpu\"", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "12", ")", ")", "\n", "plt", ".", "imshow", "(", "out", ".", "get_image", "(", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_active_learning_detectron2.convert_bbox_detectron2lightly": [[227, 246], ["zip", "lightly.active_learning.utils.object_detection_output.ObjectDetectionOutput.from_scores", "bbox_raw.cpu().numpy", "boxes.append", "outputs[].scores.cpu().numpy", "outputs[].pred_classes.cpu().numpy().tolist", "lightly.active_learning.utils.bounding_box.BoundingBox", "bbox_raw.cpu", "outputs[].scores.cpu", "outputs[].pred_classes.cpu().numpy", "outputs[].pred_classes.cpu"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.object_detection_output.ObjectDetectionOutput.from_scores"], ["", "def", "convert_bbox_detectron2lightly", "(", "outputs", ")", ":", "\n", "# convert detectron2 predictions into lightly format", "\n", "    ", "height", ",", "width", "=", "outputs", "[", "'instances'", "]", ".", "image_size", "\n", "boxes", "=", "[", "]", "\n", "\n", "for", "(", "bbox_raw", ",", "score", ",", "class_idx", ")", "in", "zip", "(", "outputs", "[", "'instances'", "]", ".", "pred_boxes", ".", "tensor", ",", "\n", "outputs", "[", "'instances'", "]", ".", "scores", ",", "\n", "outputs", "[", "'instances'", "]", ".", "pred_classes", ")", ":", "\n", "        ", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "bbox_raw", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x0", "/=", "width", "\n", "y0", "/=", "height", "\n", "x1", "/=", "width", "\n", "y1", "/=", "height", "\n", "\n", "boxes", ".", "append", "(", "BoundingBox", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ")", "\n", "", "output", "=", "ObjectDetectionOutput", ".", "from_scores", "(", "\n", "boxes", ",", "outputs", "[", "'instances'", "]", ".", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "outputs", "[", "'instances'", "]", ".", "pred_classes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_active_learning.CSVEmbeddingDataset.__init__": [[149, 173], ["dict", "open", "csv.reader", "list", "header_row.index", "header_row.index", "sorted", "zip", "numpy.array", "int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index"], ["    ", "def", "__init__", "(", "self", ",", "path_to_embeddings_csv", ":", "str", ")", ":", "\n", "        ", "with", "open", "(", "path_to_embeddings_csv", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "csv", ".", "reader", "(", "f", ")", "\n", "\n", "rows", "=", "list", "(", "data", ")", "\n", "header_row", "=", "rows", "[", "0", "]", "\n", "rows_without_header", "=", "rows", "[", "1", ":", "]", "\n", "\n", "index_filenames", "=", "header_row", ".", "index", "(", "'filenames'", ")", "\n", "filenames", "=", "[", "row", "[", "index_filenames", "]", "for", "row", "in", "rows_without_header", "]", "\n", "\n", "index_labels", "=", "header_row", ".", "index", "(", "'labels'", ")", "\n", "labels", "=", "[", "row", "[", "index_labels", "]", "for", "row", "in", "rows_without_header", "]", "\n", "\n", "embeddings", "=", "rows_without_header", "\n", "indexes_to_delete", "=", "sorted", "(", "[", "index_filenames", ",", "index_labels", "]", ",", "reverse", "=", "True", ")", "\n", "for", "embedding_row", "in", "embeddings", ":", "\n", "                ", "for", "index_to_delete", "in", "indexes_to_delete", ":", "\n", "                    ", "del", "embedding_row", "[", "index_to_delete", "]", "\n", "\n", "# create the dataset as a dictionary mapping from the filename to a tuple of the embedding and the label", "\n", "", "", "", "self", ".", "dataset", ":", "Dict", "[", "str", ",", "Tuple", "[", "np", ".", "ndarray", ",", "int", "]", "]", "=", "dict", "(", "[", "(", "filename", ",", "(", "np", ".", "array", "(", "embedding_row", ",", "dtype", "=", "float", ")", ",", "int", "(", "label", ")", ")", ")", "\n", "for", "filename", ",", "embedding_row", ",", "label", "in", "zip", "(", "filenames", ",", "embeddings", ",", "labels", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_active_learning.CSVEmbeddingDataset.get_features": [[174, 177], ["numpy.array"], "methods", ["None"], ["", "def", "get_features", "(", "self", ",", "filenames", ":", "List", "[", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "features_array", "=", "np", ".", "array", "(", "[", "self", ".", "dataset", "[", "filename", "]", "[", "0", "]", "for", "filename", "in", "filenames", "]", ")", "\n", "return", "features_array", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.platform.tutorial_active_learning.CSVEmbeddingDataset.get_labels": [[178, 181], ["numpy.array"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ",", "filenames", ":", "List", "[", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "self", ".", "dataset", "[", "filename", "]", "[", "1", "]", "for", "filename", "in", "filenames", "]", ")", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simsiam_esa.SimSiam.__init__": [[158, 168], ["torch.Module.__init__", "lightly.models.modules.heads.SimSiamProjectionHead", "lightly.models.modules.heads.SimSiamPredictionHead"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "backbone", ",", "num_ftrs", ",", "proj_hidden_dim", ",", "pred_hidden_dim", ",", "out_dim", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "projection_head", "=", "SimSiamProjectionHead", "(", "\n", "num_ftrs", ",", "proj_hidden_dim", ",", "out_dim", "\n", ")", "\n", "self", ".", "prediction_head", "=", "SimSiamPredictionHead", "(", "\n", "out_dim", ",", "pred_hidden_dim", ",", "out_dim", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simsiam_esa.SimSiam.forward": [[170, 180], ["tutorial_simsiam_esa.SimSiam.backbone().flatten", "tutorial_simsiam_esa.SimSiam.projection_head", "tutorial_simsiam_esa.SimSiam.prediction_head", "z.detach.detach.detach", "tutorial_simsiam_esa.SimSiam.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# get representations", "\n", "        ", "f", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "# get projections", "\n", "z", "=", "self", ".", "projection_head", "(", "f", ")", "\n", "# get predictions", "\n", "p", "=", "self", ".", "prediction_head", "(", "z", ")", "\n", "# stop gradient", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "return", "z", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simsiam_esa.get_scatter_plot_with_thumbnails": [[339, 376], ["matplotlib.figure", "plt.figure.suptitle", "plt.figure.add_subplot", "numpy.array", "numpy.random.shuffle", "fig.add_subplot.set_aspect", "numpy.sum", "shown_images_idx.append", "int", "os.path.join", "PIL.Image.open", "torchvision.resize", "numpy.array", "matplotlib.AnnotationBbox", "fig.add_subplot.add_artist", "fig.add_subplot.get_data_ratio", "range", "numpy.min", "matplotlib.OffsetImage"], "function", ["None"], ["def", "get_scatter_plot_with_thumbnails", "(", ")", ":", "\n", "    ", "\"\"\"Creates a scatter plot with image overlays.\n    \"\"\"", "\n", "# initialize empty figure and add subplot", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "suptitle", "(", "'Scatter Plot of the Sentinel-2 Dataset'", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "# shuffle images and find out which images to show", "\n", "shown_images_idx", "=", "[", "]", "\n", "shown_images", "=", "np", ".", "array", "(", "[", "[", "1.", ",", "1.", "]", "]", ")", "\n", "iterator", "=", "[", "i", "for", "i", "in", "range", "(", "embeddings_2d", ".", "shape", "[", "0", "]", ")", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "iterator", ")", "\n", "for", "i", "in", "iterator", ":", "\n", "# only show image if it is sufficiently far away from the others", "\n", "        ", "dist", "=", "np", ".", "sum", "(", "(", "embeddings_2d", "[", "i", "]", "-", "shown_images", ")", "**", "2", ",", "1", ")", "\n", "if", "np", ".", "min", "(", "dist", ")", "<", "2e-3", ":", "\n", "            ", "continue", "\n", "", "shown_images", "=", "np", ".", "r_", "[", "shown_images", ",", "[", "embeddings_2d", "[", "i", "]", "]", "]", "\n", "shown_images_idx", ".", "append", "(", "i", ")", "\n", "\n", "# plot image overlays", "\n", "", "for", "idx", "in", "shown_images_idx", ":", "\n", "        ", "thumbnail_size", "=", "int", "(", "rcp", "[", "'figure.figsize'", "]", "[", "0", "]", "*", "2.", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path_to_data", ",", "filenames", "[", "idx", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "img", "=", "functional", ".", "resize", "(", "img", ",", "thumbnail_size", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img_box", "=", "osb", ".", "AnnotationBbox", "(", "\n", "osb", ".", "OffsetImage", "(", "img", ",", "cmap", "=", "plt", ".", "cm", ".", "gray_r", ")", ",", "\n", "embeddings_2d", "[", "idx", "]", ",", "\n", "pad", "=", "0.2", ",", "\n", ")", "\n", "ax", ".", "add_artist", "(", "img_box", ")", "\n", "\n", "# set aspect ratio", "\n", "", "ratio", "=", "1.", "/", "ax", ".", "get_data_ratio", "(", ")", "\n", "ax", ".", "set_aspect", "(", "ratio", ",", "adjustable", "=", "'box'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simsiam_esa.get_image_as_np_array": [[401, 407], ["PIL.Image.open", "numpy.asarray"], "function", ["None"], ["def", "get_image_as_np_array", "(", "filename", ":", "str", ")", ":", "\n", "    ", "\"\"\"Loads the image with filename and returns it as a numpy array.\n\n    \"\"\"", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "return", "np", ".", "asarray", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simsiam_esa.get_image_as_np_array_with_frame": [[409, 421], ["tutorial_simsiam_esa.get_image_as_np_array", "numpy.zeros", "framed_img.astype.astype"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.get_image_as_np_array"], ["", "def", "get_image_as_np_array_with_frame", "(", "filename", ":", "str", ",", "w", ":", "int", "=", "5", ")", ":", "\n", "    ", "\"\"\"Returns an image as a numpy array with a black frame of width w.\n\n    \"\"\"", "\n", "img", "=", "get_image_as_np_array", "(", "filename", ")", "\n", "ny", ",", "nx", ",", "_", "=", "img", ".", "shape", "\n", "# create an empty image with padding for the frame", "\n", "framed_img", "=", "np", ".", "zeros", "(", "(", "w", "+", "ny", "+", "w", ",", "w", "+", "nx", "+", "w", ",", "3", ")", ")", "\n", "framed_img", "=", "framed_img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# put the original image in the middle of the new one", "\n", "framed_img", "[", "w", ":", "-", "w", ",", "w", ":", "-", "w", "]", "=", "img", "\n", "return", "framed_img", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simsiam_esa.plot_nearest_neighbors_3x3": [[423, 450], ["matplotlib.figure", "plt.figure.suptitle", "filenames.index", "numpy.power().sum().squeeze", "enumerate", "numpy.argsort", "plt.figure.add_subplot", "os.path.join", "matplotlib.axis", "numpy.power().sum", "fig.add_subplot.set_title", "matplotlib.imshow", "matplotlib.imshow", "tutorial_simsiam_esa.get_image_as_np_array_with_frame", "tutorial_simsiam_esa.get_image_as_np_array", "numpy.power"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simsiam_esa.get_image_as_np_array_with_frame", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.get_image_as_np_array"], ["", "def", "plot_nearest_neighbors_3x3", "(", "example_image", ":", "str", ",", "i", ":", "int", ")", ":", "\n", "    ", "\"\"\"Plots the example image and its eight nearest neighbors.\n\n    \"\"\"", "\n", "n_subplots", "=", "9", "\n", "# initialize empty figure", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "suptitle", "(", "f\"Nearest Neighbor Plot {i + 1}\"", ")", "\n", "#", "\n", "example_idx", "=", "filenames", ".", "index", "(", "example_image", ")", "\n", "# get distances to the cluster center", "\n", "distances", "=", "embeddings", "-", "embeddings", "[", "example_idx", "]", "\n", "distances", "=", "np", ".", "power", "(", "distances", ",", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "squeeze", "(", ")", "\n", "# sort indices by distance to the center", "\n", "nearest_neighbors", "=", "np", ".", "argsort", "(", "distances", ")", "[", ":", "n_subplots", "]", "\n", "# show images", "\n", "for", "plot_offset", ",", "plot_idx", "in", "enumerate", "(", "nearest_neighbors", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "3", ",", "3", ",", "plot_offset", "+", "1", ")", "\n", "# get the corresponding filename", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "path_to_data", ",", "filenames", "[", "plot_idx", "]", ")", "\n", "if", "plot_offset", "==", "0", ":", "\n", "            ", "ax", ".", "set_title", "(", "f\"Example Image\"", ")", "\n", "plt", ".", "imshow", "(", "get_image_as_np_array_with_frame", "(", "fname", ")", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "imshow", "(", "get_image_as_np_array", "(", "fname", ")", ")", "\n", "# let's disable the axis", "\n", "", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.SimCLRModel.__init__": [[145, 156], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.SimCLRProjectionHead", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "hidden_dim", "=", "resnet", ".", "fc", ".", "in_features", "\n", "self", ".", "projection_head", "=", "SimCLRProjectionHead", "(", "hidden_dim", ",", "hidden_dim", ",", "128", ")", "\n", "\n", "self", ".", "criterion", "=", "NTXentLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.SimCLRModel.forward": [[157, 161], ["tutorial_simclr_clothing.SimCLRModel.backbone().flatten", "tutorial_simclr_clothing.SimCLRModel.projection_head", "tutorial_simclr_clothing.SimCLRModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "z", "=", "self", ".", "projection_head", "(", "h", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.SimCLRModel.training_step": [[162, 169], ["tutorial_simclr_clothing.SimCLRModel.forward", "tutorial_simclr_clothing.SimCLRModel.forward", "tutorial_simclr_clothing.SimCLRModel.criterion", "tutorial_simclr_clothing.SimCLRModel.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "_", ",", "_", "=", "batch", "\n", "z0", "=", "self", ".", "forward", "(", "x0", ")", "\n", "z1", "=", "self", ".", "forward", "(", "x1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "z0", ",", "z1", ")", "\n", "self", ".", "log", "(", "\"train_loss_ssl\"", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.SimCLRModel.configure_optimizers": [[170, 178], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "tutorial_simclr_clothing.SimCLRModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "lr", "=", "6e-2", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "5e-4", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optim", ",", "max_epochs", "\n", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.generate_embeddings": [[200, 217], ["torch.cat", "torch.cat", "sklearn.preprocessing.normalize", "torch.no_grad", "torch.no_grad", "img.to.to", "model.backbone().flatten", "sklearn.preprocessing.normalize.append", "filenames.extend", "model.backbone"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["def", "generate_embeddings", "(", "model", ",", "dataloader", ")", ":", "\n", "    ", "\"\"\"Generates representations for all images in the dataloader with\n    the given model\n    \"\"\"", "\n", "\n", "embeddings", "=", "[", "]", "\n", "filenames", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "img", ",", "label", ",", "fnames", "in", "dataloader", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "model", ".", "device", ")", "\n", "emb", "=", "model", ".", "backbone", "(", "img", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "embeddings", ".", "append", "(", "emb", ")", "\n", "filenames", ".", "extend", "(", "fnames", ")", "\n", "\n", "", "", "embeddings", "=", "torch", ".", "cat", "(", "embeddings", ",", "0", ")", "\n", "embeddings", "=", "normalize", "(", "embeddings", ")", "\n", "return", "embeddings", ",", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.get_image_as_np_array": [[230, 235], ["PIL.Image.open", "numpy.asarray"], "function", ["None"], ["def", "get_image_as_np_array", "(", "filename", ":", "str", ")", ":", "\n", "    ", "\"\"\"Returns an image as an numpy array\n    \"\"\"", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "return", "np", ".", "asarray", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.plot_knn_examples": [[237, 263], ["sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors", "numpy.random.choice", "len", "matplotlib.figure", "enumerate", "sklearn.neighbors.NearestNeighbors", "plt.figure.add_subplot", "os.path.join", "matplotlib.imshow", "fig.add_subplot.set_title", "matplotlib.axis", "len", "tutorial_simclr_clothing.get_image_as_np_array"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.PCA.fit", "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_simclr_clothing.get_image_as_np_array"], ["", "def", "plot_knn_examples", "(", "embeddings", ",", "filenames", ",", "n_neighbors", "=", "3", ",", "num_examples", "=", "6", ")", ":", "\n", "    ", "\"\"\"Plots multiple rows of random images with their nearest neighbors\n    \"\"\"", "\n", "# lets look at the nearest neighbors for some samples", "\n", "# we use the sklearn library", "\n", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "n_neighbors", ")", ".", "fit", "(", "embeddings", ")", "\n", "distances", ",", "indices", "=", "nbrs", ".", "kneighbors", "(", "embeddings", ")", "\n", "\n", "# get 5 random samples", "\n", "samples_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "indices", ")", ",", "size", "=", "num_examples", ",", "replace", "=", "False", ")", "\n", "\n", "# loop through our randomly picked samples", "\n", "for", "idx", "in", "samples_idx", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "# loop through their nearest neighbors", "\n", "for", "plot_x_offset", ",", "neighbor_idx", "in", "enumerate", "(", "indices", "[", "idx", "]", ")", ":", "\n", "# add the subplot", "\n", "            ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "len", "(", "indices", "[", "idx", "]", ")", ",", "plot_x_offset", "+", "1", ")", "\n", "# get the correponding filename for the current index", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "path_to_data", ",", "filenames", "[", "neighbor_idx", "]", ")", "\n", "# plot the image", "\n", "plt", ".", "imshow", "(", "get_image_as_np_array", "(", "fname", ")", ")", "\n", "# set the title to the distance of the neighbor", "\n", "ax", ".", "set_title", "(", "f'd={distances[idx][plot_x_offset]:.3f}'", ")", "\n", "# let's disable the axis", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.HistogramNormalize.__init__": [[101, 103], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "number_bins", ":", "int", "=", "256", ")", ":", "\n", "        ", "self", ".", "number_bins", "=", "number_bins", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.HistogramNormalize.__call__": [[104, 116], ["numpy.histogram", "image_histogram.cumsum", "numpy.interp", "PIL.Image.fromarray", "image.flatten", "image.flatten", "numpy.interp.reshape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ":", "np", ".", "array", ")", "->", "Image", ":", "\n", "\n", "# get image histogram", "\n", "        ", "image_histogram", ",", "bins", "=", "np", ".", "histogram", "(", "\n", "image", ".", "flatten", "(", ")", ",", "self", ".", "number_bins", ",", "density", "=", "True", "\n", ")", "\n", "cdf", "=", "image_histogram", ".", "cumsum", "(", ")", "# cumulative distribution function", "\n", "cdf", "=", "255", "*", "cdf", "/", "cdf", "[", "-", "1", "]", "# normalize", "\n", "\n", "# use linear interpolation of cdf to find new pixel values", "\n", "image_equalized", "=", "np", ".", "interp", "(", "image", ".", "flatten", "(", ")", ",", "bins", "[", ":", "-", "1", "]", ",", "cdf", ")", "\n", "return", "Image", ".", "fromarray", "(", "image_equalized", ".", "reshape", "(", "image", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.GaussianNoise.__call__": [[130, 136], ["sample.mean", "numpy.random.randint", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["def", "__call__", "(", "self", ",", "sample", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "mu", "=", "sample", ".", "mean", "(", ")", "\n", "snr", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "4", ",", "high", "=", "8", ")", "\n", "sigma", "=", "mu", "/", "snr", "\n", "noise", "=", "torch", ".", "normal", "(", "torch", ".", "zeros", "(", "sample", ".", "shape", ")", ",", "sigma", ")", "\n", "return", "sample", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.MoCoModel.__init__": [[245, 268], ["pytorch_lightning.LightningModule.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.MoCoProjectionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NTXentLoss", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", ")", "\n", "\n", "# The backbone has output dimension 512 which defines", "\n", "# also the size of the hidden dimension. We select 128", "\n", "# for the output dimension.", "\n", "self", ".", "projection_head", "=", "MoCoProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "\n", "# add the momentum network", "\n", "self", ".", "backbone_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "projection_head_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "projection_head", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "backbone_momentum", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "projection_head_momentum", ")", "\n", "\n", "# create our loss with the memory bank", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", "\n", "temperature", "=", "0.1", ",", "memory_bank_size", "=", "4096", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.MoCoModel.training_step": [[270, 292], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "tutorial_custom_augmentations.MoCoModel.backbone().flatten", "tutorial_custom_augmentations.MoCoModel.projection_head", "lightly.models.utils.batch_shuffle", "tutorial_custom_augmentations.MoCoModel.backbone_momentum().flatten", "tutorial_custom_augmentations.MoCoModel.projection_head_momentum", "lightly.models.utils.batch_unshuffle", "tutorial_custom_augmentations.MoCoModel.criterion", "tutorial_custom_augmentations.MoCoModel.log", "tutorial_custom_augmentations.MoCoModel.backbone", "tutorial_custom_augmentations.MoCoModel.backbone_momentum"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x_q", ",", "x_k", ")", ",", "_", ",", "_", "=", "batch", "\n", "\n", "# update momentum", "\n", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "backbone_momentum", ",", "0.99", ")", "\n", "update_momentum", "(", "\n", "self", ".", "projection_head", ",", "self", ".", "projection_head_momentum", ",", "0.99", "\n", ")", "\n", "\n", "# get queries", "\n", "q", "=", "self", ".", "backbone", "(", "x_q", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "q", "=", "self", ".", "projection_head", "(", "q", ")", "\n", "\n", "# get keys", "\n", "k", ",", "shuffle", "=", "batch_shuffle", "(", "x_k", ")", "\n", "k", "=", "self", ".", "backbone_momentum", "(", "k", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "k", "=", "self", ".", "projection_head_momentum", "(", "k", ")", "\n", "k", "=", "batch_unshuffle", "(", "k", ",", "shuffle", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "q", ",", "k", ")", "\n", "self", ".", "log", "(", "\"train_loss_ssl\"", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.MoCoModel.configure_optimizers": [[293, 305], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "tutorial_custom_augmentations.MoCoModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "# sgd optimizer with momentum", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "0.1", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "1e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optim", ",", "max_epochs", "\n", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.tiff_loader": [[207, 214], ["open", "PIL.Image.open", "numpy.array"], "function", ["None"], ["def", "tiff_loader", "(", "f", ")", ":", "\n", "    ", "\"\"\"Loads a 16-bit tiff image and returns it as a numpy array.\n\n    \"\"\"", "\n", "with", "open", "(", "f", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "np", ".", "array", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.generate_embeddings": [[363, 378], ["torch.cat", "torch.cat", "sklearn.preprocessing.normalize", "torch.no_grad", "torch.no_grad", "img.to.to", "model.backbone().flatten", "sklearn.preprocessing.normalize.append", "filenames.extend", "model.backbone"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.heads.SwaVPrototypes.normalize"], ["def", "generate_embeddings", "(", "model", ",", "dataloader", ")", ":", "\n", "    ", "\"\"\"Generates representations for all images in the dataloader\"\"\"", "\n", "\n", "embeddings", "=", "[", "]", "\n", "filenames", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "img", ",", "label", ",", "fnames", "in", "dataloader", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "model", ".", "device", ")", "\n", "emb", "=", "model", ".", "backbone", "(", "img", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "embeddings", ".", "append", "(", "emb", ")", "\n", "filenames", ".", "extend", "(", "fnames", ")", "\n", "\n", "", "", "embeddings", "=", "torch", ".", "cat", "(", "embeddings", ",", "0", ")", "\n", "embeddings", "=", "normalize", "(", "embeddings", ")", "\n", "return", "embeddings", ",", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_custom_augmentations.plot_knn_multilabels": [[413, 439], ["sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors", "numpy.arange", "matplotlib.figure", "numpy.mean", "matplotlib.title", "matplotlib.bar", "matplotlib.bar", "matplotlib.xticks", "matplotlib.tight_layout", "sklearn.neighbors.NearestNeighbors"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.embeddings_2d.PCA.fit", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_meta_data.SampleMetaData.mean"], ["", "", "def", "plot_knn_multilabels", "(", "\n", "embeddings", ",", "multilabels", ",", "samples_idx", ",", "filenames", ",", "n_neighbors", "=", "50", "\n", ")", ":", "\n", "    ", "\"\"\"Plots multiple rows of random images with their nearest neighbors\"\"\"", "\n", "# lets look at the nearest neighbors for some samples", "\n", "# we use the sklearn library", "\n", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "n_neighbors", ")", ".", "fit", "(", "embeddings", ")", "\n", "_", ",", "indices", "=", "nbrs", ".", "kneighbors", "(", "embeddings", ")", "\n", "\n", "# position the bars", "\n", "bar_width", "=", "0.4", "\n", "r1", "=", "np", ".", "arange", "(", "multilabels", ".", "shape", "[", "1", "]", ")", "\n", "r2", "=", "r1", "+", "bar_width", "\n", "\n", "# loop through our randomly picked samples", "\n", "for", "idx", "in", "samples_idx", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "bars1", "=", "multilabels", "[", "idx", "]", "\n", "bars2", "=", "np", ".", "mean", "(", "multilabels", "[", "indices", "[", "idx", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "plt", ".", "title", "(", "filenames", "[", "idx", "]", ")", "\n", "plt", ".", "bar", "(", "r1", ",", "bars1", ",", "color", "=", "'steelblue'", ",", "edgecolor", "=", "'black'", ",", "width", "=", "bar_width", ")", "\n", "plt", ".", "bar", "(", "r2", ",", "bars2", ",", "color", "=", "'lightsteelblue'", ",", "edgecolor", "=", "'black'", ",", "width", "=", "bar_width", ")", "\n", "plt", ".", "xticks", "(", "0.5", "*", "(", "r1", "+", "r2", ")", ",", "classes", ",", "rotation", "=", "90", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.MocoModel.__init__": [[219, 240], ["pytorch_lightning.LightningModule.__init__", "lightly.models.ResNetGenerator", "torch.Sequential", "torch.Sequential", "lightly.models.modules.heads.MoCoProjectionHead", "copy.deepcopy", "copy.deepcopy", "lightly.models.utils.deactivate_requires_grad", "lightly.models.utils.deactivate_requires_grad", "lightly.loss.NTXentLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "list", "lightly.models.ResNetGenerator.children"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.resnet.ResNetGenerator", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# create a ResNet backbone and remove the classification head", "\n", "resnet", "=", "lightly", ".", "models", ".", "ResNetGenerator", "(", "'resnet-18'", ",", "1", ",", "num_splits", "=", "8", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", ")", "\n", "\n", "# create a moco model based on ResNet", "\n", "self", ".", "projection_head", "=", "MoCoProjectionHead", "(", "512", ",", "512", ",", "128", ")", "\n", "self", ".", "backbone_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "backbone", ")", "\n", "self", ".", "projection_head_momentum", "=", "copy", ".", "deepcopy", "(", "self", ".", "projection_head", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "backbone_momentum", ")", "\n", "deactivate_requires_grad", "(", "self", ".", "projection_head_momentum", ")", "\n", "\n", "# create our loss with the optional memory bank", "\n", "self", ".", "criterion", "=", "lightly", ".", "loss", ".", "NTXentLoss", "(", "\n", "temperature", "=", "0.1", ",", "\n", "memory_bank_size", "=", "memory_bank_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.MocoModel.training_step": [[241, 263], ["lightly.models.utils.update_momentum", "lightly.models.utils.update_momentum", "tutorial_moco_memory_bank.MocoModel.backbone().flatten", "tutorial_moco_memory_bank.MocoModel.projection_head", "lightly.models.utils.batch_shuffle", "tutorial_moco_memory_bank.MocoModel.backbone_momentum().flatten", "tutorial_moco_memory_bank.MocoModel.projection_head_momentum", "lightly.models.utils.batch_unshuffle", "tutorial_moco_memory_bank.MocoModel.criterion", "tutorial_moco_memory_bank.MocoModel.log", "tutorial_moco_memory_bank.MocoModel.backbone", "tutorial_moco_memory_bank.MocoModel.backbone_momentum"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.update_momentum", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_shuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.batch_unshuffle", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x_q", ",", "x_k", ")", ",", "_", ",", "_", "=", "batch", "\n", "\n", "# update momentum", "\n", "update_momentum", "(", "self", ".", "backbone", ",", "self", ".", "backbone_momentum", ",", "0.99", ")", "\n", "update_momentum", "(", "\n", "self", ".", "projection_head", ",", "self", ".", "projection_head_momentum", ",", "0.99", "\n", ")", "\n", "\n", "# get queries", "\n", "q", "=", "self", ".", "backbone", "(", "x_q", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "q", "=", "self", ".", "projection_head", "(", "q", ")", "\n", "\n", "# get keys", "\n", "k", ",", "shuffle", "=", "batch_shuffle", "(", "x_k", ")", "\n", "k", "=", "self", ".", "backbone_momentum", "(", "k", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "k", "=", "self", ".", "projection_head_momentum", "(", "k", ")", "\n", "k", "=", "batch_unshuffle", "(", "k", ",", "shuffle", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "q", ",", "k", ")", "\n", "self", ".", "log", "(", "\"train_loss_ssl\"", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.MocoModel.training_epoch_end": [[264, 266], ["tutorial_moco_memory_bank.MocoModel.custom_histogram_weights"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.custom_histogram_weights"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "self", ".", "custom_histogram_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.MocoModel.custom_histogram_weights": [[269, 273], ["tutorial_moco_memory_bank.MocoModel.named_parameters", "tutorial_moco_memory_bank.MocoModel.logger.experiment.add_histogram"], "methods", ["None"], ["", "def", "custom_histogram_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "params", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "experiment", ".", "add_histogram", "(", "\n", "name", ",", "params", ",", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.MocoModel.configure_optimizers": [[274, 285], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "tutorial_moco_memory_bank.MocoModel.parameters"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "6e-2", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optim", ",", "max_epochs", "\n", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.__init__": [[294, 306], ["pytorch_lightning.LightningModule.__init__", "lightly.models.utils.deactivate_requires_grad", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.utils.deactivate_requires_grad"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# use the pretrained ResNet backbone", "\n", "self", ".", "backbone", "=", "backbone", "\n", "\n", "# freeze the backbone", "\n", "deactivate_requires_grad", "(", "backbone", ")", "\n", "\n", "# create a linear layer for our downstream classification model", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.forward": [[307, 311], ["tutorial_moco_memory_bank.Classifier.backbone().flatten", "tutorial_moco_memory_bank.Classifier.fc", "tutorial_moco_memory_bank.Classifier.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_hat", "=", "self", ".", "backbone", "(", "x", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "y_hat", "=", "self", ".", "fc", "(", "y_hat", ")", "\n", "return", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.training_step": [[312, 318], ["tutorial_moco_memory_bank.Classifier.forward", "tutorial_moco_memory_bank.Classifier.criterion", "tutorial_moco_memory_bank.Classifier.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "_", "=", "batch", "\n", "y_hat", "=", "self", ".", "forward", "(", "x", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "\"train_loss_fc\"", ",", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.training_epoch_end": [[319, 321], ["tutorial_moco_memory_bank.Classifier.custom_histogram_weights"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.custom_histogram_weights"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "self", ".", "custom_histogram_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.custom_histogram_weights": [[324, 328], ["tutorial_moco_memory_bank.Classifier.named_parameters", "tutorial_moco_memory_bank.Classifier.logger.experiment.add_histogram"], "methods", ["None"], ["", "def", "custom_histogram_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "params", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "experiment", ".", "add_histogram", "(", "\n", "name", ",", "params", ",", "self", ".", "current_epoch", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.validation_step": [[330, 340], ["tutorial_moco_memory_bank.Classifier.forward", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward"], ["", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "_", "=", "batch", "\n", "y_hat", "=", "self", ".", "forward", "(", "x", ")", "\n", "y_hat", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "\n", "# calculate number of correct predictions", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "y_hat", ",", "1", ")", "\n", "num", "=", "predicted", ".", "shape", "[", "0", "]", "\n", "correct", "=", "(", "predicted", "==", "y", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "num", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.validation_epoch_end": [[341, 351], ["tutorial_moco_memory_bank.Classifier.log"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.docker_run_data_log.DockerRunDataLog.log"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "# calculate and log top1 accuracy", "\n", "        ", "if", "outputs", ":", "\n", "            ", "total_num", "=", "0", "\n", "total_correct", "=", "0", "\n", "for", "num", ",", "correct", "in", "outputs", ":", "\n", "                ", "total_num", "+=", "num", "\n", "total_correct", "+=", "correct", "\n", "", "acc", "=", "total_correct", "/", "total_num", "\n", "self", ".", "log", "(", "\"val_acc\"", ",", "acc", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_moco_memory_bank.Classifier.configure_optimizers": [[352, 356], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "tutorial_moco_memory_bank.Classifier.fc.parameters"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "fc", ".", "parameters", "(", ")", ",", "lr", "=", "30.", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optim", ",", "max_epochs", ")", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.__init__": [[111, 114], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "stage", ":", "str", "=", "'res5'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stage", "=", "stage", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.package.tutorial_pretrain_detectron2.SelectStage.forward": [[115, 117], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", "self", ".", "stage", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.tests.conftest.pytest_addoption": [[6, 9], ["parser.addoption"], "function", ["None"], ["def", "pytest_addoption", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "addoption", "(", "\n", "\"--runslow\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"run slow tests\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.tests.conftest.pytest_configure": [[12, 14], ["config.addinivalue_line"], "function", ["None"], ["", "def", "pytest_configure", "(", "config", ")", ":", "\n", "    ", "config", ".", "addinivalue_line", "(", "\"markers\"", ",", "\"slow: mark test as slow to run\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.tests.conftest.pytest_collection_modifyitems": [[16, 24], ["config.getoption", "pytest.mark.skip", "item.add_marker"], "function", ["None"], ["", "def", "pytest_collection_modifyitems", "(", "config", ",", "items", ")", ":", "\n", "    ", "if", "config", ".", "getoption", "(", "\"--runslow\"", ")", ":", "\n", "# --runslow given in cli: do not skip slow tests", "\n", "        ", "return", "\n", "", "skip_slow", "=", "pytest", ".", "mark", ".", "skip", "(", "reason", "=", "\"need --runslow option to run\"", ")", "\n", "for", "item", "in", "items", ":", "\n", "        ", "if", "\"slow\"", "in", "item", ".", "keywords", ":", "\n", "            ", "item", ".", "add_marker", "(", "skip_slow", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api_append.t_est_api_append": [[12, 57], ["print", "lightly.data.LightlyDataset", "print", "tests.UNMOCKED_end2end_tests.test_api.create_new_dataset_with_embeddings", "tests.UNMOCKED_end2end_tests.test_api.create_new_dataset_with_embeddings.upload_custom_metadata", "print", "torchvision.datasets.FakeData", "range", "print", "tests.UNMOCKED_end2end_tests.test_api.create_new_dataset_with_embeddings.upload_dataset", "print", "tests.UNMOCKED_end2end_tests.test_api.create_new_dataset_with_embeddings.upload_custom_metadata", "lightly.utils.format_custom_metadata", "os.path.join", "files_to_delete.append", "data[].save", "lightly.utils.format_custom_metadata", "torchvision.datasets.FakeData.get_filenames", "range", "os.remove"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.create_new_dataset_with_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.format_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.format_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames"], ["def", "t_est_api_append", "(", "path_to_dataset", ":", "str", ",", "token", ":", "str", ",", "\n", "dataset_name", ":", "str", "=", "\"test_api_from_pip_append\"", ")", ":", "\n", "    ", "files_to_delete", "=", "[", "]", "\n", "try", ":", "\n", "        ", "print", "(", "\"Save custom metadata\"", ")", "\n", "dataset", "=", "LightlyDataset", "(", "path_to_dataset", ")", "\n", "path_custom_metadata", "=", "f\"{path_to_dataset}/custom_metadata.csv\"", "\n", "custom_metadata", "=", "[", "(", "filename", ",", "{", "\"metadata\"", ":", "f\"{filename}_meta\"", "}", ")", "for", "\n", "filename", "in", "dataset", ".", "get_filenames", "(", ")", "]", "\n", "\n", "print", "(", "\"Upload to the dataset\"", ")", "\n", "api_workflow_client", "=", "create_new_dataset_with_embeddings", "(", "\n", "path_to_dataset", "=", "path_to_dataset", ",", "token", "=", "token", ",", "\n", "dataset_name", "=", "dataset_name", ")", "\n", "api_workflow_client", ".", "upload_custom_metadata", "(", "\n", "format_custom_metadata", "(", "custom_metadata", ")", ")", "\n", "\n", "print", "(", "\"save additional images and embeddings and custom metadata\"", ")", "\n", "n_data", "=", "5", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "dataset", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path_to_dataset", ",", "sample_names", "[", "sample_idx", "]", ")", "\n", "files_to_delete", ".", "append", "(", "path", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "", "custom_metadata", "+=", "[", "(", "filename", ",", "{", "\"metadata\"", ":", "f\"{filename}_meta\"", "}", ")", "for", "\n", "filename", "in", "sample_names", "]", "\n", "\n", "print", "(", "\"Upload to the dataset\"", ")", "\n", "api_workflow_client", ".", "upload_dataset", "(", "path_to_dataset", ")", "\n", "\n", "print", "(", "\"Upload custom metadata\"", ")", "\n", "api_workflow_client", ".", "upload_custom_metadata", "(", "\n", "format_custom_metadata", "(", "custom_metadata", ")", ")", "\n", "\n", "\n", "\n", "", "finally", ":", "\n", "        ", "for", "filename", "in", "files_to_delete", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "filename", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.CSVEmbeddingDataset.__init__": [[28, 50], ["dict", "open", "csv.reader", "list", "header_row.index", "header_row.index", "sorted", "zip", "numpy.array", "int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sample_data.SampleData.index"], ["    ", "def", "__init__", "(", "self", ",", "path_to_embeddings_csv", ":", "str", ")", ":", "\n", "        ", "with", "open", "(", "path_to_embeddings_csv", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "csv", ".", "reader", "(", "f", ")", "\n", "\n", "rows", "=", "list", "(", "data", ")", "\n", "header_row", "=", "rows", "[", "0", "]", "\n", "rows_without_header", "=", "rows", "[", "1", ":", "]", "\n", "\n", "index_filenames", "=", "header_row", ".", "index", "(", "'filenames'", ")", "\n", "filenames", "=", "[", "row", "[", "index_filenames", "]", "for", "row", "in", "rows_without_header", "]", "\n", "\n", "index_labels", "=", "header_row", ".", "index", "(", "'labels'", ")", "\n", "labels", "=", "[", "row", "[", "index_labels", "]", "for", "row", "in", "rows_without_header", "]", "\n", "\n", "embeddings", "=", "rows_without_header", "\n", "indexes_to_delete", "=", "sorted", "(", "[", "index_filenames", ",", "index_labels", "]", ",", "reverse", "=", "True", ")", "\n", "for", "embedding_row", "in", "embeddings", ":", "\n", "                ", "for", "index_to_delete", "in", "indexes_to_delete", ":", "\n", "                    ", "del", "embedding_row", "[", "index_to_delete", "]", "\n", "\n", "", "", "", "self", ".", "dataset", "=", "dict", "(", "[", "(", "filename", ",", "(", "np", ".", "array", "(", "embedding_row", ",", "dtype", "=", "float", ")", ",", "int", "(", "label", ")", ")", ")", "\n", "for", "filename", ",", "embedding_row", ",", "label", "in", "zip", "(", "filenames", ",", "embeddings", ",", "labels", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.CSVEmbeddingDataset.get_features": [[51, 54], ["numpy.array"], "methods", ["None"], ["", "def", "get_features", "(", "self", ",", "filenames", ":", "List", "[", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "features_array", "=", "np", ".", "array", "(", "[", "self", ".", "dataset", "[", "filename", "]", "[", "0", "]", "for", "filename", "in", "filenames", "]", ")", "\n", "return", "features_array", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.CSVEmbeddingDataset.get_labels": [[55, 58], ["numpy.array"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ",", "filenames", ":", "List", "[", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "self", ".", "dataset", "[", "filename", "]", "[", "1", "]", "for", "filename", "in", "filenames", "]", ")", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.CSVEmbeddingDataset.all_features_labels": [[59, 64], ["list", "test_api.CSVEmbeddingDataset.get_features", "test_api.CSVEmbeddingDataset.get_labels", "test_api.CSVEmbeddingDataset.dataset.keys"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.CSVEmbeddingDataset.get_features", "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.CSVEmbeddingDataset.get_labels"], ["", "def", "all_features_labels", "(", "self", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "filenames", "=", "list", "(", "self", ".", "dataset", ".", "keys", "(", ")", ")", "\n", "features", "=", "self", ".", "get_features", "(", "filenames", ")", "\n", "labels", "=", "self", ".", "get_labels", "(", "filenames", ")", "\n", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.create_new_dataset_with_embeddings": [[66, 100], ["lightly.api.api_workflow_client.ApiWorkflowClient", "lightly.api.api_workflow_client.ApiWorkflowClient.create_new_dataset_with_unique_name", "hydra.experimental.initialize", "hydra.experimental.compose", "lightly.cli.upload_cli", "print", "lightly.api.api_workflow_client.ApiWorkflowClient.upload_embeddings", "print", "os.path.isfile", "lightly.data.dataset.LightlyDataset", "numpy.random.normal", "zip", "print", "lightly.utils.save_embeddings", "print", "filepath[].lstrip", "len", "len"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.create_new_dataset_with_unique_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.cli.upload_cli.upload_cli", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.upload_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_embeddings"], ["", "", "def", "create_new_dataset_with_embeddings", "(", "path_to_dataset", ":", "str", ",", "\n", "token", ":", "str", ",", "\n", "dataset_name", ":", "str", ")", "->", "ApiWorkflowClient", ":", "\n", "    ", "api_workflow_client", "=", "ApiWorkflowClient", "(", "token", "=", "token", ")", "\n", "\n", "# create the dataset", "\n", "api_workflow_client", ".", "create_new_dataset_with_unique_name", "(", "dataset_basename", "=", "dataset_name", ")", "\n", "\n", "# upload to the dataset", "\n", "initialize", "(", "config_path", "=", "\"../../lightly/cli/config\"", ",", "job_name", "=", "\"test_app\"", ")", "\n", "cfg", "=", "compose", "(", "config_name", "=", "\"config\"", ",", "overrides", "=", "[", "\n", "f\"input_dir='{path_to_dataset}'\"", ",", "\n", "f\"token='{token}'\"", ",", "\n", "f\"dataset_id={api_workflow_client.dataset_id}\"", "\n", "]", ")", "\n", "upload_cli", "(", "cfg", ")", "\n", "\n", "# calculate and save the embeddings", "\n", "path_to_embeddings_csv", "=", "f\"{path_to_dataset}/embeddings.csv\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_to_embeddings_csv", ")", ":", "\n", "        ", "dataset", "=", "LightlyDataset", "(", "input_dir", "=", "path_to_dataset", ")", "\n", "embeddings", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "len", "(", "dataset", ".", "dataset", ".", "samples", ")", ",", "32", ")", ")", "\n", "filepaths", ",", "labels", "=", "zip", "(", "*", "dataset", ".", "dataset", ".", "samples", ")", "\n", "filenames", "=", "[", "filepath", "[", "len", "(", "path_to_dataset", ")", ":", "]", ".", "lstrip", "(", "'/'", ")", "for", "filepath", "in", "filepaths", "]", "\n", "print", "(", "\"Starting save of embeddings\"", ")", "\n", "save_embeddings", "(", "path_to_embeddings_csv", ",", "embeddings", ",", "labels", ",", "filenames", ")", "\n", "print", "(", "\"Finished save of embeddings\"", ")", "\n", "\n", "# upload the embeddings", "\n", "", "print", "(", "\"Starting upload of embeddings.\"", ")", "\n", "api_workflow_client", ".", "upload_embeddings", "(", "path_to_embeddings_csv", "=", "path_to_embeddings_csv", ",", "name", "=", "\"embedding_1\"", ")", "\n", "print", "(", "\"Finished upload of embeddings.\"", ")", "\n", "\n", "return", "api_workflow_client", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.t_est_active_learning": [[102, 154], ["lightly.active_learning.agents.agent.ActiveLearningAgent", "enumerate", "print", "lightly.active_learning.config.selection_config.SelectionConfig", "lightly.active_learning.config.selection_config.SelectionConfig", "len", "len", "print", "lightly.active_learning.config.selection_config.SelectionConfig", "len", "numpy.random.rand", "lightly.active_learning.scorers.classification.ScorerClassification", "api_workflow_client.selection", "api_workflow_client.selection", "len", "lightly.active_learning.agents.agent.ActiveLearningAgent.query", "lightly.active_learning.agents.agent.ActiveLearningAgent.query", "len", "len", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.selection", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.selection", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query", "home.repos.pwc.inspect_result.lightly-ai_lightly.agents.agent.ActiveLearningAgent.query"], ["", "def", "t_est_active_learning", "(", "api_workflow_client", ":", "ApiWorkflowClient", ",", "\n", "method", ":", "SamplingMethod", "=", "SamplingMethod", ".", "CORAL", ",", "\n", "query_tag_name", ":", "str", "=", "'initial-tag'", ",", "\n", "preselected_tag_name", ":", "str", "=", "None", ",", "\n", "n_samples_additional", ":", "List", "[", "int", "]", "=", "[", "2", ",", "5", "]", ")", ":", "\n", "# create the tags with 100 respectively 10 samples if not yet existant", "\n", "    ", "if", "query_tag_name", "is", "not", "None", ":", "\n", "        ", "selection_config", "=", "SelectionConfig", "(", "method", "=", "SamplingMethod", ".", "RANDOM", ",", "n_samples", "=", "100", ",", "name", "=", "query_tag_name", ")", "\n", "try", ":", "\n", "            ", "api_workflow_client", ".", "selection", "(", "selection_config", "=", "selection_config", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "pass", "\n", "", "", "if", "preselected_tag_name", "is", "not", "None", ":", "\n", "        ", "selection_config", "=", "SelectionConfig", "(", "method", "=", "SamplingMethod", ".", "RANDOM", ",", "n_samples", "=", "10", ",", "name", "=", "preselected_tag_name", ")", "\n", "try", ":", "\n", "            ", "api_workflow_client", ".", "selection", "(", "selection_config", "=", "selection_config", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "pass", "\n", "\n", "# define the active learning agent", "\n", "", "", "agent", "=", "ActiveLearningAgent", "(", "api_workflow_client", ",", "\n", "query_tag_name", "=", "query_tag_name", ",", "\n", "preselected_tag_name", "=", "preselected_tag_name", ")", "\n", "\n", "total_no_samples", "=", "len", "(", "agent", ".", "unlabeled_set", ")", "+", "len", "(", "agent", ".", "labeled_set", ")", "\n", "\n", "al_scorer", "=", "None", "\n", "\n", "for", "iteration", ",", "n_samples_additional", "in", "enumerate", "(", "n_samples_additional", ")", ":", "\n", "        ", "n_samples", "=", "len", "(", "agent", ".", "labeled_set", ")", "+", "n_samples_additional", "\n", "print", "(", "f\"Beginning with iteration {iteration} to have {n_samples} labeled samples.\"", ")", "\n", "\n", "# Perform a selection", "\n", "method_here", "=", "SamplingMethod", ".", "CORESET", "if", "iteration", "==", "0", "and", "method", "==", "SamplingMethod", ".", "CORAL", "else", "method", "\n", "selection_config", "=", "SelectionConfig", "(", "method", "=", "method_here", ",", "n_samples", "=", "n_samples", ")", "\n", "if", "al_scorer", "is", "None", ":", "\n", "            ", "agent", ".", "query", "(", "selection_config", "=", "selection_config", ")", "\n", "", "else", ":", "\n", "            ", "agent", ".", "query", "(", "selection_config", "=", "selection_config", ",", "al_scorer", "=", "al_scorer", ")", "\n", "\n", "", "assert", "len", "(", "agent", ".", "labeled_set", ")", "==", "n_samples", "\n", "assert", "len", "(", "agent", ".", "unlabeled_set", ")", "==", "total_no_samples", "-", "n_samples", "\n", "\n", "# Update the scorer", "\n", "n_samples", "=", "len", "(", "agent", ".", "query_set", ")", "\n", "n_classes", "=", "10", "\n", "predictions", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ",", "n_classes", ")", "\n", "predictions_normalized", "=", "predictions", "/", "np", ".", "sum", "(", "predictions", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "model_output", "=", "predictions_normalized", "\n", "al_scorer", "=", "ScorerClassification", "(", "model_output", "=", "predictions", ")", "\n", "\n", "", "print", "(", "\"Success!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.t_est_api_with_matrix": [[156, 177], ["len", "test_api.create_new_dataset_with_embeddings", "create_new_dataset_with_embeddings.delete_dataset_by_id", "print", "lightly.data.dataset.LightlyDataset", "print", "test_api.t_est_active_learning"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.create_new_dataset_with_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.delete_dataset_by_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.UNMOCKED_end2end_tests.test_api.t_est_active_learning"], ["", "def", "t_est_api_with_matrix", "(", "path_to_dataset", ":", "str", ",", "\n", "token", ":", "str", ",", "dataset_name", ":", "str", "=", "\"test_api_from_pip\"", ")", ":", "\n", "\n", "    ", "no_samples", "=", "len", "(", "LightlyDataset", "(", "input_dir", "=", "path_to_dataset", ")", ".", "dataset", ".", "samples", ")", "\n", "assert", "no_samples", ">=", "100", ",", "\"Test needs at least 100 samples in the dataset!\"", "\n", "\n", "api_workflow_client", "=", "create_new_dataset_with_embeddings", "(", "\n", "path_to_dataset", "=", "path_to_dataset", ",", "token", "=", "token", ",", "\n", "dataset_name", "=", "dataset_name", "\n", ")", "\n", "\n", "for", "method", "in", "[", "SamplingMethod", ".", "CORAL", ",", "SamplingMethod", ".", "CORESET", ",", "SamplingMethod", ".", "RANDOM", "]", ":", "\n", "        ", "for", "query_tag_name", "in", "[", "'initial-tag'", ",", "\"query_tag_name_xyz\"", "]", ":", "\n", "            ", "for", "preselected_tag_name", "in", "[", "None", ",", "\"preselected_tag_name_xyz\"", "]", ":", "\n", "                ", "print", "(", "f\"Starting AL run with method '{method}', query_tag '{query_tag_name}' \"", "\n", "f\"and preselected_tag '{preselected_tag_name}'.\"", ")", "\n", "t_est_active_learning", "(", "api_workflow_client", ",", "method", ",", "query_tag_name", ",", "preselected_tag_name", ")", "\n", "\n", "", "", "", "api_workflow_client", ".", "delete_dataset_by_id", "(", "api_workflow_client", ".", "dataset_id", ")", "\n", "\n", "print", "(", "\"Success of the complete test suite! The dataset on the server was deleted again.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.imports.test_nested_imports.TestNestedImports.test_nested_imports": [[9, 96], ["None"], "methods", ["None"], ["    ", "def", "test_nested_imports", "(", "self", ")", ":", "\n", "# active learning", "\n", "        ", "lightly", ".", "active_learning", ".", "agents", ".", "agent", ".", "ActiveLearningAgent", "\n", "lightly", ".", "active_learning", ".", "agents", ".", "ActiveLearningAgent", "\n", "lightly", ".", "active_learning", ".", "config", ".", "selection_config", ".", "SelectionConfig", "\n", "lightly", ".", "active_learning", ".", "config", ".", "SelectionConfig", "\n", "lightly", ".", "active_learning", ".", "scorers", ".", "classification", ".", "ScorerClassification", "\n", "lightly", ".", "active_learning", ".", "scorers", ".", "ScorerClassification", "\n", "lightly", ".", "active_learning", ".", "scorers", ".", "detection", ".", "ScorerObjectDetection", "\n", "lightly", ".", "active_learning", ".", "scorers", ".", "ScorerObjectDetection", "\n", "lightly", ".", "active_learning", ".", "utils", ".", "bounding_box", ".", "BoundingBox", "\n", "lightly", ".", "active_learning", ".", "utils", ".", "BoundingBox", "\n", "lightly", ".", "active_learning", ".", "utils", ".", "object_detection_output", ".", "ObjectDetectionOutput", "\n", "lightly", ".", "active_learning", ".", "utils", ".", "ObjectDetectionOutput", "\n", "\n", "# api imports", "\n", "lightly", ".", "api", ".", "api_workflow_client", ".", "ApiWorkflowClient", "\n", "lightly", ".", "api", ".", "ApiWorkflowClient", "\n", "lightly", ".", "api", ".", "bitmask", ".", "BitMask", "\n", "\n", "# data imports", "\n", "lightly", ".", "data", ".", "LightlyDataset", "\n", "lightly", ".", "data", ".", "dataset", ".", "LightlyDataset", "\n", "lightly", ".", "data", ".", "BaseCollateFunction", "\n", "lightly", ".", "data", ".", "collate", ".", "BaseCollateFunction", "\n", "lightly", ".", "data", ".", "ImageCollateFunction", "\n", "lightly", ".", "data", ".", "collate", ".", "ImageCollateFunction", "\n", "lightly", ".", "data", ".", "MoCoCollateFunction", "\n", "lightly", ".", "data", ".", "collate", ".", "MoCoCollateFunction", "\n", "lightly", ".", "data", ".", "SimCLRCollateFunction", "\n", "lightly", ".", "data", ".", "collate", ".", "SimCLRCollateFunction", "\n", "lightly", ".", "data", ".", "imagenet_normalize", "\n", "lightly", ".", "data", ".", "collate", ".", "imagenet_normalize", "\n", "\n", "# embedding imports", "\n", "lightly", ".", "embedding", ".", "BaseEmbedding", "\n", "lightly", ".", "embedding", ".", "_base", ".", "BaseEmbedding", "\n", "lightly", ".", "embedding", ".", "SelfSupervisedEmbedding", "\n", "lightly", ".", "embedding", ".", "embedding", ".", "SelfSupervisedEmbedding", "\n", "\n", "# loss imports", "\n", "lightly", ".", "loss", ".", "NTXentLoss", "\n", "lightly", ".", "loss", ".", "ntx_ent_loss", ".", "NTXentLoss", "\n", "lightly", ".", "loss", ".", "SymNegCosineSimilarityLoss", "\n", "lightly", ".", "loss", ".", "sym_neg_cos_sim_loss", ".", "SymNegCosineSimilarityLoss", "\n", "lightly", ".", "loss", ".", "memory_bank", ".", "MemoryBankModule", "\n", "lightly", ".", "loss", ".", "regularizer", ".", "CO2Regularizer", "\n", "lightly", ".", "loss", ".", "regularizer", ".", "co2", ".", "CO2Regularizer", "\n", "\n", "# models imports", "\n", "lightly", ".", "models", ".", "ResNetGenerator", "\n", "lightly", ".", "models", ".", "resnet", ".", "ResNetGenerator", "\n", "lightly", ".", "models", ".", "SimCLR", "\n", "lightly", ".", "models", ".", "simclr", ".", "SimCLR", "\n", "lightly", ".", "models", ".", "MoCo", "\n", "lightly", ".", "models", ".", "moco", ".", "MoCo", "\n", "lightly", ".", "models", ".", "SimSiam", "\n", "lightly", ".", "models", ".", "simsiam", ".", "SimSiam", "\n", "lightly", ".", "models", ".", "ZOO", "\n", "lightly", ".", "models", ".", "zoo", ".", "ZOO", "\n", "lightly", ".", "models", ".", "checkpoints", "\n", "lightly", ".", "models", ".", "zoo", ".", "checkpoints", "\n", "lightly", ".", "models", ".", "batchnorm", ".", "get_norm_layer", "\n", "\n", "# transforms imports", "\n", "lightly", ".", "transforms", ".", "GaussianBlur", "\n", "lightly", ".", "transforms", ".", "gaussian_blur", ".", "GaussianBlur", "\n", "lightly", ".", "transforms", ".", "RandomRotate", "\n", "lightly", ".", "transforms", ".", "rotation", ".", "RandomRotate", "\n", "\n", "# utils imports", "\n", "lightly", ".", "utils", ".", "save_embeddings", "\n", "lightly", ".", "utils", ".", "io", ".", "save_embeddings", "\n", "lightly", ".", "utils", ".", "load_embeddings", "\n", "lightly", ".", "utils", ".", "io", ".", "load_embeddings", "\n", "lightly", ".", "utils", ".", "load_embeddings_as_dict", "\n", "lightly", ".", "utils", ".", "io", ".", "load_embeddings_as_dict", "\n", "lightly", ".", "utils", ".", "fit_pca", "\n", "lightly", ".", "utils", ".", "embeddings_2d", ".", "fit_pca", "\n", "\n", "# core imports", "\n", "lightly", ".", "train_model_and_embed_images", "\n", "lightly", ".", "core", ".", "train_model_and_embed_images", "\n", "lightly", ".", "train_embedding_model", "\n", "lightly", ".", "core", ".", "train_embedding_model", "\n", "lightly", ".", "embed_images", "\n", "lightly", ".", "core", ".", "embed_images", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.imports.test_seminested_imports.TestSemiNestedImports.test_seminested_imports": [[9, 89], ["None"], "methods", ["None"], ["    ", "def", "test_seminested_imports", "(", "self", ")", ":", "\n", "        ", "from", "lightly", "import", "active_learning", "\n", "# active learning (commented out don't work)", "\n", "active_learning", ".", "agents", ".", "ActiveLearningAgent", "\n", "active_learning", ".", "config", ".", "SelectionConfig", "\n", "active_learning", ".", "scorers", ".", "ScorerClassification", "\n", "active_learning", ".", "scorers", ".", "ScorerObjectDetection", "\n", "\n", "# api imports", "\n", "from", "lightly", "import", "api", "\n", "api", ".", "api_workflow_client", ".", "ApiWorkflowClient", "\n", "api", ".", "bitmask", ".", "BitMask", "\n", "\n", "# data imports", "\n", "from", "lightly", "import", "data", "\n", "data", ".", "LightlyDataset", "\n", "data", ".", "dataset", ".", "LightlyDataset", "\n", "data", ".", "BaseCollateFunction", "\n", "data", ".", "collate", ".", "BaseCollateFunction", "\n", "data", ".", "ImageCollateFunction", "\n", "data", ".", "collate", ".", "ImageCollateFunction", "\n", "data", ".", "MoCoCollateFunction", "\n", "data", ".", "collate", ".", "MoCoCollateFunction", "\n", "data", ".", "SimCLRCollateFunction", "\n", "data", ".", "collate", ".", "SimCLRCollateFunction", "\n", "data", ".", "imagenet_normalize", "\n", "data", ".", "collate", ".", "imagenet_normalize", "\n", "\n", "# embedding imports", "\n", "from", "lightly", "import", "embedding", "\n", "embedding", ".", "BaseEmbedding", "\n", "embedding", ".", "_base", ".", "BaseEmbedding", "\n", "embedding", ".", "SelfSupervisedEmbedding", "\n", "embedding", ".", "embedding", ".", "SelfSupervisedEmbedding", "\n", "\n", "# loss imports", "\n", "from", "lightly", "import", "loss", "\n", "loss", ".", "NTXentLoss", "\n", "loss", ".", "ntx_ent_loss", ".", "NTXentLoss", "\n", "loss", ".", "SymNegCosineSimilarityLoss", "\n", "loss", ".", "sym_neg_cos_sim_loss", ".", "SymNegCosineSimilarityLoss", "\n", "loss", ".", "memory_bank", ".", "MemoryBankModule", "\n", "\n", "from", "lightly", ".", "loss", "import", "regularizer", "\n", "regularizer", ".", "CO2Regularizer", "\n", "regularizer", ".", "co2", ".", "CO2Regularizer", "\n", "\n", "# models imports", "\n", "from", "lightly", "import", "models", "\n", "models", ".", "ResNetGenerator", "\n", "models", ".", "resnet", ".", "ResNetGenerator", "\n", "models", ".", "SimCLR", "\n", "models", ".", "simclr", ".", "SimCLR", "\n", "models", ".", "MoCo", "\n", "models", ".", "moco", ".", "MoCo", "\n", "models", ".", "SimSiam", "\n", "models", ".", "simsiam", ".", "SimSiam", "\n", "models", ".", "ZOO", "\n", "models", ".", "zoo", ".", "ZOO", "\n", "models", ".", "checkpoints", "\n", "models", ".", "zoo", ".", "checkpoints", "\n", "models", ".", "batchnorm", ".", "get_norm_layer", "\n", "\n", "# transforms imports", "\n", "from", "lightly", "import", "transforms", "\n", "transforms", ".", "GaussianBlur", "\n", "transforms", ".", "gaussian_blur", ".", "GaussianBlur", "\n", "transforms", ".", "RandomRotate", "\n", "transforms", ".", "rotation", ".", "RandomRotate", "\n", "\n", "# utils imports", "\n", "from", "lightly", "import", "utils", "\n", "utils", ".", "save_embeddings", "\n", "utils", ".", "io", ".", "save_embeddings", "\n", "utils", ".", "load_embeddings", "\n", "utils", ".", "io", ".", "load_embeddings", "\n", "utils", ".", "load_embeddings_as_dict", "\n", "utils", ".", "io", ".", "load_embeddings_as_dict", "\n", "utils", ".", "fit_pca", "\n", "utils", ".", "embeddings_2d", ".", "fit_pca", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.imports.test_from_imports.TestFromImports.test_from_imports": [[9, 83], ["None"], "methods", ["None"], ["    ", "def", "test_from_imports", "(", "self", ")", ":", "\n", "# active learning (commented out don't work)", "\n", "        ", "from", "lightly", ".", "active_learning", ".", "config", ".", "selection_config", "import", "SelectionConfig", "\n", "from", "lightly", ".", "active_learning", ".", "agents", ".", "agent", "import", "ActiveLearningAgent", "\n", "from", "lightly", ".", "active_learning", ".", "scorers", ".", "classification", "import", "ScorerClassification", "\n", "\n", "# api imports", "\n", "from", "lightly", ".", "api", ".", "api_workflow_client", "import", "ApiWorkflowClient", "\n", "from", "lightly", ".", "api", ".", "bitmask", "import", "BitMask", "\n", "\n", "# data imports", "\n", "from", "lightly", ".", "data", "import", "LightlyDataset", "\n", "from", "lightly", ".", "data", ".", "dataset", "import", "LightlyDataset", "\n", "from", "lightly", ".", "data", "import", "BaseCollateFunction", "\n", "from", "lightly", ".", "data", ".", "collate", "import", "BaseCollateFunction", "\n", "from", "lightly", ".", "data", "import", "ImageCollateFunction", "\n", "from", "lightly", ".", "data", ".", "collate", "import", "ImageCollateFunction", "\n", "from", "lightly", ".", "data", "import", "MoCoCollateFunction", "\n", "from", "lightly", ".", "data", ".", "collate", "import", "MoCoCollateFunction", "\n", "from", "lightly", ".", "data", "import", "SimCLRCollateFunction", "\n", "from", "lightly", ".", "data", ".", "collate", "import", "SimCLRCollateFunction", "\n", "from", "lightly", ".", "data", "import", "imagenet_normalize", "\n", "from", "lightly", ".", "data", ".", "collate", "import", "imagenet_normalize", "\n", "\n", "# embedding imports", "\n", "from", "lightly", ".", "embedding", "import", "BaseEmbedding", "\n", "from", "lightly", ".", "embedding", ".", "_base", "import", "BaseEmbedding", "\n", "from", "lightly", ".", "embedding", "import", "SelfSupervisedEmbedding", "\n", "from", "lightly", ".", "embedding", ".", "embedding", "import", "SelfSupervisedEmbedding", "\n", "\n", "# loss imports", "\n", "from", "lightly", ".", "loss", "import", "NTXentLoss", "\n", "from", "lightly", ".", "loss", ".", "ntx_ent_loss", "import", "NTXentLoss", "\n", "from", "lightly", ".", "loss", "import", "SymNegCosineSimilarityLoss", "\n", "from", "lightly", ".", "loss", ".", "sym_neg_cos_sim_loss", "import", "SymNegCosineSimilarityLoss", "\n", "from", "lightly", ".", "loss", ".", "memory_bank", "import", "MemoryBankModule", "\n", "from", "lightly", ".", "loss", ".", "regularizer", "import", "CO2Regularizer", "\n", "from", "lightly", ".", "loss", ".", "regularizer", ".", "co2", "import", "CO2Regularizer", "\n", "\n", "# models imports", "\n", "from", "lightly", ".", "models", "import", "ResNetGenerator", "\n", "from", "lightly", ".", "models", ".", "resnet", "import", "ResNetGenerator", "\n", "from", "lightly", ".", "models", "import", "SimCLR", "\n", "from", "lightly", ".", "models", ".", "simclr", "import", "SimCLR", "\n", "from", "lightly", ".", "models", "import", "MoCo", "\n", "from", "lightly", ".", "models", ".", "moco", "import", "MoCo", "\n", "from", "lightly", ".", "models", "import", "SimSiam", "\n", "from", "lightly", ".", "models", ".", "simsiam", "import", "SimSiam", "\n", "from", "lightly", ".", "models", "import", "ZOO", "\n", "from", "lightly", ".", "models", ".", "zoo", "import", "ZOO", "\n", "from", "lightly", ".", "models", "import", "checkpoints", "\n", "from", "lightly", ".", "models", ".", "zoo", "import", "checkpoints", "\n", "from", "lightly", ".", "models", ".", "batchnorm", "import", "get_norm_layer", "\n", "\n", "# transforms imports", "\n", "from", "lightly", ".", "transforms", "import", "GaussianBlur", "\n", "from", "lightly", ".", "transforms", ".", "gaussian_blur", "import", "GaussianBlur", "\n", "from", "lightly", ".", "transforms", "import", "RandomRotate", "\n", "from", "lightly", ".", "transforms", ".", "rotation", "import", "RandomRotate", "\n", "\n", "# utils imports", "\n", "from", "lightly", ".", "utils", "import", "save_embeddings", "\n", "from", "lightly", ".", "utils", ".", "io", "import", "save_embeddings", "\n", "from", "lightly", ".", "utils", "import", "load_embeddings", "\n", "from", "lightly", ".", "utils", ".", "io", "import", "load_embeddings", "\n", "from", "lightly", ".", "utils", "import", "load_embeddings_as_dict", "\n", "from", "lightly", ".", "utils", ".", "io", "import", "load_embeddings_as_dict", "\n", "from", "lightly", ".", "utils", "import", "fit_pca", "\n", "from", "lightly", ".", "utils", ".", "embeddings_2d", "import", "fit_pca", "\n", "\n", "# core imports", "\n", "from", "lightly", "import", "train_model_and_embed_images", "\n", "from", "lightly", "import", "train_embedding_model", "\n", "from", "lightly", "import", "embed_images", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.setUp": [[11, 14], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "lightly", ".", "api", ".", "api_workflow_client", ".", "__version__", "=", "lightly", ".", "__version__", "\n", "self", ".", "api_workflow_client", "=", "MockedApiWorkflowClient", "(", "token", "=", "\"token_xyz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_init_with_env_token": [[15, 18], ["unittest.mock.patch.dict", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient"], "methods", ["None"], ["", "@", "mock", ".", "patch", ".", "dict", "(", "os", ".", "environ", ",", "{", "'LIGHTLY_TOKEN'", ":", "'token_xyz'", "}", ")", "\n", "def", "test_init_with_env_token", "(", "self", ")", ":", "\n", "        ", "MockedApiWorkflowClient", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_error_if_init_without_token": [[19, 24], ["test_api_workflow.TestApiWorkflow.assertRaises", "unittest.mock.patch.dict", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient", "os.environ.items"], "methods", ["None"], ["", "def", "test_error_if_init_without_token", "(", "self", ")", ":", "\n", "#\u00a0copy environment variables but remove LIGHTLY_TOKEN if it exists", "\n", "        ", "env_without_token", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "os", ".", "environ", ".", "items", "(", ")", "if", "k", "!=", "'LIGHTLY_TOKEN'", "}", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ",", "mock", ".", "patch", ".", "dict", "(", "os", ".", "environ", ",", "env_without_token", ",", "clear", "=", "True", ")", ":", "\n", "            ", "MockedApiWorkflowClient", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_error_if_version_is_incompatible": [[25, 30], ["test_api_workflow.TestApiWorkflow.assertRaises", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient"], "methods", ["None"], ["", "", "def", "test_error_if_version_is_incompatible", "(", "self", ")", ":", "\n", "        ", "lightly", ".", "api", ".", "api_workflow_client", ".", "__version__", "=", "\"0.0.0\"", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "MockedApiWorkflowClient", "(", "token", "=", "\"token_xyz\"", ")", "\n", "", "lightly", ".", "api", ".", "api_workflow_client", ".", "__version__", "=", "lightly", ".", "__version__", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_dataset_id_nonexisting": [[31, 37], ["test_api_workflow.TestApiWorkflow.api_workflow_client._datasets_api.reset", "hasattr", "test_api_workflow.TestApiWorkflow.assertWarns"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset"], ["", "def", "test_dataset_id_nonexisting", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "assert", "not", "hasattr", "(", "self", ".", "api_workflow_client", ",", "\"_dataset_id\"", ")", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "dataset_id", "=", "self", ".", "api_workflow_client", ".", "dataset_id", "\n", "", "assert", "dataset_id", "==", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "datasets", "[", "-", "1", "]", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_dataset_id_existing": [[38, 42], ["None"], "methods", ["None"], ["", "def", "test_dataset_id_existing", "(", "self", ")", ":", "\n", "        ", "id", "=", "\"random_dataset_id\"", "\n", "self", ".", "api_workflow_client", ".", "_dataset_id", "=", "id", "\n", "assert", "self", ".", "api_workflow_client", ".", "dataset_id", "==", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_set_dataset_id_existing": [[43, 45], ["None"], "methods", ["None"], ["", "def", "test_set_dataset_id_existing", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "dataset_id", "=", "\"dataset_1_id\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_set_dataset_id_missing": [[46, 49], ["test_api_workflow.TestApiWorkflow.assertRaises"], "methods", ["None"], ["", "def", "test_set_dataset_id_missing", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "dataset_id", "=", "\"nonexisting-id\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_reorder_random": [[50, 68], ["range", "list", "list", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient", "numpy.copy", "numpy.random.shuffle", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient._order_list_by_filenames", "range", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient._order_list_by_filenames"], ["", "", "def", "test_reorder_random", "(", "self", ")", ":", "\n", "        ", "no_random_tries", "=", "100", "\n", "for", "iter", "in", "range", "(", "no_random_tries", ")", ":", "\n", "            ", "numbers_to_choose_from", "=", "list", "(", "range", "(", "100", ")", ")", "\n", "numbers_all", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "numbers_to_choose_from", ",", "100", ")", ")", "\n", "filenames_on_server", "=", "[", "f\"img_{i}\"", "for", "i", "in", "numbers_all", "]", "\n", "\n", "api_workflow_client", "=", "MockedApiWorkflowClient", "(", "token", "=", "\"token_xyz\"", ",", "dataset_id", "=", "\"dataset_id_xyz\"", ")", "\n", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", "=", "filenames_on_server", "\n", "\n", "numbers_in_tag", "=", "np", ".", "copy", "(", "numbers_all", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "numbers_in_tag", ")", "\n", "filenames_for_list", "=", "[", "f\"img_{i}\"", "for", "i", "in", "numbers_in_tag", "]", "\n", "\n", "list_ordered", "=", "api_workflow_client", ".", "_order_list_by_filenames", "(", "filenames_for_list", ",", "\n", "list_to_order", "=", "numbers_in_tag", ")", "\n", "list_desired_order", "=", "[", "i", "for", "i", "in", "numbers_all", "if", "i", "in", "numbers_in_tag", "]", "\n", "assert", "list_ordered", "==", "list_desired_order", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_reorder_manual": [[69, 78], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient._order_list_by_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient._order_list_by_filenames"], ["", "", "def", "test_reorder_manual", "(", "self", ")", ":", "\n", "        ", "filenames_on_server", "=", "[", "'a'", ",", "'b'", ",", "'c'", "]", "\n", "api_workflow_client", "=", "MockedApiWorkflowClient", "(", "token", "=", "\"token_xyz\"", ",", "dataset_id", "=", "\"dataset_id_xyz\"", ")", "\n", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", "=", "filenames_on_server", "\n", "filenames_for_list", "=", "[", "'c'", ",", "'a'", ",", "'b'", "]", "\n", "list_to_order", "=", "[", "'cccc'", ",", "'aaaa'", ",", "'bbbb'", "]", "\n", "list_ordered", "=", "api_workflow_client", ".", "_order_list_by_filenames", "(", "filenames_for_list", ",", "list_to_order", "=", "list_to_order", ")", "\n", "list_desired_order", "=", "[", "'aaaa'", ",", "'bbbb'", ",", "'cccc'", "]", "\n", "assert", "list_ordered", "==", "list_desired_order", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow.TestApiWorkflow.test_reorder_wrong_lengths": [[79, 102], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient", "test_api_workflow.TestApiWorkflow.subTest", "test_api_workflow.TestApiWorkflow.subTest", "test_api_workflow.TestApiWorkflow.subTest", "test_api_workflow.TestApiWorkflow.assertRaises", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient._order_list_by_filenames", "test_api_workflow.TestApiWorkflow.assertRaises", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient._order_list_by_filenames", "test_api_workflow.TestApiWorkflow.assertRaises", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient._order_list_by_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient._order_list_by_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient._order_list_by_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_client.ApiWorkflowClient._order_list_by_filenames"], ["", "def", "test_reorder_wrong_lengths", "(", "self", ")", ":", "\n", "        ", "filenames_on_server", "=", "[", "'a'", ",", "'b'", ",", "'c'", "]", "\n", "api_workflow_client", "=", "MockedApiWorkflowClient", "(", "\n", "token", "=", "\"token_xyz\"", ",", "dataset_id", "=", "\"dataset_id_xyz\"", "\n", ")", "\n", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", "=", "filenames_on_server", "\n", "filenames_for_list", "=", "[", "'c'", ",", "'a'", ",", "'b'", "]", "\n", "list_to_order", "=", "[", "'cccc'", ",", "'aaaa'", ",", "'bbbb'", "]", "\n", "\n", "with", "self", ".", "subTest", "(", "\"filenames_for_list wrong length\"", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "api_workflow_client", ".", "_order_list_by_filenames", "(", "\n", "filenames_for_list", "[", ":", "-", "1", "]", ",", "list_to_order", ")", "\n", "\n", "", "", "with", "self", ".", "subTest", "(", "\"list_to_order wrong length\"", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "api_workflow_client", ".", "_order_list_by_filenames", "(", "\n", "filenames_for_list", ",", "list_to_order", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "", "with", "self", ".", "subTest", "(", "\"filenames_for_list and list_to_order wrong length\"", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "api_workflow_client", ".", "_order_list_by_filenames", "(", "\n", "filenames_for_list", "[", ":", "-", "1", "]", ",", "list_to_order", "[", ":", "-", "1", "]", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_selection.TestApiWorkflowSelection.test_sampling_deprecated": [[9, 18], ["isinstance", "test_api_workflow_selection.TestApiWorkflowSelection.assertWarns", "lightly.active_learning.config.selection_config.SamplingConfig", "test_api_workflow_selection.TestApiWorkflowSelection.assertWarns", "test_api_workflow_selection.TestApiWorkflowSelection.api_workflow_client.sampling"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.sampling"], ["    ", "def", "test_sampling_deprecated", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "\n", "with", "self", ".", "assertWarns", "(", "PendingDeprecationWarning", ")", ":", "\n", "            ", "sampling_config", "=", "SamplingConfig", "(", "SamplingMethod", ".", "CORESET", ",", "n_samples", "=", "32", ")", "\n", "\n", "", "with", "self", ".", "assertWarns", "(", "PendingDeprecationWarning", ")", ":", "\n", "            ", "new_tag_data", "=", "self", ".", "api_workflow_client", ".", "sampling", "(", "selection_config", "=", "sampling_config", ")", "\n", "", "assert", "isinstance", "(", "new_tag_data", ",", "TagData", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_selection.TestApiWorkflowSelection.test_selection": [[19, 26], ["lightly.active_learning.config.selection_config.SelectionConfig", "test_api_workflow_selection.TestApiWorkflowSelection.api_workflow_client.selection", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.selection"], ["", "def", "test_selection", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "\n", "selection_config", "=", "SelectionConfig", "(", ")", "\n", "\n", "new_tag_data", "=", "self", ".", "api_workflow_client", ".", "selection", "(", "selection_config", "=", "selection_config", ")", "\n", "assert", "isinstance", "(", "new_tag_data", ",", "TagData", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_selection.TestApiWorkflowSelection.test_runtime_error_on_existing_tag_name": [[27, 34], ["lightly.active_learning.config.selection_config.SelectionConfig", "test_api_workflow_selection.TestApiWorkflowSelection.assertRaises", "test_api_workflow_selection.TestApiWorkflowSelection.api_workflow_client.selection"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_selection._SelectionMixin.selection"], ["", "def", "test_runtime_error_on_existing_tag_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "embedding_id", "=", "\"embedding_id_xyz\"", "\n", "\n", "selection_config", "=", "SelectionConfig", "(", "name", "=", "'initial-tag'", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "new_tag_data", "=", "self", ".", "api_workflow_client", ".", "selection", "(", "selection_config", "=", "selection_config", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings": [[18, 43], ["tempfile.mkdtemp", "os.path.join", "lightly.utils.io.save_embeddings", "len", "numpy.random.randn", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.save_embeddings"], ["    ", "def", "create_fake_embeddings", "(", "self", ",", "\n", "n_data", ",", "\n", "n_data_start", ":", "int", "=", "0", ",", "\n", "n_dims", ":", "int", "=", "32", ",", "\n", "special_name_first_sample", ":", "bool", "=", "False", ",", "\n", "special_char_in_first_filename", ":", "str", "=", "None", ")", ":", "\n", "# create fake embeddings", "\n", "        ", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "path_to_embeddings", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "folder_path", ",", "\n", "'embeddings.csv'", "\n", ")", "\n", "\n", "self", ".", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data_start", ",", "n_data_start", "+", "n_data", ")", "]", "\n", "if", "special_name_first_sample", ":", "\n", "            ", "self", ".", "sample_names", "[", "0", "]", "=", "\"bliblablub\"", "\n", "", "if", "special_char_in_first_filename", ":", "\n", "            ", "self", ".", "sample_names", "[", "0", "]", "=", "f'_{special_char_in_first_filename}'", "f'{self.sample_names[0]}'", "\n", "", "labels", "=", "[", "0", "]", "*", "len", "(", "self", ".", "sample_names", ")", "\n", "save_embeddings", "(", "\n", "self", ".", "path_to_embeddings", ",", "\n", "np", ".", "random", ".", "randn", "(", "n_data", ",", "n_dims", ")", ",", "\n", "labels", ",", "\n", "self", ".", "sample_names", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding": [[46, 64], ["test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.api_workflow_client.upload_embeddings"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.upload_embeddings"], ["", "def", "t_ester_upload_embedding", "(", "self", ",", "\n", "n_data", ",", "\n", "n_dims", ":", "int", "=", "32", ",", "\n", "special_name_first_sample", ":", "bool", "=", "False", ",", "\n", "special_char_in_first_filename", ":", "str", "=", "None", ",", "\n", "name", ":", "str", "=", "\"embedding_xyz\"", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "create_fake_embeddings", "(", "\n", "n_data", ",", "\n", "n_dims", "=", "n_dims", ",", "\n", "special_name_first_sample", "=", "special_name_first_sample", ",", "\n", "special_char_in_first_filename", "=", "special_char_in_first_filename", ",", "\n", ")", "\n", "\n", "# perform the workflow to upload the embeddings", "\n", "self", ".", "api_workflow_client", ".", "upload_embeddings", "(", "path_to_embeddings_csv", "=", "self", ".", "path_to_embeddings", ",", "name", "=", "name", ")", "\n", "self", ".", "api_workflow_client", ".", "n_dims_embeddings_on_server", "=", "n_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_upload_success": [[65, 70], ["len", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding", "os.path.join", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.assertFalse", "os.path.isfile"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding"], ["", "def", "test_upload_success", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", ")", "\n", "self", ".", "t_ester_upload_embedding", "(", "n_data", "=", "n_data", ")", "\n", "filepath_embeddings_sorted", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "\"embeddings_sorted.csv\"", ")", "\n", "self", ".", "assertFalse", "(", "os", ".", "path", ".", "isfile", "(", "filepath_embeddings_sorted", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_upload_wrong_length": [[71, 75], ["len", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.assertRaises", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding"], ["", "def", "test_upload_wrong_length", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "42", "+", "len", "(", "self", ".", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "t_ester_upload_embedding", "(", "n_data", "=", "n_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_upload_wrong_filenames": [[76, 80], ["len", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.assertRaises", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding"], ["", "", "def", "test_upload_wrong_filenames", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "t_ester_upload_embedding", "(", "n_data", "=", "n_data", ",", "special_name_first_sample", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_upload_comma_filenames": [[81, 89], ["len", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.subTest", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.assertRaises", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding"], ["", "", "def", "test_upload_comma_filenames", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", ")", "\n", "for", "invalid_char", "in", "INVALID_FILENAME_CHARACTERS", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "msg", "=", "f\"invalid_char: {invalid_char}\"", ")", ":", "\n", "                ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                    ", "self", ".", "t_ester_upload_embedding", "(", "\n", "n_data", "=", "n_data", ",", "\n", "special_char_in_first_filename", "=", "invalid_char", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_set_embedding_id_default": [[90, 92], ["test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.api_workflow_client.set_embedding_id_to_latest"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.set_embedding_id_to_latest"], ["", "", "", "", "def", "test_set_embedding_id_default", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "set_embedding_id_to_latest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_upload_existing_embedding": [[93, 108], ["len", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.api_workflow_client.append_embeddings"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.append_embeddings"], ["", "def", "test_upload_existing_embedding", "(", "self", ")", ":", "\n", "\n", "# first upload embeddings", "\n", "        ", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", ")", "\n", "self", ".", "t_ester_upload_embedding", "(", "n_data", "=", "n_data", ")", "\n", "\n", "# create a new set of embeddings", "\n", "self", ".", "create_fake_embeddings", "(", "10", ")", "\n", "\n", "# mock the embeddings on the server", "\n", "self", ".", "api_workflow_client", ".", "n_dims_embeddings_on_server", "=", "32", "\n", "\n", "self", ".", "api_workflow_client", ".", "append_embeddings", "(", "\n", "self", ".", "path_to_embeddings", ",", "\n", "'embedding_id_xyz_2'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_append_embeddings_with_overlap": [[110, 158], ["len", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.api_workflow_client.append_embeddings", "lightly.utils.io.load_embeddings", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "lightly.utils.io.load_embeddings", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.assertListEqual", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.assertListEqual", "list", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.append_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.load_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.utils.io.load_embeddings"], ["", "def", "test_append_embeddings_with_overlap", "(", "self", ")", ":", "\n", "\n", "# mock the embeddings on the server", "\n", "        ", "n_data_server", "=", "len", "(", "self", ".", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", ")", "\n", "self", ".", "api_workflow_client", ".", "n_dims_embeddings_on_server", "=", "32", "\n", "\n", "# create new local embeddings overlapping with server embeddings", "\n", "n_data_start_local", "=", "n_data_server", "//", "3", "\n", "n_data_local", "=", "n_data_server", "*", "2", "\n", "self", ".", "create_fake_embeddings", "(", "n_data", "=", "n_data_local", ",", "n_data_start", "=", "n_data_start_local", ")", "\n", "\n", "\"\"\"\n        Assumptions:\n            n_data_server = 100\n            n_data_start_local = 33\n            n_data_local = 200\n        \n        Server embeddings file:\n            filenames: 0 ... 99\n            labels: 0 ... 99\n            \n        Local embeddings file:\n            filenames: 33 ... 232\n            labels: 0 ... 0 (all zero)\n            \n        Appended embedding file must thus be:\n            filenames: 0 ... 232\n            labels: 0 ... 32 (from server) + 0 ... 0 (from local)\n        \"\"\"", "\n", "\n", "# append the local embeddings to the server embeddings", "\n", "self", ".", "api_workflow_client", ".", "append_embeddings", "(", "\n", "self", ".", "path_to_embeddings", ",", "\n", "'embedding_id_xyz_2'", ",", "\n", ")", "\n", "\n", "# load the new (appended) embeddings", "\n", "_", ",", "labels_appended", ",", "filenames_appended", "=", "load_embeddings", "(", "self", ".", "path_to_embeddings", ")", "\n", "\n", "# define the expected filenames and labels", "\n", "self", ".", "create_fake_embeddings", "(", "n_data", "=", "n_data_local", "+", "n_data_start_local", ")", "\n", "_", ",", "_", ",", "filenames_expected", "=", "load_embeddings", "(", "self", ".", "path_to_embeddings", ")", "\n", "labels_expected", "=", "list", "(", "range", "(", "n_data_start_local", ")", ")", "+", "[", "0", "]", "*", "n_data_local", "\n", "\n", "# make sure the list of filenames and labels equal", "\n", "self", ".", "assertListEqual", "(", "filenames_appended", ",", "filenames_expected", ")", "\n", "self", ".", "assertListEqual", "(", "labels_appended", ",", "labels_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.test_append_embeddings_different_shape": [[160, 175], ["len", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.assertRaises", "test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.api_workflow_client.append_embeddings"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.t_ester_upload_embedding", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.create_fake_embeddings", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_embeddings._UploadEmbeddingsMixin.append_embeddings"], ["", "def", "test_append_embeddings_different_shape", "(", "self", ")", ":", "\n", "\n", "# first upload embeddings", "\n", "        ", "n_data", "=", "len", "(", "self", ".", "api_workflow_client", ".", "_mappings_api", ".", "sample_names", ")", "\n", "self", ".", "t_ester_upload_embedding", "(", "n_data", "=", "n_data", ")", "\n", "\n", "# create a new set of embeddings", "\n", "self", ".", "create_fake_embeddings", "(", "10", ",", "n_dims", "=", "16", ")", "# default is 32", "\n", "\n", "self", ".", "api_workflow_client", ".", "n_dims_embeddings_on_server", "=", "32", "\n", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "append_embeddings", "(", "\n", "self", ".", "path_to_embeddings", ",", "\n", "'embedding_id_xyz_2'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_embeddings.TestApiWorkflowUploadEmbeddings.tearDown": [[178, 186], ["hasattr", "os.path.join", "os.remove"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "filename", "in", "[", "\"embeddings.csv\"", ",", "\"embeddings_sorted.csv\"", "]", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "'folder_path'", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "filename", ")", "\n", "os", ".", "remove", "(", "filepath", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_client.TestApiWorkflowClient.test_upload_file_with_signed_url": [[10, 20], ["unittest.mock.patch", "lightly.api.ApiWorkflowClient", "unittest.mock.Mock", "unittest.mock.Mock", "lightly.api.ApiWorkflowClient.upload_file_with_signed_url", "requests.put.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.upload_file_with_signed_url"], ["    ", "def", "test_upload_file_with_signed_url", "(", "self", ")", ":", "\n", "        ", "with", "mock", ".", "patch", "(", "'lightly.api.api_workflow_client.requests'", ")", "as", "requests", ":", "\n", "            ", "client", "=", "ApiWorkflowClient", "(", "token", "=", "\"\"", ")", "\n", "file", "=", "mock", ".", "Mock", "(", ")", "\n", "signed_write_url", "=", "mock", ".", "Mock", "(", ")", "\n", "client", ".", "upload_file_with_signed_url", "(", "\n", "file", "=", "file", ",", "\n", "signed_write_url", "=", "signed_write_url", ",", "\n", ")", "\n", "requests", ".", "put", ".", "assert_called_with", "(", "signed_write_url", ",", "data", "=", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_client.TestApiWorkflowClient.test_upload_file_with_signed_url_session": [[21, 32], ["unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "lightly.api.ApiWorkflowClient", "lightly.api.ApiWorkflowClient.upload_file_with_signed_url", "unittest.mock.Mock.put.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.upload_file_with_signed_url"], ["", "", "def", "test_upload_file_with_signed_url_session", "(", "self", ")", ":", "\n", "        ", "session", "=", "mock", ".", "Mock", "(", ")", "\n", "file", "=", "mock", ".", "Mock", "(", ")", "\n", "signed_write_url", "=", "mock", ".", "Mock", "(", ")", "\n", "client", "=", "ApiWorkflowClient", "(", "token", "=", "\"\"", ")", "\n", "client", ".", "upload_file_with_signed_url", "(", "\n", "file", "=", "file", ",", "\n", "signed_write_url", "=", "signed_write_url", ",", "\n", "session", "=", "session", "\n", ")", "\n", "session", ".", "put", ".", "assert_called_with", "(", "signed_write_url", ",", "data", "=", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_client.TestApiWorkflowClient.test_upload_file_with_signed_url_raise_status": [[33, 43], ["requests.exceptions.ConnectionError", "unittest.mock.patch", "lightly.api.ApiWorkflowClient", "test_api_workflow_client.TestApiWorkflowClient.assertRaises", "lightly.api.ApiWorkflowClient.upload_file_with_signed_url", "unittest.mock.Mock", "unittest.mock.Mock"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.upload_file_with_signed_url"], ["", "def", "test_upload_file_with_signed_url_raise_status", "(", "self", ")", ":", "\n", "        ", "def", "raise_connection_error", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "raise", "requests", ".", "exceptions", ".", "ConnectionError", "(", ")", "\n", "\n", "", "with", "mock", ".", "patch", "(", "'lightly.api.api_workflow_client.requests.put'", ",", "raise_connection_error", ")", ":", "\n", "            ", "client", "=", "ApiWorkflowClient", "(", "token", "=", "\"\"", ")", "\n", "with", "self", ".", "assertRaises", "(", "requests", ".", "exceptions", ".", "ConnectionError", ")", ":", "\n", "                ", "client", ".", "upload_file_with_signed_url", "(", "\n", "file", "=", "mock", ".", "Mock", "(", ")", ",", "\n", "signed_write_url", "=", "mock", ".", "Mock", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.setUp": [[20, 26], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowSetup.setUp", "warnings.filterwarnings", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.setUp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "MockedApiWorkflowSetup", ".", "setUp", "(", "self", ")", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "category", "=", "UserWarning", ")", "\n", "self", ".", "n_data", "=", "100", "\n", "self", ".", "create_fake_dataset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "_tags_api", ".", "no_tags", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.tearDown": [[28, 30], ["warnings.resetwarnings"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "warnings", ".", "resetwarnings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_dataset": [[31, 50], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "len", "os.path.join", "data[].save", "len", "os.path.join.endswith", "range", "len", "len"], "methods", ["None"], ["", "def", "create_fake_dataset", "(", "self", ",", "length_of_filepath", ":", "int", "=", "-", "1", ",", "sample_names", "=", "None", ")", ":", "\n", "        ", "n_data", "=", "self", ".", "n_data", "if", "sample_names", "is", "None", "else", "len", "(", "sample_names", ")", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "image_extension", "=", "'.jpg'", "\n", "sample_names", "=", "sample_names", "if", "sample_names", "is", "not", "None", "else", "[", "f'img_{i}{image_extension}'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "sample_name", "=", "sample_names", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_name", ")", "\n", "\n", "if", "length_of_filepath", ">", "len", "(", "path", ")", ":", "\n", "                ", "assert", "path", ".", "endswith", "(", "image_extension", ")", "\n", "n_missing_chars", "=", "length_of_filepath", "-", "len", "(", "path", ")", "\n", "path", "=", "path", "[", ":", "-", "len", "(", "image_extension", ")", "]", "+", "'x'", "*", "n_missing_chars", "+", "image_extension", "\n", "\n", "", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.corrupt_fake_dataset": [[51, 56], ["pathlib.Path().touch", "range", "pathlib.Path", "os.path.join"], "methods", ["None"], ["", "", "def", "corrupt_fake_dataset", "(", "self", ")", ":", "\n", "        ", "n_data", "=", "self", ".", "n_data", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "for", "sample_name", "in", "sample_names", ":", "\n", "            ", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_name", ")", ")", ".", "touch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_no_dataset": [[57, 60], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.assertRaises", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "", "def", "test_upload_dataset_no_dataset", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_over_quota": [[61, 70], ["str", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.assertRaises", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "", "def", "test_upload_dataset_over_quota", "(", "self", ")", ":", "\n", "        ", "quota", "=", "self", ".", "n_data", "-", "1", "\n", "\n", "def", "get_quota_reduced", "(", ")", ":", "\n", "            ", "return", "str", "(", "quota", ")", "\n", "\n", "", "self", ".", "api_workflow_client", ".", "_quota_api", ".", "get_quota_maximum_dataset_size", "=", "get_quota_reduced", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_from_folder": [[71, 73], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "", "def", "test_upload_dataset_from_folder", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_from_folder_full": [[74, 76], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "def", "test_upload_dataset_from_folder_full", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ",", "mode", "=", "\"full\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_from_folder_only_metadata": [[77, 79], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "def", "test_upload_dataset_from_folder_only_metadata", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ",", "mode", "=", "\"metadata\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upsize_existing_dataset": [[80, 83], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "def", "test_upsize_existing_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_tags_api", ".", "no_tags", "=", "1", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_from_dataset": [[84, 87], ["lightly.data.dataset.LightlyDataset.from_torch_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.from_torch_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "def", "test_upload_dataset_from_dataset", "(", "self", ")", ":", "\n", "        ", "dataset", "=", "LightlyDataset", ".", "from_torch_dataset", "(", "self", ".", "dataset", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_corrupt_dataset_from_folder": [[88, 92], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.corrupt_fake_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.corrupt_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "def", "test_corrupt_dataset_from_folder", "(", "self", ")", ":", "\n", "        ", "self", ".", "corrupt_fake_dataset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_filename_length_lower": [[93, 99], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client._samples_api.get_samples_by_dataset_id", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id"], ["", "def", "test_filename_length_lower", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", "length_of_filepath", "=", "MAXIMUM_FILENAME_LENGTH", "-", "1", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "_samples_api", ".", "get_samples_by_dataset_id", "(", "dataset_id", "=", "\"does not matter\"", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "n_data", ",", "len", "(", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_filename_length_upper": [[100, 106], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client._samples_api.get_samples_by_dataset_id", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id"], ["", "def", "test_filename_length_upper", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", "length_of_filepath", "=", "MAXIMUM_FILENAME_LENGTH", "+", "10", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "_samples_api", ".", "get_samples_by_dataset_id", "(", "dataset_id", "=", "\"does not matter\"", ")", "\n", "self", ".", "assertEqual", "(", "0", ",", "len", "(", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_video_dataset": [[107, 118], ["tempfile.mkdtemp", "range", "os.path.join", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.VideoWriter.write", "numpy.random.randn"], "methods", ["None"], ["", "def", "create_fake_video_dataset", "(", "self", ",", "n_videos", "=", "5", ",", "n_frames_per_video", "=", "10", ",", "w", "=", "32", ",", "h", "=", "32", ",", "c", "=", "3", ",", "extension", "=", "'avi'", ")", ":", "\n", "\n", "        ", "self", ".", "video_input_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "frames", "=", "(", "np", ".", "random", ".", "randn", "(", "n_frames_per_video", ",", "w", ",", "h", ",", "c", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_videos", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "video_input_dir", ",", "f'output-{i}.{extension}'", ")", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "path", ",", "0", ",", "1", ",", "(", "w", ",", "h", ")", ")", "\n", "for", "frame", "in", "self", ".", "frames", ":", "\n", "                ", "out", ".", "write", "(", "frame", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_video_dataset_from_folder": [[119, 122], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_video_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_video_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "", "def", "test_upload_video_dataset_from_folder", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_video_dataset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_twice": [[123, 149], ["numpy.random.default_rng", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client._samples_api.get_samples_by_dataset_id", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.assertLess", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client._samples_api.get_samples_by_dataset_id", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.assertEqual", "len", "len", "numpy.random.default_rng.random", "base_upload_single_image", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id"], ["", "def", "test_upload_dataset_twice", "(", "self", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "2021", ")", "\n", "\n", "base_upload_single_image", "=", "self", ".", "api_workflow_client", ".", "_upload_single_image", "\n", "\n", "# Upload with some uploads failing", "\n", "def", "failing_upload_sample", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "rng", ".", "random", "(", ")", "<", "0.9", ":", "\n", "                ", "return", "base_upload_single_image", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "\n", "", "", "self", ".", "api_workflow_client", ".", "_upload_single_image", "=", "failing_upload_sample", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n", "# Ensure that not all samples were uploaded", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "_samples_api", ".", "get_samples_by_dataset_id", "(", "dataset_id", "=", "\"does not matter\"", ")", "\n", "self", ".", "assertLess", "(", "len", "(", "samples", ")", ",", "self", ".", "n_data", ")", "\n", "\n", "# Upload without failing uploads", "\n", "self", ".", "api_workflow_client", ".", "_upload_single_image", "=", "base_upload_single_image", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n", "# Ensure that now all samples were uploaded exactly once", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "_samples_api", ".", "get_samples_by_dataset_id", "(", "dataset_id", "=", "\"does not matter\"", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "n_data", ",", "len", "(", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.test_upload_dataset_twice_with_overlap": [[151, 170], ["test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.create_fake_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client.upload_dataset", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.api_workflow_client._samples_api.get_samples_by_dataset_id", "test_api_workflow_upload_dataset.TestApiWorkflowUploadDataset.assertListEqual", "sorted", "sorted", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id"], ["", "def", "test_upload_dataset_twice_with_overlap", "(", "self", ")", ":", "\n", "\n", "        ", "all_sample_names", "=", "[", "f'img_upload_twice_{i}.jpg'", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "\n", "# upload first part of the dataset (sample_0 - sample_6)", "\n", "self", ".", "create_fake_dataset", "(", "sample_names", "=", "all_sample_names", "[", ":", "7", "]", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n", "# upload second part of the dataset (sample_3 - sample_9)", "\n", "self", ".", "create_fake_dataset", "(", "sample_names", "=", "all_sample_names", "[", "3", ":", "]", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n", "# always returns all samples so dataset_id doesn't matter", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "_samples_api", ".", "get_samples_by_dataset_id", "(", "dataset_id", "=", "''", ")", "\n", "\n", "# assert the filenames are the same", "\n", "self", ".", "assertListEqual", "(", "\n", "sorted", "(", "all_sample_names", ")", ",", "\n", "sorted", "(", "[", "s", ".", "file_name", "for", "s", "in", "samples", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset": [[27, 50], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "dict", "tempfile.NamedTemporaryFile", "json.dump", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.custom_metadata_file.flush", "os.path.join", "data[].save", "enumerate", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.dataset.LightlyDataset.dump"], ["    ", "def", "create_fake_dataset", "(", "self", ",", "n_data", ":", "int", "=", "10", ",", "sample_names", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_data", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "folder_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "image_extension", "=", "'.jpg'", "\n", "sample_names", "=", "sample_names", "if", "sample_names", "is", "not", "None", "else", "[", "\n", "f'img_{i}{image_extension}'", "for", "i", "in", "range", "(", "n_data", ")", "]", "\n", "for", "sample_idx", "in", "range", "(", "n_data", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "sample_idx", "]", "\n", "sample_name", "=", "sample_names", "[", "sample_idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "sample_name", ")", "\n", "data", "[", "0", "]", ".", "save", "(", "path", ")", "\n", "\n", "", "coco_json", "=", "dict", "(", ")", "\n", "coco_json", "[", "COCO_ANNOTATION_KEYS", ".", "images", "]", "=", "[", "{", "'id'", ":", "i", ",", "'file_name'", ":", "fname", "}", "for", "i", ",", "fname", "in", "\n", "enumerate", "(", "sample_names", ")", "]", "\n", "coco_json", "[", "COCO_ANNOTATION_KEYS", ".", "custom_metadata", "]", "=", "[", "{", "'id'", ":", "i", ",", "'image_id'", ":", "i", ",", "'custom_metadata'", ":", "0", "}", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "sample_names", ")", "]", "\n", "\n", "self", ".", "custom_metadata_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "\"w+\"", ")", "\n", "json", ".", "dump", "(", "coco_json", ",", "self", ".", "custom_metadata_file", ")", "\n", "self", ".", "custom_metadata_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.test_upload_custom_metadata_one_step": [[51, 56], ["test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "open", "json.load", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset"], ["", "def", "test_upload_custom_metadata_one_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", ")", "\n", "with", "open", "(", "self", ".", "custom_metadata_file", ".", "name", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "custom_metadata", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ",", "custom_metadata", "=", "custom_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.test_upload_custom_metadata_two_steps_verbose": [[57, 63], ["test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_dataset", "open", "json.load", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_custom_metadata"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata"], ["", "", "def", "test_upload_custom_metadata_two_steps_verbose", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "with", "open", "(", "self", ".", "custom_metadata_file", ".", "name", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "custom_metadata", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_custom_metadata", "(", "custom_metadata", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.test_upload_custom_metadata_two_steps": [[64, 70], ["test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_dataset", "open", "json.load", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_custom_metadata"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata"], ["", "", "def", "test_upload_custom_metadata_two_steps", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "with", "open", "(", "self", ".", "custom_metadata_file", ".", "name", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "custom_metadata", "=", "json", ".", "load", "(", "f", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_custom_metadata", "(", "custom_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.test_upload_custom_metadata_before_uploading_samples": [[71, 77], ["test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "open", "json.load", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.assertWarns", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_custom_metadata"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata"], ["", "", "def", "test_upload_custom_metadata_before_uploading_samples", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", ")", "\n", "with", "open", "(", "self", ".", "custom_metadata_file", ".", "name", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "custom_metadata", "=", "json", ".", "load", "(", "f", ")", "\n", "with", "self", ".", "assertWarns", "(", "InvalidCustomMetadataWarning", ")", ":", "\n", "                ", "self", ".", "api_workflow_client", ".", "upload_custom_metadata", "(", "custom_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.test_upload_custom_metadata_with_append": [[78, 85], ["test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_dataset", "open", "json.load", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_custom_metadata"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata"], ["", "", "", "def", "test_upload_custom_metadata_with_append", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_fake_dataset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "with", "open", "(", "self", ".", "custom_metadata_file", ".", "name", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "custom_metadata", "=", "json", ".", "load", "(", "f", ")", "\n", "custom_metadata", "[", "'metadata'", "]", "=", "custom_metadata", "[", "'metadata'", "]", "[", ":", "3", "]", "\n", "self", ".", "api_workflow_client", ".", "upload_custom_metadata", "(", "custom_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.subtest_upload_custom_metadata": [[87, 144], ["test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.subTest", "lightly.openapi_generated.swagger_client.SampleData", "len", "len", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_custom_metadata", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.assertWarns", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_custom_metadata", "zip", "set", "set", "set", "set"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_metadata._UploadCustomMetadataMixin.upload_custom_metadata"], ["", "", "def", "subtest_upload_custom_metadata", "(", "\n", "self", ",", "\n", "image_ids_images", ":", "List", "[", "int", "]", ",", "\n", "image_ids_annotations", ":", "List", "[", "int", "]", ",", "\n", "filenames_server", ":", "List", "[", "str", "]", "\n", ")", ":", "\n", "\n", "        ", "def", "get_samples_by_dataset_id", "(", "*", "args", ",", "**", "kwargs", ")", "->", "List", "[", "SampleData", "]", ":", "\n", "            ", "samples", "=", "[", "\n", "SampleData", "(", "\n", "id", "=", "\"dfd\"", ",", "\n", "file_name", "=", "filename", ",", "\n", "dataset_id", "=", "'dataset_id_xyz'", ",", "\n", "type", "=", "'Images'", "\n", ")", "\n", "for", "filename", "in", "filenames_server", "\n", "]", "\n", "return", "samples", "\n", "", "self", ".", "api_workflow_client", ".", "_samples_api", ".", "get_samples_by_dataset_id", "=", "get_samples_by_dataset_id", "\n", "filenames_metadata", "=", "[", "f\"img_{id}.jpg\"", "for", "id", "in", "image_ids_annotations", "]", "\n", "\n", "with", "self", ".", "subTest", "(", "image_ids_images", "=", "image_ids_images", ",", "\n", "image_ids_annotations", "=", "image_ids_annotations", ",", "\n", "filenames_server", "=", "filenames_server", "\n", "\n", ")", ":", "\n", "            ", "custom_metadata", "=", "{", "\n", "COCO_ANNOTATION_KEYS", ".", "images", ":", "[", "\n", "{", "\n", "COCO_ANNOTATION_KEYS", ".", "images_id", ":", "id", ",", "\n", "COCO_ANNOTATION_KEYS", ".", "images_filename", ":", "filename", "}", "\n", "for", "id", ",", "filename", "in", "zip", "(", "image_ids_images", ",", "filenames_metadata", ")", "\n", "]", ",", "\n", "COCO_ANNOTATION_KEYS", ".", "custom_metadata", ":", "[", "\n", "{", "\n", "COCO_ANNOTATION_KEYS", ".", "custom_metadata_image_id", ":", "id", ",", "\n", "\"any_key\"", ":", "\"any_value\"", "\n", "}", "\n", "for", "id", "in", "image_ids_annotations", "\n", "]", ",", "\n", "}", "\n", "# The annotations must only have image_ids that are also in the images.", "\n", "custom_metadata_malformatted", "=", "len", "(", "set", "(", "image_ids_annotations", ")", "-", "set", "(", "image_ids_images", ")", ")", ">", "0", "\n", "# Only custom metadata whose filename is on the server can be uploaded.", "\n", "metatadata_without_filenames_on_server", "=", "len", "(", "set", "(", "filenames_metadata", ")", "-", "set", "(", "filenames_server", ")", ")", ">", "0", "\n", "\n", "if", "metatadata_without_filenames_on_server", "or", "custom_metadata_malformatted", ":", "\n", "                ", "with", "self", ".", "assertWarns", "(", "InvalidCustomMetadataWarning", ")", ":", "\n", "                    ", "self", ".", "api_workflow_client", ".", "upload_custom_metadata", "(", "\n", "custom_metadata", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "api_workflow_client", ".", "upload_custom_metadata", "(", "\n", "custom_metadata", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.test_upload_custom_metadata": [[147, 162], ["test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.api_workflow_client.upload_dataset", "list", "range", "test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.subtest_upload_custom_metadata"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.create_fake_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_upload_dataset._UploadDatasetMixin.upload_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_upload_custom_metadata.TestApiWorkflowUploadCustomMetadata.subtest_upload_custom_metadata"], ["", "", "", "def", "test_upload_custom_metadata", "(", "self", ")", ":", "\n", "        ", "potential_image_ids_images", "=", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "list", "(", "range", "(", "10", ")", ")", ",", "[", "-", "3", "]", "]", "\n", "potential_image_ids_annotations", "=", "potential_image_ids_images", "\n", "potential_filenames_server", "=", "[", "[", "f\"img_{id}.jpg\"", "for", "id", "in", "ids", "]", "for", "ids", "in", "potential_image_ids_images", "]", "\n", "\n", "self", ".", "create_fake_dataset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "upload_dataset", "(", "input", "=", "self", ".", "folder_path", ")", "\n", "\n", "for", "image_ids_images", "in", "potential_image_ids_images", ":", "\n", "            ", "for", "image_ids_annotations", "in", "potential_image_ids_annotations", ":", "\n", "                ", "for", "filenames_server", "in", "potential_filenames_server", ":", "\n", "                    ", "self", ".", "subtest_upload_custom_metadata", "(", "\n", "image_ids_images", ",", "\n", "image_ids_annotations", ",", "\n", "filenames_server", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.__init__": [[77, 91], ["lightly.openapi_generated.swagger_client.api.embeddings_api.EmbeddingsApi.__init__", "lightly.openapi_generated.swagger_client.models.dataset_embedding_data.DatasetEmbeddingData", "lightly.openapi_generated.swagger_client.models.dataset_embedding_data.DatasetEmbeddingData"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "api_client", ")", ":", "\n", "        ", "EmbeddingsApi", ".", "__init__", "(", "self", ",", "api_client", "=", "api_client", ")", "\n", "self", ".", "embeddings", "=", "[", "\n", "DatasetEmbeddingData", "(", "\n", "id", "=", "'embedding_id_xyz'", ",", "\n", "name", "=", "'embedding_name_xxyyzz'", ",", "\n", "is_processed", "=", "True", ",", "\n", "created_at", "=", "0", ",", "\n", ")", ",", "\n", "DatasetEmbeddingData", "(", "\n", "id", "=", "'embedding_id_xyz_2'", ",", "\n", "name", "=", "'default'", ",", "\n", "is_processed", "=", "True", ",", "\n", "created_at", "=", "0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.get_embeddings_csv_write_url_by_id": [[95, 100], ["mocked_api_workflow_client._check_dataset_id", "isinstance", "lightly.openapi_generated.swagger_client.models.write_csv_url_data.WriteCSVUrlData"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_embeddings_csv_write_url_by_id", "(", "self", ",", "dataset_id", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "dataset_id", ",", "str", ")", "\n", "response_", "=", "WriteCSVUrlData", "(", "signed_write_url", "=", "\"signed_write_url_valid\"", ",", "embedding_id", "=", "\"embedding_id_xyz\"", ")", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.get_embeddings_by_dataset_id": [[101, 105], ["mocked_api_workflow_client._check_dataset_id", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_embeddings_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", "->", "List", "[", "DatasetEmbeddingData", "]", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "dataset_id", ",", "str", ")", "\n", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.trigger2d_embeddings_job": [[106, 109], ["mocked_api_workflow_client._check_dataset_id", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "trigger2d_embeddings_job", "(", "self", ",", "body", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "body", ",", "Trigger2dEmbeddingJobRequest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedEmbeddingsApi.get_embeddings_csv_read_url_by_id": [[110, 113], ["mocked_api_workflow_client._check_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_embeddings_csv_read_url_by_id", "(", "self", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "return", "'https://my-embedding-read-url.com'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplingsApi.trigger_sampling_by_id": [[116, 123], ["mocked_api_workflow_client._check_dataset_id", "isinstance", "isinstance", "isinstance", "lightly.openapi_generated.swagger_client.models.async_task_data.AsyncTaskData"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["    ", "def", "trigger_sampling_by_id", "(", "self", ",", "body", ":", "SamplingCreateRequest", ",", "dataset_id", ",", "embedding_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "body", ",", "SamplingCreateRequest", ")", "\n", "assert", "isinstance", "(", "dataset_id", ",", "str", ")", "\n", "assert", "isinstance", "(", "embedding_id", ",", "str", ")", "\n", "response_", "=", "AsyncTaskData", "(", "job_id", "=", "\"155\"", ")", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedJobsApi.__init__": [[126, 129], ["lightly.openapi_generated.swagger_client.api.jobs_api.JobsApi.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "no_calls", "=", "0", "\n", "JobsApi", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedJobsApi.get_job_status_by_id": [[130, 142], ["isinstance", "lightly.openapi_generated.swagger_client.models.job_status_data_result.JobStatusDataResult", "lightly.openapi_generated.swagger_client.models.job_status_data.JobStatusData", "lightly.openapi_generated.swagger_client.models.job_status_data.JobStatusData"], "methods", ["None"], ["", "def", "get_job_status_by_id", "(", "self", ",", "job_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "job_id", ",", "str", ")", "\n", "self", ".", "no_calls", "+=", "1", "\n", "if", "self", ".", "no_calls", ">", "3", ":", "\n", "            ", "result", "=", "JobStatusDataResult", "(", "type", "=", "JobResultType", ".", "SAMPLING", ",", "data", "=", "\"selection_tag_id_xyz\"", ")", "\n", "response_", "=", "JobStatusData", "(", "id", "=", "\"id_\"", ",", "status", "=", "JobState", ".", "FINISHED", ",", "wait_time_till_next_poll", "=", "0", ",", "\n", "created_at", "=", "1234", ",", "finished_at", "=", "1357", ",", "result", "=", "result", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "None", "\n", "response_", "=", "JobStatusData", "(", "id", "=", "\"id_\"", ",", "status", "=", "JobState", ".", "RUNNING", ",", "wait_time_till_next_poll", "=", "0.001", ",", "\n", "created_at", "=", "1234", ",", "result", "=", "result", ")", "\n", "", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.create_initial_tag_by_dataset_id": [[145, 151], ["mocked_api_workflow_client._check_dataset_id", "isinstance", "isinstance", "lightly.openapi_generated.swagger_client.CreateEntityResponse"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["    ", "def", "create_initial_tag_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "body", ",", "InitialTagCreateRequest", ")", "\n", "assert", "isinstance", "(", "dataset_id", ",", "str", ")", "\n", "response_", "=", "CreateEntityResponse", "(", "id", "=", "\"xyz\"", ")", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tag_by_tag_id": [[152, 159], ["mocked_api_workflow_client._check_dataset_id", "isinstance", "isinstance", "lightly.openapi_generated.swagger_client.models.tag_data.TagData", "dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_tag_by_tag_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "dataset_id", ",", "str", ")", "\n", "assert", "isinstance", "(", "tag_id", ",", "str", ")", "\n", "response_", "=", "TagData", "(", "id", "=", "tag_id", ",", "dataset_id", "=", "dataset_id", ",", "prev_tag_id", "=", "\"initial-tag\"", ",", "bit_mask_data", "=", "\"0x80bda23e9\"", ",", "\n", "name", "=", "'second-tag'", ",", "tot_size", "=", "15", ",", "created_at", "=", "1577836800", ",", "changes", "=", "dict", "(", ")", ")", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tags_by_dataset_id": [[160, 183], ["mocked_api_workflow_client._check_dataset_id", "lightly.openapi_generated.swagger_client.models.tag_data.TagData", "lightly.openapi_generated.swagger_client.models.tag_data.TagData", "lightly.openapi_generated.swagger_client.models.tag_data.TagData", "lightly.openapi_generated.swagger_client.models.tag_data.TagData", "lightly.openapi_generated.swagger_client.models.tag_data.TagData", "getattr", "dict", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_tags_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "if", "dataset_id", "==", "'xyz-no-tags'", ":", "\n", "            ", "return", "[", "]", "\n", "", "tag_1", "=", "TagData", "(", "id", "=", "'inital_tag_id'", ",", "dataset_id", "=", "dataset_id", ",", "prev_tag_id", "=", "None", ",", "\n", "bit_mask_data", "=", "\"0xF\"", ",", "name", "=", "'initial-tag'", ",", "tot_size", "=", "4", ",", "\n", "created_at", "=", "1577836800", ",", "changes", "=", "dict", "(", ")", ")", "\n", "tag_2", "=", "TagData", "(", "id", "=", "'query_tag_id_xyz'", ",", "dataset_id", "=", "dataset_id", ",", "prev_tag_id", "=", "\"initial-tag\"", ",", "\n", "bit_mask_data", "=", "\"0xF\"", ",", "name", "=", "'query_tag_name_xyz'", ",", "tot_size", "=", "4", ",", "\n", "created_at", "=", "1577836800", ",", "changes", "=", "dict", "(", ")", ")", "\n", "tag_3", "=", "TagData", "(", "id", "=", "'preselected_tag_id_xyz'", ",", "dataset_id", "=", "dataset_id", ",", "prev_tag_id", "=", "\"initial-tag\"", ",", "\n", "bit_mask_data", "=", "\"0x1\"", ",", "name", "=", "'preselected_tag_name_xyz'", ",", "tot_size", "=", "4", ",", "\n", "created_at", "=", "1577836800", ",", "changes", "=", "dict", "(", ")", ")", "\n", "tag_4", "=", "TagData", "(", "id", "=", "'selected_tag_xyz'", ",", "dataset_id", "=", "dataset_id", ",", "prev_tag_id", "=", "\"preselected_tag_id_xyz\"", ",", "\n", "bit_mask_data", "=", "\"0x3\"", ",", "name", "=", "'selected_tag_xyz'", ",", "tot_size", "=", "4", ",", "\n", "created_at", "=", "1577836800", ",", "changes", "=", "dict", "(", ")", ")", "\n", "tag_5", "=", "TagData", "(", "id", "=", "'tag_with_integer_name'", ",", "dataset_id", "=", "dataset_id", ",", "prev_tag_id", "=", "None", ",", "\n", "bit_mask_data", "=", "'0x1'", ",", "name", "=", "'1000'", ",", "tot_size", "=", "4", ",", "\n", "created_at", "=", "1577836800", ",", "changes", "=", "dict", "(", ")", ")", "\n", "tags", "=", "[", "tag_1", ",", "tag_2", ",", "tag_3", ",", "tag_4", ",", "tag_5", "]", "\n", "no_tags_to_return", "=", "getattr", "(", "self", ",", "\"no_tags\"", ",", "5", ")", "\n", "tags", "=", "tags", "[", ":", "no_tags_to_return", "]", "\n", "return", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.perform_tag_arithmetics": [[184, 190], ["mocked_api_workflow_client._check_dataset_id", "lightly.openapi_generated.swagger_client.TagBitMaskResponse", "lightly.openapi_generated.swagger_client.CreateEntityResponse"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "perform_tag_arithmetics", "(", "self", ",", "body", ":", "TagArithmeticsRequest", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "if", "(", "body", ".", "new_tag_name", "is", "None", ")", "or", "(", "body", ".", "new_tag_name", "==", "''", ")", ":", "\n", "            ", "return", "TagBitMaskResponse", "(", "bit_mask_data", "=", "\"0x2\"", ")", "\n", "", "else", ":", "\n", "            ", "return", "CreateEntityResponse", "(", "id", "=", "\"tag-arithmetic-created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.perform_tag_arithmetics_bitmask": [[191, 194], ["mocked_api_workflow_client._check_dataset_id", "lightly.openapi_generated.swagger_client.TagBitMaskResponse"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "", "def", "perform_tag_arithmetics_bitmask", "(", "self", ",", "body", ":", "TagArithmeticsRequest", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "return", "TagBitMaskResponse", "(", "bit_mask_data", "=", "\"0x2\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.upsize_tags_by_dataset_id": [[195, 198], ["mocked_api_workflow_client._check_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "upsize_tags_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "body", ".", "upsize_tag_creator", "==", "TagCreator", ".", "USER_PIP", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.create_tag_by_dataset_id": [[199, 205], ["mocked_api_workflow_client._check_dataset_id", "lightly.openapi_generated.swagger_client.models.tag_data.TagData", "dict"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "create_tag_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "tag", "=", "TagData", "(", "id", "=", "'inital_tag_id'", ",", "dataset_id", "=", "dataset_id", ",", "prev_tag_id", "=", "body", "[", "'prev_tag_id'", "]", ",", "\n", "bit_mask_data", "=", "body", "[", "'bit_mask_data'", "]", ",", "name", "=", "body", "[", "'name'", "]", ",", "tot_size", "=", "10", ",", "\n", "created_at", "=", "1577836800", ",", "changes", "=", "dict", "(", ")", ")", "\n", "return", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.delete_tag_by_tag_id": [[206, 213], ["mocked_api_workflow_client._check_dataset_id", "mocked_api_workflow_client.MockedTagsApi.get_tags_by_dataset_id", "any", "all"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.get_tags_by_dataset_id"], ["", "def", "delete_tag_by_tag_id", "(", "self", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "tags", "=", "self", ".", "get_tags_by_dataset_id", "(", "dataset_id", ")", "\n", "# assert that tag exists", "\n", "assert", "any", "(", "[", "tag", ".", "id", "==", "tag_id", "for", "tag", "in", "tags", "]", ")", "\n", "# assert that tag is a leaf", "\n", "assert", "all", "(", "[", "tag", ".", "prev_tag_id", "!=", "tag_id", "for", "tag", "in", "tags", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.export_tag_to_label_studio_tasks": [[214, 216], ["None"], "methods", ["None"], ["", "def", "export_tag_to_label_studio_tasks", "(", "self", ",", "dataset_id", ":", "str", ",", "tag_id", ":", "str", ")", ":", "\n", "        ", "return", "[", "{", "'id'", ":", "0", ",", "'data'", ":", "{", "'image'", ":", "'https://api.lightly.ai/v1/datasets/62383ab8f9cb290cd83ab5f9/samples/62383cb7e6a0f29e3f31e213/readurlRedirect?type=full&CENSORED'", ",", "'lightlyFileName'", ":", "'2008_006249_jpg.rf.fdd64460945ca901aa3c7e48ffceea83.jpg'", ",", "'lightlyMetaInfo'", ":", "{", "'type'", ":", "'IMAGE'", ",", "'datasetId'", ":", "'62383ab8f9cb290cd83ab5f9'", ",", "'fileName'", ":", "'2008_006249_jpg.rf.fdd64460945ca901aa3c7e48ffceea83.jpg'", ",", "'exif'", ":", "{", "}", ",", "'index'", ":", "0", ",", "'createdAt'", ":", "1647852727873", ",", "'lastModifiedAt'", ":", "1647852727873", ",", "'metaData'", ":", "{", "'sharpness'", ":", "27.31265790443818", ",", "'sizeInBytes'", ":", "48224", ",", "'snr'", ":", "2.1969673926211217", ",", "'mean'", ":", "[", "0.24441662557257224", ",", "0.4460417517905863", ",", "0.6960984853824035", "]", ",", "'shape'", ":", "[", "167", ",", "500", ",", "3", "]", ",", "'std'", ":", "[", "0.12448681278605961", ",", "0.09509570033043004", ",", "0.0763725998175394", "]", ",", "'sumOfSquares'", ":", "[", "6282.243860049413", ",", "17367.702452895475", ",", "40947.22059208768", "]", ",", "'sumOfValues'", ":", "[", "20408.78823530978", ",", "37244.486274513954", ",", "58124.22352943069", "]", "}", "}", "}", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.export_tag_to_label_box_data_rows": [[218, 220], ["None"], "methods", ["None"], ["", "def", "export_tag_to_label_box_data_rows", "(", "self", ",", "dataset_id", ":", "str", ",", "tag_id", ":", "str", ")", ":", "\n", "        ", "return", "[", "{", "'externalId'", ":", "'2008_007291_jpg.rf.2fca436925b52ea33cf897125a34a2fb.jpg'", ",", "'imageUrl'", ":", "'https://api.lightly.ai/v1/datasets/62383ab8f9cb290cd83ab5f9/samples/62383cb7e6a0f29e3f31e233/readurlRedirect?type=CENSORED'", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedTagsApi.export_tag_to_basic_filenames": [[221, 227], ["None"], "methods", ["None"], ["", "def", "export_tag_to_basic_filenames", "(", "self", ",", "dataset_id", ":", "str", ",", "tag_id", ":", "str", ")", ":", "\n", "        ", "return", "\"\"\"\nIMG_2276_jpeg_jpg.rf.7411b1902c81bad8cdefd2cc4eb3a97b.jpg\nIMG_2285_jpeg_jpg.rf.4a93d99b9f0b6cccfb27bf2f4a13b99e.jpg\nIMG_2274_jpeg_jpg.rf.2f319e949748145fb22dcb52bb325a0c.jpg\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedScoresApi.create_or_update_active_learning_score_by_tag_id": [[230, 237], ["mocked_api_workflow_client._check_dataset_id", "lightly.openapi_generated.swagger_client.CreateEntityResponse", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["    ", "def", "create_or_update_active_learning_score_by_tag_id", "(", "self", ",", "body", ",", "dataset_id", ",", "tag_id", ",", "**", "kwargs", ")", "->", "CreateEntityResponse", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "if", "len", "(", "body", ".", "scores", ")", ">", "0", "and", "not", "isinstance", "(", "body", ".", "scores", "[", "0", "]", ",", "float", ")", ":", "\n", "            ", "raise", "AttributeError", "\n", "", "response_", "=", "CreateEntityResponse", "(", "id", "=", "\"selected_tag_id_xyz\"", ")", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedMappingsApi.__init__": [[240, 248], ["lightly.openapi_generated.swagger_client.api.mappings_api.MappingsApi.__init__", "sample_names.reverse", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "samples_api", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_samples_api", "=", "samples_api", "\n", "MappingsApi", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_samples", "=", "N_FILES_ON_SERVER", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "self", ".", "n_samples", ")", "]", "\n", "sample_names", ".", "reverse", "(", ")", "\n", "self", ".", "sample_names", "=", "sample_names", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedMappingsApi.get_sample_mappings_by_dataset_id": [[250, 254], ["None"], "methods", ["None"], ["", "def", "get_sample_mappings_by_dataset_id", "(", "self", ",", "dataset_id", ",", "field", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "dataset_id", "==", "'xyz-no-tags'", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "self", ".", "sample_names", "[", ":", "self", ".", "n_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.__init__": [[257, 260], ["lightly.openapi_generated.swagger_client.SamplesApi.__init__"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "sample_create_requests", ":", "List", "[", "SampleCreateRequest", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_samples_by_dataset_id": [[261, 274], ["enumerate", "lightly.openapi_generated.swagger_client.SampleData", "samples.append"], "methods", ["None"], ["", "def", "get_samples_by_dataset_id", "(", "\n", "self", ",", "dataset_id", ",", "**", "kwargs", "\n", ")", "->", "List", "[", "SampleData", "]", ":", "\n", "        ", "samples", "=", "[", "]", "\n", "for", "i", ",", "body", "in", "enumerate", "(", "self", ".", "sample_create_requests", ")", ":", "\n", "            ", "sample", "=", "SampleData", "(", "\n", "id", "=", "f'{i}_xyz'", ",", "\n", "dataset_id", "=", "'dataset_id_xyz'", ",", "\n", "file_name", "=", "body", ".", "file_name", ",", "\n", "type", "=", "'Images'", ",", "\n", ")", "\n", "samples", ".", "append", "(", "sample", ")", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.create_sample_by_dataset_id": [[275, 281], ["mocked_api_workflow_client._check_dataset_id", "isinstance", "lightly.openapi_generated.swagger_client.CreateEntityResponse", "mocked_api_workflow_client.MockedSamplesApi.sample_create_requests.append"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "create_sample_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "body", ",", "SampleCreateRequest", ")", "\n", "response_", "=", "CreateEntityResponse", "(", "id", "=", "\"xyz\"", ")", "\n", "self", ".", "sample_create_requests", ".", "append", "(", "body", ")", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_sample_image_write_url_by_id": [[282, 286], ["mocked_api_workflow_client._check_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_sample_image_write_url_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "is_thumbnail", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "url", "=", "f\"{sample_id}_write_url\"", "\n", "return", "url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_sample_image_read_url_by_id": [[287, 291], ["mocked_api_workflow_client._check_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_sample_image_read_url_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "type", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "url", "=", "f\"{sample_id}_write_url\"", "\n", "return", "url", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.get_sample_image_write_urls_by_id": [[292, 298], ["mocked_api_workflow_client._check_dataset_id", "lightly.openapi_generated.swagger_client.SampleWriteUrls"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_sample_image_write_urls_by_id", "(", "self", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", "->", "SampleWriteUrls", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "thumb_url", "=", "f\"{sample_id}_thumb_write_url\"", "\n", "full_url", "=", "f\"{sample_id}_full_write_url\"", "\n", "ret", "=", "SampleWriteUrls", "(", "full", "=", "full_url", ",", "thumb", "=", "thumb_url", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedSamplesApi.update_sample_by_id": [[299, 302], ["mocked_api_workflow_client._check_dataset_id", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "update_sample_by_id", "(", "self", ",", "body", ",", "dataset_id", ",", "sample_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "assert", "isinstance", "(", "body", ",", "SampleUpdateRequest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.__init__": [[305, 321], ["mocked_api_workflow_client.MockedDatasetsApi.reset", "lightly.openapi_generated.swagger_client.models.dataset_data.DatasetData", "range"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset"], ["    ", "def", "__init__", "(", "self", ",", "api_client", ")", ":", "\n", "        ", "no_datasets", "=", "3", "\n", "self", ".", "default_datasets", "=", "[", "\n", "DatasetData", "(", "\n", "name", "=", "f\"dataset_{i}\"", ",", "\n", "id", "=", "f\"dataset_{i}_id\"", ",", "\n", "last_modified_at", "=", "i", ",", "\n", "type", "=", "\"\"", ",", "img_type", "=", "\"full\"", ",", "\n", "size_in_bytes", "=", "-", "1", ",", "\n", "n_samples", "=", "-", "1", ",", "\n", "created_at", "=", "-", "1", ",", "\n", "user_id", "=", "'user_0'", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "no_datasets", ")", "\n", "]", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.reset": [[322, 324], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "datasets", "=", "self", ".", "default_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets": [[325, 327], ["None"], "methods", ["None"], ["", "def", "get_datasets", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_all_datasets": [[328, 330], ["mocked_api_workflow_client.MockedDatasetsApi.get_datasets"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets"], ["", "def", "get_all_datasets", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "get_datasets", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.dataset_exists": [[331, 333], ["None"], "methods", ["None"], ["", "def", "dataset_exists", "(", "self", ",", "dataset_id", ":", "str", ")", ":", "\n", "        ", "return", "dataset_id", "in", "[", "d", ".", "id", "for", "d", "in", "self", ".", "default_datasets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.create_dataset": [[334, 352], ["isinstance", "lightly.openapi_generated.swagger_client.models.dataset_data.DatasetData", "lightly.openapi_generated.swagger_client.CreateEntityResponse", "len"], "methods", ["None"], ["", "def", "create_dataset", "(", "self", ",", "body", ":", "DatasetCreateRequest", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "body", ",", "DatasetCreateRequest", ")", "\n", "id", "=", "body", ".", "name", "+", "\"_id\"", "\n", "if", "body", ".", "name", "==", "'xyz-no-tags'", ":", "\n", "            ", "id", "=", "'xyz-no-tags'", "\n", "", "dataset", "=", "DatasetData", "(", "\n", "id", "=", "id", ",", "\n", "name", "=", "body", ".", "name", ",", "\n", "last_modified_at", "=", "len", "(", "self", ".", "datasets", ")", "+", "1", ",", "\n", "type", "=", "\"Images\"", ",", "\n", "size_in_bytes", "=", "-", "1", ",", "\n", "n_samples", "=", "-", "1", ",", "\n", "created_at", "=", "-", "1", ",", "\n", "user_id", "=", "'user_0'", ",", "\n", ")", "\n", "self", ".", "datasets", "+=", "[", "dataset", "]", "\n", "response_", "=", "CreateEntityResponse", "(", "id", "=", "id", ")", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_dataset_by_id": [[354, 360], ["mocked_api_workflow_client._check_dataset_id", "next", "lightly.openapi_generated.swagger_client.rest.ApiException"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "get_dataset_by_id", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "dataset", "=", "next", "(", "(", "dataset", "for", "dataset", "in", "self", ".", "default_datasets", "if", "dataset_id", "==", "dataset", ".", "id", ")", ",", "None", ")", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "raise", "ApiException", "(", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.register_dataset_upload_by_id": [[361, 364], ["mocked_api_workflow_client._check_dataset_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "register_dataset_upload_by_id", "(", "self", ",", "body", ",", "dataset_id", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.delete_dataset_by_id": [[365, 370], ["mocked_api_workflow_client._check_dataset_id", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "delete_dataset_by_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "_check_dataset_id", "(", "dataset_id", ")", "\n", "datasets_without_that_id", "=", "[", "dataset", "for", "dataset", "in", "self", ".", "datasets", "if", "dataset", ".", "id", "!=", "dataset_id", "]", "\n", "assert", "len", "(", "datasets_without_that_id", ")", "==", "len", "(", "self", ".", "datasets", ")", "-", "1", "\n", "self", ".", "datasets", "=", "datasets_without_that_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.__init__": [[373, 380], ["lightly.openapi_generated.swagger_client.api.datasources_api.DatasourcesApi.__init__", "mocked_api_workflow_client.MockedDatasourcesApi.reset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset"], ["    ", "def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "api_client", "=", "api_client", ")", "\n", "# maximum numbers of samples returned by list raw samples request", "\n", "self", ".", "_max_return_samples", "=", "2", "\n", "# default number of samples in every datasource", "\n", "self", ".", "_num_samples", "=", "5", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset": [[381, 392], ["lightly.openapi_generated.swagger_client.models.datasource_config_base.DatasourceConfigBase().to_dict", "lightly.openapi_generated.swagger_client.models.datasource_config_base.DatasourceConfigBase().to_dict", "collections.defaultdict", "collections.defaultdict", "lightly.openapi_generated.swagger_client.models.datasource_config_base.DatasourceConfigBase", "lightly.openapi_generated.swagger_client.models.datasource_config_base.DatasourceConfigBase"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.access_role.AccessRole.to_dict"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "local_datasource", "=", "DatasourceConfigBase", "(", "type", "=", "'LOCAL'", ",", "full_path", "=", "''", ",", "purpose", "=", "'INPUT_OUTPUT'", ")", ".", "to_dict", "(", ")", "\n", "azure_datasource", "=", "DatasourceConfigBase", "(", "type", "=", "'AZURE'", ",", "full_path", "=", "''", ",", "purpose", "=", "'INPUT_OUTPUT'", ")", ".", "to_dict", "(", ")", "\n", "\n", "self", ".", "_datasources", "=", "{", "\n", "\"dataset_id_xyz\"", ":", "local_datasource", ",", "\n", "\"dataset_0\"", ":", "azure_datasource", ",", "\n", "}", "\n", "self", ".", "_processed_until_timestamp", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "self", ".", "_samples", "=", "defaultdict", "(", "self", ".", "_default_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi._default_samples": [[393, 399], ["lightly.openapi_generated.swagger_client.models.datasource_raw_samples_data_row.DatasourceRawSamplesDataRow", "range"], "methods", ["None"], ["", "def", "_default_samples", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "DatasourceRawSamplesDataRow", "(", "\n", "file_name", "=", "f\"file_{i}\"", ",", "read_url", "=", "f\"url_{i}\"", "\n", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_samples", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_datasource_by_dataset_id": [[401, 407], ["lightly.openapi_generated.swagger_client.rest.ApiException"], "methods", ["None"], ["", "def", "get_datasource_by_dataset_id", "(", "self", ",", "dataset_id", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "datasource", "=", "self", ".", "_datasources", "[", "dataset_id", "]", "\n", "return", "datasource", "\n", "", "except", "Exception", ":", "\n", "            ", "raise", "ApiException", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_datasource_processed_until_timestamp_by_dataset_id": [[408, 413], ["lightly.openapi_generated.swagger_client.models.datasource_processed_until_timestamp_response.DatasourceProcessedUntilTimestampResponse"], "methods", ["None"], ["", "", "def", "get_datasource_processed_until_timestamp_by_dataset_id", "(", "\n", "self", ",", "dataset_id", ":", "str", ",", "**", "kwargs", "\n", ")", "->", "DatasourceProcessedUntilTimestampResponse", ":", "\n", "        ", "timestamp", "=", "self", ".", "_processed_until_timestamp", "[", "dataset_id", "]", "\n", "return", "DatasourceProcessedUntilTimestampResponse", "(", "timestamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_list_of_raw_samples_from_datasource_by_dataset_id": [[414, 451], ["min", "json.dumps", "lightly.openapi_generated.swagger_client.models.datasource_raw_samples_data.DatasourceRawSamplesData", "json.loads", "len", "isinstance", "RuntimeError", "len"], "methods", ["None"], ["", "def", "get_list_of_raw_samples_from_datasource_by_dataset_id", "(", "\n", "self", ",", "\n", "dataset_id", ",", "\n", "cursor", ":", "str", "=", "None", ",", "\n", "_from", ":", "int", "=", "None", ",", "\n", "to", ":", "int", "=", "None", ",", "\n", "relevant_filenames_file_name", ":", "str", "=", "-", "1", "\n", ")", "->", "DatasourceRawSamplesData", ":", "\n", "        ", "if", "relevant_filenames_file_name", "==", "-", "1", ":", "\n", "            ", "samples", "=", "self", ".", "_samples", "[", "dataset_id", "]", "\n", "", "elif", "isinstance", "(", "relevant_filenames_file_name", ",", "str", ")", "and", "len", "(", "relevant_filenames_file_name", ")", ">", "0", ":", "\n", "            ", "samples", "=", "self", ".", "_samples", "[", "dataset_id", "]", "[", ":", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"DATASET_DATASOURCE_RELEVANT_FILENAMES_INVALID\"", ")", "\n", "\n", "", "if", "cursor", "is", "None", ":", "\n", "# initial request", "\n", "            ", "assert", "_from", "is", "not", "None", "\n", "assert", "to", "is", "not", "None", "\n", "cursor_dict", "=", "{", "\"from\"", ":", "_from", ",", "\"to\"", ":", "to", "}", "\n", "current", "=", "_from", "\n", "", "else", ":", "\n", "# follow up request", "\n", "            ", "cursor_dict", "=", "json", ".", "loads", "(", "cursor", ")", "\n", "current", "=", "cursor_dict", "[", "\"current\"", "]", "\n", "to", "=", "cursor_dict", "[", "\"to\"", "]", "\n", "\n", "", "next_current", "=", "min", "(", "current", "+", "self", ".", "_max_return_samples", ",", "to", "+", "1", ")", "\n", "samples", "=", "samples", "[", "current", ":", "next_current", "]", "\n", "cursor_dict", "[", "\"current\"", "]", "=", "next_current", "\n", "cursor", "=", "json", ".", "dumps", "(", "cursor_dict", ")", "\n", "has_more", "=", "len", "(", "samples", ")", ">", "0", "\n", "\n", "return", "DatasourceRawSamplesData", "(", "\n", "has_more", "=", "has_more", ",", "\n", "cursor", "=", "cursor", ",", "\n", "data", "=", "samples", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_list_of_raw_samples_predictions_from_datasource_by_dataset_id": [[453, 479], ["min", "json.dumps", "lightly.openapi_generated.swagger_client.models.datasource_raw_samples_predictions_data.DatasourceRawSamplesPredictionsData", "json.loads", "len"], "methods", ["None"], ["", "def", "get_list_of_raw_samples_predictions_from_datasource_by_dataset_id", "(", "\n", "self", ",", "dataset_id", ":", "str", ",", "task_name", ":", "str", ",", "\n", "cursor", ":", "str", "=", "None", ",", "_from", ":", "int", "=", "None", ",", "to", ":", "int", "=", "None", ",", "**", "kwargs", ",", "\n", ")", "->", "DatasourceRawSamplesPredictionsData", ":", "\n", "        ", "if", "cursor", "is", "None", ":", "\n", "# initial request", "\n", "            ", "assert", "_from", "is", "not", "None", "\n", "assert", "to", "is", "not", "None", "\n", "cursor_dict", "=", "{", "\"from\"", ":", "_from", ",", "\"to\"", ":", "to", "}", "\n", "current", "=", "_from", "\n", "", "else", ":", "\n", "# follow up request", "\n", "            ", "cursor_dict", "=", "json", ".", "loads", "(", "cursor", ")", "\n", "current", "=", "cursor_dict", "[", "\"current\"", "]", "\n", "to", "=", "cursor_dict", "[", "\"to\"", "]", "\n", "\n", "", "next_current", "=", "min", "(", "current", "+", "self", ".", "_max_return_samples", ",", "to", "+", "1", ")", "\n", "samples", "=", "self", ".", "_samples", "[", "dataset_id", "]", "[", "current", ":", "next_current", "]", "\n", "cursor_dict", "[", "\"current\"", "]", "=", "next_current", "\n", "cursor", "=", "json", ".", "dumps", "(", "cursor_dict", ")", "\n", "has_more", "=", "len", "(", "samples", ")", ">", "0", "\n", "\n", "return", "DatasourceRawSamplesPredictionsData", "(", "\n", "has_more", "=", "has_more", ",", "\n", "cursor", "=", "cursor", ",", "\n", "data", "=", "samples", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_list_of_raw_samples_metadata_from_datasource_by_dataset_id": [[481, 507], ["min", "json.dumps", "lightly.openapi_generated.swagger_client.DatasourceRawSamplesMetadataData", "json.loads", "len"], "methods", ["None"], ["", "def", "get_list_of_raw_samples_metadata_from_datasource_by_dataset_id", "(", "\n", "self", ",", "dataset_id", ":", "str", ",", "\n", "cursor", ":", "str", "=", "None", ",", "_from", ":", "int", "=", "None", ",", "to", ":", "int", "=", "None", ",", "**", "kwargs", ",", "\n", ")", "->", "DatasourceRawSamplesMetadataData", ":", "\n", "        ", "if", "cursor", "is", "None", ":", "\n", "# initial request", "\n", "            ", "assert", "_from", "is", "not", "None", "\n", "assert", "to", "is", "not", "None", "\n", "cursor_dict", "=", "{", "\"from\"", ":", "_from", ",", "\"to\"", ":", "to", "}", "\n", "current", "=", "_from", "\n", "", "else", ":", "\n", "# follow up request", "\n", "            ", "cursor_dict", "=", "json", ".", "loads", "(", "cursor", ")", "\n", "current", "=", "cursor_dict", "[", "\"current\"", "]", "\n", "to", "=", "cursor_dict", "[", "\"to\"", "]", "\n", "\n", "", "next_current", "=", "min", "(", "current", "+", "self", ".", "_max_return_samples", ",", "to", "+", "1", ")", "\n", "samples", "=", "self", ".", "_samples", "[", "dataset_id", "]", "[", "current", ":", "next_current", "]", "\n", "cursor_dict", "[", "\"current\"", "]", "=", "next_current", "\n", "cursor", "=", "json", ".", "dumps", "(", "cursor_dict", ")", "\n", "has_more", "=", "len", "(", "samples", ")", ">", "0", "\n", "\n", "return", "DatasourceRawSamplesMetadataData", "(", "\n", "has_more", "=", "has_more", ",", "\n", "cursor", "=", "cursor", ",", "\n", "data", "=", "samples", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.get_prediction_file_read_url_from_datasource_by_dataset_id": [[510, 512], ["None"], "methods", ["None"], ["", "def", "get_prediction_file_read_url_from_datasource_by_dataset_id", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "'https://my-read-url.com'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_by_dataset_id": [[514, 520], ["None"], "methods", ["None"], ["", "def", "update_datasource_by_dataset_id", "(", "\n", "self", ",", "body", ":", "DatasourceConfig", ",", "dataset_id", ":", "str", ",", "**", "kwargs", "\n", ")", "->", "None", ":", "\n", "#\u00a0TODO: Enable assert once we switch/update to new api code generator.", "\n", "#\u00a0assert isinstance(body, DatasourceConfig)", "\n", "        ", "self", ".", "_datasources", "[", "dataset_id", "]", "=", "body", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.update_datasource_processed_until_timestamp_by_dataset_id": [[521, 527], ["isinstance"], "methods", ["None"], ["", "def", "update_datasource_processed_until_timestamp_by_dataset_id", "(", "\n", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", "\n", ")", "->", "None", ":", "\n", "        ", "assert", "isinstance", "(", "body", ",", "DatasourceProcessedUntilTimestampRequest", ")", "\n", "to", "=", "body", ".", "processed_until_timestamp", "\n", "self", ".", "_processed_until_timestamp", "[", "dataset_id", "]", "=", "to", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.__init__": [[530, 565], ["lightly.openapi_generated.swagger_client.api.docker_api.DockerApi.__init__", "lightly.openapi_generated.swagger_client.models.docker_run_data.DockerRunData", "lightly.openapi_generated.swagger_client.models.docker_run_scheduled_data.DockerRunScheduledData", "lightly.openapi_generated.swagger_client.models.docker_worker_registry_entry_data.DockerWorkerRegistryEntryData", "lightly.openapi_generated.swagger_client.models.timestamp.Timestamp", "lightly.openapi_generated.swagger_client.models.timestamp.Timestamp", "lightly.openapi_generated.swagger_client.models.timestamp.Timestamp", "lightly.openapi_generated.swagger_client.models.timestamp.Timestamp", "lightly.openapi_generated.swagger_client.models.timestamp.Timestamp", "lightly.openapi_generated.swagger_client.models.timestamp.Timestamp"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["    ", "def", "__init__", "(", "self", ",", "api_client", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "api_client", "=", "api_client", ")", "\n", "self", ".", "_compute_worker_runs", "=", "[", "\n", "DockerRunData", "(", "\n", "id", "=", "\"compute-worker-run-1\"", ",", "\n", "docker_version", "=", "\"v1\"", ",", "\n", "dataset_id", "=", "\"dataset_id_xyz\"", ",", "\n", "state", "=", "DockerRunState", ".", "TRAINING", ",", "\n", "created_at", "=", "Timestamp", "(", "0", ")", ",", "\n", "last_modified_at", "=", "Timestamp", "(", "100", ")", ",", "\n", "message", "=", "None", ",", "\n", "messages", "=", "[", "]", ",", "\n", "report_available", "=", "False", ",", "\n", ")", "\n", "]", "\n", "self", ".", "_scheduled_compute_worker_runs", "=", "[", "\n", "DockerRunScheduledData", "(", "\n", "id", "=", "\"compute-worker-scheduled-run-1\"", ",", "\n", "dataset_id", "=", "\"dataset_id_xyz\"", ",", "\n", "config_id", "=", "\"config-id-1\"", ",", "\n", "priority", "=", "DockerRunScheduledPriority", ".", "MID", ",", "\n", "state", "=", "DockerRunScheduledState", ".", "OPEN", ",", "\n", "created_at", "=", "Timestamp", "(", "0", ")", ",", "\n", "last_modified_at", "=", "Timestamp", "(", "100", ")", ",", "\n", "owner", "=", "\"user-id-1\"", ",", "\n", ")", "\n", "]", "\n", "self", ".", "_registered_workers", "=", "[", "\n", "DockerWorkerRegistryEntryData", "(", "\n", "id", "=", "\"worker-registry-id-1\"", ",", "\n", "name", "=", "\"worker-name-1\"", ",", "\n", "worker_type", "=", "DockerWorkerType", ".", "FULL", ",", "\n", "state", "=", "DockerWorkerState", ".", "OFFLINE", ",", "\n", "created_at", "=", "Timestamp", "(", "0", ")", ",", "\n", "last_modified_at", "=", "Timestamp", "(", "0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.register_docker_worker": [[568, 571], ["isinstance", "lightly.openapi_generated.swagger_client.CreateEntityResponse"], "methods", ["None"], ["", "def", "register_docker_worker", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "body", ",", "CreateDockerWorkerRegistryEntryRequest", ")", "\n", "return", "CreateEntityResponse", "(", "id", "=", "'worker-id-123'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.delete_docker_worker_registry_entry_by_id": [[572, 574], ["None"], "methods", ["None"], ["", "def", "delete_docker_worker_registry_entry_by_id", "(", "self", ",", "worker_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "worker_id", "==", "'worker-id-123'", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.get_docker_worker_registry_entries": [[575, 577], ["None"], "methods", ["None"], ["", "def", "get_docker_worker_registry_entries", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_registered_workers", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.create_docker_worker_config": [[578, 581], ["isinstance", "lightly.openapi_generated.swagger_client.CreateEntityResponse"], "methods", ["None"], ["", "def", "create_docker_worker_config", "(", "self", ",", "body", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "body", ",", "DockerWorkerConfigCreateRequest", ")", "\n", "return", "CreateEntityResponse", "(", "id", "=", "'worker-config-id-123'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.create_docker_run_scheduled_by_dataset_id": [[582, 586], ["isinstance", "mocked_api_workflow_client._check_dataset_id", "lightly.openapi_generated.swagger_client.CreateEntityResponse"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id"], ["", "def", "create_docker_run_scheduled_by_dataset_id", "(", "self", ",", "body", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "body", ",", "DockerRunScheduledCreateRequest", ")", "\n", "_check_dataset_id", "(", "dataset_id", ")", "\n", "return", "CreateEntityResponse", "(", "id", "=", "f'scheduled-run-id-123-dataset-{dataset_id}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.get_docker_runs": [[587, 589], ["None"], "methods", ["None"], ["", "def", "get_docker_runs", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_compute_worker_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedComputeWorkerApi.get_docker_runs_scheduled_by_dataset_id": [[590, 594], ["None"], "methods", ["None"], ["", "def", "get_docker_runs_scheduled_by_dataset_id", "(", "self", ",", "dataset_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "runs", "=", "self", ".", "_scheduled_compute_worker_runs", "\n", "runs", "=", "[", "run", "for", "run", "in", "runs", "if", "run", ".", "dataset_id", "==", "dataset_id", "]", "\n", "return", "runs", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedVersioningApi.get_latest_pip_version": [[597, 599], ["None"], "methods", ["None"], ["    ", "def", "get_latest_pip_version", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\"1.0.8\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedVersioningApi.get_minimum_compatible_pip_version": [[600, 602], ["None"], "methods", ["None"], ["", "def", "get_minimum_compatible_pip_version", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\"1.0.0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedQuotaApi.get_quota_maximum_dataset_size": [[604, 606], ["None"], "methods", ["None"], ["    ", "def", "get_quota_maximum_dataset_size", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\"60000\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.request": [[618, 622], ["ValueError"], "methods", ["None"], ["    ", "def", "request", "(", "self", ",", "method", ",", "url", ",", "query_params", "=", "None", ",", "headers", "=", "None", ",", "\n", "post_params", "=", "None", ",", "body", "=", "None", ",", "_preload_content", "=", "True", ",", "\n", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"ERROR: calling ApiClient.request(), but this should be mocked.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiClient.call_api": [[623, 630], ["ValueError"], "methods", ["None"], ["", "def", "call_api", "(", "self", ",", "resource_path", ",", "method", ",", "\n", "path_params", "=", "None", ",", "query_params", "=", "None", ",", "header_params", "=", "None", ",", "\n", "body", "=", "None", ",", "post_params", "=", "None", ",", "files", "=", "None", ",", "\n", "response_type", "=", "None", ",", "auth_settings", "=", "None", ",", "async_req", "=", "None", ",", "\n", "_return_http_data_only", "=", "None", ",", "collection_formats", "=", "None", ",", "\n", "_preload_content", "=", "True", ",", "_request_timeout", "=", "None", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"ERROR: calling ApiClient.call_api(), but this should be mocked.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__": [[637, 658], ["lightly.api.api_workflow_client.ApiWorkflowClient.__init__", "mocked_api_workflow_client.MockedSamplingsApi", "mocked_api_workflow_client.MockedJobsApi", "mocked_api_workflow_client.MockedTagsApi", "mocked_api_workflow_client.MockedEmbeddingsApi", "mocked_api_workflow_client.MockedSamplesApi", "mocked_api_workflow_client.MockedMappingsApi", "mocked_api_workflow_client.MockedScoresApi", "mocked_api_workflow_client.MockedDatasetsApi", "mocked_api_workflow_client.MockedDatasourcesApi", "mocked_api_workflow_client.MockedQuotaApi", "mocked_api_workflow_client.MockedComputeWorkerApi"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "lightly", ".", "api", ".", "api_workflow_client", ".", "ApiClient", "=", "MockedApiClient", "\n", "lightly", ".", "api", ".", "version_checking", ".", "VersioningApi", "=", "MockedVersioningApi", "\n", "ApiWorkflowClient", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_selection_api", "=", "MockedSamplingsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_jobs_api", "=", "MockedJobsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_tags_api", "=", "MockedTagsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_embeddings_api", "=", "MockedEmbeddingsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_samples_api", "=", "MockedSamplesApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_mappings_api", "=", "MockedMappingsApi", "(", "api_client", "=", "self", ".", "api_client", ",", "\n", "samples_api", "=", "self", ".", "_samples_api", ")", "\n", "self", ".", "_scores_api", "=", "MockedScoresApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_datasets_api", "=", "MockedDatasetsApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_datasources_api", "=", "MockedDatasourcesApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_quota_api", "=", "MockedQuotaApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "self", ".", "_compute_worker_api", "=", "MockedComputeWorkerApi", "(", "api_client", "=", "self", ".", "api_client", ")", "\n", "\n", "lightly", ".", "api", ".", "api_workflow_client", ".", "requests", ".", "put", "=", "mocked_request_put", "\n", "\n", "self", ".", "wait_time_till_next_poll", "=", "0.001", "# for api_workflow_selection", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient.upload_file_with_signed_url": [[659, 666], ["requests.Response"], "methods", ["None"], ["", "def", "upload_file_with_signed_url", "(", "\n", "self", ",", "file", ":", "IOBase", ",", "signed_write_url", ":", "str", ",", "\n", "max_backoff", ":", "int", "=", "32", ",", "max_retries", ":", "int", "=", "5", ",", "headers", ":", "Dict", "=", "None", ",", "\n", "session", ":", "Optional", "[", "requests", ".", "Session", "]", "=", "None", ",", "\n", ")", "->", "Response", ":", "\n", "        ", "res", "=", "Response", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient._get_csv_reader_from_read_url": [[667, 689], ["range", "tempfile.SpooledTemporaryFile", "csv.writer", "csv.writer.writerows", "tempfile.SpooledTemporaryFile.seek", "io.StringIO", "csv.reader", "range", "row.append", "rows_csv.append", "tempfile.SpooledTemporaryFile.read", "row.append", "numpy.random.uniform", "range"], "methods", ["None"], ["", "def", "_get_csv_reader_from_read_url", "(", "self", ",", "read_url", ":", "str", ")", ":", "\n", "        ", "n_rows", ":", "int", "=", "self", ".", "n_embedding_rows_on_server", "\n", "n_dims", ":", "int", "=", "self", ".", "n_dims_embeddings_on_server", "\n", "\n", "rows_csv", "=", "[", "[", "'filenames'", "]", "+", "[", "f'embedding_{i}'", "for", "i", "in", "range", "(", "n_dims", ")", "]", "+", "[", "'labels'", "]", "]", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "            ", "row", "=", "[", "f'{self.embeddings_filename_base}_{i}.jpg'", "]", "\n", "for", "_", "in", "range", "(", "n_dims", ")", ":", "\n", "                ", "row", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ")", "\n", "", "row", ".", "append", "(", "i", ")", "\n", "rows_csv", ".", "append", "(", "row", ")", "\n", "\n", "# save the csv rows in a temporary in-memory string file", "\n", "# using a csv writer and then read them as bytes", "\n", "", "f", "=", "tempfile", ".", "SpooledTemporaryFile", "(", "mode", "=", "\"rw\"", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerows", "(", "rows_csv", ")", "\n", "f", ".", "seek", "(", "0", ")", "\n", "buffer", "=", "io", ".", "StringIO", "(", "f", ".", "read", "(", ")", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "buffer", ")", "\n", "\n", "return", "reader", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedApiWorkflowSetup.setUp": [[694, 696], ["mocked_api_workflow_client.MockedApiWorkflowClient"], "methods", ["None"], ["def", "setUp", "(", "self", ",", "token", "=", "\"token_xyz\"", ",", "dataset_id", "=", "\"dataset_id_xyz\"", ")", "->", "None", ":", "\n", "        ", "self", ".", "api_workflow_client", "=", "MockedApiWorkflowClient", "(", "token", "=", "token", ",", "dataset_id", "=", "dataset_id", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client._check_dataset_id": [[68, 71], ["isinstance", "len"], "function", ["None"], ["def", "_check_dataset_id", "(", "dataset_id", ":", "str", ")", ":", "\n", "    ", "assert", "isinstance", "(", "dataset_id", ",", "str", ")", "\n", "assert", "len", "(", "dataset_id", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.mocked_request_put": [[607, 615], ["isinstance", "data.read", "content_bytes.decode", "content_str.startswith", "requests.Response"], "function", ["home.repos.pwc.inspect_result.lightly-ai_lightly.modules.masked_autoencoder.MAEDecoder.decode"], ["", "", "def", "mocked_request_put", "(", "dst_url", ":", "str", ",", "data", "=", "IOBase", ")", "->", "Response", ":", "\n", "    ", "assert", "isinstance", "(", "dst_url", ",", "str", ")", "\n", "content_bytes", ":", "bytes", "=", "data", ".", "read", "(", ")", "\n", "content_str", ":", "str", "=", "content_bytes", ".", "decode", "(", "'utf-8'", ")", "\n", "assert", "content_str", ".", "startswith", "(", "'filenames'", ")", "\n", "response_", "=", "Response", "(", ")", "\n", "response_", ".", "status_code", "=", "200", "\n", "return", "response_", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.setUp": [[19, 28], ["warnings.filterwarnings", "tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowClient", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_all_tags", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_all_tags"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "lightly", ".", "api", ".", "api_workflow_client", ".", "__version__", "=", "lightly", ".", "__version__", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "category", "=", "UserWarning", ")", "\n", "self", ".", "api_workflow_client", "=", "MockedApiWorkflowClient", "(", "token", "=", "\"token_xyz\"", ")", "\n", "\n", "self", ".", "valid_tag_name", "=", "self", ".", "api_workflow_client", ".", "get_all_tags", "(", ")", "[", "0", "]", ".", "name", "\n", "self", ".", "invalid_tag_name", "=", "\"invalid_tag_name_xyz\"", "\n", "self", ".", "valid_tag_id", "=", "self", ".", "api_workflow_client", ".", "get_all_tags", "(", ")", "[", "0", "]", ".", "id", "\n", "self", ".", "invalid_tag_id", "=", "\"invalid-tag_id_xyz\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.tearDown": [[29, 31], ["warnings.resetwarnings"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "warnings", ".", "resetwarnings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_all_tags": [[32, 34], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_all_tags"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_all_tags"], ["", "def", "test_get_all_tags", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "get_all_tags", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_tag_name": [[35, 37], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_tag_by_name"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name"], ["", "def", "test_get_tag_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "get_tag_by_name", "(", "tag_name", "=", "self", ".", "valid_tag_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_tag_name_nonexisting": [[38, 41], ["test_api_workflow_tags.TestApiWorkflowTags.assertRaises", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_tag_by_name"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name"], ["", "def", "test_get_tag_name_nonexisting", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "get_tag_by_name", "(", "tag_name", "=", "self", ".", "invalid_tag_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_tag_id": [[42, 44], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_tag_by_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_id"], ["", "", "def", "test_get_tag_id", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "get_tag_by_id", "(", "tag_id", "=", "self", ".", "valid_tag_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_filenames_in_tag": [[45, 48], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_tag_by_name", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_filenames_in_tag"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_filenames_in_tag"], ["", "def", "test_get_filenames_in_tag", "(", "self", ")", ":", "\n", "        ", "tag_data", "=", "self", ".", "api_workflow_client", ".", "get_tag_by_name", "(", "tag_name", "=", "self", ".", "valid_tag_name", ")", "\n", "self", ".", "api_workflow_client", ".", "get_filenames_in_tag", "(", "tag_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_filenames_in_tag_with_filenames": [[49, 53], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_tag_by_name", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_filenames", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_filenames_in_tag"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_filenames_in_tag"], ["", "def", "test_get_filenames_in_tag_with_filenames", "(", "self", ")", ":", "\n", "        ", "tag_data", "=", "self", ".", "api_workflow_client", ".", "get_tag_by_name", "(", "tag_name", "=", "self", ".", "valid_tag_name", ")", "\n", "filenames", "=", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "get_filenames_in_tag", "(", "tag_data", ",", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_filenames_in_tag_exclude_parent": [[54, 57], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_tag_by_name", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_filenames_in_tag"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_filenames_in_tag"], ["", "def", "test_get_filenames_in_tag_exclude_parent", "(", "self", ")", ":", "\n", "        ", "tag_data", "=", "self", ".", "api_workflow_client", ".", "get_tag_by_name", "(", "tag_name", "=", "self", ".", "valid_tag_name", ")", "\n", "self", ".", "api_workflow_client", ".", "get_filenames_in_tag", "(", "tag_data", ",", "exclude_parent_tag", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_get_filenames_in_tag_with_filenames_exclude_parent": [[58, 62], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_tag_by_name", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_filenames", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_filenames_in_tag"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_tag_by_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.get_filenames_in_tag"], ["", "def", "test_get_filenames_in_tag_with_filenames_exclude_parent", "(", "self", ")", ":", "\n", "        ", "tag_data", "=", "self", ".", "api_workflow_client", ".", "get_tag_by_name", "(", "tag_name", "=", "self", ".", "valid_tag_name", ")", "\n", "filenames", "=", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "get_filenames_in_tag", "(", "tag_data", ",", "filenames", ",", "exclude_parent_tag", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_create_tag_from_filenames": [[68, 74], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.get_filenames", "test_api_workflow_tags.TestApiWorkflowTags.assertRaises", "test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.create_tag_from_filenames"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.data.lightly_subset.LightlySubset.get_filenames", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.create_tag_from_filenames"], ["", "def", "test_create_tag_from_filenames", "(", "self", ")", ":", "\n", "        ", "filenames_server", "=", "self", ".", "api_workflow_client", ".", "get_filenames", "(", ")", "\n", "filenames_new_tag", "=", "filenames_server", "[", ":", "10", "]", "[", ":", ":", "3", "]", "\n", "filenames_new_tag", "[", "0", "]", "=", "'some-random-non-existing-filename.jpg'", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "create_tag_from_filenames", "(", "filenames_new_tag", ",", "new_tag_name", "=", "\"funny_new_tag\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_tags.TestApiWorkflowTags.test_delete_tag_by_id": [[75, 77], ["test_api_workflow_tags.TestApiWorkflowTags.api_workflow_client.delete_tag_by_id"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_tags._TagsMixin.delete_tag_by_id"], ["", "", "def", "test_delete_tag_by_id", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "delete_tag_by_id", "(", "self", ".", "valid_tag_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_create_dataset_new": [[8, 12], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["    ", "def", "test_create_dataset_new", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "create_dataset", "(", "dataset_name", "=", "\"dataset_new\"", ")", "\n", "test_var", "=", "self", ".", "api_workflow_client", ".", "dataset_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_create_dataset_existing": [[13, 16], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "def", "test_create_dataset_existing", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "create_dataset", "(", "dataset_name", "=", "\"dataset_1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_create_dataset_with_counter": [[17, 24], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_dataset", "range", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_new_dataset_with_unique_name"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.create_new_dataset_with_unique_name"], ["", "def", "test_create_dataset_with_counter", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "create_dataset", "(", "dataset_name", "=", "\"basename\"", ")", "\n", "n_tries", "=", "3", "\n", "for", "i", "in", "range", "(", "n_tries", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "create_new_dataset_with_unique_name", "(", "dataset_basename", "=", "\"basename\"", ")", "\n", "", "assert", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "datasets", "[", "-", "1", "]", ".", "name", "==", "f\"basename_{n_tries}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_create_dataset_with_counter_nonexisting": [[25, 30], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_dataset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_new_dataset_with_unique_name"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.create_new_dataset_with_unique_name"], ["", "def", "test_create_dataset_with_counter_nonexisting", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "create_dataset", "(", "dataset_name", "=", "\"basename\"", ")", "\n", "self", ".", "api_workflow_client", ".", "create_new_dataset_with_unique_name", "(", "dataset_basename", "=", "\"baseName\"", ")", "\n", "assert", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "datasets", "[", "-", "1", "]", ".", "name", "==", "\"baseName\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_set_dataset_id_success": [[31, 35], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.set_dataset_id_by_name"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.set_dataset_id_by_name"], ["", "def", "test_set_dataset_id_success", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "set_dataset_id_by_name", "(", "\"dataset_1\"", ")", "\n", "assert", "self", ".", "api_workflow_client", ".", "dataset_id", "==", "\"dataset_1_id\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_set_dataset_id_error": [[36, 40], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.assertRaises", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.set_dataset_id_by_name"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.set_dataset_id_by_name"], ["", "def", "test_set_dataset_id_error", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "set_dataset_id_by_name", "(", "\"nonexisting-dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_delete_dataset": [[41, 46], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_dataset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.delete_dataset_by_id", "hasattr"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.delete_dataset_by_id"], ["", "", "def", "test_delete_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "create_dataset", "(", "dataset_name", "=", "\"dataset_to_delete\"", ")", "\n", "self", ".", "api_workflow_client", ".", "delete_dataset_by_id", "(", "self", ".", "api_workflow_client", ".", "dataset_id", ")", "\n", "assert", "not", "hasattr", "(", "self", ",", "\"_dataset_id\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_dataset_type": [[47, 51], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset"], ["", "def", "test_dataset_type", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "create_dataset", "(", "dataset_name", "=", "\"some_dataset\"", ")", "\n", "assert", "self", ".", "api_workflow_client", ".", "dataset_type", "==", "\"Images\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasets.TestApiWorkflowDatasets.test_get_datasets": [[52, 58], ["test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client._datasets_api.reset", "len", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.create_new_dataset_with_unique_name", "len", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.get_datasets", "test_api_workflow_datasets.TestApiWorkflowDatasets.api_workflow_client.get_datasets"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasets._DatasetsMixin.create_new_dataset_with_unique_name", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets", "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasetsApi.get_datasets"], ["", "def", "test_get_datasets", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "reset", "(", ")", "\n", "num_datasets_before", "=", "len", "(", "self", ".", "api_workflow_client", ".", "get_datasets", "(", ")", ")", "\n", "self", ".", "api_workflow_client", ".", "create_new_dataset_with_unique_name", "(", "'dataset'", ")", "\n", "num_datasets_after", "=", "len", "(", "self", ".", "api_workflow_client", ".", "get_datasets", "(", ")", ")", "\n", "assert", "num_datasets_before", "+", "1", "==", "num_datasets_after", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_get_processed_until_timestamp": [[5, 8], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.get_processed_until_timestamp"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_processed_until_timestamp"], ["    ", "def", "test_get_processed_until_timestamp", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "assert", "self", ".", "api_workflow_client", ".", "get_processed_until_timestamp", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_update_processed_until_timestamp": [[9, 13], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.update_processed_until_timestamp", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.get_processed_until_timestamp"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.update_processed_until_timestamp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_processed_until_timestamp"], ["", "def", "test_update_processed_until_timestamp", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "self", ".", "api_workflow_client", ".", "update_processed_until_timestamp", "(", "10", ")", "\n", "assert", "self", ".", "api_workflow_client", ".", "get_processed_until_timestamp", "(", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_raw_samples": [[14, 19], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_raw_samples", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_samples"], ["", "def", "test_download_raw_samples", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "download_raw_samples", "(", ")", "\n", "num_samples", "=", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "_num_samples", "\n", "assert", "len", "(", "samples", ")", "==", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_raw_samples_no_duplicates": [[20, 24], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_raw_samples", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_samples"], ["", "def", "test_download_raw_samples_no_duplicates", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "download_raw_samples", "(", ")", "\n", "assert", "len", "(", "samples", ")", "==", "len", "(", "set", "(", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_new_raw_samples_no_duplicates": [[25, 29], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_new_raw_samples", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_new_raw_samples"], ["", "def", "test_download_new_raw_samples_no_duplicates", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "download_new_raw_samples", "(", ")", "\n", "assert", "len", "(", "samples", ")", "==", "len", "(", "set", "(", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_new_raw_samples_not_yet_processed": [[30, 35], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_raw_samples", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_samples"], ["", "def", "test_download_new_raw_samples_not_yet_processed", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "download_raw_samples", "(", ")", "\n", "num_samples", "=", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "_num_samples", "\n", "assert", "len", "(", "samples", ")", "==", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_new_raw_samples_partially_processed": [[36, 45], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.update_processed_until_timestamp", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_new_raw_samples", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.update_processed_until_timestamp", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_new_raw_samples"], ["", "def", "test_download_new_raw_samples_partially_processed", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "num_samples", "=", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "_num_samples", "\n", "n_processed", "=", "num_samples", "//", "2", "\n", "n_remaining", "=", "num_samples", "-", "n_processed", "\n", "processed_timestamp", "=", "n_processed", "-", "1", "\n", "self", ".", "api_workflow_client", ".", "update_processed_until_timestamp", "(", "processed_timestamp", ")", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "download_new_raw_samples", "(", ")", "\n", "assert", "len", "(", "samples", ")", "==", "n_remaining", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_raw_samples_equal_to_download_all_raw_new_samples": [[46, 52], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_raw_samples", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_new_raw_samples", "len", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_samples", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_new_raw_samples"], ["", "def", "test_download_raw_samples_equal_to_download_all_raw_new_samples", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "samples", "=", "self", ".", "api_workflow_client", ".", "download_raw_samples", "(", ")", "\n", "new_samples", "=", "self", ".", "api_workflow_client", ".", "download_new_raw_samples", "(", ")", "\n", "assert", "len", "(", "samples", ")", "==", "len", "(", "new_samples", ")", "\n", "assert", "set", "(", "samples", ")", "==", "set", "(", "new_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_raw_samples_or_metadata_relevant_filenames": [[53, 69], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.subTest", "method", "test_api_workflow_datasources.TestApiWorkflowDatasources.subTest", "method"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.method", "home.repos.pwc.inspect_result.lightly-ai_lightly.models.sampling_create_request.SamplingCreateRequest.method"], ["", "def", "test_download_raw_samples_or_metadata_relevant_filenames", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "for", "method", "in", "[", "\n", "self", ".", "api_workflow_client", ".", "download_raw_samples", ",", "\n", "self", ".", "api_workflow_client", ".", "download_raw_metadata", "\n", "]", ":", "\n", "            ", "for", "relevant_filenames_path", "in", "[", "None", ",", "\"\"", ",", "\"relevant_filenames.txt\"", "]", ":", "\n", "                ", "with", "self", ".", "subTest", "(", "\n", "relevant_filenames_path", "=", "relevant_filenames_path", ",", "\n", "method", "=", "method", "\n", ")", ":", "\n", "                    ", "samples", "=", "method", "(", "\n", "relevant_filenames_file_name", "=", "relevant_filenames_path", "\n", ")", "\n", "", "", "with", "self", ".", "subTest", "(", "relevant_filenames_path", "=", "\"unset\"", ",", "method", "=", "method", ")", ":", "\n", "                ", "samples", "=", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_set_azure_config": [[70, 76], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.set_azure_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_azure_config"], ["", "", "", "def", "test_set_azure_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "set_azure_config", "(", "\n", "container_name", "=", "\"my-container/name\"", ",", "\n", "account_name", "=", "\"my-account-name\"", ",", "\n", "sas_token", "=", "\"my-sas-token\"", ",", "\n", "thumbnail_suffix", "=", "\".lightly/thumbnails/[filename]-thumb-[extension]\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_set_gcs_config": [[78, 84], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.set_gcs_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_gcs_config"], ["", "def", "test_set_gcs_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "set_gcs_config", "(", "\n", "resource_path", "=", "\"gs://my-bucket/my-dataset\"", ",", "\n", "project_id", "=", "\"my-project-id\"", ",", "\n", "credentials", "=", "\"my-credentials\"", ",", "\n", "thumbnail_suffix", "=", "\".lightly/thumbnails/[filename]-thumb-[extension]\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_set_local_config": [[86, 90], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.set_local_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_local_config"], ["", "def", "test_set_local_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "set_local_config", "(", "\n", "resource_path", "=", "\"http://localhost:1234/path/to/my/data\"", ",", "\n", "thumbnail_suffix", "=", "\".lightly/thumbnails/[filename]-thumb-[extension]\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_set_s3_config": [[92, 99], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.set_s3_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_s3_config"], ["", "def", "test_set_s3_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "set_s3_config", "(", "\n", "resource_path", "=", "\"s3://my-bucket/my-dataset\"", ",", "\n", "thumbnail_suffix", "=", "\".lightly/thumbnails/[filename]-thumb-[extension]\"", ",", "\n", "region", "=", "\"eu-central-1\"", ",", "\n", "access_key", "=", "\"my-access-key\"", ",", "\n", "secret_access_key", "=", "\"my-secret-access-key\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_set_s3_delegated_access_config": [[101, 108], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.set_s3_delegated_access_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.set_s3_delegated_access_config"], ["", "def", "test_set_s3_delegated_access_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "set_s3_delegated_access_config", "(", "\n", "resource_path", "=", "\"s3://my-bucket/my-dataset\"", ",", "\n", "thumbnail_suffix", "=", "\".lightly/thumbnails/[filename]-thumb-[extension]\"", ",", "\n", "region", "=", "\"eu-central-1\"", ",", "\n", "role_arn", "=", "\"my-role-arn\"", ",", "\n", "external_id", "=", "\"my-external-id\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_raw_samples_predictions": [[110, 116], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_raw_predictions", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_predictions"], ["", "def", "test_download_raw_samples_predictions", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "api_workflow_client", ".", "download_raw_predictions", "(", "'test'", ")", "\n", "num_samples", "=", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "_num_samples", "\n", "assert", "len", "(", "predictions", ")", "==", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_download_raw_samples_predictions_relevant_filenames": [[117, 122], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.download_raw_predictions", "len"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.download_raw_predictions"], ["", "def", "test_download_raw_samples_predictions_relevant_filenames", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "predictions", "=", "self", ".", "api_workflow_client", ".", "download_raw_predictions", "(", "'test'", ",", "relevant_filenames_file_name", "=", "\"test\"", ")", "\n", "num_samples", "=", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "_num_samples", "\n", "assert", "len", "(", "predictions", ")", "==", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_datasources.TestApiWorkflowDatasources.test_get_prediction_read_url": [[123, 127], ["test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client._datasources_api.reset", "test_api_workflow_datasources.TestApiWorkflowDatasources.api_workflow_client.get_prediction_read_url", "test_api_workflow_datasources.TestApiWorkflowDatasources.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.mocked_api_workflow_client.MockedDatasourcesApi.reset", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_datasources._DatasourcesMixin.get_prediction_read_url"], ["", "def", "test_get_prediction_read_url", "(", "self", ")", ":", "\n", "        ", "self", ".", "api_workflow_client", ".", "_datasources_api", ".", "reset", "(", ")", "\n", "read_url", "=", "self", ".", "api_workflow_client", ".", "get_prediction_read_url", "(", "'test.json'", ")", "\n", "self", ".", "assertIsNotNone", "(", "read_url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.setUp": [[20, 23], ["tests.api_workflow.mocked_api_workflow_client.MockedApiWorkflowSetup.setUp"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.setUp"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "MockedApiWorkflowSetup", ".", "setUp", "(", "self", ",", "dataset_id", "=", "'dataset_0_id'", ")", "\n", "self", ".", "api_workflow_client", ".", "_tags_api", ".", "no_tags", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.test_download_non_existing_tag": [[24, 27], ["test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertRaises", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.api_workflow_client.download_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.download_dataset"], ["", "def", "test_download_non_existing_tag", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "download_dataset", "(", "'path/to/dir'", ",", "tag_name", "=", "'this_is_not_a_real_tag_name'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.test_download_thumbnails": [[28, 35], ["lightly.openapi_generated.swagger_client.models.dataset_data.DatasetData", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertRaises", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.api_workflow_client.download_dataset"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.download_dataset"], ["", "", "def", "test_download_thumbnails", "(", "self", ")", ":", "\n", "        ", "def", "get_thumbnail_dataset_by_id", "(", "*", "args", ")", ":", "\n", "            ", "return", "DatasetData", "(", "name", "=", "f'dataset'", ",", "id", "=", "'dataset_id'", ",", "last_modified_at", "=", "0", ",", "\n", "type", "=", "'thumbnails'", ",", "size_in_bytes", "=", "-", "1", ",", "n_samples", "=", "-", "1", ",", "created_at", "=", "-", "1", ")", "\n", "", "self", ".", "api_workflow_client", ".", "_datasets_api", ".", "get_dataset_by_id", "=", "get_thumbnail_dataset_by_id", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "api_workflow_client", ".", "download_dataset", "(", "'path/to/dir'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.test_download_dataset": [[36, 43], ["test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.api_workflow_client.download_dataset", "shutil.rmtree", "PIL.Image.fromarray().convert", "PIL.Image.fromarray", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.download_dataset"], ["", "", "def", "test_download_dataset", "(", "self", ")", ":", "\n", "        ", "def", "my_func", "(", "read_url", ")", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "zeros", "(", "(", "32", ",", "32", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "#mock_get_image_from_readurl.return_value = PIL.Image.fromarray(np.zeros((32, 32)))", "\n", "", "lightly", ".", "api", ".", "api_workflow_download_dataset", ".", "_get_image_from_read_url", "=", "my_func", "\n", "self", ".", "api_workflow_client", ".", "download_dataset", "(", "'path-to-dir-remove-me'", ",", "tag_name", "=", "'initial-tag'", ")", "\n", "shutil", ".", "rmtree", "(", "'path-to-dir-remove-me'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.test_export_label_box_data_rows_by_tag_name": [[44, 48], ["test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.api_workflow_client.export_label_box_data_rows_by_tag_name", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertIsNotNone", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertTrue", "all", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_box_data_rows_by_tag_name"], ["", "def", "test_export_label_box_data_rows_by_tag_name", "(", "self", ")", ":", "\n", "        ", "rows", "=", "self", ".", "api_workflow_client", ".", "export_label_box_data_rows_by_tag_name", "(", "'initial-tag'", ")", "\n", "self", ".", "assertIsNotNone", "(", "rows", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "isinstance", "(", "row", ",", "dict", ")", "for", "row", "in", "rows", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.test_export_label_studio_tasks_by_tag_name": [[50, 54], ["test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.api_workflow_client.export_label_studio_tasks_by_tag_name", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertIsNotNone", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertTrue", "all", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_label_studio_tasks_by_tag_name"], ["", "def", "test_export_label_studio_tasks_by_tag_name", "(", "self", ")", ":", "\n", "        ", "tasks", "=", "self", ".", "api_workflow_client", ".", "export_label_studio_tasks_by_tag_name", "(", "'initial-tag'", ")", "\n", "self", ".", "assertIsNotNone", "(", "tasks", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "isinstance", "(", "task", ",", "dict", ")", "for", "task", "in", "tasks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.test_export_filenames_by_tag_name": [[56, 60], ["test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.api_workflow_client.export_filenames_by_tag_name", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertIsNotNone", "test_api_workflow_download_dataset.TestApiWorkflowDownloadDataset.assertTrue", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_download_dataset._DownloadDatasetMixin.export_filenames_by_tag_name"], ["", "def", "test_export_filenames_by_tag_name", "(", "self", ")", ":", "\n", "        ", "filenames", "=", "self", ".", "api_workflow_client", ".", "export_filenames_by_tag_name", "(", "'initial-tag'", ")", "\n", "self", ".", "assertIsNotNone", "(", "filenames", ")", "\n", "self", ".", "assertTrue", "(", "isinstance", "(", "filenames", ",", "str", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.test_register_compute_worker": [[7, 14], ["test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.register_compute_worker", "test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.register_compute_worker"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.register_compute_worker", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.register_compute_worker"], ["    ", "def", "test_register_compute_worker", "(", "self", ")", ":", "\n", "# default name", "\n", "        ", "worker_id", "=", "self", ".", "api_workflow_client", ".", "register_compute_worker", "(", ")", "\n", "assert", "worker_id", "\n", "# custom name", "\n", "worker_id", "=", "self", ".", "api_workflow_client", ".", "register_compute_worker", "(", "name", "=", "\"my-worker\"", ")", "\n", "assert", "worker_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.test_delete_compute_worker": [[15, 19], ["test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.register_compute_worker", "test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.delete_compute_worker"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.register_compute_worker", "home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.delete_compute_worker"], ["", "def", "test_delete_compute_worker", "(", "self", ")", ":", "\n", "        ", "worker_id", "=", "self", ".", "api_workflow_client", ".", "register_compute_worker", "(", "name", "=", "'my-worker'", ")", "\n", "assert", "worker_id", "\n", "self", ".", "api_workflow_client", ".", "delete_compute_worker", "(", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.test_create_compute_worker_config": [[20, 36], ["test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.create_compute_worker_config"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.create_compute_worker_config"], ["", "def", "test_create_compute_worker_config", "(", "self", ")", ":", "\n", "        ", "config_id", "=", "self", ".", "api_workflow_client", ".", "create_compute_worker_config", "(", "\n", "worker_config", "=", "{", "\n", "'enable_corruptness_check'", ":", "True", ",", "\n", "'stopping_condition'", ":", "{", "\n", "'n_samples'", ":", "10", ",", "\n", "}", "\n", "}", ",", "\n", "lightly_config", "=", "{", "\n", "'resize'", ":", "224", ",", "\n", "'loader'", ":", "{", "\n", "'batch_size'", ":", "64", ",", "\n", "}", "\n", "}", "\n", ")", "\n", "assert", "config_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.test_schedule_compute_worker_run": [[37, 53], ["test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.schedule_compute_worker_run"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.schedule_compute_worker_run"], ["", "def", "test_schedule_compute_worker_run", "(", "self", ")", ":", "\n", "        ", "scheduled_run_id", "=", "self", ".", "api_workflow_client", ".", "schedule_compute_worker_run", "(", "\n", "worker_config", "=", "{", "\n", "'enable_corruptness_check'", ":", "True", ",", "\n", "'stopping_condition'", ":", "{", "\n", "'n_samples'", ":", "10", ",", "\n", "}", "\n", "}", ",", "\n", "lightly_config", "=", "{", "\n", "'resize'", ":", "224", ",", "\n", "'loader'", ":", "{", "\n", "'batch_size'", ":", "64", ",", "\n", "}", "\n", "}", "\n", ")", "\n", "assert", "scheduled_run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.test_get_compute_worker_ids": [[54, 57], ["test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.get_compute_worker_ids", "all", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.get_compute_worker_ids"], ["", "def", "test_get_compute_worker_ids", "(", "self", ")", ":", "\n", "        ", "ids", "=", "self", ".", "api_workflow_client", ".", "get_compute_worker_ids", "(", ")", "\n", "assert", "all", "(", "isinstance", "(", "id_", ",", "str", ")", "for", "id_", "in", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.test_get_compute_worker_runs": [[58, 62], ["test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.get_compute_worker_runs", "all", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.get_compute_worker_runs"], ["", "def", "test_get_compute_worker_runs", "(", "self", ")", ":", "\n", "        ", "runs", "=", "self", ".", "api_workflow_client", ".", "get_compute_worker_runs", "(", ")", "\n", "assert", "len", "(", "runs", ")", ">", "0", "\n", "assert", "all", "(", "isinstance", "(", "run", ",", "DockerRunData", ")", "for", "run", "in", "runs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.api_workflow.test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.test_get_scheduled_compute_worker_runs": [[63, 69], ["test_api_workflow_compute_worker.TestApiWorkflowComputeWorker.api_workflow_client.get_scheduled_compute_worker_runs", "all", "all", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.api.api_workflow_compute_worker._ComputeWorkerMixin.get_scheduled_compute_worker_runs"], ["", "def", "test_get_scheduled_compute_worker_runs", "(", "self", ")", ":", "\n", "        ", "runs", "=", "self", ".", "api_workflow_client", ".", "get_scheduled_compute_worker_runs", "(", ")", "\n", "dataset_id", "=", "self", ".", "api_workflow_client", ".", "dataset_id", "\n", "assert", "len", "(", "runs", ")", ">", "0", "\n", "assert", "all", "(", "isinstance", "(", "run", ",", "DockerRunScheduledData", ")", "for", "run", "in", "runs", ")", "\n", "assert", "all", "(", "run", ".", "dataset_id", "==", "dataset_id", "for", "run", "in", "runs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.ensure_dir": [[16, 19], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "ensure_dir", "(", "self", ",", "path_to_folder", ":", "str", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_to_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset": [[20, 43], ["torchvision.datasets.FakeData", "tempfile.mkdtemp", "range", "range", "range", "range", "test_Core.TestCore.ensure_dir", "data[].save", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.ensure_dir"], ["", "", "def", "create_dataset", "(", "self", ",", "n_subfolders", "=", "5", ",", "n_samples_per_subfolder", "=", "20", ")", ":", "\n", "        ", "n_tot", "=", "n_subfolders", "*", "n_samples_per_subfolder", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "FakeData", "(", "size", "=", "n_tot", ",", "\n", "image_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", "\n", "\n", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "folder_names", "=", "[", "f'folder_{i}'", "for", "i", "in", "range", "(", "n_subfolders", ")", "]", "\n", "sample_names", "=", "[", "f'img_{i}.jpg'", "for", "i", "in", "range", "(", "n_samples_per_subfolder", ")", "]", "\n", "\n", "for", "folder_idx", "in", "range", "(", "n_subfolders", ")", ":", "\n", "            ", "for", "sample_idx", "in", "range", "(", "n_samples_per_subfolder", ")", ":", "\n", "                ", "idx", "=", "(", "folder_idx", "*", "n_subfolders", ")", "+", "sample_idx", "\n", "data", "=", "dataset", "[", "idx", "]", "\n", "\n", "self", ".", "ensure_dir", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "\n", "folder_names", "[", "folder_idx", "]", ")", ")", "\n", "\n", "data", "[", "0", "]", ".", "save", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "\n", "folder_names", "[", "folder_idx", "]", ",", "\n", "sample_names", "[", "sample_idx", "]", ")", ")", "\n", "", "", "self", ".", "dataset_dir", "=", "tmp_dir", "\n", "return", "tmp_dir", ",", "folder_names", ",", "sample_names", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.test_train_and_embed": [[46, 69], ["test_Core.TestCore.create_dataset", "lightly.core.train_model_and_embed_images", "test_Core.TestCore.assertEqual", "test_Core.TestCore.assertEqual", "test_Core.TestCore.assertEqual", "test_Core.TestCore.assertIsInstance", "test_Core.TestCore.assertIsInstance", "test_Core.TestCore.assertIsInstance", "len", "len", "len", "int"], "methods", ["home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.create_dataset", "home.repos.pwc.inspect_result.lightly-ai_lightly.lightly.core.train_model_and_embed_images"], ["", "def", "test_train_and_embed", "(", "self", ")", ":", "\n", "        ", "n_subfolders", "=", "3", "\n", "n_samples_per_subfolder", "=", "3", "\n", "n_samples", "=", "n_subfolders", "*", "n_samples_per_subfolder", "\n", "\n", "#\u00a0embed, no overwrites", "\n", "dataset_dir", ",", "_", ",", "_", "=", "self", ".", "create_dataset", "(", "\n", "n_subfolders", ",", "\n", "n_samples_per_subfolder", "\n", ")", "\n", "\n", "#\u00a0train, one overwrite", "\n", "embeddings", ",", "labels", ",", "filenames", "=", "train_model_and_embed_images", "(", "\n", "input_dir", "=", "dataset_dir", ",", "\n", "trainer", "=", "{", "'max_epochs'", ":", "1", "}", ",", "\n", "loader", "=", "{", "'num_workers'", ":", "0", "}", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "embeddings", ")", ",", "n_samples", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "labels", ")", ",", "n_samples", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "filenames", ")", ",", "n_samples", ")", "\n", "self", ".", "assertIsInstance", "(", "embeddings", "[", "0", "]", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIsInstance", "(", "int", "(", "labels", "[", "0", "]", ")", ",", "int", ")", "# see if casting to int works", "\n", "self", ".", "assertIsInstance", "(", "filenames", "[", "0", "]", ",", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lightly-ai_lightly.core.test_Core.TestCore.tearDown": [[71, 77], ["shutil.rmtree", "os.walk", "os.getcwd", "filter", "os.remove", "re.match", "os.path.join"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "self", ".", "dataset_dir", ")", "\n", "pattern", "=", "'(.*)?.ckpt$'", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "getcwd", "(", ")", ")", ":", "\n", "            ", "for", "file", "in", "filter", "(", "lambda", "x", ":", "re", ".", "match", "(", "pattern", ",", "x", ")", ",", "files", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "", "", "", "", ""]]}