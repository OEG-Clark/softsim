{"home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.giveEnv_name": [[17, 34], ["None"], "function", ["None"], ["def", "giveEnv_name", "(", "config", ")", ":", "\n", "    ", "param_env", "=", "\"\"", "\n", "param_env", "+=", "\"fpv \"", "if", "config", "[", "\"fpv\"", "]", "else", "\"\"", "\n", "param_env", "+=", "\"wallDistractor \"", "if", "config", "[", "\"wallDistractor\"", "]", "else", "\"\"", "\n", "param_env", "+=", "\"withDistractor \"", "if", "config", "[", "\"distractor\"", "]", "else", "\"\"", "\n", "param_env", "+=", "config", "[", "\"noise_type\"", "]", "+", "\" \"", "if", "config", "[", "\"noise_type\"", "]", "!=", "\"none\"", "else", "\"\"", "\n", "param_env", "+=", "(", "\n", "\"flickering-{} \"", ".", "format", "(", "config", "[", "\"flickering\"", "]", ")", "\n", "if", "config", "[", "\"flickering\"", "]", ">", "0", "\n", "else", "\"\"", "\n", ")", "\n", "if", "\"randomExplor\"", "in", "config", ":", "\n", "        ", "randomExplor", "=", "config", "[", "\"randomExplor\"", "]", "\n", "", "else", ":", "\n", "        ", "randomExplor", "=", "True", "\n", "", "param_env", "+=", "\"randomExplor \"", "if", "randomExplor", "else", "\"\"", "\n", "return", "param_env", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.assert_args_envs": [[36, 42], ["None"], "function", ["None"], ["", "def", "assert_args_envs", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "env_name", "!=", "\"TurtlebotMazeEnv-v0\"", ":", "\n", "        ", "assert", "not", "args", ".", "wallDistractor", ",", "\"wallDistractor with not TurtlebotMazeEnv\"", "\n", "\n", "", "if", "args", ".", "distractor", ":", "\n", "        ", "assert", "args", ".", "env_name", "in", "env_with_distractor", ",", "\"distractor not implemented\"", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_args_envs": [[44, 76], ["None"], "function", ["None"], ["", "", "def", "update_args_envs", "(", "args", ")", ":", "\n", "    ", "if", "\"Turtlebot\"", "in", "args", ".", "env_name", ":", "\n", "        ", "args", ".", "fpv", "=", "True", "\n", "\n", "", "if", "\"Turtlebot\"", "in", "args", ".", "env_name", ":", "\n", "        ", "args", ".", "bumpDetection", "=", "True", "\n", "", "else", ":", "\n", "        ", "args", ".", "bumpDetection", "=", "False", "\n", "\n", "", "if", "args", ".", "env_name", "in", "PY_MUJOCO", ":", "\n", "        ", "if", "\"with_reset\"", "in", "args", ".", "__dict__", ":", "\n", "            ", "args", ".", "with_reset", "=", "True", "\n", "", "args", ".", "actionRepeat", "=", "4", "\n", "if", "args", ".", "env_name", "in", "[", "\"HopperBulletEnv-v0\"", ",", "\"Walker2DBulletEnv-v0\"", "]", ":", "\n", "            ", "args", ".", "actionRepeat", "=", "2", "\n", "", "elif", "args", ".", "env_name", "in", "[", "\"ReacherBulletEnv-v0\"", "]", ":", "\n", "            ", "args", ".", "actionRepeat", "=", "1", "\n", "", "", "else", ":", "\n", "        ", "args", ".", "actionRepeat", "=", "1", "\n", "\n", "", "args", ".", "color", "=", "True", "\n", "args", ".", "new_env_name", "=", "args", ".", "env_name", "[", ":", "-", "3", "]", "if", "\"-v\"", "in", "args", ".", "env_name", "else", "args", ".", "env_name", "\n", "args", ".", "image_size", "=", "64", "\n", "\n", "if", "\"n_stack\"", "not", "in", "args", ".", "__dict__", ":", "\n", "        ", "args", ".", "n_stack", "=", "1", "\n", "# TODO: uncomment below line", "\n", "args", ".", "n_stack", "=", "3", "if", "args", ".", "actionRepeat", ">", "1", "else", "1", "\n", "# TODO: comment below line", "\n", "# if args.actionRepeat == 1 and args.method!= 'XSRL': args.n_stack = 3", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.reset_stack": [[78, 93], ["list", "len", "numpy.zeros", "range", "len", "numpy.zeros", "range"], "function", ["None"], ["", "def", "reset_stack", "(", "obs", ",", "config", ")", ":", "\n", "    ", "if", "config", "[", "\"n_stack\"", "]", ">", "1", ":", "\n", "        ", "nc", "=", "3", "if", "config", "[", "\"color\"", "]", "else", "1", "\n", "shape", "=", "list", "(", "obs", ".", "shape", ")", "\n", "if", "len", "(", "shape", ")", ">", "3", ":", "\n", "            ", "shape", "[", "1", "]", "*=", "config", "[", "\"n_stack\"", "]", "\n", "observation_stack", "=", "np", ".", "zeros", "(", "(", "shape", ")", ",", "np", ".", "float32", ")", "\n", "for", "step_rep", "in", "range", "(", "config", "[", "\"n_stack\"", "]", ")", ":", "\n", "                ", "observation_stack", "[", ":", ",", "step_rep", "*", "nc", ":", "(", "step_rep", "+", "1", ")", "*", "nc", "]", "=", "obs", "\n", "", "", "elif", "len", "(", "shape", ")", "==", "3", ":", "\n", "            ", "shape", "[", "0", "]", "*=", "config", "[", "\"n_stack\"", "]", "\n", "observation_stack", "=", "np", ".", "zeros", "(", "(", "shape", ")", ",", "np", ".", "float32", ")", "\n", "for", "step_rep", "in", "range", "(", "config", "[", "\"n_stack\"", "]", ")", ":", "\n", "                ", "observation_stack", "[", "step_rep", "*", "nc", ":", "(", "step_rep", "+", "1", ")", "*", "nc", "]", "=", "obs", "\n", "", "", "return", "observation_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.render_env": [[95, 105], ["env.render"], "function", ["None"], ["", "", "def", "render_env", "(", "env", ",", "image_size", ",", "fpv", ",", "camera_id", ",", "color", "=", "True", ",", "downscaling", "=", "True", ")", ":", "\n", "    ", "image", "=", "env", ".", "render", "(", "\n", "mode", "=", "\"rgb_array\"", ",", "\n", "image_size", "=", "image_size", ",", "\n", "color", "=", "color", ",", "\n", "fpv", "=", "fpv", ",", "\n", "downscaling", "=", "downscaling", ",", "\n", "camera_id", "=", "camera_id", ",", "\n", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.renderPybullet": [[107, 133], ["type", "envs.render", "env_.render", "numpy.array().transpose", "envs.render.transpose", "numpy.array"], "function", ["None"], ["", "def", "renderPybullet", "(", "envs", ",", "config", ",", "tensor", "=", "True", ")", ":", "\n", "    ", "\"\"\"Provides as much images as envs\"\"\"", "\n", "if", "type", "(", "envs", ")", "is", "list", ":", "\n", "        ", "obs", "=", "[", "\n", "env_", ".", "render", "(", "\n", "mode", "=", "\"rgb_array\"", ",", "\n", "image_size", "=", "config", "[", "\"image_size\"", "]", ",", "\n", "color", "=", "config", "[", "\"color\"", "]", ",", "\n", "fpv", "=", "config", "[", "\"fpv\"", "]", ",", "\n", "camera_id", "=", "0", ",", "\n", ")", "\n", "for", "env_", "in", "envs", "\n", "]", "\n", "obs", "=", "np", ".", "array", "(", "obs", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "/", "255.0", "\n", "", "else", ":", "\n", "        ", "obs", "=", "envs", ".", "render", "(", "\n", "mode", "=", "\"rgb_array\"", ",", "\n", "image_size", "=", "config", "[", "\"image_size\"", "]", ",", "\n", "color", "=", "config", "[", "\"color\"", "]", ",", "\n", "fpv", "=", "config", "[", "\"fpv\"", "]", ",", "\n", "camera_id", "=", "0", ",", "\n", ")", "\n", "obs", "=", "obs", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "/", "255.0", "\n", "if", "tensor", ":", "\n", "            ", "obs", "=", "obs", "[", "None", "]", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video": [[135, 189], ["env.render", "im[].astype", "cv2.resize.astype", "type", "cv2.resize.astype", "cv2.resize", "numpy.hstack", "cv2.imwrite", "video.write", "SRL4RL.utils.utils.createFolder", "cv2.resize.astype", "cv2.resize", "concatIM[].astype", "cv2.resize.astype"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.createFolder"], ["", "def", "update_video", "(", "\n", "env", "=", "None", ",", "\n", "im", "=", "None", ",", "\n", "step", "=", "0", ",", "\n", "color", "=", "True", ",", "\n", "camera_id", "=", "0", ",", "\n", "video_size", "=", "588", ",", "\n", "video", "=", "None", ",", "\n", "save_images", "=", "False", ",", "\n", "fpv", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "concatIM", "=", "None", ",", "\n", "downscaling", "=", "True", ",", "\n", ")", ":", "\n", "    ", "if", "save_dir", "==", "\"\"", ":", "\n", "        ", "save_dir", "=", "user_path", "+", "\"Downloads/\"", "+", "env", ".", "__class__", ".", "__name__", "+", "\"/\"", "\n", "if", "save_images", ":", "\n", "            ", "createFolder", "(", "save_dir", ",", "\"\"", ")", "\n", "", "", "if", "im", "is", "None", ":", "\n", "        ", "im", "=", "env", ".", "render", "(", "\n", "mode", "=", "\"rgb_array\"", ",", "\n", "image_size", "=", "video_size", ",", "\n", "color", "=", "color", ",", "\n", "camera_id", "=", "camera_id", ",", "\n", "fpv", "=", "fpv", ",", "\n", "downscaling", "=", "downscaling", ",", "\n", ")", "\n", "assert", "im", ".", "shape", "[", "0", "]", "==", "video_size", ",", "\"im.shape[0] is not in good size\"", "\n", "", "else", ":", "\n", "        ", "if", "im", ".", "shape", "[", "0", "]", "!=", "video_size", ":", "\n", "            ", "im", "=", "im", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "\n", "im", ",", "dsize", "=", "(", "video_size", ",", "video_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", "\n", "", "", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", "if", "color", "else", "im", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "type", "(", "concatIM", ")", "is", "np", ".", "ndarray", ":", "\n", "        ", "\"concatIM is between 0 and 255\"", "\n", "concatIM", "=", "concatIM", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "concatIM", "=", "cv2", ".", "resize", "(", "\n", "concatIM", ",", "dsize", "=", "(", "video_size", ",", "video_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", "\n", "concatIM", "=", "(", "\n", "concatIM", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "color", "\n", "else", "concatIM", ".", "astype", "(", "np", ".", "uint8", ")", "\n", ")", "\n", "new_im", "=", "np", ".", "hstack", "(", "[", "im", ",", "concatIM", "]", ")", "\n", "", "else", ":", "\n", "        ", "new_im", "=", "im", "\n", "\n", "", "if", "save_images", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "save_dir", "+", "\"ob_%05d\"", "%", "(", "step", ")", "+", "\".png\"", ",", "new_im", ")", "\n", "", "if", "video", "is", "not", "None", ":", "\n", "        ", "video", ".", "write", "(", "new_im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.load_cifar10": [[191, 198], ["open", "pickle.load", "data_dict[].reshape", "im.transpose.transpose"], "function", ["None"], ["", "", "def", "load_cifar10", "(", "file", ")", ":", "\n", "    ", "\"\"\"load the cifar-10 data\"\"\"", "\n", "with", "open", "(", "file", ",", "\"rb\"", ")", "as", "fo", ":", "\n", "        ", "data_dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "\"bytes\"", ")", "\n", "im", "=", "data_dict", "[", "b\"data\"", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "im", "=", "im", ".", "transpose", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.cutout": [[200, 252], ["numpy.ones", "range", "len", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "len", "len", "range", "len", "range", "range"], "function", ["None"], ["", "def", "cutout", "(", "img", ",", "n_holes", ",", "length", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        img (Tensor): Tensor image of size (C, H, W).\n        n_holes (int): Number of patches to cut out of each image.\n        length (int): The length (in pixels) of each square patch.\n    Returns:\n        Tensor: Image with n_holes of dimension length x length cut out of it.\n    \"\"\"", "\n", "mask", "=", "np", ".", "ones", "(", "(", "img", ".", "shape", ")", ",", "np", ".", "float32", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", ">", "4", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "w", "=", "img", ".", "shape", "[", "-", "1", "]", "\n", "n_obs", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "", "elif", "len", "(", "img", ".", "shape", ")", "==", "4", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "w", "=", "img", ".", "shape", "[", "-", "1", "]", "\n", "if", "img", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "n_obs", "=", "img", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "n_obs", "=", "None", "\n", "", "", "else", ":", "\n", "        ", "assert", "img", ".", "shape", "[", "-", "1", "]", "in", "[", "1", ",", "3", "]", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "n_obs", "=", "None", "\n", "\n", "", "for", "_", "in", "range", "(", "n_holes", ")", ":", "\n", "        ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ",", "size", "=", "(", "n_obs", ")", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ",", "size", "=", "(", "n_obs", ")", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "4", ":", "\n", "            ", "if", "img", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_obs", ")", ":", "\n", "                    ", "mask", "[", "j", ",", ":", ",", "y1", "[", "j", "]", ":", "y2", "[", "j", "]", ",", "x1", "[", "j", "]", ":", "x2", "[", "j", "]", "]", "=", "0.0", "\n", "", "", "else", ":", "\n", "                ", "mask", "[", "0", ",", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.0", "\n", "", "", "elif", "len", "(", "img", ".", "shape", ")", ">", "4", ":", "\n", "            ", "for", "ep", "in", "range", "(", "n_obs", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "n_obs", "[", "1", "]", ")", ":", "\n", "                    ", "mask", "[", "ep", ",", "j", ",", ":", ",", "y1", "[", "ep", ",", "j", "]", ":", "y2", "[", "ep", ",", "j", "]", ",", "x1", "[", "ep", ",", "j", "]", ":", "x2", "[", "ep", ",", "j", "]", "]", "=", "0.0", "\n", "", "", "", "elif", "n_obs", "is", "None", ":", "\n", "            ", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.0", "\n", "\n", "", "", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.add_noise": [[254, 279], ["torch.is_tensor", "SRL4RL.utils.nn_torch.pytorch2numpy", "noise_adder", "SRL4RL.utils.nn_torch.numpy2pytorch", "len", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "add_noise", "(", "x", ",", "noise_adder", ",", "config", ")", ":", "\n", "    ", "if", "config", "[", "\"with_noise\"", "]", "or", "config", "[", "\"flickering\"", "]", ">", "0.0", ":", "\n", "        ", "is_tensor", "=", "False", "\n", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "is_tensor", "=", "True", "\n", "device", "=", "x", ".", "device", "\n", "x", "=", "pytorch2numpy", "(", "x", ")", "\n", "", "if", "config", "[", "\"with_noise\"", "]", ":", "\n", "            ", "out", "=", "noise_adder", "(", "observation", "=", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "if", "config", "[", "\"flickering\"", "]", ">", "0.0", ":", "\n", "            ", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "                ", "flickerings", "=", "(", "\n", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "(", "out", ".", "shape", "[", "0", "]", ")", ")", "<", "config", "[", "\"flickering\"", "]", "\n", ")", "\n", "out", "[", "flickerings", "]", "=", "out", "[", "flickerings", "]", "*", "0", "\n", "", "else", ":", "\n", "                ", "if", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "config", "[", "\"flickering\"", "]", ":", "\n", "                    ", "out", "=", "out", "*", "0", "\n", "", "", "", "if", "is_tensor", ":", "\n", "            ", "out", "=", "numpy2pytorch", "(", "out", ",", "differentiable", "=", "False", ",", "device", "=", "device", ")", "\n", "", "", "else", ":", "\n", "        ", "out", "=", "x", "\n", "", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.Flatten.__init__": [[230, 241], ["super().__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_dim", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_dim", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "padding", "=", "2", ",", "bias", "=", "True", "\n", ")", "\n", "self", ".", "conv", "=", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.Flatten.forward": [[242, 245], ["nn_torch.Flatten.conv().mean().mean", "nn_torch.Flatten.view", "nn_torch.Flatten.size", "nn_torch.Flatten.conv().mean", "nn_torch.Flatten.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "# NCWH -> NC", "\n", "return", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.Unflatten.__init__": [[249, 260], ["super().__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_dim", ",", "out_channels", ",", "out_height", ",", "out_width", ",", "activation", "=", "\"leaky_relu\"", "\n", ")", ":", "\n", "        ", "super", "(", "Unflatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "out_height", "=", "out_height", "\n", "self", ".", "out_width", "=", "out_width", "\n", "out_dim", "=", "out_channels", "*", "out_height", "*", "out_width", "\n", "linear_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "linear_layer", "=", "linear_layer", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.Unflatten.forward": [[261, 265], ["out.view", "nn_torch.import_activation", "nn_torch.Unflatten.linear_layer"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_activation"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "import_activation", "(", "self", ".", "activation", ")", "(", "self", ".", "linear_layer", "(", "x", ")", ")", "\n", "return", "out", ".", "view", "(", "\n", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ",", "self", ".", "out_height", ",", "self", ".", "out_width", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.CNN_Module.__init__": [[270, 321], ["super().__init__", "len", "enumerate", "torch.nn.Sequential", "nn_torch.conv2d_size_out", "layers.append", "torch.nn.Conv2d", "layers.append", "torch.nn.ConvTranspose2d", "nn_torch.import_activation"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.conv2d_size_out", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_activation"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", ",", "\n", "cnn_layers", ",", "\n", "obs_shape", "=", "64", ",", "\n", "activation", "=", "\"leaky_relu\"", ",", "\n", "with_last_actv", "=", "False", ",", "\n", "name", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CNN_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nb_layers", "=", "len", "(", "cnn_layers", ")", "\n", "self", ".", "with_last_actv", "=", "with_last_actv", "\n", "self", ".", "cnn_layers", "=", "cnn_layers", "\n", "for", "_", "in", "cnn_layers", ":", "\n", "            ", "size_out", "=", "conv2d_size_out", "(", "obs_shape", ")", "\n", "# In fact thanks to Flatten finalConvSize is not useful", "\n", "", "self", ".", "finalConvSize", "=", "cnn_layers", "[", "-", "1", "]", "[", "-", "1", "]", "*", "size_out", "**", "2", "\n", "self", ".", "name", "=", "name", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "n_lay", ",", "(", "char", ",", "scale", ",", "out_channel", ")", "in", "enumerate", "(", "cnn_layers", ")", ":", "\n", "            ", "layer", "=", "None", "\n", "if", "(", "char", "==", "\"/\"", ")", "or", "(", "scale", "==", "1", ")", ":", "\n", "                ", "layer", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "stride", "=", "scale", ",", "\n", "padding", "=", "2", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "", "elif", "char", "==", "\"*\"", ":", "\n", "                ", "layer", "=", "torch", ".", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "stride", "=", "scale", ",", "\n", "padding", "=", "2", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "output_padding", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "", "assert", "not", "(", "layer", "is", "None", ")", ",", "\"error in char\"", "\n", "layers", ".", "append", "(", "layer", ")", "\n", "if", "activation", "is", "not", "None", "and", "(", "\n", "not", "(", "(", "n_lay", "+", "1", ")", "==", "self", ".", "nb_layers", ")", "or", "self", ".", "with_last_actv", "\n", ")", ":", "\n", "                ", "layers", ".", "append", "(", "import_activation", "(", "activation", ")", ")", "\n", "", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "cnn", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.CNN_Module.forward": [[322, 325], ["nn_torch.CNN_Module.cnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "cnn", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.MLP_Module.__init__": [[329, 358], ["super().__init__", "len", "enumerate", "torch.nn.Sequential", "layers.append", "nn_torch.MLP_Module.mlp.parameters", "torch.nn.Linear", "layers.append", "nn_torch.import_activation"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_activation"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_dim", ",", "\n", "MLP_dims", ",", "\n", "activation", "=", "\"leaky_relu\"", ",", "\n", "with_last_actv", "=", "False", ",", "\n", "requires_grad", "=", "True", ",", "\n", "name", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MLP_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nb_layers", "=", "len", "(", "MLP_dims", ")", "\n", "self", ".", "MLP_dims", "=", "MLP_dims", "\n", "self", ".", "with_last_actv", "=", "with_last_actv", "\n", "self", ".", "name", "=", "name", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "n_lay", ",", "out_dim", "in", "enumerate", "(", "MLP_dims", ")", ":", "\n", "            ", "layers", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ",", "bias", "=", "True", ")", ")", "\n", "if", "activation", "is", "not", "None", "and", "(", "\n", "not", "(", "(", "n_lay", "+", "1", ")", "==", "self", ".", "nb_layers", ")", "or", "self", ".", "with_last_actv", "\n", ")", ":", "\n", "                ", "layers", ".", "append", "(", "import_activation", "(", "activation", ")", ")", "\n", "", "in_dim", "=", "out_dim", "\n", "", "self", ".", "mlp", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "if", "not", "requires_grad", ":", "\n", "            ", "for", "p", "in", "self", ".", "mlp", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.MLP_Module.forward": [[359, 362], ["nn_torch.MLP_Module.mlp"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "mlp", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.tanh_sigmoid.__init__": [[444, 446], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.tanh_sigmoid.forward": [[447, 449], ["torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1.7159", "*", "torch", ".", "tanh", "(", "x", "*", "(", "2", "/", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.save_model": [[26, 30], ["torch.save"], "function", ["None"], ["def", "save_model", "(", "model", ",", "save_dir", ")", ":", "\n", "    ", "if", "save_dir", "[", "-", "3", ":", "]", "!=", "\".pt\"", ":", "\n", "        ", "save_dir", "+=", "\".pt\"", "\n", "", "torch", ".", "save", "(", "model", ",", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.set_seeds": [[32, 42], ["torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "torch.cuda.is_available"], "function", ["None"], ["", "def", "set_seeds", "(", "seed", ")", ":", "\n", "    ", "\"IMPORTANT TO USE FOR CUDA MEMORY\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch": [[44, 58], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.autograd.Variable().type", "torch.autograd.Variable().type().to", "torch.autograd.Variable().type", "torch.autograd.Variable().type().to", "torch.autograd.Variable", "torch.autograd.Variable().type", "torch.autograd.Variable", "torch.autograd.Variable().type", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "numpy2pytorch", "(", "x", ",", "differentiable", "=", "True", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "differentiable", ":", "\n", "        ", "if", "device", "is", "None", ":", "\n", "            ", "res", "=", "torch", ".", "nn", ".", "Parameter", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ",", "True", ")", ".", "type", "(", "dtype", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ",", "True", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "device", "is", "None", ":", "\n", "            ", "res", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ",", "False", ")", ".", "type", "(", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ",", "False", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy": [[60, 62], ["x.cpu().detach().numpy", "x.cpu().detach", "x.cpu"], "function", ["None"], ["", "def", "pytorch2numpy", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2item": [[64, 66], ["x.cpu().detach().item", "x.cpu().detach", "x.cpu"], "function", ["None"], ["", "def", "pytorch2item", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.conv2d_size_out": [[68, 70], ["None"], "function", ["None"], ["", "def", "conv2d_size_out", "(", "size", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ":", "\n", "    ", "return", "(", "size", "+", "2", "*", "padding", "-", "(", "kernel_size", "-", "1", ")", "-", "1", ")", "//", "stride", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.CNN": [[73, 115], ["torch.nn.Sequential", "nn_torch.CNN_Module", "nn_torch.Flatten", "nn_torch.MLP_Module", "nn_torch.import_weight_init", "torch.nn.Sequential.apply", "torch.nn.Sequential.parameters"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_weight_init"], ["", "def", "CNN", "(", "\n", "out_size", ",", "\n", "n_channels", ",", "\n", "obs_shape", "=", "64", ",", "\n", "activation", "=", "\"leaky_relu\"", ",", "\n", "weight_init", "=", "\"none\"", ",", "\n", "requires_grad", "=", "True", ",", "\n", "debug", "=", "0", ",", "\n", ")", ":", "\n", "\n", "    ", "if", "debug", ":", "\n", "        ", "\"to save computational memory\"", "\n", "layers_cnn", "=", "[", "(", "\"*\"", ",", "s", ",", "1", ")", "for", "(", "c", ",", "s", ",", "channels", ")", "in", "layers_alpha", "]", "\n", "layers_hidden", "=", "[", "1", ",", "1", "]", "\n", "intermediate_size", "=", "1", "\n", "", "else", ":", "\n", "        ", "layers_cnn", "=", "layers_alpha", "\n", "layers_hidden", "=", "layers_MLP", "\n", "intermediate_size", "=", "1024", "\n", "", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "\n", "CNN_Module", "(", "\n", "n_channels", ",", "\n", "layers_cnn", ",", "\n", "obs_shape", "=", "obs_shape", ",", "\n", "activation", "=", "activation", ",", "\n", "with_last_actv", "=", "True", ",", "\n", ")", "\n", "]", "\n", "layers", "+=", "[", "Flatten", "(", "layers_cnn", "[", "-", "1", "]", "[", "-", "1", "]", ",", "intermediate_size", ")", "]", "\n", "layers", "+=", "[", "\n", "MLP_Module", "(", "intermediate_size", ",", "layers_hidden", "+", "[", "out_size", "]", ",", "activation", "=", "activation", ")", "\n", "]", "\n", "cnn", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "if", "weight_init", "!=", "\"none\"", ":", "\n", "        ", "weight_init_", "=", "import_weight_init", "(", "weight_init", ")", "\n", "cnn", ".", "apply", "(", "weight_init_", ")", "\n", "\n", "", "if", "not", "requires_grad", ":", "\n", "        ", "for", "p", "in", "cnn", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "return", "cnn", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.CNN_Transpose": [[118, 180], ["nn_torch.CNN_Module", "nn_torch.MLP_Module", "nn_torch.Unflatten", "nn_torch.CNN_Module", "nn_torch.CNN_Module", "torch.nn.Sequential", "torch.nn.Sequential", "len"], "function", ["None"], ["", "def", "CNN_Transpose", "(", "\n", "feature_size", ",", "\n", "n_channels", ",", "\n", "obs_shape", "=", "64", ",", "\n", "probabilistic", "=", "False", ",", "\n", "cutoff", "=", "2", ",", "\n", "activation", "=", "\"leaky_relu\"", ",", "\n", "debug", "=", "0", ",", "\n", ")", ":", "\n", "# in probabilistic settings mean and covariance share all layers up to cutoff", "\n", "    ", "if", "debug", ":", "\n", "        ", "\"to save computational memory\"", "\n", "layers_cnn", "=", "[", "(", "\"*\"", ",", "s", ",", "1", ")", "for", "(", "c", ",", "s", ",", "channels", ")", "in", "layers_alpha", "]", "\n", "layers_cnn_transpose", "=", "[", "(", "\"*\"", ",", "s", ",", "1", ")", "for", "(", "c", ",", "s", ",", "channels", ")", "in", "layers_cnn_omega", "]", "\n", "layers_hidden", "=", "[", "1", ",", "1", "]", "\n", "intermediate_size", "=", "1", "\n", "", "else", ":", "\n", "        ", "layers_cnn", "=", "layers_alpha", "\n", "layers_cnn_transpose", "=", "layers_cnn_omega", "\n", "layers_hidden", "=", "layers_MLP_omega", "\n", "intermediate_size", "=", "1024", "\n", "\n", "", "layers_transpose", "=", "layers_cnn_transpose", "[", "1", ":", "]", "\n", "\n", "layers_head", "=", "[", "]", "\n", "layers_head", "+=", "[", "\n", "MLP_Module", "(", "\n", "feature_size", ",", "layers_hidden", "+", "[", "intermediate_size", "]", ",", "activation", "=", "activation", "\n", ")", "\n", "]", "\n", "layers_head", "+=", "[", "\n", "Unflatten", "(", "intermediate_size", ",", "layers_cnn", "[", "-", "1", "]", "[", "-", "1", "]", ",", "4", ",", "4", ",", "activation", "=", "activation", ")", "\n", "]", "\n", "\n", "layers_head", "+=", "[", "\n", "CNN_Module", "(", "\n", "layers_cnn", "[", "-", "1", "]", "[", "-", "1", "]", ",", "\n", "layers_transpose", "[", ":", "-", "cutoff", "]", ",", "\n", "obs_shape", "=", "obs_shape", ",", "\n", "activation", "=", "activation", ",", "\n", "with_last_actv", "=", "True", ",", "\n", ")", "\n", "]", "\n", "\n", "head_dim", "=", "layers_transpose", "[", "len", "(", "layers_transpose", ")", "-", "cutoff", "-", "1", "]", "[", "-", "1", "]", "\n", "mu_tail", "=", "CNN_Module", "(", "\n", "head_dim", ",", "\n", "layers_transpose", "[", "-", "cutoff", ":", "]", "+", "[", "(", "\"*\"", ",", "2", ",", "n_channels", ")", "]", ",", "\n", "obs_shape", "=", "obs_shape", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "if", "probabilistic", ":", "\n", "        ", "logitSig_tail", "=", "CNN_Module", "(", "\n", "head_dim", ",", "\n", "layers_transpose", "[", "-", "cutoff", ":", "]", "+", "[", "(", "\"*\"", ",", "2", ",", "1", ")", "]", ",", "\n", "obs_shape", "=", "obs_shape", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers_head", ")", ",", "mu_tail", ",", "logitSig_tail", "\n", "", "else", ":", "\n", "        ", "layers_head", "+=", "[", "mu_tail", "]", "\n", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.MLP_mdn": [[182, 226], ["nn_torch.MLP_Module", "nn_torch.MLP_Module", "nn_torch.MLP_Module", "len", "nn_torch.import_weight_init", "MLP_Module.apply", "nn_torch.MLP_Module", "len"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_weight_init"], ["", "", "def", "MLP_mdn", "(", "\n", "in_dim", ",", "\n", "dimensions", ",", "\n", "cutoff", "=", "2", ",", "\n", "activation", "=", "\"leaky_relu\"", ",", "\n", "weight_init", "=", "\"none\"", ",", "\n", "requires_grad", "=", "True", ",", "\n", "MDN", "=", "False", ",", "\n", ")", ":", "\n", "    ", "assert", "len", "(", "dimensions", ")", ">=", "cutoff", ",", "\"Not enough dimensions for MDN network!\"", "\n", "\n", "mdn_head", "=", "MLP_Module", "(", "\n", "in_dim", ",", "\n", "dimensions", "[", ":", "-", "cutoff", "]", ",", "\n", "activation", "=", "activation", ",", "\n", "with_last_actv", "=", "True", ",", "\n", "requires_grad", "=", "requires_grad", ",", "\n", ")", "\n", "head_dim", "=", "dimensions", "[", "len", "(", "dimensions", ")", "-", "cutoff", "-", "1", "]", "\n", "mu_tail", "=", "MLP_Module", "(", "\n", "head_dim", ",", "\n", "dimensions", "[", "-", "cutoff", ":", "]", ",", "\n", "activation", "=", "activation", ",", "\n", "requires_grad", "=", "requires_grad", ",", "\n", ")", "\n", "sig_tail", "=", "MLP_Module", "(", "\n", "head_dim", ",", "\n", "dimensions", "[", "-", "cutoff", ":", "]", ",", "\n", "activation", "=", "activation", ",", "\n", "requires_grad", "=", "requires_grad", ",", "\n", ")", "\n", "if", "weight_init", "!=", "\"none\"", ":", "\n", "        ", "weight_init_", "=", "import_weight_init", "(", "weight_init", ")", "\n", "sig_tail", ".", "apply", "(", "weight_init_", ")", "\n", "", "if", "MDN", ":", "\n", "        ", "logitPi_tail", "=", "MLP_Module", "(", "\n", "head_dim", ",", "\n", "dimensions", "[", "-", "cutoff", ":", "]", ",", "\n", "activation", "=", "activation", ",", "\n", "requires_grad", "=", "requires_grad", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "logitPi_tail", "=", "None", "\n", "", "return", "mdn_head", ",", "mu_tail", ",", "sig_tail", ",", "logitPi_tail", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.weight_init_xavier": [[364, 368], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weight_init_xavier", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.weight_init_orthogonal": [[370, 374], ["isinstance", "torch.nn.init.orthogonal_", "torch.nn.init.constant_", "torch.nn.init.calculate_gain"], "function", ["None"], ["", "", "def", "weight_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ",", "gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.weight_init_random_trunc": [[376, 382], ["isinstance", "torch.nn.init.normal_().clamp", "torch.nn.init.constant_", "torch.nn.init.normal_"], "function", ["None"], ["", "", "def", "weight_init_random_trunc", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "        ", "std", "=", "0.02", "\n", "b", "=", "2", "*", "std", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0.0", ",", "std", "=", "std", ")", ".", "clamp", "(", "min", "=", "-", "b", ",", "max", "=", "b", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.weight_init_random": [[384, 389], ["isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weight_init_random", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "        ", "std", "=", "0.02", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0.0", ",", "std", "=", "std", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.weight_init_high": [[391, 396], ["isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weight_init_high", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "        ", "std", "=", "0.02", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0.025", ",", "std", "=", "std", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_weight_init": [[398, 409], ["None"], "function", ["None"], ["", "", "def", "import_weight_init", "(", "weight_init", ")", ":", "\n", "    ", "if", "weight_init", "==", "\"orthogonal\"", ":", "\n", "        ", "return", "weight_init_orthogonal", "\n", "", "elif", "weight_init", "==", "\"random_init\"", ":", "\n", "        ", "return", "weight_init_random", "\n", "", "elif", "weight_init", "==", "\"random_init_trunc\"", ":", "\n", "        ", "return", "weight_init_random_trunc", "\n", "", "elif", "weight_init", "==", "\"xavier\"", ":", "\n", "        ", "return", "weight_init_xavier", "\n", "", "elif", "weight_init", "==", "\"high\"", ":", "\n", "        ", "return", "weight_init_high", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_activation": [[411, 435], ["torch.nn.ReLU", "torch.nn.ELU", "torch.nn.Tanh", "nn_torch.tanh_sigmoid", "torch.nn.LeakyReLU"], "function", ["None"], ["", "", "def", "import_activation", "(", "activation", ",", "functional", "=", "False", ")", ":", "\n", "    ", "if", "functional", ":", "\n", "        ", "if", "activation", "==", "\"relu\"", ":", "\n", "            ", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "\n", "", "elif", "activation", "==", "\"elu\"", ":", "\n", "            ", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "elu", "\n", "", "elif", "activation", "==", "\"tanh\"", ":", "\n", "            ", "activation", "=", "torch", ".", "tanh", "\n", "", "elif", "activation", "==", "\"tanh_sigmoid\"", ":", "\n", "            ", "activation", "=", "F_tanh_sigmoid", "\n", "", "elif", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "activation", "=", "F_leaky_relu", "\n", "", "", "else", ":", "\n", "        ", "if", "activation", "==", "\"relu\"", ":", "\n", "            ", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activation", "==", "\"elu\"", ":", "\n", "            ", "activation", "=", "torch", ".", "nn", ".", "ELU", "(", ")", "\n", "", "elif", "activation", "==", "\"tanh\"", ":", "\n", "            ", "activation", "=", "torch", ".", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "\"tanh_sigmoid\"", ":", "\n", "            ", "activation", "=", "tanh_sigmoid", "(", ")", "\n", "", "elif", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "", "", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.F_leaky_relu": [[437, 441], ["torch.nn.LeakyReLU", "activation", "torch.nn.LeakyReLU."], "function", ["None"], ["", "def", "F_leaky_relu", "(", "x", ")", ":", "\n", "    ", "m", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "activation", "=", "lambda", "i", ":", "m", "(", "i", ")", "\n", "return", "activation", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.F_tanh_sigmoid": [[451, 453], ["torch.tanh"], "function", ["None"], ["", "", "def", "F_tanh_sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1.7159", "*", "torch", ".", "tanh", "(", "x", "*", "(", "2", "/", "3", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.__init__": [[9, 12], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "new_goal", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.goal_distance": [[13, 16], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "goal_distance", "(", "self", ",", "goal_a", ",", "goal_b", ")", ":", "\n", "        ", "assert", "goal_a", ".", "shape", "==", "goal_b", ".", "shape", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "goal_a", "-", "goal_b", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.compute_reward": [[17, 19], ["env_wrappers.GoalWrapper.env.reward_reach"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", "=", "None", ",", "desired_goal", "=", "None", ",", "action", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reward_reach", "(", "achieved_goal", ",", "desired_goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.step": [[20, 39], ["env_wrappers.GoalWrapper.env.step", "env_wrappers.GoalWrapper.compute_reward"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.compute_reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "ag", "=", "self", ".", "env", ".", "object", "\n", "dg", "=", "self", ".", "env", ".", "target", "\n", "obs", "=", "{", "\n", "\"observation\"", ":", "obs", ",", "\n", "\"achieved_goal\"", ":", "ag", ",", "\n", "\"desired_goal\"", ":", "dg", ",", "\n", "}", "\n", "reward", "=", "self", ".", "compute_reward", "(", "\n", "achieved_goal", "=", "obs", "[", "\"achieved_goal\"", "]", ",", "\n", "desired_goal", "=", "obs", "[", "\"desired_goal\"", "]", ",", "\n", "action", "=", "action", ",", "\n", ")", "\n", "_is_success", "=", "reward", "+", "1", "\n", "info", "=", "{", "\n", "\"is_success\"", ":", "_is_success", ",", "\n", "}", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.reset": [[40, 54], ["env_wrappers.GoalWrapper.env.reset", "dg.copy", "env_wrappers.GoalWrapper.define_goal"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.define_goal"], ["", "def", "reset", "(", "self", ",", "keep_goal", "=", "False", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "ag", "=", "self", ".", "env", ".", "object", "\n", "dg", "=", "self", ".", "env", ".", "target", "\n", "if", "not", "keep_goal", ":", "\n", "            ", "self", ".", "new_goal", "=", "dg", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "define_goal", "(", "self", ".", "new_goal", ")", "\n", "", "obs", "=", "{", "\n", "\"observation\"", ":", "obs", ",", "\n", "\"achieved_goal\"", ":", "ag", ",", "\n", "\"desired_goal\"", ":", "self", ".", "new_goal", ",", "\n", "}", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.define_goal": [[55, 57], ["env_wrappers.GoalWrapper.env.define_goal"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.GoalWrapper.define_goal"], ["", "def", "define_goal", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "define_goal", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.BulletWrapper.__init__": [[60, 71], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "config", ")", ":", "\n", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "method", "=", "config", "[", "\"method\"", "]", "\n", "self", ".", "image_size", "=", "config", "[", "\"image_size\"", "]", "\n", "self", ".", "color", "=", "config", "[", "\"color\"", "]", "\n", "self", ".", "fpv", "=", "config", "[", "\"fpv\"", "]", "\n", "if", "self", ".", "method", "in", "state_baselines", ":", "\n", "            ", "self", ".", "with_images", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "with_images", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.BulletWrapper.step": [[72, 83], ["env_wrappers.BulletWrapper.env.step", "numpy.random.normal().astype", "env_wrappers.BulletWrapper.env.robot.measurement", "numpy.random.normal", "numpy.array", "SRL4RL.utils.utilsEnv.renderPybullet"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.renderPybullet"], ["", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "self", ".", "method", "==", "\"pure_noise\"", ":", "\n", "            ", "obs", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "obs", ".", "shape", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "self", ".", "method", "==", "\"position\"", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "robot", ".", "measurement", "(", ")", "\n", "", "elif", "self", ".", "method", "==", "\"openLoop\"", ":", "\n", "            ", "obs", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "envStepCounter", "//", "self", ".", "env", ".", "actionRepeat", "]", ")", "\n", "", "elif", "self", ".", "with_images", ":", "\n", "            ", "obs", "=", "renderPybullet", "(", "self", ".", "env", ",", "self", ".", "__dict__", ")", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_wrappers.BulletWrapper.reset": [[84, 95], ["env_wrappers.BulletWrapper.env.reset", "numpy.random.normal().astype", "env_wrappers.BulletWrapper.env.robot.measurement", "numpy.random.normal", "numpy.array", "SRL4RL.utils.utilsEnv.renderPybullet"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.renderPybullet"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "self", ".", "method", "==", "\"pure_noise\"", ":", "\n", "            ", "obs", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "obs", ".", "shape", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "self", ".", "method", "==", "\"position\"", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "robot", ".", "measurement", "(", ")", "\n", "", "elif", "self", ".", "method", "==", "\"openLoop\"", ":", "\n", "            ", "obs", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "envStepCounter", "//", "self", ".", "env", ".", "actionRepeat", "]", ")", "\n", "", "elif", "self", ".", "with_images", ":", "\n", "            ", "obs", "=", "renderPybullet", "(", "self", ".", "env", ",", "self", ".", "__dict__", ")", "\n", "", "return", "obs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.appendabledict.__init__": [[96, 99], ["collections.defaultdict.__init__"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "type_", "=", "list", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "type_", "=", "type_", "\n", "super", "(", ")", ".", "__init__", "(", "type_", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.appendabledict.subslice": [[100, 116], ["utils.appendabledict.items"], "methods", ["None"], ["", "def", "subslice", "(", "self", ",", "slice_", ")", ":", "\n", "        ", "\"\"\"indexes every value in the dict according to a specified slice\n        Parameters\n        ----------\n        slice: int or slice type\n            An indexing slice , e.g., ``slice(2, 20, 2)`` or ``2``.\n        Returns\n        -------\n        sliced_dict: dict (not appendabledict type!)\n            A dictionary with each value from this object's dictionary, but the value is sliced according to slice_\n            e.g. if this dictionary has {a:[1,2,3,4], b:[5,6,7,8]}, then self.subslice(2) returns {a:3,b:7}\n                 self.subslice(slice(1,3)) returns {a:[2,3], b:[6,7]}\"\"\"", "\n", "sliced_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "sliced_dict", "[", "k", "]", "=", "v", "[", "slice_", "]", "\n", "", "return", "sliced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.appendabledict.append_update": [[117, 121], ["other_dict.items", "utils.appendabledict.__getitem__().append", "utils.appendabledict.__getitem__"], "methods", ["None"], ["", "def", "append_update", "(", "self", ",", "other_dict", ")", ":", "\n", "        ", "\"appends current dict's values with values from other_dict\"", "\n", "for", "k", ",", "v", "in", "other_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__getitem__", "(", "k", ")", ".", "append", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.EarlyStopping.__init__": [[126, 145], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "patience", "=", "7", ",", "name", "=", "\"\"", ",", "min_delta", "=", "0", ",", "baseline", "=", "-", "np", ".", "inf", ",", "min_Nepochs", "=", "0", "\n", ")", ":", "# save_dir=\".models\",", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            min_delta (float): Minimum percentage in the monitored quantity to qualify as an improvement,\n                                i.e. an absolute change of less than min_delta, will count as no improvement.\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "np", ".", "inf", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_acc_max", "=", "0.0", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "baseline", "=", "baseline", "\n", "self", ".", "min_Nepochs", "=", "min_Nepochs", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.EarlyStopping.__call__": [[146, 172], ["print", "print", "numpy.sign", "print", "print"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "val_acc", ",", "Nepochs", "=", "1", ",", "model", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "score", "=", "val_acc", "*", "(", "1", "-", "np", ".", "sign", "(", "val_acc", ")", "*", "self", ".", "min_delta", ")", "\n", "if", "score", "<=", "self", ".", "best_score", ":", "\n", "            ", "if", "Nepochs", "<=", "self", ".", "min_Nepochs", ":", "\n", "                ", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience} | Nepochs: [{Nepochs}/{self.min_Nepochs}]\"", "\n", ")", "\n", "", "elif", "val_acc", "<", "self", ".", "baseline", ":", "\n", "                ", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience} | score: {-val_acc}>{-self.baseline}\"", "\n", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "best_score", "==", "np", ".", "inf", ":", "\n", "                    ", "self", ".", "best_score", "=", "val_acc", "\n", "", "self", ".", "counter", "+=", "1", "\n", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience}\"", "\n", ")", "\n", "", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "print", "(", "f\"  {self.name} has stopped\"", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "val_acc", "\n", "self", ".", "counter", "=", "0", "\n", "return", "\"best\"", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.EarlyStopping.reset": [[173, 178], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ",", "patience", ")", ":", "\n", "        ", "self", ".", "counter", "=", "0", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "best_score", "=", "-", "np", ".", "inf", "\n", "self", ".", "patience", "=", "patience", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.str2bool": [[16, 18], ["None"], "function", ["None"], ["def", "str2bool", "(", "x", ")", ":", "\n", "    ", "return", "False", "if", "x", "==", "\"False\"", "else", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.get_hidden": [[20, 30], ["int", "int", "nb_hidden.split", "traceback.print_exc"], "function", ["None"], ["", "def", "get_hidden", "(", "nb_hidden", ")", ":", "\n", "    ", "if", "\"-\"", "in", "nb_hidden", ":", "\n", "        ", "return", "[", "int", "(", "i", ")", "for", "i", "in", "nb_hidden", ".", "split", "(", "\"-\"", ")", "]", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "hidden", "=", "int", "(", "nb_hidden", ")", "\n", "return", "[", "hidden", "]", "if", "hidden", ">", "0", "else", "[", "]", "\n", "", "except", "Exception", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.giveSRL_name": [[32, 40], ["None"], "function", ["None"], ["", "", "", "def", "giveSRL_name", "(", "config", ")", ":", "\n", "    ", "method_params", "=", "\"dim {:02d}\"", ".", "format", "(", "config", "[", "\"state_dim\"", "]", ")", "\n", "if", "config", "[", "\"method\"", "]", "in", "learning_methods", ":", "\n", "        ", "method_params", "+=", "\", maxStep {}, num envs {}\"", ".", "format", "(", "\n", "config", "[", "\"maxStep\"", "]", ",", "config", "[", "\"num_envs\"", "]", "\n", ")", "\n", "method_params", "+=", "\" randomExplor\"", "if", "config", "[", "\"randomExplor\"", "]", "else", "\"\"", "\n", "", "return", "method_params", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.give_name": [[42, 93], ["None"], "function", ["None"], ["", "def", "give_name", "(", "config", ")", ":", "\n", "    ", "model_name", "=", "config", "[", "\"method\"", "]", "\n", "factor", "=", "1", "\n", "if", "\"XSRL\"", "in", "model_name", ":", "\n", "        ", "model_name", "=", "\"XSRL\"", "\n", "if", "\"wEnt\"", "in", "config", "[", "\"SRL_name\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-MaxEnt\"", "\n", "", "elif", "\"wLPB\"", "not", "in", "config", "[", "\"SRL_name\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-random\"", "\n", "", "", "elif", "model_name", "==", "\"ground_truth\"", ":", "\n", "        ", "model_name", "=", "\"ground truth\"", "\n", "", "elif", "model_name", "==", "\"position\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"pure_noise\"", ":", "\n", "        ", "model_name", "=", "\"pure noise\"", "\n", "", "elif", "model_name", "==", "\"openLoop\"", ":", "\n", "        ", "model_name", "=", "\"open-loop\"", "\n", "", "elif", "model_name", "==", "\"random_nn\"", ":", "\n", "        ", "model_name", "=", "\"random network\"", "\n", "", "elif", "model_name", "==", "\"RAE\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"VAE\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"AE\"", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "\"n_stack\"", "in", "config", "and", "config", "[", "\"method\"", "]", "not", "in", "state_baselines", ":", "\n", "        ", "if", "config", "[", "\"n_stack\"", "]", "==", "1", ":", "\n", "            ", "model_name", "+=", "\" (w/o stack)\"", "\n", "", "elif", "config", "[", "\"n_stack\"", "]", ">", "1", ":", "\n", "            ", "model_name", "+=", "\" (w/ stack)\"", "\n", "", "", "if", "\"agent\"", "in", "config", ":", "# 'RL_name'", "\n", "        ", "model_name", "=", "\"SAC+\"", "+", "model_name", "\n", "", "if", "\"env_params\"", "in", "config", ":", "\n", "        ", "state_dim", "=", "config", "[", "\"env_params\"", "]", "[", "\"obs\"", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "state_dim", "=", "config", "[", "\"state_dim\"", "]", "\n", "", "if", "config", "[", "\"method\"", "]", "in", "encoder_methods", ":", "\n", "        ", "if", "config", "[", "\"stack_state\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-stack\"", "\n", "", "if", "\"randomExplor\"", "in", "config", "[", "\"SRL_name\"", "]", "and", "\"(w/o stack)\"", "not", "in", "model_name", ":", "\n", "            ", "model_name", "+=", "\"-explor\"", "\n", "", "if", "config", "[", "\"wallDistractor\"", "]", ":", "\n", "            ", "model_name", "+=", "\" (w/ distractor)\"", "\n", "", "", "if", "\"(w/ distractor)\"", "not", "in", "model_name", "and", "\"stack\"", "not", "in", "model_name", ":", "\n", "        ", "model_name", "+=", "(", "\n", "\" (dim {})\"", ".", "format", "(", "state_dim", ")", "\n", "if", "model_name", "==", "\"ground truth\"", "\n", "else", "\" (dim %1d)\"", "%", "(", "state_dim", "*", "factor", ")", "\n", ")", "\n", "", "return", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.saveJson": [[180, 186], ["open", "json.dump", "os.path.join"], "function", ["None"], ["", "", "def", "saveJson", "(", "config", ",", "save_dir", ",", "name", "=", "\"exp_config.json\"", ")", ":", "\n", "    ", "\"Save the experiment config to a json file\"", "\n", "if", "name", "[", "-", "5", ":", "]", "!=", "\".json\"", ":", "\n", "        ", "name", "+=", "\".json\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "outfile", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.loadJson": [[188, 193], ["open", "json.load", "os.path.join"], "function", ["None"], ["", "", "def", "loadJson", "(", "curr_path", ",", "name", "=", "\"exp_config\"", ")", ":", "\n", "    ", "if", "name", "[", "-", "5", ":", "]", "!=", "\".json\"", ":", "\n", "        ", "name", "+=", "\".json\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "curr_path", ",", "name", ")", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "read_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.saveConfig": [[195, 214], ["collections.OrderedDict", "pprint.pprint", "print", "sorted", "os.path.exists", "open", "pickle.dump", "collections.OrderedDict.items"], "function", ["None"], ["", "", "def", "saveConfig", "(", "\n", "config", ",", "print_config", "=", "False", ",", "evaluate", "=", "False", ",", "save_dir", "=", "None", ",", "name", "=", "\"exp_config\"", "\n", ")", ":", "\n", "    ", "\"Save the experiment config to a pkl file\"", "\n", "if", "name", "[", "-", "4", ":", "]", "!=", "\".pkl\"", ":", "\n", "        ", "name", "+=", "\".pkl\"", "\n", "", "if", "not", "save_dir", ":", "\n", "        ", "save_dir", "=", "config", "[", "\"log_folder\"", "]", "\n", "", "if", "print_config", ":", "\n", "        ", "pprint", "(", "config", ")", "\n", "print", "(", "\"Saved config to log folder: {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "# Sort by keys", "\n", "", "config", "=", "OrderedDict", "(", "sorted", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "config_path", "=", "\"{}/{}\"", ".", "format", "(", "save_dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_path", ")", "and", "evaluate", ":", "\n", "        ", "config_path", "=", "\"{}/{}_evaluate\"", ".", "format", "(", "save_dir", ",", "name", ")", "\n", "\n", "", "with", "open", "(", "config_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "config", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.loadConfig": [[216, 221], ["open", "pickle.load", "os.path.join"], "function", ["None"], ["", "", "def", "loadConfig", "(", "config_path", ",", "name", "=", "\"exp_config\"", ")", ":", "\n", "    ", "if", "name", "[", "-", "4", ":", "]", "!=", "\".pkl\"", ":", "\n", "        ", "name", "+=", "\".pkl\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config_path", ",", "name", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.savePickle": [[223, 226], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "savePickle", "(", "data_dict", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.loadPickle": [[228, 231], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "loadPickle", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.float2string": [[233, 236], ["float2string.format"], "function", ["None"], ["", "", "def", "float2string", "(", "value", ",", "nfloat", "=", "3", ")", ":", "\n", "    ", "float2string", "=", "\"{:.%sf}\"", "%", "nfloat", "\n", "return", "float2string", ".", "format", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.update_text": [[238, 261], ["os.path.isfile", "open", "numpy.save", "file_object.write", "file_object.write", "file_object.write", "file_object.write", "open", "file_object.write", "file_object.write", "map", "map"], "function", ["None"], ["", "def", "update_text", "(", "data_list", ",", "save_path", ",", "text", "=", "False", ",", "replace", "=", "False", ",", "array", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "save_path", ")", "and", "not", "replace", ":", "\n", "        ", "assert", "not", "array", "\n", "mode", "=", "\"a\"", "\n", "with", "open", "(", "save_path", ",", "mode", ")", "as", "file_object", ":", "\n", "            ", "if", "text", ":", "\n", "                ", "file_object", ".", "write", "(", "\"\\n\"", ")", "\n", "file_object", ".", "write", "(", "data_list", ")", "\n", "", "else", ":", "\n", "                ", "file_object", ".", "write", "(", "\"\\n\"", ")", "\n", "file_object", ".", "write", "(", "\"\\n\"", ".", "join", "(", "map", "(", "str", ",", "data_list", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "array", ":", "\n", "            ", "if", "\".txt\"", "==", "save_path", "[", "-", "4", ":", "]", ":", "\n", "                ", "save_path", "=", "save_path", "[", ":", "-", "4", "]", "\n", "", "np", ".", "save", "(", "save_path", ",", "data_list", ")", "\n", "", "else", ":", "\n", "            ", "mode", "=", "\"w\"", "\n", "with", "open", "(", "save_path", ",", "mode", ")", "as", "file_object", ":", "\n", "                ", "if", "text", ":", "\n", "                    ", "file_object", ".", "write", "(", "data_list", ")", "\n", "", "else", ":", "\n", "                    ", "file_object", ".", "write", "(", "\"\\n\"", ".", "join", "(", "map", "(", "str", ",", "data_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.createFolder": [[263, 276], ["os.makedirs", "print", "print"], "function", ["None"], ["", "", "", "", "", "def", "createFolder", "(", "path_to_folder", ",", "exist_msg", ")", ":", "\n", "    ", "\"\"\"\n    Try to create a folder (and parents if needed)\n    print a message in case the folder already exist\n    :param path_to_folder: (str)\n    :param exist_msg:\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path_to_folder", ")", "\n", "print", "(", "\"created folder: {}\"", ".", "format", "(", "path_to_folder", ")", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "exist_msg", ":", "\n", "            ", "print", "(", "exist_msg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotter": [[15, 51], ["matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.close", "numpy.arange", "matplotlib.title", "os.path.join", "open", "numpy.array", "len", "type", "numpy.cumsum", "numpy.arange", "f.read().split", "f.read", "len"], "function", ["None"], ["def", "plotter", "(", "\n", "loss_log", ",", "\n", "save_path", ",", "\n", "name", "=", "\"loss\"", ",", "\n", "title", "=", "None", ",", "\n", "xlabel", "=", "\"gradient steps\"", ",", "\n", "ylabel", "=", "\"Mini-Batch Loss\"", ",", "\n", "backprop_per_eval", "=", "None", ",", "\n", "text_file", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "if", "text_file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "text_file", ")", "as", "f", ":", "\n", "            ", "loss_log", "=", "np", ".", "array", "(", "f", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "if", "backprop_per_eval", "is", "None", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "loss_log", ")", ")", "\n", "", "elif", "type", "(", "backprop_per_eval", ")", "is", "list", ":", "\n", "        ", "x", "=", "np", ".", "cumsum", "(", "backprop_per_eval", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "\n", "backprop_per_eval", ",", "\n", "(", "len", "(", "loss_log", ")", "+", "1", ")", "*", "backprop_per_eval", ",", "\n", "backprop_per_eval", ",", "\n", ")", "\n", "", "plt", ".", "plot", "(", "x", ",", "loss_log", ",", "\"-k\"", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "if", "title", ":", "\n", "        ", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "7", ",", "pad", "=", "2", ")", "\n", "", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "name", "+", "\".pdf\"", ")", ",", "\n", "format", "=", "\"pdf\"", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "pad_inches", "=", "0.1", ",", "\n", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.visualizeMazeExplor": [[53, 103], ["matplotlib.subplots", "ax.imshow", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.set_xticks", "ax.set_yticks", "numpy.arange", "ax.scatter", "ax.plot", "numpy.loadtxt", "PIL.Image.open", "len", "matplotlib.savefig", "matplotlib.close", "os.path.join", "PIL.Image.open", "os.path.join", "print", "traceback.print_exc", "matplotlib.close", "os.path.join"], "function", ["None"], ["", "def", "visualizeMazeExplor", "(", "\n", "env_name", ",", "robot_pos", "=", "None", ",", "robot_pos_dir", "=", "\"\"", ",", "save_dir", "=", "\"\"", ",", "name", "=", "\"\"", "\n", ")", ":", "\n", "    ", "my_dpi", "=", "150", "\n", "if", "robot_pos_dir", ":", "\n", "        ", "robot_pos", "=", "np", ".", "loadtxt", "(", "robot_pos_dir", ")", "\n", "", "else", ":", "\n", "        ", "assert", "robot_pos", "is", "not", "None", ",", "\"no robot_pos\"", "\n", "\n", "", "if", "env_name", "==", "\"TurtlebotMazeEnv-v0\"", ":", "\n", "        ", "real_limit", "=", "1.50", "*", "4", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "bullet_envs_path", ",", "\"turtlebot/maze.png\"", ")", ")", "\n", "", "elif", "env_name", "==", "\"TurtlebotEnv-v0\"", ":", "\n", "        ", "real_limit", "=", "2", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "bullet_envs_path", ",", "\"turtlebot/arena.png\"", ")", ")", "\n", "\n", "", "\"center and scale the positions\"", "\n", "dimX", ",", "dimY", "=", "img", ".", "size", "\n", "unit", "=", "dimX", "/", "5", "# 4*units + 1 unit for margins", "\n", "scale", "=", "(", "dimX", "-", "unit", ")", "/", "real_limit", "\n", "robot_pos", "[", ":", ",", "0", "]", "=", "-", "robot_pos", "[", ":", ",", "0", "]", "+", "real_limit", "\n", "scaledPos", "=", "(", "unit", "/", "2", "+", "robot_pos", "*", "scale", ")", ".", "copy", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "\n", "ax", ".", "spines", "[", "\"top\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"left\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"bottom\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"right\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "t", "=", "np", ".", "arange", "(", "len", "(", "robot_pos", ")", ")", "\n", "\"blue -> green -> yellow -> red\"", "\n", "ax", ".", "scatter", "(", "scaledPos", "[", ":", ",", "0", "]", ",", "scaledPos", "[", ":", ",", "1", "]", ",", "c", "=", "t", ",", "alpha", "=", "0.5", ",", "s", "=", "10", ")", "\n", "ax", ".", "plot", "(", "scaledPos", "[", ":", ",", "0", "]", ",", "scaledPos", "[", ":", ",", "1", "]", ",", "color", "=", "\"k\"", ",", "linewidth", "=", "0.5", ",", "alpha", "=", "0.7", ")", "\n", "\n", "try", ":", "\n", "        ", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", "+", "\".png\"", ")", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "pad_inches", "=", "0.0", ",", "\n", "format", "=", "\"png\"", ",", "\n", "dpi", "=", "my_dpi", ",", "\n", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "\"  Bug while saving in visualizeMazeExplor\"", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat": [[105, 292], ["matplotlib.subplots", "matplotlib.subplots_adjust", "axs.flatten.flatten", "axs[].axis", "axs[].set_title", "axs[].axis", "axs[].set_title", "matplotlib.savefig", "matplotlib.close", "matplotlib.suptitle", "axs[].axis", "axs[].set_title", "axs[].axis", "axs[].axis", "axs[].imshow", "axs[].imshow", "axs[].imshow", "axs[].imshow", "axs[].annotate", "axs[].annotate", "os.path.join", "cv2.imwrite", "cv2.imwrite", "cv2.resize().astype", "cv2.resize().astype", "cv2.resize().astype", "cv2.resize().astype", "axs[].imshow", "axs[].imshow", "axs[].imshow", "axs[].imshow", "axs[].set_title", "numpy.dstack", "numpy.dstack", "fig.get_facecolor", "os.path.join", "os.path.join", "cv2.imwrite", "cv2.imwrite", "numpy.dstack", "numpy.dstack", "axs[].set_title", "dict", "dict", "os.path.join", "os.path.join", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize"], "function", ["None"], ["", "", "def", "plot_xHat", "(", "\n", "img", ",", "\n", "img_hat", ",", "\n", "imgTarget", "=", "None", ",", "\n", "im_high_render", "=", "None", ",", "\n", "imLabel", "=", "None", ",", "\n", "figure_path", "=", "\"\"", ",", "\n", "name", "=", "\"xHat\"", ",", "\n", "gradientStep", "=", "None", ",", "\n", "saved_step", "=", "None", ",", "\n", "with_noise", "=", "False", ",", "\n", "with_nextObs", "=", "False", ",", "\n", "suffix", "=", "\"last\"", ",", "\n", "evaluate", "=", "False", ",", "\n", ")", ":", "\n", "    ", "im_size", "=", "256", "\n", "color", "=", "img", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "if", "img", ".", "shape", "[", "0", "]", "!=", "im_size", ":", "\n", "        ", "\"Resize to a square image, important that rgb_array values between 0 and 255\"", "\n", "img", "=", "(", "img", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "if", "color", "else", "(", "img", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "(", "\n", "cv2", ".", "resize", "(", "\n", "img", ",", "dsize", "=", "(", "im_size", ",", "im_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "/", "255.0", "\n", ")", "\n", "", "if", "img_hat", ".", "shape", "[", "0", "]", "!=", "im_size", ":", "\n", "        ", "img_hat", "=", "(", "\n", "(", "img_hat", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "color", "\n", "else", "(", "img_hat", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", ")", "\n", "img_hat", "=", "(", "\n", "cv2", ".", "resize", "(", "\n", "img_hat", ",", "dsize", "=", "(", "im_size", ",", "im_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "/", "255.0", "\n", ")", "\n", "", "if", "(", "imgTarget", "is", "not", "None", ")", "and", "(", "imgTarget", ".", "shape", "[", "0", "]", "!=", "im_size", ")", ":", "\n", "        ", "imgTarget", "=", "(", "\n", "(", "imgTarget", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "color", "\n", "else", "(", "imgTarget", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", ")", "\n", "imgTarget", "=", "(", "\n", "cv2", ".", "resize", "(", "\n", "imgTarget", ",", "dsize", "=", "(", "im_size", ",", "im_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "/", "255.0", "\n", ")", "\n", "", "if", "(", "im_high_render", "is", "not", "None", ")", "and", "(", "im_high_render", ".", "shape", "[", "0", "]", "!=", "im_size", ")", ":", "\n", "        ", "im_high_render", "=", "(", "\n", "(", "im_high_render", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "color", "\n", "else", "(", "im_high_render", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", ")", "\n", "im_high_render", "=", "(", "\n", "cv2", ".", "resize", "(", "\n", "im_high_render", ",", "dsize", "=", "(", "im_size", ",", "im_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "/", "255.0", "\n", ")", "\n", "\n", "", "my_dpi", "=", "100", "\n", "\n", "show_target", "=", "with_nextObs", "or", "with_noise", "\n", "\n", "ncol", "=", "2", "\n", "nrow", "=", "2", "if", "show_target", "else", "1", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "\n", "nrow", ",", "\n", "ncol", ",", "\n", "facecolor", "=", "(", "0.88", ",", "0.88", ",", "0.88", ")", ",", "\n", "figsize", "=", "(", "ncol", "*", "im_size", "/", "my_dpi", ",", "nrow", "*", "im_size", "/", "my_dpi", ")", ",", "\n", ")", "\n", "\"to set the spacing between subplots\"", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0", ",", "right", "=", "1", ",", "top", "=", "1", ",", "bottom", "=", "0", ",", "hspace", "=", "0.04", ",", "wspace", "=", "0.18", ")", "\n", "\n", "if", "gradientStep", "is", "not", "None", ":", "\n", "        ", "plt", ".", "suptitle", "(", "\"gradient step {}\"", ".", "format", "(", "gradientStep", ")", ",", "fontsize", "=", "10", ",", "y", "=", "0.0", ")", "\n", "", "axs", "=", "axs", ".", "flatten", "(", ")", "\n", "\n", "if", "im_high_render", "is", "not", "None", ":", "\n", "        ", "axId", "=", "0", "\n", "axs", "[", "axId", "]", ".", "axis", "(", "\"off\"", ")", "\n", "axs", "[", "axId", "]", ".", "imshow", "(", "im_high_render", ")", "if", "color", "else", "axs", "[", "axId", "]", ".", "imshow", "(", "\n", "np", ".", "dstack", "(", "[", "im_high_render", ",", "im_high_render", ",", "im_high_render", "]", ")", "\n", ")", "\n", "axs", "[", "axId", "]", ".", "set_title", "(", "imLabel", ",", "fontsize", "=", "10", ",", "pad", "=", "1.5", ")", "\n", "", "else", ":", "\n", "        ", "axs", "[", "0", "]", ".", "axis", "(", "False", ")", "\n", "\n", "", "if", "show_target", ":", "\n", "# remove the top left frame", "\n", "        ", "axId", "=", "1", "\n", "axs", "[", "axId", "]", ".", "axis", "(", "\"off\"", ")", "\n", "axs", "[", "axId", "]", ".", "imshow", "(", "imgTarget", ")", "if", "color", "else", "axs", "[", "axId", "]", ".", "imshow", "(", "\n", "np", ".", "dstack", "(", "[", "imgTarget", ",", "imgTarget", ",", "imgTarget", "]", ")", "\n", ")", "\n", "if", "with_nextObs", ":", "\n", "            ", "axs", "[", "axId", "]", ".", "set_title", "(", "r\"next obs: $\\mathbf{o}_{t+1}$\"", ",", "fontsize", "=", "10", ",", "pad", "=", "1.5", ")", "\n", "prediction_name", "=", "r\"pred: $\\hat{\\mathbf{o}}_{t+1}$\"", "\n", "", "elif", "with_noise", ":", "\n", "            ", "axs", "[", "axId", "]", ".", "set_title", "(", "r\"target obs: $\\mathbf{o}_{t}$\"", ",", "fontsize", "=", "10", ",", "pad", "=", "1.5", ")", "\n", "prediction_name", "=", "r\"pred: $\\hat{\\mathbf{o}}_{t}$\"", "\n", "", "", "else", ":", "\n", "        ", "prediction_name", "=", "r\"pred: $\\hat{\\mathbf{o}}_t$\"", "\n", "\n", "", "axId", "=", "2", "if", "show_target", "else", "0", "\n", "axs", "[", "axId", "]", ".", "axis", "(", "\"off\"", ")", "\n", "axs", "[", "axId", "]", ".", "imshow", "(", "img", ")", "if", "color", "else", "axs", "[", "axId", "]", ".", "imshow", "(", "np", ".", "dstack", "(", "[", "img", ",", "img", ",", "img", "]", ")", ")", "\n", "axs", "[", "axId", "]", ".", "set_title", "(", "r\"input: $\\mathbf{o}_t$\"", ",", "fontsize", "=", "10", ",", "pad", "=", "1.5", ")", "# 'observation'", "\n", "\n", "axId", "=", "3", "if", "show_target", "else", "1", "\n", "axs", "[", "axId", "]", ".", "axis", "(", "\"off\"", ")", "\n", "axs", "[", "axId", "]", ".", "imshow", "(", "img_hat", ")", "if", "color", "else", "axs", "[", "axId", "]", ".", "imshow", "(", "\n", "np", ".", "dstack", "(", "[", "img_hat", ",", "img_hat", ",", "img_hat", "]", ")", "\n", ")", "\n", "axs", "[", "axId", "]", ".", "set_title", "(", "prediction_name", ",", "fontsize", "=", "10", ",", "pad", "=", "1.5", ")", "\n", "\n", "if", "gradientStep", ":", "\n", "        ", "pad", "=", "0.05", "\n", "arrow_x", "=", "171.5", "\n", "arrow_y", "=", "104", "\n", "", "else", ":", "\n", "        ", "pad", "=", "0", "\n", "arrow_x", "=", "168", "\n", "arrow_y", "=", "85", "\n", "# Create the arrow", "\n", "", "if", "show_target", ":", "\n", "        ", "axs", "[", "2", "]", ".", "annotate", "(", "\n", "\"\"", ",", "\n", "xytext", "=", "(", "arrow_x", ",", "arrow_y", ")", ",", "\n", "xy", "=", "(", "arrow_x", "+", "32", ",", "arrow_y", ")", ",", "\n", "xycoords", "=", "\"figure points\"", ",", "\n", "arrowprops", "=", "dict", "(", "\n", "arrowstyle", "=", "\"simple\"", ",", "\n", "color", "=", "\"k\"", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "axs", "[", "0", "]", ".", "annotate", "(", "\n", "\"\"", ",", "\n", "xytext", "=", "(", "arrow_x", ",", "arrow_y", ")", ",", "\n", "xy", "=", "(", "arrow_x", "+", "32", ",", "arrow_y", ")", ",", "\n", "xycoords", "=", "\"figure points\"", ",", "\n", "arrowprops", "=", "dict", "(", "\n", "arrowstyle", "=", "\"simple\"", ",", "\n", "color", "=", "\"k\"", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "if", "saved_step", "is", "not", "None", ":", "\n", "        ", "epoch_", "=", "\"-%06d\"", "%", "saved_step", "\n", "", "else", ":", "\n", "        ", "epoch_", "=", "\"_%s\"", "%", "suffix", "\n", "\n", "", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "figure_path", ",", "name", "+", "epoch_", "+", "\".png\"", ")", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "pad_inches", "=", "pad", ",", "\n", "format", "=", "\"png\"", ",", "\n", "dpi", "=", "my_dpi", ",", "\n", "facecolor", "=", "fig", ".", "get_facecolor", "(", ")", ",", "\n", "edgecolor", "=", "\"none\"", ",", "\n", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "if", "evaluate", ":", "\n", "        ", "\"save images separately\"", "\n", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "figure_path", ",", "\"{}_img.png\"", ".", "format", "(", "name", ")", ")", ",", "255", "*", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "figure_path", ",", "\"{}_img_hat.png\"", ".", "format", "(", "name", ")", ")", ",", "\n", "255", "*", "img_hat", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", ")", "\n", "if", "imgTarget", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "figure_path", ",", "\"{}_imgTarget.png\"", ".", "format", "(", "name", ")", ")", ",", "\n", "255", "*", "imgTarget", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", ")", "\n", "", "if", "im_high_render", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "figure_path", ",", "\"{}_{}.png\"", ".", "format", "(", "name", ",", "imLabel", ")", ")", ",", "\n", "255", "*", "im_high_render", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.angle2Dhsv": [[298, 323], ["numpy.array", "numpy.max", "numpy.min", "colorsys.hsv_to_rgb", "numpy.cos", "numpy.sin", "numpy.array", "numpy.max", "numpy.max", "numpy.min", "numpy.mean"], "function", ["None"], ["def", "angle2Dhsv", "(", "gt", ",", "normalizeAngle", "=", "False", ")", ":", "\n", "    ", "\"HSV colors with proj_dim=2\"", "\n", "Xmax", ",", "Xmin", "=", "np", ".", "max", "(", "gt", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "gt", "[", ":", ",", "0", "]", ")", "\n", "if", "(", "np", ".", "mean", "(", "gt", "[", ":", ",", "0", "]", ")", "-", "Xmin", ")", "/", "(", "Xmax", "-", "Xmin", ")", "<", "0.5", ":", "\n", "        ", "gt", "[", ":", ",", "0", "]", "=", "-", "gt", "[", ":", ",", "0", "]", "+", "np", ".", "max", "(", "gt", "[", ":", ",", "0", "]", ")", "\n", "Xmax", ",", "Xmin", "=", "Xmax", "-", "Xmin", ",", "0", "\n", "", "if", "normalizeAngle", ":", "\n", "        ", "\"normalize angles between [0,2*pi]\"", "\n", "angleMax", ",", "angleMin", "=", "np", ".", "max", "(", "gt", "[", ":", ",", "-", "1", "]", ")", ",", "np", ".", "min", "(", "gt", "[", ":", ",", "-", "1", "]", ")", "\n", "gt", "[", ":", ",", "-", "1", "]", "=", "2", "*", "np", ".", "pi", "*", "(", "gt", "[", ":", ",", "-", "1", "]", "-", "angleMin", ")", "/", "(", "angleMax", "-", "angleMin", ")", "\n", "XminC", "=", "(", "\n", "Xmin", "-", "(", "Xmax", "-", "Xmin", ")", "/", "2", "\n", ")", "# in order to better visualize different colors", "\n", "", "else", ":", "\n", "        ", "XminC", "=", "(", "\n", "Xmin", "-", "(", "Xmax", "-", "Xmin", ")", "/", "10", "\n", ")", "# in order to better visualize different colors", "\n", "# not needed because when modulo2PI was not done, angle is limited: gt[:, -1] = np.mod(gt[:, -1], (2 * np.pi))", "\n", "", "HSV", "=", "[", "(", "x", "[", "-", "1", "]", "*", "1.0", "/", "(", "2", "*", "np", ".", "pi", ")", ",", "(", "x", "[", "0", "]", "-", "XminC", ")", "/", "(", "Xmax", "-", "XminC", ")", ",", "1", ")", "for", "x", "in", "gt", "]", "\n", "RGB", "=", "[", "colorsys", ".", "hsv_to_rgb", "(", "*", "HSV_", ")", "for", "HSV_", "in", "HSV", "]", "\n", "colors", "=", "np", ".", "array", "(", "RGB", ")", "\n", "HSVx", "=", "(", "(", "gt", "[", ":", ",", "0", "]", "-", "Xmin", ")", "/", "(", "Xmax", "-", "Xmin", ")", "+", "0.2", ")", "*", "np", ".", "cos", "(", "gt", "[", ":", ",", "-", "1", "]", ")", "\n", "HSVy", "=", "(", "(", "gt", "[", ":", ",", "0", "]", "-", "Xmin", ")", "/", "(", "Xmax", "-", "Xmin", ")", "+", "0.2", ")", "*", "np", ".", "sin", "(", "gt", "[", ":", ",", "-", "1", "]", ")", "\n", "gt2plot", "=", "np", ".", "array", "(", "(", "HSVx", ",", "HSVy", ")", ")", ".", "T", "\n", "return", "gt2plot", ",", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.angle3Dhsv": [[325, 373], ["numpy.array", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "colorsys.hsv_to_rgb", "numpy.cos", "numpy.sin", "max", "numpy.array", "numpy.max", "numpy.max", "numpy.max", "numpy.min", "numpy.mean", "numpy.mean", "max"], "function", ["None"], ["", "def", "angle3Dhsv", "(", "gt", ",", "normalizeAngle", "=", "False", ")", ":", "\n", "    ", "\"HSV colors with proj_dim=3\"", "\n", "Xmax", ",", "Xmin", ",", "Ymax", ",", "Ymin", "=", "(", "\n", "np", ".", "max", "(", "gt", "[", ":", ",", "0", "]", ")", ",", "\n", "np", ".", "min", "(", "gt", "[", ":", ",", "0", "]", ")", ",", "\n", "np", ".", "max", "(", "gt", "[", ":", ",", "1", "]", ")", ",", "\n", "np", ".", "min", "(", "gt", "[", ":", ",", "1", "]", ")", ",", "\n", ")", "\n", "if", "(", "np", ".", "mean", "(", "gt", "[", ":", ",", "0", "]", ")", "-", "Xmin", ")", "/", "(", "Xmax", "-", "Xmin", ")", "<", "0.5", ":", "\n", "        ", "gt", "[", ":", ",", "0", "]", "=", "-", "gt", "[", ":", ",", "0", "]", "+", "np", ".", "max", "(", "gt", "[", ":", ",", "0", "]", ")", "\n", "Xmax", ",", "Xmin", "=", "Xmax", "-", "Xmin", ",", "0", "\n", "", "if", "(", "np", ".", "mean", "(", "gt", "[", ":", ",", "1", "]", ")", "-", "Ymin", ")", "/", "(", "Ymax", "-", "Ymin", ")", "<", "0.5", ":", "\n", "        ", "gt", "[", ":", ",", "1", "]", "=", "-", "gt", "[", ":", ",", "1", "]", "+", "np", ".", "max", "(", "gt", "[", ":", ",", "1", "]", ")", "\n", "Ymax", ",", "Ymin", "=", "Ymax", "-", "Ymin", ",", "0", "\n", "", "if", "normalizeAngle", ":", "\n", "        ", "\"normalize angles between [0,2*pi]\"", "\n", "angleMax", ",", "angleMin", "=", "np", ".", "max", "(", "gt", "[", ":", ",", "-", "1", "]", ")", ",", "np", ".", "min", "(", "gt", "[", ":", ",", "-", "1", "]", ")", "\n", "gt", "[", ":", ",", "-", "1", "]", "=", "2", "*", "np", ".", "pi", "*", "(", "gt", "[", ":", ",", "-", "1", "]", "-", "angleMin", ")", "/", "(", "angleMax", "-", "angleMin", ")", "\n", "YminC", "=", "(", "\n", "Ymin", "-", "(", "Ymax", "-", "Ymin", ")", "/", "2", "\n", ")", "# in order to better visualize different colors", "\n", "XminC", "=", "(", "\n", "Xmin", "-", "(", "Xmax", "-", "Xmin", ")", "/", "2", "\n", ")", "# in order to better visualize different colors", "\n", "", "else", ":", "\n", "        ", "YminC", "=", "(", "\n", "Ymin", "-", "(", "Ymax", "-", "Ymin", ")", "/", "2", "\n", ")", "# in order to better visualize different colors", "\n", "XminC", "=", "(", "\n", "Xmin", "-", "(", "Xmax", "-", "Xmin", ")", "/", "10", "\n", ")", "# in order to better visualize different colors", "\n", "# not needed because when modulo2PI was not done, angle is limited: gt[:, -1] = np.mod(gt[:, -1], (2 * np.pi))", "\n", "", "HSV", "=", "[", "\n", "(", "\n", "x", "[", "-", "1", "]", "*", "1.0", "/", "(", "2", "*", "np", ".", "pi", ")", ",", "\n", "(", "x", "[", "0", "]", "-", "XminC", ")", "/", "(", "Xmax", "-", "XminC", ")", ",", "\n", "(", "x", "[", "1", "]", "-", "YminC", ")", "/", "max", "(", "(", "Ymax", "-", "YminC", ")", ",", "epsilon", ")", ",", "\n", ")", "\n", "for", "x", "in", "gt", "\n", "]", "\n", "RGB", "=", "[", "colorsys", ".", "hsv_to_rgb", "(", "*", "HSV_", ")", "for", "HSV_", "in", "HSV", "]", "\n", "colors", "=", "np", ".", "array", "(", "RGB", ")", "# between 0 and 1", "\n", "\"for equal axis scales\"", "\n", "HSVx", "=", "(", "(", "gt", "[", ":", ",", "0", "]", "-", "Xmin", ")", "/", "(", "Xmax", "-", "Xmin", ")", "+", "0.2", ")", "*", "np", ".", "cos", "(", "gt", "[", ":", ",", "-", "1", "]", ")", "\n", "HSVy", "=", "(", "(", "gt", "[", ":", ",", "0", "]", "-", "Xmin", ")", "/", "(", "Xmax", "-", "Xmin", ")", "+", "0.2", ")", "*", "np", ".", "sin", "(", "gt", "[", ":", ",", "-", "1", "]", ")", "\n", "HSVz", "=", "(", "gt", "[", ":", ",", "1", "]", "-", "Ymin", ")", "/", "max", "(", "(", "Ymax", "-", "Ymin", ")", ",", "epsilon", ")", "\n", "gt2plot", "=", "np", ".", "array", "(", "(", "HSVx", ",", "HSVy", ",", "HSVz", ")", ")", ".", "T", "\n", "return", "gt2plot", ",", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.obs2torus": [[375, 386], ["numpy.vstack().transpose", "numpy.vstack", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "function", ["None"], ["", "def", "obs2torus", "(", "states", ")", ":", "\n", "    ", "R", "=", "1", "\n", "P", "=", "0.3", "\n", "states", "=", "np", ".", "vstack", "(", "\n", "[", "\n", "(", "R", "+", "P", "*", "np", ".", "cos", "(", "states", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "cos", "(", "states", "[", ":", ",", "0", "]", ")", ",", "\n", "(", "R", "+", "P", "*", "np", ".", "cos", "(", "states", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sin", "(", "states", "[", ":", ",", "0", "]", ")", ",", "\n", "P", "*", "np", ".", "sin", "(", "states", "[", ":", ",", "1", "]", ")", ",", "\n", "]", "\n", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "return", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotEmbedding": [[388, 515], ["print", "measures.transpose.copy", "umap.UMAP().fit_transform", "enumerate", "utilsPlot.createFig", "utilsPlot.angle3Dhsv", "sklearn.decomposition.PCA", "decomposition.PCA.fit_transform", "umap.UMAP().fit_transform", "zip", "utilsPlot.createFig", "utilsPlot.angle2Dhsv", "umap.UMAP", "sklearn.decomposition.PCA", "decomposition.PCA.fit_transform", "utilsPlot.obs2torus", "measures.transpose.transpose", "enumerate", "umap.UMAP", "gt2plotParts.append", "colorsParts.append", "utilsPlot.angle2Dhsv", "utilsPlot.angle3Dhsv"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.createFig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.angle3Dhsv", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.createFig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.angle2Dhsv", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.obs2torus", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.angle2Dhsv", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.angle3Dhsv"], ["", "def", "plotEmbedding", "(", "\n", "method", ",", "\n", "measures", ",", "\n", "all_states", ",", "\n", "figure_path", "=", "\"\"", ",", "\n", "gradientStep", "=", "None", ",", "\n", "saved_step", "=", "None", ",", "\n", "proj_dim", "=", "2", ",", "\n", "n_neighbors", "=", "15", ",", "\n", "metric", "=", "\"euclidean\"", ",", "\n", "suffix", "=", "\"\"", ",", "\n", "env_name", "=", "\"TurtlebotMazeEnv-v0\"", ",", "\n", "evaluate", "=", "False", ",", "\n", ")", ":", "\n", "# matplotlib.rcParams['backend'] = 'TkAgg'", "\n", "    ", "gt2plotParts", "=", "None", "\n", "print", "(", "\"  {}D {} projection of ground truth ......\"", ".", "format", "(", "proj_dim", ",", "method", ")", ")", "\n", "withHSV", "=", "False", "\n", "min_dist", "=", "0.8", "# default is 0.1", "\n", "assert", "proj_dim", "<=", "all_states", ".", "shape", "[", "-", "1", "]", "\n", "if", "env_name", "==", "\"TurtlebotMazeEnv-v0\"", "and", "measures", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "gt4colors", "=", "measures", ".", "copy", "(", ")", "\n", "gt4colors", "[", ":", ",", "0", "]", "=", "gt4colors", "[", ":", ",", "0", "]", "+", "(", "-", "2", "*", "gt4colors", "[", ":", ",", "0", "]", ")", "*", "(", "\n", "gt4colors", "[", ":", ",", "1", "]", "<", "1.04987811", "\n", ")", "\n", "colors", "=", "gt4colors", "[", ":", ",", "0", "]", "+", "gt4colors", "[", ":", ",", "1", "]", "\n", "gt2plot", "=", "measures", "\n", "", "elif", "env_name", "==", "\"TurtlebotMazeEnv-v0\"", ":", "\n", "        ", "withHSV", "=", "True", "\n", "proj_dim", "=", "3", "\n", "measures", "[", ":", ",", "0", "]", "=", "(", "\n", "-", "measures", "[", ":", ",", "0", "]", "+", "1.5", "*", "4", "\n", ")", "# in order to better visualize the maze", "\n", "gt2plot", ",", "colors", "=", "angle3Dhsv", "(", "measures", ")", "\n", "", "elif", "env_name", "==", "\"InvertedPendulumSwingupBulletEnv-v0\"", ":", "\n", "        ", "withHSV", "=", "True", "\n", "proj_dim", "=", "2", "\n", "gt2plot", ",", "colors", "=", "angle2Dhsv", "(", "measures", ")", "\n", "", "elif", "\"Reacher\"", "in", "env_name", ":", "\n", "        ", "colors", "=", "measures", "[", ":", ",", "0", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "gt2plot", "=", "obs2torus", "(", "measures", ")", "\n", "", "else", ":", "\n", "        ", "withHSV", "=", "True", "\n", "gt2plotParts", ",", "colorsParts", "=", "[", "]", ",", "[", "]", "\n", "measures", "=", "measures", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "proj_dimParts", "=", "[", "3", "]", "*", "measures", ".", "shape", "[", "0", "]", "\n", "proj_dimParts", "[", "0", "]", "=", "2", "\n", "for", "i", ",", "partMeasure", "in", "enumerate", "(", "measures", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "\"torso part\"", "\n", "partMeasure", "=", "partMeasure", "[", ":", ",", "1", ":", "]", "\n", "gt2plot", ",", "colors", "=", "angle2Dhsv", "(", "partMeasure", ",", "normalizeAngle", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "gt2plot", ",", "colors", "=", "angle3Dhsv", "(", "partMeasure", ",", "normalizeAngle", "=", "True", ")", "\n", "", "gt2plotParts", ".", "append", "(", "gt2plot", ")", "\n", "colorsParts", ".", "append", "(", "colors", ")", "\n", "\n", "", "", "if", "withHSV", ":", "\n", "        ", "cmap", "=", "None", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "\"gist_rainbow\"", "\n", "\n", "", "if", "method", "==", "\"UMAP\"", ":", "\n", "        ", "embedding", "=", "umap", ".", "UMAP", "(", "\n", "n_components", "=", "proj_dim", ",", "\n", "n_neighbors", "=", "n_neighbors", ",", "\n", "min_dist", "=", "min_dist", ",", "\n", "metric", "=", "metric", ",", "\n", ")", ".", "fit_transform", "(", "all_states", ")", "\n", "", "elif", "method", "==", "\"PCA\"", ":", "\n", "        ", "pcaTransform", "=", "decomposition", ".", "PCA", "(", "n_components", "=", "proj_dim", ")", "\n", "embedding", "=", "pcaTransform", ".", "fit_transform", "(", "all_states", ")", "\n", "\n", "", "GTlegend", "=", "\"Ground truth\"", "\n", "\n", "if", "gt2plotParts", "is", "not", "None", ":", "\n", "        ", "embeddingParts", "=", "{", "\"%s\"", "%", "proj_dim", ":", "embedding", "}", "\n", "if", "proj_dim", "==", "3", ":", "\n", "            ", "proj_dimLast", "=", "2", "\n", "", "else", ":", "\n", "            ", "proj_dimLast", "=", "3", "\n", "", "if", "method", "==", "\"UMAP\"", ":", "\n", "            ", "embeddingParts", "[", "\"%s\"", "%", "proj_dimLast", "]", "=", "umap", ".", "UMAP", "(", "\n", "n_components", "=", "proj_dimLast", ",", "\n", "n_neighbors", "=", "n_neighbors", ",", "\n", "min_dist", "=", "min_dist", ",", "\n", "metric", "=", "metric", ",", "\n", ")", ".", "fit_transform", "(", "all_states", ")", "\n", "", "elif", "method", "==", "\"PCA\"", ":", "\n", "            ", "pcaTransform", "=", "decomposition", ".", "PCA", "(", "n_components", "=", "proj_dimLast", ")", "\n", "embeddingParts", "[", "\"%s\"", "%", "proj_dimLast", "]", "=", "pcaTransform", ".", "fit_transform", "(", "all_states", ")", "\n", "", "for", "i", ",", "(", "gt2plot", ",", "colors", ",", "proj_dim", ")", "in", "enumerate", "(", "\n", "zip", "(", "gt2plotParts", ",", "colorsParts", ",", "proj_dimParts", ")", "\n", ")", ":", "\n", "            ", "embedding", "=", "embeddingParts", "[", "\"%s\"", "%", "proj_dim", "]", "\n", "if", "suffix", "!=", "\"\"", ":", "\n", "                ", "namePart", "=", "suffix", "+", "\"-part%02d\"", "%", "i", "\n", "", "else", ":", "\n", "                ", "namePart", "=", "\"part%02d\"", "%", "i", "\n", "", "createFig", "(", "\n", "method", ",", "\n", "gt2plot", ",", "\n", "embedding", ",", "\n", "colors", ",", "\n", "cmap", ",", "\n", "GTlegend", "+", "\" robot part %01d\"", "%", "i", ",", "\n", "figure_path", "=", "figure_path", ",", "\n", "gradientStep", "=", "gradientStep", ",", "\n", "saved_step", "=", "saved_step", ",", "\n", "proj_dim", "=", "proj_dim", ",", "\n", "suffix", "=", "namePart", ",", "\n", "evaluate", "=", "evaluate", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "createFig", "(", "\n", "method", ",", "\n", "gt2plot", ",", "\n", "embedding", ",", "\n", "colors", ",", "\n", "cmap", ",", "\n", "GTlegend", ",", "\n", "figure_path", "=", "figure_path", ",", "\n", "gradientStep", "=", "gradientStep", ",", "\n", "saved_step", "=", "saved_step", ",", "\n", "proj_dim", "=", "proj_dim", ",", "\n", "suffix", "=", "suffix", ",", "\n", "evaluate", "=", "evaluate", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.createFig": [[518, 642], ["plt.figure.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.subplots", "axs.flatten.flatten", "axs[].scatter", "matplotlib.setp", "axs[].set_title", "axs[].scatter", "matplotlib.setp", "axs[].set_title", "matplotlib.suptitle", "matplotlib.savefig", "os.path.join", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "matplotlib.setp", "utilsPlot.resize_3Dfig", "utilsPlot.remove_background_3Dfig", "fig.add_subplot.set_title", "os.path.join", "plt.figure.add_subplot", "fig.add_subplot.scatter", "matplotlib.setp", "fig.add_subplot.set_title", "plt.figure.add_subplot", "fig.add_subplot.scatter", "matplotlib.setp", "utilsPlot.resize_3Dfig", "utilsPlot.remove_background_3Dfig", "fig.add_subplot.set_title"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.resize_3Dfig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.remove_background_3Dfig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.resize_3Dfig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.remove_background_3Dfig"], ["", "", "def", "createFig", "(", "\n", "method", ",", "\n", "gt2plot", ",", "\n", "embedding", ",", "\n", "colors", ",", "\n", "cmap", ",", "\n", "GTlegend", ",", "\n", "figure_path", "=", "\"\"", ",", "\n", "gradientStep", "=", "None", ",", "\n", "saved_step", "=", "None", ",", "\n", "proj_dim", "=", "2", ",", "\n", "suffix", "=", "\"\"", ",", "\n", "evaluate", "=", "False", ",", "\n", ")", ":", "\n", "    ", "linewidth", "=", "0", "\n", "size", "=", "8", "\n", "\"Create figure\"", "\n", "if", "proj_dim", "==", "2", ":", "\n", "        ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "(", "7", "*", "2", ",", "7", "*", "1", ")", ")", "\n", "axs", "=", "axs", ".", "flatten", "(", ")", "\n", "\n", "axs", "[", "0", "]", ".", "scatter", "(", "\n", "*", "gt2plot", ".", "T", ",", "\n", "s", "=", "size", ",", "\n", "c", "=", "colors", ",", "\n", "cmap", "=", "cmap", ",", "\n", "alpha", "=", "1.0", ",", "\n", "edgecolors", "=", "\"black\"", ",", "\n", "linewidth", "=", "linewidth", "\n", ")", "\n", "plt", ".", "setp", "(", "axs", "[", "0", "]", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "axs", "[", "0", "]", ".", "set_title", "(", "GTlegend", ")", "\n", "\n", "axs", "[", "1", "]", ".", "scatter", "(", "\n", "*", "embedding", ".", "T", ",", "\n", "s", "=", "size", ",", "\n", "c", "=", "colors", ",", "\n", "cmap", "=", "cmap", ",", "\n", "alpha", "=", "1.0", ",", "\n", "edgecolors", "=", "\"black\"", ",", "\n", "linewidth", "=", "linewidth", "\n", ")", "\n", "plt", ".", "setp", "(", "axs", "[", "1", "]", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "\"2D %s projection of Learned State Space\"", "%", "method", ")", "\n", "\n", "", "elif", "proj_dim", "==", "3", ":", "\n", "## Ground Truth", "\n", "        ", "Axes3D", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", "*", "2", ",", "7", "*", "1", ")", ")", "\n", "if", "gt2plot", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "            ", "ax", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "ax", ".", "scatter", "(", "\n", "*", "gt2plot", ".", "T", ",", "\n", "s", "=", "size", ",", "\n", "c", "=", "colors", ",", "\n", "cmap", "=", "cmap", ",", "\n", "edgecolors", "=", "\"black\"", ",", "\n", "linewidth", "=", "linewidth", "\n", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "ax", ".", "set_title", "(", "\"Ground truth\"", ",", "y", "=", "1.05", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "2", ",", "1", ",", "projection", "=", "\"3d\"", ")", "\n", "ax", ".", "scatter", "(", "\n", "*", "gt2plot", ".", "T", ",", "\n", "s", "=", "size", ",", "\n", "c", "=", "colors", ",", "\n", "cmap", "=", "cmap", ",", "\n", "alpha", "=", "1.0", ",", "\n", "edgecolors", "=", "\"black\"", ",", "\n", "linewidth", "=", "linewidth", "\n", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ",", "zticks", "=", "[", "]", ")", "\n", "resize_3Dfig", "(", "ax", ",", "gt2plot", ")", "\n", "remove_background_3Dfig", "(", "ax", ")", "\n", "ax", ".", "set_title", "(", "GTlegend", ",", "y", "=", "1.05", ")", "\n", "\n", "# Plot results", "\n", "", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "2", ",", "2", ",", "projection", "=", "\"3d\"", ")", "\n", "ax", ".", "scatter", "(", "\n", "*", "embedding", ".", "T", ",", "\n", "s", "=", "size", ",", "\n", "c", "=", "colors", ",", "\n", "cmap", "=", "cmap", ",", "\n", "alpha", "=", "1.0", ",", "\n", "edgecolors", "=", "\"black\"", ",", "\n", "linewidth", "=", "linewidth", "\n", ")", "\n", "plt", ".", "setp", "(", "ax", ",", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ",", "zticks", "=", "[", "]", ")", "\n", "resize_3Dfig", "(", "ax", ",", "embedding", ")", "\n", "remove_background_3Dfig", "(", "ax", ")", "\n", "ax", ".", "set_title", "(", "\"3D %s projection of Learned State Space\"", "%", "method", ",", "y", "=", "1.05", ")", "\n", "\n", "", "\"to set the spacing between subplots\"", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "if", "gradientStep", "is", "not", "None", ":", "\n", "        ", "plt", ".", "suptitle", "(", "\"gradient step {}\"", ".", "format", "(", "gradientStep", ")", ",", "fontsize", "=", "14", ")", "\n", "\n", "", "if", "suffix", "!=", "\"\"", ":", "\n", "        ", "suffix", "=", "\"-\"", "+", "suffix", "\n", "", "else", ":", "\n", "        ", "suffix", "=", "\"\"", "\n", "", "if", "saved_step", "is", "not", "None", ":", "\n", "        ", "epoch_", "=", "\"-%06d\"", "%", "saved_step", "\n", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "figure_path", ",", "\n", "\"{}proj/{}proj-dim{}{}\"", ".", "format", "(", "method", ",", "method", ",", "proj_dim", ",", "suffix", ")", "\n", "+", "epoch_", "\n", "+", "\".png\"", ",", "\n", ")", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "format", "=", "\"png\"", ",", "\n", ")", "# pad_inches=0.1,", "\n", "# plt.savefig(path +\".pdf\", bbox_inches='tight', pad_inches=0.3, format='pdf')", "\n", "", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "figure_path", ",", "\"{}proj-dim{}{}.pdf\"", ".", "format", "(", "method", ",", "proj_dim", ",", "suffix", ")", "\n", ")", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "format", "=", "\"pdf\"", ",", "\n", ")", "# pad_inches=0.1,", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.resize_3Dfig": [[644, 652], ["ax.set_xlim", "ax.set_ylim", "ax.set_zlim", "min", "max", "min", "max", "min", "max"], "function", ["None"], ["", "def", "resize_3Dfig", "(", "ax", ",", "data", ")", ":", "\n", "    ", "data2plotXmin", ",", "data2plotXmax", "=", "min", "(", "data", "[", ":", ",", "0", "]", ")", ",", "max", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "data2plotYmin", ",", "data2plotYmax", "=", "min", "(", "data", "[", ":", ",", "1", "]", ")", ",", "max", "(", "data", "[", ":", ",", "1", "]", ")", "\n", "data2plotZmin", ",", "data2plotZmax", "=", "min", "(", "data", "[", ":", ",", "2", "]", ")", ",", "max", "(", "data", "[", ":", ",", "2", "]", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "data2plotXmin", ",", "data2plotXmax", ")", "\n", "ax", ".", "set_ylim", "(", "data2plotYmin", ",", "data2plotYmax", ")", "\n", "ax", ".", "set_zlim", "(", "data2plotZmin", ",", "data2plotZmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.remove_background_3Dfig": [[654, 661], ["ax.grid"], "function", ["None"], ["", "def", "remove_background_3Dfig", "(", "ax", ")", ":", "\n", "# Get rid of colored axes planes", "\n", "# First remove fill", "\n", "    ", "ax", ".", "grid", "(", "False", ")", "\n", "ax", ".", "xaxis", ".", "pane", ".", "fill", "=", "False", "\n", "ax", ".", "yaxis", ".", "pane", ".", "fill", "=", "False", "\n", "ax", ".", "zaxis", ".", "pane", ".", "fill", "=", "False", "\n", "# Now set color to white (or whatever is \"invisible\")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils.sync_networks": [[7, 17], ["mpi_utils._get_flat_params_or_grads", "comm.Bcast", "mpi_utils._set_flat_params_or_grads"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils._get_flat_params_or_grads", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils._set_flat_params_or_grads"], ["def", "sync_networks", "(", "network", ")", ":", "\n", "    ", "\"\"\"\n    netowrk is the network you want to sync\n\n    \"\"\"", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "flat_params", "=", "_get_flat_params_or_grads", "(", "network", ",", "mode", "=", "\"params\"", ")", "\n", "comm", ".", "Bcast", "(", "flat_params", ",", "root", "=", "0", ")", "\n", "# set the flat params back to the network", "\n", "_set_flat_params_or_grads", "(", "network", ",", "flat_params", ",", "mode", "=", "\"params\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils.sync_params": [[19, 37], ["numpy.array", "comm.Bcast", "getattr().copy_", "parameters.data.numel", "getattr().cpu().numpy().flatten", "torch.tensor().view_as", "getattr", "getattr().cpu().numpy", "torch.tensor", "getattr().cpu", "getattr", "parameters.data.numel"], "function", ["None"], ["", "def", "sync_params", "(", "parameters", ")", ":", "\n", "    ", "\"\"\"\n    netowrk is the network you want to sync\n\n    \"\"\"", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "mode", "=", "\"params\"", "\n", "attr", "=", "\"data\"", "if", "mode", "==", "\"params\"", "else", "\"grad\"", "\n", "flat_params", "=", "np", ".", "array", "(", "getattr", "(", "parameters", ",", "attr", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "comm", ".", "Bcast", "(", "flat_params", ",", "root", "=", "0", ")", "\n", "# set the flat params back to the network", "\n", "pointer", "=", "0", "\n", "getattr", "(", "parameters", ",", "attr", ")", ".", "copy_", "(", "\n", "torch", ".", "tensor", "(", "flat_params", "[", "pointer", ":", "pointer", "+", "parameters", ".", "data", ".", "numel", "(", ")", "]", ")", ".", "view_as", "(", "\n", "parameters", ".", "data", "\n", ")", "\n", ")", "\n", "pointer", "+=", "parameters", ".", "data", ".", "numel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils.sync_grads": [[39, 45], ["mpi_utils._get_flat_params_or_grads", "numpy.zeros_like", "comm.Allreduce", "mpi_utils._set_flat_params_or_grads"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils._get_flat_params_or_grads", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils._set_flat_params_or_grads"], ["", "def", "sync_grads", "(", "network", ")", ":", "\n", "    ", "flat_grads", "=", "_get_flat_params_or_grads", "(", "network", ",", "mode", "=", "\"grads\"", ")", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "global_grads", "=", "np", ".", "zeros_like", "(", "flat_grads", ")", "\n", "comm", ".", "Allreduce", "(", "flat_grads", ",", "global_grads", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "_set_flat_params_or_grads", "(", "network", ",", "global_grads", ",", "mode", "=", "\"grads\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils._get_flat_params_or_grads": [[48, 56], ["numpy.concatenate", "getattr().cpu().numpy().flatten", "network.parameters", "getattr().cpu().numpy", "getattr().cpu", "getattr"], "function", ["None"], ["", "def", "_get_flat_params_or_grads", "(", "network", ",", "mode", "=", "\"params\"", ")", ":", "\n", "    ", "\"\"\"\n    include two kinds: grads and params\n\n    \"\"\"", "\n", "attr", "=", "\"data\"", "if", "mode", "==", "\"params\"", "else", "\"grad\"", "\n", "return", "np", ".", "concatenate", "(", "\n", "[", "getattr", "(", "param", ",", "attr", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "for", "param", "in", "network", ".", "parameters", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils._set_flat_params_or_grads": [[59, 74], ["network.parameters", "getattr().copy_", "param.data.numel", "torch.tensor().view_as", "getattr", "torch.tensor", "param.data.numel"], "function", ["None"], ["", "def", "_set_flat_params_or_grads", "(", "network", ",", "flat_params", ",", "mode", "=", "\"params\"", ")", ":", "\n", "    ", "\"\"\"\n    include two kinds: grads and params\n\n    \"\"\"", "\n", "attr", "=", "\"data\"", "if", "mode", "==", "\"params\"", "else", "\"grad\"", "\n", "# the pointer", "\n", "pointer", "=", "0", "\n", "for", "param", "in", "network", ".", "parameters", "(", ")", ":", "\n", "        ", "getattr", "(", "param", ",", "attr", ")", ".", "copy_", "(", "\n", "torch", ".", "tensor", "(", "flat_params", "[", "pointer", ":", "pointer", "+", "param", ".", "data", ".", "numel", "(", ")", "]", ")", ".", "view_as", "(", "\n", "param", ".", "data", "\n", ")", "\n", ")", "\n", "pointer", "+=", "param", ".", "data", ".", "numel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils.sync_grads_single": [[76, 95], ["numpy.array", "numpy.zeros_like", "comm.Allreduce", "getattr().copy_", "parameters.data.numel", "getattr().cpu().numpy().flatten", "torch.tensor().view_as", "getattr", "getattr().cpu().numpy", "torch.tensor", "getattr().cpu", "getattr", "parameters.data.numel"], "function", ["None"], ["", "", "def", "sync_grads_single", "(", "parameters", ")", ":", "\n", "## _get_flat_params_or_grads", "\n", "    ", "attr", "=", "\"grad\"", "\n", "flat_grads", "=", "np", ".", "array", "(", "getattr", "(", "parameters", ",", "attr", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "## sync_grads", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "global_grads", "=", "np", ".", "zeros_like", "(", "flat_grads", ")", "\n", "comm", ".", "Allreduce", "(", "flat_grads", ",", "global_grads", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "\n", "## _set_flat_params_or_grads", "\n", "# the pointer", "\n", "pointer", "=", "0", "\n", "getattr", "(", "parameters", ",", "attr", ")", ".", "copy_", "(", "\n", "torch", ".", "tensor", "(", "global_grads", "[", "pointer", ":", "pointer", "+", "parameters", ".", "data", ".", "numel", "(", ")", "]", ")", ".", "view_as", "(", "\n", "parameters", ".", "data", "\n", ")", "\n", ")", "\n", "pointer", "+=", "parameters", ".", "data", ".", "numel", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.__init__": [[21, 37], ["gym.Wrapper.__init__", "torch.device", "runner.StateWrapper.env.reset", "list"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "runner", ",", "demo", ",", "device", "=", "CPU", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "self", ".", "demo", "=", "demo", "\n", "self", ".", "runner", "=", "runner", "\n", "self", ".", "method", "=", "runner", ".", "method", "\n", "self", ".", "n_stack", "=", "runner", ".", "n_stack", "\n", "self", ".", "nc", "=", "3", "if", "runner", ".", "color", "else", "1", "\n", "self", ".", "actionRepeat", "=", "self", ".", "runner", ".", "actionRepeat", "if", "self", ".", "n_stack", ">", "1", "else", "1", "\n", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obs_shape", "=", "list", "(", "obs", ".", "shape", ")", "\n", "self", ".", "obs_shape", "[", "1", "]", "*=", "self", ".", "n_stack", "\n", "\n", "self", ".", "rewardFactor", "=", "(", "\n", "1", "if", "self", ".", "runner", ".", "env_name", "in", "env_with_goals", "else", "self", ".", "actionRepeat", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.reset": [[39, 64], ["runner.StateWrapper.env.reset", "SRL4RL.utils.nn_torch.numpy2pytorch", "runner.StateWrapper.runner.resetState", "runner.StateWrapper.runner.update_state", "SRL4RL.utils.nn_torch.pytorch2numpy", "numpy.zeros", "range", "torch.cat", "torch.cat.squeeze", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.resetState", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.update_state", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "current_obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "self", ".", "n_stack", ">", "1", ":", "\n", "            ", "obs", "=", "np", ".", "zeros", "(", "(", "self", ".", "obs_shape", ")", ",", "np", ".", "float32", ")", "\n", "for", "step_rep", "in", "range", "(", "self", ".", "n_stack", ")", ":", "\n", "                ", "obs", "[", ":", ",", "step_rep", "*", "self", ".", "nc", ":", "(", "step_rep", "+", "1", ")", "*", "self", ".", "nc", "]", "=", "current_obs", "\n", "", "if", "self", ".", "n_stack", ">", "1", "and", "self", ".", "runner", ".", "actionRepeat", "==", "1", ":", "\n", "                ", "\"when uncomment # if args.env_name == 'TurtlebotMazeEnv-v0': args.n_stack = 3\"", "\n", "self", ".", "obs", "=", "obs", "\n", "", "", "else", ":", "\n", "            ", "obs", "=", "current_obs", "\n", "\n", "", "obs", "=", "numpy2pytorch", "(", "obs", ",", "differentiable", "=", "False", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "self", ".", "runner", ".", "with_nextObs", ":", "\n", "            ", "self", ".", "obs_past", "=", "obs", "\n", "\n", "", "self", ".", "runner", ".", "resetState", "(", ")", "# before update_state()", "\n", "state", "=", "self", ".", "runner", ".", "update_state", "(", "obs", ",", "self", ".", "demo", ")", "\n", "if", "self", ".", "runner", ".", "stack_state", ":", "\n", "            ", "state", "=", "torch", ".", "cat", "(", "(", "state", ",", "state", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "old_state", "=", "self", ".", "runner", ".", "state", "\n", "", "elif", "self", ".", "runner", ".", "double_state", ":", "\n", "            ", "state", "=", "torch", ".", "cat", "(", "(", "state", ",", "state", ")", ",", "dim", "=", "1", ")", "\n", "", "state", "=", "pytorch2numpy", "(", "state", ".", "squeeze", "(", ")", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step": [[65, 98], ["range", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.pytorch2numpy", "numpy.zeros", "runner.StateWrapper.env.step", "runner.StateWrapper.runner.update_state", "runner.StateWrapper.runner.update_state", "torch.cat", "torch.cat.squeeze", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.update_state", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.update_state"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "n_stack", ">", "1", ":", "\n", "            ", "obs", "=", "np", ".", "zeros", "(", "(", "self", ".", "obs_shape", ")", ",", "np", ".", "float32", ")", "\n", "", "for", "step_rep", "in", "range", "(", "self", ".", "actionRepeat", ")", ":", "\n", "            ", "current_obs", ",", "r", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "self", ".", "n_stack", ">", "1", "and", "self", ".", "runner", ".", "actionRepeat", "==", "1", ":", "\n", "                ", "\"when uncomment # if args.env_name == 'TurtlebotMazeEnv-v0': args.n_stack = 3\"", "\n", "self", ".", "obs", "[", ":", ",", "-", "2", "*", "self", ".", "nc", ":", "]", "=", "self", ".", "obs", "[", ":", ",", ":", "2", "*", "self", ".", "nc", "]", "\n", "self", ".", "obs", "[", ":", ",", ":", "self", ".", "nc", "]", "=", "current_obs", "\n", "obs", "=", "self", ".", "obs", "\n", "", "elif", "self", ".", "n_stack", ">", "1", ":", "\n", "                ", "if", "(", "step_rep", "+", "1", ")", ">", "(", "self", ".", "actionRepeat", "-", "self", ".", "n_stack", ")", ":", "\n", "                    ", "obs", "[", "\n", ":", ",", "(", "step_rep", "-", "1", ")", "*", "self", ".", "nc", ":", "(", "(", "step_rep", "-", "1", ")", "+", "1", ")", "*", "self", ".", "nc", "\n", "]", "=", "current_obs", "\n", "", "", "elif", "(", "step_rep", "+", "1", ")", "==", "self", ".", "actionRepeat", ":", "\n", "                ", "assert", "step_rep", "<", "2", ",", "\"actionRepeat is already performed in env\"", "\n", "obs", "=", "current_obs", "\n", "\n", "", "", "obs", "=", "numpy2pytorch", "(", "obs", ",", "differentiable", "=", "False", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "self", ".", "runner", ".", "with_nextObs", ":", "\n", "            ", "state", "=", "self", ".", "runner", ".", "update_state", "(", "self", ".", "obs_past", ",", "self", ".", "demo", ")", "\n", "self", ".", "obs_past", "=", "obs", "\n", "", "else", ":", "\n", "            ", "state", "=", "self", ".", "runner", ".", "update_state", "(", "obs", ",", "self", ".", "demo", ")", "\n", "\n", "", "if", "self", ".", "runner", ".", "stack_state", ":", "\n", "            ", "state", "=", "torch", ".", "cat", "(", "(", "state", ",", "self", ".", "old_state", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "old_state", "=", "self", ".", "runner", ".", "state", "\n", "", "elif", "self", ".", "runner", ".", "double_state", ":", "\n", "            ", "state", "=", "torch", ".", "cat", "(", "(", "state", ",", "state", ")", ",", "dim", "=", "1", ")", "\n", "", "state", "=", "pytorch2numpy", "(", "state", ".", "squeeze", "(", ")", ")", "\n", "return", "state", ",", "r", "*", "self", ".", "rewardFactor", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.Runner.__init__": [[101, 103], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.Runner.forward": [[104, 111], ["env.action_space.sample", "torch.no_grad", "actor.select_actions"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.select_actions"], ["", "def", "forward", "(", "self", ",", "actor", ",", "x", ",", "evaluate", "=", "False", ",", "goal", "=", "None", ",", "random", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "random", ":", "\n", "            ", "self", ".", "pi", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "pi", "=", "actor", ".", "select_actions", "(", "x", ",", "evaluate", "=", "evaluate", ",", "goal", "=", "goal", ")", "\n", "", "", "return", "self", ".", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.Runner.resetState": [[112, 114], ["None"], "methods", ["None"], ["", "def", "resetState", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateRunner.__init__": [[117, 155], ["runner.Runner.__init__", "bullet_envs.utils.AddNoise"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "config", ":", "\n", "            ", "config", "[", "\"srl_early_stop\"", "]", "=", "False", "\n", "", "self", ".", "color", "=", "config", "[", "\"color\"", "]", "\n", "self", ".", "n_stack", "=", "config", "[", "\"n_stack\"", "]", "\n", "self", ".", "stack_state", "=", "config", "[", "\"stack_state\"", "]", "\n", "if", "\"double_state\"", "in", "config", ":", "\n", "            ", "self", ".", "double_state", "=", "config", "[", "\"double_state\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "double_state", "=", "False", "\n", "", "self", ".", "debug", "=", "config", "[", "\"debug\"", "]", "\n", "self", ".", "env_name", "=", "config", "[", "\"env_name\"", "]", "\n", "self", ".", "actionRepeat", "=", "config", "[", "\"actionRepeat\"", "]", "\n", "self", ".", "image_size", "=", "config", "[", "\"image_size\"", "]", "\n", "self", ".", "fpv", "=", "config", "[", "\"fpv\"", "]", "\n", "self", ".", "method", "=", "config", "[", "\"method\"", "]", "\n", "if", "\"SRL_name\"", "in", "config", ":", "\n", "            ", "self", ".", "SRL_name", "=", "config", "[", "\"SRL_name\"", "]", "\n", "", "self", ".", "device", "=", "config", "[", "\"device\"", "]", "\n", "self", ".", "save_dir", "=", "config", "[", "\"save_dir\"", "]", "\n", "self", ".", "state_dim", "=", "config", "[", "\"state_dim\"", "]", "\n", "self", ".", "action_dim", "=", "config", "[", "\"action_dim\"", "]", "\n", "self", ".", "noise_type", "=", "config", "[", "\"noise_type\"", "]", "\n", "self", ".", "elapsed_gradients", "=", "(", "\n", "self", ".", "elapsed_epochs", "\n", ")", "=", "self", ".", "elapsed_time", "=", "self", ".", "elapsed_steps", "=", "0", "\n", "\n", "self", ".", "with_nextObs", "=", "config", "[", "\"method\"", "]", "in", "[", "\"XSRL\"", "]", "\n", "self", ".", "with_noise", "=", "self", ".", "noise_type", "!=", "\"none\"", "\n", "if", "self", ".", "with_noise", ":", "\n", "            ", "self", ".", "noise_adder", "=", "AddNoise", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "noise_adder", "=", "None", "\n", "\n", "", "self", ".", "noiseParams", "=", "{", "\n", "\"with_noise\"", ":", "self", ".", "with_noise", ",", "\n", "\"flickering\"", ":", "config", "[", "\"flickering\"", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateRunner.initState": [[157, 163], ["SRL4RL.utils.nn_torch.numpy2pytorch().unsqueeze", "SRL4RL.utils.nn_torch.numpy2pytorch", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "initState", "(", "self", ")", ":", "\n", "        ", "return", "numpy2pytorch", "(", "\n", "np", ".", "random", ".", "normal", "(", "0", ",", "0.02", ",", "self", ".", "state_dim", ")", ",", "\n", "differentiable", "=", "False", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateRunner.resetState": [[164, 166], ["runner.StateRunner.initState"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.initState"], ["", "def", "resetState", "(", "self", ")", ":", "\n", "        ", "self", ".", "old_state", "=", "self", ".", "initState", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateRunner.update_state": [[167, 175], ["torch.no_grad", "SRL4RL.utils.utilsEnv.add_noise", "runner.StateRunner.encoder", "[].transpose", "SRL4RL.utils.utilsEnv.add_noise.to", "SRL4RL.utils.nn_torch.pytorch2numpy"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.add_noise", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy"], ["", "def", "update_state", "(", "self", ",", "x", ",", "demo", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", "=", "add_noise", "(", "x", ",", "self", ".", "noise_adder", ",", "self", ".", "noiseParams", ")", "\n", "self", ".", "state", "=", "self", ".", "encoder", "(", "inputs", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "if", "demo", ":", "\n", "            ", "\"save last inputs to record video\"", "\n", "self", ".", "last_inputs", "=", "pytorch2numpy", "(", "inputs", ")", "[", "0", "]", "[", "-", "3", ":", ",", ":", ",", ":", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.RandomNetworkRunner.__init__": [[178, 201], ["runner.StateRunner.__init__", "runner.RandomNetworkRunner.encoder.eval", "runner.RandomNetworkRunner.encoder.parameters", "torch.load", "os.path.join", "torch.load", "SRL4RL.utils.nn_torch.CNN", "torch.device", "os.path.join", "torch.device"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.CNN"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "config", "[", "\"srl_path\"", "]", ":", "\n", "            ", "self", ".", "encoder", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "config", "[", "\"srl_path\"", "]", ",", "\"state_model.pt\"", ")", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", "\n", "", "elif", "config", "[", "\"my_dir\"", "]", ":", "\n", "            ", "self", ".", "encoder", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "config", "[", "\"save_dir\"", "]", ",", "\"state_model.pt\"", ")", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "CNN", "(", "\n", "config", "[", "\"state_dim\"", "]", ",", "\n", "n_channels", ",", "\n", "activation", "=", "config", "[", "\"activation\"", "]", ",", "\n", "debug", "=", "config", "[", "\"debug\"", "]", ",", "\n", ")", "\n", "", "self", ".", "encoder", ".", "eval", "(", ")", "\n", "for", "p", "in", "self", ".", "encoder", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.RandomNetworkRunner.save_state_model": [[202, 205], ["print", "SRL4RL.utils.nn_torch.save_model"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.save_model"], ["", "", "def", "save_state_model", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "print", "(", "\"Saving models ......\"", ")", "\n", "save_model", "(", "self", ".", "encoder", ",", "save_path", "+", "\"state_model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.RandomNetworkRunner.train": [[206, 209], ["print"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "training", "=", "True", ")", ":", "\n", "        ", "print", "(", "\"random_nn cannot be trained\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.RandomNetworkRunner.to_device": [[210, 212], ["runner.RandomNetworkRunner.encoder.to"], "methods", ["None"], ["", "def", "to_device", "(", "self", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "to", "(", "device", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.last_layer": [[15, 17], ["torch.sigmoid"], "function", ["None"], ["def", "last_layer", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.BaseReplayBuffer.__init__": [[43, 60], ["int", "list", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env_params", ")", ":", "\n", "        ", "self", ".", "env_params", "=", "env_params", "\n", "self", ".", "doneAlive", "=", "config", "[", "\"doneAlive\"", "]", "\n", "self", ".", "with_goal", "=", "config", "[", "\"with_goal\"", "]", "\n", "self", ".", "full", "=", "False", "\n", "if", "self", ".", "doneAlive", ":", "\n", "            ", "self", ".", "idx", "=", "0", "\n", "self", ".", "capacity", "=", "config", "[", "\"bufferCapacity\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "horizon", "=", "int", "(", "config", "[", "\"max_episode_steps\"", "]", "//", "config", "[", "\"actionRepeat\"", "]", ")", "\n", "self", ".", "numEpBuffer", "=", "config", "[", "\"numEpBuffer\"", "]", "\n", "self", ".", "capacity", "=", "self", ".", "numEpBuffer", "*", "self", ".", "horizon", "\n", "self", ".", "all_idx", "=", "list", "(", "range", "(", "self", ".", "numEpBuffer", ")", ")", "\n", "# memory management", "\n", "", "self", ".", "current_size", "=", "0", "\n", "self", ".", "n_transitions_stored", "=", "0", "\n", "self", ".", "method", "=", "config", "[", "\"method\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.BaseReplayBuffer.update_current_size": [[61, 66], ["min"], "methods", ["None"], ["", "def", "update_current_size", "(", "self", ",", "inc", ")", ":", "\n", "        ", "\"only if doneAlive\"", "\n", "self", ".", "current_size", "=", "min", "(", "self", ".", "capacity", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "if", "self", ".", "current_size", "==", "self", ".", "capacity", "and", "not", "self", ".", "full", ":", "\n", "            ", "self", ".", "full", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.BaseReplayBuffer.get_storage_idx": [[67, 85], ["numpy.arange", "min", "numpy.arange", "numpy.random.randint", "numpy.concatenate", "random.sample"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample"], ["", "", "def", "get_storage_idx", "(", "self", ",", "inc", "=", "None", ")", ":", "\n", "        ", "\"only if not doneAlive\"", "\n", "inc", "=", "inc", "or", "1", "\n", "if", "self", ".", "current_size", "+", "inc", "<=", "self", ".", "numEpBuffer", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "", "elif", "self", ".", "current_size", "<", "self", ".", "numEpBuffer", ":", "\n", "            ", "overflow", "=", "inc", "-", "(", "self", ".", "numEpBuffer", "-", "self", ".", "current_size", ")", "\n", "idx_a", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "numEpBuffer", ")", "\n", "idx_b", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "current_size", ",", "overflow", ")", "\n", "idx", "=", "np", ".", "concatenate", "(", "[", "idx_a", ",", "idx_b", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "sample", "(", "self", ".", "all_idx", ",", "inc", ")", "\n", "\n", "", "if", "not", "self", ".", "full", ":", "\n", "            ", "self", ".", "current_size", "=", "min", "(", "self", ".", "numEpBuffer", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "if", "self", ".", "current_size", "==", "self", ".", "numEpBuffer", ":", "\n", "                ", "self", ".", "full", "=", "True", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.Replay_buffer.__init__": [[88, 145], ["replay_buffer.BaseReplayBuffer.__init__", "threading.Lock", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env_params", ")", ":", "\n", "        ", "BaseReplayBuffer", ".", "__init__", "(", "self", ",", "config", ",", "env_params", ")", "\n", "# create the buffer to store info", "\n", "if", "self", ".", "doneAlive", ":", "\n", "            ", "self", ".", "buffers", "=", "{", "\n", "\"obs\"", ":", "np", ".", "empty", "(", "\n", "[", "self", ".", "capacity", ",", "*", "[", "i", "for", "i", "in", "self", ".", "env_params", "[", "\"obs\"", "]", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "\"obs_next\"", ":", "np", ".", "empty", "(", "\n", "[", "self", ".", "capacity", ",", "*", "[", "i", "for", "i", "in", "self", ".", "env_params", "[", "\"obs\"", "]", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "\"r\"", ":", "np", ".", "empty", "(", "[", "self", ".", "capacity", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"not_dones\"", ":", "np", ".", "empty", "(", "[", "self", ".", "capacity", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"actions\"", ":", "np", ".", "empty", "(", "\n", "[", "self", ".", "capacity", ",", "self", ".", "env_params", "[", "\"action\"", "]", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "}", "\n", "", "elif", "self", ".", "with_goal", ":", "\n", "            ", "self", ".", "buffers", "=", "{", "\n", "\"obs\"", ":", "np", ".", "empty", "(", "\n", "[", "\n", "self", ".", "numEpBuffer", ",", "\n", "self", ".", "horizon", "+", "1", ",", "\n", "*", "[", "i", "for", "i", "in", "self", ".", "env_params", "[", "\"obs\"", "]", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "# *self.env_params['obs']]),", "\n", "\"g\"", ":", "np", ".", "empty", "(", "\n", "[", "self", ".", "numEpBuffer", ",", "self", ".", "horizon", ",", "self", ".", "env_params", "[", "\"goal\"", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "\"r\"", ":", "np", ".", "empty", "(", "[", "self", ".", "numEpBuffer", ",", "self", ".", "horizon", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"actions\"", ":", "np", ".", "empty", "(", "\n", "[", "self", ".", "numEpBuffer", ",", "self", ".", "horizon", ",", "self", ".", "env_params", "[", "\"action\"", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffers", "=", "{", "\n", "\"obs\"", ":", "np", ".", "empty", "(", "\n", "[", "\n", "self", ".", "numEpBuffer", ",", "\n", "self", ".", "horizon", "+", "1", ",", "\n", "*", "[", "i", "for", "i", "in", "self", ".", "env_params", "[", "\"obs\"", "]", "]", ",", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "# *self.env_params['obs']]),", "\n", "\"r\"", ":", "np", ".", "empty", "(", "[", "self", ".", "numEpBuffer", ",", "self", ".", "horizon", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"actions\"", ":", "np", ".", "empty", "(", "\n", "[", "self", ".", "numEpBuffer", ",", "self", ".", "horizon", ",", "self", ".", "env_params", "[", "\"action\"", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "}", "\n", "# thread lock", "\n", "", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.Replay_buffer.add": [[146, 159], ["numpy.copyto", "numpy.copyto", "numpy.copyto", "numpy.copyto", "numpy.copyto", "replay_buffer.Replay_buffer.update_current_size"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.BaseReplayBuffer.update_current_size"], ["", "def", "add", "(", "self", ",", "obs_step", ")", ":", "\n", "        ", "\"only if doneAlive\"", "\n", "obs", ",", "obs_next", ",", "r", ",", "done", ",", "a", "=", "obs_step", "\n", "if", "not", "self", ".", "full", ":", "\n", "            ", "self", ".", "update_current_size", "(", "1", ")", "\n", "# with self.lock:", "\n", "", "np", ".", "copyto", "(", "self", ".", "buffers", "[", "\"obs\"", "]", "[", "self", ".", "idx", "]", ",", "obs", ")", "\n", "np", ".", "copyto", "(", "self", ".", "buffers", "[", "\"obs_next\"", "]", "[", "self", ".", "idx", "]", ",", "obs_next", ")", "\n", "np", ".", "copyto", "(", "self", ".", "buffers", "[", "\"r\"", "]", "[", "self", ".", "idx", "]", ",", "r", ")", "\n", "np", ".", "copyto", "(", "self", ".", "buffers", "[", "\"not_dones\"", "]", "[", "self", ".", "idx", "]", ",", "not", "done", ")", "\n", "np", ".", "copyto", "(", "self", ".", "buffers", "[", "\"actions\"", "]", "[", "self", ".", "idx", "]", ",", "a", ")", "\n", "\n", "self", ".", "idx", "=", "(", "self", ".", "idx", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.Replay_buffer.store_episode": [[161, 174], ["replay_buffer.Replay_buffer.get_storage_idx"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.BaseReplayBuffer.get_storage_idx"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ")", ":", "\n", "        ", "\"only if not doneAlive\"", "\n", "mb_obs", ",", "mb_g", ",", "mb_r", ",", "mb_actions", "=", "episode_batch", "\n", "batch_size", "=", "mb_obs", ".", "shape", "[", "0", "]", "\n", "with", "self", ".", "lock", ":", "\n", "# store the informations", "\n", "            ", "self", ".", "idxs", "=", "self", ".", "get_storage_idx", "(", "inc", "=", "batch_size", ")", "\n", "self", ".", "buffers", "[", "\"obs\"", "]", "[", "self", ".", "idxs", "]", "=", "mb_obs", "\n", "self", ".", "buffers", "[", "\"r\"", "]", "[", "self", ".", "idxs", "]", "=", "mb_r", "\n", "self", ".", "buffers", "[", "\"actions\"", "]", "[", "self", ".", "idxs", "]", "=", "mb_actions", "\n", "self", ".", "n_transitions_stored", "+=", "batch_size", "\n", "if", "self", ".", "with_goal", ":", "\n", "                ", "self", ".", "buffers", "[", "\"g\"", "]", "[", "self", ".", "idxs", "]", "=", "mb_g", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.Replay_buffer.sample": [[175, 188], ["replay_buffer.sample_transitions", "replay_buffer.Replay_buffer.buffers.keys"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.sample_transitions"], ["", "", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "# sample the data from the replay buffer", "\n", "        ", "temp_buffers", "=", "{", "}", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "temp_buffers", "[", "key", "]", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "\n", "", "", "if", "not", "self", ".", "doneAlive", ":", "\n", "            ", "temp_buffers", "[", "\"obs_next\"", "]", "=", "temp_buffers", "[", "\"obs\"", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "# sample transitions", "\n", "", "transitions", "=", "sample_transitions", "(", "\n", "temp_buffers", ",", "batch_size", ",", "doneAlive", "=", "self", ".", "doneAlive", "\n", ")", "\n", "return", "transitions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.sample_transitions": [[11, 40], ["numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "episode_batch.keys", "episode_batch[].reshape", "episode_batch.keys", "episode_batch.keys", "numpy.array"], "function", ["None"], ["def", "sample_transitions", "(", "episode_batch", ",", "batch_size_in_transitions", "=", "None", ",", "doneAlive", "=", "False", ")", ":", "\n", "\n", "    ", "if", "doneAlive", ":", "\n", "        ", "capacity", "=", "episode_batch", "[", "\"actions\"", "]", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size_in_transitions", "\n", "# select which time steps to be used", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "capacity", ",", "size", "=", "batch_size", ")", "\n", "transitions", "=", "{", "\n", "key", ":", "episode_batch", "[", "key", "]", "[", "t_samples", "]", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "\n", "}", "\n", "", "else", ":", "\n", "        ", "rollout_batch_size", "=", "episode_batch", "[", "\"actions\"", "]", ".", "shape", "[", "0", "]", "\n", "if", "batch_size_in_transitions", "is", "None", ":", "\n", "            ", "transitions", "=", "{", "\n", "k", ":", "episode_batch", "[", "k", "]", ".", "reshape", "(", "-", "1", ",", "*", "np", ".", "array", "(", "episode_batch", "[", "k", "]", ")", ".", "shape", "[", "2", ":", "]", ")", "\n", "for", "k", "in", "episode_batch", ".", "keys", "(", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "batch_size_in_transitions", "\n", "# select which rollouts and which timesteps to be used", "\n", "episode_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "rollout_batch_size", ",", "batch_size", ")", "\n", "T", "=", "episode_batch", "[", "\"actions\"", "]", ".", "shape", "[", "1", "]", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "T", ",", "size", "=", "batch_size", ")", "\n", "transitions", "=", "{", "\n", "key", ":", "episode_batch", "[", "key", "]", "[", "episode_idxs", ",", "t_samples", "]", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "\n", "}", "\n", "\n", "", "", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.__init__": [[13, 20], ["normalizer.Normalizer.reset"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "size", ",", "eps", "=", "1e-4", ",", "default_clip_range", "=", "np", ".", "inf", ",", "initNormalizer", "=", "None", ",", "name", "=", "\"\"", "\n", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "default_clip_range", "=", "default_clip_range", "\n", "self", ".", "reset", "(", "initNormalizer", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset": [[21, 50], ["threading.Lock", "type", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.square", "numpy.ones", "numpy.square", "numpy.ones"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "initNormalizer", "=", "None", ",", "name", "=", "\"\"", ")", ":", "\n", "# some local information", "\n", "        ", "size", "=", "self", ".", "size", "\n", "if", "type", "(", "self", ".", "size", ")", "is", "list", ":", "\n", "            ", "size", "=", "self", ".", "size", "[", "0", "]", "\n", "", "if", "initNormalizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "local_sum", "=", "initNormalizer", "[", "name", "+", "\"_mean\"", "]", "*", "10000", "\n", "self", ".", "local_sumsq", "=", "np", ".", "square", "(", "initNormalizer", "[", "name", "+", "\"_mean\"", "]", ")", "*", "10000", "\n", "self", ".", "local_count", "=", "np", ".", "ones", "(", "1", ",", "np", ".", "float32", ")", "*", "10000", "\n", "# get the total sum sumsq and sum count", "\n", "self", ".", "total_sum", "=", "initNormalizer", "[", "name", "+", "\"_mean\"", "]", "*", "10000", "\n", "self", ".", "total_sumsq", "=", "np", ".", "square", "(", "initNormalizer", "[", "name", "+", "\"_mean\"", "]", ")", "*", "10000", "\n", "self", ".", "total_count", "=", "np", ".", "ones", "(", "1", ",", "np", ".", "float32", ")", "*", "10000", "\n", "# get the mean and std", "\n", "self", ".", "mean", "=", "initNormalizer", "[", "name", "+", "\"_mean\"", "]", "\n", "self", ".", "std", "=", "initNormalizer", "[", "name", "+", "\"_std\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "local_sum", "=", "np", ".", "zeros", "(", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_sumsq", "=", "np", ".", "zeros", "(", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_count", "=", "np", ".", "zeros", "(", "1", ",", "np", ".", "float32", ")", "\n", "# get the total sum sumsq and sum count", "\n", "self", ".", "total_sum", "=", "np", ".", "zeros", "(", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "total_sumsq", "=", "np", ".", "zeros", "(", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "total_count", "=", "np", ".", "zeros", "(", "1", ",", "np", ".", "float32", ")", "\n", "# get the mean and std", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "ones", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "# thread locker", "\n", "", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.update": [[52, 70], ["type", "v.reshape.reshape.reshape", "v.reshape.reshape.reshape", "v.reshape.reshape.sum", "numpy.square().sum", "v.reshape.reshape.sum().sum().sum", "numpy.square().sum().sum().sum", "numpy.square", "v.reshape.reshape.sum().sum", "numpy.square().sum().sum", "v.reshape.reshape.sum", "numpy.square().sum", "numpy.square"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "size", ")", "is", "list", ":", "\n", "            ", "v", "=", "v", ".", "reshape", "(", "[", "-", "1", "]", "+", "self", ".", "size", ")", "\n", "with", "self", ".", "lock", ":", "\n", "                ", "self", ".", "local_sum", "+=", "v", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "/", "(", "\n", "self", ".", "size", "[", "-", "2", "]", "*", "self", ".", "size", "[", "-", "1", "]", "\n", ")", "\n", "self", ".", "local_sumsq", "+=", "(", "np", ".", "square", "(", "v", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ".", "sum", "(", "\n", "axis", "=", "-", "1", "\n", ")", "/", "(", "self", ".", "size", "[", "-", "2", "]", "*", "self", ".", "size", "[", "-", "1", "]", ")", "\n", "self", ".", "local_count", "[", "0", "]", "+=", "v", ".", "shape", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "v", "=", "v", ".", "reshape", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "# do the computing", "\n", "with", "self", ".", "lock", ":", "\n", "                ", "self", ".", "local_sum", "+=", "v", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_sumsq", "+=", "(", "np", ".", "square", "(", "v", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_count", "[", "0", "]", "+=", "v", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.sync": [[72, 77], ["normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer._mpi_average", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer._mpi_average", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer._mpi_average"], ["", "", "", "def", "sync", "(", "self", ",", "local_sum", ",", "local_sumsq", ",", "local_count", ")", ":", "\n", "        ", "local_sum", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sum", ")", "\n", "local_sumsq", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sumsq", ")", "\n", "local_count", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_count", ")", "\n", "return", "local_sum", ",", "local_sumsq", ",", "local_count", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.recompute_stats": [[78, 102], ["normalizer.Normalizer.sync", "numpy.sqrt", "normalizer.Normalizer.local_count.copy", "normalizer.Normalizer.local_sum.copy", "normalizer.Normalizer.local_sumsq.copy", "numpy.maximum", "numpy.square", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.sync"], ["", "def", "recompute_stats", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "local_count", "=", "self", ".", "local_count", ".", "copy", "(", ")", "\n", "local_sum", "=", "self", ".", "local_sum", ".", "copy", "(", ")", "\n", "local_sumsq", "=", "self", ".", "local_sumsq", ".", "copy", "(", ")", "\n", "# reset", "\n", "self", ".", "local_count", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sum", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sumsq", "[", "...", "]", "=", "0", "\n", "# synrc the stats", "\n", "", "sync_sum", ",", "sync_sumsq", ",", "sync_count", "=", "self", ".", "sync", "(", "\n", "local_sum", ",", "local_sumsq", ",", "local_count", "\n", ")", "\n", "# update the total stuff", "\n", "self", ".", "total_sum", "+=", "sync_sum", "\n", "self", ".", "total_sumsq", "+=", "sync_sumsq", "\n", "self", ".", "total_count", "+=", "sync_count", "\n", "# calculate the new mean and std", "\n", "self", ".", "mean", "=", "self", ".", "total_sum", "/", "self", ".", "total_count", "\n", "self", ".", "std", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "maximum", "(", "\n", "np", ".", "square", "(", "self", ".", "eps", ")", ",", "\n", "(", "self", ".", "total_sumsq", "/", "self", ".", "total_count", ")", "\n", "-", "np", ".", "square", "(", "self", ".", "total_sum", "/", "self", ".", "total_count", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer._mpi_average": [[106, 111], ["numpy.zeros_like", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi4py.MPI.COMM_WORLD.Get_size"], "methods", ["None"], ["", "def", "_mpi_average", "(", "self", ",", "x", ")", ":", "\n", "        ", "buf", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "x", ",", "buf", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "buf", "/=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "return", "buf", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.normalize": [[113, 126], ["torch.is_tensor", "torch.clamp", "numpy.clip", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "normalize", "(", "self", ",", "v", ",", "clip_range", "=", "None", ")", ":", "\n", "        ", "if", "clip_range", "is", "None", ":", "\n", "            ", "clip_range", "=", "self", ".", "default_clip_range", "\n", "", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "            ", "v", "=", "torch", ".", "clamp", "(", "\n", "(", "v", "-", "numpy2pytorch", "(", "self", ".", "mean", ",", "differentiable", "=", "False", ",", "device", "=", "v", ".", "device", ")", ")", "\n", "/", "numpy2pytorch", "(", "self", ".", "std", ",", "differentiable", "=", "False", ",", "device", "=", "v", ".", "device", ")", ",", "\n", "-", "clip_range", ",", "\n", "clip_range", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "v", "=", "np", ".", "clip", "(", "(", "v", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "-", "clip_range", ",", "clip_range", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.denormalize": [[127, 152], ["type", "torch.zeros", "torch.zeros", "range", "torch.is_tensor", "torch.is_tensor", "len", "len", "torch.tensor", "torch.tensor", "torch.clamp", "numpy.clip", "torch.zeros.to", "torch.zeros.to", "SRL4RL.utils.nn_torch.pytorch2numpy", "SRL4RL.utils.nn_torch.pytorch2numpy", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "denormalize", "(", "self", ",", "v", ",", "clip_range", "=", "None", ")", ":", "\n", "        ", "if", "clip_range", "is", "None", ":", "\n", "            ", "clip_range", "=", "self", ".", "default_clip_range", "\n", "", "if", "type", "(", "self", ".", "size", ")", "is", "list", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "assert", "len", "(", "v", ".", "shape", ")", "==", "4", ",", "\"adapt code\"", "\n", "matMean", "=", "torch", ".", "zeros", "(", "(", "v", ".", "shape", ")", ")", "\n", "matStd", "=", "torch", ".", "zeros", "(", "(", "v", ".", "shape", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "size", ")", ")", ":", "\n", "                ", "matMean", "[", ":", ",", "i", "]", "=", "torch", ".", "tensor", "(", "self", ".", "mean", "[", "i", "]", ")", "\n", "matStd", "[", ":", ",", "i", "]", "=", "torch", ".", "tensor", "(", "self", ".", "std", "[", "i", "]", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "                ", "matMean", ".", "to", "(", "device", "=", "v", ".", "device", ")", ",", "matStd", ".", "to", "(", "device", "=", "v", ".", "device", ")", "\n", "v", "=", "torch", ".", "clamp", "(", "v", "*", "matStd", "+", "matMean", ",", "clip_range", "[", "0", "]", ",", "clip_range", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "matMean", ",", "matStd", "=", "pytorch2numpy", "(", "matMean", ")", ",", "pytorch2numpy", "(", "matStd", ")", "\n", "v", "=", "np", ".", "clip", "(", "v", "*", "matStd", "+", "matMean", ",", "clip_range", "[", "0", "]", ",", "clip_range", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "                ", "v", "=", "v", "*", "numpy2pytorch", "(", "\n", "self", ".", "std", ",", "differentiable", "=", "False", ",", "device", "=", "v", ".", "device", "\n", ")", "+", "numpy2pytorch", "(", "self", ".", "mean", ",", "differentiable", "=", "False", ",", "device", "=", "v", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "v", "=", "v", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.excludeUnpicklable": [[153, 157], ["normalizer.Normalizer.__dict__.copy"], "methods", ["None"], ["", "def", "excludeUnpicklable", "(", "self", ")", ":", "\n", "        ", "unpicklable", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "del", "unpicklable", "[", "\"lock\"", "]", "\n", "return", "unpicklable", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.update_normalizer": [[158, 163], ["torch.is_tensor", "normalizer.Normalizer.update", "normalizer.Normalizer.recompute_stats", "SRL4RL.utils.nn_torch.pytorch2numpy"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.update", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.recompute_stats", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy"], ["", "def", "update_normalizer", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "x", "=", "pytorch2numpy", "(", "x", ")", "\n", "", "self", ".", "update", "(", "x", ")", "\n", "self", ".", "recompute_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.__init__": [[166, 173], ["numpy.arange", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxStepsReal", ")", ":", "# eps=1e-2", "\n", "        ", "length", "=", "maxStepsReal", "+", "1", "\n", "time_steps", "=", "np", ".", "arange", "(", "0", ",", "maxStepsReal", "+", "1", ")", "\n", "self", ".", "std", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "sum", "(", "time_steps", "**", "2", ")", "/", "length", "-", "(", "np", ".", "sum", "(", "time_steps", ")", "/", "length", ")", "**", "2", "\n", ")", "\n", "self", ".", "mean", "=", "np", ".", "sum", "(", "time_steps", ")", "/", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.update": [[175, 177], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "v", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.sync": [[179, 181], ["None"], "methods", ["None"], ["", "def", "sync", "(", "self", ",", "local_sum", ",", "local_sumsq", ",", "local_count", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.recompute_stats": [[182, 184], ["None"], "methods", ["None"], ["", "def", "recompute_stats", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer._mpi_average": [[186, 188], ["None"], "methods", ["None"], ["", "def", "_mpi_average", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.normalize": [[190, 198], ["torch.is_tensor", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "normalize", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "            ", "v", "=", "(", "\n", "v", "-", "numpy2pytorch", "(", "self", ".", "mean", ",", "differentiable", "=", "False", ",", "device", "=", "v", ".", "device", ")", "\n", ")", "/", "numpy2pytorch", "(", "self", ".", "std", ",", "differentiable", "=", "False", ",", "device", "=", "v", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "v", "=", "(", "v", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.update_normalizer": [[199, 201], ["None"], "methods", ["None"], ["", "def", "update_normalizer", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_utils.load_config": [[16, 47], ["print", "SRL4RL.utils.utils.loadConfig", "args.__dict__.update"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.loadConfig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.update"], ["def", "load_config", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"\\nsrl_path: \"", ",", "args", ".", "srl_path", ")", "\n", "args", ".", "srl_path", "=", "args", ".", "srl_path", "[", ":", "-", "1", "]", "if", "args", ".", "srl_path", "[", "-", "1", "]", "==", "\"/\"", "else", "args", ".", "srl_path", "\n", "srl_config", "=", "loadConfig", "(", "args", ".", "srl_path", ")", "\n", "\n", "# New RL arguments:", "\n", "option", "=", "\"RL\"", "if", "\"n_eval_rollouts\"", "in", "srl_config", "else", "\"SRL\"", "\n", "\n", "SRL_args", "=", "[", "\n", "\"method\"", ",", "\n", "\"n_stack\"", ",", "\n", "\"image_size\"", ",", "\n", "\"env_name\"", ",", "\n", "\"fpv\"", ",", "\n", "\"state_dim\"", ",", "\n", "\"color\"", ",", "\n", "\"noise_type\"", ",", "\n", "\"activation\"", ",", "\n", "\"wallDistractor\"", ",", "\n", "\"actionRepeat\"", ",", "\n", "]", "# 'distractor'", "\n", "\n", "select_SRL_args", "=", "{", "k", ":", "srl_config", "[", "k", "]", "for", "k", "in", "SRL_args", "}", "\n", "args", ".", "__dict__", ".", "update", "(", "select_SRL_args", ")", "\n", "if", "option", "==", "\"SRL\"", ":", "\n", "        ", "args", ".", "E_hashCode", "=", "srl_config", "[", "\"hashCode\"", "]", "\n", "", "else", ":", "\n", "        ", "args", ".", "E_hashCode", "=", "srl_config", "[", "\"hashCode\"", "]", "+", "\"_RL\"", "\n", "\n", "", "del", "srl_config", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_utils.make_env": [[49, 162], ["mpi4py.MPI.COMM_WORLD.Get_rank", "SRL4RL.utils.env_wrappers.BulletWrapper", "print", "print", "gym.make", "print", "SRL4RL.xsrl.utils.XSRLRunner", "SRL4RL.rl.utils.runner.StateWrapper", "SRL4RL.utils.env_wrappers.GoalWrapper", "SRL4RL.rl.utils.runner.Runner.train", "SRL4RL.rl.utils.runner.Runner.to_device", "gym.make", "mpi4py.MPI.COMM_WORLD.Get_rank", "gym.make.reset", "torch.cuda.is_available", "SRL4RL.ae.utils.AERunner", "SRL4RL.rl.utils.runner.RandomNetworkRunner", "SRL4RL.rl.utils.runner.Runner"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.to_device", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset"], ["", "def", "make_env", "(", "\n", "config", ",", "\n", ")", ":", "\n", "    ", "seed", "=", "config", "[", "\"seed\"", "]", "\n", "seed", "+=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "# parameters for demo.py:", "\n", "if", "\"display_target\"", "in", "config", ":", "\n", "        ", "display_target", "=", "config", "[", "\"display_target\"", "]", "\n", "", "else", ":", "\n", "        ", "display_target", "=", "False", "\n", "", "if", "config", "[", "\"with_images\"", "]", ":", "\n", "        ", "color", "=", "config", "[", "\"color\"", "]", "\n", "", "else", ":", "\n", "        ", "color", "=", "False", "\n", "", "nc", "=", "3", "if", "color", "else", "1", "\n", "\n", "if", "\"demo\"", "in", "config", ":", "\n", "        ", "noise_type", "=", "config", "[", "\"noise_type\"", "]", "\n", "", "else", ":", "\n", "        ", "noise_type", "=", "\"none\"", "# noise added in add_noise()", "\n", "", "if", "\"n_stack\"", "not", "in", "config", ":", "\n", "        ", "config", "[", "\"n_stack\"", "]", "=", "1", "\n", "print", "(", "\"\\nn_stack not in args !\\n\"", ")", "\n", "\n", "", "target_pos", "=", "None", "\n", "if", "config", "[", "\"env_name\"", "]", "in", "env_with_goals", "and", "\"target_pos\"", "in", "config", ":", "\n", "        ", "target_pos", "=", "config", "[", "\"target_pos\"", "]", "\n", "", "if", "config", "[", "\"env_name\"", "]", "in", "PY_MUJOCO", ":", "\n", "# TODO: verify that actionRepeat is not performed 2 times (i.e. by env and by runner)", "\n", "        ", "actionRepeat", "=", "1", "if", "config", "[", "\"n_stack\"", "]", ">", "1", "else", "config", "[", "\"actionRepeat\"", "]", "\n", "# actionRepeat = 1", "\n", "env", "=", "gym", ".", "make", "(", "\n", "\"PybulletEnv-v0\"", ",", "\n", "env_name", "=", "config", "[", "\"env_name\"", "]", ",", "\n", "renders", "=", "config", "[", "\"render\"", "]", ",", "\n", "distractor", "=", "config", "[", "\"distractor\"", "]", ",", "\n", "maxSteps", "=", "config", "[", "\"max_episode_steps\"", "]", ",", "\n", "actionRepeat", "=", "actionRepeat", ",", "\n", "image_size", "=", "config", "[", "\"image_size\"", "]", ",", "\n", "color", "=", "color", ",", "\n", "seed", "=", "seed", ",", "\n", "noise_type", "=", "noise_type", ",", "\n", "fpv", "=", "config", "[", "\"fpv\"", "]", ",", "\n", "doneAlive", "=", "config", "[", "\"doneAlive\"", "]", ",", "\n", "randomExplor", "=", "True", ",", "\n", "random_target", "=", "config", "[", "\"random_target\"", "]", ",", "\n", "target_pos", "=", "target_pos", ",", "\n", "display_target", "=", "display_target", ",", "\n", ")", "\n", "", "elif", "config", "[", "\"env_name\"", "]", "in", "[", "\"TurtlebotEnv-v0\"", ",", "\"TurtlebotMazeEnv-v0\"", "]", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "\n", "config", "[", "\"env_name\"", "]", ",", "\n", "renders", "=", "config", "[", "\"render\"", "]", ",", "\n", "distractor", "=", "config", "[", "\"distractor\"", "]", ",", "\n", "maxSteps", "=", "config", "[", "\"max_episode_steps\"", "]", ",", "\n", "actionRepeat", "=", "config", "[", "\"actionRepeat\"", "]", ",", "\n", "image_size", "=", "config", "[", "\"image_size\"", "]", ",", "\n", "color", "=", "color", ",", "\n", "seed", "=", "seed", ",", "\n", "noise_type", "=", "noise_type", ",", "\n", "fpv", "=", "config", "[", "\"fpv\"", "]", ",", "\n", "randomExplor", "=", "True", ",", "\n", "wallDistractor", "=", "config", "[", "\"wallDistractor\"", "]", ",", "\n", "random_target", "=", "config", "[", "\"random_target\"", "]", ",", "\n", "target_pos", "=", "target_pos", ",", "\n", "display_target", "=", "display_target", ",", "\n", ")", "\n", "# wrap env", "\n", "", "env", "=", "BulletWrapper", "(", "env", ",", "config", ")", "\n", "\n", "print", "(", "\"Env seed for rank {} is: {}\"", ".", "format", "(", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", ",", "seed", ")", ")", "\n", "if", "config", ":", "\n", "        ", "if", "not", "config", "[", "\"random_target\"", "]", "and", "(", "config", "[", "\"env_name\"", "]", "in", "env_with_goals", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "config", "[", "\"target_pos\"", "]", "=", "env", ".", "target", "\n", "", "else", ":", "\n", "            ", "config", "[", "\"target_pos\"", "]", "=", "None", "\n", "\n", "", "", "demo", "=", "False", "\n", "if", "\"demo\"", "in", "config", ":", "\n", "        ", "demo", "=", "True", "\n", "config", "[", "\"device\"", "]", "=", "\"cpu\"", "\n", "\n", "", "if", "config", "[", "\"method\"", "]", "in", "encoder_methods", "and", "config", "[", "\"cuda\"", "]", ":", "\n", "        ", "config", "[", "\"device\"", "]", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "print", "(", "\"device for StateRunner is: %s\"", "%", "config", "[", "\"device\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "config", "[", "\"device\"", "]", "=", "\"cpu\"", "\n", "\n", "", "config", "[", "\"action_dim\"", "]", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "\n", "# create_runner", "\n", "if", "\"XSRL\"", "in", "config", "[", "\"method\"", "]", ":", "\n", "        ", "runner", "=", "XSRLRunner", "(", "config", ")", "\n", "", "elif", "config", "[", "\"method\"", "]", "in", "[", "\"RAE\"", ",", "\"VAE\"", ",", "\"AE\"", "]", ":", "\n", "        ", "runner", "=", "AERunner", "(", "config", ")", "\n", "", "elif", "config", "[", "\"method\"", "]", "==", "\"random_nn\"", ":", "\n", "        ", "runner", "=", "RandomNetworkRunner", "(", "nc", "*", "config", "[", "\"n_stack\"", "]", ",", "config", ")", "\n", "", "else", ":", "\n", "        ", "runner", "=", "Runner", "(", ")", "\n", "\n", "# last env wrappers", "\n", "", "if", "config", "[", "\"with_images\"", "]", ":", "\n", "        ", "env", "=", "StateWrapper", "(", "env", ",", "runner", ",", "demo", ")", "\n", "", "if", "config", "[", "\"with_goal\"", "]", ":", "\n", "        ", "env", "=", "GoalWrapper", "(", "env", ")", "\n", "\n", "", "if", "config", "[", "\"method\"", "]", "in", "encoder_methods", ":", "\n", "        ", "runner", ".", "train", "(", "training", "=", "False", ")", "\n", "runner", ".", "to_device", "(", "device", "=", "config", "[", "\"device\"", "]", ")", "\n", "\n", "", "return", "env", ",", "config", ",", "runner", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_utils.get_env_params": [[164, 189], ["env.reset", "print", "tuple", "tuple", "tuple", "env.action_space.high[].item", "env.action_space.low[].item"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset"], ["", "def", "get_env_params", "(", "env", ",", "config", ")", ":", "\n", "    ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "if", "config", "[", "\"method\"", "]", "in", "encoder_methods", ":", "\n", "        ", "if", "config", "[", "\"double_state\"", "]", "or", "config", "[", "\"stack_state\"", "]", ":", "\n", "            ", "obs_shape", "=", "config", "[", "\"state_dim\"", "]", "*", "2", "\n", "", "else", ":", "\n", "            ", "obs_shape", "=", "config", "[", "\"state_dim\"", "]", "\n", "", "obs_shape", "=", "tuple", "(", "(", "obs_shape", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "obs_shape", "=", "(", "\n", "obs", "[", "\"observation\"", "]", ".", "shape", "[", "-", "1", "]", "if", "config", "[", "\"with_goal\"", "]", "else", "obs", ".", "shape", "[", "-", "1", "]", "\n", ")", "\n", "obs_shape", "=", "tuple", "(", "(", "obs_shape", ",", ")", ")", "\n", "\n", "", "goal_shape", "=", "obs", "[", "\"desired_goal\"", "]", ".", "shape", "[", "0", "]", "if", "config", "[", "\"with_goal\"", "]", "else", "0", "\n", "action_dim", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "params", "=", "{", "\n", "\"obs\"", ":", "tuple", "(", "obs_shape", ")", ",", "\n", "\"goal\"", ":", "goal_shape", ",", "\n", "\"action\"", ":", "action_dim", ",", "\n", "\"action_max\"", ":", "env", ".", "action_space", ".", "high", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "\"action_min\"", ":", "env", ".", "action_space", ".", "low", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "}", "\n", "print", "(", "\"env params: {}\"", ".", "format", "(", "params", ")", ")", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.get_args": [[14, 214], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"XSRL (eXploratory State Representation Learning)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--evalExplor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"for exploration evaluation during training of 550 max steps\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"1 for debugging\"", ")", "\n", "\"Logs hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--logs_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"logsXSRL\"", ",", "help", "=", "\"path where to save the models\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--method\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"XSRL\"", ",", "\n", "help", "=", "\"Method to use for training representations\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "123456", ",", "help", "=", "\"Random seed to use\"", "\n", ")", "# 123456", "\n", "parser", ".", "add_argument", "(", "\n", "\"--keep_seed\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"only with my_dir\"", "\n", ")", "\n", "\"Loading pretrained models\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--my_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "\"path of the pretrained model to initialize\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--reset_policy\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"only with my_dir: reset policy\"", ",", "\n", ")", "\n", "\"Environment hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env_name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"TurtlebotMazeEnv-v0\"", ",", "\n", "choices", "=", "PYBULLET_ENV", ",", "\n", "help", "=", "\"Environment name\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_envs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "\"Number of envs to train in parallel, corresponds to the batch size\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--randomExplor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Always use a constant reset state\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--maxStep\"", ",", "type", "=", "float", ",", "default", "=", "500", ",", "help", "=", "\"maxStep for training env\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--actionRepeat\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"Number of frame skip, i.e. action repeat\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--noise_type\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "choices", "=", "NOISES", ",", "help", "=", "\"Add some noise\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--flickering\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\">0 for flickering in env rendering, only for XSRL training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--distractor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Add distractor in environment, only for ReacherBulletEnv\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wallDistractor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Whether or not include a stochastic visual distractor, only for TurtlebotMazeEnv\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fpv\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use FPV camera of the robot (only for envs in env_with_fpv)\"", ",", "\n", ")", "\n", "\n", "\"XSRL options\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resetPi\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"resetPi trick for better diversity: train two discovery policies\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dvt_patience\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Max counts before to resetPi\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightInverse\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightLPB\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightEntropy\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--autoEntropyTuning\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"Tune weightEntropy\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init_temperature\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "\"init entropy coefficient for autoEntropyTuning (Temperature parameter \u03b1 determines the relative importance of the entropy term against the reward)\"", ",", "\n", ")", "\n", "\"NN hyper-parameters: (alpha, beta, gamma)\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--activation\"", ",", "\n", "default", "=", "\"leaky_relu\"", ",", "\n", "choices", "=", "[", "\"leaky_relu\"", ",", "\"relu\"", ",", "\"elu\"", ",", "\"tanh\"", ",", "\"tanh_sigmoid\"", "]", ",", "\n", "help", "=", "\"Activation to use\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_init\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"none\"", ",", "\n", "choices", "=", "[", "\"xavier\"", ",", "\"orthogonal\"", ",", "\"random_init\"", ",", "\"random_init_trunc\"", "]", ",", "\n", "help", "=", "\"Method to use for weights initialization\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--alpha_dim\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"alpha output dimension\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta_dim\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"beta output dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--state_dim\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"state dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nb_hidden_gamma\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"128-512-128\"", ",", "\n", "help", "=", "\"number of hidden units per layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nb_hidden_pi\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"128-512-128\"", ",", "\n", "help", "=", "\"number of hidden units per layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cutoff\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "\"Number of layers in mu_tail and log_sig_tail\"", ",", "\n", ")", "\n", "\"SGD hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pi_batchSize\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n", "help", "=", "\"pi_batchSize for updating the discovery policy and inverse/LPB-target models\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pi_updateInt\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "\"maxStep for training env\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optimizer\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"adam\"", ",", "\n", "choices", "=", "[", "\"adam\"", ",", "\"amsgrad\"", ",", "\"adamW\"", "]", ",", "\n", "help", "=", "\"for automatic weights regularization\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"Learning rate for training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_explor\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"Learning rate for training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_alpha\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"Learning rate for training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_epochs\"", ",", "type", "=", "float", ",", "default", "=", "1e6", ",", "help", "=", "\"Maximum number of epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--patience\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "40", ",", "\n", "help", "=", "\"Number of epochs before early_stopping\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--backprop_per_eval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2048", ",", "\n", "help", "=", "\"Number of iterations per evaluation\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.assert_args_XSRL": [[216, 253], ["SRL4RL.utils.utilsEnv.assert_args_envs", "arguments.is_with_discoveryPi", "max", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.assert_args_envs", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.is_with_discoveryPi"], ["", "def", "assert_args_XSRL", "(", "args", ")", ":", "\n", "    ", "assert_args_envs", "(", "args", ")", "\n", "\n", "if", "args", ".", "reset_policy", ":", "\n", "        ", "assert", "args", ".", "my_dir", ",", "\"reset_policy without --my_dir\"", "\n", "", "if", "args", ".", "keep_seed", ":", "\n", "        ", "assert", "args", ".", "my_dir", "\n", "\n", "", "args", ".", "nEnv_perPi", "=", "args", ".", "num_envs", "\n", "\n", "with_discoveryPi", "=", "is_with_discoveryPi", "(", "args", ".", "__dict__", ")", "\n", "if", "with_discoveryPi", ":", "\n", "        ", "if", "args", ".", "resetPi", ":", "\n", "            ", "args", ".", "nEnv_perPi", "=", "args", ".", "num_envs", "//", "2", "\n", "", "assert", "(", "\n", "args", ".", "pi_batchSize", "%", "args", ".", "nEnv_perPi", "==", "0", "\n", ")", ",", "\"need nPi_samples over each num_envs to have pi_batchSize\"", "\n", "args", ".", "nPi_samples", "=", "args", ".", "pi_batchSize", "//", "args", ".", "nEnv_perPi", "\n", "args", ".", "pi_updateInt", "=", "max", "(", "args", ".", "nPi_samples", ",", "args", ".", "pi_updateInt", ")", "\n", "assert", "(", "\n", "args", ".", "backprop_per_eval", "%", "args", ".", "pi_updateInt", "==", "0", "\n", ")", ",", "\"there are pi_backprop_per_eval per epoch\"", "\n", "args", ".", "pi_backprop_per_eval", "=", "args", ".", "backprop_per_eval", "//", "args", ".", "pi_updateInt", "\n", "assert", "args", ".", "pi_updateInt", "%", "args", ".", "nPi_samples", "==", "0", ",", "(", "\n", "\"there are nPi_samples per pi_updateInt\"", "\n", "\"there are pi_sampling steps between each sample\"", "\n", ")", "\n", "args", ".", "pi_sampling", "=", "args", ".", "pi_updateInt", "//", "args", ".", "nPi_samples", "\n", "print", "(", "\"args.pi_updateInt\"", ",", "args", ".", "pi_updateInt", ")", "\n", "print", "(", "\"args.nPi_samples\"", ",", "args", ".", "nPi_samples", ")", "\n", "print", "(", "\"args.pi_sampling\"", ",", "args", ".", "pi_sampling", ")", "\n", "print", "(", "\"args.pi_backprop_per_eval\"", ",", "args", ".", "pi_backprop_per_eval", ")", "\n", "", "else", ":", "\n", "        ", "assert", "not", "args", ".", "resetPi", "\n", "assert", "not", "args", ".", "reset_policy", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.update_args_XSRL": [[255, 268], ["SRL4RL.utils.utilsEnv.update_args_envs"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_args_envs"], ["", "def", "update_args_XSRL", "(", "args", ")", ":", "\n", "    ", "args", "=", "update_args_envs", "(", "args", ")", "\n", "\n", "if", "args", ".", "maxStep", ">", "9e4", ":", "\n", "        ", "args", ".", "maxStep", "=", "np", ".", "inf", "\n", "", "args", ".", "inverse", "=", "args", ".", "weightInverse", ">", "0", "\n", "args", ".", "LPB", "=", "args", ".", "weightLPB", ">", "0", "\n", "args", ".", "entropy", "=", "args", ".", "weightEntropy", ">", "0", "or", "args", ".", "autoEntropyTuning", "\n", "\n", "if", "args", ".", "env_name", "==", "\"TurtlebotEnv-v0\"", ":", "\n", "        ", "args", ".", "nb_hidden_pi", "=", "\"256\"", "\n", "args", ".", "cutoff", "=", "1", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.is_with_discoveryPi": [[270, 273], ["None"], "function", ["None"], ["", "def", "is_with_discoveryPi", "(", "config", ")", ":", "\n", "    ", "with_discoveryPi", "=", "config", "[", "\"inverse\"", "]", "or", "config", "[", "\"LPB\"", "]", "or", "config", "[", "\"entropy\"", "]", "\n", "return", "with_discoveryPi", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.giveXSRL_name": [[275, 326], ["arguments.is_with_discoveryPi"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.is_with_discoveryPi"], ["", "def", "giveXSRL_name", "(", "config", ")", ":", "\n", "    ", "with_discoveryPi", "=", "is_with_discoveryPi", "(", "config", ")", "\n", "method_params", "=", "\"\"", "\n", "method_params", "+=", "\"randomExplor\"", "if", "config", "[", "\"randomExplor\"", "]", "else", "\"\"", "\n", "method_params", "+=", "(", "\n", "\"[{}] \"", ".", "format", "(", "config", "[", "\"noise_type\"", "]", ")", "if", "config", "[", "\"noise_type\"", "]", "!=", "\"none\"", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"[flickering-{}] \"", ".", "format", "(", "config", "[", "\"flickering\"", "]", ")", "\n", "if", "config", "[", "\"flickering\"", "]", ">", "0", "\n", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "\"dim {:02d}, maxStep {}, num envs {}, \"", ".", "format", "(", "\n", "config", "[", "\"state_dim\"", "]", ",", "config", "[", "\"maxStep\"", "]", ",", "config", "[", "\"num_envs\"", "]", "\n", ")", "\n", "if", "with_discoveryPi", ":", "\n", "        ", "method_params", "+=", "\"batchPi {}, pi_updateInt {}, \"", ".", "format", "(", "\n", "config", "[", "\"pi_batchSize\"", "]", ",", "config", "[", "\"pi_updateInt\"", "]", "\n", ")", "\n", "", "method_params", "+=", "(", "\n", "\"dvt_patience-{}, \"", ".", "format", "(", "config", "[", "\"dvt_patience\"", "]", ")", "if", "config", "[", "\"resetPi\"", "]", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"wInverse-{}, \"", ".", "format", "(", "config", "[", "\"weightInverse\"", "]", ")", "\n", "if", "config", "[", "\"weightInverse\"", "]", ">", "0", "\n", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"wLPB-{}, \"", ".", "format", "(", "config", "[", "\"weightLPB\"", "]", ")", "if", "config", "[", "\"weightLPB\"", "]", ">", "0", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"optim-{}, \"", ".", "format", "(", "config", "[", "\"optimizer\"", "]", ")", "\n", "if", "config", "[", "\"optimizer\"", "]", "!=", "\"adam\"", "\n", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"hidden-{}, \"", ".", "format", "(", "config", "[", "\"nb_hidden_gamma\"", "]", ")", "\n", "if", "config", "[", "\"nb_hidden_gamma\"", "]", "!=", "\"128-512-128\"", "\n", "else", "\"\"", "\n", ")", "\n", "if", "with_discoveryPi", ":", "\n", "        ", "if", "config", "[", "\"autoEntropyTuning\"", "]", ":", "\n", "            ", "method_params", "+=", "\"autoEnt, \"", "\n", "", "else", ":", "\n", "            ", "method_params", "+=", "(", "\n", "\"wEnt-{}, \"", ".", "format", "(", "config", "[", "\"weightEntropy\"", "]", ")", "\n", "if", "config", "[", "\"weightEntropy\"", "]", ">", "0", "\n", "else", "\"\"", "\n", ")", "\n", "", "", "method_params", "=", "method_params", "[", ":", "-", "2", "]", "\n", "return", "method_params", "\n", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.__init__": [[706, 715], ["SRL4RL.rl.utils.runner.StateRunner.__init__", "torch.load", "utils.XSRLRunner.initState", "os.path.join", "utils.XSRLRunner.alpha.eval", "utils.XSRLRunner.beta.eval", "utils.XSRLRunner.gamma.eval", "torch.device"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.initState"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.resetState": [[716, 719], ["utils.XSRLRunner.initState().to", "numpy.zeros", "utils.XSRLRunner.initState"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.initState"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.update_state": [[720, 735], ["torch.no_grad", "SRL4RL.utils.utilsEnv.add_noise", "utils.XSRLRunner.alpha().to", "utils.XSRLRunner.beta", "torch.cat", "utils.XSRLRunner.gamma", "[].transpose", "torch.cat", "utils.XSRLRunner.alpha", "SRL4RL.utils.utilsEnv.add_noise.to", "np2torch().unsqueeze", "SRL4RL.utils.nn_torch.pytorch2numpy", "np2torch"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.add_noise", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.save_state_model": [[736, 739], ["print", "SRL4RL.utils.nn_torch.save_model"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.save_model"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.train": [[740, 744], ["utils.XSRLRunner.alpha.train", "utils.XSRLRunner.beta.train", "utils.XSRLRunner.gamma.train"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRLRunner.to_device": [[745, 750], ["torch.device", "utils.XSRLRunner.alpha.to", "utils.XSRLRunner.beta.to", "utils.XSRLRunner.gamma.to"], "methods", ["None"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.omega_last_layer": [[26, 28], ["torch.sigmoid"], "function", ["None"], ["return", "[", "hidden", "]", "if", "hidden", ">", "0", "else", "[", "]", "\n", "", "except", "Exception", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.sampleNormal": [[30, 33], ["torch.randn_like"], "function", ["None"], ["\n", "\n", "", "", "", "def", "giveSRL_name", "(", "config", ")", ":", "\n", "    ", "method_params", "=", "\"dim {:02d}\"", ".", "format", "(", "config", "[", "\"state_dim\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.resetState": [[35, 45], ["torch.device", "numpy.random.normal", "utils.initState", "len", "np2torch"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.initState"], ["        ", "method_params", "+=", "\", maxStep {}, num envs {}\"", ".", "format", "(", "\n", "config", "[", "\"maxStep\"", "]", ",", "config", "[", "\"num_envs\"", "]", "\n", ")", "\n", "method_params", "+=", "\" randomExplor\"", "if", "config", "[", "\"randomExplor\"", "]", "else", "\"\"", "\n", "", "return", "method_params", "\n", "\n", "\n", "", "def", "give_name", "(", "config", ")", ":", "\n", "    ", "model_name", "=", "config", "[", "\"method\"", "]", "\n", "factor", "=", "1", "\n", "if", "\"XSRL\"", "in", "model_name", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.init_action": [[47, 49], ["numpy.zeros"], "function", ["None"], ["if", "\"wEnt\"", "in", "config", "[", "\"SRL_name\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-MaxEnt\"", "\n", "", "elif", "\"wLPB\"", "not", "in", "config", "[", "\"SRL_name\"", "]", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.initState": [[51, 63], ["torch.device", "torch.no_grad", "utils.init_action", "alpha", "beta", "torch.cat", "SRL4RL.utils.nn_torch.pytorch2numpy", "torch.cat", "gamma", "np2torch", "np2torch"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.init_action", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy"], ["", "", "elif", "model_name", "==", "\"ground_truth\"", ":", "\n", "        ", "model_name", "=", "\"ground truth\"", "\n", "", "elif", "model_name", "==", "\"position\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"pure_noise\"", ":", "\n", "        ", "model_name", "=", "\"pure noise\"", "\n", "", "elif", "model_name", "==", "\"openLoop\"", ":", "\n", "        ", "model_name", "=", "\"open-loop\"", "\n", "", "elif", "model_name", "==", "\"random_nn\"", ":", "\n", "        ", "model_name", "=", "\"random network\"", "\n", "", "elif", "model_name", "==", "\"RAE\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"VAE\"", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.update_target_network": [[65, 74], ["source.to", "torch.no_grad", "zip", "source.to", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "elif", "model_name", "==", "\"AE\"", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "\"n_stack\"", "in", "config", "and", "config", "[", "\"method\"", "]", "not", "in", "state_baselines", ":", "\n", "        ", "if", "config", "[", "\"n_stack\"", "]", "==", "1", ":", "\n", "            ", "model_name", "+=", "\" (w/o stack)\"", "\n", "", "elif", "config", "[", "\"n_stack\"", "]", ">", "1", ":", "\n", "            ", "model_name", "+=", "\" (w/ stack)\"", "\n", "", "", "if", "\"agent\"", "in", "config", ":", "# 'RL_name'", "\n", "        ", "model_name", "=", "\"SAC+\"", "+", "model_name", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.normalizePi": [[76, 95], ["torch.tanh", "torch.log().sum", "torch.tanh", "torch.log", "torch.tanh.pow"], "function", ["None"], ["        ", "state_dim", "=", "config", "[", "\"env_params\"", "]", "[", "\"obs\"", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "state_dim", "=", "config", "[", "\"state_dim\"", "]", "\n", "", "if", "config", "[", "\"method\"", "]", "in", "encoder_methods", ":", "\n", "        ", "if", "config", "[", "\"stack_state\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-stack\"", "\n", "", "if", "\"randomExplor\"", "in", "config", "[", "\"SRL_name\"", "]", "and", "\"(w/o stack)\"", "not", "in", "model_name", ":", "\n", "            ", "model_name", "+=", "\"-explor\"", "\n", "", "if", "config", "[", "\"wallDistractor\"", "]", ":", "\n", "            ", "model_name", "+=", "\" (w/ distractor)\"", "\n", "", "", "if", "\"(w/ distractor)\"", "not", "in", "model_name", "and", "\"stack\"", "not", "in", "model_name", ":", "\n", "        ", "model_name", "+=", "(", "\n", "\" (dim {})\"", ".", "format", "(", "state_dim", ")", "\n", "if", "model_name", "==", "\"ground truth\"", "\n", "else", "\" (dim %1d)\"", "%", "(", "state_dim", "*", "factor", ")", "\n", ")", "\n", "", "return", "model_name", "\n", "\n", "\n", "", "class", "appendabledict", "(", "defaultdict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.gaussian_logprob": [[97, 101], ["noise.size", "numpy.log", "noise.pow"], "function", ["None"], ["        ", "self", ".", "type_", "=", "type_", "\n", "super", "(", ")", ".", "__init__", "(", "type_", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "subslice", "(", "self", ",", "slice_", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.policy_last_layer_op": [[103, 124], ["pi_head", "mu_tail", "log_sig_tail", "torch.clamp", "torch.clamp.exp", "utils.sampleNormal", "utils.gaussian_logprob", "utils.normalizePi", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "LogPi_jacobian.detach", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan", "torch.isnan", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.sampleNormal", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.gaussian_logprob", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.normalizePi"], ["\n", "sliced_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "sliced_dict", "[", "k", "]", "=", "v", "[", "slice_", "]", "\n", "", "return", "sliced_dict", "\n", "\n", "", "def", "append_update", "(", "self", ",", "other_dict", ")", ":", "\n", "        ", "\"appends current dict's values with values from other_dict\"", "\n", "for", "k", ",", "v", "in", "other_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__getitem__", "(", "k", ")", ".", "append", "(", "v", ")", "\n", "\n", "\n", "", "", "", "class", "EarlyStopping", "(", "object", ")", ":", "\n", "    ", "\"\"\"Early stops the training if validation loss doesn't improve after a given patience.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.policy_last_layer": [[126, 160], ["utils.policy_last_layer_op", "utils.policy_last_layer_op", "log_sig.detach", "mu.detach", "LogPi_jacobian.detach", "log_sig.detach", "mu.detach", "LogPi_jacobian.detach"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.policy_last_layer_op", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.policy_last_layer_op"], ["def", "__init__", "(", "\n", "self", ",", "patience", "=", "7", ",", "name", "=", "\"\"", ",", "min_delta", "=", "0", ",", "baseline", "=", "-", "np", ".", "inf", ",", "min_Nepochs", "=", "0", "\n", ")", ":", "# save_dir=\".models\",", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            min_delta (float): Minimum percentage in the monitored quantity to qualify as an improvement,\n                                i.e. an absolute change of less than min_delta, will count as no improvement.\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "np", ".", "inf", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_acc_max", "=", "0.0", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "baseline", "=", "baseline", "\n", "self", ".", "min_Nepochs", "=", "min_Nepochs", "\n", "\n", "", "def", "__call__", "(", "self", ",", "val_acc", ",", "Nepochs", "=", "1", ",", "model", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "score", "=", "val_acc", "*", "(", "1", "-", "np", ".", "sign", "(", "val_acc", ")", "*", "self", ".", "min_delta", ")", "\n", "if", "score", "<=", "self", ".", "best_score", ":", "\n", "            ", "if", "Nepochs", "<=", "self", ".", "min_Nepochs", ":", "\n", "                ", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience} | Nepochs: [{Nepochs}/{self.min_Nepochs}]\"", "\n", ")", "\n", "", "elif", "val_acc", "<", "self", ".", "baseline", ":", "\n", "                ", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience} | score: {-val_acc}>{-self.baseline}\"", "\n", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "best_score", "==", "np", ".", "inf", ":", "\n", "                    ", "self", ".", "best_score", "=", "val_acc", "\n", "", "self", ".", "counter", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.XSRL_nextObsEval": [[162, 421], ["os.path.join", "SRL4RL.utils.utils.loadPickle", "gc.collect", "torch.device", "print", "os.path.join", "numpy.zeros", "enumerate", "video_out.release", "cv2.destroyAllWindows", "print", "SRL4RL.utils.utilsPlot.plotEmbedding", "SRL4RL.utils.utilsPlot.plotEmbedding", "gc.collect", "os.path.join", "SRL4RL.utils.utils.createFolder", "cv2.VideoWriter", "cv2.VideoWriter", "SRL4RL.utils.utilsEnv.reset_stack", "SRL4RL.utils.utilsEnv.reset_stack", "torch.no_grad", "utils.resetState", "len", "zip", "measures.copy", "cv2.VideoWriter_fourcc", "cv2.VideoWriter_fourcc", "SRL4RL.utils.nn_torch.numpy2pytorch().unsqueeze", "SRL4RL.utils.utilsEnv.update_video", "SRL4RL.utils.nn_torch.pytorch2numpy", "SRL4RL.utils.utilsEnv.reset_stack.copy", "torch.nn.MSELoss", "len", "torch.no_grad", "alpha", "beta", "torch.cat", "gamma", "utils.omega_last_layer", "SRL4RL.utils.nn_torch.pytorch2numpy", "type", "SRL4RL.utils.utilsPlot.plot_xHat", "SRL4RL.utils.utilsEnv.reset_stack.copy", "int", "int", "SRL4RL.utils.nn_torch.numpy2pytorch", "np2torch", "torch.cat", "omega", "Loss_obs", "range", "SRL4RL.utils.utilsPlot.plot_xHat", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "np2torch", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsPlot.plot_xHat", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsPlot.plot_xHat", "SRL4RL.utils.utilsEnv.NCWH2WHC", "np2torch", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.NCWH2WHC", "os.path.join"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.loadPickle", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotEmbedding", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotEmbedding", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.createFolder", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.reset_stack", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.reset_stack", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.resetState", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.omega_last_layer", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat"], ["f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience}\"", "\n", ")", "\n", "", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "print", "(", "f\"  {self.name} has stopped\"", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "val_acc", "\n", "self", ".", "counter", "=", "0", "\n", "return", "\"best\"", "\n", "\n", "", "", "def", "reset", "(", "self", ",", "patience", ")", ":", "\n", "        ", "self", ".", "counter", "=", "0", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "best_score", "=", "-", "np", ".", "inf", "\n", "self", ".", "patience", "=", "patience", "\n", "\n", "\n", "", "", "def", "saveJson", "(", "config", ",", "save_dir", ",", "name", "=", "\"exp_config.json\"", ")", ":", "\n", "    ", "\"Save the experiment config to a json file\"", "\n", "if", "name", "[", "-", "5", ":", "]", "!=", "\".json\"", ":", "\n", "        ", "name", "+=", "\".json\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "outfile", ",", "sort_keys", "=", "True", ")", "\n", "\n", "\n", "", "", "def", "loadJson", "(", "curr_path", ",", "name", "=", "\"exp_config\"", ")", ":", "\n", "    ", "if", "name", "[", "-", "5", ":", "]", "!=", "\".json\"", ":", "\n", "        ", "name", "+=", "\".json\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "curr_path", ",", "name", ")", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "read_file", ")", "\n", "\n", "\n", "", "", "def", "saveConfig", "(", "\n", "config", ",", "print_config", "=", "False", ",", "evaluate", "=", "False", ",", "save_dir", "=", "None", ",", "name", "=", "\"exp_config\"", "\n", ")", ":", "\n", "    ", "\"Save the experiment config to a pkl file\"", "\n", "if", "name", "[", "-", "4", ":", "]", "!=", "\".pkl\"", ":", "\n", "        ", "name", "+=", "\".pkl\"", "\n", "", "if", "not", "save_dir", ":", "\n", "        ", "save_dir", "=", "config", "[", "\"log_folder\"", "]", "\n", "", "if", "print_config", ":", "\n", "        ", "pprint", "(", "config", ")", "\n", "print", "(", "\"Saved config to log folder: {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "# Sort by keys", "\n", "", "config", "=", "OrderedDict", "(", "sorted", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "config_path", "=", "\"{}/{}\"", ".", "format", "(", "save_dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_path", ")", "and", "evaluate", ":", "\n", "        ", "config_path", "=", "\"{}/{}_evaluate\"", ".", "format", "(", "save_dir", ",", "name", ")", "\n", "\n", "", "with", "open", "(", "config_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "config", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "\n", "", "", "def", "loadConfig", "(", "config_path", ",", "name", "=", "\"exp_config\"", ")", ":", "\n", "    ", "if", "name", "[", "-", "4", ":", "]", "!=", "\".pkl\"", ":", "\n", "        ", "name", "+=", "\".pkl\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config_path", ",", "name", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "", "def", "savePickle", "(", "data_dict", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data_dict", ",", "f", ")", "\n", "\n", "\n", "", "", "def", "loadPickle", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "", "def", "float2string", "(", "value", ",", "nfloat", "=", "3", ")", ":", "\n", "    ", "float2string", "=", "\"{:.%sf}\"", "%", "nfloat", "\n", "return", "float2string", ".", "format", "(", "value", ")", "\n", "\n", "\n", "", "def", "update_text", "(", "data_list", ",", "save_path", ",", "text", "=", "False", ",", "replace", "=", "False", ",", "array", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "save_path", ")", "and", "not", "replace", ":", "\n", "        ", "assert", "not", "array", "\n", "mode", "=", "\"a\"", "\n", "with", "open", "(", "save_path", ",", "mode", ")", "as", "file_object", ":", "\n", "            ", "if", "text", ":", "\n", "                ", "file_object", ".", "write", "(", "\"\\n\"", ")", "\n", "file_object", ".", "write", "(", "data_list", ")", "\n", "", "else", ":", "\n", "                ", "file_object", ".", "write", "(", "\"\\n\"", ")", "\n", "file_object", ".", "write", "(", "\"\\n\"", ".", "join", "(", "map", "(", "str", ",", "data_list", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "array", ":", "\n", "            ", "if", "\".txt\"", "==", "save_path", "[", "-", "4", ":", "]", ":", "\n", "                ", "save_path", "=", "save_path", "[", ":", "-", "4", "]", "\n", "", "np", ".", "save", "(", "save_path", ",", "data_list", ")", "\n", "", "else", ":", "\n", "            ", "mode", "=", "\"w\"", "\n", "with", "open", "(", "save_path", ",", "mode", ")", "as", "file_object", ":", "\n", "                ", "if", "text", ":", "\n", "                    ", "file_object", ".", "write", "(", "data_list", ")", "\n", "", "else", ":", "\n", "                    ", "file_object", ".", "write", "(", "\"\\n\"", ".", "join", "(", "map", "(", "str", ",", "data_list", ")", ")", ")", "\n", "\n", "\n", "", "", "", "", "", "def", "createFolder", "(", "path_to_folder", ",", "exist_msg", ")", ":", "\n", "    ", "\"\"\"\n    Try to create a folder (and parents if needed)\n    print a message in case the folder already exist\n    :param path_to_folder: (str)\n    :param exist_msg:\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path_to_folder", ")", "\n", "print", "(", "\"created folder: {}\"", ".", "format", "(", "path_to_folder", ")", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "exist_msg", ":", "\n", "            ", "print", "(", "exist_msg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.piExplore2obs": [[423, 599], ["torch.device", "SRL4RL.xsrl.arguments.is_with_discoveryPi", "envExplor.reset", "os.path.join", "print", "range", "video_out.release", "cv2.destroyAllWindows", "gc.collect", "os.path.join", "SRL4RL.utils.utils.createFolder", "os.path.join", "SRL4RL.utils.utils.createFolder", "SRL4RL.utils.utilsEnv.reset_stack", "SRL4RL.utils.utilsEnv.reset_stack", "torch.no_grad", "utils.resetState", "cv2.VideoWriter", "cv2.VideoWriter", "range", "SRL4RL.utils.utilsEnv.update_video", "SRL4RL.utils.utilsEnv.reset_stack.copy", "SRL4RL.utils.nn_torch.pytorch2numpy", "cv2.VideoWriter_fourcc", "cv2.VideoWriter_fourcc", "envExplor.step", "torch.no_grad", "alpha", "beta", "torch.cat", "gamma", "utils.omega_last_layer", "SRL4RL.utils.utilsPlot.plot_xHat", "SRL4RL.utils.utilsEnv.render_env", "cv2.imwrite", "SRL4RL.utils.nn_torch.pytorch2numpy", "envExplor.action_space.sample", "SRL4RL.utils.nn_torch.numpy2pytorch().unsqueeze", "envExplor.bump_detection", "np2torch", "torch.cat", "omega", "SRL4RL.utils.utilsEnv.render_env", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "im_high_render[].astype", "int", "int", "torch.no_grad", "policy_last_layer().to", "policy_last_layer().to.squeeze", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsEnv.NCWH2WHC", "SRL4RL.utils.nn_torch.numpy2pytorch", "np2torch", "utils.policy_last_layer", "np2torch"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.is_with_discoveryPi", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.createFolder", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.createFolder", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.reset_stack", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.reset_stack", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.resetState", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.omega_last_layer", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.render_env", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.render_env", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.policy_last_layer"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.getPiExplore": [[601, 703], ["torch.device", "SRL4RL.xsrl.arguments.is_with_discoveryPi", "envExplor.reset", "numpy.zeros", "envExplor.object.copy", "print", "range", "gc.collect", "torch.no_grad", "utils.resetState", "envExplor.step", "envExplor.object.copy", "SRL4RL.utils.nn_torch.pytorch2numpy", "SRL4RL.utils.utilsPlot.visualizeMazeExplor", "torch.no_grad", "alpha", "beta", "torch.cat", "gamma", "SRL4RL.utils.nn_torch.pytorch2numpy", "envExplor.action_space.sample", "SRL4RL.utils.nn_torch.numpy2pytorch().unsqueeze", "envExplor.bump_detection", "np2torch", "torch.cat", "torch.no_grad", "policy_last_layer().to", "policy_last_layer().to.squeeze", "robot_pos[].copy", "SRL4RL.utils.nn_torch.numpy2pytorch", "np2torch", "utils.policy_last_layer", "np2torch"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.arguments.is_with_discoveryPi", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.resetState", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.visualizeMazeExplor", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.xsrl.utils.policy_last_layer"], []], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.arguments.get_args": [[20, 147], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"for exploration evaluation during training of 550 max steps\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"1 for debugging\"", ")", "\n", "\"Logs hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--logs_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"logsXSRL\"", ",", "help", "=", "\"path where to save the models\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--method\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"XSRL\"", ",", "\n", "help", "=", "\"Method to use for training representations\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "123456", ",", "help", "=", "\"Random seed to use\"", "\n", ")", "# 123456", "\n", "parser", ".", "add_argument", "(", "\n", "\"--keep_seed\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"only with my_dir\"", "\n", ")", "\n", "\"Loading pretrained models\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--my_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "\"path of the pretrained model to initialize\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--reset_policy\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"only with my_dir: reset policy\"", ",", "\n", ")", "\n", "\"Environment hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env_name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"TurtlebotMazeEnv-v0\"", ",", "\n", "choices", "=", "PYBULLET_ENV", ",", "\n", "help", "=", "\"Environment name\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_envs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "\"Number of envs to train in parallel, corresponds to the batch size\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--randomExplor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Always use a constant reset state\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--maxStep\"", ",", "type", "=", "float", ",", "default", "=", "500", ",", "help", "=", "\"maxStep for training env\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--actionRepeat\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"Number of frame skip, i.e. action repeat\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--noise_type\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "choices", "=", "NOISES", ",", "help", "=", "\"Add some noise\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--flickering\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\">0 for flickering in env rendering, only for XSRL training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--distractor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Add distractor in environment, only for ReacherBulletEnv\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wallDistractor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Whether or not include a stochastic visual distractor, only for TurtlebotMazeEnv\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fpv\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use FPV camera of the robot (only for envs in env_with_fpv)\"", ",", "\n", ")", "\n", "\n", "\"XSRL options\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resetPi\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"resetPi trick for better diversity: train two discovery policies\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dvt_patience\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Max counts before to resetPi\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightInverse\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightLPB\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightEntropy\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--autoEntropyTuning\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"Tune weightEntropy\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init_temperature\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "\"init entropy coefficient for autoEntropyTuning (Temperature parameter \u03b1 determines the relative importance of the entropy term against the reward)\"", ",", "\n", ")", "\n", "\"NN hyper-parameters: (alpha, beta, gamma)\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--activation\"", ",", "\n", "default", "=", "\"leaky_relu\"", ",", "\n", "choices", "=", "[", "\"leaky_relu\"", ",", "\"relu\"", ",", "\"elu\"", ",", "\"tanh\"", ",", "\"tanh_sigmoid\"", "]", ",", "\n", "help", "=", "\"Activation to use\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_init\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"none\"", ",", "\n", "choices", "=", "[", "\"xavier\"", ",", "\"orthogonal\"", ",", "\"random_init\"", ",", "\"random_init_trunc\"", "]", ",", "\n", "help", "=", "\"Method to use for weights initialization\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.arguments.assert_args_AE": [[149, 151], ["SRL4RL.utils.utilsEnv.assert_args_envs"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.assert_args_envs"], [")", "\n", "parser", ".", "add_argument", "(", "\"--beta_dim\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"beta output dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--state_dim\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"state dimension\"", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.arguments.update_args_AE": [[153, 174], ["SRL4RL.utils.utilsEnv.update_args_envs"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_args_envs"], ["\"--nb_hidden_gamma\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"128-512-128\"", ",", "\n", "help", "=", "\"number of hidden units per layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nb_hidden_pi\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"128-512-128\"", ",", "\n", "help", "=", "\"number of hidden units per layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cutoff\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "\"Number of layers in mu_tail and log_sig_tail\"", ",", "\n", ")", "\n", "\"SGD hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pi_batchSize\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.AERunner.__init__": [[251, 263], ["SRL4RL.rl.utils.runner.StateRunner.__init__", "print", "torch.load", "utils.AERunner.encoder.eval", "utils.AERunner.encoder.parameters", "os.path.join", "torch.device"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["            ", "if", "\".txt\"", "==", "save_path", "[", "-", "4", ":", "]", ":", "\n", "                ", "save_path", "=", "save_path", "[", ":", "-", "4", "]", "\n", "", "np", ".", "save", "(", "save_path", ",", "data_list", ")", "\n", "", "else", ":", "\n", "            ", "mode", "=", "\"w\"", "\n", "with", "open", "(", "save_path", ",", "mode", ")", "as", "file_object", ":", "\n", "                ", "if", "text", ":", "\n", "                    ", "file_object", ".", "write", "(", "data_list", ")", "\n", "", "else", ":", "\n", "                    ", "file_object", ".", "write", "(", "\"\\n\"", ".", "join", "(", "map", "(", "str", ",", "data_list", ")", ")", ")", "\n", "\n", "\n", "", "", "", "", "", "def", "createFolder", "(", "path_to_folder", ",", "exist_msg", ")", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.AERunner.save_state_model": [[264, 267], ["print", "SRL4RL.utils.nn_torch.save_model"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.save_model"], ["    "]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.AERunner.train": [[268, 270], ["utils.AERunner.encoder.train"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train"], ["\n", "try", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.AERunner.to_device": [[271, 274], ["torch.device", "utils.AERunner.encoder.to"], "methods", ["None"], ["        ", "os", ".", "makedirs", "(", "path_to_folder", ")", "\n", "print", "(", "\"created folder: {}\"", ".", "format", "(", "path_to_folder", ")", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "exist_msg", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.decoder_last_layer": [[18, 20], ["torch.sigmoid"], "function", ["None"], ["\n", "\n", "", "def", "get_hidden", "(", "nb_hidden", ")", ":", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.reparametrize": [[22, 26], ["torch.exp", "torch.randn_like"], "function", ["None"], ["        ", "return", "[", "int", "(", "i", ")", "for", "i", "in", "nb_hidden", ".", "split", "(", "\"-\"", ")", "]", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "hidden", "=", "int", "(", "nb_hidden", ")", "\n", "return", "[", "hidden", "]", "if", "hidden", ">", "0", "else", "[", "]", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.AE_nextObsEval": [[28, 248], ["torch.device", "os.path.join", "SRL4RL.utils.utils.loadPickle", "gc.collect", "print", "os.path.join", "numpy.zeros", "enumerate", "video_out.release", "cv2.destroyAllWindows", "print", "SRL4RL.utils.utilsPlot.plotEmbedding", "SRL4RL.utils.utilsPlot.plotEmbedding", "gc.collect", "cv2.VideoWriter", "cv2.VideoWriter", "list", "numpy.zeros", "len", "len", "measures.copy", "cv2.VideoWriter_fourcc", "cv2.VideoWriter_fourcc", "range", "SRL4RL.utils.utilsEnv.update_video", "torch.nn.MSELoss", "torch.no_grad", "encoder", "utils.decoder_last_layer", "SRL4RL.utils.nn_torch.pytorch2numpy", "type", "SRL4RL.utils.nn_torch.pytorch2numpy", "int", "int", "np2torch().unsqueeze", "decoder", "loss_fn", "range", "SRL4RL.utils.utilsPlot.plot_xHat", "np2torch().unsqueeze", "SRL4RL.utils.utilsEnv.CWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsPlot.plot_xHat", "SRL4RL.utils.utilsEnv.CWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsPlot.plot_xHat", "np2torch", "SRL4RL.utils.utilsEnv.CWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "SRL4RL.utils.utilsEnv.CWH2WHC", "SRL4RL.utils.utilsEnv.tensor2image", "np2torch", "os.path.join"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.loadPickle", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotEmbedding", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotEmbedding", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.decoder_last_layer", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plot_xHat"], ["            ", "traceback", ".", "print_exc", "(", ")", "\n", "return", "[", "]", "\n", "\n", "\n", "", "", "", "def", "giveSRL_name", "(", "config", ")", ":", "\n", "    ", "method_params", "=", "\"dim {:02d}\"", ".", "format", "(", "config", "[", "\"state_dim\"", "]", ")", "\n", "if", "config", "[", "\"method\"", "]", "in", "learning_methods", ":", "\n", "        ", "method_params", "+=", "\", maxStep {}, num envs {}\"", ".", "format", "(", "\n", "config", "[", "\"maxStep\"", "]", ",", "config", "[", "\"num_envs\"", "]", "\n", ")", "\n", "method_params", "+=", "\" randomExplor\"", "if", "config", "[", "\"randomExplor\"", "]", "else", "\"\"", "\n", "", "return", "method_params", "\n", "\n", "\n", "", "def", "give_name", "(", "config", ")", ":", "\n", "    ", "model_name", "=", "config", "[", "\"method\"", "]", "\n", "factor", "=", "1", "\n", "if", "\"XSRL\"", "in", "model_name", ":", "\n", "        ", "model_name", "=", "\"XSRL\"", "\n", "if", "\"wEnt\"", "in", "config", "[", "\"SRL_name\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-MaxEnt\"", "\n", "", "elif", "\"wLPB\"", "not", "in", "config", "[", "\"SRL_name\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-random\"", "\n", "", "", "elif", "model_name", "==", "\"ground_truth\"", ":", "\n", "        ", "model_name", "=", "\"ground truth\"", "\n", "", "elif", "model_name", "==", "\"position\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"pure_noise\"", ":", "\n", "        ", "model_name", "=", "\"pure noise\"", "\n", "", "elif", "model_name", "==", "\"openLoop\"", ":", "\n", "        ", "model_name", "=", "\"open-loop\"", "\n", "", "elif", "model_name", "==", "\"random_nn\"", ":", "\n", "        ", "model_name", "=", "\"random network\"", "\n", "", "elif", "model_name", "==", "\"RAE\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"VAE\"", ":", "\n", "        ", "pass", "\n", "", "elif", "model_name", "==", "\"AE\"", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "\"n_stack\"", "in", "config", "and", "config", "[", "\"method\"", "]", "not", "in", "state_baselines", ":", "\n", "        ", "if", "config", "[", "\"n_stack\"", "]", "==", "1", ":", "\n", "            ", "model_name", "+=", "\" (w/o stack)\"", "\n", "", "elif", "config", "[", "\"n_stack\"", "]", ">", "1", ":", "\n", "            ", "model_name", "+=", "\" (w/ stack)\"", "\n", "", "", "if", "\"agent\"", "in", "config", ":", "# 'RL_name'", "\n", "        ", "model_name", "=", "\"SAC+\"", "+", "model_name", "\n", "", "if", "\"env_params\"", "in", "config", ":", "\n", "        ", "state_dim", "=", "config", "[", "\"env_params\"", "]", "[", "\"obs\"", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "state_dim", "=", "config", "[", "\"state_dim\"", "]", "\n", "", "if", "config", "[", "\"method\"", "]", "in", "encoder_methods", ":", "\n", "        ", "if", "config", "[", "\"stack_state\"", "]", ":", "\n", "            ", "model_name", "+=", "\"-stack\"", "\n", "", "if", "\"randomExplor\"", "in", "config", "[", "\"SRL_name\"", "]", "and", "\"(w/o stack)\"", "not", "in", "model_name", ":", "\n", "            ", "model_name", "+=", "\"-explor\"", "\n", "", "if", "config", "[", "\"wallDistractor\"", "]", ":", "\n", "            ", "model_name", "+=", "\" (w/ distractor)\"", "\n", "", "", "if", "\"(w/ distractor)\"", "not", "in", "model_name", "and", "\"stack\"", "not", "in", "model_name", ":", "\n", "        ", "model_name", "+=", "(", "\n", "\" (dim {})\"", ".", "format", "(", "state_dim", ")", "\n", "if", "model_name", "==", "\"ground truth\"", "\n", "else", "\" (dim %1d)\"", "%", "(", "state_dim", "*", "factor", ")", "\n", ")", "\n", "", "return", "model_name", "\n", "\n", "\n", "", "class", "appendabledict", "(", "defaultdict", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "type_", "=", "list", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "type_", "=", "type_", "\n", "super", "(", ")", ".", "__init__", "(", "type_", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "subslice", "(", "self", ",", "slice_", ")", ":", "\n", "        ", "\"\"\"indexes every value in the dict according to a specified slice\n        Parameters\n        ----------\n        slice: int or slice type\n            An indexing slice , e.g., ``slice(2, 20, 2)`` or ``2``.\n        Returns\n        -------\n        sliced_dict: dict (not appendabledict type!)\n            A dictionary with each value from this object's dictionary, but the value is sliced according to slice_\n            e.g. if this dictionary has {a:[1,2,3,4], b:[5,6,7,8]}, then self.subslice(2) returns {a:3,b:7}\n                 self.subslice(slice(1,3)) returns {a:[2,3], b:[6,7]}\"\"\"", "\n", "sliced_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "sliced_dict", "[", "k", "]", "=", "v", "[", "slice_", "]", "\n", "", "return", "sliced_dict", "\n", "\n", "", "def", "append_update", "(", "self", ",", "other_dict", ")", ":", "\n", "        ", "\"appends current dict's values with values from other_dict\"", "\n", "for", "k", ",", "v", "in", "other_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__getitem__", "(", "k", ")", ".", "append", "(", "v", ")", "\n", "\n", "\n", "", "", "", "class", "EarlyStopping", "(", "object", ")", ":", "\n", "    ", "\"\"\"Early stops the training if validation loss doesn't improve after a given patience.\"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "patience", "=", "7", ",", "name", "=", "\"\"", ",", "min_delta", "=", "0", ",", "baseline", "=", "-", "np", ".", "inf", ",", "min_Nepochs", "=", "0", "\n", ")", ":", "# save_dir=\".models\",", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            min_delta (float): Minimum percentage in the monitored quantity to qualify as an improvement,\n                                i.e. an absolute change of less than min_delta, will count as no improvement.\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "np", ".", "inf", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_acc_max", "=", "0.0", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "baseline", "=", "baseline", "\n", "self", ".", "min_Nepochs", "=", "min_Nepochs", "\n", "\n", "", "def", "__call__", "(", "self", ",", "val_acc", ",", "Nepochs", "=", "1", ",", "model", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "score", "=", "val_acc", "*", "(", "1", "-", "np", ".", "sign", "(", "val_acc", ")", "*", "self", ".", "min_delta", ")", "\n", "if", "score", "<=", "self", ".", "best_score", ":", "\n", "            ", "if", "Nepochs", "<=", "self", ".", "min_Nepochs", ":", "\n", "                ", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience} | Nepochs: [{Nepochs}/{self.min_Nepochs}]\"", "\n", ")", "\n", "", "elif", "val_acc", "<", "self", ".", "baseline", ":", "\n", "                ", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience} | score: {-val_acc}>{-self.baseline}\"", "\n", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "best_score", "==", "np", ".", "inf", ":", "\n", "                    ", "self", ".", "best_score", "=", "val_acc", "\n", "", "self", ".", "counter", "+=", "1", "\n", "print", "(", "\n", "f\"  EarlyStopping for {self.name} counter: {self.counter} out of {self.patience}\"", "\n", ")", "\n", "", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "print", "(", "f\"  {self.name} has stopped\"", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "val_acc", "\n", "self", ".", "counter", "=", "0", "\n", "return", "\"best\"", "\n", "\n", "", "", "def", "reset", "(", "self", ",", "patience", ")", ":", "\n", "        ", "self", ".", "counter", "=", "0", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "best_score", "=", "-", "np", ".", "inf", "\n", "self", ".", "patience", "=", "patience", "\n", "\n", "\n", "", "", "def", "saveJson", "(", "config", ",", "save_dir", ",", "name", "=", "\"exp_config.json\"", ")", ":", "\n", "    ", "\"Save the experiment config to a json file\"", "\n", "if", "name", "[", "-", "5", ":", "]", "!=", "\".json\"", ":", "\n", "        ", "name", "+=", "\".json\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "name", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "outfile", ",", "sort_keys", "=", "True", ")", "\n", "\n", "\n", "", "", "def", "loadJson", "(", "curr_path", ",", "name", "=", "\"exp_config\"", ")", ":", "\n", "    ", "if", "name", "[", "-", "5", ":", "]", "!=", "\".json\"", ":", "\n", "        ", "name", "+=", "\".json\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "curr_path", ",", "name", ")", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "read_file", ")", "\n", "\n", "\n", "", "", "def", "saveConfig", "(", "\n", "config", ",", "print_config", "=", "False", ",", "evaluate", "=", "False", ",", "save_dir", "=", "None", ",", "name", "=", "\"exp_config\"", "\n", ")", ":", "\n", "    ", "\"Save the experiment config to a pkl file\"", "\n", "if", "name", "[", "-", "4", ":", "]", "!=", "\".pkl\"", ":", "\n", "        ", "name", "+=", "\".pkl\"", "\n", "", "if", "not", "save_dir", ":", "\n", "        ", "save_dir", "=", "config", "[", "\"log_folder\"", "]", "\n", "", "if", "print_config", ":", "\n", "        ", "pprint", "(", "config", ")", "\n", "print", "(", "\"Saved config to log folder: {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "# Sort by keys", "\n", "", "config", "=", "OrderedDict", "(", "sorted", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "config_path", "=", "\"{}/{}\"", ".", "format", "(", "save_dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_path", ")", "and", "evaluate", ":", "\n", "        ", "config_path", "=", "\"{}/{}_evaluate\"", ".", "format", "(", "save_dir", ",", "name", ")", "\n", "\n", "", "with", "open", "(", "config_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "config", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "\n", "", "", "def", "loadConfig", "(", "config_path", ",", "name", "=", "\"exp_config\"", ")", ":", "\n", "    ", "if", "name", "[", "-", "4", ":", "]", "!=", "\".pkl\"", ":", "\n", "        ", "name", "+=", "\".pkl\"", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config_path", ",", "name", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "", "def", "savePickle", "(", "data_dict", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data_dict", ",", "f", ")", "\n", "\n", "\n", "", "", "def", "loadPickle", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "", "def", "float2string", "(", "value", ",", "nfloat", "=", "3", ")", ":", "\n", "    ", "float2string", "=", "\"{:.%sf}\"", "%", "nfloat", "\n", "return", "float2string", ".", "format", "(", "value", ")", "\n", "\n", "\n", "", "def", "update_text", "(", "data_list", ",", "save_path", ",", "text", "=", "False", ",", "replace", "=", "False", ",", "array", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "save_path", ")", "and", "not", "replace", ":", "\n", "        ", "assert", "not", "array", "\n", "mode", "=", "\"a\"", "\n", "with", "open", "(", "save_path", ",", "mode", ")", "as", "file_object", ":", "\n", "            ", "if", "text", ":", "\n", "                ", "file_object", ".", "write", "(", "\"\\n\"", ")", "\n", "file_object", ".", "write", "(", "data_list", ")", "\n", "", "else", ":", "\n", "                ", "file_object", ".", "write", "(", "\"\\n\"", ")", "\n", "file_object", ".", "write", "(", "\"\\n\"", ".", "join", "(", "map", "(", "str", ",", "data_list", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.demo.eval_agent": [[37, 265], ["int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.mean", "env.render", "print", "env.reset", "range", "numpy.sum", "numpy.mean", "numpy.isnan", "numpy.mean", "video_out.release", "cv2.destroyAllWindows", "print", "shutil.move", "cv2.VideoWriter", "cv2.VideoWriter", "SRL4RL.utils.utilsEnv.render_env", "cv2.imwrite", "env.step", "numpy.mean", "cv2.VideoWriter_fourcc", "cv2.VideoWriter_fourcc", "SRL4RL.utils.utilsEnv.update_video", "SRL4RL.utils.utilsEnv.update_video", "im_high_render[].astype", "SRL4RL.rl.modules.agent_utils.process_inputs", "torch.no_grad", "runner.forward", "SRL4RL.utils.utilsEnv.render_env", "cv2.imwrite", "print", "int", "int", "int", "SRL4RL.utils.utilsEnv.update_video", "SRL4RL.utils.utilsEnv.update_video", "im_high_render[].astype", "print", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.render_env", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.process_inputs", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.forward", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.render_env", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_video"], ["", "def", "eval_agent", "(", "\n", "args", ",", "\n", "env", ",", "\n", "o_mean", ",", "\n", "o_std", ",", "\n", "g_mean", ",", "\n", "g_std", ",", "\n", "actor_network", ",", "\n", "runner", ",", "\n", "video_path", "=", "\"\"", ",", "\n", "image_path", "=", "\"\"", ",", "\n", ")", ":", "\n", "    ", "numSteps", "=", "int", "(", "args", ".", "max_episode_steps", "//", "args", ".", "actionRepeat", ")", "\n", "mean_rewardProgress", "=", "0", "\n", "if", "args", ".", "renders", "and", "args", ".", "env_name", "in", "PY_MUJOCO", ":", "\n", "        ", "env", ".", "render", "(", "mode", "=", "\"human\"", ")", "\n", "", "if", "args", ".", "env_name", "in", "[", "\"TurtlebotEnv-v0\"", ",", "\"TurtlebotMazeEnv-v0\"", "]", ":", "\n", "        ", "\"map view of the environment\"", "\n", "camera_id_eval", "=", "1", "\n", "", "else", ":", "\n", "        ", "\"the default camera\"", "\n", "camera_id_eval", "=", "-", "1", "if", "args", ".", "highRes", "else", "0", "\n", "\n", "", "camera_id", "=", "-", "1", "if", "args", ".", "highRes", "else", "0", "\n", "g", ",", "num_steps", "=", "0", ",", "0", "\n", "total_step", "=", "np", ".", "zeros", "(", "(", "args", ".", "n_eval_traj", ")", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "args", ".", "n_eval_traj", ",", "numSteps", ")", ")", "\n", "rewardProgress", "=", "np", ".", "zeros", "(", "(", "args", ".", "n_eval_traj", ")", ")", "\n", "if", "video_path", ":", "\n", "        ", "if", "\"Turtlebot\"", "in", "args", ".", "env_name", ":", "\n", "            ", "fps", "=", "5", "\n", "", "elif", "args", ".", "actionRepeat", ">", "1", ":", "\n", "            ", "fps", "=", "40", "//", "args", ".", "actionRepeat", "\n", "", "else", ":", "\n", "            ", "fps", "=", "4", "\n", "", "im_width", "=", "image_size", "*", "2", "if", "args", ".", "method", "in", "encoder_methods", "else", "image_size", "\n", "video_out", "=", "(", "\n", "cv2", ".", "VideoWriter", "(", "\n", "video_path", ",", "\n", "cv2", ".", "VideoWriter_fourcc", "(", "*", "\"mp4v\"", ")", ",", "\n", "fps", "=", "fps", ",", "\n", "frameSize", "=", "(", "im_width", ",", "image_size", ")", ",", "\n", ")", "\n", "if", "args", ".", "color", "\n", "else", "cv2", ".", "VideoWriter", "(", "\n", "video_path", ",", "\n", "cv2", ".", "VideoWriter_fourcc", "(", "*", "\"XVID\"", ")", ",", "\n", "fps", "=", "fps", ",", "\n", "frameSize", "=", "(", "im_width", ",", "image_size", ")", ",", "\n", "isColor", "=", "0", ",", "\n", ")", "\n", ")", "\n", "\n", "", "for", "ntraj", "in", "range", "(", "args", ".", "n_eval_traj", ")", ":", "\n", "        ", "print", "(", "\"traj: {}\"", ".", "format", "(", "ntraj", "+", "1", ")", ")", "\n", "\n", "observation", "=", "env", ".", "reset", "(", ")", "\n", "if", "args", ".", "with_goal", ":", "\n", "            ", "state", "=", "observation", "[", "\"observation\"", "]", "\n", "g", "=", "observation", "[", "\"desired_goal\"", "]", "\n", "", "else", ":", "\n", "            ", "state", "=", "observation", "\n", "\n", "", "if", "video_path", ":", "\n", "            ", "\"reset video\"", "\n", "if", "args", ".", "method", "in", "encoder_methods", ":", "\n", "                ", "update_video", "(", "\n", "env", ",", "\n", "color", "=", "args", ".", "color", ",", "\n", "video_size", "=", "image_size", ",", "\n", "video", "=", "video_out", ",", "\n", "fpv", "=", "args", ".", "fpv", ",", "\n", "camera_id", "=", "camera_id", ",", "\n", "concatIM", "=", "runner", ".", "last_input", "*", "255", ",", "\n", "downscaling", "=", "not", "args", ".", "highRes", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "update_video", "(", "\n", "env", ",", "\n", "im", "=", "None", ",", "\n", "color", "=", "args", ".", "color", ",", "\n", "video_size", "=", "image_size", ",", "\n", "video", "=", "video_out", ",", "\n", "fpv", "=", "args", ".", "fpv", ",", "\n", "camera_id", "=", "camera_id", ",", "\n", "downscaling", "=", "not", "args", ".", "highRes", ",", "\n", ")", "\n", "", "", "if", "image_path", ":", "\n", "            ", "im_high_render", "=", "render_env", "(", "\n", "env", ",", "\n", "588", ",", "\n", "False", ",", "\n", "camera_id_eval", ",", "\n", "args", ".", "color", ",", "\n", "downscaling", "=", "not", "args", ".", "highRes", ",", "\n", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "image_path", "+", "\"ob_{:05d}\"", ".", "format", "(", "num_steps", ")", "+", "\".png\"", ",", "\n", "im_high_render", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "numSteps", ")", ":", "\n", "            ", "num_steps", "+=", "1", "\n", "\n", "if", "not", "RANDOM", ":", "\n", "                ", "input_tensor", "=", "process_inputs", "(", "\n", "state", ",", "g", ",", "o_mean", ",", "o_std", ",", "g_mean", ",", "g_std", ",", "args", ".", "__dict__", "\n", ")", "\n", "", "else", ":", "\n", "                ", "input_tensor", "=", "None", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pi", "=", "runner", ".", "forward", "(", "\n", "actor_network", ",", "input_tensor", ",", "evaluate", "=", "True", ",", "random", "=", "RANDOM", "\n", ")", "\n", "\n", "", "observation_new", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "pi", ")", "\n", "if", "video_path", ":", "\n", "                ", "\"update video\"", "\n", "if", "args", ".", "method", "in", "encoder_methods", ":", "\n", "                    ", "update_video", "(", "\n", "env", ",", "\n", "color", "=", "args", ".", "color", ",", "\n", "video_size", "=", "image_size", ",", "\n", "video", "=", "video_out", ",", "\n", "fpv", "=", "args", ".", "fpv", ",", "\n", "camera_id", "=", "camera_id", ",", "\n", "concatIM", "=", "runner", ".", "last_input", "*", "255", ",", "\n", "downscaling", "=", "not", "args", ".", "highRes", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "update_video", "(", "\n", "env", ",", "\n", "im", "=", "None", ",", "\n", "color", "=", "args", ".", "color", ",", "\n", "video_size", "=", "image_size", ",", "\n", "video", "=", "video_out", ",", "\n", "fpv", "=", "args", ".", "fpv", ",", "\n", "camera_id", "=", "camera_id", ",", "\n", "downscaling", "=", "not", "args", ".", "highRes", ",", "\n", ")", "\n", "", "", "if", "image_path", ":", "\n", "                ", "im_high_render", "=", "render_env", "(", "\n", "env", ",", "\n", "588", ",", "\n", "False", ",", "\n", "camera_id_eval", ",", "\n", "args", ".", "color", ",", "\n", "downscaling", "=", "not", "args", ".", "highRes", ",", "\n", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "image_path", "+", "\"ob_{:05d}\"", ".", "format", "(", "num_steps", ")", "+", "\".png\"", ",", "\n", "im_high_render", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", ")", "\n", "\n", "", "assert", "step", "<", "env", ".", "maxSteps", ",", "\"wrong max_episode_steps\"", "\n", "if", "args", ".", "env_name", "in", "env_with_goals", ":", "\n", "                ", "if", "args", ".", "with_goal", ":", "\n", "                    ", "state_new", "=", "observation_new", "[", "\"observation\"", "]", "\n", "g", "=", "observation_new", "[", "\"desired_goal\"", "]", "\n", "", "else", ":", "\n", "                    ", "state_new", "=", "observation_new", "\n", "info", "[", "\"is_success\"", "]", "=", "reward", "+", "1", "\n", "", "if", "(", "info", "[", "\"is_success\"", "]", "==", "1.0", ")", "or", "(", "step", "==", "env", ".", "maxSteps", ")", ":", "\n", "                    ", "rewards", "[", "ntraj", ",", "step", "]", "=", "info", "[", "\"is_success\"", "]", "\n", "num_steps", "+=", "1", "\n", "if", "info", "[", "\"is_success\"", "]", "==", "0.0", ":", "\n", "                        ", "print", "(", "\n", "\"\\ntraj {} fails, elapsed_steps {}\"", ".", "format", "(", "\n", "ntraj", "+", "1", ",", "step", "+", "1", "\n", ")", "\n", ")", "\n", "", "break", "\n", "", "", "else", ":", "\n", "                ", "state_new", "=", "observation_new", "\n", "rewards", "[", "ntraj", ",", "step", "]", "=", "reward", "\n", "if", "\"Pendulum\"", "in", "args", ".", "env_name", "and", "video_path", ":", "\n", "                    ", "if", "np", ".", "mean", "(", "rewards", "[", "ntraj", ",", "step", "+", "1", "-", "fps", "*", "10", ":", "step", "+", "1", "]", ")", ">", "3.9", ":", "\n", "                        ", "rewards", "[", "ntraj", ",", "step", "+", "1", ":", "]", "=", "rewards", "[", "ntraj", ",", "step", "]", "\n", "break", "\n", "", "", "", "if", "video_path", ":", "\n", "                ", "print", "(", "\"step [{}] reward {}\"", ".", "format", "(", "step", ",", "reward", ")", ")", "\n", "", "state", "=", "state_new", "\n", "\n", "", "if", "args", ".", "env_name", "in", "env_with_goals", ":", "\n", "            ", "if", "info", "[", "\"is_success\"", "]", "!=", "0.0", ":", "\n", "                ", "total_step", "[", "ntraj", "]", "=", "step", "+", "1", "\n", "", "", "else", ":", "\n", "            ", "total_step", "[", "ntraj", "]", "=", "step", "+", "1", "\n", "", "if", "args", ".", "env_name", "in", "[", "\n", "\"AntBulletEnv-v0\"", ",", "\n", "\"HalfCheetahBulletEnv-v0\"", ",", "\n", "\"HopperBulletEnv-v0\"", ",", "\n", "\"Walker2DBulletEnv-v0\"", ",", "\n", "]", ":", "\n", "            ", "rewardProgress", "[", "ntraj", "]", "=", "env", ".", "rewardProgress", "\n", "\n", "", "", "mean_rewards", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "rewards", ",", "axis", "=", "1", ")", ")", "\n", "if", "args", ".", "env_name", "in", "[", "\n", "\"AntBulletEnv-v0\"", ",", "\n", "\"HalfCheetahBulletEnv-v0\"", ",", "\n", "\"HopperBulletEnv-v0\"", ",", "\n", "\"Walker2DBulletEnv-v0\"", ",", "\n", "]", ":", "\n", "        ", "mean_rewardProgress", "=", "np", ".", "mean", "(", "rewardProgress", ")", "\n", "", "average_steps", "=", "(", "\n", "args", ".", "max_episode_steps", "if", "np", ".", "isnan", "(", "np", ".", "mean", "(", "total_step", ")", ")", "else", "np", ".", "mean", "(", "total_step", ")", "\n", ")", "\n", "if", "video_path", ":", "\n", "        ", "\"Release everything if job is finished\"", "\n", "video_out", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "if", "args", ".", "env_name", "in", "env_with_goals", ":", "\n", "            ", "strR", "=", "\"%03d\"", "%", "int", "(", "mean_rewards", "*", "100", ")", "\n", "strR", "=", "strR", "[", "0", "]", "+", "\",\"", "+", "strR", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "strR", "=", "\"R%04d\"", "%", "int", "(", "mean_rewards", ")", "\n", "", "if", "args", ".", "env_name", "in", "[", "\n", "\"AntBulletEnv-v0\"", ",", "\n", "\"HalfCheetahBulletEnv-v0\"", ",", "\n", "\"HopperBulletEnv-v0\"", ",", "\n", "\"Walker2DBulletEnv-v0\"", ",", "\n", "]", ":", "\n", "            ", "strR", "+=", "\"-RP%04d\"", "%", "int", "(", "mean_rewardProgress", ")", "\n", "", "destination", "=", "video_path", "[", ":", "-", "4", "]", "+", "\"-\"", "+", "strR", "+", "\".mp4\"", "\n", "print", "(", "\"destination\"", ",", "destination", ")", "\n", "shutil", ".", "move", "(", "video_path", ",", "destination", ")", "\n", "\n", "", "return", "mean_rewards", ",", "mean_rewardProgress", ",", "average_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.arguments.get_args": [[14, 225], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"XSRL (eXploratory State Representation Learning)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--evalExplor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"for exploration evaluation during training of 550 max steps\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"1 for debugging\"", ")", "\n", "\"Logs hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--logs_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"logsXSRL\"", ",", "help", "=", "\"path where to save the models\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--method\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"XSRL\"", ",", "\n", "help", "=", "\"Method to use for training representations\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "123456", ",", "help", "=", "\"Random seed to use\"", "\n", ")", "# 123456", "\n", "parser", ".", "add_argument", "(", "\n", "\"--keep_seed\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"only with my_dir\"", "\n", ")", "\n", "\"Loading pretrained models\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--my_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "\"path of the pretrained model to initialize\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--reset_policy\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"only with my_dir: reset policy\"", ",", "\n", ")", "\n", "\"Environment hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--env_name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"TurtlebotMazeEnv-v0\"", ",", "\n", "choices", "=", "PYBULLET_ENV", ",", "\n", "help", "=", "\"Environment name\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_envs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "\"Number of envs to train in parallel, corresponds to the batch size\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--randomExplor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Always use a constant reset state\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--maxStep\"", ",", "type", "=", "float", ",", "default", "=", "500", ",", "help", "=", "\"maxStep for training env\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--actionRepeat\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"Number of frame skip, i.e. action repeat\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--noise_type\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "choices", "=", "NOISES", ",", "help", "=", "\"Add some noise\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--flickering\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\">0 for flickering in env rendering, only for XSRL training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--distractor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Add distractor in environment, only for ReacherBulletEnv\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wallDistractor\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Whether or not include a stochastic visual distractor, only for TurtlebotMazeEnv\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fpv\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use FPV camera of the robot (only for envs in env_with_fpv)\"", ",", "\n", ")", "\n", "\n", "\"XSRL options\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resetPi\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"resetPi trick for better diversity: train two discovery policies\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dvt_patience\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Max counts before to resetPi\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightInverse\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightLPB\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weightEntropy\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"weight\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--autoEntropyTuning\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"Tune weightEntropy\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init_temperature\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "\"init entropy coefficient for autoEntropyTuning (Temperature parameter \u03b1 determines the relative importance of the entropy term against the reward)\"", ",", "\n", ")", "\n", "\"NN hyper-parameters: (alpha, beta, gamma)\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--activation\"", ",", "\n", "default", "=", "\"leaky_relu\"", ",", "\n", "choices", "=", "[", "\"leaky_relu\"", ",", "\"relu\"", ",", "\"elu\"", ",", "\"tanh\"", ",", "\"tanh_sigmoid\"", "]", ",", "\n", "help", "=", "\"Activation to use\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_init\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"none\"", ",", "\n", "choices", "=", "[", "\"xavier\"", ",", "\"orthogonal\"", ",", "\"random_init\"", ",", "\"random_init_trunc\"", "]", ",", "\n", "help", "=", "\"Method to use for weights initialization\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--alpha_dim\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "\"alpha output dimension\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta_dim\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"beta output dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--state_dim\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"state dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nb_hidden_gamma\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"128-512-128\"", ",", "\n", "help", "=", "\"number of hidden units per layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nb_hidden_pi\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"128-512-128\"", ",", "\n", "help", "=", "\"number of hidden units per layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cutoff\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "\"Number of layers in mu_tail and log_sig_tail\"", ",", "\n", ")", "\n", "\"SGD hyper-parameters\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pi_batchSize\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n", "help", "=", "\"pi_batchSize for updating the discovery policy and inverse/LPB-target models\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pi_updateInt\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "\"maxStep for training env\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optimizer\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"adam\"", ",", "\n", "choices", "=", "[", "\"adam\"", ",", "\"amsgrad\"", ",", "\"adamW\"", "]", ",", "\n", "help", "=", "\"for automatic weights regularization\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"Learning rate for training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_explor\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"Learning rate for training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_alpha\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"Learning rate for training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_epochs\"", ",", "type", "=", "float", ",", "default", "=", "1e6", ",", "help", "=", "\"Maximum number of epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--patience\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "40", ",", "\n", "help", "=", "\"Number of epochs before early_stopping\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--backprop_per_eval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2048", ",", "\n", "help", "=", "\"Number of iterations per evaluation\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n", "\n", "", "def", "assert_args_XSRL", "(", "args", ")", ":", "\n", "    ", "assert_args_envs", "(", "args", ")", "\n", "\n", "if", "args", ".", "reset_policy", ":", "\n", "        ", "assert", "args", ".", "my_dir", ",", "\"reset_policy without --my_dir\"", "\n", "", "if", "args", ".", "keep_seed", ":", "\n", "        ", "assert", "args", ".", "my_dir", "\n", "\n", "", "args", ".", "nEnv_perPi", "=", "args", ".", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.arguments.update_args_RL": [[227, 292], ["SRL4RL.utils.utilsEnv.update_args_envs", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.update_args_envs"], ["if", "with_discoveryPi", ":", "\n", "        ", "if", "args", ".", "resetPi", ":", "\n", "            ", "args", ".", "nEnv_perPi", "=", "args", ".", "num_envs", "//", "2", "\n", "", "assert", "(", "\n", "args", ".", "pi_batchSize", "%", "args", ".", "nEnv_perPi", "==", "0", "\n", ")", ",", "\"need nPi_samples over each num_envs to have pi_batchSize\"", "\n", "args", ".", "nPi_samples", "=", "args", ".", "pi_batchSize", "//", "args", ".", "nEnv_perPi", "\n", "args", ".", "pi_updateInt", "=", "max", "(", "args", ".", "nPi_samples", ",", "args", ".", "pi_updateInt", ")", "\n", "assert", "(", "\n", "args", ".", "backprop_per_eval", "%", "args", ".", "pi_updateInt", "==", "0", "\n", ")", ",", "\"there are pi_backprop_per_eval per epoch\"", "\n", "args", ".", "pi_backprop_per_eval", "=", "args", ".", "backprop_per_eval", "//", "args", ".", "pi_updateInt", "\n", "assert", "args", ".", "pi_updateInt", "%", "args", ".", "nPi_samples", "==", "0", ",", "(", "\n", "\"there are nPi_samples per pi_updateInt\"", "\n", "\"there are pi_sampling steps between each sample\"", "\n", ")", "\n", "args", ".", "pi_sampling", "=", "args", ".", "pi_updateInt", "//", "args", ".", "nPi_samples", "\n", "print", "(", "\"args.pi_updateInt\"", ",", "args", ".", "pi_updateInt", ")", "\n", "print", "(", "\"args.nPi_samples\"", ",", "args", ".", "nPi_samples", ")", "\n", "print", "(", "\"args.pi_sampling\"", ",", "args", ".", "pi_sampling", ")", "\n", "print", "(", "\"args.pi_backprop_per_eval\"", ",", "args", ".", "pi_backprop_per_eval", ")", "\n", "", "else", ":", "\n", "        ", "assert", "not", "args", ".", "resetPi", "\n", "assert", "not", "args", ".", "reset_policy", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "update_args_XSRL", "(", "args", ")", ":", "\n", "    ", "args", "=", "update_args_envs", "(", "args", ")", "\n", "\n", "if", "args", ".", "maxStep", ">", "9e4", ":", "\n", "        ", "args", ".", "maxStep", "=", "np", ".", "inf", "\n", "", "args", ".", "inverse", "=", "args", ".", "weightInverse", ">", "0", "\n", "args", ".", "LPB", "=", "args", ".", "weightLPB", ">", "0", "\n", "args", ".", "entropy", "=", "args", ".", "weightEntropy", ">", "0", "or", "args", ".", "autoEntropyTuning", "\n", "\n", "if", "args", ".", "env_name", "==", "\"TurtlebotEnv-v0\"", ":", "\n", "        ", "args", ".", "nb_hidden_pi", "=", "\"256\"", "\n", "args", ".", "cutoff", "=", "1", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "is_with_discoveryPi", "(", "config", ")", ":", "\n", "    ", "with_discoveryPi", "=", "config", "[", "\"inverse\"", "]", "or", "config", "[", "\"LPB\"", "]", "or", "config", "[", "\"entropy\"", "]", "\n", "return", "with_discoveryPi", "\n", "\n", "\n", "", "def", "giveXSRL_name", "(", "config", ")", ":", "\n", "    ", "with_discoveryPi", "=", "is_with_discoveryPi", "(", "config", ")", "\n", "method_params", "=", "\"\"", "\n", "method_params", "+=", "\"randomExplor\"", "if", "config", "[", "\"randomExplor\"", "]", "else", "\"\"", "\n", "method_params", "+=", "(", "\n", "\"[{}] \"", ".", "format", "(", "config", "[", "\"noise_type\"", "]", ")", "if", "config", "[", "\"noise_type\"", "]", "!=", "\"none\"", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"[flickering-{}] \"", ".", "format", "(", "config", "[", "\"flickering\"", "]", ")", "\n", "if", "config", "[", "\"flickering\"", "]", ">", "0", "\n", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "\"dim {:02d}, maxStep {}, num envs {}, \"", ".", "format", "(", "\n", "config", "[", "\"state_dim\"", "]", ",", "config", "[", "\"maxStep\"", "]", ",", "config", "[", "\"num_envs\"", "]", "\n", ")", "\n", "if", "with_discoveryPi", ":", "\n", "        ", "method_params", "+=", "\"batchPi {}, pi_updateInt {}, \"", ".", "format", "(", "\n", "config", "[", "\"pi_batchSize\"", "]", ",", "config", "[", "\"pi_updateInt\"", "]", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.arguments.assert_args_RL": [[294, 314], ["SRL4RL.utils.utilsEnv.assert_args_envs"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.assert_args_envs"], ["", "method_params", "+=", "(", "\n", "\"dvt_patience-{}, \"", ".", "format", "(", "config", "[", "\"dvt_patience\"", "]", ")", "if", "config", "[", "\"resetPi\"", "]", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"wInverse-{}, \"", ".", "format", "(", "config", "[", "\"weightInverse\"", "]", ")", "\n", "if", "config", "[", "\"weightInverse\"", "]", ">", "0", "\n", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"wLPB-{}, \"", ".", "format", "(", "config", "[", "\"weightLPB\"", "]", ")", "if", "config", "[", "\"weightLPB\"", "]", ">", "0", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"optim-{}, \"", ".", "format", "(", "config", "[", "\"optimizer\"", "]", ")", "\n", "if", "config", "[", "\"optimizer\"", "]", "!=", "\"adam\"", "\n", "else", "\"\"", "\n", ")", "\n", "method_params", "+=", "(", "\n", "\"hidden-{}, \"", ".", "format", "(", "config", "[", "\"nb_hidden_gamma\"", "]", ")", "\n", "if", "config", "[", "\"nb_hidden_gamma\"", "]", "!=", "\"128-512-128\"", "\n", "else", "\"\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.arguments.giveRL_name": [[316, 323], ["None"], "function", ["None"], ["        ", "if", "config", "[", "\"autoEntropyTuning\"", "]", ":", "\n", "            ", "method_params", "+=", "\"autoEnt, \"", "\n", "", "else", ":", "\n", "            ", "method_params", "+=", "(", "\n", "\"wEnt-{}, \"", ".", "format", "(", "config", "[", "\"weightEntropy\"", "]", ")", "\n", "if", "config", "[", "\"weightEntropy\"", "]", ">", "0", "\n", "else", "\"\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.train.launch": [[31, 44], ["SRL4RL.utils.nn_torch.set_seeds", "SRL4RL.rl.utils.env_utils.make_env", "SRL4RL.rl.utils.env_utils.get_env_params", "SRL4RL.rl.modules.sac_agent.sac_agent", "torch.cuda.empty_cache", "SRL4RL.rl.modules.sac_agent.sac_agent.learn", "env.close", "SRL4RL.utils.utilsEnv.giveEnv_name", "mpi4py.MPI.COMM_WORLD.Get_rank"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.set_seeds", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_utils.make_env", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.env_utils.get_env_params", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.learn", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsEnv.giveEnv_name"], ["def", "launch", "(", "config", ")", ":", "\n", "    ", "\"IMPORTANT TO USE FOR CUDA MEMORY\"", "\n", "set_seeds", "(", "config", "[", "\"seed\"", "]", "+", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", ")", "\n", "env", ",", "config", ",", "runner", "=", "make_env", "(", "config", ")", "\n", "env_params", "=", "get_env_params", "(", "env", ",", "config", ")", "\n", "config", "[", "\"env_params_name\"", "]", "=", "config", "[", "\"new_env_name\"", "]", "+", "\" \"", "+", "giveEnv_name", "(", "config", ")", "\n", "config", "[", "\"env_params\"", "]", "=", "env_params", "\n", "# create the agent to interact with the environment", "\n", "RL_trainer", "=", "sac_agent", "(", "config", ",", "env", ",", "env_params", ",", "runner", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\"start training from here\"", "\n", "RL_trainer", ".", "learn", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.plot.moving_avg_curve": [[16, 18], ["numpy.convolve", "numpy.ones"], "function", ["None"], ["def", "moving_avg_curve", "(", "x", ",", "kernel_size", "=", "2", ")", ":", "\n", "    ", "return", "np", ".", "convolve", "(", "x", ",", "np", ".", "ones", "(", "kernel_size", ")", "/", "kernel_size", ",", "mode", "=", "\"valid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.rl.plot.complete_pad": [[20, 42], ["numpy.max", "numpy.array", "numpy.concatenate", "padded_xs.append", "len", "numpy.ones", "numpy.mean", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "complete_pad", "(", "xs", ",", "last_value", "=", "False", ",", "backprop_per_eval", "=", "None", ")", ":", "\n", "    ", "maxlen", "=", "np", ".", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n", "padded_xs", "=", "[", "]", "\n", "for", "x", "in", "xs", ":", "\n", "        ", "if", "x", ".", "shape", "[", "0", "]", "==", "maxlen", ":", "\n", "            ", "pass", "\n", "", "if", "last_value", ":", "\n", "            ", "padding", "=", "np", ".", "ones", "(", "(", "maxlen", "-", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "*", "np", ".", "mean", "(", "x", "[", "-", "15", ":", "]", ")", "\n", "", "elif", "backprop_per_eval", ":", "\n", "            ", "padding", "=", "np", ".", "arange", "(", "\n", "x", ".", "shape", "[", "0", "]", "*", "backprop_per_eval", ",", "\n", "maxlen", "*", "backprop_per_eval", ",", "\n", "backprop_per_eval", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "padding", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", "+", "1", ",", "maxlen", "+", "1", ")", "\n", "", "x_padded", "=", "np", ".", "concatenate", "(", "[", "x", ",", "padding", "]", ",", "axis", "=", "0", ")", "\n", "assert", "x_padded", ".", "shape", "[", "1", ":", "]", "==", "x", ".", "shape", "[", "1", ":", "]", "\n", "assert", "x_padded", ".", "shape", "[", "0", "]", "==", "maxlen", "\n", "padded_xs", ".", "append", "(", "x_padded", ")", "\n", "", "return", "np", ".", "array", "(", "padded_xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.__init__": [[12, 99], ["torch.device", "SRL4RL.rl.utils.replay_buffer.Replay_buffer", "int", "print", "SRL4RL.rl.modules.agent_utils.Saver.__init__", "SRL4RL.rl.utils.normalizer.Normalizer", "SRL4RL.rl.utils.normalizer.Normalizer", "SRL4RL.rl.utils.normalizer.Normalizer", "SRL4RL.rl.utils.normalizer.TimeNormalizer", "SRL4RL.rl.utils.normalizer.Normalizer"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env", ",", "env_params", ",", "runner", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "minEpBuffer", "=", "config", "[", "\"minEpBuffer\"", "]", "\n", "self", ".", "hashCode", "=", "config", "[", "\"hashCode\"", "]", "\n", "self", ".", "env_name", "=", "config", "[", "\"env_name\"", "]", "\n", "self", ".", "with_progress", "=", "False", "\n", "if", "self", ".", "env_name", "in", "[", "\n", "\"AntBulletEnv-v0\"", ",", "\n", "\"HalfCheetahBulletEnv-v0\"", ",", "\n", "\"HopperBulletEnv-v0\"", ",", "\n", "\"Walker2DBulletEnv-v0\"", ",", "\n", "]", ":", "\n", "            ", "self", ".", "with_progress", "=", "True", "\n", "", "self", ".", "gamma", "=", "config", "[", "\"gamma\"", "]", "\n", "self", ".", "with_goal", "=", "config", "[", "\"with_goal\"", "]", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "env_params", "=", "env_params", "\n", "self", ".", "method", "=", "config", "[", "\"method\"", "]", "\n", "self", ".", "agent", "=", "config", "[", "\"agent\"", "]", "\n", "self", ".", "max_episode_steps", "=", "config", "[", "\"max_episode_steps\"", "]", "\n", "self", ".", "actionRepeat", "=", "config", "[", "\"actionRepeat\"", "]", "\n", "self", ".", "batch_size", "=", "config", "[", "\"batch_size\"", "]", "\n", "self", ".", "gradient_steps", "=", "config", "[", "\"gradient_steps\"", "]", "\n", "self", ".", "n_eval_rollouts", "=", "config", "[", "\"n_eval_rollouts\"", "]", "\n", "self", ".", "n_episodes_rollout", "=", "config", "[", "\"n_episodes_rollout\"", "]", "\n", "self", ".", "n_epochs", "=", "config", "[", "\"n_epochs\"", "]", "\n", "self", ".", "action_dim", "=", "env_params", "[", "\"action\"", "]", "\n", "self", ".", "eval_interval", "=", "config", "[", "\"eval_interval\"", "]", "\n", "self", ".", "actor_update_interval", "=", "config", "[", "\"actor_update_interval\"", "]", "\n", "self", ".", "target_update_interval", "=", "config", "[", "\"target_update_interval\"", "]", "\n", "self", ".", "polyak", "=", "config", "[", "\"polyak\"", "]", "\n", "self", ".", "cpu", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "device", "=", "config", "[", "\"device\"", "]", "\n", "self", ".", "save_dir", "=", "config", "[", "\"save_dir\"", "]", "\n", "self", ".", "clip_obs", "=", "config", "[", "\"clip_obs\"", "]", "\n", "\n", "# create the replay buffer", "\n", "self", ".", "buffer", "=", "Replay_buffer", "(", "config", ",", "config", "[", "\"env_params\"", "]", ")", "\n", "\n", "self", ".", "maxStepsReal", "=", "int", "(", "config", "[", "\"max_episode_steps\"", "]", "//", "config", "[", "\"actionRepeat\"", "]", ")", "\n", "# create the normalizer", "\n", "if", "config", "[", "\"my_dir\"", "]", ":", "\n", "            ", "self", ".", "o_norm", "=", "Normalizer", "(", "\n", "size", "=", "env_params", "[", "\"obs\"", "]", "[", "0", "]", ",", "\n", "default_clip_range", "=", "config", "[", "\"clip_range\"", "]", ",", "\n", "initNormalizer", "=", "config", ",", "\n", "name", "=", "\"o\"", ",", "\n", ")", "\n", "self", ".", "g_norm", "=", "Normalizer", "(", "\n", "size", "=", "env_params", "[", "\"goal\"", "]", ",", "\n", "default_clip_range", "=", "config", "[", "\"clip_range\"", "]", ",", "\n", "initNormalizer", "=", "config", ",", "\n", "name", "=", "\"g\"", ",", "\n", ")", "\n", "del", "config", "[", "\"o_mean\"", "]", ",", "config", "[", "\"g_mean\"", "]", ",", "config", "[", "\"o_std\"", "]", ",", "config", "[", "\"g_std\"", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "method", "==", "\"openLoop\"", ":", "\n", "                ", "self", ".", "o_norm", "=", "TimeNormalizer", "(", "self", ".", "maxStepsReal", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "o_norm", "=", "Normalizer", "(", "\n", "size", "=", "env_params", "[", "\"obs\"", "]", "[", "0", "]", ",", "default_clip_range", "=", "config", "[", "\"clip_range\"", "]", "\n", ")", "\n", "", "self", ".", "g_norm", "=", "Normalizer", "(", "\n", "size", "=", "env_params", "[", "\"goal\"", "]", ",", "default_clip_range", "=", "config", "[", "\"clip_range\"", "]", "\n", ")", "\n", "\n", "", "self", ".", "automatic_entropy_tuning", "=", "None", "\n", "self", ".", "runner", "=", "runner", "\n", "self", ".", "RL_training", "=", "False", "\n", "self", ".", "doneAlive", "=", "config", "[", "\"doneAlive\"", "]", "\n", "if", "not", "self", ".", "doneAlive", ":", "\n", "            ", "self", ".", "config", "[", "\"buffer_size\"", "]", "=", "self", ".", "buffer", ".", "numEpBuffer", "*", "self", ".", "buffer", ".", "horizon", "\n", "self", ".", "config", "[", "\"horizon\"", "]", "=", "self", ".", "buffer", ".", "horizon", "\n", "assert", "(", "\n", "self", ".", "n_episodes_rollout", "<=", "self", ".", "buffer", ".", "numEpBuffer", "\n", ")", ",", "\"n_episodes_rollout too high\"", "\n", "\n", "", "self", ".", "currentEpisodesRollout", "=", "self", ".", "n_episodes_rollout", "\n", "self", ".", "enoughRollout", "=", "False", "\n", "\n", "print", "(", "\n", "\"maxStepsReal: {} \\nenoughRollout: {} \\ncurrentEpisodesRollout: {}\"", ".", "format", "(", "\n", "self", ".", "maxStepsReal", ",", "self", ".", "enoughRollout", ",", "self", ".", "currentEpisodesRollout", "\n", ")", "\n", ")", "\n", "# Init Saver class", "\n", "super", "(", ")", ".", "__init__", "(", "config", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent._eval_agent": [[101, 147], ["print", "numpy.zeros", "range", "numpy.mean", "mpi4py.MPI.COMM_WORLD.allreduce", "numpy.zeros", "agent.Agent.env.reset", "range", "numpy.sum", "mpi4py.MPI.COMM_WORLD.Get_size", "agent.Agent.env.step", "torch.no_grad", "agent.Agent._preproc_inputs", "agent.Agent.runner.forward"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._preproc_inputs", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.forward"], ["", "def", "_eval_agent", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"eval_agent ......\"", ")", "\n", "g", "=", "None", "\n", "success_rates", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_eval_rollouts", ",", "self", ".", "maxStepsReal", ")", ")", "\n", "if", "self", ".", "with_progress", ":", "\n", "            ", "sum_success_rates", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_eval_rollouts", ")", ")", "\n", "", "for", "nep", "in", "range", "(", "self", ".", "n_eval_rollouts", ")", ":", "\n", "            ", "observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "self", ".", "with_goal", ":", "\n", "                ", "state", "=", "observation", "[", "\"observation\"", "]", "\n", "g", "=", "observation", "[", "\"desired_goal\"", "]", "\n", "", "else", ":", "\n", "                ", "state", "=", "observation", "\n", "\n", "", "for", "step", "in", "range", "(", "self", ".", "maxStepsReal", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "input_tensor", "=", "self", ".", "_preproc_inputs", "(", "state", ",", "g", ")", "\n", "pi", "=", "self", ".", "runner", ".", "forward", "(", "\n", "self", ".", "actor_network", ",", "input_tensor", ",", "evaluate", "=", "True", "\n", ")", "\n", "", "observation_new", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "pi", ")", "\n", "if", "self", ".", "env_name", "in", "env_with_goals", ":", "\n", "                    ", "if", "self", ".", "with_goal", ":", "\n", "                        ", "state_new", "=", "observation_new", "[", "\"observation\"", "]", "\n", "g", "=", "observation_new", "[", "\"desired_goal\"", "]", "\n", "", "else", ":", "\n", "                        ", "state_new", "=", "observation_new", "\n", "info", "[", "\"is_success\"", "]", "=", "reward", "+", "1", "\n", "\n", "", "if", "(", "info", "[", "\"is_success\"", "]", "==", "1.0", ")", "or", "(", "step", "==", "self", ".", "maxStepsReal", ")", ":", "\n", "                        ", "success_rates", "[", "nep", ",", "step", "]", "=", "info", "[", "\"is_success\"", "]", "\n", "break", "\n", "", "", "else", ":", "\n", "                    ", "state_new", "=", "observation_new", "\n", "if", "not", "self", ".", "with_progress", ":", "\n", "                        ", "success_rates", "[", "nep", ",", "step", "]", "=", "reward", "\n", "\n", "", "", "state", "=", "state_new", "\n", "", "if", "self", ".", "with_progress", ":", "\n", "                ", "sum_success_rates", "[", "nep", "]", "=", "self", ".", "env", ".", "rewardProgress", "\n", "\n", "", "", "if", "not", "self", ".", "with_progress", ":", "\n", "            ", "sum_success_rates", "=", "np", ".", "sum", "(", "success_rates", ",", "axis", "=", "1", ")", "\n", "", "mean_success_rates", "=", "np", ".", "mean", "(", "sum_success_rates", ")", "\n", "global_success_rate", "=", "MPI", ".", "COMM_WORLD", ".", "allreduce", "(", "mean_success_rates", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "return", "global_success_rate", "/", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.soft_update_target_network": [[149, 154], ["torch.no_grad", "zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "methods", ["None"], ["", "def", "soft_update_target_network", "(", "self", ",", "target", ",", "source", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "target_param", ".", "data", ".", "copy_", "(", "\n", "(", "1", "-", "self", ".", "polyak", ")", "*", "target_param", ".", "data", "+", "self", ".", "polyak", "*", "param", ".", "data", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.learn": [[156, 340], ["range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "agent.Agent.env.reset", "min", "agent.Agent.o_norm.update_normalizer", "agent.Agent.buffer.store_episode", "agent.Agent._update_normalizer", "agent.Agent.train", "range", "agent.Agent.train", "agent.Agent.env.step", "agent.Agent.update_network", "mpi4py.MPI.COMM_WORLD.Get_rank", "print", "agent.Agent._preproc_inputs", "torch.no_grad", "agent.Agent.runner.forward", "agent.Agent.buffer.add", "bool", "agent.Agent.soft_update_target_network", "agent.Agent._eval_agent", "agent.Agent.update_success", "agent.Agent.early_stopper", "agent.Agent.save_chekpoint", "agent.Agent.log_results", "print", "agent.Agent.save_chekpoint", "agent.Agent.saveConfig", "float", "print"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.Normalizer.reset", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.update_normalizer", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.Replay_buffer.store_episode", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._update_normalizer", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_agent.sac_agent.update_network", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._preproc_inputs", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.forward", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.Replay_buffer.add", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.soft_update_target_network", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent._eval_agent", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.update_success", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.save_chekpoint", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.log_results", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.save_chekpoint", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.saveConfig"], ["", "", "", "def", "learn", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        train the network\n        \"\"\"", "\n", "\n", "g", "=", "None", "\n", "while", "self", ".", "elapsed_epochs", "<", "self", ".", "n_epochs", ":", "\n", "            ", "if", "not", "self", ".", "doneAlive", ":", "\n", "                ", "\"self.currentEpisodesRollout vary with respect to the SRL training\"", "\n", "mb_obs", "=", "np", ".", "zeros", "(", "\n", "[", "\n", "self", ".", "currentEpisodesRollout", ",", "\n", "self", ".", "buffer", ".", "horizon", "+", "1", ",", "\n", "*", "[", "i", "for", "i", "in", "self", ".", "env_params", "[", "\"obs\"", "]", "]", ",", "\n", "]", "\n", ")", "\n", "mb_g", "=", "np", ".", "zeros", "(", "\n", "[", "\n", "self", ".", "currentEpisodesRollout", ",", "\n", "self", ".", "buffer", ".", "horizon", ",", "\n", "self", ".", "env_params", "[", "\"goal\"", "]", ",", "\n", "]", "\n", ")", "\n", "mb_r", "=", "np", ".", "zeros", "(", "[", "self", ".", "currentEpisodesRollout", ",", "self", ".", "buffer", ".", "horizon", ",", "1", "]", ")", "\n", "mb_actions", "=", "np", ".", "zeros", "(", "\n", "[", "\n", "self", ".", "currentEpisodesRollout", ",", "\n", "self", ".", "buffer", ".", "horizon", ",", "\n", "self", ".", "env_params", "[", "\"action\"", "]", ",", "\n", "]", "\n", ")", "\n", "", "if", "self", ".", "RL_training", ":", "\n", "                ", "self", ".", "elapsed_soft_update", "+=", "1", "\n", "", "Nroll", "=", "0", "\n", "if", "self", ".", "doneAlive", ":", "\n", "                ", "past_idx", "=", "self", ".", "buffer", ".", "idx", "\n", "new_step_buffer", "=", "0", "\n", "", "for", "_", "in", "range", "(", "self", ".", "currentEpisodesRollout", ")", ":", "\n", "                ", "if", "self", ".", "RL_training", ":", "\n", "                    ", "self", ".", "elapsed_rollouts", "+=", "1", "\n", "", "n_steps", "=", "0", "\n", "observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "if", "self", ".", "with_goal", ":", "\n", "                    ", "state", "=", "observation", "[", "\"observation\"", "]", "\n", "g", "=", "observation", "[", "\"desired_goal\"", "]", "\n", "", "else", ":", "\n", "                    ", "state", "=", "observation", "\n", "\n", "", "\"start new episode\"", "\n", "while", "not", "done", ":", "\n", "                    ", "if", "self", ".", "RL_training", "or", "(", "not", "self", ".", "config", "[", "\"random_buffer\"", "]", ")", ":", "\n", "                        ", "self", ".", "elapsed_steps", "+=", "1", "\n", "random", "=", "False", "\n", "input_tensor", "=", "self", ".", "_preproc_inputs", "(", "state", ",", "g", ")", "\n", "", "else", ":", "\n", "                        ", "random", "=", "True", "\n", "input_tensor", "=", "None", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "\"As kostrikov2020DrQ, sample randomly for data collection\"", "\n", "pi", "=", "self", ".", "runner", ".", "forward", "(", "\n", "self", ".", "actor_network", ",", "\n", "input_tensor", ",", "\n", "random", "=", "random", ",", "\n", "env", "=", "self", ".", "env", ",", "\n", ")", "\n", "# feed the actions into the environment", "\n", "", "observation_new", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "pi", ")", "\n", "if", "self", ".", "with_goal", ":", "\n", "                        ", "state_new", "=", "observation_new", "[", "\"observation\"", "]", "\n", "", "else", ":", "\n", "                        ", "state_new", "=", "observation_new", "\n", "\n", "", "\"add step to buffer in case of doneAlive\"", "\n", "if", "self", ".", "doneAlive", ":", "\n", "                        ", "obs_step", "=", "[", "state", ",", "state_new", ",", "reward", ",", "float", "(", "done", ")", ",", "pi", "]", "\n", "self", ".", "buffer", ".", "add", "(", "obs_step", ")", "\n", "new_step_buffer", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "\"update episodes\"", "\n", "mb_obs", "[", "Nroll", ",", "n_steps", "]", "=", "state", "\n", "mb_r", "[", "Nroll", ",", "n_steps", "]", "=", "reward", "\n", "mb_actions", "[", "Nroll", ",", "n_steps", "]", "=", "pi", "\n", "if", "self", ".", "with_goal", ":", "\n", "                            ", "mb_g", "[", "Nroll", ",", "n_steps", "]", "=", "g", "\n", "\n", "", "", "\"update state\"", "\n", "state", "=", "state_new", "\n", "\n", "n_steps", "+=", "1", "\n", "assert", "n_steps", "<=", "self", ".", "maxStepsReal", ",", "\"wrong max_episode_steps\"", "\n", "\n", "", "\"add last state\"", "\n", "if", "not", "self", ".", "doneAlive", ":", "\n", "                    ", "assert", "(", "\n", "n_steps", "==", "self", ".", "maxStepsReal", "\n", ")", ",", "\"not doneAlive and n_steps != self.maxStepsReal\"", "\n", "mb_obs", "[", "Nroll", ",", "n_steps", "]", "=", "state", "\n", "\n", "", "Nroll", "+=", "1", "\n", "\n", "", "if", "self", ".", "doneAlive", ":", "\n", "                ", "\"Update normalizer before RL_training\"", "\n", "maxStep", "=", "min", "(", "new_step_buffer", "+", "past_idx", ",", "self", ".", "buffer", ".", "capacity", ")", "\n", "self", ".", "o_norm", ".", "update_normalizer", "(", "\n", "self", ".", "buffer", ".", "buffers", "[", "\"obs\"", "]", "[", "past_idx", ":", "maxStep", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "episode_batch", "=", "[", "mb_obs", ",", "mb_g", ",", "mb_r", ",", "mb_actions", "]", "\n", "self", ".", "buffer", ".", "store_episode", "(", "episode_batch", ")", "\n", "\"Update normalizer before RL_training\"", "\n", "self", ".", "_update_normalizer", "(", "episode_batch", ")", "\n", "\n", "", "if", "self", ".", "RL_training", ":", "\n", "                ", "\"train the RL network\"", "\n", "self", ".", "train", "(", "training", "=", "True", ")", "\n", "for", "gradient_step", "in", "range", "(", "self", ".", "gradient_steps", ")", ":", "\n", "                    ", "self", ".", "update_network", "(", "\n", "bool", "(", "gradient_step", "%", "self", ".", "actor_update_interval", "==", "0", ")", "\n", ")", "\n", "self", ".", "elapsed_gradients", "+=", "1", "\n", "\n", "\"Update target networks\"", "\n", "if", "(", "gradient_step", "+", "1", ")", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "                        ", "self", ".", "soft_update_target_network", "(", "\n", "self", ".", "critic_target_network", ",", "self", ".", "critic_network", "\n", ")", "\n", "", "", "self", ".", "train", "(", "training", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "RL_training", ":", "\n", "                ", "if", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "\"do the evaluation\"", "\n", "if", "self", ".", "elapsed_epochs", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                        ", "\"Compute episode returns averaged over n_eval_rollouts\"", "\n", "success_rate", "=", "self", ".", "_eval_agent", "(", ")", "\n", "\"Update logs\"", "\n", "self", ".", "update_success", "(", "success_rate", ")", "\n", "\"Update early_stopper\"", "\n", "self", ".", "early_stopper", "(", "\n", "self", ".", "eval_patience", ",", "Nepochs", "=", "self", ".", "elapsed_epochs", "\n", ")", "\n", "prefix", "=", "\"best\"", "if", "self", ".", "early_stopper", ".", "counter", "==", "0", "else", "\"last\"", "\n", "\"Save models\"", "\n", "self", ".", "save_chekpoint", "(", "prefix", ")", "\n", "if", "(", "self", ".", "elapsed_epochs", "==", "self", ".", "min_Nepochs", ")", "or", "(", "\n", "success_rate", ">=", "self", ".", "min_reward", "\n", ")", ":", "\n", "                            ", "if", "self", ".", "early_stopper", ".", "patience", "!=", "self", ".", "newPatience", ":", "\n", "                                ", "self", ".", "early_stopper", ".", "patience", "=", "self", ".", "newPatience", "\n", "print", "(", "\n", "\"\\nearly_stopper.patience is changed to: %s\\n\"", "\n", "%", "self", ".", "early_stopper", ".", "patience", "\n", ")", "\n", "", "", "\"Plot, update config and save config in log folder\"", "\n", "self", ".", "log_results", "(", "prefix", ")", "\n", "if", "self", ".", "agent", "==", "\"SAC\"", ":", "\n", "                            ", "self", ".", "entropyPi_sum", "=", "0", "\n", "self", ".", "alpha_sum", "=", "0", "\n", "", "print", "(", "\"  end RL evaluation\"", ")", "\n", "", "self", ".", "elapsed_epochs", "+=", "1", "\n", "\n", "if", "self", ".", "early_stopper", ".", "early_stop", ":", "\n", "                        ", "self", ".", "config", "[", "\"early_stop\"", "]", "=", "True", "\n", "\"Save last models\"", "\n", "self", ".", "save_chekpoint", "(", "prefix", "=", "\"last\"", ")", "\n", "\"Save last config in log folder\"", "\n", "self", ".", "saveConfig", "(", ")", "\n", "break", "\n", "\n", "", "", "", "if", "not", "self", ".", "RL_training", ":", "\n", "                ", "if", "self", ".", "doneAlive", ":", "\n", "                    ", "self", ".", "RL_training", "=", "(", "\n", "self", ".", "buffer", ".", "current_size", ">=", "self", ".", "config", "[", "\"bufferCapacity\"", "]", "//", "2", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "RL_training", "=", "(", "\n", "self", ".", "buffer", ".", "current_size", ">=", "self", ".", "buffer", ".", "numEpBuffer", "//", "2", "\n", ")", "\n", "", "if", "self", ".", "RL_training", ":", "\n", "                    ", "self", ".", "enoughRollout", "=", "True", "\n", "print", "(", "\n", "\"********************* Enough rollouts to start RL_training *********************\"", "\n", ")", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train": [[341, 344], ["agent.Agent.actor_network.train", "agent.Agent.critic_network.train"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train"], ["", "def", "train", "(", "self", ",", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "actor_network", ".", "train", "(", "training", ")", "\n", "self", ".", "critic_network", ".", "train", "(", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.to_device": [[345, 350], ["torch.device", "agent.Agent.actor_network.to", "agent.Agent.critic_network.to", "agent.Agent.critic_target_network.to"], "methods", ["None"], ["", "def", "to_device", "(", "self", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "torchDevice", "=", "torch", ".", "device", "(", "device", ")", "\n", "self", ".", "actor_network", ".", "to", "(", "torchDevice", ")", "\n", "self", ".", "critic_network", ".", "to", "(", "torchDevice", ")", "\n", "self", ".", "critic_target_network", ".", "to", "(", "torchDevice", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.QNetwork.__init__": [[10, 41], ["torch.Module.__init__", "SRL4RL.utils.utils.get_hidden", "print", "len", "SRL4RL.utils.nn_torch.MLP_Module", "SRL4RL.utils.nn_torch.MLP_Module", "SRL4RL.utils.nn_torch.import_weight_init", "sac_nn.QNetwork.q1_network.apply", "sac_nn.QNetwork.q2_network.apply"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.get_hidden", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_weight_init"], ["    ", "def", "__init__", "(", "self", ",", "env_params", ",", "config", ")", ":", "\n", "        ", "super", "(", "QNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "method", "=", "config", "[", "\"method\"", "]", "\n", "\n", "nb_hidden", "=", "get_hidden", "(", "config", "[", "\"nb_hidden\"", "]", ")", "\n", "print", "(", "\"nb_hidden critic:\"", ",", "nb_hidden", ")", "\n", "\n", "\"Q1 & Q2 architectures\"", "\n", "nb_layer", "=", "len", "(", "nb_hidden", ")", "\n", "if", "nb_layer", ">", "1", ":", "\n", "            ", "assert", "not", "config", "[", "\"linearApprox\"", "]", ",", "\"linearApprox with multiple nb_hidden!\"", "\n", "activation", "=", "config", "[", "\"activation\"", "]", "\n", "", "elif", "nb_layer", "==", "1", ":", "\n", "            ", "if", "config", "[", "\"linearApprox\"", "]", ":", "\n", "                ", "activation", "=", "None", "# to make a linear policy network", "\n", "", "else", ":", "\n", "                ", "activation", "=", "config", "[", "\"activation\"", "]", "\n", "\n", "", "", "nb_hidden", "+=", "[", "1", "]", "\n", "input_dim", "=", "env_params", "[", "\"obs\"", "]", "[", "0", "]", "+", "env_params", "[", "\"goal\"", "]", "+", "env_params", "[", "\"action\"", "]", "\n", "self", ".", "q1_network", "=", "MLP_Module", "(", "\n", "input_dim", ",", "nb_hidden", ",", "activation", "=", "activation", ",", "name", "=", "\"Q1\"", "\n", ")", "\n", "self", ".", "q2_network", "=", "MLP_Module", "(", "\n", "input_dim", ",", "nb_hidden", ",", "activation", "=", "activation", ",", "name", "=", "\"Q2\"", "\n", ")", "\n", "\n", "if", "config", "[", "\"weight_init\"", "]", "!=", "\"none\"", ":", "\n", "            ", "weight_init_", "=", "import_weight_init", "(", "config", "[", "\"weight_init\"", "]", ")", "\n", "self", ".", "q1_network", ".", "apply", "(", "weight_init_", ")", "\n", "self", ".", "q2_network", ".", "apply", "(", "weight_init_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.QNetwork.forward": [[42, 49], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "sac_nn.QNetwork.q1_network", "sac_nn.QNetwork.q2_network", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "action_", ",", "x", ",", "goal", "=", "None", ")", ":", "\n", "        ", "if", "goal", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "goal", "]", ",", "dim", "=", "1", ")", "\n", "", "xu", "=", "torch", ".", "cat", "(", "[", "x", ",", "action_", "]", ",", "1", ")", "\n", "x1", "=", "self", ".", "q1_network", "(", "xu", ")", "\n", "x2", "=", "self", ".", "q2_network", "(", "xu", ")", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.__init__": [[63, 111], ["torch.Module.__init__", "SRL4RL.utils.utils.get_hidden", "len", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "SRL4RL.utils.nn_torch.MLP_mdn", "SRL4RL.utils.nn_torch.MLP_Module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "SRL4RL.utils.nn_torch.import_weight_init", "sac_nn.GaussianPolicy.pi_network.apply"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.get_hidden", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.MLP_mdn", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.import_weight_init"], ["    ", "def", "__init__", "(", "self", ",", "env_params", ",", "config", ")", ":", "\n", "        ", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "method", "=", "config", "[", "\"method\"", "]", "\n", "\n", "self", ".", "log_sig_min", "=", "-", "10", "\n", "self", ".", "log_sig_max", "=", "2", "\n", "\n", "nb_hidden", "=", "get_hidden", "(", "config", "[", "\"nb_hidden\"", "]", ")", "\n", "nb_layer", "=", "len", "(", "nb_hidden", ")", "\n", "assert", "config", "[", "\"cutoff\"", "]", "<", "nb_layer", ",", "\"not enoug layers for cutoff\"", "\n", "\n", "print", "(", "\"nb_hidden actor: {}, cutoff: {}\"", ".", "format", "(", "nb_hidden", ",", "config", "[", "\"cutoff\"", "]", ")", ")", "\n", "if", "nb_layer", ">", "1", ":", "\n", "            ", "assert", "not", "config", "[", "\"linearApprox\"", "]", ",", "\"linearApprox with multiple nb_hidden!\"", "\n", "", "elif", "nb_layer", "==", "1", ":", "\n", "            ", "if", "config", "[", "\"linearApprox\"", "]", ":", "\n", "                ", "with_last_actv", "=", "False", "# to make a linear policy network", "\n", "", "else", ":", "\n", "                ", "with_last_actv", "=", "True", "\n", "\n", "", "", "input_dim", "=", "env_params", "[", "\"obs\"", "]", "[", "0", "]", "+", "env_params", "[", "\"goal\"", "]", "\n", "if", "config", "[", "\"cutoff\"", "]", ">", "0", ":", "\n", "            ", "self", ".", "pi_network", ",", "self", ".", "mean_linear", ",", "self", ".", "log_sig_linear", ",", "_", "=", "MLP_mdn", "(", "\n", "input_dim", ",", "\n", "nb_hidden", "+", "[", "env_params", "[", "\"action\"", "]", "]", ",", "\n", "cutoff", "=", "config", "[", "\"cutoff\"", "]", ",", "\n", "activation", "=", "config", "[", "\"activation\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pi_network", "=", "MLP_Module", "(", "\n", "input_dim", ",", "\n", "nb_hidden", ",", "\n", "activation", "=", "config", "[", "\"activation\"", "]", ",", "\n", "with_last_actv", "=", "with_last_actv", ",", "\n", "name", "=", "\"Pi\"", ",", "\n", ")", "\n", "self", ".", "mean_linear", "=", "nn", ".", "Linear", "(", "nb_hidden", "[", "-", "1", "]", ",", "env_params", "[", "\"action\"", "]", ")", "\n", "self", ".", "log_sig_linear", "=", "nn", ".", "Linear", "(", "nb_hidden", "[", "-", "1", "]", ",", "env_params", "[", "\"action\"", "]", ")", "\n", "\n", "", "if", "config", "[", "\"weight_init\"", "]", "!=", "\"none\"", ":", "\n", "            ", "weight_init_", "=", "import_weight_init", "(", "config", "[", "\"weight_init\"", "]", ")", "\n", "self", ".", "pi_network", ".", "apply", "(", "weight_init_", ")", "\n", "\n", "", "self", ".", "action_scale", "=", "torch", ".", "tensor", "(", "\n", "(", "env_params", "[", "\"action_max\"", "]", "-", "env_params", "[", "\"action_min\"", "]", ")", "/", "2.0", "\n", ")", "\n", "self", ".", "action_bias", "=", "torch", ".", "tensor", "(", "\n", "(", "env_params", "[", "\"action_max\"", "]", "+", "env_params", "[", "\"action_min\"", "]", ")", "/", "2.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.forward": [[113, 124], ["sac_nn.GaussianPolicy.pi_network", "sac_nn.GaussianPolicy.mean_linear", "sac_nn.GaussianPolicy.log_sig_linear", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "oneHot", ",", "goal", "=", "None", ")", ":", "\n", "        ", "if", "goal", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "goal", "]", ",", "dim", "=", "1", ")", "\n", "", "x", "=", "self", ".", "pi_network", "(", "x", ")", "\n", "mean", "=", "self", ".", "mean_linear", "(", "x", ")", "\n", "log_sig", "=", "self", ".", "log_sig_linear", "(", "x", ")", "\n", "log_sig", "=", "torch", ".", "clamp", "(", "log_sig", ",", "min", "=", "self", ".", "log_sig_min", ",", "max", "=", "self", ".", "log_sig_max", ")", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "mean", ")", ".", "any", "(", ")", ".", "item", "(", ")", ",", "\"isnan in mean!!\"", "\n", "assert", "not", "torch", ".", "isnan", "(", "log_sig", ")", ".", "any", "(", ")", ".", "item", "(", ")", ",", "\"isnan in log_sig!!\"", "\n", "return", "mean", ",", "log_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.normalizePi": [[125, 137], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tanh.pow", "torch.tanh.pow"], "methods", ["None"], ["", "def", "normalizePi", "(", "self", ",", "mu", ",", "pi", ",", "log_pi", ")", ":", "\n", "        ", "\"\"\"Apply squashing function.\n        See appendix C from https://arxiv.org/pdf/1812.05905.pdf\n        \"\"\"", "\n", "mu", "=", "torch", ".", "tanh", "(", "mu", ")", "*", "self", ".", "action_scale", "+", "self", ".", "action_bias", "\n", "pi", "=", "torch", ".", "tanh", "(", "pi", ")", "\n", "epsilon", "=", "1e-6", "# Avoid NaN (prevents division by zero or log of zero)", "\n", "log_pi", "-=", "torch", ".", "log", "(", "self", ".", "action_scale", "*", "(", "1", "-", "pi", ".", "pow", "(", "2", ")", ")", "+", "epsilon", ")", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", "\n", ")", "\n", "pi", "=", "pi", "*", "self", ".", "action_scale", "+", "self", ".", "action_bias", "\n", "return", "mu", ",", "pi", ",", "log_pi", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample": [[138, 150], ["sac_nn.GaussianPolicy.forward", "log_sig.exp", "sac_nn.sampleNormal", "sac_nn.gaussian_logprob", "sac_nn.GaussianPolicy.normalizePi", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any().item", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.forward", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.sampleNormal", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.gaussian_logprob", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.normalizePi"], ["", "def", "sample", "(", "self", ",", "state", ",", "oneHot", "=", "False", ",", "goal", "=", "None", ")", ":", "\n", "        ", "mu", ",", "log_sig", "=", "self", ".", "forward", "(", "state", ",", "oneHot", "=", "oneHot", ",", "goal", "=", "goal", ")", "\n", "sig", "=", "log_sig", ".", "exp", "(", ")", "\n", "# for repameterization trick (mu + sig * N(0,1))", "\n", "# Pre-squash distribution and sample", "\n", "x_t", ",", "noise", "=", "sampleNormal", "(", "mu", "=", "mu", ",", "sig", "=", "sig", ")", "\n", "log_pi", "=", "gaussian_logprob", "(", "noise", ",", "log_sig", ")", "\n", "mu", ",", "pi", ",", "log_pi", "=", "self", ".", "normalizePi", "(", "mu", ",", "x_t", ",", "log_pi", ")", "\n", "\n", "# Deterministic action", "\n", "assert", "not", "torch", ".", "isnan", "(", "pi", ")", ".", "any", "(", ")", ".", "item", "(", ")", ",", "\"isnan in pi!!\"", "\n", "return", "pi", ",", "log_pi", ",", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.select_actions": [[151, 158], ["SRL4RL.utils.nn_torch.pytorch2numpy().squeeze", "sac_nn.GaussianPolicy.sample", "sac_nn.GaussianPolicy.sample", "SRL4RL.utils.nn_torch.pytorch2numpy"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy"], ["", "def", "select_actions", "(", "self", ",", "state", ",", "evaluate", "=", "False", ",", "goal", "=", "None", ")", ":", "\n", "        ", "if", "evaluate", ":", "\n", "            ", "_", ",", "_", ",", "pi", "=", "self", ".", "sample", "(", "state", ",", "goal", "=", "goal", ")", "\n", "", "else", ":", "\n", "            ", "pi", ",", "_", ",", "_", "=", "self", ".", "sample", "(", "state", ",", "goal", "=", "goal", ")", "\n", "# return action.detach().cpu().numpy()[0]", "\n", "", "return", "pytorch2numpy", "(", "pi", ")", ".", "squeeze", "(", "axis", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.gaussian_logprob": [[51, 55], ["noise.size", "numpy.log", "noise.pow"], "function", ["None"], ["", "", "def", "gaussian_logprob", "(", "noise", ",", "log_sig", ")", ":", "\n", "    ", "\"\"\"Compute Gaussian log probability.\"\"\"", "\n", "residual", "=", "(", "-", "0.5", "*", "noise", ".", "pow", "(", "2", ")", "-", "log_sig", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "residual", "-", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "*", "noise", ".", "size", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.sampleNormal": [[57, 60], ["torch.randn_like", "torch.randn_like"], "function", ["None"], ["", "def", "sampleNormal", "(", "mu", ",", "sig", ")", ":", "\n", "    ", "noise", "=", "torch", ".", "randn_like", "(", "mu", ")", "\n", "return", "mu", "+", "noise", "*", "sig", ",", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_agent.sac_agent.__init__": [[16, 72], ["SRL4RL.rl.modules.agent.Agent.__init__", "SRL4RL.rl.utils.mpi_utils.sync_networks", "SRL4RL.rl.utils.mpi_utils.sync_networks", "SRL4RL.rl.modules.sac_nn.QNetwork", "sac_agent.sac_agent.critic_target_network.load_state_dict", "sac_agent.sac_agent.critic_target_network.parameters", "torch.optim.Adam", "torch.optim.Adam", "sac_agent.sac_agent.to_device", "sac_agent.sac_agent.train", "SRL4RL.rl.modules.agent_utils.loadPi", "SRL4RL.rl.modules.sac_nn.GaussianPolicy", "SRL4RL.rl.modules.sac_nn.QNetwork", "sac_agent.sac_agent.critic_network.state_dict", "sac_agent.sac_agent.actor_network.parameters", "sac_agent.sac_agent.critic_network.parameters", "numpy.float32", "SRL4RL.utils.nn_torch.numpy2pytorch", "sac_agent.sac_agent.log_alpha.exp", "SRL4RL.rl.utils.mpi_utils.sync_params", "torch.optim.Adam", "sac_agent.sac_agent.actor_network.train", "sac_agent.sac_agent.critic_network.train", "numpy.array", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils.sync_networks", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils.sync_networks", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.to_device", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.loadPi", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.mpi_utils.sync_params", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent.Agent.train"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env", ",", "env_params", ",", "runner", ")", ":", "\n", "# create the network", "\n", "        ", "if", "config", "[", "\"my_dir\"", "]", ":", "\n", "            ", "suffix", "=", "\"_last\"", "if", "\"last_eval\"", "in", "config", "else", "\"_best\"", "\n", "(", "\n", "config", "[", "\"o_mean\"", "]", ",", "\n", "config", "[", "\"o_std\"", "]", ",", "\n", "config", "[", "\"g_mean\"", "]", ",", "\n", "config", "[", "\"g_std\"", "]", ",", "\n", "self", ".", "actor_network", ",", "\n", "self", ".", "critic_network", ",", "\n", ")", "=", "loadPi", "(", "config", "[", "\"my_dir\"", "]", ",", "model_type", "=", "\"model\"", "+", "suffix", ",", "withQ", "=", "True", ")", "\n", "self", ".", "actor_network", ".", "train", "(", ")", ",", "self", ".", "critic_network", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "actor_network", "=", "GaussianPolicy", "(", "env_params", ",", "config", ")", "\n", "self", ".", "critic_network", "=", "QNetwork", "(", "env_params", ",", "config", ")", "\n", "", "super", "(", "sac_agent", ",", "self", ")", ".", "__init__", "(", "config", ",", "env", ",", "env_params", ",", "runner", ")", "\n", "# sync the networks across the cpus", "\n", "sync_networks", "(", "self", ".", "actor_network", ")", "\n", "sync_networks", "(", "self", ".", "critic_network", ")", "\n", "# build up the target network", "\n", "self", ".", "critic_target_network", "=", "QNetwork", "(", "env_params", ",", "config", ")", "\n", "# load the weights into the target networks", "\n", "self", ".", "critic_target_network", ".", "load_state_dict", "(", "self", ".", "critic_network", ".", "state_dict", "(", ")", ")", "\n", "for", "p", "in", "self", ".", "critic_target_network", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "policy_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "actor_network", ".", "parameters", "(", ")", ",", "lr", "=", "config", "[", "\"lr_actor\"", "]", "\n", ")", "\n", "self", ".", "critic_network_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "critic_network", ".", "parameters", "(", ")", ",", "lr", "=", "config", "[", "\"lr_critic\"", "]", "\n", ")", "\n", "\n", "device", "=", "self", ".", "cpu", "\n", "self", ".", "to_device", "(", "device", "=", "device", ")", "\n", "# Target Entropy", "\n", "self", ".", "automatic_entropy_tuning", "=", "(", "\n", "config", "[", "\"automatic_entropy_tuning\"", "]", "if", "self", ".", "agent", "==", "\"SAC\"", "else", "False", "\n", ")", "\n", "if", "self", ".", "automatic_entropy_tuning", ":", "\n", "            ", "self", ".", "target_entropy", "=", "np", ".", "float32", "(", "-", "self", ".", "env_params", "[", "\"action\"", "]", ")", "\n", "self", ".", "log_alpha", "=", "numpy2pytorch", "(", "\n", "np", ".", "array", "(", "np", ".", "log", "(", "config", "[", "\"init_temperature\"", "]", ")", ")", ",", "\n", "differentiable", "=", "True", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "self", ".", "alpha", "=", "self", ".", "log_alpha", ".", "exp", "(", ")", "\n", "sync_params", "(", "self", ".", "log_alpha", ")", "\n", "self", ".", "log_alpha_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "self", ".", "log_alpha", "]", ",", "lr", "=", "config", "[", "\"lr_alpha\"", "]", "\n", ")", "\n", "\n", "", "self", ".", "train", "(", "training", "=", "False", ")", "\n", "self", ".", "entropyPi_sum", "=", "0", "\n", "self", ".", "alpha_sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_agent.sac_agent.update_network": [[74, 155], ["sac_agent.sac_agent.buffer.sample", "sac_agent.sac_agent.prepare_data", "sac_agent.sac_agent.critic_network", "sac_agent.sac_agent.critic_network_optim.zero_grad", "critic_network_loss.backward", "sac_agent.sac_agent.critic_network_optim.step", "torch.no_grad", "sac_agent.sac_agent.actor_network.sample", "sac_agent.sac_agent.critic_target_network", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "sac_agent.sac_agent.actor_network.sample", "sac_agent.sac_agent.critic_network", "torch.min", "SRL4RL.utils.nn_torch.pytorch2numpy", "SRL4RL.utils.nn_torch.pytorch2numpy", "sac_agent.sac_agent.policy_optim.zero_grad", "policy_loss.backward", "sac_agent.sac_agent.policy_optim.step", "torch.min", "log_pi.mean", "sac_agent.sac_agent.log_alpha_optim.zero_grad", "alpha_loss.backward", "sac_agent.sac_agent.log_alpha_optim.step", "sac_agent.sac_agent.log_alpha.exp", "sac_agent.sac_agent.alpha.detach", "sac_agent.sac_agent.alpha.detach"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer.prepare_data", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.sac_nn.GaussianPolicy.sample", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.pytorch2numpy", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.runner.StateWrapper.step"], ["", "def", "update_network", "(", "self", ",", "update_actor_and_alpha", "=", "True", ")", ":", "\n", "\n", "# sample the episodes", "\n", "        ", "transitions", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "# do the normalization", "\n", "device", "=", "self", ".", "cpu", "\n", "(", "\n", "inputs_norm_tensor", ",", "\n", "inputs_next_norm_tensor", ",", "\n", "actions_tensor", ",", "\n", "r_tensor", ",", "\n", "g_tensor", ",", "\n", "not_done_tensor", ",", "\n", ")", "=", "self", ".", "prepare_data", "(", "transitions", ",", "device", "=", "device", ")", "\n", "# Bellman backup for Q functions", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Target actions come from *current* policy", "\n", "            ", "actions_next", ",", "log_pi_next", ",", "_", "=", "self", ".", "actor_network", ".", "sample", "(", "\n", "inputs_next_norm_tensor", ",", "oneHot", "=", "True", ",", "goal", "=", "g_tensor", "\n", ")", "\n", "# Target Q-values", "\n", "qf1_next_target", ",", "qf2_next_target", "=", "self", ".", "critic_target_network", "(", "\n", "actions_next", ",", "inputs_next_norm_tensor", ",", "goal", "=", "g_tensor", "\n", ")", "\n", "# Compute the target Q value: min over all critic_networks targets and add entropy term", "\n", "min_qf_next", "=", "(", "\n", "torch", ".", "min", "(", "qf1_next_target", ",", "qf2_next_target", ")", "\n", "-", "self", ".", "alpha", ".", "detach", "(", ")", "*", "log_pi_next", "\n", ")", "\n", "# td error + entropy term", "\n", "qf_target", "=", "r_tensor", "+", "not_done_tensor", "*", "self", ".", "gamma", "*", "min_qf_next", "\n", "\n", "# Get current Q estimates for each critic_network network", "\n", "# using action from the replay buffer", "\n", "", "qf1", ",", "qf2", "=", "self", ".", "critic_network", "(", "\n", "actions_tensor", ",", "inputs_norm_tensor", ",", "goal", "=", "g_tensor", "\n", ")", "\n", "# Compute critic_network loss: MSE loss against Bellman backup", "\n", "critic_network_loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "\n", "qf1", ",", "qf_target", "\n", ")", "+", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "qf2", ",", "qf_target", ")", "\n", "\n", "\"\"\"\n        Update networks\n        \"\"\"", "\n", "# update the qf1 critic_network_network", "\n", "# Optimize the critic_network", "\n", "self", ".", "critic_network_optim", ".", "zero_grad", "(", ")", "\n", "critic_network_loss", ".", "backward", "(", ")", "\n", "# sync_grads(self.critic_network)", "\n", "self", ".", "critic_network_optim", ".", "step", "(", ")", "\n", "\n", "if", "update_actor_and_alpha", ":", "\n", "# Compute actor_network loss", "\n", "# Mean over all critic_network networks", "\n", "            ", "pi", ",", "log_pi", ",", "_", "=", "self", ".", "actor_network", ".", "sample", "(", "\n", "inputs_norm_tensor", ",", "oneHot", "=", "True", ",", "goal", "=", "g_tensor", "\n", ")", "\n", "qf1_pi", ",", "qf2_pi", "=", "self", ".", "critic_network", "(", "pi", ",", "inputs_norm_tensor", ",", "goal", "=", "g_tensor", ")", "\n", "min_qf_pi", "=", "torch", ".", "min", "(", "qf1_pi", ",", "qf2_pi", ")", "\n", "# Entropy-regularized policy loss", "\n", "policy_loss", "=", "(", "self", ".", "alpha", ".", "detach", "(", ")", "*", "log_pi", "-", "min_qf_pi", ")", ".", "mean", "(", ")", "\n", "self", ".", "entropyPi_sum", "-=", "pytorch2numpy", "(", "log_pi", ".", "mean", "(", ")", ")", "\n", "self", ".", "alpha_sum", "+=", "pytorch2numpy", "(", "self", ".", "alpha", ")", "\n", "\"\"\"\n              Update networks\n            \"\"\"", "\n", "# Optimize the actor_network", "\n", "self", ".", "policy_optim", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "self", ".", "policy_optim", ".", "step", "(", ")", "\n", "\n", "# Optimize entropy coefficient, also called entropy temperature or alpha in the paper", "\n", "if", "self", ".", "automatic_entropy_tuning", ":", "\n", "                ", "self", ".", "log_alpha_optim", ".", "zero_grad", "(", ")", "\n", "alpha_loss", "=", "-", "(", "\n", "self", ".", "alpha", "*", "(", "log_pi", "+", "self", ".", "target_entropy", ")", ".", "detach", "(", ")", "\n", ")", ".", "mean", "(", ")", "\n", "alpha_loss", ".", "backward", "(", ")", "\n", "self", ".", "log_alpha_optim", ".", "step", "(", ")", "\n", "self", ".", "alpha", "=", "self", ".", "log_alpha", ".", "exp", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer.__init__": [[72, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._preproc_og": [[77, 83], ["torch.is_tensor", "torch.clamp", "numpy.clip"], "methods", ["None"], ["", "def", "_preproc_og", "(", "self", ",", "o", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "o", ")", ":", "\n", "            ", "o", "=", "torch", ".", "clamp", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "", "else", ":", "\n", "            ", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._preproc_inputs": [[85, 97], ["agent_utils.Trainer.o_norm.normalize", "SRL4RL.utils.nn_torch.numpy2pytorch().unsqueeze", "print", "numpy.clip", "agent_utils.Trainer.g_norm.normalize", "numpy.concatenate", "SRL4RL.utils.nn_torch.numpy2pytorch", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.normalize", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.normalize", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "_preproc_inputs", "(", "self", ",", "obs", ",", "g", "=", "None", ",", "device", "=", "CPU", ")", ":", "\n", "        ", "if", "(", "np", ".", "abs", "(", "obs", ")", ">", "self", ".", "clip_obs", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "\"\\nstate is HUGE\\n\"", ")", "\n", "obs", "=", "np", ".", "clip", "(", "obs", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "", "obs_norm", "=", "self", ".", "o_norm", ".", "normalize", "(", "obs", ")", "\n", "if", "self", ".", "with_goal", ":", "\n", "            ", "g_norm", "=", "self", ".", "g_norm", ".", "normalize", "(", "g", ")", "\n", "obs_norm", "=", "np", ".", "concatenate", "(", "[", "obs_norm", ",", "g_norm", "]", ")", "\n", "", "obs_norm", "=", "numpy2pytorch", "(", "\n", "obs_norm", ",", "differentiable", "=", "False", ",", "device", "=", "device", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "obs_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer.normalize_goal": [[98, 102], ["agent_utils.Trainer.g_norm.normalize", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.normalize", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "normalize_goal", "(", "self", ",", "g", ",", "device", "=", "CPU", ")", ":", "\n", "        ", "g_norm", "=", "self", ".", "g_norm", ".", "normalize", "(", "g", ")", "\n", "g_tensor", "=", "numpy2pytorch", "(", "g_norm", ",", "differentiable", "=", "False", ",", "device", "=", "device", ")", "\n", "return", "g_tensor", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._update_normalizer": [[104, 131], ["SRL4RL.rl.utils.replay_buffer.sample_transitions", "agent_utils.Trainer._preproc_og", "agent_utils.Trainer.o_norm.update", "agent_utils.Trainer.o_norm.recompute_stats", "agent_utils.Trainer.g_norm.update", "agent_utils.Trainer.g_norm.recompute_stats"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.replay_buffer.sample_transitions", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._preproc_og", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.update", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.recompute_stats", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.update", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.recompute_stats"], ["", "def", "_update_normalizer", "(", "self", ",", "episode_batch", ")", ":", "\n", "        ", "mb_obs", ",", "mb_g", ",", "mb_r", ",", "mb_actions", "=", "episode_batch", "\n", "mb_obs_next", "=", "mb_obs", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "# create the new buffer to store them", "\n", "if", "self", ".", "with_goal", ":", "\n", "            ", "buffer_temp", "=", "{", "\n", "\"obs\"", ":", "mb_obs", ",", "\n", "\"g\"", ":", "mb_g", ",", "\n", "\"r\"", ":", "mb_r", ",", "\n", "\"actions\"", ":", "mb_actions", ",", "\n", "\"obs_next\"", ":", "mb_obs_next", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "buffer_temp", "=", "{", "\n", "\"obs\"", ":", "mb_obs", ",", "\n", "\"r\"", ":", "mb_r", ",", "\n", "\"actions\"", ":", "mb_actions", ",", "\n", "\"obs_next\"", ":", "mb_obs_next", ",", "\n", "}", "\n", "", "transitions", "=", "sample_transitions", "(", "buffer_temp", ",", "batch_size_in_transitions", "=", "None", ")", "\n", "if", "self", ".", "with_goal", ":", "\n", "            ", "self", ".", "g_norm", ".", "update", "(", "transitions", "[", "\"g\"", "]", ")", "\n", "self", ".", "g_norm", ".", "recompute_stats", "(", ")", "\n", "# pre process the obs and g", "\n", "", "transitions", "[", "\"obs\"", "]", "=", "self", ".", "_preproc_og", "(", "transitions", "[", "\"obs\"", "]", ")", "\n", "self", ".", "o_norm", ".", "update", "(", "transitions", "[", "\"obs\"", "]", ")", "\n", "self", ".", "o_norm", ".", "recompute_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer.prepare_data": [[132, 178], ["agent_utils.Trainer._preproc_og", "agent_utils.Trainer._preproc_og", "agent_utils.Trainer.o_norm.normalize", "agent_utils.Trainer.o_norm.normalize", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch().reshape", "agent_utils.Trainer.g_norm.normalize", "torch.is_tensor", "torch.is_tensor", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch", "SRL4RL.utils.nn_torch.numpy2pytorch", "torch.cat", "torch.cat", "numpy.concatenate", "numpy.concatenate", "SRL4RL.utils.nn_torch.numpy2pytorch", "numpy.concatenate.to", "numpy.concatenate.to"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._preproc_og", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Trainer._preproc_og", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.normalize", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.normalize", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.normalizer.TimeNormalizer.normalize", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "prepare_data", "(", "self", ",", "transitions", ",", "device", "=", "CPU", ")", ":", "\n", "        ", "\"pre-process the observation and goal\"", "\n", "g_tensor", ",", "not_dones", "=", "None", ",", "1", "\n", "transitions", "[", "\"obs\"", "]", "=", "self", ".", "_preproc_og", "(", "transitions", "[", "\"obs\"", "]", ")", "\n", "transitions", "[", "\"obs_next\"", "]", "=", "self", ".", "_preproc_og", "(", "transitions", "[", "\"obs_next\"", "]", ")", "\n", "obs_norm", "=", "self", ".", "o_norm", ".", "normalize", "(", "transitions", "[", "\"obs\"", "]", ")", "\n", "obs_next_norm", "=", "self", ".", "o_norm", ".", "normalize", "(", "transitions", "[", "\"obs_next\"", "]", ")", "\n", "if", "self", ".", "with_goal", ":", "\n", "            ", "g_norm", "=", "self", ".", "g_norm", ".", "normalize", "(", "transitions", "[", "\"g\"", "]", ")", "\n", "if", "torch", ".", "is_tensor", "(", "obs_norm", ")", ":", "\n", "                ", "g_norm", "=", "numpy2pytorch", "(", "g_norm", ",", "differentiable", "=", "False", ",", "device", "=", "device", ")", "\n", "inputs_norm_tensor", "=", "torch", ".", "cat", "(", "[", "obs_norm", ".", "to", "(", "device", ")", ",", "g_norm", "]", ",", "1", ")", "\n", "inputs_next_norm_tensor", "=", "torch", ".", "cat", "(", "\n", "[", "obs_next_norm", ".", "to", "(", "device", ")", ",", "g_norm", "]", ",", "1", "\n", ")", "\n", "", "else", ":", "\n", "                ", "obs_norm", "=", "np", ".", "concatenate", "(", "[", "obs_norm", ",", "g_norm", "]", ",", "axis", "=", "1", ")", "\n", "obs_next_norm", "=", "np", ".", "concatenate", "(", "[", "obs_next_norm", ",", "g_norm", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "if", "not", "torch", ".", "is_tensor", "(", "obs_norm", ")", ":", "\n", "# start to do the update, transfer them into the tensor", "\n", "            ", "inputs_norm_tensor", "=", "numpy2pytorch", "(", "\n", "obs_norm", ",", "differentiable", "=", "False", ",", "device", "=", "device", "\n", ")", "\n", "inputs_next_norm_tensor", "=", "numpy2pytorch", "(", "\n", "obs_next_norm", ",", "differentiable", "=", "False", ",", "device", "=", "device", "\n", ")", "\n", "", "if", "self", ".", "doneAlive", ":", "\n", "            ", "not_dones", "=", "numpy2pytorch", "(", "\n", "transitions", "[", "\"not_dones\"", "]", ",", "differentiable", "=", "False", ",", "device", "=", "device", "\n", ")", "\n", "\n", "", "actions_tensor", "=", "numpy2pytorch", "(", "\n", "transitions", "[", "\"actions\"", "]", ",", "differentiable", "=", "False", ",", "device", "=", "device", "\n", ")", "\n", "r_tensor", "=", "numpy2pytorch", "(", "\n", "transitions", "[", "\"r\"", "]", ",", "differentiable", "=", "False", ",", "device", "=", "device", "\n", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "(", "\n", "inputs_norm_tensor", ",", "\n", "inputs_next_norm_tensor", ",", "\n", "actions_tensor", ",", "\n", "r_tensor", ",", "\n", "g_tensor", ",", "\n", "not_dones", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__": [[182, 248], ["agent_utils.Trainer.__init__", "print", "time.time", "SRL4RL.utils.utils.EarlyStopping", "SRL4RL.utils.utils.EarlyStopping", "agent_utils.Saver.runner.save_state_model", "SRL4RL.utils.nn_torch.save_model"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.__init__", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.ae.utils.AERunner.save_state_model", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.save_model"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\"Initialize early_stopper\"", "\n", "self", ".", "min_reward", "=", "np", ".", "inf", "\n", "\"one epoch corresponds to gradient_steps\"", "\n", "\"patience corresponds to min_gradientSteps = [patience*gradient_steps*eval_interval] before early-stopping\"", "\n", "self", ".", "min_Nepochs", "=", "np", ".", "inf", "\n", "if", "self", ".", "env_name", "in", "[", "\n", "\"TurtlebotEnv-v0\"", ",", "\n", "\"TurtlebotMazeEnv-v0\"", ",", "\n", "\"ReacherBulletEnv-v0\"", ",", "\n", "]", ":", "\n", "            ", "self", ".", "min_reward", "=", "1.0", "\n", "self", ".", "newPatience", "=", "400", "\n", "if", "config", "[", "\"method\"", "]", "==", "\"random_nn\"", ":", "\n", "                ", "self", ".", "newPatience", "=", "config", "[", "\"patience\"", "]", "=", "config", "[", "\"patience\"", "]", "*", "4", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "newPatience", "=", "50", "\n", "\n", "", "if", "config", "[", "\"method\"", "]", "in", "[", "\"pure_noise\"", ",", "\"openLoop\"", "]", ":", "\n", "            ", "self", ".", "newPatience", "=", "config", "[", "\"patience\"", "]", "=", "config", "[", "\"patience\"", "]", "*", "4", "\n", "", "print", "(", "\n", "\"min_Nepochs: {}, min_reward: {}\"", ".", "format", "(", "self", ".", "min_Nepochs", ",", "self", ".", "min_reward", ")", "\n", ")", "\n", "self", ".", "config", "[", "\"early_stop\"", "]", "=", "False", "\n", "\n", "if", "config", "[", "\"my_dir\"", "]", ":", "\n", "            ", "config", "[", "\"random_buffer\"", "]", "=", "False", "\n", "prefix", "=", "\"last_\"", "if", "\"last_eval\"", "in", "config", "else", "\"best_\"", "\n", "self", ".", "early_stopper", "=", "EarlyStopping", "(", "\n", "patience", "=", "config", "[", "\"patience\"", "]", ",", "\n", "name", "=", "self", ".", "hashCode", ",", "\n", "min_Nepochs", "=", "config", "[", "\"patience\"", "]", "*", "self", ".", "eval_interval", "\n", "+", "config", "[", "\"{}elapsed_epochs\"", ".", "format", "(", "prefix", ")", "]", ",", "\n", ")", "\n", "self", ".", "elapsed_epochs", "=", "config", "[", "\"{}elapsed_epochs\"", ".", "format", "(", "prefix", ")", "]", "\n", "self", ".", "elapsed_gradients", "=", "config", "[", "\"{}elapsed_gradients\"", ".", "format", "(", "prefix", ")", "]", "\n", "self", ".", "elapsed_soft_update", "=", "config", "[", "\"{}elapsed_soft_update\"", ".", "format", "(", "prefix", ")", "]", "\n", "self", ".", "elapsed_rollouts", "=", "config", "[", "\"{}elapsed_rollouts\"", ".", "format", "(", "prefix", ")", "]", "\n", "self", ".", "elapsed_steps", "=", "config", "[", "\"{}elapsed_steps\"", ".", "format", "(", "prefix", ")", "]", "\n", "self", ".", "loaded_time_s", "=", "config", "[", "\"{}elapsed_time_s\"", ".", "format", "(", "prefix", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "early_stopper", "=", "EarlyStopping", "(", "\n", "patience", "=", "config", "[", "\"patience\"", "]", ",", "\n", "name", "=", "self", ".", "hashCode", ",", "\n", "min_Nepochs", "=", "config", "[", "\"patience\"", "]", "*", "self", ".", "eval_interval", ",", "\n", ")", "\n", "self", ".", "elapsed_epochs", "=", "(", "\n", "self", ".", "elapsed_gradients", "\n", ")", "=", "(", "\n", "self", ".", "elapsed_soft_update", "\n", ")", "=", "self", ".", "elapsed_rollouts", "=", "self", ".", "elapsed_steps", "=", "0", "\n", "self", ".", "loaded_time_s", "=", "0", "\n", "", "self", ".", "backprop_per_eval", "=", "config", "[", "\"gradient_steps\"", "]", "*", "config", "[", "\"eval_interval\"", "]", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "env_name", "in", "env_with_goals", ":", "\n", "            ", "self", ".", "ylabel", "=", "\"success rate\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "ylabel", "=", "\"score\"", "\n", "\n", "", "if", "config", "[", "\"with_images\"", "]", ":", "\n", "            ", "if", "self", ".", "method", "in", "encoder_methods", ":", "\n", "                ", "self", ".", "runner", ".", "save_state_model", "(", "self", ".", "save_dir", ")", "\n", "", "else", ":", "\n", "                ", "save_model", "(", "env", ".", "encoder", ",", "self", ".", "save_dir", "+", "self", ".", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.save_chekpoint": [[249, 264], ["print", "torch.save"], "methods", ["None"], ["", "", "", "def", "save_chekpoint", "(", "self", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "print", "(", "\"Saving models ......\"", ")", "\n", "prefix", "=", "\"\"", "if", "prefix", "is", "None", "else", "\"_\"", "+", "prefix", "\n", "if", "prefix", "in", "[", "\"_last\"", ",", "\"_best\"", "]", ":", "\n", "            ", "save_dir", "=", "self", ".", "save_dir", "+", "\"model\"", "+", "prefix", "+", "\".pt\"", "\n", "", "torch", ".", "save", "(", "\n", "[", "\n", "self", ".", "o_norm", ".", "mean", ",", "\n", "self", ".", "o_norm", ".", "std", ",", "\n", "self", ".", "g_norm", ".", "mean", ",", "\n", "self", ".", "g_norm", ".", "std", ",", "\n", "self", ".", "actor_network", ",", "\n", "self", ".", "critic_network", ",", "\n", "]", ",", "\n", "save_dir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.saveConfig": [[266, 269], ["SRL4RL.utils.utils.saveConfig", "SRL4RL.utils.utils.saveJson"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.saveConfig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.saveJson"], ["", "def", "saveConfig", "(", "self", ")", ":", "\n", "        ", "saveConfig", "(", "self", ".", "config", ",", "save_dir", "=", "self", ".", "save_dir", ")", "\n", "saveJson", "(", "self", ".", "config", ",", "self", ".", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.update_success": [[270, 300], ["SRL4RL.utils.utils.update_text", "open", "numpy.array", "numpy.mean", "numpy.percentile", "numpy.mean", "SRL4RL.utils.utils.update_text", "SRL4RL.utils.utils.update_text", "f.read().split", "f.read", "numpy.percentile"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.update_text", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.update_text", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.update_text"], ["", "def", "update_success", "(", "self", ",", "success_rate", ")", ":", "\n", "        ", "update_text", "(", "[", "success_rate", "]", ",", "self", ".", "save_dir", "+", "\"success_rates.txt\"", ")", "\n", "self", ".", "success_rate", "=", "success_rate", "\n", "\"for early-stopper\"", "\n", "with", "open", "(", "self", ".", "save_dir", "+", "\"success_rates.txt\"", ")", "as", "f", ":", "\n", "            ", "loss_log", "=", "np", ".", "array", "(", "f", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\"remove outliers\"", "\n", "self", ".", "eval_patience_mean", "=", "np", ".", "mean", "(", "\n", "(", "loss_log", "[", "-", "self", ".", "early_stopper", ".", "patience", ":", "]", ")", "\n", ")", "\n", "loss_log", "[", "loss_log", "<", "np", ".", "percentile", "(", "loss_log", ",", "25", ")", "]", "=", "np", ".", "percentile", "(", "\n", "loss_log", ",", "25", "\n", ")", "\n", "self", ".", "eval_patience", "=", "np", ".", "mean", "(", "(", "loss_log", "[", "-", "self", ".", "early_stopper", ".", "patience", ":", "]", ")", ")", "\n", "", "if", "self", ".", "agent", "==", "\"SAC\"", "and", "self", ".", "elapsed_epochs", ">", "0", ":", "\n", "            ", "update_text", "(", "\n", "[", "\n", "self", ".", "actor_update_interval", "\n", "*", "self", ".", "entropyPi_sum", "\n", "/", "(", "self", ".", "gradient_steps", "*", "self", ".", "eval_interval", ")", "\n", "]", ",", "\n", "self", ".", "save_dir", "+", "\"entropyPi.txt\"", ",", "\n", ")", "\n", "update_text", "(", "\n", "[", "\n", "self", ".", "actor_update_interval", "\n", "*", "self", ".", "alpha_sum", "\n", "/", "(", "self", ".", "gradient_steps", "*", "self", ".", "eval_interval", ")", "\n", "]", ",", "\n", "self", ".", "save_dir", "+", "\"alpha.txt\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.update_config": [[302, 317], ["str", "SRL4RL.utils.utils.float2string", "SRL4RL.utils.utils.float2string", "SRL4RL.utils.utils.float2string", "datetime.timedelta", "time.time", "int"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.float2string", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.float2string", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utils.float2string"], ["", "", "def", "update_config", "(", "self", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "[", "prefix", "+", "\"elapsed_time_s\"", "]", "=", "(", "\n", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "+", "self", ".", "loaded_time_s", "\n", ")", "\n", "self", ".", "config", "[", "prefix", "+", "\"elapsed_time\"", "]", "=", "str", "(", "\n", "timedelta", "(", "seconds", "=", "(", "int", "(", "self", ".", "config", "[", "prefix", "+", "\"elapsed_time_s\"", "]", ")", ")", ")", "\n", ")", "\n", "self", ".", "config", "[", "prefix", "+", "\"elapsed_epochs\"", "]", "=", "self", ".", "elapsed_epochs", "\n", "self", ".", "config", "[", "prefix", "+", "\"elapsed_soft_update\"", "]", "=", "self", ".", "elapsed_soft_update", "\n", "self", ".", "config", "[", "prefix", "+", "\"elapsed_gradients\"", "]", "=", "self", ".", "elapsed_gradients", "\n", "self", ".", "config", "[", "prefix", "+", "\"elapsed_rollouts\"", "]", "=", "self", ".", "elapsed_rollouts", "\n", "self", ".", "config", "[", "prefix", "+", "\"elapsed_steps\"", "]", "=", "self", ".", "elapsed_steps", "\n", "self", ".", "config", "[", "\"eval-patience\"", "]", "=", "float2string", "(", "self", ".", "eval_patience", ")", "\n", "self", ".", "config", "[", "\"eval-patience_mean\"", "]", "=", "float2string", "(", "self", ".", "eval_patience_mean", ")", "\n", "self", ".", "config", "[", "prefix", "+", "\"eval\"", "]", "=", "float2string", "(", "self", ".", "success_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.log_results": [[318, 382], ["SRL4RL.utils.utilsPlot.plotter", "agent_utils.Saver.update_config", "agent_utils.Saver.saveConfig", "print", "SRL4RL.utils.utilsPlot.plotter", "SRL4RL.utils.utilsPlot.plotter", "print"], "methods", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotter", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.update_config", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.Saver.saveConfig", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotter", "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.utilsPlot.plotter"], ["", "def", "log_results", "(", "self", ",", "prefix", ")", ":", "\n", "        ", "\"Plot, update config and save config in log folder\"", "\n", "prefix", "=", "\"\"", "if", "prefix", "is", "None", "else", "prefix", "+", "\"_\"", "\n", "\n", "plotter", "(", "\n", "self", ".", "success_rate", ",", "\n", "self", ".", "save_dir", ",", "\n", "name", "=", "\"success_rates\"", ",", "\n", "title", "=", "\"RL training \\n{}\"", ".", "format", "(", "self", ".", "config", "[", "\"hashCode\"", "]", ")", ",", "\n", "ylabel", "=", "\"Average {} over {} episodes\"", ".", "format", "(", "\n", "self", ".", "ylabel", ",", "self", ".", "n_eval_rollouts", "\n", ")", ",", "\n", "backprop_per_eval", "=", "self", ".", "backprop_per_eval", ",", "\n", "text_file", "=", "self", ".", "save_dir", "+", "\"success_rates.txt\"", ",", "\n", ")", "\n", "if", "self", ".", "elapsed_epochs", ">", "0", ":", "\n", "            ", "plotter", "(", "\n", "0", ",", "\n", "self", ".", "save_dir", ",", "\n", "name", "=", "\"entropy\"", ",", "\n", "title", "=", "\"RL training \\n{}\"", ".", "format", "(", "self", ".", "config", "[", "\"hashCode\"", "]", ")", ",", "\n", "ylabel", "=", "\"Average entropy\"", ",", "\n", "backprop_per_eval", "=", "self", ".", "backprop_per_eval", ",", "\n", "text_file", "=", "self", ".", "save_dir", "+", "\"entropyPi.txt\"", ",", "\n", ")", "\n", "plotter", "(", "\n", "0", ",", "\n", "self", ".", "save_dir", ",", "\n", "name", "=", "\"alpha\"", ",", "\n", "title", "=", "\"RL training \\n{}\"", ".", "format", "(", "self", ".", "config", "[", "\"hashCode\"", "]", ")", ",", "\n", "ylabel", "=", "\"Average alpha\"", ",", "\n", "backprop_per_eval", "=", "self", ".", "backprop_per_eval", ",", "\n", "text_file", "=", "self", ".", "save_dir", "+", "\"alpha.txt\"", ",", "\n", ")", "\n", "\n", "", "self", ".", "update_config", "(", "prefix", ")", "\n", "self", ".", "saveConfig", "(", ")", "\n", "\n", "print", "(", "\n", "\"{} \\n[{}]  *{}+{}*  \\n[{}] Epoch: {} | Gradient steps: {} | {}: {:.3f} | {}: {:.3f} | {}: {:.3f}\"", ".", "format", "(", "\n", "self", ".", "config", "[", "\"env_params_name\"", "]", ",", "\n", "self", ".", "config", "[", "\"hashCode\"", "]", ",", "\n", "self", ".", "config", "[", "\"RL_name\"", "]", ",", "\n", "self", ".", "config", "[", "\"method\"", "]", ",", "\n", "self", ".", "config", "[", "prefix", "+", "\"elapsed_time\"", "]", ",", "\n", "self", ".", "elapsed_epochs", ",", "\n", "self", ".", "elapsed_gradients", ",", "\n", "self", ".", "ylabel", ",", "\n", "self", ".", "success_rate", ",", "\n", "\"eval-patience\"", ",", "\n", "self", ".", "eval_patience", ",", "\n", "\"eval-patience_mean\"", ",", "\n", "self", ".", "eval_patience_mean", ",", "\n", ")", "\n", ")", "\n", "if", "self", ".", "config", "[", "\"method\"", "]", "in", "encoder_methods", ":", "\n", "            ", "E_hashCode", "=", "(", "\n", "\"[{}]\"", ".", "format", "(", "self", ".", "config", "[", "\"E_hashCode\"", "]", ")", "\n", "if", "\"E_hashCode\"", "in", "self", ".", "config", "\n", "else", "\"\"", "\n", ")", "\n", "print", "(", "\n", "\"   SRL {} {} [{}]\"", ".", "format", "(", "\n", "E_hashCode", ",", "self", ".", "config", "[", "\"method\"", "]", ",", "self", ".", "config", "[", "\"SRL_name\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.loadPi": [[24, 38], ["torch.load", "actor_network.eval", "print", "os.path.join", "print", "critic_network.eval"], "function", ["None"], ["def", "loadPi", "(", "path", ",", "model_type", "=", "\"model_last\"", ",", "withQ", "=", "False", ")", ":", "\n", "    ", "\"Load RL model\"", "\n", "o_mean", ",", "o_std", ",", "g_mean", ",", "g_std", ",", "actor_network", ",", "critic_network", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "model_type", "+", "\".pt\"", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ",", "\n", ")", "\n", "actor_network", ".", "eval", "(", ")", "\n", "print", "(", "\"Load Pi: {}\"", ".", "format", "(", "model_type", ")", ")", "\n", "if", "withQ", ":", "\n", "        ", "print", "(", "\"Load Q-network\"", ")", "\n", "critic_network", ".", "eval", "(", ")", "\n", "return", "o_mean", ",", "o_std", ",", "g_mean", ",", "g_std", ",", "actor_network", ",", "critic_network", "\n", "", "else", ":", "\n", "        ", "return", "o_mean", ",", "o_std", ",", "g_mean", ",", "g_std", ",", "actor_network", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.process_inputs": [[41, 54], ["numpy.clip", "SRL4RL.utils.nn_torch.numpy2pytorch().unsqueeze", "print", "numpy.clip", "numpy.clip", "numpy.concatenate", "SRL4RL.utils.nn_torch.numpy2pytorch", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "", "def", "process_inputs", "(", "o", ",", "g", ",", "o_mean", ",", "o_std", ",", "g_mean", ",", "g_std", ",", "config", ")", ":", "\n", "    ", "if", "(", "np", ".", "abs", "(", "o", ")", ">", "config", "[", "\"clip_obs\"", "]", ")", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "\"\\nstate is HUGE\\n\"", ")", "\n", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "config", "[", "\"clip_obs\"", "]", ",", "config", "[", "\"clip_obs\"", "]", ")", "\n", "", "o_norm", "=", "np", ".", "clip", "(", "(", "o", "-", "o_mean", ")", "/", "o_std", ",", "-", "config", "[", "\"clip_range\"", "]", ",", "config", "[", "\"clip_range\"", "]", ")", "\n", "inputs", "=", "o_norm", "\n", "if", "config", "[", "\"with_goal\"", "]", ":", "\n", "        ", "g_norm", "=", "np", ".", "clip", "(", "\n", "(", "g", "-", "g_mean", ")", "/", "g_std", ",", "-", "config", "[", "\"clip_range\"", "]", ",", "config", "[", "\"clip_range\"", "]", "\n", ")", "\n", "inputs", "=", "np", ".", "concatenate", "(", "[", "o_norm", ",", "g_norm", "]", ")", "\n", "", "inputs", "=", "numpy2pytorch", "(", "inputs", ",", "differentiable", "=", "False", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.modules.agent_utils.process_inputs_gt": [[56, 69], ["numpy.clip", "SRL4RL.utils.nn_torch.numpy2pytorch().unsqueeze", "print", "numpy.clip", "numpy.clip", "numpy.concatenate", "SRL4RL.utils.nn_torch.numpy2pytorch", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.astrid-merckling_SRL4RL.utils.nn_torch.numpy2pytorch"], ["", "def", "process_inputs_gt", "(", "\n", "o", ",", "g", ",", "o_mean", ",", "o_std", ",", "g_mean", ",", "g_std", ",", "clip_obs", "=", "200", ",", "clip_range", "=", "10", ",", "with_goal", "=", "False", "\n", ")", ":", "\n", "    ", "if", "(", "np", ".", "abs", "(", "o", ")", ">", "clip_obs", ")", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "\"\\nstate is HUGE\\n\"", ")", "\n", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "clip_obs", ",", "clip_obs", ")", "\n", "", "o_norm", "=", "np", ".", "clip", "(", "(", "o", "-", "o_mean", ")", "/", "o_std", ",", "-", "clip_range", ",", "clip_range", ")", "\n", "inputs", "=", "o_norm", "\n", "if", "with_goal", ":", "\n", "        ", "g_norm", "=", "np", ".", "clip", "(", "(", "g", "-", "g_mean", ")", "/", "g_std", ",", "-", "clip_range", ",", "clip_range", ")", "\n", "inputs", "=", "np", ".", "concatenate", "(", "[", "o_norm", ",", "g_norm", "]", ")", "\n", "", "inputs", "=", "numpy2pytorch", "(", "inputs", ",", "differentiable", "=", "False", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "inputs", "\n", "\n"]]}