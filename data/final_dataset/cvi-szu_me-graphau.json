{"home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage1.get_dataloader": [[16, 31], ["print", "dataset.BP4D", "torch.utils.data.DataLoader", "dataset.BP4D", "torch.utils.data.DataLoader", "len", "len", "dataset.DISFA", "torch.utils.data.DataLoader", "dataset.DISFA", "torch.utils.data.DataLoader", "utils.image_train", "utils.image_test", "utils.image_train", "utils.image_test"], "function", ["None"], ["def", "get_dataloader", "(", "conf", ")", ":", "\n", "    ", "print", "(", "'==> Preparing data...'", ")", "\n", "if", "conf", ".", "dataset", "==", "'BP4D'", ":", "\n", "        ", "trainset", "=", "BP4D", "(", "conf", ".", "dataset_path", ",", "train", "=", "True", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_train", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "crop_size", "=", "conf", ".", "crop_size", ",", "stage", "=", "1", ")", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "valset", "=", "BP4D", "(", "conf", ".", "dataset_path", ",", "train", "=", "False", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_test", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "stage", "=", "1", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "\n", "", "elif", "conf", ".", "dataset", "==", "'DISFA'", ":", "\n", "        ", "trainset", "=", "DISFA", "(", "conf", ".", "dataset_path", ",", "train", "=", "True", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_train", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "crop_size", "=", "conf", ".", "crop_size", ",", "stage", "=", "1", ")", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "valset", "=", "DISFA", "(", "conf", ".", "dataset_path", ",", "train", "=", "False", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_test", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "stage", "=", "1", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "\n", "", "return", "train_loader", ",", "val_loader", ",", "len", "(", "trainset", ")", ",", "len", "(", "valset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage1.train": [[34, 50], ["utils.AverageMeter", "net.train", "len", "enumerate", "tqdm.tqdm", "utils.adjust_learning_rate", "targets.float.float", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "utils.AverageMeter.update", "criterion.data.item", "inputs.size", "inputs.cuda", "targets.float.cuda"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.train", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update"], ["", "def", "train", "(", "conf", ",", "net", ",", "train_loader", ",", "optimizer", ",", "epoch", ",", "criterion", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loader_len", "=", "len", "(", "train_loader", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "conf", ".", "epochs", ",", "conf", ".", "learning_rate", ",", "batch_idx", ",", "train_loader_len", ")", "\n", "targets", "=", "targets", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage1.val": [[53, 70], ["utils.AverageMeter", "net.eval", "enumerate", "utils.calc_f1_score", "utils.calc_acc", "tqdm.tqdm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "targets.float.float", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "net", "criterion", "utils.AverageMeter.update", "utils.statistics", "utils.update_statistics_list", "criterion.data.item", "inputs.size", "targets.float.detach", "inputs.cuda", "targets.float.cuda"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_f1_score", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_acc", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.statistics", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.update_statistics_list"], ["", "def", "val", "(", "net", ",", "val_loader", ",", "criterion", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "statistics_list", "=", "None", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "tqdm", "(", "val_loader", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets", "=", "targets", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "update_list", "=", "statistics", "(", "outputs", ",", "targets", ".", "detach", "(", ")", ",", "0.5", ")", "\n", "statistics_list", "=", "update_statistics_list", "(", "statistics_list", ",", "update_list", ")", "\n", "", "", "mean_f1_score", ",", "f1_score_list", "=", "calc_f1_score", "(", "statistics_list", ")", "\n", "mean_acc", ",", "acc_list", "=", "calc_acc", "(", "statistics_list", ")", "\n", "return", "losses", ".", "avg", ",", "mean_f1_score", ",", "f1_score_list", ",", "mean_acc", ",", "acc_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage1.main": [[72, 135], ["train_stage1.get_dataloader", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logging.info", "model.ANFL.MEFARG", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.WeightedAsymmetricLoss", "torch.AdamW", "print", "range", "numpy.loadtxt", "logging.info", "utils.load_state_dict", "torch.DataParallel().cuda", "train_weight.cuda.cuda", "nn.DataParallel().cuda.parameters", "logging.info", "train_stage1.train", "train_stage1.val", "logging.info", "logging.info", "dataset_info", "logging.info", "logging.info", "dataset_info", "logging.info", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "nn.DataParallel().cuda.state_dict", "optim.AdamW.state_dict", "os.path.join", "torch.DataParallel", "nn.DataParallel().cuda.state_dict", "optim.AdamW.state_dict", "os.path.join", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.get_dataloader", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.train", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.val"], ["", "def", "main", "(", "conf", ")", ":", "\n", "    ", "if", "conf", ".", "dataset", "==", "'BP4D'", ":", "\n", "        ", "dataset_info", "=", "BP4D_infolist", "\n", "", "elif", "conf", ".", "dataset", "==", "'DISFA'", ":", "\n", "        ", "dataset_info", "=", "DISFA_infolist", "\n", "\n", "", "start_epoch", "=", "0", "\n", "# data", "\n", "train_loader", ",", "val_loader", ",", "train_data_num", ",", "val_data_num", "=", "get_dataloader", "(", "conf", ")", "\n", "train_weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "conf", ".", "dataset_path", ",", "'list'", ",", "conf", ".", "dataset", "+", "'_weight_fold'", "+", "str", "(", "conf", ".", "fold", ")", "+", "'.txt'", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Fold: [{} | {}  val_data_num: {} ]\"", ".", "format", "(", "conf", ".", "fold", ",", "conf", ".", "N_fold", ",", "val_data_num", ")", ")", "\n", "\n", "net", "=", "MEFARG", "(", "num_classes", "=", "conf", ".", "num_classes", ",", "backbone", "=", "conf", ".", "arc", ",", "neighbor_num", "=", "conf", ".", "neighbor_num", ",", "metric", "=", "conf", ".", "metric", ")", "\n", "# resume", "\n", "if", "conf", ".", "resume", "!=", "''", ":", "\n", "        ", "logging", ".", "info", "(", "\"Resume form | {} ]\"", ".", "format", "(", "conf", ".", "resume", ")", ")", "\n", "net", "=", "load_state_dict", "(", "net", ",", "conf", ".", "resume", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "train_weight", "=", "train_weight", ".", "cuda", "(", ")", "\n", "\n", "", "criterion", "=", "WeightedAsymmetricLoss", "(", "weight", "=", "train_weight", ")", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "net", ".", "parameters", "(", ")", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "lr", "=", "conf", ".", "learning_rate", ",", "weight_decay", "=", "conf", ".", "weight_decay", ")", "\n", "print", "(", "'the init learning rate is '", ",", "conf", ".", "learning_rate", ")", "\n", "\n", "#train and val", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "conf", ".", "epochs", ")", ":", "\n", "        ", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "logging", ".", "info", "(", "\"Epoch: [{} | {} LR: {} ]\"", ".", "format", "(", "epoch", "+", "1", ",", "conf", ".", "epochs", ",", "lr", ")", ")", "\n", "train_loss", "=", "train", "(", "conf", ",", "net", ",", "train_loader", ",", "optimizer", ",", "epoch", ",", "criterion", ")", "\n", "val_loss", ",", "val_mean_f1_score", ",", "val_f1_score", ",", "val_mean_acc", ",", "val_acc", "=", "val", "(", "net", ",", "val_loader", ",", "criterion", ")", "\n", "\n", "# log", "\n", "infostr", "=", "{", "'Epoch:  {}   train_loss: {:.5f}  val_loss: {:.5f}  val_mean_f1_score {:.2f},val_mean_acc {:.2f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "train_loss", ",", "val_loss", ",", "100.", "*", "val_mean_f1_score", ",", "100.", "*", "val_mean_acc", ")", "}", "\n", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "{", "'F1-score-list:'", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "dataset_info", "(", "val_f1_score", ")", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "{", "'Acc-list:'", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "dataset_info", "(", "val_acc", ")", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "\n", "# save checkpoints", "\n", "if", "(", "epoch", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "            ", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "conf", "[", "'outdir'", "]", ",", "'epoch'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'_model_fold'", "+", "str", "(", "conf", ".", "fold", ")", "+", "'.pth'", ")", ")", "\n", "\n", "", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "conf", "[", "'outdir'", "]", ",", "'cur_model_fold'", "+", "str", "(", "conf", ".", "fold", ")", "+", "'.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.get_dataloader": [[16, 31], ["print", "dataset.BP4D", "torch.utils.data.DataLoader", "dataset.BP4D", "torch.utils.data.DataLoader", "len", "len", "dataset.DISFA", "torch.utils.data.DataLoader", "dataset.DISFA", "torch.utils.data.DataLoader", "utils.image_train", "utils.image_test", "utils.image_train", "utils.image_test"], "function", ["None"], ["def", "get_dataloader", "(", "conf", ")", ":", "\n", "    ", "print", "(", "'==> Preparing data...'", ")", "\n", "if", "conf", ".", "dataset", "==", "'BP4D'", ":", "\n", "        ", "trainset", "=", "BP4D", "(", "conf", ".", "dataset_path", ",", "train", "=", "True", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_train", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "crop_size", "=", "conf", ".", "crop_size", ",", "stage", "=", "2", ")", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "valset", "=", "BP4D", "(", "conf", ".", "dataset_path", ",", "train", "=", "False", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_test", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "stage", "=", "2", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "\n", "", "elif", "conf", ".", "dataset", "==", "'DISFA'", ":", "\n", "        ", "trainset", "=", "DISFA", "(", "conf", ".", "dataset_path", ",", "train", "=", "True", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_train", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "crop_size", "=", "conf", ".", "crop_size", ",", "stage", "=", "2", ")", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "valset", "=", "DISFA", "(", "conf", ".", "dataset_path", ",", "train", "=", "False", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_test", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "stage", "=", "2", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "\n", "", "return", "train_loader", ",", "val_loader", ",", "len", "(", "trainset", ")", ",", "len", "(", "valset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.train": [[34, 57], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "net.train", "len", "enumerate", "tqdm.tqdm", "utils.adjust_learning_rate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "optimizer.zero_grad", "net", "loss.backward", "optimizer.step", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "targets.float", "relations.long", "outputs_relation.view", "relations.view", "loss.data.item", "inputs.size", "wa_loss.data.item", "inputs.size", "edge_loss.data.item", "inputs.size", "inputs.cuda", "targets.cuda", "relations.cuda"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.train", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update"], ["", "def", "train", "(", "conf", ",", "net", ",", "train_loader", ",", "optimizer", ",", "epoch", ",", "criterion", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "losses1", "=", "AverageMeter", "(", ")", "\n", "losses2", "=", "AverageMeter", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loader_len", "=", "len", "(", "train_loader", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ",", "relations", ")", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "conf", ".", "epochs", ",", "conf", ".", "learning_rate", ",", "batch_idx", ",", "train_loader_len", ")", "\n", "targets", ",", "relations", "=", "targets", ".", "float", "(", ")", ",", "relations", ".", "long", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "inputs", ",", "targets", ",", "relations", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", ",", "relations", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "outputs_relation", "=", "net", "(", "inputs", ")", "\n", "wa_loss", "=", "criterion", "[", "0", "]", "(", "outputs", ",", "targets", ")", "\n", "edge_loss", "=", "criterion", "[", "1", "]", "(", "outputs_relation", ".", "view", "(", "-", "1", ",", "4", ")", ",", "relations", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "wa_loss", "+", "conf", ".", "lam", "*", "edge_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "losses1", ".", "update", "(", "wa_loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "losses2", ".", "update", "(", "edge_loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "losses1", ".", "avg", ",", "losses2", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.val": [[60, 77], ["utils.AverageMeter", "net.eval", "enumerate", "utils.calc_f1_score", "utils.calc_acc", "tqdm.tqdm", "targets.float.float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "net", "utils.AverageMeter.update", "utils.statistics", "utils.update_statistics_list", "loss.data.item", "inputs.size", "targets.float.detach", "inputs.cuda", "targets.float.cuda"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_f1_score", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_acc", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.statistics", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.update_statistics_list"], ["", "def", "val", "(", "net", ",", "val_loader", ",", "criterion", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "statistics_list", "=", "None", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "tqdm", "(", "val_loader", ")", ")", ":", "\n", "        ", "targets", "=", "targets", ".", "float", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "[", "0", "]", "(", "outputs", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "update_list", "=", "statistics", "(", "outputs", ",", "targets", ".", "detach", "(", ")", ",", "0.5", ")", "\n", "statistics_list", "=", "update_statistics_list", "(", "statistics_list", ",", "update_list", ")", "\n", "", "", "mean_f1_score", ",", "f1_score_list", "=", "calc_f1_score", "(", "statistics_list", ")", "\n", "mean_acc", ",", "acc_list", "=", "calc_acc", "(", "statistics_list", ")", "\n", "return", "losses", ".", "avg", ",", "mean_f1_score", ",", "f1_score_list", ",", "mean_acc", ",", "acc_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.main": [[79, 140], ["train_stage2.get_dataloader", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logging.info", "model.MEFL.MEFARG", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.AdamW", "print", "range", "numpy.loadtxt", "logging.info", "utils.load_state_dict", "torch.DataParallel().cuda", "train_weight.cuda.cuda", "utils.WeightedAsymmetricLoss", "torch.CrossEntropyLoss", "nn.DataParallel().cuda.parameters", "logging.info", "train_stage2.train", "train_stage2.val", "logging.info", "logging.info", "dataset_info", "logging.info", "logging.info", "dataset_info", "logging.info", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "nn.DataParallel().cuda.state_dict", "optim.AdamW.state_dict", "os.path.join", "torch.DataParallel", "nn.DataParallel().cuda.state_dict", "optim.AdamW.state_dict", "os.path.join", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.get_dataloader", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.train_stage2.train", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.val"], ["", "def", "main", "(", "conf", ")", ":", "\n", "    ", "if", "conf", ".", "dataset", "==", "'BP4D'", ":", "\n", "        ", "dataset_info", "=", "BP4D_infolist", "\n", "", "elif", "conf", ".", "dataset", "==", "'DISFA'", ":", "\n", "        ", "dataset_info", "=", "DISFA_infolist", "\n", "\n", "", "start_epoch", "=", "0", "\n", "# data", "\n", "train_loader", ",", "val_loader", ",", "train_data_num", ",", "val_data_num", "=", "get_dataloader", "(", "conf", ")", "\n", "train_weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "conf", ".", "dataset_path", ",", "'list'", ",", "conf", ".", "dataset", "+", "'_weight_fold'", "+", "str", "(", "conf", ".", "fold", ")", "+", "'.txt'", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"Fold: [{} | {}  val_data_num: {} ]\"", ".", "format", "(", "conf", ".", "fold", "+", "1", ",", "conf", ".", "N_fold", ",", "val_data_num", ")", ")", "\n", "net", "=", "MEFARG", "(", "num_classes", "=", "conf", ".", "num_classes", ",", "backbone", "=", "conf", ".", "arc", ")", "\n", "\n", "# resume", "\n", "if", "conf", ".", "resume", "!=", "''", ":", "\n", "        ", "logging", ".", "info", "(", "\"Resume form | {} ]\"", ".", "format", "(", "conf", ".", "resume", ")", ")", "\n", "net", "=", "load_state_dict", "(", "net", ",", "conf", ".", "resume", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "train_weight", "=", "train_weight", ".", "cuda", "(", ")", "\n", "\n", "", "criterion", "=", "[", "WeightedAsymmetricLoss", "(", "weight", "=", "train_weight", ")", ",", "nn", ".", "CrossEntropyLoss", "(", ")", "]", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "net", ".", "parameters", "(", ")", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "lr", "=", "conf", ".", "learning_rate", ",", "weight_decay", "=", "conf", ".", "weight_decay", ")", "\n", "print", "(", "'the init learning rate is '", ",", "conf", ".", "learning_rate", ")", "\n", "\n", "#train and val", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "conf", ".", "epochs", ")", ":", "\n", "        ", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "logging", ".", "info", "(", "\"Epoch: [{} | {} LR: {} ]\"", ".", "format", "(", "epoch", "+", "1", ",", "conf", ".", "epochs", ",", "lr", ")", ")", "\n", "train_loss", ",", "wa_loss", ",", "edge_loss", "=", "train", "(", "conf", ",", "net", ",", "train_loader", ",", "optimizer", ",", "epoch", ",", "criterion", ")", "\n", "val_loss", ",", "val_mean_f1_score", ",", "val_f1_score", ",", "val_mean_acc", ",", "val_acc", "=", "val", "(", "net", ",", "val_loader", ",", "criterion", ")", "\n", "\n", "# log", "\n", "infostr", "=", "{", "'Epoch:  {}   train_loss: {:.5f} wa_loss: {:.5f} edge_loss: {:.5f} val_loss: {:.5f}  val_mean_f1_score {:.2f},val_mean_acc {:.2f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "train_loss", ",", "wa_loss", ",", "edge_loss", ",", "val_loss", ",", "100.", "*", "val_mean_f1_score", ",", "100.", "*", "val_mean_acc", ")", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "{", "'F1-score-list:'", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "dataset_info", "(", "val_f1_score", ")", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "{", "'Acc-list:'", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "dataset_info", "(", "val_acc", ")", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "\n", "# save checkpoints", "\n", "if", "(", "epoch", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "            ", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "conf", "[", "'outdir'", "]", ",", "'epoch'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'_model_fold'", "+", "str", "(", "conf", ".", "fold", "+", "1", ")", "+", "'.pth'", ")", ")", "\n", "\n", "", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "conf", "[", "'outdir'", "]", ",", "'cur_model_fold'", "+", "str", "(", "conf", ".", "fold", "+", "1", ")", "+", "'.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.parser2dict": [[49, 53], ["parser.parse_known_args", "easydict.EasyDict", "easydict.EasyDict"], "function", ["None"], ["def", "parser2dict", "(", ")", ":", "\n", "    ", "config", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "cfg", "=", "edict", "(", "config", ".", "__dict__", ")", "\n", "return", "edict", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.str2bool": [[55, 57], ["v.lower"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.add_argument_group": [[59, 63], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.add_argument_group"], ["", "def", "add_argument_group", "(", "name", ")", ":", "\n", "    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.print_conf": [[67, 82], ["sorted", "vars().items", "str", "str", "vars"], "function", ["None"], ["", "def", "print_conf", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Print and save options\n    It will print both current options and default values(if different).\n    It will save options into a text file / [checkpoints_dir] / opt.txt\n    \"\"\"", "\n", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "# default = self.parser.get_default(k)", "\n", "# if v != default:", "\n", "#     comment = '\\t[default: %s]' % str(default)", "\n", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.get_config": [[84, 103], ["conf.parser2dict", "parser2dict.update", "open", "yaml.load", "easydict.EasyDict", "Exception", "open", "yaml.load", "easydict.EasyDict"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.parser2dict", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update"], ["", "def", "get_config", "(", ")", ":", "\n", "\n", "# args from argparser", "\n", "    ", "cfg", "=", "parser2dict", "(", ")", "\n", "if", "cfg", ".", "dataset", "==", "'BP4D'", ":", "\n", "        ", "with", "open", "(", "'config/BP4D_config.yaml'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "datasets_cfg", "=", "yaml", ".", "load", "(", "f", ")", "\n", "datasets_cfg", "=", "edict", "(", "datasets_cfg", ")", "\n", "\n", "", "", "elif", "cfg", ".", "dataset", "==", "'DISFA'", ":", "\n", "        ", "with", "open", "(", "'config/DISFA_config.yaml'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "datasets_cfg", "=", "yaml", ".", "load", "(", "f", ")", "\n", "datasets_cfg", "=", "edict", "(", "datasets_cfg", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unkown Datsets:\"", ",", "cfg", ".", "dataset", ")", "\n", "\n", "", "cfg", ".", "update", "(", "datasets_cfg", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.set_env": [[105, 119], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_env", "(", "cfg", ")", ":", "\n", "# set seeding", "\n", "    ", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "cfg", ".", "seed", ")", "\n", "if", "'cudnn'", "in", "cfg", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "cfg", ".", "cudnn", "\n", "", "else", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "", "cudnn", ".", "deterministic", "=", "True", "\n", "os", ".", "environ", "[", "\"NUMEXPR_MAX_THREADS\"", "]", "=", "'16'", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "gpu_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.set_outdir": [[121, 136], ["conf.ensure_dir", "shutil.copyfile", "shutil.copyfile", "datetime.now().strftime", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "datetime.now", "str", "str"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.ensure_dir"], ["", "def", "set_outdir", "(", "conf", ")", ":", "\n", "    ", "default_outdir", "=", "'results'", "\n", "if", "'timedir'", "in", "conf", ":", "\n", "        ", "timestr", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%d-%m-%Y_%I_%M-%S_%p'", ")", "\n", "outdir", "=", "os", ".", "path", ".", "join", "(", "default_outdir", ",", "conf", ".", "exp_name", ",", "timestr", ")", "\n", "", "else", ":", "\n", "        ", "outdir", "=", "os", ".", "path", ".", "join", "(", "default_outdir", ",", "conf", ".", "exp_name", ")", "\n", "prefix", "=", "'bs_'", "+", "str", "(", "conf", ".", "batch_size", ")", "+", "'_seed_'", "+", "str", "(", "conf", ".", "seed", ")", "+", "'_lr_'", "+", "str", "(", "conf", ".", "learning_rate", ")", "\n", "outdir", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "prefix", ")", "\n", "", "ensure_dir", "(", "outdir", ")", "\n", "conf", "[", "'outdir'", "]", "=", "outdir", "\n", "shutil", ".", "copyfile", "(", "\"./model/MEFL.py\"", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'MEFL.py'", ")", ")", "\n", "shutil", ".", "copyfile", "(", "\"./model/ANFL.py\"", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'ANFL.py'", ")", ")", "\n", "\n", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.ensure_dir": [[139, 143], ["os.path.exists", "os.makedirs", "print"], "function", ["None"], ["", "def", "ensure_dir", "(", "dir_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "print", "(", "'{} is created'", ".", "format", "(", "dir_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.set_logger": [[145, 190], ["os.path.join", "logging.getLogger", "logging.getLogger.setLevel", "logging.info", "logging.info", "eval", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "conf.print_conf", "logging.Formatter", "logging.Formatter"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.conf.print_conf"], ["", "", "def", "set_logger", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Set the logger to log info in terminal and file `log_path`.\n\n    In general, it is useful to have a logger so that every output to the terminal is saved\n    in a permanent file. Here we save it to `model_dir/train.log`.\n\n    Example:\n    ```\n    logging.info(\"Starting training...\")\n    ```\n\n    Args:\n        log_path: (string) where to log\n    \"\"\"", "\n", "\n", "if", "'loglevel'", "in", "cfg", ":", "\n", "        ", "loglevel", "=", "eval", "(", "'logging.'", "+", "loglevel", ")", "\n", "", "else", ":", "\n", "        ", "loglevel", "=", "logging", ".", "INFO", "\n", "\n", "\n", "", "if", "cfg", ".", "evaluate", ":", "\n", "        ", "outname", "=", "'test.log'", "\n", "", "else", ":", "\n", "        ", "outname", "=", "'train.log'", "\n", "\n", "", "outdir", "=", "cfg", "[", "'outdir'", "]", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "outname", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "loglevel", ")", "\n", "\n", "if", "not", "logger", ".", "handlers", ":", "\n", "# Logging to a file", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s:%(levelname)s: %(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "# Logging to console", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n", "", "logging", ".", "info", "(", "print_conf", "(", "cfg", ")", ")", "\n", "logging", ".", "info", "(", "'writting logs to file {}'", ".", "format", "(", "log_path", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.BP4D.__init__": [[28, 64], ["os.path.join", "os.path.join", "open().readlines", "os.path.join", "numpy.loadtxt", "os.path.join", "open().readlines", "os.path.join", "numpy.loadtxt", "dataset.make_dataset", "os.path.join", "numpy.loadtxt", "dataset.make_dataset", "dataset.make_dataset", "open", "open", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.make_dataset", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.make_dataset", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "train", "=", "True", ",", "fold", "=", "1", ",", "transform", "=", "None", ",", "crop_size", "=", "224", ",", "stage", "=", "1", ",", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "assert", "fold", ">", "0", "and", "fold", "<=", "3", ",", "'The fold num must be restricted from 1 to 3'", "\n", "assert", "stage", ">", "0", "and", "stage", "<=", "2", ",", "'The stage num must be restricted from 1 to 2'", "\n", "self", ".", "_root_path", "=", "root_path", "\n", "self", ".", "_train", "=", "train", "\n", "self", ".", "_stage", "=", "stage", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "img_folder_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'img'", ")", "\n", "if", "self", ".", "_train", ":", "\n", "# img", "\n", "            ", "train_image_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'BP4D_train_img_path_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "train_image_list", "=", "open", "(", "train_image_list_path", ")", ".", "readlines", "(", ")", "\n", "# img labels", "\n", "train_label_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'BP4D_train_label_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "train_label_list", "=", "np", ".", "loadtxt", "(", "train_label_list_path", ")", "\n", "\n", "# AU relation", "\n", "if", "self", ".", "_stage", "==", "2", ":", "\n", "                ", "au_relation_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'BP4D_train_AU_relation_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "au_relation_list", "=", "np", ".", "loadtxt", "(", "au_relation_list_path", ")", "\n", "self", ".", "data_list", "=", "make_dataset", "(", "train_image_list", ",", "train_label_list", ",", "au_relation_list", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "data_list", "=", "make_dataset", "(", "train_image_list", ",", "train_label_list", ")", "\n", "\n", "", "", "else", ":", "\n", "# img", "\n", "            ", "test_image_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'BP4D_test_img_path_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "test_image_list", "=", "open", "(", "test_image_list_path", ")", ".", "readlines", "(", ")", "\n", "\n", "# img labels", "\n", "test_label_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'BP4D_test_label_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "test_label_list", "=", "np", ".", "loadtxt", "(", "test_label_list_path", ")", "\n", "self", ".", "data_list", "=", "make_dataset", "(", "test_image_list", ",", "test_label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.BP4D.__getitem__": [[65, 92], ["dataset.BP4D.loader", "random.randint", "random.randint", "random.randint", "dataset.BP4D.loader", "os.path.join", "dataset.BP4D._transform", "os.path.join", "random.randint", "random.randint", "random.randint", "dataset.BP4D._transform", "dataset.BP4D._transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_stage", "==", "2", "and", "self", ".", "_train", ":", "\n", "            ", "img", ",", "label", ",", "au_relation", "=", "self", ".", "data_list", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder_path", ",", "img", ")", ")", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "offset_y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "crop_size", ")", "\n", "offset_x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "crop_size", ")", "\n", "flip", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "_transform", "(", "img", ",", "flip", ",", "offset_x", ",", "offset_y", ")", "\n", "", "return", "img", ",", "label", ",", "au_relation", "\n", "", "else", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "data_list", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder_path", ",", "img", ")", ")", "\n", "\n", "if", "self", ".", "_train", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "offset_y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "crop_size", ")", "\n", "offset_x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "crop_size", ")", "\n", "flip", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "                    ", "img", "=", "self", ".", "_transform", "(", "img", ",", "flip", ",", "offset_x", ",", "offset_y", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "                    ", "img", "=", "self", ".", "_transform", "(", "img", ")", "\n", "", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.BP4D.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.DISFA.__init__": [[98, 134], ["os.path.join", "os.path.join", "open().readlines", "os.path.join", "numpy.loadtxt", "os.path.join", "open().readlines", "os.path.join", "numpy.loadtxt", "dataset.make_dataset", "os.path.join", "numpy.loadtxt", "dataset.make_dataset", "dataset.make_dataset", "open", "open", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.make_dataset", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.make_dataset", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "train", "=", "True", ",", "fold", "=", "1", ",", "transform", "=", "None", ",", "crop_size", "=", "224", ",", "stage", "=", "1", ",", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "assert", "fold", ">", "0", "and", "fold", "<=", "3", ",", "'The fold num must be restricted from 1 to 3'", "\n", "assert", "stage", ">", "0", "and", "stage", "<=", "2", ",", "'The stage num must be restricted from 1 to 2'", "\n", "self", ".", "_root_path", "=", "root_path", "\n", "self", ".", "_train", "=", "train", "\n", "self", ".", "_stage", "=", "stage", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "img_folder_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'img'", ")", "\n", "if", "self", ".", "_train", ":", "\n", "# img", "\n", "            ", "train_image_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'DISFA_train_img_path_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "train_image_list", "=", "open", "(", "train_image_list_path", ")", ".", "readlines", "(", ")", "\n", "# img labels", "\n", "train_label_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'DISFA_train_label_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "train_label_list", "=", "np", ".", "loadtxt", "(", "train_label_list_path", ")", "\n", "\n", "# AU relation", "\n", "if", "self", ".", "_stage", "==", "2", ":", "\n", "                ", "au_relation_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'DISFA_train_AU_relation_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "au_relation_list", "=", "np", ".", "loadtxt", "(", "au_relation_list_path", ")", "\n", "self", ".", "data_list", "=", "make_dataset", "(", "train_image_list", ",", "train_label_list", ",", "au_relation_list", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "data_list", "=", "make_dataset", "(", "train_image_list", ",", "train_label_list", ")", "\n", "\n", "", "", "else", ":", "\n", "# img", "\n", "            ", "test_image_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'DISFA_test_img_path_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "test_image_list", "=", "open", "(", "test_image_list_path", ")", ".", "readlines", "(", ")", "\n", "\n", "# img labels", "\n", "test_label_list_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "'list'", ",", "'DISFA_test_label_fold'", "+", "str", "(", "fold", ")", "+", "'.txt'", ")", "\n", "test_label_list", "=", "np", ".", "loadtxt", "(", "test_label_list_path", ")", "\n", "self", ".", "data_list", "=", "make_dataset", "(", "test_image_list", ",", "test_label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.DISFA.__getitem__": [[135, 162], ["dataset.DISFA.loader", "random.randint", "random.randint", "random.randint", "dataset.DISFA.loader", "os.path.join", "dataset.DISFA._transform", "os.path.join", "random.randint", "random.randint", "random.randint", "dataset.DISFA._transform", "dataset.DISFA._transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_stage", "==", "2", "and", "self", ".", "_train", ":", "\n", "            ", "img", ",", "label", ",", "au_relation", "=", "self", ".", "data_list", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder_path", ",", "img", ")", ")", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "offset_y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "crop_size", ")", "\n", "offset_x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "crop_size", ")", "\n", "flip", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "_transform", "(", "img", ",", "flip", ",", "offset_x", ",", "offset_y", ")", "\n", "", "return", "img", ",", "label", ",", "au_relation", "\n", "", "else", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "data_list", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder_path", ",", "img", ")", ")", "\n", "\n", "if", "self", ".", "_train", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "offset_y", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "crop_size", ")", "\n", "offset_x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "crop_size", ")", "\n", "flip", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "                    ", "img", "=", "self", ".", "_transform", "(", "img", ",", "flip", ",", "offset_x", ",", "offset_y", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "                    ", "img", "=", "self", ".", "_transform", "(", "img", ")", "\n", "", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.DISFA.__len__": [[163, 165], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.make_dataset": [[8, 15], ["len", "image_list[].strip", "range", "image_list[].strip", "range"], "function", ["None"], ["def", "make_dataset", "(", "image_list", ",", "label_list", ",", "au_relation", "=", "None", ")", ":", "\n", "    ", "len_", "=", "len", "(", "image_list", ")", "\n", "if", "au_relation", "is", "not", "None", ":", "\n", "        ", "images", "=", "[", "(", "image_list", "[", "i", "]", ".", "strip", "(", ")", ",", "label_list", "[", "i", ",", ":", "]", ",", "au_relation", "[", "i", ",", ":", "]", ")", "for", "i", "in", "range", "(", "len_", ")", "]", "\n", "", "else", ":", "\n", "        ", "images", "=", "[", "(", "image_list", "[", "i", "]", ".", "strip", "(", ")", ",", "label_list", "[", "i", ",", ":", "]", ")", "for", "i", "in", "range", "(", "len_", ")", "]", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.pil_loader": [[17, 21], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.default_loader": [[23, 25], ["dataset.pil_loader"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.dataset.pil_loader"], ["", "", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.get_dataloader": [[14, 25], ["print", "dataset.BP4D", "torch.utils.data.DataLoader", "len", "dataset.DISFA", "torch.utils.data.DataLoader", "utils.image_test", "utils.image_test"], "function", ["None"], ["def", "get_dataloader", "(", "conf", ")", ":", "\n", "    ", "print", "(", "'==> Preparing data...'", ")", "\n", "if", "conf", ".", "dataset", "==", "'BP4D'", ":", "\n", "        ", "valset", "=", "BP4D", "(", "conf", ".", "dataset_path", ",", "train", "=", "False", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_test", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "stage", "=", "2", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "\n", "", "elif", "conf", ".", "dataset", "==", "'DISFA'", ":", "\n", "        ", "valset", "=", "DISFA", "(", "conf", ".", "dataset_path", ",", "train", "=", "False", ",", "fold", "=", "conf", ".", "fold", ",", "transform", "=", "image_test", "(", "crop_size", "=", "conf", ".", "crop_size", ")", ",", "stage", "=", "2", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "conf", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "conf", ".", "num_workers", ")", "\n", "\n", "", "return", "val_loader", ",", "len", "(", "valset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.val": [[28, 42], ["net.eval", "enumerate", "utils.calc_f1_score", "utils.calc_acc", "tqdm.tqdm", "targets.float.float", "torch.no_grad", "torch.no_grad", "torch.cuda.is_available", "torch.cuda.is_available", "net", "utils.statistics", "utils.update_statistics_list", "targets.float.detach", "inputs.cuda", "targets.float.cuda"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_f1_score", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_acc", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.statistics", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.update_statistics_list"], ["", "def", "val", "(", "net", ",", "val_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "statistics_list", "=", "None", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "tqdm", "(", "val_loader", ")", ")", ":", "\n", "        ", "targets", "=", "targets", ".", "float", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "update_list", "=", "statistics", "(", "outputs", ",", "targets", ".", "detach", "(", ")", ",", "0.5", ")", "\n", "statistics_list", "=", "update_statistics_list", "(", "statistics_list", ",", "update_list", ")", "\n", "", "", "mean_f1_score", ",", "f1_score_list", "=", "calc_f1_score", "(", "statistics_list", ")", "\n", "mean_acc", ",", "acc_list", "=", "calc_acc", "(", "statistics_list", ")", "\n", "return", "mean_f1_score", ",", "f1_score_list", ",", "mean_acc", ",", "acc_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.main": [[44, 77], ["test.get_dataloader", "logging.info", "model.MEFL.MEFARG", "torch.cuda.is_available", "torch.cuda.is_available", "test.val", "logging.info", "logging.info", "dataset_info", "logging.info", "logging.info", "dataset_info", "logging.info", "logging.info", "utils.load_state_dict", "torch.DataParallel().cuda", "torch.DataParallel"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.get_dataloader", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.test.val", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "def", "main", "(", "conf", ")", ":", "\n", "    ", "if", "conf", ".", "dataset", "==", "'BP4D'", ":", "\n", "        ", "dataset_info", "=", "BP4D_infolist", "\n", "", "elif", "conf", ".", "dataset", "==", "'DISFA'", ":", "\n", "        ", "dataset_info", "=", "DISFA_infolist", "\n", "\n", "# data", "\n", "", "val_loader", ",", "val_data_num", "=", "get_dataloader", "(", "conf", ")", "\n", "logging", ".", "info", "(", "\"Fold: [{} | {}  val_data_num: {} ]\"", ".", "format", "(", "conf", ".", "fold", ",", "conf", ".", "N_fold", ",", "val_data_num", ")", ")", "\n", "net", "=", "MEFARG", "(", "num_classes", "=", "conf", ".", "num_classes", ",", "backbone", "=", "conf", ".", "arc", ")", "\n", "\n", "# resume", "\n", "if", "conf", ".", "resume", "!=", "''", ":", "\n", "        ", "logging", ".", "info", "(", "\"Resume form | {} ]\"", ".", "format", "(", "conf", ".", "resume", ")", ")", "\n", "net", "=", "load_state_dict", "(", "net", ",", "conf", ".", "resume", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "\n", "#test", "\n", "", "val_mean_f1_score", ",", "val_f1_score", ",", "val_mean_acc", ",", "val_acc", "=", "val", "(", "net", ",", "val_loader", ")", "\n", "\n", "# log", "\n", "infostr", "=", "{", "'val_mean_f1_score {:.2f} val_mean_acc {:.2f}'", ".", "format", "(", "100.", "*", "val_mean_f1_score", ",", "100.", "*", "val_mean_acc", ")", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "{", "'F1-score-list:'", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "dataset_info", "(", "val_f1_score", ")", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "{", "'Acc-list:'", "}", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "infostr", "=", "dataset_info", "(", "val_acc", ")", "\n", "logging", ".", "info", "(", "infostr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.__init__": [[11, 13], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.reset": [[14, 19], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.AverageMeter.update": [[20, 25], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.PlaceCrop.__init__": [[133, 140], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "start_x", ",", "start_y", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "start_x", "=", "start_x", "\n", "self", ".", "start_y", "=", "start_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.PlaceCrop.__call__": [[141, 150], ["img.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "crop", "(", "(", "self", ".", "start_x", ",", "self", ".", "start_y", ",", "self", ".", "start_x", "+", "tw", ",", "self", ".", "start_y", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.SetFlip.__init__": [[154, 156], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flip", ")", ":", "\n", "        ", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.SetFlip.__call__": [[157, 167], ["img.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "flip", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.image_train.__init__": [[170, 173], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "256", ",", "crop_size", "=", "224", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.image_train.__call__": [[174, 190], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Resize", "utils.PlaceCrop", "utils.SetFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "flip", ",", "offset_x", ",", "offset_y", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "self", ".", "img_size", ")", ",", "\n", "PlaceCrop", "(", "self", ".", "crop_size", ",", "offset_x", ",", "offset_y", ")", ",", "\n", "SetFlip", "(", "flip", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", "hue", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.image_test.__init__": [[193, 196], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "256", ",", "crop_size", "=", "224", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.image_test.__call__": [[197, 208], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "self", ".", "img_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.WeightedAsymmetricLoss.__init__": [[225, 230], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ",", "disable_torch_grad", "=", "True", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "WeightedAsymmetricLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "disable_torch_grad", "=", "disable_torch_grad", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.WeightedAsymmetricLoss.forward": [[231, 253], ["loss.mean.mean.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "loss.mean.mean.mean", "xs_pos.clamp", "xs_neg.clamp", "utils.WeightedAsymmetricLoss.weight.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "xs_pos", "=", "x", "\n", "xs_neg", "=", "1", "-", "x", "\n", "\n", "# Basic CE calculation", "\n", "los_pos", "=", "y", "*", "torch", ".", "log", "(", "xs_pos", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ")", "\n", "los_neg", "=", "(", "1", "-", "y", ")", "*", "torch", ".", "log", "(", "xs_neg", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ")", "\n", "\n", "# Asymmetric Focusing", "\n", "if", "self", ".", "disable_torch_grad", ":", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "", "neg_weight", "=", "1", "-", "xs_neg", "\n", "if", "self", ".", "disable_torch_grad", ":", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "", "loss", "=", "los_pos", "+", "neg_weight", "*", "los_neg", "\n", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "loss", "=", "loss", "*", "self", ".", "weight", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "loss", "=", "loss", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "return", "-", "loss", ".", "mean", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.statistics": [[27, 57], ["pred.long.size", "pred.long.size", "pred.long.long", "range", "range", "statistics_list.append"], "function", ["None"], ["", "", "def", "statistics", "(", "pred", ",", "y", ",", "thresh", ")", ":", "\n", "    ", "batch_size", "=", "pred", ".", "size", "(", "0", ")", "\n", "class_nb", "=", "pred", ".", "size", "(", "1", ")", "\n", "pred", "=", "pred", ">=", "thresh", "\n", "pred", "=", "pred", ".", "long", "(", ")", "\n", "statistics_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "class_nb", ")", ":", "\n", "        ", "TP", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "TN", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "pred", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "                ", "if", "y", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "                    ", "TP", "+=", "1", "\n", "", "elif", "y", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                    ", "FP", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "assert", "False", "\n", "", "", "elif", "pred", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                ", "if", "y", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "                    ", "FN", "+=", "1", "\n", "", "elif", "y", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                    ", "TN", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "assert", "False", "\n", "", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "", "statistics_list", ".", "append", "(", "{", "'TP'", ":", "TP", ",", "'FP'", ":", "FP", ",", "'TN'", ":", "TN", ",", "'FN'", ":", "FN", "}", ")", "\n", "", "return", "statistics_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_f1_score": [[59, 74], ["range", "len", "f1_score_list.append", "sum", "len"], "function", ["None"], ["", "def", "calc_f1_score", "(", "statistics_list", ")", ":", "\n", "    ", "f1_score_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "statistics_list", ")", ")", ":", "\n", "        ", "TP", "=", "statistics_list", "[", "i", "]", "[", "'TP'", "]", "\n", "FP", "=", "statistics_list", "[", "i", "]", "[", "'FP'", "]", "\n", "FN", "=", "statistics_list", "[", "i", "]", "[", "'FN'", "]", "\n", "\n", "precise", "=", "TP", "/", "(", "TP", "+", "FP", "+", "1e-20", ")", "\n", "recall", "=", "TP", "/", "(", "TP", "+", "FN", "+", "1e-20", ")", "\n", "f1_score", "=", "2", "*", "precise", "*", "recall", "/", "(", "precise", "+", "recall", "+", "1e-20", ")", "\n", "f1_score_list", ".", "append", "(", "f1_score", ")", "\n", "", "mean_f1_score", "=", "sum", "(", "f1_score_list", ")", "/", "len", "(", "f1_score_list", ")", "\n", "\n", "return", "mean_f1_score", ",", "f1_score_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.calc_acc": [[76, 90], ["range", "len", "acc_list.append", "sum", "len"], "function", ["None"], ["", "def", "calc_acc", "(", "statistics_list", ")", ":", "\n", "    ", "acc_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "statistics_list", ")", ")", ":", "\n", "        ", "TP", "=", "statistics_list", "[", "i", "]", "[", "'TP'", "]", "\n", "FP", "=", "statistics_list", "[", "i", "]", "[", "'FP'", "]", "\n", "FN", "=", "statistics_list", "[", "i", "]", "[", "'FN'", "]", "\n", "TN", "=", "statistics_list", "[", "i", "]", "[", "'TN'", "]", "\n", "\n", "acc", "=", "(", "TP", "+", "TN", ")", "/", "(", "TP", "+", "TN", "+", "FP", "+", "FN", ")", "\n", "acc_list", ".", "append", "(", "acc", ")", "\n", "", "mean_acc_score", "=", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "\n", "return", "mean_acc_score", ",", "acc_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.update_statistics_list": [[92, 105], ["range", "len", "len", "len"], "function", ["None"], ["", "def", "update_statistics_list", "(", "old_list", ",", "new_list", ")", ":", "\n", "    ", "if", "not", "old_list", ":", "\n", "        ", "return", "new_list", "\n", "\n", "", "assert", "len", "(", "old_list", ")", "==", "len", "(", "new_list", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "old_list", ")", ")", ":", "\n", "        ", "old_list", "[", "i", "]", "[", "'TP'", "]", "+=", "new_list", "[", "i", "]", "[", "'TP'", "]", "\n", "old_list", "[", "i", "]", "[", "'FP'", "]", "+=", "new_list", "[", "i", "]", "[", "'FP'", "]", "\n", "old_list", "[", "i", "]", "[", "'TN'", "]", "+=", "new_list", "[", "i", "]", "[", "'TN'", "]", "\n", "old_list", "[", "i", "]", "[", "'FN'", "]", "+=", "new_list", "[", "i", "]", "[", "'FN'", "]", "\n", "\n", "", "return", "old_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.BP4D_infolist": [[107, 110], ["None"], "function", ["None"], ["", "def", "BP4D_infolist", "(", "list", ")", ":", "\n", "    ", "infostr", "=", "{", "'AU1: {:.2f} AU2: {:.2f} AU4: {:.2f} AU6: {:.2f} AU7: {:.2f} AU10: {:.2f} AU12: {:.2f} AU14: {:.2f} AU15: {:.2f} AU17: {:.2f} AU23: {:.2f} AU24: {:.2f} '", ".", "format", "(", "100.", "*", "list", "[", "0", "]", ",", "100.", "*", "list", "[", "1", "]", ",", "100.", "*", "list", "[", "2", "]", ",", "100.", "*", "list", "[", "3", "]", ",", "100.", "*", "list", "[", "4", "]", ",", "100.", "*", "list", "[", "5", "]", ",", "100.", "*", "list", "[", "6", "]", ",", "100.", "*", "list", "[", "7", "]", ",", "100.", "*", "list", "[", "8", "]", ",", "100.", "*", "list", "[", "9", "]", ",", "100.", "*", "list", "[", "10", "]", ",", "100.", "*", "list", "[", "11", "]", ")", "}", "\n", "return", "infostr", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.DISFA_infolist": [[111, 114], ["None"], "function", ["None"], ["", "def", "DISFA_infolist", "(", "list", ")", ":", "\n", "    ", "infostr", "=", "{", "'AU1: {:.2f} AU2: {:.2f} AU4: {:.2f}  AU6: {:.2f} AU9: {:.2f} AU12: {:.2f}  AU25: {:.2f} AU26: {:.2f} '", ".", "format", "(", "100.", "*", "list", "[", "0", "]", ",", "100.", "*", "list", "[", "1", "]", ",", "100.", "*", "list", "[", "2", "]", ",", "100.", "*", "list", "[", "3", "]", ",", "100.", "*", "list", "[", "4", "]", ",", "100.", "*", "list", "[", "5", "]", ",", "100.", "*", "list", "[", "6", "]", ",", "100.", "*", "list", "[", "7", "]", ")", "}", "\n", "return", "infostr", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.adjust_learning_rate": [[116, 123], ["math.cos"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "epochs", ",", "init_lr", ",", "iteration", ",", "num_iter", ")", ":", "\n", "\n", "    ", "current_iter", "=", "iteration", "+", "epoch", "*", "num_iter", "\n", "max_iter", "=", "epochs", "*", "num_iter", "\n", "lr", "=", "init_lr", "*", "(", "1", "+", "cos", "(", "pi", "*", "current_iter", "/", "max_iter", ")", ")", "/", "2", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict": [[210, 222], ["torch.load", "torch.load", "OrderedDict", "state_dict.items", "model.load_state_dict", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "", "def", "load_state_dict", "(", "model", ",", "path", ")", ":", "\n", "    ", "checkpoints", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "state_dict", "=", "checkpoints", "[", "'state_dict'", "]", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module.'", "in", "k", ":", "\n", "            ", "k", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "# load params", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.basic_block.LinearBlock.__init__": [[11, 21], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "basic_block.LinearBlock.fc.weight.data.normal_", "basic_block.LinearBlock.bn.weight.data.fill_", "basic_block.LinearBlock.bn.bias.data.zero_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", "=", "None", ",", "drop", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_features", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "out_features", ")", ")", "\n", "self", ".", "bn", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "bn", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.basic_block.LinearBlock.forward": [[22, 27], ["basic_block.LinearBlock.drop", "basic_block.LinearBlock.fc().permute", "basic_block.LinearBlock.relu().permute", "basic_block.LinearBlock.fc", "basic_block.LinearBlock.relu", "basic_block.LinearBlock.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.basic_block.bn_init": [[5, 8], ["bn.weight.data.fill_", "bn.bias.data.zero_"], "function", ["None"], ["def", "bn_init", "(", "bn", ")", ":", "\n", "    ", "bn", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "bn", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.GNN.__init__": [[16, 56], ["torch.Module.__init__", "graph.create_e_matrix", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "MEFL.GNN.init_weights_linear"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph.create_e_matrix", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.GNN.init_weights_linear"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "# GNN Matrix: E x N", "\n", "# Start Matrix Item:  define the source node of one edge", "\n", "# End Matrix Item:  define the target node of one edge", "\n", "# Algorithm details in Residual Gated Graph Convnets: arXiv preprint arXiv:1711.07553", "\n", "# or Benchmarking Graph Neural Networks: arXiv preprint arXiv:2003.00982v3", "\n", "\n", "start", ",", "end", "=", "create_e_matrix", "(", "self", ".", "num_classes", ")", "\n", "self", ".", "start", "=", "Variable", "(", "start", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "end", "=", "Variable", "(", "end", ",", "requires_grad", "=", "False", ")", "\n", "\n", "dim_in", "=", "self", ".", "in_channels", "\n", "dim_out", "=", "self", ".", "in_channels", "\n", "\n", "self", ".", "U1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "V1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "A1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "B1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "E1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "U2", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "V2", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "A2", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "B2", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "E2", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "2", ")", "\n", "self", ".", "bnv1", "=", "nn", ".", "BatchNorm1d", "(", "num_classes", ")", "\n", "self", ".", "bne1", "=", "nn", ".", "BatchNorm1d", "(", "num_classes", "*", "num_classes", ")", "\n", "\n", "self", ".", "bnv2", "=", "nn", ".", "BatchNorm1d", "(", "num_classes", ")", "\n", "self", ".", "bne2", "=", "nn", ".", "BatchNorm1d", "(", "num_classes", "*", "num_classes", ")", "\n", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "init_weights_linear", "(", "dim_in", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.GNN.init_weights_linear": [[57, 76], ["MEFL.GNN.U1.weight.data.normal_", "MEFL.GNN.V1.weight.data.normal_", "MEFL.GNN.A1.weight.data.normal_", "MEFL.GNN.B1.weight.data.normal_", "MEFL.GNN.E1.weight.data.normal_", "MEFL.GNN.U2.weight.data.normal_", "MEFL.GNN.V2.weight.data.normal_", "MEFL.GNN.A2.weight.data.normal_", "MEFL.GNN.B2.weight.data.normal_", "MEFL.GNN.E2.weight.data.normal_", "basic_block.bn_init", "basic_block.bn_init", "basic_block.bn_init", "basic_block.bn_init", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.basic_block.bn_init", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.basic_block.bn_init", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.basic_block.bn_init", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.basic_block.bn_init"], ["", "def", "init_weights_linear", "(", "self", ",", "dim_in", ",", "gain", ")", ":", "\n", "# conv1", "\n", "        ", "scale", "=", "gain", "*", "np", ".", "sqrt", "(", "2.0", "/", "dim_in", ")", "\n", "self", ".", "U1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "V1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "A1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "B1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "E1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "\n", "self", ".", "U2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "V2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "A2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "B2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "self", ".", "E2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "scale", ")", "\n", "\n", "bn_init", "(", "self", ".", "bnv1", ")", "\n", "bn_init", "(", "self", ".", "bne1", ")", "\n", "bn_init", "(", "self", ".", "bnv2", ")", "\n", "bn_init", "(", "self", ".", "bne2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.GNN.forward": [[77, 122], ["MEFL.GNN.get_device", "MEFL.GNN.A1", "MEFL.GNN.B1", "MEFL.GNN.E1", "MEFL.GNN.sigmoid", "e.view.view.view", "MEFL.GNN.softmax", "e.view.view.view", "MEFL.GNN.V1", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "MEFL.GNN.U1", "MEFL.GNN.act", "MEFL.GNN.A2", "MEFL.GNN.B2", "MEFL.GNN.E2", "MEFL.GNN.sigmoid", "e.view.view.view", "MEFL.GNN.softmax", "e.view.view.view", "MEFL.GNN.V2", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "MEFL.GNN.U2", "MEFL.GNN.act", "MEFL.GNN.start.to", "MEFL.GNN.end.to", "MEFL.GNN.act", "MEFL.GNN.act", "MEFL.GNN.bne1", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "MEFL.GNN.bnv1", "MEFL.GNN.bne2", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "MEFL.GNN.bnv2", "MEFL.GNN.t", "MEFL.GNN.t", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge", ")", ":", "\n", "# device", "\n", "        ", "dev", "=", "x", ".", "get_device", "(", ")", "\n", "if", "dev", ">=", "0", ":", "\n", "            ", "start", "=", "self", ".", "start", ".", "to", "(", "dev", ")", "\n", "end", "=", "self", ".", "end", ".", "to", "(", "dev", ")", "\n", "\n", "# GNN Layer 1:", "\n", "", "res", "=", "x", "\n", "Vix", "=", "self", ".", "A1", "(", "x", ")", "# V x d_out", "\n", "Vjx", "=", "self", ".", "B1", "(", "x", ")", "# V x d_out", "\n", "e", "=", "self", ".", "E1", "(", "edge", ")", "# E x d_out", "\n", "edge", "=", "edge", "+", "self", ".", "act", "(", "self", ".", "bne1", "(", "torch", ".", "einsum", "(", "'ev, bvc -> bec'", ",", "(", "end", ",", "Vix", ")", ")", "+", "torch", ".", "einsum", "(", "'ev, bvc -> bec'", ",", "(", "start", ",", "Vjx", ")", ")", "+", "e", ")", ")", "# E x d_out", "\n", "\n", "e", "=", "self", ".", "sigmoid", "(", "edge", ")", "\n", "b", ",", "_", ",", "c", "=", "e", ".", "shape", "\n", "e", "=", "e", ".", "view", "(", "b", ",", "self", ".", "num_classes", ",", "self", ".", "num_classes", ",", "c", ")", "\n", "e", "=", "self", ".", "softmax", "(", "e", ")", "\n", "e", "=", "e", ".", "view", "(", "b", ",", "-", "1", ",", "c", ")", "\n", "\n", "Ujx", "=", "self", ".", "V1", "(", "x", ")", "# V x H_out", "\n", "Ujx", "=", "torch", ".", "einsum", "(", "'ev, bvc -> bec'", ",", "(", "start", ",", "Ujx", ")", ")", "# E x H_out", "\n", "Uix", "=", "self", ".", "U1", "(", "x", ")", "# V x H_out", "\n", "x", "=", "Uix", "+", "torch", ".", "einsum", "(", "'ve, bec -> bvc'", ",", "(", "end", ".", "t", "(", ")", ",", "e", "*", "Ujx", ")", ")", "/", "self", ".", "num_classes", "# V x H_out", "\n", "x", "=", "self", ".", "act", "(", "res", "+", "self", ".", "bnv1", "(", "x", ")", ")", "\n", "res", "=", "x", "\n", "\n", "# GNN Layer 2:", "\n", "Vix", "=", "self", ".", "A2", "(", "x", ")", "# V x d_out", "\n", "Vjx", "=", "self", ".", "B2", "(", "x", ")", "# V x d_out", "\n", "e", "=", "self", ".", "E2", "(", "edge", ")", "# E x d_out", "\n", "edge", "=", "edge", "+", "self", ".", "act", "(", "self", ".", "bne2", "(", "torch", ".", "einsum", "(", "'ev, bvc -> bec'", ",", "(", "end", ",", "Vix", ")", ")", "+", "torch", ".", "einsum", "(", "'ev, bvc -> bec'", ",", "(", "start", ",", "Vjx", ")", ")", "+", "e", ")", ")", "# E x d_out", "\n", "\n", "e", "=", "self", ".", "sigmoid", "(", "edge", ")", "\n", "b", ",", "_", ",", "c", "=", "e", ".", "shape", "\n", "e", "=", "e", ".", "view", "(", "b", ",", "self", ".", "num_classes", ",", "self", ".", "num_classes", ",", "c", ")", "\n", "e", "=", "self", ".", "softmax", "(", "e", ")", "\n", "e", "=", "e", ".", "view", "(", "b", ",", "-", "1", ",", "c", ")", "\n", "\n", "Ujx", "=", "self", ".", "V2", "(", "x", ")", "# V x H_out", "\n", "Ujx", "=", "torch", ".", "einsum", "(", "'ev, bvc -> bec'", ",", "(", "start", ",", "Ujx", ")", ")", "# E x H_out", "\n", "Uix", "=", "self", ".", "U2", "(", "x", ")", "# V x H_out", "\n", "x", "=", "Uix", "+", "torch", ".", "einsum", "(", "'ve, bec -> bvc'", ",", "(", "end", ".", "t", "(", ")", ",", "e", "*", "Ujx", ")", ")", "/", "self", ".", "num_classes", "# V x H_out", "\n", "x", "=", "self", ".", "act", "(", "res", "+", "self", ".", "bnv2", "(", "x", ")", ")", "\n", "return", "x", ",", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.Head.__init__": [[125, 151], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "graph_edge_model.GEM", "MEFL.GNN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "basic_block.LinearBlock", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# The head of network", "\n", "# Input: the feature maps x from backbone", "\n", "# Output: the AU recognition probabilities cl And the logits cl_edge of edge features for classification", "\n", "# Modules: 1. AFG extracts individual Au feature maps U_1 ---- U_N", "\n", "#          2. GEM: graph edge modeling for learning multi-dimensional edge features", "\n", "#          3. Gated-GCN for graph learning with node and multi-dimensional edge features", "\n", "# sc: individually calculate cosine similarity between node features and a trainable vector.", "\n", "# edge fc: for edge prediction", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "class_linear_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "layer", "=", "LinearBlock", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ")", "\n", "class_linear_layers", "+=", "[", "layer", "]", "\n", "", "self", ".", "class_linears", "=", "nn", ".", "ModuleList", "(", "class_linear_layers", ")", "\n", "self", ".", "edge_extractor", "=", "GEM", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "gnn", "=", "GNN", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "sc", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "self", ".", "in_channels", ")", ")", ")", "\n", "self", ".", "edge_fc", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "edge_fc", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "sc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.Head.forward": [[152, 173], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "MEFL.Head.edge_extractor", "f_e.mean.mean.mean", "MEFL.Head.gnn", "MEFL.Head.relu", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "MEFL.Head.edge_fc", "torch.cat.append", "torch.cat.append", "torch.cat.append", "layer().unsqueeze", "torch.normalize.view", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# AFG", "\n", "        ", "f_u", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "class_linears", ")", ":", "\n", "            ", "f_u", ".", "append", "(", "layer", "(", "x", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "f_u", "=", "torch", ".", "cat", "(", "f_u", ",", "dim", "=", "1", ")", "\n", "f_v", "=", "f_u", ".", "mean", "(", "dim", "=", "-", "2", ")", "\n", "\n", "# MEFL", "\n", "f_e", "=", "self", ".", "edge_extractor", "(", "f_u", ",", "x", ")", "\n", "f_e", "=", "f_e", ".", "mean", "(", "dim", "=", "-", "2", ")", "\n", "f_v", ",", "f_e", "=", "self", ".", "gnn", "(", "f_v", ",", "f_e", ")", "\n", "\n", "b", ",", "n", ",", "c", "=", "f_v", ".", "shape", "\n", "sc", "=", "self", ".", "sc", "\n", "sc", "=", "self", ".", "relu", "(", "sc", ")", "\n", "sc", "=", "F", ".", "normalize", "(", "sc", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "cl", "=", "F", ".", "normalize", "(", "f_v", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "cl", "=", "(", "cl", "*", "sc", ".", "view", "(", "1", ",", "n", ",", "c", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "cl_edge", "=", "self", ".", "edge_fc", "(", "f_e", ")", "\n", "return", "cl", ",", "cl_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.MEFARG.__init__": [[176, 204], ["torch.Module.__init__", "basic_block.LinearBlock", "MEFL.Head", "swin_transformer.swin_transformer_tiny", "Exception", "swin_transformer.swin_transformer_small", "swin_transformer.swin_transformer_base", "resnet.resnet18", "resnet.resnet101", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_tiny", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_small", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_base", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet18", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet101", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "12", ",", "backbone", "=", "'swin_transformer_base'", ")", ":", "\n", "        ", "super", "(", "MEFARG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "'transformer'", "in", "backbone", ":", "\n", "            ", "if", "backbone", "==", "'swin_transformer_tiny'", ":", "\n", "                ", "self", ".", "backbone", "=", "swin_transformer_tiny", "(", ")", "\n", "", "elif", "backbone", "==", "'swin_transformer_small'", ":", "\n", "                ", "self", ".", "backbone", "=", "swin_transformer_small", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "backbone", "=", "swin_transformer_base", "(", ")", "\n", "", "self", ".", "in_channels", "=", "self", ".", "backbone", ".", "num_features", "\n", "self", ".", "out_channels", "=", "self", ".", "in_channels", "//", "2", "\n", "self", ".", "backbone", ".", "head", "=", "None", "\n", "\n", "", "elif", "'resnet'", "in", "backbone", ":", "\n", "            ", "if", "backbone", "==", "'resnet18'", ":", "\n", "                ", "self", ".", "backbone", "=", "resnet18", "(", ")", "\n", "", "elif", "backbone", "==", "'resnet101'", ":", "\n", "                ", "self", ".", "backbone", "=", "resnet101", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "backbone", "=", "resnet50", "(", ")", "\n", "", "self", ".", "in_channels", "=", "self", ".", "backbone", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "out_channels", "=", "self", ".", "in_channels", "//", "4", "\n", "self", ".", "backbone", ".", "fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Error: wrong backbone name: \"", ",", "backbone", ")", "\n", "\n", "", "self", ".", "global_linear", "=", "LinearBlock", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", "\n", "self", ".", "head", "=", "Head", "(", "self", ".", "out_channels", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.MEFL.MEFARG.forward": [[205, 211], ["MEFL.MEFARG.backbone", "MEFL.MEFARG.global_linear", "MEFL.MEFARG.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: b d c", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "x", "=", "self", ".", "global_linear", "(", "x", ")", "\n", "cl", ",", "cl_edge", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "cl", ",", "cl_edge", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph.normalize_digraph": [[5, 16], ["A.detach().sum", "torch.eye", "A.get_device", "torch.bmm", "norm_degs_matrix.to.to", "norm_degs_matrix.to.view", "degs_inv_sqrt.view", "torch.bmm", "A.detach"], "function", ["None"], ["def", "normalize_digraph", "(", "A", ")", ":", "\n", "    ", "b", ",", "n", ",", "_", "=", "A", ".", "shape", "\n", "node_degrees", "=", "A", ".", "detach", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "degs_inv_sqrt", "=", "node_degrees", "**", "-", "0.5", "\n", "norm_degs_matrix", "=", "torch", ".", "eye", "(", "n", ")", "\n", "dev", "=", "A", ".", "get_device", "(", ")", "\n", "if", "dev", ">=", "0", ":", "\n", "        ", "norm_degs_matrix", "=", "norm_degs_matrix", ".", "to", "(", "dev", ")", "\n", "", "norm_degs_matrix", "=", "norm_degs_matrix", ".", "view", "(", "1", ",", "n", ",", "n", ")", "*", "degs_inv_sqrt", ".", "view", "(", "b", ",", "n", ",", "1", ")", "\n", "norm_A", "=", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "norm_degs_matrix", ",", "A", ")", ",", "norm_degs_matrix", ")", "\n", "return", "norm_A", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph.create_e_matrix": [[19, 28], ["torch.zeros", "range", "torch.zeros", "range", "start.repeat.repeat"], "function", ["None"], ["", "def", "create_e_matrix", "(", "n", ")", ":", "\n", "    ", "end", "=", "torch", ".", "zeros", "(", "(", "n", "*", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "end", "[", "i", "*", "n", ":", "(", "i", "+", "1", ")", "*", "n", ",", "i", "]", "=", "1", "\n", "", "start", "=", "torch", ".", "zeros", "(", "n", ",", "n", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "start", "[", "i", ",", "i", "]", "=", "1", "\n", "", "start", "=", "start", ".", "repeat", "(", "n", ",", "1", ")", "\n", "return", "start", ",", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.Mlp.__init__": [[23, 31], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.Mlp.forward": [[32, 39], ["swin_transformer.Mlp.fc1", "swin_transformer.Mlp.act", "swin_transformer.Mlp.drop", "swin_transformer.Mlp.fc2", "swin_transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.WindowAttention.__init__": [[87, 120], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "swin_transformer.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.WindowAttention.forward": [[121, 153], ["swin_transformer.WindowAttention.qkv().reshape().permute", "swin_transformer.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "swin_transformer.WindowAttention.attn_drop", "swin_transformer.WindowAttention.proj", "swin_transformer.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "swin_transformer.WindowAttention.view", "swin_transformer.WindowAttention.softmax", "swin_transformer.WindowAttention.softmax", "swin_transformer.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "swin_transformer.WindowAttention.view", "mask.unsqueeze().unsqueeze", "swin_transformer.WindowAttention.qkv", "swin_transformer.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.WindowAttention.extra_repr": [[154, 156], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'dim={self.dim}, window_size={self.window_size}, num_heads={self.num_heads}'", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.WindowAttention.flops": [[157, 169], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "# calculate flops for 1 window with token length of N", "\n", "        ", "flops", "=", "0", "\n", "# qkv = self.qkv(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "3", "*", "self", ".", "dim", "\n", "# attn = (q @ k.transpose(-2, -1))", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "*", "N", "\n", "#  x = (attn @ v)", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "\n", "# x = self.proj(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformerBlock.__init__": [[190, 240], ["torch.Module.__init__", "norm_layer", "swin_transformer.WindowAttention", "norm_layer", "int", "swin_transformer.Mlp", "swin_transformer.SwinTransformerBlock.register_buffer", "min", "min", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "swin_transformer.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "timm.models.layers.to_2tuple", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.window_partition"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "if", "min", "(", "self", ".", "input_resolution", ")", "<=", "self", ".", "window_size", ":", "\n", "# if window size is larger than input resolution, we don't partition windows", "\n", "            ", "self", ".", "shift_size", "=", "0", "\n", "self", ".", "window_size", "=", "min", "(", "self", ".", "input_resolution", ")", "\n", "", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "# calculate attention mask for SW-MSA", "\n", "            ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "H", ",", "W", ",", "1", ")", ")", "# 1 H W 1", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "                ", "for", "w", "in", "w_slices", ":", "\n", "                    ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "# nW, window_size, window_size, 1", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "", "else", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"attn_mask\"", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformerBlock.forward": [[241, 279], ["swin_transformer.SwinTransformerBlock.norm1", "torch.roll.view", "torch.roll.view", "torch.roll.view", "swin_transformer.window_partition", "x_windows.view.view.view", "swin_transformer.SwinTransformerBlock.attn", "attn_windows.view.view.view", "swin_transformer.window_reverse", "torch.roll.view", "torch.roll.view", "torch.roll.view", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "swin_transformer.SwinTransformerBlock.drop_path", "swin_transformer.SwinTransformerBlock.drop_path", "swin_transformer.SwinTransformerBlock.mlp", "swin_transformer.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.window_partition", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.window_reverse"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "self", ".", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformerBlock.extra_repr": [[280, 282], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, \"", "f\"window_size={self.window_size}, shift_size={self.shift_size}, mlp_ratio={self.mlp_ratio}\"", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformerBlock.flops": [[284, 297], ["swin_transformer.SwinTransformerBlock.attn.flops"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "# norm1", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "# W-MSA/SW-MSA", "\n", "nW", "=", "H", "*", "W", "/", "self", ".", "window_size", "/", "self", ".", "window_size", "\n", "flops", "+=", "nW", "*", "self", ".", "attn", ".", "flops", "(", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "# mlp", "\n", "flops", "+=", "2", "*", "H", "*", "W", "*", "self", ".", "dim", "*", "self", ".", "dim", "*", "self", ".", "mlp_ratio", "\n", "# norm2", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.PatchMerging.__init__": [[308, 314], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["def", "__init__", "(", "self", ",", "input_resolution", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.PatchMerging.forward": [[315, 337], ["swin_transformer.PatchMerging.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "swin_transformer.PatchMerging.view", "swin_transformer.PatchMerging.norm", "swin_transformer.PatchMerging.reduction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x: B, H*W, C\n        \"\"\"", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "assert", "H", "%", "2", "==", "0", "and", "W", "%", "2", "==", "0", ",", "f\"x size ({H}*{W}) are not even.\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x2", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.PatchMerging.extra_repr": [[338, 340], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_resolution={self.input_resolution}, dim={self.dim}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.PatchMerging.flops": [[341, 346], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "flops", "=", "H", "*", "W", "*", "self", ".", "dim", "\n", "flops", "+=", "(", "H", "//", "2", ")", "*", "(", "W", "//", "2", ")", "*", "4", "*", "self", ".", "dim", "*", "2", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.BasicLayer.__init__": [[368, 395], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "downsample", "swin_transformer.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "depth", ",", "num_heads", ",", "window_size", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SwinTransformerBlock", "(", "dim", "=", "dim", ",", "input_resolution", "=", "input_resolution", ",", "\n", "num_heads", "=", "num_heads", ",", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "# patch merging layer", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "input_resolution", ",", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.BasicLayer.forward": [[396, 405], ["swin_transformer.BasicLayer.downsample", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.BasicLayer.extra_repr": [[406, 408], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.BasicLayer.flops": [[409, 416], ["blk.flops", "swin_transformer.BasicLayer.downsample.flops"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "flops", "+=", "blk", ".", "flops", "(", ")", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "self", ".", "downsample", ".", "flops", "(", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.PatchEmbed.__init__": [[429, 447], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "patches_resolution", "=", "[", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "]", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "self", ".", "num_patches", "=", "patches_resolution", "[", "0", "]", "*", "patches_resolution", "[", "1", "]", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.PatchEmbed.forward": [[448, 457], ["swin_transformer.PatchEmbed.proj().flatten().transpose", "swin_transformer.PatchEmbed.norm", "swin_transformer.PatchEmbed.proj().flatten", "swin_transformer.PatchEmbed.proj"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# B Ph*Pw C", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.PatchEmbed.flops": [[458, 464], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "Ho", ",", "Wo", "=", "self", ".", "patches_resolution", "\n", "flops", "=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "*", "self", ".", "in_chans", "*", "(", "self", ".", "patch_size", "[", "0", "]", "*", "self", ".", "patch_size", "[", "1", "]", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.__init__": [[492, 549], ["torch.Module.__init__", "len", "int", "swin_transformer.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "norm_layer", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "swin_transformer.SwinTransformer.apply", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "x.item", "swin_transformer.BasicLayer", "swin_transformer.SwinTransformer.layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "7", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "ape", "=", "False", ",", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "ape", "=", "ape", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "num_features", "=", "int", "(", "embed_dim", "*", "2", "**", "(", "self", ".", "num_layers", "-", "1", ")", ")", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "self", ".", "window_size", "=", "window_size", "\n", "# split image into non-overlapping patches", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "patches_resolution", "=", "self", ".", "patch_embed", ".", "patches_resolution", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "\n", "# absolute position embedding", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "self", ".", "absolute_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "absolute_pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "BasicLayer", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "input_resolution", "=", "(", "patches_resolution", "[", "0", "]", "//", "(", "2", "**", "i_layer", ")", ",", "\n", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "i_layer", ")", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "self", ".", "norm", "=", "norm_layer", "(", "self", ".", "num_features", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer._init_weights": [[550, 558], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.no_weight_decay": [[559, 562], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'absolute_pos_embed'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.no_weight_decay_keywords": [[563, 566], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay_keywords", "(", "self", ")", ":", "\n", "        ", "return", "{", "'relative_position_bias_table'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.forward_features": [[567, 580], ["swin_transformer.SwinTransformer.patch_embed", "swin_transformer.SwinTransformer.pos_drop", "swin_transformer.SwinTransformer.norm", "layer"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "absolute_pos_embed", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "# B D C", "\n", "# x = self.avgpool(x.transpose(1, 2))  # B C 1", "\n", "# x = torch.flatten(x, 1)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.forward": [[581, 585], ["swin_transformer.SwinTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "# x = self.head(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.flops": [[586, 594], ["swin_transformer.SwinTransformer.patch_embed.flops", "enumerate", "layer.flops"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "flops", "+=", "self", ".", "patch_embed", ".", "flops", "(", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "flops", "+=", "layer", ".", "flops", "(", ")", "\n", "", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "patches_resolution", "[", "0", "]", "*", "self", ".", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "self", ".", "num_layers", ")", "\n", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "num_classes", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.window_partition": [[41, 54], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.window_reverse": [[56, 71], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_tiny": [[596, 609], ["swin_transformer.SwinTransformer", "SwinTransformer.load_state_dict", "torch.load", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "", "def", "swin_transformer_tiny", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "SwinTransformer", "(", "embed_dim", "=", "96", ",", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "7", ",", "drop_path_rate", "=", "0.2", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'swin_transformer_tiny'", "]", ")", ")", "[", "'model'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_small": [[611, 624], ["swin_transformer.SwinTransformer", "SwinTransformer.load_state_dict", "torch.load", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "def", "swin_transformer_small", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "SwinTransformer", "(", "embed_dim", "=", "96", ",", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "7", ",", "drop_path_rate", "=", "0.3", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'swin_transformer_small'", "]", ")", ")", "[", "'model'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_base": [[626, 639], ["swin_transformer.SwinTransformer", "SwinTransformer.load_state_dict", "torch.load", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "def", "swin_transformer_base", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "SwinTransformer", "(", "embed_dim", "=", "128", ",", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "num_heads", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "window_size", "=", "7", ",", "drop_path_rate", "=", "0.5", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'swin_transformer_base'", "]", ")", ")", "[", "'model'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.BasicBlock.__init__": [[39, 48], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.conv3x3", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.BasicBlock.forward": [[49, 66], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.Bottleneck.__init__": [[71, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.Bottleneck.forward": [[83, 104], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.ResNet.__init__": [[108, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.ResNet._make_layer": [[129, 145], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.ResNet.forward": [[146, 161], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "x.view().permute.view().permute.view().permute", "x.view().permute.view().permute.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.conv3x3": [[31, 34], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet18": [[163, 173], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "", "def", "resnet18", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet18'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet34": [[175, 185], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "def", "resnet34", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet34'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet50": [[187, 197], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "def", "resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet50'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet101": [[199, 209], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "def", "resnet101", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet101'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet152": [[211, 221], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.None.utils.load_state_dict"], ["", "def", "resnet152", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "[", "'resnet152'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.ANFL.GNN.__init__": [[13, 37], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "ANFL.GNN.U.weight.data.normal_", "ANFL.GNN.V.weight.data.normal_", "ANFL.GNN.bnv.weight.data.fill_", "ANFL.GNN.bnv.bias.data.zero_", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ",", "neighbor_num", "=", "4", ",", "metric", "=", "'dots'", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# in_channels: dim of node feature", "\n", "# num_classes: num of nodes", "\n", "# neighbor_num: K in paper and we select the top-K nearest neighbors for each node feature.", "\n", "# metric: metric for assessing node similarity. Used in FGG module to build a dynamical graph", "\n", "# X' = ReLU(X + BN(V(X) + A x U(X)) )", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "neighbor_num", "=", "neighbor_num", "\n", "\n", "# network", "\n", "self", ".", "U", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ")", "\n", "self", ".", "bnv", "=", "nn", ".", "BatchNorm1d", "(", "num_classes", ")", "\n", "\n", "# init", "\n", "self", ".", "U", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "self", ".", "in_channels", ")", ")", "\n", "self", ".", "V", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "self", ".", "in_channels", ")", ")", "\n", "self", ".", "bnv", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "bnv", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.ANFL.GNN.forward": [[38, 70], ["graph.normalize_digraph", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "ANFL.GNN.relu", "ANFL.GNN.detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "[].view", "ANFL.GNN.V", "si.sum.sum.transpose", "ANFL.GNN.detach", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "[].view", "ANFL.GNN.bnv", "si.sum.sum.transpose", "ANFL.GNN.detach().repeat().view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "si.sum.sum.sum", "[].view", "Exception", "ANFL.GNN.U", "si.sum.sum.topk", "ANFL.GNN.detach().repeat", "si.sum.sum.transpose", "si.sum.sum.topk", "ANFL.GNN.detach", "si.sum.sum.topk"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph.normalize_digraph"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "n", ",", "c", "=", "x", ".", "shape", "\n", "\n", "# build dynamical graph", "\n", "if", "self", ".", "metric", "==", "'dots'", ":", "\n", "            ", "si", "=", "x", ".", "detach", "(", ")", "\n", "si", "=", "torch", ".", "einsum", "(", "'b i j , b j k -> b i k'", ",", "si", ",", "si", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "threshold", "=", "si", ".", "topk", "(", "k", "=", "self", ".", "neighbor_num", ",", "dim", "=", "-", "1", ",", "largest", "=", "True", ")", "[", "0", "]", "[", ":", ",", ":", ",", "-", "1", "]", ".", "view", "(", "b", ",", "n", ",", "1", ")", "\n", "adj", "=", "(", "si", ">=", "threshold", ")", ".", "float", "(", ")", "\n", "\n", "", "elif", "self", ".", "metric", "==", "'cosine'", ":", "\n", "            ", "si", "=", "x", ".", "detach", "(", ")", "\n", "si", "=", "F", ".", "normalize", "(", "si", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "si", "=", "torch", ".", "einsum", "(", "'b i j , b j k -> b i k'", ",", "si", ",", "si", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "threshold", "=", "si", ".", "topk", "(", "k", "=", "self", ".", "neighbor_num", ",", "dim", "=", "-", "1", ",", "largest", "=", "True", ")", "[", "0", "]", "[", ":", ",", ":", ",", "-", "1", "]", ".", "view", "(", "b", ",", "n", ",", "1", ")", "\n", "adj", "=", "(", "si", ">=", "threshold", ")", ".", "float", "(", ")", "\n", "\n", "", "elif", "self", ".", "metric", "==", "'l1'", ":", "\n", "            ", "si", "=", "x", ".", "detach", "(", ")", ".", "repeat", "(", "1", ",", "n", ",", "1", ")", ".", "view", "(", "b", ",", "n", ",", "n", ",", "c", ")", "\n", "si", "=", "torch", ".", "abs", "(", "si", ".", "transpose", "(", "1", ",", "2", ")", "-", "si", ")", "\n", "si", "=", "si", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "threshold", "=", "si", ".", "topk", "(", "k", "=", "self", ".", "neighbor_num", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ")", "[", "0", "]", "[", ":", ",", ":", ",", "-", "1", "]", ".", "view", "(", "b", ",", "n", ",", "1", ")", "\n", "adj", "=", "(", "si", "<=", "threshold", ")", ".", "float", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Error: wrong metric: \"", ",", "self", ".", "metric", ")", "\n", "\n", "# GNN process", "\n", "", "A", "=", "normalize_digraph", "(", "adj", ")", "\n", "aggregate", "=", "torch", ".", "einsum", "(", "'b i j, b j k->b i k'", ",", "A", ",", "self", ".", "V", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", "+", "self", ".", "bnv", "(", "aggregate", "+", "self", ".", "U", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.ANFL.Head.__init__": [[73, 87], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ANFL.GNN", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "basic_block.LinearBlock", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ",", "neighbor_num", "=", "4", ",", "metric", "=", "'dots'", ")", ":", "\n", "        ", "super", "(", "Head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "class_linear_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "layer", "=", "LinearBlock", "(", "self", ".", "in_channels", ",", "self", ".", "in_channels", ")", "\n", "class_linear_layers", "+=", "[", "layer", "]", "\n", "", "self", ".", "class_linears", "=", "nn", ".", "ModuleList", "(", "class_linear_layers", ")", "\n", "self", ".", "gnn", "=", "GNN", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ",", "neighbor_num", "=", "neighbor_num", ",", "metric", "=", "metric", ")", "\n", "self", ".", "sc", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "self", ".", "in_channels", ")", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "sc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.ANFL.Head.forward": [[88, 104], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "ANFL.Head.gnn", "ANFL.Head.relu", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat.append", "torch.cat.append", "torch.cat.append", "layer().unsqueeze", "torch.normalize.view", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# AFG", "\n", "        ", "f_u", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "class_linears", ")", ":", "\n", "            ", "f_u", ".", "append", "(", "layer", "(", "x", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "f_u", "=", "torch", ".", "cat", "(", "f_u", ",", "dim", "=", "1", ")", "\n", "f_v", "=", "f_u", ".", "mean", "(", "dim", "=", "-", "2", ")", "\n", "# FGG", "\n", "f_v", "=", "self", ".", "gnn", "(", "f_v", ")", "\n", "b", ",", "n", ",", "c", "=", "f_v", ".", "shape", "\n", "sc", "=", "self", ".", "sc", "\n", "sc", "=", "self", ".", "relu", "(", "sc", ")", "\n", "sc", "=", "F", ".", "normalize", "(", "sc", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "cl", "=", "F", ".", "normalize", "(", "f_v", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "cl", "=", "(", "cl", "*", "sc", ".", "view", "(", "1", ",", "n", ",", "c", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "return", "cl", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.ANFL.MEFARG.__init__": [[107, 135], ["torch.Module.__init__", "basic_block.LinearBlock", "ANFL.Head", "swin_transformer.swin_transformer_tiny", "Exception", "swin_transformer.swin_transformer_small", "swin_transformer.swin_transformer_base", "resnet.resnet18", "resnet.resnet101", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_tiny", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_small", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.swin_transformer.swin_transformer_base", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet18", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet101", "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "12", ",", "backbone", "=", "'swin_transformer_base'", ",", "neighbor_num", "=", "4", ",", "metric", "=", "'dots'", ")", ":", "\n", "        ", "super", "(", "MEFARG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "'transformer'", "in", "backbone", ":", "\n", "            ", "if", "backbone", "==", "'swin_transformer_tiny'", ":", "\n", "                ", "self", ".", "backbone", "=", "swin_transformer_tiny", "(", ")", "\n", "", "elif", "backbone", "==", "'swin_transformer_small'", ":", "\n", "                ", "self", ".", "backbone", "=", "swin_transformer_small", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "backbone", "=", "swin_transformer_base", "(", ")", "\n", "", "self", ".", "in_channels", "=", "self", ".", "backbone", ".", "num_features", "\n", "self", ".", "out_channels", "=", "self", ".", "in_channels", "//", "2", "\n", "self", ".", "backbone", ".", "head", "=", "None", "\n", "\n", "", "elif", "'resnet'", "in", "backbone", ":", "\n", "            ", "if", "backbone", "==", "'resnet18'", ":", "\n", "                ", "self", ".", "backbone", "=", "resnet18", "(", ")", "\n", "", "elif", "backbone", "==", "'resnet101'", ":", "\n", "                ", "self", ".", "backbone", "=", "resnet101", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "backbone", "=", "resnet50", "(", ")", "\n", "", "self", ".", "in_channels", "=", "self", ".", "backbone", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "out_channels", "=", "self", ".", "in_channels", "//", "4", "\n", "self", ".", "backbone", ".", "fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Error: wrong backbone name: \"", ",", "backbone", ")", "\n", "\n", "", "self", ".", "global_linear", "=", "LinearBlock", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", "\n", "self", ".", "head", "=", "Head", "(", "self", ".", "out_channels", ",", "num_classes", ",", "neighbor_num", ",", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.ANFL.MEFARG.forward": [[136, 142], ["ANFL.MEFARG.backbone", "ANFL.MEFARG.global_linear", "ANFL.MEFARG.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: b d c", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "x", "=", "self", ".", "global_linear", "(", "x", ")", "\n", "cl", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "cl", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.CrossAttn.__init__": [[8, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "graph_edge_model.CrossAttn.linear_k.weight.data.normal_", "graph_edge_model.CrossAttn.linear_q.weight.data.normal_", "graph_edge_model.CrossAttn.linear_v.weight.data.normal_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "CrossAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "linear_q", "=", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", "//", "2", ")", "\n", "self", ".", "linear_k", "=", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", "//", "2", ")", "\n", "self", ".", "linear_v", "=", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "scale", "=", "(", "self", ".", "in_channels", "//", "2", ")", "**", "-", "0.5", "\n", "self", ".", "attend", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "linear_k", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "(", "in_channels", "//", "2", ")", ")", ")", "\n", "self", ".", "linear_q", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "(", "in_channels", "//", "2", ")", ")", ")", "\n", "self", ".", "linear_v", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "in_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.CrossAttn.forward": [[21, 29], ["graph_edge_model.CrossAttn.linear_q", "graph_edge_model.CrossAttn.linear_k", "graph_edge_model.CrossAttn.linear_v", "graph_edge_model.CrossAttn.attend", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graph_edge_model.CrossAttn.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ",", "x", ")", ":", "\n", "        ", "query", "=", "self", ".", "linear_q", "(", "y", ")", "\n", "key", "=", "self", ".", "linear_k", "(", "x", ")", "\n", "value", "=", "self", ".", "linear_v", "(", "x", ")", "\n", "dots", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "self", ".", "attend", "(", "dots", ")", "\n", "out", "=", "torch", ".", "matmul", "(", "attn", ",", "value", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__": [[32, 44], ["torch.Module.__init__", "graph_edge_model.CrossAttn", "graph_edge_model.CrossAttn", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "graph_edge_model.GEM.edge_proj.weight.data.normal_", "graph_edge_model.GEM.bn.weight.data.fill_", "graph_edge_model.GEM.bn.bias.data.zero_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "GEM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "FAM", "=", "CrossAttn", "(", "self", ".", "in_channels", ")", "\n", "self", ".", "ARM", "=", "CrossAttn", "(", "self", ".", "in_channels", ")", "\n", "self", ".", "edge_proj", "=", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_classes", "*", "self", ".", "num_classes", ")", "\n", "\n", "self", ".", "edge_proj", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "in_channels", ")", ")", "\n", "self", ".", "bn", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "bn", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.model.graph_edge_model.GEM.forward": [[45, 54], ["global_feature.repeat().view.repeat().view.repeat().view", "graph_edge_model.GEM.FAM", "graph_edge_model.GEM.repeat().view", "graph_edge_model.GEM.repeat().view", "graph_edge_model.GEM.ARM", "graph_edge_model.GEM.bn", "graph_edge_model.GEM.edge_proj", "global_feature.repeat().view.repeat().view.repeat", "graph_edge_model.GEM.repeat", "graph_edge_model.GEM.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "class_feature", ",", "global_feature", ")", ":", "\n", "        ", "B", ",", "N", ",", "D", ",", "C", "=", "class_feature", ".", "shape", "\n", "global_feature", "=", "global_feature", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", ".", "view", "(", "B", ",", "N", ",", "D", ",", "C", ")", "\n", "feat", "=", "self", ".", "FAM", "(", "class_feature", ",", "global_feature", ")", "\n", "feat_end", "=", "feat", ".", "repeat", "(", "1", ",", "1", ",", "N", ",", "1", ")", ".", "view", "(", "B", ",", "-", "1", ",", "D", ",", "C", ")", "\n", "feat_start", "=", "feat", ".", "repeat", "(", "1", ",", "N", ",", "1", ",", "1", ")", ".", "view", "(", "B", ",", "-", "1", ",", "D", ",", "C", ")", "\n", "feat", "=", "self", ".", "ARM", "(", "feat_start", ",", "feat_end", ")", "\n", "edge", "=", "self", ".", "bn", "(", "self", ".", "edge_proj", "(", "feat", ")", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.cvi-szu_me-graphau.tool.BP4D_image_label_process.get_AUlabels": [[17, 26], ["os.path.join", "pandas.read_csv", "str", "list"], "function", ["None"], ["def", "get_AUlabels", "(", "seq", ",", "task", ",", "path", ")", ":", "\n", "\t", "path_label", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'{sequence}_{task}.csv'", ".", "format", "(", "sequence", "=", "seq", ",", "task", "=", "task", ")", ")", "\n", "usecols", "=", "[", "'0'", ",", "'1'", ",", "'2'", ",", "'4'", ",", "'6'", ",", "'7'", ",", "'10'", ",", "'12'", ",", "'14'", ",", "'15'", ",", "'17'", ",", "'23'", ",", "'24'", "]", "\n", "df", "=", "pd", ".", "read_csv", "(", "path_label", ",", "header", "=", "0", ",", "index_col", "=", "0", ",", "usecols", "=", "usecols", ")", "\n", "frames", "=", "[", "str", "(", "item", ")", "for", "item", "in", "list", "(", "df", ".", "index", ".", "values", ")", "]", "\n", "frames_path", "=", "[", "'{}/{}/{}'", ".", "format", "(", "seq", ",", "task", ",", "item", ")", "for", "item", "in", "frames", "]", "\n", "labels", "=", "df", ".", "values", "\n", "# \u8fd4\u56de\u7684frames\u662flist\uff0c\u503c\u662f\u6392\u597d\u5e8f\u7684int\u53d8\u91cf\uff0c\u6307\u793a\u5bf9\u5e94\u7684\u5e27\u3002labels\u662fN*12\u7684np.ndarray\uff0c\u5bf9\u5e94AU\u6807\u7b7e", "\n", "return", "frames_path", ",", "labels", "\n", "\n"]]}