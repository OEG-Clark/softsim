{"home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel.__init__": [[27, 45], ["super().__init__", "transformers.AutoConfig.from_pretrained", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "models.CustomBertModel.register_buffer", "transformers.AutoModel.from_pretrained", "copy.deepcopy", "torch.tensor().log", "torch.tensor().log", "torch.tensor().log", "torch.tensor().log", "max", "torch.functional.normalize", "torch.functional.normalize", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.ProgressMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "args", ".", "pretrained_model", ")", "\n", "self", ".", "log_inv_t", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.0", "/", "args", ".", "t", ")", ".", "log", "(", ")", ",", "requires_grad", "=", "args", ".", "finetune_t", ")", "\n", "self", ".", "add_margin", "=", "args", ".", "additive_margin", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "pre_batch", "=", "args", ".", "pre_batch", "\n", "num_pre_batch_vectors", "=", "max", "(", "1", ",", "self", ".", "pre_batch", ")", "*", "self", ".", "batch_size", "\n", "random_vector", "=", "torch", ".", "randn", "(", "num_pre_batch_vectors", ",", "self", ".", "config", ".", "hidden_size", ")", "\n", "self", ".", "register_buffer", "(", "\"pre_batch_vectors\"", ",", "\n", "nn", ".", "functional", ".", "normalize", "(", "random_vector", ",", "dim", "=", "1", ")", ",", "\n", "persistent", "=", "False", ")", "\n", "self", ".", "offset", "=", "0", "\n", "self", ".", "pre_batch_exs", "=", "[", "None", "for", "_", "in", "range", "(", "num_pre_batch_vectors", ")", "]", "\n", "\n", "self", ".", "hr_bert", "=", "AutoModel", ".", "from_pretrained", "(", "args", ".", "pretrained_model", ")", "\n", "self", ".", "tail_bert", "=", "deepcopy", "(", "self", ".", "hr_bert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel._encode": [[46, 56], ["encoder", "models._pool_output"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.models._pool_output"], ["", "def", "_encode", "(", "self", ",", "encoder", ",", "token_ids", ",", "mask", ",", "token_type_ids", ")", ":", "\n", "        ", "outputs", "=", "encoder", "(", "input_ids", "=", "token_ids", ",", "\n", "attention_mask", "=", "mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "return_dict", "=", "True", ")", "\n", "\n", "last_hidden_state", "=", "outputs", ".", "last_hidden_state", "\n", "cls_output", "=", "last_hidden_state", "[", ":", ",", "0", ",", ":", "]", "\n", "cls_output", "=", "_pool_output", "(", "self", ".", "args", ".", "pooling", ",", "cls_output", ",", "mask", ",", "last_hidden_state", ")", "\n", "return", "cls_output", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel.forward": [[57, 85], ["models.CustomBertModel._encode", "models.CustomBertModel._encode", "models.CustomBertModel._encode", "models.CustomBertModel.predict_ent_embedding"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel._encode", "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel._encode", "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel._encode", "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel.predict_ent_embedding"], ["", "def", "forward", "(", "self", ",", "hr_token_ids", ",", "hr_mask", ",", "hr_token_type_ids", ",", "\n", "tail_token_ids", ",", "tail_mask", ",", "tail_token_type_ids", ",", "\n", "head_token_ids", ",", "head_mask", ",", "head_token_type_ids", ",", "\n", "only_ent_embedding", "=", "False", ",", "**", "kwargs", ")", "->", "dict", ":", "\n", "        ", "if", "only_ent_embedding", ":", "\n", "            ", "return", "self", ".", "predict_ent_embedding", "(", "tail_token_ids", "=", "tail_token_ids", ",", "\n", "tail_mask", "=", "tail_mask", ",", "\n", "tail_token_type_ids", "=", "tail_token_type_ids", ")", "\n", "\n", "", "hr_vector", "=", "self", ".", "_encode", "(", "self", ".", "hr_bert", ",", "\n", "token_ids", "=", "hr_token_ids", ",", "\n", "mask", "=", "hr_mask", ",", "\n", "token_type_ids", "=", "hr_token_type_ids", ")", "\n", "\n", "tail_vector", "=", "self", ".", "_encode", "(", "self", ".", "tail_bert", ",", "\n", "token_ids", "=", "tail_token_ids", ",", "\n", "mask", "=", "tail_mask", ",", "\n", "token_type_ids", "=", "tail_token_type_ids", ")", "\n", "\n", "head_vector", "=", "self", ".", "_encode", "(", "self", ".", "tail_bert", ",", "\n", "token_ids", "=", "head_token_ids", ",", "\n", "mask", "=", "head_mask", ",", "\n", "token_type_ids", "=", "head_token_type_ids", ")", "\n", "\n", "# DataParallel only support tensor/dict", "\n", "return", "{", "'hr_vector'", ":", "hr_vector", ",", "\n", "'tail_vector'", ":", "tail_vector", ",", "\n", "'head_vector'", ":", "head_vector", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel.compute_logits": [[86, 116], ["hr_vector.size", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "hr_vector.mm", "models.CustomBertModel.log_inv_t.exp", "batch_dict.get", "tail_vector.t", "torch.zeros().fill_diagonal_().to", "torch.zeros().fill_diagonal_().to", "torch.zeros().fill_diagonal_().to", "torch.zeros().fill_diagonal_().to", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "models.CustomBertModel._compute_pre_batch_logits", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.CustomBertModel.masked_fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.CustomBertModel.log_inv_t.detach().exp", "hr_vector.detach", "tail_vector.detach", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.CustomBertModel.log_inv_t.exp", "torch.zeros().fill_diagonal_", "torch.zeros().fill_diagonal_", "torch.zeros().fill_diagonal_", "torch.zeros().fill_diagonal_", "models.CustomBertModel.unsqueeze", "models.CustomBertModel.log_inv_t.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel._compute_pre_batch_logits"], ["", "def", "compute_logits", "(", "self", ",", "output_dict", ":", "dict", ",", "batch_dict", ":", "dict", ")", "->", "dict", ":", "\n", "        ", "hr_vector", ",", "tail_vector", "=", "output_dict", "[", "'hr_vector'", "]", ",", "output_dict", "[", "'tail_vector'", "]", "\n", "batch_size", "=", "hr_vector", ".", "size", "(", "0", ")", "\n", "labels", "=", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "hr_vector", ".", "device", ")", "\n", "\n", "logits", "=", "hr_vector", ".", "mm", "(", "tail_vector", ".", "t", "(", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "logits", "-=", "torch", ".", "zeros", "(", "logits", ".", "size", "(", ")", ")", ".", "fill_diagonal_", "(", "self", ".", "add_margin", ")", ".", "to", "(", "logits", ".", "device", ")", "\n", "", "logits", "*=", "self", ".", "log_inv_t", ".", "exp", "(", ")", "\n", "\n", "triplet_mask", "=", "batch_dict", ".", "get", "(", "'triplet_mask'", ",", "None", ")", "\n", "if", "triplet_mask", "is", "not", "None", ":", "\n", "            ", "logits", ".", "masked_fill_", "(", "~", "triplet_mask", ",", "-", "1e4", ")", "\n", "\n", "", "if", "self", ".", "pre_batch", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "pre_batch_logits", "=", "self", ".", "_compute_pre_batch_logits", "(", "hr_vector", ",", "tail_vector", ",", "batch_dict", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "logits", ",", "pre_batch_logits", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_self_negative", "and", "self", ".", "training", ":", "\n", "            ", "head_vector", "=", "output_dict", "[", "'head_vector'", "]", "\n", "self_neg_logits", "=", "torch", ".", "sum", "(", "hr_vector", "*", "head_vector", ",", "dim", "=", "1", ")", "*", "self", ".", "log_inv_t", ".", "exp", "(", ")", "\n", "self_negative_mask", "=", "batch_dict", "[", "'self_negative_mask'", "]", "\n", "self_neg_logits", ".", "masked_fill_", "(", "~", "self_negative_mask", ",", "-", "1e4", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "logits", ",", "self_neg_logits", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "{", "'logits'", ":", "logits", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'inv_t'", ":", "self", ".", "log_inv_t", ".", "detach", "(", ")", ".", "exp", "(", ")", ",", "\n", "'hr_vector'", ":", "hr_vector", ".", "detach", "(", ")", ",", "\n", "'tail_vector'", ":", "tail_vector", ".", "detach", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel._compute_pre_batch_logits": [[117, 134], ["hr_vector.mm", "tail_vector.data.clone", "tail_vector.size", "models.CustomBertModel.pre_batch_vectors.clone().t", "models.CustomBertModel.log_inv_t.exp", "triplet_mask.construct_mask().to", "hr_vector.mm.masked_fill_", "len", "models.CustomBertModel.pre_batch_vectors.clone", "triplet_mask.construct_mask"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet_mask.construct_mask"], ["", "def", "_compute_pre_batch_logits", "(", "self", ",", "hr_vector", ":", "torch", ".", "tensor", ",", "\n", "tail_vector", ":", "torch", ".", "tensor", ",", "\n", "batch_dict", ":", "dict", ")", "->", "torch", ".", "tensor", ":", "\n", "        ", "assert", "tail_vector", ".", "size", "(", "0", ")", "==", "self", ".", "batch_size", "\n", "batch_exs", "=", "batch_dict", "[", "'batch_data'", "]", "\n", "# batch_size x num_neg", "\n", "pre_batch_logits", "=", "hr_vector", ".", "mm", "(", "self", ".", "pre_batch_vectors", ".", "clone", "(", ")", ".", "t", "(", ")", ")", "\n", "pre_batch_logits", "*=", "self", ".", "log_inv_t", ".", "exp", "(", ")", "*", "self", ".", "args", ".", "pre_batch_weight", "\n", "if", "self", ".", "pre_batch_exs", "[", "-", "1", "]", "is", "not", "None", ":", "\n", "            ", "pre_triplet_mask", "=", "construct_mask", "(", "batch_exs", ",", "self", ".", "pre_batch_exs", ")", ".", "to", "(", "hr_vector", ".", "device", ")", "\n", "pre_batch_logits", ".", "masked_fill_", "(", "~", "pre_triplet_mask", ",", "-", "1e4", ")", "\n", "\n", "", "self", ".", "pre_batch_vectors", "[", "self", ".", "offset", ":", "(", "self", ".", "offset", "+", "self", ".", "batch_size", ")", "]", "=", "tail_vector", ".", "data", ".", "clone", "(", ")", "\n", "self", ".", "pre_batch_exs", "[", "self", ".", "offset", ":", "(", "self", ".", "offset", "+", "self", ".", "batch_size", ")", "]", "=", "batch_exs", "\n", "self", ".", "offset", "=", "(", "self", ".", "offset", "+", "self", ".", "batch_size", ")", "%", "len", "(", "self", ".", "pre_batch_exs", ")", "\n", "\n", "return", "pre_batch_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel.predict_ent_embedding": [[135, 142], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.CustomBertModel._encode", "models.CustomBertModel.detach"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel._encode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_ent_embedding", "(", "self", ",", "tail_token_ids", ",", "tail_mask", ",", "tail_token_type_ids", ",", "**", "kwargs", ")", "->", "dict", ":", "\n", "        ", "ent_vectors", "=", "self", ".", "_encode", "(", "self", ".", "tail_bert", ",", "\n", "token_ids", "=", "tail_token_ids", ",", "\n", "mask", "=", "tail_mask", ",", "\n", "token_type_ids", "=", "tail_token_type_ids", ")", "\n", "return", "{", "'ent_vectors'", ":", "ent_vectors", ".", "detach", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.build_model": [[13, 15], ["models.CustomBertModel"], "function", ["None"], ["def", "build_model", "(", "args", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "return", "CustomBertModel", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.models._pool_output": [[144, 164], ["torch.functional.normalize", "mask.unsqueeze().expand().long", "torch.max", "torch.max", "mask.unsqueeze().expand().float", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "mask.unsqueeze().expand", "mask.unsqueeze().expand().float.sum", "last_hidden_state.size", "mask.unsqueeze().expand", "mask.unsqueeze", "last_hidden_state.size", "mask.unsqueeze"], "function", ["None"], ["", "", "def", "_pool_output", "(", "pooling", ":", "str", ",", "\n", "cls_output", ":", "torch", ".", "tensor", ",", "\n", "mask", ":", "torch", ".", "tensor", ",", "\n", "last_hidden_state", ":", "torch", ".", "tensor", ")", "->", "torch", ".", "tensor", ":", "\n", "    ", "if", "pooling", "==", "'cls'", ":", "\n", "        ", "output_vector", "=", "cls_output", "\n", "", "elif", "pooling", "==", "'max'", ":", "\n", "        ", "input_mask_expanded", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "last_hidden_state", ".", "size", "(", ")", ")", ".", "long", "(", ")", "\n", "last_hidden_state", "[", "input_mask_expanded", "==", "0", "]", "=", "-", "1e4", "\n", "output_vector", "=", "torch", ".", "max", "(", "last_hidden_state", ",", "1", ")", "[", "0", "]", "\n", "", "elif", "pooling", "==", "'mean'", ":", "\n", "        ", "input_mask_expanded", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "last_hidden_state", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "sum_embeddings", "=", "torch", ".", "sum", "(", "last_hidden_state", "*", "input_mask_expanded", ",", "1", ")", "\n", "sum_mask", "=", "torch", ".", "clamp", "(", "input_mask_expanded", ".", "sum", "(", "1", ")", ",", "min", "=", "1e-4", ")", "\n", "output_vector", "=", "sum_embeddings", "/", "sum_mask", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'Unknown pooling mode: {}'", ".", "format", "(", "pooling", ")", "\n", "\n", "", "output_vector", "=", "nn", ".", "functional", ".", "normalize", "(", "output_vector", ",", "dim", "=", "1", ")", "\n", "return", "output_vector", "\n", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.rerank.rerank_by_graph": [[11, 30], ["range", "batch_score.size", "dict_hub.get_link_graph().get_n_hop_entity_indices", "torch.tensor().to", "torch.LongTensor().to", "batch_score[].index_add_", "dict_hub.get_link_graph", "torch.tensor", "torch.LongTensor", "list"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.LinkGraph.get_n_hop_entity_indices", "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_link_graph"], ["def", "rerank_by_graph", "(", "batch_score", ":", "torch", ".", "tensor", ",", "\n", "examples", ":", "List", "[", "Example", "]", ",", "\n", "entity_dict", ":", "EntityDict", ")", ":", "\n", "\n", "    ", "if", "args", ".", "task", "==", "'wiki5m_ind'", ":", "\n", "        ", "assert", "args", ".", "neighbor_weight", "<", "1e-6", ",", "'Inductive setting can not use re-rank strategy'", "\n", "\n", "", "if", "args", ".", "neighbor_weight", "<", "1e-6", ":", "\n", "        ", "return", "\n", "\n", "", "for", "idx", "in", "range", "(", "batch_score", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "cur_ex", "=", "examples", "[", "idx", "]", "\n", "n_hop_indices", "=", "get_link_graph", "(", ")", ".", "get_n_hop_entity_indices", "(", "cur_ex", ".", "head_id", ",", "\n", "entity_dict", "=", "entity_dict", ",", "\n", "n_hop", "=", "args", ".", "rerank_n_hop", ")", "\n", "delta", "=", "torch", ".", "tensor", "(", "[", "args", ".", "neighbor_weight", "for", "_", "in", "n_hop_indices", "]", ")", ".", "to", "(", "batch_score", ".", "device", ")", "\n", "n_hop_indices", "=", "torch", ".", "LongTensor", "(", "list", "(", "n_hop_indices", ")", ")", ".", "to", "(", "batch_score", ".", "device", ")", "\n", "\n", "batch_score", "[", "idx", "]", ".", "index_add_", "(", "0", ",", "n_hop_indices", ",", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._get_shard_path": [[17, 19], ["None"], "function", ["None"], ["def", "_get_shard_path", "(", "shard_id", "=", "0", ")", ":", "\n", "    ", "return", "'{}/shard_{}'", ".", "format", "(", "args", ".", "model_dir", ",", "shard_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._dump_entity_embeddings": [[21, 36], ["range", "len", "eval_wiki5m_trans._get_shard_path", "os.path.exists", "logger_config.logger.info", "predictor.predict_by_entities", "torch.save", "logger_config.logger.info", "logger_config.logger.info", "eval_wiki5m_trans._get_shard_path"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._get_shard_path", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.predict_by_entities", "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._get_shard_path"], ["", "def", "_dump_entity_embeddings", "(", "predictor", ":", "BertPredictor", ")", ":", "\n", "    ", "for", "start", "in", "range", "(", "0", ",", "len", "(", "entity_dict", ")", ",", "SHARD_SIZE", ")", ":", "\n", "        ", "end", "=", "start", "+", "SHARD_SIZE", "\n", "shard_id", "=", "start", "//", "SHARD_SIZE", "\n", "shard_path", "=", "_get_shard_path", "(", "shard_id", "=", "shard_id", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "shard_path", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'{} already exists'", ".", "format", "(", "shard_path", ")", ")", "\n", "continue", "\n", "\n", "", "logger", ".", "info", "(", "'shard_id={}, from {} to {}'", ".", "format", "(", "shard_id", ",", "start", ",", "end", ")", ")", "\n", "shard_entity_exs", "=", "entity_dict", ".", "entity_exs", "[", "start", ":", "end", "]", "\n", "shard_entity_tensor", "=", "predictor", ".", "predict_by_entities", "(", "shard_entity_exs", ")", "\n", "torch", ".", "save", "(", "shard_entity_tensor", ",", "_get_shard_path", "(", "shard_id", "=", "shard_id", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'done for shard_id={}'", ".", "format", "(", "shard_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._load_entity_embeddings": [[38, 53], ["os.path.exists", "range", "torch.cat", "logger_config.logger.info", "eval_wiki5m_trans._get_shard_path", "len", "eval_wiki5m_trans._get_shard_path", "torch.load", "logger_config.logger.info", "shard_tensors.append", "torch.cat.size", "len", "torch.cat.size", "torch.load.size"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._get_shard_path", "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._get_shard_path", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load"], ["", "", "def", "_load_entity_embeddings", "(", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "_get_shard_path", "(", ")", ")", "\n", "\n", "shard_tensors", "=", "[", "]", "\n", "for", "start", "in", "range", "(", "0", ",", "len", "(", "entity_dict", ")", ",", "SHARD_SIZE", ")", ":", "\n", "        ", "shard_id", "=", "start", "//", "SHARD_SIZE", "\n", "shard_path", "=", "_get_shard_path", "(", "shard_id", "=", "shard_id", ")", "\n", "shard_entity_tensor", "=", "torch", ".", "load", "(", "shard_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "logger", ".", "info", "(", "'Load {} entity embeddings from {}'", ".", "format", "(", "shard_entity_tensor", ".", "size", "(", "0", ")", ",", "shard_path", ")", ")", "\n", "shard_tensors", ".", "append", "(", "shard_entity_tensor", ")", "\n", "\n", "", "entity_tensor", "=", "torch", ".", "cat", "(", "shard_tensors", ",", "dim", "=", "0", ")", "\n", "logger", ".", "info", "(", "'{} entity embeddings in total'", ".", "format", "(", "entity_tensor", ".", "size", "(", "0", ")", ")", ")", "\n", "assert", "entity_tensor", ".", "size", "(", "0", ")", "==", "len", "(", "entity_dict", ".", "entity_exs", ")", "\n", "return", "entity_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans.predict_by_split": [[55, 83], ["max", "os.path.exists", "os.path.exists", "os.path.exists", "predict.BertPredictor", "predict.BertPredictor.load", "eval_wiki5m_trans._dump_entity_embeddings", "_load_entity_embeddings().cuda", "evaluate.eval_single_direction", "evaluate.eval_single_direction", "logger_config.logger.info", "os.path.basename", "round", "os.path.dirname", "os.path.basename", "open", "writer.write", "writer.write", "writer.write", "torch.cuda.device_count", "eval_wiki5m_trans._load_entity_embeddings", "json.dumps", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._dump_entity_embeddings", "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.eval_single_direction", "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.eval_single_direction", "home.repos.pwc.inspect_result.intfloat_simkgc.None.eval_wiki5m_trans._load_entity_embeddings"], ["", "def", "predict_by_split", "(", ")", ":", "\n", "    ", "args", ".", "batch_size", "=", "max", "(", "args", ".", "batch_size", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", "*", "1024", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "valid_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "train_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "eval_model_path", ")", "\n", "\n", "predictor", "=", "BertPredictor", "(", ")", "\n", "predictor", ".", "load", "(", "ckt_path", "=", "args", ".", "eval_model_path", ",", "use_data_parallel", "=", "True", ")", "\n", "_dump_entity_embeddings", "(", "predictor", ")", "\n", "\n", "entity_tensor", "=", "_load_entity_embeddings", "(", ")", ".", "cuda", "(", ")", "\n", "forward_metrics", "=", "eval_single_direction", "(", "predictor", ",", "\n", "entity_tensor", "=", "entity_tensor", ",", "\n", "eval_forward", "=", "True", ",", "\n", "batch_size", "=", "32", ")", "\n", "backward_metrics", "=", "eval_single_direction", "(", "predictor", ",", "\n", "entity_tensor", "=", "entity_tensor", ",", "\n", "eval_forward", "=", "False", ",", "\n", "batch_size", "=", "32", ")", "\n", "metrics", "=", "{", "k", ":", "round", "(", "(", "forward_metrics", "[", "k", "]", "+", "backward_metrics", "[", "k", "]", ")", "/", "2", ",", "4", ")", "for", "k", "in", "forward_metrics", "}", "\n", "logger", ".", "info", "(", "'Averaged metrics: {}'", ".", "format", "(", "metrics", ")", ")", "\n", "\n", "prefix", ",", "basename", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "eval_model_path", ")", ",", "os", ".", "path", ".", "basename", "(", "args", ".", "eval_model_path", ")", "\n", "split", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "valid_path", ")", "\n", "with", "open", "(", "'{}/metrics_{}_{}.json'", ".", "format", "(", "prefix", ",", "split", ",", "basename", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "'forward metrics: {}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "forward_metrics", ")", ")", ")", "\n", "writer", ".", "write", "(", "'backward metrics: {}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "backward_metrics", ")", ")", ")", "\n", "writer", ".", "write", "(", "'average metrics: {}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "metrics", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_entity_dict": [[17, 21], ["triplet.EntityDict", "os.path.dirname"], "function", ["None"], ["def", "_init_entity_dict", "(", ")", ":", "\n", "    ", "global", "entity_dict", "\n", "if", "not", "entity_dict", ":", "\n", "        ", "entity_dict", "=", "EntityDict", "(", "entity_dict_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "valid_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_train_triplet_dict": [[23, 27], ["triplet.TripletDict"], "function", ["None"], ["", "", "def", "_init_train_triplet_dict", "(", ")", ":", "\n", "    ", "global", "train_triplet_dict", "\n", "if", "not", "train_triplet_dict", ":", "\n", "        ", "train_triplet_dict", "=", "TripletDict", "(", "path_list", "=", "[", "args", ".", "train_path", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_all_triplet_dict": [[29, 34], ["triplet.TripletDict", "os.path.dirname", "glob.glob"], "function", ["None"], ["", "", "def", "_init_all_triplet_dict", "(", ")", ":", "\n", "    ", "global", "all_triplet_dict", "\n", "if", "not", "all_triplet_dict", ":", "\n", "        ", "path_pattern", "=", "'{}/*.txt.json'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "train_path", ")", ")", "\n", "all_triplet_dict", "=", "TripletDict", "(", "path_list", "=", "glob", ".", "glob", "(", "path_pattern", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_link_graph": [[36, 40], ["triplet.LinkGraph"], "function", ["None"], ["", "", "def", "_init_link_graph", "(", ")", ":", "\n", "    ", "global", "link_graph", "\n", "if", "not", "link_graph", ":", "\n", "        ", "link_graph", "=", "LinkGraph", "(", "train_path", "=", "args", ".", "train_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_entity_dict": [[42, 45], ["dict_hub._init_entity_dict"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_entity_dict"], ["", "", "def", "get_entity_dict", "(", ")", ":", "\n", "    ", "_init_entity_dict", "(", ")", "\n", "return", "entity_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_train_triplet_dict": [[47, 50], ["dict_hub._init_train_triplet_dict"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_train_triplet_dict"], ["", "def", "get_train_triplet_dict", "(", ")", ":", "\n", "    ", "_init_train_triplet_dict", "(", ")", "\n", "return", "train_triplet_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_all_triplet_dict": [[52, 55], ["dict_hub._init_all_triplet_dict"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_all_triplet_dict"], ["", "def", "get_all_triplet_dict", "(", ")", ":", "\n", "    ", "_init_all_triplet_dict", "(", ")", "\n", "return", "all_triplet_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_link_graph": [[57, 60], ["dict_hub._init_link_graph"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub._init_link_graph"], ["", "def", "get_link_graph", "(", ")", ":", "\n", "    ", "_init_link_graph", "(", ")", "\n", "return", "link_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.build_tokenizer": [[62, 67], ["transformers.AutoTokenizer.from_pretrained", "logger_config.logger.info", "config.args"], "function", ["None"], ["", "def", "build_tokenizer", "(", "args", ")", ":", "\n", "    ", "global", "tokenizer", "\n", "if", "tokenizer", "is", "None", ":", "\n", "        ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "pretrained_model", ")", "\n", "logger", ".", "info", "(", "'Build tokenizer from {}'", ".", "format", "(", "args", ".", "pretrained_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_tokenizer": [[69, 73], ["dict_hub.build_tokenizer"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.build_tokenizer"], ["", "", "def", "get_tokenizer", "(", ")", ":", "\n", "    ", "if", "tokenizer", "is", "None", ":", "\n", "        ", "build_tokenizer", "(", "args", ")", "\n", "", "return", "tokenizer", "\n", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.main.main": [[10, 19], ["torch.cuda.device_count", "torch.cuda.device_count", "logger_config.logger.info", "trainer.Trainer", "logger_config.logger.info", "trainer.Trainer.train_loop", "json.dumps"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer.train_loop"], ["def", "main", "(", ")", ":", "\n", "    ", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "logger", ".", "info", "(", "\"Use {} gpus for training\"", ".", "format", "(", "ngpus_per_node", ")", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "args", ",", "ngpus_per_node", "=", "ngpus_per_node", ")", "\n", "logger", ".", "info", "(", "'Args={}'", ".", "format", "(", "json", ".", "dumps", "(", "args", ".", "__dict__", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", ")", ")", "\n", "trainer", ".", "train_loop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.__init__": [[20, 24], ["utils.AttrDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "self", ".", "train_args", "=", "AttrDict", "(", ")", "\n", "self", ".", "use_cuda", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load": [[25, 51], ["os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "predict.BertPredictor._setup_args", "dict_hub.build_tokenizer", "models.build_model", "collections.OrderedDict", "state_dict.items", "predict.BertPredictor.model.load_state_dict", "predict.BertPredictor.model.eval", "logger_config.logger.info", "k.startswith", "logger_config.logger.info", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "predict.BertPredictor.model.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "len"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor._setup_args", "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.build_tokenizer", "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.build_model"], ["", "def", "load", "(", "self", ",", "ckt_path", ",", "use_data_parallel", "=", "False", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "ckt_path", ")", "\n", "ckt_dict", "=", "torch", ".", "load", "(", "ckt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "train_args", ".", "__dict__", "=", "ckt_dict", "[", "'args'", "]", "\n", "self", ".", "_setup_args", "(", ")", "\n", "build_tokenizer", "(", "self", ".", "train_args", ")", "\n", "self", ".", "model", "=", "build_model", "(", "self", ".", "train_args", ")", "\n", "\n", "# DataParallel will introduce 'module.' prefix", "\n", "state_dict", "=", "ckt_dict", "[", "'state_dict'", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "k", "=", "k", "[", "len", "(", "'module.'", ")", ":", "]", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "True", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "use_data_parallel", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "logger", ".", "info", "(", "'Use data parallel predictor'", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", ".", "cuda", "(", ")", "\n", "self", ".", "use_cuda", "=", "True", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "use_cuda", "=", "True", "\n", "", "logger", ".", "info", "(", "'Load model from {} successfully'", ".", "format", "(", "ckt_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor._setup_args": [[52, 60], ["config.args.__dict__.items", "logger_config.logger.info", "logger_config.logger.info", "json.dumps"], "methods", ["None"], ["", "def", "_setup_args", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "train_args", ".", "__dict__", ":", "\n", "                ", "logger", ".", "info", "(", "'Set default attribute: {}={}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "self", ".", "train_args", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "", "", "logger", ".", "info", "(", "'Args used in training: {}'", ".", "format", "(", "json", ".", "dumps", "(", "self", ".", "train_args", ".", "__dict__", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", ")", ")", "\n", "args", ".", "use_link_graph", "=", "self", ".", "train_args", ".", "use_link_graph", "\n", "args", ".", "is_test", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.predict_by_examples": [[61, 79], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "doc.Dataset", "predict.BertPredictor.model", "hr_tensor_list.append", "tail_tensor_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "utils.move_to_cuda"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.move_to_cuda"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_by_examples", "(", "self", ",", "examples", ":", "List", "[", "Example", "]", ")", ":", "\n", "        ", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "Dataset", "(", "path", "=", "''", ",", "examples", "=", "examples", ",", "task", "=", "args", ".", "task", ")", ",", "\n", "num_workers", "=", "1", ",", "\n", "batch_size", "=", "max", "(", "args", ".", "batch_size", ",", "512", ")", ",", "\n", "collate_fn", "=", "collate", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "hr_tensor_list", ",", "tail_tensor_list", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "batch_dict", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "if", "self", ".", "use_cuda", ":", "\n", "                ", "batch_dict", "=", "move_to_cuda", "(", "batch_dict", ")", "\n", "", "outputs", "=", "self", ".", "model", "(", "**", "batch_dict", ")", "\n", "hr_tensor_list", ".", "append", "(", "outputs", "[", "'hr_vector'", "]", ")", "\n", "tail_tensor_list", ".", "append", "(", "outputs", "[", "'tail_vector'", "]", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "hr_tensor_list", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "tail_tensor_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.predict_by_entities": [[80, 102], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "examples.append", "doc.Dataset", "tqdm.tqdm", "predict.BertPredictor.model", "ent_tensor_list.append", "doc.Example", "max", "utils.move_to_cuda"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.move_to_cuda"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_by_entities", "(", "self", ",", "entity_exs", ")", "->", "torch", ".", "tensor", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "entity_ex", "in", "entity_exs", ":", "\n", "            ", "examples", ".", "append", "(", "Example", "(", "head_id", "=", "''", ",", "relation", "=", "''", ",", "\n", "tail_id", "=", "entity_ex", ".", "entity_id", ")", ")", "\n", "", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "Dataset", "(", "path", "=", "''", ",", "examples", "=", "examples", ",", "task", "=", "args", ".", "task", ")", ",", "\n", "num_workers", "=", "2", ",", "\n", "batch_size", "=", "max", "(", "args", ".", "batch_size", ",", "1024", ")", ",", "\n", "collate_fn", "=", "collate", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "ent_tensor_list", "=", "[", "]", "\n", "for", "idx", ",", "batch_dict", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "data_loader", ")", ")", ":", "\n", "            ", "batch_dict", "[", "'only_ent_embedding'", "]", "=", "True", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "batch_dict", "=", "move_to_cuda", "(", "batch_dict", ")", "\n", "", "outputs", "=", "self", ".", "model", "(", "**", "batch_dict", ")", "\n", "ent_tensor_list", ".", "append", "(", "outputs", "[", "'ent_vectors'", "]", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "ent_tensor_list", ",", "dim", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate._setup_entity_dict": [[19, 24], ["dict_hub.get_entity_dict", "triplet.EntityDict", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_entity_dict"], ["def", "_setup_entity_dict", "(", ")", "->", "EntityDict", ":", "\n", "    ", "if", "args", ".", "task", "==", "'wiki5m_ind'", ":", "\n", "        ", "return", "EntityDict", "(", "entity_dict_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "valid_path", ")", ",", "\n", "inductive_test_path", "=", "args", ".", "valid_path", ")", "\n", "", "return", "get_entity_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.compute_metrics": [[42, 106], ["torch.no_grad", "hr_tensor.size", "len", "torch.LongTensor().unsqueeze().to", "tqdm.tqdm", "hr_tensor.size", "entities_tensor.size", "entities_tensor.size", "range", "torch.mm", "rerank.rerank_by_graph", "range", "torch.sort", "torch.nonzero", "range", "topk_scores.extend", "topk_indices.extend", "round", "len", "torch.LongTensor().unsqueeze", "entities_tensor.t", "torch.mm.size", "torch.mm.size", "all_triplet_dict.get_neighbors", "torch.LongTensor().to", "batch_score[].index_fill_", "batch_sorted_indices.eq().long", "torch.nonzero.size", "torch.mm.size", "torch.mm.size", "target_rank[].tolist", "ranks.append", "batch_sorted_score[].tolist", "batch_sorted_indices[].tolist", "metrics.items", "len", "logger_config.logger.debug", "torch.LongTensor().to.append", "torch.LongTensor", "entity_dict.entity_to_idx", "torch.LongTensor", "batch_sorted_indices.eq", "len"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.rerank.rerank_by_graph", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.TripletDict.get_neighbors", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.entity_to_idx"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_metrics", "(", "hr_tensor", ":", "torch", ".", "tensor", ",", "\n", "entities_tensor", ":", "torch", ".", "tensor", ",", "\n", "target", ":", "List", "[", "int", "]", ",", "\n", "examples", ":", "List", "[", "Example", "]", ",", "\n", "k", "=", "3", ",", "batch_size", "=", "256", ")", "->", "Tuple", ":", "\n", "    ", "assert", "hr_tensor", ".", "size", "(", "1", ")", "==", "entities_tensor", ".", "size", "(", "1", ")", "\n", "total", "=", "hr_tensor", ".", "size", "(", "0", ")", "\n", "entity_cnt", "=", "len", "(", "entity_dict", ")", "\n", "assert", "entity_cnt", "==", "entities_tensor", ".", "size", "(", "0", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "target", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "hr_tensor", ".", "device", ")", "\n", "topk_scores", ",", "topk_indices", "=", "[", "]", ",", "[", "]", "\n", "ranks", "=", "[", "]", "\n", "\n", "mean_rank", ",", "mrr", ",", "hit1", ",", "hit3", ",", "hit10", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "start", "in", "tqdm", ".", "tqdm", "(", "range", "(", "0", ",", "total", ",", "batch_size", ")", ")", ":", "\n", "        ", "end", "=", "start", "+", "batch_size", "\n", "# batch_size * entity_cnt", "\n", "batch_score", "=", "torch", ".", "mm", "(", "hr_tensor", "[", "start", ":", "end", ",", ":", "]", ",", "entities_tensor", ".", "t", "(", ")", ")", "\n", "assert", "entity_cnt", "==", "batch_score", ".", "size", "(", "1", ")", "\n", "batch_target", "=", "target", "[", "start", ":", "end", "]", "\n", "\n", "# re-ranking based on topological structure", "\n", "rerank_by_graph", "(", "batch_score", ",", "examples", "[", "start", ":", "end", "]", ",", "entity_dict", "=", "entity_dict", ")", "\n", "\n", "# filter known triplets", "\n", "for", "idx", "in", "range", "(", "batch_score", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "mask_indices", "=", "[", "]", "\n", "cur_ex", "=", "examples", "[", "start", "+", "idx", "]", "\n", "gold_neighbor_ids", "=", "all_triplet_dict", ".", "get_neighbors", "(", "cur_ex", ".", "head_id", ",", "cur_ex", ".", "relation", ")", "\n", "if", "len", "(", "gold_neighbor_ids", ")", ">", "10000", ":", "\n", "                ", "logger", ".", "debug", "(", "'{} - {} has {} neighbors'", ".", "format", "(", "cur_ex", ".", "head_id", ",", "cur_ex", ".", "relation", ",", "len", "(", "gold_neighbor_ids", ")", ")", ")", "\n", "", "for", "e_id", "in", "gold_neighbor_ids", ":", "\n", "                ", "if", "e_id", "==", "cur_ex", ".", "tail_id", ":", "\n", "                    ", "continue", "\n", "", "mask_indices", ".", "append", "(", "entity_dict", ".", "entity_to_idx", "(", "e_id", ")", ")", "\n", "", "mask_indices", "=", "torch", ".", "LongTensor", "(", "mask_indices", ")", ".", "to", "(", "batch_score", ".", "device", ")", "\n", "batch_score", "[", "idx", "]", ".", "index_fill_", "(", "0", ",", "mask_indices", ",", "-", "1", ")", "\n", "\n", "", "batch_sorted_score", ",", "batch_sorted_indices", "=", "torch", ".", "sort", "(", "batch_score", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "target_rank", "=", "torch", ".", "nonzero", "(", "batch_sorted_indices", ".", "eq", "(", "batch_target", ")", ".", "long", "(", ")", ",", "as_tuple", "=", "False", ")", "\n", "assert", "target_rank", ".", "size", "(", "0", ")", "==", "batch_score", ".", "size", "(", "0", ")", "\n", "for", "idx", "in", "range", "(", "batch_score", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "idx_rank", "=", "target_rank", "[", "idx", "]", ".", "tolist", "(", ")", "\n", "assert", "idx_rank", "[", "0", "]", "==", "idx", "\n", "cur_rank", "=", "idx_rank", "[", "1", "]", "\n", "\n", "# 0-based -> 1-based", "\n", "cur_rank", "+=", "1", "\n", "mean_rank", "+=", "cur_rank", "\n", "mrr", "+=", "1.0", "/", "cur_rank", "\n", "hit1", "+=", "1", "if", "cur_rank", "<=", "1", "else", "0", "\n", "hit3", "+=", "1", "if", "cur_rank", "<=", "3", "else", "0", "\n", "hit10", "+=", "1", "if", "cur_rank", "<=", "10", "else", "0", "\n", "ranks", ".", "append", "(", "cur_rank", ")", "\n", "\n", "", "topk_scores", ".", "extend", "(", "batch_sorted_score", "[", ":", ",", ":", "k", "]", ".", "tolist", "(", ")", ")", "\n", "topk_indices", ".", "extend", "(", "batch_sorted_indices", "[", ":", ",", ":", "k", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "", "metrics", "=", "{", "'mean_rank'", ":", "mean_rank", ",", "'mrr'", ":", "mrr", ",", "'hit@1'", ":", "hit1", ",", "'hit@3'", ":", "hit3", ",", "'hit@10'", ":", "hit10", "}", "\n", "metrics", "=", "{", "k", ":", "round", "(", "v", "/", "total", ",", "4", ")", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "}", "\n", "assert", "len", "(", "topk_scores", ")", "==", "total", "\n", "return", "topk_scores", ",", "topk_indices", ",", "metrics", ",", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.predict_by_split": [[108, 131], ["os.path.exists", "os.path.exists", "predict.BertPredictor", "predict.BertPredictor.load", "predict.BertPredictor.predict_by_entities", "evaluate.eval_single_direction", "evaluate.eval_single_direction", "logger_config.logger.info", "os.path.basename", "round", "os.path.dirname", "os.path.basename", "open", "writer.write", "writer.write", "writer.write", "json.dumps", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.predict_by_entities", "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.eval_single_direction", "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.eval_single_direction"], ["", "def", "predict_by_split", "(", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "valid_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "train_path", ")", "\n", "\n", "predictor", "=", "BertPredictor", "(", ")", "\n", "predictor", ".", "load", "(", "ckt_path", "=", "args", ".", "eval_model_path", ")", "\n", "entity_tensor", "=", "predictor", ".", "predict_by_entities", "(", "entity_dict", ".", "entity_exs", ")", "\n", "\n", "forward_metrics", "=", "eval_single_direction", "(", "predictor", ",", "\n", "entity_tensor", "=", "entity_tensor", ",", "\n", "eval_forward", "=", "True", ")", "\n", "backward_metrics", "=", "eval_single_direction", "(", "predictor", ",", "\n", "entity_tensor", "=", "entity_tensor", ",", "\n", "eval_forward", "=", "False", ")", "\n", "metrics", "=", "{", "k", ":", "round", "(", "(", "forward_metrics", "[", "k", "]", "+", "backward_metrics", "[", "k", "]", ")", "/", "2", ",", "4", ")", "for", "k", "in", "forward_metrics", "}", "\n", "logger", ".", "info", "(", "'Averaged metrics: {}'", ".", "format", "(", "metrics", ")", ")", "\n", "\n", "prefix", ",", "basename", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "eval_model_path", ")", ",", "os", ".", "path", ".", "basename", "(", "args", ".", "eval_model_path", ")", "\n", "split", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "valid_path", ")", "\n", "with", "open", "(", "'{}/metrics_{}_{}.json'", ".", "format", "(", "prefix", ",", "split", ",", "basename", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "'forward metrics: {}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "forward_metrics", ")", ")", ")", "\n", "writer", ".", "write", "(", "'backward metrics: {}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "backward_metrics", ")", ")", ")", "\n", "writer", ".", "write", "(", "'average metrics: {}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "metrics", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.eval_single_direction": [[133, 174], ["time.time", "doc.load_data", "predictor.predict_by_examples", "hr_tensor.to.to", "logger_config.logger.info", "evaluate.compute_metrics", "logger_config.logger.info", "enumerate", "os.path.basename", "logger_config.logger.info", "entity_dict.entity_to_idx", "evaluate.PredInfo", "pred_infos.append", "os.path.dirname", "os.path.basename", "open", "writer.write", "json.dumps", "round", "json.dumps", "round", "entity_dict.get_entity_by_idx", "zip", "round", "json.dumps", "entity_dict.get_entity_by_idx", "dataclasses.asdict", "time.time"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.load_data", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.predict_by_examples", "home.repos.pwc.inspect_result.intfloat_simkgc.None.evaluate.compute_metrics", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.entity_to_idx", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_idx", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_idx"], ["", "", "def", "eval_single_direction", "(", "predictor", ":", "BertPredictor", ",", "\n", "entity_tensor", ":", "torch", ".", "tensor", ",", "\n", "eval_forward", "=", "True", ",", "\n", "batch_size", "=", "256", ")", "->", "dict", ":", "\n", "    ", "start_time", "=", "time", "(", ")", "\n", "examples", "=", "load_data", "(", "args", ".", "valid_path", ",", "add_forward_triplet", "=", "eval_forward", ",", "add_backward_triplet", "=", "not", "eval_forward", ")", "\n", "\n", "hr_tensor", ",", "_", "=", "predictor", ".", "predict_by_examples", "(", "examples", ")", "\n", "hr_tensor", "=", "hr_tensor", ".", "to", "(", "entity_tensor", ".", "device", ")", "\n", "target", "=", "[", "entity_dict", ".", "entity_to_idx", "(", "ex", ".", "tail_id", ")", "for", "ex", "in", "examples", "]", "\n", "logger", ".", "info", "(", "'predict tensor done, compute metrics...'", ")", "\n", "\n", "topk_scores", ",", "topk_indices", ",", "metrics", ",", "ranks", "=", "compute_metrics", "(", "hr_tensor", "=", "hr_tensor", ",", "entities_tensor", "=", "entity_tensor", ",", "\n", "target", "=", "target", ",", "examples", "=", "examples", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "eval_dir", "=", "'forward'", "if", "eval_forward", "else", "'backward'", "\n", "logger", ".", "info", "(", "'{} metrics: {}'", ".", "format", "(", "eval_dir", ",", "json", ".", "dumps", "(", "metrics", ")", ")", ")", "\n", "\n", "pred_infos", "=", "[", "]", "\n", "for", "idx", ",", "ex", "in", "enumerate", "(", "examples", ")", ":", "\n", "        ", "cur_topk_scores", "=", "topk_scores", "[", "idx", "]", "\n", "cur_topk_indices", "=", "topk_indices", "[", "idx", "]", "\n", "pred_idx", "=", "cur_topk_indices", "[", "0", "]", "\n", "cur_score_info", "=", "{", "entity_dict", ".", "get_entity_by_idx", "(", "topk_idx", ")", ".", "entity", ":", "round", "(", "topk_score", ",", "3", ")", "\n", "for", "topk_score", ",", "topk_idx", "in", "zip", "(", "cur_topk_scores", ",", "cur_topk_indices", ")", "}", "\n", "\n", "pred_info", "=", "PredInfo", "(", "head", "=", "ex", ".", "head", ",", "relation", "=", "ex", ".", "relation", ",", "\n", "tail", "=", "ex", ".", "tail", ",", "pred_tail", "=", "entity_dict", ".", "get_entity_by_idx", "(", "pred_idx", ")", ".", "entity", ",", "\n", "pred_score", "=", "round", "(", "cur_topk_scores", "[", "0", "]", ",", "4", ")", ",", "\n", "topk_score_info", "=", "json", ".", "dumps", "(", "cur_score_info", ")", ",", "\n", "rank", "=", "ranks", "[", "idx", "]", ",", "\n", "correct", "=", "pred_idx", "==", "target", "[", "idx", "]", ")", "\n", "pred_infos", ".", "append", "(", "pred_info", ")", "\n", "\n", "", "prefix", ",", "basename", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "eval_model_path", ")", ",", "os", ".", "path", ".", "basename", "(", "args", ".", "eval_model_path", ")", "\n", "split", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "valid_path", ")", "\n", "with", "open", "(", "'{}/eval_{}_{}_{}.json'", ".", "format", "(", "prefix", ",", "split", ",", "eval_dir", ",", "basename", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "[", "asdict", "(", "info", ")", "for", "info", "in", "pred_infos", "]", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Evaluation takes {} seconds'", ".", "format", "(", "round", "(", "time", "(", ")", "-", "start_time", ",", "3", ")", ")", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer.__init__": [[24, 69], ["dict_hub.build_tokenizer", "logger_config.logger.info", "models.build_model", "logger_config.logger.info", "trainer.Trainer._setup_training", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "transformers.AdamW", "utils.report_num_trainable_parameters", "doc.Dataset", "min", "logger_config.logger.info", "trainer.Trainer._create_lr_scheduler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "doc.Dataset", "max", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "len", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.build_tokenizer", "home.repos.pwc.inspect_result.intfloat_simkgc.None.models.build_model", "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer._setup_training", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.report_num_trainable_parameters", "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer._create_lr_scheduler"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "ngpus_per_node", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "ngpus_per_node", "=", "ngpus_per_node", "\n", "build_tokenizer", "(", "args", ")", "\n", "\n", "# create model", "\n", "logger", ".", "info", "(", "\"=> creating model\"", ")", "\n", "self", ".", "model", "=", "build_model", "(", "self", ".", "args", ")", "\n", "logger", ".", "info", "(", "self", ".", "model", ")", "\n", "self", ".", "_setup_training", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", "=", "AdamW", "(", "[", "p", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "report_num_trainable_parameters", "(", "self", ".", "model", ")", "\n", "\n", "train_dataset", "=", "Dataset", "(", "path", "=", "args", ".", "train_path", ",", "task", "=", "args", ".", "task", ")", "\n", "valid_dataset", "=", "Dataset", "(", "path", "=", "args", ".", "valid_path", ",", "task", "=", "args", ".", "task", ")", "if", "args", ".", "valid_path", "else", "None", "\n", "num_training_steps", "=", "args", ".", "epochs", "*", "len", "(", "train_dataset", ")", "//", "max", "(", "args", ".", "batch_size", ",", "1", ")", "\n", "args", ".", "warmup", "=", "min", "(", "args", ".", "warmup", ",", "num_training_steps", "//", "10", ")", "\n", "logger", ".", "info", "(", "'Total training steps: {}, warmup steps: {}'", ".", "format", "(", "num_training_steps", ",", "args", ".", "warmup", ")", ")", "\n", "self", ".", "scheduler", "=", "self", ".", "_create_lr_scheduler", "(", "num_training_steps", ")", "\n", "self", ".", "best_metric", "=", "None", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "collate", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "self", ".", "valid_loader", "=", "None", "\n", "if", "valid_dataset", ":", "\n", "            ", "self", ".", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "*", "2", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "collate", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer.train_loop": [[70, 78], ["range", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "trainer.Trainer.train_epoch", "trainer.Trainer._run_eval"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer.train_epoch", "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer._run_eval"], ["", "", "def", "train_loop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "use_amp", ":", "\n", "            ", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "# train for one epoch", "\n", "            ", "self", ".", "train_epoch", "(", "epoch", ")", "\n", "self", ".", "_run_eval", "(", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer._run_eval": [[79, 96], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.eval_epoch", "utils.save_checkpoint", "utils.delete_old_ckt", "trainer.Trainer.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer.eval_epoch", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.delete_old_ckt"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_run_eval", "(", "self", ",", "epoch", ",", "step", "=", "0", ")", ":", "\n", "        ", "metric_dict", "=", "self", ".", "eval_epoch", "(", "epoch", ")", "\n", "is_best", "=", "self", ".", "valid_loader", "and", "(", "self", ".", "best_metric", "is", "None", "or", "metric_dict", "[", "'Acc@1'", "]", ">", "self", ".", "best_metric", "[", "'Acc@1'", "]", ")", "\n", "if", "is_best", ":", "\n", "            ", "self", ".", "best_metric", "=", "metric_dict", "\n", "\n", "", "filename", "=", "'{}/checkpoint_{}_{}.mdl'", ".", "format", "(", "self", ".", "args", ".", "model_dir", ",", "epoch", ",", "step", ")", "\n", "if", "step", "==", "0", ":", "\n", "            ", "filename", "=", "'{}/checkpoint_epoch{}.mdl'", ".", "format", "(", "self", ".", "args", ".", "model_dir", ",", "epoch", ")", "\n", "", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "self", ".", "args", ".", "__dict__", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "is_best", ",", "filename", "=", "filename", ")", "\n", "delete_old_ckt", "(", "path_pattern", "=", "'{}/checkpoint_*.mdl'", ".", "format", "(", "self", ".", "args", ".", "model_dir", ")", ",", "\n", "keep", "=", "self", ".", "args", ".", "max_to_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer.eval_epoch": [[97, 129], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "enumerate", "logger_config.logger.info", "trainer.Trainer.model.eval", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "trainer.Trainer.model", "utils.get_model_obj().compute_logits", "models.ModelOutput", "trainer.Trainer.criterion", "utils.AverageMeter.update", "metric.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "round", "round", "round", "utils.move_to_cuda", "trainer.Trainer.item", "acc1.item", "acc3.item", "json.dumps", "utils.get_model_obj"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel.compute_logits", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.metric.accuracy", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.move_to_cuda", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.get_model_obj"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_epoch", "(", "self", ",", "epoch", ")", "->", "Dict", ":", "\n", "        ", "if", "not", "self", ".", "valid_loader", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top3", "=", "AverageMeter", "(", "'Acc@3'", ",", "':6.2f'", ")", "\n", "\n", "for", "i", ",", "batch_dict", "in", "enumerate", "(", "self", ".", "valid_loader", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "batch_dict", "=", "move_to_cuda", "(", "batch_dict", ")", "\n", "", "batch_size", "=", "len", "(", "batch_dict", "[", "'batch_data'", "]", ")", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "**", "batch_dict", ")", "\n", "outputs", "=", "get_model_obj", "(", "self", ".", "model", ")", ".", "compute_logits", "(", "output_dict", "=", "outputs", ",", "batch_dict", "=", "batch_dict", ")", "\n", "outputs", "=", "ModelOutput", "(", "**", "outputs", ")", "\n", "logits", ",", "labels", "=", "outputs", ".", "logits", ",", "outputs", ".", "labels", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "acc1", ",", "acc3", "=", "accuracy", "(", "logits", ",", "labels", ",", "topk", "=", "(", "1", ",", "3", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "top3", ".", "update", "(", "acc3", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "", "metric_dict", "=", "{", "'Acc@1'", ":", "round", "(", "top1", ".", "avg", ",", "3", ")", ",", "\n", "'Acc@3'", ":", "round", "(", "top3", ".", "avg", ",", "3", ")", ",", "\n", "'loss'", ":", "round", "(", "losses", ".", "avg", ",", "3", ")", "}", "\n", "logger", ".", "info", "(", "'Epoch {}, valid metric: {}'", ".", "format", "(", "epoch", ",", "json", ".", "dumps", "(", "metric_dict", ")", ")", ")", "\n", "return", "metric_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer.train_epoch": [[130, 189], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.ProgressMeter", "enumerate", "logger_config.logger.info", "len", "trainer.Trainer.model.train", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "utils.get_model_obj().compute_logits", "models.ModelOutput", "trainer.Trainer.criterion", "trainer.Trainer.criterion", "metric.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.scheduler.step", "utils.move_to_cuda", "trainer.Trainer.model", "logits.size", "logits[].t", "acc1.item", "acc3.item", "trainer.Trainer.item", "trainer.Trainer.scaler.scale().backward", "trainer.Trainer.scaler.unscale_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "trainer.Trainer.scaler.step", "trainer.Trainer.scaler.update", "trainer.Trainer.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "trainer.Trainer.optimizer.step", "utils.ProgressMeter.display", "trainer.Trainer._run_eval", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "trainer.Trainer.model", "utils.get_model_obj", "trainer.Trainer.model.parameters", "trainer.Trainer.model.parameters", "trainer.Trainer.scheduler.get_last_lr", "trainer.Trainer.scaler.scale"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.models.CustomBertModel.compute_logits", "home.repos.pwc.inspect_result.intfloat_simkgc.None.metric.accuracy", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.move_to_cuda", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.ProgressMeter.display", "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer._run_eval", "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.get_model_obj"], ["", "def", "train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top3", "=", "AverageMeter", "(", "'Acc@3'", ",", "':6.2f'", ")", "\n", "inv_t", "=", "AverageMeter", "(", "'InvT'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "[", "losses", ",", "inv_t", ",", "top1", ",", "top3", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "i", ",", "batch_dict", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "# switch to train mode", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "batch_dict", "=", "move_to_cuda", "(", "batch_dict", ")", "\n", "", "batch_size", "=", "len", "(", "batch_dict", "[", "'batch_data'", "]", ")", "\n", "\n", "# compute output", "\n", "if", "self", ".", "args", ".", "use_amp", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "**", "batch_dict", ")", "\n", "", "", "else", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "**", "batch_dict", ")", "\n", "", "outputs", "=", "get_model_obj", "(", "self", ".", "model", ")", ".", "compute_logits", "(", "output_dict", "=", "outputs", ",", "batch_dict", "=", "batch_dict", ")", "\n", "outputs", "=", "ModelOutput", "(", "**", "outputs", ")", "\n", "logits", ",", "labels", "=", "outputs", ".", "logits", ",", "outputs", ".", "labels", "\n", "assert", "logits", ".", "size", "(", "0", ")", "==", "batch_size", "\n", "# head + relation -> tail", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "# tail -> head + relation", "\n", "loss", "+=", "self", ".", "criterion", "(", "logits", "[", ":", ",", ":", "batch_size", "]", ".", "t", "(", ")", ",", "labels", ")", "\n", "\n", "acc1", ",", "acc3", "=", "accuracy", "(", "logits", ",", "labels", ",", "topk", "=", "(", "1", ",", "3", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "top3", ".", "update", "(", "acc3", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "inv_t", ".", "update", "(", "outputs", ".", "inv_t", ",", "1", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "args", ".", "use_amp", ":", "\n", "                ", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "unscale_", "(", "self", ".", "optimizer", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_clip", ")", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "self", ".", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "", "if", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "eval_every_n_step", "==", "0", ":", "\n", "                ", "self", ".", "_run_eval", "(", "epoch", "=", "epoch", ",", "step", "=", "i", "+", "1", ")", "\n", "", "", "logger", ".", "info", "(", "'Learning rate: {}'", ".", "format", "(", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer._setup_training": [[190, 197], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "trainer.Trainer.model.cuda", "logger_config.logger.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["None"], ["", "def", "_setup_training", "(", "self", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", ".", "cuda", "(", ")", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'No gpu will be used'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.trainer.Trainer._create_lr_scheduler": [[198, 209], ["transformers.get_linear_schedule_with_warmup", "transformers.get_cosine_schedule_with_warmup"], "methods", ["None"], ["", "", "def", "_create_lr_scheduler", "(", "self", ",", "num_training_steps", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "lr_scheduler", "==", "'linear'", ":", "\n", "            ", "return", "get_linear_schedule_with_warmup", "(", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "num_warmup_steps", "=", "self", ".", "args", ".", "warmup", ",", "\n", "num_training_steps", "=", "num_training_steps", ")", "\n", "", "elif", "self", ".", "args", ".", "lr_scheduler", "==", "'cosine'", ":", "\n", "            ", "return", "get_cosine_schedule_with_warmup", "(", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "num_warmup_steps", "=", "self", ".", "args", ".", "warmup", ",", "\n", "num_training_steps", "=", "num_training_steps", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Unknown lr scheduler: {}'", ".", "format", "(", "self", ".", "args", ".", "scheduler", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.TripletDict.__init__": [[20, 30], ["logger_config.logger.info", "set", "logger_config.logger.info", "triplet.TripletDict._load", "len"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.TripletDict._load"], ["    ", "def", "__init__", "(", "self", ",", "path_list", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "self", ".", "path_list", "=", "path_list", "\n", "logger", ".", "info", "(", "'Triplets path: {}'", ".", "format", "(", "self", ".", "path_list", ")", ")", "\n", "self", ".", "relations", "=", "set", "(", ")", "\n", "self", ".", "hr2tails", "=", "{", "}", "\n", "self", ".", "triplet_cnt", "=", "0", "\n", "\n", "for", "path", "in", "self", ".", "path_list", ":", "\n", "            ", "self", ".", "_load", "(", "path", ")", "\n", "", "logger", ".", "info", "(", "'Triplet statistics: {} relations, {} triplets'", ".", "format", "(", "len", "(", "self", ".", "relations", ")", ",", "self", ".", "triplet_cnt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.TripletDict._load": [[31, 41], ["json.load", "len", "open", "triplet.reverse_triplet", "triplet.TripletDict.relations.add", "triplet.TripletDict.hr2tails[].add", "set"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.reverse_triplet"], ["", "def", "_load", "(", "self", ",", "path", ":", "str", ")", ":", "\n", "        ", "examples", "=", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "examples", "+=", "[", "reverse_triplet", "(", "obj", ")", "for", "obj", "in", "examples", "]", "\n", "for", "ex", "in", "examples", ":", "\n", "            ", "self", ".", "relations", ".", "add", "(", "ex", "[", "'relation'", "]", ")", "\n", "key", "=", "(", "ex", "[", "'head_id'", "]", ",", "ex", "[", "'relation'", "]", ")", "\n", "if", "key", "not", "in", "self", ".", "hr2tails", ":", "\n", "                ", "self", ".", "hr2tails", "[", "key", "]", "=", "set", "(", ")", "\n", "", "self", ".", "hr2tails", "[", "key", "]", ".", "add", "(", "ex", "[", "'tail_id'", "]", ")", "\n", "", "self", ".", "triplet_cnt", "=", "len", "(", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.TripletDict.get_neighbors": [[42, 44], ["triplet.TripletDict.hr2tails.get", "set"], "methods", ["None"], ["", "def", "get_neighbors", "(", "self", ",", "h", ":", "str", ",", "r", ":", "str", ")", "->", "set", ":", "\n", "        ", "return", "self", ".", "hr2tails", ".", "get", "(", "(", "h", ",", "r", ")", ",", "set", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.__init__": [[48, 64], ["os.path.join", "os.path.exists", "logger_config.logger.info", "triplet.EntityExample", "json.load", "set", "json.load", "open", "set.add", "set.add", "enumerate", "len", "open"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load"], ["    ", "def", "__init__", "(", "self", ",", "entity_dict_dir", ":", "str", ",", "inductive_test_path", ":", "str", "=", "None", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "entity_dict_dir", ",", "'entities.json'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "self", ".", "entity_exs", "=", "[", "EntityExample", "(", "**", "obj", ")", "for", "obj", "in", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "]", "\n", "\n", "if", "inductive_test_path", ":", "\n", "            ", "examples", "=", "json", ".", "load", "(", "open", "(", "inductive_test_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "valid_entity_ids", "=", "set", "(", ")", "\n", "for", "ex", "in", "examples", ":", "\n", "                ", "valid_entity_ids", ".", "add", "(", "ex", "[", "'head_id'", "]", ")", "\n", "valid_entity_ids", ".", "add", "(", "ex", "[", "'tail_id'", "]", ")", "\n", "", "self", ".", "entity_exs", "=", "[", "ex", "for", "ex", "in", "self", ".", "entity_exs", "if", "ex", ".", "entity_id", "in", "valid_entity_ids", "]", "\n", "\n", "", "self", ".", "id2entity", "=", "{", "ex", ".", "entity_id", ":", "ex", "for", "ex", "in", "self", ".", "entity_exs", "}", "\n", "self", ".", "entity2idx", "=", "{", "ex", ".", "entity_id", ":", "i", "for", "i", ",", "ex", "in", "enumerate", "(", "self", ".", "entity_exs", ")", "}", "\n", "logger", ".", "info", "(", "'Load {} entities from {}'", ".", "format", "(", "len", "(", "self", ".", "id2entity", ")", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.entity_to_idx": [[65, 67], ["None"], "methods", ["None"], ["", "def", "entity_to_idx", "(", "self", ",", "entity_id", ":", "str", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "entity2idx", "[", "entity_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_id": [[68, 70], ["None"], "methods", ["None"], ["", "def", "get_entity_by_id", "(", "self", ",", "entity_id", ":", "str", ")", "->", "EntityExample", ":", "\n", "        ", "return", "self", ".", "id2entity", "[", "entity_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_idx": [[71, 73], ["None"], "methods", ["None"], ["", "def", "get_entity_by_idx", "(", "self", ",", "idx", ":", "int", ")", "->", "EntityExample", ":", "\n", "        ", "return", "self", ".", "entity_exs", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "entity_exs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.LinkGraph.__init__": [[80, 94], ["logger_config.logger.info", "json.load", "logger_config.logger.info", "open", "triplet.LinkGraph.graph[].add", "triplet.LinkGraph.graph[].add", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load"], ["    ", "def", "__init__", "(", "self", ",", "train_path", ":", "str", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Start to build link graph from {}'", ".", "format", "(", "train_path", ")", ")", "\n", "# id -> set(id)", "\n", "self", ".", "graph", "=", "{", "}", "\n", "examples", "=", "json", ".", "load", "(", "open", "(", "train_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "for", "ex", "in", "examples", ":", "\n", "            ", "head_id", ",", "tail_id", "=", "ex", "[", "'head_id'", "]", ",", "ex", "[", "'tail_id'", "]", "\n", "if", "head_id", "not", "in", "self", ".", "graph", ":", "\n", "                ", "self", ".", "graph", "[", "head_id", "]", "=", "set", "(", ")", "\n", "", "self", ".", "graph", "[", "head_id", "]", ".", "add", "(", "tail_id", ")", "\n", "if", "tail_id", "not", "in", "self", ".", "graph", ":", "\n", "                ", "self", ".", "graph", "[", "tail_id", "]", "=", "set", "(", ")", "\n", "", "self", ".", "graph", "[", "tail_id", "]", ".", "add", "(", "head_id", ")", "\n", "", "logger", ".", "info", "(", "'Done build link graph with {} nodes'", ".", "format", "(", "len", "(", "self", ".", "graph", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.LinkGraph.get_neighbor_ids": [[95, 99], ["triplet.LinkGraph.graph.get", "set", "sorted", "list"], "methods", ["None"], ["", "def", "get_neighbor_ids", "(", "self", ",", "entity_id", ":", "str", ",", "max_to_keep", "=", "10", ")", "->", "List", "[", "str", "]", ":", "\n", "# make sure different calls return the same results", "\n", "        ", "neighbor_ids", "=", "self", ".", "graph", ".", "get", "(", "entity_id", ",", "set", "(", ")", ")", "\n", "return", "sorted", "(", "list", "(", "neighbor_ids", ")", ")", "[", ":", "max_to_keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.LinkGraph.get_n_hop_entity_indices": [[100, 122], ["set", "set.add", "collections.deque", "range", "set", "set", "len", "range", "collections.deque.popleft", "triplet.LinkGraph.graph.get", "entity_dict.entity_to_idx", "set", "collections.deque.append", "set.add", "len", "set"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.entity_to_idx"], ["", "def", "get_n_hop_entity_indices", "(", "self", ",", "entity_id", ":", "str", ",", "\n", "entity_dict", ":", "EntityDict", ",", "\n", "n_hop", ":", "int", "=", "2", ",", "\n", "# return empty if exceeds this number", "\n", "max_nodes", ":", "int", "=", "100000", ")", "->", "set", ":", "\n", "        ", "if", "n_hop", "<", "0", ":", "\n", "            ", "return", "set", "(", ")", "\n", "\n", "", "seen_eids", "=", "set", "(", ")", "\n", "seen_eids", ".", "add", "(", "entity_id", ")", "\n", "queue", "=", "deque", "(", "[", "entity_id", "]", ")", "\n", "for", "i", "in", "range", "(", "n_hop", ")", ":", "\n", "            ", "len_q", "=", "len", "(", "queue", ")", "\n", "for", "_", "in", "range", "(", "len_q", ")", ":", "\n", "                ", "tp", "=", "queue", ".", "popleft", "(", ")", "\n", "for", "node", "in", "self", ".", "graph", ".", "get", "(", "tp", ",", "set", "(", ")", ")", ":", "\n", "                    ", "if", "node", "not", "in", "seen_eids", ":", "\n", "                        ", "queue", ".", "append", "(", "node", ")", "\n", "seen_eids", ".", "add", "(", "node", ")", "\n", "if", "len", "(", "seen_eids", ")", ">", "max_nodes", ":", "\n", "                            ", "return", "set", "(", ")", "\n", "", "", "", "", "", "return", "set", "(", "[", "entity_dict", ".", "entity_to_idx", "(", "e_id", ")", "for", "e_id", "in", "seen_eids", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.reverse_triplet": [[124, 131], ["None"], "function", ["None"], ["", "", "def", "reverse_triplet", "(", "obj", ")", ":", "\n", "    ", "return", "{", "\n", "'head_id'", ":", "obj", "[", "'tail_id'", "]", ",", "\n", "'head'", ":", "obj", "[", "'tail'", "]", ",", "\n", "'relation'", ":", "'inverse {}'", ".", "format", "(", "obj", "[", "'relation'", "]", ")", ",", "\n", "'tail_id'", ":", "obj", "[", "'head_id'", "]", ",", "\n", "'tail'", ":", "obj", "[", "'head'", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._check_sanity": [[25, 38], ["relation_id_to_str.items"], "function", ["None"], ["def", "_check_sanity", "(", "relation_id_to_str", ":", "dict", ")", ":", "\n", "# We directly use normalized relation string as a key for training and evaluation,", "\n", "# make sure no two relations are normalized to the same surface form", "\n", "    ", "relation_str_to_id", "=", "{", "}", "\n", "for", "rel_id", ",", "rel_str", "in", "relation_id_to_str", ".", "items", "(", ")", ":", "\n", "        ", "if", "rel_str", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "rel_str", "not", "in", "relation_str_to_id", ":", "\n", "            ", "relation_str_to_id", "[", "rel_str", "]", "=", "rel_id", "\n", "", "elif", "relation_str_to_id", "[", "rel_str", "]", "!=", "rel_id", ":", "\n", "            ", "assert", "False", ",", "'ERROR: {} and {} are both normalized to {}'", ".", "format", "(", "relation_str_to_id", "[", "rel_str", "]", ",", "rel_id", ",", "rel_str", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._normalize_relations": [[40, 54], ["preprocess._check_sanity", "normalize_fn", "os.path.dirname", "open", "json.dump", "print", "len"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._check_sanity"], ["", "def", "_normalize_relations", "(", "examples", ":", "List", "[", "dict", "]", ",", "normalize_fn", ",", "is_train", ":", "bool", ")", ":", "\n", "    ", "relation_id_to_str", "=", "{", "}", "\n", "for", "ex", "in", "examples", ":", "\n", "        ", "rel_str", "=", "normalize_fn", "(", "ex", "[", "'relation'", "]", ")", "\n", "relation_id_to_str", "[", "ex", "[", "'relation'", "]", "]", "=", "rel_str", "\n", "ex", "[", "'relation'", "]", "=", "rel_str", "\n", "\n", "", "_check_sanity", "(", "relation_id_to_str", ")", "\n", "\n", "if", "is_train", ":", "\n", "        ", "out_path", "=", "'{}/relations.json'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "train_path", ")", ")", "\n", "with", "open", "(", "out_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "json", ".", "dump", "(", "relation_id_to_str", ",", "writer", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "print", "(", "'Save {} relations to {}'", ".", "format", "(", "len", "(", "relation_id_to_str", ")", ",", "out_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wn18rr_texts": [[59, 68], ["open().readlines", "print", "line.strip().split", "open", "len", "line.strip", "fs[].replace", "len", "line.strip"], "function", ["None"], ["def", "_load_wn18rr_texts", "(", "path", ":", "str", ")", ":", "\n", "    ", "global", "wn18rr_id2ent", "\n", "lines", "=", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", "==", "3", ",", "'Invalid line: {}'", ".", "format", "(", "line", ".", "strip", "(", ")", ")", "\n", "entity_id", ",", "word", ",", "desc", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", ".", "replace", "(", "'__'", ",", "''", ")", ",", "fs", "[", "2", "]", "\n", "wn18rr_id2ent", "[", "entity_id", "]", "=", "(", "entity_id", ",", "word", ",", "desc", ")", "\n", "", "print", "(", "'Load {} entities from {}'", ".", "format", "(", "len", "(", "wn18rr_id2ent", ")", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._process_line_wn18rr": [[70, 82], ["line.strip().split", "len", "line.strip"], "function", ["None"], ["", "def", "_process_line_wn18rr", "(", "line", ":", "str", ")", "->", "dict", ":", "\n", "    ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", "==", "3", ",", "'Expect 3 fields for {}'", ".", "format", "(", "line", ")", "\n", "head_id", ",", "relation", ",", "tail_id", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", "\n", "_", ",", "head", ",", "_", "=", "wn18rr_id2ent", "[", "head_id", "]", "\n", "_", ",", "tail", ",", "_", "=", "wn18rr_id2ent", "[", "tail_id", "]", "\n", "example", "=", "{", "'head_id'", ":", "head_id", ",", "\n", "'head'", ":", "head", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'tail_id'", ":", "tail_id", ",", "\n", "'tail'", ":", "tail", "}", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.preprocess_wn18rr": [[84, 100], ["open().readlines", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "preprocess._normalize_relations", "json.dump", "print", "preprocess._load_wn18rr_texts", "open", "open", "len", "os.path.dirname", "rel.replace().strip", "rel.replace"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._normalize_relations", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wn18rr_texts"], ["", "def", "preprocess_wn18rr", "(", "path", ")", ":", "\n", "    ", "if", "not", "wn18rr_id2ent", ":", "\n", "        ", "_load_wn18rr_texts", "(", "'{}/wordnet-mlj12-definitions.txt'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ")", "\n", "", "lines", "=", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "pool", "=", "Pool", "(", "processes", "=", "args", ".", "workers", ")", "\n", "examples", "=", "pool", ".", "map", "(", "_process_line_wn18rr", ",", "lines", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "_normalize_relations", "(", "examples", ",", "normalize_fn", "=", "lambda", "rel", ":", "rel", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "strip", "(", ")", ",", "\n", "is_train", "=", "(", "path", "==", "args", ".", "train_path", ")", ")", "\n", "\n", "out_path", "=", "path", "+", "'.json'", "\n", "json", ".", "dump", "(", "examples", ",", "open", "(", "out_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "print", "(", "'Save {} examples to {}'", ".", "format", "(", "len", "(", "examples", ")", ",", "out_path", ")", ")", "\n", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_fb15k237_wikidata": [[106, 118], ["open().readlines", "print", "line.strip().split", "name.replace().strip.replace().strip", "open", "len", "line.strip", "print", "fb15k_id2desc.get", "len", "line.strip", "name.replace().strip.replace"], "function", ["None"], ["def", "_load_fb15k237_wikidata", "(", "path", ":", "str", ")", ":", "\n", "    ", "global", "fb15k_id2ent", ",", "fb15k_id2desc", "\n", "lines", "=", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", "==", "2", ",", "'Invalid line: {}'", ".", "format", "(", "line", ".", "strip", "(", ")", ")", "\n", "entity_id", ",", "name", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", "\n", "name", "=", "name", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "if", "entity_id", "not", "in", "fb15k_id2desc", ":", "\n", "            ", "print", "(", "'No desc found for {}'", ".", "format", "(", "entity_id", ")", ")", "\n", "", "fb15k_id2ent", "[", "entity_id", "]", "=", "(", "entity_id", ",", "name", ",", "fb15k_id2desc", ".", "get", "(", "entity_id", ",", "''", ")", ")", "\n", "", "print", "(", "'Load {} entity names from {}'", ".", "format", "(", "len", "(", "fb15k_id2ent", ")", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_fb15k237_desc": [[120, 129], ["open().readlines", "print", "line.strip().split", "preprocess._truncate", "open", "len", "line.strip", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._truncate"], ["", "def", "_load_fb15k237_desc", "(", "path", ":", "str", ")", ":", "\n", "    ", "global", "fb15k_id2desc", "\n", "lines", "=", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", "==", "2", ",", "'Invalid line: {}'", ".", "format", "(", "line", ".", "strip", "(", ")", ")", "\n", "entity_id", ",", "desc", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", "\n", "fb15k_id2desc", "[", "entity_id", "]", "=", "_truncate", "(", "desc", ",", "50", ")", "\n", "", "print", "(", "'Load {} entity descriptions from {}'", ".", "format", "(", "len", "(", "fb15k_id2desc", ")", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._normalize_fb15k237_relation": [[131, 142], ["relation.replace().replace().strip().split", "relation.replace().replace().strip", "dedup_tokens.append", "enumerate", "relation.replace().replace", "relation.replace"], "function", ["None"], ["", "def", "_normalize_fb15k237_relation", "(", "relation", ":", "str", ")", "->", "str", ":", "\n", "    ", "tokens", "=", "relation", ".", "replace", "(", "'./'", ",", "'/'", ")", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "dedup_tokens", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "if", "token", "not", "in", "dedup_tokens", "[", "-", "3", ":", "]", ":", "\n", "            ", "dedup_tokens", ".", "append", "(", "token", ")", "\n", "# leaf words are more important (maybe)", "\n", "", "", "relation_tokens", "=", "dedup_tokens", "[", ":", ":", "-", "1", "]", "\n", "relation", "=", "' '", ".", "join", "(", "[", "t", "for", "idx", ",", "t", "in", "enumerate", "(", "relation_tokens", ")", "\n", "if", "idx", "==", "0", "or", "relation_tokens", "[", "idx", "]", "!=", "relation_tokens", "[", "idx", "-", "1", "]", "]", ")", "\n", "return", "relation", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._process_line_fb15k237": [[144, 157], ["line.strip().split", "len", "line.strip"], "function", ["None"], ["", "def", "_process_line_fb15k237", "(", "line", ":", "str", ")", "->", "dict", ":", "\n", "    ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", "==", "3", ",", "'Expect 3 fields for {}'", ".", "format", "(", "line", ")", "\n", "head_id", ",", "relation", ",", "tail_id", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", "\n", "\n", "_", ",", "head", ",", "_", "=", "fb15k_id2ent", "[", "head_id", "]", "\n", "_", ",", "tail", ",", "_", "=", "fb15k_id2ent", "[", "tail_id", "]", "\n", "example", "=", "{", "'head_id'", ":", "head_id", ",", "\n", "'head'", ":", "head", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'tail_id'", ":", "tail_id", ",", "\n", "'tail'", ":", "tail", "}", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.preprocess_fb15k237": [[159, 177], ["open().readlines", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "preprocess._normalize_relations", "json.dump", "print", "preprocess._load_fb15k237_desc", "preprocess._load_fb15k237_wikidata", "open", "open", "len", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._normalize_relations", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_fb15k237_desc", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_fb15k237_wikidata"], ["", "def", "preprocess_fb15k237", "(", "path", ")", ":", "\n", "    ", "if", "not", "fb15k_id2desc", ":", "\n", "        ", "_load_fb15k237_desc", "(", "'{}/FB15k_mid2description.txt'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ")", "\n", "", "if", "not", "fb15k_id2ent", ":", "\n", "        ", "_load_fb15k237_wikidata", "(", "'{}/FB15k_mid2name.txt'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ")", "\n", "\n", "", "lines", "=", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "pool", "=", "Pool", "(", "processes", "=", "args", ".", "workers", ")", "\n", "examples", "=", "pool", ".", "map", "(", "_process_line_fb15k237", ",", "lines", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "_normalize_relations", "(", "examples", ",", "normalize_fn", "=", "_normalize_fb15k237_relation", ",", "is_train", "=", "(", "path", "==", "args", ".", "train_path", ")", ")", "\n", "\n", "out_path", "=", "path", "+", "'.json'", "\n", "json", ".", "dump", "(", "examples", ",", "open", "(", "out_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "print", "(", "'Save {} examples to {}'", ".", "format", "(", "len", "(", "examples", ")", ",", "out_path", ")", ")", "\n", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._truncate": [[184, 186], ["text.split"], "function", ["None"], ["def", "_truncate", "(", "text", ":", "str", ",", "max_len", ":", "int", ")", ":", "\n", "    ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", "[", ":", "max_len", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wiki5m_id2rel": [[188, 199], ["open", "print", "line.strip().split", "preprocess._truncate", "len", "line.strip", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._truncate"], ["", "def", "_load_wiki5m_id2rel", "(", "path", ":", "str", ")", ":", "\n", "    ", "global", "wiki5m_id2rel", "\n", "\n", "for", "line", "in", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", ">=", "2", ",", "'Invalid line: {}'", ".", "format", "(", "line", ".", "strip", "(", ")", ")", "\n", "rel_id", ",", "rel_text", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", "\n", "rel_text", "=", "_truncate", "(", "rel_text", ",", "10", ")", "\n", "wiki5m_id2rel", "[", "rel_id", "]", "=", "rel_text", "\n", "\n", "", "print", "(", "'Load {} relations from {}'", ".", "format", "(", "len", "(", "wiki5m_id2rel", ")", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wiki5m_id2ent": [[201, 210], ["open", "print", "line.strip().split", "preprocess._truncate", "len", "line.strip", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._truncate"], ["", "def", "_load_wiki5m_id2ent", "(", "path", ":", "str", ")", ":", "\n", "    ", "global", "wiki5m_id2ent", "\n", "for", "line", "in", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", ">=", "2", ",", "'Invalid line: {}'", ".", "format", "(", "line", ".", "strip", "(", ")", ")", "\n", "ent_id", ",", "ent_name", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", "\n", "wiki5m_id2ent", "[", "ent_id", "]", "=", "_truncate", "(", "ent_name", ",", "10", ")", "\n", "\n", "", "print", "(", "'Load {} entity names from {}'", ".", "format", "(", "len", "(", "wiki5m_id2ent", ")", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wiki5m_id2text": [[212, 221], ["open", "print", "line.strip().split", "preprocess._truncate", "len", "line.strip", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._truncate"], ["", "def", "_load_wiki5m_id2text", "(", "path", ":", "str", ",", "max_len", ":", "int", "=", "30", ")", ":", "\n", "    ", "global", "wiki5m_id2text", "\n", "for", "line", "in", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", ">=", "2", ",", "'Invalid line: {}'", ".", "format", "(", "line", ".", "strip", "(", ")", ")", "\n", "ent_id", ",", "ent_text", "=", "fs", "[", "0", "]", ",", "' '", ".", "join", "(", "fs", "[", "1", ":", "]", ")", "\n", "wiki5m_id2text", "[", "ent_id", "]", "=", "_truncate", "(", "ent_text", ",", "max_len", ")", "\n", "\n", "", "print", "(", "'Load {} entity texts from {}'", ".", "format", "(", "len", "(", "wiki5m_id2text", ")", ",", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._has_none_value": [[223, 225], ["any", "ex.values"], "function", ["None"], ["", "def", "_has_none_value", "(", "ex", ":", "dict", ")", "->", "bool", ":", "\n", "    ", "return", "any", "(", "v", "is", "None", "for", "v", "in", "ex", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._process_line_wiki5m": [[227, 237], ["line.strip().split", "len", "line.strip", "wiki5m_id2ent.get", "wiki5m_id2ent.get", "line.strip"], "function", ["None"], ["", "def", "_process_line_wiki5m", "(", "line", ":", "str", ")", "->", "dict", ":", "\n", "    ", "fs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fs", ")", "==", "3", ",", "'Invalid line: {}'", ".", "format", "(", "line", ".", "strip", "(", ")", ")", "\n", "head_id", ",", "relation_id", ",", "tail_id", "=", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", "\n", "example", "=", "{", "'head_id'", ":", "head_id", ",", "\n", "'head'", ":", "wiki5m_id2ent", ".", "get", "(", "head_id", ",", "None", ")", ",", "\n", "'relation'", ":", "relation_id", ",", "\n", "'tail_id'", ":", "tail_id", ",", "\n", "'tail'", ":", "wiki5m_id2ent", ".", "get", "(", "tail_id", ",", "None", ")", "}", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.preprocess_wiki5m": [[239, 269], ["open().readlines", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "preprocess._normalize_relations", "print", "json.dump", "print", "preprocess._load_wiki5m_id2rel", "preprocess._load_wiki5m_id2ent", "preprocess._load_wiki5m_id2text", "print", "open", "open", "preprocess._has_none_value", "len", "len", "wiki5m_id2rel.get", "json.dumps", "os.path.dirname", "os.path.dirname", "os.path.dirname", "preprocess._has_none_value"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._normalize_relations", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wiki5m_id2rel", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wiki5m_id2ent", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._load_wiki5m_id2text", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._has_none_value", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess._has_none_value"], ["", "def", "preprocess_wiki5m", "(", "path", ":", "str", ",", "is_train", ":", "bool", ")", "->", "List", "[", "dict", "]", ":", "\n", "    ", "if", "not", "wiki5m_id2rel", ":", "\n", "        ", "_load_wiki5m_id2rel", "(", "path", "=", "'{}/wikidata5m_relation.txt'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ")", "\n", "", "if", "not", "wiki5m_id2ent", ":", "\n", "        ", "_load_wiki5m_id2ent", "(", "path", "=", "'{}/wikidata5m_entity.txt'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ")", "\n", "", "if", "not", "wiki5m_id2text", ":", "\n", "        ", "_load_wiki5m_id2text", "(", "path", "=", "'{}/wikidata5m_text.txt'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ")", "\n", "\n", "", "lines", "=", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "pool", "=", "Pool", "(", "processes", "=", "args", ".", "workers", ")", "\n", "examples", "=", "pool", ".", "map", "(", "_process_line_wiki5m", ",", "lines", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "_normalize_relations", "(", "examples", ",", "normalize_fn", "=", "lambda", "rel_id", ":", "wiki5m_id2rel", ".", "get", "(", "rel_id", ",", "None", ")", ",", "is_train", "=", "is_train", ")", "\n", "\n", "invalid_examples", "=", "[", "ex", "for", "ex", "in", "examples", "if", "_has_none_value", "(", "ex", ")", "]", "\n", "print", "(", "'Find {} invalid examples in {}'", ".", "format", "(", "len", "(", "invalid_examples", ")", ",", "path", ")", ")", "\n", "if", "is_train", ":", "\n", "# P2439 P1962 P3484 do not exist in wikidata5m_relation.txt", "\n", "# so after filtering, there are 819 relations instead of 822 relations", "\n", "        ", "examples", "=", "[", "ex", "for", "ex", "in", "examples", "if", "not", "_has_none_value", "(", "ex", ")", "]", "\n", "", "else", ":", "\n", "# Even though it's invalid (contains null values), we should not change validation/test dataset", "\n", "        ", "print", "(", "'Invalid examples: {}'", ".", "format", "(", "json", ".", "dumps", "(", "invalid_examples", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", ")", ")", "\n", "\n", "", "out_path", "=", "path", "+", "'.json'", "\n", "json", ".", "dump", "(", "examples", ",", "open", "(", "out_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "print", "(", "'Save {} examples to {}'", ".", "format", "(", "len", "(", "examples", ")", ",", "out_path", ")", ")", "\n", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.dump_all_entities": [[271, 289], ["set", "print", "json.dump", "set.add", "list", "open", "len", "len", "id2entity.values"], "function", ["None"], ["", "def", "dump_all_entities", "(", "examples", ",", "out_path", ",", "id2text", ":", "dict", ")", ":", "\n", "    ", "id2entity", "=", "{", "}", "\n", "relations", "=", "set", "(", ")", "\n", "for", "ex", "in", "examples", ":", "\n", "        ", "head_id", "=", "ex", "[", "'head_id'", "]", "\n", "relations", ".", "add", "(", "ex", "[", "'relation'", "]", ")", "\n", "if", "head_id", "not", "in", "id2entity", ":", "\n", "            ", "id2entity", "[", "head_id", "]", "=", "{", "'entity_id'", ":", "head_id", ",", "\n", "'entity'", ":", "ex", "[", "'head'", "]", ",", "\n", "'entity_desc'", ":", "id2text", "[", "head_id", "]", "}", "\n", "", "tail_id", "=", "ex", "[", "'tail_id'", "]", "\n", "if", "tail_id", "not", "in", "id2entity", ":", "\n", "            ", "id2entity", "[", "tail_id", "]", "=", "{", "'entity_id'", ":", "tail_id", ",", "\n", "'entity'", ":", "ex", "[", "'tail'", "]", ",", "\n", "'entity_desc'", ":", "id2text", "[", "tail_id", "]", "}", "\n", "", "", "print", "(", "'Get {} entities, {} relations in total'", ".", "format", "(", "len", "(", "id2entity", ")", ",", "len", "(", "relations", ")", ")", ")", "\n", "\n", "json", ".", "dump", "(", "list", "(", "id2entity", ".", "values", "(", ")", ")", ",", "open", "(", "out_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.main": [[291, 318], ["preprocess.dump_all_entities", "print", "os.path.exists", "print", "args.task.lower", "args.task.lower", "preprocess.preprocess_wn18rr", "args.task.lower", "args.task.lower", "preprocess.preprocess_fb15k237", "wn18rr_id2ent.items", "args.task.lower", "os.path.dirname", "args.task.lower", "preprocess.preprocess_wiki5m", "fb15k_id2ent.items"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.dump_all_entities", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.preprocess_wn18rr", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.preprocess_fb15k237", "home.repos.pwc.inspect_result.intfloat_simkgc.None.preprocess.preprocess_wiki5m"], ["", "def", "main", "(", ")", ":", "\n", "    ", "all_examples", "=", "[", "]", "\n", "for", "path", "in", "[", "args", ".", "train_path", ",", "args", ".", "valid_path", ",", "args", ".", "test_path", "]", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "print", "(", "'Process {}...'", ".", "format", "(", "path", ")", ")", "\n", "if", "args", ".", "task", ".", "lower", "(", ")", "==", "'wn18rr'", ":", "\n", "            ", "all_examples", "+=", "preprocess_wn18rr", "(", "path", ")", "\n", "", "elif", "args", ".", "task", ".", "lower", "(", ")", "==", "'fb15k237'", ":", "\n", "            ", "all_examples", "+=", "preprocess_fb15k237", "(", "path", ")", "\n", "", "elif", "args", ".", "task", ".", "lower", "(", ")", "in", "[", "'wiki5m_trans'", ",", "'wiki5m_ind'", "]", ":", "\n", "            ", "all_examples", "+=", "preprocess_wiki5m", "(", "path", ",", "is_train", "=", "(", "path", "==", "args", ".", "train_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Unknown task: {}'", ".", "format", "(", "args", ".", "task", ")", "\n", "\n", "", "", "if", "args", ".", "task", ".", "lower", "(", ")", "==", "'wn18rr'", ":", "\n", "        ", "id2text", "=", "{", "k", ":", "v", "[", "2", "]", "for", "k", ",", "v", "in", "wn18rr_id2ent", ".", "items", "(", ")", "}", "\n", "", "elif", "args", ".", "task", ".", "lower", "(", ")", "==", "'fb15k237'", ":", "\n", "        ", "id2text", "=", "{", "k", ":", "v", "[", "2", "]", "for", "k", ",", "v", "in", "fb15k_id2ent", ".", "items", "(", ")", "}", "\n", "", "elif", "args", ".", "task", ".", "lower", "(", ")", "in", "[", "'wiki5m_trans'", ",", "'wiki5m_ind'", "]", ":", "\n", "        ", "id2text", "=", "wiki5m_id2text", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'Unknown task: {}'", ".", "format", "(", "args", ".", "task", ")", "\n", "\n", "", "dump_all_entities", "(", "all_examples", ",", "\n", "out_path", "=", "'{}/entities.json'", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "train_path", ")", ")", ",", "\n", "id2text", "=", "id2text", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet_mask.construct_mask": [[12, 43], ["len", "len", "torch.LongTensor", "range", "torch.LongTensor", "torch.LongTensor.unsqueeze", "col_entity_ids.unsqueeze", "triplet_mask.fill_diagonal_", "train_triplet_dict.get_neighbors", "range", "entity_dict.entity_to_idx", "len", "entity_dict.entity_to_idx"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.TripletDict.get_neighbors", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.entity_to_idx", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.entity_to_idx"], ["def", "construct_mask", "(", "row_exs", ":", "List", ",", "col_exs", ":", "List", "=", "None", ")", "->", "torch", ".", "tensor", ":", "\n", "    ", "positive_on_diagonal", "=", "col_exs", "is", "None", "\n", "num_row", "=", "len", "(", "row_exs", ")", "\n", "col_exs", "=", "row_exs", "if", "col_exs", "is", "None", "else", "col_exs", "\n", "num_col", "=", "len", "(", "col_exs", ")", "\n", "\n", "# exact match", "\n", "row_entity_ids", "=", "torch", ".", "LongTensor", "(", "[", "entity_dict", ".", "entity_to_idx", "(", "ex", ".", "tail_id", ")", "for", "ex", "in", "row_exs", "]", ")", "\n", "col_entity_ids", "=", "row_entity_ids", "if", "positive_on_diagonal", "else", "torch", ".", "LongTensor", "(", "[", "entity_dict", ".", "entity_to_idx", "(", "ex", ".", "tail_id", ")", "for", "ex", "in", "col_exs", "]", ")", "\n", "# num_row x num_col", "\n", "triplet_mask", "=", "(", "row_entity_ids", ".", "unsqueeze", "(", "1", ")", "!=", "col_entity_ids", ".", "unsqueeze", "(", "0", ")", ")", "\n", "if", "positive_on_diagonal", ":", "\n", "        ", "triplet_mask", ".", "fill_diagonal_", "(", "True", ")", "\n", "\n", "# mask out other possible neighbors", "\n", "", "for", "i", "in", "range", "(", "num_row", ")", ":", "\n", "        ", "head_id", ",", "relation", "=", "row_exs", "[", "i", "]", ".", "head_id", ",", "row_exs", "[", "i", "]", ".", "relation", "\n", "neighbor_ids", "=", "train_triplet_dict", ".", "get_neighbors", "(", "head_id", ",", "relation", ")", "\n", "# exact match is enough, no further check needed", "\n", "if", "len", "(", "neighbor_ids", ")", "<=", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "j", "in", "range", "(", "num_col", ")", ":", "\n", "            ", "if", "i", "==", "j", "and", "positive_on_diagonal", ":", "\n", "                ", "continue", "\n", "", "tail_id", "=", "col_exs", "[", "j", "]", ".", "tail_id", "\n", "if", "tail_id", "in", "neighbor_ids", ":", "\n", "                ", "triplet_mask", "[", "i", "]", "[", "j", "]", "=", "False", "\n", "\n", "", "", "", "return", "triplet_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet_mask.construct_self_negative_mask": [[45, 53], ["torch.ones", "enumerate", "torch.ones.bool", "len", "train_triplet_dict.get_neighbors"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.TripletDict.get_neighbors"], ["", "def", "construct_self_negative_mask", "(", "exs", ":", "List", ")", "->", "torch", ".", "tensor", ":", "\n", "    ", "mask", "=", "torch", ".", "ones", "(", "len", "(", "exs", ")", ")", "\n", "for", "idx", ",", "ex", "in", "enumerate", "(", "exs", ")", ":", "\n", "        ", "head_id", ",", "relation", "=", "ex", ".", "head_id", ",", "ex", ".", "relation", "\n", "neighbor_ids", "=", "train_triplet_dict", ".", "get_neighbors", "(", "head_id", ",", "relation", ")", "\n", "if", "head_id", "in", "neighbor_ids", ":", "\n", "            ", "mask", "[", "idx", "]", "=", "0", "\n", "", "", "return", "mask", ".", "bool", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.metric.accuracy": [[6, 21], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["def", "accuracy", "(", "output", ":", "torch", ".", "tensor", ",", "target", ":", "torch", ".", "tensor", ",", "topk", "=", "(", "1", ",", ")", ")", "->", "List", "[", "torch", ".", "tensor", "]", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Example.__init__": [[61, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "head_id", ",", "relation", ",", "tail_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "head_id", "=", "head_id", "\n", "self", ".", "tail_id", "=", "tail_id", "\n", "self", ".", "relation", "=", "relation", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Example.head_desc": [[66, 71], ["entity_dict.get_entity_by_id"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_id"], ["", "@", "property", "\n", "def", "head_desc", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "head_id", ":", "\n", "            ", "return", "''", "\n", "", "return", "entity_dict", ".", "get_entity_by_id", "(", "self", ".", "head_id", ")", ".", "entity_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Example.tail_desc": [[72, 75], ["entity_dict.get_entity_by_id"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_id"], ["", "@", "property", "\n", "def", "tail_desc", "(", "self", ")", ":", "\n", "        ", "return", "entity_dict", ".", "get_entity_by_id", "(", "self", ".", "tail_id", ")", ".", "entity_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Example.head": [[76, 81], ["entity_dict.get_entity_by_id"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_id"], ["", "@", "property", "\n", "def", "head", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "head_id", ":", "\n", "            ", "return", "''", "\n", "", "return", "entity_dict", ".", "get_entity_by_id", "(", "self", ".", "head_id", ")", ".", "entity", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Example.tail": [[82, 85], ["entity_dict.get_entity_by_id"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_id"], ["", "@", "property", "\n", "def", "tail", "(", "self", ")", ":", "\n", "        ", "return", "entity_dict", ".", "get_entity_by_id", "(", "self", ".", "tail_id", ")", ".", "entity", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Example.vectorize": [[86, 111], ["doc._parse_entity_name", "doc._concat_name_desc", "doc._custom_tokenize", "doc._custom_tokenize", "doc._parse_entity_name", "doc._custom_tokenize", "len", "len", "doc._concat_name_desc", "head_desc.split", "doc.get_neighbor_desc", "tail_desc.split", "doc.get_neighbor_desc"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._parse_entity_name", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._concat_name_desc", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._custom_tokenize", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._custom_tokenize", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._parse_entity_name", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._custom_tokenize", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._concat_name_desc", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.get_neighbor_desc", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.get_neighbor_desc"], ["", "def", "vectorize", "(", "self", ")", "->", "dict", ":", "\n", "        ", "head_desc", ",", "tail_desc", "=", "self", ".", "head_desc", ",", "self", ".", "tail_desc", "\n", "if", "args", ".", "use_link_graph", ":", "\n", "            ", "if", "len", "(", "head_desc", ".", "split", "(", ")", ")", "<", "20", ":", "\n", "                ", "head_desc", "+=", "' '", "+", "get_neighbor_desc", "(", "head_id", "=", "self", ".", "head_id", ",", "tail_id", "=", "self", ".", "tail_id", ")", "\n", "", "if", "len", "(", "tail_desc", ".", "split", "(", ")", ")", "<", "20", ":", "\n", "                ", "tail_desc", "+=", "' '", "+", "get_neighbor_desc", "(", "head_id", "=", "self", ".", "tail_id", ",", "tail_id", "=", "self", ".", "head_id", ")", "\n", "\n", "", "", "head_word", "=", "_parse_entity_name", "(", "self", ".", "head", ")", "\n", "head_text", "=", "_concat_name_desc", "(", "head_word", ",", "head_desc", ")", "\n", "hr_encoded_inputs", "=", "_custom_tokenize", "(", "text", "=", "head_text", ",", "\n", "text_pair", "=", "self", ".", "relation", ")", "\n", "\n", "head_encoded_inputs", "=", "_custom_tokenize", "(", "text", "=", "head_text", ")", "\n", "\n", "tail_word", "=", "_parse_entity_name", "(", "self", ".", "tail", ")", "\n", "tail_encoded_inputs", "=", "_custom_tokenize", "(", "text", "=", "_concat_name_desc", "(", "tail_word", ",", "tail_desc", ")", ")", "\n", "\n", "return", "{", "'hr_token_ids'", ":", "hr_encoded_inputs", "[", "'input_ids'", "]", ",", "\n", "'hr_token_type_ids'", ":", "hr_encoded_inputs", "[", "'token_type_ids'", "]", ",", "\n", "'tail_token_ids'", ":", "tail_encoded_inputs", "[", "'input_ids'", "]", ",", "\n", "'tail_token_type_ids'", ":", "tail_encoded_inputs", "[", "'token_type_ids'", "]", ",", "\n", "'head_token_ids'", ":", "head_encoded_inputs", "[", "'input_ids'", "]", ",", "\n", "'head_token_type_ids'", ":", "head_encoded_inputs", "[", "'token_type_ids'", "]", ",", "\n", "'obj'", ":", "self", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Dataset.__init__": [[115, 128], ["path.split", "all", "os.path.exists", "doc.load_data", "doc.Dataset.examples.extend", "doc.load_data"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.load_data", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.load_data"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "task", ",", "examples", "=", "None", ")", ":", "\n", "        ", "self", ".", "path_list", "=", "path", ".", "split", "(", "','", ")", "\n", "self", ".", "task", "=", "task", "\n", "assert", "all", "(", "os", ".", "path", ".", "exists", "(", "path", ")", "for", "path", "in", "self", ".", "path_list", ")", "or", "examples", "\n", "if", "examples", ":", "\n", "            ", "self", ".", "examples", "=", "examples", "\n", "", "else", ":", "\n", "            ", "self", ".", "examples", "=", "[", "]", "\n", "for", "path", "in", "self", ".", "path_list", ":", "\n", "                ", "if", "not", "self", ".", "examples", ":", "\n", "                    ", "self", ".", "examples", "=", "load_data", "(", "path", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "examples", ".", "extend", "(", "load_data", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Dataset.__len__": [[129, 131], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Dataset.__getitem__": [[132, 134], ["doc.Dataset.examples[].vectorize"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.Example.vectorize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "examples", "[", "index", "]", ".", "vectorize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._custom_tokenize": [[20, 30], ["dict_hub.get_tokenizer", "dict_hub.get_tokenizer."], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_tokenizer"], ["", "def", "_custom_tokenize", "(", "text", ":", "str", ",", "\n", "text_pair", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "dict", ":", "\n", "    ", "tokenizer", "=", "get_tokenizer", "(", ")", "\n", "encoded_inputs", "=", "tokenizer", "(", "text", "=", "text", ",", "\n", "text_pair", "=", "text_pair", "if", "text_pair", "else", "None", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "args", ".", "max_num_tokens", ",", "\n", "return_token_type_ids", "=", "True", ",", "\n", "truncation", "=", "True", ")", "\n", "return", "encoded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._parse_entity_name": [[32, 39], ["config.args.task.lower", "entity.split"], "function", ["None"], ["", "def", "_parse_entity_name", "(", "entity", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "args", ".", "task", ".", "lower", "(", ")", "==", "'wn18rr'", ":", "\n", "# family_alcidae_NN_1", "\n", "        ", "entity", "=", "' '", ".", "join", "(", "entity", ".", "split", "(", "'_'", ")", "[", ":", "-", "2", "]", ")", "\n", "return", "entity", "\n", "# a very small fraction of entities in wiki5m do not have name", "\n", "", "return", "entity", "or", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._concat_name_desc": [[41, 47], ["entity_desc[].strip.startswith", "entity_desc[].strip", "len"], "function", ["None"], ["", "def", "_concat_name_desc", "(", "entity", ":", "str", ",", "entity_desc", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "entity_desc", ".", "startswith", "(", "entity", ")", ":", "\n", "        ", "entity_desc", "=", "entity_desc", "[", "len", "(", "entity", ")", ":", "]", ".", "strip", "(", ")", "\n", "", "if", "entity_desc", ":", "\n", "        ", "return", "'{}: {}'", ".", "format", "(", "entity", ",", "entity_desc", ")", "\n", "", "return", "entity", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.get_neighbor_desc": [[49, 57], ["dict_hub.get_link_graph().get_neighbor_ids", "doc._parse_entity_name", "dict_hub.get_link_graph", "entity_dict.get_entity_by_id"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.LinkGraph.get_neighbor_ids", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc._parse_entity_name", "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_link_graph", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.EntityDict.get_entity_by_id"], ["", "def", "get_neighbor_desc", "(", "head_id", ":", "str", ",", "tail_id", ":", "str", "=", "None", ")", "->", "str", ":", "\n", "    ", "neighbor_ids", "=", "get_link_graph", "(", ")", ".", "get_neighbor_ids", "(", "head_id", ")", "\n", "# avoid label leakage during training", "\n", "if", "not", "args", ".", "is_test", ":", "\n", "        ", "neighbor_ids", "=", "[", "n_id", "for", "n_id", "in", "neighbor_ids", "if", "n_id", "!=", "tail_id", "]", "\n", "", "entities", "=", "[", "entity_dict", ".", "get_entity_by_id", "(", "n_id", ")", ".", "entity", "for", "n_id", "in", "neighbor_ids", "]", "\n", "entities", "=", "[", "_parse_entity_name", "(", "entity", ")", "for", "entity", "in", "entities", "]", "\n", "return", "' '", ".", "join", "(", "entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.load_data": [[136, 157], ["path.endswith", "logger_config.logger.info", "json.load", "logger_config.logger.info", "len", "range", "open", "len", "examples.append", "examples.append", "doc.Example", "doc.Example", "triplet.reverse_triplet"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.predict.BertPredictor.load", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet.reverse_triplet"], ["", "", "def", "load_data", "(", "path", ":", "str", ",", "\n", "add_forward_triplet", ":", "bool", "=", "True", ",", "\n", "add_backward_triplet", ":", "bool", "=", "True", ")", "->", "List", "[", "Example", "]", ":", "\n", "    ", "assert", "path", ".", "endswith", "(", "'.json'", ")", ",", "'Unsupported format: {}'", ".", "format", "(", "path", ")", "\n", "assert", "add_forward_triplet", "or", "add_backward_triplet", "\n", "logger", ".", "info", "(", "'In test mode: {}'", ".", "format", "(", "args", ".", "is_test", ")", ")", "\n", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "logger", ".", "info", "(", "'Load {} examples from {}'", ".", "format", "(", "len", "(", "data", ")", ",", "path", ")", ")", "\n", "\n", "cnt", "=", "len", "(", "data", ")", "\n", "examples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cnt", ")", ":", "\n", "        ", "obj", "=", "data", "[", "i", "]", "\n", "if", "add_forward_triplet", ":", "\n", "            ", "examples", ".", "append", "(", "Example", "(", "**", "obj", ")", ")", "\n", "", "if", "add_backward_triplet", ":", "\n", "            ", "examples", ".", "append", "(", "Example", "(", "**", "reverse_triplet", "(", "obj", ")", ")", ")", "\n", "", "data", "[", "i", "]", "=", "None", "\n", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.collate": [[159, 198], ["doc.to_indices_and_mask", "doc.to_indices_and_mask", "doc.to_indices_and_mask", "doc.to_indices_and_mask", "doc.to_indices_and_mask", "doc.to_indices_and_mask", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "triplet_mask.construct_mask", "doc..", "dict_hub.get_tokenizer", "dict_hub.get_tokenizer", "dict_hub.get_tokenizer"], "function", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.to_indices_and_mask", "home.repos.pwc.inspect_result.intfloat_simkgc.None.triplet_mask.construct_mask", "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_tokenizer", "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_tokenizer", "home.repos.pwc.inspect_result.intfloat_simkgc.None.dict_hub.get_tokenizer"], ["", "def", "collate", "(", "batch_data", ":", "List", "[", "dict", "]", ")", "->", "dict", ":", "\n", "    ", "hr_token_ids", ",", "hr_mask", "=", "to_indices_and_mask", "(", "\n", "[", "torch", ".", "LongTensor", "(", "ex", "[", "'hr_token_ids'", "]", ")", "for", "ex", "in", "batch_data", "]", ",", "\n", "pad_token_id", "=", "get_tokenizer", "(", ")", ".", "pad_token_id", ")", "\n", "hr_token_type_ids", "=", "to_indices_and_mask", "(", "\n", "[", "torch", ".", "LongTensor", "(", "ex", "[", "'hr_token_type_ids'", "]", ")", "for", "ex", "in", "batch_data", "]", ",", "\n", "need_mask", "=", "False", ")", "\n", "\n", "tail_token_ids", ",", "tail_mask", "=", "to_indices_and_mask", "(", "\n", "[", "torch", ".", "LongTensor", "(", "ex", "[", "'tail_token_ids'", "]", ")", "for", "ex", "in", "batch_data", "]", ",", "\n", "pad_token_id", "=", "get_tokenizer", "(", ")", ".", "pad_token_id", ")", "\n", "tail_token_type_ids", "=", "to_indices_and_mask", "(", "\n", "[", "torch", ".", "LongTensor", "(", "ex", "[", "'tail_token_type_ids'", "]", ")", "for", "ex", "in", "batch_data", "]", ",", "\n", "need_mask", "=", "False", ")", "\n", "\n", "head_token_ids", ",", "head_mask", "=", "to_indices_and_mask", "(", "\n", "[", "torch", ".", "LongTensor", "(", "ex", "[", "'head_token_ids'", "]", ")", "for", "ex", "in", "batch_data", "]", ",", "\n", "pad_token_id", "=", "get_tokenizer", "(", ")", ".", "pad_token_id", ")", "\n", "head_token_type_ids", "=", "to_indices_and_mask", "(", "\n", "[", "torch", ".", "LongTensor", "(", "ex", "[", "'head_token_type_ids'", "]", ")", "for", "ex", "in", "batch_data", "]", ",", "\n", "need_mask", "=", "False", ")", "\n", "\n", "batch_exs", "=", "[", "ex", "[", "'obj'", "]", "for", "ex", "in", "batch_data", "]", "\n", "batch_dict", "=", "{", "\n", "'hr_token_ids'", ":", "hr_token_ids", ",", "\n", "'hr_mask'", ":", "hr_mask", ",", "\n", "'hr_token_type_ids'", ":", "hr_token_type_ids", ",", "\n", "'tail_token_ids'", ":", "tail_token_ids", ",", "\n", "'tail_mask'", ":", "tail_mask", ",", "\n", "'tail_token_type_ids'", ":", "tail_token_type_ids", ",", "\n", "'head_token_ids'", ":", "head_token_ids", ",", "\n", "'head_mask'", ":", "head_mask", ",", "\n", "'head_token_type_ids'", ":", "head_token_type_ids", ",", "\n", "'batch_data'", ":", "batch_exs", ",", "\n", "'triplet_mask'", ":", "construct_mask", "(", "row_exs", "=", "batch_exs", ")", "if", "not", "args", ".", "is_test", "else", "None", ",", "\n", "'self_negative_mask'", ":", "construct_self_negative_mask", "(", "batch_exs", ")", "if", "not", "args", ".", "is_test", "else", "None", ",", "\n", "}", "\n", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.doc.to_indices_and_mask": [[200, 215], ["max", "len", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "indices[].copy_", "t.size", "torch.LongTensor", "torch.LongTensor", "mask[].fill_", "torch.ByteTensor", "torch.ByteTensor", "len", "len"], "function", ["None"], ["", "def", "to_indices_and_mask", "(", "batch_tensor", ",", "pad_token_id", "=", "0", ",", "need_mask", "=", "True", ")", ":", "\n", "    ", "mx_len", "=", "max", "(", "[", "t", ".", "size", "(", "0", ")", "for", "t", "in", "batch_tensor", "]", ")", "\n", "batch_size", "=", "len", "(", "batch_tensor", ")", "\n", "indices", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "mx_len", ")", ".", "fill_", "(", "pad_token_id", ")", "\n", "# For BERT, mask value of 1 corresponds to a valid position", "\n", "if", "need_mask", ":", "\n", "        ", "mask", "=", "torch", ".", "ByteTensor", "(", "batch_size", ",", "mx_len", ")", ".", "fill_", "(", "0", ")", "\n", "", "for", "i", ",", "t", "in", "enumerate", "(", "batch_tensor", ")", ":", "\n", "        ", "indices", "[", "i", ",", ":", "len", "(", "t", ")", "]", ".", "copy_", "(", "t", ")", "\n", "if", "need_mask", ":", "\n", "            ", "mask", "[", "i", ",", ":", "len", "(", "t", ")", "]", ".", "fill_", "(", "1", ")", "\n", "", "", "if", "need_mask", ":", "\n", "        ", "return", "indices", ",", "mask", "\n", "", "else", ":", "\n", "        ", "return", "indices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.logger_config._setup_logger": [[4, 14], ["logging.Formatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setFormatter"], "function", ["None"], ["def", "_setup_logger", "(", ")", ":", "\n", "    ", "log_format", "=", "logging", ".", "Formatter", "(", "\"[%(asctime)s %(levelname)s] %(message)s\"", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "handlers", "=", "[", "console_handler", "]", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.__init__": [[68, 72], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.reset": [[73, 78], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.update": [[79, 84], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.AverageMeter.__str__": [[85, 88], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.ProgressMeter.__init__": [[91, 95], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.ProgressMeter.display": [[96, 100], ["logger_config.logger.info", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ":", "int", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "logger", ".", "info", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.ProgressMeter._get_batch_fmtstr": [[101, 105], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ":", "int", ")", "->", "str", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.save_checkpoint": [[16, 21], ["torch.save", "torch.save", "shutil.copyfile", "shutil.copyfile", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ":", "dict", ",", "is_best", ":", "bool", ",", "filename", ":", "str", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "dirname", "(", "filename", ")", "+", "'/model_best.mdl'", ")", "\n", "", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "dirname", "(", "filename", ")", "+", "'/model_last.mdl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.delete_old_ckt": [[23, 28], ["sorted", "glob.glob", "logger_config.logger.info", "os.system"], "function", ["None"], ["", "def", "delete_old_ckt", "(", "path_pattern", ":", "str", ",", "keep", "=", "5", ")", ":", "\n", "    ", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "path_pattern", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ",", "reverse", "=", "True", ")", "\n", "for", "f", "in", "files", "[", "keep", ":", "]", ":", "\n", "        ", "logger", ".", "info", "(", "'Delete old checkpoint {}'", ".", "format", "(", "f", ")", ")", "\n", "os", ".", "system", "(", "'rm -f {}'", ".", "format", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.report_num_trainable_parameters": [[30, 41], ["isinstance", "model.named_parameters", "logger_config.logger.info", "numpy.prod", "logger_config.logger.info", "list", "p.size", "numpy.prod", "list", "p.size"], "function", ["None"], ["", "", "def", "report_num_trainable_parameters", "(", "model", ":", "torch", ".", "nn", ".", "Module", ")", "->", "int", ":", "\n", "    ", "assert", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "Module", ")", ",", "'Argument must be nn.Module'", "\n", "\n", "num_parameters", "=", "0", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "num_parameters", "+=", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "name", ",", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'Number of parameters: {}M'", ".", "format", "(", "num_parameters", "//", "10", "**", "6", ")", ")", "\n", "return", "num_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.get_model_obj": [[43, 45], ["hasattr"], "function", ["None"], ["", "def", "get_model_obj", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "return", "model", ".", "module", "if", "hasattr", "(", "model", ",", "\"module\"", ")", "else", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.intfloat_simkgc.None.utils.move_to_cuda": [[47, 64], ["utils.move_to_cuda._move_to_cuda"], "function", ["None"], ["", "def", "move_to_cuda", "(", "sample", ")", ":", "\n", "    ", "if", "len", "(", "sample", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "def", "_move_to_cuda", "(", "maybe_tensor", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "maybe_tensor", ")", ":", "\n", "            ", "return", "maybe_tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "elif", "isinstance", "(", "maybe_tensor", ",", "dict", ")", ":", "\n", "            ", "return", "{", "key", ":", "_move_to_cuda", "(", "value", ")", "for", "key", ",", "value", "in", "maybe_tensor", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "maybe_tensor", ",", "list", ")", ":", "\n", "            ", "return", "[", "_move_to_cuda", "(", "x", ")", "for", "x", "in", "maybe_tensor", "]", "\n", "", "elif", "isinstance", "(", "maybe_tensor", ",", "tuple", ")", ":", "\n", "            ", "return", "[", "_move_to_cuda", "(", "x", ")", "for", "x", "in", "maybe_tensor", "]", "\n", "", "else", ":", "\n", "            ", "return", "maybe_tensor", "\n", "\n", "", "", "return", "_move_to_cuda", "(", "sample", ")", "\n", "\n"]]}