{"home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.merge_results.collect_result_files": [[7, 33], ["os.walk", "pandas.concat", "len", "pandas.concat", "pd.concat.to_csv", "pandas.read_csv", "len", "pd.concat.to_csv", "os.path.join", "dirpath.split", "pd.concat.append", "pd.concat.append"], "function", ["None"], ["def", "collect_result_files", "(", "save", "=", "True", ")", ":", "\n", "    ", "my_results", "=", "[", "]", "\n", "netkit_results", "=", "[", "]", "\n", "\n", "for", "dirpath", ",", "dnames", ",", "fnames", "in", "os", ".", "walk", "(", "\"../results/\"", ")", ":", "\n", "\n", "        ", "if", "dirpath", "==", "'../results/'", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "fname", "in", "fnames", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "fname", ")", ")", "\n", "df", "[", "'dataset'", "]", "=", "dirpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "df", "[", "'features'", "]", "=", "fname", "\n", "if", "fname", "==", "'netkit'", ":", "\n", "                ", "netkit_results", ".", "append", "(", "df", ")", "\n", "", "else", ":", "\n", "                ", "my_results", ".", "append", "(", "df", ")", "\n", "\n", "", "", "", "my_results", "=", "pd", ".", "concat", "(", "my_results", ")", "\n", "if", "len", "(", "netkit_results", ")", "is", "not", "0", ":", "\n", "        ", "netkit_results", "=", "pd", ".", "concat", "(", "netkit_results", ")", "\n", "", "if", "save", ":", "\n", "        ", "my_results", ".", "to_csv", "(", "'../results/my_results.csv'", ")", "\n", "if", "len", "(", "netkit_results", ")", "is", "not", "0", ":", "\n", "            ", "netkit_results", ".", "to_csv", "(", "'../results/netkit_results.csv'", ")", "\n", "", "", "return", "my_results", ",", "netkit_results", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.merge_results.agg_results": [[35, 64], ["merge_results.collect_result_files", "my_results[].sum", "my_results.drop.drop", "my_results.drop.fillna", "my_results.drop.groupby", "pandas.DataFrame", "len", "pandas.concat", "pd.concat.set_index", "len", "pandas.concat", "pd.concat.to_csv", "grouped[].mean", "grouped[].std"], "function", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.merge_results.collect_result_files"], ["", "def", "agg_results", "(", "save", "=", "True", ")", ":", "\n", "    ", "my_results", ",", "netkit_results", "=", "collect_result_files", "(", "save", "=", "True", ")", "\n", "my_results", "[", "'args'", "]", "=", "my_results", "[", "[", "'depth'", ",", "'n_cluster'", ",", "'restart'", "]", "]", ".", "sum", "(", "axis", "=", "1", ")", "\n", "my_results", "=", "my_results", ".", "drop", "(", "[", "'depth'", ",", "'n_cluster'", ",", "'restart'", "]", ")", "\n", "my_results", ".", "fillna", "(", "-", "1", ",", "inplace", "=", "True", ")", "\n", "grouped", "=", "my_results", ".", "groupby", "(", "[", "'dataset'", ",", "'features'", ",", "'ratio'", ",", "'args'", "]", ")", "\n", "my_agg_results", "=", "DataFrame", "(", "{", "'mean_acc'", ":", "grouped", "[", "'cluster_acc'", "]", ".", "mean", "(", ")", ",", "'std_acc'", ":", "grouped", "[", "'cluster_acc'", "]", ".", "std", "(", ")", "}", ")", "\n", "\n", "if", "len", "(", "netkit_results", ")", "is", "not", "0", ":", "\n", "        ", "df_wvrn", "=", "netkit_results", "[", "[", "'wvrn_acc'", ",", "'wvrn_std'", ",", "'ratio'", ",", "'dataset'", "]", "]", "\n", "df_wvrn", ".", "columns", "=", "[", "'mean_acc'", ",", "'std_acc'", ",", "'ratio'", ",", "'dataset'", "]", "\n", "df_wvrn", "[", "'features'", "]", "=", "'wvrn'", "\n", "\n", "df_nlb", "=", "netkit_results", "[", "[", "'nlb_acc'", ",", "'nlb_std'", ",", "'ratio'", ",", "'dataset'", "]", "]", "\n", "df_nlb", ".", "columns", "=", "[", "'mean_acc'", ",", "'std_acc'", ",", "'ratio'", ",", "'dataset'", "]", "\n", "df_nlb", "[", "'features'", "]", "=", "'nlb'", "\n", "\n", "df_wvrn_nlb", "=", "pd", ".", "concat", "(", "[", "df_wvrn", ",", "df_nlb", "]", ")", "\n", "df_wvrn_nlb", "[", "'args'", "]", "=", "np", ".", "nan", "\n", "df_wvrn_nlb", ".", "set_index", "(", "[", "'dataset'", ",", "'features'", ",", "'ratio'", ",", "'args'", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "", "if", "len", "(", "netkit_results", ")", "is", "not", "0", ":", "\n", "        ", "df_all", "=", "pd", ".", "concat", "(", "[", "df_wvrn_nlb", ",", "my_agg_results", "]", ")", "\n", "", "else", ":", "\n", "        ", "df_all", "=", "my_agg_results", "\n", "\n", "", "if", "save", ":", "\n", "        ", "df_all", ".", "to_csv", "(", "'../results/agg_results.csv'", ")", "\n", "", "return", "df_all", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.feature_extract.get_neighbor_ids": [[8, 37], ["dict", "networkx.all_pairs_shortest_path_length", "scipy.sparse.lil_matrix", "range", "l[].iteritems", "range", "len", "len", "len"], "function", ["None"], ["def", "get_neighbor_ids", "(", "g", ",", "index", ",", "max_k", "=", "3", ")", ":", "\n", "    ", "'''\n    extract feature matrices for the node neighborhood in g\n\n    parameters\n    ==========\n\n    g the networkx network to encode\n\n    index list of all nodes in g (as given by g.nodes()) providing the row/column order of the resulting features\n\n    max_k maximal distance to encode\n\n    return\n    ======\n\n    list of matrices corrospondig to distances 1..max_k with [na,nb]=1 if distance(na,nb)=d for d'th matrix in list\n\n    '''", "\n", "rev_index", "=", "dict", "(", "[", "(", "index", "[", "i", "]", ",", "i", ")", "for", "i", "in", "range", "(", "len", "(", "index", ")", ")", "]", ")", "\n", "l", "=", "nx", ".", "all_pairs_shortest_path_length", "(", "g", ",", "cutoff", "=", "max_k", ")", "\n", "features", "=", "[", "lil_matrix", "(", "(", "len", "(", "index", ")", ",", "len", "(", "index", ")", ")", ")", "for", "_", "in", "range", "(", "max_k", ")", "]", "\n", "for", "node", "in", "index", ":", "\n", "        ", "row", "=", "rev_index", "[", "node", "]", "\n", "if", "node", "in", "l", ":", "\n", "            ", "for", "neighbor", ",", "distance", "in", "l", "[", "node", "]", ".", "iteritems", "(", ")", ":", "\n", "                ", "if", "distance", ">", "0", "and", "neighbor", "in", "index", ":", "\n", "                    ", "features", "[", "distance", "-", "1", "]", "[", "row", ",", "rev_index", "[", "neighbor", "]", "]", "=", "1", "\n", "", "", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.feature_extract.setup_label_matrix": [[39, 56], ["len", "numpy.ones", "scipy.sparse.coo_matrix().todense", "len", "numpy.where", "set", "set", "scipy.sparse.coo_matrix", "numpy.array().flatten", "numpy.array", "coo_matrix().todense.sum"], "function", ["None"], ["", "def", "setup_label_matrix", "(", "y", ",", "n_classes", "=", "None", ")", ":", "\n", "\n", "        ", "if", "n_classes", "is", "None", ":", "\n", "            ", "n_classes", "=", "len", "(", "set", "(", "y", ")", ")", "\n", "# -1 is not a clas label", "\n", "if", "-", "1", "in", "set", "(", "y", ")", ":", "\n", "                ", "n_classes", "-=", "1", "\n", "", "", "n_samples", "=", "len", "(", "y", ")", "\n", "\n", "row", "=", "np", ".", "where", "(", "y", ">=", "0", ")", "[", "0", "]", "\n", "col", "=", "y", "[", "y", ">=", "0", "]", "\n", "data", "=", "np", ".", "ones", "(", "col", ".", "shape", ")", "\n", "C", "=", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "\n", "shape", "=", "(", "n_samples", ",", "n_classes", ")", ")", ".", "todense", "(", ")", "\n", "C", "[", "np", ".", "array", "(", "C", ".", "sum", "(", "axis", "=", "1", ")", ")", ".", "flatten", "(", ")", "\n", "<", "1", ",", ":", "]", "=", "np", ".", "nan", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.feature_extract.calc_rwr_matrix": [[58, 66], ["sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.identity", "scipy.inv"], "function", ["None"], ["", "def", "calc_rwr_matrix", "(", "A", ",", "c", "=", "0.9", ")", ":", "\n", "\n", "    ", "A_norm", "=", "normalize", "(", "A", ",", "norm", "=", "'l1'", ",", "axis", "=", "1", ",", "copy", "=", "True", ")", "\n", "Q", "=", "np", ".", "identity", "(", "A_norm", ".", "shape", "[", "0", "]", ",", "dtype", "=", "float", ")", "-", "c", "*", "A_norm", "\n", "rwr", "=", "(", "1", "-", "c", ")", "*", "LA", ".", "inv", "(", "Q", ")", "\n", "normalize", "(", "rwr", ",", "norm", "=", "'l2'", ",", "\n", "axis", "=", "0", ",", "copy", "=", "False", ")", "\n", "return", "rwr", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.feature_extract.create_metis_partitions": [[68, 100], ["pandas.DataFrame().transpose", "g.nodes", "p.append", "metis.part_graph", "partitions.append", "pandas.DataFrame", "str"], "function", ["None"], ["", "def", "create_metis_partitions", "(", "networks", ",", "sizes", "=", "[", "2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", ",", "use_weights", "=", "False", ",", "seed", "=", "666", ")", ":", "\n", "    ", "'''partition all networks and return unified result (partition tables for joint node set)\n\n    Parameters\n    ----------\n    networks :  array of networkx Graphs\n    sizes : list of partitioning sizes\n         numbers of partitions to split the graphs into\n    use_weights : (optional) boolean\n         will use the 'weight' attribute of the networks edges for partitioning (True) or\n         partition the unweighted graphs (False)\n    seed : (optional) integer\n         used as seed for the metis partitioning (for each call the same seed)\n    '''", "\n", "p", "=", "[", "]", "\n", "import", "os", "\n", "os", ".", "environ", "[", "'METIS_DLL'", "]", "=", "\"/usr/local/lib/libmetis.so\"", "\n", "import", "metis", "\n", "for", "g", "in", "networks", ":", "\n", "        ", "partitions", "=", "[", "]", "\n", "if", "use_weights", ":", "\n", "            ", "g", ".", "graph", "[", "'edge_weight_attr'", "]", "=", "'weight'", "\n", "", "for", "i", "in", "sizes", ":", "\n", "            ", "(", "_", ",", "parts", ")", "=", "metis", ".", "part_graph", "(", "g", ",", "i", ",", "seed", "=", "seed", ")", "\n", "partitions", ".", "append", "(", "parts", ")", "\n", "", "df", "=", "DataFrame", "(", "partitions", ")", ".", "transpose", "(", ")", "\n", "df", ".", "index", "=", "g", ".", "nodes", "(", ")", "\n", "df", ".", "columns", "=", "[", "str", "(", "i", ")", "+", "'_'", "+", "g", ".", "graph", "[", "'name'", "]", "for", "i", "in", "sizes", "]", "\n", "p", ".", "append", "(", "df", ")", "\n", "if", "use_weights", ":", "\n", "            ", "del", "g", ".", "graph", "[", "'edge_weight_attr'", "]", "\n", "", "", "return", "p", "\n", "", ""]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.read_files.read_netkit_data_in_graph": [[7, 32], ["dict", "range", "len", "pandas.read_csv", "pandas.read_csv", "networkx.Graph", "nx.Graph.add_nodes_from", "nx.Graph.add_weighted_edges_from", "nx.Graph.remove_nodes_from", "networks.append", "pandas.DataFrame.from_dict", "nx.Graph.degree().iteritems", "nx.Graph.degree"], "function", ["None"], ["def", "read_netkit_data_in_graph", "(", "basedir", ",", "\n", "basenames", "=", "[", "\"industry-pr\"", ",", "\"industry-yh\"", "]", ")", ":", "\n", "    ", "'''\n    read netkit dataset from basedir\n    expects subdirectories for each basename, a file \"basename.rn\" with relation and\n    \"basename.csv\" with label data\n    '''", "\n", "delimiter", "=", "\"[, ]\"", "\n", "labels", "=", "dict", "(", ")", "\n", "networks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "basenames", ")", ")", ":", "\n", "        ", "basename", "=", "basenames", "[", "i", "]", "\n", "edges", "=", "pd", ".", "read_csv", "(", "basedir", "+", "basename", "+", "\"/\"", "+", "basename", "+", "\".rn\"", ",", "names", "=", "[", "\"source\"", ",", "\"target\"", ",", "\"weight\"", "]", ",", "delimiter", "=", "delimiter", ")", "\n", "nodes", "=", "pd", ".", "read_csv", "(", "basedir", "+", "basename", "+", "\"/\"", "+", "basename", "+", "\".csv\"", ",", "names", "=", "[", "\"index\"", ",", "\"label\"", "]", ",", "delimiter", "=", "delimiter", ")", "\n", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "g", ".", "graph", "[", "'name'", "]", "=", "basename", "\n", "g", ".", "add_nodes_from", "(", "nodes", "[", "'index'", "]", ".", "values", ")", "\n", "g", ".", "add_weighted_edges_from", "(", "edges", ".", "values", ")", "\n", "g", ".", "remove_nodes_from", "(", "[", "node", "for", "node", ",", "degree", "in", "g", ".", "degree", "(", ")", ".", "iteritems", "(", ")", "if", "degree", "==", "0", "]", ")", "\n", "networks", ".", "append", "(", "g", ")", "\n", "for", "n", "in", "nodes", ".", "values", ":", "\n", "            ", "labels", "[", "n", "[", "0", "]", "]", "=", "n", "[", "1", "]", "\n", "", "df_labels", "=", "DataFrame", ".", "from_dict", "(", "labels", ",", "orient", "=", "'index'", ")", "\n", "df_labels", ".", "columns", "=", "[", "'labels'", "]", "\n", "", "return", "networks", ",", "[", "]", ",", "df_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.read_files.read_linqs_data": [[34, 45], ["pandas.read_csv", "pandas.DataFrame", "X.astype.astype", "networkx.read_edgelist", "G.to_undirected.to_undirected", "pd.read_csv.iloc[].values.astype"], "function", ["None"], ["", "def", "read_linqs_data", "(", "basedir", ",", "basename", ")", ":", "\n", "    ", "subpath", "=", "basename", "+", "'/'", "+", "basename", "\n", "df", "=", "pd", ".", "read_csv", "(", "basedir", "+", "subpath", "+", "'.content'", ",", "delimiter", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "df_labels", "=", "DataFrame", "(", "df", ".", "iloc", "[", ":", ",", "-", "1", "]", ".", "values", ",", "\n", "index", "=", "df", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", ".", "astype", "(", "str", ")", ",", "columns", "=", "[", "'labels'", "]", ")", "\n", "X", "=", "df", ".", "iloc", "[", ":", ",", "1", ":", "-", "1", "]", ".", "values", "\n", "X", "=", "X", ".", "astype", "(", "np", ".", "float64", ")", "\n", "G", "=", "nx", ".", "read_edgelist", "(", "basedir", "+", "subpath", "+", "'.cites'", ")", "\n", "G", "=", "G", ".", "to_undirected", "(", ")", "\n", "G", ".", "graph", "[", "'name'", "]", "=", "basename", "\n", "return", "G", ",", "X", ",", "df_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.read_files.export_linqs_to_netkit": [[47, 61], ["read_files.read_linqs_data", "set().difference", "networkx.write_edgelist", "read_files.read_linqs_data", "set().difference", "y.to_csv", "networkx.write_edgelist", "set", "G.remove_node", "set", "G.remove_node", "set", "set", "G.nodes", "G.nodes"], "function", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.read_files.read_linqs_data", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.read_files.read_linqs_data"], ["", "def", "export_linqs_to_netkit", "(", ")", ":", "\n", "\n", "    ", "G", ",", "X", ",", "y", "=", "read_linqs_data", "(", "'data/LINQS/'", ",", "'citeseer'", ")", "\n", "no_labels", "=", "set", "(", "G", ".", "nodes", "(", ")", ")", ".", "difference", "(", "set", "(", "y", ".", "index", ".", "values", ")", ")", "\n", "for", "node", "in", "no_labels", ":", "\n", "        ", "G", ".", "remove_node", "(", "node", ")", "\n", "", "nx", ".", "write_edgelist", "(", "G", ",", "'data/NetKit-Data/citeseer/citeseer.rn'", ",", "delimiter", "=", "','", ")", "\n", "\n", "G", ",", "X", ",", "y", "=", "read_linqs_data", "(", "'data/LINQS/'", ",", "'cora'", ")", "\n", "no_labels", "=", "set", "(", "G", ".", "nodes", "(", ")", ")", ".", "difference", "(", "set", "(", "y", ".", "index", ".", "values", ")", ")", "\n", "for", "node", "in", "no_labels", ":", "\n", "        ", "G", ".", "remove_node", "(", "node", ")", "\n", "", "y", ".", "to_csv", "(", "'data/NetKit-Data/cora/cora.csv'", ")", "\n", "nx", ".", "write_edgelist", "(", "G", ",", "'data/NetKit-Data/cora/cora.rn'", ",", "delimiter", "=", "','", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.netkit_experiments.run_netkit_on_single_relation": [[6, 22], ["netkit.run", "netkit.run", "pandas.merge", "pd.merge.to_csv"], "function", ["None"], ["def", "run_netkit_on_single_relation", "(", "path", ",", "n_runs", "=", "10", ",", "save_to", "=", "None", ")", ":", "\n", "\n", "    ", "inferencemethod", "=", "'relaxlabel'", "\n", "\n", "res_wvrn", ",", "pred", "=", "netkit", ".", "run", "(", "path", ",", "classifier", "=", "'wvrn'", ",", "\n", "inferencemethod", "=", "inferencemethod", ",", "cv_folds", "=", "n_runs", ",", "verbose", "=", "False", ")", "\n", "res_wvrn", ".", "columns", "=", "[", "'wvrn_acc'", ",", "'wvrn_std'", ",", "'ratio'", "]", "\n", "\n", "res_nlb", ",", "pred", "=", "netkit", ".", "run", "(", "path", ",", "classifier", "=", "'nLB'", ",", "\n", "inferencemethod", "=", "inferencemethod", ",", "cv_folds", "=", "n_runs", ",", "verbose", "=", "False", ")", "\n", "res_nlb", ".", "columns", "=", "[", "'nlb_acc'", ",", "'nlb_std'", ",", "'ratio'", "]", "\n", "\n", "res_all", "=", "pd", ".", "merge", "(", "res_wvrn", ",", "res_nlb", ",", "on", "=", "'ratio'", ")", "\n", "\n", "if", "save_to", "is", "not", "None", ":", "\n", "        ", "res_all", ".", "to_csv", "(", "'../results/'", "+", "save_to", "+", "'/netkit.csv'", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.netkit_experiments.run_single_relation_experiments": [[24, 37], ["netkit_experiments.run_netkit_on_single_relation", "netkit_experiments.run_netkit_on_single_relation", "netkit_experiments.run_netkit_on_single_relation"], "function", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.netkit_experiments.run_netkit_on_single_relation", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.netkit_experiments.run_netkit_on_single_relation", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.netkit_experiments.run_netkit_on_single_relation"], ["", "", "def", "run_single_relation_experiments", "(", ")", ":", "\n", "\n", "    ", "path", "=", "'citeseer/citeseer'", "\n", "save_to", "=", "'citeseer'", "\n", "run_netkit_on_single_relation", "(", "path", ",", "save_to", "=", "save_to", ")", "\n", "\n", "path", "=", "'cora/cora'", "\n", "save_to", "=", "'cora'", "\n", "run_netkit_on_single_relation", "(", "path", ",", "save_to", "=", "save_to", ")", "\n", "\n", "path", "=", "'imdb_all/imdb_all'", "\n", "save_to", "=", "'imdb'", "\n", "run_netkit_on_single_relation", "(", "path", ",", "save_to", "=", "save_to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.Blockgraph.create_blocked_relation": [[12, 26], ["networkx.to_numpy_matrix", "range", "networkx.gnp_random_graph", "networkx.to_numpy_matrix", "networkx.gnp_random_graph", "float", "float"], "methods", ["None"], ["    ", "def", "create_blocked_relation", "(", "self", ",", "seed", ")", ":", "\n", "        ", "n", "=", "self", ".", "nsamples", "\n", "g", "=", "self", ".", "nsamples", "/", "self", ".", "groups", "\n", "s", "=", "seed", "\n", "a", "=", "nx", ".", "to_numpy_matrix", "(", "nx", ".", "gnp_random_graph", "(", "\n", "n", ",", "float", "(", "self", ".", "inter_degree", ")", "/", "n", ",", "seed", "=", "s", ",", "directed", "=", "False", ")", ")", "\n", "s", "=", "s", "+", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "groups", ")", ":", "\n", "            ", "ga", "=", "nx", ".", "to_numpy_matrix", "(", "\n", "nx", ".", "gnp_random_graph", "(", "g", ",", "float", "(", "self", ".", "intra_degree", ")", "/", "\n", "g", ",", "s", ",", "directed", "=", "False", ")", ")", "\n", "s", "=", "s", "+", "1", "\n", "a", "[", "(", "i", "*", "g", ")", ":", "(", "(", "i", "+", "1", ")", "*", "g", ")", ",", "(", "i", "*", "g", ")", ":", "(", "(", "i", "+", "1", ")", "*", "g", ")", "]", "=", "ga", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.Blockgraph.create_features": [[27, 34], ["numpy.zeros"], "methods", ["None"], ["", "def", "create_features", "(", "self", ",", "dim_informative", ",", "dim_uninformative", ")", ":", "\n", "        ", "features", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "nsamples", ",", "0", ")", ")", "\n", "#         f=make_classification(self.nsamples,", "\n", "#  n_features, n_informative, n_redundant, n_repeated,", "\n", "#  n_classes=self.groups, n_clusters_per_class=1, weights,", "\n", "#  flip_y, class_sep, hypercube, shift, scale, shuffle, random_state)", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.Blockgraph.__init__": [[35, 57], ["range", "range", "range", "datasets.Blockgraph.create_features", "datasets.Blockgraph.labels.extend", "datasets.Blockgraph.relations.append", "numpy.random.permutation", "datasets.Blockgraph.relations.append", "datasets.Blockgraph.create_blocked_relation", "datasets.Blockgraph.create_blocked_relation"], "methods", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.Blockgraph.create_features", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.Blockgraph.create_blocked_relation", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.Blockgraph.create_blocked_relation"], ["", "def", "__init__", "(", "self", ",", "samples", "=", "400", ",", "groups", "=", "2", ",", "intra_degree", "=", "10", ",", "inter_degree", "=", "2", ",", "\n", "true_rel", "=", "1", ",", "wrong_rel", "=", "1", ",", "seed", "=", "33", ")", ":", "\n", "        ", "self", ".", "nsamples", "=", "samples", "\n", "self", ".", "groups", "=", "groups", "\n", "# links with group", "\n", "self", ".", "intra_degree", "=", "intra_degree", "\n", "# links between groups", "\n", "self", ".", "inter_degree", "=", "inter_degree", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "g", "in", "range", "(", "self", ".", "groups", ")", ":", "\n", "            ", "self", ".", "labels", ".", "extend", "(", "[", "g", "]", "*", "(", "self", ".", "nsamples", "/", "self", ".", "groups", ")", ")", "\n", "", "s", "=", "seed", "\n", "self", ".", "relations", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "true_rel", ")", ":", "\n", "            ", "self", ".", "relations", ".", "append", "(", "self", ".", "create_blocked_relation", "(", "s", ")", ")", "\n", "s", "=", "s", "+", "1", "\n", "", "for", "_", "in", "range", "(", "wrong_rel", ")", ":", "\n", "            ", "p", "=", "np", ".", "random", ".", "permutation", "(", "samples", ")", "\n", "self", ".", "relations", ".", "append", "(", "self", ".", "create_blocked_relation", "(", "s", ")", "[", "p", ",", ":", "]", "[", ":", ",", "p", "]", ")", "\n", "s", "=", "s", "+", "1", "\n", "", "self", ".", "features", "=", "self", ".", "create_features", "(", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.multi_gauss.__init__": [[68, 73], ["numpy.array", "numpy.random.rand", "range", "range", "numpy.matlib.eye", "numpy.random.rand", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_clusters", "=", "4", ",", "dim", "=", "2", ")", ":", "\n", "        ", "self", ".", "centers", "=", "np", ".", "array", "(", "[", "[", "2", "*", "rand", "(", ")", "for", "_", "in", "range", "(", "dim", ")", "\n", "]", "for", "_", "in", "range", "(", "n_clusters", ")", "]", ")", "\n", "self", ".", "cov", "=", "[", "eye", "(", "dim", ")", "*", "0.2", "*", "rand", "(", ")", "for", "_", "in", "range", "(", "n_clusters", ")", "]", "\n", "self", ".", "clusters", "=", "n_clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.multi_gauss.sample": [[74, 81], ["numpy.random.randint", "numpy.vstack", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "c", "=", "randint", "(", "0", ",", "self", ".", "clusters", "-", "1", ",", "size", "=", "n", ")", "\n", "if", "n", "==", "1", ":", "\n", "            ", "return", "multivariate_normal", "(", "self", ".", "centers", "[", "c", "[", "0", "]", "]", ",", "\n", "self", ".", "cov", "[", "c", "[", "0", "]", "]", ",", "1", ")", "[", "0", "]", "\n", "", "return", "np", ".", "vstack", "(", "[", "multivariate_normal", "(", "\n", "self", ".", "centers", "[", "cl", "]", ",", "self", ".", "cov", "[", "cl", "]", ",", "1", ")", "[", "0", "]", "for", "cl", "in", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.__init__": [[85, 90], ["datasets.multi_gauss", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", "=", "2", ",", "dim", "=", "2", ",", "n_clusters_per_class", "=", "4", ")", ":", "\n", "        ", "self", ".", "dists", "=", "[", "multi_gauss", "(", "n_clusters", "=", "n_clusters_per_class", ",", "dim", "=", "dim", ")", "\n", "for", "_", "in", "range", "(", "n_classes", ")", "]", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.sample": [[91, 93], ["datasets.class_dist.dists[].sample"], "methods", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.sample"], ["", "def", "sample", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "dists", "[", "label", "]", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.create_network": [[94, 101], ["numpy.random.seed", "dict", "networkx.generators.geometric.random_geometric_graph", "datasets.class_dist.sample", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.sample"], ["", "def", "create_network", "(", "self", ",", "n_samples", ",", "labels", ",", "seed", "=", "4423", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "pos", "=", "[", "self", ".", "sample", "(", "label", ")", "for", "label", "in", "labels", "]", "\n", "pos", "=", "dict", "(", "(", "i", ",", "pos", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "pos", ")", ")", ")", "\n", "g", "=", "random_geometric_graph", "(", "n_samples", ",", "radius", "=", "0.2", ",", "\n", "dim", "=", "self", ".", "dim", ",", "pos", "=", "pos", ")", "\n", "return", "g", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.create_random_label_network": [[102, 105], ["numpy.random.seed", "datasets.class_dist.create_network", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.create_network"], ["", "def", "create_random_label_network", "(", "self", ",", "n_samples", ",", "seed", "=", "243", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "return", "self", ".", "create_network", "(", "n_samples", ",", "randint", "(", "0", ",", "self", ".", "n_classes", ",", "n_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.show_sample_network": [[106, 114], ["numpy.random.randint", "dict", "networkx.generators.geometric.random_geometric_graph", "networkx.draw_networkx", "matplotlib.draw", "thread.start_new", "datasets.class_dist.sample", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.sample"], ["", "def", "show_sample_network", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "labels", "=", "randint", "(", "0", ",", "self", ".", "n_classes", ",", "n_samples", ")", "\n", "pos", "=", "[", "self", ".", "sample", "(", "label", ")", "for", "label", "in", "labels", "]", "\n", "pos", "=", "dict", "(", "(", "i", ",", "pos", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "pos", ")", ")", ")", "\n", "g", "=", "random_geometric_graph", "(", "n_samples", ",", "radius", "=", "0.2", ",", "dim", "=", "self", ".", "dim", ",", "pos", "=", "pos", ")", "\n", "nx", ".", "draw_networkx", "(", "g", ",", "pos", "=", "pos", ",", "node_color", "=", "labels", ",", "with_labels", "=", "False", ",", "node_size", "=", "100", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "thr", ".", "start_new", "(", "plt", ".", "show", ",", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.create_block_graph": [[59, 65], ["datasets.Blockgraph", "numpy.array"], "function", ["None"], ["", "", "def", "create_block_graph", "(", "n_samples", "=", "400", ",", "n_groups", "=", "2", ",", "intra_degree", "=", "5", ",", "\n", "inter_degree", "=", "2", ",", "n_true_rel", "=", "1", ",", "n_wrong_rel", "=", "1", ",", "seed", "=", "3", ")", ":", "\n", "    ", "b", "=", "Blockgraph", "(", "samples", "=", "n_samples", ",", "groups", "=", "n_groups", ",", "\n", "intra_degree", "=", "intra_degree", ",", "inter_degree", "=", "inter_degree", ",", "\n", "true_rel", "=", "n_true_rel", ",", "wrong_rel", "=", "n_wrong_rel", ",", "seed", "=", "seed", ")", "\n", "return", "[", "np", ".", "array", "(", "r", ")", "for", "r", "in", "b", ".", "relations", "]", ",", "b", ".", "features", ",", "b", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.create_class_dist_sample": [[116, 138], ["numpy.random.seed", "numpy.random.randint", "range", "range", "numpy.zeros", "datasets.class_dist.create_network", "rel.append", "datasets.class_dist.create_random_label_network", "rel.append", "datasets.class_dist", "numpy.vstack", "datasets.class_dist", "numpy.vstack", "numpy.hstack", "pandas.DataFrame", "pandas.DataFrame", "datasets.class_dist", "datasets.class_dist", "datasets.class_dist.sample", "datasets.class_dist.sample", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.create_network", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.create_random_label_network", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.sample", "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.class_dist.sample"], ["", "", "def", "create_class_dist_sample", "(", "n_samples", "=", "400", ",", "n_classes", "=", "2", ",", "n_rel_true", "=", "2", ",", "n_rel_false", "=", "2", ",", "n_feat_true", "=", "2", ",", "n_feat_false", "=", "2", ",", "dim", "=", "2", ",", "n_clusters_per_class", "=", "4", ",", "seed", "=", "34", ")", ":", "\n", "    ", "s", "=", "seed", "\n", "np", ".", "random", ".", "seed", "(", "s", ")", "\n", "rel", "=", "[", "]", "\n", "labels", "=", "randint", "(", "0", ",", "n_classes", ",", "n_samples", ")", "\n", "for", "_", "in", "range", "(", "n_rel_true", ")", ":", "\n", "        ", "r", ",", "_", "=", "class_dist", "(", "n_classes", "=", "n_classes", ",", "dim", "=", "dim", ",", "n_clusters_per_class", "=", "n_clusters_per_class", ")", ".", "create_network", "(", "n_samples", ",", "labels", ",", "seed", "=", "s", ")", "\n", "rel", ".", "append", "(", "r", ")", "\n", "s", "=", "s", "+", "1", "\n", "", "for", "_", "in", "range", "(", "n_rel_false", ")", ":", "\n", "        ", "r", ",", "_", "=", "class_dist", "(", "n_classes", "=", "n_classes", ",", "dim", "=", "dim", ",", "n_clusters_per_class", "=", "n_clusters_per_class", ")", ".", "create_random_label_network", "(", "n_samples", ",", "seed", "=", "s", ")", "\n", "rel", ".", "append", "(", "r", ")", "\n", "s", "=", "s", "+", "1", "\n", "", "features", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_samples", ",", "0", ")", ")", "\n", "if", "n_feat_true", ">", "0", ":", "\n", "        ", "cd", "=", "class_dist", "(", "n_classes", "=", "n_classes", ",", "dim", "=", "dim", ",", "n_clusters_per_class", "=", "n_clusters_per_class", ")", "\n", "features", "=", "np", ".", "vstack", "(", "[", "cd", ".", "sample", "(", "label", ")", "for", "label", "in", "labels", "]", ")", "\n", "", "if", "n_feat_false", ">", "0", ":", "\n", "        ", "cd", "=", "class_dist", "(", "n_classes", "=", "n_classes", ",", "dim", "=", "dim", ",", "n_clusters_per_class", "=", "n_clusters_per_class", ")", "\n", "f2", "=", "np", ".", "vstack", "(", "[", "cd", ".", "sample", "(", "label", ")", "for", "label", "in", "randint", "(", "0", ",", "n_classes", ",", "n_samples", ")", "]", ")", "\n", "features", "=", "np", ".", "hstack", "(", "[", "features", ",", "f2", "]", ")", "\n", "", "return", "rel", ",", "DataFrame", "(", "features", ")", ",", "DataFrame", "(", "labels", ",", "columns", "=", "[", "'labels'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.show_graph": [[139, 143], ["networkx.draw_spring", "matplotlib.draw", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.show"], ["", "def", "show_graph", "(", "net", ",", "labels", ")", ":", "\n", "    ", "nx", ".", "draw_spring", "(", "net", ",", "node_color", "=", "labels", ",", "with_labels", "=", "False", ",", "node_size", "=", "100", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.show": [[144, 146], ["datasets.show_graph", "networkx.to_networkx_graph"], "function", ["home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.show_graph"], ["", "def", "show", "(", "net", ",", "labels", ")", ":", "\n", "    ", "show_graph", "(", "nx", ".", "to_networkx_graph", "(", "net", ")", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ibayer_PAKDD2015.code.datasets.show_points": [[147, 151], ["matplotlib.plot", "matplotlib.plot", "thread.start_new"], "function", ["None"], ["", "def", "show_points", "(", "points", ",", "labels", ")", ":", "\n", "    ", "plt", ".", "plot", "(", "points", "[", "labels", "==", "0", ",", "0", "]", ",", "points", "[", "labels", "==", "0", ",", "1", "]", ",", "'rx'", ")", "\n", "plt", ".", "plot", "(", "points", "[", "labels", "==", "1", ",", "0", "]", ",", "points", "[", "labels", "==", "1", ",", "1", "]", ",", "'b.'", ")", "\n", "thr", ".", "start_new", "(", "plt", ".", "show", ",", "(", ")", ")", "\n", "", ""]]}