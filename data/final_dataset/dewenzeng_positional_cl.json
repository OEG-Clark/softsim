{"home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.__init__": [[8, 12], ["threading.Lock", "metrics.SegmentationMetric.reset"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "nclass", ")", ":", "\n", "        ", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.update": [[13, 39], ["isinstance", "metrics.batch_pix_accuracy", "metrics.batch_intersection_union", "metrics.SegmentationMetric.update.evaluate_worker"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.batch_pix_accuracy", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.batch_intersection_union"], ["", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "        ", "def", "evaluate_worker", "(", "self", ",", "label", ",", "pred", ")", ":", "\n", "            ", "correct", ",", "labeled", "=", "batch_pix_accuracy", "(", "\n", "pred", ",", "label", ")", "\n", "inter", ",", "union", "=", "batch_intersection_union", "(", "\n", "pred", ",", "label", ",", "self", ".", "nclass", ")", "\n", "with", "self", ".", "lock", ":", "\n", "                ", "self", ".", "total_correct", "+=", "correct", "\n", "self", ".", "total_label", "+=", "labeled", "\n", "self", ".", "total_inter", "+=", "inter", "\n", "self", ".", "total_union", "+=", "union", "\n", "", "return", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "evaluate_worker", "(", "self", ",", "labels", ",", "preds", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "evaluate_worker", ",", "\n", "args", "=", "(", "self", ",", "label", ",", "pred", ")", ",", "\n", ")", "\n", "for", "(", "label", ",", "pred", ")", "in", "zip", "(", "labels", ",", "preds", ")", "]", "\n", "for", "thread", "in", "threads", ":", "\n", "                ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "                ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get": [[40, 50], ["IoU.mean", "Dice.mean.mean.mean", "numpy.spacing", "numpy.spacing", "numpy.spacing"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "mode", "=", "'mean'", ")", ":", "\n", "        ", "pixAcc", "=", "1.0", "*", "self", ".", "total_correct", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "self", ".", "total_label", ")", "\n", "IoU", "=", "1.0", "*", "self", ".", "total_inter", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "self", ".", "total_union", ")", "\n", "Dice", "=", "2.0", "*", "self", ".", "total_inter", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "self", ".", "total_union", "+", "self", ".", "total_inter", ")", "\n", "if", "mode", "==", "'mean'", ":", "\n", "            ", "mIoU", "=", "IoU", ".", "mean", "(", ")", "\n", "Dice", "=", "Dice", ".", "mean", "(", ")", "\n", "return", "pixAcc", ",", "mIoU", ",", "Dice", "\n", "", "else", ":", "\n", "            ", "return", "pixAcc", ",", "IoU", ",", "Dice", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.reset": [[51, 57], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_inter", "=", "0", "\n", "self", ".", "total_union", "=", "0", "\n", "self", ".", "total_correct", "=", "0", "\n", "self", ".", "total_label", "=", "0", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.batch_pix_accuracy": [[58, 78], ["torch.argmax", "torch.argmax", "numpy.sum", "numpy.sum", "torch.argmax.cpu().numpy().astype", "target.cpu().numpy().astype", "torch.argmax.cpu().numpy", "target.cpu().numpy", "torch.argmax.cpu", "target.cpu"], "function", ["None"], ["", "", "def", "batch_pix_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"Batch Pixel Accuracy\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n    \"\"\"", "\n", "# predict = torch.max(output, 1)[1]", "\n", "predict", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "# predict = output", "\n", "\n", "# label: 0, 1, ..., nclass - 1", "\n", "# Note: 0 is background", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "target", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", ">", "0", ")", ")", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.batch_intersection_union": [[79, 108], ["predict.cpu().numpy().astype.cpu().numpy().astype", "target.cpu().numpy().astype.cpu().numpy().astype", "numpy.histogram", "numpy.histogram", "numpy.histogram", "torch.max", "torch.max", "predict.cpu().numpy().astype.cpu().numpy", "target.cpu().numpy().astype.cpu().numpy", "predict.cpu().numpy().astype.cpu", "target.cpu().numpy().astype.cpu"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "output", ",", "target", ",", "nclass", ")", ":", "#\u53ea\u533a\u5206\u80cc\u666f\u548c\u5668\u5b98: nclass = 2", "\n", "    ", "\"\"\"Batch Intersection of Union\n    Args:\n        predict: input 4D tensor                      #model\u7684\u8f93\u51fa\n        target: label 3D Tensor                       #label\n        nclass: number of categories (int)            #\u53ea\u533a\u5206\u80cc\u666f\u548c\u5668\u5b98: nclass = 2\n    \"\"\"", "\n", "predict", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "1", ")", "[", "1", "]", "#\u83b7\u5f97\u4e86\u9884\u6d4b\u7ed3\u679c", "\n", "# predict = output", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "-", "1", "#nclass = 2, maxi=1", "\n", "nbins", "=", "nclass", "-", "1", "#nclass = 2, nbins=1", "\n", "\n", "# label is: 0, 1, 2, ..., nclass-1", "\n", "# Note: 0 is background", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "\n", "\n", "predict", "=", "predict", "*", "(", "target", ">=", "0", ")", ".", "astype", "(", "predict", ".", "dtype", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", "# \u5f97\u5230TP\u548cTN", "\n", "\n", "# areas of intersection and union", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "#\u7edf\u8ba1(TP\u3001TN)\u503c\u4e3a1\u7684\u50cf\u7d20\u4e2a\u6570\uff0c\u83b7\u5f97TN", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "predict", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "#\u7edf\u8ba1predict\u4e2d\u503c\u4e3a1\u7684\u50cf\u7d20\u4e2a\u6570\uff0c\u83b7\u5f97TN+FN", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "#\u7edf\u8ba1target\u4e2d\u503c\u4e3a1\u7684\u50cf\u7d20\u4e2a\u6570\uff0c\u83b7\u5f97TN+FP", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "#area_union:TN+FN+FP", "\n", "assert", "(", "area_inter", "<=", "area_union", ")", ".", "all", "(", ")", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.pixel_accuracy": [[110, 121], ["numpy.asarray", "numpy.asarray", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "pixel_accuracy", "(", "im_pred", ",", "im_lab", ")", ":", "\n", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "\n", "# Remove classes from unlabeled pixels in gt image. ", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "im_lab", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "im_pred", "==", "im_lab", ")", "*", "(", "im_lab", ">", "0", ")", ")", "\n", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.intersection_and_union": [[122, 138], ["numpy.asarray", "numpy.asarray", "numpy.histogram", "numpy.histogram", "numpy.histogram"], "function", ["None"], ["", "def", "intersection_and_union", "(", "im_pred", ",", "im_lab", ",", "num_class", ")", ":", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "# Remove classes from unlabeled pixels in gt image. ", "\n", "im_pred", "=", "im_pred", "*", "(", "im_lab", ">", "0", ")", "\n", "# Compute area intersection:", "\n", "intersection", "=", "im_pred", "*", "(", "im_pred", "==", "im_lab", ")", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "# Compute area union: ", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "im_pred", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "im_lab", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics._fast_hist": [[139, 145], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["", "def", "_fast_hist", "(", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ",", "minlength", "=", "n_class", "**", "2", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.label_accuracy_score": [[146, 164], ["numpy.zeros", "zip", "numpy.nanmean", "numpy.nanmean", "metrics._fast_hist", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "lt.flatten", "lp.flatten", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics._fast_hist"], ["", "def", "label_accuracy_score", "(", "label_trues", ",", "label_preds", ",", "n_class", ")", ":", "\n", "    ", "\"\"\"Returns accuracy score evaluation result.\n      - overall accuracy\n      - mean accuracy\n      - mean IU\n      - fwavacc\n    \"\"\"", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "n_class", ",", "n_class", ")", ")", "\n", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "hist", "+=", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "n_class", ")", "\n", "", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "return", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.rel_abs_vol_diff": [[165, 168], ["numpy.abs", "y_pred.sum", "y_true.sum"], "function", ["None"], ["", "def", "rel_abs_vol_diff", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "    ", "return", "np", ".", "abs", "(", "(", "y_pred", ".", "sum", "(", ")", "/", "y_true", ".", "sum", "(", ")", "-", "1", ")", "*", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.get_boundary": [[169, 175], ["numpy.zeros_like", "range", "np.zeros_like.astype", "numpy.roll"], "function", ["None"], ["", "def", "get_boundary", "(", "data", ",", "img_dim", "=", "2", ",", "shift", "=", "-", "1", ")", ":", "\n", "    ", "data", "=", "data", ">", "0", "\n", "edge", "=", "np", ".", "zeros_like", "(", "data", ")", "\n", "for", "nn", "in", "range", "(", "img_dim", ")", ":", "\n", "        ", "edge", "+=", "~", "(", "data", "^", "np", ".", "roll", "(", "~", "data", ",", "shift", "=", "shift", ",", "axis", "=", "nn", ")", ")", "\n", "", "return", "edge", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.numpy_dice": [[176, 179], ["intersection.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "numpy_dice", "(", "y_true", ",", "y_pred", ",", "axis", "=", "None", ",", "smooth", "=", "1.0", ")", ":", "\n", "    ", "intersection", "=", "y_true", "*", "y_pred", "\n", "return", "(", "2.", "*", "intersection", ".", "sum", "(", "axis", "=", "axis", ")", "+", "smooth", ")", "/", "(", "np", ".", "sum", "(", "y_true", ",", "axis", "=", "axis", ")", "+", "np", ".", "sum", "(", "y_pred", ",", "axis", "=", "axis", ")", "+", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.dice_coefficient": [[180, 204], ["torch.softmax", "encoded_target.float.scatter_", "encoded_target.float.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "dice.mean().mean", "F.softmax.detach", "target.unsqueeze", "dice.mean"], "function", ["None"], ["", "def", "dice_coefficient", "(", "input", ",", "target", ",", "smooth", "=", "1.0", ")", ":", "\n", "    ", "assert", "smooth", ">", "0", ",", "'Smooth must be greater than 0.'", "\n", "\n", "probs", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "\n", "encoded_target", "=", "probs", ".", "detach", "(", ")", "*", "0", "\n", "encoded_target", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "encoded_target", "=", "encoded_target", ".", "float", "(", ")", "\n", "\n", "num", "=", "probs", "*", "encoded_target", "# b, c, h, w -- p*g", "\n", "num", "=", "torch", ".", "sum", "(", "num", ",", "dim", "=", "3", ")", "# b, c, h", "\n", "num", "=", "torch", ".", "sum", "(", "num", ",", "dim", "=", "2", ")", "# b, c", "\n", "\n", "den1", "=", "probs", "*", "probs", "# b, c, h, w -- p^2", "\n", "den1", "=", "torch", ".", "sum", "(", "den1", ",", "dim", "=", "3", ")", "# b, c, h", "\n", "den1", "=", "torch", ".", "sum", "(", "den1", ",", "dim", "=", "2", ")", "# b, c", "\n", "\n", "den2", "=", "encoded_target", "*", "encoded_target", "# b, c, h, w -- g^2", "\n", "den2", "=", "torch", ".", "sum", "(", "den2", ",", "dim", "=", "3", ")", "# b, c, h", "\n", "den2", "=", "torch", ".", "sum", "(", "den2", ",", "dim", "=", "2", ")", "# b, c", "\n", "\n", "dice", "=", "(", "2", "*", "num", "+", "smooth", ")", "/", "(", "den1", "+", "den2", "+", "smooth", ")", "# b, c", "\n", "\n", "return", "dice", ".", "mean", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.dice_iou_pytorch": [[205, 232], ["outputs.squeeze().float.squeeze().float", "labels.squeeze().float.squeeze().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "range", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "intersection.float().sum.float().sum", "outputs.squeeze().float.squeeze", "labels.squeeze().float.squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.eq.float().sum", "torch.eq.float().sum", "intersection.float().sum.float", "torch.eq.float", "torch.eq.float"], "function", ["None"], ["", "def", "dice_iou_pytorch", "(", "outputs", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "Tensor", ",", "N_class", ")", ":", "\n", "    ", "SMOOTH", "=", "1e-5", "\n", "# You can comment out this line if you are passing tensors of equal shape", "\n", "# But if you are passing output from UNet or something it will most probably", "\n", "# be with the BATCH x 1 x H x W shape", "\n", "outputs", "=", "outputs", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "labels", "=", "labels", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "dice", "=", "torch", ".", "ones", "(", "N_class", "-", "1", ")", ".", "float", "(", ")", "\n", "iou", "=", "torch", ".", "ones", "(", "N_class", "-", "1", ")", ".", "float", "(", ")", "\n", "## for test", "\n", "#outputs = torch.tensor([[1,1],[3,3]]).float()", "\n", "#labels = torch.tensor([[0, 1], [2, 3]]).float()", "\n", "\n", "for", "iter", "in", "range", "(", "1", ",", "N_class", ")", ":", "## ignore the background", "\n", "        ", "predict_temp", "=", "torch", ".", "eq", "(", "outputs", ",", "iter", ")", "\n", "label_temp", "=", "torch", ".", "eq", "(", "labels", ",", "iter", ")", "\n", "intersection", "=", "predict_temp", "&", "label_temp", "\n", "intersection", "=", "intersection", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "union_dice", "=", "(", "predict_temp", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "+", "label_temp", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ")", "\n", "union_iou", "=", "(", "predict_temp", "|", "label_temp", ")", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "# if intersection>0 and union>0:", "\n", "#     dice_temp = (2*intersection)/(union)", "\n", "# else:", "\n", "#     dice_temp = 0", "\n", "dice", "[", "iter", "-", "1", "]", "=", "(", "(", "2", "*", "intersection", "+", "SMOOTH", ")", "/", "(", "union_dice", "+", "SMOOTH", ")", ")", ".", "mean", "(", ")", "\n", "iou", "[", "iter", "-", "1", "]", "=", "(", "(", "intersection", "+", "SMOOTH", ")", "/", "(", "union_iou", "+", "SMOOTH", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "dice", ",", "iou", "# Or thresholded.mean()", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.__init__": [[9, 13], ["os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "saveDir", ",", "fileName", ",", "ShowTerminal", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "saveFile", "=", "os", ".", "path", ".", "join", "(", "saveDir", ",", "fileName", "+", "\".txt\"", ")", "\n", "self", ".", "ShowTerminal", "=", "ShowTerminal", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print": [[14, 21], ["open", "open.writelines", "open.close", "experiment_log.PytorchExperimentLogger.print"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "def", "print", "(", "self", ",", "strT", ")", ":", "\n", "#", "\n", "        ", "if", "self", ".", "ShowTerminal", ":", "\n", "            ", "print", "(", "strT", ")", "\n", "", "f", "=", "open", "(", "self", ".", "saveFile", ",", "'a'", ")", "\n", "f", ".", "writelines", "(", "strT", "+", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.lr_scheduler.LR_Scheduler.__init__": [[32, 45], ["print"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["def", "__init__", "(", "self", ",", "mode", ",", "base_lr", ",", "num_epochs", ",", "iters_per_epoch", "=", "0", ",", "\n", "lr_step", "=", "0", ",", "warmup_epochs", "=", "0", ",", "min_lr", "=", "None", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "print", "(", "'Using {} LR Scheduler!'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "self", ".", "lr", "=", "base_lr", "\n", "if", "mode", "==", "'step'", ":", "\n", "            ", "assert", "lr_step", "\n", "", "self", ".", "lr_step", "=", "lr_step", "\n", "self", ".", "iters_per_epoch", "=", "iters_per_epoch", "\n", "self", ".", "N", "=", "num_epochs", "*", "iters_per_epoch", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "warmup_iters", "=", "warmup_epochs", "*", "iters_per_epoch", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.lr_scheduler.LR_Scheduler.__call__": [[46, 68], ["lr_scheduler.LR_Scheduler._adjust_learning_rate", "math.cos", "pow"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.lr_scheduler.LR_Scheduler._adjust_learning_rate"], ["", "def", "__call__", "(", "self", ",", "optimizer", ",", "i", ",", "epoch", ")", ":", "\n", "        ", "T", "=", "epoch", "*", "self", ".", "iters_per_epoch", "+", "i", "\n", "if", "self", ".", "mode", "==", "'cos'", ":", "\n", "            ", "lr", "=", "0.5", "*", "self", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "1.0", "*", "T", "/", "self", ".", "N", "*", "math", ".", "pi", ")", ")", "\n", "", "elif", "self", ".", "mode", "==", "'poly'", ":", "\n", "            ", "lr", "=", "self", ".", "lr", "*", "pow", "(", "(", "1", "-", "1.0", "*", "T", "/", "self", ".", "N", ")", ",", "0.9", ")", "\n", "", "elif", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "lr", "=", "self", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "self", ".", "lr_step", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "# warm up lr schedule", "\n", "", "if", "self", ".", "min_lr", "is", "not", "None", ":", "\n", "            ", "if", "lr", "<", "self", ".", "min_lr", ":", "\n", "                ", "lr", "=", "self", ".", "min_lr", "\n", "", "", "if", "self", ".", "warmup_iters", ">", "0", "and", "T", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "lr", "=", "lr", "*", "1.0", "*", "T", "/", "self", ".", "warmup_iters", "\n", "", "if", "epoch", ">", "self", ".", "epoch", ":", "\n", "# print('=>Epoches %i, learning rate = %.4f' % (epoch, lr))", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "", "assert", "lr", ">=", "0", "\n", "self", ".", "_adjust_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.lr_scheduler.LR_Scheduler._adjust_learning_rate": [[69, 77], ["len", "range", "len"], "methods", ["None"], ["", "def", "_adjust_learning_rate", "(", "self", ",", "optimizer", ",", "lr", ")", ":", "\n", "        ", "if", "len", "(", "optimizer", ".", "param_groups", ")", "==", "1", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "else", ":", "\n", "# enlarge the lr at the head", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "optimizer", ".", "param_groups", ")", ")", ":", "\n", "                ", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.myconfig.save_args": [[51, 55], ["defaults.iteritems", "setattr"], "function", ["None"], ["def", "save_args", "(", "obj", ",", "defaults", ",", "kwargs", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "defaults", ".", "iteritems", "(", ")", ":", "\n", "        ", "if", "k", "in", "kwargs", ":", "v", "=", "kwargs", "[", "k", "]", "\n", "setattr", "(", "obj", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.myconfig.get_config": [[56, 61], ["parser.parse_args", "os.path.expanduser", "tuple"], "function", ["None"], ["", "", "def", "get_config", "(", ")", ":", "\n", "    ", "config", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", ".", "data_dir", "=", "os", ".", "path", ".", "expanduser", "(", "config", ".", "data_dir", ")", "\n", "config", ".", "patch_size", "=", "tuple", "(", "config", ".", "patch_size", ")", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.__init__": [[79, 81], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.reset": [[82, 87], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.update": [[88, 93], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_split_chd": [[9, 26], ["numpy.arange", "os.listdir", "os.listdir.sort", "sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "enumerate", "int"], "function", ["None"], ["def", "get_split_chd", "(", "data_dir", ",", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "all_keys", "=", "np", ".", "arange", "(", "0", ",", "68", ")", "\n", "cases", "=", "os", ".", "listdir", "(", "data_dir", ")", "\n", "cases", ".", "sort", "(", ")", "\n", "i", "=", "0", "\n", "for", "case", "in", "cases", ":", "\n", "      ", "all_keys", "[", "i", "]", "=", "int", "(", "case", "[", "-", "4", ":", "]", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_split_mmwhs": [[27, 38], ["numpy.arange", "sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "enumerate"], "function", ["None"], ["", "def", "get_split_mmwhs", "(", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "all_keys", "=", "np", ".", "arange", "(", "1001", ",", "1021", ")", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_split_acdc": [[39, 50], ["sklearn.model_selection.KFold", "numpy.arange", "sklearn.model_selection.KFold.split", "enumerate"], "function", ["None"], ["", "def", "get_split_acdc", "(", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "all_keys", "=", "np", ".", "arange", "(", "1", ",", "101", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_split_hvsmr": [[51, 62], ["sklearn.model_selection.KFold", "numpy.arange", "sklearn.model_selection.KFold.split", "enumerate"], "function", ["None"], ["", "def", "get_split_hvsmr", "(", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "all_keys", "=", "np", ".", "arange", "(", "0", ",", "10", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.soft_dice": [[63, 75], ["tuple", "torch.zeros().to", "torch.zeros().to.scatter_", "y_pred.sum", "torch.zeros().to.sum", "dice_scores[].mean", "list", "torch.zeros", "range", "len", "y_pred.size"], "function", ["None"], ["", "def", "soft_dice", "(", "y_pred", ",", "y_true", ")", ":", "\n", "# sum over axes", "\n", "    ", "axes", "=", "tuple", "(", "[", "0", "]", "+", "list", "(", "range", "(", "2", ",", "len", "(", "y_pred", ".", "size", "(", ")", ")", ")", ")", ")", "\n", "# y_pred is softmax output of shape (num_samples, num_classes)", "\n", "# y_true is the label that should be converted to one hot encoding of target (shape= (num_samples, num_classes))", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "y_pred", ".", "shape", ")", ".", "to", "(", "y_pred", ".", "device", ")", "\n", "y_onehot", ".", "scatter_", "(", "1", ",", "y_true", ",", "1", ")", "\n", "intersect", "=", "(", "y_pred", "*", "y_onehot", ")", ".", "sum", "(", "dim", "=", "axes", ")", "\n", "denominator", "=", "y_pred", ".", "sum", "(", "dim", "=", "axes", ")", "+", "y_onehot", ".", "sum", "(", "dim", "=", "axes", ")", "\n", "dice_scores", "=", "2", "*", "intersect", "/", "(", "denominator", "+", "1e-6", ")", "\n", "# we do not count for background dice though", "\n", "return", "-", "1", "*", "dice_scores", "[", "1", ":", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.pad_nd_image": [[94, 161], ["numpy.array", "isinstance", "len", "len", "max", "isinstance", "numpy.array", "range", "numpy.array", "list", "numpy.pad", "numpy.array", "list", "range", "isinstance", "len", "all", "all", "numpy.array", "len", "len", "len", "len", "list", "slice", "len", "range", "zip", "len", "len"], "function", ["None"], ["", "", "def", "pad_nd_image", "(", "image", ",", "new_shape", "=", "None", ",", "mode", "=", "\"constant\"", ",", "kwargs", "=", "None", ",", "return_slicer", "=", "False", ",", "shape_must_be_divisible_by", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    one padder to pad them all. Documentation? Well okay. A little bit\n\n    :param image: nd image. can be anything\n    :param new_shape: what shape do you want? new_shape does not have to have the same dimensionality as image. If\n    len(new_shape) < len(image.shape) then the last axes of image will be padded. If new_shape < image.shape in any of\n    the axes then we will not pad that axis, but also not crop! (interpret new_shape as new_min_shape)\n    Example:\n    image.shape = (10, 1, 512, 512); new_shape = (768, 768) -> result: (10, 1, 768, 768). Cool, huh?\n    image.shape = (10, 1, 512, 512); new_shape = (364, 768) -> result: (10, 1, 512, 768).\n\n    :param mode: see np.pad for documentation\n    :param return_slicer: if True then this function will also return what coords you will need to use when cropping back\n    to original shape\n    :param shape_must_be_divisible_by: for network prediction. After applying new_shape, make sure the new shape is\n    divisibly by that number (can also be a list with an entry for each axis). Whatever is missing to match that will\n    be padded (so the result may be larger than new_shape if shape_must_be_divisible_by is not None)\n    :param kwargs: see np.pad for documentation\n    \"\"\"", "\n", "if", "kwargs", "is", "None", ":", "\n", "        ", "kwargs", "=", "{", "'constant_values'", ":", "0", "}", "\n", "\n", "", "if", "new_shape", "is", "not", "None", ":", "\n", "        ", "old_shape", "=", "np", ".", "array", "(", "image", ".", "shape", "[", "-", "len", "(", "new_shape", ")", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "assert", "shape_must_be_divisible_by", "is", "not", "None", "\n", "assert", "isinstance", "(", "shape_must_be_divisible_by", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", "\n", "new_shape", "=", "image", ".", "shape", "[", "-", "len", "(", "shape_must_be_divisible_by", ")", ":", "]", "\n", "old_shape", "=", "new_shape", "\n", "\n", "", "num_axes_nopad", "=", "len", "(", "image", ".", "shape", ")", "-", "len", "(", "new_shape", ")", "\n", "\n", "new_shape", "=", "[", "max", "(", "new_shape", "[", "i", "]", ",", "old_shape", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "new_shape", ")", ")", "]", "\n", "\n", "if", "not", "isinstance", "(", "new_shape", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "new_shape", "=", "np", ".", "array", "(", "new_shape", ")", "\n", "\n", "", "if", "shape_must_be_divisible_by", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "shape_must_be_divisible_by", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "shape_must_be_divisible_by", "=", "[", "shape_must_be_divisible_by", "]", "*", "len", "(", "new_shape", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "shape_must_be_divisible_by", ")", "==", "len", "(", "new_shape", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "new_shape", ")", ")", ":", "\n", "            ", "if", "new_shape", "[", "i", "]", "%", "shape_must_be_divisible_by", "[", "i", "]", "==", "0", ":", "\n", "                ", "new_shape", "[", "i", "]", "-=", "shape_must_be_divisible_by", "[", "i", "]", "\n", "\n", "", "", "new_shape", "=", "np", ".", "array", "(", "[", "new_shape", "[", "i", "]", "+", "shape_must_be_divisible_by", "[", "i", "]", "-", "new_shape", "[", "i", "]", "%", "shape_must_be_divisible_by", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "new_shape", ")", ")", "]", ")", "\n", "\n", "", "difference", "=", "new_shape", "-", "old_shape", "\n", "pad_below", "=", "difference", "//", "2", "\n", "pad_above", "=", "difference", "//", "2", "+", "difference", "%", "2", "\n", "pad_list", "=", "[", "[", "0", ",", "0", "]", "]", "*", "num_axes_nopad", "+", "list", "(", "[", "list", "(", "i", ")", "for", "i", "in", "zip", "(", "pad_below", ",", "pad_above", ")", "]", ")", "\n", "\n", "if", "not", "(", "(", "all", "(", "[", "i", "==", "0", "for", "i", "in", "pad_below", "]", ")", ")", "and", "(", "all", "(", "[", "i", "==", "0", "for", "i", "in", "pad_above", "]", ")", ")", ")", ":", "\n", "        ", "res", "=", "np", ".", "pad", "(", "image", ",", "pad_list", ",", "mode", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "res", "=", "image", "\n", "\n", "", "if", "not", "return_slicer", ":", "\n", "        ", "return", "res", "\n", "", "else", ":", "\n", "        ", "pad_list", "=", "np", ".", "array", "(", "pad_list", ")", "\n", "pad_list", "[", ":", ",", "1", "]", "=", "np", ".", "array", "(", "res", ".", "shape", ")", "-", "pad_list", "[", ":", ",", "1", "]", "\n", "slicer", "=", "list", "(", "slice", "(", "*", "i", ")", "for", "i", "in", "pad_list", ")", "\n", "return", "res", ",", "slicer", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.compute_steps_for_sliding_window": [[162, 187], ["range", "len", "steps.append", "zip", "int", "zip", "int", "numpy.ceil", "numpy.round", "range"], "function", ["None"], ["", "", "def", "compute_steps_for_sliding_window", "(", "patch_size", ":", "Tuple", "[", "int", ",", "...", "]", ",", "image_size", ":", "Tuple", "[", "int", ",", "...", "]", ",", "step_size", ":", "float", ")", "->", "List", "[", "List", "[", "int", "]", "]", ":", "\n", "    ", "assert", "[", "i", ">=", "j", "for", "i", ",", "j", "in", "zip", "(", "image_size", ",", "patch_size", ")", "]", ",", "\"image size must be as large or larger than patch_size\"", "\n", "assert", "0", "<", "step_size", "<=", "1", ",", "'step_size must be larger than 0 and smaller or equal to 1'", "\n", "\n", "# our step width is patch_size*step_size at most, but can be narrower. For example if we have image size of", "\n", "# 110, patch size of 32 and step_size of 0.5, then we want to make 4 steps starting at coordinate 0, 27, 55, 78", "\n", "target_step_sizes_in_voxels", "=", "[", "i", "*", "step_size", "for", "i", "in", "patch_size", "]", "\n", "\n", "num_steps", "=", "[", "int", "(", "np", ".", "ceil", "(", "(", "i", "-", "k", ")", "/", "j", ")", ")", "+", "1", "for", "i", ",", "j", ",", "k", "in", "zip", "(", "image_size", ",", "target_step_sizes_in_voxels", ",", "patch_size", ")", "]", "\n", "\n", "steps", "=", "[", "]", "\n", "for", "dim", "in", "range", "(", "len", "(", "patch_size", ")", ")", ":", "\n", "# the highest step value for this dimension is", "\n", "        ", "max_step_value", "=", "image_size", "[", "dim", "]", "-", "patch_size", "[", "dim", "]", "\n", "if", "num_steps", "[", "dim", "]", ">", "1", ":", "\n", "            ", "actual_step_size", "=", "max_step_value", "/", "(", "num_steps", "[", "dim", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "actual_step_size", "=", "99999999999", "# does not matter because there is only one step at 0", "\n", "\n", "", "steps_here", "=", "[", "int", "(", "np", ".", "round", "(", "actual_step_size", "*", "i", ")", ")", "for", "i", "in", "range", "(", "num_steps", "[", "dim", "]", ")", "]", "\n", "\n", "steps", ".", "append", "(", "steps_here", ")", "\n", "\n", "", "return", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_gaussian": [[188, 202], ["numpy.zeros", "scipy.ndimage.filters.gaussian_filter", "gaussian_importance_map.astype.astype", "numpy.min", "tuple", "numpy.max"], "function", ["None"], ["", "def", "get_gaussian", "(", "patch_size", ",", "sigma_scale", "=", "1.", "/", "8", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "tmp", "=", "np", ".", "zeros", "(", "patch_size", ")", "\n", "center_coords", "=", "[", "i", "//", "2", "for", "i", "in", "patch_size", "]", "\n", "sigmas", "=", "[", "i", "*", "sigma_scale", "for", "i", "in", "patch_size", "]", "\n", "tmp", "[", "tuple", "(", "center_coords", ")", "]", "=", "1", "\n", "gaussian_importance_map", "=", "gaussian_filter", "(", "tmp", ",", "sigmas", ",", "0", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ")", "\n", "gaussian_importance_map", "=", "gaussian_importance_map", "/", "np", ".", "max", "(", "gaussian_importance_map", ")", "*", "1", "\n", "gaussian_importance_map", "=", "gaussian_importance_map", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# gaussian_importance_map cannot be 0, otherwise we may end up with nans!", "\n", "gaussian_importance_map", "[", "gaussian_importance_map", "==", "0", "]", "=", "np", ".", "min", "(", "\n", "gaussian_importance_map", "[", "gaussian_importance_map", "!=", "0", "]", ")", "\n", "\n", "return", "gaussian_importance_map", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_supervised.run": [[21, 122], ["maybe_mkdir_p", "experiment_log.PytorchExperimentLogger", "torch.device", "torch.device", "experiment_log.PytorchExperimentLogger.print", "torch.manual_seed", "torch.manual_seed", "experiment_log.PytorchExperimentLogger.print", "join", "maybe_mkdir_p", "experiment_log.PytorchExperimentLogger.print", "network.unet2d.UNet2D", "network.unet2d.UNet2D.to", "sum", "experiment_log.PytorchExperimentLogger.print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "lr_scheduler.LR_Scheduler", "range", "os.path.join", "os.path.join", "str", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "experiment_log.PytorchExperimentLogger.print", "torch.load", "torch.load", "network.unet2d.UNet2D.state_dict", "model.state_dict.update", "network.unet2d.UNet2D.load_state_dict", "utils.get_split_chd", "experiment_log.PytorchExperimentLogger.print", "experiment_log.PytorchExperimentLogger.print", "dataset.chd.CHD", "dataset.chd.CHD", "filter", "len", "train_supervised.train", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cuda.is_available", "torch.cuda.is_available", "str", "l.nelement", "os.path.join", "random.seed", "random.sample", "utils.get_split_mmwhs", "experiment_log.PytorchExperimentLogger.print", "dataset.mmwhs.MMWHS", "experiment_log.PytorchExperimentLogger.print", "dataset.mmwhs.MMWHS", "network.unet2d.UNet2D.parameters", "train_supervised.validate", "experiment_log.PytorchExperimentLogger.print", "writer.add_scalar", "writer.add_scalar", "torch.save", "torch.save", "str", "str", "save_model.items", "network.unet2d.UNet2D.parameters", "list", "random.seed", "random.sample", "utils.get_split_acdc", "experiment_log.PytorchExperimentLogger.print", "experiment_log.PytorchExperimentLogger.print", "dataset.acdc.ACDC", "dataset.acdc.ACDC", "str", "str", "str", "torch.save", "torch.save", "network.unet2d.UNet2D.state_dict", "os.path.join", "list", "random.seed", "random.sample", "utils.get_split_hvsmr", "experiment_log.PytorchExperimentLogger.print", "experiment_log.PytorchExperimentLogger.print", "dataset.hvsmr.HVSMR", "dataset.hvsmr.HVSMR", "network.unet2d.UNet2D.state_dict", "os.path.join", "str", "str", "list", "random.seed", "random.sample", "list"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.get_split_chd", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_contrast.train", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_split_mmwhs", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_supervised.validate", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_split_acdc", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.get_split_hvsmr", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["def", "run", "(", "fold", ",", "writer", ",", "args", ")", ":", "\n", "\n", "    ", "maybe_mkdir_p", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'cross_val_'", "+", "str", "(", "fold", ")", ")", ")", "\n", "logger", "=", "PytorchExperimentLogger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'cross_val_'", "+", "str", "(", "fold", ")", ")", ",", "\"elog\"", ",", "ShowTerminal", "=", "True", ")", "\n", "# setup cuda", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logger", ".", "print", "(", "f\"the model will run on device:{args.device}\"", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "'cuda'", "in", "str", "(", "args", ".", "device", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "logger", ".", "print", "(", "f\"starting training for cross validation fold {fold} ...\"", ")", "\n", "model_result_dir", "=", "join", "(", "args", ".", "save_path", ",", "'cross_val_'", "+", "str", "(", "fold", ")", ",", "'model'", ")", "\n", "maybe_mkdir_p", "(", "model_result_dir", ")", "\n", "args", ".", "model_result_dir", "=", "model_result_dir", "\n", "# create model", "\n", "logger", ".", "print", "(", "\"creating model ...\"", ")", "\n", "model", "=", "UNet2D", "(", "in_channels", "=", "1", ",", "initial_filter_size", "=", "args", ".", "initial_filter_size", ",", "kernel_size", "=", "3", ",", "classes", "=", "args", ".", "classes", ",", "do_instancenorm", "=", "True", ")", "\n", "if", "args", ".", "restart", ":", "\n", "        ", "logger", ".", "print", "(", "'loading from saved model '", "+", "args", ".", "pretrained_model_path", ")", "\n", "dict", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "save_model", "=", "dict", "[", "\"net\"", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# we only need to load the parameters of the encoder", "\n", "state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "save_model", ".", "items", "(", ")", "if", "\"encoder\"", "in", "k", "}", "\n", "model_dict", ".", "update", "(", "state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "num_parameters", "=", "sum", "(", "[", "l", ".", "nelement", "(", ")", "for", "l", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "logger", ".", "print", "(", "f\"number of parameters: {num_parameters}\"", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'chd'", ":", "\n", "        ", "train_keys", ",", "val_keys", "=", "get_split_chd", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'train'", ")", ",", "fold", ",", "args", ".", "cross_vali_num", ")", "\n", "# now random sample train_keys", "\n", "if", "args", ".", "enable_few_data", ":", "\n", "            ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "train_keys", "=", "random", ".", "sample", "(", "list", "(", "train_keys", ")", ",", "k", "=", "args", ".", "sampling_k", ")", "\n", "", "logger", ".", "print", "(", "f'train_keys:{train_keys}'", ")", "\n", "logger", ".", "print", "(", "f'val_keys:{val_keys}'", ")", "\n", "train_dataset", "=", "CHD", "(", "keys", "=", "train_keys", ",", "purpose", "=", "'train'", ",", "args", "=", "args", ")", "\n", "validate_dataset", "=", "CHD", "(", "keys", "=", "val_keys", ",", "purpose", "=", "'val'", ",", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'mmwhs'", ":", "\n", "        ", "train_keys", ",", "val_keys", "=", "get_split_mmwhs", "(", "fold", ",", "args", ".", "cross_vali_num", ")", "\n", "if", "args", ".", "enable_few_data", ":", "\n", "            ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "train_keys", "=", "random", ".", "sample", "(", "list", "(", "train_keys", ")", ",", "k", "=", "args", ".", "sampling_k", ")", "\n", "", "logger", ".", "print", "(", "f'train_keys:{train_keys}'", ")", "\n", "train_dataset", "=", "MMWHS", "(", "keys", "=", "train_keys", ",", "purpose", "=", "'val'", ",", "args", "=", "args", ")", "\n", "logger", ".", "print", "(", "'training data dir '", "+", "train_dataset", ".", "data_dir", ")", "\n", "validate_dataset", "=", "MMWHS", "(", "keys", "=", "val_keys", ",", "purpose", "=", "'val'", ",", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'acdc'", ":", "\n", "        ", "train_keys", ",", "val_keys", "=", "get_split_acdc", "(", "fold", ",", "args", ".", "cross_vali_num", ")", "\n", "if", "args", ".", "enable_few_data", ":", "\n", "            ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "train_keys", "=", "random", ".", "sample", "(", "list", "(", "train_keys", ")", ",", "k", "=", "args", ".", "sampling_k", ")", "\n", "", "logger", ".", "print", "(", "f'train_keys:{train_keys}'", ")", "\n", "logger", ".", "print", "(", "f'val_keys:{val_keys}'", ")", "\n", "train_dataset", "=", "ACDC", "(", "keys", "=", "train_keys", ",", "purpose", "=", "'train'", ",", "args", "=", "args", ")", "\n", "validate_dataset", "=", "ACDC", "(", "keys", "=", "val_keys", ",", "purpose", "=", "'val'", ",", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'hvsmr'", ":", "\n", "        ", "train_keys", ",", "val_keys", "=", "get_split_hvsmr", "(", "fold", ",", "args", ".", "cross_vali_num", ")", "\n", "if", "args", ".", "enable_few_data", ":", "\n", "            ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "train_keys", "=", "random", ".", "sample", "(", "list", "(", "train_keys", ")", ",", "k", "=", "args", ".", "sampling_k", ")", "\n", "", "logger", ".", "print", "(", "f'train_keys:{train_keys}'", ")", "\n", "logger", ".", "print", "(", "f'val_keys:{val_keys}'", ")", "\n", "train_dataset", "=", "HVSMR", "(", "keys", "=", "train_keys", ",", "purpose", "=", "'train'", ",", "args", "=", "args", ")", "\n", "validate_dataset", "=", "HVSMR", "(", "keys", "=", "val_keys", ",", "purpose", "=", "'val'", ",", "args", "=", "args", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_works", ",", "drop_last", "=", "False", ")", "\n", "validate_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "validate_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_works", ",", "drop_last", "=", "False", ")", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-5", ")", "\n", "scheduler", "=", "LR_Scheduler", "(", "args", ".", "lr_scheduler", ",", "args", ".", "lr", ",", "args", ".", "epochs", ",", "len", "(", "train_loader", ")", ",", "min_lr", "=", "args", ".", "min_lr", ")", "\n", "best_dice", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "# train for one epoch", "\n", "        ", "train_loss", ",", "train_dice", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "optimizer", ",", "scheduler", ",", "logger", ",", "args", ")", "\n", "writer", ".", "add_scalar", "(", "'training_loss_fold'", "+", "str", "(", "fold", ")", ",", "train_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'training_dice_fold'", "+", "str", "(", "fold", ")", ",", "train_dice", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'learning_rate_fold'", "+", "str", "(", "fold", ")", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "if", "(", "epoch", "%", "2", "==", "0", ")", ":", "\n", "# evaluate for one epoch", "\n", "            ", "val_dice", "=", "validate", "(", "validate_loader", ",", "model", ",", "epoch", ",", "logger", ",", "args", ")", "\n", "\n", "logger", ".", "print", "(", "'Epoch: {0}\\t'", "\n", "'Training Loss {train_loss:.4f} \\t'", "\n", "'Validation Dice {val_dice:.4f} \\t'", "\n", ".", "format", "(", "epoch", ",", "train_loss", "=", "train_loss", ",", "val_dice", "=", "val_dice", ")", ")", "\n", "\n", "if", "best_dice", "<", "val_dice", ":", "\n", "                ", "best_dice", "=", "val_dice", "\n", "save_dict", "=", "{", "\"net\"", ":", "model", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_result_dir", ",", "\"best.pth\"", ")", ")", "\n", "", "writer", ".", "add_scalar", "(", "'validate_dice_fold'", "+", "str", "(", "fold", ")", ",", "val_dice", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'best_dice_fold'", "+", "str", "(", "fold", ")", ",", "best_dice", ",", "epoch", ")", "\n", "# save model", "\n", "save_dict", "=", "{", "\"net\"", ":", "model", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_result_dir", ",", "\"latest.pth\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_supervised.train": [[123, 146], ["model.train", "metrics.SegmentationMetric", "metrics.SegmentationMetric.reset", "utils.AverageMeter", "enumerate", "metrics.SegmentationMetric.get", "img.float().to", "label.long().to.long().to", "scheduler", "model", "criterion", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "torch.softmax", "metrics.SegmentationMetric.update", "metrics.SegmentationMetric.get", "logger.print", "label.long().to.squeeze", "criterion.item", "img.float().to.size", "label.long().to.long().squeeze", "img.float", "label.long().to.long", "label.long().to.long", "len"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_contrast.train", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "", "", "def", "train", "(", "data_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "optimizer", ",", "scheduler", ",", "logger", ",", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "metric_val", "=", "SegmentationMetric", "(", "args", ".", "classes", ")", "\n", "metric_val", ".", "reset", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "for", "batch_idx", ",", "tup", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "img", ",", "label", "=", "tup", "\n", "image_var", "=", "img", ".", "float", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "scheduler", "(", "optimizer", ",", "batch_idx", ",", "epoch", ")", "\n", "x_out", "=", "model", "(", "image_var", ")", "\n", "loss", "=", "criterion", "(", "x_out", ",", "label", ".", "squeeze", "(", "dim", "=", "1", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image_var", ".", "size", "(", "0", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# Do softmax", "\n", "x_out", "=", "F", ".", "softmax", "(", "x_out", ",", "dim", "=", "1", ")", "\n", "metric_val", ".", "update", "(", "label", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ",", "x_out", ")", "\n", "_", ",", "_", ",", "Dice", "=", "metric_val", ".", "get", "(", ")", "\n", "logger", ".", "print", "(", "f\"Training epoch:{epoch}, batch:{batch_idx}/{len(data_loader)}, lr:{optimizer.param_groups[0]['lr']:.6f}, loss:{losses.avg:.4f}, mean Dice:{Dice:.4f}\"", ")", "\n", "", "pixAcc", ",", "mIoU", ",", "mDice", "=", "metric_val", ".", "get", "(", ")", "\n", "return", "losses", ".", "avg", ",", "mDice", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_supervised.validate": [[147, 163], ["model.eval", "metrics.SegmentationMetric", "metrics.SegmentationMetric.reset", "metrics.SegmentationMetric.get", "torch.no_grad", "torch.no_grad", "enumerate", "img.float().to", "label.long().to.long().to", "model", "torch.softmax", "metrics.SegmentationMetric.update", "metrics.SegmentationMetric.get", "logger.print", "label.long().to.long().squeeze", "img.float", "label.long().to.long", "label.long().to.long", "len"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "def", "validate", "(", "data_loader", ",", "model", ",", "epoch", ",", "logger", ",", "args", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "metric_val", "=", "SegmentationMetric", "(", "args", ".", "classes", ")", "\n", "metric_val", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "tup", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "img", ",", "label", "=", "tup", "\n", "image_var", "=", "img", ".", "float", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "x_out", "=", "model", "(", "image_var", ")", "\n", "x_out", "=", "F", ".", "softmax", "(", "x_out", ",", "dim", "=", "1", ")", "\n", "metric_val", ".", "update", "(", "label", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ",", "x_out", ")", "\n", "pixAcc", ",", "mIoU", ",", "Dice", "=", "metric_val", ".", "get", "(", ")", "\n", "logger", ".", "print", "(", "f\"Validation epoch:{epoch}, batch:{batch_idx}/{len(data_loader)}, mean Dice:{Dice}\"", ")", "\n", "", "", "pixAcc", ",", "mIoU", ",", "Dice", "=", "metric_val", ".", "get", "(", ")", "\n", "return", "Dice", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_contrast.main": [[17, 84], ["myconfig.get_config", "os.path.join", "experiment_log.PytorchExperimentLogger", "join", "maybe_mkdir_p", "experiment_log.PytorchExperimentLogger.print", "torch.utils.tensorboard.SummaryWriter", "torch.device", "experiment_log.PytorchExperimentLogger.print", "network.unet2d.UNet2D_classification", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "sum", "experiment_log.PytorchExperimentLogger.print", "torch.utils.data.DataLoader", "loss.contrast_loss.SupConLoss().to", "torch.optim.SGD", "lr_scheduler.LR_Scheduler", "range", "datetime.datetime.now().strftime", "os.path.exists", "os.makedirs", "experiment_log.PytorchExperimentLogger.print", "torch.load", "torch.nn.DataParallel.load_state_dict", "os.listdir", "os.listdir.sort", "dataset.chd.CHD", "torch.nn.DataParallel.parameters", "len", "train_contrast.train", "experiment_log.PytorchExperimentLogger.print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.save", "torch.cuda.is_available", "l.nelement", "os.path.join", "dataset.acdc.ACDC", "loss.contrast_loss.SupConLoss", "torch.nn.DataParallel.module.state_dict", "os.path.join", "datetime.datetime.now", "torch.nn.DataParallel.module.parameters", "list", "range"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.myconfig.get_config", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_contrast.train", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["def", "main", "(", ")", ":", "\n", "# initialize config", "\n", "    ", "args", "=", "get_config", "(", ")", "\n", "\n", "if", "args", ".", "save", "is", "''", ":", "\n", "        ", "args", ".", "save", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S'", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "args", ".", "experiment_name", "+", "args", ".", "save", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "logger", "=", "PytorchExperimentLogger", "(", "save_path", ",", "\"elog\"", ",", "ShowTerminal", "=", "True", ")", "\n", "model_result_dir", "=", "join", "(", "save_path", ",", "'model'", ")", "\n", "maybe_mkdir_p", "(", "model_result_dir", ")", "\n", "args", ".", "model_result_dir", "=", "model_result_dir", "\n", "\n", "logger", ".", "print", "(", "f\"saving to {save_path}\"", ")", "\n", "writer", "=", "SummaryWriter", "(", "'runs/'", "+", "args", ".", "experiment_name", "+", "args", ".", "save", ")", "\n", "\n", "# setup cuda", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "# logger.print(f\"the model will run on device {args.device}\")", "\n", "\n", "# create model", "\n", "logger", ".", "print", "(", "\"creating model ...\"", ")", "\n", "model", "=", "UNet2D_classification", "(", "in_channels", "=", "1", ",", "initial_filter_size", "=", "args", ".", "initial_filter_size", ",", "kernel_size", "=", "3", ",", "classes", "=", "args", ".", "classes", ",", "do_instancenorm", "=", "True", ")", "\n", "\n", "if", "args", ".", "restart", ":", "\n", "        ", "logger", ".", "print", "(", "'loading from saved model'", "+", "args", ".", "pretrained_model_path", ")", "\n", "dict", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "save_model", "=", "dict", "[", "\"net\"", "]", "\n", "model", ".", "load_state_dict", "(", "save_model", ")", "\n", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "num_parameters", "=", "sum", "(", "[", "l", ".", "nelement", "(", ")", "for", "l", "in", "model", ".", "module", ".", "parameters", "(", ")", "]", ")", "\n", "logger", ".", "print", "(", "f\"number of parameters: {num_parameters}\"", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'chd'", ":", "\n", "        ", "training_keys", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'train'", ")", ")", "\n", "training_keys", ".", "sort", "(", ")", "\n", "train_dataset", "=", "CHD", "(", "keys", "=", "training_keys", ",", "purpose", "=", "'train'", ",", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'acdc'", ":", "\n", "        ", "train_dataset", "=", "ACDC", "(", "keys", "=", "list", "(", "range", "(", "1", ",", "101", ")", ")", ",", "purpose", "=", "'train'", ",", "args", "=", "args", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_works", ",", "drop_last", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "criterion", "=", "SupConLoss", "(", "threshold", "=", "args", ".", "slice_threshold", ",", "temperature", "=", "args", ".", "temp", ",", "contrastive_method", "=", "args", ".", "contrastive_method", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "1e-5", ")", "\n", "scheduler", "=", "LR_Scheduler", "(", "args", ".", "lr_scheduler", ",", "args", ".", "lr", ",", "args", ".", "epochs", ",", "len", "(", "train_loader", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "# train for one epoch", "\n", "        ", "train_loss", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "optimizer", ",", "scheduler", ",", "logger", ",", "args", ")", "\n", "\n", "logger", ".", "print", "(", "'\\n Epoch: {0}\\t'", "\n", "'Training Loss {train_loss:.4f} \\t'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "train_loss", "=", "train_loss", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'training_loss'", ",", "train_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n", "# save model", "\n", "save_dict", "=", "{", "\"net\"", ":", "model", ".", "module", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "args", ".", "model_result_dir", ",", "\"latest.pth\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_contrast.train": [[85, 109], ["model.train", "utils.AverageMeter", "enumerate", "scheduler", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "model", "model", "torch.cat", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "logger.print", "criterion", "criterion.item", "torch.autograd.Variable", "torch.autograd.Variable", "model.unsqueeze", "model.unsqueeze", "criterion", "criterion", "img1.float", "img2.float", "len"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.train_contrast.train", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "", "def", "train", "(", "data_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "optimizer", ",", "scheduler", ",", "logger", ",", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "for", "batch_idx", ",", "tup", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "scheduler", "(", "optimizer", ",", "batch_idx", ",", "epoch", ")", "\n", "img1", ",", "img2", ",", "slice_position", ",", "partition", "=", "tup", "\n", "image1_var", "=", "Variable", "(", "img1", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "image2_var", "=", "Variable", "(", "img2", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "f1_1", "=", "model", "(", "image1_var", ")", "\n", "f2_1", "=", "model", "(", "image2_var", ")", "\n", "bsz", "=", "img1", ".", "shape", "[", "0", "]", "\n", "features", "=", "torch", ".", "cat", "(", "[", "f1_1", ".", "unsqueeze", "(", "1", ")", ",", "f2_1", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "args", ".", "contrastive_method", "==", "'pcl'", ":", "\n", "            ", "loss", "=", "criterion", "(", "features", ",", "labels", "=", "slice_position", ")", "\n", "", "elif", "args", ".", "contrastive_method", "==", "'gcl'", ":", "\n", "            ", "loss", "=", "criterion", "(", "features", ",", "labels", "=", "partition", ")", "\n", "", "else", ":", "# simclr", "\n", "            ", "loss", "=", "criterion", "(", "features", ")", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "logger", ".", "print", "(", "f\"epoch:{epoch}, batch:{batch_idx}/{len(data_loader)}, lr:{optimizer.param_groups[0]['lr']:.6f}, loss:{losses.avg:.4f}\"", ")", "\n", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.InitWeights_He.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "neg_slope", "=", "1e-2", ")", ":", "\n", "        ", "self", ".", "neg_slope", "=", "neg_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.InitWeights_He.__call__": [[11, 18], ["isinstance", "isinstance", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "\n", "nn", ".", "ConvTranspose2d", ")", "or", "isinstance", "(", "\n", "module", ",", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "            ", "module", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "a", "=", "self", ".", "neg_slope", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", "=", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.__init__": [[20, 46], ["torch.Module.__init__", "unet2d.encoder.contract", "unet2d.encoder.contract", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet2d.encoder.contract", "unet2d.encoder.contract", "unet2d.encoder.contract", "unet2d.encoder.contract", "unet2d.encoder.contract", "unet2d.encoder.contract", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss.__init__", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "initial_filter_size", ",", "kernel_size", ",", "do_instancenorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "contr_1_1", "=", "self", ".", "contract", "(", "in_channels", ",", "initial_filter_size", ",", "kernel_size", ",", "instancenorm", "=", "do_instancenorm", ")", "\n", "self", ".", "contr_1_2", "=", "self", ".", "contract", "(", "initial_filter_size", ",", "initial_filter_size", ",", "kernel_size", ",", "\n", "instancenorm", "=", "do_instancenorm", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "contr_2_1", "=", "self", ".", "contract", "(", "initial_filter_size", ",", "initial_filter_size", "*", "2", ",", "kernel_size", ",", "\n", "instancenorm", "=", "do_instancenorm", ")", "\n", "self", ".", "contr_2_2", "=", "self", ".", "contract", "(", "initial_filter_size", "*", "2", ",", "initial_filter_size", "*", "2", ",", "kernel_size", ",", "\n", "instancenorm", "=", "do_instancenorm", ")", "\n", "\n", "self", ".", "contr_3_1", "=", "self", ".", "contract", "(", "initial_filter_size", "*", "2", ",", "initial_filter_size", "*", "2", "**", "2", ",", "kernel_size", ",", "\n", "instancenorm", "=", "do_instancenorm", ")", "\n", "self", ".", "contr_3_2", "=", "self", ".", "contract", "(", "initial_filter_size", "*", "2", "**", "2", ",", "initial_filter_size", "*", "2", "**", "2", ",", "kernel_size", ",", "\n", "instancenorm", "=", "do_instancenorm", ")", "\n", "\n", "self", ".", "contr_4_1", "=", "self", ".", "contract", "(", "initial_filter_size", "*", "2", "**", "2", ",", "initial_filter_size", "*", "2", "**", "3", ",", "kernel_size", ",", "\n", "instancenorm", "=", "do_instancenorm", ")", "\n", "self", ".", "contr_4_2", "=", "self", ".", "contract", "(", "initial_filter_size", "*", "2", "**", "3", ",", "initial_filter_size", "*", "2", "**", "3", ",", "kernel_size", ",", "\n", "instancenorm", "=", "do_instancenorm", ")", "\n", "self", ".", "center", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "initial_filter_size", "*", "2", "**", "3", ",", "initial_filter_size", "*", "2", "**", "4", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "initial_filter_size", "*", "2", "**", "4", ",", "initial_filter_size", "*", "2", "**", "4", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.forward": [[48, 63], ["unet2d.encoder.contr_1_2", "unet2d.encoder.pool", "unet2d.encoder.contr_2_2", "unet2d.encoder.pool", "unet2d.encoder.contr_3_2", "unet2d.encoder.pool", "unet2d.encoder.contr_4_2", "unet2d.encoder.pool", "unet2d.encoder.center", "unet2d.encoder.contr_1_1", "unet2d.encoder.contr_2_1", "unet2d.encoder.contr_3_1", "unet2d.encoder.contr_4_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "contr_1", "=", "self", ".", "contr_1_2", "(", "self", ".", "contr_1_1", "(", "x", ")", ")", "\n", "pool", "=", "self", ".", "pool", "(", "contr_1", ")", "\n", "\n", "contr_2", "=", "self", ".", "contr_2_2", "(", "self", ".", "contr_2_1", "(", "pool", ")", ")", "\n", "pool", "=", "self", ".", "pool", "(", "contr_2", ")", "\n", "\n", "contr_3", "=", "self", ".", "contr_3_2", "(", "self", ".", "contr_3_1", "(", "pool", ")", ")", "\n", "pool", "=", "self", ".", "pool", "(", "contr_3", ")", "\n", "\n", "contr_4", "=", "self", ".", "contr_4_2", "(", "self", ".", "contr_4_1", "(", "pool", ")", ")", "\n", "pool", "=", "self", ".", "pool", "(", "contr_4", ")", "\n", "\n", "out", "=", "self", ".", "center", "(", "pool", ")", "\n", "return", "out", ",", "contr_4", ",", "contr_3", ",", "contr_2", ",", "contr_1", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.encoder.contract": [[64, 76], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "contract", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "instancenorm", "=", "True", ")", ":", "\n", "        ", "if", "instancenorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.__init__": [[78, 101], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet2d.decoder.expand", "unet2d.decoder.expand", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet2d.decoder.expand", "unet2d.decoder.expand", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet2d.decoder.expand", "unet2d.decoder.expand", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet2d.decoder.expand", "unet2d.decoder.expand", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss.__init__", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand"], ["    ", "def", "__init__", "(", "self", ",", "initial_filter_size", ",", "classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# self.concat_weight = torch.nn.Parameter(torch.FloatTensor(1), requires_grad=True)", "\n", "self", ".", "upscale5", "=", "nn", ".", "ConvTranspose2d", "(", "initial_filter_size", "*", "2", "**", "4", ",", "initial_filter_size", "*", "2", "**", "3", ",", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "expand_4_1", "=", "self", ".", "expand", "(", "initial_filter_size", "*", "2", "**", "4", ",", "initial_filter_size", "*", "2", "**", "3", ")", "\n", "self", ".", "expand_4_2", "=", "self", ".", "expand", "(", "initial_filter_size", "*", "2", "**", "3", ",", "initial_filter_size", "*", "2", "**", "3", ")", "\n", "self", ".", "upscale4", "=", "nn", ".", "ConvTranspose2d", "(", "initial_filter_size", "*", "2", "**", "3", ",", "initial_filter_size", "*", "2", "**", "2", ",", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ")", "\n", "\n", "self", ".", "expand_3_1", "=", "self", ".", "expand", "(", "initial_filter_size", "*", "2", "**", "3", ",", "initial_filter_size", "*", "2", "**", "2", ")", "\n", "self", ".", "expand_3_2", "=", "self", ".", "expand", "(", "initial_filter_size", "*", "2", "**", "2", ",", "initial_filter_size", "*", "2", "**", "2", ")", "\n", "self", ".", "upscale3", "=", "nn", ".", "ConvTranspose2d", "(", "initial_filter_size", "*", "2", "**", "2", ",", "initial_filter_size", "*", "2", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "expand_2_1", "=", "self", ".", "expand", "(", "initial_filter_size", "*", "2", "**", "2", ",", "initial_filter_size", "*", "2", ")", "\n", "self", ".", "expand_2_2", "=", "self", ".", "expand", "(", "initial_filter_size", "*", "2", ",", "initial_filter_size", "*", "2", ")", "\n", "self", ".", "upscale2", "=", "nn", ".", "ConvTranspose2d", "(", "initial_filter_size", "*", "2", ",", "initial_filter_size", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "expand_1_1", "=", "self", ".", "expand", "(", "initial_filter_size", "*", "2", ",", "initial_filter_size", ")", "\n", "self", ".", "expand_1_2", "=", "self", ".", "expand", "(", "initial_filter_size", ",", "initial_filter_size", ")", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "initial_filter_size", ",", "classes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.forward": [[102, 131], ["unet2d.decoder.upscale5", "unet2d.decoder.center_crop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet2d.decoder.expand_4_2", "unet2d.decoder.upscale4", "unet2d.decoder.center_crop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet2d.decoder.expand_3_2", "unet2d.decoder.upscale3", "unet2d.decoder.center_crop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet2d.decoder.expand_2_2", "unet2d.decoder.upscale2", "unet2d.decoder.center_crop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet2d.decoder.expand_1_2", "unet2d.decoder.head", "unet2d.decoder.expand_4_1", "unet2d.decoder.expand_3_1", "unet2d.decoder.expand_2_1", "unet2d.decoder.expand_1_1", "unet2d.decoder.size", "unet2d.decoder.size", "unet2d.decoder.size", "unet2d.decoder.size", "unet2d.decoder.size", "unet2d.decoder.size", "unet2d.decoder.size", "unet2d.decoder.size"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.center_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.center_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.center_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.center_crop"], ["", "def", "forward", "(", "self", ",", "x", ",", "contr_4", ",", "contr_3", ",", "contr_2", ",", "contr_1", ")", ":", "\n", "\n", "        ", "concat_weight", "=", "1", "\n", "upscale", "=", "self", ".", "upscale5", "(", "x", ")", "\n", "crop", "=", "self", ".", "center_crop", "(", "contr_4", ",", "upscale", ".", "size", "(", ")", "[", "2", "]", ",", "upscale", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "upscale", ",", "crop", "*", "concat_weight", "]", ",", "1", ")", "\n", "\n", "expand", "=", "self", ".", "expand_4_2", "(", "self", ".", "expand_4_1", "(", "concat", ")", ")", "\n", "upscale", "=", "self", ".", "upscale4", "(", "expand", ")", "\n", "\n", "crop", "=", "self", ".", "center_crop", "(", "contr_3", ",", "upscale", ".", "size", "(", ")", "[", "2", "]", ",", "upscale", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "upscale", ",", "crop", "*", "concat_weight", "]", ",", "1", ")", "\n", "\n", "expand", "=", "self", ".", "expand_3_2", "(", "self", ".", "expand_3_1", "(", "concat", ")", ")", "\n", "upscale", "=", "self", ".", "upscale3", "(", "expand", ")", "\n", "\n", "crop", "=", "self", ".", "center_crop", "(", "contr_2", ",", "upscale", ".", "size", "(", ")", "[", "2", "]", ",", "upscale", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "upscale", ",", "crop", "*", "concat_weight", "]", ",", "1", ")", "\n", "\n", "expand", "=", "self", ".", "expand_2_2", "(", "self", ".", "expand_2_1", "(", "concat", ")", ")", "\n", "upscale", "=", "self", ".", "upscale2", "(", "expand", ")", "\n", "\n", "crop", "=", "self", ".", "center_crop", "(", "contr_1", ",", "upscale", ".", "size", "(", ")", "[", "2", "]", ",", "upscale", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "upscale", ",", "crop", "*", "concat_weight", "]", ",", "1", ")", "\n", "\n", "expand", "=", "self", ".", "expand_1_2", "(", "self", ".", "expand_1_1", "(", "concat", ")", ")", "\n", "\n", "out", "=", "self", ".", "head", "(", "expand", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.center_crop": [[132, 138], ["layer.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "center_crop", "(", "layer", ",", "target_width", ",", "target_height", ")", ":", "\n", "        ", "batch_size", ",", "n_channels", ",", "layer_width", ",", "layer_height", "=", "layer", ".", "size", "(", ")", "\n", "xy1", "=", "(", "layer_width", "-", "target_width", ")", "//", "2", "\n", "xy2", "=", "(", "layer_height", "-", "target_height", ")", "//", "2", "\n", "return", "layer", "[", ":", ",", ":", ",", "xy1", ":", "(", "xy1", "+", "target_width", ")", ",", "xy2", ":", "(", "xy2", "+", "target_height", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand": [[139, 147], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "expand", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.UNet2D.__init__": [[149, 156], ["torch.Module.__init__", "unet2d.encoder", "unet2d.decoder", "unet2d.UNet2D.apply", "unet2d.InitWeights_He"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ",", "initial_filter_size", "=", "32", ",", "kernel_size", "=", "3", ",", "classes", "=", "4", ",", "do_instancenorm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "encoder", "(", "in_channels", ",", "initial_filter_size", ",", "kernel_size", ",", "do_instancenorm", ")", "\n", "self", ".", "decoder", "=", "decoder", "(", "initial_filter_size", ",", "classes", ")", "\n", "\n", "self", ".", "apply", "(", "InitWeights_He", "(", "1e-2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.UNet2D.forward": [[157, 163], ["unet2d.UNet2D.encoder", "unet2d.UNet2D.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x_1", ",", "contr_4", ",", "contr_3", ",", "contr_2", ",", "contr_1", "=", "self", ".", "encoder", "(", "x", ")", "\n", "out", "=", "self", ".", "decoder", "(", "x_1", ",", "contr_4", ",", "contr_3", ",", "contr_2", ",", "contr_1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.UNet2D_classification.__init__": [[165, 179], ["torch.Module.__init__", "unet2d.encoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet2d.UNet2D_classification.apply", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "unet2d.InitWeights_He"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ",", "initial_filter_size", "=", "32", ",", "kernel_size", "=", "3", ",", "classes", "=", "3", ",", "do_instancenorm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "encoder", "(", "in_channels", ",", "initial_filter_size", ",", "kernel_size", ",", "do_instancenorm", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "initial_filter_size", "*", "2", "**", "4", ",", "initial_filter_size", "*", "2", "**", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "initial_filter_size", "*", "2", "**", "4", ",", "classes", ")", "\n", ")", "\n", "\n", "self", ".", "apply", "(", "InitWeights_He", "(", "1e-2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.UNet2D_classification.forward": [[180, 186], ["unet2d.UNet2D_classification.encoder", "unet2d.UNet2D_classification.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x_1", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "encoder", "(", "x", ")", "\n", "out", "=", "self", ".", "head", "(", "x_1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.acdc.ACDC.__init__": [[13, 47], ["print", "subfiles", "subfiles", "join", "numpy.load", "range", "join", "numpy.load", "range", "len", "join", "acdc.ACDC.files.append", "acdc.ACDC.slices.append", "acdc.ACDC.slice_position.append", "acdc.ACDC.partition.append", "join", "acdc.ACDC.files.append", "join", "int", "int", "max", "float", "int", "min", "int"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["    ", "def", "__init__", "(", "self", ",", "keys", ",", "purpose", ",", "args", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "args", ".", "data_dir", "\n", "self", ".", "patch_size", "=", "args", ".", "patch_size", "\n", "self", ".", "purpose", "=", "purpose", "\n", "self", ".", "classes", "=", "args", ".", "classes", "\n", "self", ".", "do_contrast", "=", "args", ".", "do_contrast", "\n", "self", ".", "files", "=", "[", "]", "\n", "if", "self", ".", "do_contrast", ":", "\n", "# we do not pre-load all data, instead, load data in the get item function", "\n", "            ", "self", ".", "slice_position", "=", "[", "]", "\n", "self", ".", "partition", "=", "[", "]", "\n", "self", ".", "slices", "=", "[", "]", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "frames", "=", "subfiles", "(", "join", "(", "self", ".", "data_dir", ",", "'patient_%03d'", "%", "key", ")", ",", "False", ",", "None", ",", "\".npy\"", ",", "True", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "                    ", "image", "=", "np", ".", "load", "(", "join", "(", "self", ".", "data_dir", ",", "'patient_%03d'", "%", "key", ",", "frame", ")", ")", "\n", "for", "i", "in", "range", "(", "image", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "self", ".", "files", ".", "append", "(", "join", "(", "self", ".", "data_dir", ",", "'patient_%03d'", "%", "key", ",", "frame", ")", ")", "\n", "self", ".", "slices", ".", "append", "(", "i", ")", "\n", "self", ".", "slice_position", ".", "append", "(", "float", "(", "i", "+", "1", ")", "/", "image", ".", "shape", "[", "0", "]", ")", "\n", "part", "=", "image", ".", "shape", "[", "0", "]", "/", "4.0", "\n", "if", "part", "-", "int", "(", "part", ")", ">=", "0.5", ":", "\n", "                            ", "part", "=", "int", "(", "part", "+", "1", ")", "\n", "", "else", ":", "\n", "                            ", "part", "=", "int", "(", "part", ")", "\n", "", "self", ".", "partition", ".", "append", "(", "max", "(", "0", ",", "min", "(", "int", "(", "i", "//", "part", ")", ",", "3", ")", "+", "1", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "key", "in", "keys", ":", "\n", "                ", "frames", "=", "subfiles", "(", "join", "(", "self", ".", "data_dir", ",", "'patient_%03d'", "%", "key", ")", ",", "False", ",", "None", ",", "\".npy\"", ",", "True", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "                    ", "image", "=", "np", ".", "load", "(", "join", "(", "self", ".", "data_dir", ",", "'patient_%03d'", "%", "key", ",", "frame", ")", ")", "\n", "for", "i", "in", "range", "(", "image", ".", "shape", "[", "1", "]", ")", ":", "\n", "                        ", "self", ".", "files", ".", "append", "(", "image", "[", ":", ",", "i", "]", ")", "\n", "", "", "", "", "print", "(", "f'dataset length: {len(self.files)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.acdc.ACDC.__getitem__": [[48, 58], ["[].astype", "acdc.ACDC.prepare_supervised", "acdc.ACDC.prepare_contrast", "numpy.load().astype", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.prepare_supervised", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.CHD.prepare_contrast"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "do_contrast", ":", "\n", "            ", "img", "=", "self", ".", "files", "[", "index", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "label", "=", "self", ".", "files", "[", "index", "]", "[", "1", "]", "\n", "img", ",", "label", "=", "self", ".", "prepare_supervised", "(", "img", ",", "label", ")", "\n", "return", "img", ",", "label", "\n", "", "else", ":", "\n", "            ", "img", "=", "np", ".", "load", "(", "self", ".", "files", "[", "index", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", "self", ".", "slices", "[", "index", "]", "]", "\n", "img1", ",", "img2", "=", "self", ".", "prepare_contrast", "(", "img", ")", "\n", "return", "img1", ",", "img2", ",", "self", ".", "slice_position", "[", "index", "]", ",", "self", ".", "partition", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.acdc.ACDC.prepare_supervised": [[60, 85], ["utils.pad_and_or_crop", "utils.pad_and_or_crop", "tr_transforms.append", "tr_transforms.append", "batchgenerators.transforms.abstract_transforms.Compose", "batchgenerators.transforms.abstract_transforms.Compose.", "utils.pad_and_or_crop", "utils.pad_and_or_crop", "batchgenerators.transforms.spatial_transforms.MirrorTransform", "batchgenerators.transforms.abstract_transforms.RndTransform", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.spatial_transforms.SpatialTransform", "list", "batchgenerators.transforms.crop_and_pad_transforms.RandomCropTransform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get"], ["", "", "def", "prepare_supervised", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "purpose", "==", "'train'", ":", "\n", "# resize image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'random'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "# the image and label should be [batch, c, x, y, z], this is the adapatation for using batchgenerators :)", "\n", "data_dict", "=", "{", "'data'", ":", "img", "[", "None", ",", "None", "]", ",", "'seg'", ":", "label", "[", "None", ",", "None", "]", "}", "\n", "tr_transforms", "=", "[", "]", "\n", "tr_transforms", ".", "append", "(", "MirrorTransform", "(", "(", "0", ",", "1", ")", ")", ")", "\n", "tr_transforms", ".", "append", "(", "RndTransform", "(", "SpatialTransform", "(", "self", ".", "patch_size", ",", "list", "(", "np", ".", "array", "(", "self", ".", "patch_size", ")", "//", "2", ")", ",", "\n", "True", ",", "(", "100.", ",", "350.", ")", ",", "(", "14.", ",", "17.", ")", ",", "\n", "True", ",", "(", "0", ",", "2.", "*", "np", ".", "pi", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "\n", "True", ",", "(", "0.7", ",", "1.3", ")", ",", "'constant'", ",", "0", ",", "3", ",", "'constant'", ",", "0", ",", "0", ",", "\n", "random_crop", "=", "False", ")", ",", "prob", "=", "0.67", ",", "alternative_transform", "=", "RandomCropTransform", "(", "self", ".", "patch_size", ")", ")", ")", "\n", "\n", "train_transform", "=", "Compose", "(", "tr_transforms", ")", "\n", "data_dict", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img", "=", "data_dict", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "label", "=", "data_dict", ".", "get", "(", "'seg'", ")", "[", "0", "]", "\n", "return", "img", ",", "label", "\n", "", "else", ":", "\n", "# resize image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'centre'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "return", "img", "[", "None", "]", ",", "label", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.acdc.ACDC.prepare_contrast": [[87, 106], ["utils.pad_and_or_crop", "tr_transforms.append", "tr_transforms.append", "batchgenerators.transforms.abstract_transforms.Compose", "batchgenerators.transforms.abstract_transforms.Compose.", "batchgenerators.transforms.abstract_transforms.Compose.", "batchgenerators.transforms.spatial_transforms.MirrorTransform", "batchgenerators.transforms.abstract_transforms.RndTransform", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.spatial_transforms.SpatialTransform", "list", "batchgenerators.transforms.crop_and_pad_transforms.RandomCropTransform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get"], ["", "", "def", "prepare_contrast", "(", "self", ",", "img", ")", ":", "\n", "# resize image", "\n", "        ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'random'", ")", "\n", "# the image and label should be [batch, c, x, y, z], this is the adapatation for using batchgenerators :)", "\n", "data_dict", "=", "{", "'data'", ":", "img", "[", "None", ",", "None", "]", "}", "\n", "tr_transforms", "=", "[", "]", "\n", "tr_transforms", ".", "append", "(", "MirrorTransform", "(", "(", "0", ",", "1", ")", ")", ")", "\n", "tr_transforms", ".", "append", "(", "RndTransform", "(", "SpatialTransform", "(", "self", ".", "patch_size", ",", "list", "(", "np", ".", "array", "(", "self", ".", "patch_size", ")", "//", "2", ")", ",", "\n", "True", ",", "(", "100.", ",", "350.", ")", ",", "(", "14.", ",", "17.", ")", ",", "\n", "True", ",", "(", "0", ",", "2.", "*", "np", ".", "pi", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "\n", "True", ",", "(", "0.7", ",", "1.3", ")", ",", "'constant'", ",", "0", ",", "3", ",", "'constant'", ",", "0", ",", "0", ",", "\n", "random_crop", "=", "False", ")", ",", "prob", "=", "0.67", ",", "alternative_transform", "=", "RandomCropTransform", "(", "self", ".", "patch_size", ")", ")", ")", "\n", "\n", "train_transform", "=", "Compose", "(", "tr_transforms", ")", "\n", "data_dict1", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img1", "=", "data_dict1", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "data_dict2", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img2", "=", "data_dict2", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.acdc.ACDC.__len__": [[107, 109], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_hvsmr.resize_image": [[6, 11], ["skimage.transform.resize", "int", "int", "int", "numpy.round", "numpy.round", "numpy.round", "float", "float", "float"], "function", ["None"], ["def", "resize_image", "(", "image", ",", "old_spacing", ",", "new_spacing", ",", "order", "=", "3", ")", ":", "\n", "    ", "new_shape", "=", "(", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "0", "]", "/", "new_spacing", "[", "0", "]", "*", "float", "(", "image", ".", "shape", "[", "0", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "1", "]", "/", "new_spacing", "[", "1", "]", "*", "float", "(", "image", ".", "shape", "[", "1", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "2", "]", "/", "new_spacing", "[", "2", "]", "*", "float", "(", "image", ".", "shape", "[", "2", "]", ")", ")", ")", ")", "\n", "return", "resize", "(", "image", ",", "new_shape", ",", "order", "=", "order", ",", "mode", "=", "'edge'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_hvsmr.convert_to_one_hot": [[13, 19], ["numpy.unique", "numpy.zeros", "range", "len", "list", "len"], "function", ["None"], ["", "def", "convert_to_one_hot", "(", "seg", ")", ":", "\n", "    ", "vals", "=", "np", ".", "unique", "(", "seg", ")", "\n", "res", "=", "np", ".", "zeros", "(", "[", "len", "(", "vals", ")", "]", "+", "list", "(", "seg", ".", "shape", ")", ",", "seg", ".", "dtype", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "vals", ")", ")", ":", "\n", "        ", "res", "[", "c", "]", "[", "seg", "==", "c", "]", "=", "1", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_hvsmr.preprocess_image": [[20, 45], ["SimpleITK.GetArrayFromImage().astype", "numpy.array", "list", "resize_image().astype", "numpy.percentile", "numpy.percentile", "resize_image().astype.mean", "resize_image().astype.std", "generate_hvsmr.convert_to_one_hot", "numpy.unique", "range", "itk_image.GetSpacing", "SimpleITK.GetArrayFromImage", "len", "results.append", "generate_hvsmr.resize_image", "numpy.vstack().argmax", "generate_hvsmr.resize_image", "tmp[].astype", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.convert_to_one_hot", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.resize_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.resize_image"], ["", "def", "preprocess_image", "(", "itk_image", ",", "is_seg", "=", "False", ",", "spacing_target", "=", "(", "1", ",", "0.5", ",", "0.5", ")", ",", "keep_z_spacing", "=", "False", ")", ":", "\n", "    ", "spacing", "=", "np", ".", "array", "(", "itk_image", ".", "GetSpacing", "(", ")", ")", "[", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "image", "=", "sitk", ".", "GetArrayFromImage", "(", "itk_image", ")", ".", "astype", "(", "float", ")", "\n", "if", "keep_z_spacing", ":", "\n", "        ", "spacing_target", "=", "list", "(", "spacing_target", ")", "\n", "spacing_target", "[", "0", "]", "=", "spacing", "[", "0", "]", "\n", "", "if", "not", "is_seg", ":", "\n", "        ", "order_img", "=", "3", "\n", "if", "not", "keep_z_spacing", ":", "\n", "            ", "order_img", "=", "1", "\n", "", "image", "=", "resize_image", "(", "image", ",", "spacing", ",", "spacing_target", ",", "order", "=", "order_img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "min_val_1p", "=", "np", ".", "percentile", "(", "image", ",", "1", ")", "\n", "max_val_99p", "=", "np", ".", "percentile", "(", "image", ",", "99", ")", "\n", "image", "[", "image", "<", "min_val_1p", "]", "=", "min_val_1p", "\n", "image", "[", "image", ">", "max_val_99p", "]", "=", "max_val_99p", "\n", "image", "-=", "image", ".", "mean", "(", ")", "\n", "image", "/=", "image", ".", "std", "(", ")", "\n", "", "else", ":", "\n", "        ", "tmp", "=", "convert_to_one_hot", "(", "image", ")", "\n", "vals", "=", "np", ".", "unique", "(", "image", ")", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "resize_image", "(", "tmp", "[", "i", "]", ".", "astype", "(", "float", ")", ",", "spacing", ",", "spacing_target", ",", "1", ")", "[", "None", "]", ")", "\n", "", "image", "=", "vals", "[", "np", ".", "vstack", "(", "results", ")", ".", "argmax", "(", "0", ")", "]", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_hvsmr.generate_hvsmr_dataset": [[46, 67], ["range", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "SimpleITK.ReadImage", "SimpleITK.ReadImage", "print", "print", "generate_hvsmr.preprocess_image", "generate_hvsmr.preprocess_image", "print", "range", "os.path.exists", "os.mkdir", "os.path.join", "numpy.stack", "numpy.save", "os.path.join", "os.path.join", "str", "str", "sitk.ReadImage.GetSpacing", "sitk.ReadImage.GetSize", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.preprocess_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.preprocess_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "def", "generate_hvsmr_dataset", "(", "data_dir", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'Training_dataset_sx_cropped'", ",", "'training_sa_crop_pat'", "+", "str", "(", "i", ")", "+", "'.nii.gz'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'Ground_truth'", ",", "'training_sa_crop_pat'", "+", "str", "(", "i", ")", "+", "'-label.nii.gz'", ")", "\n", "itk_image", "=", "sitk", ".", "ReadImage", "(", "image_path", ")", "\n", "itk_label", "=", "sitk", ".", "ReadImage", "(", "label_path", ")", "\n", "print", "(", "f'image spacing:{itk_image.GetSpacing()}'", ")", "\n", "print", "(", "f'original image size:{itk_image.GetSize()}'", ")", "\n", "image", "=", "preprocess_image", "(", "itk_image", ",", "is_seg", "=", "False", ",", "spacing_target", "=", "(", "1", ",", "0.7", ",", "0.7", ")", ",", "keep_z_spacing", "=", "True", ")", "\n", "label", "=", "preprocess_image", "(", "itk_label", ",", "is_seg", "=", "True", ",", "spacing_target", "=", "(", "1", ",", "0.7", ",", "0.7", ")", ",", "keep_z_spacing", "=", "True", ")", "\n", "print", "(", "f'resized image size:{image.shape}'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'patient_'", "+", "str", "(", "i", ")", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'patient_'", "+", "str", "(", "i", ")", ")", ")", "\n", "", "for", "j", "in", "range", "(", "image", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tmp_image", "=", "image", "[", "j", ",", ":", ",", ":", "]", "\n", "tmp_label", "=", "label", "[", "j", ",", ":", ",", ":", "]", "\n", "save_path_image", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'patient_'", "+", "str", "(", "i", ")", ",", "'frame_%03d'", "%", "j", ")", "\n", "all_data", "=", "np", ".", "stack", "(", "[", "tmp_image", ",", "tmp_label", "]", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "save_path_image", ",", "all_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.CHD.__init__": [[15, 57], ["print", "open", "pickle.load", "os.path.join", "subfiles", "subfiles.sort", "subfiles", "subfiles.sort", "join", "chd.CHD.files.append", "chd.CHD.means.append", "chd.CHD.stds.append", "chd.CHD.slice_position.append", "chd.CHD.partition.append", "join", "chd.CHD.means.append", "chd.CHD.stds.append", "chd.CHD.files.append", "len", "join", "len", "int", "int", "max", "join", "float", "len", "int", "str", "min", "str", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["    ", "def", "__init__", "(", "self", ",", "keys", ",", "purpose", ",", "args", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "args", ".", "data_dir", "\n", "self", ".", "patch_size", "=", "args", ".", "patch_size", "\n", "self", ".", "purpose", "=", "purpose", "\n", "self", ".", "classes", "=", "args", ".", "classes", "\n", "self", ".", "do_contrast", "=", "args", ".", "do_contrast", "\n", "self", ".", "files", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"mean_std.pkl\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "mean_std", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "if", "self", ".", "do_contrast", ":", "\n", "# we do not pre-load all data, instead, load data in the get item function", "\n", "            ", "self", ".", "slice_position", "=", "[", "]", "\n", "self", ".", "partition", "=", "[", "]", "\n", "self", ".", "means", "=", "[", "]", "\n", "self", ".", "stds", "=", "[", "]", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "frames", "=", "subfiles", "(", "join", "(", "self", ".", "data_dir", ",", "'train'", ",", "key", ")", ",", "False", ",", "None", ",", "\".npy\"", ",", "True", ")", "\n", "frames", ".", "sort", "(", ")", "\n", "i", "=", "0", "\n", "for", "frame", "in", "frames", ":", "\n", "                    ", "self", ".", "files", ".", "append", "(", "join", "(", "self", ".", "data_dir", ",", "'train'", ",", "key", ",", "frame", ")", ")", "\n", "self", ".", "means", ".", "append", "(", "mean_std", "[", "key", "]", "[", "'mean'", "]", ")", "\n", "self", ".", "stds", ".", "append", "(", "mean_std", "[", "key", "]", "[", "'std'", "]", ")", "\n", "self", ".", "slice_position", ".", "append", "(", "float", "(", "i", "+", "1", ")", "/", "len", "(", "frames", ")", ")", "\n", "part", "=", "len", "(", "frames", ")", "/", "4.0", "\n", "if", "part", "-", "int", "(", "part", ")", ">=", "0.5", ":", "\n", "                        ", "part", "=", "int", "(", "part", "+", "1", ")", "\n", "", "else", ":", "\n", "                        ", "part", "=", "int", "(", "part", ")", "\n", "", "self", ".", "partition", ".", "append", "(", "max", "(", "0", ",", "min", "(", "int", "(", "i", "//", "part", ")", ",", "3", ")", "+", "1", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "means", "=", "[", "]", "\n", "self", ".", "stds", "=", "[", "]", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "frames", "=", "subfiles", "(", "join", "(", "self", ".", "data_dir", ",", "'train'", ",", "'ct_'", "+", "str", "(", "key", ")", ")", ",", "False", ",", "None", ",", "\".npz\"", ",", "True", ")", "\n", "frames", ".", "sort", "(", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "                    ", "self", ".", "means", ".", "append", "(", "mean_std", "[", "'ct_'", "+", "str", "(", "key", ")", "]", "[", "'mean'", "]", ")", "\n", "self", ".", "stds", ".", "append", "(", "mean_std", "[", "'ct_'", "+", "str", "(", "key", ")", "]", "[", "'std'", "]", ")", "\n", "self", ".", "files", ".", "append", "(", "join", "(", "self", ".", "data_dir", ",", "'train'", ",", "'ct_'", "+", "str", "(", "key", ")", ",", "frame", ")", ")", "\n", "", "", "", "print", "(", "f'dataset length: {len(self.files)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.CHD.__getitem__": [[58, 74], ["numpy.load().astype", "chd.CHD.prepare_contrast", "all_data[].astype", "all_data[].astype", "chd.CHD.prepare_supervised", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.CHD.prepare_contrast", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.prepare_supervised"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "do_contrast", ":", "\n", "            ", "image", "=", "np", ".", "load", "(", "self", ".", "files", "[", "index", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# do preprocessing", "\n", "image", "-=", "self", ".", "means", "[", "index", "]", "\n", "image", "/=", "self", ".", "stds", "[", "index", "]", "\n", "img1", ",", "img2", "=", "self", ".", "prepare_contrast", "(", "image", ")", "\n", "return", "img1", ",", "img2", ",", "self", ".", "slice_position", "[", "index", "]", ",", "self", ".", "partition", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "all_data", "=", "np", ".", "load", "(", "self", ".", "files", "[", "index", "]", ")", "[", "'data'", "]", "\n", "img", "=", "all_data", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "-=", "self", ".", "means", "[", "index", "]", "\n", "img", "/=", "self", ".", "stds", "[", "index", "]", "\n", "label", "=", "all_data", "[", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", ",", "label", "=", "self", ".", "prepare_supervised", "(", "img", ",", "label", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.CHD.prepare_supervised": [[76, 101], ["utils.pad_and_or_crop", "utils.pad_and_or_crop", "tr_transforms.append", "tr_transforms.append", "batchgenerators.transforms.abstract_transforms.Compose", "batchgenerators.transforms.abstract_transforms.Compose.", "utils.pad_and_or_crop", "utils.pad_and_or_crop", "batchgenerators.transforms.spatial_transforms.MirrorTransform", "batchgenerators.transforms.abstract_transforms.RndTransform", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.spatial_transforms.SpatialTransform", "list", "batchgenerators.transforms.crop_and_pad_transforms.RandomCropTransform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get"], ["", "", "def", "prepare_supervised", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "purpose", "==", "'train'", ":", "\n", "# pad image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'random'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "# the image and label should be [batch, c, x, y, z], this is the adapatation for using batchgenerators :)", "\n", "data_dict", "=", "{", "'data'", ":", "img", "[", "None", ",", "None", "]", ",", "'seg'", ":", "label", "[", "None", ",", "None", "]", "}", "\n", "tr_transforms", "=", "[", "]", "\n", "tr_transforms", ".", "append", "(", "MirrorTransform", "(", "(", "0", ",", "1", ")", ")", ")", "\n", "tr_transforms", ".", "append", "(", "RndTransform", "(", "SpatialTransform", "(", "self", ".", "patch_size", ",", "list", "(", "np", ".", "array", "(", "self", ".", "patch_size", ")", "//", "2", ")", ",", "\n", "True", ",", "(", "100.", ",", "350.", ")", ",", "(", "14.", ",", "17.", ")", ",", "\n", "True", ",", "(", "0", ",", "2.", "*", "np", ".", "pi", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "\n", "True", ",", "(", "0.7", ",", "1.3", ")", ",", "'constant'", ",", "0", ",", "3", ",", "'constant'", ",", "0", ",", "0", ",", "\n", "random_crop", "=", "False", ")", ",", "prob", "=", "0.67", ",", "alternative_transform", "=", "RandomCropTransform", "(", "self", ".", "patch_size", ")", ")", ")", "\n", "\n", "train_transform", "=", "Compose", "(", "tr_transforms", ")", "\n", "data_dict", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img", "=", "data_dict", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "label", "=", "data_dict", ".", "get", "(", "'seg'", ")", "[", "0", "]", "\n", "return", "img", ",", "label", "\n", "", "else", ":", "\n", "# resize image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'centre'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "return", "img", "[", "None", "]", ",", "label", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.CHD.prepare_contrast": [[103, 122], ["utils.pad_and_or_crop", "tr_transforms.append", "tr_transforms.append", "batchgenerators.transforms.abstract_transforms.Compose", "batchgenerators.transforms.abstract_transforms.Compose.", "batchgenerators.transforms.abstract_transforms.Compose.", "batchgenerators.transforms.spatial_transforms.MirrorTransform", "batchgenerators.transforms.abstract_transforms.RndTransform", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.spatial_transforms.SpatialTransform", "list", "batchgenerators.transforms.crop_and_pad_transforms.RandomCropTransform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get"], ["", "", "def", "prepare_contrast", "(", "self", ",", "img", ")", ":", "\n", "# resize image", "\n", "        ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'random'", ")", "\n", "# the image and label should be [batch, c, x, y, z], this is the adapatation for using batchgenerators :)", "\n", "data_dict", "=", "{", "'data'", ":", "img", "[", "None", ",", "None", "]", "}", "\n", "tr_transforms", "=", "[", "]", "\n", "tr_transforms", ".", "append", "(", "MirrorTransform", "(", "(", "0", ",", "1", ")", ")", ")", "\n", "tr_transforms", ".", "append", "(", "RndTransform", "(", "SpatialTransform", "(", "self", ".", "patch_size", ",", "list", "(", "np", ".", "array", "(", "self", ".", "patch_size", ")", "//", "2", ")", ",", "\n", "True", ",", "(", "100.", ",", "350.", ")", ",", "(", "14.", ",", "17.", ")", ",", "\n", "True", ",", "(", "0", ",", "2.", "*", "np", ".", "pi", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "\n", "True", ",", "(", "0.7", ",", "1.3", ")", ",", "'constant'", ",", "0", ",", "3", ",", "'constant'", ",", "0", ",", "0", ",", "\n", "random_crop", "=", "False", ")", ",", "prob", "=", "0.67", ",", "alternative_transform", "=", "RandomCropTransform", "(", "self", ".", "patch_size", ")", ")", ")", "\n", "\n", "train_transform", "=", "Compose", "(", "tr_transforms", ")", "\n", "data_dict1", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img1", "=", "data_dict1", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "data_dict2", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img2", "=", "data_dict2", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.CHD.__len__": [[123, 125], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.chd.get_split_chd": [[126, 143], ["numpy.arange", "os.listdir", "os.listdir.sort", "KFold", "KFold.split", "enumerate", "int"], "function", ["None"], ["", "", "def", "get_split_chd", "(", "data_dir", ",", "fold", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "all_keys", "=", "np", ".", "arange", "(", "0", ",", "50", ")", "\n", "cases", "=", "os", ".", "listdir", "(", "data_dir", ")", "\n", "cases", ".", "sort", "(", ")", "\n", "i", "=", "0", "\n", "for", "case", "in", "cases", ":", "\n", "      ", "all_keys", "[", "i", "]", "=", "int", "(", "case", "[", "-", "4", ":", "]", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "kf", "=", "KFold", "(", "n_splits", "=", "5", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.hvsmr.HVSMR.__init__": [[15, 27], ["print", "subfiles", "subfiles.sort", "os.path.join", "hvsmr.HVSMR.files.append", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["    ", "def", "__init__", "(", "self", ",", "keys", ",", "purpose", ",", "args", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "args", ".", "data_dir", "\n", "self", ".", "patch_size", "=", "args", ".", "patch_size", "\n", "self", ".", "purpose", "=", "purpose", "\n", "self", ".", "classes", "=", "args", ".", "classes", "\n", "self", ".", "files", "=", "[", "]", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "frames", "=", "subfiles", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'patient_%d'", "%", "key", ")", ",", "False", ",", "None", ",", "\".npy\"", ",", "True", ")", "\n", "frames", ".", "sort", "(", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "                ", "self", ".", "files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'patient_%d'", "%", "key", ",", "frame", ")", ")", "\n", "", "", "print", "(", "f'dataset length: {len(self.files)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.hvsmr.HVSMR.__getitem__": [[28, 34], ["[].astype", "[].astype", "hvsmr.HVSMR.prepare_supervised", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.prepare_supervised"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "np", ".", "load", "(", "self", ".", "files", "[", "index", "]", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "load", "(", "self", ".", "files", "[", "index", "]", ")", "[", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", ",", "label", "=", "self", ".", "prepare_supervised", "(", "img", ",", "label", ")", "\n", "# print(f'finish transform {self.files[index]}')", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.hvsmr.HVSMR.prepare_supervised": [[36, 61], ["utils.pad_and_or_crop", "utils.pad_and_or_crop", "tr_transforms.append", "tr_transforms.append", "batchgenerators.transforms.abstract_transforms.Compose", "batchgenerators.transforms.abstract_transforms.Compose.", "utils.pad_and_or_crop", "utils.pad_and_or_crop", "batchgenerators.transforms.spatial_transforms.MirrorTransform", "batchgenerators.transforms.abstract_transforms.RndTransform", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.spatial_transforms.SpatialTransform", "list", "batchgenerators.transforms.crop_and_pad_transforms.RandomCropTransform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get"], ["", "def", "prepare_supervised", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "purpose", "==", "'train'", ":", "\n", "# resize image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'random'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "# the image and label should be [batch, c, x, y, z], this is the adapatation for using batchgenerators :)", "\n", "data_dict", "=", "{", "'data'", ":", "img", "[", "None", ",", "None", "]", ",", "'seg'", ":", "label", "[", "None", ",", "None", "]", "}", "\n", "tr_transforms", "=", "[", "]", "\n", "tr_transforms", ".", "append", "(", "MirrorTransform", "(", "(", "0", ",", "1", ")", ")", ")", "\n", "tr_transforms", ".", "append", "(", "RndTransform", "(", "SpatialTransform", "(", "self", ".", "patch_size", ",", "list", "(", "np", ".", "array", "(", "self", ".", "patch_size", ")", "//", "2", ")", ",", "\n", "True", ",", "(", "100.", ",", "350.", ")", ",", "(", "14.", ",", "17.", ")", ",", "\n", "True", ",", "(", "0", ",", "2.", "*", "np", ".", "pi", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "\n", "True", ",", "(", "0.7", ",", "1.3", ")", ",", "'constant'", ",", "0", ",", "3", ",", "'constant'", ",", "0", ",", "0", ",", "\n", "random_crop", "=", "False", ")", ",", "prob", "=", "0.67", ",", "alternative_transform", "=", "RandomCropTransform", "(", "self", ".", "patch_size", ")", ")", ")", "\n", "\n", "train_transform", "=", "Compose", "(", "tr_transforms", ")", "\n", "data_dict", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img", "=", "data_dict", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "label", "=", "data_dict", ".", "get", "(", "'seg'", ")", "[", "0", "]", "\n", "return", "img", ",", "label", "\n", "", "else", ":", "\n", "# resize image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'centre'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "return", "img", "[", "None", "]", ",", "label", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.hvsmr.HVSMR.__len__": [[62, 64], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.__init__": [[16, 34], ["print", "open", "pickle.load", "subfiles", "subfiles.sort", "os.path.join", "join", "mmwhs.MMWHS.means.append", "mmwhs.MMWHS.stds.append", "mmwhs.MMWHS.files.append", "join", "len", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["    ", "def", "__init__", "(", "self", ",", "keys", ",", "purpose", ",", "args", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "args", ".", "data_dir", "\n", "self", ".", "patch_size", "=", "args", ".", "patch_size", "\n", "self", ".", "purpose", "=", "purpose", "\n", "self", ".", "classes", "=", "args", ".", "classes", "\n", "self", ".", "files", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"mean_std.pkl\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "mean_std", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "means", "=", "[", "]", "\n", "self", ".", "stds", "=", "[", "]", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "frames", "=", "subfiles", "(", "join", "(", "self", ".", "data_dir", ",", "'supervised'", ",", "'ct_train_'", "+", "str", "(", "key", ")", ")", ",", "False", ",", "None", ",", "\".npz\"", ",", "True", ")", "\n", "frames", ".", "sort", "(", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "                ", "self", ".", "means", ".", "append", "(", "mean_std", "[", "'ct_train_'", "+", "str", "(", "key", ")", "]", "[", "'mean'", "]", ")", "\n", "self", ".", "stds", ".", "append", "(", "mean_std", "[", "'ct_train_'", "+", "str", "(", "key", ")", "]", "[", "'std'", "]", ")", "\n", "self", ".", "files", ".", "append", "(", "join", "(", "self", ".", "data_dir", ",", "'supervised'", ",", "'ct_train_'", "+", "str", "(", "key", ")", ",", "frame", ")", ")", "\n", "", "", "print", "(", "f'dataset length: {len(self.files)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.__getitem__": [[35, 43], ["all_data[].astype", "all_data[].astype", "mmwhs.MMWHS.prepare_supervised", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.prepare_supervised"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "all_data", "=", "np", ".", "load", "(", "self", ".", "files", "[", "index", "]", ")", "[", "'data'", "]", "\n", "img", "=", "all_data", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "-=", "self", ".", "means", "[", "index", "]", "\n", "img", "/=", "self", ".", "stds", "[", "index", "]", "\n", "label", "=", "all_data", "[", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", ",", "label", "=", "self", ".", "prepare_supervised", "(", "img", ",", "label", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.prepare_supervised": [[45, 70], ["utils.pad_and_or_crop", "utils.pad_and_or_crop", "tr_transforms.append", "tr_transforms.append", "batchgenerators.transforms.abstract_transforms.Compose", "batchgenerators.transforms.abstract_transforms.Compose.", "utils.pad_and_or_crop", "utils.pad_and_or_crop", "batchgenerators.transforms.spatial_transforms.MirrorTransform", "batchgenerators.transforms.abstract_transforms.RndTransform", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.abstract_transforms.Compose.get", "batchgenerators.transforms.spatial_transforms.SpatialTransform", "list", "batchgenerators.transforms.crop_and_pad_transforms.RandomCropTransform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.metrics.SegmentationMetric.get"], ["", "def", "prepare_supervised", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "purpose", "==", "'train'", ":", "\n", "# pad image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'random'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "# the image and label should be [batch, c, x, y, z], this is the adapatation for using batchgenerators :)", "\n", "data_dict", "=", "{", "'data'", ":", "img", "[", "None", ",", "None", "]", ",", "'seg'", ":", "label", "[", "None", ",", "None", "]", "}", "\n", "tr_transforms", "=", "[", "]", "\n", "tr_transforms", ".", "append", "(", "MirrorTransform", "(", "(", "0", ",", "1", ")", ")", ")", "\n", "tr_transforms", ".", "append", "(", "RndTransform", "(", "SpatialTransform", "(", "self", ".", "patch_size", ",", "list", "(", "np", ".", "array", "(", "self", ".", "patch_size", ")", "//", "2", ")", ",", "\n", "True", ",", "(", "100.", ",", "350.", ")", ",", "(", "14.", ",", "17.", ")", ",", "\n", "True", ",", "(", "0", ",", "2.", "*", "np", ".", "pi", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "(", "-", "0.000001", ",", "0.00001", ")", ",", "\n", "True", ",", "(", "0.7", ",", "1.3", ")", ",", "'constant'", ",", "0", ",", "3", ",", "'constant'", ",", "0", ",", "0", ",", "\n", "random_crop", "=", "False", ")", ",", "prob", "=", "0.67", ",", "alternative_transform", "=", "RandomCropTransform", "(", "self", ".", "patch_size", ")", ")", ")", "\n", "\n", "train_transform", "=", "Compose", "(", "tr_transforms", ")", "\n", "data_dict", "=", "train_transform", "(", "**", "data_dict", ")", "\n", "img", "=", "data_dict", ".", "get", "(", "'data'", ")", "[", "0", "]", "\n", "label", "=", "data_dict", ".", "get", "(", "'seg'", ")", "[", "0", "]", "\n", "return", "img", ",", "label", "\n", "", "else", ":", "\n", "# pad image", "\n", "            ", "img", ",", "coord", "=", "pad_and_or_crop", "(", "img", ",", "self", ".", "patch_size", ",", "mode", "=", "'centre'", ")", "\n", "label", ",", "_", "=", "pad_and_or_crop", "(", "label", ",", "self", ".", "patch_size", ",", "mode", "=", "'fixed'", ",", "coords", "=", "coord", ")", "\n", "return", "img", "[", "None", "]", ",", "label", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.mmwhs.MMWHS.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_mmwhs.resize_image": [[9, 14], ["skimage.transform.resize", "int", "int", "int", "numpy.round", "numpy.round", "numpy.round", "float", "float", "float"], "function", ["None"], ["def", "resize_image", "(", "image", ",", "old_spacing", ",", "new_spacing", ",", "order", "=", "3", ")", ":", "\n", "    ", "new_shape", "=", "(", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "0", "]", "/", "new_spacing", "[", "0", "]", "*", "float", "(", "image", ".", "shape", "[", "0", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "1", "]", "/", "new_spacing", "[", "1", "]", "*", "float", "(", "image", ".", "shape", "[", "1", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "2", "]", "/", "new_spacing", "[", "2", "]", "*", "float", "(", "image", ".", "shape", "[", "2", "]", ")", ")", ")", ")", "\n", "return", "resize", "(", "image", ",", "new_shape", ",", "order", "=", "order", ",", "mode", "=", "'edge'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_mmwhs.convert_to_one_hot": [[16, 22], ["numpy.unique", "numpy.zeros", "range", "len", "list", "len"], "function", ["None"], ["", "def", "convert_to_one_hot", "(", "seg", ")", ":", "\n", "    ", "vals", "=", "np", ".", "unique", "(", "seg", ")", "\n", "res", "=", "np", ".", "zeros", "(", "[", "len", "(", "vals", ")", "]", "+", "list", "(", "seg", ".", "shape", ")", ",", "seg", ".", "dtype", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "vals", ")", ")", ":", "\n", "        ", "res", "[", "c", "]", "[", "seg", "==", "c", "]", "=", "1", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_mmwhs.preprocess_image": [[23, 44], ["SimpleITK.GetArrayFromImage().astype", "numpy.array", "list", "resize_image().astype", "generate_mmwhs.convert_to_one_hot", "numpy.unique", "range", "itk_image.GetSpacing", "SimpleITK.GetArrayFromImage", "len", "results.append", "generate_mmwhs.resize_image", "numpy.vstack().argmax", "generate_mmwhs.resize_image", "tmp[].astype", "numpy.vstack", "numpy.np.int16"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.convert_to_one_hot", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.resize_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.resize_image"], ["", "def", "preprocess_image", "(", "itk_image", ",", "is_seg", "=", "False", ",", "spacing_target", "=", "(", "1", ",", "0.5", ",", "0.5", ")", ",", "keep_z_spacing", "=", "False", ")", ":", "\n", "    ", "spacing", "=", "np", ".", "array", "(", "itk_image", ".", "GetSpacing", "(", ")", ")", "[", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "image", "=", "sitk", ".", "GetArrayFromImage", "(", "itk_image", ")", ".", "astype", "(", "float", ")", "\n", "if", "keep_z_spacing", ":", "\n", "        ", "spacing_target", "=", "list", "(", "spacing_target", ")", "\n", "spacing_target", "[", "0", "]", "=", "spacing", "[", "0", "]", "\n", "", "if", "not", "is_seg", ":", "\n", "        ", "order_img", "=", "3", "\n", "if", "not", "keep_z_spacing", ":", "\n", "            ", "order_img", "=", "1", "\n", "", "image", "=", "resize_image", "(", "image", ",", "spacing", ",", "spacing_target", ",", "order", "=", "order_img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# image -= image.mean()", "\n", "# image /= image.std()", "\n", "", "else", ":", "\n", "        ", "tmp", "=", "convert_to_one_hot", "(", "image", ")", "\n", "vals", "=", "np", ".", "unique", "(", "image", ")", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "resize_image", "(", "tmp", "[", "i", "]", ".", "astype", "(", "float", ")", ",", "spacing", ",", "spacing_target", ",", "1", ")", "[", "None", "]", ")", "\n", "", "image", "=", "vals", "[", "np", ".", "vstack", "(", "results", ")", ".", "argmax", "(", "0", ")", "]", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_mmwhs.generate_mmwhs_dataset": [[45, 102], ["collections.OrderedDict", "range", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "print", "os.path.join", "os.path.join", "SimpleITK.ReadImage", "SimpleITK.ReadImage", "SimpleITK.GetArrayViewFromImage", "preprocess_image.copy", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.SetSpacing", "sitk.GetImageFromArray.SetDirection", "print", "print", "generate_mmwhs.preprocess_image", "generate_mmwhs.preprocess_image", "print", "preprocess_image.copy().astype", "numpy.percentile", "numpy.percentile", "image_npy.copy().astype.astype().mean", "image_npy.copy().astype.astype().std", "print", "range", "open", "pickle.dump", "os.path.join", "os.path.join", "sitk.ReadImage.GetSpacing", "sitk.ReadImage.GetDirection", "numpy.stack", "os.path.join", "numpy.savez_compressed", "os.path.join", "preprocess_image.copy", "image_npy.copy().astype.astype", "image_npy.copy().astype.astype", "os.path.exists", "os.mkdir", "str", "str", "sitk.ReadImage.GetSpacing", "sitk.ReadImage.GetSize", "str", "numpy.unique", "os.path.join", "os.path.join", "str", "str.format", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.preprocess_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.preprocess_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "def", "generate_mmwhs_dataset", "(", "data_dir", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'supervised'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'supervised'", ")", ")", "\n", "", "i", "=", "1001", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "for", "j", "in", "range", "(", "20", ")", ":", "\n", "        ", "print", "(", "f'processing ct_train_{i}...'", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'ct_train_'", "+", "str", "(", "i", ")", "+", "'_image.nii.gz'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'ct_train_'", "+", "str", "(", "i", ")", "+", "'_label.nii.gz'", ")", "\n", "itk_image", "=", "sitk", ".", "ReadImage", "(", "image_path", ")", "\n", "itk_label", "=", "sitk", ".", "ReadImage", "(", "label_path", ")", "\n", "label_npy", "=", "sitk", ".", "GetArrayViewFromImage", "(", "itk_label", ")", "\n", "label_npy_copy", "=", "label_npy", ".", "copy", "(", ")", "\n", "label_npy_copy", "[", "label_npy_copy", "==", "205", "]", "=", "1", "\n", "label_npy_copy", "[", "label_npy_copy", "==", "420", "]", "=", "2", "\n", "label_npy_copy", "[", "label_npy_copy", "==", "500", "]", "=", "3", "\n", "label_npy_copy", "[", "label_npy_copy", "==", "550", "]", "=", "4", "\n", "label_npy_copy", "[", "label_npy_copy", "==", "600", "]", "=", "5", "\n", "label_npy_copy", "[", "label_npy_copy", "==", "820", "]", "=", "6", "\n", "label_npy_copy", "[", "label_npy_copy", "==", "850", "]", "=", "7", "\n", "label_npy_copy", "[", "label_npy_copy", ">", "100", "]", "=", "0", "\n", "itk_label_copy", "=", "sitk", ".", "GetImageFromArray", "(", "label_npy_copy", ")", "\n", "itk_label_copy", ".", "SetSpacing", "(", "itk_label", ".", "GetSpacing", "(", ")", ")", "\n", "itk_label_copy", ".", "SetDirection", "(", "itk_label", ".", "GetDirection", "(", ")", ")", "\n", "print", "(", "f'image spacing:{itk_image.GetSpacing()}'", ")", "\n", "print", "(", "f'original image size:{itk_image.GetSize()}'", ")", "\n", "image_npy", "=", "preprocess_image", "(", "itk_image", ",", "is_seg", "=", "False", ",", "spacing_target", "=", "(", "1", ",", "1.0", ",", "1.0", ")", ",", "keep_z_spacing", "=", "True", ")", "\n", "label_npy", "=", "preprocess_image", "(", "itk_label_copy", ",", "is_seg", "=", "True", ",", "spacing_target", "=", "(", "1", ",", "1.0", ",", "1.0", ")", ",", "keep_z_spacing", "=", "True", ")", "\n", "print", "(", "f'resized image size:{image_npy.shape}'", ")", "\n", "# convert label", "\n", "image_npy_copy", "=", "image_npy", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int16", ")", "\n", "# remove the pixels that are too smaller can increase the image contrast", "\n", "min_val_1p", "=", "np", ".", "percentile", "(", "image_npy_copy", ",", "1", ")", "\n", "max_val_99p", "=", "np", ".", "percentile", "(", "image_npy_copy", ",", "99", ")", "\n", "image_npy_copy", "[", "image_npy_copy", "<", "min_val_1p", "]", "=", "min_val_1p", "\n", "image_npy_copy", "[", "image_npy_copy", ">", "max_val_99p", "]", "=", "max_val_99p", "\n", "image_npy_copy", "[", "image_npy_copy", "<", "-", "2000", "]", "=", "-", "1110", "\n", "mean", "=", "image_npy_copy", ".", "astype", "(", "float", ")", ".", "mean", "(", ")", "\n", "std", "=", "image_npy_copy", ".", "astype", "(", "float", ")", ".", "std", "(", ")", "\n", "results", "[", "'ct_train_'", "+", "str", "(", "i", ")", "]", "=", "{", "}", "\n", "results", "[", "'ct_train_'", "+", "str", "(", "i", ")", "]", "[", "'mean'", "]", "=", "mean", "\n", "results", "[", "'ct_train_'", "+", "str", "(", "i", ")", "]", "[", "'std'", "]", "=", "std", "\n", "print", "(", "f'after label_npy unique:{np.unique(label_npy)}'", ")", "\n", "for", "n", "in", "range", "(", "image_npy", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tmp_image", "=", "image_npy_copy", "[", "n", ",", ":", ",", ":", "]", "\n", "tmp_label", "=", "label_npy", "[", "n", ",", ":", ",", ":", "]", "\n", "all_data", "=", "np", ".", "stack", "(", "[", "tmp_image", ",", "tmp_label", "]", ",", "axis", "=", "0", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'supervised'", ",", "'ct_train_'", "+", "str", "(", "i", ")", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'supervised'", ",", "'ct_train_'", "+", "str", "(", "i", ")", ")", ")", "\n", "", "save_path_image", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'supervised'", ",", "'ct_train_'", "+", "str", "(", "i", ")", ",", "'frame'", "+", "str", ".", "format", "(", "'%03d'", "%", "n", ")", ")", "\n", "np", ".", "savez_compressed", "(", "save_path_image", ",", "data", "=", "all_data", ")", "\n", "", "i", "=", "i", "+", "1", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"mean_std.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_chd.generate_chd_dataset": [[8, 52], ["collections.OrderedDict", "range", "os.path.exists", "open", "pickle.dump", "open", "pickle.dump", "os.path.join", "print", "os.path.join", "os.path.join", "SimpleITK.ReadImage", "SimpleITK.ReadImage", "SimpleITK.GetArrayViewFromImage", "SimpleITK.GetArrayViewFromImage", "sitk.GetArrayViewFromImage.copy", "numpy.percentile", "numpy.percentile", "image_npy.copy.astype().mean", "image_npy.copy.astype().std", "sitk.GetArrayViewFromImage.copy", "range", "os.path.join", "os.path.join", "numpy.stack", "maybe_mkdir_p", "os.path.join", "numpy.savez_compressed", "maybe_mkdir_p", "os.path.join", "numpy.save", "image_npy.copy.astype", "image_npy.copy.astype", "os.path.join", "os.path.join", "str", "str", "str", "str", "str", "str.format", "str", "str.format", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["def", "generate_chd_dataset", "(", "data_dir", ",", "labeled_save_dir", ",", "unlabeled_save_dir", ")", ":", "\n", "    ", "results", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "1001", ",", "1129", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'ct_'", "+", "str", "(", "i", ")", "+", "'_image.nii.gz'", ")", ")", ":", "\n", "            ", "print", "(", "f'processing i={i}'", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'ct_'", "+", "str", "(", "i", ")", "+", "'_image.nii.gz'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'ct_'", "+", "str", "(", "i", ")", "+", "'_label.nii.gz'", ")", "\n", "image", "=", "sitk", ".", "ReadImage", "(", "image_path", ")", "\n", "label", "=", "sitk", ".", "ReadImage", "(", "label_path", ")", "\n", "# print(f'image spacing:{image.GetSpacing()}')", "\n", "image_npy", "=", "sitk", ".", "GetArrayViewFromImage", "(", "image", ")", "\n", "label_npy", "=", "sitk", ".", "GetArrayViewFromImage", "(", "label", ")", "\n", "# convert label", "\n", "image_npy_copy", "=", "image_npy", ".", "copy", "(", ")", "\n", "min_val_1p", "=", "np", ".", "percentile", "(", "image_npy_copy", ",", "1", ")", "\n", "max_val_99p", "=", "np", ".", "percentile", "(", "image_npy_copy", ",", "99", ")", "\n", "image_npy_copy", "[", "image_npy_copy", "<", "min_val_1p", "]", "=", "min_val_1p", "\n", "image_npy_copy", "[", "image_npy_copy", ">", "max_val_99p", "]", "=", "max_val_99p", "\n", "mean", "=", "image_npy_copy", ".", "astype", "(", "float", ")", ".", "mean", "(", ")", "\n", "std", "=", "image_npy_copy", ".", "astype", "(", "float", ")", ".", "std", "(", ")", "\n", "label_npy_copy", "=", "label_npy", ".", "copy", "(", ")", "\n", "label_npy_copy", "[", "label_npy_copy", ">", "7", "]", "=", "0", "\n", "results", "[", "'ct_'", "+", "str", "(", "i", ")", "]", "=", "{", "}", "\n", "results", "[", "'ct_'", "+", "str", "(", "i", ")", "]", "[", "'mean'", "]", "=", "mean", "\n", "results", "[", "'ct_'", "+", "str", "(", "i", ")", "]", "[", "'std'", "]", "=", "std", "\n", "# print(f'mean:{mean}, std:{std}')", "\n", "# we save the integer version instead of float version to save space. normalization is done on-the-fly.", "\n", "# we save one labeled version and one unlabeled version, maybe not the best solution, but ok.", "\n", "# you can also add new unlabeled CT data into the unlabeled dataset for contrastive learning.", "\n", "for", "j", "in", "range", "(", "image_npy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "tmp_image", "=", "image_npy_copy", "[", "j", ",", ":", ",", ":", "]", "\n", "tmp_label", "=", "label_npy_copy", "[", "j", ",", ":", ",", ":", "]", "\n", "all_data", "=", "np", ".", "stack", "(", "[", "tmp_image", ",", "tmp_label", "]", ",", "axis", "=", "0", ")", "\n", "maybe_mkdir_p", "(", "os", ".", "path", ".", "join", "(", "labeled_save_dir", ",", "'train'", ",", "'ct_'", "+", "str", "(", "i", ")", ")", ")", "\n", "save_path_image", "=", "os", ".", "path", ".", "join", "(", "labeled_save_dir", ",", "'train'", ",", "'ct_'", "+", "str", "(", "i", ")", ",", "'frame'", "+", "str", ".", "format", "(", "'%03d'", "%", "j", ")", ")", "\n", "np", ".", "savez_compressed", "(", "save_path_image", ",", "data", "=", "all_data", ")", "\n", "maybe_mkdir_p", "(", "os", ".", "path", ".", "join", "(", "unlabeled_save_dir", ",", "'train'", ",", "'ct_'", "+", "str", "(", "i", ")", ")", ")", "\n", "save_path_image", "=", "os", ".", "path", ".", "join", "(", "unlabeled_save_dir", ",", "'train'", ",", "'ct_'", "+", "str", "(", "i", ")", ",", "'frame'", "+", "str", ".", "format", "(", "'%03d'", "%", "j", ")", ")", "\n", "np", ".", "save", "(", "save_path_image", ",", "tmp_image", ")", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "labeled_save_dir", ",", "\"mean_std.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "unlabeled_save_dir", ",", "\"mean_std.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_if_too_small": [[4, 22], ["tuple", "tuple", "list", "numpy.max", "numpy.ones", "len", "numpy.concatenate().reshape", "len", "list", "numpy.array", "numpy.array", "len", "len", "ValueError", "numpy.concatenate", "len", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["from", "batchgenerators", ".", "utilities", ".", "file_and_folder_operations", "import", "*", "\n", "from", "typing", "import", "Union", ",", "Tuple", ",", "List", "\n", "from", "scipy", ".", "ndimage", ".", "filters", "import", "gaussian_filter", "\n", "from", "sklearn", ".", "model_selection", "import", "KFold", "\n", "\n", "def", "get_split_chd", "(", "data_dir", ",", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "all_keys", "=", "np", ".", "arange", "(", "0", ",", "68", ")", "\n", "cases", "=", "os", ".", "listdir", "(", "data_dir", ")", "\n", "cases", ".", "sort", "(", ")", "\n", "i", "=", "0", "\n", "for", "case", "in", "cases", ":", "\n", "      ", "all_keys", "[", "i", "]", "=", "int", "(", "case", "[", "-", "4", ":", "]", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_and_or_crop": [[23, 53], ["utils.pad_if_too_small", "int", "int", "int", "int", "int", "int", "numpy.random.randint", "numpy.random.randint", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.pad_if_too_small"], ["if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n", "", "def", "get_split_mmwhs", "(", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "all_keys", "=", "np", ".", "arange", "(", "1001", ",", "1021", ")", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n", "", "def", "get_split_acdc", "(", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "all_keys", "=", "np", ".", "arange", "(", "1", ",", "101", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n", "", "def", "get_split_hvsmr", "(", "fold", ",", "cross_vali_num", ",", "seed", "=", "12345", ")", ":", "\n", "# this is seeded, will be identical each time", "\n", "    ", "kf", "=", "KFold", "(", "n_splits", "=", "cross_vali_num", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.utils.matplotlib_imshow": [[54, 64], ["img.mean.numpy", "img.mean.mean", "matplotlib.imshow", "matplotlib.imshow"], "function", ["None"], ["all_keys", "=", "np", ".", "arange", "(", "0", ",", "10", ")", "\n", "splits", "=", "kf", ".", "split", "(", "all_keys", ")", "\n", "for", "i", ",", "(", "train_idx", ",", "test_idx", ")", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "train_keys", "=", "all_keys", "[", "train_idx", "]", "\n", "test_keys", "=", "all_keys", "[", "test_idx", "]", "\n", "if", "i", "==", "fold", ":", "\n", "            ", "break", "\n", "", "", "return", "train_keys", ",", "test_keys", "\n", "\n", "", "def", "soft_dice", "(", "y_pred", ",", "y_true", ")", ":", "\n", "# sum over axes", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Compose.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "PIL2Numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Compose.__call__": [[17, 31], ["isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "a", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"L\"", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "\"L\"", ")", "\n", "self", ".", "PIL2Numpy", "=", "True", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", "=", "a", "(", "img", ",", "mask", ")", "\n", "\n", "", "if", "self", ".", "PIL2Numpy", ":", "\n", "            ", "img", ",", "mask", "=", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.ToTensor.__call__": [[33, 35], ["torchvision.to_tensor", "torch.from_numpy().long", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "tf", ".", "to_tensor", "(", "img", ")", ",", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Resize.__init__": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Resize.__call__": [[41, 43], ["torchvision.resize", "torchvision.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "tf", ".", "resize", "(", "img", ",", "self", ".", "size", ")", ",", "tf", ".", "resize", "(", "mask", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustGamma.__init__": [[46, 48], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustGamma.__call__": [[49, 52], ["torchvision.adjust_gamma", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_gamma", "(", "img", ",", "random", ".", "uniform", "(", "1", ",", "1", "+", "self", ".", "gamma", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustSaturation.__init__": [[55, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "saturation", ")", ":", "\n", "        ", "self", ".", "saturation", "=", "saturation", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustSaturation.__call__": [[58, 63], ["torchvision.adjust_saturation", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_saturation", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "saturation", ",", "\n", "1", "+", "self", ".", "saturation", ")", ")", ",", "mask", "\n", "", "", "class", "AdjustHue", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustHue.__init__": [[64, 66], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hue", ")", ":", "\n", "        ", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustHue.__call__": [[67, 71], ["torchvision.adjust_hue", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_hue", "(", "img", ",", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "\n", "self", ".", "hue", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustBrightness.__init__": [[73, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bf", ")", ":", "\n", "        ", "self", ".", "bf", "=", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustBrightness.__call__": [[76, 81], ["torchvision.adjust_brightness", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_brightness", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "bf", ",", "\n", "1", "+", "self", ".", "bf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustContrast.__init__": [[83, 85], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cf", ")", ":", "\n", "        ", "self", ".", "cf", "=", "cf", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.AdjustContrast.__call__": [[86, 91], ["torchvision.adjust_contrast", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_contrast", "(", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "cf", ",", "\n", "1", "+", "self", ".", "cf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomHorizontallyFlip.__init__": [[94, 96], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomHorizontallyFlip.__call__": [[97, 104], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", ")", "\n", "", "return", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomVerticallyFlip.__init__": [[107, 109], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomVerticallyFlip.__call__": [[110, 117], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "\n", ")", "\n", "", "return", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.FreeScale.__init__": [[120, 122], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.FreeScale.__call__": [[123, 128], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "(", "\n", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomZoom.__init__": [[131, 133], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomZoom.__call__": [[134, 143], ["random.random", "int", "int", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "new_size", "=", "(", "int", "(", "img", ".", "size", "[", "0", "]", "*", "self", ".", "size", "[", "0", "]", ")", ",", "int", "(", "img", ".", "size", "[", "1", "]", "*", "self", ".", "size", "[", "1", "]", ")", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "new_size", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "new_size", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "", "return", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomTranslate.__init__": [[146, 148], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "offset", ")", ":", "\n", "        ", "self", ".", "offset", "=", "offset", "# tuple (delta_x, delta_y), 0~1", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomTranslate.__call__": [[149, 189], ["int", "int", "torchvision.crop", "torchvision.pad", "torchvision.affine", "abs", "abs", "abs", "abs", "random.random", "random.random", "abs", "abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "x_offset", "=", "int", "(", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "0", "]", ")", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "y_offset", "=", "int", "(", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "1", "]", ")", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "x_crop_offset", "=", "x_offset", "\n", "y_crop_offset", "=", "y_offset", "\n", "if", "x_offset", "<", "0", ":", "\n", "            ", "x_crop_offset", "=", "0", "\n", "", "if", "y_offset", "<", "0", ":", "\n", "            ", "y_crop_offset", "=", "0", "\n", "\n", "", "cropped_img", "=", "tf", ".", "crop", "(", "img", ",", "\n", "y_crop_offset", ",", "\n", "x_crop_offset", ",", "\n", "img", ".", "size", "[", "1", "]", "-", "abs", "(", "y_offset", ")", ",", "\n", "img", ".", "size", "[", "0", "]", "-", "abs", "(", "x_offset", ")", ")", "\n", "\n", "if", "x_offset", ">=", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "0", ",", "x_offset", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", ">=", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "abs", "(", "y_offset", ")", ",", "x_offset", ",", "0", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "0", ",", "0", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "abs", "(", "y_offset", ")", ",", "0", ",", "0", ")", "\n", "\n", "", "return", "(", "\n", "tf", ".", "pad", "(", "cropped_img", ",", "\n", "padding_tuple", ",", "\n", "padding_mode", "=", "'reflect'", ")", ",", "\n", "tf", ".", "affine", "(", "mask", ",", "\n", "translate", "=", "(", "-", "x_offset", ",", "-", "y_offset", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "0.0", ",", "\n", "shear", "=", "0.0", ",", "\n", "fillcolor", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomRotate.__init__": [[191, 193], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "#  -180 and 180", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomRotate.__call__": [[194, 211], ["torchvision.affine", "torchvision.affine", "random.random", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "(", "\n", "tf", ".", "affine", "(", "img", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "(", "0", ",", "0", ",", "0", ")", "if", "len", "(", "img", ".", "size", ")", "==", "3", "else", "0", ",", "\n", "shear", "=", "0.0", ")", ",", "\n", "tf", ".", "affine", "(", "mask", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "0", ",", "\n", "shear", "=", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Scale.__init__": [[213, 215], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Scale.__call__": [[216, 234], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomCrop.__init__": [[238, 244], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomCrop.__call__": [[245, 266], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomSizedCrop.__init__": [[270, 272], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomSizedCrop.__call__": [[273, 303], ["range", "augmentation.Scale", "augmentation.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "img", ".", "size", "==", "(", "w", ",", "h", ")", "\n", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "# Notice, we must guarantee crop to the expected size", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.CenterCrop.__init__": [[305, 310], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.CenterCrop.__call__": [[311, 320], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomSized.__init__": [[323, 327], ["augmentation.Scale", "augmentation.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomSized.__call__": [[328, 340], ["int", "int", "augmentation.RandomSized.crop", "img.resize", "mask.resize", "random.uniform", "random.uniform", "augmentation.RandomSized.scale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "img", ",", "mask", "=", "(", "\n", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "return", "self", ".", "crop", "(", "*", "self", ".", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Pad.__init__": [[344, 349], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "padding", ",", "fill", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "padding", ",", "numbers", ".", "Number", ")", "\n", "assert", "isinstance", "(", "fill", ",", "numbers", ".", "Number", ")", "or", "isinstance", "(", "fill", ",", "str", ")", "or", "isinstance", "(", "fill", ",", "tuple", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "fill", "=", "fill", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.Pad.__call__": [[350, 353], ["PIL.ImageOps.expand", "PIL.ImageOps.expand"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.network.unet2d.decoder.expand"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "(", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "self", ".", "fill", ")", ",", "\n", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "self", ".", "fill", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.GaussianBlur.__init__": [[356, 361], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "min", "=", "0.1", ",", "max", "=", "2.0", ")", ":", "\n", "        ", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "# kernel size is set to be 10% of the image height/width", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.GaussianBlur.__call__": [[362, 375], ["numpy.array", "numpy.array", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.random.random_sample"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "# blur the image with a 50% chance", "\n", "# prob = np.random.random_sample()", "\n", "#", "\n", "# if prob < 0.5:", "\n", "sigma", "=", "(", "self", ".", "max", "-", "self", ".", "min", ")", "*", "np", ".", "random", ".", "random_sample", "(", ")", "+", "self", ".", "min", "\n", "img", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "sigma", ")", "\n", "mask", "=", "cv2", ".", "GaussianBlur", "(", "mask", ",", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "sigma", ")", "\n", "\n", "return", "(", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'L'", ")", ",", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "'L'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.SobelFilter.__init__": [[378, 381], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ")", ":", "\n", "# kernel size is set to be 10% of the image height/width", "\n", "        ", "self", ".", "kernel_size", "=", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.SobelFilter.__call__": [[382, 395], ["numpy.array", "numpy.array", "numpy.absolute", "numpy.absolute", "numpy.absolute", "numpy.absolute", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "cv2.Sobel", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.array.max", "numpy.array.min", "numpy.array.min"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "img_x", "=", "np", ".", "absolute", "(", "cv2", ".", "Sobel", "(", "img", ",", "cv2", ".", "CV_64F", ",", "1", ",", "0", ",", "self", ".", "kernel_size", ")", ")", "\n", "img_y", "=", "np", ".", "absolute", "(", "cv2", ".", "Sobel", "(", "img", ",", "cv2", ".", "CV_64F", ",", "0", ",", "1", ",", "self", ".", "kernel_size", ")", ")", "\n", "img", "=", "img_x", "+", "img_y", "\n", "img", "=", "(", "255", "*", "(", "img", "-", "img", ".", "min", "(", ")", ")", "/", "(", "img", ".", "max", "(", ")", "-", "img", ".", "min", "(", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_x", "=", "np", ".", "absolute", "(", "cv2", ".", "Sobel", "(", "mask", ",", "cv2", ".", "CV_64F", ",", "1", ",", "0", ",", "self", ".", "kernel_size", ")", ")", "\n", "mask_y", "=", "np", ".", "absolute", "(", "cv2", ".", "Sobel", "(", "mask", ",", "cv2", ".", "CV_64F", ",", "0", ",", "1", ",", "self", ".", "kernel_size", ")", ")", "\n", "mask", "=", "mask_x", "+", "mask_y", "\n", "\n", "return", "(", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'L'", ")", ",", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "'L'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomElasticTransform.__init__": [[398, 402], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "3", ",", "sigma", "=", "0.07", ",", "img_type", "=", "'L'", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "img_type", "=", "img_type", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomElasticTransform._elastic_transform": [[403, 431], ["numpy.array", "numpy.array", "numpy.meshgrid", "cv2.convertMaps", "cv2.convertMaps", "cv2.convertMaps", "cv2.convertMaps", "cv2.remap().reshape", "cv2.remap().reshape", "cv2.remap().reshape", "cv2.remap().reshape", "cv2.remap().reshape", "cv2.remap().reshape", "cv2.remap().reshape", "cv2.remap().reshape", "numpy.arange", "numpy.arange", "int", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "cv2.GaussianBlur", "numpy.meshgrid", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.arange", "numpy.arange", "cv2.remap", "cv2.remap", "cv2.remap", "cv2.remap", "cv2.remap", "cv2.remap", "cv2.remap", "cv2.remap", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "_elastic_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "\n", "# convert to numpy", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "# hxwxc", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "shape1", "=", "img", ".", "shape", "\n", "\n", "alpha", "=", "self", ".", "alpha", "*", "shape1", "[", "0", "]", "\n", "sigma", "=", "self", ".", "sigma", "*", "shape1", "[", "0", "]", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "shape1", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "shape1", "[", "1", "]", ")", ",", "indexing", "=", "'ij'", ")", "\n", "blur_size", "=", "int", "(", "4", "*", "sigma", ")", "|", "1", "\n", "dx", "=", "cv2", ".", "GaussianBlur", "(", "(", "np", ".", "random", ".", "rand", "(", "shape1", "[", "0", "]", ",", "shape1", "[", "1", "]", ")", "*", "2", "-", "1", ")", ",", "ksize", "=", "(", "blur_size", ",", "blur_size", ")", ",", "sigmaX", "=", "sigma", ")", "*", "alpha", "\n", "dy", "=", "cv2", ".", "GaussianBlur", "(", "(", "np", ".", "random", ".", "rand", "(", "shape1", "[", "0", "]", ",", "shape1", "[", "1", "]", ")", "*", "2", "-", "1", ")", ",", "ksize", "=", "(", "blur_size", ",", "blur_size", ")", ",", "sigmaX", "=", "sigma", ")", "*", "alpha", "\n", "\n", "if", "(", "x", "is", "None", ")", "or", "(", "y", "is", "None", ")", ":", "\n", "            ", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "shape1", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "shape1", "[", "1", "]", ")", ",", "indexing", "=", "'ij'", ")", "\n", "\n", "", "map_x", "=", "(", "x", "+", "dx", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "map_y", "=", "(", "y", "+", "dy", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# convert map", "\n", "map_x", ",", "map_y", "=", "cv2", ".", "convertMaps", "(", "map_x", ",", "map_y", ",", "cv2", ".", "CV_16SC2", ")", "\n", "\n", "img", "=", "cv2", ".", "remap", "(", "img", ",", "map_y", ",", "map_x", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ",", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ")", ".", "reshape", "(", "shape1", ")", "\n", "mask", "=", "cv2", ".", "remap", "(", "mask", ",", "map_y", ",", "map_x", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ",", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ")", ".", "reshape", "(", "shape1", ")", "\n", "\n", "return", "(", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "self", ".", "img_type", ")", ",", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "'L'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomElasticTransform.__call__": [[432, 443], ["random.random", "augmentation.RandomElasticTransform._elastic_transform"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.RandomElasticTransform._elastic_transform"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Elastic deformation of images as described in [Simard2003]_.\n        .. [Simard2003] Simard, Steinkraus and Platt, \"Best Practices for\n           Convolutional Neural Networks applied to Visual Document Analysis\", in\n           Proc. of the International Conference on Document Analysis and\n           Recognition, 2003.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "self", ".", "_elastic_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.augmentation.smooth_images": [[450, 465], ["range", "len", "SimpleITK.GetImageFromArray", "SimpleITK.CurvatureFlow", "SimpleITK.GetArrayFromImage"], "function", ["None"], ["def", "smooth_images", "(", "imgs", ",", "t_step", "=", "0.125", ",", "n_iter", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Curvature driven image denoising.\n    In my experience helps significantly with segmentation.\n    \"\"\"", "\n", "\n", "for", "mm", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "img", "=", "sitk", ".", "GetImageFromArray", "(", "imgs", "[", "mm", "]", ")", "\n", "img", "=", "sitk", ".", "CurvatureFlow", "(", "image1", "=", "img", ",", "\n", "timeStep", "=", "t_step", ",", "\n", "numberOfIterations", "=", "n_iter", ")", "\n", "\n", "imgs", "[", "mm", "]", "=", "sitk", ".", "GetArrayFromImage", "(", "img", ")", "\n", "\n", "", "return", "imgs", "\n", "", ""]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.resize_image": [[25, 30], ["skimage.transform.resize", "int", "int", "int", "numpy.round", "numpy.round", "numpy.round", "float", "float", "float"], "function", ["None"], ["def", "resize_image", "(", "image", ",", "old_spacing", ",", "new_spacing", ",", "order", "=", "3", ")", ":", "\n", "    ", "new_shape", "=", "(", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "0", "]", "/", "new_spacing", "[", "0", "]", "*", "float", "(", "image", ".", "shape", "[", "0", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "1", "]", "/", "new_spacing", "[", "1", "]", "*", "float", "(", "image", ".", "shape", "[", "1", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "round", "(", "old_spacing", "[", "2", "]", "/", "new_spacing", "[", "2", "]", "*", "float", "(", "image", ".", "shape", "[", "2", "]", ")", ")", ")", ")", "\n", "return", "resize", "(", "image", ",", "new_shape", ",", "order", "=", "order", ",", "mode", "=", "'edge'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.convert_to_one_hot": [[45, 51], ["numpy.unique", "numpy.zeros", "range", "len", "list", "len"], "function", ["None"], ["", "def", "convert_to_one_hot", "(", "seg", ")", ":", "\n", "    ", "vals", "=", "np", ".", "unique", "(", "seg", ")", "\n", "res", "=", "np", ".", "zeros", "(", "[", "len", "(", "vals", ")", "]", "+", "list", "(", "seg", ".", "shape", ")", ",", "seg", ".", "dtype", ")", "\n", "for", "c", "in", "range", "(", "len", "(", "vals", ")", ")", ":", "\n", "        ", "res", "[", "c", "]", "[", "seg", "==", "c", "]", "=", "1", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.preprocess_image": [[53, 74], ["SimpleITK.GetArrayFromImage().astype", "numpy.array", "list", "resize_image().astype", "resize_image().astype.mean", "resize_image().astype.std", "generate_acdc.convert_to_one_hot", "numpy.unique", "range", "itk_image.GetSpacing", "SimpleITK.GetArrayFromImage", "len", "results.append", "generate_acdc.resize_image", "numpy.vstack().argmax", "generate_acdc.resize_image", "tmp[].astype", "numpy.vstack", "numpy.np.float32"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.convert_to_one_hot", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.resize_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.resize_image"], ["", "def", "preprocess_image", "(", "itk_image", ",", "is_seg", "=", "False", ",", "spacing_target", "=", "(", "1", ",", "0.5", ",", "0.5", ")", ",", "keep_z_spacing", "=", "False", ")", ":", "\n", "    ", "spacing", "=", "np", ".", "array", "(", "itk_image", ".", "GetSpacing", "(", ")", ")", "[", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "image", "=", "sitk", ".", "GetArrayFromImage", "(", "itk_image", ")", ".", "astype", "(", "float", ")", "\n", "if", "keep_z_spacing", ":", "\n", "        ", "spacing_target", "=", "list", "(", "spacing_target", ")", "\n", "spacing_target", "[", "0", "]", "=", "spacing", "[", "0", "]", "\n", "", "if", "not", "is_seg", ":", "\n", "        ", "order_img", "=", "3", "\n", "if", "not", "keep_z_spacing", ":", "\n", "            ", "order_img", "=", "1", "\n", "", "image", "=", "resize_image", "(", "image", ",", "spacing", ",", "spacing_target", ",", "order", "=", "order_img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", "-=", "image", ".", "mean", "(", ")", "\n", "image", "/=", "image", ".", "std", "(", ")", "\n", "", "else", ":", "\n", "        ", "tmp", "=", "convert_to_one_hot", "(", "image", ")", "\n", "vals", "=", "np", ".", "unique", "(", "image", ")", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "resize_image", "(", "tmp", "[", "i", "]", ".", "astype", "(", "float", ")", ",", "spacing", ",", "spacing_target", ",", "1", ")", "[", "None", "]", ")", "\n", "", "image", "=", "vals", "[", "np", ".", "vstack", "(", "results", ")", ".", "argmax", "(", "0", ")", "]", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.load_dataset": [[76, 93], ["range", "open", "pickle.load", "os.path.isfile", "os.path.join", "os.path.join", "numpy.load", "os.path.join"], "function", ["None"], ["", "def", "load_dataset", "(", "ids", "=", "range", "(", "101", ")", ",", "root_dir", "=", "\"/home/fabian/drives/E132-Projekte/ACDC/new_dataset_preprocessed_for_2D_v2/\"", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"patient_info.pkl\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "patient_info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "data", "=", "{", "}", "\n", "for", "i", "in", "ids", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"pat_%03.0d.npy\"", "%", "i", ")", ")", ":", "\n", "            ", "a", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"pat_%03.0d.npy\"", "%", "i", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "data", "[", "i", "]", "=", "{", "}", "\n", "data", "[", "i", "]", "[", "'height'", "]", "=", "patient_info", "[", "i", "]", "[", "'height'", "]", "\n", "data", "[", "i", "]", "[", "'weight'", "]", "=", "patient_info", "[", "i", "]", "[", "'weight'", "]", "\n", "data", "[", "i", "]", "[", "'pathology'", "]", "=", "patient_info", "[", "i", "]", "[", "'pathology'", "]", "\n", "data", "[", "i", "]", "[", "'ed_data'", "]", "=", "a", "[", "0", ",", ":", "]", "\n", "data", "[", "i", "]", "[", "'ed_gt'", "]", "=", "a", "[", "1", ",", ":", "]", "\n", "data", "[", "i", "]", "[", "'es_data'", "]", "=", "a", "[", "2", ",", ":", "]", "\n", "data", "[", "i", "]", "[", "'es_gt'", "]", "=", "a", "[", "3", ",", ":", "]", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.process_patient": [[94, 138], ["os.path.join", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "print", "images.keys", "os.mkdir", "numpy.vstack", "numpy.save", "numpy.vstack", "numpy.save", "os.path.isdir", "SimpleITK.ReadImage", "SimpleITK.ReadImage", "SimpleITK.ReadImage", "SimpleITK.ReadImage", "generate_acdc.preprocess_image", "img_as_list.append", "numpy.vstack", "os.path.join", "os.path.join", "np.vstack.astype", "os.path.join", "np.vstack.astype", "images.keys", "print", "print", "images[].GetSpacing"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.preprocess_image", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "def", "process_patient", "(", "args", ")", ":", "\n", "    ", "id", ",", "patient_info", ",", "folder", ",", "folder_out", ",", "keep_z_spc", "=", "args", "\n", "#print id", "\n", "# if id in [286, 288]:", "\n", "#     return", "\n", "patient_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "\"patient%03.0d\"", "%", "id", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "patient_folder", ")", ":", "\n", "        ", "return", "\n", "", "images", "=", "{", "}", "\n", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "patient_folder", ",", "\"patient%03.0d_frame%02.0d.nii.gz\"", "%", "(", "id", ",", "patient_info", "[", "id", "]", "[", "'ed'", "]", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "        ", "images", "[", "\"ed\"", "]", "=", "sitk", ".", "ReadImage", "(", "fname", ")", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "patient_folder", ",", "\"patient%03.0d_frame%02.0d_gt.nii.gz\"", "%", "(", "id", ",", "patient_info", "[", "id", "]", "[", "'ed'", "]", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "        ", "images", "[", "\"ed_seg\"", "]", "=", "sitk", ".", "ReadImage", "(", "fname", ")", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "patient_folder", ",", "\"patient%03.0d_frame%02.0d.nii.gz\"", "%", "(", "id", ",", "patient_info", "[", "id", "]", "[", "'es'", "]", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "        ", "images", "[", "\"es\"", "]", "=", "sitk", ".", "ReadImage", "(", "fname", ")", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "patient_folder", ",", "\"patient%03.0d_frame%02.0d_gt.nii.gz\"", "%", "(", "id", ",", "patient_info", "[", "id", "]", "[", "'es'", "]", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "        ", "images", "[", "\"es_seg\"", "]", "=", "sitk", ".", "ReadImage", "(", "fname", ")", "\n", "\n", "", "print", "(", "f'{id}, {images[\"es_seg\"].GetSpacing()}'", ")", "\n", "\n", "for", "k", "in", "images", ".", "keys", "(", ")", ":", "\n", "#print k", "\n", "        ", "images", "[", "k", "]", "=", "preprocess_image", "(", "images", "[", "k", "]", ",", "is_seg", "=", "(", "k", "==", "\"ed_seg\"", "or", "k", "==", "\"es_seg\"", ")", ",", "\n", "spacing_target", "=", "(", "10", ",", "1.25", ",", "1.25", ")", ",", "keep_z_spacing", "=", "keep_z_spc", ")", "\n", "\n", "", "img_as_list", "=", "[", "]", "\n", "for", "k", "in", "[", "'ed'", ",", "'ed_seg'", ",", "'es'", ",", "'es_seg'", "]", ":", "\n", "        ", "if", "k", "not", "in", "images", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "f'{id}, has missing key: {k}'", ")", "\n", "", "img_as_list", ".", "append", "(", "images", "[", "k", "]", "[", "None", "]", ")", "\n", "", "try", ":", "\n", "        ", "all_img", "=", "np", ".", "vstack", "(", "img_as_list", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "f'{id}, has a problem with spacings'", ")", "\n", "", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "folder_out", ",", "\"patient_%03.0d\"", "%", "id", ")", ")", "\n", "all_img", "=", "np", ".", "vstack", "(", "img_as_list", "[", ":", "2", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder_out", ",", "\"patient_%03.0d\"", "%", "id", ",", "'frame_%02.0d'", "%", "patient_info", "[", "id", "]", "[", "'ed'", "]", ")", ",", "all_img", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "all_img", "=", "np", ".", "vstack", "(", "img_as_list", "[", "-", "2", ":", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder_out", ",", "\"patient_%03.0d\"", "%", "id", ",", "'frame_%02.0d'", "%", "patient_info", "[", "id", "]", "[", "'es'", "]", ")", ",", "all_img", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.process_patient_video": [[139, 159], ["os.path.join", "os.path.join", "os.path.isfile", "print", "os.mkdir", "range", "os.path.isdir", "SimpleITK.ReadImage", "os.path.join", "sitk.ReadImage.GetSize", "generate_acdc.preprocess_image", "numpy.save", "os.path.join", "preprocess_image.astype", "sitk.ReadImage.GetSpacing"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.preprocess_image"], ["", "def", "process_patient_video", "(", "args", ")", ":", "\n", "    ", "id", ",", "patient_info", ",", "folder", ",", "folder_out", ",", "keep_z_spc", "=", "args", "\n", "#print id", "\n", "# if id in [286, 288]:", "\n", "#     return", "\n", "patient_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "\"patient%03.0d\"", "%", "id", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "patient_folder", ")", ":", "\n", "        ", "return", "\n", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "patient_folder", ",", "\"patient%03.0d_4d.nii.gz\"", "%", "(", "id", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "        ", "images", "=", "sitk", ".", "ReadImage", "(", "fname", ")", "\n", "\n", "", "print", "(", "f'{id}, {images.GetSpacing()}'", ")", "\n", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "folder_out", ",", "\"patient_%03.0d\"", "%", "id", ")", ")", "\n", "slices", "=", "images", ".", "GetSize", "(", ")", "[", "3", "]", "\n", "for", "k", "in", "range", "(", "slices", ")", ":", "\n", "        ", "image", "=", "preprocess_image", "(", "images", "[", ":", ",", ":", ",", ":", ",", "k", "]", ",", "is_seg", "=", "False", ",", "spacing_target", "=", "(", "10", ",", "1.25", ",", "1.25", ")", ",", "keep_z_spacing", "=", "keep_z_spc", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder_out", ",", "\"patient_%03.0d\"", "%", "id", ",", "'frame_%02.0d'", "%", "k", ")", ",", "image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.generate_patient_info": [[160, 175], ["range", "os.path.join", "numpy.loadtxt", "int", "int", "float", "float", "os.path.isdir", "print", "os.path.join"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print"], ["", "", "def", "generate_patient_info", "(", "folder", ")", ":", "\n", "    ", "patient_info", "=", "{", "}", "\n", "for", "id", "in", "range", "(", "101", ")", ":", "\n", "        ", "fldr", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'patient%03.0d'", "%", "id", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "fldr", ")", ":", "\n", "            ", "print", "(", "f'could not find dir of patient, {id}'", ")", "\n", "continue", "\n", "", "nfo", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "fldr", ",", "\"Info.cfg\"", ")", ",", "dtype", "=", "str", ",", "delimiter", "=", "': '", ")", "\n", "patient_info", "[", "id", "]", "=", "{", "}", "\n", "patient_info", "[", "id", "]", "[", "'ed'", "]", "=", "int", "(", "nfo", "[", "0", ",", "1", "]", ")", "\n", "patient_info", "[", "id", "]", "[", "'es'", "]", "=", "int", "(", "nfo", "[", "1", ",", "1", "]", ")", "\n", "patient_info", "[", "id", "]", "[", "'height'", "]", "=", "float", "(", "nfo", "[", "3", ",", "1", "]", ")", "\n", "patient_info", "[", "id", "]", "[", "'pathology'", "]", "=", "nfo", "[", "2", ",", "1", "]", "\n", "patient_info", "[", "id", "]", "[", "'weight'", "]", "=", "float", "(", "nfo", "[", "5", ",", "1", "]", ")", "\n", "", "return", "patient_info", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.run_preprocessing_labeled": [[177, 194], ["print", "generate_acdc.generate_patient_info", "range", "multiprocessing.pool.Pool", "pool.Pool.map", "pool.Pool.close", "pool.Pool.join", "os.path.isdir", "os.mkdir", "open", "pickle.dump", "zip", "os.path.join"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.generate_patient_info"], ["", "def", "run_preprocessing_labeled", "(", "folder", "=", "\"/media/fabian/My Book/datasets/ACDC/training/\"", ",", "\n", "folder_out", "=", "\"/media/fabian/DeepLearningData/datasets/ACDC_forReal_orig_Z/\"", ",", "keep_z_spacing", "=", "True", ")", ":", "\n", "\n", "    ", "print", "(", "'start processing labeled data...'", ")", "\n", "patient_info", "=", "generate_patient_info", "(", "folder", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder_out", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "folder_out", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder_out", ",", "\"patient_info.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "patient_info", ",", "f", ")", "\n", "\n", "# beware of z spacing!!! see process_patient for more info!", "\n", "", "ids", "=", "range", "(", "101", ")", "\n", "p", "=", "pool", ".", "Pool", "(", "8", ")", "\n", "p", ".", "map", "(", "process_patient", ",", "zip", "(", "ids", ",", "[", "patient_info", "]", "*", "101", ",", "[", "folder", "]", "*", "101", ",", "[", "folder_out", "]", "*", "101", ",", "[", "keep_z_spacing", "]", "*", "101", ")", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.run_preprocessing_unlabeled": [[195, 212], ["print", "generate_acdc.generate_patient_info", "range", "multiprocessing.pool.Pool", "pool.Pool.map", "pool.Pool.close", "pool.Pool.join", "os.path.isdir", "os.mkdir", "open", "pickle.dump", "zip", "os.path.join"], "function", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.None.experiment_log.PytorchExperimentLogger.print", "home.repos.pwc.inspect_result.dewenzeng_positional_cl.dataset.generate_acdc.generate_patient_info"], ["", "def", "run_preprocessing_unlabeled", "(", "folder", "=", "\"/media/fabian/My Book/datasets/ACDC/training/\"", ",", "\n", "folder_out", "=", "\"/media/fabian/DeepLearningData/datasets/ACDC_forReal_orig_Z/\"", ",", "keep_z_spacing", "=", "True", ")", ":", "\n", "\n", "    ", "print", "(", "'start processing unlabeled data...'", ")", "\n", "patient_info", "=", "generate_patient_info", "(", "folder", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder_out", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "folder_out", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder_out", ",", "\"patient_info.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "patient_info", ",", "f", ")", "\n", "\n", "# beware of z spacing!!! see process_patient for more info!", "\n", "", "ids", "=", "range", "(", "101", ")", "\n", "p", "=", "pool", ".", "Pool", "(", "8", ")", "\n", "p", ".", "map", "(", "process_patient_video", ",", "zip", "(", "ids", ",", "[", "patient_info", "]", "*", "101", ",", "[", "folder", "]", "*", "101", ",", "[", "folder_out", "]", "*", "101", ",", "[", "keep_z_spacing", "]", "*", "101", ")", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss.__init__": [[11, 20], ["torch.Module.__init__", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss.__init__"], ["def", "__init__", "(", "self", ",", "threshold", "=", "0.1", ",", "temperature", "=", "0.07", ",", "contrast_mode", "=", "'all'", ",", "\n", "base_temperature", "=", "0.07", ",", "contrastive_method", "=", "'simclr'", ")", ":", "\n", "        ", "super", "(", "SupConLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "contrast_mode", "=", "contrast_mode", "\n", "self", ".", "base_temperature", "=", "base_temperature", "\n", "self", ".", "_cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "contrastive_method", "=", "contrastive_method", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss._cosine_simililarity": [[21, 27], ["contrast_loss.SupConLoss._cosine_similarity", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "_cosine_simililarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, N, C)", "\n", "# v shape: (N, N)", "\n", "        ", "v", "=", "self", ".", "_cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss.forward": [[28, 103], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.eq().float().to.repeat", "torch.eq().float().to.repeat", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "loss.view().mean.view().mean.view().mean", "len", "ValueError", "len", "features.view.view.view", "ValueError", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "contrast_loss.SupConLoss._cosine_simililarity", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.eq().float().to.sum", "torch.eq().float().to.sum", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ValueError", "exp_logits.sum", "loss.view().mean.view().mean.view", "labels.contiguous().view.contiguous().view.contiguous().view", "torch.eq().float().to.float().to", "torch.eq().float().to.float().to", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ValueError", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "labels.contiguous().view.contiguous().view.contiguous", "torch.eq().float().to.float", "torch.eq().float().to.float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "labels.contiguous().view.contiguous().view.T.repeat", "labels.contiguous().view.contiguous().view.repeat"], "methods", ["home.repos.pwc.inspect_result.dewenzeng_positional_cl.loss.contrast_loss.SupConLoss._cosine_simililarity"], ["", "def", "forward", "(", "self", ",", "features", ",", "labels", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Compute loss for model. If both `labels` and `mask` are None,\n        it degenerates to SimCLR unsupervised loss:\n        https://arxiv.org/pdf/2002.05709.pdf\n\n        Args:\n            features: hidden vector of shape [bsz, n_views, ...].\n            labels: ground truth of shape [bsz].\n            mask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j\n                has the same class as sample i. Can be asymmetric.\n        Returns:\n            A loss scalar.\n        \"\"\"", "\n", "device", "=", "features", ".", "device", "\n", "\n", "if", "len", "(", "features", ".", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_views, ...],'", "\n", "'at least 3 dimensions are required'", ")", "\n", "", "if", "len", "(", "features", ".", "shape", ")", ">", "3", ":", "\n", "            ", "features", "=", "features", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "features", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "", "batch_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "if", "labels", "is", "not", "None", "and", "mask", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot define both `labels` and `mask`'", ")", "\n", "", "elif", "labels", "is", "None", "and", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "labels", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                ", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "", "if", "self", ".", "contrastive_method", "==", "'gcl'", ":", "\n", "                ", "mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "T", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "self", ".", "contrastive_method", "==", "'pcl'", ":", "\n", "                ", "mask", "=", "(", "torch", ".", "abs", "(", "labels", ".", "T", ".", "repeat", "(", "batch_size", ",", "1", ")", "-", "labels", ".", "repeat", "(", "1", ",", "batch_size", ")", ")", "<", "self", ".", "threshold", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "contrast_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "contrast_feature", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "features", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "contrast_mode", "==", "'one'", ":", "\n", "            ", "anchor_feature", "=", "features", "[", ":", ",", "0", "]", "\n", "anchor_count", "=", "1", "\n", "", "elif", "self", ".", "contrast_mode", "==", "'all'", ":", "\n", "            ", "anchor_feature", "=", "contrast_feature", "\n", "anchor_count", "=", "contrast_count", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode: {}'", ".", "format", "(", "self", ".", "contrast_mode", ")", ")", "\n", "\n", "# compute logits", "\n", "", "logits", "=", "torch", ".", "div", "(", "\n", "self", ".", "_cosine_simililarity", "(", "anchor_feature", ",", "contrast_feature", ")", ",", "\n", "self", ".", "temperature", ")", "\n", "# tile mask", "\n", "mask", "=", "mask", ".", "repeat", "(", "anchor_count", ",", "contrast_count", ")", "\n", "# mask-out self-contrast cases", "\n", "logits_mask", "=", "torch", ".", "scatter", "(", "\n", "torch", ".", "ones_like", "(", "mask", ")", ",", "\n", "1", ",", "\n", "torch", ".", "arange", "(", "batch_size", "*", "anchor_count", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ",", "\n", "0", "\n", ")", "\n", "mask", "=", "mask", "*", "logits_mask", "\n", "\n", "# compute log_prob", "\n", "exp_logits", "=", "torch", ".", "exp", "(", "logits", ")", "*", "logits_mask", "\n", "log_prob", "=", "logits", "-", "torch", ".", "log", "(", "exp_logits", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "# compute mean of log-likelihood over positive", "\n", "mean_log_prob_pos", "=", "(", "mask", "*", "log_prob", ")", ".", "sum", "(", "1", ")", "/", "mask", ".", "sum", "(", "1", ")", "\n", "\n", "# loss", "\n", "loss", "=", "-", "(", "self", ".", "temperature", "/", "self", ".", "base_temperature", ")", "*", "mean_log_prob_pos", "\n", "loss", "=", "loss", ".", "view", "(", "anchor_count", ",", "batch_size", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]]}