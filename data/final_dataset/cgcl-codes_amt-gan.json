{"home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.dataloder.MakeupDataloader.__init__": [[11, 18], ["tools.data_reader.DataReader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_path", ",", "preprocess", ":", "PreProcess", ",", "transform", ",", "transform_mask", ")", ":", "\n", "        ", "self", ".", "image_path", "=", "image_path", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "transform_mask", "=", "transform_mask", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "\n", "self", ".", "reader", "=", "DataReader", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.dataloder.MakeupDataloader.__getitem__": [[19, 34], ["dataloder.MakeupDataloader.reader.pick", "dataloder.MakeupDataloader.preprocess.relative2absolute", "dataloder.MakeupDataloader.preprocess.relative2absolute", "dataloder.MakeupDataloader.transform", "dataloder.MakeupDataloader.transform_mask", "dataloder.MakeupDataloader.transform", "dataloder.MakeupDataloader.transform_mask", "dataloder.MakeupDataloader.preprocess.process", "dataloder.MakeupDataloader.preprocess.process", "PIL.Image.fromarray", "PIL.Image.fromarray", "dataloder.MakeupDataloader.unsqueeze", "dataloder.MakeupDataloader.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.pick", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.relative2absolute", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.relative2absolute", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.process", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.process"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "(", "image_s", ",", "mask_s", ",", "lm_s", ")", ",", "(", "image_r", ",", "mask_r", ",", "lm_r", ")", "=", "self", ".", "reader", ".", "pick", "(", ")", "\n", "lm_s", "=", "self", ".", "preprocess", ".", "relative2absolute", "(", "lm_s", "/", "image_s", ".", "size", ")", "\n", "lm_r", "=", "self", ".", "preprocess", ".", "relative2absolute", "(", "lm_r", "/", "image_r", ".", "size", ")", "\n", "image_s", "=", "self", ".", "transform", "(", "image_s", ")", "\n", "mask_s", "=", "self", ".", "transform_mask", "(", "Image", ".", "fromarray", "(", "mask_s", ")", ")", "\n", "image_r", "=", "self", ".", "transform", "(", "image_r", ")", "\n", "mask_r", "=", "self", ".", "transform_mask", "(", "Image", ".", "fromarray", "(", "mask_r", ")", ")", "\n", "\n", "mask_s", ",", "dist_s", "=", "self", ".", "preprocess", ".", "process", "(", "\n", "mask_s", ".", "unsqueeze", "(", "0", ")", ",", "lm_s", ")", "\n", "mask_r", ",", "dist_r", "=", "self", ".", "preprocess", ".", "process", "(", "\n", "mask_r", ".", "unsqueeze", "(", "0", ")", ",", "lm_r", ")", "\n", "return", "[", "image_s", ",", "mask_s", ",", "dist_s", "]", ",", "[", "image_r", ",", "mask_r", ",", "dist_r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.dataloder.MakeupDataloader.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "reader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.dataloder.ToTensor": [[39, 58], ["torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "numpy.array", "torch.ByteStorage.from_buffer", "pic.tobytes", "torch.ByteTensor.transpose"], "function", ["None"], ["", "", "def", "ToTensor", "(", "pic", ")", ":", "\n", "    ", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "        ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "        ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "        ", "return", "img", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.dataloder.get_loader": [[59, 75], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataloder.MakeupDataloader", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "backbone.preprocess.PreProcess"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.ToTensor"], ["", "", "def", "get_loader", "(", "config", ",", "mode", "=", "\"train\"", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "config", ".", "DATA", ".", "IMG_SIZE", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", ")", "\n", "transform_mask", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "config", ".", "DATA", ".", "IMG_SIZE", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", ",", "\n", "ToTensor", "]", ")", "\n", "\n", "dataset", "=", "MakeupDataloader", "(", "\n", "config", ".", "DATA", ".", "PATH", ",", "transform", "=", "transform", ",", "\n", "transform_mask", "=", "transform_mask", ",", "preprocess", "=", "PreProcess", "(", "config", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "config", ".", "DATA", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "DATA", ".", "NUM_WORKERS", ")", "\n", "return", "dataloader", "\n", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.setup.setup_argparser": [[4, 9], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "setup_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "\"configs.yaml\"", ",", "metavar", "=", "\"FILE\"", ",", "help", "=", "\"path to config file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.setup.setup_config": [[10, 16], ["backbone.get_config", "backbone.get_config.merge_from_file", "backbone.get_config.merge_from_list", "backbone.get_config.freeze"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.config.get_config"], ["", "def", "setup_config", "(", "args", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "config", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "config", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.train.train_net": [[9, 18], ["dataloder.get_loader", "utils.read_img", "backbone.solver.Solver", "backbone.solver.Solver.train"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.dataloder.get_loader", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.read_img", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.train"], ["def", "train_net", "(", "config", ")", ":", "\n", "# change this dir to attack different identities", "\n", "    ", "TARGET_PATH", "=", "'./assets/datasets/target/085807.jpg'", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "data_loader", "=", "get_loader", "(", "config", ")", "\n", "target_image", "=", "read_img", "(", "TARGET_PATH", ",", "0.5", ",", "0.5", ",", "config", ".", "DEVICE", ".", "device", ")", "\n", "solver", "=", "Solver", "(", "config", ",", "target_image", ",", "data_loader", "=", "data_loader", ")", "\n", "solver", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.test.generate": [[14, 44], ["setup.setup_argparser", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.parse_args", "setup.setup_config", "backbone.Inference", "backbone.PostProcess", "os.listdir", "os.listdir", "tqdm.tqdm", "print", "os.path.join.replace", "os.path.join", "PIL.Image.open().convert", "os.path.abspath", "os.path.join", "PIL.Image.open().convert", "backbone.Inference.transfer", "Image.open().convert.crop", "backbone.PostProcess.", "os.path.join", "os.path.join", "postprocess.save", "PIL.Image.open", "os.path.join.split", "os.path.exists", "os.makedirs", "PIL.Image.open", "face.left", "face.top", "face.right", "face.bottom"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.setup.setup_argparser", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.setup.setup_config", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.inference.Inference.transfer", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save"], ["def", "generate", "(", ")", ":", "\n", "    ", "parser", "=", "setup_argparser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--source_dir\"", ",", "default", "=", "\"assets/datasets/CelebA-HQ\"", ",", "help", "=", "\"path to source images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reference_dir\"", ",", "default", "=", "\"assets/datasets/reference\"", ",", "help", "=", "\"path to reference images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_path\"", ",", "default", "=", "\"assets/datasets/save\"", ",", "help", "=", "\"path to generated images\"", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ",", "help", "=", "'cuda device'", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_path\"", ",", "default", "=", "\"checkpoints/G.pth\"", ",", "help", "=", "\"model for loading\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "setup_config", "(", "args", ")", "\n", "inference", "=", "Inference", "(", "config", ",", "args", ".", "device", ",", "args", ".", "model_path", ")", "\n", "postprocess", "=", "PostProcess", "(", "config", ")", "\n", "source_paths", "=", "os", ".", "listdir", "(", "args", ".", "source_dir", ")", "\n", "reference_paths", "=", "os", ".", "listdir", "(", "args", ".", "reference_dir", ")", "\n", "for", "source_path", "in", "tqdm", "(", "source_paths", ")", ":", "\n", "        ", "source_name", "=", "source_path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "source_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "source_path", ")", "\n", "source", "=", "Image", ".", "open", "(", "source_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "for", "reference_path", "in", "reference_paths", ":", "\n", "            ", "reference_name", "=", "reference_path", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "reference_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "reference_dir", ",", "reference_path", ")", "\n", "reference", "=", "Image", ".", "open", "(", "reference_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "image", ",", "face", "=", "inference", ".", "transfer", "(", "source", ",", "reference", ",", "with_face", "=", "True", ")", "\n", "source_crop", "=", "source", ".", "crop", "(", "(", "face", ".", "left", "(", ")", ",", "face", ".", "top", "(", ")", ",", "face", ".", "right", "(", ")", ",", "face", ".", "bottom", "(", ")", ")", ")", "\n", "image", "=", "postprocess", "(", "source_crop", ",", "image", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "reference_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "save_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "reference_name", ",", "source_name", ")", "\n", "image", ".", "save", "(", "save_name", ")", "\n", "", "", "print", "(", "'Finished! Image saved in:'", ",", "os", ".", "path", ".", "abspath", "(", "args", ".", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.test.attack_local_models": [[45, 136], ["setup.setup_argparser", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.parse_args", "test_models.keys", "utils.read_img", "model", "print", "print", "test_models[].append", "assets.models.ir152.IR_152", "irse.MobileFaceNet.load_state_dict", "irse.MobileFaceNet.to", "irse.MobileFaceNet.eval", "test_models[].append", "test_models[].append", "assets.models.irse.Backbone", "irse.MobileFaceNet.load_state_dict", "irse.MobileFaceNet.to", "irse.MobileFaceNet.eval", "test_models[].append", "test_models[].append", "assets.models.facenet.InceptionResnetV1", "irse.MobileFaceNet.load_state_dict", "irse.MobileFaceNet.to", "irse.MobileFaceNet.eval", "test_models[].append", "test_models[].append", "assets.models.facenet.InceptionResnetV1", "irse.MobileFaceNet.load_state_dict", "irse.MobileFaceNet.to", "irse.MobileFaceNet.eval", "test_models[].append", "test_models[].append", "assets.models.irse.MobileFaceNet", "irse.MobileFaceNet.load_state_dict", "irse.MobileFaceNet.to", "irse.MobileFaceNet.eval", "test_models[].append", "torch.interpolate", "os.listdir", "tqdm.tqdm", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "tqdm.tqdm", "os.listdir", "utils.read_img", "model", "torch.cosine_similarity", "os.listdir", "utils.read_img", "model", "torch.cosine_similarity", "os.path.join", "torch.interpolate", "torch.cosine_similarity.item", "torch.cosine_similarity.item", "torch.cosine_similarity.item", "os.path.join", "torch.interpolate", "torch.cosine_similarity.item", "torch.cosine_similarity.item", "torch.cosine_similarity.item"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.setup.setup_argparser", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.read_img", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.read_img", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.read_img"], ["", "def", "attack_local_models", "(", "attack", "=", "True", ")", ":", "\n", "    ", "parser", "=", "setup_argparser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_path\"", ",", "default", "=", "\"assets/models\"", ",", "help", "=", "\"model path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_names\"", ",", "type", "=", "list", ",", "default", "=", "[", "'mobile_face'", "]", ",", "help", "=", "\"model for testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_path\"", ",", "default", "=", "\"assets/datasets/save\"", ",", "help", "=", "\"path to generated images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--clean_path\"", ",", "default", "=", "\"assets/datasets/CelebA-HQ\"", ",", "help", "=", "\"path to clean images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target_path\"", ",", "default", "=", "\"assets/datasets/test/047073.jpg\"", ",", "help", "=", "\"path to target images\"", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ",", "help", "=", "'cuda device'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "test_models", "=", "{", "}", "\n", "th_dict", "=", "{", "'ir152'", ":", "(", "0.094632", ",", "0.166788", ",", "0.227922", ")", ",", "'irse50'", ":", "(", "0.144840", ",", "0.241045", ",", "0.312703", ")", ",", "\n", "'facenet'", ":", "(", "0.256587", ",", "0.409131", ",", "0.591191", ")", ",", "'mobile_face'", ":", "(", "0.183635", ",", "0.301611", ",", "0.380878", ")", "}", "\n", "for", "model_name", "in", "args", ".", "model_names", ":", "\n", "        ", "if", "model_name", "==", "'ir152'", ":", "\n", "            ", "test_models", "[", "model_name", "]", "=", "[", "]", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", "=", "ir152", ".", "IR_152", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/ir152.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "args", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "fr_model", ")", "\n", "", "if", "model_name", "==", "'irse50'", ":", "\n", "            ", "test_models", "[", "model_name", "]", "=", "[", "]", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", "=", "irse", ".", "Backbone", "(", "50", ",", "0.6", ",", "'ir_se'", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/irse50.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "args", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "fr_model", ")", "\n", "", "if", "model_name", "==", "'facenet'", ":", "\n", "            ", "test_models", "[", "model_name", "]", "=", "[", "]", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "(", "160", ",", "160", ")", ")", "\n", "fr_model", "=", "facenet", ".", "InceptionResnetV1", "(", "num_classes", "=", "8631", ",", "device", "=", "args", ".", "device", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/facenet.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "args", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "fr_model", ")", "\n", "", "if", "model_name", "==", "'facenet'", ":", "\n", "            ", "test_models", "[", "model_name", "]", "=", "[", "]", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "(", "160", ",", "160", ")", ")", "\n", "fr_model", "=", "facenet", ".", "InceptionResnetV1", "(", "num_classes", "=", "8631", ",", "device", "=", "args", ".", "device", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/facenet.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "args", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "fr_model", ")", "\n", "", "if", "model_name", "==", "'mobile_face'", ":", "\n", "            ", "test_models", "[", "model_name", "]", "=", "[", "]", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", "=", "irse", ".", "MobileFaceNet", "(", "512", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/mobile_face.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "args", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "test_models", "[", "model_name", "]", ".", "append", "(", "fr_model", ")", "\n", "", "", "for", "test_model", "in", "test_models", ".", "keys", "(", ")", ":", "\n", "        ", "size", "=", "test_models", "[", "test_model", "]", "[", "0", "]", "\n", "model", "=", "test_models", "[", "test_model", "]", "[", "1", "]", "\n", "target", "=", "read_img", "(", "args", ".", "target_path", ",", "0.5", ",", "0.5", ",", "args", ".", "device", ")", "\n", "target_embbeding", "=", "model", "(", "(", "F", ".", "interpolate", "(", "target", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ")", ")", ")", "\n", "FAR01", "=", "0", "\n", "FAR001", "=", "0", "\n", "FAR0001", "=", "0", "\n", "total", "=", "0", "\n", "if", "attack", ":", "\n", "            ", "for", "ref", "in", "os", ".", "listdir", "(", "args", ".", "save_path", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "ref", ")", "\n", "for", "img", "in", "tqdm", "(", "os", ".", "listdir", "(", "path", ")", ",", "desc", "=", "test_model", "+", "' '", "+", "ref", ")", ":", "\n", "                    ", "adv_example", "=", "read_img", "(", "os", ".", "path", ".", "join", "(", "path", ",", "img", ")", ",", "0.5", ",", "0.5", ",", "args", ".", "device", ")", "\n", "ae_embbeding", "=", "model", "(", "(", "F", ".", "interpolate", "(", "adv_example", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ")", ")", ")", "\n", "cos_simi", "=", "torch", ".", "cosine_similarity", "(", "ae_embbeding", ",", "target_embbeding", ")", "\n", "if", "cos_simi", ".", "item", "(", ")", ">", "th_dict", "[", "test_model", "]", "[", "0", "]", ":", "\n", "                        ", "FAR01", "+=", "1", "\n", "", "if", "cos_simi", ".", "item", "(", ")", ">", "th_dict", "[", "test_model", "]", "[", "1", "]", ":", "\n", "                        ", "FAR001", "+=", "1", "\n", "", "if", "cos_simi", ".", "item", "(", ")", ">", "th_dict", "[", "test_model", "]", "[", "2", "]", ":", "\n", "                        ", "FAR0001", "+=", "1", "\n", "", "total", "+=", "1", "\n", "", "", "", "else", ":", "\n", "            ", "for", "img", "in", "tqdm", "(", "os", ".", "listdir", "(", "args", ".", "clean_path", ")", ",", "desc", "=", "test_model", "+", "' clean'", ")", ":", "\n", "                ", "adv_example", "=", "read_img", "(", "os", ".", "path", ".", "join", "(", "args", ".", "clean_path", ",", "img", ")", ",", "0.5", ",", "0.5", ",", "args", ".", "device", ")", "\n", "ae_embbeding", "=", "model", "(", "(", "F", ".", "interpolate", "(", "adv_example", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ")", ")", ")", "\n", "cos_simi", "=", "torch", ".", "cosine_similarity", "(", "ae_embbeding", ",", "target_embbeding", ")", "\n", "if", "cos_simi", ".", "item", "(", ")", ">", "th_dict", "[", "test_model", "]", "[", "0", "]", ":", "\n", "                    ", "FAR01", "+=", "1", "\n", "", "if", "cos_simi", ".", "item", "(", ")", ">", "th_dict", "[", "test_model", "]", "[", "1", "]", ":", "\n", "                    ", "FAR001", "+=", "1", "\n", "", "if", "cos_simi", ".", "item", "(", ")", ">", "th_dict", "[", "test_model", "]", "[", "2", "]", ":", "\n", "                    ", "FAR0001", "+=", "1", "\n", "", "total", "+=", "1", "\n", "", "", "print", "(", "'Is Adversarial Attack:'", ",", "attack", ")", "\n", "print", "(", "test_model", ",", "\"ASR in FAR@0.1: {:.4f}, ASR in FAR@0.01: {:.4f}, ASR in FAR@0.001: {:.4f}\"", ".", "\n", "format", "(", "FAR01", "/", "total", ",", "FAR001", "/", "total", ",", "FAR0001", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.test.attack_faceplusplus": [[137, 182], ["setup.setup_argparser", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.add_argument", "setup.setup_argparser.parse_args", "os.path.abspath", "os.listdir", "print", "print", "tqdm.tqdm", "print", "print", "os.path.join", "tqdm.tqdm", "os.listdir", "os.path.join", "time.sleep", "requests.post", "requests.post.content.decode", "json.JSONDecoder().decode", "os.listdir", "os.path.join", "time.sleep", "requests.post", "requests.post.content.decode", "json.JSONDecoder().decode", "open", "open", "JSONDecoder().decode.keys", "test.attack_faceplusplus", "open", "open", "JSONDecoder().decode.keys", "test.attack_faceplusplus", "json.JSONDecoder", "json.JSONDecoder"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.setup.setup_argparser", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.test.attack_faceplusplus", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.test.attack_faceplusplus"], ["", "", "def", "attack_faceplusplus", "(", "attack", "=", "True", ")", ":", "\n", "    ", "parser", "=", "setup_argparser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_path\"", ",", "default", "=", "\"assets/datasets/save\"", ",", "help", "=", "\"path to generated images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--clean_path\"", ",", "default", "=", "\"assets/datasets/CelebA-HQ\"", ",", "help", "=", "\"path to clean images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target_path\"", ",", "default", "=", "\"assets/datasets/test/047073.jpg\"", ",", "help", "=", "\"path to target images\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "http_url", "=", "'https://api-cn.faceplusplus.com/facepp/v3/compare'", "\n", "key", "=", "\"quNUu3n1OX_DUd1qlALK5HH4FNgrL3v3\"", "# your own api key here", "\n", "secret", "=", "\"xBVStWvFZDnKiDfMSGTHrZ-Zq_6S-f4B\"", "# your own api secret here", "\n", "data", "=", "{", "\"api_key\"", ":", "key", ",", "\"api_secret\"", ":", "secret", "}", "\n", "target_name", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "target_path", ")", "\n", "confidence", "=", "0", "\n", "total", "=", "0", "\n", "if", "attack", ":", "\n", "        ", "for", "ref", "in", "os", ".", "listdir", "(", "args", ".", "save_path", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "ref", ")", "\n", "for", "img", "in", "tqdm", "(", "os", ".", "listdir", "(", "path", ")", ",", "desc", "=", "'Faceplusplus '", "+", "ref", ")", ":", "\n", "                ", "source_name", "=", "os", ".", "path", ".", "join", "(", "path", ",", "img", ")", "\n", "files", "=", "{", "\"image_file1\"", ":", "open", "(", "source_name", ",", "\"rb\"", ")", ",", "\"image_file2\"", ":", "open", "(", "target_name", ",", "\"rb\"", ")", "}", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "response", "=", "requests", ".", "post", "(", "http_url", ",", "data", "=", "data", ",", "files", "=", "files", ")", "\n", "req_con", "=", "response", ".", "content", ".", "decode", "(", "'utf-8'", ")", "\n", "req_dict", "=", "JSONDecoder", "(", ")", ".", "decode", "(", "req_con", ")", "\n", "if", "'confidence'", "in", "req_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "confidence", "+=", "req_dict", "[", "'confidence'", "]", "\n", "total", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "attack_faceplusplus", "(", "attack", ")", "\n", "", "", "", "print", "(", "'Is Adversarial Attack:'", ",", "attack", ")", "\n", "print", "(", "'Face++ confidence: {:.4f}'", ".", "format", "(", "confidence", "/", "total", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "img", "in", "tqdm", "(", "os", ".", "listdir", "(", "args", ".", "clean_path", ")", ",", "desc", "=", "'Faceplusplus clean'", ")", ":", "\n", "            ", "source_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "clean_path", ",", "img", ")", "\n", "files", "=", "{", "\"image_file1\"", ":", "open", "(", "source_name", ",", "\"rb\"", ")", ",", "\"image_file2\"", ":", "open", "(", "target_name", ",", "\"rb\"", ")", "}", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "response", "=", "requests", ".", "post", "(", "http_url", ",", "data", "=", "data", ",", "files", "=", "files", ")", "\n", "req_con", "=", "response", ".", "content", ".", "decode", "(", "'utf-8'", ")", "\n", "req_dict", "=", "JSONDecoder", "(", ")", ".", "decode", "(", "req_con", ")", "\n", "if", "'confidence'", "in", "req_dict", ".", "keys", "(", ")", ":", "\n", "                ", "confidence", "+=", "req_dict", "[", "'confidence'", "]", "\n", "total", "+=", "1", "\n", "", "else", ":", "\n", "                ", "attack_faceplusplus", "(", "attack", ")", "\n", "", "", "print", "(", "'Is Adversarial Attack:'", ",", "attack", ")", "\n", "print", "(", "'Face++ confidence: {:.4f}'", ".", "format", "(", "confidence", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.preprocess": [[4, 16], ["torch.tensor().to", "mean.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "torch.tensor().to", "std.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "len", "im.transpose().transpose.transpose().transpose().unsqueeze", "im.transpose().transpose.size", "len", "im.transpose().transpose.transpose().transpose", "torch.tensor", "mean.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.tensor", "std.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "im.transpose().transpose.transpose().transpose", "im.transpose().transpose.size", "im.transpose().transpose.transpose", "mean.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "std.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "im.transpose().transpose.transpose"], "function", ["None"], ["def", "preprocess", "(", "im", ",", "mean", ",", "std", ",", "device", ")", ":", "\n", "    ", "if", "len", "(", "im", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "        ", "im", "=", "im", ".", "transpose", "(", "0", ",", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "len", "(", "im", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "        ", "im", "=", "im", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "", "mean", "=", "torch", ".", "tensor", "(", "mean", ")", ".", "to", "(", "device", ")", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ")", ".", "to", "(", "device", ")", "\n", "std", "=", "std", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "im", "=", "(", "im", "-", "mean", ")", "/", "std", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.read_img": [[17, 23], ["cv2.imread", "torch.from_numpy().to().to", "utils.preprocess", "cv2.cvtColor", "torch.from_numpy().to", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.preprocess"], ["", "def", "read_img", "(", "data_dir", ",", "mean", ",", "std", ",", "device", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "data_dir", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "/", "255", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "img", "=", "preprocess", "(", "img", ",", "mean", ",", "std", ",", "device", ")", "\n", "return", "img", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.plot.tick": [[12, 14], ["None"], "function", ["None"], ["def", "tick", "(", ")", ":", "\n", "    ", "_iter", "[", "0", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.plot.plot": [[15, 17], ["None"], "function", ["None"], ["", "def", "plot", "(", "name", ",", "value", ")", ":", "\n", "    ", "_since_last_flush", "[", "name", "]", "[", "_iter", "[", "0", "]", "]", "=", "value", "\n", "#print(_since_last_flush)", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.plot.flush": [[19, 49], ["_since_last_flush.items", "_since_beginning[].update", "numpy.sort", "matplotlib.clf", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "os.makedirs", "matplotlib.savefig", "list", "os.path.join", "os.path.join", "_since_beginning[].keys"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.plot.plot"], ["", "def", "flush", "(", "log_dir", ")", ":", "\n", "    ", "prints", "=", "[", "]", "\n", "for", "name", ",", "vals", "in", "_since_last_flush", ".", "items", "(", ")", ":", "\n", "#prints.append(\"{}\\t{}\".format(name, np.mean(vals.values())))", "\n", "        ", "_since_beginning", "[", "name", "]", ".", "update", "(", "vals", ")", "\n", "\"\"\"\n        print(name)\n        print(\"#######################\")\n        print(_since_beginning[name])\n        print(\"#######################\")\n        print(_since_beginning[name].keys())\n        print(\"#######################\")\n        print(list(_since_beginning[name].keys()))\n        print(\"#######################\")\n        \"\"\"", "\n", "x_vals", "=", "np", ".", "sort", "(", "list", "(", "_since_beginning", "[", "name", "]", ".", "keys", "(", ")", ")", ")", "\n", "y_vals", "=", "[", "_since_beginning", "[", "name", "]", "[", "x", "]", "for", "x", "in", "x_vals", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "x_vals", ",", "y_vals", ")", "\n", "plt", ".", "xlabel", "(", "'iteration'", ")", "\n", "plt", ".", "ylabel", "(", "name", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "log_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "name", "+", "'.png'", ")", ")", "\n", "", "\"\"\"\n    print \"iter {}\\t{}\".format(_iter[0], \"\\t\".join(prints))\n    _since_last_flush.clear()\n    \n    with open('log.pkl', 'wb') as f:\n        pickle.dump(dict(_since_beginning), f, pickle.HIGHEST_PROTOCOL)\n    \"\"\"", "\n", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.__init__": [[15, 24], ["pathlib.Path", "data_reader.DataReader.data_dir.joinpath", "data_reader.DataReader.data_dir.joinpath", "data_reader.DataReader.data_dir.joinpath", "name.strip", "name.strip", "data_reader.DataReader.data_dir.joinpath().open", "data_reader.DataReader.data_dir.joinpath().open", "data_reader.DataReader.data_dir.joinpath", "data_reader.DataReader.data_dir.joinpath"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_dir", "=", "\"data\"", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "Path", "(", "data_dir", ")", "\n", "self", ".", "image_dir", "=", "self", ".", "data_dir", ".", "joinpath", "(", "self", ".", "image_dir_name", ")", "\n", "self", ".", "seg_dir", "=", "self", ".", "data_dir", ".", "joinpath", "(", "self", ".", "seg_dir_name", ")", "\n", "self", ".", "lms_dir", "=", "self", ".", "data_dir", ".", "joinpath", "(", "self", ".", "landmark_dir_name", ")", "\n", "self", ".", "makeup_names", "=", "[", "name", ".", "strip", "(", ")", "for", "name", "in", "self", ".", "data_dir", ".", "joinpath", "(", "self", ".", "makeup", ")", ".", "open", "(", "\"rt\"", ")", "]", "\n", "self", ".", "non_makeup_names", "=", "[", "name", ".", "strip", "(", ")", "for", "name", "in", "self", ".", "data_dir", ".", "joinpath", "(", "self", ".", "non_makeup", ")", ".", "open", "(", "\"rt\"", ")", "]", "\n", "\n", "self", ".", "random", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.read_file": [[25, 37], ["PIL.Image.open().convert", "numpy.asarray", "pickle.load", "PIL.Image.open", "data_reader.DataReader.lms_dir.joinpath().open", "PIL.Image.open", "data_reader.DataReader.seg_dir.joinpath().as_posix", "data_reader.DataReader.image_dir.joinpath().as_posix", "data_reader.DataReader.lms_dir.joinpath", "data_reader.DataReader.seg_dir.joinpath", "data_reader.DataReader.image_dir.joinpath"], "methods", ["None"], ["", "def", "read_file", "(", "self", ",", "name", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "\n", "self", ".", "image_dir", ".", "joinpath", "(", "name", ")", ".", "as_posix", "(", ")", "\n", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "seg", "=", "np", ".", "asarray", "(", "\n", "Image", ".", "open", "(", "\n", "self", ".", "seg_dir", ".", "joinpath", "(", "name", ")", ".", "as_posix", "(", ")", "\n", ")", "\n", ")", "\n", "lm", "=", "pickle", ".", "load", "(", "self", ".", "lms_dir", ".", "joinpath", "(", "name", ")", ".", "open", "(", "\"rb\"", ")", ")", "\n", "\n", "return", "image", ",", "seg", ",", "lm", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.__getitem__": [[38, 51], ["isinstance", "numpy.random.RandomState", "isinstance", "data_reader.DataReader.read_file", "data_reader.DataReader.read_file", "numpy.random.seed", "len"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.read_file", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.read_file"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "random", "is", "None", ":", "\n", "            ", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "seed", "(", ")", ")", "\n", "", "if", "isinstance", "(", "index", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "index", ")", "==", "2", "\n", "index_non_makeup", "=", "index", "[", "1", "]", "\n", "index", "=", "index", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "index", ",", "int", ")", "\n", "index_non_makeup", "=", "index", "\n", "\n", "", "return", "self", ".", "read_file", "(", "self", ".", "non_makeup_names", "[", "index_non_makeup", "]", ")", ",", "self", ".", "read_file", "(", "self", ".", "makeup_names", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.__len__": [[52, 54], ["max", "len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "len", "(", "self", ".", "makeup_names", ")", ",", "len", "(", "self", ".", "non_makeup_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.data_reader.DataReader.pick": [[55, 61], ["data_reader.DataReader.random.randint", "data_reader.DataReader.random.randint", "numpy.random.RandomState", "len", "len", "numpy.random.seed"], "methods", ["None"], ["", "def", "pick", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "random", "is", "None", ":", "\n", "            ", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "seed", "(", ")", ")", "\n", "", "a_index", "=", "self", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "makeup_names", ")", ")", "\n", "another_index", "=", "self", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "non_makeup_names", ")", ")", "\n", "return", "self", "[", "a_index", ",", "another_index", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.faceutils.faceplusplus.encode": [[14, 18], ["io.BytesIO", "image.save", "base64.b64encode().decode", "base64.b64encode", "output_buf.getvalue"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save"], ["def", "encode", "(", "image", ":", "'PIL.Image'", ")", "->", "str", ":", "\n", "    ", "with", "BytesIO", "(", ")", "as", "output_buf", ":", "\n", "        ", "image", ".", "save", "(", "output_buf", ",", "format", "=", "'PNG'", ")", "\n", "return", "base64", ".", "b64encode", "(", "output_buf", ".", "getvalue", "(", ")", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.faceutils.faceplusplus.beautify": [[20, 28], ["requests.post", "faceplusplus.encode", "requests.post.json"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.faceutils.faceplusplus.encode"], ["", "", "def", "beautify", "(", "image", ":", "'PIL.Image'", ")", "->", "str", ":", "\n", "    ", "data", "=", "{", "\n", "'api_key'", ":", "key", ",", "\n", "'api_secret'", ":", "secret", ",", "\n", "'image_base64'", ":", "encode", "(", "image", ")", ",", "\n", "}", "\n", "resp", "=", "requests", ".", "post", "(", "beautify", ".", "url", ",", "data", "=", "data", ")", "\n", "return", "resp", ".", "json", "(", ")", "[", "'result'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.faceutils.faceplusplus.rank": [[30, 40], ["requests.post", "max", "faceplusplus.encode", "scores.values", "requests.post.json"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.faceutils.faceplusplus.encode"], ["", "def", "rank", "(", "image", ":", "'PIL.Image'", ")", "->", "int", ":", "\n", "    ", "data", "=", "{", "\n", "'api_key'", ":", "key", ",", "\n", "'api_secret'", ":", "secret", ",", "\n", "'image_base64'", ":", "encode", "(", "image", ")", ",", "\n", "'return_attributes'", ":", "'beauty'", ",", "\n", "}", "\n", "resp", "=", "requests", ".", "post", "(", "rank", ".", "url", ",", "data", "=", "data", ")", "\n", "scores", "=", "resp", ".", "json", "(", ")", "[", "'faces'", "]", "[", "0", "]", "[", "'attributes'", "]", "[", "'beauty'", "]", "\n", "return", "max", "(", "scores", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.resize_by_max": [[14, 23], ["int", "int", "cv2.resize", "max", "max"], "function", ["None"], ["def", "resize_by_max", "(", "image", ",", "max_side", "=", "512", ",", "force", "=", "False", ")", ":", "\n", "    ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "if", "max", "(", "h", ",", "w", ")", "<", "max_side", "and", "not", "force", ":", "\n", "        ", "return", "image", "\n", "", "ratio", "=", "max", "(", "h", ",", "w", ")", "/", "max_side", "\n", "\n", "w", "=", "int", "(", "w", "/", "ratio", "+", "0.5", ")", "\n", "h", "=", "int", "(", "h", "/", "ratio", "+", "0.5", ")", "\n", "return", "cv2", ".", "resize", "(", "image", ",", "(", "w", ",", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.detect": [[25, 42], ["numpy.asarray", "main.resize_by_max", "detector", "dlib.rectangles", "dlib.rectangles.append", "dlib.rectangle", "int", "int", "int", "int", "face.left", "face.top", "face.right", "face.bottom"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.resize_by_max"], ["", "def", "detect", "(", "image", ":", "Image", ")", "->", "'faces'", ":", "\n", "    ", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "image", "=", "resize_by_max", "(", "image", ",", "361", ")", "\n", "actual_h", ",", "actual_w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "faces_on_small", "=", "detector", "(", "image", ",", "1", ")", "\n", "faces", "=", "dlib", ".", "rectangles", "(", ")", "\n", "for", "face", "in", "faces_on_small", ":", "\n", "        ", "faces", ".", "append", "(", "\n", "dlib", ".", "rectangle", "(", "\n", "int", "(", "face", ".", "left", "(", ")", "/", "actual_w", "*", "w", "+", "0.5", ")", ",", "\n", "int", "(", "face", ".", "top", "(", ")", "/", "actual_h", "*", "h", "+", "0.5", ")", ",", "\n", "int", "(", "face", ".", "right", "(", ")", "/", "actual_w", "*", "w", "+", "0.5", ")", ",", "\n", "int", "(", "face", ".", "bottom", "(", ")", "/", "actual_h", "*", "h", "+", "0.5", ")", "\n", ")", "\n", ")", "\n", "", "return", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop": [[44, 93], ["dlib.rectangle.height", "dlib.rectangle.width", "int", "int", "int", "int", "image.crop.crop", "dlib.rectangle", "dlib.rectangle", "dlib.rectangle.center", "dlib.rectangle", "max", "max", "min", "min", "int", "int", "image.crop.crop", "dlib.rectangle", "dlib.rectangle.left", "dlib.rectangle.top", "dlib.rectangle.right", "dlib.rectangle.bottom", "dlib.rectangle.top", "dlib.rectangle.bottom", "int", "int", "image.crop.crop", "dlib.rectangle", "dlib.rectangle.left", "dlib.rectangle.top", "dlib.rectangle.right", "dlib.rectangle.bottom", "dlib.rectangle.left", "dlib.rectangle.right", "dlib.rectangle.left", "dlib.rectangle.right", "dlib.rectangle.top", "dlib.rectangle.bottom"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop"], ["", "def", "crop", "(", "image", ":", "Image", ",", "face", ",", "up_ratio", ",", "down_ratio", ",", "width_ratio", ")", "->", "(", "Image", ",", "'face'", ")", ":", "\n", "    ", "width", ",", "height", "=", "image", ".", "size", "\n", "face_height", "=", "face", ".", "height", "(", ")", "\n", "face_width", "=", "face", ".", "width", "(", ")", "\n", "delta_up", "=", "up_ratio", "*", "face_height", "\n", "delta_down", "=", "down_ratio", "*", "face_height", "\n", "delta_width", "=", "width_ratio", "*", "width", "\n", "\n", "img_left", "=", "int", "(", "max", "(", "0", ",", "face", ".", "left", "(", ")", "-", "delta_width", ")", ")", "\n", "img_top", "=", "int", "(", "max", "(", "0", ",", "face", ".", "top", "(", ")", "-", "delta_up", ")", ")", "\n", "img_right", "=", "int", "(", "min", "(", "width", ",", "face", ".", "right", "(", ")", "+", "delta_width", ")", ")", "\n", "img_bottom", "=", "int", "(", "min", "(", "height", ",", "face", ".", "bottom", "(", ")", "+", "delta_down", ")", ")", "\n", "image", "=", "image", ".", "crop", "(", "(", "img_left", ",", "img_top", ",", "img_right", ",", "img_bottom", ")", ")", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", "-", "img_left", ",", "face", ".", "top", "(", ")", "-", "img_top", ",", "\n", "face", ".", "right", "(", ")", "-", "img_left", ",", "face", ".", "bottom", "(", ")", "-", "img_top", ")", "\n", "face_expand", "=", "dlib", ".", "rectangle", "(", "img_left", ",", "img_top", ",", "img_right", ",", "img_bottom", ")", "\n", "center", "=", "face_expand", ".", "center", "(", ")", "\n", "width", ",", "height", "=", "image", ".", "size", "\n", "# import ipdb; ipdb.set_trace()", "\n", "crop_left", "=", "img_left", "\n", "crop_top", "=", "img_top", "\n", "crop_right", "=", "img_right", "\n", "crop_bottom", "=", "img_bottom", "\n", "if", "width", ">", "height", ":", "\n", "        ", "left", "=", "int", "(", "center", ".", "x", "-", "height", "/", "2", ")", "\n", "right", "=", "int", "(", "center", ".", "x", "+", "height", "/", "2", ")", "\n", "if", "left", "<", "0", ":", "\n", "            ", "left", ",", "right", "=", "0", ",", "height", "\n", "", "elif", "right", ">", "width", ":", "\n", "            ", "left", ",", "right", "=", "width", "-", "height", ",", "width", "\n", "", "image", "=", "image", ".", "crop", "(", "(", "left", ",", "0", ",", "right", ",", "height", ")", ")", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", "-", "left", ",", "face", ".", "top", "(", ")", ",", "\n", "face", ".", "right", "(", ")", "-", "left", ",", "face", ".", "bottom", "(", ")", ")", "\n", "crop_left", "+=", "left", "\n", "crop_right", "=", "crop_left", "+", "height", "\n", "", "elif", "width", "<", "height", ":", "\n", "        ", "top", "=", "int", "(", "center", ".", "y", "-", "width", "/", "2", ")", "\n", "bottom", "=", "int", "(", "center", ".", "y", "+", "width", "/", "2", ")", "\n", "if", "top", "<", "0", ":", "\n", "            ", "top", ",", "bottom", "=", "0", ",", "width", "\n", "", "elif", "bottom", ">", "height", ":", "\n", "            ", "top", ",", "bottom", "=", "height", "-", "width", ",", "height", "\n", "", "image", "=", "image", ".", "crop", "(", "(", "0", ",", "top", ",", "width", ",", "bottom", ")", ")", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", ",", "face", ".", "top", "(", ")", "-", "top", ",", "\n", "face", ".", "right", "(", ")", ",", "face", ".", "bottom", "(", ")", "-", "top", ")", "\n", "crop_top", "+=", "top", "\n", "crop_bottom", "=", "crop_top", "+", "width", "\n", "", "crop_face", "=", "dlib", ".", "rectangle", "(", "crop_left", ",", "crop_top", ",", "crop_right", ",", "crop_bottom", ")", "\n", "return", "image", ",", "face", ",", "crop_face", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop_by_image_size": [[95, 119], ["dlib.rectangle.center", "int", "int", "image.crop.crop", "dlib.rectangle", "dlib.rectangle.top", "dlib.rectangle.bottom", "int", "int", "image.crop.crop", "dlib.rectangle", "dlib.rectangle.left", "dlib.rectangle.right", "dlib.rectangle.left", "dlib.rectangle.right", "dlib.rectangle.top", "dlib.rectangle.bottom"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop"], ["", "def", "crop_by_image_size", "(", "image", ":", "Image", ",", "face", ")", "->", "(", "Image", ",", "'face'", ")", ":", "\n", "    ", "center", "=", "face", ".", "center", "(", ")", "\n", "width", ",", "height", "=", "image", ".", "size", "\n", "if", "width", ">", "height", ":", "\n", "        ", "left", "=", "int", "(", "center", ".", "x", "-", "height", "/", "2", ")", "\n", "right", "=", "int", "(", "center", ".", "x", "+", "height", "/", "2", ")", "\n", "if", "left", "<", "0", ":", "\n", "            ", "left", ",", "right", "=", "0", ",", "height", "\n", "", "elif", "right", ">", "width", ":", "\n", "            ", "left", ",", "right", "=", "width", "-", "height", ",", "width", "\n", "", "image", "=", "image", ".", "crop", "(", "(", "left", ",", "0", ",", "right", ",", "height", ")", ")", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", "-", "left", ",", "face", ".", "top", "(", ")", ",", "\n", "face", ".", "right", "(", ")", "-", "left", ",", "face", ".", "bottom", "(", ")", ")", "\n", "", "elif", "width", "<", "height", ":", "\n", "        ", "top", "=", "int", "(", "center", ".", "y", "-", "width", "/", "2", ")", "\n", "bottom", "=", "int", "(", "center", ".", "y", "+", "width", "/", "2", ")", "\n", "if", "top", "<", "0", ":", "\n", "            ", "top", ",", "bottom", "=", "0", ",", "width", "\n", "", "elif", "bottom", ">", "height", ":", "\n", "            ", "top", ",", "bottom", "=", "height", "-", "width", ",", "height", "\n", "", "image", "=", "image", ".", "crop", "(", "(", "0", ",", "top", ",", "width", ",", "bottom", ")", ")", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", ",", "face", ".", "top", "(", ")", "-", "top", ",", "\n", "face", ".", "right", "(", ")", ",", "face", ".", "bottom", "(", ")", "-", "top", ")", "\n", "", "return", "image", ",", "face", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.landmarks": [[121, 124], ["predictor().parts", "numpy.array", "predictor", "numpy.asarray"], "function", ["None"], ["", "def", "landmarks", "(", "image", ":", "Image", ",", "face", ")", ":", "\n", "    ", "shape", "=", "predictor", "(", "np", ".", "asarray", "(", "image", ")", ",", "face", ")", ".", "parts", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "p", ".", "y", ",", "p", ".", "x", "]", "for", "p", "in", "shape", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop_from_array": [[126, 164], ["dlib.rectangle.height", "dlib.rectangle.width", "int", "int", "int", "int", "dlib.rectangle", "dlib.rectangle.center", "max", "max", "min", "min", "int", "int", "dlib.rectangle", "dlib.rectangle.left", "dlib.rectangle.top", "dlib.rectangle.right", "dlib.rectangle.bottom", "dlib.rectangle.top", "dlib.rectangle.bottom", "int", "int", "dlib.rectangle", "dlib.rectangle.left", "dlib.rectangle.top", "dlib.rectangle.right", "dlib.rectangle.bottom", "dlib.rectangle.left", "dlib.rectangle.right", "dlib.rectangle.left", "dlib.rectangle.right", "dlib.rectangle.top", "dlib.rectangle.bottom"], "function", ["None"], ["", "def", "crop_from_array", "(", "image", ":", "np", ".", "array", ",", "face", ")", "->", "(", "np", ".", "array", ",", "'face'", ")", ":", "\n", "    ", "ratio", "=", "0.20", "/", "0.85", "# delta_size / face_size", "\n", "height", ",", "width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "face_height", "=", "face", ".", "height", "(", ")", "\n", "face_width", "=", "face", ".", "width", "(", ")", "\n", "delta_height", "=", "ratio", "*", "face_height", "\n", "delta_width", "=", "ratio", "*", "width", "\n", "\n", "img_left", "=", "int", "(", "max", "(", "0", ",", "face", ".", "left", "(", ")", "-", "delta_width", ")", ")", "\n", "img_top", "=", "int", "(", "max", "(", "0", ",", "face", ".", "top", "(", ")", "-", "delta_height", ")", ")", "\n", "img_right", "=", "int", "(", "min", "(", "width", ",", "face", ".", "right", "(", ")", "+", "delta_width", ")", ")", "\n", "img_bottom", "=", "int", "(", "min", "(", "height", ",", "face", ".", "bottom", "(", ")", "+", "delta_height", ")", ")", "\n", "image", "=", "image", "[", "img_top", ":", "img_bottom", ",", "img_left", ":", "img_right", "]", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", "-", "img_left", ",", "face", ".", "top", "(", ")", "-", "img_top", ",", "\n", "face", ".", "right", "(", ")", "-", "img_left", ",", "face", ".", "bottom", "(", ")", "-", "img_top", ")", "\n", "center", "=", "face", ".", "center", "(", ")", "\n", "height", ",", "width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "if", "width", ">", "height", ":", "\n", "        ", "left", "=", "int", "(", "center", ".", "x", "-", "height", "/", "2", ")", "\n", "right", "=", "int", "(", "center", ".", "x", "+", "height", "/", "2", ")", "\n", "if", "left", "<", "0", ":", "\n", "            ", "left", ",", "right", "=", "0", ",", "height", "\n", "", "elif", "right", ">", "width", ":", "\n", "            ", "left", ",", "right", "=", "width", "-", "height", ",", "width", "\n", "", "image", "=", "image", "[", "0", ":", "height", ",", "left", ":", "right", "]", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", "-", "left", ",", "face", ".", "top", "(", ")", ",", "\n", "face", ".", "right", "(", ")", "-", "left", ",", "face", ".", "bottom", "(", ")", ")", "\n", "", "elif", "width", "<", "height", ":", "\n", "        ", "top", "=", "int", "(", "center", ".", "y", "-", "width", "/", "2", ")", "\n", "bottom", "=", "int", "(", "center", ".", "y", "+", "width", "/", "2", ")", "\n", "if", "top", "<", "0", ":", "\n", "            ", "top", ",", "bottom", "=", "0", ",", "width", "\n", "", "elif", "bottom", ">", "height", ":", "\n", "            ", "top", ",", "bottom", "=", "height", "-", "width", ",", "height", "\n", "", "image", "=", "image", "[", "top", ":", "bottom", ",", "0", ":", "width", "]", "\n", "face", "=", "dlib", ".", "rectangle", "(", "face", ".", "left", "(", ")", ",", "face", ".", "top", "(", ")", "-", "top", ",", "\n", "face", ".", "right", "(", ")", ",", "face", ".", "bottom", "(", ")", "-", "top", ")", "\n", "", "return", "image", ",", "face", "\n", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.main.FaceParser.__init__": [[13, 25], ["torch.tensor().unsqueeze", "model.BiSeNet", "model.BiSeNet.load_state_dict", "model.BiSeNet.to().eval", "torchvision.Compose", "torch.load", "torch.tensor", "os.split", "model.BiSeNet.to", "torchvision.ToTensor", "torchvision.Normalize", "os.realpath"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.ToTensor"], ["\n", "def", "resize_by_max", "(", "image", ",", "max_side", "=", "512", ",", "force", "=", "False", ")", ":", "\n", "    ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "if", "max", "(", "h", ",", "w", ")", "<", "max_side", "and", "not", "force", ":", "\n", "        ", "return", "image", "\n", "", "ratio", "=", "max", "(", "h", ",", "w", ")", "/", "max_side", "\n", "\n", "w", "=", "int", "(", "w", "/", "ratio", "+", "0.5", ")", "\n", "h", "=", "int", "(", "h", "/", "ratio", "+", "0.5", ")", "\n", "return", "cv2", ".", "resize", "(", "image", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "\n", "", "def", "detect", "(", "image", ":", "Image", ")", "->", "'faces'", ":", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.main.FaceParser.parse": [[28, 37], ["torch.nn.functional.embedding", "out.squeeze().argmax.float", "torch.no_grad", "main.FaceParser.to_tensor().to", "torch.unsqueeze", "out.squeeze().argmax", "main.FaceParser.net", "main.FaceParser.to_tensor", "out.squeeze"], "methods", ["None"], ["image", "=", "resize_by_max", "(", "image", ",", "361", ")", "\n", "actual_h", ",", "actual_w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "faces_on_small", "=", "detector", "(", "image", ",", "1", ")", "\n", "faces", "=", "dlib", ".", "rectangles", "(", ")", "\n", "for", "face", "in", "faces_on_small", ":", "\n", "        ", "faces", ".", "append", "(", "\n", "dlib", ".", "rectangle", "(", "\n", "int", "(", "face", ".", "left", "(", ")", "/", "actual_w", "*", "w", "+", "0.5", ")", ",", "\n", "int", "(", "face", ".", "top", "(", ")", "/", "actual_h", "*", "h", "+", "0.5", ")", ",", "\n", "int", "(", "face", ".", "right", "(", ")", "/", "actual_w", "*", "w", "+", "0.5", ")", ",", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.BasicBlock.__init__": [[18, 31], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.conv3x3", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_chan", ",", "out_chan", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "out_chan", ",", "out_chan", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_chan", "!=", "out_chan", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chan", ",", "out_chan", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.BasicBlock.forward": [[33, 46], ["resnet.BasicBlock.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "residual", ")", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "shortcut", "=", "x", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "shortcut", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.Resnet18.__init__": [[56, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.create_layer_basic", "resnet.create_layer_basic", "resnet.create_layer_basic", "resnet.create_layer_basic"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.create_layer_basic", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.create_layer_basic", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.create_layer_basic", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.create_layer_basic"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Resnet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "create_layer_basic", "(", "64", ",", "64", ",", "bnum", "=", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "create_layer_basic", "(", "64", ",", "128", ",", "bnum", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "create_layer_basic", "(", "128", ",", "256", ",", "bnum", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "create_layer_basic", "(", "256", ",", "512", ",", "bnum", "=", "2", ",", "stride", "=", "2", ")", "\n", "# self.init_weight()", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.Resnet18.forward": [[68, 78], ["resnet.Resnet18.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Resnet18.maxpool", "resnet.Resnet18.layer1", "resnet.Resnet18.layer2", "resnet.Resnet18.layer3", "resnet.Resnet18.layer4", "resnet.Resnet18.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat8", "=", "self", ".", "layer2", "(", "x", ")", "# 1/8", "\n", "feat16", "=", "self", ".", "layer3", "(", "feat8", ")", "# 1/16", "\n", "feat32", "=", "self", ".", "layer4", "(", "feat16", ")", "# 1/32", "\n", "return", "feat8", ",", "feat16", ",", "feat32", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.Resnet18.init_weight": [[79, 86], ["torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "resnet.Resnet18.state_dict", "torch.load_url.items", "resnet.Resnet18.load_state_dict", "resnet.Resnet18.update"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "state_dict", "=", "modelzoo", ".", "load_url", "(", "resnet18_url", ")", "\n", "self_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'fc'", "in", "k", ":", "continue", "\n", "self_state_dict", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "self", ".", "load_state_dict", "(", "self_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.Resnet18.get_params": [[87, 97], ["resnet.Resnet18.named_modules", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.conv3x3": [[11, 15], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.resnet.create_layer_basic": [[48, 53], ["range", "torch.Sequential", "resnet.BasicBlock", "layers.append", "resnet.BasicBlock"], "function", ["None"], ["", "", "def", "create_layer_basic", "(", "in_chan", ",", "out_chan", ",", "bnum", ",", "stride", "=", "1", ")", ":", "\n", "    ", "layers", "=", "[", "BasicBlock", "(", "in_chan", ",", "out_chan", ",", "stride", "=", "stride", ")", "]", "\n", "for", "i", "in", "range", "(", "bnum", "-", "1", ")", ":", "\n", "        ", "layers", ".", "append", "(", "BasicBlock", "(", "out_chan", ",", "out_chan", ",", "stride", "=", "1", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.ConvBNReLU.__init__": [[12, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.ConvBNReLU.init_weight"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_chan", ",", "\n", "out_chan", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.ConvBNReLU.forward": [[23, 27], ["model.ConvBNReLU.conv", "torch.relu", "torch.relu", "torch.relu", "model.ConvBNReLU.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.ConvBNReLU.init_weight": [[28, 33], ["model.ConvBNReLU.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNetOutput.__init__": [[35, 40], ["torch.Module.__init__", "model.ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.BiSeNetOutput.init_weight"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "mid_chan", ",", "n_classes", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BiSeNetOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "in_chan", ",", "mid_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "mid_chan", ",", "n_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNetOutput.forward": [[41, 45], ["model.BiSeNetOutput.conv", "model.BiSeNetOutput.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNetOutput.init_weight": [[46, 51], ["model.BiSeNetOutput.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNetOutput.get_params": [[52, 62], ["model.BiSeNetOutput.named_modules", "isinstance", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.AttentionRefinementModule.__init__": [[65, 72], ["torch.Module.__init__", "model.ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.AttentionRefinementModule.init_weight"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionRefinementModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "in_chan", ",", "out_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_atten", "=", "nn", ".", "Conv2d", "(", "out_chan", ",", "out_chan", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_atten", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "sigmoid_atten", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.AttentionRefinementModule.forward": [[73, 81], ["model.AttentionRefinementModule.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.AttentionRefinementModule.conv_atten", "model.AttentionRefinementModule.bn_atten", "model.AttentionRefinementModule.sigmoid_atten", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.AttentionRefinementModule.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv", "(", "x", ")", "\n", "atten", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "feat", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "atten", "=", "self", ".", "conv_atten", "(", "atten", ")", "\n", "atten", "=", "self", ".", "bn_atten", "(", "atten", ")", "\n", "atten", "=", "self", ".", "sigmoid_atten", "(", "atten", ")", "\n", "out", "=", "torch", ".", "mul", "(", "feat", ",", "atten", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.AttentionRefinementModule.init_weight": [[82, 87], ["model.AttentionRefinementModule.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.ContextPath.__init__": [[90, 100], ["torch.Module.__init__", "resnet.Resnet18", "model.AttentionRefinementModule", "model.AttentionRefinementModule", "model.ConvBNReLU", "model.ConvBNReLU", "model.ConvBNReLU", "model.ContextPath.init_weight"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ContextPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "Resnet18", "(", ")", "\n", "self", ".", "arm16", "=", "AttentionRefinementModule", "(", "256", ",", "128", ")", "\n", "self", ".", "arm32", "=", "AttentionRefinementModule", "(", "512", ",", "128", ")", "\n", "self", ".", "conv_head32", "=", "ConvBNReLU", "(", "128", ",", "128", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_head16", "=", "ConvBNReLU", "(", "128", ",", "128", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_avg", "=", "ConvBNReLU", "(", "512", ",", "128", ",", "ks", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.ContextPath.forward": [[101, 123], ["model.ContextPath.resnet", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.ContextPath.conv_avg", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.ContextPath.arm32", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.ContextPath.conv_head32", "model.ContextPath.arm16", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model.ContextPath.conv_head16", "x.size", "feat8.size", "feat16.size", "feat32.size", "feat32.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H0", ",", "W0", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "feat8", ",", "feat16", ",", "feat32", "=", "self", ".", "resnet", "(", "x", ")", "\n", "H8", ",", "W8", "=", "feat8", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "H16", ",", "W16", "=", "feat16", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "H32", ",", "W32", "=", "feat32", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "avg", "=", "F", ".", "avg_pool2d", "(", "feat32", ",", "feat32", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "avg", "=", "self", ".", "conv_avg", "(", "avg", ")", "\n", "avg_up", "=", "F", ".", "interpolate", "(", "avg", ",", "(", "H32", ",", "W32", ")", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "feat32_arm", "=", "self", ".", "arm32", "(", "feat32", ")", "\n", "feat32_sum", "=", "feat32_arm", "+", "avg_up", "\n", "feat32_up", "=", "F", ".", "interpolate", "(", "feat32_sum", ",", "(", "H16", ",", "W16", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat32_up", "=", "self", ".", "conv_head32", "(", "feat32_up", ")", "\n", "\n", "feat16_arm", "=", "self", ".", "arm16", "(", "feat16", ")", "\n", "feat16_sum", "=", "feat16_arm", "+", "feat32_up", "\n", "feat16_up", "=", "F", ".", "interpolate", "(", "feat16_sum", ",", "(", "H8", ",", "W8", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat16_up", "=", "self", ".", "conv_head16", "(", "feat16_up", ")", "\n", "\n", "return", "feat8", ",", "feat16_up", ",", "feat32_up", "# x8, x8, x16", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.ContextPath.init_weight": [[124, 129], ["model.ContextPath.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.ContextPath.get_params": [[130, 140], ["model.ContextPath.named_modules", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.SpatialPath.__init__": [[144, 151], ["torch.Module.__init__", "model.ConvBNReLU", "model.ConvBNReLU", "model.ConvBNReLU", "model.ConvBNReLU", "model.SpatialPath.init_weight"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SpatialPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ConvBNReLU", "(", "3", ",", "64", ",", "ks", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "conv2", "=", "ConvBNReLU", "(", "64", ",", "64", ",", "ks", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "ConvBNReLU", "(", "64", ",", "64", ",", "ks", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_out", "=", "ConvBNReLU", "(", "64", ",", "128", ",", "ks", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.SpatialPath.forward": [[152, 158], ["model.SpatialPath.conv1", "model.SpatialPath.conv2", "model.SpatialPath.conv3", "model.SpatialPath.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv1", "(", "x", ")", "\n", "feat", "=", "self", ".", "conv2", "(", "feat", ")", "\n", "feat", "=", "self", ".", "conv3", "(", "feat", ")", "\n", "feat", "=", "self", ".", "conv_out", "(", "feat", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.SpatialPath.init_weight": [[159, 164], ["model.SpatialPath.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.SpatialPath.get_params": [[165, 175], ["model.SpatialPath.named_modules", "isinstance", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.FeatureFusionModule.__init__": [[178, 196], ["torch.Module.__init__", "model.ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model.FeatureFusionModule.init_weight"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FeatureFusionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convblk", "=", "ConvBNReLU", "(", "in_chan", ",", "out_chan", ",", "ks", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "out_chan", ",", "\n", "out_chan", "//", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_chan", "//", "4", ",", "\n", "out_chan", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.FeatureFusionModule.forward": [[197, 208], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.FeatureFusionModule.convblk", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.FeatureFusionModule.conv1", "model.FeatureFusionModule.relu", "model.FeatureFusionModule.conv2", "model.FeatureFusionModule.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.FeatureFusionModule.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fsp", ",", "fcp", ")", ":", "\n", "        ", "fcat", "=", "torch", ".", "cat", "(", "[", "fsp", ",", "fcp", "]", ",", "dim", "=", "1", ")", "\n", "feat", "=", "self", ".", "convblk", "(", "fcat", ")", "\n", "atten", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "feat", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "atten", "=", "self", ".", "conv1", "(", "atten", ")", "\n", "atten", "=", "self", ".", "relu", "(", "atten", ")", "\n", "atten", "=", "self", ".", "conv2", "(", "atten", ")", "\n", "atten", "=", "self", ".", "sigmoid", "(", "atten", ")", "\n", "feat_atten", "=", "torch", ".", "mul", "(", "feat", ",", "atten", ")", "\n", "feat_out", "=", "feat_atten", "+", "feat", "\n", "return", "feat_out", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.FeatureFusionModule.init_weight": [[209, 214], ["model.FeatureFusionModule.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.FeatureFusionModule.get_params": [[215, 225], ["model.FeatureFusionModule.named_modules", "isinstance", "isinstance", "wd_params.append", "isinstance", "nowd_params.append", "list", "module.parameters"], "methods", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "wd_params", ".", "append", "(", "module", ".", "weight", ")", "\n", "if", "not", "module", ".", "bias", "is", "None", ":", "\n", "                    ", "nowd_params", ".", "append", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nowd_params", "+=", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "", "", "return", "wd_params", ",", "nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.__init__": [[228, 236], ["torch.Module.__init__", "model.ContextPath", "model.FeatureFusionModule", "model.BiSeNetOutput", "model.BiSeNetOutput", "model.BiSeNetOutput"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BiSeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cp", "=", "ContextPath", "(", ")", "\n", "## here self.sp is deleted", "\n", "self", ".", "ffm", "=", "FeatureFusionModule", "(", "256", ",", "256", ")", "\n", "self", ".", "conv_out", "=", "BiSeNetOutput", "(", "256", ",", "256", ",", "n_classes", ")", "\n", "self", ".", "conv_out16", "=", "BiSeNetOutput", "(", "128", ",", "64", ",", "n_classes", ")", "\n", "self", ".", "conv_out32", "=", "BiSeNetOutput", "(", "128", ",", "64", ",", "n_classes", ")", "\n", "# self.init_weight()", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.forward": [[238, 252], ["model.BiSeNet.cp", "model.BiSeNet.ffm", "model.BiSeNet.conv_out", "model.BiSeNet.conv_out16", "model.BiSeNet.conv_out32", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H", ",", "W", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "feat_res8", ",", "feat_cp8", ",", "feat_cp16", "=", "self", ".", "cp", "(", "x", ")", "# here return res3b1 feature", "\n", "feat_sp", "=", "feat_res8", "# use res3b1 feature to replace spatial path feature", "\n", "feat_fuse", "=", "self", ".", "ffm", "(", "feat_sp", ",", "feat_cp8", ")", "\n", "\n", "feat_out", "=", "self", ".", "conv_out", "(", "feat_fuse", ")", "\n", "feat_out16", "=", "self", ".", "conv_out16", "(", "feat_cp8", ")", "\n", "feat_out32", "=", "self", ".", "conv_out32", "(", "feat_cp16", ")", "\n", "\n", "feat_out", "=", "F", ".", "interpolate", "(", "feat_out", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat_out16", "=", "F", ".", "interpolate", "(", "feat_out16", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat_out32", "=", "F", ".", "interpolate", "(", "feat_out32", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "feat_out", ",", "feat_out16", ",", "feat_out32", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.init_weight": [[253, 258], ["model.BiSeNet.children", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.get_params": [[259, 270], ["model.BiSeNet.named_children", "child.get_params", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.model.BiSeNet.get_params"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "wd_params", ",", "nowd_params", ",", "lr_mul_wd_params", ",", "lr_mul_nowd_params", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "child", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "child_wd_params", ",", "child_nowd_params", "=", "child", ".", "get_params", "(", ")", "\n", "if", "isinstance", "(", "child", ",", "FeatureFusionModule", ")", "or", "isinstance", "(", "child", ",", "BiSeNetOutput", ")", ":", "\n", "                ", "lr_mul_wd_params", "+=", "child_wd_params", "\n", "lr_mul_nowd_params", "+=", "child_nowd_params", "\n", "", "else", ":", "\n", "                ", "wd_params", "+=", "child_wd_params", "\n", "nowd_params", "+=", "child_nowd_params", "\n", "", "", "return", "wd_params", ",", "nowd_params", ",", "lr_mul_wd_params", ",", "lr_mul_nowd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.GANLoss.GANLoss.__init__": [[6, 19], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "device", "=", "device", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.GANLoss.GANLoss.get_target_tensor": [[20, 37], ["GANLoss.GANLoss.Tensor().fill_().to", "torch.autograd.Variable", "torch.autograd.Variable", "GANLoss.GANLoss.Tensor().fill_().to", "torch.autograd.Variable", "torch.autograd.Variable", "GANLoss.GANLoss.real_label_var.numel", "input.numel", "GANLoss.GANLoss.fake_label_var.numel", "input.numel", "GANLoss.GANLoss.Tensor().fill_", "GANLoss.GANLoss.Tensor().fill_", "GANLoss.GANLoss.Tensor", "GANLoss.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.GANLoss.GANLoss.forward": [[38, 41], ["GANLoss.GANLoss.get_target_tensor", "GANLoss.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.GANLoss.GANLoss.get_target_tensor"], ["", "def", "forward", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.HistogramLoss.__init__": [[71, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HistogramLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.HistogramLoss.de_norm": [[74, 77], ["out.clamp"], "methods", ["None"], ["", "def", "de_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "out", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.HistogramLoss.to_var": [[78, 83], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "def", "to_var", "(", "self", ",", "x", ",", "requires_grad", "=", "True", ")", ":", "\n", "        ", "if", "not", "requires_grad", ":", "\n", "            ", "return", "Variable", "(", "x", ",", "requires_grad", "=", "requires_grad", ")", "\n", "", "else", ":", "\n", "            ", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.HistogramLoss.forward": [[84, 104], ["mask_src.expand().squeeze.expand().squeeze.unsqueeze().nonzero", "mask_tar.expand().squeeze.expand().squeeze.unsqueeze().nonzero", "mask_src.expand().squeeze.expand().squeeze.expand().squeeze", "mask_tar.expand().squeeze.expand().squeeze.expand().squeeze", "HistogramLoss.histogram_matching", "HistogramLoss.HistogramLoss.to_var", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask_src.expand().squeeze.expand().squeeze.unsqueeze", "mask_tar.expand().squeeze.expand().squeeze.unsqueeze", "mask_src.expand().squeeze.expand().squeeze.expand", "mask_tar.expand().squeeze.expand().squeeze.expand", "HistogramLoss.HistogramLoss.de_norm", "HistogramLoss.HistogramLoss.de_norm", "mask_src.expand().squeeze.expand().squeeze.size", "mask_src.expand().squeeze.expand().squeeze.size", "mask_tar.expand().squeeze.expand().squeeze.size", "mask_tar.expand().squeeze.expand().squeeze.size"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.histogram_matching", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.to_var", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.de_norm", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.de_norm"], ["", "", "def", "forward", "(", "self", ",", "input_data", ",", "target_data", ",", "mask_src", ",", "mask_tar", ",", "device", ")", ":", "\n", "        ", "index_tmp", "=", "mask_src", ".", "unsqueeze", "(", "0", ")", ".", "nonzero", "(", ")", "\n", "x_A_index", "=", "index_tmp", "[", ":", ",", "2", "]", "\n", "y_A_index", "=", "index_tmp", "[", ":", ",", "3", "]", "\n", "index_tmp", "=", "mask_tar", ".", "unsqueeze", "(", "0", ")", ".", "nonzero", "(", ")", "\n", "x_B_index", "=", "index_tmp", "[", ":", ",", "2", "]", "\n", "y_B_index", "=", "index_tmp", "[", ":", ",", "3", "]", "\n", "\n", "input_data", "=", "(", "self", ".", "de_norm", "(", "input_data", ")", "*", "255", ")", ".", "squeeze", "(", ")", "\n", "target_data", "=", "(", "self", ".", "de_norm", "(", "target_data", ")", "*", "255", ")", ".", "squeeze", "(", ")", "\n", "mask_src", "=", "mask_src", ".", "expand", "(", "1", ",", "3", ",", "mask_src", ".", "size", "(", "2", ")", ",", "mask_src", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "mask_tar", "=", "mask_tar", ".", "expand", "(", "1", ",", "3", ",", "mask_tar", ".", "size", "(", "2", ")", ",", "mask_tar", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "input_masked", "=", "input_data", "*", "mask_src", "\n", "target_masked", "=", "target_data", "*", "mask_tar", "\n", "input_match", "=", "histogram_matching", "(", "\n", "input_masked", ",", "target_masked", ",", "\n", "[", "x_A_index", ",", "y_A_index", ",", "x_B_index", ",", "y_B_index", "]", ",", "device", ")", "\n", "input_match", "=", "self", ".", "to_var", "(", "input_match", ",", "requires_grad", "=", "False", ")", "\n", "loss", "=", "F", ".", "l1_loss", "(", "input_masked", ",", "input_match", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.cal_hist": [[7, 26], ["range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.histc", "torch.histc", "torch.histc", "hist.numpy.numpy", "hist.numpy.sum", "range", "hists.append"], "function", ["None"], ["def", "cal_hist", "(", "image", ")", ":", "\n", "    ", "\"\"\"\n        cal cumulative hist for channel list\n    \"\"\"", "\n", "hists", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "channel", "=", "image", "[", "i", "]", "\n", "# channel = image[i, :, :]", "\n", "channel", "=", "torch", ".", "from_numpy", "(", "channel", ")", "\n", "# hist, _ = np.histogram(channel, bins=256, range=(0,255))", "\n", "hist", "=", "torch", ".", "histc", "(", "channel", ",", "bins", "=", "256", ",", "min", "=", "0", ",", "max", "=", "256", ")", "\n", "hist", "=", "hist", ".", "numpy", "(", ")", "\n", "# refHist=hist.view(256,1)", "\n", "sum", "=", "hist", ".", "sum", "(", ")", "\n", "pdf", "=", "[", "v", "/", "sum", "for", "v", "in", "hist", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "256", ")", ":", "\n", "            ", "pdf", "[", "i", "]", "=", "pdf", "[", "i", "-", "1", "]", "+", "pdf", "[", "i", "]", "\n", "", "hists", ".", "append", "(", "pdf", ")", "\n", "", "return", "hists", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.cal_trans": [[28, 41], ["list", "list", "range", "range", "list", "range"], "function", ["None"], ["", "def", "cal_trans", "(", "ref", ",", "adj", ")", ":", "\n", "    ", "\"\"\"\n        calculate transfer function\n        algorithm refering to wiki item: Histogram matching\n    \"\"\"", "\n", "table", "=", "list", "(", "range", "(", "0", ",", "256", ")", ")", "\n", "for", "i", "in", "list", "(", "range", "(", "1", ",", "256", ")", ")", ":", "\n", "        ", "for", "j", "in", "list", "(", "range", "(", "1", ",", "256", ")", ")", ":", "\n", "            ", "if", "ref", "[", "i", "]", ">=", "adj", "[", "j", "-", "1", "]", "and", "ref", "[", "i", "]", "<=", "adj", "[", "j", "]", ":", "\n", "                ", "table", "[", "i", "]", "=", "j", "\n", "break", "\n", "", "", "", "table", "[", "255", "]", "=", "255", "\n", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.histogram_matching": [[43, 69], ["torch.FloatTensor().to.detach().cpu().numpy", "refImg.detach().cpu().numpy.detach().cpu().numpy", "HistogramLoss.cal_hist", "HistogramLoss.cal_hist", "copy.deepcopy", "range", "range", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "x.cpu().numpy", "HistogramLoss.cal_trans", "range", "torch.FloatTensor().to.detach().cpu", "refImg.detach().cpu().numpy.detach().cpu", "range", "range", "range", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "x.cpu", "torch.FloatTensor().to.detach", "refImg.detach().cpu().numpy.detach", "int"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.cal_hist", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.cal_hist", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.crtiterions.HistogramLoss.cal_trans"], ["", "def", "histogram_matching", "(", "dstImg", ",", "refImg", ",", "index", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n        perform histogram matching\n        dstImg is transformed to have the same the histogram with refImg's\n        index[0], index[1]: the index of pixels that need to be transformed in dstImg\n        index[2], index[3]: the index of pixels that to compute histogram in refImg\n    \"\"\"", "\n", "index", "=", "[", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "index", "]", "\n", "dstImg", "=", "dstImg", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "refImg", "=", "refImg", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dst_align", "=", "[", "dstImg", "[", "i", ",", "index", "[", "0", "]", ",", "index", "[", "1", "]", "]", "for", "i", "in", "range", "(", "0", ",", "3", ")", "]", "\n", "ref_align", "=", "[", "refImg", "[", "i", ",", "index", "[", "2", "]", ",", "index", "[", "3", "]", "]", "for", "i", "in", "range", "(", "0", ",", "3", ")", "]", "\n", "hist_ref", "=", "cal_hist", "(", "ref_align", ")", "\n", "hist_dst", "=", "cal_hist", "(", "dst_align", ")", "\n", "tables", "=", "[", "cal_trans", "(", "hist_dst", "[", "i", "]", ",", "hist_ref", "[", "i", "]", ")", "for", "i", "in", "range", "(", "0", ",", "3", ")", "]", "\n", "\n", "mid", "=", "copy", ".", "deepcopy", "(", "dst_align", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "0", ",", "len", "(", "index", "[", "0", "]", ")", ")", ":", "\n", "            ", "dst_align", "[", "i", "]", "[", "k", "]", "=", "tables", "[", "i", "]", "[", "int", "(", "mid", "[", "i", "]", "[", "k", "]", ")", "]", "\n", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "dstImg", "[", "i", ",", "index", "[", "0", "]", ",", "index", "[", "1", "]", "]", "=", "dst_align", "[", "i", "]", "\n", "\n", "", "dstImg", "=", "torch", ".", "FloatTensor", "(", "dstImg", ")", ".", "to", "(", "device", ")", "\n", "return", "dstImg", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.squeezenet.__init__": [[6, 34], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.squeezenet.forward": [[35, 54], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.alexnet.__init__": [[57, 79], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.alexnet.forward": [[80, 95], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.vgg16.__init__": [[97, 119], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.vgg16.forward": [[120, 135], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.resnet.__init__": [[139, 161], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.pretrained_networks.resnet.forward": [[162, 181], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.initialize": [[16, 82], ["list", "crtiterions.lpips.LPIPS", "trainer.Trainer.net.parameters", "crtiterions.lpips.BCERankingLoss", "list", "torch.optim.Adam", "trainer.Trainer.net.eval", "trainer.Trainer.net.to", "torch.nn.DataParallel", "print", "networks.print_network", "print", "crtiterions.lpips.LPIPS", "trainer.Trainer.rankLoss.net.parameters", "trainer.Trainer.rankLoss.to", "crtiterions.lpips.L2", "crtiterions.lpips.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.print_network"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'lpips'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['lpips'] for linearly calibrated network\n                    ['baseline'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'lpips'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "LPIPS", "(", "pretrained", "=", "not", "is_train", ",", "net", "=", "net", ",", "version", "=", "version", ",", "lpips", "=", "True", ",", "spatial", "=", "spatial", ",", "\n", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "\n", "use_dropout", "=", "True", ",", "model_path", "=", "model_path", ",", "eval_mode", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "==", "'baseline'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "LPIPS", "(", "pnet_rand", "=", "pnet_rand", ",", "net", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "lpips", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "lpips", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "net", ",", "device_ids", "=", "gpu_ids", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.forward": [[83, 92], ["trainer.Trainer.net.forward"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.optimize_parameters": [[94, 100], ["trainer.Trainer.forward_train", "trainer.Trainer.optimizer_net.zero_grad", "trainer.Trainer.backward_train", "trainer.Trainer.optimizer_net.step", "trainer.Trainer.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.forward_train", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.backward_train", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.clamp_weights": [[101, 105], ["trainer.Trainer.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.set_input": [[106, 121], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.input_ref.to", "trainer.Trainer.input_p0.to", "trainer.Trainer.input_p1.to", "trainer.Trainer.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.forward_train": [[122, 132], ["trainer.Trainer.forward", "trainer.Trainer.forward", "trainer.Trainer.compute_accuracy", "torch.autograd.Variable().view", "trainer.Trainer.rankLoss.forward", "trainer.Trainer.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.compute_accuracy", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.backward_train": [[133, 135], ["torch.mean().backward", "torch.mean"], "methods", ["None"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.compute_accuracy": [[136, 141], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["None"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.get_current_errors": [[142, 150], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "trainer.Trainer.loss_total.data.cpu().numpy", "trainer.Trainer.loss_total.data.cpu"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.get_current_visuals": [[151, 165], ["crtiterions.lpips.tensor2im", "crtiterions.lpips.tensor2im", "crtiterions.lpips.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "trainer.Trainer.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "lpips", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "lpips", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "lpips", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save": [[166, 172], ["trainer.Trainer.save_network", "trainer.Trainer.save_network", "trainer.Trainer.save_network"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save_network", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save_network", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save_network": [[174, 178], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "path", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.load_network": [[180, 185], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'Loading network from %s'", "%", "save_path", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.update_learning_rate": [[186, 195], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.get_image_paths": [[196, 198], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save_done": [[199, 202], ["numpy.save", "numpy.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save"], ["", "def", "save_done", "(", "self", ",", "flag", "=", "False", ")", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "flag", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "[", "flag", ",", "]", ",", "fmt", "=", "'%i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.score_2afc_dataset": [[204, 238], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["None"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches \n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.score_jnd_dataset": [[240, 278], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "crtiterions.lpips.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.voc_ap"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "lpips", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.LPIPS.__init__": [[21, 110], ["torch.Module.__init__", "crtiterions.lpips.ScalingLayer", "len", "net_type", "print", "crtiterions.lpips.NetLinLayer", "crtiterions.lpips.NetLinLayer", "crtiterions.lpips.NetLinLayer", "crtiterions.lpips.NetLinLayer", "crtiterions.lpips.NetLinLayer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "crtiterions.lpips.LPIPS.eval", "crtiterions.lpips.NetLinLayer", "crtiterions.lpips.NetLinLayer", "crtiterions.lpips.LPIPS.load_state_dict", "os.path.abspath", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "inspect.getfile"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ",", "net", "=", "'alex'", ",", "version", "=", "'0.1'", ",", "lpips", "=", "True", ",", "spatial", "=", "False", ",", "\n", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "model_path", "=", "None", ",", "eval_mode", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\" Initializes a perceptual loss torch.nn.Module\n\n        Parameters (default listed first)\n        ---------------------------------\n        lpips : bool\n            [True] use linear layers on top of base/trunk network\n            [False] means no linear layers; each layer is averaged together\n        pretrained : bool\n            This flag controls the linear layers, which are only in effect when lpips=True above\n            [True] means linear layers are calibrated with human perceptual judgments\n            [False] means linear layers are randomly initialized\n        pnet_rand : bool\n            [False] means trunk loaded with ImageNet classification weights\n            [True] means randomly initialized trunk\n        net : str\n            ['alex','vgg','squeeze'] are the base/trunk networks available\n        version : str\n            ['v0.1'] is the default and latest\n            ['v0.0'] contained a normalization bug; corresponds to old arxiv v1 (https://arxiv.org/abs/1801.03924v1)\n        model_path : 'str'\n            [None] is default and loads the pretrained weights from paper https://arxiv.org/abs/1801.03924v1\n\n        The following parameters should only be changed if training the network\n\n        eval_mode : bool\n            [True] is for test mode (default)\n            [False] is for training mode\n        pnet_tune\n            [False] tune the base/trunk network\n            [True] keep base/trunk frozen\n        use_dropout : bool\n            [True] to use dropout when training linear layers\n            [False] for no dropout when training linear layers\n        \"\"\"", "\n", "\n", "super", "(", "LPIPS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "verbose", ")", ":", "\n", "            ", "print", "(", "'Setting up [%s] perceptual loss: trunk [%s], v[%s], spatial [%s]'", "%", "\n", "(", "'LPIPS'", "if", "lpips", "else", "'baseline'", ",", "net", ",", "version", ",", "'on'", "if", "spatial", "else", "'off'", ")", ")", "\n", "\n", "", "self", ".", "pnet_type", "=", "net", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "# false means baseline of just averaging all layers", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "", "self", ".", "lins", "=", "nn", ".", "ModuleList", "(", "self", ".", "lins", ")", "\n", "\n", "if", "(", "pretrained", ")", ":", "\n", "                ", "if", "(", "model_path", "is", "None", ")", ":", "\n", "                    ", "import", "inspect", "\n", "import", "os", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "inspect", ".", "getfile", "(", "self", ".", "__init__", ")", ",", "'..'", ",", "'weights/v%s/%s.pth'", "%", "(", "version", ",", "net", ")", ")", ")", "\n", "\n", "", "if", "(", "verbose", ")", ":", "\n", "                    ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "if", "(", "eval_mode", ")", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.LPIPS.forward": [[111, 145], ["range", "range", "crtiterions.lpips.LPIPS.net.forward", "crtiterions.lpips.LPIPS.net.forward", "crtiterions.lpips.LPIPS.scaling_layer", "crtiterions.lpips.LPIPS.scaling_layer", "crtiterions.lpips.normalize_tensor", "crtiterions.lpips.normalize_tensor", "lpips.upsample", "lpips.spatial_average", "lpips.upsample", "lpips.spatial_average", "range", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.normalize_tensor", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.upsample", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.spatial_average", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.upsample", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.spatial_average"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "if", "normalize", ":", "# turn on this flag if input is [0,1] so it can be adjusted to [-1, +1]", "\n", "            ", "in0", "=", "2", "*", "in0", "-", "1", "\n", "in1", "=", "2", "*", "in1", "-", "1", "\n", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "\n", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "lpips", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "lpips", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", "(", "diffs", "[", "kk", "]", ")", ",", "out_HW", "=", "in0", ".", "shape", "[", "2", ":", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_HW", "=", "in0", ".", "shape", "[", "2", ":", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "0", "\n", "for", "l", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.ScalingLayer.__init__": [[148, 152], ["torch.Module.__init__", "crtiterions.lpips.ScalingLayer.register_buffer", "crtiterions.lpips.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.ScalingLayer.forward": [[153, 155], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.NetLinLayer.__init__": [[160, 166], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.NetLinLayer.forward": [[167, 169], ["crtiterions.lpips.NetLinLayer.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.Dist2LogitLayer.__init__": [[174, 185], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.Dist2LogitLayer.forward": [[186, 188], ["crtiterions.lpips.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.BCERankingLoss.__init__": [[191, 196], ["torch.Module.__init__", "crtiterions.lpips.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.BCERankingLoss.forward": [[197, 201], ["crtiterions.lpips.BCERankingLoss.net.forward", "crtiterions.lpips.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.FakeNet.__init__": [[205, 209], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.L2.forward": [[212, 228], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "crtiterions.lpips.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "crtiterions.lpips.l2", "crtiterions.lpips.tensor2np", "crtiterions.lpips.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "crtiterions.lpips.tensor2tensorlab", "crtiterions.lpips.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.l2", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "\n", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "lpips", ".", "l2", "(", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "\n", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.DSSIM.forward": [[232, 246], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "crtiterions.lpips.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "crtiterions.lpips.dssim().astype", "crtiterions.lpips.dssim", "crtiterions.lpips.dssim", "crtiterions.lpips.tensor2im", "crtiterions.lpips.tensor2im", "crtiterions.lpips.tensor2np", "crtiterions.lpips.tensor2np", "crtiterions.lpips.tensor2tensorlab", "crtiterions.lpips.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.dssim", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.dssim", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2tensorlab", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "lpips", ".", "dssim", "(", "1.", "*", "lpips", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "lpips", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "\n", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "lpips", ".", "dssim", "(", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "lpips", ".", "tensor2np", "(", "lpips", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "\n", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.spatial_average": [[10, 12], ["in_tens.mean"], "function", ["None"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.upsample": [[14, 17], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_HW", "=", "(", "64", ",", "64", ")", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", ",", "in_W", "=", "in_tens", ".", "shape", "[", "2", "]", ",", "in_tens", ".", "shape", "[", "3", "]", "\n", "return", "nn", ".", "Upsample", "(", "size", "=", "out_HW", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.lpips.print_network": [[248, 254], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.normalize_tensor": [[13, 16], ["torch.sqrt", "torch.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.l2": [[17, 19], ["numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.psnr": [[20, 22], ["numpy.log10", "numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.dssim": [[23, 26], ["compare_ssim"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.rgb2lab": [[88, 91], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.rgb2lab"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2np": [[34, 37], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.np2tensor": [[38, 41], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2tensorlab": [[42, 55], ["__init__.tensor2im", "color.rgb2lab", "__init__.np2tensor"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2im", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.np2tensor"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensorlab2tensor": [[56, 73], ["warnings.filterwarnings", "__init__.tensor2np", "numpy.clip", "color.rgb2lab", "__init__.np2tensor", "__init__.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "__init__.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2np", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.rgb2lab", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.np2tensor", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.im2tensor", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.im2tensor"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.load_image": [[74, 87], ["rawpy.imread", "raw.postprocess", "cv2.imread", "cv2.imread"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2im": [[105, 110], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.im2tensor": [[111, 115], ["torch.Tensor", "[].transpose"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.tensor2vec": [[101, 103], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.__init__.voc_ap": [[118, 150], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.__init__": [[8, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"weight\"", "\n", "#print(self.name)", "\n", "self", ".", "power_iterations", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.compute_weight": [[13, 25], ["getattr", "getattr", "getattr", "range", "getattr.dot", "spectral_norm.l2normalize", "spectral_norm.l2normalize", "getattr.view().mv", "getattr.dot.expand_as", "torch.mv", "torch.mv", "torch.t", "getattr.view", "getattr.view", "getattr.view"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.l2normalize", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.l2normalize"], ["", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n", "        ", "u", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "power_iterations", ")", ":", "\n", "            ", "v", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "torch", ".", "t", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ")", ",", "u", ".", "data", ")", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ",", "v", ".", "data", ")", ")", "\n", "# sigma = torch.dot(u.data, torch.mv(w.view(height,-1).data, v.data))", "\n", "", "sigma", "=", "u", ".", "dot", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "mv", "(", "v", ")", ")", "\n", "return", "w", "/", "sigma", ".", "expand_as", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.apply": [[26, 58], ["spectral_norm.SpectralNorm", "setattr", "module.register_forward_pre_hook", "getattr", "getattr", "getattr", "spectral_norm.SpectralNorm.compute_weight", "getattr", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "module.register_parameter", "module.register_parameter", "module.register_parameter", "getattr.data.new().normal_", "getattr.data.new().normal_", "getattr.view", "getattr.data.new", "getattr.data.new"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.compute_weight"], ["", "@", "staticmethod", "\n", "def", "apply", "(", "module", ")", ":", "\n", "        ", "name", "=", "\"weight\"", "\n", "fn", "=", "SpectralNorm", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "u", "=", "getattr", "(", "module", ",", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "module", ",", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "module", ",", "name", "+", "\"_bar\"", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "w", "=", "getattr", "(", "module", ",", "name", ")", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "width", "=", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ".", "shape", "[", "1", "]", "\n", "u", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "height", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "v", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "width", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "w_bar", "=", "Parameter", "(", "w", ".", "data", ")", "\n", "\n", "#del module._parameters[name]", "\n", "\n", "module", ".", "register_parameter", "(", "name", "+", "\"_u\"", ",", "u", ")", "\n", "module", ".", "register_parameter", "(", "name", "+", "\"_v\"", ",", "v", ")", "\n", "module", ".", "register_parameter", "(", "name", "+", "\"_bar\"", ",", "w_bar", ")", "\n", "\n", "# remove w from parameter list", "\n", "", "del", "module", ".", "_parameters", "[", "name", "]", "\n", "\n", "setattr", "(", "module", ",", "name", ",", "fn", ".", "compute_weight", "(", "module", ")", ")", "\n", "\n", "# recompute weight before every forward()", "\n", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.remove": [[59, 66], ["spectral_norm.SpectralNorm.compute_weight", "delattr", "module.register_parameter", "torch.nn.Parameter"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.compute_weight"], ["", "def", "remove", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "self", ".", "compute_weight", "(", "module", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", ")", "\n", "del", "module", ".", "_parameters", "[", "self", ".", "name", "+", "'_u'", "]", "\n", "del", "module", ".", "_parameters", "[", "self", ".", "name", "+", "'_v'", "]", "\n", "del", "module", ".", "_parameters", "[", "self", ".", "name", "+", "'_bar'", "]", "\n", "module", ".", "register_parameter", "(", "self", ".", "name", ",", "Parameter", "(", "weight", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.__call__": [[67, 69], ["setattr", "spectral_norm.SpectralNorm.compute_weight"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.compute_weight"], ["", "def", "__call__", "(", "self", ",", "module", ",", "inputs", ")", ":", "\n", "        ", "setattr", "(", "module", ",", "self", ".", "name", ",", "self", ".", "compute_weight", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.l2normalize": [[4, 6], ["v.norm"], "function", ["None"], ["def", "l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "v", "/", "(", "v", ".", "norm", "(", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.spectral_norm": [[70, 73], ["spectral_norm.SpectralNorm.apply"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.apply"], ["", "", "def", "spectral_norm", "(", "module", ")", ":", "\n", "    ", "SpectralNorm", ".", "apply", "(", "module", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.remove_spectral_norm": [[74, 84], ["module._forward_pre_hooks.items", "ValueError", "isinstance", "hook.remove"], "function", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.remove"], ["", "def", "remove_spectral_norm", "(", "module", ")", ":", "\n", "    ", "name", "=", "'weight'", "\n", "for", "k", ",", "hook", "in", "module", ".", "_forward_pre_hooks", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "hook", ",", "SpectralNorm", ")", "and", "hook", ".", "name", "==", "name", ":", "\n", "            ", "hook", ".", "remove", "(", "module", ")", "\n", "del", "module", ".", "_forward_pre_hooks", "[", "k", "]", "\n", "return", "module", "\n", "\n", "", "", "raise", "ValueError", "(", "\"spectral_norm of '{}' not found in {}\"", "\n", ".", "format", "(", "name", ",", "module", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.config.get_config": [[84, 86], ["None"], "function", ["None"], ["def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "return", "_C", "\n", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.inference.Inference.__init__": [[13, 23], ["solver.Solver", "preprocess.PreProcess"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "device", ",", "model_path", "=", "\"checkpoints/G.pth\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            device (str): Device type and index, such as \"cpu\" or \"cuda:2\".\n            device_id (int): Specefying which devide index\n                will be used for inference.\n        \"\"\"", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "solver", "=", "Solver", "(", "config", ",", "target_image", "=", "None", ",", "data_loader", "=", "None", ",", "inference", "=", "model_path", ")", "\n", "self", ".", "preprocess", "=", "PreProcess", "(", "config", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.inference.Inference.transfer": [[24, 51], ["inference.Inference.preprocess", "inference.Inference.preprocess", "range", "range", "inference.Inference.solver.test", "len", "source_input[].to", "len", "reference_input[].to"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.preprocess", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.None.utils.preprocess", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.test"], ["", "def", "transfer", "(", "self", ",", "source", ":", "Image", ",", "reference", ":", "Image", ",", "with_face", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            source (Image): The image where makeup will be transfered to.\n            reference (Image): Image containing targeted makeup.\n        Return:\n            Image: Transfered image.\n        \"\"\"", "\n", "source_input", ",", "face", ",", "crop_face", "=", "self", ".", "preprocess", "(", "source", ")", "\n", "reference_input", ",", "_", ",", "_", "=", "self", ".", "preprocess", "(", "reference", ")", "\n", "if", "not", "(", "source_input", "and", "reference_input", ")", ":", "\n", "            ", "if", "with_face", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "return", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "source_input", ")", ")", ":", "\n", "            ", "source_input", "[", "i", "]", "=", "source_input", "[", "i", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "reference_input", ")", ")", ":", "\n", "            ", "reference_input", "[", "i", "]", "=", "reference_input", "[", "i", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# TODO: Abridge the parameter list.", "\n", "", "result", "=", "self", ".", "solver", ".", "test", "(", "*", "source_input", ",", "*", "reference_input", ")", "\n", "\n", "if", "with_face", ":", "\n", "            ", "return", "result", ",", "crop_face", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.__init__": [[25, 77], ["net.Generator", "net.H_RRDB", "time.time", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "solver.Solver.build_model", "super().__init__", "solver.Solver.G.load_state_dict", "solver.Solver.G.to().eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "solver.Solver.G.to"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.build_model", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "target_image", ",", "data_loader", "=", "None", ",", "inference", "=", "None", ")", ":", "\n", "        ", "self", ".", "device", "=", "config", ".", "DEVICE", ".", "device", "\n", "self", ".", "G", "=", "net", ".", "Generator", "(", ")", "\n", "self", ".", "H", "=", "net", ".", "H_RRDB", "(", "nb", "=", "4", ")", "\n", "if", "inference", "is", "not", "None", ":", "\n", "            ", "self", ".", "G", ".", "load_state_dict", "(", "torch", ".", "load", "(", "inference", ")", ")", "\n", "self", ".", "G", "=", "self", ".", "G", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "return", "\n", "\n", "", "self", ".", "target_image", "=", "target_image", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "checkpoint", "=", "config", ".", "MODEL", ".", "WEIGHTS", "\n", "self", ".", "log_path", "=", "config", ".", "LOG", ".", "LOG_PATH", "\n", "# local model zoo: self.train_model_name_list", "\n", "self", ".", "train_model_name_list", "=", "config", ".", "MODELZOO", ".", "MODELS", "\n", "self", ".", "result_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "config", ".", "LOG", ".", "VIS_PATH", ")", "\n", "self", ".", "snapshot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "config", ".", "LOG", ".", "SNAPSHOT_PATH", ")", "\n", "self", ".", "log_step", "=", "config", ".", "LOG", ".", "LOG_STEP", "\n", "self", ".", "vis_step", "=", "config", ".", "LOG", ".", "VIS_STEP", "\n", "self", ".", "snapshot_step", "=", "config", ".", "LOG", ".", "SNAPSHOT_STEP", "\n", "\n", "# Data loader", "\n", "self", ".", "data_loader_train", "=", "data_loader", "\n", "self", ".", "img_size", "=", "config", ".", "DATA", ".", "IMG_SIZE", "\n", "\n", "self", ".", "num_epochs", "=", "config", ".", "TRAINING", ".", "NUM_EPOCHS", "\n", "self", ".", "num_epochs_decay", "=", "config", ".", "TRAINING", ".", "NUM_EPOCHS_DECAY", "\n", "self", ".", "g_lr", "=", "config", ".", "TRAINING", ".", "G_LR", "\n", "self", ".", "d_lr", "=", "config", ".", "TRAINING", ".", "D_LR", "\n", "self", ".", "h_lr", "=", "config", ".", "TRAINING", ".", "H_LR", "\n", "self", ".", "g_step", "=", "config", ".", "TRAINING", ".", "G_STEP", "\n", "self", ".", "beta1", "=", "config", ".", "TRAINING", ".", "BETA1", "\n", "self", ".", "beta2", "=", "config", ".", "TRAINING", ".", "BETA2", "\n", "\n", "self", ".", "lamda_gan", "=", "config", ".", "LOSS", ".", "GAN", "\n", "self", ".", "lamda_reg", "=", "config", ".", "LOSS", ".", "CYCLE", "\n", "self", ".", "lambda_adv", "=", "config", ".", "LOSS", ".", "ADVATTACK", "\n", "self", ".", "lambda_his_lip", "=", "config", ".", "LOSS", ".", "LAMBDA_HIS_LIP", "\n", "self", ".", "lambda_his_skin", "=", "config", ".", "LOSS", ".", "LAMBDA_HIS_SKIN", "\n", "self", ".", "lambda_his_eye", "=", "config", ".", "LOSS", ".", "LAMBDA_HIS_EYE", "\n", "self", ".", "lamda_make", "=", "config", ".", "LOSS", ".", "MAKEUP", "\n", "self", ".", "lambda_idt", "=", "config", ".", "LOSS", ".", "IDT", "\n", "self", ".", "d_conv_dim", "=", "config", ".", "MODEL", ".", "D_CONV_DIM", "\n", "self", ".", "d_repeat_num", "=", "config", ".", "MODEL", ".", "D_REPEAT_NUM", "\n", "self", ".", "norm", "=", "config", ".", "MODEL", ".", "NORM", "\n", "\n", "self", ".", "resize_rate", "=", "0.9", "\n", "self", ".", "diversity_prob", "=", "0.5", "\n", "self", ".", "diversity", "=", "5", "\n", "\n", "self", ".", "build_model", "(", ")", "\n", "super", "(", "Solver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.weights_init_xavier": [[78, 84], ["classname.find", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "classname.find", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal"], "methods", ["None"], ["", "def", "weights_init_xavier", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.print_network": [[85, 92], ["model.parameters", "print", "print", "print", "p.numel"], "methods", ["None"], ["", "", "def", "print_network", "(", "self", ",", "model", ",", "name", ")", ":", "\n", "        ", "num_params", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "p", ".", "numel", "(", ")", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"The number of parameters: {}\"", ".", "format", "(", "num_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.de_norm": [[93, 96], ["out.clamp"], "methods", ["None"], ["", "def", "de_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "out", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.cos_simi": [[97, 99], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "emb_1.norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "emb_2.norm", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "cos_simi", "(", "self", ",", "emb_1", ",", "emb_2", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "emb_2", ",", "emb_1", ")", ",", "dim", "=", "1", ")", "/", "emb_2", ".", "norm", "(", "dim", "=", "1", ")", "/", "emb_1", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.cal_adv_loss": [[100, 109], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "fr_model", "fr_model().detach", "solver.Solver.cos_simi", "fr_model"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.cos_simi"], ["", "def", "cal_adv_loss", "(", "self", ",", "source", ",", "target", ",", "model_name", ",", "target_models", ")", ":", "\n", "        ", "input_size", "=", "target_models", "[", "model_name", "]", "[", "0", "]", "\n", "fr_model", "=", "target_models", "[", "model_name", "]", "[", "1", "]", "\n", "source_resize", "=", "F", ".", "interpolate", "(", "source", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "target_resize", "=", "F", ".", "interpolate", "(", "target", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "emb_source", "=", "fr_model", "(", "source_resize", ")", "\n", "emb_target", "=", "fr_model", "(", "target_resize", ")", ".", "detach", "(", ")", "\n", "cos_loss", "=", "1", "-", "self", ".", "cos_simi", "(", "emb_source", ",", "emb_target", ")", "\n", "return", "cos_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.input_diversity": [[110, 131], ["int", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate().to", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.pad().to", "torch.pad().to", "torch.pad().to", "torch.interpolate", "torch.interpolate", "torch.interpolate", "h_rem.item", "w_rem.item", "torch.pad", "torch.pad", "torch.pad", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.randint.item", "torch.randint.item", "torch.randint.item", "pad_right.item", "torch.randint.item", "torch.randint.item", "torch.randint.item", "pad_bottom.item"], "methods", ["None"], ["", "def", "input_diversity", "(", "self", ",", "x", ")", ":", "\n", "        ", "img_size", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "img_resize", "=", "int", "(", "img_size", "*", "self", ".", "resize_rate", ")", "\n", "\n", "if", "self", ".", "resize_rate", "<", "1", ":", "\n", "            ", "img_size", "=", "img_resize", "\n", "img_resize", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "", "rnd", "=", "torch", ".", "randint", "(", "low", "=", "img_size", ",", "high", "=", "img_resize", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "rescaled", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "[", "rnd", ",", "rnd", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "h_rem", "=", "img_resize", "-", "rnd", "\n", "w_rem", "=", "img_resize", "-", "rnd", "\n", "pad_top", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "h_rem", ".", "item", "(", ")", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "pad_bottom", "=", "h_rem", "-", "pad_top", "\n", "pad_left", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "w_rem", ".", "item", "(", ")", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "pad_right", "=", "w_rem", "-", "pad_left", "\n", "\n", "padded", "=", "F", ".", "pad", "(", "rescaled", ",", "[", "pad_left", ".", "item", "(", ")", ",", "pad_right", ".", "item", "(", ")", ",", "pad_top", ".", "item", "(", ")", ",", "pad_bottom", ".", "item", "(", ")", "]", ",", "value", "=", "0", ")", ".", "to", "(", "\n", "self", ".", "device", ")", "\n", "\n", "return", "padded", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "diversity_prob", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.input_noise": [[132, 138], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "x_noised.to", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "input_noise", "(", "self", ",", "x", ")", ":", "\n", "        ", "rnd", "=", "torch", ".", "rand", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "noise", "=", "torch", ".", "randn_like", "(", "x", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x_noised", "=", "x", "+", "rnd", "*", "(", "0.1", "**", "0.5", ")", "*", "noise", "\n", "x_noised", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "x_noised", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "diversity_prob", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.build_model": [[139, 210], ["net.Discriminator", "net.Discriminator", "solver.Solver.G.apply", "solver.Solver.H.apply", "solver.Solver.D_A.apply", "solver.Solver.D_B.apply", "solver.Solver.load_checkpoint", "crtiterions.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "crtiterions.HistogramLoss", "crtiterions.LPIPS().to().eval", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "solver.Solver.print_network", "solver.Solver.print_network", "solver.Solver.print_network", "solver.Solver.print_network", "solver.Solver.G.to", "solver.Solver.D_A.to", "solver.Solver.D_B.to", "solver.Solver.H.to", "solver.Solver.criterionHis.to", "solver.Solver.criterionGAN.to", "solver.Solver.criterionL1.to", "solver.Solver.criterionL2.to", "solver.Solver.G.parameters", "filter", "filter", "solver.Solver.H.parameters", "solver.Solver.targe_models[].append", "assets.models.ir152.IR_152", "assets.models.irse.MobileFaceNet.load_state_dict", "assets.models.irse.MobileFaceNet.to", "assets.models.irse.MobileFaceNet.eval", "solver.Solver.targe_models[].append", "solver.Solver.targe_models[].append", "assets.models.irse.Backbone", "assets.models.irse.MobileFaceNet.load_state_dict", "assets.models.irse.MobileFaceNet.to", "assets.models.irse.MobileFaceNet.eval", "solver.Solver.targe_models[].append", "solver.Solver.targe_models[].append", "assets.models.facenet.InceptionResnetV1", "assets.models.irse.MobileFaceNet.load_state_dict", "assets.models.irse.MobileFaceNet.to", "assets.models.irse.MobileFaceNet.eval", "solver.Solver.targe_models[].append", "solver.Solver.targe_models[].append", "assets.models.irse.MobileFaceNet", "assets.models.irse.MobileFaceNet.load_state_dict", "assets.models.irse.MobileFaceNet.to", "assets.models.irse.MobileFaceNet.eval", "solver.Solver.targe_models[].append", "crtiterions.LPIPS().to", "solver.Solver.D_A.parameters", "solver.Solver.D_B.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "crtiterions.LPIPS"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.apply", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.apply", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.apply", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.SpectralNorm.apply", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.load_checkpoint", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.print_network", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.print_network", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.print_network", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.print_network"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "D_A", "=", "net", ".", "Discriminator", "(", "self", ".", "img_size", ",", "self", ".", "d_conv_dim", ",", "self", ".", "d_repeat_num", ",", "self", ".", "norm", ")", "\n", "self", ".", "D_B", "=", "net", ".", "Discriminator", "(", "self", ".", "img_size", ",", "self", ".", "d_conv_dim", ",", "self", ".", "d_repeat_num", ",", "self", ".", "norm", ")", "\n", "\n", "self", ".", "targe_models", "=", "{", "}", "\n", "for", "model", "in", "self", ".", "train_model_name_list", ":", "\n", "            ", "if", "model", "==", "'ir152'", ":", "\n", "                ", "self", ".", "targe_models", "[", "model", "]", "=", "[", "]", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", "=", "ir152", ".", "IR_152", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/ir152.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "self", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "fr_model", ")", "\n", "", "if", "model", "==", "'irse50'", ":", "\n", "                ", "self", ".", "targe_models", "[", "model", "]", "=", "[", "]", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", "=", "irse", ".", "Backbone", "(", "50", ",", "0.6", ",", "'ir_se'", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/irse50.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "self", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "fr_model", ")", "\n", "", "if", "model", "==", "'facenet'", ":", "\n", "                ", "self", ".", "targe_models", "[", "model", "]", "=", "[", "]", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "(", "160", ",", "160", ")", ")", "\n", "fr_model", "=", "facenet", ".", "InceptionResnetV1", "(", "num_classes", "=", "8631", ",", "device", "=", "self", ".", "device", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/facenet.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "self", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "fr_model", ")", "\n", "", "if", "model", "==", "'mobile_face'", ":", "\n", "                ", "self", ".", "targe_models", "[", "model", "]", "=", "[", "]", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "(", "112", ",", "112", ")", ")", "\n", "fr_model", "=", "irse", ".", "MobileFaceNet", "(", "512", ")", "\n", "fr_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./assets/models/mobile_face.pth'", ")", ")", "\n", "fr_model", ".", "to", "(", "self", ".", "device", ")", "\n", "fr_model", ".", "eval", "(", ")", "\n", "self", ".", "targe_models", "[", "model", "]", ".", "append", "(", "fr_model", ")", "\n", "\n", "", "", "self", ".", "G", ".", "apply", "(", "self", ".", "weights_init_xavier", ")", "\n", "self", ".", "H", ".", "apply", "(", "self", ".", "weights_init_xavier", ")", "\n", "self", ".", "D_A", ".", "apply", "(", "self", ".", "weights_init_xavier", ")", "\n", "self", ".", "D_B", ".", "apply", "(", "self", ".", "weights_init_xavier", ")", "\n", "\n", "self", ".", "load_checkpoint", "(", ")", "\n", "self", ".", "criterionGAN", "=", "GANLoss", "(", "self", ".", "device", ",", "use_lsgan", "=", "True", ",", "tensor", "=", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionL2", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "criterionHis", "=", "HistogramLoss", "(", ")", "\n", "self", ".", "LPIPS", "=", "LPIPS", "(", "net", "=", "'alex'", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "\n", "# Optimizers", "\n", "self", ".", "g_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "G", ".", "parameters", "(", ")", ",", "self", ".", "g_lr", ",", "[", "self", ".", "beta1", ",", "self", ".", "beta2", "]", ")", "\n", "self", ".", "d_A_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "D_A", ".", "parameters", "(", ")", ")", ",", "self", ".", "d_lr", ",", "[", "self", ".", "beta1", ",", "self", ".", "beta2", "]", ")", "\n", "self", ".", "d_B_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "D_B", ".", "parameters", "(", ")", ")", ",", "self", ".", "d_lr", ",", "[", "self", ".", "beta1", ",", "self", ".", "beta2", "]", ")", "\n", "self", ".", "h_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "H", ".", "parameters", "(", ")", ",", "self", ".", "h_lr", ",", "[", "self", ".", "beta1", ",", "self", ".", "beta2", "]", ")", "\n", "\n", "# Print networks", "\n", "self", ".", "print_network", "(", "self", ".", "G", ",", "'G'", ")", "\n", "self", ".", "print_network", "(", "self", ".", "H", ",", "'H'", ")", "\n", "self", ".", "print_network", "(", "self", ".", "D_A", ",", "'D_A'", ")", "\n", "self", ".", "print_network", "(", "self", ".", "D_B", ",", "'D_B'", ")", "\n", "\n", "self", ".", "G", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "D_A", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "D_B", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "H", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionHis", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionGAN", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionL1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionL2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.load_checkpoint": [[212, 229], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "solver.Solver.G.load_state_dict", "print", "solver.Solver.D_A.load_state_dict", "print", "solver.Solver.D_B.load_state_dict", "print", "solver.Solver.H.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "k.replace", "k.replace", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load().items", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ")", ":", "\n", "        ", "G_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint", ",", "'G.pth'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "G_path", ")", ":", "\n", "            ", "self", ".", "G", ".", "load_state_dict", "(", "torch", ".", "load", "(", "G_path", ")", ")", "\n", "print", "(", "'loaded trained generator {}..!'", ".", "format", "(", "G_path", ")", ")", "\n", "", "D_A_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint", ",", "'D_A.pth'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "D_A_path", ")", ":", "\n", "            ", "self", ".", "D_A", ".", "load_state_dict", "(", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "torch", ".", "load", "(", "D_A_path", ")", ".", "items", "(", ")", "}", ")", "\n", "print", "(", "'loaded trained discriminator A {}..!'", ".", "format", "(", "D_A_path", ")", ")", "\n", "", "D_B_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint", ",", "'D_B.pth'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "D_B_path", ")", ":", "\n", "            ", "self", ".", "D_B", ".", "load_state_dict", "(", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "torch", ".", "load", "(", "D_B_path", ")", ".", "items", "(", ")", "}", ")", "\n", "print", "(", "'loaded trained discriminator B {}..!'", ".", "format", "(", "D_B_path", ")", ")", "\n", "", "H_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint", ",", "'H.pth'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "H_path", ")", ":", "\n", "            ", "self", ".", "H", ".", "load_state_dict", "(", "torch", ".", "load", "(", "H_path", ")", ")", "\n", "print", "(", "'loaded trained purifier H {}..!'", ".", "format", "(", "H_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.generate": [[230, 235], ["solver.Solver.G"], "methods", ["None"], ["", "", "def", "generate", "(", "self", ",", "org_A", ",", "ref_B", ",", "lms_A", "=", "None", ",", "lms_B", "=", "None", ",", "mask_A", "=", "None", ",", "mask_B", "=", "None", ",", "\n", "diff_A", "=", "None", ",", "diff_B", "=", "None", ",", "gamma", "=", "None", ",", "beta", "=", "None", ",", "ret", "=", "False", ")", ":", "\n", "        ", "\"\"\"org_A is content, ref_B is style\"\"\"", "\n", "res", "=", "self", ".", "G", "(", "org_A", ",", "ref_B", ",", "mask_A", ",", "mask_B", ",", "diff_A", ",", "diff_B", ",", "gamma", ",", "beta", ",", "ret", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.test": [[236, 248], ["solver.Solver.squeeze", "solver.Solver.add_().div_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "solver.Solver.generate", "solver.Solver.generate", "solver.Solver.min", "solver.Solver.max", "torchvision.transforms.ToPILImage", "solver.Solver.cpu", "solver.Solver.add_"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.generate", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.generate"], ["", "def", "test", "(", "self", ",", "real_A", ",", "mask_A", ",", "diff_A", ",", "real_B", ",", "mask_B", ",", "diff_B", ")", ":", "\n", "        ", "cur_prama", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cur_prama", "=", "self", ".", "generate", "(", "real_A", ",", "real_B", ",", "None", ",", "None", ",", "mask_A", ",", "mask_B", ",", "\n", "diff_A", ",", "diff_B", ",", "ret", "=", "True", ")", "\n", "fake_A", "=", "self", ".", "generate", "(", "real_A", ",", "real_B", ",", "None", ",", "None", ",", "mask_A", ",", "mask_B", ",", "\n", "diff_A", ",", "diff_B", ",", "gamma", "=", "cur_prama", "[", "0", "]", ",", "beta", "=", "cur_prama", "[", "1", "]", ")", "\n", "", "fake_A", "=", "fake_A", ".", "squeeze", "(", "0", ")", "\n", "# normalize", "\n", "min_", ",", "max_", "=", "fake_A", ".", "min", "(", ")", ",", "fake_A", ".", "max", "(", ")", "\n", "fake_A", ".", "add_", "(", "-", "min_", ")", ".", "div_", "(", "max_", "-", "min_", "+", "1e-5", ")", "\n", "return", "ToPILImage", "(", ")", "(", "fake_A", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.train": [[249, 483], ["len", "range", "enumerate", "solver.Solver.D_A", "solver.Solver.criterionGAN", "solver.Solver.G", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "solver.Solver.D_A", "solver.Solver.criterionGAN", "solver.Solver.d_A_optimizer.zero_grad", "d_loss.backward", "solver.Solver.d_A_optimizer.step", "solver.Solver.mean().item", "solver.Solver.D_B", "solver.Solver.criterionGAN", "solver.Solver.G", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "solver.Solver.D_B", "solver.Solver.criterionGAN", "solver.Solver.d_B_optimizer.zero_grad", "d_loss.backward", "solver.Solver.d_B_optimizer.step", "solver.Solver.mean().item", "solver.Solver.G().detach", "solver.Solver.G().detach", "solver.Solver.G().detach", "solver.Solver.G().detach", "solver.Solver.H", "solver.Solver.H", "solver.Solver.D_A", "solver.Solver.criterionGAN", "solver.Solver.D_B", "solver.Solver.criterionGAN", "solver.Solver.H", "solver.Solver.H", "solver.Solver.H", "solver.Solver.H", "solver.Solver.criterionL1", "solver.Solver.criterionL1", "solver.Solver.targe_models.keys", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "solver.Solver.h_optimizer.zero_grad", "h_loss.backward", "solver.Solver.h_optimizer.step", "loss_idt_h.mean().item", "loss_gan_h.mean().item", "loss_his_h.mean().item", "loss_reg_h.mean().item", "torch.mean.mean().item", "torch.mean.mean().item", "torch.mean.mean().item", "solver.Solver.loss.keys", "tools.tick", "solver.Solver.update_lr", "print", "source_input[].to", "reference_input[].to", "source_input[].to", "reference_input[].to", "source_input[].to", "reference_input[].to", "solver.Solver.G", "solver.Solver.D_A", "solver.Solver.criterionGAN", "solver.Solver.G", "solver.Solver.D_B", "solver.Solver.criterionGAN", "solver.Solver.G", "solver.Solver.G", "solver.Solver.H", "solver.Solver.H", "solver.Solver.H", "solver.Solver.H", "solver.Solver.criterionL1", "solver.Solver.criterionL1", "range", "solver.Solver.targe_models.keys", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "solver.Solver.g_optimizer.zero_grad", "g_loss.backward", "solver.Solver.g_optimizer.step", "loss_idt.mean().item", "loss_gan.mean().item", "loss_his.mean().item", "loss_reg.mean().item", "torch.mean.mean().item", "torch.mean.mean().item", "torch.mean.mean().item", "solver.Solver.LPIPS", "solver.Solver.LPIPS", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.G", "solver.Solver.G", "solver.Solver.append", "solver.Solver.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "solver.Solver.log_terminal", "tools.plot", "print", "solver.Solver.vis_train", "solver.Solver.save_models", "tools.flush", "float", "float", "float", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "solver.Solver.mean", "solver.Solver.mean", "solver.Solver.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "solver.Solver.mean", "solver.Solver.mean", "solver.Solver.mean", "solver.Solver.LPIPS", "solver.Solver.LPIPS", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.criterionHis", "solver.Solver.G", "solver.Solver.G", "fake_A_diversity.append", "fake_B_diversity.append", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "solver.Solver.G", "solver.Solver.G", "solver.Solver.G", "solver.Solver.G", "solver.Solver.criterionL1", "solver.Solver.LPIPS", "solver.Solver.criterionL1", "solver.Solver.LPIPS", "loss_idt_h.mean", "loss_gan_h.mean", "loss_his_h.mean", "loss_reg_h.mean", "torch.mean.mean", "torch.mean.mean", "torch.mean.mean", "solver.Solver.criterionL1", "solver.Solver.LPIPS", "solver.Solver.criterionL1", "solver.Solver.LPIPS", "solver.Solver.input_diversity().to", "solver.Solver.input_diversity().to", "targeted_loss_list.append", "targeted_loss_list.append", "loss_idt.mean", "loss_gan.mean", "loss_his.mean", "loss_reg.mean", "torch.mean.mean", "torch.mean.mean", "torch.mean.mean", "solver.Solver.cal_adv_loss", "solver.Solver.cal_adv_loss", "solver.Solver.input_diversity", "solver.Solver.input_diversity", "solver.Solver.cal_adv_loss", "solver.Solver.cal_adv_loss", "solver.Solver.input_noise", "solver.Solver.input_noise"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.plot.tick", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.update_lr", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.log_terminal", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.plot.plot", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.vis_train", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.save_models", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.tools.plot.flush", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.cal_adv_loss", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.cal_adv_loss", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.input_diversity", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.input_diversity", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.cal_adv_loss", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.cal_adv_loss", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.input_noise", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.input_noise"], ["", "def", "train", "(", "self", ")", ":", "\n", "# The number of iterations per epoch", "\n", "        ", "self", ".", "iters_per_epoch", "=", "len", "(", "self", ".", "data_loader_train", ")", "\n", "# Start with trained model if exists", "\n", "g_lr", "=", "self", ".", "g_lr", "\n", "h_lr", "=", "self", ".", "h_lr", "\n", "d_lr", "=", "self", ".", "d_lr", "\n", "start", "=", "0", "\n", "\n", "for", "self", ".", "e", "in", "range", "(", "start", ",", "self", ".", "num_epochs", ")", ":", "\n", "            ", "for", "self", ".", "i", ",", "(", "source_input", ",", "reference_input", ")", "in", "enumerate", "(", "self", ".", "data_loader_train", ")", ":", "\n", "# image, mask, dist", "\n", "                ", "image_s", ",", "image_r", "=", "source_input", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", ",", "reference_input", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "mask_s", ",", "mask_r", "=", "source_input", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", ",", "reference_input", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "dist_s", ",", "dist_r", "=", "source_input", "[", "2", "]", ".", "to", "(", "self", ".", "device", ")", ",", "reference_input", "[", "2", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "############################################ Train D ###################################################", "\n", "# Real", "\n", "out", "=", "self", ".", "D_A", "(", "image_r", ")", "\n", "d_loss_real", "=", "self", ".", "criterionGAN", "(", "out", ",", "True", ")", "\n", "# Fake", "\n", "fake_A", "=", "self", ".", "G", "(", "image_s", ",", "image_r", ",", "mask_s", ",", "mask_r", ",", "dist_s", ",", "dist_r", ")", "\n", "fake_A", "=", "Variable", "(", "fake_A", ".", "data", ")", ".", "detach", "(", ")", "\n", "out", "=", "self", ".", "D_A", "(", "fake_A", ")", "\n", "d_loss_fake", "=", "self", ".", "criterionGAN", "(", "out", ",", "False", ")", "\n", "# Backward + Optimize", "\n", "d_loss", "=", "(", "d_loss_real", ".", "mean", "(", ")", "+", "d_loss_fake", ".", "mean", "(", ")", ")", "*", "0.5", "\n", "self", ".", "d_A_optimizer", ".", "zero_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "self", ".", "d_A_optimizer", ".", "step", "(", ")", "\n", "# Logging", "\n", "self", ".", "loss", "=", "{", "}", "\n", "self", ".", "loss", "[", "'D-A-loss_real'", "]", "=", "d_loss_real", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "# Real", "\n", "out", "=", "self", ".", "D_B", "(", "image_s", ")", "\n", "d_loss_real", "=", "self", ".", "criterionGAN", "(", "out", ",", "True", ")", "\n", "# Fake", "\n", "fake_B", "=", "self", ".", "G", "(", "image_r", ",", "image_s", ",", "mask_r", ",", "mask_s", ",", "dist_r", ",", "dist_s", ")", "\n", "fake_B", "=", "Variable", "(", "fake_B", ".", "data", ")", ".", "detach", "(", ")", "\n", "out", "=", "self", ".", "D_B", "(", "fake_B", ")", "\n", "d_loss_fake", "=", "self", ".", "criterionGAN", "(", "out", ",", "False", ")", "\n", "# Backward + Optimize", "\n", "d_loss", "=", "(", "d_loss_real", ".", "mean", "(", ")", "+", "d_loss_fake", ".", "mean", "(", ")", ")", "*", "0.5", "\n", "self", ".", "d_B_optimizer", ".", "zero_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "self", ".", "d_B_optimizer", ".", "step", "(", ")", "\n", "# Logging", "\n", "self", ".", "loss", "[", "'D-B-loss_real'", "]", "=", "d_loss_real", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "\n", "############################################ Train G ###################################################", "\n", "if", "(", "self", ".", "i", "+", "1", ")", "%", "self", ".", "g_step", "==", "0", ":", "\n", "# loss_gan", "\n", "                    ", "fake_A", "=", "self", ".", "G", "(", "image_s", ",", "image_r", ",", "mask_s", ",", "mask_r", ",", "dist_s", ",", "dist_r", ")", "\n", "pred_fake", "=", "self", ".", "D_A", "(", "fake_A", ")", "\n", "g_A_loss_adv", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "fake_B", "=", "self", ".", "G", "(", "image_r", ",", "image_s", ",", "mask_r", ",", "mask_s", ",", "dist_r", ",", "dist_s", ")", "\n", "pred_fake", "=", "self", ".", "D_B", "(", "fake_B", ")", "\n", "g_B_loss_adv", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "loss_gan", "=", "(", "g_A_loss_adv", "+", "g_B_loss_adv", ")", "*", "self", ".", "lamda_gan", "*", "0.5", "\n", "\n", "# loss_idt", "\n", "idt_A", "=", "self", ".", "G", "(", "image_s", ",", "image_s", ",", "mask_s", ",", "mask_s", ",", "dist_s", ",", "dist_s", ")", "\n", "idt_B", "=", "self", ".", "G", "(", "image_r", ",", "image_r", ",", "mask_r", ",", "mask_r", ",", "dist_r", ",", "dist_r", ")", "\n", "loss_idt_A", "=", "self", ".", "criterionL1", "(", "idt_A", ",", "image_s", ")", "+", "self", ".", "LPIPS", "(", "idt_A", ",", "image_s", ")", "+", "self", ".", "LPIPS", "(", "fake_A", ",", "image_s", ")", "\n", "loss_idt_B", "=", "self", ".", "criterionL1", "(", "idt_B", ",", "image_r", ")", "+", "self", ".", "LPIPS", "(", "idt_B", ",", "image_r", ")", "+", "self", ".", "LPIPS", "(", "fake_B", ",", "image_r", ")", "\n", "loss_idt", "=", "(", "loss_idt_A", "+", "loss_idt_B", ")", "*", "self", ".", "lambda_idt", "*", "0.5", "\n", "\n", "# loss_make", "\n", "g_A_loss_his", "=", "0", "\n", "g_B_loss_his", "=", "0", "\n", "# lip", "\n", "g_A_lip_loss_his", "=", "self", ".", "criterionHis", "(", "fake_A", ",", "image_r", ",", "mask_s", "[", ":", ",", "0", "]", ",", "mask_r", "[", ":", ",", "0", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_lip", "\n", "g_B_lip_loss_his", "=", "self", ".", "criterionHis", "(", "fake_B", ",", "image_s", ",", "mask_r", "[", ":", ",", "0", "]", ",", "mask_s", "[", ":", ",", "0", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_lip", "\n", "g_A_loss_his", "+=", "g_A_lip_loss_his", "\n", "g_B_loss_his", "+=", "g_B_lip_loss_his", "\n", "# skin", "\n", "g_A_skin_loss_his", "=", "self", ".", "criterionHis", "(", "fake_A", ",", "image_r", ",", "mask_s", "[", ":", ",", "1", "]", ",", "mask_r", "[", ":", ",", "1", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_skin", "\n", "g_B_skin_loss_his", "=", "self", ".", "criterionHis", "(", "fake_B", ",", "image_s", ",", "mask_r", "[", ":", ",", "1", "]", ",", "mask_s", "[", ":", ",", "1", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_skin", "\n", "g_A_loss_his", "+=", "g_A_skin_loss_his", "\n", "g_B_loss_his", "+=", "g_B_skin_loss_his", "\n", "# eye", "\n", "g_A_eye_loss_his", "=", "self", ".", "criterionHis", "(", "fake_A", ",", "image_r", ",", "mask_s", "[", ":", ",", "2", "]", ",", "mask_r", "[", ":", ",", "2", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_eye", "\n", "g_B_eye_loss_his", "=", "self", ".", "criterionHis", "(", "fake_B", ",", "image_s", ",", "mask_r", "[", ":", ",", "2", "]", ",", "mask_s", "[", ":", ",", "2", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_eye", "\n", "g_A_loss_his", "+=", "g_A_eye_loss_his", "\n", "g_B_loss_his", "+=", "g_B_eye_loss_his", "\n", "\n", "loss_his", "=", "(", "g_A_loss_his", "+", "g_B_loss_his", ")", "*", "self", ".", "lamda_make", "*", "0.5", "\n", "\n", "# loss_reg", "\n", "purified_A", "=", "self", ".", "H", "(", "fake_A", ")", "\n", "purified_B", "=", "self", ".", "H", "(", "fake_B", ")", "\n", "rec_A", "=", "self", ".", "H", "(", "self", ".", "G", "(", "purified_A", ",", "image_s", ",", "mask_s", ",", "mask_s", ",", "dist_s", ",", "dist_s", ")", ")", "\n", "rec_B", "=", "self", ".", "H", "(", "self", ".", "G", "(", "purified_B", ",", "image_r", ",", "mask_r", ",", "mask_r", ",", "dist_r", ",", "dist_r", ")", ")", "\n", "g_loss_rec_A", "=", "self", ".", "criterionL1", "(", "rec_A", ",", "image_s", ")", "\n", "g_loss_rec_B", "=", "self", ".", "criterionL1", "(", "rec_B", ",", "image_r", ")", "\n", "loss_reg", "=", "(", "g_loss_rec_A", "+", "g_loss_rec_B", ")", "*", "self", ".", "lamda_reg", "*", "0.5", "\n", "\n", "# loss_adv", "\n", "targeted_loss_list", "=", "[", "]", "\n", "fake_A_diversity", "=", "[", "]", "\n", "fake_B_diversity", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "diversity", ")", ":", "\n", "                        ", "fake_A_diversity", ".", "append", "(", "self", ".", "input_diversity", "(", "self", ".", "input_noise", "(", "fake_A", ")", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "fake_B_diversity", ".", "append", "(", "self", ".", "input_diversity", "(", "self", ".", "input_noise", "(", "fake_B", ")", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "for", "model_name", "in", "self", ".", "targe_models", ".", "keys", "(", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "self", ".", "diversity", ")", ":", "\n", "                            ", "target_loss_A", "=", "self", ".", "cal_adv_loss", "(", "fake_A_diversity", "[", "i", "]", ",", "self", ".", "target_image", ",", "model_name", ",", "self", ".", "targe_models", ")", "*", "self", ".", "lambda_adv", "*", "0.5", "\n", "target_loss_B", "=", "self", ".", "cal_adv_loss", "(", "fake_B_diversity", "[", "i", "]", ",", "self", ".", "target_image", ",", "model_name", ",", "self", ".", "targe_models", ")", "*", "self", ".", "lambda_adv", "*", "0.5", "\n", "targeted_loss_list", ".", "append", "(", "target_loss_A", ")", "\n", "targeted_loss_list", ".", "append", "(", "target_loss_B", ")", "\n", "", "", "loss_adv", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "targeted_loss_list", ")", ")", "\n", "\n", "# total loss", "\n", "g_loss", "=", "(", "loss_idt", "+", "loss_gan", "+", "loss_his", "+", "loss_reg", "+", "loss_adv", ")", ".", "mean", "(", ")", "\n", "self", ".", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "g_loss", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "self", ".", "g_optimizer", ".", "step", "(", ")", "\n", "\n", "# Logging", "\n", "self", ".", "loss", "[", "'G-idt-Loss'", "]", "=", "loss_idt", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'G-gan-Loss'", "]", "=", "loss_gan", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'G-his-Loss'", "]", "=", "loss_his", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'G-reg-Loss'", "]", "=", "loss_reg", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'G-adv-Loss'", "]", "=", "loss_adv", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "############################################ Train H ###################################################", "\n", "# G's output", "\n", "", "fake_A", "=", "self", ".", "G", "(", "image_s", ",", "image_r", ",", "mask_s", ",", "mask_r", ",", "dist_s", ",", "dist_r", ")", ".", "detach", "(", ")", "\n", "fake_B", "=", "self", ".", "G", "(", "image_r", ",", "image_s", ",", "mask_r", ",", "mask_s", ",", "dist_r", ",", "dist_s", ")", ".", "detach", "(", ")", "\n", "idt_A", "=", "self", ".", "G", "(", "image_s", ",", "image_s", ",", "mask_s", ",", "mask_s", ",", "dist_s", ",", "dist_s", ")", ".", "detach", "(", ")", "\n", "idt_B", "=", "self", ".", "G", "(", "image_r", ",", "image_r", ",", "mask_r", ",", "mask_r", ",", "dist_r", ",", "dist_r", ")", ".", "detach", "(", ")", "\n", "\n", "# loss_gan", "\n", "purified_A", "=", "self", ".", "H", "(", "fake_A", ")", "\n", "purified_B", "=", "self", ".", "H", "(", "fake_B", ")", "\n", "pred_fake", "=", "self", ".", "D_A", "(", "purified_A", ")", "\n", "h_A_loss_adv", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "pred_fake", "=", "self", ".", "D_B", "(", "purified_B", ")", "\n", "h_B_loss_adv", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "loss_gan_h", "=", "(", "h_A_loss_adv", "+", "h_B_loss_adv", ")", "*", "self", ".", "lamda_gan", "*", "0.5", "\n", "\n", "# loss_idt", "\n", "purified_idt_A", "=", "self", ".", "H", "(", "idt_A", ")", "\n", "purified_idt_B", "=", "self", ".", "H", "(", "idt_B", ")", "\n", "loss_idt_A_h", "=", "self", ".", "criterionL1", "(", "purified_idt_A", ",", "image_s", ")", "+", "self", ".", "LPIPS", "(", "purified_idt_A", ",", "image_s", ")", "+", "self", ".", "LPIPS", "(", "purified_A", ",", "image_s", ")", "\n", "loss_idt_B_h", "=", "self", ".", "criterionL1", "(", "purified_idt_B", ",", "image_r", ")", "+", "self", ".", "LPIPS", "(", "purified_idt_B", ",", "image_r", ")", "+", "self", ".", "LPIPS", "(", "purified_B", ",", "image_r", ")", "\n", "loss_idt_h", "=", "(", "loss_idt_A_h", "+", "loss_idt_B_h", ")", "*", "self", ".", "lambda_idt", "*", "0.5", "\n", "\n", "# loss_make", "\n", "h_A_loss_his", "=", "0", "\n", "h_B_loss_his", "=", "0", "\n", "# lip", "\n", "h_A_lip_loss_his", "=", "self", ".", "criterionHis", "(", "purified_A", ",", "image_r", ",", "mask_s", "[", ":", ",", "0", "]", ",", "mask_r", "[", ":", ",", "0", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_lip", "\n", "h_B_lip_loss_his", "=", "self", ".", "criterionHis", "(", "purified_B", ",", "image_s", ",", "mask_r", "[", ":", ",", "0", "]", ",", "mask_s", "[", ":", ",", "0", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_lip", "\n", "h_A_loss_his", "+=", "h_A_lip_loss_his", "\n", "h_B_loss_his", "+=", "h_B_lip_loss_his", "\n", "# skin", "\n", "h_A_skin_loss_his", "=", "self", ".", "criterionHis", "(", "purified_A", ",", "image_r", ",", "mask_s", "[", ":", ",", "1", "]", ",", "mask_r", "[", ":", ",", "1", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_skin", "\n", "h_B_skin_loss_his", "=", "self", ".", "criterionHis", "(", "purified_B", ",", "image_s", ",", "mask_r", "[", ":", ",", "1", "]", ",", "mask_s", "[", ":", ",", "1", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_skin", "\n", "h_A_loss_his", "+=", "h_A_skin_loss_his", "\n", "h_B_loss_his", "+=", "h_B_skin_loss_his", "\n", "# eye", "\n", "h_A_eye_loss_his", "=", "self", ".", "criterionHis", "(", "purified_A", ",", "image_r", ",", "mask_s", "[", ":", ",", "2", "]", ",", "mask_r", "[", ":", ",", "2", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_eye", "\n", "h_B_eye_loss_his", "=", "self", ".", "criterionHis", "(", "purified_B", ",", "image_s", ",", "mask_r", "[", ":", ",", "2", "]", ",", "mask_s", "[", ":", ",", "2", "]", ",", "self", ".", "device", ")", "*", "self", ".", "lambda_his_eye", "\n", "h_A_loss_his", "+=", "h_A_eye_loss_his", "\n", "h_B_loss_his", "+=", "h_B_eye_loss_his", "\n", "\n", "loss_his_h", "=", "(", "h_A_loss_his", "+", "h_B_loss_his", ")", "*", "self", ".", "lamda_make", "*", "0.5", "\n", "\n", "# loss_reg", "\n", "rec_A", "=", "self", ".", "H", "(", "self", ".", "G", "(", "purified_A", ",", "image_s", ",", "mask_s", ",", "mask_s", ",", "dist_s", ",", "dist_s", ")", ")", "\n", "rec_B", "=", "self", ".", "H", "(", "self", ".", "G", "(", "purified_B", ",", "image_r", ",", "mask_r", ",", "mask_r", ",", "dist_r", ",", "dist_r", ")", ")", "\n", "h_loss_rec_A", "=", "self", ".", "criterionL1", "(", "rec_A", ",", "image_s", ")", "\n", "h_loss_rec_B", "=", "self", ".", "criterionL1", "(", "rec_B", ",", "image_r", ")", "\n", "loss_reg_h", "=", "(", "h_loss_rec_A", "+", "h_loss_rec_B", ")", "*", "self", ".", "lamda_reg", "*", "0.5", "\n", "\n", "# loss_adv", "\n", "self_loss_list", "=", "[", "]", "\n", "for", "model_name", "in", "self", ".", "targe_models", ".", "keys", "(", ")", ":", "\n", "                    ", "target_loss_A", "=", "self", ".", "cal_adv_loss", "(", "purified_A", ",", "image_s", ",", "model_name", ",", "self", ".", "targe_models", ")", "*", "self", ".", "lambda_adv", "*", "0.5", "\n", "target_loss_B", "=", "self", ".", "cal_adv_loss", "(", "purified_B", ",", "image_r", ",", "model_name", ",", "self", ".", "targe_models", ")", "*", "self", ".", "lambda_adv", "*", "0.5", "\n", "self_loss_list", ".", "append", "(", "target_loss_A", ")", "\n", "self_loss_list", ".", "append", "(", "target_loss_B", ")", "\n", "", "loss_adv_h", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "self_loss_list", ")", ")", "\n", "\n", "# total loss", "\n", "h_loss", "=", "(", "loss_idt_h", "+", "loss_gan_h", "+", "loss_his_h", "+", "loss_reg_h", "+", "loss_adv_h", ")", ".", "mean", "(", ")", "\n", "self", ".", "h_optimizer", ".", "zero_grad", "(", ")", "\n", "h_loss", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "self", ".", "h_optimizer", ".", "step", "(", ")", "\n", "\n", "# Logging", "\n", "self", ".", "loss", "[", "'H-idt-Loss'", "]", "=", "loss_idt_h", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'H-gan-Loss'", "]", "=", "loss_gan_h", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'H-his-Loss'", "]", "=", "loss_his_h", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'H-reg-Loss'", "]", "=", "loss_reg_h", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss", "[", "'H-adv-Loss'", "]", "=", "loss_adv_h", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "\n", "# Print out log info", "\n", "if", "(", "self", ".", "i", "+", "1", ")", "%", "self", ".", "log_step", "==", "0", ":", "\n", "                    ", "self", ".", "log_terminal", "(", ")", "\n", "\n", "# plot the figures", "\n", "", "for", "key_now", "in", "self", ".", "loss", ".", "keys", "(", ")", ":", "\n", "                    ", "plot_fig", ".", "plot", "(", "key_now", ",", "self", ".", "loss", "[", "key_now", "]", ")", "\n", "\n", "# save the images", "\n", "", "if", "(", "self", ".", "i", ")", "%", "self", ".", "vis_step", "==", "0", ":", "\n", "                    ", "print", "(", "\"Saving middle output...\"", ")", "\n", "# self.vis_train([mask_s[:, :, 0], mask_r[:, :, 0],", "\n", "#                 image_s, image_r,", "\n", "#                 idt_A, idt_B, purified_idt_A, purified_idt_B,", "\n", "#                 fake_A, fake_B, purified_A, purified_B,", "\n", "#                 rec_A, rec_B", "\n", "#                 ])", "\n", "self", ".", "vis_train", "(", "[", "mask_s", "[", ":", ",", ":", ",", "0", "]", ",", "image_s", ",", "image_r", ",", "idt_A", ",", "purified_idt_A", ",", "fake_A", ",", "purified_A", ",", "rec_A", "]", ")", "\n", "\n", "# Save model checkpoints", "\n", "", "if", "(", "self", ".", "i", ")", "%", "self", ".", "snapshot_step", "==", "0", ":", "\n", "                    ", "self", ".", "save_models", "(", ")", "\n", "\n", "", "if", "(", "self", ".", "i", "%", "100", "==", "99", ")", ":", "\n", "                    ", "plot_fig", ".", "flush", "(", "self", ".", "log_path", ")", "\n", "\n", "", "plot_fig", ".", "tick", "(", ")", "\n", "\n", "# Decay learning rate", "\n", "", "if", "(", "self", ".", "e", "+", "1", ")", ">", "(", "self", ".", "num_epochs", "-", "self", ".", "num_epochs_decay", ")", ":", "\n", "                ", "g_lr", "-=", "(", "self", ".", "g_lr", "/", "float", "(", "self", ".", "num_epochs_decay", ")", ")", "\n", "d_lr", "-=", "(", "self", ".", "d_lr", "/", "float", "(", "self", ".", "num_epochs_decay", ")", ")", "\n", "h_lr", "-=", "(", "self", ".", "h_lr", "/", "float", "(", "self", ".", "num_epochs_decay", ")", ")", "\n", "self", ".", "update_lr", "(", "g_lr", ",", "d_lr", ",", "h_lr", ")", "\n", "print", "(", "'Decay learning rate to g_lr: {}, d_lr:{}, h_lr:{}.'", ".", "format", "(", "g_lr", ",", "d_lr", ",", "h_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.update_lr": [[484, 493], ["None"], "methods", ["None"], ["", "", "", "def", "update_lr", "(", "self", ",", "g_lr", ",", "d_lr", ",", "h_lr", ")", ":", "\n", "        ", "for", "param_group", "in", "self", ".", "g_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "g_lr", "\n", "", "for", "param_group", "in", "self", ".", "d_A_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "d_lr", "\n", "", "for", "param_group", "in", "self", ".", "d_B_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "d_lr", "\n", "", "for", "param_group", "in", "self", ".", "h_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "h_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.save_models": [[494, 513], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "solver.Solver.G.state_dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "solver.Solver.D_A.state_dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "solver.Solver.D_B.state_dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "solver.Solver.H.state_dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.lpips.trainer.Trainer.save"], ["", "", "def", "save_models", "(", "self", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "self", ".", "snapshot_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "snapshot_path", ")", "\n", "", "torch", ".", "save", "(", "\n", "self", ".", "G", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "snapshot_path", ",", "'{}_{}_G.pth'", ".", "format", "(", "self", ".", "e", "+", "1", ",", "self", ".", "i", "+", "1", ")", ")", ")", "\n", "torch", ".", "save", "(", "\n", "self", ".", "D_A", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "snapshot_path", ",", "'{}_{}_D_A.pth'", ".", "format", "(", "self", ".", "e", "+", "1", ",", "self", ".", "i", "+", "1", ")", ")", ")", "\n", "torch", ".", "save", "(", "\n", "self", ".", "D_B", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "snapshot_path", ",", "'{}_{}_D_B.pth'", ".", "format", "(", "self", ".", "e", "+", "1", ",", "self", ".", "i", "+", "1", ")", ")", ")", "\n", "torch", ".", "save", "(", "\n", "self", ".", "H", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "snapshot_path", ",", "'{}_{}_H.pth'", ".", "format", "(", "self", ".", "e", "+", "1", ",", "self", ".", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.vis_train": [[514, 523], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.join", "os.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.utils.save_image", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "solver.Solver.de_norm"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.de_norm"], ["", "def", "vis_train", "(", "self", ",", "img_train_list", ")", ":", "\n", "# saving training results", "\n", "        ", "mode", "=", "\"train_vis\"", "\n", "img_train_list", "=", "torch", ".", "cat", "(", "img_train_list", ",", "dim", "=", "3", ")", "\n", "result_path_train", "=", "osp", ".", "join", "(", "self", ".", "result_path", ",", "mode", ")", "\n", "if", "not", "osp", ".", "exists", "(", "result_path_train", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "result_path_train", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "result_path_train", ",", "'{}_{}_fake.jpg'", ".", "format", "(", "self", ".", "e", ",", "self", ".", "i", ")", ")", "\n", "save_image", "(", "self", ".", "de_norm", "(", "img_train_list", ".", "data", ")", ",", "save_path", ",", "normalize", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.solver.Solver.log_terminal": [[524, 534], ["str", "solver.Solver.loss.items", "print", "time.time", "datetime.timedelta"], "methods", ["None"], ["", "def", "log_terminal", "(", "self", ")", ":", "\n", "        ", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "\n", "log", "=", "\"Elapsed [{}], Epoch [{}/{}], Iter [{}/{}]\"", ".", "format", "(", "\n", "elapsed", ",", "self", ".", "e", "+", "1", ",", "self", ".", "num_epochs", ",", "self", ".", "i", "+", "1", ",", "self", ".", "iters_per_epoch", ")", "\n", "\n", "for", "tag", ",", "value", "in", "self", ".", "loss", ".", "items", "(", ")", ":", "\n", "            ", "log", "+=", "\", {}: {:.4f}\"", ".", "format", "(", "tag", ",", "value", ")", "\n", "", "print", "(", "log", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.ResidualBlock.__init__": [[44, 56], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "net_mode", "=", "None", ")", ":", "\n", "        ", "if", "net_mode", "==", "'p'", "or", "(", "net_mode", "is", "None", ")", ":", "\n", "            ", "use_affine", "=", "True", "\n", "", "elif", "net_mode", "==", "'t'", ":", "\n", "            ", "use_affine", "=", "False", "\n", "", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_out", ",", "affine", "=", "use_affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_out", ",", "affine", "=", "use_affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.ResidualBlock.forward": [[58, 60], ["net.ResidualBlock.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.GetMatrix.__init__": [[63, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", "GetMatrix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "get_gamma", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "get_beta", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.GetMatrix.forward": [[68, 72], ["net.GetMatrix.get_gamma", "net.GetMatrix.get_beta"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "gamma", "=", "self", ".", "get_gamma", "(", "x", ")", "\n", "beta", "=", "self", ".", "get_beta", "(", "x", ")", "\n", "return", "x", ",", "gamma", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.ResidualBlock_noBN.__init__": [[75, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "net.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ")", ":", "\n", "        ", "super", "(", "ResidualBlock_noBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# initialization", "\n", "initialize_weights", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", "]", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.ResidualBlock_noBN.forward": [[83, 88], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "net.ResidualBlock_noBN.conv2", "net.ResidualBlock_noBN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "identity", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.NONLocalBlock2D.__init__": [[91, 95], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.NONLocalBlock2D.forward": [[96, 109], ["source.size", "source.view", "g_source.permute.permute.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "y.view.view.permute().contiguous", "y.view.view.view", "weight.to_dense", "y.view.view.permute", "source.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source", ",", "weight", ")", ":", "\n", "        ", "\"\"\"(b, c, h, w)\n        src_diff: (3, 136, 32, 32)\n        \"\"\"", "\n", "batch_size", "=", "source", ".", "size", "(", "0", ")", "\n", "\n", "g_source", "=", "source", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "# (N, C, H*W)", "\n", "g_source", "=", "g_source", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (N, H*W, C)", "\n", "\n", "y", "=", "torch", ".", "bmm", "(", "weight", ".", "to_dense", "(", ")", ",", "g_source", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (N, C, H*W)", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "1", ",", "*", "source", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.ResidualDenseBlock_5C.__init__": [[112, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.ResidualDenseBlock_5C.forward": [[122, 129], ["net.ResidualDenseBlock_5C.lrelu", "net.ResidualDenseBlock_5C.lrelu", "net.ResidualDenseBlock_5C.lrelu", "net.ResidualDenseBlock_5C.lrelu", "net.ResidualDenseBlock_5C.conv5", "net.ResidualDenseBlock_5C.conv1", "net.ResidualDenseBlock_5C.conv2", "net.ResidualDenseBlock_5C.conv3", "net.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.RRDB.__init__": [[133, 138], ["torch.Module.__init__", "net.ResidualDenseBlock_5C", "net.ResidualDenseBlock_5C", "net.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.RRDB.forward": [[139, 144], ["net.RRDB.RDB1", "net.RRDB.RDB2", "net.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Generator.__init__": [[151, 215], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "net.NONLocalBlock2D", "net.NONLocalBlock2D", "net.GetMatrix", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "setattr", "setattr", "setattr", "setattr", "setattr", "setattr", "setattr", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "net.ResidualBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "net.ResidualBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# -------------------------- PNet(MDNet) for obtaining makeup matrices --------------------------", "\n", "\n", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "pnet_in", "=", "layers", "\n", "\n", "# Down-Sampling", "\n", "curr_dim", "=", "64", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "*", "2", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "setattr", "(", "self", ",", "f'pnet_down_{i + 1}'", ",", "layers", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "# Bottleneck. All bottlenecks share the same attention module", "\n", "", "self", ".", "atten_bottleneck_g", "=", "NONLocalBlock2D", "(", ")", "\n", "self", ".", "atten_bottleneck_b", "=", "NONLocalBlock2D", "(", ")", "\n", "self", ".", "simple_spade", "=", "GetMatrix", "(", "curr_dim", ",", "1", ")", "# get the makeup matrix", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "f'pnet_bottleneck_{i + 1}'", ",", "ResidualBlock", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "curr_dim", ",", "net_mode", "=", "'p'", ")", ")", "\n", "\n", "# --------------------------- TNet(MANet) for applying makeup transfer ----------------------------", "\n", "\n", "", "self", ".", "tnet_in_conv", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "tnet_in_spade", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "tnet_in_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# Down-Sampling", "\n", "curr_dim", "=", "64", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "f'tnet_down_conv_{i + 1}'", ",", "\n", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "setattr", "(", "self", ",", "f'tnet_down_spade_{i + 1}'", ",", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "*", "2", ",", "affine", "=", "False", ")", ")", "\n", "setattr", "(", "self", ",", "f'tnet_down_relu_{i + 1}'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "# Bottleneck", "\n", "", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "f'tnet_bottleneck_{i + 1}'", ",", "ResidualBlock", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "curr_dim", ",", "net_mode", "=", "'t'", ")", ")", "\n", "\n", "# Up-Sampling", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "f'tnet_up_conv_{i + 1}'", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "curr_dim", ",", "curr_dim", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "setattr", "(", "self", ",", "f'tnet_up_spade_{i + 1}'", ",", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "//", "2", ",", "affine", "=", "False", ")", ")", "\n", "setattr", "(", "self", ",", "f'tnet_up_relu_{i + 1}'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "//", "2", "\n", "\n", "", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "curr_dim", ",", "3", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "tnet_out", "=", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Generator.atten_feature": [[216, 238], ["torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "gamma_s.repeat", "beta_s.repeat", "atten_module_g", "atten_module_b", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "atten_feature", "(", "mask_s", ",", "weight", ",", "gamma_s", ",", "beta_s", ",", "atten_module_g", ",", "atten_module_b", ")", ":", "\n", "        ", "\"\"\"\n        feature size: (1, c, h, w)\n        mask_c(s): (3, 1, h, w)\n        diff_c: (1, 138, 256, 256)\n        return: (1, c, h, w)\n        \"\"\"", "\n", "channel_num", "=", "gamma_s", ".", "shape", "[", "1", "]", "\n", "\n", "mask_s_re", "=", "F", ".", "interpolate", "(", "mask_s", ",", "size", "=", "gamma_s", ".", "shape", "[", "2", ":", "]", ")", ".", "repeat", "(", "1", ",", "channel_num", ",", "1", ",", "1", ")", "\n", "gamma_s_re", "=", "gamma_s", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "gamma_s", "=", "gamma_s_re", "*", "mask_s_re", "# (3, c, h, w)", "\n", "beta_s_re", "=", "beta_s", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "beta_s", "=", "beta_s_re", "*", "mask_s_re", "\n", "\n", "gamma", "=", "atten_module_g", "(", "gamma_s", ",", "weight", ")", "# (3, c, h, w)", "\n", "beta", "=", "atten_module_b", "(", "beta_s", ",", "weight", ")", "\n", "\n", "gamma", "=", "(", "gamma", "[", "0", "]", "+", "gamma", "[", "1", "]", "+", "gamma", "[", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", "# (c, h, w) combine the three parts", "\n", "beta", "=", "(", "beta", "[", "0", "]", "+", "beta", "[", "1", "]", "+", "beta", "[", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "gamma", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Generator.get_weight": [[239, 277], ["torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "fea_c.repeat.repeat.repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "fea_s.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "theta_target.permute.permute.permute", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax.detach().nonzero().long().permute", "F.softmax.detach().nonzero().long().permute.clone", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.softmax.detach().nonzero().long", "torch.softmax.detach().nonzero", "torch.softmax.detach"], "methods", ["None"], ["", "def", "get_weight", "(", "self", ",", "mask_c", ",", "mask_s", ",", "fea_c", ",", "fea_s", ",", "diff_c", ",", "diff_s", ")", ":", "\n", "        ", "\"\"\"  s --> source; c --> target\n        feature size: (1, 256, 64, 64)\n        diff: (3, 136, 32, 32)\n        \"\"\"", "\n", "HW", "=", "64", "*", "64", "\n", "batch_size", "=", "3", "\n", "assert", "fea_s", "is", "not", "None", "# fea_s when i==3", "\n", "# get 3 part fea using mask", "\n", "channel_num", "=", "fea_s", ".", "shape", "[", "1", "]", "\n", "\n", "mask_c_re", "=", "F", ".", "interpolate", "(", "mask_c", ",", "size", "=", "64", ")", ".", "repeat", "(", "1", ",", "channel_num", ",", "1", ",", "1", ")", "# (3, c, h, w)", "\n", "fea_c", "=", "fea_c", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "# (3, c, h, w)", "\n", "fea_c", "=", "fea_c", "*", "mask_c_re", "# (3, c, h, w) 3 stands for 3 parts", "\n", "\n", "mask_s_re", "=", "F", ".", "interpolate", "(", "mask_s", ",", "size", "=", "64", ")", ".", "repeat", "(", "1", ",", "channel_num", ",", "1", ",", "1", ")", "\n", "fea_s", "=", "fea_s", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "fea_s", "=", "fea_s", "*", "mask_s_re", "\n", "\n", "theta_input", "=", "torch", ".", "cat", "(", "(", "fea_c", "*", "0.01", ",", "diff_c", ")", ",", "dim", "=", "1", ")", "\n", "phi_input", "=", "torch", ".", "cat", "(", "(", "fea_s", "*", "0.01", ",", "diff_s", ")", ",", "dim", "=", "1", ")", "\n", "\n", "theta_target", "=", "theta_input", ".", "view", "(", "batch_size", ",", "-", "1", ",", "HW", ")", "# (N, C+136, H*W)", "\n", "theta_target", "=", "theta_target", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (N, H*W, C+136)", "\n", "phi_source", "=", "phi_input", ".", "view", "(", "batch_size", ",", "-", "1", ",", "HW", ")", "# (N, C+136, H*W)", "\n", "weight", "=", "torch", ".", "bmm", "(", "theta_target", ",", "phi_source", ")", "# (3, HW, HW)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "v", "=", "weight", ".", "detach", "(", ")", ".", "nonzero", "(", ")", ".", "long", "(", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "# This clone is required to correctly release cuda memory.", "\n", "weight_ind", "=", "v", ".", "clone", "(", ")", "\n", "del", "v", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "weight", "*=", "200", "# hyper parameters for visual feature", "\n", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "-", "1", ")", "\n", "weight", "=", "weight", "[", "weight_ind", "[", "0", "]", ",", "weight_ind", "[", "1", "]", ",", "weight_ind", "[", "2", "]", "]", "\n", "ret", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "weight_ind", ",", "weight", ",", "torch", ".", "Size", "(", "[", "3", ",", "HW", ",", "HW", "]", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Generator.forward": [[278, 341], ["net.Generator.tnet_in_conv", "net.Generator.pnet_in", "net.Generator.tnet_in_spade", "net.Generator.tnet_in_relu", "range", "range", "range", "net.Generator.tnet_out", "getattr", "getattr", "getattr", "getattr.", "getattr.", "getattr.", "getattr", "getattr.", "getattr", "getattr", "getattr", "getattr.", "getattr.", "getattr.", "x.squeeze", "getattr", "getattr.", "getattr", "getattr.", "net.Generator.simple_spade", "net.Generator.get_weight", "net.Generator.atten_feature"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Generator.get_weight", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Generator.atten_feature"], ["", "def", "forward", "(", "self", ",", "c", ",", "s", ",", "mask_c", ",", "mask_s", ",", "diff_c", ",", "diff_s", ",", "gamma", "=", "None", ",", "beta", "=", "None", ",", "ret", "=", "False", ")", ":", "\n", "        ", "c", ",", "s", ",", "mask_c", ",", "mask_s", ",", "diff_c", ",", "diff_s", "=", "[", "x", ".", "squeeze", "(", "0", ")", "if", "x", ".", "ndim", "==", "5", "else", "x", "for", "x", "in", "\n", "[", "c", ",", "s", ",", "mask_c", ",", "mask_s", ",", "diff_c", ",", "diff_s", "]", "]", "\n", "\"\"\"attention version\n        c: content, stands for source image. shape: (b, c, h, w)\n        s: style, stands for reference image. shape: (b, c, h, w)\n        mask_list_c: lip, skin, eye. (b, 1, h, w)\n        \"\"\"", "\n", "\n", "# forward c in tnet(MANet)", "\n", "c_tnet", "=", "self", ".", "tnet_in_conv", "(", "c", ")", "\n", "s", "=", "self", ".", "pnet_in", "(", "s", ")", "\n", "c_tnet", "=", "self", ".", "tnet_in_spade", "(", "c_tnet", ")", "\n", "c_tnet", "=", "self", ".", "tnet_in_relu", "(", "c_tnet", ")", "\n", "\n", "# down-sampling", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "gamma", "is", "None", ":", "\n", "                ", "cur_pnet_down", "=", "getattr", "(", "self", ",", "f'pnet_down_{i + 1}'", ")", "\n", "s", "=", "cur_pnet_down", "(", "s", ")", "\n", "\n", "", "cur_tnet_down_conv", "=", "getattr", "(", "self", ",", "f'tnet_down_conv_{i + 1}'", ")", "\n", "cur_tnet_down_spade", "=", "getattr", "(", "self", ",", "f'tnet_down_spade_{i + 1}'", ")", "\n", "cur_tnet_down_relu", "=", "getattr", "(", "self", ",", "f'tnet_down_relu_{i + 1}'", ")", "\n", "c_tnet", "=", "cur_tnet_down_conv", "(", "c_tnet", ")", "\n", "c_tnet", "=", "cur_tnet_down_spade", "(", "c_tnet", ")", "\n", "c_tnet", "=", "cur_tnet_down_relu", "(", "c_tnet", ")", "\n", "\n", "# bottleneck", "\n", "", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "if", "gamma", "is", "None", "and", "i", "<=", "2", ":", "\n", "                ", "cur_pnet_bottleneck", "=", "getattr", "(", "self", ",", "f'pnet_bottleneck_{i + 1}'", ")", "\n", "", "cur_tnet_bottleneck", "=", "getattr", "(", "self", ",", "f'tnet_bottleneck_{i + 1}'", ")", "\n", "\n", "# get s_pnet from p and transform", "\n", "if", "i", "==", "3", ":", "\n", "                ", "if", "gamma", "is", "None", ":", "# not in test_mix", "\n", "                    ", "s", ",", "gamma", ",", "beta", "=", "self", ".", "simple_spade", "(", "s", ")", "\n", "weight", "=", "self", ".", "get_weight", "(", "mask_c", ",", "mask_s", ",", "c_tnet", ",", "s", ",", "diff_c", ",", "diff_s", ")", "\n", "gamma", ",", "beta", "=", "self", ".", "atten_feature", "(", "mask_s", ",", "weight", ",", "gamma", ",", "beta", ",", "self", ".", "atten_bottleneck_g", ",", "\n", "self", ".", "atten_bottleneck_b", ")", "\n", "if", "ret", ":", "\n", "                        ", "return", "[", "gamma", ",", "beta", "]", "\n", "# else:                       # in test mode", "\n", "# gamma, beta = param_A[0]*w + param_B[0]*(1-w), param_A[1]*w + param_B[1]*(1-w)", "\n", "\n", "", "", "c_tnet", "=", "c_tnet", "*", "(", "1", "+", "gamma", ")", "+", "beta", "# apply makeup transfer using makeup matrices", "\n", "\n", "", "if", "gamma", "is", "None", "and", "i", "<=", "2", ":", "\n", "                ", "s", "=", "cur_pnet_bottleneck", "(", "s", ")", "\n", "", "c_tnet", "=", "cur_tnet_bottleneck", "(", "c_tnet", ")", "\n", "\n", "# up-sampling", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "cur_tnet_up_conv", "=", "getattr", "(", "self", ",", "f'tnet_up_conv_{i + 1}'", ")", "\n", "cur_tnet_up_spade", "=", "getattr", "(", "self", ",", "f'tnet_up_spade_{i + 1}'", ")", "\n", "cur_tnet_up_relu", "=", "getattr", "(", "self", ",", "f'tnet_up_relu_{i + 1}'", ")", "\n", "c_tnet", "=", "cur_tnet_up_conv", "(", "c_tnet", ")", "\n", "c_tnet", "=", "cur_tnet_up_spade", "(", "c_tnet", ")", "\n", "c_tnet", "=", "cur_tnet_up_relu", "(", "c_tnet", ")", "\n", "\n", "", "c_tnet", "=", "self", ".", "tnet_out", "(", "c_tnet", ")", "\n", "return", "c_tnet", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Discriminator.__init__": [[347, 379], ["torch.Module.__init__", "layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.append", "layers.append", "layers.append", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "spectral_norm.spectral_norm.spectral_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "spectral_norm.spectral_norm.spectral_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "layers.append", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "spectral_norm.spectral_norm.spectral_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "spectral_norm.spectral_norm.spectral_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.spectral_norm.spectral_norm"], ["def", "__init__", "(", "self", ",", "image_size", "=", "128", ",", "conv_dim", "=", "64", ",", "repeat_num", "=", "3", ",", "norm", "=", "'SN'", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "norm", "==", "'SN'", ":", "\n", "            ", "layers", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "3", ",", "conv_dim", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "3", ",", "conv_dim", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.01", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "1", ",", "repeat_num", ")", ":", "\n", "            ", "if", "norm", "==", "'SN'", ":", "\n", "                ", "layers", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.01", ",", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "# k_size = int(image_size / np.power(2, repeat_num))", "\n", "", "if", "norm", "==", "'SN'", ":", "\n", "            ", "layers", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.01", ",", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "if", "norm", "==", "'SN'", ":", "\n", "            ", "self", ".", "conv1", "=", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "curr_dim", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.Discriminator.forward": [[384, 393], ["net.Discriminator.main", "net.Discriminator.conv1", "x.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "ndim", "==", "5", ":", "\n", "            ", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "", "assert", "x", ".", "ndim", "==", "4", ",", "x", ".", "ndim", "\n", "h", "=", "self", ".", "main", "(", "x", ")", "\n", "# out_real = self.conv1(h)", "\n", "out_makeup", "=", "self", ".", "conv1", "(", "h", ")", "\n", "# return out_real.squeeze(), out_makeup.squeeze()", "\n", "return", "out_makeup", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.__init__": [[396, 403], ["torch.Module.__init__", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "net.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "23", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "H_RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.H_RRDB.forward": [[404, 408], ["net.H_RRDB.conv_first", "net.H_RRDB.trunk_conv", "net.H_RRDB.RRDB_trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "fea", ")", ")", "\n", "return", "trunk", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.make_layer": [[13, 18], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.initialize_weights": [[20, 38], ["isinstance", "net.modules", "isinstance", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.constant_", "torch.constant_"], "function", ["None"], ["", "def", "initialize_weights", "(", "net_l", ",", "scale", "=", "1", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "net_l", ",", "list", ")", ":", "\n", "        ", "net_l", "=", "[", "net_l", "]", "\n", "", "for", "net", "in", "net_l", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "# for residual block", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.weights_init_xavier": [[411, 417], ["classname.find", "torch.xavier_normal", "classname.find", "torch.xavier_normal"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "model", ")", ":", "\n", "    ", "classname", "=", "model", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "model", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "model", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.net.print_network": [[419, 425], ["model.parameters", "print", "print", "p.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "p", ".", "numel", "(", ")", "\n", "", "print", "(", "model", ")", "\n", "print", "(", "\"The number of parameters: {}\"", ".", "format", "(", "num_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.postprocess.PostProcess.__init__": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "denoise", "=", "config", ".", "POSTPROCESS", ".", "WILL_DENOISE", "\n", "self", ".", "img_size", "=", "config", ".", "DATA", ".", "IMG_SIZE", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.postprocess.PostProcess.__call__": [[14, 29], ["numpy.array", "numpy.array", "cv2.resize", "PIL.Image.fromarray().convert", "numpy.array.astype", "cv2.resize().astype", "cv2.fastNlMeansDenoisingColored", "PIL.Image.fromarray", "cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "source", ":", "Image", ",", "result", ":", "Image", ")", ":", "\n", "# TODO: Refract -> name, resize", "\n", "        ", "source", "=", "np", ".", "array", "(", "source", ")", "\n", "result", "=", "np", ".", "array", "(", "result", ")", "\n", "\n", "height", ",", "width", "=", "source", ".", "shape", "[", ":", "2", "]", "\n", "small_source", "=", "cv2", ".", "resize", "(", "source", ",", "(", "self", ".", "img_size", ",", "self", ".", "img_size", ")", ")", "\n", "laplacian_diff", "=", "source", ".", "astype", "(", "\n", "np", ".", "float", ")", "-", "cv2", ".", "resize", "(", "small_source", ",", "(", "width", ",", "height", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "result", "=", "(", "cv2", ".", "resize", "(", "result", ",", "(", "width", ",", "height", ")", ")", "+", "\n", "laplacian_diff", ")", ".", "round", "(", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "self", ".", "denoise", ":", "\n", "            ", "result", "=", "cv2", ".", "fastNlMeansDenoisingColored", "(", "result", ")", "\n", "", "result", "=", "Image", ".", "fromarray", "(", "result", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__init__": [[71, 96], ["numpy.meshgrid", "xs[].repeat", "ys[].repeat", "numpy.concatenate", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "numpy.linspace", "numpy.linspace", "faceutils.mask.FaceParser", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "device", "=", "\"cpu\"", ",", "need_parser", "=", "True", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "img_size", "=", "config", ".", "DATA", ".", "IMG_SIZE", "\n", "\n", "xs", ",", "ys", "=", "np", ".", "meshgrid", "(", "\n", "np", ".", "linspace", "(", "\n", "0", ",", "self", ".", "img_size", "-", "1", ",", "\n", "self", ".", "img_size", "\n", ")", ",", "\n", "np", ".", "linspace", "(", "\n", "0", ",", "self", ".", "img_size", "-", "1", ",", "\n", "self", ".", "img_size", "\n", ")", "\n", ")", "\n", "xs", "=", "xs", "[", "None", "]", ".", "repeat", "(", "config", ".", "PREPROCESS", ".", "LANDMARK_POINTS", ",", "axis", "=", "0", ")", "\n", "ys", "=", "ys", "[", "None", "]", ".", "repeat", "(", "config", ".", "PREPROCESS", ".", "LANDMARK_POINTS", ",", "axis", "=", "0", ")", "\n", "fix", "=", "np", ".", "concatenate", "(", "[", "ys", ",", "xs", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "fix", "=", "torch", ".", "Tensor", "(", "fix", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "need_parser", ":", "\n", "            ", "self", ".", "face_parse", "=", "futils", ".", "mask", ".", "FaceParser", "(", "device", "=", "device", ")", "\n", "", "self", ".", "up_ratio", "=", "config", ".", "PREPROCESS", ".", "UP_RATIO", "\n", "self", ".", "down_ratio", "=", "config", ".", "PREPROCESS", ".", "DOWN_RATIO", "\n", "self", ".", "width_ratio", "=", "config", ".", "PREPROCESS", ".", "WIDTH_RATIO", "\n", "self", ".", "lip_class", "=", "config", ".", "PREPROCESS", ".", "LIP_CLASS", "\n", "self", ".", "face_class", "=", "config", ".", "PREPROCESS", ".", "FACE_CLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.relative2absolute": [[97, 99], ["None"], "methods", ["None"], ["", "def", "relative2absolute", "(", "self", ",", "lms", ")", ":", "\n", "        ", "return", "lms", "*", "self", ".", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.process": [[100, 131], ["to_var().to", "lms.transpose().reshape.transpose().reshape.transpose().reshape", "to_var().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "preprocess.copy_area", "preprocess.copy_area", "to_var().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "torch.interpolate().repeat", "torch.norm().repeat", "torch.norm().repeat", "torch.norm().repeat", "torch.norm().repeat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "preprocess.to_var", "lms.transpose().reshape.transpose().reshape.transpose", "preprocess.to_var", "preprocess.to_var", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "preprocess.PreProcess.fix.double", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "preprocess.PreProcess.fix.double", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "lms.transpose().reshape.transpose().reshape.transpose().reshape", "lms.transpose().reshape.transpose().reshape.transpose"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.copy_area", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.copy_area", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.to_var", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.to_var", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.to_var"], ["", "def", "process", "(", "self", ",", "mask", ",", "lms", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "diff", "=", "to_var", "(", "\n", "(", "self", ".", "fix", ".", "double", "(", ")", "-", "torch", ".", "tensor", "(", "lms", ".", "transpose", "(", "(", "1", ",", "0", ")", "\n", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "lms_eye_left", "=", "lms", "[", "42", ":", "48", "]", "\n", "lms_eye_right", "=", "lms", "[", "36", ":", "42", "]", "\n", "lms", "=", "lms", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "# transpose to (y-x)", "\n", "# lms = np.tile(lms, (1, 256, 256))  # (136, h, w)", "\n", "diff", "=", "to_var", "(", "(", "self", ".", "fix", ".", "double", "(", ")", "-", "torch", ".", "tensor", "(", "lms", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "\n", "self", ".", "device", ")", "\n", "\n", "mask_lip", "=", "(", "mask", "==", "self", ".", "lip_class", "[", "0", "]", ")", ".", "float", "(", ")", "+", "(", "mask", "==", "self", ".", "lip_class", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "mask_face", "=", "(", "mask", "==", "self", ".", "face_class", "[", "0", "]", ")", ".", "float", "(", ")", "+", "(", "mask", "==", "self", ".", "face_class", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "mask_eyes", "=", "torch", ".", "zeros_like", "(", "mask", ",", "device", "=", "device", ")", "\n", "copy_area", "(", "mask_eyes", ",", "mask_face", ",", "lms_eye_left", ")", "\n", "copy_area", "(", "mask_eyes", ",", "mask_face", ",", "lms_eye_right", ")", "\n", "mask_eyes", "=", "to_var", "(", "mask_eyes", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "\n", "mask_list", "=", "[", "mask_lip", ",", "mask_face", ",", "mask_eyes", "]", "\n", "mask_aug", "=", "torch", ".", "cat", "(", "mask_list", ",", "0", ")", "# (3, 1, h, w)", "\n", "mask_re", "=", "F", ".", "interpolate", "(", "mask_aug", ",", "size", "=", "self", ".", "diff_size", ")", ".", "repeat", "(", "1", ",", "diff", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "# (3, 136, 64, 64)", "\n", "diff_re", "=", "F", ".", "interpolate", "(", "diff", ",", "size", "=", "self", ".", "diff_size", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ",", "1", ")", "# (3, 136, 64, 64)", "\n", "diff_re", "=", "diff_re", "*", "mask_re", "# (3, 136, 32, 32)", "\n", "norm", "=", "torch", ".", "norm", "(", "diff_re", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "diff_re", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "norm", "=", "torch", ".", "where", "(", "norm", "==", "0", ",", "torch", ".", "tensor", "(", "1e10", ",", "device", "=", "device", ")", ",", "norm", ")", "\n", "diff_re", "/=", "norm", "\n", "\n", "return", "mask_aug", ",", "diff_re", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.__call__": [[132, 162], ["faceutils.dlib.detect", "faceutils.dlib.crop", "numpy.array", "preprocess.PreProcess.face_parse.parse", "torch.interpolate", "torch.interpolate", "to_var().to.type", "to_var().to", "lms.round.round.round", "preprocess.PreProcess.process", "transform.resize", "transform", "preprocess.to_var", "cv2.resize", "to_var().to.view", "transform.unsqueeze", "preprocess.to_var", "faceutils.dlib.landmarks"], "methods", ["home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.detect", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.crop", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.mask.main.FaceParser.parse", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.PreProcess.process", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.to_var", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.to_var", "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.dlibutils.main.landmarks"], ["", "def", "__call__", "(", "self", ",", "image", ":", "Image", ")", ":", "\n", "        ", "face", "=", "futils", ".", "dlib", ".", "detect", "(", "image", ")", "\n", "\n", "if", "not", "face", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "face_on_image", "=", "face", "[", "0", "]", "\n", "\n", "image", ",", "face", ",", "crop_face", "=", "futils", ".", "dlib", ".", "crop", "(", "\n", "image", ",", "face_on_image", ",", "self", ".", "up_ratio", ",", "self", ".", "down_ratio", ",", "self", ".", "width_ratio", ")", "\n", "np_image", "=", "np", ".", "array", "(", "image", ")", "\n", "mask", "=", "self", ".", "face_parse", ".", "parse", "(", "cv2", ".", "resize", "(", "np_image", ",", "(", "512", ",", "512", ")", ")", ")", "\n", "# obtain face parsing result", "\n", "# image = image.resize((512, 512), Image.ANTIALIAS)", "\n", "mask", "=", "F", ".", "interpolate", "(", "\n", "mask", ".", "view", "(", "1", ",", "1", ",", "512", ",", "512", ")", ",", "\n", "(", "self", ".", "img_size", ",", "self", ".", "img_size", ")", ",", "\n", "mode", "=", "\"nearest\"", ")", "\n", "mask", "=", "mask", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "mask", "=", "to_var", "(", "mask", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# detect landmark", "\n", "lms", "=", "futils", ".", "dlib", ".", "landmarks", "(", "image", ",", "face", ")", "*", "self", ".", "img_size", "/", "image", ".", "width", "\n", "lms", "=", "lms", ".", "round", "(", ")", "\n", "\n", "mask", ",", "diff", "=", "self", ".", "process", "(", "mask", ",", "lms", ",", "device", "=", "self", ".", "device", ")", "\n", "image", "=", "image", ".", "resize", "(", "(", "self", ".", "img_size", ",", "self", ".", "img_size", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "image", "=", "transform", "(", "image", ")", "\n", "real", "=", "to_var", "(", "image", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "[", "real", ",", "mask", ",", "diff", "]", ",", "face_on_image", ",", "crop_face", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.ToTensor": [[25, 48], ["torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "pic.tobytes", "torch.ByteTensor.transpose"], "function", ["None"], ["def", "ToTensor", "(", "pic", ")", ":", "\n", "# handle PIL Image", "\n", "    ", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "        ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "        ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "        ", "return", "img", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.to_var": [[50, 55], ["torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["None"], ["", "", "def", "to_var", "(", "x", ",", "requires_grad", "=", "True", ")", ":", "\n", "    ", "if", "requires_grad", ":", "\n", "        ", "return", "Variable", "(", "x", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "Variable", "(", "x", ",", "requires_grad", "=", "requires_grad", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgcl-codes_amt-gan.backbone.preprocess.copy_area": [[57, 65], ["int", "int", "min", "min", "int", "int", "max", "max"], "function", ["None"], ["", "", "def", "copy_area", "(", "tar", ",", "src", ",", "lms", ")", ":", "\n", "    ", "rect", "=", "[", "int", "(", "min", "(", "lms", "[", ":", ",", "1", "]", ")", ")", "-", "PreProcess", ".", "eye_margin", ",", "\n", "int", "(", "min", "(", "lms", "[", ":", ",", "0", "]", ")", ")", "-", "PreProcess", ".", "eye_margin", ",", "\n", "int", "(", "max", "(", "lms", "[", ":", ",", "1", "]", ")", ")", "+", "PreProcess", ".", "eye_margin", "+", "1", ",", "\n", "int", "(", "max", "(", "lms", "[", ":", ",", "0", "]", ")", ")", "+", "PreProcess", ".", "eye_margin", "+", "1", "]", "\n", "tar", "[", ":", ",", ":", ",", "rect", "[", "1", "]", ":", "rect", "[", "3", "]", ",", "rect", "[", "0", "]", ":", "rect", "[", "2", "]", "]", "=", "src", "[", ":", ",", ":", ",", "rect", "[", "1", "]", ":", "rect", "[", "3", "]", ",", "rect", "[", "0", "]", ":", "rect", "[", "2", "]", "]", "\n", "src", "[", ":", ",", ":", ",", "rect", "[", "1", "]", ":", "rect", "[", "3", "]", ",", "rect", "[", "0", "]", ":", "rect", "[", "2", "]", "]", "=", "0", "\n", "\n"]]}