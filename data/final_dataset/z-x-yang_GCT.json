{"home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.__init__": [[391, 393], ["main.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.reset": [[394, 399], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update": [[400, 405], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.main": [[82, 116], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main.main_worker"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "\n", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.main_worker": [[118, 285], ["torch.CrossEntropyLoss().cuda", "torch.nn.DataParallel().cuda.named_parameters", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "print", "torch.init_process_group", "print", "print", "resnet.ResNet", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "main.validate", "main.adjust_learning_rate", "main.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.CrossEntropyLoss", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "main.validate", "max", "main.save_checkpoint", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "best_acc1.to.to", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "open", "f.write", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.validate", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.adjust_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.train", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.validate", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "# model = models.__dict__[args.arch]()", "\n", "model", "=", "resnet", ".", "ResNet", "(", "[", "]", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "args", ".", "workers", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "params", "=", "[", "]", "\n", "num_GCT", "=", "0", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "args", ".", "lr", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "\n", "if", "\"beta\"", "in", "key", ":", "\n", "            ", "weight_decay", "=", "0", "\n", "num_GCT", "+=", "1", "\n", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "\n", "", "print", "(", "'num_GCT:'", ",", "num_GCT", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "\n", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "epoch", "%", "5", "==", "0", "or", "epoch", ">=", "90", ":", "\n", "            ", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "with", "open", "(", "'./acc_log.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "'Epoch {}: {}\\n'", ".", "format", "(", "epoch", ",", "acc1", ")", ")", "\n", "\n", "", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "is_best", "=", "False", "\n", "\n", "", "", "print", "(", "\"Best acc:\"", ",", "best_acc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.train": [[287, 334], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "model.train", "time.time", "enumerate", "main.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.train", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.accuracy", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet._NewEmptyTensorOp.backward", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.validate": [[336, 379], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "target.cuda.cuda", "model", "criterion", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.accuracy", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.save_checkpoint": [[381, 385], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.adjust_learning_rate": [[407, 414], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.accuracy": [[416, 431], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet._NewEmptyTensorOp.forward": [[28, 32], ["x.new_empty"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "new_shape", ")", ":", "\n", "        ", "ctx", ".", "shape", "=", "x", ".", "shape", "\n", "return", "x", ".", "new_empty", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet._NewEmptyTensorOp.backward": [[33, 37], ["_NewEmptyTensorOp.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "shape", "=", "ctx", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "grad", ",", "shape", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.Conv2d.forward": [[40, 53], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.GCT.GCT.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "Conv2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.ResNet.__init__": [[102, 146], ["torch.nn.Module.__init__", "stem_module", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "resnet._make_stage", "resnet.ResNet.add_module", "resnet.ResNet.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If we want to use the cfg in forward(), then we should make a copy", "\n", "# of it and store it for later use:", "\n", "# self.cfg = cfg.clone()", "\n", "\n", "# Translate string names to implementations", "\n", "stem_module", "=", "StemWithFixedBatchNorm", "\n", "stage_specs", "=", "ResNet50FPNStagesTo5", "\n", "transformation_module", "=", "BottleneckWithFixedBatchNorm", "\n", "\n", "# Construct the stem module", "\n", "self", ".", "stem", "=", "stem_module", "(", "cfg", ")", "\n", "\n", "# Constuct the specified ResNet stages", "\n", "num_groups", "=", "1", "# cfg.MODEL.RESNETS.NUM_GROUPS", "\n", "width_per_group", "=", "64", "# cfg.MODEL.RESNETS.WIDTH_PER_GROUP", "\n", "in_channels", "=", "64", "# cfg.MODEL.RESNETS.STEM_OUT_CHANNELS", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "stage2_out_channels", "=", "256", "# cfg.MODEL.RESNETS.RES2_OUT_CHANNELS", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "return_features", "=", "{", "}", "\n", "for", "stage_spec", "in", "stage_specs", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage_spec", ".", "index", ")", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_spec", ".", "index", "-", "1", ")", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "out_channels", "=", "stage2_out_channels", "*", "stage2_relative_factor", "\n", "module", "=", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage_spec", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "True", ",", "# cfg.MODEL.RESNETS.STRIDE_IN_1X1,", "\n", "first_stride", "=", "int", "(", "stage_spec", ".", "index", ">", "1", ")", "+", "1", ",", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "self", ".", "return_features", "[", "name", "]", "=", "stage_spec", ".", "return_features", "\n", "", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "4", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.ResNet._freeze_backbone": [[150, 160], ["range", "getattr.parameters", "getattr", "str"], "methods", ["None"], ["", "def", "_freeze_backbone", "(", "self", ",", "freeze_at", ")", ":", "\n", "        ", "if", "freeze_at", "<", "0", ":", "\n", "            ", "return", "\n", "", "for", "stage_index", "in", "range", "(", "freeze_at", ")", ":", "\n", "            ", "if", "stage_index", "==", "0", ":", "\n", "                ", "m", "=", "self", ".", "stem", "# stage 0 is the stem", "\n", "", "else", ":", "\n", "                ", "m", "=", "getattr", "(", "self", ",", "\"layer\"", "+", "str", "(", "stage_index", ")", ")", "\n", "", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.ResNet.forward": [[161, 172], ["resnet.ResNet.stem", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size", "getattr", "outputs.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "stage_name", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage_name", ")", "(", "x", ")", "\n", "if", "self", ".", "return_features", "[", "stage_name", "]", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.ResNetHead.__init__": [[175, 216], ["torch.nn.Module.__init__", "resnet._make_stage", "resnet.ResNetHead.add_module", "resnet.ResNetHead.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__", "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet._make_stage"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_module", ",", "\n", "stages", ",", "\n", "num_groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "256", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "ResNetHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stages", "[", "0", "]", ".", "index", "-", "1", ")", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "out_channels", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "in_channels", "=", "out_channels", "//", "2", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "\n", "block_module", "=", "_TRANSFORMATION_MODULES", "[", "block_module", "]", "\n", "\n", "self", ".", "stages", "=", "[", "]", "\n", "stride", "=", "stride_init", "\n", "for", "stage", "in", "stages", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage", ".", "index", ")", "\n", "if", "not", "stride", ":", "\n", "                ", "stride", "=", "int", "(", "stage", ".", "index", ">", "1", ")", "+", "1", "\n", "", "module", "=", "_make_stage", "(", "\n", "block_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "stride", "=", "None", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.ResNetHead.forward": [[217, 221], ["getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "stage", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.Bottleneck.__init__": [[254, 333], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "norm_func", "torch.nn.Sequential", "torch.nn.Sequential", "norm_func", "torch.nn.Sequential", "torch.nn.Sequential", "norm_func", "norm_func", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "GCT.GCT.GCT", "resnet.Conv2d", "GCT.GCT.GCT", "resnet.Conv2d", "GCT.GCT.GCT", "resnet.Conv2d", "modules.modules", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "GCT.GCT.GCT", "resnet.Conv2d", "modules.modules", "isinstance", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.GCT", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.GCT", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.GCT", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.GCT"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "norm_func", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "down_stride", "=", "stride", "if", "dilation", "==", "1", "else", "1", "\n", "downsample_bn", "=", "norm_func", "(", "out_channels", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "downsample_bn", ".", "weight", ",", "1", ")", "\n", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "GCT", "(", "in_channels", ")", ",", "\n", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "down_stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "downsample_bn", ",", "\n", ")", "\n", "for", "modules", "in", "[", "self", ".", "downsample", ",", "]", ":", "\n", "                ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "l", ",", "Conv2d", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n", "", "", "", "", "if", "dilation", ">", "1", ":", "\n", "            ", "stride", "=", "1", "# reset to be 1", "\n", "\n", "# The original MSRA ResNet models have stride in the first 1x1 conv", "\n", "# The subsequent fb.torch.resnet and Caffe2 ResNe[X]t implementations have", "\n", "# stride in the 3x3 conv", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "GCT", "(", "in_channels", ")", ",", "\n", "Conv2d", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "# TODO: specify init for the above", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "GCT", "(", "bottleneck_channels", ")", ",", "\n", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", "\n", ")", ",", ")", "\n", "self", ".", "bn2", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "GCT", "(", "bottleneck_channels", ")", ",", "\n", "Conv2d", "(", "\n", "bottleneck_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", ",", ")", "\n", "self", ".", "bn3", "=", "norm_func", "(", "out_channels", ")", "\n", "\n", "for", "modules", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "", "", "", "for", "l", "in", "[", "self", ".", "bn1", ",", "self", ".", "bn2", ",", "self", ".", "bn3", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "weight", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.Bottleneck.forward": [[334, 355], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "torch.relu_", "torch.relu_", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "torch.relu_", "torch.relu_", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "torch.relu_", "torch.relu_", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out0", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out0", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.BaseStem.__init__": [[358, 375], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "norm_func", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "GCT.GCT.GCT", "resnet.Conv2d", "modules.modules", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.GCT"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "norm_func", ")", ":", "\n", "        ", "super", "(", "BaseStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "out_channels", "=", "64", "# cfg.MODEL.RESNETS.STEM_OUT_CHANNELS", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "GCT", "(", "3", ")", ",", "\n", "Conv2d", "(", "\n", "3", ",", "out_channels", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", ",", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "out_channels", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bn1", ".", "weight", ",", "1", ")", "\n", "\n", "for", "modules", "in", "[", "self", ".", "conv1", ",", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.BaseStem.forward": [[376, 382], ["resnet.BaseStem.conv1", "resnet.BaseStem.bn1", "torch.relu_", "torch.relu_", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.BottleneckWithFixedBatchNorm.__init__": [[385, 404], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "nn", ".", "BatchNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.StemWithFixedBatchNorm.__init__": [[408, 411], ["resnet.BaseStem.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "cfg", ",", "norm_func", "=", "nn", ".", "BatchNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.BottleneckWithGN.__init__": [[415, 434], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithGN", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "group_norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet.StemWithGN.__init__": [[438, 440], ["resnet.BaseStem.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithGN", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "norm_func", "=", "group_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.resnet._make_stage": [[223, 251], ["range", "torch.nn.Sequential", "blocks.append", "transformation_module"], "function", ["None"], ["", "", "def", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "    ", "blocks", "=", "[", "]", "\n", "stride", "=", "first_stride", "\n", "for", "_", "in", "range", "(", "block_count", ")", ":", "\n", "        ", "blocks", ".", "append", "(", "\n", "transformation_module", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", ")", "\n", "stride", "=", "1", "\n", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.GCT.GCT.__init__": [[9, 18], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "epsilon", "=", "1e-5", ",", "mode", "=", "'l2'", ",", "after_relu", "=", "False", ")", ":", "\n", "        ", "super", "(", "GCT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "num_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "after_relu", "=", "after_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.GCT.GCT.forward": [[19, 39], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "print", "sys.exit", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.sum", "torch.abs.sum", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "x.pow().sum", "embedding.pow().mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "x.pow", "embedding.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "mode", "==", "'l2'", ":", "\n", "            ", "embedding", "=", "(", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "(", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", ".", "pow", "(", "0.5", ")", "*", "self", ".", "alpha", "\n", "norm", "=", "self", ".", "gamma", "/", "(", "embedding", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", ".", "pow", "(", "0.5", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'l1'", ":", "\n", "            ", "if", "not", "self", ".", "after_relu", ":", "\n", "                ", "_x", "=", "torch", ".", "abs", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "_x", "=", "x", "\n", "", "embedding", "=", "_x", ".", "sum", "(", "(", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "*", "self", ".", "alpha", "\n", "norm", "=", "self", ".", "gamma", "/", "(", "torch", ".", "abs", "(", "embedding", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unknown mode!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "gate", "=", "1.", "+", "torch", ".", "tanh", "(", "embedding", "*", "norm", "+", "self", ".", "beta", ")", "\n", "\n", "return", "x", "*", "gate", "", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.OverrideCachingDevice.__init__": [[150, 156], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "devices", ",", "device_for_small_variables", ",", "\n", "small_variable_size_threshold", ")", ":", "\n", "    ", "self", ".", "devices", "=", "devices", "\n", "self", ".", "sizes", "=", "[", "0", "]", "*", "len", "(", "self", ".", "devices", ")", "\n", "self", ".", "device_for_small_variables", "=", "device_for_small_variables", "\n", "self", ".", "small_variable_size_threshold", "=", "small_variable_size_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.OverrideCachingDevice.__call__": [[157, 169], ["tensorflow.TensorShape().num_elements", "getter", "min", "tensorflow.TensorShape", "enumerate", "operator.itemgetter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "getter", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "tf", ".", "TensorShape", "(", "kwargs", "[", "'shape'", "]", ")", ".", "num_elements", "(", ")", "\n", "if", "size", "<", "self", ".", "small_variable_size_threshold", ":", "\n", "      ", "device_name", "=", "self", ".", "device_for_small_variables", "\n", "", "else", ":", "\n", "      ", "device_index", ",", "_", "=", "min", "(", "enumerate", "(", "self", ".", "sizes", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "device_name", "=", "self", ".", "devices", "[", "device_index", "]", "\n", "self", ".", "sizes", "[", "device_index", "]", "+=", "size", "\n", "\n", "", "kwargs", "[", "'caching_device'", "]", "=", "device_name", "\n", "var", "=", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.OverrideToLocalVariableIfNotPsVar.__call__": [[178, 192], ["name.startswith", "collections.remove", "collections.append", "list", "getter", "getter"], "methods", ["None"], ["  ", "def", "__call__", "(", "self", ",", "getter", ",", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", ".", "startswith", "(", "PS_SHADOW_VAR_PREFIX", ")", ":", "\n", "      ", "return", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "'collections'", "in", "kwargs", ":", "\n", "      ", "collections", "=", "kwargs", "[", "'collections'", "]", "\n", "", "if", "not", "collections", ":", "\n", "      ", "collections", "=", "[", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "]", "\n", "", "else", ":", "\n", "      ", "collections", "=", "collections", "[", ":", "]", "\n", "", "collections", ".", "remove", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "collections", ".", "append", "(", "tf", ".", "GraphKeys", ".", "LOCAL_VARIABLES", ")", "\n", "kwargs", "[", "'collections'", "]", "=", "list", "(", "collections", ")", "\n", "return", "getter", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.ParamServerDeviceSetter.__init__": [[197, 208], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "worker_device", ",", "ps_devices", ")", ":", "\n", "    ", "\"\"\"Initializer for ParamServerDevicSetter.\n\n    Args:\n      worker_device: the device to use for computer ops.\n      ps_devices: a list of device to use for Variable ops. Each variable is\n      assigned to the least loaded device.\n    \"\"\"", "\n", "self", ".", "ps_devices", "=", "ps_devices", "\n", "self", ".", "worker_device", "=", "worker_device", "\n", "self", ".", "ps_sizes", "=", "[", "0", "]", "*", "len", "(", "self", ".", "ps_devices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.ParamServerDeviceSetter.__call__": [[209, 221], ["min", "op.outputs[].get_shape().num_elements", "enumerate", "operator.itemgetter", "op.outputs[].get_shape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "op", ")", ":", "\n", "    ", "if", "op", ".", "device", ":", "\n", "      ", "return", "op", ".", "device", "\n", "", "if", "op", ".", "type", "not", "in", "[", "'Variable'", ",", "'VariableV2'", "]", ":", "\n", "      ", "return", "self", ".", "worker_device", "\n", "\n", "", "device_index", ",", "_", "=", "min", "(", "enumerate", "(", "self", ".", "ps_sizes", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "device_name", "=", "self", ".", "ps_devices", "[", "device_index", "]", "\n", "var_size", "=", "op", ".", "outputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "num_elements", "(", ")", "\n", "self", ".", "ps_sizes", "[", "device_index", "]", "+=", "var_size", "\n", "\n", "return", "device_name", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.__init__": [[231, 242], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "real_var", ",", "var_stage_get", ",", "variable_mgr", ")", ":", "\n", "    ", "\"\"\"Initializer for the model variables through a staging buffer.\n\n    Args:\n      real_var: the underlying real variable.\n      var_stage_get: the read op from the staging buffer.\n      variable_mgr: the parent variable-manager.\n    \"\"\"", "\n", "self", ".", "real_var", "=", "real_var", "\n", "self", ".", "var_stage_get", "=", "var_stage_get", "\n", "self", ".", "variable_mgr", "=", "variable_mgr", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable._value": [[243, 246], ["None"], "methods", ["None"], ["", "def", "_value", "(", "self", ")", ":", "\n", "    ", "\"\"\"The read access of this variable. The content from the staging buffer.\"\"\"", "\n", "return", "self", ".", "var_stage_get", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable._ref": [[247, 250], ["variable_mgr_util.StagedModelVariable.real_var._ref"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable._ref"], ["", "def", "_ref", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the underlying variable ref, required by tf.colocate_with.\"\"\"", "\n", "return", "self", ".", "real_var", ".", "_ref", "(", ")", "# pylint: disable=protected-access", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.read_value": [[251, 254], ["tensorflow.identity"], "methods", ["None"], ["", "def", "read_value", "(", "self", ")", ":", "\n", "    ", "\"\"\"Mimics tf.Variable.read_value().\"\"\"", "\n", "return", "tf", ".", "identity", "(", "self", ".", "var_stage_get", ",", "name", "=", "'read'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.dtype": [[255, 259], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the non-reference dtype.\"\"\"", "\n", "return", "self", ".", "var_stage_get", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.assign_sub": [[260, 284], ["variable_mgr_util.StagedModelVariable.real_var.assign_sub", "tensorflow.python.framework.ops.colocate_with", "tensorflow.device", "tensorflow.python.ops.data_flow_ops.StagingArea", "tensorflow.python.ops.data_flow_ops.StagingArea.put", "variable_mgr_util.StagedModelVariable.variable_mgr.staging_delta_ops.append", "tensorflow.python.ops.data_flow_ops.StagingArea.get"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.assign_sub"], ["", "def", "assign_sub", "(", "self", ",", "delta", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Mimic the updates to the variable.\n\n    Args:\n      delta: is pushed into a staging buffer and will be pumped later.\n      name: currently ignored; names of ops and the StagingArea are\n            computed without using this pass name.\n    Returns:\n      The actual updates. The colocation constraint will be reapplied.\n    \"\"\"", "\n", "# This parameter is ignored: the StagingArea only supports setting", "\n", "# the shared name, not the names of individual ops it uses.", "\n", "del", "name", "\n", "\n", "# colocate_with(None, True) clears the colocation constraints.", "\n", "# Push the delta into a staging buffer.", "\n", "with", "ops", ".", "colocate_with", "(", "None", ",", "True", ")", ",", "tf", ".", "device", "(", "self", ".", "var_stage_get", ".", "device", ")", ":", "\n", "      ", "delta_staging_area", "=", "data_flow_ops", ".", "StagingArea", "(", "\n", "[", "self", ".", "var_stage_get", ".", "dtype", "]", ",", "shapes", "=", "[", "self", ".", "var_stage_get", ".", "shape", "]", ")", "\n", "delta_put_op", "=", "delta_staging_area", ".", "put", "(", "[", "delta", "]", ")", "\n", "self", ".", "variable_mgr", ".", "staging_delta_ops", ".", "append", "(", "delta_put_op", ")", "\n", "delta_get_op", "=", "delta_staging_area", ".", "get", "(", ")", "[", "0", "]", "\n", "# Return the actual updates. The colocation constraint will be reapplied.", "\n", "", "return", "self", ".", "real_var", ".", "assign_sub", "(", "delta_get_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable._TensorConversionFunction": [[285, 294], ["variable_mgr_util.StagedModelVariable._ref", "variable_mgr_util.StagedModelVariable._value"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable._ref", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable._value"], ["", "@", "staticmethod", "\n", "# pylint: disable=bad-staticmethod-argument,invalid-name", "\n", "def", "_TensorConversionFunction", "(", "self", ",", "dtype", "=", "None", ",", "name", "=", "None", ",", "as_ref", "=", "False", ")", ":", "\n", "    ", "\"\"\"Utility function for converting a StagedModelVariable to a Tensor.\"\"\"", "\n", "del", "dtype", ",", "name", "# unused: this function returns the cached ref or value.", "\n", "if", "as_ref", ":", "\n", "      ", "return", "self", ".", "_ref", "(", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedVariableGetter.__init__": [[307, 321], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "device_num", ",", "devices", ",", "cpu_device", ",", "variable_mgr", ")", ":", "\n", "    ", "\"\"\"Initializer for StagedVariableGetter.\n\n    Args:\n      device_num: the current device index.\n      devices: a list of all the devices to build towers.\n      cpu_device: a cpu_device for this replica. If None, no cpu-caching is\n          done.\n      variable_mgr: the parent variable manager.\n    \"\"\"", "\n", "self", ".", "device_num", "=", "device_num", "\n", "self", ".", "devices", "=", "devices", "\n", "self", ".", "cpu_device", "=", "cpu_device", "\n", "self", ".", "variable_mgr", "=", "variable_mgr", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedVariableGetter.__call__": [[322, 357], ["getter", "tensorflow.identity", "tensorflow.device", "tensorflow.python.ops.data_flow_ops.StagingArea", "tensorflow.python.ops.data_flow_ops.StagingArea.put", "variable_mgr_util.StagedModelVariable", "tensorflow.device", "tensorflow.python.ops.data_flow_ops.StagingArea.get", "tensorflow.identity"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "getter", ",", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "staging_ops", "=", "self", ".", "variable_mgr", ".", "staging_vars_on_devices", "[", "self", ".", "device_num", "]", "\n", "if", "name", "in", "staging_ops", ":", "\n", "      ", "put_op", ",", "get_op", "=", "staging_ops", "[", "name", "]", "\n", "return", "get_op", "\n", "", "real_var", "=", "getter", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "shape", "=", "kwargs", "[", "'shape'", "]", "\n", "dtype", "=", "kwargs", "[", "'dtype'", "]", "\n", "trainable", "=", "kwargs", "[", "'trainable'", "]", "\n", "if", "self", ".", "cpu_device", ":", "\n", "      ", "with", "tf", ".", "device", "(", "self", ".", "cpu_device", ")", ":", "\n", "# This helps copying the weights from the parameter to this server only", "\n", "# once.", "\n", "        ", "if", "name", "in", "self", ".", "variable_mgr", ".", "staged_vars_on_cpu", ":", "\n", "          ", "cpu_var", "=", "self", ".", "variable_mgr", ".", "staged_vars_on_cpu", "[", "name", "]", "\n", "", "else", ":", "\n", "          ", "cpu_var", "=", "tf", ".", "identity", "(", "real_var", ")", "\n", "self", ".", "variable_mgr", ".", "staged_vars_on_cpu", "[", "name", "]", "=", "cpu_var", "\n", "", "", "var_to_stage", "=", "cpu_var", "\n", "", "else", ":", "\n", "      ", "var_to_stage", "=", "tf", ".", "identity", "(", "real_var", ")", "# de-reference the variable.", "\n", "\n", "", "with", "tf", ".", "device", "(", "self", ".", "devices", "[", "self", ".", "device_num", "]", ")", ":", "\n", "      ", "staging_area", "=", "data_flow_ops", ".", "StagingArea", "(", "[", "dtype", "]", ",", "shapes", "=", "[", "shape", "]", ")", "\n", "put_op", "=", "staging_area", ".", "put", "(", "[", "var_to_stage", "]", ")", "\n", "get_op", "=", "staging_area", ".", "get", "(", ")", "[", "0", "]", "\n", "staging_ops", "[", "name", "]", "=", "(", "put_op", ",", "get_op", ")", "\n", "", "if", "trainable", ":", "\n", "# For trainable variables, they are managed separatedly through", "\n", "# apply_gradients.", "\n", "      ", "return", "get_op", "\n", "", "else", ":", "\n", "# For other shadow variables, the access is decoupled through a wrapper", "\n", "# class.", "\n", "      ", "return", "StagedModelVariable", "(", "real_var", ",", "get_op", ",", "self", ".", "variable_mgr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedVariableGetter.trainable_variables_on_device": [[358, 381], ["tensorflow.trainable_variables", "params.append", "param.name.split"], "methods", ["None"], ["", "", "def", "trainable_variables_on_device", "(", "self", ",", "rel_device_num", ",", "abs_device_num", ",", "\n", "writable", ")", ":", "\n", "    ", "\"\"\"Return the set of trainable variables on the specified device.\n\n    Args:\n      rel_device_num: local worker device index.\n      abs_device_num: global graph device index.\n      writable: whether the returned variables is writable or read-only.\n\n    Returns:\n      Return the set of trainable variables on the specified device.\n    \"\"\"", "\n", "del", "abs_device_num", "\n", "params_refs", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "writable", ":", "\n", "      ", "return", "params_refs", "\n", "", "params", "=", "[", "]", "\n", "for", "param", "in", "params_refs", ":", "\n", "      ", "var_name", "=", "param", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "_", ",", "var_get_op", "=", "self", ".", "variable_mgr", ".", "staging_vars_on_devices", "[", "rel_device_num", "]", "[", "\n", "var_name", "]", "\n", "params", ".", "append", "(", "var_get_op", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.get_loss_scale_update_op": [[50, 88], ["tensorflow.cond", "tensorflow.group", "tensorflow.group", "loss_scale_normal_steps.assign_add", "tensorflow.assign", "tensorflow.assign"], "function", ["None"], ["def", "get_loss_scale_update_op", "(", "loss_scale", ",", "loss_scale_normal_steps", ",", "\n", "inc_loss_scale_every_n", ")", ":", "\n", "  ", "\"\"\"Returns the update op for loss scaling variables.\n\n  We maintain the counter `loss_scale_normal_steps` to count the number of steps\n  we have been using the current `loss_scale`. In most cases, this function\n  increments `loss_scale_normal_steps`. However, if `loss_scale_normal_steps` is\n  greater than the threshold `inc_loss_scale_every_n`, we double `loss_scale`\n  and reset `loss_scale_normal_steps` to zero.\n\n  This op is only called if the gradients don't have any infs or nans. Instead,\n  if infs or nans occur in the gradients, we immeditately halve `loss_scale` and\n  reset `loss_scale_normal_steps` to zero.\n\n  Args:\n    loss_scale: a tf.Variable represneting the loss_scale value.\n    loss_scale_normal_steps: a tf.Variable representing the number of training\n      steps that have run since the loss_scale last changed.\n    inc_loss_scale_every_n: a Python integer threshold. `loss_scale` is\n      increased every `inc_loss_scale_every_n` steps, unless the gradients have\n      infs or nans.\n\n  Returns:\n    An op for updating `loss_scale` and `loss_scale_normal_steps`.\n  \"\"\"", "\n", "\n", "def", "increment_loss_scale_normal_steps_func", "(", ")", ":", "\n", "    ", "return", "tf", ".", "group", "(", "loss_scale_normal_steps", ".", "assign_add", "(", "1", ")", ")", "\n", "\n", "", "def", "increase_loss_scale_func", "(", ")", ":", "\n", "    ", "return", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "loss_scale_normal_steps", ",", "0", ")", ",", "\n", "tf", ".", "assign", "(", "loss_scale", ",", "loss_scale", "*", "2", ")", ")", "\n", "\n", "# true_fn and false_fn must have the same type.", "\n", "", "return", "tf", ".", "cond", "(", "loss_scale_normal_steps", "<", "inc_loss_scale_every_n", ",", "\n", "increment_loss_scale_normal_steps_func", ",", "\n", "increase_loss_scale_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.append_gradients_with_loss_scale": [[90, 139], ["training_ops.extend", "tensorflow.cond", "training_ops.append", "get_apply_gradients_ops_func", "tensorflow.group", "tensorflow.group", "tensorflow.assign", "tensorflow.assign", "variable_mgr_util.get_loss_scale_update_op", "get_apply_gradients_ops_func"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.get_loss_scale_update_op"], ["", "def", "append_gradients_with_loss_scale", "(", "training_ops", ",", "get_apply_gradients_ops_func", ",", "\n", "loss_scale_params", ",", "grad_has_inf_nan", ")", ":", "\n", "  ", "\"\"\"Selectively appends gradients update ops with loss scaling.\n\n  Args:\n    training_ops: a list of training ops to be executed.\n    get_apply_gradients_ops_func: a function that returns a list of ops for\n      applying gradients. Here, we must pass a function instead of the actual\n      list of ops; otherwise, those ops would be executed unconditionally due to\n      the semantics of tf.cond.\n    loss_scale_params: An AutoLossScaleParams tuple.\n    grad_has_inf_nan: Boolean tensor indicating whether the gradients have infs\n      or nans.\n  \"\"\"", "\n", "is_chief", "=", "loss_scale_params", ".", "is_chief", "\n", "loss_scale", "=", "loss_scale_params", ".", "loss_scale", "\n", "loss_scale_normal_steps", "=", "loss_scale_params", ".", "loss_scale_normal_steps", "\n", "inc_loss_scale_every_n", "=", "loss_scale_params", ".", "inc_loss_scale_every_n", "\n", "enable_auto_loss_scale", "=", "loss_scale_params", ".", "enable_auto_loss_scale", "\n", "\n", "if", "loss_scale", "is", "None", "or", "not", "enable_auto_loss_scale", "or", "not", "is_chief", ":", "\n", "    ", "training_ops", ".", "extend", "(", "get_apply_gradients_ops_func", "(", ")", ")", "\n", "", "else", ":", "\n", "# If nans/infs occurred, skip applying gradients and instead update", "\n", "# loss_scale (halve loss_scale and reset loss_scale_normal_steps to zero).", "\n", "    ", "def", "update_op_if_nan_or_inf", "(", ")", ":", "\n", "      ", "\"\"\"Update loss_scale and discard gradients if nans/infs occurred.\"\"\"", "\n", "return", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "loss_scale", ",", "loss_scale", "/", "2.", ")", ",", "\n", "tf", ".", "assign", "(", "loss_scale_normal_steps", ",", "0", ")", ")", "\n", "\n", "# Otherwise, apply gradients, and update loss_scale and", "\n", "# loss_scale_normal_steps.", "\n", "", "def", "update_op_if_no_nan_or_inf", "(", ")", ":", "\n", "      ", "\"\"\"Apply gradients, and update loss scaling.\"\"\"", "\n", "return", "tf", ".", "group", "(", "\n", "get_loss_scale_update_op", "(", "loss_scale", ",", "loss_scale_normal_steps", ",", "\n", "inc_loss_scale_every_n", ")", ",", "\n", "*", "get_apply_gradients_ops_func", "(", ")", ")", "\n", "\n", "# TODO(tanmingxing): Add support for independent and distributed all_reduce.", "\n", "", "assert", "grad_has_inf_nan", "is", "not", "None", "\n", "update_op", "=", "tf", ".", "cond", "(", "\n", "grad_has_inf_nan", ",", "\n", "update_op_if_nan_or_inf", ",", "\n", "update_op_if_no_nan_or_inf", ",", "\n", "name", "=", "'cond_if_grad_has_inf_nan'", "\n", ")", "\n", "training_ops", ".", "append", "(", "update_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_gradients_using_copy_with_device_selection": [[383, 415], ["enumerate", "zip", "tensorflow.device", "variable_mgr_util.aggregate_single_gradient_using_copy", "agg_grads.append", "has_nan_or_inf_list.append", "tensorflow.reduce_any", "len"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_single_gradient_using_copy"], ["", "", "def", "aggregate_gradients_using_copy_with_device_selection", "(", "\n", "benchmark_cnn", ",", "tower_grads", ",", "use_mean", ",", "check_inf_nan", ")", ":", "\n", "  ", "\"\"\"Aggregate gradients, controlling device for the aggregation.\n\n  Args:\n    benchmark_cnn: benchmark_cnn class.\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\n      is over towers. The inner list is over individual gradients.\n    use_mean: if True, mean is taken, else sum of gradients is taken.\n    check_inf_nan: If true, check grads for nans and infs.\n\n  Returns:\n    The tuple ([(average_gradient, variable),], has_nan_or_inf) where the\n      gradient has been averaged across all towers. The variable is chosen from\n      the first tower. The has_nan_or_inf indicates the grads has nan or inf.\n  \"\"\"", "\n", "if", "benchmark_cnn", ".", "local_parameter_device_flag", "==", "'gpu'", ":", "\n", "    ", "avail_devices", "=", "benchmark_cnn", ".", "raw_devices", "\n", "", "else", ":", "\n", "    ", "avail_devices", "=", "[", "benchmark_cnn", ".", "param_server_device", "]", "\n", "", "agg_grads", "=", "[", "]", "\n", "has_nan_or_inf_list", "=", "[", "]", "\n", "for", "i", ",", "single_grads", "in", "enumerate", "(", "zip", "(", "*", "tower_grads", ")", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "avail_devices", "[", "i", "%", "len", "(", "avail_devices", ")", "]", ")", ":", "\n", "      ", "grad_and_var", ",", "has_nan_or_inf", "=", "aggregate_single_gradient_using_copy", "(", "\n", "single_grads", ",", "use_mean", ",", "check_inf_nan", ")", "\n", "agg_grads", ".", "append", "(", "grad_and_var", ")", "\n", "has_nan_or_inf_list", ".", "append", "(", "has_nan_or_inf", ")", "\n", "", "", "if", "check_inf_nan", ":", "\n", "    ", "return", "agg_grads", ",", "tf", ".", "reduce_any", "(", "has_nan_or_inf_list", ")", "\n", "", "else", ":", "\n", "    ", "return", "agg_grads", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_gradients_using_copy_with_variable_colocation": [[417, 454], ["zip", "tensorflow.device", "variable_mgr_util.aggregate_single_gradient_using_copy", "agg_grads.append", "has_nan_or_inf_list.append", "tensorflow.reduce_any"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_single_gradient_using_copy"], ["", "", "def", "aggregate_gradients_using_copy_with_variable_colocation", "(", "\n", "tower_grads", ",", "use_mean", ",", "check_inf_nan", ")", ":", "\n", "  ", "\"\"\"Aggregate gradients, colocating computation with the gradient's variable.\n\n  Args:\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\n      is over towers. The inner list is over individual gradients. All variables\n      of the same gradient across towers must be the same (that is,\n      tower_grads[x][a][1] == tower_grads[y][a][1] for all indices x, y, and a)\n    use_mean: if True, mean is taken, else sum of gradients is taken.\n    check_inf_nan: If true, check grads for nans and infs.\n\n  Returns:\n    The tuple ([(average_gradient, variable),], has_nan_or_inf) where the\n      gradient has been averaged across all towers. The variable is chosen from\n      the first tower. The has_nan_or_inf indicates the grads has nan or inf.\n  \"\"\"", "\n", "agg_grads", "=", "[", "]", "\n", "has_nan_or_inf_list", "=", "[", "]", "\n", "for", "single_grads", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each single_grads looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "    ", "var", "=", "single_grads", "[", "0", "]", "[", "1", "]", "\n", "\n", "for", "_", ",", "v", "in", "single_grads", ":", "\n", "      ", "assert", "v", "==", "var", "\n", "\n", "", "with", "tf", ".", "device", "(", "var", ".", "device", ")", ":", "\n", "      ", "grad_and_var", ",", "has_nan_or_inf", "=", "aggregate_single_gradient_using_copy", "(", "\n", "single_grads", ",", "use_mean", ",", "check_inf_nan", ")", "\n", "agg_grads", ".", "append", "(", "grad_and_var", ")", "\n", "has_nan_or_inf_list", ".", "append", "(", "has_nan_or_inf", ")", "\n", "\n", "", "", "if", "check_inf_nan", ":", "\n", "    ", "return", "agg_grads", ",", "tf", ".", "reduce_any", "(", "has_nan_or_inf_list", ")", "\n", "", "else", ":", "\n", "    ", "return", "agg_grads", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_gradients_using_copy": [[456, 485], ["zip", "variable_mgr_util.aggregate_single_gradient_using_copy", "agg_grads.append", "has_nan_or_inf_list.append", "tensorflow.reduce_any"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_single_gradient_using_copy"], ["", "", "def", "aggregate_gradients_using_copy", "(", "tower_grads", ",", "use_mean", ",", "check_inf_nan", ")", ":", "\n", "  ", "\"\"\"Calculate the average gradient for each shared variable across all towers.\n\n  Note that this function provides a synchronization point across all towers.\n\n  Args:\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\n      is over towers. The inner list is over individual gradients.\n    use_mean: if True, mean is taken, else sum of gradients is taken.\n    check_inf_nan: check grads for nans and infs.\n\n  Returns:\n    The tuple ([(average_gradient, variable),], has_nan_or_inf) where the\n      gradient has been averaged across all towers. The variable is chosen from\n      the first tower. The has_nan_or_inf indicates the grads has nan or inf.\n  \"\"\"", "\n", "agg_grads", "=", "[", "]", "\n", "has_nan_or_inf_list", "=", "[", "]", "\n", "\n", "for", "single_grads", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "    ", "grad_and_var", ",", "has_nan_or_inf", "=", "aggregate_single_gradient_using_copy", "(", "\n", "single_grads", ",", "use_mean", ",", "check_inf_nan", ")", "\n", "agg_grads", ".", "append", "(", "grad_and_var", ")", "\n", "has_nan_or_inf_list", ".", "append", "(", "has_nan_or_inf", ")", "\n", "\n", "", "if", "check_inf_nan", ":", "\n", "    ", "return", "agg_grads", ",", "tf", ".", "reduce_any", "(", "has_nan_or_inf_list", ")", "\n", "", "else", ":", "\n", "    ", "return", "agg_grads", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_single_gradient_using_copy": [[487, 519], ["tensorflow.add_n", "tensorflow.multiply", "len", "tensorflow.name_scope", "tensorflow.logical_not", "len", "tensorflow.reduce_all", "tensorflow.is_finite"], "function", ["None"], ["", "", "def", "aggregate_single_gradient_using_copy", "(", "grad_and_vars", ",", "use_mean", ",", "\n", "check_inf_nan", ")", ":", "\n", "  ", "\"\"\"Calculate the average gradient for a shared variable across all towers.\n\n  Note that this function provides a synchronization point across all towers.\n\n  Args:\n    grad_and_vars: A list or tuple of (gradient, variable) tuples. Each\n      (gradient, variable) pair within the outer list represents the gradient\n      of the variable calculated for a single tower, and the number of pairs\n      equals the number of towers.\n    use_mean: if True, mean is taken, else sum of gradients is taken.\n    check_inf_nan: check grads for nans and infs.\n\n  Returns:\n    The tuple ([(average_gradient, variable),], has_nan_or_inf) where the\n      gradient has been averaged across all towers. The variable is chosen from\n      the first tower. The has_nan_or_inf indicates the grads has nan or inf.\n  \"\"\"", "\n", "grads", "=", "[", "g", "for", "g", ",", "_", "in", "grad_and_vars", "]", "\n", "grad", "=", "tf", ".", "add_n", "(", "grads", ")", "\n", "\n", "if", "use_mean", "and", "len", "(", "grads", ")", ">", "1", ":", "\n", "    ", "grad", "=", "tf", ".", "multiply", "(", "grad", ",", "1.0", "/", "len", "(", "grads", ")", ")", "\n", "\n", "", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "if", "check_inf_nan", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'check_for_inf_and_nan'", ")", ":", "\n", "      ", "has_nan_or_inf", "=", "tf", ".", "logical_not", "(", "tf", ".", "reduce_all", "(", "tf", ".", "is_finite", "(", "grads", ")", ")", ")", "\n", "", "return", "(", "grad", ",", "v", ")", ",", "has_nan_or_inf", "\n", "", "else", ":", "\n", "    ", "return", "(", "grad", ",", "v", ")", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.flags.DEFINE_string": [[45, 47], ["ParamSpec"], "function", ["None"], ["def", "DEFINE_string", "(", "name", ",", "default", ",", "help", ")", ":", "# pylint: disable=invalid-name,redefined-builtin", "\n", "  ", "param_specs", "[", "name", "]", "=", "ParamSpec", "(", "'string'", ",", "default", ",", "help", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.flags.DEFINE_boolean": [[49, 51], ["ParamSpec"], "function", ["None"], ["", "def", "DEFINE_boolean", "(", "name", ",", "default", ",", "help", ")", ":", "# pylint: disable=invalid-name,redefined-builtin", "\n", "  ", "param_specs", "[", "name", "]", "=", "ParamSpec", "(", "'boolean'", ",", "default", ",", "help", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.flags.DEFINE_integer": [[53, 56], ["ParamSpec"], "function", ["None"], ["", "def", "DEFINE_integer", "(", "name", ",", "default", ",", "help", ",", "lower_bound", "=", "None", ",", "upper_bound", "=", "None", ")", ":", "# pylint: disable=invalid-name,redefined-builtin", "\n", "  ", "kwargs", "=", "{", "'lower_bound'", ":", "lower_bound", ",", "'upper_bound'", ":", "upper_bound", "}", "\n", "param_specs", "[", "name", "]", "=", "ParamSpec", "(", "'integer'", ",", "default", ",", "help", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.flags.DEFINE_float": [[58, 61], ["ParamSpec"], "function", ["None"], ["", "def", "DEFINE_float", "(", "name", ",", "default", ",", "help", ",", "lower_bound", "=", "None", ",", "upper_bound", "=", "None", ")", ":", "# pylint: disable=invalid-name,redefined-builtin", "\n", "  ", "kwargs", "=", "{", "'lower_bound'", ":", "lower_bound", ",", "'upper_bound'", ":", "upper_bound", "}", "\n", "param_specs", "[", "name", "]", "=", "ParamSpec", "(", "'float'", ",", "default", ",", "help", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.flags.DEFINE_enum": [[63, 66], ["ParamSpec"], "function", ["None"], ["", "def", "DEFINE_enum", "(", "name", ",", "default", ",", "enum_values", ",", "help", ")", ":", "# pylint: disable=invalid-name,redefined-builtin", "\n", "  ", "kwargs", "=", "{", "'enum_values'", ":", "enum_values", "}", "\n", "param_specs", "[", "name", "]", "=", "ParamSpec", "(", "'enum'", ",", "default", ",", "help", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.flags.DEFINE_list": [[68, 70], ["ParamSpec"], "function", ["None"], ["", "def", "DEFINE_list", "(", "name", ",", "default", ",", "help", ")", ":", "# pylint: disable=invalid-name,redefined-builtin", "\n", "  ", "param_specs", "[", "name", "]", "=", "ParamSpec", "(", "'list'", ",", "default", ",", "help", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.flags.define_flags": [[72, 90], ["six.iteritems", "ValueError"], "function", ["None"], ["", "def", "define_flags", "(", "specs", "=", "None", ")", ":", "\n", "  ", "\"\"\"Define a command line flag for each ParamSpec in flags.param_specs.\"\"\"", "\n", "specs", "=", "specs", "or", "param_specs", "\n", "define_flag", "=", "{", "\n", "'boolean'", ":", "absl_flags", ".", "DEFINE_boolean", ",", "\n", "'float'", ":", "absl_flags", ".", "DEFINE_float", ",", "\n", "'integer'", ":", "absl_flags", ".", "DEFINE_integer", ",", "\n", "'string'", ":", "absl_flags", ".", "DEFINE_string", ",", "\n", "'enum'", ":", "absl_flags", ".", "DEFINE_enum", ",", "\n", "'list'", ":", "absl_flags", ".", "DEFINE_list", "\n", "}", "\n", "for", "name", ",", "param_spec", "in", "six", ".", "iteritems", "(", "specs", ")", ":", "\n", "    ", "if", "param_spec", ".", "flag_type", "not", "in", "define_flag", ":", "\n", "      ", "raise", "ValueError", "(", "'Unknown flag_type %s'", "%", "param_spec", ".", "flag_type", ")", "\n", "", "else", ":", "\n", "      ", "define_flag", "[", "param_spec", ".", "flag_type", "]", "(", "name", ",", "param_spec", ".", "default_value", ",", "\n", "help", "=", "param_spec", ".", "description", ",", "\n", "**", "param_spec", ".", "kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark_test.AllReduceBenchmarkTest._test_run_benchmark": [[31, 39], ["test_util.monkey_patch", "benchmark_cnn.BenchmarkCNN", "all_reduce_benchmark.run_benchmark", "all_reduce_benchmark_test.AllReduceBenchmarkTest.assertRegexpMatches", "test_util.print_and_add_to_list"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.monkey_patch", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.run_benchmark", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.print_and_add_to_list"], ["def", "_test_run_benchmark", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Tests that run_benchmark() runs successfully with the params.\"\"\"", "\n", "logs", "=", "[", "]", "\n", "with", "test_util", ".", "monkey_patch", "(", "all_reduce_benchmark", ",", "\n", "log_fn", "=", "test_util", ".", "print_and_add_to_list", "(", "logs", ")", ")", ":", "\n", "      ", "bench_cnn", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "all_reduce_benchmark", ".", "run_benchmark", "(", "bench_cnn", ",", "num_iters", "=", "5", ")", "\n", "self", ".", "assertRegexpMatches", "(", "logs", "[", "-", "1", "]", ",", "'^Average time per step: [0-9.]+$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark_test.AllReduceBenchmarkTest.test_run_benchmark": [[40, 49], ["benchmark_cnn.make_params", "all_reduce_benchmark_test.AllReduceBenchmarkTest._test_run_benchmark", "params._replace._replace._replace", "all_reduce_benchmark_test.AllReduceBenchmarkTest._test_run_benchmark"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark_test.AllReduceBenchmarkTest._test_run_benchmark", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark_test.AllReduceBenchmarkTest._test_run_benchmark"], ["", "", "def", "test_run_benchmark", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests that run_benchmark() runs successfully.\"\"\"", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", "num_batches", "=", "10", ",", "\n", "variable_update", "=", "'replicated'", ",", "\n", "num_gpus", "=", "2", ")", "\n", "self", ".", "_test_run_benchmark", "(", "params", ")", "\n", "params", "=", "params", ".", "_replace", "(", "hierarchical_copy", "=", "True", ",", "gradient_repacking", "=", "8", ",", "\n", "num_gpus", "=", "8", ")", "\n", "self", ".", "_test_run_benchmark", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestCNNModel.__init__": [[446, 449], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "TestCNNModel", ",", "self", ")", ".", "__init__", "(", "\n", "'test_cnn_model'", ",", "image_size", "=", "1", ",", "batch_size", "=", "1", ",", "learning_rate", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestCNNModel.add_inference": [[453, 468], ["tensorflow.name_scope", "cnn.conv", "tensorflow.name_scope", "cnn.conv", "tensorflow.name_scope", "cnn.reshape", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "# This model only supports 1x1 images with 1 channel", "\n", "    ", "assert", "cnn", ".", "top_layer", ".", "shape", "[", "1", ":", "]", "==", "(", "1", ",", "1", ",", "1", ")", "\n", "# Multiply by variable A.", "\n", "with", "tf", ".", "name_scope", "(", "'mult_by_var_A'", ")", ":", "\n", "      ", "cnn", ".", "conv", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "use_batch_norm", "=", "None", ",", "activation", "=", "None", ",", "bias", "=", "None", ",", "\n", "kernel_initializer", "=", "tf", ".", "constant_initializer", "(", "\n", "self", ".", "VAR_A_INITIAL_VALUE", ")", ")", "\n", "# Multiply by variable B.", "\n", "", "with", "tf", ".", "name_scope", "(", "'mult_by_var_B'", ")", ":", "\n", "      ", "cnn", ".", "conv", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "use_batch_norm", "=", "None", ",", "activation", "=", "None", ",", "bias", "=", "None", ",", "\n", "kernel_initializer", "=", "tf", ".", "constant_initializer", "(", "\n", "self", ".", "VAR_B_INITIAL_VALUE", ")", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'reshape_to_scalar'", ")", ":", "\n", "      ", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestCNNModel.skip_final_affine_layer": [[469, 471], ["None"], "methods", ["None"], ["", "", "def", "skip_final_affine_layer", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestCNNModel.loss_function": [[472, 475], ["tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "loss_function", "(", "self", ",", "logits", ",", "labels", ",", "aux_logits", ")", ":", "\n", "    ", "del", "labels", ",", "aux_logits", "\n", "return", "tf", ".", "reduce_mean", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestCNNModel.manually_compute_losses": [[476, 487], ["tensorflow.Graph().as_default", "tensorflow.device", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.placeholder", "tensorflow.reshape", "test_util.TestCNNModel.loss_function", "test_util.TestCNNModel.manually_compute_losses"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.loss_function", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.manually_compute_losses"], ["", "def", "manually_compute_losses", "(", "self", ",", "inputs", ",", "num_workers", ",", "params", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "      ", "a", "=", "tf", ".", "Variable", "(", "self", ".", "VAR_A_INITIAL_VALUE", ",", "name", "=", "'A'", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "self", ".", "VAR_B_INITIAL_VALUE", ",", "name", "=", "'B'", ")", "\n", "inputs_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "(", "None", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "name", "=", "'inputs_placeholder'", ")", "\n", "inputs_reshaped", "=", "tf", ".", "reshape", "(", "inputs_placeholder", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "loss", "=", "self", ".", "loss_function", "(", "inputs_reshaped", "*", "a", "*", "b", ",", "None", ",", "None", ")", "\n", "return", "manually_compute_losses", "(", "inputs", ",", "inputs_placeholder", ",", "loss", ",", "\n", "num_workers", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestDataSet.__init__": [[492, 496], ["datasets.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "height", "=", "1", ",", "width", "=", "1", ",", "depth", "=", "1", ")", ":", "\n", "    ", "super", "(", "TestDataSet", ",", "self", ")", ".", "__init__", "(", "'test_dataset'", ",", "height", "=", "height", ",", "\n", "width", "=", "width", ",", "depth", "=", "depth", ",", "data_dir", "=", "None", ",", "\n", "queue_runner_required", "=", "True", ",", "num_classes", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestDataSet.num_examples_per_epoch": [[497, 500], ["None"], "methods", ["None"], ["", "def", "num_examples_per_epoch", "(", "self", ",", "subset", "=", "'train'", ")", ":", "\n", "    ", "del", "subset", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestDataSet.get_image_preprocessor": [[501, 503], ["None"], "methods", ["None"], ["", "def", "get_image_preprocessor", "(", "self", ",", "input_preprocessor", "=", "'default'", ")", ":", "\n", "    ", "return", "preprocessing", ".", "TestImagePreprocessor", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.TestDataSet.use_synthetic_gpu_images": [[504, 506], ["None"], "methods", ["None"], ["", "def", "use_synthetic_gpu_images", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.monkey_patch": [[36, 66], ["getattr", "kwargs.items", "old_values.items", "setattr", "setattr"], "function", ["None"], ["@", "contextmanager", "\n", "def", "monkey_patch", "(", "obj", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Context mgr to monkey patch attributes on an object (such as a module).\n\n  The attributes are patched back to their original value when the context\n  manager exits.\n\n  For example, to replace cnn_util.loss_function with an identity function, do:\n\n  ```\n  with monkey_patch(benchmark_cnn, loss_function=lambda x: x)\n    loss1 = benchmark_cnn.loss_function(1)  # loss1 will be 1\n  loss2 = benchmark_cnn.loss_function(2)  # Call the original function\n  ```\n\n  Args:\n    obj: The object (which can be a module) to monkey patch attributes on.\n    **kwargs: Dictionary mapping from attribute name to value that the attribute\n      will be patched with.\n  Yields:\n    Nothing.\n  \"\"\"", "\n", "old_values", "=", "{", "key", ":", "getattr", "(", "obj", ",", "key", ")", "for", "key", "in", "kwargs", "}", "\n", "try", ":", "\n", "    ", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "obj", ",", "key", ",", "value", ")", "\n", "", "yield", "\n", "", "finally", ":", "\n", "    ", "for", "key", ",", "value", "in", "old_values", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "obj", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.monkey_patch_base_cluster_manager": [[68, 82], ["cnn_util.BaseClusterManager"], "function", ["None"], ["", "", "", "def", "monkey_patch_base_cluster_manager", "(", ")", ":", "\n", "  ", "\"\"\"Monkey patches get_cluster_manager to return a BaseClusterManager.\n\n  This function replaces platforms_util.get_cluster_manager with a function that\n  always return a BaseClusterManager.\n\n  This is useful for testing creating a graph in distributed mode, with only a\n  single process. GrpcClusterManager's constructor blocks until a cluster is set\n  up, which requires multiple processes to be created.\n  \"\"\"", "\n", "def", "get_test_cluster_manager", "(", "params", ",", "config_proto", ")", ":", "\n", "    ", "del", "config_proto", "\n", "return", "cnn_util", ".", "BaseClusterManager", "(", "params", ")", "\n", "", "platforms_util", ".", "get_cluster_manager", "=", "get_test_cluster_manager", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.print_and_add_to_list": [[84, 90], ["print", "print_list.append"], "function", ["None"], ["", "def", "print_and_add_to_list", "(", "print_list", ")", ":", "\n", "  ", "\"\"\"Returns a function which prints the input, then adds it to print_list.\"\"\"", "\n", "def", "f", "(", "string", ")", ":", "\n", "    ", "print", "(", "string", ")", "\n", "print_list", ".", "append", "(", "string", ")", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_training_outputs_from_logs": [[99, 134], ["len", "log.split", "float", "outputs.append", "float", "float", "TrainingOutput", "len", "len"], "function", ["None"], ["def", "get_training_outputs_from_logs", "(", "logs", ",", "print_training_accuracy", ")", ":", "\n", "  ", "\"\"\"Returns a list of TrainingOutputs by parsing the logs of a training run.\n\n  Args:\n    logs: A list of strings, each which is a line from the standard output of\n      tf_cnn_benchmarks from training. Only lines in the form:\n        10 images/sec: 14.2 +/- 0.0 (jitter = 0.0) 7.020\n      are parsed (the line may also contain the training accuracies).\n    print_training_accuracy: The value of the param print_training_accuracy.\n  Returns:\n    A list of TrainingOutputs. The list has one element per element of logs\n    that is in the format above. top_1_accuracy and top_5_accuracy are set to -1\n    if the line does not contain accuracies.\n  \"\"\"", "\n", "outputs", "=", "[", "]", "\n", "for", "log", "in", "logs", ":", "\n", "    ", "if", "'images/sec'", "in", "log", "and", "'+/-'", "in", "log", ":", "\n", "      ", "parts", "=", "log", ".", "split", "(", ")", "\n", "if", "print_training_accuracy", ":", "\n", "# Example log with training accuracy:", "\n", "#   10 images/sec: 0.2 +/- 0.0 (jitter = 0.0) 6.908 0.500 1.000", "\n", "        ", "assert", "len", "(", "parts", ")", "==", "11", "\n", "top_1_acc", "=", "float", "(", "parts", "[", "9", "]", ")", "\n", "top_5_acc", "=", "float", "(", "parts", "[", "10", "]", ")", "\n", "", "else", ":", "\n", "# Example log without training accuracy:", "\n", "#   10 images/sec: 0.2 +/- 0.0 (jitter = 0.0) 6.908", "\n", "        ", "assert", "len", "(", "parts", ")", "==", "9", "\n", "top_1_acc", "=", "-", "1", "\n", "top_5_acc", "=", "-", "1", "\n", "", "loss", "=", "float", "(", "parts", "[", "8", "]", ")", "\n", "outputs", ".", "append", "(", "TrainingOutput", "(", "loss", "=", "loss", ",", "top_1_accuracy", "=", "top_1_acc", ",", "\n", "top_5_accuracy", "=", "top_5_acc", ")", ")", "\n", "", "", "assert", "len", "(", "outputs", ")", ">=", "1", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_evaluation_outputs_from_logs": [[136, 162], ["EvalOutput", "log.split", "float", "float", "len"], "function", ["None"], ["", "def", "get_evaluation_outputs_from_logs", "(", "logs", ")", ":", "\n", "  ", "\"\"\"Returns the top 1 and 5 accuracies by parsing the logs of an eval run.\n\n  Args:\n    logs: A list of strings, each which is a line from the standard output of\n      tf_cnn_benchmarks from evaluation. Only the line in the form:\n        Accuracy @ 1 = 0.5000 Accuracy @ 5 = 1.0000 [80 examples]\n      is parsed. The log should only contain one such line.\n  Returns:\n    An EvalOutput.\n  \"\"\"", "\n", "top_1_accuracy", "=", "None", "\n", "top_5_accuracy", "=", "None", "\n", "for", "log", "in", "logs", ":", "\n", "    ", "if", "'Accuracy @ '", "in", "log", ":", "\n", "# Example log:", "\n", "#   Accuracy @ 1 = 0.5000 Accuracy @ 5 = 1.0000 [80 examples]", "\n", "      ", "parts", "=", "log", ".", "split", "(", ")", "\n", "assert", "len", "(", "parts", ")", "==", "12", "\n", "assert", "top_1_accuracy", "is", "None", "\n", "assert", "top_5_accuracy", "is", "None", "\n", "top_1_accuracy", "=", "float", "(", "parts", "[", "4", "]", ")", "\n", "top_5_accuracy", "=", "float", "(", "parts", "[", "9", "]", ")", "\n", "", "", "assert", "top_1_accuracy", "is", "not", "None", "\n", "assert", "top_5_accuracy", "is", "not", "None", "\n", "return", "EvalOutput", "(", "top_1_accuracy", ",", "top_5_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.check_training_outputs_are_reasonable": [[164, 199], ["testcase.assertLessEqual", "testcase.assertLessEqual", "testcase.assertEqual", "testcase.assertEqual", "testcase.assertLessEqual"], "function", ["None"], ["", "def", "check_training_outputs_are_reasonable", "(", "testcase", ",", "training_outputs", ",", "\n", "print_training_accuracy", ",", "\n", "max_final_loss", "=", "10.", ",", "\n", "previous_final_loss", "=", "None", ")", ":", "\n", "  ", "\"\"\"Checks the outputs from training a model are reasonable.\n\n  An assert is failed if the outputs are not reasonable. The final top-1 and\n  top-5 accuracies are asserted to be 1, and so the dataset used to train should\n  be trivial to learn. For example, the dataset could consist of a black image\n  with label 0 and a white image with label 1.\n\n  Args:\n    testcase: A tf.test.TestCase used for assertions.\n    training_outputs: A list of TrainingOutputs, as returned from\n      get_training_outputs_from_logs().\n    print_training_accuracy: Whether training accuracies were printed and stored\n      in training_outputs.\n    max_final_loss: The loss of the final training output is asserted to be at\n      most this value.\n    previous_final_loss: If training was resumed from a checkpoint, the loss of\n      the final step from the previous training run that saved the checkpoint.\n  \"\"\"", "\n", "if", "previous_final_loss", "is", "not", "None", ":", "\n", "# Ensure the loss hasn't raised significantly from the final loss of the", "\n", "# previous training run.", "\n", "    ", "testcase", ".", "assertLessEqual", "(", "training_outputs", "[", "0", "]", ".", "loss", ",", "\n", "previous_final_loss", "*", "1.01", ")", "\n", "", "for", "output", "in", "training_outputs", ":", "\n", "    ", "testcase", ".", "assertLessEqual", "(", "output", ".", "loss", ",", "100.", ")", "\n", "", "last_output", "=", "training_outputs", "[", "-", "1", "]", "\n", "if", "print_training_accuracy", ":", "\n", "    ", "testcase", ".", "assertEqual", "(", "last_output", ".", "top_1_accuracy", ",", "1.0", ")", "\n", "testcase", ".", "assertEqual", "(", "last_output", ".", "top_5_accuracy", ",", "1.0", ")", "\n", "", "if", "max_final_loss", "is", "not", "None", ":", "\n", "    ", "testcase", ".", "assertLessEqual", "(", "last_output", ".", "loss", ",", "max_final_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.train_and_eval": [[201, 297], ["tensorflow.logging.info", "run_fn", "testcase.assertGreaterEqual", "testcase.assertIsNotNone", "tensorflow.logging.info", "params._replace._replace", "run_fn", "testcase.assertGreaterEqual", "testcase.assertNotEqual", "tensorflow.logging.info", "params._replace._replace", "run_fn", "testcase.assertGreaterEqual", "len", "test_util.get_training_outputs_from_logs", "set", "testcase.assertGreater", "len", "test_util.get_training_outputs_from_logs", "set", "len", "test_util.get_evaluation_outputs_from_logs", "testcase.assertEqual", "test_util.check_training_outputs_are_reasonable", "os.listdir", "len", "testcase.assertEqual", "test_util.check_training_outputs_are_reasonable", "os.listdir", "testcase.assertEqual", "testcase.assertEqual", "len", "len"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_training_outputs_from_logs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_training_outputs_from_logs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_evaluation_outputs_from_logs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.check_training_outputs_are_reasonable", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.check_training_outputs_are_reasonable"], ["", "", "def", "train_and_eval", "(", "testcase", ",", "\n", "run_fn", ",", "\n", "params", ",", "\n", "check_output_values", ",", "\n", "max_final_loss", "=", "10.", ",", "\n", "skip", "=", "None", ")", ":", "\n", "  ", "\"\"\"Trains a model then evaluates it.\n\n  This function should be used to verify training and evaluating\n  BenchmarkCNN works without crashing and that it outputs reasonable\n  values. BenchmarkCNN will be run three times. First, it will train a\n  model from scratch, saving a checkpoint. Second, it will load the checkpoint\n  to continue training. Finally, it evaluates based on the loaded checkpoint.\n\n  Args:\n    testcase: A tf.test.TestCase used for assertions.\n    run_fn: Must run `BenchmarkCNN` exactly once. BenchmarkCNN is\n      never used directly, but instead is only run through `run_fn`. `run_fn`\n      has the signature (run_type, inner_params) -> output_list, where:\n        * run_type is a string indicating how BenchmarkCNN will be run.\n          Either 'InitialTraining', 'TrainingFromCheckpoint' or 'Evaluation'.\n        * inner_params is the params BenchmarkCNN should be run with.\n        * output_list[i] is a list of lines from the ith worker's stdout.\n    params: The params BenchmarkCNN will be run with.\n      Will be passed to `run_fn` slightly modified in order to run with both\n      training and evaluation.\n    check_output_values: Whether the outputs of the workers, such as training\n      accuracy, should be checked to make sure their values are reasonable.\n      Fails an assert on `testcase` if a check fails.\n    max_final_loss: The loss of the final training output is asserted to be at\n      most this value for both training runs.\n    skip: If 'eval', evaluation is not done. if\n      'eval_and_train_from_checkpoint', evaluation and training from a\n      checkpoint are both not done.\n  \"\"\"", "\n", "\n", "assert", "not", "skip", "or", "skip", "in", "{", "'eval'", ",", "'eval_and_train_from_checkpoint'", "}", "\n", "\n", "# Part 1: Train from scratch.", "\n", "tf", ".", "logging", ".", "info", "(", "'Training model from scratch'", ")", "\n", "print_training_accuracy", "=", "(", "params", ".", "print_training_accuracy", "or", "\n", "params", ".", "forward_only", ")", "\n", "initial_train_logs", "=", "run_fn", "(", "'InitialTraining'", ",", "params", ")", "\n", "testcase", ".", "assertGreaterEqual", "(", "len", "(", "initial_train_logs", ")", ",", "1", ")", "\n", "for", "lines", "in", "initial_train_logs", ":", "\n", "    ", "initial_train_outputs", "=", "get_training_outputs_from_logs", "(", "\n", "lines", ",", "print_training_accuracy", ")", "\n", "if", "params", ".", "cross_replica_sync", "and", "params", ".", "batch_group_size", "==", "1", ":", "\n", "      ", "testcase", ".", "assertEqual", "(", "len", "(", "initial_train_outputs", ")", ",", "params", ".", "num_batches", ")", "\n", "", "if", "check_output_values", ":", "\n", "      ", "check_training_outputs_are_reasonable", "(", "testcase", ",", "initial_train_outputs", ",", "\n", "print_training_accuracy", ",", "\n", "max_final_loss", "=", "max_final_loss", ")", "\n", "", "", "if", "params", ".", "train_dir", "is", "not", "None", ":", "\n", "    ", "train_dir_entries", "=", "set", "(", "os", ".", "listdir", "(", "params", ".", "train_dir", ")", ")", "\n", "testcase", ".", "assertGreater", "(", "len", "(", "train_dir_entries", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "    ", "train_dir_entries", "=", "None", "\n", "\n", "", "if", "skip", "==", "'eval_and_train_from_checkpoint'", ":", "\n", "    ", "return", "\n", "\n", "# Part 2: Train from the loaded checkpoint.", "\n", "", "testcase", ".", "assertIsNotNone", "(", "train_dir_entries", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Training model from loaded checkpoint'", ")", "\n", "# Run for same number of batches as before.", "\n", "params", "=", "params", ".", "_replace", "(", "num_batches", "=", "params", ".", "num_batches", "*", "2", ")", "\n", "train_logs_from_ckpt", "=", "run_fn", "(", "'TrainingFromCheckpoint'", ",", "params", ")", "\n", "testcase", ".", "assertGreaterEqual", "(", "len", "(", "train_logs_from_ckpt", ")", ",", "1", ")", "\n", "for", "lines", "in", "train_logs_from_ckpt", ":", "\n", "    ", "train_outputs_from_ckpt", "=", "get_training_outputs_from_logs", "(", "\n", "lines", ",", "print_training_accuracy", ")", "\n", "if", "params", ".", "cross_replica_sync", "and", "params", ".", "batch_group_size", "==", "1", ":", "\n", "      ", "testcase", ".", "assertEqual", "(", "len", "(", "train_outputs_from_ckpt", ")", ",", "\n", "params", ".", "num_batches", "//", "2", "-", "params", ".", "num_warmup_batches", ")", "\n", "", "if", "check_output_values", ":", "\n", "      ", "check_training_outputs_are_reasonable", "(", "\n", "testcase", ",", "train_outputs_from_ckpt", ",", "print_training_accuracy", ",", "\n", "max_final_loss", "=", "max_final_loss", ",", "\n", "previous_final_loss", "=", "initial_train_outputs", "[", "-", "1", "]", ".", "loss", ")", "\n", "# Ensure a new checkpoint was written out.", "\n", "", "", "testcase", ".", "assertNotEqual", "(", "train_dir_entries", ",", "set", "(", "os", ".", "listdir", "(", "params", ".", "train_dir", ")", ")", ")", "\n", "\n", "if", "skip", "==", "'eval'", ":", "\n", "    ", "return", "\n", "\n", "# Part 3: Evaluate from the loaded checkpoint.", "\n", "", "tf", ".", "logging", ".", "info", "(", "'Evaluating model from checkpoint'", ")", "\n", "params", "=", "params", ".", "_replace", "(", "num_batches", "=", "params", ".", "num_batches", "//", "2", ",", "eval", "=", "True", ")", "\n", "eval_logs", "=", "run_fn", "(", "'Evaluation'", ",", "params", ")", "\n", "testcase", ".", "assertGreaterEqual", "(", "len", "(", "eval_logs", ")", ",", "1", ")", "\n", "for", "lines", "in", "eval_logs", ":", "\n", "    ", "top_1_accuracy", ",", "top_5_accuracy", "=", "get_evaluation_outputs_from_logs", "(", "lines", ")", "\n", "if", "check_output_values", ":", "\n", "      ", "testcase", ".", "assertEqual", "(", "top_1_accuracy", ",", "1.0", ")", "\n", "testcase", ".", "assertEqual", "(", "top_5_accuracy", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_temp_dir": [[299, 303], ["os.path.join", "os.mkdir", "tensorflow.python.platform.test.get_temp_dir"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_temp_dir"], ["", "", "", "def", "get_temp_dir", "(", "dir_name", ")", ":", "\n", "  ", "dir_path", "=", "os", ".", "path", ".", "join", "(", "test", ".", "get_temp_dir", "(", ")", ",", "dir_name", ")", "\n", "os", ".", "mkdir", "(", "dir_path", ")", "\n", "return", "dir_path", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params": [[305, 320], ["benchmark_cnn.make_params", "test_util.get_temp_dir"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_temp_dir"], ["", "def", "get_params", "(", "train_dir_name", ")", ":", "\n", "  ", "\"\"\"Returns params that can be used to train.\"\"\"", "\n", "return", "benchmark_cnn", ".", "make_params", "(", "\n", "batch_size", "=", "2", ",", "\n", "display_every", "=", "1", ",", "\n", "init_learning_rate", "=", "0.005", ",", "\n", "model", "=", "'trivial'", ",", "\n", "num_batches", "=", "20", ",", "\n", "num_gpus", "=", "2", ",", "\n", "num_warmup_batches", "=", "5", ",", "\n", "optimizer", "=", "'sgd'", ",", "\n", "print_training_accuracy", "=", "True", ",", "\n", "train_dir", "=", "get_temp_dir", "(", "train_dir_name", ")", ",", "\n", "variable_update", "=", "'parameter_server'", ",", "\n", "weight_decay", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params": [[322, 334], ["benchmark_cnn.make_params"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params"], ["", "def", "get_var_update_params", "(", ")", ":", "\n", "  ", "\"\"\"Returns params that are used when testing variable updates.\"\"\"", "\n", "return", "benchmark_cnn", ".", "make_params", "(", "\n", "batch_size", "=", "2", ",", "\n", "model", "=", "'test_model'", ",", "\n", "num_gpus", "=", "2", ",", "\n", "display_every", "=", "1", ",", "\n", "num_warmup_batches", "=", "0", ",", "\n", "num_batches", "=", "4", ",", "\n", "weight_decay", "=", "2", "**", "-", "4", ",", "\n", "init_learning_rate", "=", "2", "**", "-", "4", ",", "\n", "optimizer", "=", "'sgd'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_fake_var_update_inputs": [[336, 341], ["numpy.resize", "numpy.array", "range"], "function", ["None"], ["", "def", "get_fake_var_update_inputs", "(", ")", ":", "\n", "  ", "\"\"\"Returns fake input 1x1 images to use in variable update tests.\"\"\"", "\n", "# BenchmarkCNN divides by 127.5 then subtracts 1.0 from the images, so after", "\n", "# that, the images will be -1., 0., 1., ..., 14.", "\n", "return", "np", ".", "resize", "(", "127.5", "*", "np", ".", "array", "(", "range", "(", "16", ")", ")", ",", "(", "16", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util._worker_batches_in_numpy_array": [[343, 353], ["cnn_util.roll_numpy_batches"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.roll_numpy_batches"], ["", "def", "_worker_batches_in_numpy_array", "(", "numpy_inputs", ",", "batch_size", ",", "shift_ratio", ")", ":", "\n", "  ", "\"\"\"Yields batches from a numpy array, for a single worker.\"\"\"", "\n", "numpy_inputs", "=", "cnn_util", ".", "roll_numpy_batches", "(", "numpy_inputs", ",", "batch_size", ",", "\n", "shift_ratio", ")", "\n", "i", "=", "0", "\n", "total_batches", "=", "numpy_inputs", ".", "shape", "[", "0", "]", "\n", "assert", "total_batches", "%", "batch_size", "==", "0", "\n", "while", "True", ":", "\n", "    ", "yield", "numpy_inputs", "[", "i", ":", "i", "+", "batch_size", ",", "...", "]", "\n", "i", "=", "(", "i", "+", "batch_size", ")", "%", "total_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.manually_compute_losses": [[355, 434], ["tensorflow.add_n", "benchmark_cnn.get_optimizer", "benchmark_cnn.get_optimizer.compute_gradients", "benchmark_cnn.get_optimizer.apply_gradients", "test_util._worker_batches_in_numpy_array", "tensorflow.Session", "sess.run", "range", "tensorflow.nn.l2_loss", "tensorflow.constant", "tensorflow.placeholder", "range", "tensorflow.global_variables_initializer", "range", "tensorflow.trainable_variables", "tensorflow.ConfigProto", "range", "next", "sess.run", "losses[].append", "computed_grads.append", "dict", "sess.run", "zip"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_optimizer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util._worker_batches_in_numpy_array", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "def", "manually_compute_losses", "(", "numpy_inputs", ",", "inputs_placeholder", ",", "loss", ",", "num_workers", ",", "\n", "params", ")", ":", "\n", "  ", "\"\"\"Manually compute the losses each worker should report in tf_cnn_benchmarks.\n\n  This function essentially simulates tf_cnn_benchmarks, computing what the loss\n  of each worker should be. The caller should create a model, that takes in\n  images from `inputs_placeholder`, a tf.placeholder, and computes `loss`.\n\n  This function, and all ops passed to this function, must be run under a\n  tf.device('cpu:0') context manager.\n\n  Non-SGD optimizers are not supported with multiple workers.\n\n  Args:\n    numpy_inputs: A Numpy array to use as the input images.\n    inputs_placeholder: A tf.placeholder tensor, where input images can be fed\n      into.\n    loss: A scalar tensor representing the loss of the model, which is obtained\n      from the input images in inputs_placeholder.\n    num_workers: How many workers should be simulated.\n    params: Params tuple. This doesn't have to have information about the\n      distributed cluster, such as --num_workers, as num_workers is passed in\n      separately.\n\n  Returns:\n    A list of list of losses. return_value[i][j] is the loss of the ith worker\n    after the jth step.\n  \"\"\"", "\n", "batch_size", "=", "params", ".", "batch_size", "*", "params", ".", "num_gpus", "\n", "assert", "numpy_inputs", ".", "shape", "[", "0", "]", "%", "(", "num_workers", "*", "batch_size", ")", "==", "0", "\n", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "x", ")", "for", "x", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "total_loss", "=", "loss", "+", "params", ".", "weight_decay", "*", "l2_loss", "\n", "reported_loss", "=", "(", "loss", "if", "params", ".", "loss_type_to_report", "==", "'base_loss'", "\n", "else", "total_loss", ")", "\n", "gradient_multiplier", "=", "1", "\n", "if", "params", ".", "variable_update", "in", "(", "'replicated'", ",", "'distributed_all_reduce'", ")", ":", "\n", "# In certain variable updates, tf_cnn_benchmarks add the gradients of the", "\n", "# GPUs instead of taking their mean, making the gradients effectively", "\n", "# params.num_gpu times higher.", "\n", "# TODO(b/62722498): Make all variable updates consistent.", "\n", "    ", "gradient_multiplier", "=", "params", ".", "num_gpus", "\n", "\n", "", "opt", "=", "benchmark_cnn", ".", "get_optimizer", "(", "params", ",", "params", ".", "init_learning_rate", ")", "\n", "grad_vars", "=", "opt", ".", "compute_gradients", "(", "\n", "total_loss", ",", "grad_loss", "=", "tf", ".", "constant", "(", "gradient_multiplier", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "grads", "=", "[", "g", "for", "g", ",", "_", "in", "grad_vars", "]", "\n", "# We apply gradients from a placeholder. That way, we can first compute the", "\n", "# gradients from each worker, then afterwards apply them one by one by feeding", "\n", "# them into the placeholder.", "\n", "placeholder_grad_vars", "=", "[", "(", "tf", ".", "placeholder", "(", "g", ".", "dtype", ",", "g", ".", "shape", ")", ",", "v", ")", "\n", "for", "g", ",", "v", "in", "grad_vars", "]", "\n", "placeholder_grads", "=", "[", "g", "for", "g", ",", "_", "in", "placeholder_grad_vars", "]", "\n", "apply_grads_op", "=", "opt", ".", "apply_gradients", "(", "placeholder_grad_vars", ")", "\n", "\n", "batch_iterators", "=", "[", "_worker_batches_in_numpy_array", "(", "numpy_inputs", ",", "batch_size", ",", "\n", "shift_ratio", "=", "i", "/", "num_workers", ")", "\n", "for", "i", "in", "range", "(", "num_workers", ")", "]", "\n", "# Set the GPU count to 0, to avoid taking all the GPU memory. Unfortunately,", "\n", "# doing so still takes up about ~1GB for some reason.", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "0", "}", ")", ")", "as", "sess", ":", "\n", "    ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "losses", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_workers", ")", "]", "\n", "for", "i", "in", "range", "(", "params", ".", "num_batches", ")", ":", "\n", "      ", "computed_grads", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_workers", ")", ":", "\n", "        ", "batch_feed", "=", "next", "(", "batch_iterators", "[", "j", "]", ")", "\n", "batch_feed", "=", "batch_feed", "/", "127.5", "-", "1", "\n", "worker_loss", ",", "worker_grads", "=", "sess", ".", "run", "(", "(", "reported_loss", ",", "grads", ")", ",", "\n", "{", "inputs_placeholder", ":", "batch_feed", "}", ")", "\n", "losses", "[", "j", "]", ".", "append", "(", "worker_loss", ")", "\n", "computed_grads", ".", "append", "(", "worker_grads", ")", "\n", "", "for", "worker_grads", "in", "computed_grads", ":", "\n", "# TODO(reedwm): With multiple workers, applying the gradients", "\n", "# sequentially per worker is not equivalent to what tf_cnn_benchmarks", "\n", "# does when the optmizer is not SGD. Therefore, this currently does not", "\n", "# work currently when num_workers > 1 and params.optimizer != 'sgd'.", "\n", "        ", "feed_dict", "=", "dict", "(", "zip", "(", "placeholder_grads", ",", "worker_grads", ")", ")", "\n", "sess", ".", "run", "(", "apply_grads_op", ",", "feed_dict", ")", "\n", "", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util_test.VariableMgrUtilTest.testGetLossScaleUpdateOpTruePath": [[27, 41], ["tensorflow.Variable", "tensorflow.Variable", "variable_mgr_util.get_loss_scale_update_op", "variable_mgr_util_test.VariableMgrUtilTest.test_session", "sess.run", "sess.run", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "tensorflow.global_variables_initializer", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.get_loss_scale_update_op", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["  ", "def", "testGetLossScaleUpdateOpTruePath", "(", "self", ")", ":", "\n", "    ", "loss_scale", "=", "tf", ".", "Variable", "(", "4", ")", "\n", "# loss_scale_normal_steps >= inc_loss_scale_every_n", "\n", "loss_scale_normal_steps", "=", "tf", ".", "Variable", "(", "10", ")", "\n", "inc_loss_scale_every_n", "=", "10", "\n", "update_op", "=", "variable_mgr_util", ".", "get_loss_scale_update_op", "(", "\n", "loss_scale", ",", "loss_scale_normal_steps", ",", "inc_loss_scale_every_n", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "update_op", ")", "\n", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale", ")", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_normal_steps", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util_test.VariableMgrUtilTest.testGetLossScaleUpdateOpFalsePath": [[42, 56], ["tensorflow.Variable", "tensorflow.Variable", "variable_mgr_util.get_loss_scale_update_op", "variable_mgr_util_test.VariableMgrUtilTest.test_session", "sess.run", "sess.run", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "tensorflow.global_variables_initializer", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.get_loss_scale_update_op", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "def", "testGetLossScaleUpdateOpFalsePath", "(", "self", ")", ":", "\n", "    ", "loss_scale", "=", "tf", ".", "Variable", "(", "4", ")", "\n", "# loss_scale_normal_steps < inc_loss_scale_every_n", "\n", "loss_scale_normal_steps", "=", "tf", ".", "Variable", "(", "9", ")", "\n", "inc_loss_scale_every_n", "=", "10", "\n", "update_op", "=", "variable_mgr_util", ".", "get_loss_scale_update_op", "(", "\n", "loss_scale", ",", "loss_scale_normal_steps", ",", "inc_loss_scale_every_n", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "update_op", ")", "\n", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale", ")", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_normal_steps", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util_test.VariableMgrUtilTest.testAppendGradientsWithLossScaleWithAutoScaleDisabled": [[57, 79], ["tensorflow.Variable", "variable_mgr_util.AutoLossScaleParams", "variable_mgr_util.append_gradients_with_loss_scale", "variable_mgr_util_test.VariableMgrUtilTest.test_session", "sess.run", "sess.run", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "tensorflow.assign", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.global_variables_initializer", "sess.run", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.append_gradients_with_loss_scale", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "def", "testAppendGradientsWithLossScaleWithAutoScaleDisabled", "(", "self", ")", ":", "\n", "    ", "v", "=", "tf", ".", "Variable", "(", "0", ")", "\n", "training_ops", "=", "[", "]", "\n", "get_apply_gradients_ops_func", "=", "lambda", ":", "[", "tf", ".", "assign", "(", "v", ",", "v", "+", "1", ")", "]", "\n", "loss_scale_params", "=", "variable_mgr_util", ".", "AutoLossScaleParams", "(", "\n", "enable_auto_loss_scale", "=", "False", ",", "# no auto loss scale.", "\n", "loss_scale", "=", "tf", ".", "Variable", "(", "4", ")", ",", "\n", "loss_scale_normal_steps", "=", "tf", ".", "Variable", "(", "10", ")", ",", "\n", "inc_loss_scale_every_n", "=", "10", ",", "\n", "is_chief", "=", "True", ")", "\n", "variable_mgr_util", ".", "append_gradients_with_loss_scale", "(", "\n", "training_ops", ",", "\n", "get_apply_gradients_ops_func", ",", "\n", "loss_scale_params", ",", "\n", "grad_has_inf_nan", "=", "True", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_ops", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "v", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale", ")", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale_normal_steps", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util_test.VariableMgrUtilTest.testAppendGradientsWithLossScaleForNonChiefWorker": [[80, 102], ["tensorflow.Variable", "variable_mgr_util.AutoLossScaleParams", "variable_mgr_util.append_gradients_with_loss_scale", "variable_mgr_util_test.VariableMgrUtilTest.test_session", "sess.run", "sess.run", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "tensorflow.assign", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.global_variables_initializer", "sess.run", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.append_gradients_with_loss_scale", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "def", "testAppendGradientsWithLossScaleForNonChiefWorker", "(", "self", ")", ":", "\n", "    ", "v", "=", "tf", ".", "Variable", "(", "0", ")", "\n", "training_ops", "=", "[", "]", "\n", "get_apply_gradients_ops_func", "=", "lambda", ":", "[", "tf", ".", "assign", "(", "v", ",", "v", "+", "1", ")", "]", "\n", "loss_scale_params", "=", "variable_mgr_util", ".", "AutoLossScaleParams", "(", "\n", "enable_auto_loss_scale", "=", "True", ",", "\n", "loss_scale", "=", "tf", ".", "Variable", "(", "4", ")", ",", "\n", "loss_scale_normal_steps", "=", "tf", ".", "Variable", "(", "10", ")", ",", "\n", "inc_loss_scale_every_n", "=", "10", ",", "\n", "is_chief", "=", "False", ")", "# Non-chief", "\n", "variable_mgr_util", ".", "append_gradients_with_loss_scale", "(", "\n", "training_ops", ",", "\n", "get_apply_gradients_ops_func", ",", "\n", "loss_scale_params", ",", "\n", "grad_has_inf_nan", "=", "False", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_ops", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "v", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale", ")", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale_normal_steps", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util_test.VariableMgrUtilTest.testAppendGradientsWithLossScaleWithoutNan": [[103, 125], ["tensorflow.Variable", "variable_mgr_util.AutoLossScaleParams", "variable_mgr_util.append_gradients_with_loss_scale", "variable_mgr_util_test.VariableMgrUtilTest.test_session", "sess.run", "sess.run", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "tensorflow.assign", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.global_variables_initializer", "sess.run", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.append_gradients_with_loss_scale", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "def", "testAppendGradientsWithLossScaleWithoutNan", "(", "self", ")", ":", "\n", "    ", "v", "=", "tf", ".", "Variable", "(", "0", ")", "\n", "training_ops", "=", "[", "]", "\n", "get_apply_gradients_ops_func", "=", "lambda", ":", "[", "tf", ".", "assign", "(", "v", ",", "v", "+", "1", ")", "]", "\n", "loss_scale_params", "=", "variable_mgr_util", ".", "AutoLossScaleParams", "(", "\n", "enable_auto_loss_scale", "=", "True", ",", "\n", "loss_scale", "=", "tf", ".", "Variable", "(", "4", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "loss_scale_normal_steps", "=", "tf", ".", "Variable", "(", "10", ")", ",", "\n", "inc_loss_scale_every_n", "=", "10", ",", "\n", "is_chief", "=", "True", ")", "\n", "variable_mgr_util", ".", "append_gradients_with_loss_scale", "(", "\n", "training_ops", ",", "\n", "get_apply_gradients_ops_func", ",", "\n", "loss_scale_params", ",", "\n", "grad_has_inf_nan", "=", "tf", ".", "constant", "(", "False", ")", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_ops", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "v", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale", ")", ",", "8", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale_normal_steps", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util_test.VariableMgrUtilTest.testAppendGradientsWithLossScaleWithtNan": [[126, 149], ["tensorflow.Variable", "variable_mgr_util.AutoLossScaleParams", "variable_mgr_util.append_gradients_with_loss_scale", "variable_mgr_util_test.VariableMgrUtilTest.test_session", "sess.run", "sess.run", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "variable_mgr_util_test.VariableMgrUtilTest.assertEqual", "tensorflow.assign", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.global_variables_initializer", "sess.run", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.append_gradients_with_loss_scale", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "def", "testAppendGradientsWithLossScaleWithtNan", "(", "self", ")", ":", "\n", "    ", "v", "=", "tf", ".", "Variable", "(", "0", ")", "\n", "training_ops", "=", "[", "]", "\n", "get_apply_gradients_ops_func", "=", "lambda", ":", "[", "tf", ".", "assign", "(", "v", ",", "v", "+", "1", ")", "]", "\n", "loss_scale_params", "=", "variable_mgr_util", ".", "AutoLossScaleParams", "(", "\n", "enable_auto_loss_scale", "=", "True", ",", "\n", "loss_scale", "=", "tf", ".", "Variable", "(", "4", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "loss_scale_normal_steps", "=", "tf", ".", "Variable", "(", "10", ")", ",", "\n", "inc_loss_scale_every_n", "=", "10", ",", "\n", "is_chief", "=", "True", ")", "\n", "variable_mgr_util", ".", "append_gradients_with_loss_scale", "(", "\n", "training_ops", ",", "\n", "get_apply_gradients_ops_func", ",", "\n", "loss_scale_params", ",", "\n", "grad_has_inf_nan", "=", "tf", ".", "constant", "(", "True", ")", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "training_ops", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "v", ")", ",", "0", ")", "# Skip updating for v.", "\n", "# halve loss_scale and reset local_scale_normal_steps.", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "sess", ".", "run", "(", "loss_scale_params", ".", "loss_scale_normal_steps", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.get_var_shapes": [[61, 70], ["tensorflow.Graph().as_default", "model.get_image_size", "tensorflow.placeholder", "model.build_network", "tensorflow.Graph", "int", "tensorflow.trainable_variables"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.build_network"], ["", "def", "get_var_shapes", "(", "model", ")", ":", "\n", "  ", "\"\"\"Returns the list of variable shapes for a tf_cnn_benchmarks Model.\"\"\"", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "    ", "image_size", "=", "model", ".", "get_image_size", "(", ")", "\n", "# The batch size of 2 is arbitrary, as the variable shapes do not depend on", "\n", "# the batch size.", "\n", "images", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "2", ",", "image_size", ",", "image_size", ",", "3", ")", ")", "\n", "model", ".", "build_network", "(", "images", ")", "\n", "return", "[", "[", "int", "(", "d", ")", "for", "d", "in", "v", ".", "shape", ".", "dims", "]", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.all_reduce": [[72, 90], ["variable_mgr.preprocess_device_grads"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.preprocess_device_grads"], ["", "", "def", "all_reduce", "(", "all_device_tensors", ",", "variable_mgr", ")", ":", "\n", "  ", "\"\"\"Performs a single batch all-reduce.\n\n  Args:\n    all_device_tensors: List of lists of tensors. all_device_tensors[t][i] is\n      a tensor, where t is the tower the tensor is on and i is the index of\n      the tensor.\n    variable_mgr: The VariableMgr to perform the all-reduce.\n  Returns:\n    List of list of tensors in the same form as `all_device_tensors`, except the\n    tensors are aggregated across towers.\n  \"\"\"", "\n", "tower_grads", "=", "[", "[", "(", "g", ",", "None", ")", "for", "g", "in", "device_tensors", "]", "for", "\n", "device_tensors", "in", "all_device_tensors", "]", "\n", "_", ",", "aggregated_tower_grads", "=", "variable_mgr", ".", "preprocess_device_grads", "(", "tower_grads", ")", "\n", "return", "[", "\n", "[", "g", "for", "g", ",", "_", "in", "agg_device_tensors", "]", "\n", "for", "agg_device_tensors", "in", "aggregated_tower_grads", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.build_all_reduce_iterations": [[92, 154], ["range", "zip", "tensorflow.group", "tensorflow.name_scope", "zip", "tensorflow.device", "tensorflow.name_scope", "all_reduce_benchmark.all_reduce", "new_all_device_tensors.append", "tensorflow.Variable", "ops_to_run.append", "tensorflow.device", "new_all_device_tensors.append", "tensorflow.placeholder", "tf.Variable.assign", "tensorflow.python.ops.control_flow_ops.with_dependencies", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.all_reduce"], ["", "def", "build_all_reduce_iterations", "(", "all_device_tensors", ",", "tower_devices", ",", "variable_mgr", ",", "\n", "num_iters", ")", ":", "\n", "  ", "\"\"\"Builds the all-reduce ops for multiple iterations to aggregate tensors.\n\n  The tensors in `all_device_tensors` are aggregated `num_iters` times. Each\n  iteration aggregates the results from the previous iteration. The iterations\n  are run sequentially, so the aggregations for an iteration do not start\n  running until the previous iteration has completed. Each iteration after the\n  first is aggregating already-aggregated values, but it does not matter because\n  we are only aggregating for benchmarking purposes.\n\n  Args:\n    all_device_tensors: List of lists of tensors. all_device_tensors[t][i] is\n      a tensor, where t is the tower the tensor is on and i is the index of\n      the tensor.\n    tower_devices: A list of device strings. tower_devices[t] is the device\n      of the tensors in all_device_tensors[t].\n    variable_mgr: The VariableMgr to perform the all-reduce.\n    num_iters: Number of iterations to aggregate tensors for.\n  Returns:\n    An op that when run, causes the all-reduce ops to run.\n  \"\"\"", "\n", "for", "i", "in", "range", "(", "num_iters", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'iteration_%d'", "%", "i", ")", ":", "\n", "# Step 1: Do the aggregation.", "\n", "      ", "with", "tf", ".", "name_scope", "(", "'tensor_aggregation'", ")", ":", "\n", "        ", "all_device_tensors", "=", "all_reduce", "(", "all_device_tensors", ",", "variable_mgr", ")", "\n", "\n", "# Step 2. Create identity ops, to bring the aggregated results back to", "\n", "# each device.", "\n", "", "new_all_device_tensors", "=", "[", "]", "\n", "for", "device", ",", "device_tensors", "in", "zip", "(", "tower_devices", ",", "all_device_tensors", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "          ", "new_all_device_tensors", ".", "append", "(", "[", "\n", "tf", ".", "identity", "(", "t", ",", "name", "=", "'identity_after_allreduce'", ")", "\n", "for", "t", "in", "device_tensors", "\n", "]", ")", "\n", "", "", "all_device_tensors", "=", "new_all_device_tensors", "\n", "\n", "# Step 3. Add control dependencies to delay the next iteration until this", "\n", "# iteration is complete. To avoid extra overhead, we do not have any", "\n", "# cross-device control dependencies, which means it's possible for two", "\n", "# iterations to slightly overlap.", "\n", "new_all_device_tensors", "=", "[", "]", "\n", "for", "device_tensors", "in", "all_device_tensors", ":", "\n", "        ", "new_all_device_tensors", ".", "append", "(", "[", "\n", "control_flow_ops", ".", "with_dependencies", "(", "\n", "device_tensors", ",", "t", ",", "name", "=", "'identity_after_dependencies'", ")", "\n", "for", "t", "in", "device_tensors", "\n", "]", ")", "\n", "", "all_device_tensors", "=", "new_all_device_tensors", "\n", "\n", "# To prevent the dependency optimizer from removing every op we created,", "\n", "# we store the results in variables.", "\n", "", "", "ops_to_run", "=", "[", "]", "\n", "for", "device", ",", "device_tensors", "in", "zip", "(", "tower_devices", ",", "all_device_tensors", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "      ", "for", "t", "in", "device_tensors", ":", "\n", "# The placeholder initial value is never run.", "\n", "        ", "var", "=", "tf", ".", "Variable", "(", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "t", ".", "shape", ")", ",", "collections", "=", "[", "]", ")", "\n", "ops_to_run", ".", "append", "(", "var", ".", "assign", "(", "t", ")", ")", "\n", "", "", "", "return", "tf", ".", "group", "(", "*", "ops_to_run", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.build_graph": [[156, 184], ["enumerate", "cnn_util.log_fn", "all_reduce_benchmark.build_all_reduce_iterations", "cnn_util.log_fn", "all_device_tensors.append", "tensorflow.device", "enumerate", "tensorflow.Variable", "device_tensors.append", "tensorflow.random_normal"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.build_all_reduce_iterations", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn"], ["", "def", "build_graph", "(", "tower_devices", ",", "tensor_shapes", ",", "variable_mgr", ",", "num_iters", ")", ":", "\n", "  ", "\"\"\"Builds the graph for the benchmark.\n\n  Args:\n    tower_devices: A list of device strings of the devices to run the all-reduce\n      benchmark on.\n    tensor_shapes: A list of shapes of the tensors that will be aggregated for\n      the all-reduce.\n    variable_mgr: The VariableMgr to perform the all-reduce.\n    num_iters: Number of iterations to aggregate tensors for.\n  Returns:\n    An op that runs the benchmark.\n  \"\"\"", "\n", "all_device_tensors", "=", "[", "]", "\n", "for", "i", ",", "tower_device", "in", "enumerate", "(", "tower_devices", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "tower_device", ")", ":", "\n", "      ", "device_tensors", "=", "[", "]", "\n", "for", "j", ",", "shape", "in", "enumerate", "(", "tensor_shapes", ")", ":", "\n", "        ", "tensor", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'tensor_%d_on_device_%d'", "%", "(", "j", ",", "i", ")", ")", "\n", "device_tensors", ".", "append", "(", "tensor", ")", "\n", "", "", "all_device_tensors", ".", "append", "(", "device_tensors", ")", "\n", "\n", "", "log_fn", "(", "'Building all-reduce ops'", ")", "\n", "benchmark_op", "=", "build_all_reduce_iterations", "(", "all_device_tensors", ",", "tower_devices", ",", "\n", "variable_mgr", ",", "num_iters", ")", "\n", "log_fn", "(", "'Done building all-reduce ops'", ")", "\n", "return", "benchmark_op", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.run_graph": [[186, 231], ["benchmark_cnn.create_config_proto", "tensorflow.Session", "cnn_util.log_fn", "range", "cnn_util.log_fn", "sess.run", "benchmark_cnn.benchmark_one_step", "cnn_util.log_fn", "time.time", "cnn_util.log_fn", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.create_config_proto", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.benchmark_one_step", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn"], ["", "def", "run_graph", "(", "benchmark_op", ",", "bench_cnn", ",", "init_ops", ",", "dummy_loss_op", ")", ":", "\n", "  ", "\"\"\"Runs the graph for the benchmark.\n\n  Args:\n    benchmark_op: An op that runs the benchmark.\n    bench_cnn: The BenchmarkCNN where params and other attributes are obtained.\n    init_ops: A list of ops that are run before `benchmark_op` for\n      initialization.\n    dummy_loss_op: Any op. We must pass a loss op to\n      `benchmark_cnn.benchmark_one_step`, but the result of the op is never\n      actually used.\n  \"\"\"", "\n", "config", "=", "benchmark_cnn", ".", "create_config_proto", "(", "bench_cnn", ".", "params", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "    ", "for", "op", "in", "init_ops", ":", "\n", "      ", "sess", ".", "run", "(", "op", ")", "\n", "", "step_train_times", "=", "[", "]", "\n", "fetches", "=", "{", "'average_loss'", ":", "dummy_loss_op", ",", "'benchmark_op'", ":", "benchmark_op", "}", "\n", "log_fn", "(", "'Running warmup'", ")", "\n", "for", "i", "in", "range", "(", "-", "bench_cnn", ".", "num_warmup_batches", ",", "bench_cnn", ".", "num_batches", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "log_fn", "(", "'Running all-reduce ops'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "", "if", "i", ">", "0", "and", "i", "%", "bench_cnn", ".", "params", ".", "display_every", "==", "0", ":", "\n", "        ", "log_fn", "(", "'Iteration: %d. Average time per step so far: %s'", "%", "\n", "(", "i", ",", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "i", ")", ")", "\n", "# Call benchmark_one_step instead of directly calling sess.run(...), to", "\n", "# potentially get a trace file, partitioned graphs, etc.", "\n", "", "benchmark_cnn", ".", "benchmark_one_step", "(", "\n", "sess", "=", "sess", ",", "\n", "fetches", "=", "fetches", ",", "\n", "step", "=", "i", ",", "\n", "# The batch size is only used for the images/sec calculation, which is", "\n", "# not actually calculated because we pass show_images_per_sec=False.", "\n", "batch_size", "=", "None", ",", "\n", "step_train_times", "=", "step_train_times", ",", "\n", "trace_filename", "=", "bench_cnn", ".", "trace_filename", ",", "\n", "partitioned_graph_file_prefix", "=", "(", "\n", "bench_cnn", ".", "params", ".", "partitioned_graph_file_prefix", ")", ",", "\n", "profiler", "=", "None", ",", "\n", "image_producer", "=", "None", ",", "\n", "params", "=", "bench_cnn", ".", "params", ",", "\n", "show_images_per_sec", "=", "False", ")", "\n", "", "log_fn", "(", "'Average time per step: %s'", "%", "\n", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "bench_cnn", ".", "num_batches", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.run_benchmark": [[233, 268], ["all_reduce_benchmark.build_graph", "tensorflow.no_op", "all_reduce_benchmark.run_graph", "ValueError", "ValueError", "all_reduce_benchmark.get_var_shapes", "tensorflow.global_variables_initializer", "bench_cnn.variable_mgr.get_post_init_ops", "os.path.split", "filename.endswith", "cnn_util.log_fn", "tensorflow.train.write_graph", "tensorflow.get_default_graph().as_graph_def", "tensorflow.get_default_graph", "absl.flags"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.build_graph", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.run_graph", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.get_var_shapes", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_post_init_ops", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn"], ["", "", "def", "run_benchmark", "(", "bench_cnn", ",", "num_iters", ")", ":", "\n", "  ", "\"\"\"Runs the all-reduce benchmark.\n\n  Args:\n    bench_cnn: The BenchmarkCNN where params, the variable manager, and other\n      attributes are obtained.\n    num_iters: Number of iterations to do all-reduce for for.\n\n  Raises:\n    ValueError: Invalid params of bench_cnn.\n  \"\"\"", "\n", "if", "bench_cnn", ".", "params", ".", "variable_update", "!=", "'replicated'", ":", "\n", "    ", "raise", "ValueError", "(", "'--variable_update=replicated must be specified to use'", "\n", "'the all-reduce benchmark'", ")", "\n", "", "if", "bench_cnn", ".", "params", ".", "variable_consistency", "==", "'relaxed'", ":", "\n", "    ", "raise", "ValueError", "(", "'--variable_consistency=relaxed is not supported'", ")", "\n", "\n", "", "benchmark_op", "=", "build_graph", "(", "bench_cnn", ".", "raw_devices", ",", "\n", "get_var_shapes", "(", "bench_cnn", ".", "model", ")", ",", "\n", "bench_cnn", ".", "variable_mgr", ",", "num_iters", ")", "\n", "init_ops", "=", "[", "\n", "tf", ".", "global_variables_initializer", "(", ")", ",", "\n", "bench_cnn", ".", "variable_mgr", ".", "get_post_init_ops", "(", ")", "\n", "]", "\n", "loss_op", "=", "tf", ".", "no_op", "(", ")", "\n", "\n", "if", "bench_cnn", ".", "graph_file", ":", "\n", "    ", "path", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "bench_cnn", ".", "graph_file", ")", "\n", "as_text", "=", "filename", ".", "endswith", "(", "'txt'", ")", "\n", "log_fn", "(", "'Writing GraphDef as %s to %s'", "%", "(", "\n", "'text'", "if", "as_text", "else", "'binary'", ",", "bench_cnn", ".", "graph_file", ")", ")", "\n", "tf", ".", "train", ".", "write_graph", "(", "tf", ".", "get_default_graph", "(", ")", ".", "as_graph_def", "(", "add_shapes", "=", "True", ")", ",", "\n", "path", ",", "filename", ",", "as_text", ")", "\n", "\n", "", "run_graph", "(", "benchmark_op", ",", "bench_cnn", ",", "init_ops", ",", "loss_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.main": [[271, 289], ["benchmark_cnn.make_params_from_flags", "benchmark_cnn.setup", "benchmark_cnn.BenchmarkCNN", "cnn_util.tensorflow_version_tuple", "cnn_util.log_fn", "all_reduce_benchmark.run_benchmark", "len", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params_from_flags", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.setup", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.tensorflow_version_tuple", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.run_benchmark"], ["", "def", "main", "(", "positional_arguments", ")", ":", "\n", "# Command-line arguments like '--distortions False' are equivalent to", "\n", "# '--distortions=True False', where False is a positional argument. To prevent", "\n", "# this from silently running with distortions, we do not allow positional", "\n", "# arguments.", "\n", "  ", "assert", "len", "(", "positional_arguments", ")", ">=", "1", "\n", "if", "len", "(", "positional_arguments", ")", ">", "1", ":", "\n", "    ", "raise", "ValueError", "(", "'Received unknown positional arguments: %s'", "\n", "%", "positional_arguments", "[", "1", ":", "]", ")", "\n", "\n", "", "params", "=", "benchmark_cnn", ".", "make_params_from_flags", "(", ")", "\n", "params", "=", "benchmark_cnn", ".", "setup", "(", "params", ")", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "\n", "tfversion", "=", "cnn_util", ".", "tensorflow_version_tuple", "(", ")", "\n", "log_fn", "(", "'TensorFlow:  %i.%i'", "%", "(", "tfversion", "[", "0", "]", ",", "tfversion", "[", "1", "]", ")", ")", "\n", "\n", "run_benchmark", "(", "bench", ",", "absl_flags", ".", "FLAGS", ".", "iters_per_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.__init__": [[80, 90], ["threading.Condition", "threading.Lock"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "parties", ")", ":", "\n", "    ", "\"\"\"Create a barrier, initialised to 'parties' threads.\"\"\"", "\n", "self", ".", "cond", "=", "threading", ".", "Condition", "(", "threading", ".", "Lock", "(", ")", ")", "\n", "self", ".", "parties", "=", "parties", "\n", "# Indicates the number of waiting parties.", "\n", "self", ".", "waiting", "=", "0", "\n", "# generation is needed to deal with spurious wakeups. If self.cond.wait()", "\n", "# wakes up for other reasons, generation will force it go back to wait().", "\n", "self", ".", "generation", "=", "0", "\n", "self", ".", "broken", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.wait": [[91, 106], ["cnn_util.Barrier.cond.notify_all", "cnn_util.Barrier.cond.wait"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.wait"], ["", "def", "wait", "(", "self", ")", ":", "\n", "    ", "\"\"\"Wait for the barrier.\"\"\"", "\n", "with", "self", ".", "cond", ":", "\n", "# Check if the barrier has been disabled or not.", "\n", "      ", "if", "self", ".", "broken", ":", "\n", "        ", "return", "\n", "", "gen", "=", "self", ".", "generation", "\n", "self", ".", "waiting", "+=", "1", "\n", "if", "self", ".", "waiting", "==", "self", ".", "parties", ":", "\n", "        ", "self", ".", "waiting", "=", "0", "\n", "self", ".", "generation", "+=", "1", "\n", "self", ".", "cond", ".", "notify_all", "(", ")", "\n", "# loop because of spurious wakeups", "\n", "", "while", "gen", "==", "self", ".", "generation", ":", "\n", "        ", "self", ".", "cond", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.abort": [[109, 116], ["cnn_util.Barrier.cond.notify_all"], "methods", ["None"], ["", "", "", "def", "abort", "(", "self", ")", ":", "\n", "    ", "\"\"\"Clear existing barrier and disable this barrier.\"\"\"", "\n", "with", "self", ".", "cond", ":", "\n", "      ", "if", "self", ".", "waiting", ">", "0", ":", "\n", "        ", "self", ".", "generation", "+=", "1", "\n", "self", ".", "cond", ".", "notify_all", "(", ")", "\n", "", "self", ".", "broken", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.__init__": [[154, 165], ["threading.Event", "threading.Barrier", "cnn_util.Barrier"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sess", ",", "put_ops", ",", "batch_group_size", ",", "use_python32_barrier", ")", ":", "\n", "    ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "num_gets", "=", "0", "\n", "self", ".", "put_ops", "=", "put_ops", "\n", "self", ".", "batch_group_size", "=", "batch_group_size", "\n", "self", ".", "done_event", "=", "threading", ".", "Event", "(", ")", "\n", "if", "(", "use_python32_barrier", "and", "\n", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "sys", ".", "version_info", "[", "1", "]", ">=", "2", ")", ":", "\n", "      ", "self", ".", "put_barrier", "=", "threading", ".", "Barrier", "(", "2", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "put_barrier", "=", "Barrier", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer._should_put": [[166, 168], ["None"], "methods", ["None"], ["", "", "def", "_should_put", "(", "self", ")", ":", "\n", "    ", "return", "(", "self", ".", "num_gets", "+", "1", ")", "%", "self", ".", "batch_group_size", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.done": [[169, 174], ["cnn_util.ImageProducer.done_event.set", "cnn_util.ImageProducer.put_barrier.abort", "cnn_util.ImageProducer.thread.join"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.abort"], ["", "def", "done", "(", "self", ")", ":", "\n", "    ", "\"\"\"Stop the image producer.\"\"\"", "\n", "self", ".", "done_event", ".", "set", "(", ")", "\n", "self", ".", "put_barrier", ".", "abort", "(", ")", "\n", "self", ".", "thread", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start": [[175, 182], ["cnn_util.ImageProducer.sess.run", "threading.Thread", "cnn_util.ImageProducer.thread.start"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "    ", "\"\"\"Start the image producer.\"\"\"", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "put_ops", "]", ")", "\n", "self", ".", "thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "_loop_producer", ")", "\n", "# Set daemon to true to allow Ctrl + C to terminate all threads.", "\n", "self", ".", "thread", ".", "daemon", "=", "True", "\n", "self", ".", "thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.notify_image_consumption": [[183, 194], ["cnn_util.ImageProducer._should_put", "cnn_util.ImageProducer.put_barrier.wait"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer._should_put", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.wait"], ["", "def", "notify_image_consumption", "(", "self", ")", ":", "\n", "    ", "\"\"\"Increment the counter of image_producer by 1.\n\n    This should only be called by the main thread that consumes images and runs\n    the model computation. One batch of images should be consumed between\n    calling start() and the first call to this method. Then, one batch of images\n    should be consumed between any two successive calls to this method.\n    \"\"\"", "\n", "if", "self", ".", "_should_put", "(", ")", ":", "\n", "      ", "self", ".", "put_barrier", ".", "wait", "(", ")", "\n", "", "self", ".", "num_gets", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer._loop_producer": [[195, 199], ["cnn_util.ImageProducer.done_event.isSet", "cnn_util.ImageProducer.sess.run", "cnn_util.ImageProducer.put_barrier.wait"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.wait"], ["", "def", "_loop_producer", "(", "self", ")", ":", "\n", "    ", "while", "not", "self", ".", "done_event", ".", "isSet", "(", ")", ":", "\n", "      ", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "put_ops", "]", ")", "\n", "self", ".", "put_barrier", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.__init__": [[204, 211], ["params.worker_hosts.split", "tensorflow.train.ClusterSpec", "params.ps_hosts.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "    ", "worker_hosts", "=", "params", ".", "worker_hosts", ".", "split", "(", "','", ")", "\n", "ps_hosts", "=", "params", ".", "ps_hosts", ".", "split", "(", "','", ")", "if", "params", ".", "ps_hosts", "else", "[", "]", "\n", "cluster", "=", "{", "'worker'", ":", "worker_hosts", "}", "\n", "if", "ps_hosts", ":", "\n", "      ", "cluster", "[", "'ps'", "]", "=", "ps_hosts", "\n", "", "self", ".", "_cluster_spec", "=", "tf", ".", "train", ".", "ClusterSpec", "(", "cluster", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.get_target": [[212, 215], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_target", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a target to be passed to tf.Session().\"\"\"", "\n", "raise", "NotImplementedError", "(", "'get_target must be implemented by subclass'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.join_server": [[216, 218], ["NotImplementedError"], "methods", ["None"], ["", "def", "join_server", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'join must be implemented by subclass'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.get_cluster_spec": [[219, 221], ["None"], "methods", ["None"], ["", "def", "get_cluster_spec", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cluster_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.num_workers": [[222, 224], ["len", "cnn_util.BaseClusterManager._cluster_spec.job_tasks"], "methods", ["None"], ["", "def", "num_workers", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_cluster_spec", ".", "job_tasks", "(", "'worker'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.num_ps": [[225, 230], ["len", "cnn_util.BaseClusterManager._cluster_spec.job_tasks"], "methods", ["None"], ["", "def", "num_ps", "(", "self", ")", ":", "\n", "    ", "if", "'ps'", "in", "self", ".", "_cluster_spec", ".", "jobs", ":", "\n", "      ", "return", "len", "(", "self", ".", "_cluster_spec", ".", "job_tasks", "(", "'ps'", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.GrpcClusterManager.__init__": [[235, 246], ["cnn_util.BaseClusterManager.__init__", "tensorflow.train.Server", "cnn_util.GrpcClusterManager._cluster_spec.job_tasks"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "config_proto", ")", ":", "\n", "    ", "super", "(", "GrpcClusterManager", ",", "self", ")", ".", "__init__", "(", "params", ")", "\n", "if", "params", ".", "job_name", "==", "'controller'", ":", "\n", "      ", "self", ".", "_target", "=", "'grpc://%s'", "%", "self", ".", "_cluster_spec", ".", "job_tasks", "(", "'worker'", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "_server", "=", "tf", ".", "train", ".", "Server", "(", "self", ".", "_cluster_spec", ",", "\n", "job_name", "=", "params", ".", "job_name", ",", "\n", "task_index", "=", "params", ".", "task_index", ",", "\n", "config", "=", "config_proto", ",", "\n", "protocol", "=", "params", ".", "server_protocol", ")", "\n", "self", ".", "_target", "=", "self", ".", "_server", ".", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.GrpcClusterManager.get_target": [[247, 249], ["None"], "methods", ["None"], ["", "", "def", "get_target", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_target", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.GrpcClusterManager.join_server": [[250, 252], ["cnn_util.GrpcClusterManager._server.join"], "methods", ["None"], ["", "def", "join_server", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_server", ".", "join", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.tensorflow_version_tuple": [[26, 30], ["v.split", "int", "int"], "function", ["None"], ["def", "tensorflow_version_tuple", "(", ")", ":", "\n", "  ", "v", "=", "tf", ".", "__version__", "\n", "major", ",", "minor", ",", "patch", "=", "v", ".", "split", "(", "'.'", ")", "\n", "return", "(", "int", "(", "major", ")", ",", "int", "(", "minor", ")", ",", "patch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.tensorflow_version": [[32, 35], ["cnn_util.tensorflow_version_tuple"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.tensorflow_version_tuple"], ["", "def", "tensorflow_version", "(", ")", ":", "\n", "  ", "vt", "=", "tensorflow_version_tuple", "(", ")", "\n", "return", "vt", "[", "0", "]", "*", "1000", "+", "vt", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn": [[37, 39], ["print"], "function", ["None"], ["", "def", "log_fn", "(", "log", ")", ":", "\n", "  ", "print", "(", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.roll_numpy_batches": [[41, 67], ["int", "numpy.roll"], "function", ["None"], ["", "def", "roll_numpy_batches", "(", "array", ",", "batch_size", ",", "shift_ratio", ")", ":", "\n", "  ", "\"\"\"Moves a proportion of batches from start to the end of the array.\n\n  This function moves a proportion of batches, specified by `shift_ratio`, from\n  the starts of the array to the end. The number of batches moved is rounded\n  down to the nearest integer. For example,\n\n  ```\n  roll_numpy_batches([1, 2, 3, 4, 5, 6], 2, 0.34) == [3, 4, 5, 6, 1, 2]\n  ```\n\n  Args:\n    array: A Numpy array whose first dimension is the batch dimension.\n    batch_size: The batch size.\n    shift_ratio: Proportion of batches to move from the start of the array to\n      the end of the array.\n  Returns:\n    A new Numpy array, with a proportion of the batches at the start of `array`\n    moved to the end.\n  \"\"\"", "\n", "num_items", "=", "array", ".", "shape", "[", "0", "]", "\n", "assert", "num_items", "%", "batch_size", "==", "0", "\n", "num_batches", "=", "num_items", "//", "batch_size", "\n", "starting_batch", "=", "int", "(", "num_batches", "*", "shift_ratio", ")", "\n", "starting_item", "=", "starting_batch", "*", "batch_size", "\n", "return", "np", ".", "roll", "(", "array", ",", "-", "starting_item", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.__init__": [[525, 537], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "global_step_op", ",", "start_at_global_step", ",", "\n", "end_at_global_step", ")", ":", "\n", "    ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "global_step_op", "=", "global_step_op", "\n", "self", ".", "start_at_global_step", "=", "start_at_global_step", "\n", "self", ".", "end_at_global_step", "=", "end_at_global_step", "\n", "\n", "self", ".", "start_time", "=", "0", "\n", "self", ".", "start_step", "=", "0", "\n", "self", ".", "finish_time", "=", "0", "\n", "self", ".", "finish_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.run": [[538, 555], ["time.sleep", "benchmark_cnn.GlobalStepWatcher.sess.run", "tensorflow.logging.info", "time.time", "tensorflow.logging.info", "time.time", "time.ctime", "time.ctime"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "    ", "while", "self", ".", "finish_time", "==", "0", ":", "\n", "      ", "time", ".", "sleep", "(", ".25", ")", "\n", "global_step_val", ",", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "global_step_op", "]", ")", "\n", "if", "self", ".", "start_time", "==", "0", "and", "global_step_val", ">=", "self", ".", "start_at_global_step", ":", "\n", "# Use tf.logging.info instead of log_fn, since print (which is log_fn)", "\n", "# is not thread safe and may interleave the outputs from two parallel", "\n", "# calls to print, which can break tests.", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "'Starting real work at step %s at time %s'", "%", "\n", "(", "global_step_val", ",", "time", ".", "ctime", "(", ")", ")", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "start_step", "=", "global_step_val", "\n", "", "if", "self", ".", "finish_time", "==", "0", "and", "global_step_val", ">=", "self", ".", "end_at_global_step", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "'Finishing real work at step %s at time %s'", "%", "\n", "(", "global_step_val", ",", "time", ".", "ctime", "(", ")", ")", ")", "\n", "self", ".", "finish_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "finish_step", "=", "global_step_val", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.done": [[556, 558], ["None"], "methods", ["None"], ["", "", "", "def", "done", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "finish_time", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.num_steps": [[559, 561], ["None"], "methods", ["None"], ["", "def", "num_steps", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "finish_step", "-", "self", ".", "start_step", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.elapsed_time": [[562, 564], ["None"], "methods", ["None"], ["", "def", "elapsed_time", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "finish_time", "-", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.__init__": [[1054, 1327], ["benchmark_cnn.BenchmarkCNN.dataset.use_synthetic_gpu_images", "benchmark_cnn.get_num_batches_and_epochs", "benchmark_cnn.BenchmarkCNN.variable_mgr.get_devices", "benchmark_cnn.BenchmarkCNN.get_image_preprocessor", "benchmark_cnn.BenchmarkCNN._config_benchmark_logger", "datasets.create_dataset", "models.model_config.get_model_config", "max", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "benchmark_cnn.BenchmarkCNN.model.set_batch_size", "benchmark_cnn.BenchmarkCNN.model.get_batch_size", "ValueError", "platforms.util.get_cluster_manager", "isinstance", "benchmark_cnn.BenchmarkCNN.cluster_manager.num_workers", "benchmark_cnn.BenchmarkCNN.cluster_manager.num_ps", "ValueError", "benchmark_cnn.BenchmarkCNN.dataset.num_examples_per_epoch", "ValueError", "benchmark_cnn.BenchmarkCNN.image_preprocessor.supports_datasets", "int", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "benchmark_cnn.create_config_proto", "tensorflow.train.replica_device_setter", "hvd.size", "six.moves.xrange", "variable_mgr.VariableMgrLocalReplicated", "benchmark_cnn.BenchmarkCNN.params.device.lower", "benchmark_cnn.BenchmarkCNN.params.gpu_indices.split", "range", "variable_mgr.VariableMgrDistributedFetchFromPS", "variable_mgr.VariableMgrDistributedFetchFromStagedPS", "variable_mgr.VariableMgrLocalFetchFromPS", "variable_mgr.VariableMgrLocalFetchFromStagedPS", "ValueError", "variable_mgr.VariableMgrDistributedAllReduce", "benchmark_cnn.BenchmarkCNN.cluster_manager.get_cluster_spec", "range", "variable_mgr.VariableMgrCollectiveAllReduce", "benchmark_cnn.BenchmarkCNN.cluster_manager.num_ps", "variable_mgr.VariableMgrDistributedReplicated", "ValueError", "variable_mgr.VariableMgrIndependent", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.use_synthetic_gpu_images", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_num_batches_and_epochs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_devices", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.get_image_preprocessor", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._config_benchmark_logger", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.create_dataset", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model_config.get_model_config", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.set_batch_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_batch_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_cluster_manager", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.num_workers", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.num_ps", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Cifar10Data.num_examples_per_epoch", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.RecordInputImagePreprocessor.supports_datasets", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.create_config_proto", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.get_cluster_spec", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.num_ps"], ["def", "__init__", "(", "self", ",", "params", ",", "dataset", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initialize BenchmarkCNN.\n\n    Args:\n      params: Params tuple, typically created by make_params or\n              make_params_from_flags.\n      dataset: If not None, the dataset to use. Otherwise, params is used to\n               obtain the dataset.\n      model: If not None, the model to use. Otherwise, params is used to obtain\n             the model.\n    Raises:\n      ValueError: Unsupported params settings.\n    \"\"\"", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "dataset", "=", "dataset", "or", "datasets", ".", "create_dataset", "(", "self", ".", "params", ".", "data_dir", ",", "\n", "self", ".", "params", ".", "data_name", ")", "\n", "self", ".", "model", "=", "model", "or", "model_config", ".", "get_model_config", "(", "self", ".", "params", ".", "model", ",", "\n", "self", ".", "dataset", ")", "\n", "self", ".", "trace_filename", "=", "self", ".", "params", ".", "trace_file", "\n", "self", ".", "data_format", "=", "self", ".", "params", ".", "data_format", "\n", "self", ".", "enable_layout_optimizer", "=", "self", ".", "params", ".", "enable_layout_optimizer", "\n", "self", ".", "rewriter_config", "=", "self", ".", "params", ".", "rewriter_config", "\n", "autotune_threshold", "=", "self", ".", "params", ".", "autotune_threshold", "if", "(", "\n", "self", ".", "params", ".", "autotune_threshold", ")", "else", "1", "\n", "min_autotune_warmup", "=", "5", "*", "autotune_threshold", "*", "autotune_threshold", "\n", "self", ".", "num_warmup_batches", "=", "self", ".", "params", ".", "num_warmup_batches", "if", "(", "\n", "self", ".", "params", ".", "num_warmup_batches", "is", "not", "None", ")", "else", "max", "(", "\n", "10", ",", "min_autotune_warmup", ")", "\n", "self", ".", "graph_file", "=", "self", ".", "params", ".", "graph_file", "\n", "self", ".", "resize_method", "=", "self", ".", "params", ".", "resize_method", "\n", "self", ".", "sync_queue_counter", "=", "0", "\n", "self", ".", "num_gpus", "=", "self", ".", "params", ".", "num_gpus", "\n", "if", "self", ".", "params", ".", "gpu_indices", ":", "\n", "      ", "self", ".", "gpu_indices", "=", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "params", ".", "gpu_indices", ".", "split", "(", "','", ")", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "gpu_indices", "=", "[", "x", "for", "x", "in", "range", "(", "self", ".", "num_gpus", ")", "]", "\n", "", "self", ".", "use_synthetic_gpu_images", "=", "self", ".", "dataset", ".", "use_synthetic_gpu_images", "(", ")", "\n", "\n", "if", "(", "self", ".", "params", ".", "device", "==", "'cpu'", "and", "self", ".", "params", ".", "data_format", "==", "'NCHW'", "and", "\n", "not", "self", ".", "params", ".", "mkl", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'device=cpu requires that data_format=NHWC'", ")", "\n", "\n", "", "if", "(", "(", "self", ".", "params", ".", "num_epochs_per_decay", "or", "\n", "self", ".", "params", ".", "learning_rate_decay_factor", ")", "and", "\n", "not", "(", "self", ".", "params", ".", "init_learning_rate", "and", "self", ".", "params", ".", "num_epochs_per_decay", "\n", "and", "self", ".", "params", ".", "learning_rate_decay_factor", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'If one of num_epochs_per_decay or '", "\n", "'learning_rate_decay_factor is set, both must be set'", "\n", "'and learning_rate must be set'", ")", "\n", "", "if", "(", "self", ".", "params", ".", "minimum_learning_rate", "and", "\n", "not", "(", "self", ".", "params", ".", "init_learning_rate", "and", "self", ".", "params", ".", "num_epochs_per_decay", "\n", "and", "self", ".", "params", ".", "learning_rate_decay_factor", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'minimum_learning_rate requires learning_rate,'", "\n", "'num_epochs_per_decay, and '", "\n", "'learning_rate_decay_factor to be set'", ")", "\n", "\n", "", "if", "(", "self", ".", "params", ".", "use_fp16", "and", "self", ".", "params", ".", "fp16_vars", "and", "\n", "'replicated'", "in", "self", ".", "params", ".", "variable_update", "and", "\n", "self", ".", "params", ".", "all_reduce_spec", "and", "'nccl'", "in", "self", ".", "params", ".", "all_reduce_spec", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'fp16 variables are not supported with NCCL'", ")", "\n", "", "if", "(", "self", ".", "params", ".", "use_fp16", "and", "self", ".", "params", ".", "fp16_vars", "and", "\n", "self", ".", "params", ".", "gradient_repacking", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'--fp16_vars cannot be used with --gradient_repacking'", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", "and", "self", ".", "params", ".", "num_gpus", ">", "1", ":", "\n", "      ", "raise", "ValueError", "(", "'Horovod benchmarks require num_gpus=1 on each worker'", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", "and", "self", ".", "params", ".", "job_name", ":", "\n", "      ", "raise", "ValueError", "(", "'job_name should not be specified for Horovod.'", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "use_fp16", "and", "self", ".", "params", ".", "fp16_enable_auto_loss_scale", ":", "\n", "      ", "if", "self", ".", "params", ".", "all_reduce_spec", "and", "'nccl'", "in", "self", ".", "params", ".", "all_reduce_spec", ":", "\n", "        ", "raise", "ValueError", "(", "'Automatic loss scaling is not supported with NCCL.'", ")", "\n", "", "if", "self", ".", "params", ".", "variable_update", "not", "in", "(", "'parameter_server'", ",", "'replicated'", ",", "\n", "'independent'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Automatic loss scaling is not supported with '", "\n", "'variable_update=%s.'", "%", "self", ".", "params", ".", "variable_update", ")", "\n", "", "if", "self", ".", "params", ".", "staged_vars", ":", "\n", "        ", "raise", "ValueError", "(", "'Automatic loss scaling is not supported with'", "\n", "'staged_vars.'", ")", "\n", "\n", "", "", "if", "(", "self", ".", "params", ".", "debugger", "is", "not", "None", "and", "self", ".", "params", ".", "debugger", "!=", "'cli'", "and", "\n", "':'", "not", "in", "self", ".", "params", ".", "debugger", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'--debugger must be \"cli\" or in the form '", "\n", "'host:port'", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "hierarchical_copy", "and", "self", ".", "params", ".", "num_gpus", "<=", "1", ":", "\n", "      ", "raise", "ValueError", "(", "'--hierarchical_copy requires --num_gpus to be greater '", "\n", "'than 1'", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "forward_only", "and", "self", ".", "params", ".", "freeze_when_forward_only", ":", "\n", "      ", "if", "self", ".", "params", ".", "train_dir", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'In forward_only mode, when --freeze_when_forward_only'", "\n", "' is True, --train_dir should not be specified'", ")", "\n", "", "if", "self", ".", "params", ".", "data_dir", "and", "not", "self", ".", "params", ".", "datasets_use_prefetch", ":", "\n", "        ", "raise", "ValueError", "(", "'In forward_only mode, when --freeze_when_forward_only'", "\n", "' is True and --data_dir is set, '", "\n", "'--datasets_use_prefetch should be set to True'", ")", "\n", "", "if", "self", ".", "params", ".", "job_name", ":", "\n", "        ", "raise", "ValueError", "(", "'In forward_only mode, when --freeze_when_forward_only'", "\n", "' is True, --job_name should not be specified and '", "\n", "'distributed running is not supported'", ")", "\n", "", "self", ".", "forward_only_and_freeze", "=", "True", "\n", "", "else", ":", "\n", "      ", "self", ".", "forward_only_and_freeze", "=", "False", "\n", "\n", "# Use the batch size from the command line if specified, otherwise use the", "\n", "# model's default batch size.  Scale the benchmark's batch size by the", "\n", "# number of GPUs.", "\n", "", "if", "self", ".", "params", ".", "batch_size", ">", "0", ":", "\n", "      ", "self", ".", "model", ".", "set_batch_size", "(", "self", ".", "params", ".", "batch_size", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "self", ".", "model", ".", "get_batch_size", "(", ")", "*", "self", ".", "num_gpus", "\n", "self", ".", "batch_group_size", "=", "self", ".", "params", ".", "batch_group_size", "\n", "self", ".", "enable_auto_loss_scale", "=", "(", "\n", "self", ".", "params", ".", "use_fp16", "and", "self", ".", "params", ".", "fp16_enable_auto_loss_scale", ")", "\n", "self", ".", "loss_scale", "=", "None", "\n", "self", ".", "loss_scale_normal_steps", "=", "None", "\n", "\n", "self", ".", "job_name", "=", "self", ".", "params", ".", "job_name", "# \"\" for local training", "\n", "\n", "# PS server is used for distributed jobs not using all-reduce.", "\n", "use_ps_server", "=", "self", ".", "job_name", "and", "(", "self", ".", "params", ".", "variable_update", "!=", "\n", "'distributed_all_reduce'", "and", "\n", "self", ".", "params", ".", "variable_update", "!=", "\n", "'collective_all_reduce'", ")", "\n", "# controller is used for distributed_all_reduce with > 1 worker.", "\n", "use_controller", "=", "(", "\n", "self", ".", "params", ".", "variable_update", "==", "'distributed_all_reduce'", "and", "\n", "self", ".", "job_name", ")", "\n", "if", "use_controller", "and", "not", "params", ".", "controller_host", ":", "\n", "      ", "raise", "ValueError", "(", "'When variable_update==distributed_all_reduce '", "\n", "'controller_host must also be specified.'", ")", "\n", "# collective_all_reduce doesn't need a controller or ps", "\n", "", "self", ".", "distributed_collective", "=", "(", "\n", "self", ".", "params", ".", "variable_update", "==", "'collective_all_reduce'", "and", "\n", "self", ".", "job_name", ")", "\n", "\n", "self", ".", "local_parameter_device_flag", "=", "self", ".", "params", ".", "local_parameter_device", "\n", "if", "self", ".", "job_name", ":", "\n", "      ", "self", ".", "task_index", "=", "self", ".", "params", ".", "task_index", "\n", "self", ".", "cluster_manager", "=", "platforms_util", ".", "get_cluster_manager", "(", "\n", "params", ",", "create_config_proto", "(", "params", ")", ")", "\n", "assert", "isinstance", "(", "self", ".", "cluster_manager", ",", "cnn_util", ".", "BaseClusterManager", ")", "\n", "\n", "worker_prefix", "=", "'/job:worker/replica:0/task:%s'", "%", "self", ".", "task_index", "\n", "if", "use_ps_server", ":", "\n", "        ", "self", ".", "param_server_device", "=", "tf", ".", "train", ".", "replica_device_setter", "(", "\n", "worker_device", "=", "worker_prefix", "+", "'/cpu:0'", ",", "\n", "cluster", "=", "self", ".", "cluster_manager", ".", "get_cluster_spec", "(", ")", ")", "\n", "# This device on which the queues for managing synchronization between", "\n", "# servers should be stored.", "\n", "self", ".", "sync_queue_devices", "=", "[", "\n", "'/job:ps/replica:0/task:%s/cpu:0'", "%", "i", "\n", "for", "i", "in", "range", "(", "self", ".", "cluster_manager", ".", "num_ps", "(", ")", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "self", ".", "sync_queue_devices", "=", "[", "'/job:worker/replica:0/task:0/cpu:0'", "]", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "task_index", "=", "0", "\n", "self", ".", "cluster_manager", "=", "None", "\n", "worker_prefix", "=", "''", "\n", "self", ".", "param_server_device", "=", "'/%s:0'", "%", "self", ".", "params", ".", "local_parameter_device", "\n", "self", ".", "sync_queue_devices", "=", "[", "self", ".", "param_server_device", "]", "\n", "\n", "", "if", "self", ".", "cluster_manager", ":", "\n", "      ", "self", ".", "num_workers", "=", "self", ".", "cluster_manager", ".", "num_workers", "(", ")", "\n", "", "elif", "self", ".", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "      ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "self", ".", "num_workers", "=", "hvd", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "num_workers", "=", "1", "\n", "", "self", ".", "num_ps", "=", "self", ".", "cluster_manager", ".", "num_ps", "(", ")", "if", "self", ".", "cluster_manager", "else", "0", "\n", "\n", "if", "self", ".", "num_workers", ">", "1", "and", "self", ".", "params", ".", "all_reduce_spec", "==", "'nccl'", ":", "\n", "      ", "raise", "ValueError", "(", "'--all_reduce_spec=nccl is invalid in a '", "\n", "'multi-worker job'", ")", "\n", "\n", "# Device to use for ops that need to always run on the local worker's CPU.", "\n", "", "self", ".", "cpu_device", "=", "'%s/cpu:0'", "%", "worker_prefix", "\n", "\n", "# Device to use for ops that need to always run on the local worker's", "\n", "# compute device, and never on a parameter server device.", "\n", "self", ".", "raw_devices", "=", "[", "\n", "'%s/%s:%i'", "%", "(", "worker_prefix", ",", "self", ".", "params", ".", "device", ",", "i", ")", "\n", "for", "i", "in", "xrange", "(", "self", ".", "num_gpus", ")", "\n", "]", "\n", "\n", "subset", "=", "'validation'", "if", "params", ".", "eval", "else", "'train'", "\n", "self", ".", "num_batches", ",", "self", ".", "num_epochs", "=", "get_num_batches_and_epochs", "(", "\n", "params", ",", "self", ".", "batch_size", "*", "self", ".", "num_workers", ",", "\n", "self", ".", "dataset", ".", "num_examples_per_epoch", "(", "subset", ")", ")", "\n", "\n", "if", "(", "self", ".", "params", ".", "staged_vars", "and", "\n", "self", ".", "params", ".", "variable_update", "!=", "'parameter_server'", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'staged_vars for now is only supported with '", "\n", "'variable_update=parameter_server'", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'parameter_server'", ":", "\n", "      ", "if", "self", ".", "job_name", ":", "\n", "        ", "if", "not", "self", ".", "params", ".", "staged_vars", ":", "\n", "          ", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrDistributedFetchFromPS", "(", "\n", "self", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "variable_mgr", "=", "(", "\n", "variable_mgr", ".", "VariableMgrDistributedFetchFromStagedPS", "(", "self", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "not", "self", ".", "params", ".", "staged_vars", ":", "\n", "          ", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrLocalFetchFromPS", "(", "self", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrLocalFetchFromStagedPS", "(", "\n", "self", ")", "\n", "", "", "", "elif", "self", ".", "params", ".", "variable_update", "==", "'replicated'", ":", "\n", "      ", "if", "self", ".", "job_name", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid variable_update in distributed mode: %s'", "%", "\n", "self", ".", "params", ".", "variable_update", ")", "\n", "", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrLocalReplicated", "(", "\n", "self", ",", "self", ".", "params", ".", "all_reduce_spec", ",", "\n", "self", ".", "params", ".", "agg_small_grads_max_bytes", ",", "\n", "self", ".", "params", ".", "agg_small_grads_max_group", ",", "\n", "self", ".", "params", ".", "allreduce_merge_scope", ")", "\n", "", "elif", "self", ".", "params", ".", "variable_update", "==", "'distributed_all_reduce'", ":", "\n", "      ", "assert", "self", ".", "params", ".", "cross_replica_sync", "\n", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrDistributedAllReduce", "(", "\n", "self", ",", "self", ".", "params", ".", "all_reduce_spec", ",", "\n", "(", "'worker'", "if", "self", ".", "num_workers", ">", "1", "else", "'localhost'", ")", ",", "\n", "self", ".", "num_workers", ",", "self", ".", "params", ".", "agg_small_grads_max_bytes", ",", "\n", "self", ".", "params", ".", "agg_small_grads_max_group", ",", "\n", "self", ".", "params", ".", "allreduce_merge_scope", ")", "\n", "", "elif", "self", ".", "params", ".", "variable_update", "==", "'collective_all_reduce'", ":", "\n", "      ", "assert", "self", ".", "params", ".", "cross_replica_sync", "\n", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrCollectiveAllReduce", "(", "\n", "self", ",", "self", ".", "params", ".", "all_reduce_spec", ",", "\n", "self", ".", "num_workers", ",", "self", ".", "num_gpus", ",", "self", ".", "task_index", ",", "\n", "self", ".", "params", ".", "allreduce_merge_scope", ")", "\n", "", "elif", "self", ".", "params", ".", "variable_update", "==", "'distributed_replicated'", ":", "\n", "      ", "assert", "self", ".", "params", ".", "cross_replica_sync", "\n", "if", "not", "self", ".", "job_name", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid variable_update in local mode: %s'", "%", "\n", "self", ".", "params", ".", "variable_update", ")", "\n", "", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrDistributedReplicated", "(", "self", ")", "\n", "", "elif", "self", ".", "params", ".", "variable_update", "in", "(", "'independent'", ",", "'horovod'", ")", ":", "\n", "      ", "if", "self", ".", "job_name", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid variable_update in distributed mode: %s'", "%", "\n", "self", ".", "params", ".", "variable_update", ")", "\n", "", "self", ".", "variable_mgr", "=", "variable_mgr", ".", "VariableMgrIndependent", "(", "self", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Invalid variable_update: %s'", "%", "self", ".", "params", ".", "variable_update", ")", "\n", "\n", "# Device to use for running on the local worker's compute device, but", "\n", "# with variables assigned to parameter server devices.", "\n", "", "self", ".", "devices", "=", "self", ".", "variable_mgr", ".", "get_devices", "(", ")", "\n", "if", "self", ".", "job_name", ":", "\n", "      ", "if", "use_ps_server", ":", "\n", "        ", "self", ".", "global_step_device", "=", "self", ".", "param_server_device", "\n", "", "elif", "self", ".", "params", ".", "variable_update", "==", "'collective_all_reduce'", ":", "\n", "        ", "self", ".", "global_step_device", "=", "self", ".", "cpu_device", "\n", "", "else", ":", "\n", "        ", "self", ".", "global_step_device", "=", "'/job:worker/replica:0/task:0/cpu:0'", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "global_step_device", "=", "self", ".", "cpu_device", "\n", "\n", "", "self", ".", "image_preprocessor", "=", "self", ".", "get_image_preprocessor", "(", ")", "\n", "self", ".", "datasets_use_prefetch", "=", "(", "\n", "self", ".", "params", ".", "datasets_use_prefetch", "and", "\n", "# TODO(rohanj): Figure out why --datasets_use_prefetch freezes on the", "\n", "# CPU.", "\n", "self", ".", "params", ".", "device", ".", "lower", "(", ")", "!=", "'cpu'", "and", "\n", "self", ".", "image_preprocessor", ".", "supports_datasets", "(", ")", ")", "\n", "self", ".", "init_global_step", "=", "0", "\n", "\n", "self", ".", "_config_benchmark_logger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._config_benchmark_logger": [[1328, 1343], ["models_logger.BenchmarkFileLogger", "tensorflow.logging.fatal"], "methods", ["None"], ["", "def", "_config_benchmark_logger", "(", "self", ")", ":", "\n", "    ", "\"\"\"Config the model garden benchmark logger.\"\"\"", "\n", "model_benchmark_logger", "=", "None", "\n", "if", "self", ".", "params", ".", "benchmark_log_dir", "is", "not", "None", ":", "\n", "      ", "try", ":", "\n", "        ", "from", "official", ".", "utils", ".", "logs", "import", "logger", "as", "models_logger", "# pylint: disable=g-import-not-at-top", "\n", "", "except", "ImportError", ":", "\n", "        ", "tf", ".", "logging", ".", "fatal", "(", "'Please include tensorflow/models to the PYTHONPATH '", "\n", "'in order to use BenchmarkLogger. Configured '", "\n", "'benchmark_log_dir: %s'", "\n", "%", "self", ".", "params", ".", "benchmark_log_dir", ")", "\n", "raise", "\n", "", "model_benchmark_logger", "=", "models_logger", ".", "BenchmarkFileLogger", "(", "\n", "self", ".", "params", ".", "benchmark_log_dir", ")", "\n", "", "self", ".", "benchmark_logger", "=", "model_benchmark_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.reset_devices_for_task": [[1344, 1354], ["benchmark_cnn.BenchmarkCNN.variable_mgr.get_devices", "six.moves.xrange"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_devices"], ["", "def", "reset_devices_for_task", "(", "self", ",", "task_num", ",", "is_local", "=", "False", ")", ":", "\n", "    ", "\"\"\"Used to imitate another task when building a distributed graph.\"\"\"", "\n", "worker_prefix", "=", "(", "'job:localhost'", "if", "is_local", "else", "\n", "'/job:worker/replica:0/task:%s'", "%", "task_num", ")", "\n", "self", ".", "cpu_device", "=", "'%s/cpu:0'", "%", "worker_prefix", "\n", "self", ".", "raw_devices", "=", "[", "\n", "'%s/%s:%i'", "%", "(", "worker_prefix", ",", "self", ".", "params", ".", "device", ",", "i", ")", "\n", "for", "i", "in", "xrange", "(", "self", ".", "num_gpus", ")", "\n", "]", "\n", "self", ".", "devices", "=", "self", ".", "variable_mgr", ".", "get_devices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.raw_devices_across_tasks": [[1355, 1365], ["six.moves.xrange", "six.moves.xrange"], "methods", ["None"], ["", "def", "raw_devices_across_tasks", "(", "self", ",", "is_local", "=", "False", ")", ":", "\n", "    ", "\"\"\"Returns list of raw device names across all tasks.\"\"\"", "\n", "if", "is_local", ":", "\n", "      ", "assert", "self", ".", "num_workers", "==", "1", "\n", "return", "self", ".", "raw_devices", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "'job:worker/replica:0/task%s/%s:%i'", "%", "(", "t", ",", "self", ".", "params", ".", "device", ",", "i", ")", "\n", "for", "t", "in", "xrange", "(", "self", ".", "num_workers", ")", "\n", "for", "i", "in", "xrange", "(", "self", ".", "num_gpus", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.print_info": [[1367, 1400], ["benchmark_cnn.BenchmarkCNN._get_params_info", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "benchmark_cnn.BenchmarkCNN.model.get_model", "benchmark_cnn.get_mode_from_params", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._get_params_info", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_mode_from_params"], ["", "", "def", "print_info", "(", "self", ")", ":", "\n", "    ", "\"\"\"Print basic information.\"\"\"", "\n", "benchmark_info", "=", "self", ".", "_get_params_info", "(", ")", "\n", "log_fn", "(", "'Model:       %s'", "%", "self", ".", "model", ".", "get_model", "(", ")", ")", "\n", "log_fn", "(", "'Dataset:     %s'", "%", "benchmark_info", "[", "'dataset_name'", "]", ")", "\n", "log_fn", "(", "'Mode:        %s'", "%", "get_mode_from_params", "(", "self", ".", "params", ")", ")", "\n", "log_fn", "(", "'SingleSess:  %s'", "%", "benchmark_info", "[", "'single_session'", "]", ")", "\n", "log_fn", "(", "'Batch size:  %s global'", "%", "(", "self", ".", "batch_size", "*", "self", ".", "num_workers", ")", ")", "\n", "log_fn", "(", "'             %s per device'", "%", "(", "self", ".", "batch_size", "/", "\n", "len", "(", "self", ".", "raw_devices", ")", ")", ")", "\n", "if", "self", ".", "batch_group_size", ">", "1", ":", "\n", "      ", "log_fn", "(", "'             %d batches per prepocessing group'", "%", "\n", "self", ".", "batch_group_size", ")", "\n", "", "log_fn", "(", "'Num batches: %d'", "%", "self", ".", "num_batches", ")", "\n", "log_fn", "(", "'Num epochs:  %.2f'", "%", "self", ".", "num_epochs", ")", "\n", "log_fn", "(", "'Devices:     %s'", "%", "benchmark_info", "[", "'device_list'", "]", ")", "\n", "log_fn", "(", "'Data format: %s'", "%", "self", ".", "data_format", ")", "\n", "log_fn", "(", "'Layout optimizer: %s'", "%", "self", ".", "enable_layout_optimizer", ")", "\n", "if", "self", ".", "rewriter_config", ":", "\n", "      ", "log_fn", "(", "'RewriterConfig: %s'", "%", "self", ".", "rewriter_config", ")", "\n", "", "log_fn", "(", "'Optimizer:   %s'", "%", "self", ".", "params", ".", "optimizer", ")", "\n", "log_fn", "(", "'Variables:   %s'", "%", "self", ".", "params", ".", "variable_update", ")", "\n", "if", "(", "self", ".", "params", ".", "variable_update", "==", "'replicated'", "or", "\n", "self", ".", "params", ".", "variable_update", "==", "'distributed_all_reduce'", "\n", "or", "self", ".", "params", ".", "variable_update", "==", "'collective_all_reduce'", ")", ":", "\n", "      ", "log_fn", "(", "'AllReduce:   %s'", "%", "self", ".", "params", ".", "all_reduce_spec", ")", "\n", "", "if", "self", ".", "job_name", ":", "\n", "      ", "log_fn", "(", "'Sync:        %s'", "%", "self", ".", "params", ".", "cross_replica_sync", ")", "\n", "", "if", "self", ".", "params", ".", "staged_vars", ":", "\n", "      ", "log_fn", "(", "'Staged vars: %s'", "%", "self", ".", "params", ".", "staged_vars", ")", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", "and", "self", ".", "params", ".", "horovod_device", ":", "\n", "      ", "log_fn", "(", "'Horovod on:  %s'", "%", "self", ".", "params", ".", "horovod_device", ")", "\n", "", "log_fn", "(", "'=========='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._get_params_info": [[1401, 1422], ["benchmark_cnn.BenchmarkCNN.dataset.use_synthetic_gpu_images", "benchmark_cnn.BenchmarkCNN.raw_devices_across_tasks", "range"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.use_synthetic_gpu_images", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.raw_devices_across_tasks"], ["", "def", "_get_params_info", "(", "self", ")", ":", "\n", "    ", "\"\"\"Get the common parameters info for the benchmark run.\n\n    Returns:\n      A dict of processed parameters.\n    \"\"\"", "\n", "dataset_name", "=", "self", ".", "dataset", ".", "name", "\n", "if", "self", ".", "dataset", ".", "use_synthetic_gpu_images", "(", ")", ":", "\n", "      ", "dataset_name", "+=", "' (synthetic)'", "\n", "", "single_session", "=", "self", ".", "params", ".", "variable_update", "==", "'distributed_all_reduce'", "\n", "if", "single_session", ":", "\n", "      ", "device_list", "=", "self", ".", "raw_devices_across_tasks", "(", ")", "\n", "", "elif", "self", ".", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "      ", "device_list", "=", "[", "'horovod/%s:%d'", "%", "(", "self", ".", "params", ".", "device", ",", "idx", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_workers", ")", "]", "\n", "", "else", ":", "\n", "      ", "device_list", "=", "self", ".", "raw_devices", "\n", "", "return", "{", "\n", "'dataset_name'", ":", "dataset_name", ",", "\n", "'single_session'", ":", "single_session", ",", "\n", "'device_list'", ":", "device_list", ",", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._log_benchmark_run": [[1423, 1454], ["benchmark_cnn.BenchmarkCNN._get_params_info", "benchmark_cnn.BenchmarkCNN.benchmark_logger.log_run_info", "benchmark_cnn.BenchmarkCNN.model.get_model", "benchmark_cnn.get_mode_from_params", "benchmark_cnn.BenchmarkCNN.model.get_model", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._get_params_info", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_mode_from_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model"], ["", "def", "_log_benchmark_run", "(", "self", ")", ":", "\n", "    ", "\"\"\"Log the benchmark info to the logger.\n\n    The info logged here should be similar to print_info(), but in a structured\n    JSON format.\n    \"\"\"", "\n", "if", "self", ".", "benchmark_logger", ":", "\n", "      ", "benchmark_info", "=", "self", ".", "_get_params_info", "(", ")", "\n", "\n", "run_param", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "get_model", "(", ")", ",", "\n", "'dataset'", ":", "benchmark_info", "[", "'dataset_name'", "]", ",", "\n", "'mode'", ":", "get_mode_from_params", "(", "self", ".", "params", ")", ",", "\n", "'single_sess'", ":", "benchmark_info", "[", "'single_session'", "]", ",", "\n", "'devices'", ":", "benchmark_info", "[", "'device_list'", "]", ",", "\n", "'batch_size'", ":", "self", ".", "batch_size", ",", "\n", "'batch_size_per_device'", ":", "self", ".", "batch_size", "/", "len", "(", "self", ".", "raw_devices", ")", ",", "\n", "'num_batches'", ":", "self", ".", "num_batches", ",", "\n", "'num_epochs'", ":", "self", ".", "num_epochs", ",", "\n", "'data_format'", ":", "self", ".", "data_format", ",", "\n", "'layout_optimizer'", ":", "self", ".", "enable_layout_optimizer", ",", "\n", "'rewrite_config'", ":", "self", ".", "rewriter_config", ",", "\n", "'optimizer'", ":", "self", ".", "params", ".", "optimizer", ",", "\n", "}", "\n", "# TODO(scottzhu): tf_cnn_benchmark might execute several times with", "\n", "# different param setting on the same box. This will cause the run file to", "\n", "# only contain the latest info. The benchmark_log_dir should be updated", "\n", "# for every new run.", "\n", "self", ".", "benchmark_logger", ".", "log_run_info", "(", "\n", "self", ".", "model", ".", "get_model", "(", ")", ",", "benchmark_info", "[", "'dataset_name'", "]", ",", "run_param", ",", "\n", "test_id", "=", "self", ".", "params", ".", "benchmark_test_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run": [[1455, 1485], ["benchmark_cnn.BenchmarkCNN._log_benchmark_run", "cnn_util.log_fn", "benchmark_cnn.BenchmarkCNN.cluster_manager.join_server", "benchmark_cnn.BenchmarkCNN._benchmark_train", "cnn_util.log_fn", "benchmark_cnn.BenchmarkCNN.cluster_manager.join_server", "tensorflow.Graph().as_default", "benchmark_cnn.BenchmarkCNN._run_eval", "ValueError", "tensorflow.Graph"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._log_benchmark_run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.GrpcClusterManager.join_server", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._benchmark_train", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.GrpcClusterManager.join_server", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._run_eval"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "    ", "\"\"\"Run the benchmark task assigned to this process.\n\n    Returns:\n      Dictionary of statistics for training or eval.\n    Raises:\n       ValueError: unrecognized job name.\n    \"\"\"", "\n", "if", "self", ".", "params", ".", "job_name", "==", "'ps'", ":", "\n", "      ", "log_fn", "(", "'Running parameter server %s'", "%", "self", ".", "task_index", ")", "\n", "self", ".", "cluster_manager", ".", "join_server", "(", ")", "\n", "return", "{", "}", "\n", "\n", "# For distributed_all_reduce with multiple workers, drive", "\n", "# from a separate controller process.", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'distributed_all_reduce'", ":", "\n", "      ", "if", "self", ".", "params", ".", "job_name", "==", "'worker'", ":", "\n", "        ", "log_fn", "(", "'Starting worker %s'", "%", "self", ".", "task_index", ")", "\n", "self", ".", "cluster_manager", ".", "join_server", "(", ")", "\n", "return", "\n", "", "elif", "self", ".", "params", ".", "job_name", "and", "self", ".", "params", ".", "job_name", "!=", "'controller'", ":", "\n", "        ", "raise", "ValueError", "(", "'unrecognized job name: %s'", "%", "self", ".", "params", ".", "job_name", ")", "\n", "\n", "", "", "self", ".", "_log_benchmark_run", "(", ")", "\n", "if", "self", ".", "params", ".", "eval", ":", "\n", "      ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "# TODO(laigd): freeze the graph in eval mode.", "\n", "        ", "return", "self", ".", "_run_eval", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "return", "self", ".", "_benchmark_train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._run_eval": [[1486, 1519], ["tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.local_variables_initializer", "tensorflow.tables_initializer", "tensorflow.group", "tensorflow.summary.merge_all", "benchmark_cnn.BenchmarkCNN._build_model_with_dataset_prefetching", "benchmark_cnn.BenchmarkCNN._build_model", "benchmark_cnn.BenchmarkCNN.variable_mgr.savable_variables", "tensorflow.get_default_graph", "variable_mgr_init_ops.extend", "tensorflow.control_dependencies", "variable_mgr_init_ops.extend", "benchmark_cnn.BenchmarkCNN._eval_once", "time.sleep", "benchmark_cnn.BenchmarkCNN.variable_mgr.get_post_init_ops"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model_with_dataset_prefetching", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.savable_variables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._eval_once", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_post_init_ops"], ["", "", "def", "_run_eval", "(", "self", ")", ":", "\n", "    ", "\"\"\"Evaluate a model every self.params.eval_interval_secs.\n\n    Returns:\n      Dictionary containing eval statistics. Currently returns an empty\n      dictionary.\n    \"\"\"", "\n", "if", "self", ".", "datasets_use_prefetch", ":", "\n", "      ", "(", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "=", "(", "\n", "self", ".", "_build_model_with_dataset_prefetching", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "(", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "=", "self", ".", "_build_model", "(", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "variable_mgr", ".", "savable_variables", "(", ")", ",", "max_to_keep", "=", "10000", ")", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "params", ".", "eval_dir", ",", "\n", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "target", "=", "''", "\n", "local_var_init_op", "=", "tf", ".", "local_variables_initializer", "(", ")", "\n", "table_init_ops", "=", "tf", ".", "tables_initializer", "(", ")", "\n", "variable_mgr_init_ops", "=", "[", "local_var_init_op", "]", "\n", "if", "table_init_ops", ":", "\n", "      ", "variable_mgr_init_ops", ".", "extend", "(", "[", "table_init_ops", "]", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "local_var_init_op", "]", ")", ":", "\n", "      ", "variable_mgr_init_ops", ".", "extend", "(", "self", ".", "variable_mgr", ".", "get_post_init_ops", "(", ")", ")", "\n", "", "local_var_init_op_group", "=", "tf", ".", "group", "(", "*", "variable_mgr_init_ops", ")", "\n", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "# TODO(huangyp): Check if checkpoints haven't updated for hours and abort.", "\n", "while", "True", ":", "\n", "      ", "self", ".", "_eval_once", "(", "saver", ",", "summary_writer", ",", "target", ",", "local_var_init_op_group", ",", "\n", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ",", "summary_op", ")", "\n", "if", "self", ".", "params", ".", "eval_interval_secs", "<=", "0", ":", "\n", "        ", "break", "\n", "", "time", ".", "sleep", "(", "self", ".", "params", ".", "eval_interval_secs", ")", "\n", "", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._eval_once": [[1520, 1591], ["tensorflow.Session", "sess.run", "benchmark_cnn.BenchmarkCNN.dataset.queue_runner_required", "time.time", "six.moves.xrange", "time.time", "tensorflow.Summary", "tensorflow.Summary.value.add", "tensorflow.Summary.value.add", "summary_writer.add_summary", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "ValueError", "benchmark_cnn.load_checkpoint", "tensorflow.train.start_queue_runners", "cnn_util.ImageProducer", "cnn_util.ImageProducer.start", "six.moves.xrange", "cnn_util.ImageProducer.done", "benchmark_cnn.BenchmarkCNN.benchmark_logger.log_evaluation_result", "benchmark_cnn.create_config_proto", "cnn_util.log_fn", "len", "sess.run", "cnn_util.ImageProducer.notify_image_consumption", "sess.run", "summary_writer.add_summary", "sess.run", "cnn_util.log_fn", "time.time", "cnn_util.ImageProducer.notify_image_consumption", "time.time"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.queue_runner_required", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.load_checkpoint", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.done", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.create_config_proto", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.notify_image_consumption", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.notify_image_consumption"], ["", "def", "_eval_once", "(", "self", ",", "saver", ",", "summary_writer", ",", "target", ",", "local_var_init_op_group", ",", "\n", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ",", "summary_op", ")", ":", "\n", "    ", "\"\"\"Evaluate the model from a checkpoint using validation dataset.\"\"\"", "\n", "with", "tf", ".", "Session", "(", "\n", "target", "=", "target", ",", "config", "=", "create_config_proto", "(", "self", ".", "params", ")", ")", "as", "sess", ":", "\n", "      ", "if", "self", ".", "params", ".", "train_dir", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Trained model directory not specified'", ")", "\n", "", "try", ":", "\n", "        ", "global_step", "=", "load_checkpoint", "(", "saver", ",", "sess", ",", "self", ".", "params", ".", "train_dir", ")", "\n", "", "except", "CheckpointNotFoundException", ":", "\n", "        ", "log_fn", "(", "'Checkpoint not found in %s'", "%", "self", ".", "params", ".", "train_dir", ")", "\n", "return", "\n", "", "sess", ".", "run", "(", "local_var_init_op_group", ")", "\n", "if", "self", ".", "dataset", ".", "queue_runner_required", "(", ")", ":", "\n", "        ", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ")", "\n", "", "image_producer", "=", "None", "\n", "if", "input_producer_op", "is", "not", "None", ":", "\n", "        ", "image_producer", "=", "cnn_util", ".", "ImageProducer", "(", "\n", "sess", ",", "input_producer_op", ",", "self", ".", "batch_group_size", ",", "\n", "self", ".", "params", ".", "use_python32_barrier", ")", "\n", "image_producer", ".", "start", "(", ")", "\n", "for", "i", "in", "xrange", "(", "len", "(", "enqueue_ops", ")", ")", ":", "\n", "          ", "sess", ".", "run", "(", "enqueue_ops", "[", ":", "(", "i", "+", "1", ")", "]", ")", "\n", "image_producer", ".", "notify_image_consumption", "(", ")", "\n", "", "", "loop_start_time", "=", "start_time", "=", "time", ".", "time", "(", ")", "\n", "top_1_accuracy_sum", "=", "0.0", "\n", "top_5_accuracy_sum", "=", "0.0", "\n", "total_eval_count", "=", "self", ".", "num_batches", "*", "self", ".", "batch_size", "\n", "for", "step", "in", "xrange", "(", "self", ".", "num_batches", ")", ":", "\n", "        ", "if", "(", "self", ".", "params", ".", "save_summaries_steps", ">", "0", "and", "\n", "(", "step", "+", "1", ")", "%", "self", ".", "params", ".", "save_summaries_steps", "==", "0", ")", ":", "\n", "          ", "results", ",", "summary_str", "=", "sess", ".", "run", "(", "[", "fetches", ",", "summary_op", "]", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary_str", ")", "\n", "", "else", ":", "\n", "          ", "results", "=", "sess", ".", "run", "(", "fetches", ")", "\n", "", "top_1_accuracy_sum", "+=", "results", "[", "'top_1_accuracy'", "]", "\n", "top_5_accuracy_sum", "+=", "results", "[", "'top_5_accuracy'", "]", "\n", "if", "(", "step", "+", "1", ")", "%", "self", ".", "params", ".", "display_every", "==", "0", ":", "\n", "          ", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "examples_per_sec", "=", "(", "\n", "self", ".", "batch_size", "*", "self", ".", "params", ".", "display_every", "/", "duration", ")", "\n", "log_fn", "(", "'%i\\t%.1f examples/sec'", "%", "(", "step", "+", "1", ",", "examples_per_sec", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "if", "image_producer", "is", "not", "None", ":", "\n", "          ", "image_producer", ".", "notify_image_consumption", "(", ")", "\n", "", "", "loop_end_time", "=", "time", ".", "time", "(", ")", "\n", "if", "image_producer", "is", "not", "None", ":", "\n", "        ", "image_producer", ".", "done", "(", ")", "\n", "", "accuracy_at_1", "=", "top_1_accuracy_sum", "/", "self", ".", "num_batches", "\n", "accuracy_at_5", "=", "top_5_accuracy_sum", "/", "self", ".", "num_batches", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "'eval/Accuracy@1'", ",", "simple_value", "=", "accuracy_at_1", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "'eval/Accuracy@5'", ",", "simple_value", "=", "accuracy_at_5", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "global_step", ")", "\n", "log_fn", "(", "'Accuracy @ 1 = %.4f Accuracy @ 5 = %.4f [%d examples]'", "%", "\n", "(", "accuracy_at_1", ",", "accuracy_at_5", ",", "total_eval_count", ")", ")", "\n", "elapsed_time", "=", "loop_end_time", "-", "loop_start_time", "\n", "images_per_sec", "=", "(", "self", ".", "num_batches", "*", "self", ".", "batch_size", "/", "elapsed_time", ")", "\n", "# Note that we compute the top 1 accuracy and top 5 accuracy for each", "\n", "# batch, which will have a slight performance impact.", "\n", "log_fn", "(", "'-'", "*", "64", ")", "\n", "log_fn", "(", "'total images/sec: %.2f'", "%", "images_per_sec", ")", "\n", "log_fn", "(", "'-'", "*", "64", ")", "\n", "if", "self", ".", "benchmark_logger", ":", "\n", "        ", "eval_result", "=", "{", "\n", "'eval_top_1_accuracy'", ",", "accuracy_at_1", ",", "\n", "'eval_top_5_accuracy'", ",", "accuracy_at_5", ",", "\n", "'eval_average_examples_per_sec'", ",", "images_per_sec", ",", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_STEP", ",", "global_step", ",", "\n", "}", "\n", "self", ".", "benchmark_logger", ".", "log_evaluation_result", "(", "eval_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._benchmark_train": [[1592, 1608], ["tensorflow.Graph", "tensorflow.Graph.as_default", "benchmark_cnn.BenchmarkCNN._build_graph", "benchmark_cnn.BenchmarkCNN._freeze_graph", "tensorflow.Graph.as_default", "benchmark_cnn.BenchmarkCNN._benchmark_graph"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_graph", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._freeze_graph", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._benchmark_graph"], ["", "", "", "def", "_benchmark_train", "(", "self", ")", ":", "\n", "    ", "\"\"\"Run cnn in benchmark mode. Skip the backward pass if forward_only is on.\n\n    Returns:\n      Dictionary containing training statistics (num_workers, num_steps,\n      average_wall_time, images_per_sec).\n    \"\"\"", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "      ", "build_result", "=", "self", ".", "_build_graph", "(", ")", "\n", "", "if", "self", ".", "forward_only_and_freeze", ":", "\n", "      ", "(", "graph", ",", "result_to_benchmark", ")", "=", "self", ".", "_freeze_graph", "(", "graph", ",", "build_result", ")", "\n", "", "else", ":", "\n", "      ", "result_to_benchmark", "=", "build_result", "\n", "", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "      ", "return", "self", ".", "_benchmark_graph", "(", "result_to_benchmark", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._unfreezable_local_variables": [[1611, 1618], ["graph.get_collection"], "methods", ["None"], ["def", "_unfreezable_local_variables", "(", "self", ",", "graph", ")", ":", "\n", "    ", "\"\"\"Get the local variables that we don't want to freeze.\"\"\"", "\n", "return", "graph", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "LOCAL_VARIABLES", ",", "\n", "# We don't freeze the gpu_cached_images local variable so it won't get", "\n", "# constant folded with ops which process the input.", "\n", "scope", "=", "'.*'", "+", "BenchmarkCNN", ".", "GPU_CACHED_IMAGES_VARIABLE_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_graph": [[1619, 1693], ["tensorflow.python.util.nest.flatten", "tensorflow.group", "tensorflow.train.get_global_step", "tensorflow.tables_initializer", "tensorflow.group", "GraphInfo", "list", "benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier", "tensorflow.device", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier", "tensorflow.name_scope", "variable_manager_init_ops.extend", "variable_manager_init_ops.append", "benchmark_cnn.BenchmarkCNN._build_model_single_session_with_dataset_prefetching", "benchmark_cnn.BenchmarkCNN._build_model_single_session", "benchmark_cnn.BenchmarkCNN._build_model_with_dataset_prefetching", "benchmark_cnn.BenchmarkCNN._build_model", "fetches.values", "tensorflow.control_dependencies", "tensorflow.train.get_global_step.assign_add", "tensorflow.variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.control_dependencies", "variable_manager_init_ops.extend", "benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier", "benchmark_cnn.BenchmarkCNN._unfreezable_local_variables", "benchmark_cnn.BenchmarkCNN.variable_mgr.get_post_init_ops", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model_single_session_with_dataset_prefetching", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model_single_session", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model_with_dataset_prefetching", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._unfreezable_local_variables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_post_init_ops"], ["", "def", "_build_graph", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the graph.\n\n    Returns:\n      A namedtuple containing the ops/tensors that required by\n      _benchmark_graph().\n    \"\"\"", "\n", "if", "self", ".", "params", ".", "variable_update", "==", "'distributed_all_reduce'", ":", "\n", "      ", "self", ".", "single_session", "=", "True", "\n", "if", "self", ".", "datasets_use_prefetch", ":", "\n", "        ", "(", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "=", "(", "\n", "self", ".", "_build_model_single_session_with_dataset_prefetching", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "(", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "=", "(", "\n", "self", ".", "_build_model_single_session", "(", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "single_session", "=", "False", "\n", "if", "self", ".", "datasets_use_prefetch", ":", "\n", "        ", "(", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "=", "(", "\n", "self", ".", "_build_model_with_dataset_prefetching", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "(", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "=", "self", ".", "_build_model", "(", ")", "\n", "", "", "fetches_list", "=", "nest", ".", "flatten", "(", "list", "(", "fetches", ".", "values", "(", ")", ")", ")", "\n", "main_fetch_group", "=", "tf", ".", "group", "(", "*", "fetches_list", ",", "name", "=", "'main_fetch_group'", ")", "\n", "execution_barrier", "=", "None", "\n", "if", "(", "not", "self", ".", "single_session", "and", "self", ".", "job_name", "and", "\n", "not", "self", ".", "params", ".", "cross_replica_sync", ")", ":", "\n", "      ", "execution_barrier", "=", "self", ".", "add_sync_queues_and_barrier", "(", "\n", "'execution_barrier_'", ",", "[", "]", ")", "\n", "\n", "", "global_step", "=", "tf", ".", "train", ".", "get_global_step", "(", ")", "\n", "with", "tf", ".", "device", "(", "self", ".", "global_step_device", ")", ",", "tf", ".", "name_scope", "(", "'inc_global_step'", ")", ":", "\n", "      ", "with", "tf", ".", "control_dependencies", "(", "[", "main_fetch_group", "]", ")", ":", "\n", "        ", "fetches", "[", "'inc_global_step'", "]", "=", "global_step", ".", "assign_add", "(", "1", ")", "\n", "\n", "", "", "if", "(", "(", "not", "self", ".", "single_session", ")", "and", "(", "not", "self", ".", "distributed_collective", ")", "and", "\n", "self", ".", "job_name", "and", "self", ".", "params", ".", "cross_replica_sync", ")", ":", "\n", "# Block all replicas until all replicas are ready for next step.", "\n", "      ", "fetches", "[", "'sync_queues'", "]", "=", "self", ".", "add_sync_queues_and_barrier", "(", "\n", "'sync_queues_step_end_'", ",", "[", "main_fetch_group", "]", ")", "\n", "\n", "# Skips the init ops for freezable local variables in forward_only mode so", "\n", "# we can remove all the assign ops when converting variables to constants.", "\n", "", "with", "tf", ".", "name_scope", "(", "'local_variable_initialization'", ")", ":", "\n", "      ", "if", "self", ".", "forward_only_and_freeze", ":", "\n", "        ", "local_var_init_op", "=", "tf", ".", "variables_initializer", "(", "\n", "self", ".", "_unfreezable_local_variables", "(", "tf", ".", "get_default_graph", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "local_var_init_op", "=", "tf", ".", "local_variables_initializer", "(", ")", "\n", "", "", "table_init_ops", "=", "tf", ".", "tables_initializer", "(", ")", "\n", "\n", "variable_manager_init_ops", "=", "[", "local_var_init_op", "]", "\n", "if", "table_init_ops", ":", "\n", "      ", "variable_manager_init_ops", ".", "extend", "(", "[", "table_init_ops", "]", ")", "\n", "", "if", "not", "self", ".", "forward_only_and_freeze", ":", "\n", "      ", "with", "tf", ".", "control_dependencies", "(", "[", "local_var_init_op", "]", ")", ":", "\n", "        ", "variable_manager_init_ops", ".", "extend", "(", "self", ".", "variable_mgr", ".", "get_post_init_ops", "(", ")", ")", "\n", "", "", "if", "(", "(", "not", "self", ".", "single_session", ")", "and", "(", "not", "self", ".", "distributed_collective", ")", "and", "\n", "self", ".", "job_name", "and", "self", ".", "params", ".", "cross_replica_sync", ")", ":", "\n", "# Ensure all workers execute variable_manager_init_ops before they start", "\n", "# executing the model.", "\n", "      ", "variable_manager_init_ops", ".", "append", "(", "\n", "self", ".", "add_sync_queues_and_barrier", "(", "'init_ops_end_'", ",", "\n", "variable_manager_init_ops", ")", ")", "\n", "", "local_var_init_op_group", "=", "tf", ".", "group", "(", "*", "variable_manager_init_ops", ",", "\n", "name", "=", "'local_var_init_op_group'", ")", "\n", "\n", "return", "GraphInfo", "(", "\n", "input_producer_op", "=", "input_producer_op", ",", "\n", "enqueue_ops", "=", "enqueue_ops", ",", "\n", "fetches", "=", "fetches", ",", "\n", "execution_barrier", "=", "execution_barrier", ",", "\n", "global_step", "=", "global_step", ",", "\n", "local_var_init_op_group", "=", "local_var_init_op_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._benchmark_graph": [[1694, 1942], ["tensorflow.summary.merge_all", "tensorflow.train.Supervisor", "tensorflow.train.Supervisor.stop", "tensorflow.summary.FileWriter", "int", "cnn_util.log_fn", "tensorflow.train.Saver", "tensorflow.report_uninitialized_variables", "hvd.broadcast_global_variables", "tensorflow.RunOptions", "tensorflow.RunOptions", "benchmark_cnn.BenchmarkCNN.dataset.queue_runner_required", "benchmark_cnn.BenchmarkCNN.cluster_manager.get_target", "tensorflow.train.Supervisor.managed_session", "tensorflow.python.debug.TensorBoardDebugWrapperSession.run", "cnn_util.log_fn", "time.time", "time.time", "cnn_util.log_fn", "cnn_util.log_fn", "cnn_util.log_fn", "benchmark_cnn.generate_tfprof_profile", "hvd.rank", "tensorflow.get_default_graph", "benchmark_cnn.BenchmarkCNN.variable_mgr.savable_variables", "tensorflow.global_variables", "tensorflow.python.debug.TensorBoardDebugWrapperSession.run", "cnn_util.ImageProducer", "cnn_util.ImageProducer.start", "six.moves.xrange", "benchmark_cnn.GlobalStepWatcher", "GlobalStepWatcher.start", "os.path.split", "filename.endswith", "cnn_util.log_fn", "tensorflow.train.write_graph", "tensorflow.profiler.Profiler", "done_fn", "benchmark_cnn.benchmark_one_step", "benchmark_cnn.GlobalStepWatcher.num_steps", "benchmark_cnn.GlobalStepWatcher.elapsed_time", "cnn_util.ImageProducer.done", "os.path.join", "tensorflow.train.Supervisor.saver.save", "tensorflow.python.debug.TensorBoardDebugWrapperSession.run", "benchmark_cnn.create_config_proto", "len", "tensorflow.python.debug.TensorBoardDebugWrapperSession.run", "cnn_util.ImageProducer.notify_image_consumption", "tensorflow.python.debug.TensorBoardDebugWrapperSession.graph.as_graph_def", "cnn_util.log_fn", "tensorflow.python.debug.LocalCLIDebugWrapperSession", "cnn_util.log_fn", "tensorflow.python.debug.TensorBoardDebugWrapperSession", "cnn_util.log_fn", "cnn_util.log_fn", "time.time", "tensorflow.train.Supervisor.summary_computed", "benchmark_cnn.GlobalStepWatcher.done", "time.sleep", "benchmark_cnn.BenchmarkCNN.benchmark_logger.log_metric", "tensorflow.python.platform.gfile.Exists", "tensorflow.python.platform.gfile.MakeDirs", "len", "len", "cnn_util.log_fn", "tensorflow.python.debug.TensorBoardDebugWrapperSession.run", "benchmark_cnn.BenchmarkCNN.params.loss_type_to_report.replace", "len", "math.ceil", "len", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.queue_runner_required", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.GrpcClusterManager.get_target", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.generate_tfprof_profile", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.savable_variables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.benchmark_one_step", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.num_steps", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.elapsed_time", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.done", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.create_config_proto", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.notify_image_consumption", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.done", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "_benchmark_graph", "(", "self", ",", "graph_info", ")", ":", "\n", "    ", "\"\"\"Benchmark the graph.\n\n    Args:\n      graph_info: the namedtuple returned by _build_graph() which\n        contains all necessary information to benchmark the graph, including\n        named tensors/ops list, fetches, etc.\n    Returns:\n      Dictionary containing training statistics (num_workers, num_steps,\n      average_wall_time, images_per_sec).\n    \"\"\"", "\n", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "      ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "# First worker will be 'chief' - it will write summaries and", "\n", "# save checkpoints.", "\n", "is_chief", "=", "hvd", ".", "rank", "(", ")", "==", "0", "\n", "", "else", ":", "\n", "      ", "is_chief", "=", "(", "not", "self", ".", "job_name", "or", "self", ".", "task_index", "==", "0", ")", "\n", "\n", "", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "summary_writer", "=", "None", "\n", "if", "(", "is_chief", "and", "self", ".", "params", ".", "summary_verbosity", "and", "self", ".", "params", ".", "train_dir", "and", "\n", "self", ".", "params", ".", "save_summaries_steps", ">", "0", ")", ":", "\n", "      ", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "params", ".", "train_dir", ",", "\n", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "# We want to start the benchmark timer right after a image_producer barrier", "\n", "# and avoids undesired waiting times on barriers.", "\n", "", "if", "(", "(", "self", ".", "num_warmup_batches", "+", "len", "(", "graph_info", ".", "enqueue_ops", ")", "-", "1", ")", "%", "\n", "self", ".", "batch_group_size", ")", "!=", "0", ":", "\n", "      ", "self", ".", "num_warmup_batches", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "(", "self", ".", "num_warmup_batches", "+", "len", "(", "graph_info", ".", "enqueue_ops", ")", "-", "1.0", ")", "/", "\n", "(", "self", ".", "batch_group_size", ")", ")", "*", "self", ".", "batch_group_size", "-", "\n", "len", "(", "graph_info", ".", "enqueue_ops", ")", "+", "1", ")", "\n", "log_fn", "(", "'Round up warm up steps to %d to match batch_group_size'", "%", "\n", "self", ".", "num_warmup_batches", ")", "\n", "assert", "(", "(", "self", ".", "num_warmup_batches", "+", "len", "(", "graph_info", ".", "enqueue_ops", ")", "-", "1", ")", "%", "\n", "self", ".", "batch_group_size", ")", "==", "0", "\n", "# We run the summaries in the same thread as the training operations by", "\n", "# passing in None for summary_op to avoid a summary_thread being started.", "\n", "# Running summaries and training operations in parallel could run out of", "\n", "# GPU memory.", "\n", "", "if", "is_chief", "and", "not", "self", ".", "forward_only_and_freeze", ":", "\n", "      ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "self", ".", "variable_mgr", ".", "savable_variables", "(", ")", ",", "save_relative_paths", "=", "True", ",", "max_to_keep", "=", "10000", ")", "\n", "", "else", ":", "\n", "      ", "saver", "=", "None", "\n", "", "ready_for_local_init_op", "=", "None", "\n", "if", "self", ".", "job_name", "and", "not", "(", "self", ".", "single_session", "or", "\n", "self", ".", "distributed_collective", ")", ":", "\n", "# In distributed mode, we don't want to run local_var_init_op_group until", "\n", "# the global variables are initialized, because local_var_init_op_group", "\n", "# may use global variables (such as in distributed replicated mode). We", "\n", "# don't set this in non-distributed mode, because in non-distributed mode,", "\n", "# local_var_init_op_group may itself initialize global variables (such as", "\n", "# in replicated mode).", "\n", "      ", "ready_for_local_init_op", "=", "tf", ".", "report_uninitialized_variables", "(", "\n", "tf", ".", "global_variables", "(", ")", ")", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "      ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "bcast_global_variables_op", "=", "hvd", ".", "broadcast_global_variables", "(", "0", ")", "\n", "", "else", ":", "\n", "      ", "bcast_global_variables_op", "=", "None", "\n", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'collective_all_reduce'", ":", "\n", "# It doesn't matter what this collective_graph_key value is,", "\n", "# so long as it's > 0 and the same at every worker.", "\n", "      ", "init_run_options", "=", "tf", ".", "RunOptions", "(", ")", "\n", "init_run_options", ".", "experimental", ".", "collective_graph_key", "=", "6", "\n", "", "else", ":", "\n", "      ", "init_run_options", "=", "tf", ".", "RunOptions", "(", ")", "\n", "", "sv", "=", "tf", ".", "train", ".", "Supervisor", "(", "\n", "# For the purpose of Supervisor, all Horovod workers are 'chiefs',", "\n", "# since we want session to be initialized symmetrically on all the", "\n", "# workers.", "\n", "is_chief", "=", "is_chief", "or", "(", "self", ".", "params", ".", "variable_update", "==", "'horovod'", "\n", "or", "self", ".", "distributed_collective", ")", ",", "\n", "# Log dir should be unset on non-chief workers to prevent Horovod", "\n", "# workers from corrupting each other's checkpoints.", "\n", "logdir", "=", "self", ".", "params", ".", "train_dir", "if", "is_chief", "else", "None", ",", "\n", "ready_for_local_init_op", "=", "ready_for_local_init_op", ",", "\n", "local_init_op", "=", "graph_info", ".", "local_var_init_op_group", ",", "\n", "saver", "=", "saver", ",", "\n", "global_step", "=", "graph_info", ".", "global_step", ",", "\n", "summary_op", "=", "None", ",", "\n", "save_model_secs", "=", "self", ".", "params", ".", "save_model_secs", ",", "\n", "summary_writer", "=", "summary_writer", ",", "\n", "local_init_run_options", "=", "init_run_options", ")", "\n", "\n", "step_train_times", "=", "[", "]", "\n", "start_standard_services", "=", "(", "\n", "self", ".", "params", ".", "summary_verbosity", ">=", "1", "or", "\n", "self", ".", "dataset", ".", "queue_runner_required", "(", ")", ")", "\n", "target", "=", "self", ".", "cluster_manager", ".", "get_target", "(", ")", "if", "self", ".", "cluster_manager", "else", "''", "\n", "with", "sv", ".", "managed_session", "(", "\n", "master", "=", "target", ",", "\n", "config", "=", "create_config_proto", "(", "self", ".", "params", ")", ",", "\n", "start_standard_services", "=", "start_standard_services", ")", "as", "sess", ":", "\n", "      ", "if", "bcast_global_variables_op", ":", "\n", "        ", "sess", ".", "run", "(", "bcast_global_variables_op", ")", "\n", "\n", "", "image_producer", "=", "None", "\n", "if", "graph_info", ".", "input_producer_op", "is", "not", "None", ":", "\n", "        ", "image_producer", "=", "cnn_util", ".", "ImageProducer", "(", "\n", "sess", ",", "graph_info", ".", "input_producer_op", ",", "self", ".", "batch_group_size", ",", "\n", "self", ".", "params", ".", "use_python32_barrier", ")", "\n", "image_producer", ".", "start", "(", ")", "\n", "for", "i", "in", "xrange", "(", "len", "(", "graph_info", ".", "enqueue_ops", ")", ")", ":", "\n", "          ", "sess", ".", "run", "(", "graph_info", ".", "enqueue_ops", "[", ":", "(", "i", "+", "1", ")", "]", ")", "\n", "image_producer", ".", "notify_image_consumption", "(", ")", "\n", "", "", "self", ".", "init_global_step", ",", "=", "sess", ".", "run", "(", "[", "graph_info", ".", "global_step", "]", ")", "\n", "if", "self", ".", "job_name", "and", "not", "self", ".", "params", ".", "cross_replica_sync", ":", "\n", "# TODO(zhengxq): Do we need to use a global step watcher at all?", "\n", "        ", "global_step_watcher", "=", "GlobalStepWatcher", "(", "\n", "sess", ",", "graph_info", ".", "global_step", ",", "\n", "self", ".", "num_workers", "*", "self", ".", "num_warmup_batches", "+", "\n", "self", ".", "init_global_step", ",", "\n", "self", ".", "num_workers", "*", "(", "self", ".", "num_warmup_batches", "+", "self", ".", "num_batches", ")", "-", "1", ")", "\n", "global_step_watcher", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "        ", "global_step_watcher", "=", "None", "\n", "\n", "", "if", "self", ".", "graph_file", "is", "not", "None", ":", "\n", "        ", "path", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "self", ".", "graph_file", ")", "\n", "as_text", "=", "filename", ".", "endswith", "(", "'txt'", ")", "\n", "log_fn", "(", "'Writing GraphDef as %s to %s'", "%", "(", "# pyformat break", "\n", "'text'", "if", "as_text", "else", "'binary'", ",", "self", ".", "graph_file", ")", ")", "\n", "tf", ".", "train", ".", "write_graph", "(", "sess", ".", "graph", ".", "as_graph_def", "(", "add_shapes", "=", "True", ")", ",", "path", ",", "\n", "filename", ",", "as_text", ")", "\n", "\n", "", "log_fn", "(", "'Running warm up'", ")", "\n", "local_step", "=", "-", "1", "*", "self", ".", "num_warmup_batches", "\n", "if", "self", ".", "single_session", ":", "\n", "# In single session mode, each step, the global_step is incremented by", "\n", "# 1. In non-single session mode, each step, the global_step is", "\n", "# incremented once per worker. This means we need to divide", "\n", "# init_global_step by num_workers only in non-single session mode.", "\n", "        ", "end_local_step", "=", "self", ".", "num_batches", "-", "self", ".", "init_global_step", "\n", "", "else", ":", "\n", "        ", "end_local_step", "=", "self", ".", "num_batches", "-", "(", "self", ".", "init_global_step", "/", "\n", "self", ".", "num_workers", ")", "\n", "\n", "", "if", "not", "global_step_watcher", ":", "\n", "# In cross-replica sync mode, all workers must run the same number of", "\n", "# local steps, or else the workers running the extra step will block.", "\n", "        ", "done_fn", "=", "lambda", ":", "local_step", ">=", "end_local_step", "\n", "", "else", ":", "\n", "        ", "done_fn", "=", "global_step_watcher", ".", "done", "\n", "", "if", "self", ".", "params", ".", "debugger", "is", "not", "None", ":", "\n", "        ", "if", "self", ".", "params", ".", "debugger", "==", "'cli'", ":", "\n", "          ", "log_fn", "(", "'The CLI TensorFlow debugger will be used.'", ")", "\n", "sess", "=", "tf_debug", ".", "LocalCLIDebugWrapperSession", "(", "sess", ")", "\n", "", "else", ":", "\n", "          ", "log_fn", "(", "'The TensorBoard debugger plugin will be used.'", ")", "\n", "sess", "=", "tf_debug", ".", "TensorBoardDebugWrapperSession", "(", "sess", ",", "\n", "self", ".", "params", ".", "debugger", ")", "\n", "", "", "profiler", "=", "tf", ".", "profiler", ".", "Profiler", "(", ")", "if", "self", ".", "params", ".", "tfprof_file", "else", "None", "\n", "loop_start_time", "=", "time", ".", "time", "(", ")", "\n", "last_average_loss", "=", "None", "\n", "while", "not", "done_fn", "(", ")", ":", "\n", "        ", "if", "local_step", "==", "0", ":", "\n", "          ", "log_fn", "(", "'Done warm up'", ")", "\n", "if", "graph_info", ".", "execution_barrier", ":", "\n", "            ", "log_fn", "(", "'Waiting for other replicas to finish warm up'", ")", "\n", "sess", ".", "run", "(", "[", "graph_info", ".", "execution_barrier", "]", ")", "\n", "\n", "", "header_str", "=", "(", "'Step\\tImg/sec\\t'", "+", "\n", "self", ".", "params", ".", "loss_type_to_report", ".", "replace", "(", "'/'", ",", "' '", ")", ")", "\n", "if", "self", ".", "params", ".", "print_training_accuracy", "or", "self", ".", "params", ".", "forward_only", ":", "\n", "            ", "header_str", "+=", "'\\ttop_1_accuracy\\ttop_5_accuracy'", "\n", "", "log_fn", "(", "header_str", ")", "\n", "assert", "len", "(", "step_train_times", ")", "==", "self", ".", "num_warmup_batches", "\n", "# reset times to ignore warm up batch", "\n", "step_train_times", "=", "[", "]", "\n", "loop_start_time", "=", "time", ".", "time", "(", ")", "\n", "", "if", "(", "summary_writer", "and", "\n", "(", "local_step", "+", "1", ")", "%", "self", ".", "params", ".", "save_summaries_steps", "==", "0", ")", ":", "\n", "          ", "fetch_summary", "=", "summary_op", "\n", "", "else", ":", "\n", "          ", "fetch_summary", "=", "None", "\n", "", "collective_graph_key", "=", "7", "if", "(", "\n", "self", ".", "params", ".", "variable_update", "==", "'collective_all_reduce'", ")", "else", "0", "\n", "(", "summary_str", ",", "last_average_loss", ")", "=", "benchmark_one_step", "(", "\n", "sess", ",", "graph_info", ".", "fetches", ",", "local_step", ",", "\n", "self", ".", "batch_size", "*", "(", "self", ".", "num_workers", "\n", "if", "self", ".", "single_session", "else", "1", ")", ",", "step_train_times", ",", "\n", "self", ".", "trace_filename", ",", "self", ".", "params", ".", "partitioned_graph_file_prefix", ",", "\n", "profiler", ",", "image_producer", ",", "self", ".", "params", ",", "fetch_summary", ",", "\n", "benchmark_logger", "=", "self", ".", "benchmark_logger", ",", "\n", "collective_graph_key", "=", "collective_graph_key", ")", "\n", "if", "summary_str", "is", "not", "None", "and", "is_chief", ":", "\n", "          ", "sv", ".", "summary_computed", "(", "sess", ",", "summary_str", ")", "\n", "", "local_step", "+=", "1", "\n", "", "loop_end_time", "=", "time", ".", "time", "(", ")", "\n", "# Waits for the global step to be done, regardless of done_fn.", "\n", "if", "global_step_watcher", ":", "\n", "        ", "while", "not", "global_step_watcher", ".", "done", "(", ")", ":", "\n", "          ", "time", ".", "sleep", "(", ".25", ")", "\n", "", "", "if", "not", "global_step_watcher", ":", "\n", "        ", "elapsed_time", "=", "loop_end_time", "-", "loop_start_time", "\n", "average_wall_time", "=", "elapsed_time", "/", "local_step", "if", "local_step", ">", "0", "else", "0", "\n", "images_per_sec", "=", "(", "self", ".", "num_workers", "*", "local_step", "*", "self", ".", "batch_size", "/", "\n", "elapsed_time", ")", "\n", "num_steps", "=", "local_step", "*", "self", ".", "num_workers", "\n", "", "else", ":", "\n", "# NOTE: Each worker independently increases the global step. So,", "\n", "# num_steps will be the sum of the local_steps from each worker.", "\n", "        ", "num_steps", "=", "global_step_watcher", ".", "num_steps", "(", ")", "\n", "elapsed_time", "=", "global_step_watcher", ".", "elapsed_time", "(", ")", "\n", "average_wall_time", "=", "(", "elapsed_time", "*", "self", ".", "num_workers", "/", "num_steps", "\n", "if", "num_steps", ">", "0", "else", "0", ")", "\n", "images_per_sec", "=", "num_steps", "*", "self", ".", "batch_size", "/", "elapsed_time", "\n", "\n", "", "log_fn", "(", "'-'", "*", "64", ")", "\n", "log_fn", "(", "'total images/sec: %.2f'", "%", "images_per_sec", ")", "\n", "log_fn", "(", "'-'", "*", "64", ")", "\n", "if", "image_producer", "is", "not", "None", ":", "\n", "        ", "image_producer", ".", "done", "(", ")", "\n", "", "if", "is_chief", ":", "\n", "        ", "if", "self", ".", "benchmark_logger", ":", "\n", "          ", "self", ".", "benchmark_logger", ".", "log_metric", "(", "\n", "'average_examples_per_sec'", ",", "images_per_sec", ",", "global_step", "=", "num_steps", ")", "\n", "\n", "# Save the model checkpoint.", "\n", "", "", "if", "self", ".", "params", ".", "train_dir", "is", "not", "None", "and", "is_chief", ":", "\n", "        ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", ".", "train_dir", ",", "'model.ckpt'", ")", "\n", "if", "not", "gfile", ".", "Exists", "(", "self", ".", "params", ".", "train_dir", ")", ":", "\n", "          ", "gfile", ".", "MakeDirs", "(", "self", ".", "params", ".", "train_dir", ")", "\n", "", "sv", ".", "saver", ".", "save", "(", "sess", ",", "checkpoint_path", ",", "graph_info", ".", "global_step", ")", "\n", "\n", "", "if", "graph_info", ".", "execution_barrier", ":", "\n", "# Wait for other workers to reach the end, so this worker doesn't", "\n", "# go away underneath them.", "\n", "        ", "sess", ".", "run", "(", "[", "graph_info", ".", "execution_barrier", "]", ")", "\n", "\n", "", "", "sv", ".", "stop", "(", ")", "\n", "if", "profiler", ":", "\n", "      ", "generate_tfprof_profile", "(", "profiler", ",", "self", ".", "params", ".", "tfprof_file", ")", "\n", "", "stats", "=", "{", "\n", "'num_workers'", ":", "self", ".", "num_workers", ",", "\n", "'num_steps'", ":", "num_steps", ",", "\n", "'average_wall_time'", ":", "average_wall_time", ",", "\n", "'images_per_sec'", ":", "images_per_sec", "\n", "}", "\n", "if", "last_average_loss", "is", "not", "None", ":", "\n", "      ", "stats", "[", "'last_average_loss'", "]", "=", "last_average_loss", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._freeze_graph": [[1943, 2030], ["isinstance", "isinstance", "list", "variables_to_keep.update", "tensorflow.Graph", "GraphInfo", "set", "graph.as_default", "isinstance", "tensorflow.Graph.as_default", "tensorflow.python.framework.importer.import_graph_def", "tensorflow.Session", "sess.run", "sess.run", "tensorflow.python.framework.graph_util.convert_variables_to_constants", "tensorflow.Graph.get_operation_by_name", "tensorflow.python.util.nest.map_structure", "_get_fn"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "_freeze_graph", "(", "self", ",", "graph", ",", "graph_info", ")", ":", "\n", "    ", "\"\"\"Freeze and re-import the graph.\n\n    Args:\n      graph: the graph to freeze.\n      graph_info: the namedtuple returned by _build_graph() which\n        contains all necessary information to benchmark the graph, including\n        named tensors/ops list, fetches, etc.\n    Returns:\n      The updated graph and graph_info with the ops/tensors/fetches updated\n      according to the imported graph.\n    \"\"\"", "\n", "assert", "isinstance", "(", "graph_info", ".", "fetches", ",", "dict", ")", "\n", "assert", "isinstance", "(", "graph_info", ".", "global_step", ",", "tf", ".", "Variable", ")", "\n", "\n", "# Get the names of the ops that need to keep during conversion.", "\n", "flattened_op_names", "=", "list", "(", "\n", "set", "(", "[", "\n", "v", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "for", "v", "in", "nest", ".", "flatten", "(", "graph_info", ")", "\n", "if", "v", "is", "not", "None", "\n", "]", ")", ")", "\n", "# Get variables that we don't want to freeze.", "\n", "# TODO(laigd): consider making global_step a constant.", "\n", "variables_to_keep", "=", "{", "graph_info", ".", "global_step", ":", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", "}", "\n", "variables_to_keep", ".", "update", "(", "{", "\n", "local_variable", ":", "tf", ".", "GraphKeys", ".", "LOCAL_VARIABLES", "\n", "for", "local_variable", "in", "self", ".", "_unfreezable_local_variables", "(", "graph", ")", "\n", "}", ")", "\n", "\n", "output_node_names", "=", "(", "\n", "flattened_op_names", "+", "\n", "# Add variable initializer and read ops to the output list, so", "\n", "# convert_variables_to_constants() will keep them.", "\n", "[", "variable", ".", "initializer", ".", "name", "for", "variable", "in", "variables_to_keep", "]", "+", "\n", "[", "variable", ".", "value", "(", ")", ".", "op", ".", "name", "for", "variable", "in", "variables_to_keep", "]", ")", "\n", "\n", "# Freeze the graph.", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "      ", "with", "tf", ".", "Session", "(", "config", "=", "create_config_proto", "(", "self", ".", "params", ")", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "converted_graphdef", "=", "graph_util", ".", "convert_variables_to_constants", "(", "\n", "sess", ",", "\n", "graph", ".", "as_graph_def", "(", "add_shapes", "=", "True", ")", ",", "\n", "output_node_names", ",", "\n", "variable_names_blacklist", "=", "[", "\n", "variable", ".", "op", ".", "name", "for", "variable", "in", "variables_to_keep", "\n", "]", ")", "\n", "\n", "# Creates a new graph as the default and import the converted graph back.", "\n", "", "", "updated_graph", "=", "tf", ".", "Graph", "(", ")", "\n", "\n", "def", "_get_tensors_or_ops", "(", "inputs", ")", ":", "\n", "      ", "\"\"\"Gets the updated tensors or ops from 'updated_graph'.\"\"\"", "\n", "\n", "def", "_get_fn", "(", "element", ")", ":", "\n", "        ", "if", "element", "is", "None", ":", "\n", "          ", "return", "None", "\n", "", "if", "':'", "in", "element", ".", "name", ":", "\n", "          ", "return", "updated_graph", ".", "get_tensor_by_name", "(", "element", ".", "name", ")", "\n", "", "return", "updated_graph", ".", "get_operation_by_name", "(", "element", ".", "name", ")", "\n", "\n", "", "if", "isinstance", "(", "inputs", ",", "(", "list", ",", "dict", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "nest", ".", "map_structure", "(", "_get_fn", ",", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "return", "_get_fn", "(", "inputs", ")", "\n", "\n", "", "", "with", "updated_graph", ".", "as_default", "(", ")", ":", "\n", "      ", "importer", ".", "import_graph_def", "(", "graph_def", "=", "converted_graphdef", ",", "name", "=", "''", ")", "\n", "\n", "# Update the variables", "\n", "for", "variable", "in", "variables_to_keep", ":", "\n", "        ", "updated_variable", "=", "tf", ".", "Variable", ".", "from_proto", "(", "variable", ".", "to_proto", "(", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "variables_to_keep", "[", "variable", "]", ",", "updated_variable", ")", "\n", "if", "variable", "is", "graph_info", ".", "global_step", ":", "\n", "          ", "updated_global_step", "=", "updated_variable", "\n", "\n", "", "", "", "updated_graph_info", "=", "GraphInfo", "(", "\n", "input_producer_op", "=", "_get_tensors_or_ops", "(", "graph_info", ".", "input_producer_op", ")", ",", "\n", "enqueue_ops", "=", "_get_tensors_or_ops", "(", "graph_info", ".", "enqueue_ops", ")", ",", "\n", "execution_barrier", "=", "_get_tensors_or_ops", "(", "graph_info", ".", "execution_barrier", ")", ",", "\n", "local_var_init_op_group", "=", "_get_tensors_or_ops", "(", "\n", "graph_info", ".", "local_var_init_op_group", ")", ",", "\n", "fetches", "=", "_get_tensors_or_ops", "(", "graph_info", ".", "fetches", ")", ",", "\n", "global_step", "=", "updated_global_step", ")", "\n", "return", "(", "updated_graph", ",", "updated_graph_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_input_processing": [[2031, 2061], ["tensorflow.device", "benchmark_cnn.BenchmarkCNN.image_preprocessor.minibatch", "images_splits[].get_shape", "labels_splits[].get_shape", "range", "len", "input_producer_stages.append", "six.moves.xrange", "tensorflow.python.ops.data_flow_ops.StagingArea", "input_producer_stages[].put", "input_producer_op.append"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.minibatch"], ["", "def", "_build_input_processing", "(", "self", ",", "shift_ratio", "=", "0", ")", ":", "\n", "    ", "\"\"\"\"Build the image (pre)processing portion of the model graph.\"\"\"", "\n", "with", "tf", ".", "device", "(", "self", ".", "cpu_device", ")", ":", "\n", "      ", "if", "self", ".", "params", ".", "eval", ":", "\n", "        ", "subset", "=", "'validation'", "\n", "", "else", ":", "\n", "        ", "subset", "=", "'train'", "\n", "", "input_producer_op", "=", "[", "]", "\n", "input_producer_stages", "=", "[", "]", "\n", "images_splits", ",", "labels_splits", "=", "self", ".", "image_preprocessor", ".", "minibatch", "(", "\n", "self", ".", "dataset", ",", "\n", "subset", "=", "subset", ",", "\n", "use_datasets", "=", "self", ".", "params", ".", "use_datasets", ",", "\n", "cache_data", "=", "self", ".", "params", ".", "cache_data", ",", "\n", "shift_ratio", "=", "shift_ratio", ")", "\n", "images_shape", "=", "images_splits", "[", "0", "]", ".", "get_shape", "(", ")", "\n", "labels_shape", "=", "labels_splits", "[", "0", "]", ".", "get_shape", "(", ")", "\n", "for", "device_num", "in", "range", "(", "len", "(", "self", ".", "devices", ")", ")", ":", "\n", "        ", "input_producer_stages", ".", "append", "(", "\n", "data_flow_ops", ".", "StagingArea", "(", "\n", "[", "images_splits", "[", "0", "]", ".", "dtype", ",", "labels_splits", "[", "0", "]", ".", "dtype", "]", ",", "\n", "shapes", "=", "[", "images_shape", ",", "labels_shape", "]", ",", "\n", "shared_name", "=", "'image_producer_staging_area_%d'", "%", "device_num", ")", ")", "\n", "for", "group_index", "in", "xrange", "(", "self", ".", "batch_group_size", ")", ":", "\n", "          ", "if", "not", "self", ".", "use_synthetic_gpu_images", ":", "\n", "            ", "batch_index", "=", "group_index", "+", "device_num", "*", "self", ".", "batch_group_size", "\n", "put_op", "=", "input_producer_stages", "[", "device_num", "]", ".", "put", "(", "\n", "[", "images_splits", "[", "batch_index", "]", ",", "labels_splits", "[", "batch_index", "]", "]", ")", "\n", "input_producer_op", ".", "append", "(", "put_op", ")", "\n", "", "", "", "", "return", "(", "input_producer_op", ",", "input_producer_stages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_model": [[2062, 2154], ["tensorflow.set_random_seed", "numpy.random.seed", "cnn_util.log_fn", "range", "benchmark_cnn.BenchmarkCNN.variable_mgr.supports_staged_vars", "enqueue_ops.append", "benchmark_cnn.BenchmarkCNN._build_fetches", "hvd.rank", "tensorflow.device", "tensorflow.train.get_or_create_global_step", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN._build_input_processing", "tensorflow.group", "len", "tensorflow.group", "enqueue_ops.append", "float", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN.variable_mgr.create_outer_variable_scope", "benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients", "gpu_compute_stage_ops.extend", "tensorflow.group", "tensorflow.get_variable", "tensorflow.get_variable", "losses.append", "device_grads.append", "all_logits.append", "all_top_1_ops.append", "all_top_5_ops.append", "tensorflow.get_collection", "list", "benchmark_cnn.BenchmarkCNN.model.get_fp16_loss_scale", "six.iteritems"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.supports_staged_vars", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_fetches", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_input_processing", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.create_outer_variable_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_fp16_loss_scale"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the TensorFlow graph.\"\"\"", "\n", "# Adjust seed so different workers start read different input files.", "\n", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "      ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "seed_adjustment", "=", "hvd", ".", "rank", "(", ")", "\n", "", "else", ":", "\n", "      ", "seed_adjustment", "=", "0", "\n", "", "tf", ".", "set_random_seed", "(", "self", ".", "params", ".", "tf_random_seed", "+", "seed_adjustment", ")", "\n", "np", ".", "random", ".", "seed", "(", "4321", "+", "seed_adjustment", ")", "\n", "phase_train", "=", "not", "(", "self", ".", "params", ".", "eval", "or", "self", ".", "params", ".", "forward_only", ")", "\n", "\n", "log_fn", "(", "'Generating model'", ")", "\n", "losses", "=", "[", "]", "\n", "device_grads", "=", "[", "]", "\n", "all_logits", "=", "[", "]", "\n", "all_top_1_ops", "=", "[", "]", "\n", "all_top_5_ops", "=", "[", "]", "\n", "enqueue_ops", "=", "[", "]", "\n", "gpu_compute_stage_ops", "=", "[", "]", "\n", "gpu_grad_stage_ops", "=", "[", "]", "\n", "\n", "with", "tf", ".", "device", "(", "self", ".", "global_step_device", ")", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "if", "self", ".", "params", ".", "use_fp16", ":", "\n", "        ", "init_loss_scale_val", "=", "float", "(", "self", ".", "params", ".", "fp16_loss_scale", "or", "\n", "self", ".", "model", ".", "get_fp16_loss_scale", "(", ")", ")", "\n", "if", "self", ".", "enable_auto_loss_scale", "or", "init_loss_scale_val", "!=", "1", ":", "\n", "          ", "self", ".", "loss_scale", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'loss_scale'", ",", "\n", "initializer", "=", "init_loss_scale_val", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "loss_scale_normal_steps", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'loss_scale_normal_steps'", ",", "initializer", "=", "0", ",", "trainable", "=", "False", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "loss_scale", "=", "None", "\n", "self", ".", "loss_scale_normal_steps", "=", "None", "\n", "\n", "# Build the processing and model for the worker.", "\n", "", "", "", "with", "tf", ".", "name_scope", "(", "'input_processing'", ")", ":", "\n", "      ", "(", "input_producer_op", ",", "\n", "input_producer_stages", ")", "=", "self", ".", "_build_input_processing", "(", "shift_ratio", "=", "0", ")", "\n", "input_producer_op", "=", "tf", ".", "group", "(", "*", "input_producer_op", ")", "\n", "", "update_ops", "=", "None", "\n", "staging_delta_ops", "=", "[", "]", "\n", "\n", "for", "device_num", "in", "range", "(", "len", "(", "self", ".", "devices", ")", ")", ":", "\n", "      ", "with", "tf", ".", "name_scope", "(", "'tower_%i'", "%", "device_num", ")", "as", "name_scope", ",", "(", "\n", "self", ".", "variable_mgr", ".", "create_outer_variable_scope", "(", "device_num", ")", ")", ":", "\n", "        ", "results", "=", "self", ".", "add_forward_pass_and_gradients", "(", "\n", "phase_train", ",", "device_num", ",", "device_num", ",", "\n", "input_producer_stages", "[", "device_num", "]", ",", "gpu_compute_stage_ops", ",", "\n", "gpu_grad_stage_ops", ")", "\n", "if", "phase_train", ":", "\n", "          ", "losses", ".", "append", "(", "results", "[", "'loss'", "]", ")", "\n", "device_grads", ".", "append", "(", "results", "[", "'gradvars'", "]", ")", "\n", "", "else", ":", "\n", "          ", "all_logits", ".", "append", "(", "results", "[", "'logits'", "]", ")", "\n", "", "if", "not", "phase_train", "or", "self", ".", "params", ".", "print_training_accuracy", ":", "\n", "          ", "all_top_1_ops", ".", "append", "(", "results", "[", "'top_1_op'", "]", ")", "\n", "all_top_5_ops", ".", "append", "(", "results", "[", "'top_5_op'", "]", ")", "\n", "\n", "", "if", "device_num", "==", "0", ":", "\n", "# Retain the Batch Normalization updates operations only from the", "\n", "# first tower. These operations update the moving mean and moving", "\n", "# variance variables, which are updated (but not used) during", "\n", "# training, and used during evaluation. The moving mean and variance", "\n", "# approximate the true mean and variance across all images in the", "\n", "# dataset. Therefore, in replicated mode, these moving averages would", "\n", "# be almost identical for each tower, and so we only update and save", "\n", "# the moving averages for one tower. In parameter server mode, all", "\n", "# towers share a copy of the variables so we also only need to update", "\n", "# and save the moving averages once.", "\n", "          ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "name_scope", ")", "\n", "staging_delta_ops", "=", "list", "(", "self", ".", "variable_mgr", ".", "staging_delta_ops", ")", "\n", "\n", "", "", "", "if", "self", ".", "variable_mgr", ".", "supports_staged_vars", "(", ")", ":", "\n", "      ", "for", "staging_ops", "in", "self", ".", "variable_mgr", ".", "staging_vars_on_devices", ":", "\n", "        ", "gpu_compute_stage_ops", ".", "extend", "(", "\n", "[", "put_op", "for", "_", ",", "(", "put_op", ",", "_", ")", "in", "six", ".", "iteritems", "(", "staging_ops", ")", "]", ")", "\n", "", "", "enqueue_ops", ".", "append", "(", "tf", ".", "group", "(", "*", "gpu_compute_stage_ops", ",", "\n", "name", "=", "'gpu_compute_stage_ops_group'", ")", ")", "\n", "if", "gpu_grad_stage_ops", ":", "\n", "      ", "staging_delta_ops", "+=", "gpu_grad_stage_ops", "\n", "", "if", "staging_delta_ops", ":", "\n", "      ", "enqueue_ops", ".", "append", "(", "tf", ".", "group", "(", "*", "(", "staging_delta_ops", ")", ")", ")", "\n", "\n", "", "fetches", "=", "self", ".", "_build_fetches", "(", "global_step", ",", "all_logits", ",", "losses", ",", "device_grads", ",", "\n", "enqueue_ops", ",", "update_ops", ",", "all_top_1_ops", ",", "\n", "all_top_5_ops", ",", "phase_train", ")", "\n", "return", "(", "input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_model_with_dataset_prefetching": [[2156, 2240], ["tensorflow.set_random_seed", "numpy.random.seed", "cnn_util.log_fn", "range", "benchmark_cnn.BenchmarkCNN._build_fetches", "benchmark_cnn.BenchmarkCNN.variable_mgr.supports_staged_vars", "hvd.rank", "tensorflow.device", "tensorflow.train.get_or_create_global_step", "tensorflow.name_scope", "data_utils.build_prefetch_image_processing", "len", "float", "benchmark_cnn.BenchmarkCNN.model.get_image_size", "benchmark_cnn.BenchmarkCNN.model.get_image_size", "len", "benchmark_cnn.get_data_type", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN.variable_mgr.create_outer_variable_scope", "benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients", "tensorflow.get_variable", "tensorflow.get_variable", "losses.append", "device_grads.append", "all_logits.append", "all_top_1_ops.append", "all_top_5_ops.append", "tensorflow.get_collection", "benchmark_cnn.BenchmarkCNN.model.get_fp16_loss_scale"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_fetches", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.supports_staged_vars", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.build_prefetch_image_processing", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_data_type", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.create_outer_variable_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_fp16_loss_scale"], ["", "def", "_build_model_with_dataset_prefetching", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the TensorFlow graph using datasets prefetching.\"\"\"", "\n", "assert", "not", "self", ".", "params", ".", "staged_vars", "\n", "assert", "not", "self", ".", "variable_mgr", ".", "supports_staged_vars", "(", ")", "\n", "\n", "# Adjust seed so different workers start read different input files.", "\n", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "      ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "seed_adjustment", "=", "hvd", ".", "rank", "(", ")", "\n", "", "else", ":", "\n", "      ", "seed_adjustment", "=", "0", "\n", "", "tf", ".", "set_random_seed", "(", "self", ".", "params", ".", "tf_random_seed", "+", "seed_adjustment", ")", "\n", "np", ".", "random", ".", "seed", "(", "4321", "+", "seed_adjustment", ")", "\n", "phase_train", "=", "not", "(", "self", ".", "params", ".", "eval", "or", "self", ".", "params", ".", "forward_only", ")", "\n", "\n", "log_fn", "(", "'Generating model'", ")", "\n", "losses", "=", "[", "]", "\n", "device_grads", "=", "[", "]", "\n", "all_logits", "=", "[", "]", "\n", "all_top_1_ops", "=", "[", "]", "\n", "all_top_5_ops", "=", "[", "]", "\n", "\n", "with", "tf", ".", "device", "(", "self", ".", "global_step_device", ")", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "if", "self", ".", "params", ".", "use_fp16", ":", "\n", "        ", "init_loss_scale_val", "=", "float", "(", "self", ".", "params", ".", "fp16_loss_scale", "or", "\n", "self", ".", "model", ".", "get_fp16_loss_scale", "(", ")", ")", "\n", "if", "self", ".", "enable_auto_loss_scale", "or", "init_loss_scale_val", "!=", "1", ":", "\n", "          ", "self", ".", "loss_scale", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'loss_scale'", ",", "\n", "initializer", "=", "init_loss_scale_val", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "loss_scale_normal_steps", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'loss_scale_normal_steps'", ",", "initializer", "=", "0", ",", "trainable", "=", "False", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "loss_scale", "=", "None", "\n", "self", ".", "loss_scale_normal_steps", "=", "None", "\n", "\n", "# Build the processing and model for the worker.", "\n", "", "", "", "with", "tf", ".", "name_scope", "(", "'input_processing'", ")", ":", "\n", "      ", "function_buffering_resources", "=", "data_utils", ".", "build_prefetch_image_processing", "(", "\n", "self", ".", "model", ".", "get_image_size", "(", ")", ",", "self", ".", "model", ".", "get_image_size", "(", ")", ",", "\n", "self", ".", "batch_size", ",", "len", "(", "\n", "self", ".", "devices", ")", ",", "self", ".", "image_preprocessor", ".", "parse_and_preprocess", ",", "\n", "self", ".", "cpu_device", ",", "self", ".", "params", ",", "self", ".", "devices", ",", "\n", "get_data_type", "(", "self", ".", "params", ")", ",", "self", ".", "dataset", ")", "\n", "\n", "", "update_ops", "=", "None", "\n", "\n", "for", "device_num", "in", "range", "(", "len", "(", "self", ".", "devices", ")", ")", ":", "\n", "      ", "with", "tf", ".", "name_scope", "(", "'tower_%i'", "%", "device_num", ")", "as", "name_scope", ",", "(", "\n", "self", ".", "variable_mgr", ".", "create_outer_variable_scope", "(", "device_num", ")", ")", ":", "\n", "        ", "function_buffering_resource", "=", "function_buffering_resources", "[", "device_num", "]", "\n", "results", "=", "self", ".", "add_forward_pass_and_gradients", "(", "\n", "phase_train", ",", "device_num", ",", "device_num", ",", "None", ",", "None", ",", "None", ",", "\n", "function_buffering_resource", ")", "\n", "if", "phase_train", ":", "\n", "          ", "losses", ".", "append", "(", "results", "[", "'loss'", "]", ")", "\n", "device_grads", ".", "append", "(", "results", "[", "'gradvars'", "]", ")", "\n", "", "else", ":", "\n", "          ", "all_logits", ".", "append", "(", "results", "[", "'logits'", "]", ")", "\n", "", "if", "not", "phase_train", "or", "self", ".", "params", ".", "print_training_accuracy", ":", "\n", "          ", "all_top_1_ops", ".", "append", "(", "results", "[", "'top_1_op'", "]", ")", "\n", "all_top_5_ops", ".", "append", "(", "results", "[", "'top_5_op'", "]", ")", "\n", "\n", "", "if", "device_num", "==", "0", ":", "\n", "# Retain the Batch Normalization updates operations only from the", "\n", "# first tower. These operations update the moving mean and moving", "\n", "# variance variables, which are updated (but not used) during", "\n", "# training, and used during evaluation. The moving mean and variance", "\n", "# approximate the true mean and variance across all images in the", "\n", "# dataset. Therefore, in replicated mode, these moving averages would", "\n", "# be almost identical for each tower, and so we only update and save", "\n", "# the moving averages for one tower. In parameter server mode, all", "\n", "# towers share a copy of the variables so we also only need to update", "\n", "# and save the moving averages once.", "\n", "          ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "name_scope", ")", "\n", "assert", "not", "self", ".", "variable_mgr", ".", "staging_delta_ops", "\n", "\n", "", "", "", "fetches", "=", "self", ".", "_build_fetches", "(", "global_step", ",", "all_logits", ",", "losses", ",", "device_grads", ",", "\n", "None", ",", "update_ops", ",", "all_top_1_ops", ",", "\n", "all_top_5_ops", ",", "phase_train", ")", "\n", "return", "(", "None", ",", "[", "]", ",", "fetches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_fetches": [[2241, 2334], ["benchmark_cnn.BenchmarkCNN.variable_mgr.preprocess_device_grads", "enumerate", "tensorflow.group", "tensorflow.device", "tensorflow.reduce_sum", "tensorflow.summary.scalar", "tensorflow.reduce_sum", "tensorflow.summary.scalar", "tensorflow.concat", "tensorflow.device", "benchmark_cnn.get_learning_rate", "tensorflow.identity", "benchmark_cnn.get_optimizer", "variable_mgr_util.AutoLossScaleParams", "print", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.name_scope", "tensorflow.reduce_mean", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN.variable_mgr.get_gradients_to_apply", "benchmark_cnn.BenchmarkCNN.dataset.num_examples_per_epoch", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN.variable_mgr.append_apply_gradients_ops", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "benchmark_cnn.BenchmarkCNN.gradient_histogram_summary", "tensorflow.trainable_variables", "tensorflow.name_scope", "tensorflow.check_numerics", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.preprocess_device_grads", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv4Model.get_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_optimizer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_gradients_to_apply", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Cifar10Data.num_examples_per_epoch", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.append_apply_gradients_ops", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.gradient_histogram_summary"], ["", "def", "_build_fetches", "(", "self", ",", "global_step", ",", "all_logits", ",", "losses", ",", "device_grads", ",", "\n", "enqueue_ops", ",", "update_ops", ",", "all_top_1_ops", ",", "all_top_5_ops", ",", "\n", "phase_train", ")", ":", "\n", "    ", "\"\"\"Complete construction of model graph, populating the fetches map.\"\"\"", "\n", "fetches", "=", "{", "}", "\n", "if", "enqueue_ops", ":", "\n", "      ", "fetches", "[", "'enqueue_ops'", "]", "=", "enqueue_ops", "\n", "", "if", "all_top_1_ops", ":", "\n", "      ", "fetches", "[", "'top_1_accuracy'", "]", "=", "tf", ".", "reduce_sum", "(", "all_top_1_ops", ")", "/", "self", ".", "batch_size", "\n", "if", "self", ".", "task_index", "==", "0", "and", "self", ".", "params", ".", "summary_verbosity", ">=", "1", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "'top_1_accuracy'", ",", "fetches", "[", "'top_1_accuracy'", "]", ")", "\n", "", "", "if", "all_top_5_ops", ":", "\n", "      ", "fetches", "[", "'top_5_accuracy'", "]", "=", "tf", ".", "reduce_sum", "(", "all_top_5_ops", ")", "/", "self", ".", "batch_size", "\n", "if", "self", ".", "task_index", "==", "0", "and", "self", ".", "params", ".", "summary_verbosity", ">=", "1", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "'top_5_accuracy'", ",", "fetches", "[", "'top_5_accuracy'", "]", ")", "\n", "\n", "", "", "if", "not", "phase_train", ":", "\n", "      ", "if", "self", ".", "params", ".", "forward_only", ":", "\n", "        ", "fetches", "[", "'all_logits'", "]", "=", "tf", ".", "concat", "(", "all_logits", ",", "0", ")", "\n", "", "return", "fetches", "\n", "", "apply_gradient_devices", ",", "gradient_state", "=", "(", "\n", "self", ".", "variable_mgr", ".", "preprocess_device_grads", "(", "device_grads", ")", ")", "\n", "\n", "training_ops", "=", "[", "]", "\n", "for", "d", ",", "device", "in", "enumerate", "(", "apply_gradient_devices", ")", ":", "\n", "      ", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'average_loss'", ")", ":", "\n", "          ", "average_loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'get_gradients_to_apply'", ")", ":", "\n", "          ", "avg_grads", "=", "self", ".", "variable_mgr", ".", "get_gradients_to_apply", "(", "d", ",", "\n", "gradient_state", ")", "\n", "\n", "", "gradient_clip", "=", "self", ".", "params", ".", "gradient_clip", "\n", "# TODO(reedwm): Greatly simplify the learning rate code.", "\n", "if", "(", "self", ".", "params", ".", "variable_update", "==", "'horovod'", "or", "\n", "self", ".", "params", ".", "variable_update", "==", "'collective_all_reduce'", ")", ":", "\n", "# Each worker independently increments global_step.", "\n", "          ", "examples_per_step", "=", "self", ".", "batch_size", "*", "self", ".", "num_workers", "\n", "", "else", ":", "\n", "# global_step is shared by all workers, and so every iteration", "\n", "# global_step is incremented by num_workers.", "\n", "          ", "examples_per_step", "=", "self", ".", "batch_size", "\n", "", "learning_rate", "=", "get_learning_rate", "(", "self", ".", "params", ",", "global_step", ",", "\n", "self", ".", "dataset", ".", "num_examples_per_epoch", "(", ")", ",", "\n", "self", ".", "model", ",", "examples_per_step", ")", "\n", "\n", "if", "gradient_clip", "is", "not", "None", ":", "\n", "          ", "with", "tf", ".", "name_scope", "(", "'clip_gradients'", ")", ":", "\n", "            ", "clipped_grads", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "gradient_clip", ",", "\n", "+", "gradient_clip", ")", ",", "var", ")", "\n", "for", "grad", ",", "var", "in", "avg_grads", "]", "\n", "", "", "else", ":", "\n", "          ", "clipped_grads", "=", "avg_grads", "\n", "\n", "", "learning_rate", "=", "tf", ".", "identity", "(", "learning_rate", ",", "name", "=", "'learning_rate_tensor'", ")", "\n", "opt", "=", "get_optimizer", "(", "self", ".", "params", ",", "learning_rate", ")", "\n", "loss_scale_params", "=", "variable_mgr_util", ".", "AutoLossScaleParams", "(", "\n", "enable_auto_loss_scale", "=", "self", ".", "enable_auto_loss_scale", ",", "\n", "loss_scale", "=", "self", ".", "loss_scale", ",", "\n", "loss_scale_normal_steps", "=", "self", ".", "loss_scale_normal_steps", ",", "\n", "inc_loss_scale_every_n", "=", "self", ".", "params", ".", "fp16_inc_loss_scale_every_n", ",", "\n", "is_chief", "=", "not", "self", ".", "job_name", "or", "self", ".", "task_index", "==", "0", ")", "\n", "print", "(", "'grad_check'", ")", "\n", "clipped_grads", "=", "[", "(", "tf", ".", "check_numerics", "(", "grad", ",", "var", ".", "name", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "clipped_grads", "]", "\n", "with", "tf", ".", "name_scope", "(", "'append_apply_gradient_ops'", ")", ":", "\n", "          ", "self", ".", "variable_mgr", ".", "append_apply_gradients_ops", "(", "\n", "gradient_state", ",", "opt", ",", "clipped_grads", ",", "training_ops", ",", "\n", "loss_scale_params", ")", "\n", "\n", "", "", "", "train_op", "=", "tf", ".", "group", "(", "*", "(", "training_ops", "+", "update_ops", ")", ",", "name", "=", "'train_ops_group'", ")", "\n", "\n", "with", "tf", ".", "device", "(", "self", ".", "cpu_device", ")", ":", "\n", "      ", "if", "self", ".", "task_index", "==", "0", "and", "self", ".", "params", ".", "summary_verbosity", ">=", "1", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "self", ".", "params", ".", "loss_type_to_report", ",", "average_loss", ")", "\n", "if", "self", ".", "loss_scale", "is", "not", "None", ":", "\n", "          ", "tf", ".", "summary", ".", "scalar", "(", "'loss_scale'", ",", "self", ".", "loss_scale", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_scale_normal_steps'", ",", "\n", "self", ".", "loss_scale_normal_steps", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "summary_verbosity", ">=", "2", ":", "\n", "          ", "self", ".", "gradient_histogram_summary", "(", "avg_grads", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "summary_verbosity", ">=", "3", ":", "\n", "          ", "for", "grad", ",", "var", "in", "avg_grads", ":", "\n", "            ", "if", "grad", "is", "not", "None", ":", "\n", "              ", "tf", ".", "summary", ".", "histogram", "(", "var", ".", "op", ".", "name", "+", "'/gradients'", ",", "grad", ")", "\n", "", "", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "var", ".", "op", ".", "name", ",", "var", ")", "\n", "\n", "", "", "", "", "fetches", "[", "'train_op'", "]", "=", "train_op", "\n", "fetches", "[", "'average_loss'", "]", "=", "average_loss", "\n", "return", "fetches", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.gradient_histogram_summary": [[2335, 2347], ["tensorflow.name_scope", "tensorflow.abs", "tensorflow.where", "tensorflow.reshape", "tensorflow.summary.histogram", "all_grads.append", "tensorflow.concat", "tensorflow.not_equal", "tensorflow.log", "tensorflow.reshape", "tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["", "def", "gradient_histogram_summary", "(", "self", ",", "avg_grads", ")", ":", "\n", "    ", "\"\"\"Create histogram of log values of all non-zero gradients.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'log_gradients_summary'", ")", ":", "\n", "      ", "all_grads", "=", "[", "]", "\n", "for", "grad", ",", "_", "in", "avg_grads", ":", "\n", "        ", "all_grads", ".", "append", "(", "tf", ".", "reshape", "(", "grad", ",", "[", "-", "1", "]", ")", ")", "\n", "", "grads", "=", "tf", ".", "abs", "(", "tf", ".", "concat", "(", "all_grads", ",", "0", ")", ")", "\n", "# exclude grads with zero values.", "\n", "indices_for_non_zero_grads", "=", "tf", ".", "where", "(", "tf", ".", "not_equal", "(", "grads", ",", "0", ")", ")", "\n", "log_grads", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "log", "(", "tf", ".", "gather", "(", "grads", ",", "indices_for_non_zero_grads", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'log_gradients'", ",", "log_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_model_single_session": [[2348, 2447], ["tensorflow.set_random_seed", "numpy.random.seed", "cnn_util.log_fn", "range", "enqueue_ops.append", "benchmark_cnn.BenchmarkCNN._build_fetches", "tensorflow.group", "tensorflow.device", "tensorflow.train.get_or_create_global_step", "benchmark_cnn.BenchmarkCNN.reset_devices_for_task", "tensorflow.group.extend", "range", "tensorflow.group", "benchmark_cnn.BenchmarkCNN.variable_mgr.supports_staged_vars", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN._build_input_processing", "len", "benchmark_cnn.BenchmarkCNN.variable_mgr.create_outer_variable_scope", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients", "len", "losses.append", "device_grads.append", "all_logits.append", "all_top_1_ops.append", "all_top_5_ops.append", "update_ops.extend", "float", "tensorflow.get_collection"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_fetches", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.reset_devices_for_task", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.supports_staged_vars", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_input_processing", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.create_outer_variable_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients"], ["", "", "def", "_build_model_single_session", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the TensorFlow graph for multiple replicas in a single_session.\n\n    Returns:\n      input_producer_op:\n      enqueue_ops:\n      fetches:\n\n    Raises:\n       ValueError: optimizer not recognized.\n\n    Single session runs multiple model replicas as part of one large\n    distributed graph, whose global execution is always step-synchronized.\n    \"\"\"", "\n", "# verify assumptions", "\n", "assert", "self", ".", "params", ".", "task_index", "==", "0", "\n", "assert", "not", "self", ".", "params", ".", "eval", "\n", "assert", "not", "self", ".", "params", ".", "forward_only", "\n", "assert", "not", "self", ".", "params", ".", "staged_vars", "\n", "\n", "tf", ".", "set_random_seed", "(", "self", ".", "params", ".", "tf_random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "4321", ")", "\n", "phase_train", "=", "True", "\n", "\n", "log_fn", "(", "'Generating model'", ")", "\n", "losses", "=", "[", "]", "\n", "device_grads", "=", "[", "]", "\n", "all_logits", "=", "[", "]", "\n", "all_top_1_ops", "=", "[", "]", "\n", "all_top_5_ops", "=", "[", "]", "\n", "enqueue_ops", "=", "[", "]", "\n", "gpu_compute_stage_ops", "=", "[", "]", "\n", "gpu_grad_stage_ops", "=", "[", "]", "\n", "\n", "with", "tf", ".", "device", "(", "self", ".", "global_step_device", ")", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "\n", "", "update_ops", "=", "[", "]", "\n", "global_input_producer_op", "=", "[", "]", "\n", "\n", "is_local", "=", "not", "self", ".", "job_name", "\n", "if", "is_local", ":", "\n", "      ", "assert", "self", ".", "num_workers", "==", "1", "\n", "", "for", "task_num", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "# Reset the devices that self.variable_mgr knows about to those", "\n", "# belonging to the next worker (task).", "\n", "      ", "self", ".", "reset_devices_for_task", "(", "task_num", ",", "is_local", ")", "\n", "# Build the per-worker image processing", "\n", "with", "tf", ".", "name_scope", "(", "'input_processing'", ")", ":", "\n", "        ", "(", "input_producer_op", ",", "input_producer_stages", ")", "=", "(", "\n", "self", ".", "_build_input_processing", "(", "\n", "shift_ratio", "=", "(", "float", "(", "task_num", ")", "/", "self", ".", "num_workers", ")", ")", ")", "\n", "", "global_input_producer_op", ".", "extend", "(", "input_producer_op", ")", "\n", "# Build the per-worker model replica.", "\n", "for", "rel_device_num", "in", "range", "(", "len", "(", "self", ".", "devices", ")", ")", ":", "\n", "        ", "abs_device_num", "=", "task_num", "*", "len", "(", "self", ".", "devices", ")", "+", "rel_device_num", "\n", "with", "self", ".", "variable_mgr", ".", "create_outer_variable_scope", "(", "\n", "abs_device_num", ")", ",", "tf", ".", "name_scope", "(", "\n", "'task_%i_tower_%i'", "%", "(", "task_num", ",", "rel_device_num", ")", ")", "as", "name_scope", ":", "\n", "          ", "task_results", "=", "self", ".", "add_forward_pass_and_gradients", "(", "\n", "phase_train", ",", "rel_device_num", ",", "abs_device_num", ",", "\n", "input_producer_stages", "[", "rel_device_num", "]", ",", "gpu_compute_stage_ops", ",", "\n", "gpu_grad_stage_ops", ")", "\n", "if", "phase_train", ":", "\n", "            ", "losses", ".", "append", "(", "task_results", "[", "'loss'", "]", ")", "\n", "device_grads", ".", "append", "(", "task_results", "[", "'gradvars'", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_logits", ".", "append", "(", "task_results", "[", "'logits'", "]", ")", "\n", "", "if", "not", "phase_train", "or", "self", ".", "params", ".", "print_training_accuracy", ":", "\n", "            ", "all_top_1_ops", ".", "append", "(", "task_results", "[", "'top_1_op'", "]", ")", "\n", "all_top_5_ops", ".", "append", "(", "task_results", "[", "'top_5_op'", "]", ")", "\n", "\n", "", "if", "rel_device_num", "==", "0", ":", "\n", "# Retain the Batch Normalization updates operations only", "\n", "# from the first tower. These operations update the moving", "\n", "# mean and moving variance variables, which are updated", "\n", "# (but not used) during training, and used during", "\n", "# evaluation. The moving mean and variance approximate the", "\n", "# true mean and variance across all images in the", "\n", "# dataset. Therefore, in replicated mode, these moving", "\n", "# averages would be almost identical for each tower, and", "\n", "# so we only update and save the moving averages for one", "\n", "# tower. In parameter server mode, all towers share a copy", "\n", "# of the variables so we also only need to update and save", "\n", "# the moving averages once.", "\n", "            ", "update_ops", ".", "extend", "(", "\n", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "name_scope", ")", ")", "\n", "assert", "not", "self", ".", "variable_mgr", ".", "staging_delta_ops", "\n", "\n", "", "", "", "", "enqueue_ops", ".", "append", "(", "tf", ".", "group", "(", "*", "gpu_compute_stage_ops", ",", "\n", "name", "=", "'gpu_compute_stage_ops'", ")", ")", "\n", "assert", "not", "self", ".", "variable_mgr", ".", "supports_staged_vars", "(", ")", "\n", "assert", "not", "gpu_grad_stage_ops", "\n", "\n", "fetches", "=", "self", ".", "_build_fetches", "(", "global_step", ",", "all_logits", ",", "losses", ",", "device_grads", ",", "\n", "enqueue_ops", ",", "update_ops", ",", "all_top_1_ops", ",", "\n", "all_top_5_ops", ",", "phase_train", ")", "\n", "global_input_producer_op", "=", "tf", ".", "group", "(", "*", "global_input_producer_op", ")", "\n", "return", "(", "global_input_producer_op", ",", "enqueue_ops", ",", "fetches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_model_single_session_with_dataset_prefetching": [[2450, 2546], ["tensorflow.set_random_seed", "numpy.random.seed", "cnn_util.log_fn", "range", "benchmark_cnn.BenchmarkCNN._build_fetches", "tensorflow.device", "tensorflow.train.get_or_create_global_step", "benchmark_cnn.BenchmarkCNN.reset_devices_for_task", "range", "benchmark_cnn.BenchmarkCNN.variable_mgr.supports_staged_vars", "tensorflow.name_scope", "data_utils.build_prefetch_image_processing", "len", "benchmark_cnn.BenchmarkCNN.model.get_image_size", "benchmark_cnn.BenchmarkCNN.model.get_image_size", "len", "benchmark_cnn.get_data_type", "benchmark_cnn.BenchmarkCNN.variable_mgr.create_outer_variable_scope", "tensorflow.name_scope", "benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients", "len", "len", "losses.append", "device_grads.append", "all_logits.append", "all_top_1_ops.append", "all_top_5_ops.append", "update_ops.extend", "tensorflow.get_collection"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN._build_fetches", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.reset_devices_for_task", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.supports_staged_vars", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.build_prefetch_image_processing", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_data_type", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.create_outer_variable_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients"], ["", "def", "_build_model_single_session_with_dataset_prefetching", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the TensorFlow graph for multiple replicas in a single_session.\n\n    Returns:\n      input_producer_op:\n      enqueue_ops:\n      fetches:\n\n    Raises:\n       ValueError: optimizer not recognized.\n\n    Single session runs multiple model replicas as part of one large\n    distributed graph, whose global execution is always step-synchronized.\n    \"\"\"", "\n", "# verify assumptions", "\n", "assert", "self", ".", "params", ".", "task_index", "==", "0", "\n", "assert", "not", "self", ".", "params", ".", "eval", "\n", "assert", "not", "self", ".", "params", ".", "forward_only", "\n", "assert", "not", "self", ".", "params", ".", "staged_vars", "\n", "\n", "tf", ".", "set_random_seed", "(", "self", ".", "params", ".", "tf_random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "4321", ")", "\n", "phase_train", "=", "True", "\n", "\n", "log_fn", "(", "'Generating model'", ")", "\n", "losses", "=", "[", "]", "\n", "device_grads", "=", "[", "]", "\n", "all_logits", "=", "[", "]", "\n", "all_top_1_ops", "=", "[", "]", "\n", "all_top_5_ops", "=", "[", "]", "\n", "\n", "with", "tf", ".", "device", "(", "self", ".", "global_step_device", ")", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "\n", "", "update_ops", "=", "[", "]", "\n", "\n", "is_local", "=", "not", "self", ".", "job_name", "\n", "if", "is_local", ":", "\n", "      ", "assert", "self", ".", "num_workers", "==", "1", "\n", "", "for", "task_num", "in", "range", "(", "self", ".", "num_workers", ")", ":", "\n", "# Reset the devices that self.variable_mgr knows about to those", "\n", "# belonging to the next worker (task).", "\n", "      ", "self", ".", "reset_devices_for_task", "(", "task_num", ",", "is_local", ")", "\n", "# Build the per-worker image processing", "\n", "with", "tf", ".", "name_scope", "(", "'input_processing'", ")", ":", "\n", "        ", "function_buffering_resources", "=", "(", "\n", "data_utils", ".", "build_prefetch_image_processing", "(", "\n", "self", ".", "model", ".", "get_image_size", "(", ")", ",", "self", ".", "model", ".", "get_image_size", "(", ")", ",", "\n", "self", ".", "batch_size", "//", "len", "(", "self", ".", "devices", ")", ",", "len", "(", "\n", "self", ".", "devices", ")", ",", "self", ".", "image_preprocessor", ".", "parse_and_preprocess", ",", "\n", "self", ".", "cpu_device", ",", "self", ".", "params", ",", "self", ".", "devices", ",", "\n", "get_data_type", "(", "self", ".", "params", ")", ",", "self", ".", "dataset", ")", ")", "\n", "\n", "# Build the per-worker model replica.", "\n", "", "for", "rel_device_num", "in", "range", "(", "len", "(", "self", ".", "devices", ")", ")", ":", "\n", "        ", "abs_device_num", "=", "task_num", "*", "len", "(", "self", ".", "devices", ")", "+", "rel_device_num", "\n", "with", "self", ".", "variable_mgr", ".", "create_outer_variable_scope", "(", "\n", "abs_device_num", ")", ",", "tf", ".", "name_scope", "(", "\n", "'task_%i_tower_%i'", "%", "(", "task_num", ",", "rel_device_num", ")", ")", "as", "name_scope", ":", "\n", "          ", "function_buffering_resource", "=", "(", "\n", "function_buffering_resources", "[", "rel_device_num", "]", ")", "\n", "task_results", "=", "self", ".", "add_forward_pass_and_gradients", "(", "\n", "phase_train", ",", "rel_device_num", ",", "abs_device_num", ",", "None", ",", "None", ",", "None", ",", "\n", "function_buffering_resource", ")", "\n", "if", "phase_train", ":", "\n", "            ", "losses", ".", "append", "(", "task_results", "[", "'loss'", "]", ")", "\n", "device_grads", ".", "append", "(", "task_results", "[", "'gradvars'", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_logits", ".", "append", "(", "task_results", "[", "'logits'", "]", ")", "\n", "", "if", "not", "phase_train", "or", "self", ".", "params", ".", "print_training_accuracy", ":", "\n", "            ", "all_top_1_ops", ".", "append", "(", "task_results", "[", "'top_1_op'", "]", ")", "\n", "all_top_5_ops", ".", "append", "(", "task_results", "[", "'top_5_op'", "]", ")", "\n", "\n", "", "if", "rel_device_num", "==", "0", ":", "\n", "# Retain the Batch Normalization updates operations only", "\n", "# from the first tower. These operations update the moving", "\n", "# mean and moving variance variables, which are updated", "\n", "# (but not used) during training, and used during", "\n", "# evaluation. The moving mean and variance approximate the", "\n", "# true mean and variance across all images in the", "\n", "# dataset. Therefore, in replicated mode, these moving", "\n", "# averages would be almost identical for each tower, and", "\n", "# so we only update and save the moving averages for one", "\n", "# tower. In parameter server mode, all towers share a copy", "\n", "# of the variables so we also only need to update and save", "\n", "# the moving averages once.", "\n", "            ", "update_ops", ".", "extend", "(", "\n", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "name_scope", ")", ")", "\n", "assert", "not", "self", ".", "variable_mgr", ".", "staging_delta_ops", "\n", "\n", "", "", "", "", "assert", "not", "self", ".", "variable_mgr", ".", "supports_staged_vars", "(", ")", "\n", "\n", "fetches", "=", "self", ".", "_build_fetches", "(", "global_step", ",", "all_logits", ",", "losses", ",", "device_grads", ",", "\n", "None", ",", "update_ops", ",", "all_top_1_ops", ",", "\n", "all_top_5_ops", ",", "phase_train", ")", "\n", "return", "(", "None", ",", "[", "]", ",", "fetches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_forward_pass_and_gradients": [[2547, 2730], ["benchmark_cnn.get_data_type", "benchmark_cnn.BenchmarkCNN.model.get_image_size", "tensorflow.device", "benchmark_cnn.BenchmarkCNN.model.build_network", "loss_func", "benchmark_cnn.BenchmarkCNN.variable_mgr.trainable_variables_on_device", "print", "tensorflow.gradients", "benchmark_cnn.BenchmarkCNN.variable_mgr.trainable_variables_on_device", "list", "tensorflow.device", "data_utils.get_images_and_labels", "tensorflow.reshape", "tensorflow.device", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "print", "print", "int", "tensorflow.name_scope", "tensorflow.python.ops.data_flow_ops.StagingArea", "tensorflow.python.ops.data_flow_ops.StagingArea.put", "gpu_grad_stage_ops.append", "tensorflow.python.ops.data_flow_ops.StagingArea.get", "zip", "tensorflow.device", "image_producer_stage.get", "host_images.get_shape", "host_labels.get_shape", "tensorflow.python.ops.data_flow_ops.StagingArea", "tensorflow.python.ops.data_flow_ops.StagingArea.put", "tensorflow.python.ops.data_flow_ops.StagingArea.get", "tensorflow.reshape", "gpu_compute_stage_ops.append", "tensorflow.truncated_normal", "tensorflow.contrib.framework.local_variable", "tensorflow.random_uniform", "tensorflow.cast", "tensorflow.cast", "new_params.append", "hvd.allreduce", "tensorflow.nn.in_top_k", "tensorflow.nn.in_top_k", "new_params.append", "tensorflow.cast", "len", "tensorflow.nn.l2_loss", "tensorflow.add_n", "len", "tensorflow.cast", "new_params.append", "tensorflow.reshape", "tensorflow.concat", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_data_type", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.build_network", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.trainable_variables_on_device", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.trainable_variables_on_device", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.get_images_and_labels", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["", "def", "add_forward_pass_and_gradients", "(", "self", ",", "\n", "phase_train", ",", "\n", "rel_device_num", ",", "\n", "abs_device_num", ",", "\n", "image_producer_stage", ",", "\n", "gpu_compute_stage_ops", ",", "\n", "gpu_grad_stage_ops", ",", "\n", "function_buffering_resource", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add ops for forward-pass and gradient computations.\"\"\"", "\n", "nclass", "=", "self", ".", "dataset", ".", "num_classes", "\n", "data_type", "=", "get_data_type", "(", "self", ".", "params", ")", "\n", "image_size", "=", "self", ".", "model", ".", "get_image_size", "(", ")", "\n", "if", "self", ".", "datasets_use_prefetch", "and", "function_buffering_resource", "is", "not", "None", ":", "\n", "      ", "with", "tf", ".", "device", "(", "self", ".", "raw_devices", "[", "rel_device_num", "]", ")", ":", "\n", "        ", "images", ",", "labels", "=", "data_utils", ".", "get_images_and_labels", "(", "\n", "function_buffering_resource", ",", "data_type", ")", "\n", "images", "=", "tf", ".", "reshape", "(", "\n", "images", ",", "\n", "shape", "=", "[", "\n", "self", ".", "batch_size", "//", "self", ".", "num_gpus", ",", "image_size", ",", "image_size", ",", "\n", "self", ".", "dataset", ".", "depth", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "not", "self", ".", "use_synthetic_gpu_images", ":", "\n", "        ", "with", "tf", ".", "device", "(", "self", ".", "cpu_device", ")", ":", "\n", "          ", "host_images", ",", "host_labels", "=", "image_producer_stage", ".", "get", "(", ")", "\n", "images_shape", "=", "host_images", ".", "get_shape", "(", ")", "\n", "labels_shape", "=", "host_labels", ".", "get_shape", "(", ")", "\n", "", "", "with", "tf", ".", "device", "(", "self", ".", "raw_devices", "[", "rel_device_num", "]", ")", ":", "\n", "        ", "if", "not", "self", ".", "use_synthetic_gpu_images", ":", "\n", "          ", "gpu_compute_stage", "=", "data_flow_ops", ".", "StagingArea", "(", "\n", "[", "host_images", ".", "dtype", ",", "host_labels", ".", "dtype", "]", ",", "\n", "shapes", "=", "[", "images_shape", ",", "labels_shape", "]", ")", "\n", "# The CPU-to-GPU copy is triggered here.", "\n", "gpu_compute_stage_op", "=", "gpu_compute_stage", ".", "put", "(", "\n", "[", "host_images", ",", "host_labels", "]", ")", "\n", "images", ",", "labels", "=", "gpu_compute_stage", ".", "get", "(", ")", "\n", "images", "=", "tf", ".", "reshape", "(", "images", ",", "shape", "=", "images_shape", ")", "\n", "gpu_compute_stage_ops", ".", "append", "(", "gpu_compute_stage_op", ")", "\n", "", "else", ":", "\n", "# Minor hack to avoid H2D copy when using synthetic data", "\n", "          ", "image_shape", "=", "[", "\n", "self", ".", "batch_size", "//", "self", ".", "num_gpus", ",", "image_size", ",", "image_size", ",", "\n", "self", ".", "dataset", ".", "depth", "\n", "]", "\n", "labels_shape", "=", "[", "self", ".", "batch_size", "//", "self", ".", "num_gpus", "]", "\n", "# Synthetic image should be within [0, 255].", "\n", "images", "=", "tf", ".", "truncated_normal", "(", "\n", "image_shape", ",", "\n", "dtype", "=", "data_type", ",", "\n", "mean", "=", "127", ",", "\n", "stddev", "=", "60", ",", "\n", "name", "=", "'synthetic_images'", ")", "\n", "images", "=", "tf", ".", "contrib", ".", "framework", ".", "local_variable", "(", "\n", "images", ",", "name", "=", "BenchmarkCNN", ".", "GPU_CACHED_IMAGES_VARIABLE_NAME", ")", "\n", "labels", "=", "tf", ".", "random_uniform", "(", "\n", "labels_shape", ",", "\n", "minval", "=", "0", ",", "\n", "maxval", "=", "nclass", "-", "1", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'synthetic_labels'", ")", "\n", "\n", "", "", "", "with", "tf", ".", "device", "(", "self", ".", "devices", "[", "rel_device_num", "]", ")", ":", "\n", "      ", "logits", ",", "aux_logits", "=", "self", ".", "model", ".", "build_network", "(", "\n", "images", ",", "phase_train", ",", "nclass", ",", "self", ".", "dataset", ".", "depth", ",", "data_type", ",", "\n", "self", ".", "data_format", ",", "self", ".", "params", ".", "use_tf_layers", ",", "self", ".", "params", ".", "fp16_vars", ")", "\n", "results", "=", "{", "}", "# The return value", "\n", "if", "not", "phase_train", "or", "self", ".", "params", ".", "print_training_accuracy", ":", "\n", "        ", "top_1_op", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "tf", ".", "nn", ".", "in_top_k", "(", "logits", ",", "labels", ",", "1", ")", ",", "data_type", ")", ")", "\n", "top_5_op", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "tf", ".", "nn", ".", "in_top_k", "(", "logits", ",", "labels", ",", "5", ")", ",", "data_type", ")", ")", "\n", "results", "[", "'top_1_op'", "]", "=", "top_1_op", "\n", "results", "[", "'top_5_op'", "]", "=", "top_5_op", "\n", "\n", "", "if", "not", "phase_train", ":", "\n", "        ", "results", "[", "'logits'", "]", "=", "logits", "\n", "return", "results", "\n", "", "loss_func", "=", "self", ".", "model", ".", "loss_function", "or", "loss_function", "\n", "base_loss", "=", "loss_func", "(", "logits", ",", "labels", ",", "aux_logits", "=", "aux_logits", ")", "\n", "params", "=", "self", ".", "variable_mgr", ".", "trainable_variables_on_device", "(", "\n", "rel_device_num", ",", "abs_device_num", ")", "\n", "l2_loss", "=", "None", "\n", "total_loss", "=", "base_loss", "\n", "gct_param_num", "=", "0", "\n", "new_params", "=", "[", "]", "\n", "\n", "is_beta_wd", "=", "self", ".", "params", ".", "weight_decay_on_beta", "# whether apply WD on beta or not", "\n", "\n", "if", "is_beta_wd", ":", "\n", "        ", "print", "(", "\"Apply WD on beta.\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"No WD on beta.\"", ")", "\n", "\n", "", "for", "p", "in", "params", ":", "\n", "        ", "if", "'GCT'", "in", "p", ".", "name", ":", "\n", "          ", "gct_param_num", "+=", "1", "\n", "if", "is_beta_wd", ":", "\n", "            ", "new_params", ".", "append", "(", "p", ")", "\n", "", "else", ":", "\n", "            ", "if", "'beta'", "not", "in", "p", ".", "name", ":", "\n", "              ", "new_params", ".", "append", "(", "p", ")", "\n", "", "", "", "else", ":", "\n", "          ", "new_params", ".", "append", "(", "p", ")", "\n", "\n", "", "", "print", "(", "'GCT num:'", ",", "int", "(", "gct_param_num", "/", "3", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'l2_loss'", ")", ":", "\n", "        ", "fp32_params", "=", "new_params", "\n", "if", "data_type", "==", "tf", ".", "float16", "and", "self", ".", "params", ".", "fp16_vars", ":", "\n", "# fp16 reductions are very slow on GPUs, so cast to fp32 before", "\n", "# calling tf.nn.l2_loss and tf.add_n.", "\n", "# TODO(b/36217816): Once the bug is fixed, investigate if we should do", "\n", "# this reduction in fp16.", "\n", "          ", "fp32_params", "=", "(", "tf", ".", "cast", "(", "p", ",", "tf", ".", "float32", ")", "for", "p", "in", "new_params", ")", "\n", "", "if", "rel_device_num", "==", "len", "(", "self", ".", "devices", ")", "-", "1", ":", "\n", "# We compute the L2 loss for only one device instead of all of them,", "\n", "# because the L2 loss for each device is the same. To adjust for this,", "\n", "# we multiply the L2 loss by the number of devices. We choose the", "\n", "# last device because for some reason, on a Volta DGX1, the first four", "\n", "# GPUs take slightly longer to complete a step than the last four.", "\n", "# TODO(reedwm): Shard the L2 loss computations across GPUs.", "\n", "          ", "if", "self", ".", "params", ".", "single_l2_loss_op", ":", "\n", "# TODO(reedwm): If faster, create a fused op that does the L2 loss", "\n", "# on multiple tensors, and use that instead of concatenating", "\n", "# tensors.", "\n", "            ", "reshaped_params", "=", "[", "tf", ".", "reshape", "(", "p", ",", "(", "-", "1", ",", ")", ")", "for", "p", "in", "fp32_params", "]", "\n", "l2_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "concat", "(", "reshaped_params", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "l2_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "fp32_params", "]", ")", "\n", "", "", "", "weight_decay", "=", "self", ".", "params", ".", "weight_decay", "\n", "if", "(", "weight_decay", "is", "not", "None", "and", "weight_decay", "!=", "0.", "and", "\n", "l2_loss", "is", "not", "None", ")", ":", "\n", "        ", "total_loss", "+=", "len", "(", "self", ".", "devices", ")", "*", "weight_decay", "*", "l2_loss", "\n", "\n", "", "aggmeth", "=", "tf", ".", "AggregationMethod", ".", "DEFAULT", "\n", "scaled_loss", "=", "(", "total_loss", "if", "self", ".", "loss_scale", "is", "None", "\n", "else", "total_loss", "*", "self", ".", "loss_scale", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "scaled_loss", ",", "params", ",", "aggregation_method", "=", "aggmeth", ")", "\n", "if", "self", ".", "loss_scale", "is", "not", "None", ":", "\n", "# TODO(reedwm): If automatic loss scaling is not used, we could avoid", "\n", "# these multiplications by directly modifying the learning rate instead.", "\n", "# If this is done, care must be taken to ensure that this scaling method", "\n", "# is correct, as some optimizers square gradients and do other", "\n", "# operations which might not be compatible with modifying both the", "\n", "# gradients and the learning rate.", "\n", "\n", "        ", "grads", "=", "[", "\n", "grad", "*", "tf", ".", "cast", "(", "1.", "/", "self", ".", "loss_scale", ",", "grad", ".", "dtype", ")", "for", "grad", "in", "grads", "\n", "]", "\n", "\n", "", "if", "self", ".", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "        ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "if", "self", ".", "params", ".", "horovod_device", ":", "\n", "          ", "horovod_device", "=", "'/%s:0'", "%", "self", ".", "params", ".", "horovod_device", "\n", "", "else", ":", "\n", "          ", "horovod_device", "=", "''", "\n", "# All-reduce gradients using Horovod.", "\n", "", "grads", "=", "[", "hvd", ".", "allreduce", "(", "grad", ",", "average", "=", "False", ",", "device_dense", "=", "horovod_device", ")", "\n", "for", "grad", "in", "grads", "]", "\n", "\n", "", "if", "self", ".", "params", ".", "staged_vars", ":", "\n", "        ", "grad_dtypes", "=", "[", "grad", ".", "dtype", "for", "grad", "in", "grads", "]", "\n", "grad_shapes", "=", "[", "grad", ".", "shape", "for", "grad", "in", "grads", "]", "\n", "grad_stage", "=", "data_flow_ops", ".", "StagingArea", "(", "grad_dtypes", ",", "grad_shapes", ")", "\n", "grad_stage_op", "=", "grad_stage", ".", "put", "(", "grads", ")", "\n", "# In general, this decouples the computation of the gradients and", "\n", "# the updates of the weights.", "\n", "# During the pipeline warm up, this runs enough training to produce", "\n", "# the first set of gradients.", "\n", "gpu_grad_stage_ops", ".", "append", "(", "grad_stage_op", ")", "\n", "grads", "=", "grad_stage", ".", "get", "(", ")", "\n", "\n", "", "param_refs", "=", "self", ".", "variable_mgr", ".", "trainable_variables_on_device", "(", "\n", "rel_device_num", ",", "abs_device_num", ",", "writable", "=", "True", ")", "\n", "gradvars", "=", "list", "(", "zip", "(", "grads", ",", "param_refs", ")", ")", "\n", "if", "self", ".", "params", ".", "loss_type_to_report", "==", "'total_loss'", ":", "\n", "        ", "results", "[", "'loss'", "]", "=", "total_loss", "\n", "", "else", ":", "\n", "        ", "results", "[", "'loss'", "]", "=", "base_loss", "\n", "", "results", "[", "'gradvars'", "]", "=", "gradvars", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.get_image_preprocessor": [[2731, 2762], ["benchmark_cnn.BenchmarkCNN.model.get_image_size", "benchmark_cnn.get_data_type", "benchmark_cnn.BenchmarkCNN.dataset.get_image_preprocessor", "benchmark_cnn.BenchmarkCNN.", "float", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_data_type", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.get_image_preprocessor"], ["", "", "def", "get_image_preprocessor", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns the image preprocessor to used, based on the model.\n\n    Returns:\n      The image preprocessor, or None if synthetic data should be used.\n    \"\"\"", "\n", "image_size", "=", "self", ".", "model", ".", "get_image_size", "(", ")", "\n", "input_data_type", "=", "get_data_type", "(", "self", ".", "params", ")", "\n", "\n", "shift_ratio", "=", "0", "\n", "if", "self", ".", "job_name", ":", "\n", "# shift_ratio prevents multiple workers from processing the same batch", "\n", "# during a step", "\n", "      ", "shift_ratio", "=", "float", "(", "self", ".", "task_index", ")", "/", "self", ".", "num_workers", "\n", "\n", "", "processor_class", "=", "self", ".", "dataset", ".", "get_image_preprocessor", "(", "\n", "self", ".", "params", ".", "input_preprocessor", ")", "\n", "assert", "processor_class", "\n", "return", "processor_class", "(", "\n", "image_size", ",", "\n", "image_size", ",", "\n", "self", ".", "batch_size", "*", "self", ".", "batch_group_size", ",", "\n", "len", "(", "self", ".", "devices", ")", "*", "self", ".", "batch_group_size", ",", "\n", "dtype", "=", "input_data_type", ",", "\n", "train", "=", "(", "not", "self", ".", "params", ".", "eval", ")", ",", "\n", "distortions", "=", "self", ".", "params", ".", "distortions", ",", "\n", "resize_method", "=", "self", ".", "resize_method", ",", "\n", "shift_ratio", "=", "shift_ratio", ",", "\n", "summary_verbosity", "=", "self", ".", "params", ".", "summary_verbosity", ",", "\n", "distort_color_in_yiq", "=", "self", ".", "params", ".", "distort_color_in_yiq", ",", "\n", "fuse_decode_and_crop", "=", "self", ".", "params", ".", "fuse_decode_and_crop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier": [[2763, 2796], ["tensorflow.device", "tensorflow.constant", "queue_ops.append", "tensorflow.group", "tensorflow.FIFOQueue", "tensorflow.control_dependencies", "enumerate", "sync_queues[].dequeue_many", "range", "queue_ops.append", "queue_ops.append", "len", "len", "tensorflow.no_op", "q.enqueue"], "methods", ["None"], ["", "def", "add_sync_queues_and_barrier", "(", "self", ",", "name_prefix", ",", "enqueue_after_list", ")", ":", "\n", "    ", "\"\"\"Adds ops to enqueue on all worker queues.\n\n    Args:\n      name_prefix: prefixed for the shared_name of ops.\n      enqueue_after_list: control dependency from ops.\n\n    Returns:\n      An op that should be used as control dependency before starting next step.\n    \"\"\"", "\n", "self", ".", "sync_queue_counter", "+=", "1", "\n", "with", "tf", ".", "device", "(", "self", ".", "sync_queue_devices", "[", "(", "\n", "self", ".", "sync_queue_counter", "%", "len", "(", "self", ".", "sync_queue_devices", ")", ")", "]", ")", ":", "\n", "      ", "sync_queues", "=", "[", "\n", "tf", ".", "FIFOQueue", "(", "self", ".", "num_workers", ",", "[", "tf", ".", "bool", "]", ",", "shapes", "=", "[", "[", "]", "]", ",", "\n", "shared_name", "=", "'%s%s'", "%", "(", "name_prefix", ",", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_workers", ")", "]", "\n", "queue_ops", "=", "[", "]", "\n", "# For each other worker, add an entry in a queue, signaling that it can", "\n", "# finish this step.", "\n", "token", "=", "tf", ".", "constant", "(", "False", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "enqueue_after_list", ")", ":", "\n", "        ", "for", "i", ",", "q", "in", "enumerate", "(", "sync_queues", ")", ":", "\n", "          ", "if", "i", "==", "self", ".", "task_index", ":", "\n", "            ", "queue_ops", ".", "append", "(", "tf", ".", "no_op", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "queue_ops", ".", "append", "(", "q", ".", "enqueue", "(", "token", ")", ")", "\n", "\n", "# Drain tokens off queue for this worker, one for each other worker.", "\n", "", "", "", "queue_ops", ".", "append", "(", "\n", "sync_queues", "[", "self", ".", "task_index", "]", ".", "dequeue_many", "(", "len", "(", "sync_queues", ")", "-", "1", ")", ")", "\n", "\n", "return", "tf", ".", "group", "(", "*", "queue_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT.__init__": [[2801, 2804], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ",", "dataset", "=", "None", ",", "model", "=", "None", ")", ":", "\n", "# pylint:disable=super-init-not-called", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_graph": [[2805, 2812], ["None"], "methods", ["None"], ["", "def", "_build_graph", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the graph.\n\n    Returns:\n      A namedtuple containing the ops/tensors required by _benchmark_graph().\n    \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model": [[2813, 2818], ["None"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the TensorFlow graph.\"\"\"", "\n", "\n", "# Not implemented since it's FLAGS.dataset_use_prefetch is default True.", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model_single_session": [[2819, 2824], ["None"], "methods", ["None"], ["", "def", "_build_model_single_session", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the TensorFlow graph for multiple replicas in a single_session.\"\"\"", "\n", "\n", "# Not implemented since it's FLAGS.dataset_use_prefetch is default True.", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model_with_dataset_prefetching": [[2825, 2827], ["None"], "methods", ["None"], ["", "def", "_build_model_with_dataset_prefetching", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model_single_session_with_dataset_prefetching": [[2828, 2830], ["None"], "methods", ["None"], ["", "def", "_build_model_single_session_with_dataset_prefetching", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_data_type": [[570, 578], ["None"], "function", ["None"], ["", "def", "get_data_type", "(", "params", ")", ":", "\n", "  ", "\"\"\"Returns BenchmarkCNN's data type as determined by use_fp16.\n\n  Args:\n    params: Params tuple, typically created by make_params or\n            make_params_from_flags.\n  \"\"\"", "\n", "return", "tf", ".", "float16", "if", "params", ".", "use_fp16", "else", "tf", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.loss_function": [[582, 595], ["tensorflow.name_scope", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.add_n", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "loss_function", "(", "logits", ",", "labels", ",", "aux_logits", ")", ":", "\n", "  ", "\"\"\"Loss function.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'xentropy'", ")", ":", "\n", "    ", "cross_entropy", "=", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "cross_entropy", ",", "name", "=", "'xentropy_mean'", ")", "\n", "", "if", "aux_logits", "is", "not", "None", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'aux_xentropy'", ")", ":", "\n", "      ", "aux_cross_entropy", "=", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "\n", "logits", "=", "aux_logits", ",", "labels", "=", "labels", ")", "\n", "aux_loss", "=", "0.4", "*", "tf", ".", "reduce_mean", "(", "aux_cross_entropy", ",", "name", "=", "'aux_loss'", ")", "\n", "loss", "=", "tf", ".", "add_n", "(", "[", "loss", ",", "aux_loss", "]", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.create_config_proto": [[597, 636], ["tensorflow.ConfigProto", "tensorflow.core.protobuf.rewriter_config_pb2.RewriterConfig", "google.protobuf.text_format.Merge", "tf.ConfigProto.graph_options.rewrite_options.CopyFrom", "str", "hvd.local_rank"], "function", ["None"], ["", "def", "create_config_proto", "(", "params", ")", ":", "\n", "  ", "\"\"\"Returns session config proto.\n\n  Args:\n    params: Params tuple, typically created by make_params or\n            make_params_from_flags.\n  \"\"\"", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "if", "params", ".", "num_intra_threads", "is", "None", ":", "\n", "    ", "if", "params", ".", "device", "==", "'gpu'", ":", "\n", "      ", "config", ".", "intra_op_parallelism_threads", "=", "1", "\n", "", "", "else", ":", "\n", "    ", "config", ".", "intra_op_parallelism_threads", "=", "params", ".", "num_intra_threads", "\n", "", "config", ".", "inter_op_parallelism_threads", "=", "params", ".", "num_inter_threads", "\n", "config", ".", "experimental", ".", "collective_group_leader", "=", "'/job:worker/replica:0/task:0'", "\n", "config", ".", "gpu_options", ".", "force_gpu_compatible", "=", "params", ".", "force_gpu_compatible", "\n", "if", "params", ".", "allow_growth", "is", "not", "None", ":", "\n", "    ", "config", ".", "gpu_options", ".", "allow_growth", "=", "params", ".", "allow_growth", "\n", "", "if", "params", ".", "gpu_memory_frac_for_testing", ">", "0", ":", "\n", "    ", "config", ".", "gpu_options", ".", "per_process_gpu_memory_fraction", "=", "(", "\n", "params", ".", "gpu_memory_frac_for_testing", ")", "\n", "", "if", "params", ".", "xla", ":", "\n", "    ", "config", ".", "graph_options", ".", "optimizer_options", ".", "global_jit_level", "=", "(", "\n", "tf", ".", "OptimizerOptions", ".", "ON_1", ")", "\n", "", "if", "params", ".", "enable_layout_optimizer", ":", "\n", "    ", "config", ".", "graph_options", ".", "rewrite_options", ".", "layout_optimizer", "=", "(", "\n", "rewriter_config_pb2", ".", "RewriterConfig", ".", "ON", ")", "\n", "", "if", "params", ".", "rewriter_config", ":", "\n", "    ", "rewriter_config", "=", "rewriter_config_pb2", ".", "RewriterConfig", "(", ")", "\n", "text_format", ".", "Merge", "(", "params", ".", "rewriter_config", ",", "rewriter_config", ")", "\n", "config", ".", "graph_options", ".", "rewrite_options", ".", "CopyFrom", "(", "rewriter_config", ")", "\n", "", "if", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "    ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "config", ".", "gpu_options", ".", "visible_device_list", "=", "str", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "", "if", "params", ".", "variable_update", "==", "'collective_all_reduce'", ":", "\n", "    ", "config", ".", "gpu_options", ".", "experimental", ".", "num_dev_to_dev_copy_streams", "=", "2", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_mode_from_params": [[638, 655], ["ValueError"], "function", ["None"], ["", "def", "get_mode_from_params", "(", "params", ")", ":", "\n", "  ", "\"\"\"Returns the mode in which this script is running.\n\n  Args:\n    params: Params tuple, typically created by make_params or\n            make_params_from_flags.\n  Raises:\n    ValueError: Unsupported params settings.\n  \"\"\"", "\n", "if", "params", ".", "forward_only", "and", "params", ".", "eval", ":", "\n", "    ", "raise", "ValueError", "(", "'Only one of forward_only and eval parameters is true'", ")", "\n", "\n", "", "if", "params", ".", "eval", ":", "\n", "    ", "return", "'evaluation'", "\n", "", "if", "params", ".", "forward_only", ":", "\n", "    ", "return", "'forward-only'", "\n", "", "return", "'training'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.benchmark_one_step": [[661, 760], ["time.time", "step_train_times.append", "tensorflow.RunOptions", "tensorflow.RunMetadata", "sess.run", "sess.run", "image_producer.notify_image_consumption", "time.time", "benchmark_cnn.get_perf_timing", "cnn_util.log_fn", "benchmark_logger.log_metric", "profiler.add_step", "cnn_util.log_fn", "os.path.dirname", "os.path.split", "filename.endswith", "benchmark_cnn.get_perf_timing_str", "benchmark_logger.log_metric", "benchmark_logger.log_metric", "tensorflow.python.platform.gfile.Exists", "tensorflow.python.platform.gfile.MakeDirs", "tensorflow.python.platform.gfile.Open", "filename.rsplit", "graph_def.node[].device.replace().replace", "cnn_util.log_fn", "tensorflow.train.write_graph", "tensorflow.python.client.timeline.Timeline", "trace_file.write", "trace_file.write", "timeline.Timeline.generate_chrome_trace_format", "str", "graph_def.node[].device.replace", "os.path.join"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.notify_image_consumption", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_perf_timing", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_perf_timing_str", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn"], ["def", "benchmark_one_step", "(", "sess", ",", "\n", "fetches", ",", "\n", "step", ",", "\n", "batch_size", ",", "\n", "step_train_times", ",", "\n", "trace_filename", ",", "\n", "partitioned_graph_file_prefix", ",", "\n", "profiler", ",", "\n", "image_producer", ",", "\n", "params", ",", "\n", "summary_op", "=", "None", ",", "\n", "show_images_per_sec", "=", "True", ",", "\n", "benchmark_logger", "=", "None", ",", "\n", "collective_graph_key", "=", "0", ")", ":", "\n", "  ", "\"\"\"Advance one step of benchmarking.\"\"\"", "\n", "should_profile", "=", "profiler", "and", "0", "<=", "step", "<", "_NUM_STEPS_TO_PROFILE", "\n", "need_options_and_metadata", "=", "(", "\n", "should_profile", "or", "collective_graph_key", ">", "0", "or", "\n", "(", "(", "trace_filename", "or", "partitioned_graph_file_prefix", ")", "and", "step", "==", "-", "2", ")", "\n", ")", "\n", "if", "need_options_and_metadata", ":", "\n", "    ", "run_options", "=", "tf", ".", "RunOptions", "(", ")", "\n", "if", "(", "trace_filename", "and", "step", "==", "-", "2", ")", "or", "should_profile", ":", "\n", "      ", "run_options", ".", "trace_level", "=", "tf", ".", "RunOptions", ".", "FULL_TRACE", "\n", "", "if", "partitioned_graph_file_prefix", "and", "step", "==", "-", "2", ":", "\n", "      ", "run_options", ".", "output_partition_graphs", "=", "True", "\n", "", "if", "collective_graph_key", ">", "0", ":", "\n", "      ", "run_options", ".", "experimental", ".", "collective_graph_key", "=", "collective_graph_key", "\n", "", "run_metadata", "=", "tf", ".", "RunMetadata", "(", ")", "\n", "", "else", ":", "\n", "    ", "run_options", "=", "None", "\n", "run_metadata", "=", "None", "\n", "", "summary_str", "=", "None", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "summary_op", "is", "None", ":", "\n", "    ", "results", "=", "sess", ".", "run", "(", "fetches", ",", "options", "=", "run_options", ",", "run_metadata", "=", "run_metadata", ")", "\n", "", "else", ":", "\n", "    ", "(", "results", ",", "summary_str", ")", "=", "sess", ".", "run", "(", "\n", "[", "fetches", ",", "summary_op", "]", ",", "options", "=", "run_options", ",", "run_metadata", "=", "run_metadata", ")", "\n", "\n", "", "if", "not", "params", ".", "forward_only", ":", "\n", "    ", "lossval", "=", "results", "[", "'average_loss'", "]", "\n", "", "else", ":", "\n", "    ", "lossval", "=", "0.", "\n", "", "if", "image_producer", "is", "not", "None", ":", "\n", "    ", "image_producer", ".", "notify_image_consumption", "(", ")", "\n", "", "train_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "step_train_times", ".", "append", "(", "train_time", ")", "\n", "if", "(", "show_images_per_sec", "and", "step", ">=", "0", "and", "\n", "(", "step", "==", "0", "or", "(", "step", "+", "1", ")", "%", "params", ".", "display_every", "==", "0", ")", ")", ":", "\n", "    ", "speed_mean", ",", "speed_uncertainty", ",", "speed_jitter", "=", "get_perf_timing", "(", "\n", "batch_size", ",", "step_train_times", ")", "\n", "log_str", "=", "'%i\\t%s\\t%.*f'", "%", "(", "\n", "step", "+", "1", ",", "\n", "get_perf_timing_str", "(", "speed_mean", ",", "speed_uncertainty", ",", "speed_jitter", ")", ",", "\n", "LOSS_AND_ACCURACY_DIGITS_TO_SHOW", ",", "lossval", ")", "\n", "if", "'top_1_accuracy'", "in", "results", ":", "\n", "      ", "log_str", "+=", "'\\t%.*f\\t%.*f'", "%", "(", "\n", "LOSS_AND_ACCURACY_DIGITS_TO_SHOW", ",", "results", "[", "'top_1_accuracy'", "]", ",", "\n", "LOSS_AND_ACCURACY_DIGITS_TO_SHOW", ",", "results", "[", "'top_5_accuracy'", "]", ")", "\n", "", "log_fn", "(", "log_str", ")", "\n", "if", "benchmark_logger", ":", "\n", "      ", "benchmark_logger", ".", "log_metric", "(", "\n", "'current_examples_per_sec'", ",", "speed_mean", ",", "global_step", "=", "step", "+", "1", ")", "\n", "if", "'top_1_accuracy'", "in", "results", ":", "\n", "        ", "benchmark_logger", ".", "log_metric", "(", "\n", "'top_1_accuracy'", ",", "results", "[", "'top_1_accuracy'", "]", ",", "global_step", "=", "step", "+", "1", ")", "\n", "benchmark_logger", ".", "log_metric", "(", "\n", "'top_5_accuracy'", ",", "results", "[", "'top_5_accuracy'", "]", ",", "global_step", "=", "step", "+", "1", ")", "\n", "", "", "", "if", "need_options_and_metadata", ":", "\n", "    ", "if", "should_profile", ":", "\n", "      ", "profiler", ".", "add_step", "(", "step", ",", "run_metadata", ")", "\n", "", "if", "trace_filename", "and", "step", "==", "-", "2", ":", "\n", "      ", "log_fn", "(", "'Dumping trace to %s'", "%", "trace_filename", ")", "\n", "trace_dir", "=", "os", ".", "path", ".", "dirname", "(", "trace_filename", ")", "\n", "if", "not", "gfile", ".", "Exists", "(", "trace_dir", ")", ":", "\n", "        ", "gfile", ".", "MakeDirs", "(", "trace_dir", ")", "\n", "", "with", "gfile", ".", "Open", "(", "trace_filename", ",", "'w'", ")", "as", "trace_file", ":", "\n", "        ", "if", "params", ".", "use_chrome_trace_format", ":", "\n", "          ", "trace", "=", "timeline", ".", "Timeline", "(", "step_stats", "=", "run_metadata", ".", "step_stats", ")", "\n", "trace_file", ".", "write", "(", "trace", ".", "generate_chrome_trace_format", "(", "show_memory", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "          ", "trace_file", ".", "write", "(", "str", "(", "run_metadata", ".", "step_stats", ")", ")", "\n", "", "", "", "if", "partitioned_graph_file_prefix", "and", "step", "==", "-", "2", ":", "\n", "      ", "path", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "partitioned_graph_file_prefix", ")", "\n", "if", "'.'", "in", "filename", ":", "\n", "        ", "base_filename", ",", "ext", "=", "filename", ".", "rsplit", "(", "'.'", ",", "1", ")", "\n", "ext", "=", "'.'", "+", "ext", "\n", "", "else", ":", "\n", "        ", "base_filename", ",", "ext", "=", "filename", ",", "''", "\n", "", "as_text", "=", "filename", ".", "endswith", "(", "'txt'", ")", "\n", "for", "graph_def", "in", "run_metadata", ".", "partition_graphs", ":", "\n", "        ", "device", "=", "graph_def", ".", "node", "[", "0", "]", ".", "device", ".", "replace", "(", "'/'", ",", "'_'", ")", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "graph_filename", "=", "'%s%s%s'", "%", "(", "base_filename", ",", "device", ",", "ext", ")", "\n", "log_fn", "(", "'Writing partitioned GraphDef as %s to %s'", "%", "(", "\n", "'text'", "if", "as_text", "else", "'binary'", ",", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "graph_filename", ")", ")", ")", "\n", "tf", ".", "train", ".", "write_graph", "(", "graph_def", ",", "path", ",", "graph_filename", ",", "as_text", ")", "\n", "", "", "", "return", "(", "summary_str", ",", "lossval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_perf_timing_str": [[762, 768], ["None"], "function", ["None"], ["", "def", "get_perf_timing_str", "(", "speed_mean", ",", "speed_uncertainty", ",", "speed_jitter", ",", "scale", "=", "1", ")", ":", "\n", "  ", "if", "scale", "==", "1", ":", "\n", "    ", "return", "(", "'images/sec: %.1f +/- %.1f (jitter = %.1f)'", "%", "\n", "(", "speed_mean", ",", "speed_uncertainty", ",", "speed_jitter", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "'images/sec: %.1f'", "%", "speed_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_perf_timing": [[770, 777], ["numpy.array", "numpy.mean", "numpy.std", "numpy.sqrt", "numpy.median", "float", "numpy.abs", "len", "numpy.median"], "function", ["None"], ["", "", "def", "get_perf_timing", "(", "batch_size", ",", "step_train_times", ",", "scale", "=", "1", ")", ":", "\n", "  ", "times", "=", "np", ".", "array", "(", "step_train_times", ")", "\n", "speeds", "=", "batch_size", "/", "times", "\n", "speed_mean", "=", "scale", "*", "batch_size", "/", "np", ".", "mean", "(", "times", ")", "\n", "speed_uncertainty", "=", "np", ".", "std", "(", "speeds", ")", "/", "np", ".", "sqrt", "(", "float", "(", "len", "(", "speeds", ")", ")", ")", "\n", "speed_jitter", "=", "1.4826", "*", "np", ".", "median", "(", "np", ".", "abs", "(", "speeds", "-", "np", ".", "median", "(", "speeds", ")", ")", ")", "\n", "return", "speed_mean", ",", "speed_uncertainty", ",", "speed_jitter", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.load_checkpoint": [[779, 801], ["tensorflow.train.get_checkpoint_state", "saver.restore", "cnn_util.log_fn", "benchmark_cnn.CheckpointNotFoundException", "[].split", "int.isdigit", "int", "tf.train.get_checkpoint_state.model_checkpoint_path.split"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn"], ["", "def", "load_checkpoint", "(", "saver", ",", "sess", ",", "ckpt_dir", ")", ":", "\n", "  ", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "ckpt_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "# if os.path.isabs(ckpt.model_checkpoint_path):", "\n", "# Restores from checkpoint with absolute path.", "\n", "    ", "model_checkpoint_path", "=", "ckpt", ".", "model_checkpoint_path", "\n", "# else:", "\n", "# Restores from checkpoint with relative path.", "\n", "# model_checkpoint_path = os.path.join(ckpt_dir, ckpt.model_checkpoint_path)", "\n", "# Assuming model_checkpoint_path looks something like:", "\n", "#   /my-favorite-path/imagenet_train/model.ckpt-0,", "\n", "# extract global_step from it.", "\n", "global_step", "=", "ckpt", ".", "model_checkpoint_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "if", "not", "global_step", ".", "isdigit", "(", ")", ":", "\n", "      ", "global_step", "=", "0", "\n", "", "else", ":", "\n", "      ", "global_step", "=", "int", "(", "global_step", ")", "\n", "", "saver", ".", "restore", "(", "sess", ",", "model_checkpoint_path", ")", "\n", "log_fn", "(", "'Successfully loaded model from %s.'", "%", "ckpt", ".", "model_checkpoint_path", ")", "\n", "return", "global_step", "\n", "", "else", ":", "\n", "    ", "raise", "CheckpointNotFoundException", "(", "'No checkpoint file found.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.validate_params": [[812, 841], ["params._asdict().items", "params._asdict", "ValueError", "ValueError", "ValueError"], "function", ["None"], ["def", "validate_params", "(", "params", ")", ":", "\n", "  ", "\"\"\"Validates that the Params tuple had valid values.\n\n  When command-line flags are defined for each ParamSpec by calling\n  flags.define_flags(), calling this function is unnecessary because absl\n  already does flag validation. Otherwise, this function should be called.\n\n  Args:\n     params: A Params tuple.\n  Raises:\n    ValueError: An element of params had an invalid value.\n  \"\"\"", "\n", "for", "name", ",", "value", "in", "params", ".", "_asdict", "(", ")", ".", "items", "(", ")", ":", "\n", "    ", "param_spec", "=", "flags", ".", "param_specs", "[", "name", "]", "\n", "if", "param_spec", ".", "flag_type", "in", "(", "'integer'", ",", "'float'", ")", ":", "\n", "      ", "if", "(", "param_spec", ".", "kwargs", "[", "'lower_bound'", "]", "is", "not", "None", "and", "\n", "value", "<", "param_spec", ".", "kwargs", "[", "'lower_bound'", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Param %s value of %s is lower than the lower bound '", "\n", "'of %s'", "%", "\n", "(", "name", ",", "value", ",", "param_spec", ".", "kwargs", "[", "'lower_bound'", "]", ")", ")", "\n", "", "if", "(", "param_spec", ".", "kwargs", "[", "'upper_bound'", "]", "is", "not", "None", "and", "\n", "param_spec", ".", "kwargs", "[", "'upper_bound'", "]", "<", "value", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Param %s value of %s is higher than the upper bound '", "\n", "'of %s'", "%", "\n", "(", "name", ",", "value", ",", "param_spec", ".", "kwargs", "[", "'upper_bound'", "]", ")", ")", "\n", "", "", "elif", "(", "param_spec", ".", "flag_type", "==", "'enum'", "and", "\n", "value", "not", "in", "param_spec", ".", "kwargs", "[", "'enum_values'", "]", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'Param %s of value %s is not in %s'", "%", "\n", "(", "name", ",", "value", ",", "param_spec", ".", "kwargs", "[", "'enum_values'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params": [[843, 861], ["Params()._replace", "benchmark_cnn.validate_params", "Params"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.validate_params"], ["", "", "", "def", "make_params", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Create a Params tuple for BenchmarkCNN from kwargs.\n\n  Default values are filled in from flags.param_specs.\n\n  Args:\n    **kwargs: kwarg values will override the default values.\n  Returns:\n    Params namedtuple for constructing BenchmarkCNN.\n  \"\"\"", "\n", "# Create a (name: default_value) map from flags.param_specs.", "\n", "default_kwargs", "=", "{", "\n", "name", ":", "flags", ".", "param_specs", "[", "name", "]", ".", "default_value", "\n", "for", "name", "in", "flags", ".", "param_specs", "\n", "}", "\n", "params", "=", "Params", "(", "**", "default_kwargs", ")", ".", "_replace", "(", "**", "kwargs", ")", "\n", "validate_params", "(", "params", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params_from_flags": [[863, 874], ["Params", "getattr", "absl.flags.param_specs.keys"], "function", ["None"], ["", "def", "make_params_from_flags", "(", ")", ":", "\n", "  ", "\"\"\"Create a Params tuple for BenchmarkCNN from absl_flags.FLAGS.\n\n  Returns:\n    Params namedtuple for constructing BenchmarkCNN.\n  \"\"\"", "\n", "# Collect (name: value) pairs for absl_flags.FLAGS with matching names in", "\n", "# flags.param_specs.", "\n", "flag_values", "=", "{", "name", ":", "getattr", "(", "absl_flags", ".", "FLAGS", ",", "name", ")", "\n", "for", "name", "in", "flags", ".", "param_specs", ".", "keys", "(", ")", "}", "\n", "return", "Params", "(", "**", "flag_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_num_batches_and_epochs": [[876, 904], ["ValueError", "int", "float", "float"], "function", ["None"], ["", "def", "get_num_batches_and_epochs", "(", "params", ",", "batch_size", ",", "num_examples_per_epoch", ")", ":", "\n", "  ", "\"\"\"Returns the number of batches and epochs to run for.\n\n  Args:\n    params: Params tuple, typically created by make_params or\n      make_params_from_flags.\n    batch_size: The number of images per step.\n    num_examples_per_epoch: The number of images in a single epoch.\n\n  Returns:\n    num_batches: The number of batches to run for.\n    num_epochs: The number of epochs to run for. This might be slightly\n      smaller than params.num_epochs if specified, because the number of batches\n      must be an integer.\n\n  Raises:\n    ValueError: Invalid or unsupported params.\n  \"\"\"", "\n", "if", "params", ".", "num_batches", "and", "params", ".", "num_epochs", ":", "\n", "    ", "raise", "ValueError", "(", "'At most one of --num_batches and --num_epochs may be '", "\n", "'specified.'", ")", "\n", "", "if", "params", ".", "num_epochs", ":", "\n", "    ", "num_batches", "=", "int", "(", "float", "(", "params", ".", "num_epochs", ")", "*", "num_examples_per_epoch", "/", "\n", "batch_size", ")", "\n", "", "else", ":", "\n", "    ", "num_batches", "=", "params", ".", "num_batches", "or", "_DEFAULT_NUM_BATCHES", "\n", "", "num_epochs", "=", "num_batches", "*", "batch_size", "/", "float", "(", "num_examples_per_epoch", ")", "\n", "return", "(", "num_batches", ",", "num_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_piecewise_learning_rate": [[906, 941], ["piecewise_learning_rate_schedule.split", "enumerate", "tensorflow.train.piecewise_constant", "ValueError", "len", "values.append", "boundaries.append", "float", "ValueError", "ValueError", "int", "int"], "function", ["None"], ["", "def", "get_piecewise_learning_rate", "(", "piecewise_learning_rate_schedule", ",", "\n", "global_step", ",", "num_batches_per_epoch", ")", ":", "\n", "  ", "\"\"\"Returns a piecewise learning rate tensor.\n\n  Args:\n    piecewise_learning_rate_schedule: The --piecewise_learning_rate_schedule\n      parameter\n    global_step: Scalar tensor representing the global step.\n    num_batches_per_epoch: float indicating the number of batches per epoch.\n\n  Returns:\n    A scalar float tensor, representing the learning rate.\n\n  Raises:\n    ValueError: piecewise_learning_rate_schedule is not formatted correctly.\n  \"\"\"", "\n", "pieces", "=", "piecewise_learning_rate_schedule", ".", "split", "(", "';'", ")", "\n", "if", "len", "(", "pieces", ")", "%", "2", "==", "0", ":", "\n", "    ", "raise", "ValueError", "(", "'--piecewise_learning_rate_schedule must have an odd '", "\n", "'number of components'", ")", "\n", "", "values", "=", "[", "]", "\n", "boundaries", "=", "[", "]", "\n", "for", "i", ",", "piece", "in", "enumerate", "(", "pieces", ")", ":", "\n", "    ", "if", "i", "%", "2", "==", "0", ":", "\n", "      ", "try", ":", "\n", "        ", "values", ".", "append", "(", "float", "(", "piece", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid learning rate: '", "+", "piece", ")", "\n", "", "", "else", ":", "\n", "      ", "try", ":", "\n", "        ", "boundaries", ".", "append", "(", "int", "(", "int", "(", "piece", ")", "*", "num_batches_per_epoch", ")", "-", "1", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid epoch: '", "+", "piece", ")", "\n", "", "", "", "return", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ",", "\n", "name", "=", "'piecewise_learning_rate'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_learning_rate": [[943, 1007], ["tensorflow.name_scope", "float", "benchmark_cnn.get_piecewise_learning_rate", "int", "tensorflow.cond", "ValueError", "model.get_learning_rate", "float", "tensorflow.cast", "int", "tensorflow.train.exponential_decay", "tensorflow.cast", "tensorflow.maximum", "params.piecewise_learning_rate_schedule.split"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_piecewise_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv4Model.get_learning_rate"], ["", "def", "get_learning_rate", "(", "params", ",", "global_step", ",", "num_examples_per_epoch", ",", "model", ",", "\n", "batch_size", ")", ":", "\n", "  ", "\"\"\"Returns a learning rate tensor based on global_step.\n\n  Args:\n    params: Params tuple, typically created by make_params or\n      make_params_from_flags.\n    global_step: Scalar tensor representing the global step.\n    num_examples_per_epoch: The number of examples per epoch.\n    model: The model.Model object to obtain the default learning rate from if no\n      learning rate is specified.\n    batch_size: Number of examples per step\n\n  Returns:\n    A scalar float tensor, representing the learning rate. When evaluated, the\n    learning rate depends on the current value of global_step.\n\n  Raises:\n    ValueError: Invalid or unsupported params.\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'learning_rate'", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "(", "float", "(", "num_examples_per_epoch", ")", "/", "batch_size", ")", "\n", "\n", "if", "params", ".", "piecewise_learning_rate_schedule", ":", "\n", "      ", "if", "(", "params", ".", "init_learning_rate", "or", "params", ".", "learning_rate_decay_factor", "or", "\n", "params", ".", "minimum_learning_rate", "or", "params", ".", "num_epochs_per_decay", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'No other learning rate-related flags can be '", "\n", "'specified if --piecewise_learning_rate_schedule is '", "\n", "'specified'", ")", "\n", "", "learning_rate", "=", "get_piecewise_learning_rate", "(", "\n", "params", ".", "piecewise_learning_rate_schedule", ",", "\n", "global_step", ",", "num_batches_per_epoch", ")", "\n", "", "elif", "params", ".", "init_learning_rate", ":", "\n", "      ", "learning_rate", "=", "params", ".", "init_learning_rate", "\n", "if", "(", "params", ".", "num_epochs_per_decay", ">", "0", "and", "\n", "params", ".", "learning_rate_decay_factor", ">", "0", ")", ":", "\n", "        ", "decay_steps", "=", "int", "(", "num_batches_per_epoch", "*", "params", ".", "num_epochs_per_decay", ")", "\n", "\n", "# Decay the learning rate exponentially based on the number of steps.", "\n", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "params", ".", "init_learning_rate", ",", "\n", "global_step", ",", "\n", "decay_steps", ",", "\n", "params", ".", "learning_rate_decay_factor", ",", "\n", "staircase", "=", "True", ")", "\n", "\n", "if", "params", ".", "minimum_learning_rate", "!=", "0.", ":", "\n", "          ", "learning_rate", "=", "tf", ".", "maximum", "(", "learning_rate", ",", "\n", "params", ".", "minimum_learning_rate", ")", "\n", "", "", "", "else", ":", "\n", "      ", "learning_rate", "=", "model", ".", "get_learning_rate", "(", "global_step", ",", "batch_size", ")", "\n", "\n", "", "if", "params", ".", "num_learning_rate_warmup_epochs", ">", "0", "and", "(", "\n", "params", ".", "init_learning_rate", "or", "params", ".", "piecewise_learning_rate_schedule", ")", ":", "\n", "      ", "warmup_steps", "=", "int", "(", "num_batches_per_epoch", "*", "\n", "params", ".", "num_learning_rate_warmup_epochs", ")", "\n", "init_lr", "=", "(", "params", ".", "init_learning_rate", "or", "\n", "float", "(", "params", ".", "piecewise_learning_rate_schedule", ".", "split", "(", "';'", ")", "[", "0", "]", ")", ")", "\n", "warmup_lr", "=", "init_lr", "*", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "float32", ")", "/", "tf", ".", "cast", "(", "\n", "warmup_steps", ",", "tf", ".", "float32", ")", "\n", "learning_rate", "=", "tf", ".", "cond", "(", "global_step", "<", "warmup_steps", ",", "\n", "lambda", ":", "warmup_lr", ",", "lambda", ":", "learning_rate", ")", "\n", "\n", "", "", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_optimizer": [[1009, 1026], ["tensorflow.train.MomentumOptimizer", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.RMSPropOptimizer", "ValueError"], "function", ["None"], ["", "def", "get_optimizer", "(", "params", ",", "learning_rate", ")", ":", "\n", "  ", "\"\"\"Returns the optimizer that should be used based on params.\"\"\"", "\n", "if", "params", ".", "optimizer", "==", "'momentum'", ":", "\n", "    ", "opt", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "\n", "learning_rate", ",", "params", ".", "momentum", ",", "use_nesterov", "=", "True", ")", "\n", "", "elif", "params", ".", "optimizer", "==", "'sgd'", ":", "\n", "    ", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", ")", "\n", "", "elif", "params", ".", "optimizer", "==", "'rmsprop'", ":", "\n", "    ", "opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "learning_rate", ",", "\n", "params", ".", "rmsprop_decay", ",", "\n", "momentum", "=", "params", ".", "rmsprop_momentum", ",", "\n", "epsilon", "=", "params", ".", "rmsprop_epsilon", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Optimizer \"%s\" was not recognized'", ",", "\n", "params", ".", "optimizer", ")", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.generate_tfprof_profile": [[1028, 1049], ["profiler.serialize_to_string", "cnn_util.log_fn", "tensorflow.profiler.ProfileOptionBuilder.time_and_memory", "profiler.profile_operations", "tensorflow.python.platform.gfile.Open", "f.write"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn"], ["", "def", "generate_tfprof_profile", "(", "profiler", ",", "tfprof_file", ")", ":", "\n", "  ", "\"\"\"Generates a tfprof profile, writing it to a file and printing top ops.\n\n  Args:\n    profiler: A tf.profiler.Profiler. `profiler.add_step` must have already been\n      called.\n    tfprof_file: The filename to write the ProfileProto to.\n  \"\"\"", "\n", "profile_proto", "=", "profiler", ".", "serialize_to_string", "(", ")", "\n", "log_fn", "(", "'Dumping ProfileProto to %s'", "%", "tfprof_file", ")", "\n", "with", "gfile", ".", "Open", "(", "tfprof_file", ",", "'wb'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "profile_proto", ")", "\n", "\n", "# Print out the execution times of the top operations. Note this", "\n", "# information can also be obtained with the dumped ProfileProto, but", "\n", "# printing it means tfprof doesn't have to be used if all the user wants", "\n", "# is the top ops.", "\n", "", "options", "=", "tf", ".", "profiler", ".", "ProfileOptionBuilder", ".", "time_and_memory", "(", ")", "\n", "options", "[", "'max_depth'", "]", "=", "_NUM_OPS_TO_PRINT", "\n", "options", "[", "'order_by'", "]", "=", "'accelerator_micros'", "\n", "profiler", ".", "profile_operations", "(", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.setup": [[2832, 2910], ["str", "argparse.ArgumentParser", "platforms.util.initialize", "os.environ.pop", "os.environ.pop", "str", "int", "str", "str", "params._replace.device.lower", "params._replace._replace", "multiprocessing.cpu_count", "hvd.init", "benchmark_cnn.create_config_proto", "str", "ValueError", "ValueError", "str", "max", "params._replace._replace", "max", "params._replace._replace", "params._replace.gpu_thread_mode.lower", "str"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.initialize", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.create_config_proto"], ["", "", "def", "setup", "(", "params", ")", ":", "\n", "  ", "\"\"\"Sets up the environment that BenchmarkCNN should run in.\n\n  Args:\n    params: Params tuple, typically created by make_params or\n            make_params_from_flags.\n  Returns:\n    A potentially modified params.\n  Raises:\n    ValueError: invalid parames combinations.\n  \"\"\"", "\n", "if", "params", ".", "batchnorm_persistent", ":", "\n", "    ", "os", ".", "environ", "[", "'TF_USE_CUDNN_BATCHNORM_SPATIAL_PERSISTENT'", "]", "=", "'1'", "\n", "", "else", ":", "\n", "    ", "os", ".", "environ", ".", "pop", "(", "'TF_USE_CUDNN_BATCHNORM_SPATIAL_PERSISTENT'", ",", "None", ")", "\n", "", "if", "params", ".", "winograd_nonfused", ":", "\n", "    ", "os", ".", "environ", "[", "'TF_ENABLE_WINOGRAD_NONFUSED'", "]", "=", "'1'", "\n", "", "else", ":", "\n", "    ", "os", ".", "environ", ".", "pop", "(", "'TF_ENABLE_WINOGRAD_NONFUSED'", ",", "None", ")", "\n", "", "if", "params", ".", "autotune_threshold", ":", "\n", "    ", "os", ".", "environ", "[", "'TF_AUTOTUNE_THRESHOLD'", "]", "=", "str", "(", "params", ".", "autotune_threshold", ")", "\n", "", "os", ".", "environ", "[", "'TF_SYNC_ON_FINISH'", "]", "=", "str", "(", "int", "(", "params", ".", "sync_on_finish", ")", ")", "\n", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "# Sets environment variables for MKL", "\n", "if", "params", ".", "mkl", ":", "\n", "    ", "os", ".", "environ", "[", "'KMP_BLOCKTIME'", "]", "=", "str", "(", "params", ".", "kmp_blocktime", ")", "\n", "os", ".", "environ", "[", "'KMP_SETTINGS'", "]", "=", "str", "(", "params", ".", "kmp_settings", ")", "\n", "os", ".", "environ", "[", "'KMP_AFFINITY'", "]", "=", "params", ".", "kmp_affinity", "\n", "if", "params", ".", "num_intra_threads", ">", "0", ":", "\n", "      ", "os", ".", "environ", "[", "'OMP_NUM_THREADS'", "]", "=", "str", "(", "params", ".", "num_intra_threads", ")", "\n", "\n", "# Sets GPU thread settings", "\n", "", "", "if", "params", ".", "device", ".", "lower", "(", ")", "==", "'gpu'", ":", "\n", "    ", "params", "=", "params", ".", "_replace", "(", "gpu_thread_mode", "=", "params", ".", "gpu_thread_mode", ".", "lower", "(", ")", ")", "\n", "if", "params", ".", "gpu_thread_mode", "not", "in", "[", "'global'", ",", "'gpu_shared'", ",", "'gpu_private'", "]", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid gpu_thread_mode: %s'", "%", "params", ".", "gpu_thread_mode", ")", "\n", "", "os", ".", "environ", "[", "'TF_GPU_THREAD_MODE'", "]", "=", "params", ".", "gpu_thread_mode", "\n", "\n", "if", "params", ".", "per_gpu_thread_count", "and", "params", ".", "gpu_thread_mode", "==", "'global'", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Invalid per_gpu_thread_count with gpu_thread_mode=global: %s'", "%", "\n", "params", ".", "per_gpu_thread_count", ")", "\n", "# Default to two threads. One for the device compute and the other for", "\n", "# memory copies.", "\n", "", "per_gpu_thread_count", "=", "params", ".", "per_gpu_thread_count", "or", "2", "\n", "total_gpu_thread_count", "=", "per_gpu_thread_count", "*", "params", ".", "num_gpus", "\n", "\n", "if", "params", ".", "gpu_thread_mode", "==", "'gpu_private'", ":", "\n", "      ", "os", ".", "environ", "[", "'TF_GPU_THREAD_COUNT'", "]", "=", "str", "(", "per_gpu_thread_count", ")", "\n", "", "elif", "params", ".", "gpu_thread_mode", "==", "'gpu_shared'", ":", "\n", "      ", "os", ".", "environ", "[", "'TF_GPU_THREAD_COUNT'", "]", "=", "str", "(", "total_gpu_thread_count", ")", "\n", "\n", "", "cpu_count", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "if", "not", "params", ".", "num_inter_threads", "and", "params", ".", "gpu_thread_mode", "in", "[", "\n", "'gpu_private'", ",", "'gpu_shared'", "\n", "]", ":", "\n", "      ", "main_thread_count", "=", "max", "(", "cpu_count", "-", "total_gpu_thread_count", ",", "1", ")", "\n", "params", "=", "params", ".", "_replace", "(", "num_inter_threads", "=", "main_thread_count", ")", "\n", "\n", "", "if", "(", "params", ".", "datasets_use_prefetch", "and", "\n", "params", ".", "datasets_num_private_threads", "is", "None", ")", ":", "\n", "# From the total cpu thread count, subtract the total_gpu_thread_count,", "\n", "# and then 2 threads per GPU device for event monitoring and sending /", "\n", "# receiving tensors", "\n", "      ", "num_monitoring_threads", "=", "2", "*", "params", ".", "num_gpus", "\n", "num_private_threads", "=", "max", "(", "\n", "cpu_count", "-", "total_gpu_thread_count", "-", "num_monitoring_threads", ",", "1", ")", "\n", "params", "=", "params", ".", "_replace", "(", "datasets_num_private_threads", "=", "num_private_threads", ")", "\n", "\n", "", "", "if", "params", ".", "variable_update", "==", "'horovod'", ":", "\n", "    ", "import", "horovod", ".", "tensorflow", "as", "hvd", "# pylint: disable=g-import-not-at-top", "\n", "hvd", ".", "init", "(", ")", "\n", "\n", "", "platforms_util", ".", "initialize", "(", "params", ",", "create_config_proto", "(", "params", ")", ")", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.build_prefetch_image_processing": [[29, 62], ["tensorflow.device", "data_utils.minibatch_fn", "range", "len", "tensorflow.device", "tensorflow.contrib.data.python.ops.prefetching_ops.function_buffering_resource", "function_buffering_resources.append"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.minibatch_fn"], ["def", "build_prefetch_image_processing", "(", "height", ",", "width", ",", "batch_size", ",", "num_splits", ",", "\n", "preprocess_fn", ",", "cpu_device", ",", "params", ",", "\n", "gpu_devices", ",", "data_type", ",", "dataset", ")", ":", "\n", "  ", "\"\"\"\"Returns FunctionBufferingResources that do image pre(processing).\"\"\"", "\n", "with", "tf", ".", "device", "(", "cpu_device", ")", ":", "\n", "    ", "if", "params", ".", "eval", ":", "\n", "      ", "subset", "=", "'validation'", "\n", "", "else", ":", "\n", "      ", "subset", "=", "'train'", "\n", "\n", "", "function_buffering_resources", "=", "[", "]", "\n", "remote_fn", ",", "args", "=", "minibatch_fn", "(", "\n", "height", "=", "height", ",", "\n", "width", "=", "width", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_splits", "=", "num_splits", ",", "\n", "preprocess_fn", "=", "preprocess_fn", ",", "\n", "dataset", "=", "dataset", ",", "\n", "subset", "=", "subset", ",", "\n", "train", "=", "(", "not", "params", ".", "eval", ")", ",", "\n", "cache_data", "=", "params", ".", "cache_data", ",", "\n", "num_threads", "=", "params", ".", "datasets_num_private_threads", ")", "\n", "for", "device_num", "in", "range", "(", "len", "(", "gpu_devices", ")", ")", ":", "\n", "      ", "with", "tf", ".", "device", "(", "gpu_devices", "[", "device_num", "]", ")", ":", "\n", "        ", "buffer_resource_handle", "=", "prefetching_ops", ".", "function_buffering_resource", "(", "\n", "f", "=", "remote_fn", ",", "\n", "output_types", "=", "[", "data_type", ",", "tf", ".", "int32", "]", ",", "\n", "target_device", "=", "cpu_device", ",", "\n", "string_arg", "=", "args", "[", "0", "]", ",", "\n", "buffer_size", "=", "params", ".", "datasets_prefetch_buffer_size", ",", "\n", "shared_name", "=", "None", ")", "\n", "function_buffering_resources", ".", "append", "(", "buffer_resource_handle", ")", "\n", "", "", "return", "function_buffering_resources", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.get_images_and_labels": [[64, 69], ["tensorflow.contrib.data.python.ops.prefetching_ops.function_buffering_resource_get_next"], "function", ["None"], ["", "", "def", "get_images_and_labels", "(", "function_buffering_resource", ",", "data_type", ")", ":", "\n", "  ", "\"\"\"Given a FunctionBufferingResource obtains images and labels from it.\"\"\"", "\n", "return", "prefetching_ops", ".", "function_buffering_resource_get_next", "(", "\n", "function_buffer_resource", "=", "function_buffering_resource", ",", "\n", "output_types", "=", "[", "data_type", ",", "tf", ".", "int32", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.create_iterator": [[71, 116], ["dataset.tf_record_pattern", "tensorflow.python.platform.gfile.Glob", "tensorflow.data.TFRecordDataset.list_files", "threadpool.override_threadpool.apply", "tensorflow.data.Dataset.range", "counter.repeat.repeat", "tensorflow.data.Dataset.zip", "threadpool.override_threadpool.prefetch", "threadpool.override_threadpool.repeat", "threadpool.override_threadpool.apply", "threadpool.override_threadpool.prefetch", "ValueError", "tensorflow.contrib.data.python.ops.interleave_ops.parallel_interleave", "threadpool.override_threadpool.take().cache().repeat", "threadpool.override_threadpool.shuffle", "tensorflow.contrib.data.python.ops.batching.map_and_batch", "tensorflow.contrib.data.python.ops.threadpool.override_threadpool", "threadpool.override_threadpool.make_initializable_iterator", "tensorflow.add_to_collection", "threadpool.override_threadpool.make_one_shot_iterator", "tensorflow.contrib.data.python.ops.threadpool.PrivateThreadPool", "threadpool.override_threadpool.take().cache", "threadpool.override_threadpool.take"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.tf_record_pattern"], ["", "def", "create_iterator", "(", "batch_size", ",", "\n", "num_splits", ",", "\n", "batch_size_per_split", ",", "\n", "preprocess_fn", ",", "\n", "dataset", ",", "\n", "subset", ",", "\n", "train", ",", "\n", "cache_data", ",", "\n", "num_threads", "=", "None", ")", ":", "\n", "  ", "\"\"\"Creates a dataset iterator for the benchmark.\"\"\"", "\n", "glob_pattern", "=", "dataset", ".", "tf_record_pattern", "(", "subset", ")", "\n", "file_names", "=", "gfile", ".", "Glob", "(", "glob_pattern", ")", "\n", "if", "not", "file_names", ":", "\n", "    ", "raise", "ValueError", "(", "'Found no files in --data_dir matching: {}'", "\n", ".", "format", "(", "glob_pattern", ")", ")", "\n", "", "ds", "=", "tf", ".", "data", ".", "TFRecordDataset", ".", "list_files", "(", "file_names", ")", "\n", "ds", "=", "ds", ".", "apply", "(", "\n", "interleave_ops", ".", "parallel_interleave", "(", "\n", "tf", ".", "data", ".", "TFRecordDataset", ",", "cycle_length", "=", "10", ")", ")", "\n", "if", "cache_data", ":", "\n", "    ", "ds", "=", "ds", ".", "take", "(", "1", ")", ".", "cache", "(", ")", ".", "repeat", "(", ")", "\n", "", "counter", "=", "tf", ".", "data", ".", "Dataset", ".", "range", "(", "batch_size", ")", "\n", "counter", "=", "counter", ".", "repeat", "(", ")", "\n", "ds", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "(", "ds", ",", "counter", ")", ")", "\n", "ds", "=", "ds", ".", "prefetch", "(", "buffer_size", "=", "batch_size", ")", "\n", "if", "train", ":", "\n", "    ", "ds", "=", "ds", ".", "shuffle", "(", "buffer_size", "=", "10000", ")", "\n", "", "ds", "=", "ds", ".", "repeat", "(", ")", "\n", "ds", "=", "ds", ".", "apply", "(", "\n", "batching", ".", "map_and_batch", "(", "\n", "map_func", "=", "preprocess_fn", ",", "\n", "batch_size", "=", "batch_size_per_split", ",", "\n", "num_parallel_batches", "=", "num_splits", ")", ")", "\n", "ds", "=", "ds", ".", "prefetch", "(", "buffer_size", "=", "num_splits", ")", "\n", "if", "num_threads", ":", "\n", "    ", "ds", "=", "threadpool", ".", "override_threadpool", "(", "\n", "ds", ",", "\n", "threadpool", ".", "PrivateThreadPool", "(", "\n", "num_threads", ",", "display_name", "=", "'input_pipeline_thread_pool'", ")", ")", "\n", "ds_iterator", "=", "ds", ".", "make_initializable_iterator", "(", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "TABLE_INITIALIZERS", ",", "\n", "ds_iterator", ".", "initializer", ")", "\n", "", "else", ":", "\n", "    ", "ds_iterator", "=", "ds", ".", "make_one_shot_iterator", "(", ")", "\n", "", "return", "ds_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.minibatch_fn": [[118, 140], ["tensorflow.name_scope", "data_utils.create_iterator", "create_iterator.string_handle", "tensorflow.python.framework.function.Defun", "tensorflow.data.Iterator.from_string_handle", "tf.data.Iterator.from_string_handle.get_next", "tensorflow.reshape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.create_iterator", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["", "def", "minibatch_fn", "(", "height", ",", "width", ",", "batch_size", ",", "num_splits", ",", "preprocess_fn", ",", "dataset", ",", "\n", "subset", ",", "train", ",", "cache_data", ",", "num_threads", ")", ":", "\n", "  ", "\"\"\"Returns a function and list of args for the fn to create a minibatch.\"\"\"", "\n", "batch_size_per_split", "=", "batch_size", "//", "num_splits", "\n", "with", "tf", ".", "name_scope", "(", "'batch_processing'", ")", ":", "\n", "    ", "ds_iterator", "=", "create_iterator", "(", "batch_size", ",", "num_splits", ",", "batch_size_per_split", ",", "\n", "preprocess_fn", ",", "dataset", ",", "subset", ",", "train", ",", "\n", "cache_data", ",", "num_threads", ")", "\n", "ds_iterator_string_handle", "=", "ds_iterator", ".", "string_handle", "(", ")", "\n", "\n", "@", "function", ".", "Defun", "(", "tf", ".", "string", ")", "\n", "def", "_fn", "(", "h", ")", ":", "\n", "      ", "depth", "=", "3", "\n", "remote_iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "\n", "h", ",", "ds_iterator", ".", "output_types", ",", "ds_iterator", ".", "output_shapes", ")", "\n", "labels", ",", "images", "=", "remote_iterator", ".", "get_next", "(", ")", "\n", "images", "=", "tf", ".", "reshape", "(", "\n", "images", ",", "shape", "=", "[", "batch_size_per_split", ",", "height", ",", "width", ",", "depth", "]", ")", "\n", "labels", "=", "tf", ".", "reshape", "(", "labels", ",", "[", "batch_size_per_split", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n", "", "return", "_fn", ",", "[", "ds_iterator_string_handle", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed": [[268, 297], ["test_util.train_and_eval", "os.path.join", "benchmark_cnn_distributed_test._spawn_benchmark_processes", "benchmark_cnn_distributed_test._spawn_benchmark_processes", "inner_params._replace._replace._replace"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.train_and_eval", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._spawn_benchmark_processes", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._spawn_benchmark_processes"], ["def", "_test_distributed", "(", "self", ",", "\n", "test_name", ",", "\n", "num_workers", ",", "\n", "num_ps", ",", "\n", "params", ",", "\n", "num_controllers", "=", "0", ",", "\n", "check_output_values", "=", "False", ",", "\n", "skip", "=", "None", ")", ":", "\n", "# TODO(reedwm): check_output_values should default to True and be enabled", "\n", "# on every test. See the TODO in benchmark_cnn_test.py.", "\n", "    ", "def", "run_fn", "(", "run_type", ",", "inner_params", ")", ":", "\n", "      ", "output_dir_path", "=", "os", ".", "path", ".", "join", "(", "test_name", ",", "run_type", ")", "\n", "if", "run_type", "==", "'Evaluation'", ":", "\n", "# Distributed evaluation is not supported, so we use a single process.", "\n", "# We still must spawn another process, because if we evaluate in the", "\n", "# current process, it would allocate the GPU memory causing future test", "\n", "# methods to fail.", "\n", "        ", "if", "inner_params", ".", "variable_update", "==", "'distributed_replicated'", ":", "\n", "          ", "inner_params", "=", "inner_params", ".", "_replace", "(", "variable_update", "=", "'replicated'", ")", "\n", "", "return", "_spawn_benchmark_processes", "(", "\n", "output_dir_path", ",", "num_workers", "=", "1", ",", "num_ps", "=", "0", ",", "num_controllers", "=", "0", ",", "\n", "params", "=", "inner_params", ")", "\n", "", "else", ":", "\n", "        ", "return", "_spawn_benchmark_processes", "(", "output_dir_path", ",", "num_workers", ",", "num_ps", ",", "\n", "num_controllers", ",", "inner_params", ")", "\n", "\n", "", "", "return", "test_util", ".", "train_and_eval", "(", "self", ",", "run_fn", ",", "params", ",", "\n", "check_output_values", "=", "check_output_values", ",", "\n", "skip", "=", "skip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testParameterServer": [[298, 302], ["test_util.get_params", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], ["", "def", "testParameterServer", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testParameterServer'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testParameterServerStaged": [[303, 307], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testParameterServerStaged", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testParameterServerStaged'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "staged_vars", "=", "True", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testReplicated": [[308, 313], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testReplicated", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testReplicated'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "variable_update", "=", "'distributed_replicated'", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testAllReducePsgpu": [[314, 320], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testAllReducePsgpu", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testAllReducePsgpu'", "\n", "flags_dict", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "variable_update", "=", "'distributed_all_reduce'", ",", "\n", "all_reduce_spec", "=", "'psgpu#4'", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "0", ",", "flags_dict", ",", "num_controllers", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testAllReducePscpuXring": [[321, 327], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testAllReducePscpuXring", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testAllReducePscpuXring'", "\n", "flags_dict", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "variable_update", "=", "'distributed_all_reduce'", ",", "\n", "all_reduce_spec", "=", "'pscpu:2k:xring'", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "0", ",", "flags_dict", ",", "num_controllers", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testForwardOnly": [[328, 333], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testForwardOnly", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testForwardOnly'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "forward_only", "=", "True", ")", "\n", "# Evaluation is not supported with --forward_only, so we set skip='eval'.", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ",", "skip", "=", "'eval'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testSingleWorkerAndPs": [[334, 338], ["test_util.get_params", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], ["", "def", "testSingleWorkerAndPs", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testSingleWorkerAndPs'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "1", ",", "1", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testThreeWorkersAndPses": [[339, 343], ["test_util.get_params", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], ["", "def", "testThreeWorkersAndPses", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testThreeWorkersAndPses'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "3", ",", "3", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testOneWorkerThreePses": [[344, 348], ["test_util.get_params", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], ["", "def", "testOneWorkerThreePses", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testOneWorkerThreePses'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "1", ",", "3", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testThreeWorkersOnePs": [[349, 353], ["test_util.get_params", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed"], ["", "def", "testThreeWorkersOnePs", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testThreeWorkersOnePs'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "3", ",", "1", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testNoPrintTrainingAccuracy": [[354, 359], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testNoPrintTrainingAccuracy", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testNoPrintTrainingAccuracy'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "print_training_accuracy", "=", "False", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testRmspropParameterServer": [[360, 364], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testRmspropParameterServer", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testRmspropParameterServer'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "optimizer", "=", "'rmsprop'", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testMomentumReplicated": [[365, 370], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testMomentumReplicated", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testMomentumReplicated'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "optimizer", "=", "'momentum'", ",", "variable_update", "=", "'distributed_replicated'", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testNoCrossReplicaSyncParameterServerStaged": [[371, 376], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testNoCrossReplicaSyncParameterServerStaged", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testNoCrossReplicaSyncParameterServerStaged'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "staged_vars", "=", "True", ",", "cross_replica_sync", "=", "False", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testSingleGpu": [[377, 381], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testSingleGpu", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testSingleGpu'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "num_gpus", "=", "1", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testBatchGroupSize": [[382, 387], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testBatchGroupSize", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testBatchGroupSize'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "batch_group_size", "=", "4", ",", "num_batches", "=", "100", ",", "num_warmup_batches", "=", "5", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testFp16WithFp32Vars": [[388, 393], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testFp16WithFp32Vars", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testFp16WithFp32Vars'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "use_fp16", "=", "True", ",", "fp16_vars", "=", "False", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testFp16WithFp16Vars": [[394, 399], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testFp16WithFp16Vars", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testFp16WithFp16Vars'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "use_fp16", "=", "True", ",", "fp16_vars", "=", "True", ",", "fp16_loss_scale", "=", "1.", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testFp16Replicated": [[400, 405], ["test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testFp16Replicated", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testFp16Replicated'", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "use_fp16", "=", "True", ",", "variable_update", "=", "'distributed_replicated'", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest.testReplicatedRealData": [[406, 415], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "platforms.util.get_test_data_dir", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest._test_distributed", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testReplicatedRealData", "(", "self", ")", ":", "\n", "    ", "test_name", "=", "'testReplicatedRealData'", "\n", "imagenet_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "\n", "'fake_tf_record_data'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "test_name", ")", ".", "_replace", "(", "\n", "variable_update", "=", "'distributed_replicated'", ",", "\n", "data_dir", "=", "imagenet_dir", ",", "\n", "data_name", "=", "'imagenet'", ")", "\n", "self", ".", "_test_distributed", "(", "test_name", ",", "2", ",", "2", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_update": [[420, 450], ["os.path.join", "benchmark_cnn_distributed_test._spawn_benchmark_processes", "test_util.get_fake_var_update_inputs", "test_util.TestCNNModel().manually_compute_losses", "zip", "test_util.get_training_outputs_from_logs", "actual_losses.append", "benchmark_cnn_distributed_test.DistributedVariableUpdateTest.assertAllClose", "test_util.TestCNNModel", "sum", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._spawn_benchmark_processes", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_fake_var_update_inputs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.manually_compute_losses", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_training_outputs_from_logs"], ["def", "_test_variable_update", "(", "self", ",", "\n", "test_name", ",", "\n", "num_workers", ",", "\n", "num_ps", ",", "\n", "params", ",", "\n", "num_controllers", "=", "0", ")", ":", "\n", "    ", "\"\"\"Tests variables are updated correctly when the given params are used.\"\"\"", "\n", "output_dir_path", "=", "os", ".", "path", ".", "join", "(", "test_name", ",", "'variable_update'", ")", "\n", "logs", "=", "_spawn_benchmark_processes", "(", "output_dir_path", ",", "num_workers", ",", "num_ps", ",", "\n", "num_controllers", ",", "params", ")", "\n", "actual_losses", "=", "[", "]", "\n", "for", "worker_logs", "in", "logs", ":", "\n", "      ", "outputs", "=", "test_util", ".", "get_training_outputs_from_logs", "(", "\n", "worker_logs", ",", "params", ".", "print_training_accuracy", ")", "\n", "actual_losses", ".", "append", "(", "[", "x", ".", "loss", "for", "x", "in", "outputs", "]", ")", "\n", "\n", "", "inputs", "=", "test_util", ".", "get_fake_var_update_inputs", "(", ")", "\n", "expected_losses", "=", "test_util", ".", "TestCNNModel", "(", ")", ".", "manually_compute_losses", "(", "\n", "inputs", ",", "num_workers", ",", "params", ")", "\n", "if", "params", ".", "variable_update", "==", "'distributed_all_reduce'", ":", "\n", "# In distributed all reduce, each step, the controller outputs the average", "\n", "# of the loss from each worker. So we modify expected losses accordingly.", "\n", "# E.g, we change [[1, 2], [4, 5]] to [[2.5, 3.5]]", "\n", "      ", "expected_losses", "=", "[", "[", "sum", "(", "losses", ")", "/", "num_workers", "\n", "for", "losses", "in", "zip", "(", "*", "expected_losses", ")", "]", "]", "\n", "", "rtol", "=", "3e-2", "if", "params", ".", "use_fp16", "else", "1e-5", "\n", "for", "worker_actual_losses", ",", "worker_expected_losses", "in", "zip", "(", "actual_losses", ",", "\n", "expected_losses", ")", ":", "\n", "      ", "self", ".", "assertAllClose", "(", "worker_actual_losses", "[", ":", "len", "(", "worker_expected_losses", ")", "]", ",", "\n", "worker_expected_losses", ",", "rtol", "=", "rtol", ",", "atol", "=", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_updates": [[451, 470], ["benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_update", "benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_update", "benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_update", "params._replace", "params._replace", "params._replace"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_update", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_update", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_update"], ["", "", "def", "_test_variable_updates", "(", "self", ",", "test_name", ",", "params", ")", ":", "\n", "    ", "\"\"\"Tests variables are updated correctly with various variable updates.\"\"\"", "\n", "\n", "# Unfortunately, distributed parameter server is non-deterministic with", "\n", "# multiple workers, because one worker may write to a variable before", "\n", "# another worker reads it. This probably does not harm training, but it", "\n", "# does mean we cannot easily test that case. So, we use one worker.", "\n", "self", ".", "_test_variable_update", "(", "\n", "test_name", "+", "'_ps'", ",", "num_workers", "=", "1", ",", "num_ps", "=", "2", ",", "num_controllers", "=", "0", ",", "\n", "params", "=", "params", ".", "_replace", "(", "variable_update", "=", "'parameter_server'", ")", ")", "\n", "\n", "self", ".", "_test_variable_update", "(", "\n", "test_name", "+", "'_rep'", ",", "num_workers", "=", "2", ",", "num_ps", "=", "1", ",", "num_controllers", "=", "0", ",", "\n", "params", "=", "params", ".", "_replace", "(", "variable_update", "=", "'distributed_replicated'", ")", ")", "\n", "\n", "self", ".", "_test_variable_update", "(", "\n", "test_name", "+", "'_allreduce'", ",", "num_workers", "=", "2", ",", "num_ps", "=", "0", ",", "num_controllers", "=", "1", ",", "\n", "params", "=", "params", ".", "_replace", "(", "variable_update", "=", "'distributed_all_reduce'", ",", "\n", "all_reduce_spec", "=", "'psgpu#%d'", "%", "params", ".", "num_gpus", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.DistributedVariableUpdateTest.testVarUpdateDefault": [[471, 474], ["test_util.get_var_update_params", "benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_updates"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates"], ["", "def", "testVarUpdateDefault", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", "\n", "self", ".", "_test_variable_updates", "(", "'testVarUpdateDefault'", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.DistributedVariableUpdateTest.testVarUpdateCpuAsLocalParamDevice": [[475, 479], ["test_util.get_var_update_params()._replace", "benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testVarUpdateCpuAsLocalParamDevice", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "\n", "local_parameter_device", "=", "'cpu'", ")", "\n", "self", ".", "_test_variable_updates", "(", "'testVarUpdateCpuAsLocalParamDevice'", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.DistributedVariableUpdateTest.testVarUpdateFp16": [[480, 483], ["test_util.get_var_update_params()._replace", "benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testVarUpdateFp16", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "use_fp16", "=", "True", ")", "\n", "self", ".", "_test_variable_updates", "(", "'testVarUpdateFp16'", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test.DistributedVariableUpdateTest.testVarUpdateResourceVars": [[484, 487], ["test_util.get_var_update_params()._replace", "benchmark_cnn_distributed_test.DistributedVariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testVarUpdateResourceVars", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "use_resource_vars", "=", "True", ")", "\n", "self", ".", "_test_variable_updates", "(", "'testVarUpdateResourceVars'", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._convert_params_to_flags_list": [[43, 59], ["six.iteritems", "str", "params._asdict"], "function", ["None"], ["def", "_convert_params_to_flags_list", "(", "params", ")", ":", "\n", "  ", "\"\"\"Converts Params to a list of flags. Skips default-valued parameters.\n\n  E.g., converts\n    benchmark_cnn.make_params(batch_size=32, model='resnet50')\n  to\n    ['--batch_size=32', '--model=resnet50']\n\n  Args:\n    params: Params for BenchmarkCNN.\n  Returns:\n    A list of flags.\n  \"\"\"", "\n", "return", "[", "\n", "'--%s=%s'", "%", "(", "k", ",", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "params", ".", "_asdict", "(", ")", ")", "\n", "if", "v", "!=", "flags", ".", "param_specs", "[", "k", "]", ".", "default_value", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._create_task_process": [[74, 102], ["tensorflow.logging.info", "os.path.join", "os.path.join", "open", "open", "subprocess.Popen", "_ProcessInfo"], "function", ["None"], ["def", "_create_task_process", "(", "job_name", ",", "task_index", ",", "args", ",", "env", ",", "output_dir", ")", ":", "\n", "  ", "\"\"\"Creates a process for a single task for benchmark_cnn.\n\n  Args:\n    job_name: 'worker' or 'ps' or ''. Empty string used for non-distributed\n      mode.\n    task_index: The index of the task within the cluster.\n    args: A list of arguments to pass to the task. This function additionally\n      sets --task_index and --job_name\n    env: The environment to use for the task.\n    output_dir: Where to place the output files, storing the task's stdout and\n      stderr.\n  Returns:\n    A _ProcessInfo namedtuple of the running process. The stdout and stderr\n    fields of this tuple must be closed by the caller once the process ends.\n  \"\"\"", "\n", "args", "=", "args", "[", ":", "]", "\n", "args", "+=", "[", "'--task_index=%s'", "%", "task_index", ",", "'--job_name=%s'", "%", "job_name", "]", "\n", "name_prefix", "=", "job_name", "or", "'local'", "\n", "process_name", "=", "'%s_%s'", "%", "(", "name_prefix", ",", "task_index", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Spawning %s process: %s'", "%", "(", "process_name", ",", "' '", ".", "join", "(", "args", ")", ")", ")", "\n", "stdout_filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'%s_stdout.txt'", "%", "process_name", ")", "\n", "stderr_filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'%s_stderr.txt'", "%", "process_name", ")", "\n", "stdout_file", "=", "open", "(", "stdout_filename", ",", "'w+'", ")", "\n", "stderr_file", "=", "open", "(", "stderr_filename", ",", "'w+'", ")", "\n", "popen", "=", "subprocess", ".", "Popen", "(", "\n", "args", ",", "stdout", "=", "stdout_file", ",", "stderr", "=", "stderr_file", ",", "env", "=", "env", ")", "\n", "return", "_ProcessInfo", "(", "process_name", ",", "popen", ",", "stdout_file", ",", "stderr_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._wait_for_processes": [[104, 159], ["set", "tensorflow.logging.info", "enumerate", "len", "len", "len", "enumerate", "time.sleep", "kill_process.popen.kill", "kill_process.popen.wait", "kill_process.stdout.seek", "tensorflow.logging.info", "kill_process.stderr.seek", "tensorflow.logging.info", "wait_process.popen.poll", "tensorflow.logging.info", "wait_process.stdout.seek", "wait_process.stdout.read", "tensorflow.logging.info", "wait_process.stderr.seek", "tensorflow.logging.info", "set.add", "kill_process.popen.poll", "kill_process.stdout.read", "kill_process.stderr.read", "wait_process.stderr.read"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.wait"], ["", "def", "_wait_for_processes", "(", "wait_processes", ",", "kill_processes", ")", ":", "\n", "  ", "\"\"\"Waits until all `wait_processes` finish, then kills `kill_processes`.\n\n  Fails an assert if a process in `wait_processes` finishes unsuccessfully.\n  The processes in `kill_processes` are assumed to never finish so they are\n  killed.\n\n  Args:\n    wait_processes: A list of _ProcessInfo tuples. This function will wait\n      for each to finish.\n    kill_processes: A list of _ProcessInfo tuples. Each will be killed once\n      every process in `wait_processes` is finished.\n  Returns:\n    A list of strings, each which is a string of the stdout of a wait process.\n  \"\"\"", "\n", "wait_process_stdouts", "=", "[", "None", "]", "*", "len", "(", "wait_processes", ")", "\n", "finished_wait_processes", "=", "set", "(", ")", "\n", "while", "len", "(", "finished_wait_processes", ")", "<", "len", "(", "wait_processes", ")", ":", "\n", "    ", "for", "i", ",", "wait_process", "in", "enumerate", "(", "wait_processes", ")", ":", "\n", "      ", "if", "i", "in", "finished_wait_processes", ":", "\n", "        ", "continue", "\n", "", "ret_code", "=", "wait_process", ".", "popen", ".", "poll", "(", ")", "\n", "if", "ret_code", "is", "None", ":", "\n", "        ", "continue", "\n", "", "tf", ".", "logging", ".", "info", "(", "'{} finished'", ".", "format", "(", "wait_process", ".", "name", ")", ")", "\n", "wait_process", ".", "stdout", ".", "seek", "(", "0", ")", "\n", "wait_process_stdouts", "[", "i", "]", "=", "wait_process", ".", "stdout", ".", "read", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'stdout for {} (last {} chars): {}\\n'", ".", "format", "(", "\n", "wait_process", ".", "name", ",", "MAX_OUTPUT_CHARS", ",", "\n", "wait_process_stdouts", "[", "i", "]", "[", "-", "MAX_OUTPUT_CHARS", ":", "]", ")", ")", "\n", "wait_process", ".", "stderr", ".", "seek", "(", "0", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'stderr for {} (last {} chars): {}\\n'", ".", "format", "(", "\n", "wait_process", ".", "name", ",", "MAX_OUTPUT_CHARS", ",", "\n", "wait_process", ".", "stderr", ".", "read", "(", ")", "[", "-", "MAX_OUTPUT_CHARS", ":", "]", ")", ")", "\n", "assert", "ret_code", "==", "0", ",", "'Process failed with return code %d'", "%", "ret_code", "\n", "finished_wait_processes", ".", "add", "(", "i", ")", "\n", "", "for", "kill_process", "in", "kill_processes", ":", "\n", "      ", "ret_code", "=", "kill_process", ".", "popen", ".", "poll", "(", ")", "\n", "# kill processes should not end until we kill them.", "\n", "assert", "ret_code", "is", "None", ",", "'Process returned early with code %d'", "%", "ret_code", "\n", "", "time", ".", "sleep", "(", "0.25", ")", "\n", "", "tf", ".", "logging", ".", "info", "(", "'All wait processes finished'", ")", "\n", "for", "i", ",", "kill_process", "in", "enumerate", "(", "kill_processes", ")", ":", "\n", "# Kill each kill process.", "\n", "    ", "kill_process", ".", "popen", ".", "kill", "(", ")", "\n", "kill_process", ".", "popen", ".", "wait", "(", ")", "\n", "kill_process", ".", "stdout", ".", "seek", "(", "0", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'stdout for {} (last {} chars): {}\\n'", ".", "format", "(", "\n", "kill_process", ".", "name", ",", "MAX_OUTPUT_CHARS", ",", "\n", "kill_process", ".", "stdout", ".", "read", "(", ")", "[", "-", "MAX_OUTPUT_CHARS", ":", "]", ")", ")", "\n", "kill_process", ".", "stderr", ".", "seek", "(", "0", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'stderr for {} (last {} chars): {}\\n'", ".", "format", "(", "\n", "kill_process", ".", "name", ",", "MAX_OUTPUT_CHARS", ",", "\n", "kill_process", ".", "stderr", ".", "read", "(", ")", "[", "-", "MAX_OUTPUT_CHARS", ":", "]", ")", ")", "\n", "", "return", "wait_process_stdouts", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._spawn_benchmark_processes": [[161, 256], ["platforms.util.get_test_output_dir", "os.path.join", "os.makedirs", "tensorflow.logging.info", "platforms.util.get_command_to_run_python_module", "benchmark_cnn_distributed_test._convert_params_to_flags_list", "os.environ.copy", "range", "range", "range", "benchmark_cnn_distributed_test._wait_for_processes", "output.splitlines", "portpicker.pick_unused_port", "portpicker.pick_unused_port", "portpicker.pick_unused_port", "platforms_util.get_command_to_run_python_module.append", "platforms_util.get_command_to_run_python_module.append", "benchmark_cnn_distributed_test._create_task_process", "worker_processes.append", "benchmark_cnn_distributed_test._create_task_process", "ps_processes.append", "benchmark_cnn_distributed_test._create_task_process", "controller_processes.append", "_create_task_process.stdout.close", "_create_task_process.stderr.close", "range", "range", "range", "_create_task_process.popen.kill"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_output_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_command_to_run_python_module", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._convert_params_to_flags_list", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._wait_for_processes", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._create_task_process", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._create_task_process", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test._create_task_process"], ["", "def", "_spawn_benchmark_processes", "(", "output_dir_path", ",", "num_workers", ",", "num_ps", ",", "\n", "num_controllers", ",", "params", ")", ":", "\n", "  ", "\"\"\"Run training or evaluation in spawned processes.\n\n  Runs locally if num_workers == 1, num_ps == 0, and num_controllers == 0,\n  otherwise runs in distributed mode. In either case, one process is spawned\n  per worker and ps. Waits for training/evaluation to finish before returning.\n\n  Args:\n    output_dir_path: Relative path where stdout and stderr files will be\n      placed.\n    num_workers: Number of workers to spawn.\n    num_ps: Number of ps processes to spawn.\n    num_controllers: Number of controller processes to spawn (must be 0 or 1).\n    params: Params for BenchmarkCNN in each subprocess.\n  Returns:\n    A list output_list of outputs from all processes that output the\n    images/sec and accuracy. This process is the controller host in\n    distributed_all_reduce, and the workers otherwise. output_list[i] is a\n    list of lines from the ith worker's stdout.\n  \"\"\"", "\n", "run_distributed", "=", "num_workers", "!=", "1", "or", "num_ps", "!=", "0", "or", "num_controllers", "!=", "0", "\n", "if", "params", ".", "variable_update", "==", "'distributed_all_reduce'", ":", "\n", "    ", "assert", "num_controllers", "==", "1", "or", "not", "run_distributed", "\n", "assert", "num_ps", "==", "0", "\n", "", "else", ":", "\n", "    ", "assert", "num_controllers", "==", "0", "\n", "", "output_base_dir", "=", "platforms_util", ".", "get_test_output_dir", "(", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_base_dir", ",", "output_dir_path", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Outputs of processes will be outputted to: %s'", "%", "output_dir", ")", "\n", "\n", "args", "=", "platforms_util", ".", "get_command_to_run_python_module", "(", "\n", "'benchmark_cnn_distributed_test_runner'", ")", "\n", "args", "+=", "_convert_params_to_flags_list", "(", "params", ")", "\n", "if", "run_distributed", ":", "\n", "    ", "worker_ports", "=", "[", "portpicker", ".", "pick_unused_port", "(", ")", "for", "_", "in", "range", "(", "num_workers", ")", "]", "\n", "ps_ports", "=", "[", "portpicker", ".", "pick_unused_port", "(", ")", "for", "_", "in", "range", "(", "num_ps", ")", "]", "\n", "controller_ports", "=", "[", "portpicker", ".", "pick_unused_port", "(", ")", "\n", "for", "_", "in", "range", "(", "num_controllers", ")", "]", "\n", "# The numerator is 0.7 instead of 1 to leave some memory for the Cuda", "\n", "# runtime, etc.", "\n", "gpu_memory_frac", "=", "0.7", "/", "num_workers", "\n", "args", "+=", "[", "\n", "'--gpu_memory_frac_for_testing=%f'", "%", "gpu_memory_frac", ",", "\n", "'--worker_hosts='", "+", "','", ".", "join", "(", "'localhost:%d'", "%", "p", "for", "p", "in", "worker_ports", ")", "\n", "]", "\n", "if", "num_ps", ">", "0", ":", "\n", "      ", "ps_hosts_str", "=", "','", ".", "join", "(", "'localhost:%d'", "%", "p", "for", "p", "in", "ps_ports", ")", "\n", "args", ".", "append", "(", "'--ps_hosts='", "+", "ps_hosts_str", ")", "\n", "", "else", ":", "\n", "      ", "controller_host_str", "=", "','", ".", "join", "(", "'localhost:%d'", "%", "p", "\n", "for", "p", "in", "controller_ports", ")", "\n", "args", ".", "append", "(", "'--controller_host='", "+", "controller_host_str", ")", "\n", "", "", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "# Allow stdout to be viewed before the process ends.", "\n", "env", "[", "'PYTHONUNBUFFERED'", "]", "=", "'1'", "\n", "\n", "worker_processes", "=", "[", "]", "\n", "ps_processes", "=", "[", "]", "\n", "controller_processes", "=", "[", "]", "\n", "try", ":", "\n", "    ", "for", "i", "in", "range", "(", "num_workers", ")", ":", "\n", "      ", "job_name", "=", "'worker'", "if", "run_distributed", "else", "''", "\n", "process", "=", "_create_task_process", "(", "job_name", ",", "i", ",", "args", ",", "env", ",", "output_dir", ")", "\n", "worker_processes", ".", "append", "(", "process", ")", "\n", "# Don't let ps or controller processes use the gpu.", "\n", "", "env", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "''", "\n", "\n", "for", "i", "in", "range", "(", "num_ps", ")", ":", "\n", "      ", "process", "=", "_create_task_process", "(", "'ps'", ",", "i", ",", "args", ",", "env", ",", "output_dir", ")", "\n", "ps_processes", ".", "append", "(", "process", ")", "\n", "", "for", "i", "in", "range", "(", "num_controllers", ")", ":", "\n", "      ", "process", "=", "_create_task_process", "(", "'controller'", ",", "i", ",", "args", ",", "env", ",", "output_dir", ")", "\n", "controller_processes", ".", "append", "(", "process", ")", "\n", "# If all distributed all reduce mode is being used, the controller process", "\n", "# finishes and the worker processes block forever. Otherwise, the worker", "\n", "# processes finish and the ps processes block forever. We set", "\n", "# wait_processes and kill_processes accordingly.", "\n", "", "if", "controller_processes", ":", "\n", "      ", "wait_processes", "=", "controller_processes", "\n", "kill_processes", "=", "worker_processes", "\n", "", "else", ":", "\n", "      ", "wait_processes", "=", "worker_processes", "\n", "kill_processes", "=", "ps_processes", "\n", "", "outputs", "=", "_wait_for_processes", "(", "wait_processes", ",", "kill_processes", ")", "\n", "", "finally", ":", "\n", "    ", "for", "process", "in", "worker_processes", "+", "ps_processes", "+", "controller_processes", ":", "\n", "      ", "try", ":", "\n", "        ", "process", ".", "popen", ".", "kill", "(", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "# It's OK (and expected) if the process already exited.", "\n", "", "process", ".", "stdout", ".", "close", "(", ")", "\n", "process", ".", "stderr", ".", "close", "(", ")", "\n", "", "", "return", "[", "output", ".", "splitlines", "(", ")", "for", "output", "in", "outputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.CnnUtilBarrierTest.testBarrier": [[32, 52], ["cnn_util.Barrier", "range", "range", "threading.Thread", "threading.Thread.start", "threads.append", "sync_matrix.append", "threading.Thread.join", "cnn_util_test.CnnUtilBarrierTest.assertLessEqual", "max", "min", "range", "range"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start"], ["  ", "def", "testBarrier", "(", "self", ")", ":", "\n", "    ", "num_tasks", "=", "20", "\n", "num_waits", "=", "4", "\n", "barrier", "=", "cnn_util", ".", "Barrier", "(", "num_tasks", ")", "\n", "threads", "=", "[", "]", "\n", "sync_matrix", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_tasks", ")", ":", "\n", "      ", "sync_times", "=", "[", "0", "]", "*", "num_waits", "\n", "thread", "=", "threading", ".", "Thread", "(", "\n", "target", "=", "self", ".", "_run_task", ",", "args", "=", "(", "barrier", ",", "sync_times", ")", ")", "\n", "thread", ".", "start", "(", ")", "\n", "threads", ".", "append", "(", "thread", ")", "\n", "sync_matrix", ".", "append", "(", "sync_times", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "      ", "thread", ".", "join", "(", ")", "\n", "", "for", "wait_index", "in", "range", "(", "num_waits", "-", "1", ")", ":", "\n", "# Max of times at iteration i < min of times at iteration i + 1", "\n", "      ", "self", ".", "assertLessEqual", "(", "\n", "max", "(", "[", "sync_matrix", "[", "i", "]", "[", "wait_index", "]", "for", "i", "in", "range", "(", "num_tasks", ")", "]", ")", ",", "\n", "min", "(", "[", "sync_matrix", "[", "i", "]", "[", "wait_index", "+", "1", "]", "for", "i", "in", "range", "(", "num_tasks", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.CnnUtilBarrierTest._run_task": [[53, 57], ["range", "len", "time.time", "barrier.wait"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.wait"], ["", "", "def", "_run_task", "(", "self", ",", "barrier", ",", "sync_times", ")", ":", "\n", "    ", "for", "wait_index", "in", "range", "(", "len", "(", "sync_times", ")", ")", ":", "\n", "      ", "sync_times", "[", "wait_index", "]", "=", "time", ".", "time", "(", ")", "\n", "barrier", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.CnnUtilBarrierTest.testBarrierAbort": [[58, 69], ["cnn_util.Barrier", "threading.Thread", "threading.Thread.start", "cnn_util.Barrier.abort", "threading.Thread.join"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.Barrier.abort"], ["", "", "def", "testBarrierAbort", "(", "self", ")", ":", "\n", "    ", "num_tasks", "=", "2", "\n", "num_waits", "=", "1", "\n", "sync_times", "=", "[", "0", "]", "*", "num_waits", "\n", "barrier", "=", "cnn_util", ".", "Barrier", "(", "num_tasks", ")", "\n", "thread", "=", "threading", ".", "Thread", "(", "\n", "target", "=", "self", ".", "_run_task", ",", "args", "=", "(", "barrier", ",", "sync_times", ")", ")", "\n", "thread", ".", "start", "(", ")", "\n", "barrier", ".", "abort", "(", ")", "\n", "# thread won't be blocked by done barrier.", "\n", "thread", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._slow_tensorflow_op": [[73, 79], ["time.sleep", "tensorflow.py_func", "tensorflow.constant"], "methods", ["None"], ["  ", "def", "_slow_tensorflow_op", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a TensorFlow op that takes approximately 0.1s to complete.\"\"\"", "\n", "def", "slow_func", "(", "v", ")", ":", "\n", "      ", "time", ".", "sleep", "(", "0.1", ")", "\n", "return", "v", "\n", "", "return", "tf", ".", "py_func", "(", "slow_func", ",", "[", "tf", ".", "constant", "(", "0.", ")", "]", ",", "tf", ".", "float32", ")", ".", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer": [[80, 115], ["tensorflow.Variable", "cnn_util_test.ImageProducerTest._slow_tensorflow_op", "tensorflow.no_op", "tensorflow.no_op", "cnn_util_test.ImageProducerTest._slow_tensorflow_op", "tensorflow.control_dependencies", "tensorflow.Variable.assign_add", "tensorflow.control_dependencies", "tensorflow.Variable.assign_sub", "cnn_util_test.ImageProducerTest.test_session", "sess.run", "cnn_util.ImageProducer", "cnn_util.ImageProducer.start", "range", "cnn_util.ImageProducer.done", "time.sleep", "cnn_util_test.ImageProducerTest.assertGreaterEqual", "cnn_util_test.ImageProducerTest.assertLessEqual", "tensorflow.variables_initializer", "sess.run", "cnn_util_test.ImageProducerTest.assertGreaterEqual", "cnn_util_test.ImageProducerTest.assertLessEqual", "cnn_util.ImageProducer.notify_image_consumption", "cnn_util_test.ImageProducerTest.assertGreaterEqual", "cnn_util_test.ImageProducerTest.assertLessEqual", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._slow_tensorflow_op", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._slow_tensorflow_op", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.assign_sub", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.start", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.GlobalStepWatcher.done", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.ImageProducer.notify_image_consumption", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "_test_image_producer", "(", "self", ",", "batch_group_size", ",", "put_slower_than_get", ")", ":", "\n", "# We use the variable x to simulate a staging area of images. x represents", "\n", "# the number of batches in the staging area.", "\n", "    ", "x", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "put_slower_than_get", ":", "\n", "      ", "put_dep", "=", "self", ".", "_slow_tensorflow_op", "(", ")", "\n", "get_dep", "=", "tf", ".", "no_op", "(", ")", "\n", "", "else", ":", "\n", "      ", "put_dep", "=", "tf", ".", "no_op", "(", ")", "\n", "get_dep", "=", "self", ".", "_slow_tensorflow_op", "(", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "put_dep", "]", ")", ":", "\n", "      ", "put_op", "=", "x", ".", "assign_add", "(", "batch_group_size", ",", "use_locking", "=", "True", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "get_dep", "]", ")", ":", "\n", "      ", "get_op", "=", "x", ".", "assign_sub", "(", "1", ",", "use_locking", "=", "True", ")", "\n", "", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "variables_initializer", "(", "[", "x", "]", ")", ")", "\n", "image_producer", "=", "cnn_util", ".", "ImageProducer", "(", "sess", ",", "put_op", ",", "batch_group_size", ",", "\n", "use_python32_barrier", "=", "False", ")", "\n", "image_producer", ".", "start", "(", ")", "\n", "for", "_", "in", "range", "(", "5", "*", "batch_group_size", ")", ":", "\n", "        ", "sess", ".", "run", "(", "get_op", ")", "\n", "# We assert x is nonnegative, to ensure image_producer never causes", "\n", "# an unstage op to block. We assert x is at most 2 * batch_group_size,", "\n", "# to ensure it doesn't use too much memory by storing too many batches", "\n", "# in the staging area.", "\n", "self", ".", "assertGreaterEqual", "(", "sess", ".", "run", "(", "x", ")", ",", "0", ")", "\n", "self", ".", "assertLessEqual", "(", "sess", ".", "run", "(", "x", ")", ",", "2", "*", "batch_group_size", ")", "\n", "image_producer", ".", "notify_image_consumption", "(", ")", "\n", "self", ".", "assertGreaterEqual", "(", "sess", ".", "run", "(", "x", ")", ",", "0", ")", "\n", "self", ".", "assertLessEqual", "(", "sess", ".", "run", "(", "x", ")", ",", "2", "*", "batch_group_size", ")", "\n", "\n", "", "image_producer", ".", "done", "(", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "self", ".", "assertGreaterEqual", "(", "sess", ".", "run", "(", "x", ")", ",", "0", ")", "\n", "self", ".", "assertLessEqual", "(", "sess", ".", "run", "(", "x", ")", ",", "2", "*", "batch_group_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest.test_image_producer": [[116, 125], ["cnn_util_test.ImageProducerTest._test_image_producer", "cnn_util_test.ImageProducerTest._test_image_producer", "cnn_util_test.ImageProducerTest._test_image_producer", "cnn_util_test.ImageProducerTest._test_image_producer", "cnn_util_test.ImageProducerTest._test_image_producer", "cnn_util_test.ImageProducerTest._test_image_producer", "cnn_util_test.ImageProducerTest._test_image_producer", "cnn_util_test.ImageProducerTest._test_image_producer"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util_test.ImageProducerTest._test_image_producer"], ["", "", "def", "test_image_producer", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_image_producer", "(", "1", ",", "False", ")", "\n", "self", ".", "_test_image_producer", "(", "1", ",", "True", ")", "\n", "self", ".", "_test_image_producer", "(", "2", ",", "False", ")", "\n", "self", ".", "_test_image_producer", "(", "2", ",", "True", ")", "\n", "self", ".", "_test_image_producer", "(", "3", ",", "False", ")", "\n", "self", ".", "_test_image_producer", "(", "3", ",", "True", ")", "\n", "self", ".", "_test_image_producer", "(", "8", ",", "False", ")", "\n", "self", ".", "_test_image_producer", "(", "8", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test_runner.get_test_image_preprocessor": [[46, 75], ["numpy.zeros", "numpy.array", "preprocessing.TestImagePreprocessor", "preprocessing.TestImagePreprocessor.set_fake_data", "ValueError", "benchmark_cnn.get_data_type"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.set_fake_data", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_data_type"], ["def", "get_test_image_preprocessor", "(", "batch_size", ",", "params", ")", ":", "\n", "  ", "\"\"\"Returns the preprocessing.TestImagePreprocessor that should be injected.\n\n  Returns None if no preprocessor should be injected.\n\n  Args:\n    batch_size: The batch size across all GPUs.\n    params: BenchmarkCNN's parameters.\n  Returns:\n    Returns the preprocessing.TestImagePreprocessor that should be injected.\n  Raises:\n    ValueError: Flag --fake_input is an invalid value.\n  \"\"\"", "\n", "if", "FLAGS", ".", "fake_input", "==", "'none'", ":", "\n", "    ", "return", "None", "\n", "", "elif", "FLAGS", ".", "fake_input", "==", "'zeros_and_ones'", ":", "\n", "    ", "half_batch_size", "=", "batch_size", "//", "2", "\n", "images", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "227", ",", "227", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "images", "[", "half_batch_size", ":", ",", ":", ",", ":", ",", ":", "]", "=", "1", "\n", "labels", "=", "np", ".", "array", "(", "[", "0", "]", "*", "half_batch_size", "+", "[", "1", "]", "*", "half_batch_size", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "preprocessor", "=", "preprocessing", ".", "TestImagePreprocessor", "(", "\n", "227", ",", "227", ",", "batch_size", ",", "params", ".", "num_gpus", ",", "\n", "benchmark_cnn", ".", "get_data_type", "(", "params", ")", ")", "\n", "preprocessor", ".", "set_fake_data", "(", "images", ",", "labels", ")", "\n", "preprocessor", ".", "expected_subset", "=", "'validation'", "if", "params", ".", "eval", "else", "'train'", "\n", "return", "preprocessor", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Invalid --fake_input: %s'", "%", "FLAGS", ".", "fake_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test_runner.run_with_real_model": [[77, 90], ["benchmark_cnn.BenchmarkCNN", "benchmark_cnn.BenchmarkCNN.print_info", "benchmark_cnn_distributed_test_runner.get_test_image_preprocessor", "benchmark_cnn.BenchmarkCNN.run"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.print_info", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test_runner.get_test_image_preprocessor", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "def", "run_with_real_model", "(", "params", ")", ":", "\n", "  ", "\"\"\"Runs tf_cnn_benchmarks with a real model.\"\"\"", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "bench", ".", "print_info", "(", ")", "\n", "preprocessor", "=", "get_test_image_preprocessor", "(", "bench", ".", "batch_size", ",", "params", ")", "\n", "if", "preprocessor", "is", "not", "None", ":", "\n", "# The test image preprocessor requires queue runners. Since this file is", "\n", "# used for testing, it is OK to access protected members.", "\n", "# pylint: disable=protected-access", "\n", "    ", "bench", ".", "dataset", ".", "_queue_runner_required", "=", "True", "\n", "# pylint: enable=protected-access", "\n", "bench", ".", "image_preprocessor", "=", "preprocessor", "\n", "", "bench", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test_runner.run_with_test_model": [[92, 105], ["test_util.TestCNNModel", "test_util.get_fake_var_update_inputs", "test_util.monkey_patch", "benchmark_cnn.BenchmarkCNN", "numpy.array", "benchmark_cnn.BenchmarkCNN.image_preprocessor.set_fake_data", "benchmark_cnn.BenchmarkCNN.run", "test_util.TestDataSet"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_fake_var_update_inputs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.monkey_patch", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.set_fake_data", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "run_with_test_model", "(", "params", ")", ":", "\n", "  ", "\"\"\"Runs tf_cnn_benchmarks with a test model.\"\"\"", "\n", "model", "=", "test_util", ".", "TestCNNModel", "(", ")", "\n", "inputs", "=", "test_util", ".", "get_fake_var_update_inputs", "(", ")", "\n", "with", "test_util", ".", "monkey_patch", "(", "benchmark_cnn", ",", "\n", "LOSS_AND_ACCURACY_DIGITS_TO_SHOW", "=", "15", ")", ":", "\n", "    ", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ",", "dataset", "=", "test_util", ".", "TestDataSet", "(", ")", ",", "\n", "model", "=", "model", ")", "\n", "# The test model does not use labels when computing loss, so the label", "\n", "# values do not matter as long as it's the right shape.", "\n", "labels", "=", "np", ".", "array", "(", "[", "1", "]", "*", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "bench", ".", "image_preprocessor", ".", "set_fake_data", "(", "inputs", ",", "labels", ")", "\n", "bench", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test_runner.main": [[107, 114], ["benchmark_cnn.make_params_from_flags", "benchmark_cnn.setup", "benchmark_cnn_distributed_test_runner.run_with_test_model", "benchmark_cnn_distributed_test_runner.run_with_real_model"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params_from_flags", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.setup", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test_runner.run_with_test_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_distributed_test_runner.run_with_real_model"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "params", "=", "benchmark_cnn", ".", "make_params_from_flags", "(", ")", "\n", "params", "=", "benchmark_cnn", ".", "setup", "(", "params", ")", "\n", "if", "params", ".", "model", "==", "'test_model'", ":", "\n", "    ", "run_with_test_model", "(", "params", ")", "\n", "", "else", ":", "\n", "    ", "run_with_real_model", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.__init__": [[35, 57], ["collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "input_op", ",", "\n", "input_nchan", ",", "\n", "phase_train", ",", "\n", "use_tf_layers", ",", "\n", "data_format", "=", "'NCHW'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "variable_dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "self", ".", "top_layer", "=", "input_op", "\n", "self", ".", "top_size", "=", "input_nchan", "\n", "self", ".", "phase_train", "=", "phase_train", "\n", "self", ".", "use_tf_layers", "=", "use_tf_layers", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "variable_dtype", "=", "variable_dtype", "\n", "self", ".", "counts", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "self", ".", "use_batch_norm", "=", "False", "\n", "self", ".", "batch_norm_config", "=", "{", "}", "# 'decay': 0.997, 'scale': True}", "\n", "self", ".", "channel_pos", "=", "(", "'channels_last'", "\n", "if", "data_format", "==", "'NHWC'", "else", "'channels_first'", ")", "\n", "self", ".", "aux_top_layer", "=", "None", "\n", "self", ".", "aux_top_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.get_custom_getter": [[58, 96], ["getter", "getter", "tensorflow.cast"], "methods", ["None"], ["", "def", "get_custom_getter", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a custom getter that this class's methods must be called under.\n\n    All methods of this class must be called under a variable scope that was\n    passed this custom getter. Example:\n\n    ```python\n    network = ConvNetBuilder(...)\n    with tf.variable_scope('cg', custom_getter=network.get_custom_getter()):\n      network.conv(...)\n      # Call more methods of network here\n    ```\n\n    Currently, this custom getter only does anything if self.use_tf_layers is\n    True. In that case, it causes variables to be stored as dtype\n    self.variable_type, then casted to the requested dtype, instead of directly\n    storing the variable as the requested dtype.\n    \"\"\"", "\n", "def", "inner_custom_getter", "(", "getter", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "      ", "\"\"\"Custom getter that forces variables to have type self.variable_type.\"\"\"", "\n", "if", "not", "self", ".", "use_tf_layers", ":", "\n", "        ", "return", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "requested_dtype", "=", "kwargs", "[", "'dtype'", "]", "\n", "if", "not", "(", "requested_dtype", "==", "tf", ".", "float32", "and", "\n", "self", ".", "variable_dtype", "==", "tf", ".", "float16", ")", ":", "\n", "# Only change the variable dtype if doing so does not decrease variable", "\n", "# precision.", "\n", "        ", "kwargs", "[", "'dtype'", "]", "=", "self", ".", "variable_dtype", "\n", "", "var", "=", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# This if statement is needed to guard the cast, because batch norm", "\n", "# assigns directly to the return value of this custom getter. The cast", "\n", "# makes the return value not a variable so it cannot be assigned. Batch", "\n", "# norm variables are always in fp32 so this if statement is never", "\n", "# triggered for them.", "\n", "if", "var", ".", "dtype", ".", "base_dtype", "!=", "requested_dtype", ":", "\n", "        ", "var", "=", "tf", ".", "cast", "(", "var", ",", "requested_dtype", ")", "\n", "", "return", "var", "\n", "", "return", "inner_custom_getter", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.switch_to_aux_top_layer": [[97, 111], ["RuntimeError"], "methods", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "switch_to_aux_top_layer", "(", "self", ")", ":", "\n", "    ", "\"\"\"Context that construct cnn in the auxiliary arm.\"\"\"", "\n", "if", "self", ".", "aux_top_layer", "is", "None", ":", "\n", "      ", "raise", "RuntimeError", "(", "'Empty auxiliary top layer in the network.'", ")", "\n", "", "saved_top_layer", "=", "self", ".", "top_layer", "\n", "saved_top_size", "=", "self", ".", "top_size", "\n", "self", ".", "top_layer", "=", "self", ".", "aux_top_layer", "\n", "self", ".", "top_size", "=", "self", ".", "aux_top_size", "\n", "yield", "\n", "self", ".", "aux_top_layer", "=", "self", ".", "top_layer", "\n", "self", ".", "aux_top_size", "=", "self", ".", "top_size", "\n", "self", ".", "top_layer", "=", "saved_top_layer", "\n", "self", ".", "top_size", "=", "saved_top_size", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.get_variable": [[112, 119], ["tensorflow.get_variable", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "def", "get_variable", "(", "self", ",", "name", ",", "shape", ",", "dtype", ",", "cast_dtype", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(reedwm): Currently variables and gradients are transferred to other", "\n", "# devices and machines as type `dtype`, not `cast_dtype`. In particular,", "\n", "# this means in fp16 mode, variables are transferred as fp32 values, not", "\n", "# fp16 values, which uses extra bandwidth.", "\n", "    ", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "dtype", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "tf", ".", "cast", "(", "var", ",", "cast_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._conv2d_impl": [[120, 146], ["convnet_builder.ConvNetBuilder.GCT", "tensorflow.python.layers.convolutional.conv2d", "convnet_builder.ConvNetBuilder.get_variable", "tensorflow.nn.conv2d"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.GCT", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "def", "_conv2d_impl", "(", "self", ",", "input_layer", ",", "num_channels_in", ",", "filters", ",", "kernel_size", ",", "\n", "strides", ",", "padding", ",", "kernel_initializer", ")", ":", "\n", "\n", "    ", "input_layer", "=", "self", ".", "GCT", "(", "input_layer", ")", "\n", "\n", "if", "self", ".", "use_tf_layers", ":", "\n", "      ", "return", "conv_layers", ".", "conv2d", "(", "input_layer", ",", "filters", ",", "kernel_size", ",", "strides", ",", "\n", "padding", ",", "self", ".", "channel_pos", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "use_bias", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "weights_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "\n", "kernel_size", "[", "1", "]", ",", "num_channels_in", ",", "filters", "]", "\n", "# We use the name 'conv2d/kernel' so the variable has the same name as its", "\n", "# tf.layers equivalent. This way, if a checkpoint is written when", "\n", "# self.use_tf_layers == True, it can be loaded when", "\n", "# self.use_tf_layers == False, and vice versa.", "\n", "weights", "=", "self", ".", "get_variable", "(", "'conv2d/kernel'", ",", "weights_shape", ",", "\n", "self", ".", "variable_dtype", ",", "self", ".", "dtype", ",", "\n", "initializer", "=", "kernel_initializer", ")", "\n", "if", "self", ".", "data_format", "==", "'NHWC'", ":", "\n", "        ", "strides", "=", "[", "1", "]", "+", "strides", "+", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "strides", "=", "[", "1", ",", "1", "]", "+", "strides", "\n", "", "return", "tf", ".", "nn", ".", "conv2d", "(", "input_layer", ",", "weights", ",", "strides", ",", "padding", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.GCT": [[147, 212], ["tensorflow.variable_scope", "convnet_builder.ConvNetBuilder.get_variable", "convnet_builder.ConvNetBuilder.get_variable", "convnet_builder.ConvNetBuilder.get_variable", "input_layer.get_shape().as_list", "input_layer.get_shape().as_list", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.tanh", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.square", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.abs", "input_layer.get_shape", "input_layer.get_shape", "tensorflow.abs", "tensorflow.sqrt"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "", "def", "GCT", "(", "self", ",", "input_layer", "=", "None", ",", "name", "=", "None", ",", "epsilon", "=", "1e-5", ",", "use_l2_norm", "=", "True", ",", "after_relu", "=", "False", ")", ":", "\n", "    ", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "'GCT'", ")", ":", "\n", "      ", "if", "self", ".", "data_format", "==", "'NCHW'", ":", "\n", "        ", "_", ",", "num_channels", ",", "width", ",", "height", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "channel_index", "=", "1", "\n", "\n", "squeeze1", "=", "[", "2", ",", "3", "]", "\n", "squeeze2", "=", "[", "1", "]", "\n", "param_size", "=", "[", "1", ",", "num_channels", ",", "1", ",", "1", "]", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "_", ",", "width", ",", "height", ",", "num_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "channel_index", "=", "3", "\n", "\n", "squeeze1", "=", "[", "1", ",", "2", "]", "\n", "squeeze2", "=", "[", "3", "]", "\n", "param_size", "=", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", "\n", "\n", "", "alpha", "=", "self", ".", "get_variable", "(", "'alpha'", ",", "param_size", ",", "\n", "self", ".", "variable_dtype", ",", "self", ".", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "gamma", "=", "self", ".", "get_variable", "(", "'gamma'", ",", "param_size", ",", "\n", "self", ".", "variable_dtype", ",", "self", ".", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "beta", "=", "self", ".", "get_variable", "(", "'beta'", ",", "param_size", ",", "\n", "self", ".", "variable_dtype", ",", "self", ".", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "\n", "X", "=", "input_layer", "\n", "\n", "if", "use_l2_norm", ":", "# use l2 norm", "\n", "        ", "l2_norm", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "square", "(", "X", ")", ",", "squeeze1", ",", "keepdims", "=", "True", ")", "\n", "l2_norm", "=", "tf", ".", "sqrt", "(", "l2_norm", "+", "epsilon", ")", "\n", "\n", "embedding", "=", "alpha", "*", "l2_norm", "\n", "\n", "mid", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "embedding", ")", ",", "squeeze2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "_embedding", "=", "embedding", "*", "(", "gamma", "/", "tf", ".", "sqrt", "(", "mid", "+", "epsilon", ")", ")", "+", "beta", "\n", "", "else", ":", "# use l1 norm", "\n", "        ", "if", "after_relu", ":", "# if after ReLU, all the values of X should be not negative.", "\n", "          ", "l1_norm", "=", "tf", ".", "reduce_sum", "(", "\n", "X", ",", "squeeze1", ",", "keepdims", "=", "True", ")", "\n", "", "else", ":", "\n", "          ", "l1_norm", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "abs", "(", "X", ")", ",", "squeeze1", ",", "keepdims", "=", "True", ")", "\n", "\n", "", "embedding", "=", "alpha", "*", "l1_norm", "\n", "\n", "mid", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "embedding", ")", ",", "squeeze2", ",", "keep_dims", "=", "True", ")", "\n", "\n", "_embedding", "=", "embedding", "*", "(", "gamma", "/", "(", "mid", "+", "epsilon", ")", ")", "+", "beta", "\n", "\n", "", "gate", "=", "1.", "+", "tf", ".", "tanh", "(", "_embedding", ")", "\n", "\n", "_X", "=", "X", "*", "gate", "\n", "\n", "self", ".", "top_layer", "=", "_X", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv": [[213, 298], ["tensorflow.truncated_normal_initializer", "str", "tensorflow.variable_scope", "convnet_builder.ConvNetBuilder._conv2d_impl", "convnet_builder.ConvNetBuilder.batch_norm", "tensorflow.nn.relu", "convnet_builder.ConvNetBuilder._conv2d_impl", "tensorflow.pad", "convnet_builder.ConvNetBuilder._conv2d_impl", "convnet_builder.ConvNetBuilder.get_variable", "tensorflow.reshape", "tensorflow.nn.bias_add", "convnet_builder.ConvNetBuilder.get_shape", "tensorflow.nn.tanh", "KeyError", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._conv2d_impl", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._conv2d_impl", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._conv2d_impl", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["", "", "def", "conv", "(", "self", ",", "\n", "num_out_channels", ",", "\n", "k_height", ",", "\n", "k_width", ",", "\n", "d_height", "=", "1", ",", "\n", "d_width", "=", "1", ",", "\n", "mode", "=", "'SAME'", ",", "\n", "input_layer", "=", "None", ",", "\n", "num_channels_in", "=", "None", ",", "\n", "use_batch_norm", "=", "None", ",", "\n", "stddev", "=", "None", ",", "\n", "activation", "=", "'relu'", ",", "\n", "bias", "=", "0.0", ",", "\n", "kernel_initializer", "=", "None", ")", ":", "\n", "    ", "\"\"\"Construct a conv2d layer on top of cnn.\"\"\"", "\n", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "", "if", "num_channels_in", "is", "None", ":", "\n", "      ", "num_channels_in", "=", "self", ".", "top_size", "\n", "", "if", "stddev", "is", "not", "None", "and", "kernel_initializer", "is", "None", ":", "\n", "      ", "kernel_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "name", "=", "'conv'", "+", "str", "(", "self", ".", "counts", "[", "'conv'", "]", ")", "\n", "self", ".", "counts", "[", "'conv'", "]", "+=", "1", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "      ", "strides", "=", "[", "1", ",", "d_height", ",", "d_width", ",", "1", "]", "\n", "if", "self", ".", "data_format", "==", "'NCHW'", ":", "\n", "        ", "strides", "=", "[", "strides", "[", "0", "]", ",", "strides", "[", "3", "]", ",", "strides", "[", "1", "]", ",", "strides", "[", "2", "]", "]", "\n", "", "if", "mode", "!=", "'SAME_RESNET'", ":", "\n", "        ", "conv", "=", "self", ".", "_conv2d_impl", "(", "input_layer", ",", "num_channels_in", ",", "num_out_channels", ",", "\n", "kernel_size", "=", "[", "k_height", ",", "k_width", "]", ",", "\n", "strides", "=", "[", "d_height", ",", "d_width", "]", ",", "padding", "=", "mode", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ")", "\n", "", "else", ":", "# Special padding mode for ResNet models", "\n", "        ", "if", "d_height", "==", "1", "and", "d_width", "==", "1", ":", "\n", "          ", "conv", "=", "self", ".", "_conv2d_impl", "(", "input_layer", ",", "num_channels_in", ",", "\n", "num_out_channels", ",", "\n", "kernel_size", "=", "[", "k_height", ",", "k_width", "]", ",", "\n", "strides", "=", "[", "d_height", ",", "d_width", "]", ",", "padding", "=", "'SAME'", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ")", "\n", "", "else", ":", "\n", "          ", "rate", "=", "1", "# Unused (for 'a trous' convolutions)", "\n", "kernel_height_effective", "=", "k_height", "+", "(", "k_height", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "\n", "pad_h_beg", "=", "(", "kernel_height_effective", "-", "1", ")", "//", "2", "\n", "pad_h_end", "=", "kernel_height_effective", "-", "1", "-", "pad_h_beg", "\n", "kernel_width_effective", "=", "k_width", "+", "(", "k_width", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "\n", "pad_w_beg", "=", "(", "kernel_width_effective", "-", "1", ")", "//", "2", "\n", "pad_w_end", "=", "kernel_width_effective", "-", "1", "-", "pad_w_beg", "\n", "padding", "=", "[", "[", "0", ",", "0", "]", ",", "[", "pad_h_beg", ",", "pad_h_end", "]", ",", "\n", "[", "pad_w_beg", ",", "pad_w_end", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "if", "self", ".", "data_format", "==", "'NCHW'", ":", "\n", "            ", "padding", "=", "[", "padding", "[", "0", "]", ",", "padding", "[", "3", "]", ",", "padding", "[", "1", "]", ",", "padding", "[", "2", "]", "]", "\n", "", "input_layer", "=", "tf", ".", "pad", "(", "input_layer", ",", "padding", ")", "\n", "conv", "=", "self", ".", "_conv2d_impl", "(", "input_layer", ",", "num_channels_in", ",", "\n", "num_out_channels", ",", "\n", "kernel_size", "=", "[", "k_height", ",", "k_width", "]", ",", "\n", "strides", "=", "[", "\n", "d_height", ",", "d_width", "]", ",", "padding", "=", "'VALID'", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ")", "\n", "", "", "if", "use_batch_norm", "is", "None", ":", "\n", "        ", "use_batch_norm", "=", "self", ".", "use_batch_norm", "\n", "", "if", "not", "use_batch_norm", ":", "\n", "        ", "if", "bias", "is", "not", "None", ":", "\n", "          ", "biases", "=", "self", ".", "get_variable", "(", "'biases'", ",", "[", "num_out_channels", "]", ",", "\n", "self", ".", "variable_dtype", ",", "self", ".", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias", ")", ")", "\n", "biased", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ",", "data_format", "=", "self", ".", "data_format", ")", ",", "\n", "conv", ".", "get_shape", "(", ")", ")", "\n", "", "else", ":", "\n", "          ", "biased", "=", "conv", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "top_layer", "=", "conv", "\n", "self", ".", "top_size", "=", "num_out_channels", "\n", "biased", "=", "self", ".", "batch_norm", "(", "**", "self", ".", "batch_norm_config", ")", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "        ", "conv1", "=", "tf", ".", "nn", ".", "relu", "(", "biased", ")", "\n", "", "elif", "activation", "==", "'linear'", "or", "activation", "is", "None", ":", "\n", "        ", "conv1", "=", "biased", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "        ", "conv1", "=", "tf", ".", "nn", ".", "tanh", "(", "biased", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Invalid activation type \\'%s\\''", "%", "activation", ")", "\n", "", "self", ".", "top_layer", "=", "conv1", "\n", "self", ".", "top_size", "=", "num_out_channels", "\n", "return", "conv1", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._pool": [[299, 333], ["str", "pool_function", "tensorflow.nn.max_pool"], "methods", ["None"], ["", "", "def", "_pool", "(", "self", ",", "\n", "pool_name", ",", "\n", "pool_function", ",", "\n", "k_height", ",", "\n", "k_width", ",", "\n", "d_height", ",", "\n", "d_width", ",", "\n", "mode", ",", "\n", "input_layer", ",", "\n", "num_channels_in", ")", ":", "\n", "    ", "\"\"\"Construct a pooling layer.\"\"\"", "\n", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "", "else", ":", "\n", "      ", "self", ".", "top_size", "=", "num_channels_in", "\n", "", "name", "=", "pool_name", "+", "str", "(", "self", ".", "counts", "[", "pool_name", "]", ")", "\n", "self", ".", "counts", "[", "pool_name", "]", "+=", "1", "\n", "if", "self", ".", "use_tf_layers", ":", "\n", "      ", "pool", "=", "pool_function", "(", "\n", "input_layer", ",", "[", "k_height", ",", "k_width", "]", ",", "[", "d_height", ",", "d_width", "]", ",", "\n", "padding", "=", "mode", ",", "\n", "data_format", "=", "self", ".", "channel_pos", ",", "\n", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "      ", "if", "self", ".", "data_format", "==", "'NHWC'", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "k_height", ",", "k_width", ",", "1", "]", "\n", "strides", "=", "[", "1", ",", "d_height", ",", "d_width", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "k_height", ",", "k_width", "]", "\n", "strides", "=", "[", "1", ",", "1", ",", "d_height", ",", "d_width", "]", "\n", "", "pool", "=", "tf", ".", "nn", ".", "max_pool", "(", "input_layer", ",", "ksize", ",", "strides", ",", "padding", "=", "mode", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "name", "=", "name", ")", "\n", "", "self", ".", "top_layer", "=", "pool", "\n", "return", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool": [[334, 345], ["convnet_builder.ConvNetBuilder._pool"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._pool"], ["", "def", "mpool", "(", "self", ",", "\n", "k_height", ",", "\n", "k_width", ",", "\n", "d_height", "=", "2", ",", "\n", "d_width", "=", "2", ",", "\n", "mode", "=", "'VALID'", ",", "\n", "input_layer", "=", "None", ",", "\n", "num_channels_in", "=", "None", ")", ":", "\n", "    ", "\"\"\"Construct a max pooling layer.\"\"\"", "\n", "return", "self", ".", "_pool", "(", "'mpool'", ",", "pooling_layers", ".", "max_pooling2d", ",", "k_height", ",", "k_width", ",", "\n", "d_height", ",", "d_width", ",", "mode", ",", "input_layer", ",", "num_channels_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.apool": [[346, 358], ["convnet_builder.ConvNetBuilder._pool"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._pool"], ["", "def", "apool", "(", "self", ",", "\n", "k_height", ",", "\n", "k_width", ",", "\n", "d_height", "=", "2", ",", "\n", "d_width", "=", "2", ",", "\n", "mode", "=", "'VALID'", ",", "\n", "input_layer", "=", "None", ",", "\n", "num_channels_in", "=", "None", ")", ":", "\n", "    ", "\"\"\"Construct an average pooling layer.\"\"\"", "\n", "return", "self", ".", "_pool", "(", "'apool'", ",", "pooling_layers", ".", "average_pooling2d", ",", "k_height", ",", "\n", "k_width", ",", "d_height", ",", "d_width", ",", "mode", ",", "input_layer", ",", "\n", "num_channels_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape": [[359, 365], ["tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["", "def", "reshape", "(", "self", ",", "shape", ",", "input_layer", "=", "None", ")", ":", "\n", "    ", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "", "self", ".", "top_layer", "=", "tf", ".", "reshape", "(", "input_layer", ",", "shape", ")", "\n", "self", ".", "top_size", "=", "shape", "[", "-", "1", "]", "# HACK This may not always work", "\n", "return", "self", ".", "top_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine": [[366, 399], ["str", "tensorflow.variable_scope", "convnet_builder.ConvNetBuilder.get_variable", "convnet_builder.ConvNetBuilder.get_variable", "tensorflow.nn.xw_plus_b", "numpy.sqrt", "tensorflow.nn.relu", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "KeyError"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "def", "affine", "(", "self", ",", "\n", "num_out_channels", ",", "\n", "input_layer", "=", "None", ",", "\n", "num_channels_in", "=", "None", ",", "\n", "bias", "=", "0.0", ",", "\n", "stddev", "=", "None", ",", "\n", "activation", "=", "'relu'", ")", ":", "\n", "    ", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "", "if", "num_channels_in", "is", "None", ":", "\n", "      ", "num_channels_in", "=", "self", ".", "top_size", "\n", "", "name", "=", "'affine'", "+", "str", "(", "self", ".", "counts", "[", "'affine'", "]", ")", "\n", "self", ".", "counts", "[", "'affine'", "]", "+=", "1", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "      ", "init_factor", "=", "2.", "if", "activation", "==", "'relu'", "else", "1.", "\n", "stddev", "=", "stddev", "or", "np", ".", "sqrt", "(", "init_factor", "/", "num_channels_in", ")", "\n", "kernel", "=", "self", ".", "get_variable", "(", "\n", "'weights'", ",", "[", "num_channels_in", ",", "num_out_channels", "]", ",", "\n", "self", ".", "variable_dtype", ",", "self", ".", "dtype", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "biases", "=", "self", ".", "get_variable", "(", "'biases'", ",", "[", "num_out_channels", "]", ",", "\n", "self", ".", "variable_dtype", ",", "self", ".", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias", ")", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "input_layer", ",", "kernel", ",", "biases", ")", "\n", "if", "activation", "==", "'relu'", ":", "\n", "        ", "affine1", "=", "tf", ".", "nn", ".", "relu", "(", "logits", ",", "name", "=", "name", ")", "\n", "", "elif", "activation", "==", "'linear'", "or", "activation", "is", "None", ":", "\n", "        ", "affine1", "=", "logits", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Invalid activation type \\'%s\\''", "%", "activation", ")", "\n", "", "self", ".", "top_layer", "=", "affine1", "\n", "self", ".", "top_size", "=", "num_out_channels", "\n", "return", "affine1", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module": [[400, 437], ["str", "tensorflow.variable_scope", "enumerate", "tensorflow.concat", "sum", "col_layers.append", "col_layer_sizes.append", "enumerate", "col_layers[].append", "col_layer_sizes[].append", "convnet_builder.ConvNetBuilder.conv", "convnet_builder.ConvNetBuilder.mpool", "convnet_builder.ConvNetBuilder.apool", "KeyError"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.apool"], ["", "", "def", "inception_module", "(", "self", ",", "name", ",", "cols", ",", "input_layer", "=", "None", ",", "in_size", "=", "None", ")", ":", "\n", "    ", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "", "if", "in_size", "is", "None", ":", "\n", "      ", "in_size", "=", "self", ".", "top_size", "\n", "", "name", "+=", "str", "(", "self", ".", "counts", "[", "name", "]", ")", "\n", "self", ".", "counts", "[", "name", "]", "+=", "1", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "      ", "col_layers", "=", "[", "]", "\n", "col_layer_sizes", "=", "[", "]", "\n", "for", "c", ",", "col", "in", "enumerate", "(", "cols", ")", ":", "\n", "        ", "col_layers", ".", "append", "(", "[", "]", ")", "\n", "col_layer_sizes", ".", "append", "(", "[", "]", ")", "\n", "for", "l", ",", "layer", "in", "enumerate", "(", "col", ")", ":", "\n", "          ", "ltype", ",", "args", "=", "layer", "[", "0", "]", ",", "layer", "[", "1", ":", "]", "\n", "kwargs", "=", "{", "\n", "'input_layer'", ":", "input_layer", ",", "\n", "'num_channels_in'", ":", "in_size", "\n", "}", "if", "l", "==", "0", "else", "{", "}", "\n", "if", "ltype", "==", "'conv'", ":", "\n", "            ", "self", ".", "conv", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "ltype", "==", "'mpool'", ":", "\n", "            ", "self", ".", "mpool", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "ltype", "==", "'apool'", ":", "\n", "            ", "self", ".", "apool", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "ltype", "==", "'share'", ":", "# Share matching layer from previous column", "\n", "            ", "self", ".", "top_layer", "=", "col_layers", "[", "c", "-", "1", "]", "[", "l", "]", "\n", "self", ".", "top_size", "=", "col_layer_sizes", "[", "c", "-", "1", "]", "[", "l", "]", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'Invalid layer type for inception module: \\'%s\\''", "%", "ltype", ")", "\n", "", "col_layers", "[", "c", "]", ".", "append", "(", "self", ".", "top_layer", ")", "\n", "col_layer_sizes", "[", "c", "]", ".", "append", "(", "self", ".", "top_size", ")", "\n", "", "", "catdim", "=", "3", "if", "self", ".", "data_format", "==", "'NHWC'", "else", "1", "\n", "self", ".", "top_layer", "=", "tf", ".", "concat", "(", "[", "layers", "[", "-", "1", "]", "for", "layers", "in", "col_layers", "]", ",", "catdim", ")", "\n", "self", ".", "top_size", "=", "sum", "(", "[", "sizes", "[", "-", "1", "]", "for", "sizes", "in", "col_layer_sizes", "]", ")", "\n", "return", "self", ".", "top_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.spatial_mean": [[438, 445], ["tensorflow.reduce_mean", "str"], "methods", ["None"], ["", "", "def", "spatial_mean", "(", "self", ",", "keep_dims", "=", "False", ")", ":", "\n", "    ", "name", "=", "'spatial_mean'", "+", "str", "(", "self", ".", "counts", "[", "'spatial_mean'", "]", ")", "\n", "self", ".", "counts", "[", "'spatial_mean'", "]", "+=", "1", "\n", "axes", "=", "[", "1", ",", "2", "]", "if", "self", ".", "data_format", "==", "'NHWC'", "else", "[", "2", ",", "3", "]", "\n", "self", ".", "top_layer", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "top_layer", ",", "axes", ",", "keepdims", "=", "keep_dims", ",", "name", "=", "name", ")", "\n", "return", "self", ".", "top_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout": [[446, 462], ["str", "tensorflow.variable_scope", "tensorflow.python.layers.core.dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout"], ["", "def", "dropout", "(", "self", ",", "keep_prob", "=", "0.5", ",", "input_layer", "=", "None", ")", ":", "\n", "    ", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "", "else", ":", "\n", "      ", "self", ".", "top_size", "=", "None", "\n", "", "name", "=", "'dropout'", "+", "str", "(", "self", ".", "counts", "[", "'dropout'", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "      ", "if", "not", "self", ".", "phase_train", ":", "\n", "        ", "keep_prob", "=", "1.0", "\n", "", "if", "self", ".", "use_tf_layers", ":", "\n", "        ", "dropout", "=", "core_layers", ".", "dropout", "(", "input_layer", ",", "1.", "-", "keep_prob", ",", "\n", "training", "=", "self", ".", "phase_train", ")", "\n", "", "else", ":", "\n", "        ", "dropout", "=", "tf", ".", "nn", ".", "dropout", "(", "input_layer", ",", "keep_prob", ")", "\n", "", "self", ".", "top_layer", "=", "dropout", "\n", "return", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._batch_norm_without_layers": [[463, 505], ["convnet_builder.ConvNetBuilder.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "convnet_builder.ConvNetBuilder.get_variable", "tensorflow.summary.histogram", "tensorflow.constant", "tensorflow.nn.fused_batch_norm", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.nn.fused_batch_norm", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.ones_initializer"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "", "def", "_batch_norm_without_layers", "(", "self", ",", "input_layer", ",", "decay", ",", "use_scale", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"Batch normalization on `input_layer` without tf.layers.\"\"\"", "\n", "# We make this function as similar as possible to the", "\n", "# tf.contrib.layers.batch_norm, to minimize the differences between using", "\n", "# layers and not using layers.", "\n", "shape", "=", "input_layer", ".", "shape", "\n", "num_channels", "=", "shape", "[", "3", "]", "if", "self", ".", "data_format", "==", "'NHWC'", "else", "shape", "[", "1", "]", "\n", "beta", "=", "self", ".", "get_variable", "(", "'beta'", ",", "[", "num_channels", "]", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "if", "use_scale", ":", "\n", "      ", "gamma", "=", "self", ".", "get_variable", "(", "'gamma'", ",", "[", "num_channels", "]", ",", "tf", ".", "float32", ",", "\n", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'gamma'", ",", "gamma", ")", "\n", "", "else", ":", "\n", "      ", "gamma", "=", "tf", ".", "constant", "(", "1.0", ",", "tf", ".", "float32", ",", "[", "num_channels", "]", ")", "\n", "# For moving variables, we use tf.get_variable instead of self.get_variable,", "\n", "# since self.get_variable returns the result of tf.cast which we cannot", "\n", "# assign to.", "\n", "", "moving_mean", "=", "tf", ".", "get_variable", "(", "'moving_mean'", ",", "[", "num_channels", "]", ",", "\n", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "moving_variance", "=", "tf", ".", "get_variable", "(", "'moving_variance'", ",", "[", "num_channels", "]", ",", "\n", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "if", "self", ".", "phase_train", ":", "\n", "      ", "bn", ",", "batch_mean", ",", "batch_variance", "=", "tf", ".", "nn", ".", "fused_batch_norm", "(", "\n", "input_layer", ",", "gamma", ",", "beta", ",", "epsilon", "=", "epsilon", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "is_training", "=", "True", ")", "\n", "mean_update", "=", "moving_averages", ".", "assign_moving_average", "(", "\n", "moving_mean", ",", "batch_mean", ",", "decay", "=", "decay", ",", "zero_debias", "=", "False", ")", "\n", "variance_update", "=", "moving_averages", ".", "assign_moving_average", "(", "\n", "moving_variance", ",", "batch_variance", ",", "decay", "=", "decay", ",", "zero_debias", "=", "False", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "mean_update", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "variance_update", ")", "\n", "", "else", ":", "\n", "      ", "bn", ",", "_", ",", "_", "=", "tf", ".", "nn", ".", "fused_batch_norm", "(", "\n", "input_layer", ",", "gamma", ",", "beta", ",", "mean", "=", "moving_mean", ",", "\n", "variance", "=", "moving_variance", ",", "epsilon", "=", "epsilon", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "is_training", "=", "False", ")", "\n", "", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm": [[506, 534], ["int", "str", "tensorflow.variable_scope", "tensorflow.contrib.layers.batch_norm", "convnet_builder.ConvNetBuilder._batch_norm_without_layers"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder._batch_norm_without_layers"], ["", "def", "batch_norm", "(", "self", ",", "input_layer", "=", "None", ",", "decay", "=", "0.999", ",", "scale", "=", "False", ",", "\n", "epsilon", "=", "0.001", ")", ":", "\n", "    ", "\"\"\"Adds a Batch Normalization layer.\"\"\"", "\n", "if", "input_layer", "is", "None", ":", "\n", "      ", "input_layer", "=", "self", ".", "top_layer", "\n", "", "else", ":", "\n", "      ", "self", ".", "top_size", "=", "None", "\n", "", "name", "=", "'batchnorm'", "+", "str", "(", "self", ".", "counts", "[", "'batchnorm'", "]", ")", "\n", "self", ".", "counts", "[", "'batchnorm'", "]", "+=", "1", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "if", "self", ".", "use_tf_layers", ":", "\n", "        ", "bn", "=", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "\n", "input_layer", ",", "\n", "decay", "=", "decay", ",", "\n", "scale", "=", "scale", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "is_training", "=", "self", ".", "phase_train", ",", "\n", "fused", "=", "True", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "scope", "=", "scope", ")", "\n", "", "else", ":", "\n", "        ", "bn", "=", "self", ".", "_batch_norm_without_layers", "(", "\n", "input_layer", ",", "decay", ",", "scale", ",", "epsilon", ")", "\n", "", "", "self", ".", "top_layer", "=", "bn", "\n", "self", ".", "top_size", "=", "bn", ".", "shape", "[", "3", "]", "if", "self", ".", "data_format", "==", "'NHWC'", "else", "bn", ".", "shape", "[", "1", "]", "\n", "self", ".", "top_size", "=", "int", "(", "self", ".", "top_size", ")", "\n", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.lrn": [[535, 542], ["tensorflow.nn.lrn", "str"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.lrn"], ["", "def", "lrn", "(", "self", ",", "depth_radius", ",", "bias", ",", "alpha", ",", "beta", ")", ":", "\n", "    ", "\"\"\"Adds a local response normalization layer.\"\"\"", "\n", "name", "=", "'lrn'", "+", "str", "(", "self", ".", "counts", "[", "'lrn'", "]", ")", "\n", "self", ".", "counts", "[", "'lrn'", "]", "+=", "1", "\n", "self", ".", "top_layer", "=", "tf", ".", "nn", ".", "lrn", "(", "\n", "self", ".", "top_layer", ",", "depth_radius", ",", "bias", ",", "alpha", ",", "beta", ",", "name", "=", "name", ")", "\n", "return", "self", ".", "top_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.AllReduceTest.testGroupKey": [[34, 67], ["allreduce.collective_group_key", "allreduce.collective_group_key", "allreduce.collective_group_key", "allreduce.collective_group_key", "allreduce.collective_group_key", "allreduce.collective_group_key", "allreduce.collective_group_key", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertTrue", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertTrue"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key"], ["  ", "def", "testGroupKey", "(", "self", ")", ":", "\n", "    ", "d0", "=", "[", "'/job:worker/replica:0/task:0/device:GPU:1'", ",", "\n", "'/job:worker/replica:0/task:0/device:GPU:0'", ",", "\n", "'/job:worker/replica:0/task:0/device:GPU:3'", ",", "]", "\n", "d1", "=", "[", "'/job:worker/replica:0/task:1/device:GPU:1'", ",", "\n", "'/job:worker/replica:0/task:1/device:GPU:0'", ",", "\n", "'/job:worker/replica:0/task:1/device:GPU:3'", ",", "]", "\n", "d2", "=", "[", "'/job:worker/replica:0/task:1/device:GPU:1'", ",", "\n", "'/job:worker/replica:0/task:1/device:GPU:3'", ",", "\n", "'/job:worker/replica:0/task:1/device:GPU:0'", ",", "]", "\n", "d3", "=", "[", "'/job:worker/replica:0/task:1/device:GPU:1'", ",", "\n", "'/job:worker/replica:0/task:1/device:GPU:3'", ",", "\n", "'/job:worker/replica:0/task:1/device:GPU:2'", ",", "]", "\n", "d4", "=", "[", "'/job:worker/task:0/device:GPU:1'", ",", "\n", "'/job:worker/task:0/device:GPU:2'", ",", "\n", "'/job:worker/task:0/device:GPU:3'", ",", "]", "\n", "d5", "=", "[", "'/job:worker/task:0/device:CPU:1'", ",", "\n", "'/job:worker/task:0/device:CPU:2'", "]", "\n", "d6", "=", "[", "'/job:worker/task:0/device:CPU:2'", ",", "\n", "'/job:worker/task:0/device:CPU:1'", "]", "\n", "g0", "=", "allreduce", ".", "collective_group_key", "(", "d0", ")", "\n", "g1", "=", "allreduce", ".", "collective_group_key", "(", "d1", ")", "\n", "g2", "=", "allreduce", ".", "collective_group_key", "(", "d2", ")", "\n", "g3", "=", "allreduce", ".", "collective_group_key", "(", "d3", ")", "\n", "g4", "=", "allreduce", ".", "collective_group_key", "(", "d4", ")", "\n", "g5", "=", "allreduce", ".", "collective_group_key", "(", "d5", ")", "\n", "g6", "=", "allreduce", ".", "collective_group_key", "(", "d6", ")", "\n", "self", ".", "assertEqual", "(", "g0", ",", "g1", ")", "\n", "self", ".", "assertEqual", "(", "g0", ",", "g2", ")", "\n", "self", ".", "assertTrue", "(", "g0", "!=", "g3", ")", "\n", "self", ".", "assertEqual", "(", "g3", ",", "g4", ")", "\n", "self", ".", "assertEqual", "(", "g5", ",", "g6", ")", "\n", "self", ".", "assertTrue", "(", "g4", "!=", "g5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.AllReduceTest.testExtractRanges": [[68, 99], ["allreduce.extract_ranges", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce.extract_ranges", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce.extract_ranges", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce.extract_ranges", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce.extract_ranges", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.extract_ranges", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.extract_ranges", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.extract_ranges", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.extract_ranges", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.extract_ranges"], ["", "def", "testExtractRanges", "(", "self", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "expected_ranges", "=", "[", "]", "\n", "expected_singles", "=", "[", "]", "\n", "ranges", ",", "singles", "=", "allreduce", ".", "extract_ranges", "(", "x", ")", "\n", "self", ".", "assertEqual", "(", "expected_ranges", ",", "ranges", ")", "\n", "self", ".", "assertEqual", "(", "expected_singles", ",", "singles", ")", "\n", "x", "=", "[", "1", ",", "3", ",", "4", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "expected_ranges", "=", "[", "[", "3", ",", "4", "]", ",", "[", "6", ",", "9", "]", "]", "\n", "expected_singles", "=", "[", "1", "]", "\n", "ranges", ",", "singles", "=", "allreduce", ".", "extract_ranges", "(", "x", ")", "\n", "self", ".", "assertEqual", "(", "expected_ranges", ",", "ranges", ")", "\n", "self", ".", "assertEqual", "(", "expected_singles", ",", "singles", ")", "\n", "x", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "expected_ranges", "=", "[", "[", "1", ",", "4", "]", ",", "[", "6", ",", "9", "]", "]", "\n", "expected_singles", "=", "[", "]", "\n", "ranges", ",", "singles", "=", "allreduce", ".", "extract_ranges", "(", "x", ")", "\n", "self", ".", "assertEqual", "(", "expected_ranges", ",", "ranges", ")", "\n", "self", ".", "assertEqual", "(", "expected_singles", ",", "singles", ")", "\n", "x", "=", "[", "1", ",", "3", ",", "4", ",", "6", ",", "7", ",", "9", "]", "\n", "expected_ranges", "=", "[", "[", "3", ",", "4", "]", ",", "[", "6", ",", "7", "]", "]", "\n", "expected_singles", "=", "[", "1", ",", "9", "]", "\n", "ranges", ",", "singles", "=", "allreduce", ".", "extract_ranges", "(", "x", ")", "\n", "self", ".", "assertEqual", "(", "expected_ranges", ",", "ranges", ")", "\n", "self", ".", "assertEqual", "(", "expected_singles", ",", "singles", ")", "\n", "x", "=", "[", "1", ",", "3", ",", "6", ",", "9", "]", "\n", "expected_ranges", "=", "[", "]", "\n", "expected_singles", "=", "[", "1", ",", "3", ",", "6", ",", "9", "]", "\n", "ranges", ",", "singles", "=", "allreduce", ".", "extract_ranges", "(", "x", ")", "\n", "self", ".", "assertEqual", "(", "expected_ranges", ",", "ranges", ")", "\n", "self", ".", "assertEqual", "(", "expected_singles", ",", "singles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.AllReduceTest.testPackRange": [[100, 137], ["tensorflow.constant", "tensorflow.constant", "allreduce.pack_range", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "tensorflow.constant", "tensorflow.constant", "allreduce.pack_range", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "range", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_range", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_range"], ["", "def", "testPackRange", "(", "self", ")", ":", "\n", "    ", "packing", "=", "{", "}", "\n", "t0", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t1", "=", "tf", ".", "constant", "(", "[", "4", ",", "5", ",", "6", ",", "7", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "gv", "=", "[", "(", "t0", ",", "'v0'", ")", ",", "(", "t1", ",", "'v1'", ")", "]", "\n", "new_t", "=", "allreduce", ".", "pack_range", "(", "'0:0'", ",", "packing", ",", "gv", ",", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "new_t", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "8", ",", "new_t", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "packing", ",", "{", "\n", "'0:0'", ":", "\n", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "2", ")", ",", "\n", "vars", "=", "[", "'v0'", ",", "'v1'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", "]", ")", "\n", "}", ")", "\n", "\n", "t2", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "3", ",", "4", ",", "5", "]", ",", "[", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t3", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "3", ",", "4", ",", "5", "]", ",", "[", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "gv", "=", "[", "(", "t0", ",", "'v0'", ")", ",", "(", "t1", ",", "'v1'", ")", ",", "(", "t2", ",", "'v2'", ")", ",", "(", "t3", ",", "'v3'", ")", "]", "\n", "packing", "=", "{", "}", "\n", "new_t", "=", "allreduce", ".", "pack_range", "(", "'1:0'", ",", "packing", ",", "gv", ",", "[", "0", ",", "3", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "new_t", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "26", ",", "new_t", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "packing", ",", "{", "\n", "'1:0'", ":", "\n", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "4", ")", ",", "\n", "vars", "=", "[", "'v0'", ",", "'v1'", ",", "'v2'", ",", "'v3'", "]", ",", "\n", "shapes", "=", "[", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.AllReduceTest.testUnpackGradTuple": [[140, 170], ["tensorflow.constant", "allreduce.unpack_grad_tuple", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce.GradPackTuple", "len", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_grad_tuple"], ["", "def", "testUnpackGradTuple", "(", "self", ")", ":", "\n", "    ", "packing", "=", "{", "\n", "'0:0'", ":", "\n", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "4", ")", ",", "\n", "vars", "=", "[", "'v0'", ",", "'v1'", ",", "'v2'", ",", "'v3'", "]", ",", "\n", "shapes", "=", "[", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", "]", ")", "\n", "]", ")", "\n", "}", "\n", "tc", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "\n", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "\n", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "packed_gv", "=", "[", "tc", ",", "'packing_var_placeholder'", "]", "\n", "gv", "=", "allreduce", ".", "unpack_grad_tuple", "(", "packed_gv", ",", "packing", "[", "'0:0'", "]", ")", "\n", "self", ".", "assertEqual", "(", "4", ",", "len", "(", "gv", ")", ")", "\n", "self", ".", "assertEqual", "(", "'v0'", ",", "gv", "[", "0", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v1'", ",", "gv", "[", "1", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v2'", ",", "gv", "[", "2", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v3'", ",", "gv", "[", "3", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "gv", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "4", ",", "gv", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "gv", "[", "1", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "4", ",", "gv", "[", "1", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "2", ",", "gv", "[", "2", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "gv", "[", "2", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "gv", "[", "2", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.AllReduceTest.testPackSmallTensors": [[171, 248], ["tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "range", "allreduce.pack_small_tensors", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertTrue", "allreduce.pack_small_tensors", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce.pack_small_tensors", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "tower_grads.append", "len", "len", "len", "len", "len", "len", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "range", "range", "range", "range", "range", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_small_tensors"], ["", "def", "testPackSmallTensors", "(", "self", ")", ":", "\n", "    ", "t0", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t1", "=", "tf", ".", "constant", "(", "[", "4", ",", "5", ",", "6", ",", "7", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t2", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "3", ",", "4", ",", "5", "]", ",", "[", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t3", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "3", ",", "4", ",", "5", "]", ",", "[", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "tower_grads", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "      ", "gv", "=", "[", "(", "t0", ",", "'v_%d_0'", "%", "d", ")", ",", "(", "t1", ",", "'v_%d_1'", "%", "d", ")", ",", "(", "t2", ",", "'v_%d_2'", "%", "d", ")", ",", "\n", "(", "t3", ",", "'v_%d_3'", "%", "d", ")", "]", "\n", "tower_grads", ".", "append", "(", "gv", ")", "\n", "\n", "# 1) Set the size limit so small that nothing gets concatenated.", "\n", "", "new_tower_grads", ",", "packing", "=", "allreduce", ".", "pack_small_tensors", "(", "\n", "tower_grads", ",", "max_bytes", "=", "12", ",", "\n", "max_group", "=", "10", ")", "\n", "self", ".", "assertEqual", "(", "tower_grads", ",", "new_tower_grads", ")", "\n", "self", ".", "assertTrue", "(", "packing", "is", "None", ")", "\n", "\n", "# 2) Set the size limit so only the first two tensors get concatenated", "\n", "new_tower_grads", ",", "packing", "=", "allreduce", ".", "pack_small_tensors", "(", "\n", "tower_grads", ",", "max_bytes", "=", "16", ",", "# 16 bytes == 4 elements", "\n", "max_group", "=", "10", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "len", "(", "new_tower_grads", ")", ")", "\n", "self", ".", "assertEqual", "(", "4", ",", "len", "(", "tower_grads", "[", "0", "]", ")", ")", "\n", "first_tower", "=", "new_tower_grads", "[", "0", "]", "\n", "self", ".", "assertEqual", "(", "3", ",", "len", "(", "first_tower", ")", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "first_tower", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "8", ",", "first_tower", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "packing", ",", "\n", "{", "'0:0'", ":", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "2", ")", ",", "\n", "vars", "=", "[", "'v_0_0'", ",", "'v_0_1'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", "]", ")", ",", "\n", "'1:0'", ":", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "2", ")", ",", "\n", "vars", "=", "[", "'v_1_0'", ",", "'v_1_1'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", "]", ")", ",", "\n", "'2:0'", ":", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "2", ")", ",", "\n", "vars", "=", "[", "'v_2_0'", ",", "'v_2_1'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", "]", ")", "}", ")", "\n", "\n", "# 3) Set the size limit so all tensors get concatenated", "\n", "new_tower_grads", ",", "packing", "=", "allreduce", ".", "pack_small_tensors", "(", "\n", "tower_grads", ",", "max_bytes", "=", "256", ",", "# bytes = 64 elements", "\n", "max_group", "=", "10", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "len", "(", "new_tower_grads", ")", ")", "\n", "self", ".", "assertEqual", "(", "4", ",", "len", "(", "tower_grads", "[", "0", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "len", "(", "new_tower_grads", "[", "0", "]", ")", ")", "\n", "first_tower", "=", "new_tower_grads", "[", "0", "]", "\n", "self", ".", "assertEqual", "(", "1", ",", "first_tower", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "26", ",", "first_tower", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "packing", ",", "\n", "{", "'0:0'", ":", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "4", ")", ",", "\n", "vars", "=", "[", "'v_0_0'", ",", "'v_0_1'", ",", "'v_0_2'", ",", "'v_0_3'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", "]", ")", ",", "\n", "'1:0'", ":", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "4", ")", ",", "\n", "vars", "=", "[", "'v_1_0'", ",", "'v_1_1'", ",", "'v_1_2'", ",", "'v_1_3'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", "]", ")", ",", "\n", "'2:0'", ":", "allreduce", ".", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "4", ")", ",", "\n", "vars", "=", "[", "'v_2_0'", ",", "'v_2_1'", ",", "'v_2_2'", ",", "'v_2_3'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", "]", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.AllReduceTest.testUnpackSmallTensors": [[249, 301], ["tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "range", "allreduce.unpack_small_tensors", "allreduce_test.AllReduceTest.assertEqual", "enumerate", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "allreduce.GradPackTuple", "tower_grads.append", "len", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "allreduce_test.AllReduceTest.assertEqual", "len", "range", "range", "range", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_small_tensors"], ["", "def", "testUnpackSmallTensors", "(", "self", ")", ":", "\n", "    ", "packing", "=", "{", "'0:0'", ":", "allreduce", ".", "GradPackTuple", "(", "indices", "=", "range", "(", "2", ")", ",", "\n", "vars", "=", "[", "'v_0_0'", ",", "'v_0_1'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", "]", ")", ",", "\n", "'0:1'", ":", "allreduce", ".", "GradPackTuple", "(", "indices", "=", "range", "(", "3", ",", "5", ")", ",", "\n", "vars", "=", "[", "'v_0_3'", ",", "'v_0_4'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", "]", ")", ",", "\n", "'1:0'", ":", "allreduce", ".", "GradPackTuple", "(", "indices", "=", "range", "(", "2", ")", ",", "\n", "vars", "=", "[", "'v_1_0'", ",", "'v_1_1'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "4", "]", ")", "]", ")", ",", "\n", "'1:1'", ":", "allreduce", ".", "GradPackTuple", "(", "indices", "=", "range", "(", "3", ",", "5", ")", ",", "\n", "vars", "=", "[", "'v_1_3'", ",", "'v_1_4'", "]", ",", "\n", "shapes", "=", "[", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "3", ",", "3", ",", "]", ")", "]", ")", "}", "\n", "t0", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t1", "=", "tf", ".", "constant", "(", "[", "17", ",", "17", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t2", "=", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "\n", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "t3", "=", "tf", ".", "constant", "(", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "tower_grads", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "      ", "one_tower", "=", "[", "(", "t0", ",", "'packing_var_placeholder'", ")", ",", "\n", "(", "t2", ",", "'packing_var_placeholder'", ")", ",", "\n", "(", "t1", ",", "'v_%d_2'", "%", "d", ")", ",", "(", "t3", ",", "'v_%d_5'", "%", "d", ")", "]", "\n", "tower_grads", ".", "append", "(", "one_tower", ")", "\n", "", "new_tower_grads", "=", "allreduce", ".", "unpack_small_tensors", "(", "tower_grads", ",", "packing", ")", "\n", "self", ".", "assertEqual", "(", "2", ",", "len", "(", "new_tower_grads", ")", ")", "\n", "for", "d", ",", "tg", "in", "enumerate", "(", "new_tower_grads", ")", ":", "\n", "      ", "self", ".", "assertEqual", "(", "6", ",", "len", "(", "tg", ")", ")", "\n", "self", ".", "assertEqual", "(", "'v_%d_0'", "%", "d", ",", "tg", "[", "0", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v_%d_1'", "%", "d", ",", "tg", "[", "1", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v_%d_2'", "%", "d", ",", "tg", "[", "2", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v_%d_3'", "%", "d", ",", "tg", "[", "3", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v_%d_4'", "%", "d", ",", "tg", "[", "4", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "'v_%d_5'", "%", "d", ",", "tg", "[", "5", "]", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "tg", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "4", ",", "tg", "[", "0", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "tg", "[", "1", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "4", ",", "tg", "[", "1", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "tg", "[", "2", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "2", ",", "tg", "[", "2", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "2", ",", "tg", "[", "3", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "tg", "[", "3", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "tg", "[", "3", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "2", ",", "tg", "[", "4", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "tg", "[", "4", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "3", ",", "tg", "[", "4", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "tg", "[", "5", "]", "[", "0", "]", ".", "shape", ".", "ndims", ")", "\n", "self", ".", "assertEqual", "(", "1", ",", "tg", "[", "5", "]", "[", "0", "]", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._init_tensors": [[306, 337], ["len", "tensorflow.Variable", "range", "consts.append", "tensors.append", "vrbls.append", "tensorflow.device", "range", "tower_grads.append", "numpy.fromiter().reshape", "consts[].append", "tensors[].append", "vrbls[].append", "gv_tuples.append", "tensorflow.constant", "tensorflow.Variable", "numpy.fromiter", "range"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["def", "_init_tensors", "(", "self", ",", "num_towers", ",", "tensor_shapes", ")", ":", "\n", "    ", "\"\"\"Construct a collection of tensors across multiple devices.\"\"\"", "\n", "num_tensors", "=", "len", "(", "tensor_shapes", ")", "\n", "consts", "=", "[", "]", "\n", "tensors", "=", "[", "]", "\n", "vrbls", "=", "[", "]", "\n", "tower_grads", "=", "[", "]", "\n", "tf", ".", "Variable", "(", "[", "-", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "'packing_var_placeholder'", ")", "\n", "for", "dev_idx", "in", "range", "(", "0", ",", "num_towers", ")", ":", "\n", "      ", "devname", "=", "'/job:localhost/device:GPU:%d'", "%", "dev_idx", "\n", "consts", ".", "append", "(", "[", "]", ")", "\n", "tensors", ".", "append", "(", "[", "]", ")", "\n", "vrbls", ".", "append", "(", "[", "]", ")", "\n", "with", "tf", ".", "device", "(", "devname", ")", ":", "\n", "        ", "base_value", "=", "0", "\n", "gv_tuples", "=", "[", "]", "\n", "for", "t_idx", "in", "range", "(", "0", ",", "num_tensors", ")", ":", "\n", "          ", "shape", "=", "tensor_shapes", "[", "t_idx", "]", "\n", "num_elts", "=", "0", "\n", "for", "d", "in", "shape", ":", "\n", "            ", "num_elts", "=", "(", "num_elts", "or", "1", ")", "*", "d", "\n", "", "c", "=", "np", ".", "fromiter", "(", "range", "(", "base_value", ",", "base_value", "+", "num_elts", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "shape", ")", "\n", "base_value", "+=", "num_elts", "\n", "consts", "[", "dev_idx", "]", ".", "append", "(", "c", ")", "\n", "tensors", "[", "dev_idx", "]", ".", "append", "(", "tf", ".", "constant", "(", "c", ")", ")", "\n", "vrbls", "[", "dev_idx", "]", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "c", ",", "name", "=", "'v_d%d_t%d'", "%", "(", "dev_idx", ",", "t_idx", ")", ")", ")", "\n", "gv_tuples", ".", "append", "(", "(", "tensors", "[", "dev_idx", "]", "[", "-", "1", "]", ",", "vrbls", "[", "dev_idx", "]", "[", "-", "1", "]", ")", ")", "\n", "", "tower_grads", ".", "append", "(", "gv_tuples", ")", "\n", "", "", "return", "tower_grads", ",", "consts", ",", "tensors", ",", "vrbls", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._do_pack_unpack_test": [[341, 374], ["tensorflow.python.framework.ops.Graph().as_default", "allreduce_test.DynamicPackingTest._init_tensors", "allreduce.pack_small_tensors", "allreduce.unpack_small_tensors", "allreduce_test.DynamicPackingTest.test_session", "sess.run", "sess.run", "range", "sess.run", "range", "tensorflow.python.framework.ops.Graph", "tensorflow.python.ops.variables.global_variables_initializer", "range", "range", "len", "allreduce_test.DynamicPackingTest.assertTrue", "len", "allreduce_test.DynamicPackingTest.assertTrue", "allreduce_test.DynamicPackingTest.assertEqual", "numpy.array_equal", "numpy.array_equal", "numpy.array().reshape", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._init_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["def", "_do_pack_unpack_test", "(", "self", ",", "tt", ")", ":", "\n", "    ", "\"\"\"Do a single pack-unpack test.\n\n    Args:\n      tt: A _test_tuple defining the parameters of the test to do.\n\n    This test executes a graph that performs a pack of tower_grads\n    followed by an unpack and verifies that the shapes and values\n    of gradient tensors are unchanged, along with paired variables.\n    \"\"\"", "\n", "with", "ops", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "      ", "tower_grads", ",", "consts", ",", "_", ",", "vrbls", "=", "self", ".", "_init_tensors", "(", "\n", "tt", ".", "num_devices", ",", "tt", ".", "in_shapes", ")", "\n", "packed_tg", ",", "packing", "=", "allreduce", ".", "pack_small_tensors", "(", "\n", "tower_grads", ",", "max_bytes", "=", "40", ",", "max_group", "=", "10", ")", "\n", "unpacked_tg", "=", "allreduce", ".", "unpack_small_tensors", "(", "packed_tg", ",", "packing", ")", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "variables", ".", "global_variables_initializer", "(", ")", ")", "\n", "packed", "=", "sess", ".", "run", "(", "packed_tg", ")", "\n", "for", "d", "in", "range", "(", "0", ",", "tt", ".", "num_devices", ")", ":", "\n", "          ", "for", "t", "in", "range", "(", "0", ",", "len", "(", "tt", ".", "out_shapes", ")", ")", ":", "\n", "            ", "num_elts", "=", "0", "\n", "for", "dim", "in", "tt", ".", "out_shapes", "[", "t", "]", ":", "\n", "              ", "num_elts", "=", "(", "num_elts", "or", "1", ")", "*", "dim", "\n", "", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "\n", "np", ".", "array", "(", "range", "(", "tt", ".", "out_i", "[", "t", "]", ",", "tt", ".", "out_i", "[", "t", "]", "+", "num_elts", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "tt", ".", "out_shapes", "[", "t", "]", ")", ",", "\n", "packed", "[", "d", "]", "[", "t", "]", "[", "0", "]", ")", ")", "\n", "", "", "unpacked", "=", "sess", ".", "run", "(", "unpacked_tg", ")", "\n", "for", "d", "in", "range", "(", "0", ",", "tt", ".", "num_devices", ")", ":", "\n", "          ", "for", "t", "in", "range", "(", "0", ",", "len", "(", "tt", ".", "in_shapes", ")", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "consts", "[", "d", "]", "[", "t", "]", ",", "unpacked", "[", "d", "]", "[", "t", "]", "[", "0", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "vrbls", "[", "d", "]", "[", "t", "]", ",", "unpacked_tg", "[", "d", "]", "[", "t", "]", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest.testPackUnpack0": [[375, 381], ["allreduce_test.DynamicPackingTest._do_pack_unpack_test", "allreduce_test.DynamicPackingTest._test_tuple"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._do_pack_unpack_test"], ["", "", "", "", "", "def", "testPackUnpack0", "(", "self", ")", ":", "\n", "    ", "self", ".", "_do_pack_unpack_test", "(", "\n", "self", ".", "_test_tuple", "(", "num_devices", "=", "3", ",", "\n", "in_shapes", "=", "[", "[", "8", "]", ",", "[", "3", ",", "3", "]", ",", "[", "12", "]", ",", "[", "5", ",", "5", ",", "5", "]", "]", ",", "\n", "out_shapes", "=", "[", "[", "17", "]", ",", "[", "12", "]", ",", "[", "5", ",", "5", ",", "5", "]", "]", ",", "\n", "out_i", "=", "[", "0", ",", "17", ",", "29", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest.testPackUnpack1": [[382, 388], ["allreduce_test.DynamicPackingTest._do_pack_unpack_test", "allreduce_test.DynamicPackingTest._test_tuple"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._do_pack_unpack_test"], ["", "def", "testPackUnpack1", "(", "self", ")", ":", "\n", "    ", "self", ".", "_do_pack_unpack_test", "(", "\n", "self", ".", "_test_tuple", "(", "num_devices", "=", "4", ",", "\n", "in_shapes", "=", "[", "[", "5", ",", "5", ",", "5", "]", ",", "[", "2", ",", "3", "]", ",", "[", "5", "]", "]", ",", "\n", "out_shapes", "=", "[", "[", "11", "]", ",", "[", "5", ",", "5", ",", "5", "]", "]", ",", "\n", "out_i", "=", "[", "125", ",", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest.testPackUnpack2": [[389, 395], ["allreduce_test.DynamicPackingTest._do_pack_unpack_test", "allreduce_test.DynamicPackingTest._test_tuple"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._do_pack_unpack_test"], ["", "def", "testPackUnpack2", "(", "self", ")", ":", "\n", "    ", "self", ".", "_do_pack_unpack_test", "(", "\n", "self", ".", "_test_tuple", "(", "num_devices", "=", "2", ",", "\n", "in_shapes", "=", "[", "[", "5", ",", "5", ",", "5", "]", ",", "[", "2", ",", "3", "]", ",", "[", "1", ",", "5", "]", ",", "[", "7", "]", ",", "[", "100", "]", "]", ",", "\n", "out_shapes", "=", "[", "[", "18", "]", ",", "[", "5", ",", "5", ",", "5", "]", ",", "[", "100", "]", "]", ",", "\n", "out_i", "=", "[", "125", ",", "0", ",", "143", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._do_all_reduce_pack_test": [[396, 430], ["tensorflow.python.framework.ops.Graph().as_default", "allreduce_test.DynamicPackingTest._init_tensors", "range", "allreduce.sum_gradients_all_reduce", "allreduce.pack_small_tensors", "allreduce.sum_gradients_all_reduce", "allreduce.unpack_small_tensors", "len", "len", "allreduce_test.DynamicPackingTest.test_session", "sess.run", "sess.run", "sess.run", "range", "tensorflow.python.framework.ops.Graph", "tensorflow.python.ops.variables.global_variables_initializer", "range", "len", "allreduce_test.DynamicPackingTest.assertTrue", "allreduce_test.DynamicPackingTest.assertTrue", "numpy.allclose", "numpy.array_equal"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._init_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_gradients_all_reduce", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_gradients_all_reduce", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "_do_all_reduce_pack_test", "(", "self", ",", "tt", ")", ":", "\n", "    ", "\"\"\"Test that all-reduce results are the same with or without packing.\"\"\"", "\n", "with", "ops", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "      ", "tower_grads", ",", "consts", ",", "_", ",", "_", "=", "self", ".", "_init_tensors", "(", "\n", "tt", ".", "num_devices", ",", "tt", ".", "in_shapes", ")", "\n", "dev_prefixes", "=", "[", "'/job:localhost'", "]", "\n", "num_workers", "=", "1", "\n", "alg", "=", "'xring'", "\n", "shards", "=", "1", "\n", "single_session", "=", "True", "\n", "gpu_indices", "=", "range", "(", "0", ",", "tt", ".", "num_devices", ")", "\n", "assert", "len", "(", "gpu_indices", ")", "==", "len", "(", "tower_grads", ")", "\n", "no_pack_all_reduce", "=", "allreduce", ".", "sum_gradients_all_reduce", "(", "\n", "single_session", ",", "\n", "dev_prefixes", ",", "tower_grads", ",", "num_workers", ",", "alg", ",", "shards", ",", "\n", "gpu_indices", ",", "\n", "agg_small_grads_max_bytes", "=", "0", ",", "agg_small_grads_max_group", "=", "1", ")", "\n", "packed_tg", ",", "packing", "=", "allreduce", ".", "pack_small_tensors", "(", "tower_grads", ",", "100", ",", "100", ")", "\n", "packed_all_reduce", "=", "allreduce", ".", "sum_gradients_all_reduce", "(", "\n", "single_session", ",", "\n", "dev_prefixes", ",", "packed_tg", ",", "num_workers", ",", "alg", ",", "shards", ",", "\n", "gpu_indices", ",", "\n", "agg_small_grads_max_bytes", "=", "0", ",", "agg_small_grads_max_group", "=", "1", ")", "\n", "unpacked_tg", "=", "allreduce", ".", "unpack_small_tensors", "(", "packed_all_reduce", ",", "packing", ")", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "variables", ".", "global_variables_initializer", "(", ")", ")", "\n", "no_pack_values", "=", "sess", ".", "run", "(", "no_pack_all_reduce", ")", "\n", "pack_unpack_values", "=", "sess", ".", "run", "(", "unpacked_tg", ")", "\n", "for", "d", "in", "range", "(", "1", ",", "tt", ".", "num_devices", ")", ":", "\n", "          ", "for", "t", "in", "range", "(", "0", ",", "len", "(", "tt", ".", "in_shapes", ")", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "no_pack_values", "[", "d", "]", "[", "t", "]", "[", "0", "]", ",", "\n", "tt", ".", "num_devices", "*", "consts", "[", "0", "]", "[", "t", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "no_pack_values", "[", "d", "]", "[", "t", "]", "[", "0", "]", ",", "\n", "pack_unpack_values", "[", "d", "]", "[", "t", "]", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest.testAllReducePacked0": [[431, 437], ["allreduce_test.DynamicPackingTest._do_all_reduce_pack_test", "allreduce_test.DynamicPackingTest._test_tuple"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._do_all_reduce_pack_test"], ["", "", "", "", "", "def", "testAllReducePacked0", "(", "self", ")", ":", "\n", "    ", "self", ".", "_do_all_reduce_pack_test", "(", "\n", "self", ".", "_test_tuple", "(", "num_devices", "=", "3", ",", "\n", "in_shapes", "=", "[", "[", "8", "]", ",", "[", "3", ",", "3", "]", ",", "[", "12", "]", ",", "[", "5", ",", "5", ",", "5", "]", "]", ",", "\n", "out_shapes", "=", "[", "[", "17", "]", ",", "[", "12", "]", ",", "[", "5", ",", "5", ",", "5", "]", "]", ",", "\n", "out_i", "=", "[", "0", ",", "17", ",", "29", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest.testAllReducePacked1": [[438, 444], ["allreduce_test.DynamicPackingTest._do_all_reduce_pack_test", "allreduce_test.DynamicPackingTest._test_tuple"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce_test.DynamicPackingTest._do_all_reduce_pack_test"], ["", "def", "testAllReducePacked1", "(", "self", ")", ":", "\n", "    ", "self", ".", "_do_all_reduce_pack_test", "(", "\n", "self", ".", "_test_tuple", "(", "num_devices", "=", "2", ",", "\n", "in_shapes", "=", "[", "[", "8", "]", ",", "[", "3", ",", "3", "]", ",", "[", "12", "]", ",", "[", "5", ",", "5", ",", "5", "]", ",", "[", "3", "]", ",", "[", "4", "]", "]", ",", "\n", "out_shapes", "=", "[", "[", "17", "]", ",", "[", "7", "]", ",", "[", "12", "]", ",", "[", "5", ",", "5", ",", "5", "]", "]", ",", "\n", "out_i", "=", "[", "0", ",", "17", ",", "29", ",", "154", ",", "157", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.BaseImagePreprocess.__init__": [[431, 464], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "height", ",", "\n", "width", ",", "\n", "batch_size", ",", "\n", "num_splits", ",", "\n", "dtype", ",", "\n", "train", ",", "\n", "distortions", ",", "\n", "resize_method", ",", "\n", "shift_ratio", "=", "-", "1", ",", "\n", "summary_verbosity", "=", "0", ",", "\n", "distort_color_in_yiq", "=", "True", ",", "\n", "fuse_decode_and_crop", "=", "True", ",", "\n", "depth", "=", "3", ")", ":", "\n", "    ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_splits", "=", "num_splits", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "resize_method", "=", "resize_method", "\n", "self", ".", "shift_ratio", "=", "shift_ratio", "\n", "self", ".", "distortions", "=", "distortions", "\n", "self", ".", "distort_color_in_yiq", "=", "distort_color_in_yiq", "\n", "self", ".", "fuse_decode_and_crop", "=", "fuse_decode_and_crop", "\n", "if", "self", ".", "batch_size", "%", "self", ".", "num_splits", "!=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "(", "'batch_size must be a multiple of num_splits: '", "\n", "'batch_size %d, num_splits: %d'", ")", "%", "\n", "(", "self", ".", "batch_size", ",", "self", ".", "num_splits", ")", ")", "\n", "", "self", ".", "batch_size_per_split", "=", "self", ".", "batch_size", "//", "self", ".", "num_splits", "\n", "self", ".", "summary_verbosity", "=", "summary_verbosity", "\n", "self", ".", "depth", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.BaseImagePreprocess.preprocess": [[465, 467], ["NotImplementedError"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "image_buffer", ",", "bbox", ",", "batch_position", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'Must be implemented by subclass.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.BaseImagePreprocess.minibatch": [[468, 471], ["NotImplementedError"], "methods", ["None"], ["", "def", "minibatch", "(", "self", ",", "dataset", ",", "subset", ",", "use_datasets", ",", "cache_data", ",", "\n", "shift_ratio", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'Must be implemented by subclass.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.BaseImagePreprocess.supports_datasets": [[472, 474], ["None"], "methods", ["None"], ["", "def", "supports_datasets", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.RecordInputImagePreprocessor.preprocess": [[479, 499], ["preprocessing.normalized_image", "tensorflow.cast", "preprocessing.train_image", "tensorflow.image.decode_jpeg", "preprocessing.eval_image"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.normalized_image", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.train_image", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.decode_jpeg", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.eval_image"], ["def", "preprocess", "(", "self", ",", "image_buffer", ",", "bbox", ",", "batch_position", ")", ":", "\n", "    ", "\"\"\"Preprocessing image_buffer as a function of its batch position.\"\"\"", "\n", "if", "self", ".", "train", ":", "\n", "      ", "image", "=", "train_image", "(", "image_buffer", ",", "self", ".", "height", ",", "self", ".", "width", ",", "bbox", ",", "\n", "batch_position", ",", "self", ".", "resize_method", ",", "self", ".", "distortions", ",", "\n", "None", ",", "summary_verbosity", "=", "self", ".", "summary_verbosity", ",", "\n", "distort_color_in_yiq", "=", "self", ".", "distort_color_in_yiq", ",", "\n", "fuse_decode_and_crop", "=", "self", ".", "fuse_decode_and_crop", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "\n", "image_buffer", ",", "channels", "=", "3", ",", "dct_method", "=", "'INTEGER_FAST'", ")", "\n", "image", "=", "eval_image", "(", "image", ",", "self", ".", "height", ",", "self", ".", "width", ",", "batch_position", ",", "\n", "self", ".", "resize_method", ",", "\n", "summary_verbosity", "=", "self", ".", "summary_verbosity", ")", "\n", "# Note: image is now float32 [height,width,3] with range [0, 255]", "\n", "\n", "# image = tf.cast(image, tf.uint8) # HACK TESTING", "\n", "\n", "", "normalized", "=", "normalized_image", "(", "image", ")", "\n", "return", "tf", ".", "cast", "(", "normalized", ",", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.RecordInputImagePreprocessor.parse_and_preprocess": [[500, 504], ["preprocessing.parse_example_proto", "preprocessing.RecordInputImagePreprocessor.preprocess"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.parse_example_proto", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor.preprocess"], ["", "def", "parse_and_preprocess", "(", "self", ",", "value", ",", "batch_position", ")", ":", "\n", "    ", "image_buffer", ",", "label_index", ",", "bbox", ",", "_", "=", "parse_example_proto", "(", "value", ")", "\n", "image", "=", "self", ".", "preprocess", "(", "image_buffer", ",", "bbox", ",", "batch_position", ")", "\n", "return", "(", "label_index", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.RecordInputImagePreprocessor.minibatch": [[505, 550], ["tensorflow.name_scope", "six.moves.xrange", "data_utils.create_iterator", "six.moves.xrange", "tensorflow.python.ops.data_flow_ops.RecordInput", "tensorflow.python.ops.data_flow_ops.RecordInput.get_yield_op", "tensorflow.split", "six.moves.xrange", "tensorflow.reshape", "tensorflow.reshape", "range", "range", "data_utils.create_iterator.get_next", "tensorflow.reshape", "preprocessing.RecordInputImagePreprocessor.parse_and_preprocess", "labels[].append", "images[].append", "tensorflow.parallel_stack", "tensorflow.concat", "dataset.tf_record_pattern"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.data_utils.create_iterator", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.RecordInputImagePreprocessor.parse_and_preprocess", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.tf_record_pattern"], ["", "def", "minibatch", "(", "self", ",", "dataset", ",", "subset", ",", "use_datasets", ",", "cache_data", ",", "\n", "shift_ratio", "=", "-", "1", ")", ":", "\n", "    ", "if", "shift_ratio", "<", "0", ":", "\n", "      ", "shift_ratio", "=", "self", ".", "shift_ratio", "\n", "", "with", "tf", ".", "name_scope", "(", "'batch_processing'", ")", ":", "\n", "# Build final results per split.", "\n", "      ", "images", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_splits", ")", "]", "\n", "labels", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_splits", ")", "]", "\n", "if", "use_datasets", ":", "\n", "        ", "ds_iterator", "=", "data_utils", ".", "create_iterator", "(", "\n", "self", ".", "batch_size", ",", "self", ".", "num_splits", ",", "self", ".", "batch_size_per_split", ",", "\n", "self", ".", "parse_and_preprocess", ",", "dataset", ",", "subset", ",", "self", ".", "train", ",", "cache_data", ")", "\n", "for", "d", "in", "xrange", "(", "self", ".", "num_splits", ")", ":", "\n", "          ", "labels", "[", "d", "]", ",", "images", "[", "d", "]", "=", "ds_iterator", ".", "get_next", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "record_input", "=", "data_flow_ops", ".", "RecordInput", "(", "\n", "file_pattern", "=", "dataset", ".", "tf_record_pattern", "(", "subset", ")", ",", "\n", "seed", "=", "301", ",", "\n", "parallelism", "=", "64", ",", "\n", "buffer_size", "=", "10000", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shift_ratio", "=", "shift_ratio", ",", "\n", "name", "=", "'record_input'", ")", "\n", "records", "=", "record_input", ".", "get_yield_op", "(", ")", "\n", "records", "=", "tf", ".", "split", "(", "records", ",", "self", ".", "batch_size", ",", "0", ")", "\n", "records", "=", "[", "tf", ".", "reshape", "(", "record", ",", "[", "]", ")", "for", "record", "in", "records", "]", "\n", "for", "idx", "in", "xrange", "(", "self", ".", "batch_size", ")", ":", "\n", "          ", "value", "=", "records", "[", "idx", "]", "\n", "(", "label", ",", "image", ")", "=", "self", ".", "parse_and_preprocess", "(", "value", ",", "idx", ")", "\n", "split_index", "=", "idx", "%", "self", ".", "num_splits", "\n", "labels", "[", "split_index", "]", ".", "append", "(", "label", ")", "\n", "images", "[", "split_index", "]", ".", "append", "(", "image", ")", "\n", "\n", "", "", "for", "split_index", "in", "xrange", "(", "self", ".", "num_splits", ")", ":", "\n", "        ", "if", "not", "use_datasets", ":", "\n", "          ", "images", "[", "split_index", "]", "=", "tf", ".", "parallel_stack", "(", "images", "[", "split_index", "]", ")", "\n", "labels", "[", "split_index", "]", "=", "tf", ".", "concat", "(", "labels", "[", "split_index", "]", ",", "0", ")", "\n", "", "images", "[", "split_index", "]", "=", "tf", ".", "reshape", "(", "\n", "images", "[", "split_index", "]", ",", "\n", "shape", "=", "[", "self", ".", "batch_size_per_split", ",", "self", ".", "height", ",", "self", ".", "width", ",", "\n", "self", ".", "depth", "]", ")", "\n", "labels", "[", "split_index", "]", "=", "tf", ".", "reshape", "(", "labels", "[", "split_index", "]", ",", "\n", "[", "self", ".", "batch_size_per_split", "]", ")", "\n", "", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.RecordInputImagePreprocessor.supports_datasets": [[551, 553], ["None"], "methods", ["None"], ["", "", "def", "supports_datasets", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.ImagenetPreprocessor.preprocess": [[557, 573], ["tensorflow.cast", "preprocess_image", "preprocess_image", "tensorflow.logging.fatal"], "methods", ["None"], ["  ", "def", "preprocess", "(", "self", ",", "image_buffer", ",", "bbox", ",", "batch_position", ")", ":", "\n", "# pylint: disable=g-import-not-at-top", "\n", "    ", "try", ":", "\n", "      ", "from", "official", ".", "resnet", ".", "imagenet_preprocessing", "import", "preprocess_image", "\n", "", "except", "ImportError", ":", "\n", "      ", "tf", ".", "logging", ".", "fatal", "(", "'Please include tensorflow/models to the PYTHONPATH.'", ")", "\n", "raise", "\n", "", "if", "self", ".", "train", ":", "\n", "      ", "image", "=", "preprocess_image", "(", "\n", "image_buffer", ",", "bbox", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "depth", ",", "\n", "is_training", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "preprocess_image", "(", "\n", "image_buffer", ",", "bbox", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "depth", ",", "\n", "is_training", "=", "False", ")", "\n", "", "return", "tf", ".", "cast", "(", "image", ",", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor._distort_image": [[578, 600], ["tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.random_crop", "tensorflow.image.random_flip_left_right", "tensorflow.summary.image", "tensorflow.expand_dims"], "methods", ["None"], ["def", "_distort_image", "(", "self", ",", "image", ")", ":", "\n", "    ", "\"\"\"Distort one image for training a network.\n\n    Adopted the standard data augmentation scheme that is widely used for\n    this dataset: the images are first zero-padded with 4 pixels on each side,\n    then randomly cropped to again produce distorted images; half of the images\n    are then horizontally mirrored.\n\n    Args:\n      image: input image.\n    Returns:\n      distorted image.\n    \"\"\"", "\n", "image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "\n", "image", ",", "self", ".", "height", "+", "8", ",", "self", ".", "width", "+", "8", ")", "\n", "distorted_image", "=", "tf", ".", "random_crop", "(", "image", ",", "\n", "[", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "depth", "]", ")", "\n", "# Randomly flip the image horizontally.", "\n", "distorted_image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "distorted_image", ")", "\n", "if", "self", ".", "summary_verbosity", ">=", "3", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "'distorted_image'", ",", "tf", ".", "expand_dims", "(", "distorted_image", ",", "0", ")", ")", "\n", "", "return", "distorted_image", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor._eval_image": [[601, 608], ["tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.summary.image", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "_eval_image", "(", "self", ",", "image", ")", ":", "\n", "    ", "\"\"\"Get the image for model evaluation.\"\"\"", "\n", "distorted_image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "\n", "image", ",", "self", ".", "width", ",", "self", ".", "height", ")", "\n", "if", "self", ".", "summary_verbosity", ">=", "3", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "'cropped.image'", ",", "tf", ".", "expand_dims", "(", "distorted_image", ",", "0", ")", ")", "\n", "", "return", "distorted_image", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor.preprocess": [[609, 619], ["preprocessing.normalized_image", "tensorflow.cast", "tensorflow.summary.image", "preprocessing.Cifar10ImagePreprocessor._distort_image", "preprocessing.Cifar10ImagePreprocessor._eval_image", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.normalized_image", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor._distort_image", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor._eval_image"], ["", "def", "preprocess", "(", "self", ",", "raw_image", ")", ":", "\n", "    ", "\"\"\"Preprocessing raw image.\"\"\"", "\n", "if", "self", ".", "summary_verbosity", ">=", "3", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "'raw.image'", ",", "tf", ".", "expand_dims", "(", "raw_image", ",", "0", ")", ")", "\n", "", "if", "self", ".", "train", "and", "self", ".", "distortions", ":", "\n", "      ", "image", "=", "self", ".", "_distort_image", "(", "raw_image", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "self", ".", "_eval_image", "(", "raw_image", ")", "\n", "", "normalized", "=", "normalized_image", "(", "image", ")", "\n", "return", "tf", ".", "cast", "(", "normalized", ",", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor.minibatch": [[620, 665], ["tensorflow.name_scope", "dataset.read_data_files", "tensorflow.constant", "tensorflow.constant", "tensorflow.train.slice_input_producer", "tensorflow.cast", "tensorflow.cast", "int", "tensorflow.train.shuffle_batch", "tensorflow.unstack", "tensorflow.unstack", "six.moves.xrange", "six.moves.xrange", "tensorflow.reshape", "tensorflow.transpose", "preprocessing.Cifar10ImagePreprocessor.preprocess", "images[].append", "labels[].append", "tensorflow.parallel_stack", "tensorflow.parallel_stack", "dataset.num_examples_per_epoch", "range", "range"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Cifar10Data.read_data_files", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.Cifar10ImagePreprocessor.preprocess", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Cifar10Data.num_examples_per_epoch"], ["", "def", "minibatch", "(", "self", ",", "dataset", ",", "subset", ",", "use_datasets", ",", "cache_data", ",", "\n", "shift_ratio", "=", "-", "1", ")", ":", "\n", "# TODO(jsimsa): Implement datasets code path", "\n", "    ", "del", "use_datasets", ",", "cache_data", ",", "shift_ratio", "\n", "with", "tf", ".", "name_scope", "(", "'batch_processing'", ")", ":", "\n", "      ", "all_images", ",", "all_labels", "=", "dataset", ".", "read_data_files", "(", "subset", ")", "\n", "all_images", "=", "tf", ".", "constant", "(", "all_images", ")", "\n", "all_labels", "=", "tf", ".", "constant", "(", "all_labels", ")", "\n", "input_image", ",", "input_label", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "\n", "[", "all_images", ",", "all_labels", "]", ")", "\n", "input_image", "=", "tf", ".", "cast", "(", "input_image", ",", "self", ".", "dtype", ")", "\n", "input_label", "=", "tf", ".", "cast", "(", "input_label", ",", "tf", ".", "int32", ")", "\n", "# Ensure that the random shuffling has good mixing properties.", "\n", "min_fraction_of_examples_in_queue", "=", "0.4", "\n", "min_queue_examples", "=", "int", "(", "dataset", ".", "num_examples_per_epoch", "(", "subset", ")", "*", "\n", "min_fraction_of_examples_in_queue", ")", "\n", "raw_images", ",", "raw_labels", "=", "tf", ".", "train", ".", "shuffle_batch", "(", "\n", "[", "input_image", ",", "input_label", "]", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "capacity", "=", "min_queue_examples", "+", "3", "*", "self", ".", "batch_size", ",", "\n", "min_after_dequeue", "=", "min_queue_examples", ")", "\n", "\n", "images", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_splits", ")", "]", "\n", "labels", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_splits", ")", "]", "\n", "\n", "# Create a list of size batch_size, each containing one image of the", "\n", "# batch. Without the unstack call, raw_images[i] would still access the", "\n", "# same image via a strided_slice op, but would be slower.", "\n", "raw_images", "=", "tf", ".", "unstack", "(", "raw_images", ",", "axis", "=", "0", ")", "\n", "raw_labels", "=", "tf", ".", "unstack", "(", "raw_labels", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "xrange", "(", "self", ".", "batch_size", ")", ":", "\n", "        ", "split_index", "=", "i", "%", "self", ".", "num_splits", "\n", "# The raw image read from data has the format [depth, height, width]", "\n", "# reshape to the format returned by minibatch.", "\n", "raw_image", "=", "tf", ".", "reshape", "(", "raw_images", "[", "i", "]", ",", "\n", "[", "dataset", ".", "depth", ",", "dataset", ".", "height", ",", "dataset", ".", "width", "]", ")", "\n", "raw_image", "=", "tf", ".", "transpose", "(", "raw_image", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "image", "=", "self", ".", "preprocess", "(", "raw_image", ")", "\n", "images", "[", "split_index", "]", ".", "append", "(", "image", ")", "\n", "\n", "labels", "[", "split_index", "]", ".", "append", "(", "raw_labels", "[", "i", "]", ")", "\n", "\n", "", "for", "split_index", "in", "xrange", "(", "self", ".", "num_splits", ")", ":", "\n", "        ", "images", "[", "split_index", "]", "=", "tf", ".", "parallel_stack", "(", "images", "[", "split_index", "]", ")", "\n", "labels", "[", "split_index", "]", "=", "tf", ".", "parallel_stack", "(", "labels", "[", "split_index", "]", ")", "\n", "", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.SyntheticImagePreprocessor.minibatch": [[670, 698], ["tensorflow.truncated_normal", "tensorflow.random_uniform", "tensorflow.contrib.framework.local_variable", "tensorflow.contrib.framework.local_variable", "tensorflow.split", "tensorflow.split"], "methods", ["None"], ["def", "minibatch", "(", "self", ",", "dataset", ",", "subset", ",", "use_datasets", ",", "cache_data", ",", "\n", "shift_ratio", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Get synthetic image batches.\"\"\"", "\n", "del", "subset", ",", "use_datasets", ",", "cache_data", ",", "shift_ratio", "\n", "input_shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "depth", "]", "\n", "images", "=", "tf", ".", "truncated_normal", "(", "\n", "input_shape", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "stddev", "=", "1e-1", ",", "\n", "name", "=", "'synthetic_images'", ")", "\n", "labels", "=", "tf", ".", "random_uniform", "(", "\n", "[", "self", ".", "batch_size", "]", ",", "\n", "minval", "=", "0", ",", "\n", "maxval", "=", "dataset", ".", "num_classes", "-", "1", ",", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "name", "=", "'synthetic_labels'", ")", "\n", "# Note: This results in a H2D copy, but no computation", "\n", "# Note: This avoids recomputation of the random values, but still", "\n", "#         results in a H2D copy.", "\n", "images", "=", "tf", ".", "contrib", ".", "framework", ".", "local_variable", "(", "images", ",", "name", "=", "'images'", ")", "\n", "labels", "=", "tf", ".", "contrib", ".", "framework", ".", "local_variable", "(", "labels", ",", "name", "=", "'labels'", ")", "\n", "if", "self", ".", "num_splits", "==", "1", ":", "\n", "      ", "images_splits", "=", "[", "images", "]", "\n", "labels_splits", "=", "[", "labels", "]", "\n", "", "else", ":", "\n", "      ", "images_splits", "=", "tf", ".", "split", "(", "images", ",", "self", ".", "num_splits", ",", "0", ")", "\n", "labels_splits", "=", "tf", ".", "split", "(", "labels", ",", "self", ".", "num_splits", ",", "0", ")", "\n", "", "return", "images_splits", ",", "labels_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.__init__": [[710, 729], ["preprocessing.BaseImagePreprocess.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "\n", "height", ",", "\n", "width", ",", "\n", "batch_size", ",", "\n", "num_splits", ",", "\n", "dtype", ",", "\n", "train", "=", "None", ",", "\n", "distortions", "=", "None", ",", "\n", "resize_method", "=", "None", ",", "\n", "shift_ratio", "=", "0", ",", "\n", "summary_verbosity", "=", "0", ",", "\n", "distort_color_in_yiq", "=", "False", ",", "\n", "fuse_decode_and_crop", "=", "False", ")", ":", "\n", "    ", "super", "(", "TestImagePreprocessor", ",", "self", ")", ".", "__init__", "(", "\n", "height", ",", "width", ",", "batch_size", ",", "num_splits", ",", "dtype", ",", "train", ",", "distortions", ",", "\n", "resize_method", ",", "shift_ratio", ",", "summary_verbosity", "=", "summary_verbosity", ",", "\n", "distort_color_in_yiq", "=", "distort_color_in_yiq", ",", "\n", "fuse_decode_and_crop", "=", "fuse_decode_and_crop", ")", "\n", "self", ".", "expected_subset", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.set_fake_data": [[730, 738], ["len", "len"], "methods", ["None"], ["", "def", "set_fake_data", "(", "self", ",", "fake_images", ",", "fake_labels", ")", ":", "\n", "    ", "assert", "len", "(", "fake_images", ".", "shape", ")", "==", "4", "\n", "assert", "len", "(", "fake_labels", ".", "shape", ")", "==", "1", "\n", "num_images", "=", "fake_images", ".", "shape", "[", "0", "]", "\n", "assert", "num_images", "==", "fake_labels", ".", "shape", "[", "0", "]", "\n", "assert", "num_images", "%", "self", ".", "batch_size", "==", "0", "\n", "self", ".", "fake_images", "=", "fake_images", "\n", "self", ".", "fake_labels", "=", "fake_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.minibatch": [[739, 777], ["cnn_util.roll_numpy_batches", "cnn_util.roll_numpy_batches", "ValueError", "tensorflow.name_scope", "tensorflow.train.slice_input_producer", "tensorflow.train.batch", "six.moves.xrange", "six.moves.xrange", "preprocessing.normalized_image", "hasattr", "hasattr", "tensorflow.cast", "images[].append", "labels[].append", "tensorflow.parallel_stack", "tensorflow.parallel_stack", "tensorflow.cast", "range", "range"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.roll_numpy_batches", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.roll_numpy_batches", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.normalized_image"], ["", "def", "minibatch", "(", "self", ",", "dataset", ",", "subset", ",", "use_datasets", ",", "cache_data", ",", "\n", "shift_ratio", "=", "0", ")", ":", "\n", "    ", "\"\"\"Get test image batches.\"\"\"", "\n", "del", "dataset", ",", "use_datasets", ",", "cache_data", "\n", "if", "(", "not", "hasattr", "(", "self", ",", "'fake_images'", ")", "or", "\n", "not", "hasattr", "(", "self", ",", "'fake_labels'", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'Must call set_fake_data() before calling minibatch '", "\n", "'on TestImagePreprocessor'", ")", "\n", "", "if", "self", ".", "expected_subset", "is", "not", "None", ":", "\n", "      ", "assert", "subset", "==", "self", ".", "expected_subset", "\n", "\n", "", "shift_ratio", "=", "shift_ratio", "or", "self", ".", "shift_ratio", "\n", "fake_images", "=", "cnn_util", ".", "roll_numpy_batches", "(", "self", ".", "fake_images", ",", "self", ".", "batch_size", ",", "\n", "shift_ratio", ")", "\n", "fake_labels", "=", "cnn_util", ".", "roll_numpy_batches", "(", "self", ".", "fake_labels", ",", "self", ".", "batch_size", ",", "\n", "shift_ratio", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'batch_processing'", ")", ":", "\n", "      ", "image_slice", ",", "label_slice", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "\n", "[", "fake_images", ",", "fake_labels", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "name", "=", "'image_slice'", ")", "\n", "raw_images", ",", "raw_labels", "=", "tf", ".", "train", ".", "batch", "(", "\n", "[", "image_slice", ",", "label_slice", "]", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "name", "=", "'image_batch'", ")", "\n", "images", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_splits", ")", "]", "\n", "labels", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_splits", ")", "]", "\n", "for", "i", "in", "xrange", "(", "self", ".", "batch_size", ")", ":", "\n", "        ", "split_index", "=", "i", "%", "self", ".", "num_splits", "\n", "raw_image", "=", "tf", ".", "cast", "(", "raw_images", "[", "i", "]", ",", "self", ".", "dtype", ")", "\n", "images", "[", "split_index", "]", ".", "append", "(", "raw_image", ")", "\n", "labels", "[", "split_index", "]", ".", "append", "(", "raw_labels", "[", "i", "]", ")", "\n", "", "for", "split_index", "in", "xrange", "(", "self", ".", "num_splits", ")", ":", "\n", "        ", "images", "[", "split_index", "]", "=", "tf", ".", "parallel_stack", "(", "images", "[", "split_index", "]", ")", "\n", "labels", "[", "split_index", "]", "=", "tf", ".", "parallel_stack", "(", "labels", "[", "split_index", "]", ")", "\n", "\n", "", "normalized", "=", "normalized_image", "(", "images", ")", "\n", "return", "tf", ".", "cast", "(", "normalized", ",", "self", ".", "dtype", ")", ",", "labels", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.parse_example_proto": [[29, 98], ["tensorflow.VarLenFeature", "feature_map.update", "tensorflow.parse_single_example", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.PyTorch.main.AverageMeter.update"], ["def", "parse_example_proto", "(", "example_serialized", ")", ":", "\n", "  ", "\"\"\"Parses an Example proto containing a training example of an image.\n\n  The output of the build_image_data.py image preprocessing script is a dataset\n  containing serialized Example protocol buffers. Each Example proto contains\n  the following fields:\n\n    image/height: 462\n    image/width: 581\n    image/colorspace: 'RGB'\n    image/channels: 3\n    image/class/label: 615\n    image/class/synset: 'n03623198'\n    image/class/text: 'knee pad'\n    image/object/bbox/xmin: 0.1\n    image/object/bbox/xmax: 0.9\n    image/object/bbox/ymin: 0.2\n    image/object/bbox/ymax: 0.6\n    image/object/bbox/label: 615\n    image/format: 'JPEG'\n    image/filename: 'ILSVRC2012_val_00041207.JPEG'\n    image/encoded: <JPEG encoded string>\n\n  Args:\n    example_serialized: scalar Tensor tf.string containing a serialized\n      Example protocol buffer.\n\n  Returns:\n    image_buffer: Tensor tf.string containing the contents of a JPEG file.\n    label: Tensor tf.int32 containing the label.\n    bbox: 3-D float Tensor of bounding boxes arranged [1, num_boxes, coords]\n      where each coordinate is [0, 1) and the coordinates are arranged as\n      [ymin, xmin, ymax, xmax].\n    text: Tensor tf.string containing the human-readable label.\n  \"\"\"", "\n", "# Dense features in Example proto.", "\n", "feature_map", "=", "{", "\n", "'image/encoded'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "string", ",", "\n", "default_value", "=", "''", ")", ",", "\n", "'image/class/label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "1", "]", ",", "dtype", "=", "tf", ".", "int64", ",", "\n", "default_value", "=", "-", "1", ")", ",", "\n", "'image/class/text'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "string", ",", "\n", "default_value", "=", "''", ")", ",", "\n", "}", "\n", "sparse_float32", "=", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "# Sparse features in Example proto.", "\n", "feature_map", ".", "update", "(", "\n", "{", "k", ":", "sparse_float32", "for", "k", "in", "[", "'image/object/bbox/xmin'", ",", "\n", "'image/object/bbox/ymin'", ",", "\n", "'image/object/bbox/xmax'", ",", "\n", "'image/object/bbox/ymax'", "]", "}", ")", "\n", "\n", "features", "=", "tf", ".", "parse_single_example", "(", "example_serialized", ",", "feature_map", ")", "\n", "label", "=", "tf", ".", "cast", "(", "features", "[", "'image/class/label'", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "xmin", "=", "tf", ".", "expand_dims", "(", "features", "[", "'image/object/bbox/xmin'", "]", ".", "values", ",", "0", ")", "\n", "ymin", "=", "tf", ".", "expand_dims", "(", "features", "[", "'image/object/bbox/ymin'", "]", ".", "values", ",", "0", ")", "\n", "xmax", "=", "tf", ".", "expand_dims", "(", "features", "[", "'image/object/bbox/xmax'", "]", ".", "values", ",", "0", ")", "\n", "ymax", "=", "tf", ".", "expand_dims", "(", "features", "[", "'image/object/bbox/ymax'", "]", ".", "values", ",", "0", ")", "\n", "\n", "# Note that we impose an ordering of (y, x) just to make life difficult.", "\n", "bbox", "=", "tf", ".", "concat", "(", "[", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "]", ",", "0", ")", "\n", "\n", "# Force the variable number of bounding boxes into the shape", "\n", "# [1, num_boxes, coords].", "\n", "bbox", "=", "tf", ".", "expand_dims", "(", "bbox", ",", "0", ")", "\n", "bbox", "=", "tf", ".", "transpose", "(", "bbox", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "features", "[", "'image/encoded'", "]", ",", "label", ",", "bbox", ",", "features", "[", "'image/class/text'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.get_image_resize_method": [[108, 148], ["list", "preprocessing.get_image_resize_method.resize_method_0"], "function", ["None"], ["def", "get_image_resize_method", "(", "resize_method", ",", "batch_position", "=", "0", ")", ":", "\n", "  ", "\"\"\"Get tensorflow resize method.\n\n  If resize_method is 'round_robin', return different methods based on batch\n  position in a round-robin fashion. NOTE: If the batch size is not a multiple\n  of the number of methods, then the distribution of methods will not be\n  uniform.\n\n  Args:\n    resize_method: (string) nearest, bilinear, bicubic, area, or round_robin.\n    batch_position: position of the image in a batch. NOTE: this argument can\n      be an integer or a tensor\n  Returns:\n    one of resize type defined in tf.image.ResizeMethod.\n  \"\"\"", "\n", "\n", "if", "resize_method", "!=", "'round_robin'", ":", "\n", "    ", "return", "_RESIZE_METHOD_MAP", "[", "resize_method", "]", "\n", "\n", "# return a resize method based on batch position in a round-robin fashion.", "\n", "", "resize_methods", "=", "list", "(", "_RESIZE_METHOD_MAP", ".", "values", "(", ")", ")", "\n", "def", "lookup", "(", "index", ")", ":", "\n", "    ", "return", "resize_methods", "[", "index", "]", "\n", "\n", "", "def", "resize_method_0", "(", ")", ":", "\n", "    ", "return", "utils", ".", "smart_cond", "(", "batch_position", "%", "len", "(", "resize_methods", ")", "==", "0", ",", "\n", "lambda", ":", "lookup", "(", "0", ")", ",", "resize_method_1", ")", "\n", "\n", "", "def", "resize_method_1", "(", ")", ":", "\n", "    ", "return", "utils", ".", "smart_cond", "(", "batch_position", "%", "len", "(", "resize_methods", ")", "==", "1", ",", "\n", "lambda", ":", "lookup", "(", "1", ")", ",", "resize_method_2", ")", "\n", "\n", "", "def", "resize_method_2", "(", ")", ":", "\n", "    ", "return", "utils", ".", "smart_cond", "(", "batch_position", "%", "len", "(", "resize_methods", ")", "==", "2", ",", "\n", "lambda", ":", "lookup", "(", "2", ")", ",", "lambda", ":", "lookup", "(", "3", ")", ")", "\n", "\n", "# NOTE(jsimsa): Unfortunately, we cannot use a single recursive function here", "\n", "# because TF would not be able to construct a finite graph.", "\n", "\n", "", "return", "resize_method_0", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.decode_jpeg": [[150, 173], ["tensorflow.name_scope", "tensorflow.image.decode_jpeg"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.decode_jpeg"], ["", "def", "decode_jpeg", "(", "image_buffer", ",", "scope", "=", "None", ")", ":", "# , dtype=tf.float32):", "\n", "  ", "\"\"\"Decode a JPEG string into one 3-D float image Tensor.\n\n  Args:\n    image_buffer: scalar string Tensor.\n    scope: Optional scope for op_scope.\n  Returns:\n    3-D float Tensor with values ranging from [0, 1).\n  \"\"\"", "\n", "# with tf.op_scope([image_buffer], scope, 'decode_jpeg'):", "\n", "# with tf.name_scope(scope, 'decode_jpeg', [image_buffer]):", "\n", "with", "tf", ".", "name_scope", "(", "scope", "or", "'decode_jpeg'", ")", ":", "\n", "# Decode the string as an RGB JPEG.", "\n", "# Note that the resulting image contains an unknown height and width", "\n", "# that is set dynamically by decode_jpeg. In other words, the height", "\n", "# and width of image is unknown at compile-time.", "\n", "    ", "image", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "image_buffer", ",", "channels", "=", "3", ",", "\n", "fancy_upscaling", "=", "False", ",", "\n", "dct_method", "=", "'INTEGER_FAST'", ")", "\n", "\n", "# image = tf.Print(image, [tf.shape(image)], 'Image shape: ')", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.normalized_image": [[175, 180], ["tensorflow.multiply", "tensorflow.subtract"], "function", ["None"], ["", "", "def", "normalized_image", "(", "images", ")", ":", "\n", "# Rescale from [0, 255] to [0, 2]", "\n", "  ", "images", "=", "tf", ".", "multiply", "(", "images", ",", "1.", "/", "127.5", ")", "\n", "# Rescale to [-1, 1]", "\n", "return", "tf", ".", "subtract", "(", "images", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.eval_image": [[182, 260], ["tensorflow.name_scope", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.maximum", "tensorflow.cast", "tensorflow.cast", "preprocessing.get_image_resize_method", "tensorflow.image.resize_images", "tensorflow.slice", "tf.slice.set_shape", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.get_image_resize_method"], ["", "def", "eval_image", "(", "image", ",", "\n", "height", ",", "\n", "width", ",", "\n", "batch_position", ",", "\n", "resize_method", ",", "\n", "summary_verbosity", "=", "0", ")", ":", "\n", "  ", "\"\"\"Get the image for model evaluation.\n\n  We preprocess the image simiarly to Slim, see\n  https://github.com/tensorflow/models/blob/master/slim/preprocessing/vgg_preprocessing.py\n  Validation images do not have bounding boxes, so to crop the image, we first\n  resize the image such that the aspect ratio is maintained and the resized\n  height and width are both at least 1.15 times `height` and `width`\n  respectively. Then, we do a central crop to size (`height`, `width`).\n\n  Args:\n    image: 3-D float Tensor representing the image.\n    height: The height of the image that will be returned.\n    width: The width of the image that will be returned.\n    batch_position: position of the image in a batch, which affects how images\n      are distorted and resized. NOTE: this argument can be an integer or a\n      tensor\n    resize_method: one of the strings 'round_robin', 'nearest', 'bilinear',\n      'bicubic', or 'area'.\n    summary_verbosity: Verbosity level for summary ops. Pass 0 to disable both\n      summaries and checkpoints.\n  Returns:\n    An image of size (output_height, output_width, 3) that is resized and\n    cropped as described above.\n  \"\"\"", "\n", "# TODO(reedwm): Currently we resize then crop. Investigate if it's faster to", "\n", "# crop then resize.", "\n", "with", "tf", ".", "name_scope", "(", "'eval_image'", ")", ":", "\n", "    ", "if", "summary_verbosity", ">=", "3", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "\n", "'original_image'", ",", "tf", ".", "expand_dims", "(", "image", ",", "0", ")", ")", "\n", "\n", "", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "image_height", "=", "shape", "[", "0", "]", "\n", "image_width", "=", "shape", "[", "1", "]", "\n", "image_height_float", "=", "tf", ".", "cast", "(", "image_height", ",", "tf", ".", "float32", ")", "\n", "image_width_float", "=", "tf", ".", "cast", "(", "image_width", ",", "tf", ".", "float32", ")", "\n", "\n", "scale_factor", "=", "1.15", "\n", "\n", "# Compute resize_height and resize_width to be the minimum values such that", "\n", "#   1. The aspect ratio is maintained (i.e. resize_height / resize_width is", "\n", "#      image_height / image_width), and", "\n", "#   2. resize_height >= height * `scale_factor`, and", "\n", "#   3. resize_width >= width * `scale_factor`", "\n", "max_ratio", "=", "tf", ".", "maximum", "(", "height", "/", "image_height_float", ",", "\n", "width", "/", "image_width_float", ")", "\n", "resize_height", "=", "tf", ".", "cast", "(", "image_height_float", "*", "max_ratio", "*", "scale_factor", ",", "\n", "tf", ".", "int32", ")", "\n", "resize_width", "=", "tf", ".", "cast", "(", "image_width_float", "*", "max_ratio", "*", "scale_factor", ",", "\n", "tf", ".", "int32", ")", "\n", "\n", "# Resize the image to shape (`resize_height`, `resize_width`)", "\n", "image_resize_method", "=", "get_image_resize_method", "(", "resize_method", ",", "batch_position", ")", "\n", "distorted_image", "=", "tf", ".", "image", ".", "resize_images", "(", "image", ",", "\n", "[", "resize_height", ",", "resize_width", "]", ",", "\n", "image_resize_method", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "# Do a central crop of the image to size (height, width).", "\n", "total_crop_height", "=", "(", "resize_height", "-", "height", ")", "\n", "crop_top", "=", "total_crop_height", "//", "2", "\n", "total_crop_width", "=", "(", "resize_width", "-", "width", ")", "\n", "crop_left", "=", "total_crop_width", "//", "2", "\n", "distorted_image", "=", "tf", ".", "slice", "(", "distorted_image", ",", "[", "crop_top", ",", "crop_left", ",", "0", "]", ",", "\n", "[", "height", ",", "width", ",", "3", "]", ")", "\n", "\n", "distorted_image", ".", "set_shape", "(", "[", "height", ",", "width", ",", "3", "]", ")", "\n", "if", "summary_verbosity", ">=", "3", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "\n", "'cropped_resized_image'", ",", "tf", ".", "expand_dims", "(", "distorted_image", ",", "0", ")", ")", "\n", "", "image", "=", "distorted_image", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.train_image": [[262, 372], ["tensorflow.name_scope", "tensorflow.image.sample_distorted_bounding_box", "tensorflow.image.random_flip_left_right", "preprocessing.get_image_resize_method", "tensorflow.image.resize_images", "distort_color.set_shape", "tensorflow.image.extract_jpeg_shape", "tensorflow.image.decode_jpeg", "tensorflow.image.convert_image_dtype", "tensorflow.image.draw_bounding_boxes", "tensorflow.summary.image", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.stack", "tensorflow.image.decode_and_crop_jpeg", "tensorflow.image.decode_jpeg", "tensorflow.slice", "tensorflow.summary.image", "tensorflow.cast", "preprocessing.distort_color", "tensorflow.summary.image", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.get_image_resize_method", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.decode_jpeg", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.decode_jpeg", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.distort_color"], ["", "def", "train_image", "(", "image_buffer", ",", "\n", "height", ",", "\n", "width", ",", "\n", "bbox", ",", "\n", "batch_position", ",", "\n", "resize_method", ",", "\n", "distortions", ",", "\n", "scope", "=", "None", ",", "\n", "summary_verbosity", "=", "0", ",", "\n", "distort_color_in_yiq", "=", "False", ",", "\n", "fuse_decode_and_crop", "=", "False", ")", ":", "\n", "  ", "\"\"\"Distort one image for training a network.\n\n  Distorting images provides a useful technique for augmenting the data\n  set during training in order to make the network invariant to aspects\n  of the image that do not effect the label.\n\n  Args:\n    image_buffer: scalar string Tensor representing the raw JPEG image buffer.\n    height: integer\n    width: integer\n    bbox: 3-D float Tensor of bounding boxes arranged [1, num_boxes, coords]\n      where each coordinate is [0, 1) and the coordinates are arranged\n      as [ymin, xmin, ymax, xmax].\n    batch_position: position of the image in a batch, which affects how images\n      are distorted and resized. NOTE: this argument can be an integer or a\n      tensor\n    resize_method: round_robin, nearest, bilinear, bicubic, or area.\n    distortions: If true, apply full distortions for image colors.\n    scope: Optional scope for op_scope.\n    summary_verbosity: Verbosity level for summary ops. Pass 0 to disable both\n      summaries and checkpoints.\n    distort_color_in_yiq: distort color of input images in YIQ space.\n    fuse_decode_and_crop: fuse the decode/crop operation.\n  Returns:\n    3-D float Tensor of distorted image used for training.\n  \"\"\"", "\n", "# with tf.op_scope([image, height, width, bbox], scope, 'distort_image'):", "\n", "# with tf.name_scope(scope, 'distort_image', [image, height, width, bbox]):", "\n", "with", "tf", ".", "name_scope", "(", "scope", "or", "'distort_image'", ")", ":", "\n", "# A large fraction of image datasets contain a human-annotated bounding box", "\n", "# delineating the region of the image containing the object of interest.  We", "\n", "# choose to create a new bounding box for the object which is a randomly", "\n", "# distorted version of the human-annotated bounding box that obeys an", "\n", "# allowed range of aspect ratios, sizes and overlap with the human-annotated", "\n", "# bounding box. If no box is supplied, then we assume the bounding box is", "\n", "# the entire image.", "\n", "    ", "sample_distorted_bounding_box", "=", "tf", ".", "image", ".", "sample_distorted_bounding_box", "(", "\n", "tf", ".", "image", ".", "extract_jpeg_shape", "(", "image_buffer", ")", ",", "\n", "bounding_boxes", "=", "bbox", ",", "\n", "min_object_covered", "=", "0.1", ",", "\n", "aspect_ratio_range", "=", "[", "0.75", ",", "1.33", "]", ",", "\n", "area_range", "=", "[", "0.05", ",", "1.0", "]", ",", "\n", "max_attempts", "=", "100", ",", "\n", "use_image_if_no_bounding_boxes", "=", "True", ")", "\n", "bbox_begin", ",", "bbox_size", ",", "distort_bbox", "=", "sample_distorted_bounding_box", "\n", "if", "summary_verbosity", ">=", "3", ":", "\n", "      ", "image", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "image_buffer", ",", "channels", "=", "3", ",", "\n", "dct_method", "=", "'INTEGER_FAST'", ")", "\n", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "image_with_distorted_box", "=", "tf", ".", "image", ".", "draw_bounding_boxes", "(", "\n", "tf", ".", "expand_dims", "(", "image", ",", "0", ")", ",", "distort_bbox", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\n", "'images_with_distorted_bounding_box'", ",", "\n", "image_with_distorted_box", ")", "\n", "\n", "# Crop the image to the specified bounding box.", "\n", "", "if", "fuse_decode_and_crop", ":", "\n", "      ", "offset_y", ",", "offset_x", ",", "_", "=", "tf", ".", "unstack", "(", "bbox_begin", ")", "\n", "target_height", ",", "target_width", ",", "_", "=", "tf", ".", "unstack", "(", "bbox_size", ")", "\n", "crop_window", "=", "tf", ".", "stack", "(", "[", "offset_y", ",", "offset_x", ",", "target_height", ",", "target_width", "]", ")", "\n", "image", "=", "tf", ".", "image", ".", "decode_and_crop_jpeg", "(", "\n", "image_buffer", ",", "crop_window", ",", "channels", "=", "3", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "image_buffer", ",", "channels", "=", "3", ",", "\n", "dct_method", "=", "'INTEGER_FAST'", ")", "\n", "image", "=", "tf", ".", "slice", "(", "image", ",", "bbox_begin", ",", "bbox_size", ")", "\n", "\n", "", "distorted_image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "image", ")", "\n", "\n", "# This resizing operation may distort the images because the aspect", "\n", "# ratio is not respected.", "\n", "image_resize_method", "=", "get_image_resize_method", "(", "resize_method", ",", "batch_position", ")", "\n", "distorted_image", "=", "tf", ".", "image", ".", "resize_images", "(", "\n", "distorted_image", ",", "[", "height", ",", "width", "]", ",", "\n", "image_resize_method", ",", "\n", "align_corners", "=", "False", ")", "\n", "# Restore the shape since the dynamic slice based upon the bbox_size loses", "\n", "# the third dimension.", "\n", "distorted_image", ".", "set_shape", "(", "[", "height", ",", "width", ",", "3", "]", ")", "\n", "if", "summary_verbosity", ">=", "3", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "'cropped_resized_maybe_flipped_image'", ",", "\n", "tf", ".", "expand_dims", "(", "distorted_image", ",", "0", ")", ")", "\n", "\n", "", "if", "distortions", ":", "\n", "      ", "distorted_image", "=", "tf", ".", "cast", "(", "distorted_image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# Images values are expected to be in [0,1] for color distortion.", "\n", "distorted_image", "/=", "255.", "\n", "# Randomly distort the colors.", "\n", "distorted_image", "=", "distort_color", "(", "distorted_image", ",", "batch_position", ",", "\n", "distort_color_in_yiq", "=", "distort_color_in_yiq", ")", "\n", "\n", "# Note: This ensures the scaling matches the output of eval_image", "\n", "distorted_image", "*=", "255", "\n", "\n", "", "if", "summary_verbosity", ">=", "3", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "\n", "'final_distorted_image'", ",", "\n", "tf", ".", "expand_dims", "(", "distorted_image", ",", "0", ")", ")", "\n", "", "return", "distorted_image", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.distort_color": [[374, 426], ["tensorflow.name_scope", "tensorflow.python.layers.utils.smart_cond", "tensorflow.clip_by_value", "tensorflow.image.random_brightness", "tensorflow.image.random_contrast", "tensorflow.image.random_brightness", "tensorflow.image.random_contrast", "tensorflow.contrib.image.python.ops.distort_image_ops.random_hsv_in_yiq", "tensorflow.image.random_saturation", "tensorflow.image.random_hue", "tensorflow.contrib.image.python.ops.distort_image_ops.random_hsv_in_yiq", "tensorflow.image.random_saturation", "tensorflow.image.random_hue"], "function", ["None"], ["", "", "def", "distort_color", "(", "image", ",", "batch_position", "=", "0", ",", "distort_color_in_yiq", "=", "False", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Distort the color of the image.\n\n  Each color distortion is non-commutative and thus ordering of the color ops\n  matters. Ideally we would randomly permute the ordering of the color ops.\n  Rather then adding that level of complication, we select a distinct ordering\n  of color ops based on the position of the image in a batch.\n\n  Args:\n    image: float32 Tensor containing single image. Tensor values should be in\n      range [0, 1].\n    batch_position: the position of the image in a batch. NOTE: this argument\n      can be an integer or a tensor\n    distort_color_in_yiq: distort color of input images in YIQ space.\n    scope: Optional scope for op_scope.\n  Returns:\n    color-distorted image\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "scope", "or", "'distort_color'", ")", ":", "\n", "\n", "    ", "def", "distort_fn_0", "(", "image", "=", "image", ")", ":", "\n", "      ", "\"\"\"Variant 0 of distort function.\"\"\"", "\n", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "if", "distort_color_in_yiq", ":", "\n", "        ", "image", "=", "distort_image_ops", ".", "random_hsv_in_yiq", "(", "\n", "image", ",", "lower_saturation", "=", "0.5", ",", "upper_saturation", "=", "1.5", ",", "\n", "max_delta_hue", "=", "0.2", "*", "math", ".", "pi", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_hue", "(", "image", ",", "max_delta", "=", "0.2", ")", "\n", "", "image", "=", "tf", ".", "image", ".", "random_contrast", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "return", "image", "\n", "\n", "", "def", "distort_fn_1", "(", "image", "=", "image", ")", ":", "\n", "      ", "\"\"\"Variant 1 of distort function.\"\"\"", "\n", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_contrast", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "if", "distort_color_in_yiq", ":", "\n", "        ", "image", "=", "distort_image_ops", ".", "random_hsv_in_yiq", "(", "\n", "image", ",", "lower_saturation", "=", "0.5", ",", "upper_saturation", "=", "1.5", ",", "\n", "max_delta_hue", "=", "0.2", "*", "math", ".", "pi", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_hue", "(", "image", ",", "max_delta", "=", "0.2", ")", "\n", "", "return", "image", "\n", "\n", "", "image", "=", "utils", ".", "smart_cond", "(", "batch_position", "%", "2", "==", "0", ",", "distort_fn_0", ",", "\n", "distort_fn_1", ")", "\n", "# The random_* ops do not necessarily clamp.", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.0", ",", "1.0", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.tf_cnn_benchmarks.main": [[38, 57], ["benchmark_cnn.make_params_from_flags", "benchmark_cnn.setup", "benchmark_cnn.BenchmarkCNN", "cnn_util.tensorflow_version_tuple", "cnn_util.log_fn", "benchmark_cnn.BenchmarkCNN.print_info", "benchmark_cnn.BenchmarkCNN.run", "len", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params_from_flags", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.setup", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.tensorflow_version_tuple", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.log_fn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.print_info", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "main", "(", "positional_arguments", ")", ":", "\n", "# Command-line arguments like '--distortions False' are equivalent to", "\n", "# '--distortions=True False', where False is a positional argument. To prevent", "\n", "# this from silently running with distortions, we do not allow positional", "\n", "# arguments.", "\n", "  ", "assert", "len", "(", "positional_arguments", ")", ">=", "1", "\n", "if", "len", "(", "positional_arguments", ")", ">", "1", ":", "\n", "    ", "raise", "ValueError", "(", "'Received unknown positional arguments: %s'", "\n", "%", "positional_arguments", "[", "1", ":", "]", ")", "\n", "\n", "", "params", "=", "benchmark_cnn", ".", "make_params_from_flags", "(", ")", "\n", "params", "=", "benchmark_cnn", ".", "setup", "(", "params", ")", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "\n", "tfversion", "=", "cnn_util", ".", "tensorflow_version_tuple", "(", ")", "\n", "log_fn", "(", "'TensorFlow:  %i.%i'", "%", "(", "tfversion", "[", "0", "]", ",", "tfversion", "[", "1", "]", ")", ")", "\n", "\n", "bench", ".", "print_info", "(", ")", "\n", "bench", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.parse_general_int": [[33, 54], ["re.match", "re.match.group", "int", "int", "ValueError"], "function", ["None"], ["def", "parse_general_int", "(", "s", ")", ":", "\n", "  ", "\"\"\"Parse integer with power-of-2 suffix eg. 32k.\"\"\"", "\n", "mo", "=", "re", ".", "match", "(", "r'(\\d+)([KkMGT]?)$'", ",", "s", ")", "\n", "if", "mo", ":", "\n", "    ", "i", ",", "suffix", "=", "mo", ".", "group", "(", "1", ",", "2", ")", "\n", "v", "=", "int", "(", "i", ")", "\n", "if", "suffix", ":", "\n", "      ", "if", "suffix", "==", "'K'", "or", "suffix", "==", "'k'", ":", "\n", "        ", "v", "*=", "1024", "\n", "", "elif", "suffix", "==", "'M'", ":", "\n", "        ", "v", "*=", "(", "1024", "*", "1024", ")", "\n", "", "elif", "suffix", "==", "'G'", ":", "\n", "        ", "v", "*=", "(", "1024", "*", "1024", "*", "1024", ")", "\n", "", "elif", "suffix", "==", "'T'", ":", "\n", "        ", "v", "*=", "(", "1024", "*", "1024", "*", "1024", "*", "1024", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid integer string %s'", "%", "s", ")", "\n", "", "", "return", "v", "\n", "", "else", ":", "\n", "    ", "v", "=", "int", "(", "s", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.parse_all_reduce_spec": [[56, 144], ["enumerate", "all_reduce_spec.split", "len", "ValueError", "range_part.split", "allreduce.parse_general_int", "spec.append", "len", "ValueError", "AllReduceSpecTuple", "ValueError", "int", "ValueError"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.parse_general_int"], ["", "def", "parse_all_reduce_spec", "(", "all_reduce_spec", ")", ":", "\n", "  ", "\"\"\"Parse all_reduce_spec.\n\n  Args:\n    all_reduce_spec: a string specifying a combination of all-reduce\n      algorithms to apply for gradient reduction.\n\n  Returns:\n    a list of AllReduceSpecTuple.\n\n  Raises:\n    ValueError: all_reduce_spec is not well-formed.\n\n  An all_reduce_spec has BNF form:\n     int ::= positive whole number\n     g_int ::= int[KkMGT]?\n     alg_spec ::= alg | alg#int\n     range_spec ::= alg_spec | alg_spec/alg_spec\n     spec ::= range_spec | range_spec:g_int:range_spec\n\n  Not all syntactically correct specifications are supported.\n  Examples of supported all_reduce_spec strings, with semantics explained:\n\n    'collective' == apply tf.collective_reduce operator to all tensors.\n    'collective#2' == apply tf.collective_reduce operator to all tensors,\n            requesting up to 2 simultaneous transfers at each node, if\n            feasible, by subdividing tensor by an additional factor of 2.\n    'xring' == apply ring all-reduce to all tensors\n    'xring#2' == apply ring all-reduce to all tensors, using two simultaneous\n            transfer rings, each operating on 1/2 of each tensor.\n    'nccl'  == apply NCCL all-reduce to all tensors (only works within\n            a single worker process where all devices are GPUs)\n    'nccl/xring' == apply NCCL all-reduce to all tensors within each worker\n            to produce at least one full-reduced (locally) value,\n            then apply ring all-reduce to one such value from each\n            worker, then apply NCCL broadcast to propagate those globally\n            reduced values back to every device within each worker.\n    'pscpu' == Shuffle reduce using worker CPUs as the gather devices: each\n            distributed tensor is reduced by copying all instances to\n            one of the worker CPUs, computing the reduction there, then\n            copying back to each participating device.  Tensor reductions\n            are assigned to specific CPUs round-robin.\n    'psgpu#4' == Arrange all GPUs across all workers into groups of 4.\n            Each distributed tensor is shuffle reduced against one\n            such group of 4 GPUs, selected round-robin.  That is, each\n            tensor is split across 4 shards for the reduction.\n    'pscpu:2k:pscpu#2:64k:xring' == Apply single-shard pscpu to\n            tensors of size <= 2048 elements, apply 2-shard pscpu to\n            tensors up to size 64k elements, apply xring to larger tensors.\n    'pscpu/pscpu#2' == Use shuffle gather to locally reduce each tensor on\n            the worker's CPU, then use 2-shard shuffle to reduce those\n            locally reduced tensors across workers (on the worker CPUs), then\n            scatter the globally reduced values locally from each worker CPU.\n  \"\"\"", "\n", "range_parts", "=", "all_reduce_spec", ".", "split", "(", "':'", ")", "+", "[", "'-1'", "]", "\n", "if", "len", "(", "range_parts", ")", "%", "2", ":", "\n", "    ", "raise", "ValueError", "(", "'all_reduce_spec not well formed: %s'", "%", "all_reduce_spec", ")", "\n", "", "limit", "=", "0", "\n", "spec", "=", "[", "]", "\n", "alg", "=", "None", "\n", "shards", "=", "1", "\n", "for", "i", ",", "range_part", "in", "enumerate", "(", "range_parts", ")", ":", "\n", "    ", "if", "i", "%", "2", "==", "1", ":", "\n", "      ", "try", ":", "\n", "        ", "limit", "=", "parse_general_int", "(", "range_part", ")", "\n", "spec", ".", "append", "(", "AllReduceSpecTuple", "(", "alg", "=", "alg", ",", "shards", "=", "shards", ",", "limit", "=", "limit", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "ValueError", "(", "'all_reduce_spec (%s) contains non-integer range %s'", "%", "\n", "(", "all_reduce_spec", ",", "range_part", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "alg", "=", "range_part", "\n", "alg_parts", "=", "range_part", ".", "split", "(", "'#'", ")", "\n", "alg", "=", "alg_parts", "[", "0", "]", "\n", "if", "len", "(", "alg_parts", ")", ">", "1", ":", "\n", "        ", "try", ":", "\n", "          ", "shards", "=", "int", "(", "alg_parts", "[", "1", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "          ", "raise", "ValueError", "(", "'all_reduce_spec (%s) contains non-integer '", "\n", "'shards %s'", "%", "all_reduce_spec", ",", "alg_parts", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "shards", "=", "1", "\n", "", "if", "alg", "not", "in", "[", "\n", "'nccl'", ",", "'nccl/xring'", ",", "'nccl/rechd'", ",", "'nccl/pscpu'", ",", "'xring'", ",", "'pscpu'", ",", "\n", "'psgpu'", ",", "'pscpu/pscpu'", ",", "'collective'", "\n", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'all_reduce_spec (%s) contains invalid alg %s'", "%", "\n", "(", "all_reduce_spec", ",", "alg", ")", ")", "\n", "", "", "", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.build_all_reduce_device_prefixes": [[146, 163], ["range"], "function", ["None"], ["", "def", "build_all_reduce_device_prefixes", "(", "job_name", ",", "num_tasks", ")", ":", "\n", "  ", "\"\"\"Build list of device prefix names for all_reduce.\n\n  Args:\n    job_name: 'worker', 'ps' or 'localhost'.\n    num_tasks: number of jobs across which device names should be generated.\n\n  Returns:\n     A list of device name prefix strings. Each element spells out the full\n     host name without adding the device.\n     e.g. '/job:worker/task:0'\n  \"\"\"", "\n", "if", "job_name", "!=", "'localhost'", ":", "\n", "    ", "return", "[", "'/job:%s/task:%d'", "%", "(", "job_name", ",", "d", ")", "for", "d", "in", "range", "(", "0", ",", "num_tasks", ")", "]", "\n", "", "else", ":", "\n", "    ", "assert", "num_tasks", "==", "1", "\n", "return", "[", "'/job:%s'", "%", "job_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.group_device_names": [[165, 191], ["len", "range", "ValueError", "groups[].append", "range"], "function", ["None"], ["", "", "def", "group_device_names", "(", "devices", ",", "group_size", ")", ":", "\n", "  ", "\"\"\"Group device names into groups of group_size.\n\n  Args:\n    devices: list of strings naming devices.\n    group_size: int >= 1\n\n  Returns:\n    list of lists of devices, where each inner list is group_size long,\n      and each device appears at least once in an inner list.  If\n      len(devices) % group_size = 0 then each device will appear\n      exactly once.\n\n  Raises:\n    ValueError: group_size > len(devices)\n  \"\"\"", "\n", "num_devices", "=", "len", "(", "devices", ")", "\n", "if", "group_size", ">", "num_devices", ":", "\n", "    ", "raise", "ValueError", "(", "'only %d devices, but group_size=%d'", "%", "(", "num_devices", ",", "\n", "group_size", ")", ")", "\n", "", "num_groups", "=", "(", "\n", "num_devices", "//", "group_size", "+", "(", "1", "if", "(", "num_devices", "%", "group_size", "!=", "0", ")", "else", "0", ")", ")", "\n", "groups", "=", "[", "[", "]", "for", "i", "in", "range", "(", "num_groups", ")", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_groups", "*", "group_size", ")", ":", "\n", "    ", "groups", "[", "i", "%", "num_groups", "]", ".", "append", "(", "devices", "[", "i", "%", "num_devices", "]", ")", "\n", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.split_grads_by_size": [[193, 223], ["g.get_shape().num_elements", "small_grads.append", "large_grads.append", "small_dl.append", "large_dl.append", "g.get_shape"], "function", ["None"], ["", "def", "split_grads_by_size", "(", "threshold_size", ",", "device_grads", ")", ":", "\n", "  ", "\"\"\"Break gradients into two sets according to tensor size.\n\n  Args:\n    threshold_size: int size cutoff for small vs large tensor.\n    device_grads: List of lists of (gradient, variable) tuples.  The outer\n        list is over devices. The inner list is over individual gradients.\n\n  Returns:\n    small_grads: Subset of device_grads where shape is <= theshold_size\n       elements.\n    large_grads: Subset of device_grads where shape is > threshold_size\n       elements.\n  \"\"\"", "\n", "small_grads", "=", "[", "]", "\n", "large_grads", "=", "[", "]", "\n", "for", "dl", "in", "device_grads", ":", "\n", "    ", "small_dl", "=", "[", "]", "\n", "large_dl", "=", "[", "]", "\n", "for", "(", "g", ",", "v", ")", "in", "dl", ":", "\n", "      ", "tensor_size", "=", "g", ".", "get_shape", "(", ")", ".", "num_elements", "(", ")", "\n", "if", "tensor_size", "<=", "threshold_size", ":", "\n", "        ", "small_dl", ".", "append", "(", "[", "g", ",", "v", "]", ")", "\n", "", "else", ":", "\n", "        ", "large_dl", ".", "append", "(", "[", "g", ",", "v", "]", ")", "\n", "", "", "if", "small_dl", ":", "\n", "      ", "small_grads", ".", "append", "(", "small_dl", ")", "\n", "", "if", "large_dl", ":", "\n", "      ", "large_grads", ".", "append", "(", "large_dl", ")", "\n", "", "", "return", "small_grads", ",", "large_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.new_collective_instance_key": [[228, 234], ["None"], "function", ["None"], ["def", "new_collective_instance_key", "(", ")", ":", "\n", "  ", "\"\"\"Returns a new instance key for use in defining a collective op.\"\"\"", "\n", "global", "_instance_key", "\n", "v", "=", "_instance_key", "\n", "_instance_key", "+=", "1", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key": [[240, 260], ["sorted", "tensorflow.python.framework.device.DeviceSpec.from_string", "_group_key_table.keys"], "function", ["None"], ["def", "collective_group_key", "(", "devices", ")", ":", "\n", "  ", "\"\"\"Returns a group key for the set of devices.\n\n  Args:\n    devices: list of strings naming devices in a collective group.\n\n  Returns:\n    int key uniquely identifying the set of device names.\n  \"\"\"", "\n", "global", "_group_key", "\n", "global", "_group_key_table", "\n", "parsed", "=", "[", "pydev", ".", "DeviceSpec", ".", "from_string", "(", "d", ")", "for", "d", "in", "devices", "]", "\n", "names", "=", "sorted", "(", "[", "'%s:%d'", "%", "(", "d", ".", "device_type", ",", "d", ".", "device_index", ")", "for", "d", "in", "parsed", "]", ")", "\n", "concat", "=", "','", ".", "join", "(", "names", ")", "\n", "if", "concat", "not", "in", "_group_key_table", ".", "keys", "(", ")", ":", "\n", "    ", "new_key", "=", "_group_key", "\n", "_group_key", "+=", "1", "\n", "_group_key_table", "[", "concat", "]", "=", "new_key", "\n", "", "rv", "=", "_group_key_table", "[", "concat", "]", "\n", "return", "rv", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.build_collective_reduce": [[262, 308], ["len", "allreduce.collective_group_key", "allreduce.new_collective_instance_key", "range", "len", "ValueError", "ValueError", "tensorflow.python.framework.ops.device", "tensorflow.python.ops.collective_ops.all_reduce", "out_tensors.append"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.new_collective_instance_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.all_reduce_benchmark.all_reduce"], ["", "def", "build_collective_reduce", "(", "input_tensors", ",", "num_workers", ",", "num_shards", ",", "\n", "red_op", "=", "'Add'", ",", "un_op", "=", "'Id'", ")", ":", "\n", "  ", "\"\"\"Build a subgraph that does one full all-reduce, using the collective Op.\n\n  Args:\n    input_tensors: tensors within a single worker graph that are to be reduced\n      together; must be one per device.\n    num_workers: total number of workers with identical independent graphs that\n      will be doing this same reduction.  The reduction will actually include\n      the corresponding tensors at all these workers.\n    num_shards: number of shards into which to divide each per-tick chunk,\n      normally 1 but could be higher on multi-data-path architectures.\n    red_op: string naming the reduction op\n    un_op: string naming the unary final op\n\n  Returns:\n    An array of final tensors, one per device, computed by the full reduction.\n\n  Raises:\n    ValueError: There must be at least two tensors over all the workers.\n  \"\"\"", "\n", "group_size", "=", "len", "(", "input_tensors", ")", "*", "num_workers", "\n", "if", "group_size", "<", "2", ":", "\n", "    ", "raise", "ValueError", "(", "'num_workers * len(input_tensors) must be 2 or greater'", ")", "\n", "", "devices", "=", "[", "t", ".", "device", "for", "t", "in", "input_tensors", "]", "\n", "num_devices", "=", "len", "(", "devices", ")", "\n", "group_key", "=", "collective_group_key", "(", "devices", ")", "\n", "instance_key", "=", "new_collective_instance_key", "(", ")", "\n", "out_tensors", "=", "[", "]", "\n", "if", "num_shards", "==", "1", ":", "\n", "    ", "subdiv_offsets", "=", "[", "0", "]", "\n", "", "elif", "num_shards", "==", "2", ":", "\n", "    ", "if", "num_devices", ">", "1", ":", "\n", "      ", "subdiv_offsets", "=", "[", "0", ",", "-", "(", "num_devices", "//", "2", ")", "]", "\n", "", "else", ":", "\n", "      ", "subdiv_offsets", "=", "[", "0", "]", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Unsupported num_shards %d'", "%", "num_shards", ")", "\n", "", "for", "d", "in", "range", "(", "num_devices", ")", ":", "\n", "    ", "with", "ops", ".", "device", "(", "devices", "[", "d", "]", ")", ":", "\n", "      ", "reduce_op", "=", "collective_ops", ".", "all_reduce", "(", "input_tensors", "[", "d", "]", ",", "\n", "group_size", ",", "group_key", ",", "instance_key", ",", "\n", "red_op", ",", "un_op", ",", "\n", "subdiv_offsets", ")", "\n", "out_tensors", ".", "append", "(", "reduce_op", ")", "\n", "", "", "return", "out_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.broadcast_send": [[310, 313], ["tensorflow.python.ops.collective_ops.broadcast_send"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.broadcast_send"], ["", "def", "broadcast_send", "(", "t", ",", "shape", ",", "dtype", ",", "group_size", ",", "group_key", ",", "instance_key", ")", ":", "\n", "  ", "return", "collective_ops", ".", "broadcast_send", "(", "t", ",", "shape", ",", "dtype", ",", "group_size", ",", "group_key", ",", "\n", "instance_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.broadcast_recv": [[315, 318], ["tensorflow.python.ops.collective_ops.broadcast_recv"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.broadcast_recv"], ["", "def", "broadcast_recv", "(", "shape", ",", "dtype", ",", "group_size", ",", "group_key", ",", "instance_key", ")", ":", "\n", "  ", "return", "collective_ops", ".", "broadcast_recv", "(", "shape", ",", "dtype", ",", "group_size", ",", "group_key", ",", "\n", "instance_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_grad_and_var_all_reduce": [[320, 369], ["zip", "allreduce.build_collective_reduce", "result.append", "tensorflow.name_scope", "tensorflow.contrib.all_reduce.python.all_reduce.build_nccl_all_reduce", "tensorflow.contrib.all_reduce.python.all_reduce.build_ring_all_reduce", "tensorflow.contrib.all_reduce.python.all_reduce.build_nccl_then_ring", "tensorflow.contrib.all_reduce.python.all_reduce.build_nccl_then_recursive_hd", "tensorflow.contrib.all_reduce.python.all_reduce.build_nccl_then_shuffle", "tensorflow.contrib.all_reduce.python.all_reduce.build_shuffle_then_shuffle", "tensorflow.contrib.all_reduce.python.all_reduce.build_shuffle_all_reduce", "ValueError"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.build_collective_reduce"], ["", "def", "sum_grad_and_var_all_reduce", "(", "single_session", ",", "\n", "grad_and_vars", ",", "\n", "num_workers", ",", "\n", "alg", ",", "\n", "gpu_indices", ",", "\n", "aux_devices", "=", "None", ",", "\n", "num_shards", "=", "1", ")", ":", "\n", "  ", "\"\"\"Apply all-reduce algorithm over specified gradient tensors.\"\"\"", "\n", "scaled_grads", "=", "[", "g", "for", "g", ",", "_", "in", "grad_and_vars", "]", "\n", "if", "alg", "==", "'collective'", ":", "\n", "    ", "assert", "not", "single_session", "\n", "summed_grads", "=", "build_collective_reduce", "(", "\n", "scaled_grads", ",", "num_workers", ",", "num_shards", ",", "'Add'", ",", "'Id'", ")", "\n", "", "else", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'allreduce'", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "      ", "if", "alg", "==", "'nccl'", ":", "\n", "        ", "summed_grads", "=", "all_reduce", ".", "build_nccl_all_reduce", "(", "scaled_grads", ",", "tf", ".", "add", ")", "\n", "", "elif", "alg", "==", "'xring'", ":", "\n", "        ", "summed_grads", "=", "all_reduce", ".", "build_ring_all_reduce", "(", "\n", "scaled_grads", ",", "num_workers", ",", "num_shards", ",", "gpu_indices", ",", "tf", ".", "add", ")", "\n", "", "elif", "alg", "==", "'nccl/xring'", ":", "\n", "        ", "summed_grads", "=", "all_reduce", ".", "build_nccl_then_ring", "(", "scaled_grads", ",", "num_shards", ",", "\n", "tf", ".", "add", ")", "\n", "", "elif", "alg", "==", "'nccl/rechd'", ":", "\n", "        ", "summed_grads", "=", "all_reduce", ".", "build_nccl_then_recursive_hd", "(", "\n", "scaled_grads", ",", "tf", ".", "add", ")", "\n", "", "elif", "alg", "==", "'nccl/pscpu'", ":", "\n", "        ", "summed_grads", "=", "all_reduce", ".", "build_nccl_then_shuffle", "(", "\n", "scaled_grads", ",", "aux_devices", ",", "tf", ".", "add", ",", "tf", ".", "add_n", ")", "\n", "", "elif", "alg", "==", "'pscpu/pscpu'", ":", "\n", "        ", "summed_grads", "=", "all_reduce", ".", "build_shuffle_then_shuffle", "(", "\n", "scaled_grads", ",", "\n", "aux_devices", ",", "\n", "# TODO(tucker): devise a way of better specifying the device set", "\n", "# for the second level.", "\n", "[", "aux_devices", "[", "0", "]", "]", ",", "\n", "tf", ".", "add_n", ")", "\n", "", "elif", "alg", "in", "[", "'pscpu'", ",", "'psgpu'", "]", ":", "\n", "        ", "summed_grads", "=", "all_reduce", ".", "build_shuffle_all_reduce", "(", "\n", "scaled_grads", ",", "aux_devices", ",", "tf", ".", "add_n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unsupported all_reduce alg: '", ",", "alg", ")", "\n", "\n", "", "", "", "result", "=", "[", "]", "\n", "for", "(", "_", ",", "v", ")", ",", "g", "in", "zip", "(", "grad_and_vars", ",", "summed_grads", ")", ":", "\n", "    ", "result", ".", "append", "(", "[", "g", ",", "v", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.contains_any": [[371, 386], ["None"], "function", ["None"], ["", "def", "contains_any", "(", "haystack", ",", "needles", ")", ":", "\n", "  ", "\"\"\"Tests if any needle is a substring of haystack.\n\n  Args:\n    haystack: a string\n    needles: list of strings\n\n  Returns:\n    True if any element of needles is a substring of haystack,\n      False otherwise.\n  \"\"\"", "\n", "for", "n", "in", "needles", ":", "\n", "    ", "if", "n", "in", "haystack", ":", "\n", "      ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_gradients_all_reduce": [[388, 462], ["allreduce.contains_any", "allreduce.group_device_names", "list", "allreduce.pack_small_tensors", "zip", "list", "allreduce.unpack_small_tensors", "six.moves.xrange", "tensorflow.name_scope", "zip", "len", "reduced_gv_list.append", "range", "allreduce.sum_grad_and_var_all_reduce", "len", "len"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.contains_any", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.group_device_names", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_small_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_grad_and_var_all_reduce"], ["", "def", "sum_gradients_all_reduce", "(", "single_session", ",", "\n", "dev_prefixes", ",", "\n", "tower_grads", ",", "\n", "num_workers", ",", "\n", "alg", ",", "\n", "num_shards", ",", "\n", "gpu_indices", ",", "\n", "agg_small_grads_max_bytes", "=", "0", ",", "\n", "agg_small_grads_max_group", "=", "10", ",", "\n", "allreduce_merge_scope", "=", "1", ")", ":", "\n", "  ", "\"\"\"Apply all-reduce algorithm over specified gradient tensors.\n\n  Args:\n    single_session: true if reduction is applied to one graph across\n      all workers, false if ths application is to a single-worker graph only.\n    dev_prefixes: list of prefix strings to use to generate PS device names.\n    tower_grads: the gradients to reduce.\n    num_workers: number of worker processes across entire job.\n    alg: the all-reduce algorithm to apply.\n    num_shards: alg-specific sharding factor.\n    gpu_indices: indices of local GPUs in order usable for ring-reduce.\n    agg_small_grads_max_bytes: largest tensor eligible for aggregation,\n      in number of bytes.\n    agg_small_grads_max_group: largest permitted aggregation of small\n      tensors.\n    allreduce_merge_scope: size of groups into which to partition consecutive\n      gradients grouped under a common 'allreduce' name scope for application\n      of ScopedAllocator optimization.\n\n  Returns:\n    list of reduced tensors\n  \"\"\"", "\n", "alg_contains_shuffle", "=", "contains_any", "(", "alg", ",", "[", "'pscpu'", ",", "'psgpu'", "]", ")", "\n", "is_hierarchical", "=", "'/'", "in", "alg", "\n", "if", "'pscpu'", "in", "alg", ":", "\n", "    ", "aux_devices", "=", "[", "prefix", "+", "'/cpu:0'", "for", "prefix", "in", "dev_prefixes", "]", "\n", "", "elif", "'psgpu'", "in", "alg", ":", "\n", "    ", "aux_devices", "=", "[", "\n", "prefix", "+", "'/gpu:%d'", "%", "i", "\n", "for", "i", "in", "range", "(", "len", "(", "gpu_indices", ")", ")", "\n", "for", "prefix", "in", "dev_prefixes", "\n", "]", "\n", "", "else", ":", "\n", "    ", "aux_devices", "=", "[", "'/job:localhost/cpu:0'", "]", "\n", "", "aux_device_groups", "=", "group_device_names", "(", "\n", "aux_devices", ",", "\n", "num_shards", "if", "(", "alg", "!=", "'collective'", "and", "alg_contains_shuffle", ")", "else", "1", ")", "\n", "group_index", "=", "0", "\n", "if", "agg_small_grads_max_bytes", ">", "0", "and", "agg_small_grads_max_group", ">", "0", ":", "\n", "    ", "tower_grads", ",", "packing", "=", "pack_small_tensors", "(", "\n", "tower_grads", ",", "\n", "max_bytes", "=", "agg_small_grads_max_bytes", ",", "\n", "max_group", "=", "agg_small_grads_max_group", ")", "\n", "", "else", ":", "\n", "    ", "packing", "=", "None", "\n", "", "reduced_gv_list", "=", "[", "]", "\n", "gv", "=", "list", "(", "zip", "(", "*", "tower_grads", ")", ")", "\n", "merge_scope", "=", "allreduce_merge_scope", "if", "allreduce_merge_scope", ">", "0", "else", "1", "\n", "chunked_gv", "=", "[", "gv", "[", "x", ":", "x", "+", "merge_scope", "]", "\n", "for", "x", "in", "xrange", "(", "0", ",", "len", "(", "gv", ")", ",", "merge_scope", ")", "]", "\n", "for", "chunk", "in", "chunked_gv", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'allreduce'", ")", ":", "\n", "      ", "for", "grad_and_vars", "in", "chunk", ":", "\n", "        ", "reduced_gv_list", ".", "append", "(", "sum_grad_and_var_all_reduce", "(", "\n", "single_session", ",", "\n", "grad_and_vars", ",", "num_workers", ",", "alg", ",", "gpu_indices", ",", "\n", "(", "aux_devices", "if", "is_hierarchical", "\n", "else", "aux_device_groups", "[", "group_index", "]", ")", ",", "\n", "num_shards", ")", ")", "\n", "group_index", "=", "(", "group_index", "+", "1", ")", "%", "len", "(", "aux_device_groups", ")", "\n", "", "", "", "new_tower_grads", "=", "[", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "reduced_gv_list", ")", "]", "\n", "if", "packing", ":", "\n", "    ", "new_tower_grads", "=", "unpack_small_tensors", "(", "new_tower_grads", ",", "packing", ")", "\n", "", "return", "new_tower_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.extract_ranges": [[464, 499], ["ranges.append", "singles.append", "ranges.append", "singles.append"], "function", ["None"], ["", "def", "extract_ranges", "(", "index_list", ",", "range_size_limit", "=", "32", ")", ":", "\n", "  ", "\"\"\"Extract consecutive ranges and singles from index_list.\n\n  Args:\n    index_list: List of monotone increasing non-negative integers.\n    range_size_limit: Largest size range to return.  If a larger\n      consecutive range exists it will be returned as multiple\n      ranges.\n\n  Returns:\n   ranges, singles where ranges is a list of [first, last] pairs of\n     consecutive elements in index_list, and singles is all of the\n     other elements, in original order.\n  \"\"\"", "\n", "if", "not", "index_list", ":", "\n", "    ", "return", "[", "]", ",", "[", "]", "\n", "", "first", "=", "index_list", "[", "0", "]", "\n", "last", "=", "first", "\n", "ranges", "=", "[", "]", "\n", "singles", "=", "[", "]", "\n", "for", "i", "in", "index_list", "[", "1", ":", "]", ":", "\n", "    ", "if", "i", "==", "last", "+", "1", "and", "(", "last", "-", "first", ")", "<=", "range_size_limit", ":", "\n", "      ", "last", "=", "i", "\n", "", "else", ":", "\n", "      ", "if", "last", ">", "first", ":", "\n", "        ", "ranges", ".", "append", "(", "[", "first", ",", "last", "]", ")", "\n", "", "else", ":", "\n", "        ", "singles", ".", "append", "(", "first", ")", "\n", "", "first", "=", "i", "\n", "last", "=", "i", "\n", "", "", "if", "last", ">", "first", ":", "\n", "    ", "ranges", ".", "append", "(", "[", "first", ",", "last", "]", ")", "\n", "", "else", ":", "\n", "    ", "singles", ".", "append", "(", "first", ")", "\n", "", "return", "ranges", ",", "singles", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_range": [[504, 534], ["tensorflow.name_scope", "GradPackTuple", "variables.append", "restore_shapes.append", "tensorflow.device", "tensorflow.concat", "tensorflow.device", "members.append", "range", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["def", "pack_range", "(", "key", ",", "packing", ",", "grad_vars", ",", "rng", ")", ":", "\n", "  ", "\"\"\"Form the concatenation of a specified range of gradient tensors.\n\n  Args:\n    key: Value under which to store meta-data in packing that will be used\n      later to restore the grad_var list structure.\n    packing: Dict holding data describing packed ranges of small tensors.\n    grad_vars: List of (grad, var) pairs for one tower.\n    rng: A pair of integers giving the first, last indices of a consecutive\n      range of tensors to be packed.\n\n  Returns:\n    A tensor that is the concatenation of all the specified small tensors.\n  \"\"\"", "\n", "to_pack", "=", "grad_vars", "[", "rng", "[", "0", "]", ":", "rng", "[", "1", "]", "+", "1", "]", "\n", "members", "=", "[", "]", "\n", "variables", "=", "[", "]", "\n", "restore_shapes", "=", "[", "]", "\n", "with", "tf", ".", "name_scope", "(", "'pack'", ")", ":", "\n", "    ", "for", "g", ",", "v", "in", "to_pack", ":", "\n", "      ", "variables", ".", "append", "(", "v", ")", "\n", "restore_shapes", ".", "append", "(", "g", ".", "shape", ")", "\n", "with", "tf", ".", "device", "(", "g", ".", "device", ")", ":", "\n", "        ", "members", ".", "append", "(", "tf", ".", "reshape", "(", "g", ",", "[", "-", "1", "]", ")", ")", "\n", "", "", "packing", "[", "key", "]", "=", "GradPackTuple", "(", "\n", "indices", "=", "range", "(", "rng", "[", "0", "]", ",", "rng", "[", "1", "]", "+", "1", ")", ",", "\n", "vars", "=", "variables", ",", "\n", "shapes", "=", "restore_shapes", ")", "\n", "with", "tf", ".", "device", "(", "members", "[", "0", "]", ".", "device", ")", ":", "\n", "      ", "return", "tf", ".", "concat", "(", "members", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_grad_tuple": [[536, 556], ["x.num_elements", "tensorflow.device", "tensorflow.name_scope", "tensorflow.split", "enumerate", "unpacked_gv.append", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["", "", "", "def", "unpack_grad_tuple", "(", "gv", ",", "gpt", ")", ":", "\n", "  ", "\"\"\"Unpack a previously packed collection of gradient tensors.\n\n  Args:\n    gv: A (grad, var) pair to be unpacked.\n    gpt: A GradPackTuple describing the packing operation that produced gv.\n\n  Returns:\n    A list of (grad, var) pairs corresponding to the values that were\n     originally packed into gv, maybe following subsequent operations like\n     reduction.\n  \"\"\"", "\n", "elt_widths", "=", "[", "x", ".", "num_elements", "(", ")", "for", "x", "in", "gpt", ".", "shapes", "]", "\n", "with", "tf", ".", "device", "(", "gv", "[", "0", "]", "[", "0", "]", ".", "device", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'unpack'", ")", ":", "\n", "      ", "splits", "=", "tf", ".", "split", "(", "gv", "[", "0", "]", ",", "elt_widths", ")", "\n", "unpacked_gv", "=", "[", "]", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "unpacked_gv", ".", "append", "(", "(", "tf", ".", "reshape", "(", "s", ",", "gpt", ".", "shapes", "[", "idx", "]", ")", ",", "gpt", ".", "vars", "[", "idx", "]", ")", ")", "\n", "", "", "", "return", "unpacked_gv", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_small_tensors": [[558, 612], ["enumerate", "allreduce.extract_ranges", "sorted", "len", "enumerate", "small_indices.append", "sorted.append", "new_tower_grads.append", "len", "new_gv_list.append", "new_gv_list.append", "g.shape.num_elements", "len", "allreduce.pack_range"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.extract_ranges", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.pack_range"], ["", "def", "pack_small_tensors", "(", "tower_grads", ",", "max_bytes", "=", "0", ",", "max_group", "=", "0", ")", ":", "\n", "  ", "\"\"\"Concatenate small gradient tensors together for reduction.\n\n  Args:\n    tower_grads: List of lists of (gradient, variable) tuples.\n    max_bytes: Int giving max number of bytes in a tensor that\n      may be considered small.\n    max_group: Int giving max number of small tensors that may be\n      concatenated into one new tensor.\n\n  Returns:\n    new_tower_grads, packing where new_tower_grads is identical to\n      tower_grads except that all feasible small_tensors have been removed\n      from their places and concatenated into larger tensors that are\n      now in the front of the list for each tower, and packing contains\n      the data necessary to restore the tower_grads structure.\n\n  Look through the first tower for gradients of the same type (float),\n  and small size, that are all sequential.  For each such group,\n  replace by a new tensor that is a flattened concatenation.  Note\n  that the corresponding variable will be absent, which doesn't matter\n  because it isn't used during all-reduce.\n\n  Requires:\n    Every gv_list in towers must have isomorphic structure including identical\n      tensor sizes and types.\n  \"\"\"", "\n", "small_indices", "=", "[", "]", "\n", "large_indices", "=", "[", "]", "\n", "for", "idx", ",", "(", "g", ",", "_", ")", "in", "enumerate", "(", "tower_grads", "[", "0", "]", ")", ":", "\n", "    ", "if", "g", ".", "dtype", "==", "tf", ".", "float32", "and", "(", "4", "*", "g", ".", "shape", ".", "num_elements", "(", ")", ")", "<=", "max_bytes", ":", "\n", "      ", "small_indices", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "      ", "large_indices", ".", "append", "(", "idx", ")", "\n", "", "", "small_ranges", ",", "small_singles", "=", "extract_ranges", "(", "\n", "small_indices", ",", "range_size_limit", "=", "max_group", ")", "\n", "large_indices", "=", "sorted", "(", "large_indices", "+", "small_singles", ")", "\n", "num_gv", "=", "len", "(", "tower_grads", "[", "0", "]", ")", "\n", "packing", "=", "{", "}", "\n", "if", "small_ranges", ":", "\n", "    ", "new_tower_grads", "=", "[", "]", "\n", "for", "dev_idx", ",", "gv_list", "in", "enumerate", "(", "tower_grads", ")", ":", "\n", "      ", "assert", "len", "(", "gv_list", ")", "==", "num_gv", "\n", "new_gv_list", "=", "[", "]", "\n", "for", "r", "in", "small_ranges", ":", "\n", "        ", "key", "=", "'%d:%d'", "%", "(", "dev_idx", ",", "len", "(", "new_gv_list", ")", ")", "\n", "new_gv_list", ".", "append", "(", "(", "pack_range", "(", "key", ",", "packing", ",", "gv_list", ",", "r", ")", ",", "\n", "'packing_var_placeholder'", ")", ")", "\n", "", "for", "i", "in", "large_indices", ":", "\n", "        ", "new_gv_list", ".", "append", "(", "gv_list", "[", "i", "]", ")", "\n", "", "new_tower_grads", ".", "append", "(", "new_gv_list", ")", "\n", "", "return", "new_tower_grads", ",", "packing", "\n", "", "else", ":", "\n", "    ", "return", "tower_grads", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_small_tensors": [[614, 643], ["len", "enumerate", "len", "six.moves.xrange", "new_tower_grads.append", "packing.keys", "allreduce.unpack_grad_tuple", "enumerate", "new_gv_list.insert"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.unpack_grad_tuple"], ["", "", "def", "unpack_small_tensors", "(", "tower_grads", ",", "packing", ")", ":", "\n", "  ", "\"\"\"Undo the structure alterations to tower_grads done by pack_small_tensors.\n\n  Args:\n    tower_grads: List of List of (grad, var) tuples.\n    packing: A dict generated by pack_small_tensors describing the changes\n      it made to tower_grads.\n\n  Returns:\n    new_tower_grads: identical to tower_grads except that concatentations\n      of small tensors have been split apart and returned to their original\n      positions, paired with their original variables.\n  \"\"\"", "\n", "if", "not", "packing", ":", "\n", "    ", "return", "tower_grads", "\n", "", "new_tower_grads", "=", "[", "]", "\n", "num_devices", "=", "len", "(", "tower_grads", ")", "\n", "num_packed", "=", "len", "(", "packing", ".", "keys", "(", ")", ")", "//", "num_devices", "\n", "for", "dev_idx", ",", "gv_list", "in", "enumerate", "(", "tower_grads", ")", ":", "\n", "    ", "new_gv_list", "=", "gv_list", "[", "num_packed", ":", "]", "\n", "for", "i", "in", "xrange", "(", "0", ",", "num_packed", ")", ":", "\n", "      ", "k", "=", "'%d:%d'", "%", "(", "dev_idx", ",", "i", ")", "\n", "gpt", "=", "packing", "[", "k", "]", "\n", "gv", "=", "unpack_grad_tuple", "(", "gv_list", "[", "i", "]", ",", "gpt", ")", "\n", "for", "gi", ",", "idx", "in", "enumerate", "(", "gpt", ".", "indices", ")", ":", "\n", "        ", "assert", "idx", "==", "gpt", ".", "indices", "[", "gi", "]", "\n", "new_gv_list", ".", "insert", "(", "idx", ",", "gv", "[", "gi", "]", ")", "\n", "", "", "new_tower_grads", ".", "append", "(", "new_gv_list", ")", "\n", "", "return", "new_tower_grads", "\n", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.setUp": [[50, 53], ["super().setUp", "benchmark_cnn.setup", "benchmark_cnn.make_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.setUp", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.setup", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TfCnnBenchmarksModelTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "benchmark_cnn", ".", "setup", "(", "benchmark_cnn", ".", "make_params", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.extended_tests": [[59, 61], ["None"], "methods", ["None"], ["", "def", "extended_tests", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.model_execution_test": [[64, 66], ["None"], "methods", ["None"], ["", "def", "model_execution_test", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.model_save_load_test": [[68, 70], ["None"], "methods", ["None"], ["", "def", "model_save_load_test", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.testSaveLoadModel": [[71, 140], ["benchmark_cnn_test._check_has_gpu", "benchmark_cnn.make_params", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn.BenchmarkCNN.run", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "tensorflow.reset_default_graph", "tensorflow.train.get_checkpoint_state", "re.match", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertTrue", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertGreaterEqual", "params._replace._replace._replace", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn.BenchmarkCNN.run", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertNotEquals", "tensorflow.train.get_checkpoint_state", "re.match", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertTrue", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertGreaterEqual", "os.path.join", "int", "os.path.join", "int", "tensorflow.Graph().as_default", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn.BenchmarkCNN._build_model", "tensorflow.train.Saver", "benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name", "benchmark_cnn_test.TfCnnBenchmarksModelTest.model_save_load_test", "benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name", "test_util.get_temp_dir", "re.match.group", "re.match.group", "benchmark_cnn.BenchmarkCNN.variable_mgr.savable_variables", "tensorflow.Session", "benchmark_cnn.load_checkpoint", "sess.run", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertGreater", "tensorflow.Graph", "benchmark_cnn.BenchmarkCNN.variable_mgr.get_post_init_ops", "len", "sess.run", "benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name", "benchmark_cnn.create_config_proto", "tensorflow.global_variables", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertFalse", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertIn", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertFalse", "numpy.array_equal", "numpy.array_equal", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test._check_has_gpu", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet50Model.model_save_load_test", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_temp_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.savable_variables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.load_checkpoint", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_post_init_ops", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.create_config_proto"], ["", "def", "testSaveLoadModel", "(", "self", ")", ":", "\n", "    ", "_check_has_gpu", "(", ")", "\n", "if", "not", "self", ".", "get_model_name", "(", ")", "or", "not", "self", ".", "model_save_load_test", "(", ")", ":", "\n", "      ", "return", "\n", "\n", "", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "model", "=", "self", ".", "get_model_name", "(", ")", ",", "\n", "num_batches", "=", "1", ",", "\n", "num_intra_threads", "=", "0", ",", "\n", "num_inter_threads", "=", "0", ",", "\n", "distortions", "=", "False", ",", "\n", "batch_size", "=", "2", ",", "\n", "variable_update", "=", "'replicated'", ",", "\n", "num_warmup_batches", "=", "0", ",", "\n", "num_gpus", "=", "2", ",", "\n", "train_dir", "=", "test_util", ".", "get_temp_dir", "(", "'testSaveLoadModel_'", "+", "\n", "self", ".", "get_model_name", "(", ")", ")", ")", "\n", "\n", "# Run one batch and save the model.", "\n", "# Note that this uses a non-test session.", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "bench", ".", "run", "(", ")", "\n", "self", ".", "assertEquals", "(", "bench", ".", "init_global_step", ",", "0", ")", "\n", "# Clear the default graph.", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "# Test if checkpoint had been saved.", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "params", ".", "train_dir", ")", "\n", "match", "=", "re", ".", "match", "(", "os", ".", "path", ".", "join", "(", "params", ".", "train_dir", ",", "r'model.ckpt-(\\d+).index'", ")", ",", "\n", "ckpt", ".", "model_checkpoint_path", "+", "'.index'", ")", "\n", "self", ".", "assertTrue", "(", "match", ")", "\n", "self", ".", "assertGreaterEqual", "(", "int", "(", "match", ".", "group", "(", "1", ")", ")", ",", "params", ".", "num_batches", ")", "\n", "params", "=", "params", ".", "_replace", "(", "num_batches", "=", "2", ")", "\n", "# Reload the model", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "bench", ".", "run", "(", ")", "\n", "# Check if global step has been restored.", "\n", "self", ".", "assertNotEquals", "(", "bench", ".", "init_global_step", ",", "0", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "params", ".", "train_dir", ")", "\n", "match", "=", "re", ".", "match", "(", "os", ".", "path", ".", "join", "(", "params", ".", "train_dir", ",", "r'model.ckpt-(\\d+).index'", ")", ",", "\n", "ckpt", ".", "model_checkpoint_path", "+", "'.index'", ")", "\n", "self", ".", "assertTrue", "(", "match", ")", "\n", "self", ".", "assertGreaterEqual", "(", "int", "(", "match", ".", "group", "(", "1", ")", ")", ",", "params", ".", "num_batches", ")", "\n", "# Check that the batch norm moving averages are restored from checkpoints", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "      ", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "bench", ".", "_build_model", "(", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "bench", ".", "variable_mgr", ".", "savable_variables", "(", ")", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "benchmark_cnn", ".", "create_config_proto", "(", "params", ")", ")", "as", "sess", ":", "\n", "        ", "benchmark_cnn", ".", "load_checkpoint", "(", "saver", ",", "sess", ",", "params", ".", "train_dir", ")", "\n", "sess", ".", "run", "(", "bench", ".", "variable_mgr", ".", "get_post_init_ops", "(", ")", ")", "\n", "bn_moving_vars", "=", "[", "\n", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "\n", "if", "'/batchnorm'", "in", "v", ".", "name", "and", "'/moving'", "in", "v", ".", "name", "\n", "]", "\n", "self", ".", "assertGreater", "(", "len", "(", "bn_moving_vars", ")", ",", "0", ")", "\n", "for", "moving_var", "in", "bn_moving_vars", ":", "\n", "          ", "moving_var_value", "=", "sess", ".", "run", "(", "moving_var", ")", "\n", "# Check that the moving means and moving variances have been restored", "\n", "# by asserting they are not their default values of 0 and 1,", "\n", "# respectively", "\n", "if", "'/moving_mean'", "in", "moving_var", ".", "name", ":", "\n", "            ", "self", ".", "assertFalse", "(", "np", ".", "array_equal", "(", "moving_var_value", ",", "\n", "np", ".", "zeros", "(", "moving_var_value", ".", "shape", ",", "\n", "moving_var_value", ".", "dtype", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "assertIn", "(", "'/moving_variance'", ",", "moving_var", ".", "name", ")", "\n", "self", ".", "assertFalse", "(", "np", ".", "array_equal", "(", "moving_var_value", ",", "\n", "np", ".", "ones", "(", "moving_var_value", ".", "shape", ",", "\n", "moving_var_value", ".", "dtype", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.testModel": [[141, 157], ["benchmark_cnn_test._check_has_gpu", "benchmark_cnn.make_params", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn.BenchmarkCNN.run", "benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name", "benchmark_cnn_test.TfCnnBenchmarksModelTest.model_execution_test", "benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test._check_has_gpu", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.model_execution_test", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name"], ["", "", "", "", "", "def", "testModel", "(", "self", ")", ":", "\n", "    ", "_check_has_gpu", "(", ")", "\n", "if", "not", "self", ".", "get_model_name", "(", ")", "or", "not", "self", ".", "model_execution_test", "(", ")", ":", "\n", "      ", "return", "\n", "\n", "", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "model", "=", "self", ".", "get_model_name", "(", ")", ",", "\n", "num_batches", "=", "1", ",", "\n", "num_intra_threads", "=", "1", ",", "\n", "num_inter_threads", "=", "12", ",", "\n", "batch_size", "=", "2", ",", "\n", "distortions", "=", "False", ")", "\n", "\n", "# Run this one; note that this uses a non-test session.", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "bench", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.testSendRecvVariables": [[158, 163], ["benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest.extended_tests", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestInceptionv3Model.extended_tests", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], ["", "def", "testSendRecvVariables", "(", "self", ")", ":", "\n", "    ", "self", ".", "_testVariables", "(", "'parameter_server'", ")", "\n", "if", "self", ".", "extended_tests", "(", ")", ":", "\n", "      ", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "local_parameter_device", "=", "'CPU'", ")", "\n", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "optimizer", "=", "'sgd'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.testReplicatedVariables": [[164, 176], ["benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest.extended_tests", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestInceptionv3Model.extended_tests", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], ["", "", "def", "testReplicatedVariables", "(", "self", ")", ":", "\n", "    ", "self", ".", "_testVariables", "(", "'replicated'", ")", "\n", "if", "self", ".", "extended_tests", "(", ")", ":", "\n", "      ", "self", ".", "_testVariables", "(", "'replicated'", ",", "all_reduce_spec", "=", "None", ")", "\n", "self", ".", "_testVariables", "(", "'replicated'", ",", "use_fp16", "=", "True", ",", "fp16_vars", "=", "False", ")", "\n", "self", ".", "_testVariables", "(", "\n", "'replicated'", ",", "\n", "all_reduce_spec", "=", "None", ",", "\n", "use_fp16", "=", "True", ",", "\n", "fp16_vars", "=", "False", ",", "\n", "fp16_enable_auto_loss_scale", "=", "True", ",", "\n", "fp16_inc_loss_scale_every_n", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.testIndependentVariables": [[177, 186], ["benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], ["", "", "def", "testIndependentVariables", "(", "self", ")", ":", "\n", "    ", "self", ".", "_testVariables", "(", "'independent'", ")", "\n", "self", ".", "_testVariables", "(", "\n", "'independent'", ",", "\n", "all_reduce_spec", "=", "None", ",", "\n", "use_fp16", "=", "True", ",", "\n", "fp16_vars", "=", "False", ",", "\n", "fp16_enable_auto_loss_scale", "=", "True", ",", "\n", "fp16_inc_loss_scale_every_n", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.testSummaryVerbosity": [[187, 192], ["benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest.extended_tests", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestInceptionv3Model.extended_tests", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], ["", "def", "testSummaryVerbosity", "(", "self", ")", ":", "\n", "    ", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "summary_verbosity", "=", "1", ")", "\n", "if", "self", ".", "extended_tests", "(", ")", ":", "\n", "      ", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "summary_verbosity", "=", "2", ")", "\n", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "summary_verbosity", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest.testStagedVariables": [[193, 200], ["benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest.extended_tests", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestInceptionv3Model.extended_tests", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables"], ["", "", "def", "testStagedVariables", "(", "self", ")", ":", "\n", "    ", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "staged_vars", "=", "True", ")", "\n", "if", "self", ".", "extended_tests", "(", ")", ":", "\n", "      ", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "staged_vars", "=", "True", ",", "\n", "local_parameter_device", "=", "'CPU'", ")", "\n", "self", ".", "_testVariables", "(", "'parameter_server'", ",", "staged_vars", "=", "True", ",", "use_fp16", "=", "True", ",", "\n", "fp16_vars", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._assert_correct_var_type": [[201, 208], ["benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEqual"], "methods", ["None"], ["", "", "def", "_assert_correct_var_type", "(", "self", ",", "var", ",", "params", ")", ":", "\n", "    ", "if", "'gpu_cached_images'", "not", "in", "var", ".", "name", ":", "\n", "      ", "if", "params", ".", "use_fp16", "and", "params", ".", "fp16_vars", "and", "'batchnorm'", "not", "in", "var", ".", "name", ":", "\n", "        ", "expected_type", "=", "tf", ".", "float16", "\n", "", "else", ":", "\n", "        ", "expected_type", "=", "tf", ".", "float32", "\n", "", "self", ".", "assertEqual", "(", "var", ".", "dtype", ".", "base_dtype", ",", "expected_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._testVariables": [[209, 319], ["benchmark_cnn_test._check_has_gpu", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name", "benchmark_cnn_test.TfCnnBenchmarksModelTest.test_session", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn.BenchmarkCNN._build_model", "tensorflow.get_collection", "len", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "benchmark_cnn_test.TfCnnBenchmarksModelTest.get_model_name", "tensorflow.global_variables", "tensorflow.local_variables", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEqual", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEqual", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEqual", "tensorflow.Graph", "tensorflow.logging.debug", "re.match", "v.name.startswith", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertLess", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "v.name.startswith", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "v.name.startswith", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "benchmark_cnn_test.TfCnnBenchmarksModelTest._assert_correct_var_type", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "v.name.startswith", "re.match.group", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "ValueError", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "benchmark_cnn_test.TfCnnBenchmarksModelTest._assert_correct_var_type", "v.name.startswith", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "benchmark_cnn_test.TfCnnBenchmarksModelTest._assert_correct_var_type", "benchmark_cnn_test.TfCnnBenchmarksModelTest.assertEquals", "ValueError"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test._check_has_gpu", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._assert_correct_var_type", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._assert_correct_var_type", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksModelTest._assert_correct_var_type"], ["", "", "def", "_testVariables", "(", "self", ",", "\n", "variable_update", ",", "\n", "summary_verbosity", "=", "0", ",", "\n", "local_parameter_device", "=", "'GPU'", ",", "\n", "staged_vars", "=", "False", ",", "\n", "optimizer", "=", "'momentum'", ",", "\n", "# TODO(b/80125832): Enable nccl in tests", "\n", "# all_reduce_spec='nccl',", "\n", "all_reduce_spec", "=", "''", ",", "\n", "use_fp16", "=", "False", ",", "\n", "fp16_vars", "=", "False", ",", "\n", "fp16_enable_auto_loss_scale", "=", "False", ",", "\n", "fp16_inc_loss_scale_every_n", "=", "10", ")", ":", "\n", "    ", "if", "not", "self", ".", "get_model_name", "(", ")", ":", "\n", "      ", "return", "\n", "", "_check_has_gpu", "(", ")", "\n", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "model", "=", "self", ".", "get_model_name", "(", ")", ",", "\n", "num_batches", "=", "1", ",", "\n", "num_intra_threads", "=", "1", ",", "\n", "num_inter_threads", "=", "12", ",", "\n", "distortions", "=", "False", ",", "\n", "variable_update", "=", "variable_update", ",", "\n", "local_parameter_device", "=", "local_parameter_device", ",", "\n", "num_gpus", "=", "2", ",", "\n", "summary_verbosity", "=", "summary_verbosity", ",", "\n", "staged_vars", "=", "staged_vars", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "all_reduce_spec", "=", "all_reduce_spec", ",", "\n", "compact_gradient_transfer", "=", "False", "if", "all_reduce_spec", "==", "'nccl'", "else", "True", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "fp16_loss_scale", "=", "2.", ",", "\n", "fp16_vars", "=", "fp16_vars", ",", "\n", "fp16_enable_auto_loss_scale", "=", "fp16_enable_auto_loss_scale", ",", "\n", "fp16_inc_loss_scale_every_n", "=", "fp16_inc_loss_scale_every_n", ",", "\n", ")", "\n", "\n", "# Test building models using multiple GPUs, but don't", "\n", "# run them.", "\n", "with", "self", ".", "test_session", "(", "graph", "=", "tf", ".", "Graph", "(", ")", ")", ":", "\n", "      ", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "bench", ".", "_build_model", "(", ")", "\n", "\n", "# Rough validation of variable type and placement, depending on mode.", "\n", "all_vars", "=", "tf", ".", "global_variables", "(", ")", "+", "tf", ".", "local_variables", "(", ")", "\n", "if", "params", ".", "variable_update", "==", "'parameter_server'", ":", "\n", "        ", "for", "v", "in", "all_vars", ":", "\n", "          ", "tf", ".", "logging", ".", "debug", "(", "'var: %s'", "%", "v", ".", "name", ")", "\n", "match", "=", "re", ".", "match", "(", "r'tower_(\\d+)/v/gpu_cached_images:0'", ",", "v", ".", "name", ")", "\n", "if", "match", ":", "\n", "            ", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "'/device:GPU:%s'", "%", "match", ".", "group", "(", "1", ")", ")", "\n", "", "elif", "v", ".", "name", ".", "startswith", "(", "'v/'", ")", ":", "\n", "            ", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "\n", "'/device:%s:0'", "%", "local_parameter_device", ")", "\n", "self", ".", "_assert_correct_var_type", "(", "v", ",", "params", ")", "\n", "", "elif", "v", ".", "name", "in", "(", "'input_processing/images:0'", ",", "\n", "'input_processing/labels:0'", ",", "'init_learning_rate:0'", ",", "\n", "'global_step:0'", ",", "'loss_scale:0'", ",", "\n", "'loss_scale_normal_steps:0'", ")", ":", "\n", "            ", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "'/device:CPU:0'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected variable %s'", "%", "v", ".", "name", ")", "\n", "", "", "", "else", ":", "\n", "        ", "v0_count", "=", "0", "\n", "v1_count", "=", "0", "\n", "for", "v", "in", "all_vars", ":", "\n", "          ", "if", "v", ".", "name", ".", "startswith", "(", "'tower_0/v0/'", ")", ":", "\n", "            ", "self", ".", "assertEquals", "(", "v", ".", "name", ",", "'tower_0/v0/gpu_cached_images:0'", ")", "\n", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "'/device:GPU:0'", ")", "\n", "", "elif", "v", ".", "name", ".", "startswith", "(", "'tower_1/v1/'", ")", ":", "\n", "            ", "self", ".", "assertEquals", "(", "v", ".", "name", ",", "'tower_1/v1/gpu_cached_images:0'", ")", "\n", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "'/device:GPU:1'", ")", "\n", "", "elif", "v", ".", "name", ".", "startswith", "(", "'v0/'", ")", ":", "\n", "            ", "v0_count", "+=", "1", "\n", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "'/device:GPU:0'", ")", "\n", "self", ".", "_assert_correct_var_type", "(", "v", ",", "params", ")", "\n", "", "elif", "v", ".", "name", ".", "startswith", "(", "'v1/'", ")", ":", "\n", "            ", "v1_count", "+=", "1", "\n", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "'/device:GPU:1'", ")", "\n", "self", ".", "_assert_correct_var_type", "(", "v", ",", "params", ")", "\n", "", "elif", "v", ".", "name", "in", "(", "'input_processing/images:0'", ",", "\n", "'input_processing/labels:0'", ",", "'init_learning_rate:0'", ",", "\n", "'global_step:0'", ",", "'loss_scale:0'", ",", "\n", "'loss_scale_normal_steps:0'", ")", ":", "\n", "            ", "self", ".", "assertEquals", "(", "v", ".", "device", ",", "'/device:CPU:0'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected variable %s'", "%", "v", ".", "name", ")", "\n", "", "", "self", ".", "assertEquals", "(", "v0_count", ",", "v1_count", ")", "\n", "\n", "# Validate summary ops in the model depending on verbosity level", "\n", "", "summary_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ")", "\n", "num_summary_ops", "=", "len", "(", "summary_ops", ")", "\n", "self", ".", "assertEquals", "(", "num_summary_ops", ">", "0", ",", "summary_verbosity", ">", "0", ")", "\n", "if", "summary_verbosity", ">", "0", ":", "\n", "        ", "has_affine_histogram", "=", "False", "\n", "has_gradient_histogram", "=", "False", "\n", "has_log_gradients_histogram", "=", "False", "\n", "for", "op", "in", "summary_ops", ":", "\n", "          ", "if", "'/gradients'", "in", "op", ".", "name", ":", "\n", "            ", "has_gradient_histogram", "=", "True", "\n", "", "elif", "'/affine'", "in", "op", ".", "name", ":", "\n", "            ", "has_affine_histogram", "=", "True", "\n", "", "elif", "'log_gradients'", "in", "op", ".", "name", ":", "\n", "            ", "has_log_gradients_histogram", "=", "True", "\n", "", "", "self", ".", "assertEqual", "(", "summary_verbosity", ">=", "3", ",", "has_affine_histogram", ")", "\n", "self", ".", "assertEqual", "(", "summary_verbosity", ">=", "3", ",", "has_gradient_histogram", ")", "\n", "self", ".", "assertEqual", "(", "summary_verbosity", ">=", "2", ",", "has_log_gradients_histogram", ")", "\n", "if", "summary_verbosity", "==", "1", ":", "\n", "          ", "self", ".", "assertLess", "(", "num_summary_ops", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TrivialModelTest.get_model_name": [[323, 325], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'trivial'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestVgg1Model.get_model_name": [[329, 331], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'vgg11'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestVgg19Model.get_model_name": [[335, 337], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'vgg19'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestLenet5Model.get_model_name": [[341, 343], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'lenet'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestGooglenetModel.get_model_name": [[347, 349], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'googlenet'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestOverfeatModel.get_model_name": [[353, 355], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'overfeat'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestAlexnetModel.get_model_name": [[359, 361], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'alexnet'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestAlexnetModel.extended_tests": [[362, 364], ["None"], "methods", ["None"], ["", "def", "extended_tests", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestTrivialModel.get_model_name": [[368, 370], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'trivial'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestInceptionv3Model.get_model_name": [[374, 376], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'inception3'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestInceptionv3Model.extended_tests": [[377, 379], ["None"], "methods", ["None"], ["", "def", "extended_tests", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestInceptionv4Model.get_model_name": [[383, 385], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'inception4'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet50Model.get_model_name": [[389, 391], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'resnet50'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet50Model.model_save_load_test": [[392, 394], ["None"], "methods", ["None"], ["", "def", "model_save_load_test", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet101Model.get_model_name": [[398, 400], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'resnet101'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152Model.get_model_name": [[404, 406], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'resnet152'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet50V2Model.get_model_name": [[410, 412], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'resnet50_v2'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet101V2Model.get_model_name": [[416, 418], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'resnet101_v2'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TestResnet152V2Model.get_model_name": [[422, 424], ["None"], "methods", ["None"], ["  ", "def", "get_model_name", "(", "self", ")", ":", "\n", "    ", "return", "'resnet152_v2'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.setUp": [[429, 433], ["super().setUp", "benchmark_cnn_test._check_has_gpu", "benchmark_cnn.setup", "benchmark_cnn.make_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.setUp", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test._check_has_gpu", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.setup", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "TfCnnBenchmarksTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "_check_has_gpu", "(", ")", "\n", "benchmark_cnn", ".", "setup", "(", "benchmark_cnn", ".", "make_params", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn": [[434, 439], ["test_util.print_and_add_to_list", "benchmark_cnn.BenchmarkCNN().run", "benchmark_cnn.BenchmarkCNN"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.print_and_add_to_list", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "_run_benchmark_cnn", "(", "self", ",", "params", ")", ":", "\n", "    ", "logs", "=", "[", "]", "\n", "benchmark_cnn", ".", "log_fn", "=", "test_util", ".", "print_and_add_to_list", "(", "logs", ")", "\n", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", ".", "run", "(", ")", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_fake_images": [[440, 453], ["test_util.print_and_add_to_list", "benchmark_cnn.BenchmarkCNN", "preprocessing.TestImagePreprocessor", "benchmark_cnn.BenchmarkCNN.image_preprocessor.set_fake_data", "benchmark_cnn.BenchmarkCNN.run", "benchmark_cnn.get_data_type"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.print_and_add_to_list", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.set_fake_data", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_data_type"], ["", "def", "_run_benchmark_cnn_with_fake_images", "(", "self", ",", "params", ",", "images", ",", "labels", ")", ":", "\n", "    ", "logs", "=", "[", "]", "\n", "benchmark_cnn", ".", "log_fn", "=", "test_util", ".", "print_and_add_to_list", "(", "logs", ")", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "bench", ".", "image_preprocessor", "=", "preprocessing", ".", "TestImagePreprocessor", "(", "\n", "227", ",", "227", ",", "params", ".", "batch_size", "*", "params", ".", "num_gpus", ",", "params", ".", "num_gpus", ",", "\n", "benchmark_cnn", ".", "get_data_type", "(", "params", ")", ")", "\n", "bench", ".", "dataset", ".", "_queue_runner_required", "=", "True", "\n", "bench", ".", "image_preprocessor", ".", "set_fake_data", "(", "images", ",", "labels", ")", "\n", "bench", ".", "image_preprocessor", ".", "expected_subset", "=", "(", "'validation'", "\n", "if", "params", ".", "eval", "else", "'train'", ")", "\n", "bench", ".", "run", "(", ")", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_black_and_white_images": [[454, 474], ["numpy.zeros", "numpy.array", "benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_fake_images"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_fake_images"], ["", "def", "_run_benchmark_cnn_with_black_and_white_images", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Runs BenchmarkCNN with black and white images.\n\n    A BenchmarkCNN is created and run with black and white images as input. Half\n    the images are black (i.e., filled with 0s) and half are white (i.e., filled\n    with 255s).\n\n    Args:\n      params: Params for BenchmarkCNN.\n\n    Returns:\n      A list of lines from the output of BenchmarkCNN.\n    \"\"\"", "\n", "effective_batch_size", "=", "params", ".", "batch_size", "*", "params", ".", "num_gpus", "\n", "half_batch_size", "=", "effective_batch_size", "//", "2", "\n", "images", "=", "np", ".", "zeros", "(", "(", "effective_batch_size", ",", "227", ",", "227", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "images", "[", "half_batch_size", ":", ",", ":", ",", ":", ",", ":", "]", "=", "255", "\n", "labels", "=", "np", ".", "array", "(", "[", "0", "]", "*", "half_batch_size", "+", "[", "1", "]", "*", "half_batch_size", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "self", ".", "_run_benchmark_cnn_with_fake_images", "(", "params", ",", "images", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local": [[475, 502], ["test_util.train_and_eval", "benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_black_and_white_images", "benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.train_and_eval", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_black_and_white_images", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn"], ["", "def", "_train_and_eval_local", "(", "self", ",", "\n", "params", ",", "\n", "check_output_values", "=", "False", ",", "\n", "max_final_loss", "=", "10.", ",", "\n", "skip", "=", "None", ",", "\n", "use_test_preprocessor", "=", "True", ")", ":", "\n", "# TODO(reedwm): check_output_values should default to True and be enabled", "\n", "# on every test. Currently, if check_output_values=True and the calls to", "\n", "# tf.set_random_seed(...) and np.seed(...) are passed certain seed values in", "\n", "# benchmark_cnn.py, then most tests will fail. This indicates the tests", "\n", "# are brittle and could fail with small changes when", "\n", "# check_output_values=True, so check_output_values defaults to False for", "\n", "# now.", "\n", "\n", "    ", "def", "run_fn", "(", "run_type", ",", "inner_params", ")", ":", "\n", "      ", "del", "run_type", "\n", "if", "use_test_preprocessor", ":", "\n", "        ", "return", "[", "\n", "self", ".", "_run_benchmark_cnn_with_black_and_white_images", "(", "inner_params", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "self", ".", "_run_benchmark_cnn", "(", "inner_params", ")", "]", "\n", "\n", "", "", "return", "test_util", ".", "train_and_eval", "(", "self", ",", "run_fn", ",", "params", ",", "\n", "check_output_values", "=", "check_output_values", ",", "\n", "max_final_loss", "=", "max_final_loss", ",", "\n", "skip", "=", "skip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testAlexnet": [[503, 507], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testAlexnet", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testAlexnet'", ")", ".", "_replace", "(", "\n", "num_batches", "=", "30", ",", "init_learning_rate", "=", "0.01", ",", "model", "=", "'alexnet'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testNoPrintAccuracy": [[508, 512], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testNoPrintAccuracy", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testNoPrintAccuracy'", ")", ".", "_replace", "(", "\n", "print_training_accuracy", "=", "False", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testLowAccuracy": [[513, 530], ["test_util.get_params()._replace", "numpy.zeros", "numpy.arange", "benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_fake_images", "test_util.get_training_outputs_from_logs", "benchmark_cnn_test.TfCnnBenchmarksTest.assertLessEqual", "benchmark_cnn_test.TfCnnBenchmarksTest.assertLessEqual", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_fake_images", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_training_outputs_from_logs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testLowAccuracy", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testLowAccuracy'", ")", ".", "_replace", "(", "\n", "print_training_accuracy", "=", "True", ",", "batch_size", "=", "5", ",", "num_batches", "=", "10", ")", "\n", "# We force low accuracy by having each batch containing 10 identical images,", "\n", "# each with a different label. This guarantees a top-1 accuracy of exactly", "\n", "# 0.1 and a top-5 accuracy of exactly 0.5.", "\n", "images", "=", "np", ".", "zeros", "(", "(", "10", ",", "227", ",", "227", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "np", ".", "arange", "(", "10", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "logs", "=", "self", ".", "_run_benchmark_cnn_with_fake_images", "(", "params", ",", "images", ",", "labels", ")", "\n", "training_outputs", "=", "test_util", ".", "get_training_outputs_from_logs", "(", "\n", "logs", ",", "params", ".", "print_training_accuracy", ")", "\n", "last_output", "=", "training_outputs", "[", "-", "1", "]", "\n", "# TODO(reedwm): These should be assertEqual but for some reason,", "\n", "# occasionally the accuracies are lower (Running this test 500 times, these", "\n", "# asserts failed twice). Investigate this problem.", "\n", "self", ".", "assertLessEqual", "(", "last_output", ".", "top_1_accuracy", ",", "0.1", ")", "\n", "self", ".", "assertLessEqual", "(", "last_output", ".", "top_5_accuracy", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testParameterServer": [[531, 534], ["test_util.get_params", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local"], ["", "def", "testParameterServer", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testParameterServer'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testParameterServerStaged": [[535, 539], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testParameterServerStaged", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testParameterServerStaged'", ")", ".", "_replace", "(", "\n", "staged_vars", "=", "True", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testReplicated": [[540, 544], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testReplicated", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testReplicated'", ")", ".", "_replace", "(", "\n", "variable_update", "=", "'replicated'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testIndependent": [[545, 549], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testIndependent", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testIndependent'", ")", ".", "_replace", "(", "\n", "variable_update", "=", "'independent'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testForwardOnly": [[550, 554], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testForwardOnly", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testForwardOnly'", ")", ".", "_replace", "(", "forward_only", "=", "True", ")", "\n", "# Evaluation is not supported with --forward_only, so we set skip='eval'.", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "skip", "=", "'eval'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testForwardOnlyAndFreeze": [[555, 560], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testForwardOnlyAndFreeze", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testForwardOnlyAndFreeze'", ")", ".", "_replace", "(", "\n", "forward_only", "=", "True", ",", "freeze_when_forward_only", "=", "True", ",", "train_dir", "=", "None", ")", "\n", "# Training is not supported with --freeze_when_forward_only.", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "skip", "=", "'eval_and_train_from_checkpoint'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testNoDistortions": [[561, 565], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testNoDistortions", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testNoDistortions'", ")", ".", "_replace", "(", "\n", "distortions", "=", "False", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testCpuAsLocalParamDevice": [[566, 570], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testCpuAsLocalParamDevice", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testCpuAsLocalParamDevice'", ")", ".", "_replace", "(", "\n", "local_parameter_device", "=", "'cpu'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testNHWC": [[571, 574], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testNHWC", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testNHWC'", ")", ".", "_replace", "(", "data_format", "=", "'NHWC'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testCpuAsDevice": [[575, 579], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testCpuAsDevice", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testCpuAsDevice'", ")", ".", "_replace", "(", "\n", "device", "=", "'cpu'", ",", "data_format", "=", "'NHWC'", ")", "# NHWC required when --device=cpu", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testMomentumParameterServer": [[580, 584], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testMomentumParameterServer", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testMomentumParameterServer'", ")", ".", "_replace", "(", "\n", "optimizer", "=", "'momentum'", ",", "momentum", "=", "0.8", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testRmspropReplicated": [[585, 594], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testRmspropReplicated", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testRmspropReplicated'", ")", ".", "_replace", "(", "\n", "variable_update", "=", "'replicated'", ",", "\n", "optimizer", "=", "'rmsprop'", ",", "\n", "rmsprop_decay", "=", "0.8", ",", "\n", "rmsprop_momentum", "=", "0.6", ",", "\n", "rmsprop_epsilon", "=", "0.7", ",", "\n", "init_learning_rate", "=", "0.01", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testBatchGroupSize": [[595, 599], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testBatchGroupSize", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testBatchGroupSize'", ")", ".", "_replace", "(", "\n", "batch_group_size", "=", "4", ",", "num_batches", "=", "100", ",", "num_warmup_batches", "=", "5", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testGradientClip": [[600, 604], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testGradientClip", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testGradientClip'", ")", ".", "_replace", "(", "\n", "gradient_clip", "=", "100.0", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testWeightDecay": [[605, 609], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testWeightDecay", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testWeightDecay'", ")", ".", "_replace", "(", "\n", "weight_decay", "=", "0.0001", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testNoLayers": [[610, 613], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testNoLayers", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testNoLayers'", ")", ".", "_replace", "(", "use_tf_layers", "=", "False", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testFp16WithFp32Vars": [[614, 618], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testFp16WithFp32Vars", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testFp16WithFp32Vars'", ")", ".", "_replace", "(", "\n", "use_fp16", "=", "True", ",", "fp16_vars", "=", "False", ",", "fp16_loss_scale", "=", "1.", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testFp16WithFp16Vars": [[619, 623], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testFp16WithFp16Vars", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testFp16WithFp16Vars'", ")", ".", "_replace", "(", "\n", "use_fp16", "=", "True", ",", "fp16_vars", "=", "True", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testGradientRepacking": [[624, 631], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testGradientRepacking", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testGradientRepacking1'", ")", ".", "_replace", "(", "\n", "gradient_repacking", "=", "2", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "skip", "=", "'eval_and_train_from_checkpoint'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "'testGradientRepacking2'", ")", ".", "_replace", "(", "\n", "gradient_repacking", "=", "2", ",", "use_fp16", "=", "True", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "skip", "=", "'eval_and_train_from_checkpoint'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testTraceFileChromeTraceFormat": [[632, 639], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "benchmark_cnn_test.TfCnnBenchmarksTest.assertGreater", "benchmark_cnn_test.TfCnnBenchmarksTest.get_temp_dir", "test_util.get_params", "os.stat"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_temp_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testTraceFileChromeTraceFormat", "(", "self", ")", ":", "\n", "    ", "trace_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "get_temp_dir", "(", ")", ",", "\n", "'testTraceFileChromeTraceFormat_tracefile'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "'testTraceFileChromeTraceFormat'", ")", ".", "_replace", "(", "\n", "trace_file", "=", "trace_file", ",", "use_chrome_trace_format", "=", "True", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "self", ".", "assertGreater", "(", "os", ".", "stat", "(", "trace_file", ")", ".", "st_size", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testTraceFileStepStatsProto": [[640, 652], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "benchmark_cnn_test.TfCnnBenchmarksTest.assertGreater", "benchmark_cnn_test.TfCnnBenchmarksTest.get_temp_dir", "open", "tensorflow.core.framework.step_stats_pb2.StepStats", "f.read", "google.protobuf.text_format.Merge", "test_util.get_params", "os.stat"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_temp_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testTraceFileStepStatsProto", "(", "self", ")", ":", "\n", "    ", "trace_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "get_temp_dir", "(", ")", ",", "\n", "'testTraceFileStepStatsProto_tracefile'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "'testTraceFileStepStatsProto'", ")", ".", "_replace", "(", "\n", "trace_file", "=", "trace_file", ",", "use_chrome_trace_format", "=", "False", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "self", ".", "assertGreater", "(", "os", ".", "stat", "(", "trace_file", ")", ".", "st_size", ",", "0", ")", "\n", "with", "open", "(", "trace_file", ")", "as", "f", ":", "\n", "      ", "step_stats", "=", "step_stats_pb2", ".", "StepStats", "(", ")", "\n", "# The following statement should not raise an exception.", "\n", "contents", "=", "f", ".", "read", "(", ")", "\n", "text_format", ".", "Merge", "(", "contents", ",", "step_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testTfprofFile": [[653, 663], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "benchmark_cnn_test.TfCnnBenchmarksTest.assertGreater", "benchmark_cnn_test.TfCnnBenchmarksTest.get_temp_dir", "open", "tensorflow.core.profiler.tfprof_log_pb2.ProfileProto", "tensorflow.core.profiler.tfprof_log_pb2.ProfileProto.ParseFromString", "test_util.get_params", "os.stat", "f.read"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_temp_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "", "def", "testTfprofFile", "(", "self", ")", ":", "\n", "    ", "tfprof_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "get_temp_dir", "(", ")", ",", "'testTfprofFile_tfproffile'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "'testTfprofFile'", ")", ".", "_replace", "(", "\n", "tfprof_file", "=", "tfprof_file", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "skip", "=", "'eval_and_train_from_checkpoint'", ")", "\n", "self", ".", "assertGreater", "(", "os", ".", "stat", "(", "tfprof_file", ")", ".", "st_size", ",", "0", ")", "\n", "with", "open", "(", "tfprof_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "profile_proto", "=", "tfprof_log_pb2", ".", "ProfileProto", "(", ")", "\n", "# The following statement should not raise an exception.", "\n", "profile_proto", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testMoveTrainDir": [[664, 671], ["test_util.get_params", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "os.rename", "params._replace._replace._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_black_and_white_images"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._run_benchmark_cnn_with_black_and_white_images"], ["", "", "def", "testMoveTrainDir", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testMoveTrainDir'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "new_train_dir", "=", "params", ".", "train_dir", "+", "'_moved'", "\n", "os", ".", "rename", "(", "params", ".", "train_dir", ",", "new_train_dir", ")", "\n", "params", "=", "params", ".", "_replace", "(", "train_dir", "=", "new_train_dir", ",", "eval", "=", "True", ")", "\n", "self", ".", "_run_benchmark_cnn_with_black_and_white_images", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testImagenetPreprocessor": [[672, 678], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "platforms.util.get_test_data_dir", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testImagenetPreprocessor", "(", "self", ")", ":", "\n", "    ", "imagenet_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "\n", "'fake_tf_record_data'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "'testImagenetPreprocessor'", ")", ".", "_replace", "(", "\n", "data_dir", "=", "imagenet_dir", ",", "data_name", "=", "'imagenet'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "use_test_preprocessor", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testImagenetPreprocessorNoDistortions": [[679, 686], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "platforms.util.get_test_data_dir", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testImagenetPreprocessorNoDistortions", "(", "self", ")", ":", "\n", "    ", "imagenet_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "\n", "'fake_tf_record_data'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "\n", "'testImagenetPreprocessorNoDistortions'", ")", ".", "_replace", "(", "\n", "data_dir", "=", "imagenet_dir", ",", "data_name", "=", "'imagenet'", ",", "distortions", "=", "False", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "use_test_preprocessor", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testImagenetPreprocessorVerboseSummary": [[687, 695], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "platforms.util.get_test_data_dir", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testImagenetPreprocessorVerboseSummary", "(", "self", ")", ":", "\n", "    ", "imagenet_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "\n", "'fake_tf_record_data'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "\n", "'testImagenetPreprocessorVerboseSummary'", ")", ".", "_replace", "(", "\n", "data_dir", "=", "imagenet_dir", ",", "data_name", "=", "'imagenet'", ",", "distortions", "=", "False", ",", "\n", "summary_verbosity", "=", "2", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "use_test_preprocessor", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testOfficialImagenetPreprocessorFp16": [[696, 706], ["os.path.join", "test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "platforms.util.get_test_data_dir", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testOfficialImagenetPreprocessorFp16", "(", "self", ")", ":", "\n", "    ", "imagenet_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "\n", "'fake_tf_record_data'", ")", "\n", "params", "=", "test_util", ".", "get_params", "(", "\n", "'testOfficialImagenetPreprocessorFp16'", ")", ".", "_replace", "(", "\n", "data_dir", "=", "imagenet_dir", ",", "\n", "data_name", "=", "'imagenet'", ",", "\n", "input_preprocessor", "=", "'official_models_imagenet'", ",", "\n", "use_fp16", "=", "True", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ",", "use_test_preprocessor", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testCifar10SyntheticData": [[707, 711], ["test_util.get_params()._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "test_util.get_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._train_and_eval_local", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_params"], ["", "def", "testCifar10SyntheticData", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_params", "(", "'testCifar10SyntheticData'", ")", ".", "_replace", "(", "\n", "data_name", "=", "'cifar10'", ")", "\n", "self", ".", "_train_and_eval_local", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testShiftRatio": [[712, 727], ["test_util.monkey_patch_base_cluster_manager", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "params._replace._replace._replace", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "os.path.join", "platforms.util.get_test_data_dir", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn.BenchmarkCNN"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.monkey_patch_base_cluster_manager", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir"], ["", "def", "testShiftRatio", "(", "self", ")", ":", "\n", "    ", "test_util", ".", "monkey_patch_base_cluster_manager", "(", ")", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "data_name", "=", "'imagenet'", ",", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "\n", "'fake_tf_record_data'", ")", ",", "\n", "job_name", "=", "'worker'", ",", "\n", "worker_hosts", "=", "'w1,w2,w3,w4'", ",", "\n", "ps_hosts", "=", "'p1'", ",", "\n", "task_index", "=", "0", ")", "\n", "self", ".", "assertEqual", "(", "\n", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", ".", "image_preprocessor", ".", "shift_ratio", ",", "0.0", ")", "\n", "params", "=", "params", ".", "_replace", "(", "task_index", "=", "3", ")", "\n", "self", ".", "assertEqual", "(", "\n", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", ".", "image_preprocessor", ".", "shift_ratio", ",", "0.75", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testDistributedReplicatedSavableVars": [[728, 759], ["test_util.monkey_patch_base_cluster_manager", "benchmark_cnn.make_params", "benchmark_cnn.BenchmarkCNN", "tensorflow.Graph().as_default", "benchmark_cnn.BenchmarkCNN._build_model", "benchmark_cnn.BenchmarkCNN.variable_mgr.savable_variables", "tensorflow.global_variables", "tensorflow.local_variables", "os.path.join", "benchmark_cnn.BenchmarkCNN.variable_mgr._strip_port", "benchmark_cnn.BenchmarkCNN.variable_mgr._strip_port.startswith", "benchmark_cnn_test.TfCnnBenchmarksTest.assertIn", "benchmark_cnn_test.TfCnnBenchmarksTest.assertIn", "v.name.startswith", "platforms.util.get_test_data_dir", "tensorflow.Graph", "v.name.startswith", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "tensorflow.global_variables", "benchmark_cnn.BenchmarkCNN.variable_mgr._strip_port", "benchmark_cnn_test.TfCnnBenchmarksTest.assertIn", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.monkey_patch_base_cluster_manager", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.savable_variables", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port", "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port"], ["", "def", "testDistributedReplicatedSavableVars", "(", "self", ")", ":", "\n", "    ", "test_util", ".", "monkey_patch_base_cluster_manager", "(", ")", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "variable_update", "=", "'distributed_replicated'", ",", "\n", "model", "=", "'inception4'", ",", "\n", "data_name", "=", "'imagenet'", ",", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "\n", "'fake_tf_record_data'", ")", ",", "\n", "job_name", "=", "'worker'", ",", "\n", "worker_hosts", "=", "'w1,w2,w3,w4'", ",", "\n", "ps_hosts", "=", "'p1'", ")", "\n", "\n", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "      ", "bench", ".", "_build_model", "(", ")", "\n", "savable_vars", "=", "bench", ".", "variable_mgr", ".", "savable_variables", "(", ")", "\n", "# Assert all global variables are in savable_vars", "\n", "for", "v", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "        ", "if", "not", "v", ".", "name", ".", "startswith", "(", "\n", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/v0'", ")", ":", "\n", "          ", "self", ".", "assertEqual", "(", "v", ".", "name", ",", "'global_step:0'", ")", "\n", "", "name", "=", "bench", ".", "variable_mgr", ".", "_strip_port", "(", "v", ".", "name", ")", "\n", "if", "name", ".", "startswith", "(", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", ")", ":", "\n", "          ", "name", "=", "name", "[", "len", "(", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/'", ")", ":", "]", "\n", "", "self", ".", "assertIn", "(", "name", ",", "savable_vars", ")", "\n", "self", ".", "assertIn", "(", "savable_vars", "[", "name", "]", ",", "tf", ".", "global_variables", "(", ")", ")", "\n", "# Assert all local variables on the first tower are in savable_vars", "\n", "", "for", "v", "in", "tf", ".", "local_variables", "(", ")", ":", "\n", "        ", "if", "v", ".", "name", ".", "startswith", "(", "'v0/'", ")", ":", "\n", "          ", "name", "=", "bench", ".", "variable_mgr", ".", "_strip_port", "(", "v", ".", "name", ")", "\n", "self", ".", "assertIn", "(", "name", ",", "savable_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval": [[760, 772], ["tensorflow.fill", "benchmark_cnn.make_params", "preprocessing.eval_image", "benchmark_cnn_test.TfCnnBenchmarksTest.assertAllEqual", "tensorflow.constant", "benchmark_cnn_test.TfCnnBenchmarksTest.test_session", "sess.run", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.eval_image", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "", "", "def", "_test_preprocessing_eval", "(", "self", ",", "image_height", ",", "image_width", ",", "output_height", ",", "\n", "output_width", ")", ":", "\n", "    ", "image", "=", "tf", ".", "fill", "(", "(", "image_height", ",", "image_width", ",", "3", ")", ",", "\n", "tf", ".", "constant", "(", "128", ",", "dtype", "=", "tf", ".", "uint8", ")", ")", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", ")", "\n", "new_image", "=", "preprocessing", ".", "eval_image", "(", "image", ",", "output_height", ",", "output_width", ",", "0", ",", "\n", "'bilinear'", ",", "params", ".", "summary_verbosity", ")", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "new_image_value", "=", "sess", ".", "run", "(", "new_image", ")", "\n", "", "self", ".", "assertAllEqual", "(", "new_image_value", ",", "\n", "np", ".", "full", "(", "(", "output_height", ",", "output_width", ",", "3", ")", ",", "128", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testPreprocessingEval": [[773, 779], ["benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_eval"], ["", "def", "testPreprocessingEval", "(", "self", ")", ":", "\n", "    ", "self", ".", "_test_preprocessing_eval", "(", "10", ",", "10", ",", "4", ",", "4", ")", "\n", "self", ".", "_test_preprocessing_eval", "(", "4", ",", "4", ",", "10", ",", "10", ")", "\n", "self", ".", "_test_preprocessing_eval", "(", "1", ",", "100", ",", "100", ",", "1", ")", "\n", "self", ".", "_test_preprocessing_eval", "(", "100", ",", "1", ",", "1", ",", "100", ")", "\n", "self", ".", "_test_preprocessing_eval", "(", "1", ",", "100", ",", "1", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_traing": [[780, 805], ["preprocessing.train_image", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "benchmark_cnn_test.TfCnnBenchmarksTest.assertAllClose", "benchmark_cnn_test.TfCnnBenchmarksTest.test_session", "sess.run", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.train_image", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "def", "_test_preprocessing_traing", "(", "self", ",", "image_buf", ",", "image_color", ",", "\n", "output_height", ",", "output_width", ",", "bbox", ",", "\n", "batch_position", ",", "resize_method", ",", "distortions", ",", "\n", "summary_verbosity", ",", "fuse_decode_and_crop", ")", ":", "\n", "    ", "new_image", "=", "preprocessing", ".", "train_image", "(", "\n", "image_buf", ",", "\n", "output_height", ",", "\n", "output_width", ",", "\n", "bbox", ",", "\n", "batch_position", ",", "\n", "resize_method", ",", "\n", "distortions", ",", "\n", "summary_verbosity", "=", "summary_verbosity", ",", "\n", "fuse_decode_and_crop", "=", "fuse_decode_and_crop", ")", "\n", "self", ".", "assertEqual", "(", "new_image", ".", "shape", ",", "[", "output_height", ",", "output_width", ",", "3", "]", ")", "\n", "with", "self", ".", "test_session", "(", "use_gpu", "=", "True", ")", "as", "sess", ":", "\n", "      ", "new_image_value", "=", "sess", ".", "run", "(", "new_image", ")", "\n", "", "self", ".", "assertAllClose", "(", "\n", "new_image_value", ",", "\n", "np", ".", "full", "(", "\n", "[", "output_height", ",", "output_width", ",", "3", "]", ",", "\n", "image_color", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "atol", "=", "50.", ",", "\n", "rtol", "=", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testPreprocessingTrain": [[806, 830], ["os.path.join", "os.path.join", "os.path.join", "tensorflow.zeros", "platforms.util.get_test_data_dir", "open", "f.read", "open", "f.read", "benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_traing"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_preprocessing_traing"], ["", "def", "testPreprocessingTrain", "(", "self", ")", ":", "\n", "    ", "test_data_dir", "=", "os", ".", "path", ".", "join", "(", "platforms_util", ".", "get_test_data_dir", "(", ")", ",", "'images'", ")", "\n", "black_file", "=", "os", ".", "path", ".", "join", "(", "test_data_dir", ",", "'black_image.jpg'", ")", "\n", "with", "open", "(", "black_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "black_jpg_buffer", "=", "f", ".", "read", "(", ")", "\n", "", "white_file", "=", "os", ".", "path", ".", "join", "(", "test_data_dir", ",", "'white_image.jpg'", ")", "\n", "with", "open", "(", "white_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "white_jpg_buffer", "=", "f", ".", "read", "(", ")", "\n", "", "bbox", "=", "tf", ".", "zeros", "(", "(", "1", ",", "0", ",", "4", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "batch_position", "=", "0", "\n", "# Each size config is (output_height, output_width, resize_method)", "\n", "size_configs", "=", "[", "(", "100", ",", "100", ",", "'round_robin'", ")", ",", "(", "150", ",", "10", ",", "'bilinear'", ")", ",", "\n", "(", "10", ",", "150", ",", "'nearest'", ")", "]", "\n", "# Each image config is (image_buf, image_color)", "\n", "image_configs", "=", "[", "(", "white_jpg_buffer", ",", "255", ")", ",", "(", "black_jpg_buffer", ",", "0", ")", "]", "\n", "for", "(", "image_buf", ",", "image_color", ")", "in", "image_configs", ":", "\n", "      ", "for", "output_height", ",", "output_width", ",", "resize_method", "in", "size_configs", ":", "\n", "        ", "for", "distortions", "in", "[", "True", ",", "False", "]", ":", "\n", "          ", "for", "summary_verbosity", "in", "[", "0", ",", "2", "]", ":", "\n", "            ", "for", "fuse_decode_and_crop", "in", "[", "True", ",", "False", "]", ":", "\n", "              ", "self", ".", "_test_preprocessing_traing", "(", "\n", "image_buf", ",", "image_color", ",", "output_height", ",", "output_width", ",", "bbox", ",", "\n", "batch_position", ",", "resize_method", ",", "distortions", ",", "summary_verbosity", ",", "\n", "fuse_decode_and_crop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate": [[831, 843], ["benchmark_cnn.BenchmarkCNN", "tensorflow.Graph().as_default", "benchmark_cnn.BenchmarkCNN._build_model", "graph.get_tensor_by_name", "graph.get_tensor_by_name", "benchmark_cnn_test.TfCnnBenchmarksTest.test_session", "global_step_to_expected_learning_rate.items", "tensorflow.Graph", "benchmark_cnn_test.TfCnnBenchmarksTest.assertAlmostEqual", "sess.run"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["", "", "", "", "", "", "def", "_test_learning_rate", "(", "self", ",", "params", ",", "global_step_to_expected_learning_rate", ")", ":", "\n", "    ", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "      ", "bench", ".", "_build_model", "(", ")", "\n", "global_step", "=", "graph", ".", "get_tensor_by_name", "(", "'global_step:0'", ")", "\n", "learning_rate", "=", "graph", ".", "get_tensor_by_name", "(", "'learning_rate_tensor:0'", ")", "\n", "with", "self", ".", "test_session", "(", "graph", "=", "graph", ",", "use_gpu", "=", "True", ")", "as", "sess", ":", "\n", "        ", "items", "=", "global_step_to_expected_learning_rate", ".", "items", "(", ")", "\n", "for", "global_step_val", ",", "expected_learning_rate", "in", "items", ":", "\n", "          ", "self", ".", "assertAlmostEqual", "(", "sess", ".", "run", "(", "learning_rate", ",", "\n", "{", "global_step", ":", "global_step_val", "}", ")", ",", "\n", "expected_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testLearningRate": [[844, 903], ["benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "benchmark_cnn.make_params._replace", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "tensorflow.Graph().as_default", "benchmark_cnn.BenchmarkCNN()._build_model", "tensorflow.Graph", "benchmark_cnn.BenchmarkCNN"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest._test_learning_rate", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkNMT._build_model"], ["", "", "", "", "def", "testLearningRate", "(", "self", ")", ":", "\n", "    ", "params", "=", "benchmark_cnn", ".", "make_params", "(", "model", "=", "'resnet50'", ",", "batch_size", "=", "256", ")", "\n", "self", ".", "_test_learning_rate", "(", "params", ",", "{", "\n", "0", ":", "0", ",", "\n", "150136", ":", "0.016", ",", "\n", "150137", ":", "0.0016", ",", "\n", "300273", ":", "0.0016", ",", "\n", "300274", ":", "0.00016", ",", "\n", "10000000", ":", "0.0000016", "\n", "}", ")", "\n", "\n", "params", "=", "params", ".", "_replace", "(", "init_learning_rate", "=", "1.", ")", "\n", "self", ".", "_test_learning_rate", "(", "params", ",", "{", "\n", "0", ":", "1.", ",", "\n", "10000000", ":", "1.", "\n", "}", ")", "\n", "\n", "params", "=", "params", ".", "_replace", "(", "init_learning_rate", "=", "1.", ",", "\n", "num_learning_rate_warmup_epochs", "=", "5", ")", "\n", "self", ".", "_test_learning_rate", "(", "params", ",", "{", "\n", "0", ":", "0.", ",", "\n", "12511", ":", "0.5", ",", "\n", "25022", ":", "1.", ",", "\n", "10000000", ":", "1.", "\n", "}", ")", "\n", "\n", "params", "=", "params", ".", "_replace", "(", "\n", "num_learning_rate_warmup_epochs", "=", "0", ",", "\n", "learning_rate_decay_factor", "=", "0.5", ",", "\n", "num_epochs_per_decay", "=", "2", ",", "\n", "minimum_learning_rate", "=", "0.3750", ",", "\n", "batch_size", "=", "32", ")", "\n", "self", ".", "_test_learning_rate", "(", "params", ",", "{", "\n", "0", ":", "1.", ",", "\n", "80071", ":", "1.", ",", "\n", "80072", ":", "0.5", ",", "\n", "160143", ":", "0.5", ",", "\n", "160144", ":", "0.375", ",", "\n", "10000000", ":", "0.375", "\n", "}", ")", "\n", "\n", "params", "=", "params", ".", "_replace", "(", "num_epochs_per_decay", "=", "0.", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "# This will fail because params.learning_rate_decay_factor cannot be", "\n", "# nonzero if params.num_epochs_per_decay is zero.", "\n", "        ", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", ".", "_build_model", "(", ")", "\n", "\n", "", "", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "model", "=", "'trivial'", ",", "\n", "batch_size", "=", "32", ",", "\n", "piecewise_learning_rate_schedule", "=", "'1;3;.1;5;.01'", ")", "\n", "self", ".", "_test_learning_rate", "(", "params", ",", "{", "\n", "0", ":", "1.", ",", "\n", "120108", ":", "1.", ",", "\n", "120109", ":", "0.1", ",", "\n", "200181", ":", "0.1", ",", "\n", "200182", ":", "0.01", ",", "\n", "100000000", ":", "0.01", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testNumBatchesAndEpochs": [[905, 925], ["benchmark_cnn.make_params", "benchmark_cnn.get_num_batches_and_epochs", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "benchmark_cnn_test.TfCnnBenchmarksTest.assertAlmostEqual", "benchmark_cnn.make_params", "benchmark_cnn.get_num_batches_and_epochs", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "benchmark_cnn_test.TfCnnBenchmarksTest.assertAlmostEqual", "benchmark_cnn.make_params", "benchmark_cnn.get_num_batches_and_epochs", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "benchmark_cnn_test.TfCnnBenchmarksTest.assertAlmostEqual", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.make_params", "benchmark_cnn.get_num_batches_and_epochs", "float"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_num_batches_and_epochs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_num_batches_and_epochs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_num_batches_and_epochs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.get_num_batches_and_epochs"], ["", "def", "testNumBatchesAndEpochs", "(", "self", ")", ":", "\n", "    ", "params", "=", "benchmark_cnn", ".", "make_params", "(", ")", "\n", "batches", ",", "epochs", "=", "benchmark_cnn", ".", "get_num_batches_and_epochs", "(", "params", ",", "10", ",", "100", ")", "\n", "self", ".", "assertEqual", "(", "batches", ",", "benchmark_cnn", ".", "_DEFAULT_NUM_BATCHES", ")", "\n", "self", ".", "assertAlmostEqual", "(", "epochs", ",", "\n", "float", "(", "benchmark_cnn", ".", "_DEFAULT_NUM_BATCHES", ")", "/", "10", ")", "\n", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", "num_batches", "=", "21", ")", "\n", "batches", ",", "epochs", "=", "benchmark_cnn", ".", "get_num_batches_and_epochs", "(", "params", ",", "25", ",", "50", ")", "\n", "self", ".", "assertEqual", "(", "batches", ",", "21", ")", "\n", "self", ".", "assertAlmostEqual", "(", "epochs", ",", "10.5", ")", "\n", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", "num_epochs", "=", "3", ")", "\n", "batches", ",", "epochs", "=", "benchmark_cnn", ".", "get_num_batches_and_epochs", "(", "params", ",", "2", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "batches", ",", "4", ")", "\n", "self", ".", "assertAlmostEqual", "(", "epochs", ",", "8.", "/", "3.", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "params", "=", "benchmark_cnn", ".", "make_params", "(", "num_batches", "=", "100", ",", "num_epochs", "=", "100", ")", "\n", "benchmark_cnn", ".", "get_num_batches_and_epochs", "(", "params", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testInvalidFlags": [[926, 968], ["benchmark_cnn.make_params", "benchmark_cnn.make_params", "benchmark_cnn.make_params", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.BenchmarkCNN", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.BenchmarkCNN"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params"], ["", "", "def", "testInvalidFlags", "(", "self", ")", ":", "\n", "    ", "params", "=", "benchmark_cnn", ".", "make_params", "(", "device", "=", "'cpu'", ",", "data_format", "=", "'NCHW'", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "\n", "", "params", "=", "benchmark_cnn", ".", "make_params", "(", "use_fp16", "=", "True", ",", "fp16_vars", "=", "True", ",", "\n", "variable_update", "=", "'replicated'", ",", "\n", "all_reduce_spec", "=", "'nccl'", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "\n", "# Automatic loss scaling is only supported for 'replicated', 'ps',", "\n", "# and 'independent' variable_updates.", "\n", "", "invalid_variable_updates", "=", "[", "\n", "'distributed_replicated'", ",", "'distributed_all_reduce'", "\n", "]", "\n", "for", "variable_update", "in", "invalid_variable_updates", ":", "\n", "      ", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "use_fp16", "=", "True", ",", "\n", "fp16_vars", "=", "True", ",", "\n", "fp16_enable_auto_loss_scale", "=", "True", ",", "\n", "variable_update", "=", "variable_update", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "        ", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "\n", "# Automatic loss scaling is not supported for 'nccl'.", "\n", "", "", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "use_fp16", "=", "True", ",", "\n", "fp16_vars", "=", "True", ",", "\n", "fp16_enable_auto_loss_scale", "=", "True", ",", "\n", "all_reduce_spec", "=", "'nccl'", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "\n", "# Automatic loss scaling is not supported for 'staged_vars'.", "\n", "", "params", "=", "benchmark_cnn", ".", "make_params", "(", "\n", "use_fp16", "=", "True", ",", "\n", "fp16_vars", "=", "True", ",", "\n", "fp16_enable_auto_loss_scale", "=", "True", ",", "\n", "staged_vars", "=", "True", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.TfCnnBenchmarksTest.testMakeParams": [[969, 981], ["benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest.assertEqual", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.make_params", "benchmark_cnn_test.TfCnnBenchmarksTest.assertRaises", "benchmark_cnn.make_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params"], ["", "", "def", "testMakeParams", "(", "self", ")", ":", "\n", "    ", "default_params", "=", "benchmark_cnn", ".", "make_params", "(", ")", "\n", "self", ".", "assertEqual", "(", "default_params", ".", "model", ",", "\n", "flags", ".", "param_specs", "[", "'model'", "]", ".", "default_value", ")", "\n", "params", "=", "benchmark_cnn", ".", "make_params", "(", "model", "=", "'foo'", ")", "\n", "self", ".", "assertEqual", "(", "params", ".", "model", ",", "'foo'", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "benchmark_cnn", ".", "make_params", "(", "job_name", "=", "'foo'", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "benchmark_cnn", ".", "make_params", "(", "gpu_memory_frac_for_testing", "=", "-", "1.", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "benchmark_cnn", ".", "make_params", "(", "gpu_memory_frac_for_testing", "=", "2.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.setUp": [[998, 1002], ["super().setUp", "benchmark_cnn_test._check_has_gpu", "benchmark_cnn.setup", "benchmark_cnn.make_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.setUp", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test._check_has_gpu", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.setup", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params"], ["def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "VariableUpdateTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "_check_has_gpu", "(", ")", "\n", "benchmark_cnn", ".", "setup", "(", "benchmark_cnn", ".", "make_params", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._get_benchmark_cnn_losses": [[1003, 1021], ["test_util.TestCNNModel", "test_util.get_training_outputs_from_logs", "test_util.monkey_patch", "benchmark_cnn.BenchmarkCNN", "numpy.array", "benchmark_cnn.BenchmarkCNN.image_preprocessor.set_fake_data", "benchmark_cnn.BenchmarkCNN.run", "test_util.print_and_add_to_list", "test_util.TestDataSet"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_training_outputs_from_logs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.monkey_patch", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.preprocessing.TestImagePreprocessor.set_fake_data", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.print_and_add_to_list"], ["", "def", "_get_benchmark_cnn_losses", "(", "self", ",", "inputs", ",", "params", ")", ":", "\n", "    ", "\"\"\"Returns the losses of BenchmarkCNN on the given inputs and params.\"\"\"", "\n", "logs", "=", "[", "]", "\n", "model", "=", "test_util", ".", "TestCNNModel", "(", ")", "\n", "with", "test_util", ".", "monkey_patch", "(", "benchmark_cnn", ",", "\n", "log_fn", "=", "test_util", ".", "print_and_add_to_list", "(", "logs", ")", ",", "\n", "LOSS_AND_ACCURACY_DIGITS_TO_SHOW", "=", "15", ")", ":", "\n", "      ", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "\n", "params", ",", "dataset", "=", "test_util", ".", "TestDataSet", "(", ")", ",", "model", "=", "model", ")", "\n", "# The test model does not use labels when computing loss, so the label", "\n", "# values do not matter as long as it's the right shape.", "\n", "labels", "=", "np", ".", "array", "(", "[", "1", "]", "*", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "bench", ".", "image_preprocessor", ".", "set_fake_data", "(", "inputs", ",", "labels", ")", "\n", "bench", ".", "run", "(", ")", "\n", "\n", "", "outputs", "=", "test_util", ".", "get_training_outputs_from_logs", "(", "\n", "logs", ",", "params", ".", "print_training_accuracy", ")", "\n", "return", "[", "x", ".", "loss", "for", "x", "in", "outputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_update": [[1022, 1039], ["test_util.get_fake_var_update_inputs", "benchmark_cnn_test.VariableUpdateTest._get_benchmark_cnn_losses", "test_util.TestCNNModel().manually_compute_losses", "benchmark_cnn_test.VariableUpdateTest.assertAllClose", "test_util.TestCNNModel", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_fake_var_update_inputs", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._get_benchmark_cnn_losses", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.manually_compute_losses"], ["", "def", "_test_variable_update", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Tests variables are updated correctly when the given params are used.\n\n    A BenchmarkCNN is created with a TestCNNModel, and is run with some scalar\n    images. The losses are then compared with the losses obtained with\n    TestCNNModel().manually_compute_losses()\n\n    Args:\n      params: a Params tuple used to create BenchmarkCNN.\n    \"\"\"", "\n", "inputs", "=", "test_util", ".", "get_fake_var_update_inputs", "(", ")", "\n", "actual_losses", "=", "self", ".", "_get_benchmark_cnn_losses", "(", "inputs", ",", "params", ")", "\n", "expected_losses", ",", "=", "test_util", ".", "TestCNNModel", "(", ")", ".", "manually_compute_losses", "(", "\n", "inputs", ",", "1", ",", "params", ")", "\n", "rtol", "=", "3e-2", "if", "params", ".", "use_fp16", "else", "1e-5", "\n", "self", ".", "assertAllClose", "(", "actual_losses", "[", ":", "len", "(", "expected_losses", ")", "]", ",", "expected_losses", ",", "\n", "rtol", "=", "rtol", ",", "atol", "=", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates": [[1040, 1044], ["benchmark_cnn_test.VariableUpdateTest._test_variable_update", "params._replace"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_update"], ["", "def", "_test_variable_updates", "(", "self", ",", "params", ",", "\n", "var_updates", "=", "(", "'parameter_server'", ",", "'replicated'", ")", ")", ":", "\n", "    ", "for", "var_update", "in", "var_updates", ":", "\n", "      ", "self", ".", "_test_variable_update", "(", "params", ".", "_replace", "(", "variable_update", "=", "var_update", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testDefault": [[1045, 1048], ["test_util.get_var_update_params", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates"], ["", "", "def", "testDefault", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testCpuAsLocalParamDevice": [[1057, 1061], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testCpuAsLocalParamDevice", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "\n", "local_parameter_device", "=", "'cpu'", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testFp16": [[1062, 1065], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testFp16", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "use_fp16", "=", "True", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testMomentum": [[1066, 1069], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testMomentum", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "optimizer", "=", "'momentum'", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testRmsprop": [[1070, 1073], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testRmsprop", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "optimizer", "=", "'rmsprop'", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testNoLayers": [[1074, 1077], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testNoLayers", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "use_tf_layers", "=", "False", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testLayoutOptimizer": [[1078, 1082], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testLayoutOptimizer", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "\n", "enable_layout_optimizer", "=", "True", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testVariousAllReduceSpecs": [[1083, 1090], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "params._replace._replace._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testVariousAllReduceSpecs", "(", "self", ")", ":", "\n", "# We do not test xring, because it requires all Variables to have at least", "\n", "# two elements.", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "all_reduce_spec", "=", "'pscpu'", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ",", "var_updates", "=", "(", "'replicated'", ",", ")", ")", "\n", "params", "=", "params", ".", "_replace", "(", "all_reduce_spec", "=", "'psgpu'", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ",", "var_updates", "=", "(", "'replicated'", ",", ")", ")", "\n", "# TODO(b/80125832): Enable nccl in tests", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testPrintBaseLoss": [[1095, 1099], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testPrintBaseLoss", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "\n", "loss_type_to_report", "=", "'base_loss'", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testSingleL2LossOp": [[1100, 1104], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testSingleL2LossOp", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "\n", "single_l2_loss_op", "=", "True", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest.testResourceVars": [[1105, 1109], ["test_util.get_var_update_params()._replace", "benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "test_util.get_var_update_params"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableUpdateTest._test_variable_updates", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.test_util.get_var_update_params"], ["", "def", "testResourceVars", "(", "self", ")", ":", "\n", "    ", "params", "=", "test_util", ".", "get_var_update_params", "(", ")", ".", "_replace", "(", "\n", "use_resource_vars", "=", "True", ")", "\n", "self", ".", "_test_variable_updates", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation_with_var_mgr": [[1113, 1156], ["enumerate", "variable_mgr.preprocess_device_grads", "range", "tensorflow.ConfigProto", "benchmark_cnn_test.VariableMgrLocalReplicatedTest.assertEqual", "tower_grads.append", "range", "isinstance", "expected_device_grads.append", "tensorflow.Session", "sess.run", "sess.run", "range", "tensorflow.device", "range", "isinstance", "tuple.append", "tuple", "tensorflow.initialize_all_variables", "sess.run", "sess.run", "sess.run", "grad_vars.append", "tuple", "tensorflow.constant", "tensorflow.Variable"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.preprocess_device_grads", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["  ", "def", "_test_grad_aggregation_with_var_mgr", "(", "self", ",", "variable_mgr", ",", "num_towers", ",", "\n", "num_vars", ",", "deferred_grads", ")", ":", "\n", "    ", "tower_devices", "=", "[", "'/gpu:%d'", "%", "i", "for", "i", "in", "range", "(", "num_towers", ")", "]", "\n", "tower_grads", "=", "[", "]", "\n", "expected_sums", "=", "[", "0.", "]", "*", "num_vars", "\n", "for", "i", ",", "tower_device", "in", "enumerate", "(", "tower_devices", ")", ":", "\n", "      ", "with", "tf", ".", "device", "(", "tower_device", ")", ":", "\n", "        ", "grad_vars", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_vars", ")", ":", "\n", "          ", "n", "=", "num_towers", "*", "i", "+", "j", "\n", "grad_vars", ".", "append", "(", "(", "tf", ".", "constant", "(", "n", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "Variable", "(", "n", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "expected_sums", "[", "j", "]", "+=", "n", "\n", "", "", "tower_grads", ".", "append", "(", "grad_vars", ")", "\n", "\n", "", "_", ",", "agg_device_grads", "=", "variable_mgr", ".", "preprocess_device_grads", "(", "\n", "tower_grads", ")", "\n", "expected_device_grads", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_towers", ")", ":", "\n", "      ", "expected_grad_vars", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_vars", ")", ":", "\n", "        ", "expected_grad_and_var", "=", "[", "expected_sums", "[", "j", "]", ",", "num_towers", "*", "i", "+", "j", "]", "\n", "if", "isinstance", "(", "agg_device_grads", "[", "i", "]", "[", "j", "]", ",", "tuple", ")", ":", "\n", "# agg_device_grads[i][j] can be a list or tuple.", "\n", "          ", "expected_grad_and_var", "=", "tuple", "(", "expected_grad_and_var", ")", "\n", "", "expected_grad_vars", ".", "append", "(", "expected_grad_and_var", ")", "\n", "", "if", "isinstance", "(", "agg_device_grads", "[", "i", "]", ",", "tuple", ")", ":", "\n", "# agg_device_grads[i] can be a list or tuple.", "\n", "        ", "expected_grad_vars", "=", "tuple", "(", "expected_grad_vars", ")", "\n", "", "expected_device_grads", ".", "append", "(", "expected_grad_vars", ")", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "initialize_all_variables", "(", ")", ")", "\n", "sess", ".", "run", "(", "variable_mgr", ".", "_warmup_ops", ")", "\n", "if", "deferred_grads", ":", "\n", "# With deferred grads, the result of a session run is always the summed", "\n", "# gradients from the previous session run.", "\n", "        ", "sess", ".", "run", "(", "agg_device_grads", ")", "\n", "feed_dict", "=", "{", "g", ":", "0", "for", "grad_vars", "in", "tower_grads", "for", "g", ",", "_", "in", "grad_vars", "}", "\n", "agg_device_grads_", "=", "sess", ".", "run", "(", "agg_device_grads", ",", "feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "agg_device_grads_", "=", "sess", ".", "run", "(", "agg_device_grads", ")", "\n", "", "", "self", ".", "assertEqual", "(", "agg_device_grads_", ",", "expected_device_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation": [[1157, 1162], ["benchmark_cnn.BenchmarkCNN", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation_with_var_mgr"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation_with_var_mgr"], ["", "def", "_test_grad_aggregation", "(", "self", ",", "params", ",", "num_vars", ")", ":", "\n", "    ", "bench", "=", "benchmark_cnn", ".", "BenchmarkCNN", "(", "params", ")", "\n", "deferred_grads", "=", "(", "params", ".", "variable_consistency", "==", "'relaxed'", ")", "\n", "self", ".", "_test_grad_aggregation_with_var_mgr", "(", "bench", ".", "variable_mgr", ",", "bench", ".", "num_gpus", ",", "\n", "num_vars", ",", "deferred_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest.test_grad_aggregation": [[1163, 1220], ["benchmark_cnn.make_params", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "benchmark_cnn.make_params._replace", "benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.make_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test.VariableMgrLocalReplicatedTest._test_grad_aggregation"], ["", "def", "test_grad_aggregation", "(", "self", ")", ":", "\n", "    ", "base_params", "=", "benchmark_cnn", ".", "make_params", "(", "num_gpus", "=", "10", ",", "\n", "variable_update", "=", "'replicated'", ",", "\n", "use_fp16", "=", "True", ")", "\n", "params", "=", "base_params", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "gradient_repacking", "=", "3", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "variable_consistency", "=", "'relaxed'", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "compact_gradient_transfer", "=", "False", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "gradient_repacking", "=", "3", ",", "\n", "variable_consistency", "=", "'relaxed'", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "gradient_repacking", "=", "3", ",", "\n", "compact_gradient_transfer", "=", "False", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "variable_consistency", "=", "'relaxed'", ",", "\n", "compact_gradient_transfer", "=", "False", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "gradient_repacking", "=", "3", ",", "\n", "variable_consistency", "=", "'relaxed'", ",", "\n", "compact_gradient_transfer", "=", "False", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "num_gpus", "=", "8", ",", "hierarchical_copy", "=", "True", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "# TODO(b/80125832): Enable nccl in tests", "\n", "# params = base_params._replace(all_reduce_spec='nccl',", "\n", "#                               compact_gradient_transfer=False,", "\n", "#                               # For some reason, this test freezes when", "\n", "#                               # num_gpus=10", "\n", "#                               num_gpus=8)", "\n", "# self._test_grad_aggregation(params, 10)", "\n", "params", "=", "base_params", ".", "_replace", "(", "all_reduce_spec", "=", "'pscpu'", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "\n", "params", "=", "base_params", ".", "_replace", "(", "num_gpus", "=", "8", ",", "\n", "gradient_repacking", "=", "3", ",", "\n", "variable_consistency", "=", "'relaxed'", ",", "\n", "hierarchical_copy", "=", "True", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "# TODO(b/80125832): Enable nccl in tests", "\n", "# params = base_params._replace(num_gpus=8,", "\n", "#                               gradient_repacking=3,", "\n", "#                               variable_consistency='relaxed',", "\n", "#                               all_reduce_spec='nccl',", "\n", "#                               compact_gradient_transfer=False)", "\n", "# self._test_grad_aggregation(params, 10)", "\n", "params", "=", "base_params", ".", "_replace", "(", "gradient_repacking", "=", "3", ",", "\n", "variable_consistency", "=", "'relaxed'", ",", "\n", "all_reduce_spec", "=", "'pscpu'", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "params", "=", "base_params", ".", "_replace", "(", "gradient_repacking", "=", "3", ",", "\n", "variable_consistency", "=", "'relaxed'", ",", "\n", "all_reduce_spec", "=", "'xring'", ")", "\n", "self", ".", "_test_grad_aggregation", "(", "params", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn_test._check_has_gpu": [[38, 45], ["tensorflow.python.platform.test.is_gpu_available", "ValueError"], "function", ["None"], ["def", "_check_has_gpu", "(", ")", ":", "\n", "  ", "if", "not", "test", ".", "is_gpu_available", "(", "cuda_only", "=", "True", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"\"\"You have asked to run part or all of this on GPU, but it appears\n        that no GPU is available. If your machine has GPUs it is possible you\n        do not have a version of TensorFlow with GPU support. To build with GPU\n        support, add --config=cuda to the build flags.\\n \"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.__init__": [[37, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "benchmark_cnn", ")", ":", "\n", "    ", "self", ".", "benchmark_cnn", "=", "benchmark_cnn", "\n", "self", ".", "staging_delta_ops", "=", "[", "]", "\n", "self", ".", "use_resource_vars", "=", "benchmark_cnn", ".", "params", ".", "use_resource_vars", "\n", "\n", "# A variable for automatic loss scaling.", "\n", "self", ".", "grad_has_inf_nan", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.each_tower_has_variables": [[45, 48], ["None"], "methods", ["None"], ["", "def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns True if each GPU tower of the model has separate variables.\"\"\"", "\n", "assert", "False", ",", "'Must be implemented in subclass'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.supports_staged_vars": [[49, 52], ["None"], "methods", ["None"], ["", "def", "supports_staged_vars", "(", "self", ")", ":", "\n", "    ", "\"\"\"Whether staged variable management is supported.\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.create_outer_variable_scope": [[53, 57], ["None"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "\"\"\"Create the tf.variable_scope around all model graph operations.\"\"\"", "\n", "del", "device_num", "# unused by this implementation", "\n", "assert", "False", ",", "'Must be implemented in subclass'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.preprocess_device_grads": [[58, 74], ["None"], "methods", ["None"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "    ", "\"\"\"Preprocess the device gradients prior to applying them.\n\n    Args:\n      device_grads: List of lists of (gradient, variable) tuples.\n        device_grads[t][g] = (gradient, variable), where t is the index of the\n        tower and g is the index of the gradient-variable pair.\n\n    Returns: a tuple of (apply_gradients_devices, gradient_state).\n      gradient_state is an opaque structure that should be passed to\n      get_gradients_to_apply() and append_apply_gradients_ops() (in that order).\n      apply_gradients_devices is a list of devices where the gradients will be\n      applied with get_gradients_to_apply() and append_apply_gradients_ops().\n    \"\"\"", "\n", "del", "device_grads", "# unused by this implementation", "\n", "assert", "False", ",", "'Must be implemented in subclass'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.get_gradients_to_apply": [[75, 85], ["None"], "methods", ["None"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "\"\"\"Returns the [(gradient, variable)] list to apply for device_num.\n\n    Args:\n      device_num: indexes into apply_gradients_devices, which was returned by an\n        earlier call to preprocess_device_grads.\n      gradient_state: from previous call to apply_gradients_devices.\n    \"\"\"", "\n", "del", "device_num", ",", "gradient_state", "# unused by this implementation", "\n", "assert", "False", ",", "'Must be implemented in subclass'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.append_apply_gradients_ops": [[86, 108], ["variable_mgr_util.append_gradients_with_loss_scale", "opt.apply_gradients"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.append_gradients_with_loss_scale"], ["", "def", "append_apply_gradients_ops", "(", "self", ",", "gradient_state", ",", "opt", ",", "grads", ",", "training_ops", ",", "\n", "loss_scale_params", ")", ":", "\n", "    ", "\"\"\"Adds training ops for grads to 'training_ops'.\n\n\n\n    Args:\n      gradient_state: from previous call to apply_gradients_devices.\n      opt: the underlying optimizer\n      grads: [(grad, var)] to apply\n      training_ops: list to which to add ops\n      loss_scale_params: parameters for loss scaling.\n    \"\"\"", "\n", "del", "gradient_state", "# unused by this implementation", "\n", "\n", "def", "get_apply_gradients_ops_func", "(", ")", ":", "\n", "      ", "\"\"\"Returns the apply_gradients op.\"\"\"", "\n", "return", "[", "opt", ".", "apply_gradients", "(", "grads", ")", "]", "\n", "\n", "", "variable_mgr_util", ".", "append_gradients_with_loss_scale", "(", "\n", "training_ops", ",", "get_apply_gradients_ops_func", ",", "loss_scale_params", ",", "\n", "self", ".", "grad_has_inf_nan", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.get_post_init_ops": [[109, 112], ["None"], "methods", ["None"], ["", "def", "get_post_init_ops", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns ops that should run post-initialization.\"\"\"", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.get_devices": [[113, 116], ["None"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns devices to use for computation; includes replica selection.\"\"\"", "\n", "assert", "False", ",", "'Must be implemented in subclass'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.savable_variables": [[117, 120], ["tensorflow.global_variables"], "methods", ["None"], ["", "def", "savable_variables", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a list/dict of savable variables to pass to tf.train.Saver.\"\"\"", "\n", "return", "tf", ".", "global_variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgr.trainable_variables_on_device": [[121, 144], ["variable_mgr.VariableMgr.each_tower_has_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "v.name.startswith"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.each_tower_has_variables"], ["", "def", "trainable_variables_on_device", "(", "self", ",", "\n", "rel_device_num", ",", "\n", "abs_device_num", ",", "\n", "writable", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return the set of trainable variables on device.\n\n    Args:\n      rel_device_num: local worker device index.\n      abs_device_num: global graph device index.\n      writable: whether to get a reference to the underlying variable.\n\n    Returns:\n      The set of trainable variables on the specified device.\n    \"\"\"", "\n", "del", "rel_device_num", ",", "writable", "\n", "if", "self", ".", "each_tower_has_variables", "(", ")", ":", "\n", "      ", "params", "=", "[", "\n", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "v", ".", "name", ".", "startswith", "(", "'v%s/'", "%", "abs_device_num", ")", "\n", "]", "\n", "", "else", ":", "\n", "      ", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrIndependent.each_tower_has_variables": [[154, 156], ["None"], "methods", ["None"], ["def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrIndependent.create_outer_variable_scope": [[157, 160], ["tensorflow.variable_scope"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "return", "tf", ".", "variable_scope", "(", "'v%s'", "%", "device_num", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrIndependent.preprocess_device_grads": [[161, 163], ["None"], "methods", ["None"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "    ", "return", "(", "self", ".", "benchmark_cnn", ".", "devices", ",", "device_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrIndependent.get_gradients_to_apply": [[164, 178], ["tensorflow.logical_not", "has_inf_nan_list.append", "tensorflow.reduce_all", "tensorflow.reduce_all", "tensorflow.is_finite"], "methods", ["None"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "device_grads", "=", "gradient_state", "\n", "tower_grad", "=", "device_grads", "[", "device_num", "]", "\n", "\n", "if", "self", ".", "benchmark_cnn", ".", "enable_auto_loss_scale", "and", "device_num", "==", "0", ":", "\n", "# Since we don't aggregate variables in --independent mode, we cannot tell", "\n", "# if there are NaNs on all GPUs. So we arbitrarily choose to only check", "\n", "# NaNs on the first GPU.", "\n", "      ", "has_inf_nan_list", "=", "[", "]", "\n", "for", "grad", ",", "_", "in", "tower_grad", ":", "\n", "        ", "has_inf_nan_list", ".", "append", "(", "tf", ".", "reduce_all", "(", "tf", ".", "is_finite", "(", "grad", ")", ")", ")", "\n", "", "self", ".", "grad_has_inf_nan", "=", "tf", ".", "logical_not", "(", "tf", ".", "reduce_all", "(", "has_inf_nan_list", ")", ")", "\n", "\n", "", "return", "tower_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrIndependent.get_devices": [[179, 181], ["None"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromPS.each_tower_has_variables": [[191, 193], ["None"], "methods", ["None"], ["def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromPS.create_outer_variable_scope": [[194, 197], ["tensorflow.variable_scope", "bool"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "return", "tf", ".", "variable_scope", "(", "'v'", ",", "reuse", "=", "bool", "(", "device_num", ")", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromPS.preprocess_device_grads": [[198, 200], ["None"], "methods", ["None"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "    ", "return", "(", "[", "self", ".", "benchmark_cnn", ".", "param_server_device", "]", ",", "device_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromPS.get_gradients_to_apply": [[201, 211], ["variable_mgr_util.aggregate_gradients_using_copy_with_variable_colocation"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_gradients_using_copy_with_variable_colocation"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "assert", "device_num", "==", "0", "\n", "device_grads", "=", "gradient_state", "\n", "agg_grads", ",", "self", ".", "grad_has_inf_nan", "=", "(", "\n", "variable_mgr_util", ".", "\n", "aggregate_gradients_using_copy_with_variable_colocation", "(", "\n", "device_grads", ",", "\n", "use_mean", "=", "True", ",", "\n", "check_inf_nan", "=", "self", ".", "benchmark_cnn", ".", "enable_auto_loss_scale", ")", ")", "\n", "return", "agg_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromPS.get_devices": [[212, 225], ["variable_mgr_util.ParamServerDeviceSetter", "tensorflow.train.replica_device_setter"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "raw_devices", "=", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "if", "self", ".", "benchmark_cnn", ".", "local_parameter_device_flag", "==", "'gpu'", ":", "\n", "      ", "return", "[", "\n", "variable_mgr_util", ".", "ParamServerDeviceSetter", "(", "d", ",", "raw_devices", ")", "\n", "for", "d", "in", "raw_devices", "\n", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "tf", ".", "train", ".", "replica_device_setter", "(", "\n", "worker_device", "=", "d", ",", "\n", "ps_device", "=", "self", ".", "benchmark_cnn", ".", "param_server_device", ",", "\n", "ps_tasks", "=", "1", ")", "for", "d", "in", "raw_devices", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromStagedPS.__init__": [[232, 240], ["variable_mgr.VariableMgr.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "benchmark_cnn", ")", ":", "\n", "    ", "super", "(", "VariableMgrLocalFetchFromStagedPS", ",", "self", ")", ".", "__init__", "(", "benchmark_cnn", ")", "\n", "# A data structure to track where the variables are used on each device.", "\n", "# Indexed by device_num and var_name, each entry stores the \"put\" and \"get\"", "\n", "# ops used for that variable on that device:", "\n", "#   staging_vars_on_devices[device_num][var_name] == (put_op, get_op)", "\n", "self", ".", "staging_vars_on_devices", "=", "[", "\n", "dict", "(", ")", "for", "_", "in", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromStagedPS.supports_staged_vars": [[242, 244], ["None"], "methods", ["None"], ["", "def", "supports_staged_vars", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromStagedPS.create_outer_variable_scope": [[245, 251], ["variable_mgr_util.StagedVariableGetter", "tensorflow.variable_scope", "bool"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "self", ".", "_custom_getter", "=", "variable_mgr_util", ".", "StagedVariableGetter", "(", "\n", "device_num", ",", "self", ".", "benchmark_cnn", ".", "raw_devices", ",", "None", ",", "self", ")", "\n", "return", "tf", ".", "variable_scope", "(", "\n", "'v'", ",", "reuse", "=", "bool", "(", "device_num", ")", ",", "custom_getter", "=", "self", ".", "_custom_getter", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalFetchFromStagedPS.trainable_variables_on_device": [[252, 258], ["variable_mgr.VariableMgrLocalFetchFromStagedPS._custom_getter.trainable_variables_on_device"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.trainable_variables_on_device"], ["", "def", "trainable_variables_on_device", "(", "self", ",", "\n", "rel_device_num", ",", "\n", "abs_device_num", ",", "\n", "writable", "=", "False", ")", ":", "\n", "    ", "return", "self", ".", "_custom_getter", ".", "trainable_variables_on_device", "(", "\n", "rel_device_num", ",", "abs_device_num", ",", "writable", "=", "writable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.__init__": [[269, 286], ["variable_mgr.VariableMgr.__init__", "allreduce.parse_all_reduce_spec", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.parse_all_reduce_spec"], ["def", "__init__", "(", "self", ",", "benchmark_cnn", ",", "all_reduce_spec", ",", "\n", "agg_small_grads_max_bytes", ",", "agg_small_grads_max_group", ",", "\n", "allreduce_merge_scope", ")", ":", "\n", "    ", "super", "(", "VariableMgrLocalReplicated", ",", "self", ")", ".", "__init__", "(", "benchmark_cnn", ")", "\n", "if", "all_reduce_spec", ":", "\n", "      ", "spec", "=", "allreduce", ".", "parse_all_reduce_spec", "(", "all_reduce_spec", ")", "\n", "if", "len", "(", "spec", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'replicated mode does not support hybrid all-reduce strategies'", ")", "\n", "", "self", ".", "_all_reduce_spec", "=", "spec", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "_all_reduce_spec", "=", "None", "\n", "", "self", ".", "_agg_small_grads_max_bytes", "=", "agg_small_grads_max_bytes", "\n", "self", ".", "_agg_small_grads_max_group", "=", "agg_small_grads_max_group", "\n", "self", ".", "_warmup_ops", "=", "[", "]", "\n", "self", ".", "_allreduce_merge_scope", "=", "allreduce_merge_scope", "\n", "self", ".", "_gradient_put_ops", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.each_tower_has_variables": [[287, 289], ["None"], "methods", ["None"], ["", "def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.create_outer_variable_scope": [[290, 293], ["tensorflow.variable_scope"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "return", "tf", ".", "variable_scope", "(", "'v%s'", "%", "device_num", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.preprocess_device_grads": [[294, 320], ["batch_allreduce.algorithm_from_params", "batch_allreduce.algorithm_from_params.batch_all_reduce", "tensorflow.name_scope", "tensorflow.logical_not", "zip", "tensorflow.reduce_all", "zip", "tensorflow.colocate_with", "is_finite_list.append", "tensorflow.reduce_all", "tensorflow.reduce_all", "tensorflow.is_finite"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.algorithm_from_params", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.BatchAllReduceAlgorithm.batch_all_reduce"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "    ", "compact_grads", "=", "(", "self", ".", "benchmark_cnn", ".", "params", ".", "use_fp16", "and", "\n", "self", ".", "benchmark_cnn", ".", "params", ".", "compact_gradient_transfer", ")", "\n", "defer_grads", "=", "(", "self", ".", "benchmark_cnn", ".", "params", ".", "variable_consistency", "==", "'relaxed'", ")", "\n", "\n", "grads_to_reduce", "=", "[", "[", "g", "for", "g", ",", "_", "in", "grad_vars", "]", "for", "grad_vars", "in", "device_grads", "]", "\n", "algorithm", "=", "batch_allreduce", ".", "algorithm_from_params", "(", "self", ".", "benchmark_cnn", ".", "params", ")", "\n", "reduced_grads", ",", "self", ".", "_warmup_ops", "=", "algorithm", ".", "batch_all_reduce", "(", "\n", "grads_to_reduce", ",", "self", ".", "benchmark_cnn", ".", "params", ".", "gradient_repacking", ",", "\n", "compact_grads", ",", "defer_grads", ")", "\n", "if", "self", ".", "benchmark_cnn", ".", "enable_auto_loss_scale", ":", "\n", "# Check for infs or nans", "\n", "      ", "is_finite_list", "=", "[", "]", "\n", "with", "tf", ".", "name_scope", "(", "'check_for_inf_and_nan'", ")", ":", "\n", "        ", "for", "tower_grads", "in", "reduced_grads", ":", "\n", "          ", "with", "tf", ".", "colocate_with", "(", "tower_grads", "[", "0", "]", ")", ":", "\n", "# TODO(tanmingxing): Create fused op that takes in a list of tensors", "\n", "# as input and returns scalar boolean True if there are any", "\n", "# infs/nans.", "\n", "            ", "is_finite_list", ".", "append", "(", "tf", ".", "reduce_all", "(", "\n", "[", "tf", ".", "reduce_all", "(", "tf", ".", "is_finite", "(", "g", ")", ")", "for", "g", "in", "tower_grads", "]", ")", ")", "\n", "", "", "self", ".", "grad_has_inf_nan", "=", "tf", ".", "logical_not", "(", "tf", ".", "reduce_all", "(", "is_finite_list", ")", ")", "\n", "", "", "reduced_device_grads", "=", "[", "[", "\n", "(", "g", ",", "v", ")", "for", "g", ",", "(", "_", ",", "v", ")", "in", "zip", "(", "grads", ",", "grad_vars", ")", "\n", "]", "for", "grads", ",", "grad_vars", "in", "zip", "(", "reduced_grads", ",", "device_grads", ")", "]", "\n", "return", "self", ".", "benchmark_cnn", ".", "devices", ",", "reduced_device_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.get_gradients_to_apply": [[321, 324], ["None"], "methods", ["None"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "device_grads", "=", "gradient_state", "\n", "return", "device_grads", "[", "device_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.get_post_init_ops": [[325, 340], ["tensorflow.global_variables", "dict", "v.name.split", "post_init_ops.append", "v.assign", "v.name.startswith", "copy_from.read_value"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.read_value"], ["", "def", "get_post_init_ops", "(", "self", ")", ":", "\n", "# Copy initialized values for variables on GPU 0 to other GPUs.", "\n", "    ", "global_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "var_by_name", "=", "dict", "(", "[", "(", "v", ".", "name", ",", "v", ")", "for", "v", "in", "global_vars", "]", ")", "\n", "post_init_ops", "=", "[", "]", "\n", "for", "v", "in", "global_vars", ":", "\n", "      ", "split_name", "=", "v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "# TODO(b/62630508): use more specific prefix than v or v0.", "\n", "if", "split_name", "[", "0", "]", "==", "'v0'", "or", "not", "v", ".", "name", ".", "startswith", "(", "'v'", ")", ":", "\n", "        ", "continue", "\n", "", "split_name", "[", "0", "]", "=", "'v0'", "\n", "copy_from", "=", "var_by_name", "[", "'/'", ".", "join", "(", "split_name", ")", "]", "\n", "post_init_ops", ".", "append", "(", "v", ".", "assign", "(", "copy_from", ".", "read_value", "(", ")", ")", ")", "\n", "", "post_init_ops", "+=", "self", ".", "_warmup_ops", "\n", "return", "post_init_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.savable_variables": [[341, 349], ["tensorflow.global_variables", "v.name.split", "params.append", "v.name.startswith"], "methods", ["None"], ["", "def", "savable_variables", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the set of variables used for saving/loading the model.\"\"\"", "\n", "params", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "      ", "split_name", "=", "v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "if", "split_name", "[", "0", "]", "==", "'v0'", "or", "not", "v", ".", "name", ".", "startswith", "(", "'v'", ")", ":", "\n", "        ", "params", ".", "append", "(", "v", ")", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrLocalReplicated.get_devices": [[350, 352], ["None"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.__init__": [[362, 379], ["variable_mgr.VariableMgr.__init__", "allreduce.parse_all_reduce_spec", "allreduce.build_all_reduce_device_prefixes", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.parse_all_reduce_spec", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.build_all_reduce_device_prefixes"], ["def", "__init__", "(", "self", ",", "benchmark_cnn", ",", "all_reduce_spec", ",", "job_name", ",", "\n", "num_workers", ",", "agg_small_grads_max_bytes", ",", "\n", "agg_small_grads_max_group", ",", "allreduce_merge_scope", ")", ":", "\n", "    ", "super", "(", "VariableMgrDistributedAllReduce", ",", "self", ")", ".", "__init__", "(", "benchmark_cnn", ")", "\n", "if", "not", "all_reduce_spec", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'distributed_all_reduce requires a non-empty all_reduce_spec'", ")", "\n", "", "self", ".", "_all_reduce_spec", "=", "allreduce", ".", "parse_all_reduce_spec", "(", "all_reduce_spec", ")", "\n", "self", ".", "_all_reduce_device_prefixes", "=", "(", "\n", "allreduce", ".", "build_all_reduce_device_prefixes", "(", "job_name", ",", "num_workers", ")", ")", "\n", "self", ".", "_num_workers", "=", "num_workers", "\n", "self", ".", "_agg_small_grads_max_bytes", "=", "agg_small_grads_max_bytes", "\n", "self", ".", "_agg_small_grads_max_group", "=", "agg_small_grads_max_group", "\n", "self", ".", "_allreduce_merge_scope", "=", "allreduce_merge_scope", "\n", "if", "not", "self", ".", "_all_reduce_spec", ":", "\n", "      ", "raise", "ValueError", "(", "'all_reduce_spec must be specified'", ")", "\n", "", "self", ".", "_single_session", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.each_tower_has_variables": [[380, 382], ["None"], "methods", ["None"], ["", "def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.create_outer_variable_scope": [[383, 396], ["tensorflow.variable_scope"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "\"\"\"Create a scope for the named device.\n\n    Args:\n      device_num: index of device for variable scope. (Note that\n        device_num spans all processes in cluster since a single global\n        graph is used.)\n\n    Returns:\n      the requested variable_scope\n    \"\"\"", "\n", "return", "tf", ".", "variable_scope", "(", "'v%s'", "%", "device_num", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.preprocess_device_grads": [[397, 432], ["full_device_set.append", "allreduce.split_grads_by_size", "allreduce.sum_gradients_all_reduce", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.split_grads_by_size", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_gradients_all_reduce"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "    ", "remaining_grads", "=", "device_grads", "\n", "aggregated_grads", "=", "[", "]", "\n", "for", "spec_tuple", "in", "self", ".", "_all_reduce_spec", ":", "\n", "      ", "if", "spec_tuple", ".", "limit", "<", "0", ":", "\n", "        ", "this_grads", "=", "remaining_grads", "\n", "remaining_grads", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "(", "this_grads", ",", "remaining_grads", ")", "=", "allreduce", ".", "split_grads_by_size", "(", "\n", "spec_tuple", ".", "limit", ",", "remaining_grads", ")", "\n", "", "if", "this_grads", ":", "\n", "        ", "range_agg_grads", "=", "allreduce", ".", "sum_gradients_all_reduce", "(", "\n", "self", ".", "_single_session", ",", "\n", "self", ".", "_all_reduce_device_prefixes", ",", "\n", "this_grads", ",", "\n", "self", ".", "_num_workers", ",", "\n", "spec_tuple", ".", "alg", ",", "\n", "spec_tuple", ".", "shards", ",", "\n", "self", ".", "benchmark_cnn", ".", "gpu_indices", ",", "\n", "agg_small_grads_max_bytes", "=", "self", ".", "_agg_small_grads_max_bytes", ",", "\n", "agg_small_grads_max_group", "=", "self", ".", "_agg_small_grads_max_group", ",", "\n", "allreduce_merge_scope", "=", "self", ".", "_allreduce_merge_scope", ")", "\n", "if", "not", "aggregated_grads", ":", "\n", "          ", "aggregated_grads", "=", "range_agg_grads", "\n", "", "else", ":", "\n", "          ", "assert", "len", "(", "aggregated_grads", ")", "==", "len", "(", "range_agg_grads", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "aggregated_grads", ")", ")", ":", "\n", "            ", "aggregated_grads", "[", "i", "]", "+=", "range_agg_grads", "[", "i", "]", "\n", "", "", "", "", "assert", "not", "remaining_grads", "\n", "full_device_set", "=", "[", "]", "\n", "for", "grads", "in", "device_grads", ":", "\n", "      ", "g", ",", "v", "=", "grads", "[", "0", "]", "\n", "del", "v", "\n", "full_device_set", ".", "append", "(", "g", ".", "device", ")", "\n", "", "return", "(", "full_device_set", ",", "aggregated_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.get_gradients_to_apply": [[433, 439], ["len", "ValueError", "len"], "methods", ["None"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "device_grads", "=", "gradient_state", "\n", "if", "device_num", ">=", "len", "(", "device_grads", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'device_num %d exceeds length of device_grads (%d)'", "%", "\n", "(", "device_num", ",", "len", "(", "device_grads", ")", ")", ")", "\n", "", "return", "device_grads", "[", "device_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.get_post_init_ops": [[440, 454], ["tensorflow.global_variables", "dict", "v.name.split", "post_init_ops.append", "v.assign", "v.name.startswith", "copy_from.read_value"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.read_value"], ["", "def", "get_post_init_ops", "(", "self", ")", ":", "\n", "    ", "\"\"\"Copy initialized values for variables to other devices.\"\"\"", "\n", "global_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "var_by_name", "=", "dict", "(", "[", "(", "v", ".", "name", ",", "v", ")", "for", "v", "in", "global_vars", "]", ")", "\n", "post_init_ops", "=", "[", "]", "\n", "for", "v", "in", "global_vars", ":", "\n", "      ", "split_name", "=", "v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "# TODO(b/62630508): use more specific prefix than v or v0.", "\n", "if", "split_name", "[", "0", "]", "==", "'v0'", "or", "not", "v", ".", "name", ".", "startswith", "(", "'v'", ")", ":", "\n", "        ", "continue", "\n", "", "split_name", "[", "0", "]", "=", "'v0'", "\n", "copy_from", "=", "var_by_name", "[", "'/'", ".", "join", "(", "split_name", ")", "]", "\n", "post_init_ops", ".", "append", "(", "v", ".", "assign", "(", "copy_from", ".", "read_value", "(", ")", ")", ")", "\n", "", "return", "post_init_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.savable_variables": [[455, 463], ["tensorflow.global_variables", "v.name.split", "params.append", "v.name.startswith"], "methods", ["None"], ["", "def", "savable_variables", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the set of variables used for saving/loading the model.\"\"\"", "\n", "params", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "      ", "split_name", "=", "v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "if", "split_name", "[", "0", "]", "==", "'v0'", "or", "not", "v", ".", "name", ".", "startswith", "(", "'v'", ")", ":", "\n", "        ", "params", ".", "append", "(", "v", ")", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedAllReduce.get_devices": [[464, 466], ["None"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.__init__": [[477, 504], ["variable_mgr.VariableMgr.__init__", "allreduce.parse_all_reduce_spec", "dict", "ValueError", "ValueError", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.parse_all_reduce_spec"], ["def", "__init__", "(", "self", ",", "benchmark_cnn", ",", "all_reduce_spec", ",", "\n", "num_workers", ",", "num_gpus", ",", "task_id", ",", "allreduce_merge_scope", ")", ":", "\n", "    ", "super", "(", "VariableMgrCollectiveAllReduce", ",", "self", ")", ".", "__init__", "(", "benchmark_cnn", ")", "\n", "if", "not", "all_reduce_spec", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'collective_all_reduce requires a non-empty all_reduce_spec: %s'", "\n", "%", "all_reduce_spec", ")", "\n", "", "parsed_spec", "=", "allreduce", ".", "parse_all_reduce_spec", "(", "all_reduce_spec", ")", "\n", "# So far we only support a length-1 all_reduce_spec", "\n", "if", "len", "(", "parsed_spec", ")", ">", "1", "or", "parsed_spec", "[", "0", "]", ".", "limit", ">", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'collective_all_reduce requires one single-range all_reduce_spec %s'", "\n", "%", "parsed_spec", ")", "\n", "", "self", ".", "_all_reduce_spec", "=", "parsed_spec", "[", "0", "]", "\n", "if", "self", ".", "_all_reduce_spec", ".", "alg", "!=", "'collective'", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'VariableMgrCollectiveAllReduce initialized with non-collective '", "\n", "'all_reduce_spec %s'", "%", "self", ".", "all_reduce_spec", ")", "\n", "", "self", ".", "_num_workers", "=", "num_workers", "\n", "self", ".", "_num_gpus", "=", "num_gpus", "\n", "self", ".", "_task_id", "=", "task_id", "\n", "self", ".", "_allreduce_merge_scope", "=", "allreduce_merge_scope", "\n", "self", ".", "_instance_key_counter", "=", "10000", "\n", "self", ".", "_instance_key_table", "=", "dict", "(", ")", "\n", "self", ".", "_single_session", "=", "False", "\n", "# List of prefixes for generating PS devices, unused here.", "\n", "self", ".", "_all_reduce_device_prefixes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.each_tower_has_variables": [[505, 507], ["None"], "methods", ["None"], ["", "def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.create_outer_variable_scope": [[508, 518], ["tensorflow.variable_scope"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "\"\"\"Create a scope for the named device.\n\n    Args:\n      device_num: index of device for variable scope.\n\n    Returns:\n      the requested variable_scope\n    \"\"\"", "\n", "return", "tf", ".", "variable_scope", "(", "'v%s'", "%", "device_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.preprocess_device_grads": [[519, 535], ["allreduce.sum_gradients_all_reduce", "len", "len", "full_device_set.append"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_gradients_all_reduce"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "    ", "reduced_grads", "=", "allreduce", ".", "sum_gradients_all_reduce", "(", "\n", "self", ".", "_single_session", ",", "\n", "self", ".", "_all_reduce_device_prefixes", ",", "\n", "device_grads", ",", "\n", "self", ".", "_num_workers", ",", "\n", "'collective'", ",", "\n", "self", ".", "_all_reduce_spec", ".", "shards", ",", "\n", "self", ".", "benchmark_cnn", ".", "gpu_indices", ",", "\n", "allreduce_merge_scope", "=", "self", ".", "_allreduce_merge_scope", ")", "\n", "assert", "len", "(", "reduced_grads", ")", "==", "len", "(", "device_grads", ")", "\n", "full_device_set", "=", "[", "]", "\n", "for", "grads", "in", "device_grads", ":", "\n", "      ", "g", ",", "_", "=", "grads", "[", "0", "]", "\n", "full_device_set", ".", "append", "(", "g", ".", "device", ")", "\n", "", "return", "(", "full_device_set", ",", "reduced_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.get_gradients_to_apply": [[536, 542], ["len", "ValueError", "len"], "methods", ["None"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "device_grads", "=", "gradient_state", "\n", "if", "device_num", ">=", "len", "(", "device_grads", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'device_num %d exceeds length of device_grads (%d)'", "%", "\n", "(", "device_num", ",", "len", "(", "device_grads", ")", ")", ")", "\n", "", "return", "device_grads", "[", "device_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce._get_instance_key": [[543, 548], ["variable_mgr.VariableMgrCollectiveAllReduce._instance_key_table.keys"], "methods", ["None"], ["", "def", "_get_instance_key", "(", "self", ",", "name", ")", ":", "\n", "    ", "if", "name", "not", "in", "self", ".", "_instance_key_table", ".", "keys", "(", ")", ":", "\n", "      ", "self", ".", "_instance_key_counter", "+=", "1", "\n", "self", ".", "_instance_key_table", "[", "name", "]", "=", "self", ".", "_instance_key_counter", "\n", "", "return", "self", ".", "_instance_key_table", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.get_post_init_ops": [[549, 596], ["tensorflow.global_variables", "dict", "sorted", "v.name.split", "re.match", "allreduce.collective_group_key", "variable_mgr.VariableMgrCollectiveAllReduce._get_instance_key", "int", "len", "len", "v.name.split", "re.match", "re.match.group", "dict.keys", "vars_by_suffix[].append", "int", "re.match.group", "tensorflow.device", "allreduce.broadcast_send", "post_init_ops.append", "tensorflow.device", "allreduce.broadcast_recv", "post_init_ops.append", "v.assign", "v.assign"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.collective_group_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce._get_instance_key", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.broadcast_send", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.broadcast_recv"], ["", "def", "get_post_init_ops", "(", "self", ")", ":", "\n", "    ", "\"\"\"Broadcast initialized values of variables to other devices.\n\n    Returns:\n      At task 0 device 0, broadcast_send.\n      At all other devices and tasks, broadcast_recv.\n    \"\"\"", "\n", "global_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "group_size", "=", "self", ".", "_num_workers", "*", "self", ".", "_num_gpus", "\n", "post_init_ops", "=", "[", "]", "\n", "# Gather variables into same-var-different-device groups.", "\n", "vars_by_suffix", "=", "dict", "(", ")", "\n", "for", "v", "in", "global_vars", ":", "\n", "      ", "split_name", "=", "v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "mo", "=", "re", ".", "match", "(", "r'v(\\d+)$'", ",", "split_name", "[", "0", "]", ")", "\n", "if", "mo", ":", "\n", "        ", "device_id", "=", "int", "(", "mo", ".", "group", "(", "1", ")", ")", "\n", "suffix", "=", "'/'", ".", "join", "(", "split_name", "[", "1", ":", "]", ")", "\n", "if", "suffix", "in", "vars_by_suffix", ".", "keys", "(", ")", ":", "\n", "          ", "vars_by_suffix", "[", "suffix", "]", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "          ", "vars_by_suffix", "[", "suffix", "]", "=", "[", "v", "]", "\n", "# Generate broadcast ops for each such group.", "\n", "", "", "", "for", "suffix", "in", "sorted", "(", "vars_by_suffix", ")", ":", "\n", "      ", "vlist", "=", "vars_by_suffix", "[", "suffix", "]", "\n", "assert", "self", ".", "_num_gpus", "==", "len", "(", "vlist", ")", "\n", "devices", "=", "[", "v", ".", "device", "for", "v", "in", "vlist", "]", "\n", "# NOTE: this key should generate the same value for all tasks", "\n", "group_key", "=", "allreduce", ".", "collective_group_key", "(", "devices", ")", "\n", "group_size", "=", "self", ".", "_num_workers", "*", "len", "(", "devices", ")", "\n", "instance_key", "=", "self", ".", "_get_instance_key", "(", "suffix", ")", "\n", "for", "v", "in", "vlist", ":", "\n", "        ", "split_name", "=", "v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "mo", "=", "re", ".", "match", "(", "r'v(\\d+)$'", ",", "split_name", "[", "0", "]", ")", "\n", "if", "mo", ":", "\n", "          ", "device_id", "=", "int", "(", "mo", ".", "group", "(", "1", ")", ")", "\n", "if", "(", "self", ".", "_task_id", "==", "0", "and", "device_id", "==", "0", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "v", ".", "device", ")", ":", "\n", "              ", "bcast_send", "=", "allreduce", ".", "broadcast_send", "(", "\n", "v", ",", "v", ".", "shape", ",", "v", ".", "dtype", ",", "group_size", ",", "group_key", ",", "instance_key", ")", "\n", "post_init_ops", ".", "append", "(", "v", ".", "assign", "(", "bcast_send", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "tf", ".", "device", "(", "v", ".", "device", ")", ":", "\n", "              ", "bcast_recv", "=", "allreduce", ".", "broadcast_recv", "(", "\n", "v", ".", "shape", ",", "v", ".", "dtype", ",", "group_size", ",", "group_key", ",", "instance_key", ")", "\n", "post_init_ops", ".", "append", "(", "v", ".", "assign", "(", "bcast_recv", ")", ")", "\n", "", "", "", "", "", "return", "post_init_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.savable_variables": [[597, 606], ["tensorflow.global_variables", "v.name.split", "params.append", "v.name.startswith"], "methods", ["None"], ["", "def", "savable_variables", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the set of variables used for saving/loading the model.\"\"\"", "\n", "params", "=", "[", "]", "\n", "if", "self", ".", "_task_id", "==", "0", ":", "\n", "      ", "for", "v", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "        ", "split_name", "=", "v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "if", "split_name", "[", "0", "]", "==", "'v0'", "or", "not", "v", ".", "name", ".", "startswith", "(", "'v'", ")", ":", "\n", "          ", "params", ".", "append", "(", "v", ")", "\n", "", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrCollectiveAllReduce.get_devices": [[607, 609], ["None"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromPS.each_tower_has_variables": [[619, 621], ["None"], "methods", ["None"], ["def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromPS.create_outer_variable_scope": [[622, 632], ["variable_mgr_util.OverrideCachingDevice", "tensorflow.variable_scope", "bool"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "if", "self", ".", "benchmark_cnn", ".", "local_parameter_device_flag", "==", "'gpu'", ":", "\n", "      ", "caching_devices", "=", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "", "else", ":", "\n", "      ", "caching_devices", "=", "[", "self", ".", "benchmark_cnn", ".", "cpu_device", "]", "\n", "", "custom_getter", "=", "variable_mgr_util", ".", "OverrideCachingDevice", "(", "\n", "caching_devices", ",", "self", ".", "benchmark_cnn", ".", "cpu_device", ",", "1024", "*", "64", ")", "\n", "return", "tf", ".", "variable_scope", "(", "\n", "'v'", ",", "reuse", "=", "bool", "(", "device_num", ")", ",", "custom_getter", "=", "custom_getter", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromPS.preprocess_device_grads": [[633, 636], ["None"], "methods", ["None"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "# Returns (gradient_devices, gradient_state)", "\n", "    ", "return", "(", "[", "self", ".", "benchmark_cnn", ".", "param_server_device", "]", ",", "device_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromPS.get_gradients_to_apply": [[637, 645], ["variable_mgr_util.aggregate_gradients_using_copy"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_gradients_using_copy"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "assert", "device_num", "==", "0", "\n", "agg_grads", ",", "self", ".", "grad_has_inf_nan", "=", "(", "\n", "variable_mgr_util", ".", "aggregate_gradients_using_copy", "(", "\n", "gradient_state", ",", "\n", "use_mean", "=", "True", ",", "\n", "check_inf_nan", "=", "self", ".", "benchmark_cnn", ".", "enable_auto_loss_scale", ")", ")", "\n", "return", "agg_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromPS.get_devices": [[646, 654], ["tensorflow.contrib.training.GreedyLoadBalancingStrategy", "tensorflow.train.replica_device_setter", "variable_mgr.VariableMgrDistributedFetchFromPS.benchmark_cnn.cluster_manager.get_cluster_spec"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.cnn_util.BaseClusterManager.get_cluster_spec"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "ps_strategy", "=", "tf", ".", "contrib", ".", "training", ".", "GreedyLoadBalancingStrategy", "(", "\n", "self", ".", "benchmark_cnn", ".", "num_ps", ",", "tf", ".", "contrib", ".", "training", ".", "byte_size_load_fn", ")", "\n", "return", "[", "\n", "tf", ".", "train", ".", "replica_device_setter", "(", "\n", "worker_device", "=", "d", ",", "\n", "cluster", "=", "self", ".", "benchmark_cnn", ".", "cluster_manager", ".", "get_cluster_spec", "(", ")", ",", "\n", "ps_strategy", "=", "ps_strategy", ")", "for", "d", "in", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.__init__": [[661, 667], ["variable_mgr.VariableMgr.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "benchmark_cnn", ")", ":", "\n", "    ", "super", "(", "VariableMgrDistributedFetchFromStagedPS", ",", "self", ")", ".", "__init__", "(", "benchmark_cnn", ")", "\n", "self", ".", "staging_vars_on_devices", "=", "[", "\n", "dict", "(", ")", "for", "_", "in", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "]", "\n", "self", ".", "staged_vars_on_cpu", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.create_outer_variable_scope": [[668, 675], ["variable_mgr_util.StagedVariableGetter", "tensorflow.variable_scope", "bool"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "self", ".", "_custom_getter", "=", "variable_mgr_util", ".", "StagedVariableGetter", "(", "\n", "device_num", ",", "self", ".", "benchmark_cnn", ".", "raw_devices", ",", "\n", "self", ".", "benchmark_cnn", ".", "cpu_device", ",", "self", ")", "\n", "return", "tf", ".", "variable_scope", "(", "\n", "'v'", ",", "reuse", "=", "bool", "(", "device_num", ")", ",", "custom_getter", "=", "self", ".", "_custom_getter", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.supports_staged_vars": [[676, 678], ["None"], "methods", ["None"], ["", "def", "supports_staged_vars", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.trainable_variables_on_device": [[679, 685], ["variable_mgr.VariableMgrDistributedFetchFromStagedPS._custom_getter.trainable_variables_on_device"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedFetchFromStagedPS.trainable_variables_on_device"], ["", "def", "trainable_variables_on_device", "(", "self", ",", "\n", "rel_device_num", ",", "\n", "abs_device_num", ",", "\n", "writable", "=", "False", ")", ":", "\n", "    ", "return", "self", ".", "_custom_getter", ".", "trainable_variables_on_device", "(", "\n", "rel_device_num", ",", "abs_device_num", ",", "writable", "=", "writable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.each_tower_has_variables": [[696, 698], ["None"], "methods", ["None"], ["def", "each_tower_has_variables", "(", "self", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.create_outer_variable_scope": [[699, 704], ["tensorflow.variable_scope", "variable_mgr_util.OverrideToLocalVariableIfNotPsVar"], "methods", ["None"], ["", "def", "create_outer_variable_scope", "(", "self", ",", "device_num", ")", ":", "\n", "    ", "return", "tf", ".", "variable_scope", "(", "\n", "'v%s'", "%", "device_num", ",", "\n", "custom_getter", "=", "variable_mgr_util", ".", "OverrideToLocalVariableIfNotPsVar", "(", ")", ",", "\n", "use_resource", "=", "self", ".", "use_resource_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.preprocess_device_grads": [[705, 707], ["None"], "methods", ["None"], ["", "def", "preprocess_device_grads", "(", "self", ",", "device_grads", ")", ":", "\n", "    ", "return", "(", "[", "self", ".", "benchmark_cnn", ".", "param_server_device", "]", ",", "device_grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_gradients_to_apply": [[708, 731], ["variable_mgr_util.aggregate_gradients_using_copy_with_device_selection", "enumerate", "my_name.endswith", "tensorflow.get_variable"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.aggregate_gradients_using_copy_with_device_selection", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "def", "get_gradients_to_apply", "(", "self", ",", "device_num", ",", "gradient_state", ")", ":", "\n", "    ", "device_grads", "=", "gradient_state", "# From 2nd result of preprocess_device_grads.", "\n", "\n", "avg_grads", ",", "self", ".", "grad_has_inf_nan", "=", "(", "\n", "variable_mgr_util", ".", "aggregate_gradients_using_copy_with_device_selection", "(", "\n", "self", ".", "benchmark_cnn", ",", "\n", "device_grads", ",", "\n", "use_mean", "=", "True", ",", "\n", "check_inf_nan", "=", "self", ".", "benchmark_cnn", ".", "enable_auto_loss_scale", ")", ")", "\n", "\n", "# Make shadow variable on a parameter server for each original trainable", "\n", "# variable.", "\n", "for", "i", ",", "(", "g", ",", "v", ")", "in", "enumerate", "(", "avg_grads", ")", ":", "\n", "      ", "my_name", "=", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/'", "+", "v", ".", "name", "\n", "if", "my_name", ".", "endswith", "(", "':0'", ")", ":", "\n", "        ", "my_name", "=", "my_name", "[", ":", "-", "2", "]", "\n", "", "new_v", "=", "tf", ".", "get_variable", "(", "\n", "my_name", ",", "\n", "dtype", "=", "v", ".", "dtype", ".", "base_dtype", ",", "\n", "initializer", "=", "v", ".", "initial_value", ",", "\n", "trainable", "=", "True", ")", "\n", "avg_grads", "[", "i", "]", "=", "(", "g", ",", "new_v", ")", "\n", "", "return", "avg_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.append_apply_gradients_ops": [[732, 756], ["variable_mgr_util.append_gradients_with_loss_scale", "enumerate", "opt.apply_gradients", "variable_mgr.VariableMgrDistributedReplicated.benchmark_cnn.add_sync_queues_and_barrier", "tensorflow.control_dependencies", "tensorflow.device", "v.read_value", "range", "len", "apply_gradients_ops.append", "[].assign"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.append_gradients_with_loss_scale", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.add_sync_queues_and_barrier", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.read_value"], ["", "def", "append_apply_gradients_ops", "(", "self", ",", "gradient_state", ",", "opt", ",", "grads", ",", "training_ops", ",", "\n", "loss_scale_params", ")", ":", "\n", "    ", "device_grads", "=", "gradient_state", "# From 2nd result of preprocess_device_grads.", "\n", "\n", "def", "get_apply_gradients_ops_func", "(", ")", ":", "\n", "      ", "\"\"\"Returns a list of ops for updating gradients.\"\"\"", "\n", "apply_gradients_ops", "=", "[", "]", "\n", "# For each variable, apply the combined gradients for this server on", "\n", "# the parameter server, and then wait for all other servers to do this.", "\n", "for", "i", ",", "(", "g", ",", "v", ")", "in", "enumerate", "(", "grads", ")", ":", "\n", "        ", "apply_gradient_op", "=", "opt", ".", "apply_gradients", "(", "[", "(", "g", ",", "v", ")", "]", ")", "\n", "barrier", "=", "self", ".", "benchmark_cnn", ".", "add_sync_queues_and_barrier", "(", "\n", "'replicate_variable_%s'", "%", "i", ",", "[", "apply_gradient_op", "]", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "barrier", "]", ")", ":", "\n", "          ", "with", "tf", ".", "device", "(", "self", ".", "benchmark_cnn", ".", "cpu_device", ")", ":", "\n", "            ", "updated_value", "=", "v", ".", "read_value", "(", ")", "\n", "for", "my_d", "in", "range", "(", "len", "(", "self", ".", "benchmark_cnn", ".", "devices", ")", ")", ":", "\n", "              ", "apply_gradients_ops", ".", "append", "(", "\n", "device_grads", "[", "my_d", "]", "[", "i", "]", "[", "1", "]", ".", "assign", "(", "updated_value", ")", ")", "\n", "", "", "", "", "return", "apply_gradients_ops", "\n", "\n", "", "variable_mgr_util", ".", "append_gradients_with_loss_scale", "(", "\n", "training_ops", ",", "get_apply_gradients_ops_func", ",", "loss_scale_params", ",", "\n", "self", ".", "grad_has_inf_nan", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port": [[757, 761], ["s.endswith"], "methods", ["None"], ["", "def", "_strip_port", "(", "self", ",", "s", ")", ":", "\n", "    ", "if", "s", ".", "endswith", "(", "':0'", ")", ":", "\n", "      ", "return", "s", "[", ":", "-", "2", "]", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_post_init_ops": [[762, 780], ["tensorflow.local_variables", "dict", "tensorflow.global_variables", "v.name.startswith", "variable_mgr.VariableMgrDistributedReplicated._strip_port", "range", "variable_mgr.VariableMgrDistributedReplicated._strip_port", "post_init_ops.append", "len", "copy_to.assign", "v.read_value"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr_util.StagedModelVariable.read_value"], ["", "def", "get_post_init_ops", "(", "self", ")", ":", "\n", "# Copy initialized variables for variables on the parameter server", "\n", "# to the local copy of the variable.", "\n", "\n", "    ", "local_vars", "=", "tf", ".", "local_variables", "(", ")", "\n", "local_var_by_name", "=", "dict", "(", "\n", "[", "(", "self", ".", "_strip_port", "(", "v", ".", "name", ")", ",", "v", ")", "for", "v", "in", "local_vars", "]", ")", "\n", "post_init_ops", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "      ", "if", "v", ".", "name", ".", "startswith", "(", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/v0/'", ")", ":", "\n", "        ", "prefix", "=", "self", ".", "_strip_port", "(", "\n", "v", ".", "name", "[", "len", "(", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/v0'", ")", ":", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "benchmark_cnn", ".", "num_gpus", ")", ":", "\n", "          ", "name", "=", "'v%s%s'", "%", "(", "i", ",", "prefix", ")", "\n", "if", "name", "in", "local_var_by_name", ":", "\n", "            ", "copy_to", "=", "local_var_by_name", "[", "name", "]", "\n", "post_init_ops", ".", "append", "(", "copy_to", ".", "assign", "(", "v", ".", "read_value", "(", ")", ")", ")", "\n", "", "", "", "", "return", "post_init_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._remove_shadow_var_prefix_if_present": [[781, 786], ["var_name.startswith", "len"], "methods", ["None"], ["", "def", "_remove_shadow_var_prefix_if_present", "(", "self", ",", "var_name", ")", ":", "\n", "    ", "if", "var_name", ".", "startswith", "(", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/'", ")", ":", "\n", "      ", "return", "var_name", "[", "len", "(", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/'", ")", ":", "]", "\n", "", "else", ":", "\n", "      ", "return", "var_name", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.var_dict_name": [[787, 789], ["variable_mgr.VariableMgrDistributedReplicated._strip_port", "variable_mgr.VariableMgrDistributedReplicated._remove_shadow_var_prefix_if_present"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._remove_shadow_var_prefix_if_present"], ["", "", "def", "var_dict_name", "(", "self", ",", "v", ")", ":", "\n", "    ", "return", "self", ".", "_strip_port", "(", "self", ".", "_remove_shadow_var_prefix_if_present", "(", "v", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.savable_variables": [[790, 812], ["tensorflow.global_variables", "tensorflow.local_variables", "variable_mgr.VariableMgrDistributedReplicated._strip_port", "v.name.startswith", "variable_mgr.VariableMgrDistributedReplicated._remove_shadow_var_prefix_if_present", "v.name.startswith", "tensorflow.trainable_variables", "variable_mgr.VariableMgrDistributedReplicated._strip_port"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._remove_shadow_var_prefix_if_present", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated._strip_port"], ["", "def", "savable_variables", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns a list/dict of savable variables to pass to tf.train.Saver.\"\"\"", "\n", "params", "=", "{", "}", "\n", "for", "v", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "      ", "assert", "(", "v", ".", "name", ".", "startswith", "(", "variable_mgr_util", ".", "PS_SHADOW_VAR_PREFIX", "+", "'/v0/'", ")", "\n", "or", "v", ".", "name", "in", "(", "'global_step:0'", ",", "'loss_scale:0'", ",", "\n", "'loss_scale_normal_steps:0'", ")", ")", ",", "(", "\n", "'Invalid global variable: %s'", "%", "v", ")", "\n", "# We store variables in the checkpoint with the shadow variable prefix", "\n", "# removed so we can evaluate checkpoints in non-distributed replicated", "\n", "# mode. The checkpoints can also be loaded for training in", "\n", "# distributed_replicated mode.", "\n", "name", "=", "self", ".", "_strip_port", "(", "self", ".", "_remove_shadow_var_prefix_if_present", "(", "v", ".", "name", ")", ")", "\n", "params", "[", "name", "]", "=", "v", "\n", "", "for", "v", "in", "tf", ".", "local_variables", "(", ")", ":", "\n", "# Non-trainable variables, such as batch norm moving averages, do not have", "\n", "# corresponding global shadow variables, so we add them here. Trainable", "\n", "# local variables have corresponding global shadow variables, which were", "\n", "# added in the global variable loop above.", "\n", "      ", "if", "v", ".", "name", ".", "startswith", "(", "'v0/'", ")", "and", "v", "not", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "params", "[", "self", ".", "_strip_port", "(", "v", ".", "name", ")", "]", "=", "v", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.variable_mgr.VariableMgrDistributedReplicated.get_devices": [[813, 815], ["None"], "methods", ["None"], ["", "def", "get_devices", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "benchmark_cnn", ".", "raw_devices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.run_tests.main": [[58, 101], ["sys.exit", "unittest.TestSuite", "unittest.TestSuite", "unittest.TestSuite", "unittest.TestSuite", "print", "unittest.TextTestRunner().run", "print", "unittest.TextTestRunner().run", "unittest.TextTestRunner().run.wasSuccessful", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromModule", "loader.loadTestsFromTestCase", "loader.loadTestsFromTestCase", "loader.loadTestsFromTestCase", "loader.loadTestsFromTestCase", "loader.loadTestsFromNames", "unittest.TextTestRunner", "unittest.TextTestRunner"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run"], ["def", "main", "(", "_", ")", ":", "\n", "  ", "loader", "=", "unittest", ".", "defaultTestLoader", "\n", "if", "FLAGS", ".", "full_tests", ":", "\n", "    ", "suite", "=", "unittest", ".", "TestSuite", "(", "[", "\n", "loader", ".", "loadTestsFromModule", "(", "allreduce_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "cnn_util_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "variable_mgr_util_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "benchmark_cnn_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "all_reduce_benchmark_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "nasnet_test", ")", ",", "\n", "]", ")", "\n", "dist_suite", "=", "unittest", ".", "TestSuite", "(", "[", "\n", "loader", ".", "loadTestsFromModule", "(", "benchmark_cnn_distributed_test", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "    ", "suite", "=", "unittest", ".", "TestSuite", "(", "[", "\n", "loader", ".", "loadTestsFromModule", "(", "allreduce_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "cnn_util_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "all_reduce_benchmark_test", ")", ",", "\n", "loader", ".", "loadTestsFromModule", "(", "variable_mgr_util_test", ")", ",", "\n", "loader", ".", "loadTestsFromTestCase", "(", "benchmark_cnn_test", ".", "TestAlexnetModel", ")", ",", "\n", "loader", ".", "loadTestsFromTestCase", "(", "benchmark_cnn_test", ".", "TfCnnBenchmarksTest", ")", ",", "\n", "loader", ".", "loadTestsFromTestCase", "(", "benchmark_cnn_test", ".", "VariableUpdateTest", ")", ",", "\n", "loader", ".", "loadTestsFromTestCase", "(", "\n", "benchmark_cnn_test", ".", "VariableMgrLocalReplicatedTest", ")", ",", "\n", "]", ")", "\n", "dist_suite", "=", "unittest", ".", "TestSuite", "(", "[", "\n", "loader", ".", "loadTestsFromNames", "(", "[", "\n", "'benchmark_cnn_distributed_test.DistributedVariableUpdateTest'", "\n", "'.testVarUpdateDefault'", ",", "\n", "\n", "'benchmark_cnn_distributed_test.TfCnnBenchmarksDistributedTest'", "\n", "'.testParameterServer'", ",", "\n", "]", ")", ",", "\n", "]", ")", "\n", "\n", "", "if", "FLAGS", ".", "run_distributed_tests", ":", "\n", "    ", "print", "(", "'Running distributed tests'", ")", "\n", "result", "=", "unittest", ".", "TextTestRunner", "(", "verbosity", "=", "2", ")", ".", "run", "(", "dist_suite", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "'Running non-distributed tests'", ")", "\n", "result", "=", "unittest", ".", "TextTestRunner", "(", "verbosity", "=", "2", ")", ".", "run", "(", "suite", ")", "\n", "", "sys", ".", "exit", "(", "not", "result", ".", "wasSuccessful", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.BatchAllReduceAlgorithm.batch_all_reduce": [[68, 149], ["batch_allreduce.BatchAllReduceAlgorithm._do_batch_all_reduce", "batch_allreduce._TensorPacker", "batch_allreduce._TensorPacker.concat_all_device_tensors", "batch_allreduce._compact_all_device_tensors", "batch_allreduce._defer_all_device_tensors", "batch_allreduce._TensorPacker.split_all_device_tensors", "batch_allreduce._TensorPacker.undo_split_all_device_tensors", "batch_allreduce._undo_compact_all_device_tensors", "batch_allreduce._TensorPacker.undo_concat_all_device_tensors", "batch_allreduce._add_put_op_control_deps"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.AllReduceSpecAlgorithm._do_batch_all_reduce", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.concat_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._compact_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._defer_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.split_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.undo_split_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._undo_compact_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.undo_concat_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._add_put_op_control_deps"], ["def", "batch_all_reduce", "(", "self", ",", "all_device_tensors", ",", "num_splits", ",", "compact_tensors", ",", "\n", "defer_tensors", ")", ":", "\n", "    ", "\"\"\"Performs a batch all-reduce.\n\n    The reduction done is a sum.\n\n    `all_device_tensors` is a list of list of tensors that will be batch\n    all-reduced. All tensors within a single inner list must be on the same\n    device. The nth element in each list, for any n, will be reduced together.\n    The return value is in the same form as `all_device_tensors`, except that\n    each tensor is reduced.\n\n    For example, if `all_device_tensors` is:\n    [[ A,  B  ],     # A and B are on GPU 0\n     [ C,  D  ]]     # C and D are on GPU 1\n\n    Then the return value will be:\n    [[ A+C,  B+D ],  # These two tensors are on GPU 0\n     [ A+C,  B+D ]]  # These two tensors are on GPU 1\n\n    Arguments:\n      all_device_tensors: A list of list of tensors. `all_device_tensors[i][j]`\n        is a tensor where `i` is the device index and `j` is the tensor index.\n      num_splits: If not None, tensors will be concatenated and split into this\n        many pieces during the all-reduce, then split back into their original\n        shapes afterwards. Has no impact on correctness and can improve\n        performance. Requires all tensors to be the same type.\n      compact_tensors: If True, tensors are casted to fp16 before being all-\n        reduced. Improves performance, but hurts numerical stability.\n      defer_tensors: If True, every time the return value\n        `reduced_all_device_tensors` is evaluated, the result will be the\n        reduced tensors values of `all_device_tensors` from the previous session\n        run instead of the current session run, or zero on the first session\n        run. This can improve performance. When training neural networks,\n        deferring gradients often does not harm training, so this can be used to\n        improve performance.\n\n    Returns:\n      reduced_all_device_tensors: A list in the same form as\n        `all_device_tensors`, except each tensor has been reduced.\n      warmup_ops: A list of ops needed to be run once before the all-reduce can\n        occur.\n    \"\"\"", "\n", "# Before all-reducing tensors, we do several preprocessing functions that", "\n", "# can speed up the all-reduce. We undo these functions after all-reducing", "\n", "# the tensors.", "\n", "warmup_ops", "=", "[", "]", "\n", "if", "num_splits", ":", "\n", "      ", "packer", "=", "_TensorPacker", "(", "num_splits", ")", "\n", "all_device_tensors", "=", "packer", ".", "concat_all_device_tensors", "(", "all_device_tensors", ")", "\n", "# If enabled, we compact and defer tensors in between concatenating them", "\n", "# and splitting them, because it is faster to do operations on a single", "\n", "# concatenated tensor than on multiple smaller tensors.", "\n", "", "if", "compact_tensors", ":", "\n", "      ", "all_device_tensors_before_compact", "=", "all_device_tensors", "\n", "all_device_tensors", "=", "_compact_all_device_tensors", "(", "all_device_tensors", ")", "\n", "", "if", "defer_tensors", ":", "\n", "      ", "all_device_tensors", ",", "put_ops", ",", "warmup_ops", "=", "_defer_all_device_tensors", "(", "\n", "all_device_tensors", ")", "\n", "", "if", "num_splits", ":", "\n", "      ", "all_device_tensors", "=", "packer", ".", "split_all_device_tensors", "(", "all_device_tensors", ")", "\n", "\n", "", "all_device_tensors", "=", "self", ".", "_do_batch_all_reduce", "(", "all_device_tensors", ")", "\n", "\n", "# Undo the preprocessing operations in opposite order as we applied them.", "\n", "if", "num_splits", ":", "\n", "      ", "all_device_tensors", "=", "packer", ".", "undo_split_all_device_tensors", "(", "\n", "all_device_tensors", ")", "\n", "# Note: There is no undo operation for deferring tensors. But we do need to", "\n", "# call _add_put_op_control_deps at the end if we deferred the tensors.", "\n", "", "if", "compact_tensors", ":", "\n", "      ", "all_device_tensors", "=", "_undo_compact_all_device_tensors", "(", "\n", "all_device_tensors", ",", "all_device_tensors_before_compact", ")", "\n", "", "if", "num_splits", ":", "\n", "      ", "all_device_tensors", "=", "packer", ".", "undo_concat_all_device_tensors", "(", "\n", "all_device_tensors", ")", "\n", "\n", "", "if", "defer_tensors", ":", "\n", "      ", "all_device_tensors", "=", "_add_put_op_control_deps", "(", "all_device_tensors", ",", "\n", "num_splits", ",", "put_ops", ")", "\n", "", "return", "all_device_tensors", ",", "warmup_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.BatchAllReduceAlgorithm._do_batch_all_reduce": [[150, 165], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_do_batch_all_reduce", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "    ", "\"\"\"Performs a batch all-reduce.\n\n    Unlike `self.batch_all_reduce`, this does not do any preprocessing of the\n    tensors.\n\n    Args:\n      all_device_tensors: A list of list of tensors. `all_device_tensors[i][j]`\n        is a tensor where `i` is the device index and `j` is the tensor index.\n    Returns:\n      reduced_all_device_tensors: A list in the same form as\n        `all_device_tensors`, except each tensor has been reduced.\n    \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.CopyToDeviceAlgorithm.__init__": [[170, 173], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "devices_to_reduce_on", ",", "use_mean", "=", "False", ")", ":", "\n", "    ", "self", ".", "_devices", "=", "devices_to_reduce_on", "\n", "self", ".", "_use_mean", "=", "use_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.CopyToDeviceAlgorithm._do_batch_all_reduce": [[174, 183], ["enumerate", "zip", "len", "tensorflow.device", "batch_allreduce._all_reduce_using_copy", "reduced_tensors.append", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._all_reduce_using_copy"], ["", "def", "_do_batch_all_reduce", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "    ", "reduced_tensors", "=", "[", "]", "\n", "for", "i", ",", "tensors_across_devices", "in", "enumerate", "(", "zip", "(", "*", "all_device_tensors", ")", ")", ":", "\n", "      ", "with", "tf", ".", "device", "(", "self", ".", "_devices", "[", "i", "%", "len", "(", "self", ".", "_devices", ")", "]", ")", ":", "\n", "        ", "reduced_tensor", "=", "_all_reduce_using_copy", "(", "tensors_across_devices", ",", "\n", "self", ".", "_use_mean", ")", "\n", "reduced_tensors", ".", "append", "(", "reduced_tensor", ")", "\n", "# The tensors will be brought back to each device once they are used.", "\n", "", "", "return", "[", "reduced_tensors", "]", "*", "len", "(", "all_device_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.HierarchicalCopyAlgorithm.__init__": [[191, 198], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "network_topology", ")", ":", "\n", "    ", "\"\"\"Initializer for HierarchicalCopyAlgorithm.\n\n    Args:\n      network_topology: An instance of Enum class constants.NetworkTopology.\n    \"\"\"", "\n", "self", ".", "_network_topology", "=", "network_topology", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.HierarchicalCopyAlgorithm._do_batch_all_reduce": [[199, 252], ["len", "enumerate", "list", "zip", "batch_allreduce.HierarchicalCopyAlgorithm.__get_main_devices", "range", "list.append", "zip", "tensorflow.device", "batch_allreduce._all_reduce_using_copy", "tensorflow.device", "batch_allreduce._all_reduce_using_copy", "tensorflow.device", "batch_allreduce._all_reduce_using_copy", "tensorflow.device", "tensorflow.identity", "tensorflow.device", "tensorflow.identity", "len", "tensorflow.device", "reduced_tensors_bcast.append", "tensorflow.identity"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.HierarchicalCopyAlgorithm.__get_main_devices", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._all_reduce_using_copy", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._all_reduce_using_copy", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._all_reduce_using_copy"], ["", "def", "_do_batch_all_reduce", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "    ", "avail_devices", "=", "[", "device_tensors", "[", "0", "]", ".", "device", "\n", "for", "device_tensors", "in", "all_device_tensors", "]", "\n", "reduced_tensors", "=", "[", "]", "\n", "num_devices", "=", "len", "(", "avail_devices", ")", "\n", "group_size", "=", "num_devices", "//", "2", "\n", "for", "i", ",", "tensors_across_devices", "in", "enumerate", "(", "zip", "(", "*", "all_device_tensors", ")", ")", ":", "\n", "      ", "group_0_main_device", ",", "group_1_main_device", "=", "self", ".", "__get_main_devices", "(", "\n", "i", ",", "num_devices", ")", "\n", "if", "group_0_main_device", "<", "group_size", ":", "\n", "        ", "group_0_begin", "=", "0", "\n", "group_1_begin", "=", "group_size", "\n", "", "else", ":", "\n", "        ", "group_0_begin", "=", "group_size", "\n", "group_1_begin", "=", "0", "\n", "\n", "# Reduce the first group.", "\n", "", "group_0_tensors", "=", "tensors_across_devices", "[", "group_0_begin", ":", "\n", "group_0_begin", "+", "group_size", "]", "\n", "with", "tf", ".", "device", "(", "avail_devices", "[", "group_0_main_device", "]", ")", ":", "\n", "        ", "group_0_reduced_tensor", "=", "_all_reduce_using_copy", "(", "group_0_tensors", ",", "False", ")", "\n", "\n", "# Reduce the second group.", "\n", "", "group_1_tensors", "=", "tensors_across_devices", "[", "group_1_begin", ":", "\n", "group_1_begin", "+", "group_size", "]", "\n", "with", "tf", ".", "device", "(", "avail_devices", "[", "group_1_main_device", "]", ")", ":", "\n", "        ", "group_1_reduced_tensor", "=", "_all_reduce_using_copy", "(", "group_1_tensors", ",", "False", ")", "\n", "\n", "# Reduce between the groups.", "\n", "", "with", "tf", ".", "device", "(", "avail_devices", "[", "group_0_main_device", "]", ")", ":", "\n", "        ", "total_reduced_tensor", "=", "_all_reduce_using_copy", "(", "\n", "[", "group_0_reduced_tensor", ",", "group_1_reduced_tensor", "]", ",", "False", ")", "\n", "\n", "# Broadcast the result back into the root of each group.", "\n", "", "with", "tf", ".", "device", "(", "avail_devices", "[", "group_0_main_device", "]", ")", ":", "\n", "        ", "group_0_reduced_tensor_bcast", "=", "tf", ".", "identity", "(", "total_reduced_tensor", ")", "\n", "", "with", "tf", ".", "device", "(", "avail_devices", "[", "group_1_main_device", "]", ")", ":", "\n", "        ", "group_1_reduced_tensor_bcast", "=", "tf", ".", "identity", "(", "total_reduced_tensor", ")", "\n", "\n", "", "reduced_tensors_bcast", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "tensors_across_devices", ")", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "avail_devices", "[", "j", "]", ")", ":", "\n", "# Broadcast the result back to each member in the group from the root.", "\n", "          ", "if", "(", "group_0_main_device", "<", "group_size", ")", "==", "(", "j", "<", "group_size", ")", ":", "\n", "            ", "src_device_tensor", "=", "group_0_reduced_tensor_bcast", "\n", "", "else", ":", "\n", "            ", "src_device_tensor", "=", "group_1_reduced_tensor_bcast", "\n", "", "reduced_tensors_bcast", ".", "append", "(", "tf", ".", "identity", "(", "src_device_tensor", ")", ")", "\n", "\n", "", "", "reduced_tensors", ".", "append", "(", "reduced_tensors_bcast", ")", "\n", "\n", "", "reduced_tensors", "=", "list", "(", "zip", "(", "*", "reduced_tensors", ")", ")", "\n", "return", "reduced_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.HierarchicalCopyAlgorithm.__get_main_devices": [[253, 285], ["ValueError", "ValueError", "len"], "methods", ["None"], ["", "def", "__get_main_devices", "(", "self", ",", "tensor_index", ",", "num_devices", ")", ":", "\n", "    ", "\"\"\"Returns the pair of main devices to use for initial reduction.\n\n    Args:\n      tensor_index: Index of the current tensor in the list of tensors to copy.\n      num_devices: Total number of devices.\n\n    Returns:\n      A tuple containing pair of main device indices for the initial\n      reduction. Then, the first element of the tuple should be used for the\n      final reduction.\n\n    Raises:\n      ValueError: Invalid input arguments.\n    \"\"\"", "\n", "if", "self", ".", "_network_topology", "==", "constants", ".", "NetworkTopology", ".", "DGX1", ":", "\n", "      ", "return", "tensor_index", "%", "num_devices", ",", "(", "tensor_index", "+", "\n", "(", "num_devices", "//", "2", ")", ")", "%", "num_devices", "\n", "", "elif", "self", ".", "_network_topology", "==", "constants", ".", "NetworkTopology", ".", "GCP_V100", ":", "\n", "      ", "if", "num_devices", "!=", "8", ":", "\n", "        ", "raise", "ValueError", "(", "'HierarchicalCopy only supports eight devices in %s.'", "%", "\n", "self", ".", "_network_topology", ")", "\n", "# TODO(hinsu): Generalize main device indices to handle any other", "\n", "# isomorphic connection graph that connects two cliques using connections", "\n", "# other than 0-5 and 2-7.", "\n", "", "main_device_pairs", "=", "[", "(", "0", ",", "5", ")", ",", "(", "2", ",", "7", ")", ",", "(", "5", ",", "0", ")", ",", "(", "7", ",", "2", ")", "]", "\n", "return", "main_device_pairs", "[", "tensor_index", "%", "len", "(", "main_device_pairs", ")", "]", "\n", "", "else", ":", "\n", "# TODO(reedwm): make this logic more general for arbitrary topology.", "\n", "      ", "raise", "ValueError", "(", "\n", "'HierarchicalCopy is not supported for %s network topology.'", "%", "\n", "self", ".", "_network_topology", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.AllReduceSpecAlgorithm.__init__": [[290, 300], ["allreduce.parse_all_reduce_spec", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.parse_all_reduce_spec"], ["def", "__init__", "(", "self", ",", "all_reduce_spec", ",", "gpu_indices", ",", "agg_small_grads_max_bytes", ",", "\n", "agg_small_grads_max_group", ")", ":", "\n", "    ", "spec", "=", "allreduce", ".", "parse_all_reduce_spec", "(", "all_reduce_spec", ")", "\n", "if", "len", "(", "spec", ")", "!=", "1", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Replicated mode does not support hybrid all-reduce strategies'", ")", "\n", "", "self", ".", "_all_reduce_spec", "=", "spec", "[", "0", "]", "\n", "self", ".", "_gpu_indices", "=", "gpu_indices", "\n", "self", ".", "_agg_small_grads_max_bytes", "=", "agg_small_grads_max_bytes", "\n", "self", ".", "_agg_small_grads_max_group", "=", "agg_small_grads_max_group", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.AllReduceSpecAlgorithm._do_batch_all_reduce": [[301, 320], ["allreduce.sum_gradients_all_reduce"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.allreduce.sum_gradients_all_reduce"], ["", "def", "_do_batch_all_reduce", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "# TODO(reedwm): Merge allreduce.sum_gradients_all_reduce with the other", "\n", "# gradient aggregation code, since gradient aggregation is doing an all", "\n", "# reduce. Currently, we do gradient repacking in two different places.", "\n", "# TODO(reedwm): Change the allreduce code to reduce tensors instead of", "\n", "# tower_grads.", "\n", "    ", "tower_grads", "=", "[", "[", "(", "t", ",", "None", ")", "for", "t", "in", "device_tensors", "]", "\n", "for", "device_tensors", "in", "all_device_tensors", "]", "\n", "aggregated_device_grads", "=", "allreduce", ".", "sum_gradients_all_reduce", "(", "\n", "False", ",", "# single_session", "\n", "[", "'/job:localhost'", "]", ",", "\n", "tower_grads", ",", "\n", "1", ",", "\n", "self", ".", "_all_reduce_spec", ".", "alg", ",", "\n", "self", ".", "_all_reduce_spec", ".", "shards", ",", "\n", "self", ".", "_gpu_indices", ",", "\n", "agg_small_grads_max_bytes", "=", "self", ".", "_agg_small_grads_max_bytes", ",", "\n", "agg_small_grads_max_group", "=", "self", ".", "_agg_small_grads_max_group", ")", "\n", "return", "[", "[", "t", "for", "t", ",", "_", "in", "grad_vars", "]", "for", "grad_vars", "in", "aggregated_device_grads", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.__init__": [[475, 485], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_splits", ")", ":", "\n", "    ", "\"\"\"Initializes the _TensorPacker.\n\n    Args:\n      num_splits: The number of tensors to split the concatenated tensor into.\n        The batch all-reduce will consist of `num_splits` all-reduces.\n    \"\"\"", "\n", "assert", "num_splits", ">", "0", "\n", "self", ".", "_num_splits", "=", "num_splits", "\n", "self", ".", "_next_method", "=", "'concat'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._concat_tensors": [[489, 498], ["tensorflow.concat", "tensorflow.reshape", "s.num_elements", "batch_allreduce._TensorPacker._concat_tensor_state"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["def", "_concat_tensors", "(", "self", ",", "device_tensors", ")", ":", "\n", "    ", "\"\"\"Concatenate tensors into a single tensor.\"\"\"", "\n", "flat_tensors", "=", "[", "tf", ".", "reshape", "(", "t", ",", "[", "-", "1", "]", ")", "for", "t", "in", "device_tensors", "]", "\n", "orig_shapes", "=", "[", "t", ".", "shape", "for", "t", "in", "device_tensors", "]", "\n", "orig_sizes", "=", "[", "s", ".", "num_elements", "(", ")", "for", "s", "in", "orig_shapes", "]", "\n", "# All shapes must be fully defined.", "\n", "assert", "None", "not", "in", "orig_sizes", "\n", "concatenated_grad", "=", "tf", ".", "concat", "(", "flat_tensors", ",", "0", ")", "\n", "return", "concatenated_grad", ",", "self", ".", "_concat_tensor_state", "(", "orig_shapes", ",", "orig_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._split_tensors": [[499, 511], ["concatenated_tensor.shape.num_elements", "tensorflow.split"], "methods", ["None"], ["", "def", "_split_tensors", "(", "self", ",", "concatenated_tensor", ")", ":", "\n", "    ", "\"\"\"Splits concatenated tensor into `num_splits` pieces.\"\"\"", "\n", "# TODO(zhengxq): it is possible to optimize away the additional", "\n", "# data movement by copying along the original tensor boundary.", "\n", "# TODO(zhengxq): it is also possible to optimize away all the concat", "\n", "# as well.", "\n", "total_tensor_size", "=", "concatenated_tensor", ".", "shape", ".", "num_elements", "(", ")", "\n", "split_size", "=", "total_tensor_size", "//", "self", ".", "_num_splits", "\n", "split_size_last", "=", "total_tensor_size", "-", "split_size", "*", "(", "self", ".", "_num_splits", "-", "1", ")", "\n", "split_sizes", "=", "[", "split_size", "]", "*", "(", "self", ".", "_num_splits", "-", "1", ")", "+", "[", "split_size_last", "]", "\n", "tensor_packs", "=", "tf", ".", "split", "(", "concatenated_tensor", ",", "split_sizes", ")", "\n", "return", "tensor_packs", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._undo_split_tensors": [[512, 515], ["tensorflow.concat"], "methods", ["None"], ["", "def", "_undo_split_tensors", "(", "self", ",", "tensor_packs", ")", ":", "\n", "    ", "\"\"\"Undoes self._split_tensors().\"\"\"", "\n", "return", "tf", ".", "concat", "(", "tensor_packs", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._undo_concat_tensors": [[516, 526], ["tensorflow.split", "tensorflow.reshape", "zip"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape"], ["", "def", "_undo_concat_tensors", "(", "self", ",", "concatenated_tensor", ",", "concat_tensor_state", ")", ":", "\n", "    ", "\"\"\"Undoes self._concat_tensors().\"\"\"", "\n", "tensors_with_sizes", "=", "tf", ".", "split", "(", "concatenated_tensor", ",", "\n", "concat_tensor_state", ".", "orig_sizes", ")", "\n", "tensors_with_shapes", "=", "[", "\n", "tf", ".", "reshape", "(", "grad", ",", "shape", ")", "\n", "for", "grad", ",", "shape", "in", "zip", "(", "tensors_with_sizes", ",", "\n", "concat_tensor_state", ".", "orig_shapes", ")", "\n", "]", "\n", "return", "tensors_with_shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.concat_all_device_tensors": [[527, 550], ["tensorflow.colocate_with", "batch_allreduce._TensorPacker._concat_tensors", "new_all_device_tensors.append", "tensor_states.append"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._concat_tensors"], ["", "def", "concat_all_device_tensors", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "    ", "\"\"\"For each device, concatenate the device's tensors into a single tensor.\n\n    Args:\n      all_device_tensors: A list of list of tensors. `all_device_tensors[i][j]`\n        is a tensor where `i` is the device index and `j` is the tensor index.\n\n    Returns:\n      A list of list of tensors in a similar form as all_device_tensors, except\n      the tensors on each device have been concatenated. Each inner list\n      consists of a single concatenated tensor.\n    \"\"\"", "\n", "assert", "self", ".", "_next_method", "==", "'concat'", "\n", "new_all_device_tensors", "=", "[", "]", "\n", "tensor_states", "=", "[", "]", "\n", "for", "device_tensors", "in", "all_device_tensors", ":", "\n", "      ", "with", "tf", ".", "colocate_with", "(", "device_tensors", "[", "0", "]", ")", ":", "\n", "        ", "concat_tensor", ",", "tensor_state", "=", "self", ".", "_concat_tensors", "(", "device_tensors", ")", "\n", "new_all_device_tensors", ".", "append", "(", "[", "concat_tensor", "]", ")", "\n", "tensor_states", ".", "append", "(", "tensor_state", ")", "\n", "", "", "self", ".", "_tensor_states", "=", "tensor_states", "\n", "self", ".", "_next_method", "=", "'split'", "\n", "return", "new_all_device_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.split_all_device_tensors": [[551, 577], ["tensorflow.colocate_with", "new_all_device_tensors.append", "batch_allreduce._TensorPacker._split_tensors"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._split_tensors"], ["", "def", "split_all_device_tensors", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "    ", "\"\"\"Splits concatenated tensors into `num_splits` pieces.\n\n    `num_splits` is specified in the constructor.  In the case where the total\n    size of a concatenated tensor is not divisible by `num_splits`, the last\n    split tensor gets more elements.\n\n    Args:\n      all_device_tensors: A list of list of tensors. `all_device_tensors[i][j]`\n        is a tensor where `i` is the device index and `j` is the tensor index.\n        For each i, `all_device_tensors[i]` must be a list of length 1 of a\n        single concatenated tensor.\n\n    Returns:\n      A list of list of tensors in a similar form as all_device_tensors, except\n      the concatenated tensor on each device have been split. Each inner list\n      is a list of length `num_splits`.\n    \"\"\"", "\n", "assert", "self", ".", "_next_method", "==", "'split'", "\n", "new_all_device_tensors", "=", "[", "]", "\n", "for", "[", "concat_tensor", "]", "in", "all_device_tensors", ":", "\n", "      ", "with", "tf", ".", "colocate_with", "(", "concat_tensor", ")", ":", "\n", "        ", "new_all_device_tensors", ".", "append", "(", "self", ".", "_split_tensors", "(", "concat_tensor", ")", ")", "\n", "", "", "self", ".", "_orig_concat_all_device_tensors", "=", "all_device_tensors", "\n", "self", ".", "_next_method", "=", "'undo_split'", "\n", "return", "new_all_device_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.undo_split_all_device_tensors": [[578, 589], ["enumerate", "tensorflow.colocate_with", "new_all_device_tensors.append", "batch_allreduce._TensorPacker._undo_split_tensors"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._undo_split_tensors"], ["", "def", "undo_split_all_device_tensors", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "    ", "\"\"\"Undoes the effects of `split_all_device_tensors`.\"\"\"", "\n", "assert", "self", ".", "_next_method", "==", "'undo_split'", "\n", "new_all_device_tensors", "=", "[", "]", "\n", "for", "i", ",", "device_tensors", "in", "enumerate", "(", "all_device_tensors", ")", ":", "\n", "      ", "[", "orig_tensor", "]", "=", "self", ".", "_orig_concat_all_device_tensors", "[", "i", "]", "\n", "with", "tf", ".", "colocate_with", "(", "orig_tensor", ")", ":", "\n", "        ", "new_all_device_tensors", ".", "append", "(", "\n", "[", "self", ".", "_undo_split_tensors", "(", "device_tensors", ")", "]", ")", "\n", "", "", "self", ".", "_next_method", "=", "'undo_concat'", "\n", "return", "new_all_device_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker.undo_concat_all_device_tensors": [[590, 601], ["zip", "tensorflow.colocate_with", "new_all_device_tensors.append", "batch_allreduce._TensorPacker._undo_concat_tensors"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._TensorPacker._undo_concat_tensors"], ["", "def", "undo_concat_all_device_tensors", "(", "self", ",", "all_device_tensors", ")", ":", "\n", "    ", "\"\"\"Undoes the effects of `concat_all_device_tensors`.\"\"\"", "\n", "assert", "self", ".", "_next_method", "==", "'undo_concat'", "\n", "new_all_device_tensors", "=", "[", "]", "\n", "for", "[", "concat_tensor", "]", ",", "tensor_state", "in", "zip", "(", "all_device_tensors", ",", "\n", "self", ".", "_tensor_states", ")", ":", "\n", "      ", "with", "tf", ".", "colocate_with", "(", "concat_tensor", ")", ":", "\n", "        ", "new_all_device_tensors", ".", "append", "(", "self", ".", "_undo_concat_tensors", "(", "concat_tensor", ",", "\n", "tensor_state", ")", ")", "\n", "", "", "self", ".", "_next_method", "=", "None", "\n", "return", "new_all_device_tensors", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._all_reduce_using_copy": [[47, 62], ["tensorflow.add_n", "len"], "function", ["None"], ["def", "_all_reduce_using_copy", "(", "tensors_across_devices", ",", "use_mean", ")", ":", "\n", "  ", "\"\"\"Does an all-reduce of a list of tensors by copying to the current device.\n\n  The tensors are copied to the current device and then reduced.\n\n  Args:\n    tensors_across_devices: A list of tensors, each on a different device.\n    use_mean: Whether to take the mean of the tensors instead of a sum:\n  Returns:\n    A reduced tensor on the current device.\n  \"\"\"", "\n", "reduced_tensor", "=", "tf", ".", "add_n", "(", "tensors_across_devices", ")", "\n", "if", "use_mean", ":", "\n", "    ", "reduced_tensor", "*=", "1", "/", "len", "(", "tensors_across_devices", ")", "\n", "", "return", "reduced_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce.algorithm_from_params": [[322, 340], ["batch_allreduce.AllReduceSpecAlgorithm", "batch_allreduce.HierarchicalCopyAlgorithm", "batch_allreduce.CopyToDeviceAlgorithm", "int", "params.gpu_indices.split", "range", "range"], "function", ["None"], ["", "", "def", "algorithm_from_params", "(", "params", ")", ":", "\n", "  ", "\"\"\"Returns a BatchAllReduceAlgorithm from a Params tuple.\"\"\"", "\n", "if", "params", ".", "all_reduce_spec", ":", "\n", "    ", "if", "params", ".", "gpu_indices", ":", "\n", "      ", "gpu_indices", "=", "[", "int", "(", "x", ")", "for", "x", "in", "params", ".", "gpu_indices", ".", "split", "(", "','", ")", "]", "\n", "", "else", ":", "\n", "      ", "gpu_indices", "=", "[", "x", "for", "x", "in", "range", "(", "params", ".", "num_gpus", ")", "]", "\n", "", "return", "AllReduceSpecAlgorithm", "(", "params", ".", "all_reduce_spec", ",", "gpu_indices", ",", "\n", "params", ".", "agg_small_grads_max_bytes", ",", "\n", "params", ".", "agg_small_grads_max_group", ")", "\n", "", "elif", "params", ".", "hierarchical_copy", ":", "\n", "    ", "return", "HierarchicalCopyAlgorithm", "(", "params", ".", "network_topology", ")", "\n", "", "else", ":", "\n", "    ", "if", "params", ".", "local_parameter_device", "==", "'gpu'", ":", "\n", "      ", "devices_to_reduce_on", "=", "[", "'/gpu:%d'", "%", "i", "for", "i", "in", "range", "(", "params", ".", "num_gpus", ")", "]", "\n", "", "else", ":", "\n", "      ", "devices_to_reduce_on", "=", "[", "'/cpu:0'", "]", "\n", "", "return", "CopyToDeviceAlgorithm", "(", "devices_to_reduce_on", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._apply_to_all_device_tensors": [[342, 373], ["enumerate", "enumerate", "new_all_device_tensors.append", "new_device_tensors.append", "batch_allreduce._defer_all_device_tensors.apply_func", "tensorflow.colocate_with", "batch_allreduce._defer_all_device_tensors.apply_func"], "function", ["None"], ["", "", "def", "_apply_to_all_device_tensors", "(", "all_device_tensors", ",", "apply_func", ",", "colocate", "=", "True", ")", ":", "\n", "  ", "\"\"\"Applies a function to each tensor in `all_device_tensors`.\n\n  A new list of lists of tensors is returned, where every tensor in\n  `all_device_tensors` has had `apply_func` called on it. `all_device_tensors`\n  is not modified.\n\n  Args:\n    all_device_tensors: A list of list of tensors. `all_device_tensors[i][j]` is\n      a tensor where `i` is the device index and `j` is the tensor index.\n    apply_func: A function taking in three arguments: tensor, device_index,\n      tensor_index, and returning a modified tensor.\n      `tensor` is `all_device_tensors[device_index][tensor_index]`.\n    colocate: If True, apply_func will be run under context manager colocated\n      with it's input tensor.\n  Returns:\n    A list in the same form as `all_device_tensors`, except each tensor has had\n    `apply_func` called on it.\n  \"\"\"", "\n", "new_all_device_tensors", "=", "[", "]", "\n", "for", "device_index", ",", "device_tensors", "in", "enumerate", "(", "all_device_tensors", ")", ":", "\n", "    ", "new_device_tensors", "=", "[", "]", "\n", "for", "tensor_index", ",", "t", "in", "enumerate", "(", "device_tensors", ")", ":", "\n", "      ", "if", "colocate", ":", "\n", "        ", "with", "tf", ".", "colocate_with", "(", "t", ")", ":", "\n", "          ", "new_t", "=", "apply_func", "(", "t", ",", "device_index", ",", "tensor_index", ")", "\n", "", "", "else", ":", "\n", "        ", "new_t", "=", "apply_func", "(", "t", ",", "device_index", ",", "tensor_index", ")", "\n", "", "new_device_tensors", ".", "append", "(", "new_t", ")", "\n", "", "new_all_device_tensors", ".", "append", "(", "new_device_tensors", ")", "\n", "", "return", "new_all_device_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._defer_tensor": [[375, 400], ["tensorflow.python.ops.data_flow_ops.StagingArea", "data_flow_ops.StagingArea.put", "data_flow_ops.StagingArea.put", "data_flow_ops.StagingArea.get", "tensorflow.zeros"], "function", ["None"], ["", "def", "_defer_tensor", "(", "tensor", ")", ":", "\n", "  ", "\"\"\"Defers the retrieval of a tensor.\n\n  The tensor is put into a StagingArea, and the return value is the\n  retrieval of the tensor from the StagingArea. The effect is that the\n  tensor returned from this function is the tensor that was put in the\n  StagingArea for the previous Session.run() call.\n\n  Args:\n    tensor: The tensor to defer for one step.\n\n  Returns:\n    deferred_tensor: The tensor deferred for one step.\n    put_op: An op to put `tensor` in the StagingArea. Must be run every step\n      that `deferred_tensor` is run.\n    warmup_op: A warmup op that should be called before the first step. Puts\n      a zero tensor into the StagingArea.\n  \"\"\"", "\n", "tensor_stage", "=", "data_flow_ops", ".", "StagingArea", "(", "[", "tensor", ".", "dtype", "]", ",", "[", "tensor", ".", "shape", "]", ")", "\n", "put_op", "=", "tensor_stage", ".", "put", "(", "[", "tensor", "]", ")", "\n", "warmup_op", "=", "tensor_stage", ".", "put", "(", "[", "tf", ".", "zeros", "(", "tensor", ".", "shape", ",", "dtype", "=", "tensor", ".", "dtype", ")", "]", ")", "\n", "\n", "# Fetch the next tensor to use.", "\n", "(", "tensor", ",", ")", "=", "tensor_stage", ".", "get", "(", ")", "\n", "return", "tensor", ",", "put_op", ",", "warmup_op", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._defer_all_device_tensors": [[402, 415], ["batch_allreduce._apply_to_all_device_tensors", "batch_allreduce._defer_tensor", "put_ops[].append", "warmup_ops[].append"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._apply_to_all_device_tensors", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._defer_tensor"], ["", "def", "_defer_all_device_tensors", "(", "all_device_tensors", ")", ":", "\n", "  ", "\"\"\"Defers every tensor in `all_device_tensors`.\"\"\"", "\n", "put_ops", "=", "[", "[", "]", "for", "_", "in", "all_device_tensors", "]", "\n", "warmup_ops", "=", "[", "[", "]", "for", "_", "in", "all_device_tensors", "]", "\n", "def", "apply_func", "(", "tensor", ",", "device_index", ",", "tensor_index", ")", ":", "\n", "    ", "del", "tensor_index", "\n", "tensor", ",", "put_op", ",", "warmup_op", "=", "_defer_tensor", "(", "tensor", ")", "\n", "put_ops", "[", "device_index", "]", ".", "append", "(", "put_op", ")", "\n", "warmup_ops", "[", "device_index", "]", ".", "append", "(", "warmup_op", ")", "\n", "return", "tensor", "\n", "", "new_all_device_tensors", "=", "_apply_to_all_device_tensors", "(", "all_device_tensors", ",", "\n", "apply_func", ")", "\n", "return", "new_all_device_tensors", ",", "put_ops", ",", "warmup_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._add_put_op_control_deps": [[417, 445], ["batch_allreduce._apply_to_all_device_tensors", "len", "tensorflow.control_dependencies", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._apply_to_all_device_tensors"], ["", "def", "_add_put_op_control_deps", "(", "all_device_tensors", ",", "num_splits", ",", "put_ops", ")", ":", "\n", "  ", "\"\"\"Add control dependencies from `put_ops` to `all_device_tensors`.\n\n  This should only be called when deferred tensors are being used.\n\n  The control dependencies are added so that the put ops are run whenever\n  `all_device_tensors` is run. That way, the caller does not have to explicitly\n  run the put ops.\n\n  Args:\n    all_device_tensors: A list of list of tensors. `all_device_tensors[i][j]` is\n      a tensor where `i` is the device index and `j` is the tensor index.\n    num_splits: The number of splits that were used for the all-reduce.\n    put_ops: A list of put ops from deferring the tensors.\n  Returns:\n    A list in the same form as `all_device_tensors`, except each tensor has a\n    control dependency on an op in `put_ops`.\n\n  \"\"\"", "\n", "def", "apply_func", "(", "tensor", ",", "device_index", ",", "tensor_index", ")", ":", "\n", "    ", "if", "num_splits", "==", "0", ":", "\n", "      ", "deps", "=", "[", "put_ops", "[", "device_index", "]", "[", "tensor_index", "]", "]", "\n", "", "else", ":", "\n", "      ", "deps", "=", "put_ops", "[", "device_index", "]", "\n", "", "assert", "len", "(", "deps", ")", "==", "1", "\n", "with", "tf", ".", "control_dependencies", "(", "deps", ")", ":", "\n", "      ", "return", "tf", ".", "identity", "(", "tensor", ",", "name", "=", "'control_dependency'", ")", "\n", "", "", "return", "_apply_to_all_device_tensors", "(", "all_device_tensors", ",", "apply_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._compact_all_device_tensors": [[447, 453], ["batch_allreduce._apply_to_all_device_tensors", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._apply_to_all_device_tensors"], ["", "def", "_compact_all_device_tensors", "(", "all_device_tensors", ")", ":", "\n", "  ", "\"\"\"Compacts each tensor by casting to fp16.\"\"\"", "\n", "def", "apply_func", "(", "tensor", ",", "device_index", ",", "tensor_index", ")", ":", "\n", "    ", "del", "device_index", ",", "tensor_index", "\n", "return", "tf", ".", "cast", "(", "tensor", ",", "tf", ".", "float16", ")", "\n", "", "return", "_apply_to_all_device_tensors", "(", "all_device_tensors", ",", "apply_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._undo_compact_all_device_tensors": [[455, 464], ["batch_allreduce._apply_to_all_device_tensors", "tensorflow.colocate_with", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.batch_allreduce._apply_to_all_device_tensors"], ["", "def", "_undo_compact_all_device_tensors", "(", "all_device_tensors", ",", "\n", "orig_all_device_tensors", ")", ":", "\n", "  ", "\"\"\"Uncompacts each tensor by casting to it's original dtype.\"\"\"", "\n", "def", "apply_func", "(", "tensor", ",", "device_index", ",", "tensor_index", ")", ":", "\n", "    ", "orig_tensor", "=", "orig_all_device_tensors", "[", "device_index", "]", "[", "tensor_index", "]", "\n", "with", "tf", ".", "colocate_with", "(", "orig_tensor", ")", ":", "\n", "      ", "return", "tf", ".", "cast", "(", "tensor", ",", "orig_tensor", ".", "dtype", ")", "\n", "", "", "return", "_apply_to_all_device_tensors", "(", "all_device_tensors", ",", "apply_func", ",", "\n", "colocate", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.__init__": [[37, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "height", "=", "None", ",", "width", "=", "None", ",", "depth", "=", "None", ",", "data_dir", "=", "None", ",", "\n", "queue_runner_required", "=", "False", ",", "num_classes", "=", "1001", ")", ":", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "depth", "=", "depth", "or", "3", "\n", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "_queue_runner_required", "=", "queue_runner_required", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.tf_record_pattern": [[48, 50], ["os.path.join"], "methods", ["None"], ["", "def", "tf_record_pattern", "(", "self", ",", "subset", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s-*-of-*'", "%", "subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.reader": [[51, 53], ["tensorflow.TFRecordReader"], "methods", ["None"], ["", "def", "reader", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "TFRecordReader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.num_classes": [[58, 61], ["None"], "methods", ["None"], ["", "@", "num_classes", ".", "setter", "\n", "def", "num_classes", "(", "self", ",", "val", ")", ":", "\n", "    ", "self", ".", "_num_classes", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.num_examples_per_epoch": [[62, 65], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "num_examples_per_epoch", "(", "self", ",", "subset", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.__str__": [[66, 68], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.get_image_preprocessor": [[69, 73], ["datasets.Dataset.use_synthetic_gpu_images"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.use_synthetic_gpu_images"], ["", "def", "get_image_preprocessor", "(", "self", ",", "input_preprocessor", "=", "'default'", ")", ":", "\n", "    ", "if", "self", ".", "use_synthetic_gpu_images", "(", ")", ":", "\n", "      ", "return", "preprocessing", ".", "SyntheticImagePreprocessor", "\n", "", "return", "_SUPPORTED_INPUT_PREPROCESSORS", "[", "self", ".", "name", "]", "[", "input_preprocessor", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.queue_runner_required": [[74, 76], ["None"], "methods", ["None"], ["", "def", "queue_runner_required", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_queue_runner_required", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Dataset.use_synthetic_gpu_images": [[77, 79], ["None"], "methods", ["None"], ["", "def", "use_synthetic_gpu_images", "(", "self", ")", ":", "\n", "    ", "return", "not", "self", ".", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.ImagenetData.__init__": [[84, 86], ["datasets.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", "=", "None", ")", ":", "\n", "    ", "super", "(", "ImagenetData", ",", "self", ")", ".", "__init__", "(", "'imagenet'", ",", "300", ",", "300", ",", "data_dir", "=", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.ImagenetData.num_examples_per_epoch": [[87, 94], ["ValueError"], "methods", ["None"], ["", "def", "num_examples_per_epoch", "(", "self", ",", "subset", "=", "'train'", ")", ":", "\n", "    ", "if", "subset", "==", "'train'", ":", "\n", "      ", "return", "IMAGENET_NUM_TRAIN_IMAGES", "\n", "", "elif", "subset", "==", "'validation'", ":", "\n", "      ", "return", "IMAGENET_NUM_VAL_IMAGES", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid data subset \"%s\"'", "%", "subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Cifar10Data.__init__": [[102, 106], ["datasets.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", "=", "None", ")", ":", "\n", "    ", "super", "(", "Cifar10Data", ",", "self", ")", ".", "__init__", "(", "'cifar10'", ",", "32", ",", "32", ",", "data_dir", "=", "data_dir", ",", "\n", "queue_runner_required", "=", "True", ",", "\n", "num_classes", "=", "11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Cifar10Data.read_data_files": [[107, 130], ["numpy.concatenate().astype", "numpy.concatenate", "os.path.join", "ValueError", "tensorflow.python.platform.gfile.Open", "inputs.append", "numpy.concatenate", "six.moves.xrange", "os.path.join", "six.moves.cPickle.load"], "methods", ["None"], ["", "def", "read_data_files", "(", "self", ",", "subset", "=", "'train'", ")", ":", "\n", "    ", "\"\"\"Reads from data file and returns images and labels in a numpy array.\"\"\"", "\n", "assert", "self", ".", "data_dir", ",", "(", "'Cannot call `read_data_files` when using synthetic '", "\n", "'data'", ")", "\n", "if", "subset", "==", "'train'", ":", "\n", "      ", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'data_batch_%d'", "%", "i", ")", "\n", "for", "i", "in", "xrange", "(", "1", ",", "6", ")", "]", "\n", "", "elif", "subset", "==", "'validation'", ":", "\n", "      ", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'test_batch'", ")", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid data subset \"%s\"'", "%", "subset", ")", "\n", "\n", "", "inputs", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "      ", "with", "gfile", ".", "Open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "inputs", ".", "append", "(", "cPickle", ".", "load", "(", "f", ")", ")", "\n", "# See http://www.cs.toronto.edu/~kriz/cifar.html for a description of the", "\n", "# input format.", "\n", "", "", "all_images", "=", "np", ".", "concatenate", "(", "\n", "[", "each_input", "[", "'data'", "]", "for", "each_input", "in", "inputs", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "\n", "[", "each_input", "[", "'labels'", "]", "for", "each_input", "in", "inputs", "]", ")", "\n", "return", "all_images", ",", "all_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.Cifar10Data.num_examples_per_epoch": [[131, 138], ["ValueError"], "methods", ["None"], ["", "def", "num_examples_per_epoch", "(", "self", ",", "subset", "=", "'train'", ")", ":", "\n", "    ", "if", "subset", "==", "'train'", ":", "\n", "      ", "return", "50000", "\n", "", "elif", "subset", "==", "'validation'", ":", "\n", "      ", "return", "10000", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid data subset \"%s\"'", "%", "subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.datasets.create_dataset": [[156, 176], ["ValueError", "ValueError", "sorted", "_SUPPORTED_DATASETS.keys"], "function", ["None"], ["def", "create_dataset", "(", "data_dir", ",", "data_name", ")", ":", "\n", "  ", "\"\"\"Create a Dataset instance based on data_dir and data_name.\"\"\"", "\n", "if", "not", "data_dir", "and", "not", "data_name", ":", "\n", "# When using synthetic data, use synthetic imagenet images by default.", "\n", "    ", "data_name", "=", "'imagenet'", "\n", "\n", "# Infere dataset name from data_dir if data_name is not provided.", "\n", "", "if", "data_name", "is", "None", ":", "\n", "    ", "for", "supported_name", "in", "_SUPPORTED_DATASETS", ":", "\n", "      ", "if", "supported_name", "in", "data_dir", ":", "\n", "        ", "data_name", "=", "supported_name", "\n", "break", "\n", "", "", "else", ":", "# Failed to identify dataset name from data dir.", "\n", "      ", "raise", "ValueError", "(", "'Could not identify name of dataset. '", "\n", "'Please specify with --data_name option.'", ")", "\n", "", "", "if", "data_name", "not", "in", "_SUPPORTED_DATASETS", ":", "\n", "    ", "raise", "ValueError", "(", "'Unknown dataset. Must be one of %s'", ",", "', '", ".", "join", "(", "\n", "[", "key", "for", "key", "in", "sorted", "(", "_SUPPORTED_DATASETS", ".", "keys", "(", ")", ")", "]", ")", ")", "\n", "\n", "", "return", "_SUPPORTED_DATASETS", "[", "data_name", "]", "(", "data_dir", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.define_platform_params": [[28, 34], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_cluster_manager": [[36, 39], ["cnn_util.GrpcClusterManager"], "function", ["None"], []], "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_command_to_run_python_module": [[41, 48], ["ValueError", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_output_dir": [[50, 57], ["os.environ.get", "tempfile.mkdtemp", "os.path.exists", "os.mkdir"], "function", ["None"], []], "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.get_test_data_dir": [[59, 62], ["os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util._initialize": [[64, 67], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.z-x-yang_GCT.default.util.initialize": [[72, 78], ["util._initialize"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.default.util._initialize"], []], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.ResnetModel.__init__": [[256, 274], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "layer_counts", ")", ":", "\n", "    ", "default_batch_sizes", "=", "{", "\n", "'resnet50'", ":", "64", ",", "\n", "'resnet101'", ":", "32", ",", "\n", "'resnet152'", ":", "32", ",", "\n", "'resnet50_v2'", ":", "64", ",", "\n", "'resnet101_v2'", ":", "32", ",", "\n", "'resnet152_v2'", ":", "32", ",", "\n", "}", "\n", "batch_size", "=", "256", "\n", "super", "(", "ResnetModel", ",", "self", ")", ".", "__init__", "(", "model", ",", "224", ",", "batch_size", ",", "0.1", ",", "\n", "layer_counts", ")", "\n", "if", "'v2'", "in", "model", ":", "\n", "      ", "self", ".", "version", "=", "'v2'", "\n", "", "elif", "'v1.5'", "in", "model", ":", "\n", "      ", "self", ".", "version", "=", "'v1.5'", "\n", "", "else", ":", "\n", "      ", "self", ".", "version", "=", "'v1'", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.ResnetModel.add_inference": [[275, 297], ["cnn.conv", "cnn.mpool", "six.moves.xrange", "six.moves.xrange", "six.moves.xrange", "six.moves.xrange", "cnn.spatial_mean", "ValueError", "resnet_model.bottleneck_block", "resnet_model.bottleneck_block", "resnet_model.bottleneck_block", "resnet_model.bottleneck_block", "cnn.batch_norm", "tensorflow.nn.relu", "resnet_model.ResnetModel.get_model"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.spatial_mean", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model"], ["", "", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "if", "self", ".", "layer_counts", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Layer counts not specified for %s'", "%", "self", ".", "get_model", "(", ")", ")", "\n", "", "cnn", ".", "use_batch_norm", "=", "True", "\n", "cnn", ".", "batch_norm_config", "=", "{", "'decay'", ":", "0.9", ",", "'epsilon'", ":", "1e-5", ",", "'scale'", ":", "True", "}", "\n", "cnn", ".", "conv", "(", "64", ",", "7", ",", "7", ",", "2", ",", "2", ",", "mode", "=", "'SAME_RESNET'", ",", "use_batch_norm", "=", "True", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'SAME'", ")", "\n", "for", "_", "in", "xrange", "(", "self", ".", "layer_counts", "[", "0", "]", ")", ":", "\n", "      ", "bottleneck_block", "(", "cnn", ",", "256", ",", "64", ",", "1", ",", "self", ".", "version", ")", "\n", "", "for", "i", "in", "xrange", "(", "self", ".", "layer_counts", "[", "1", "]", ")", ":", "\n", "      ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "bottleneck_block", "(", "cnn", ",", "512", ",", "128", ",", "stride", ",", "self", ".", "version", ")", "\n", "", "for", "i", "in", "xrange", "(", "self", ".", "layer_counts", "[", "2", "]", ")", ":", "\n", "      ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "bottleneck_block", "(", "cnn", ",", "1024", ",", "256", ",", "stride", ",", "self", ".", "version", ")", "\n", "", "for", "i", "in", "xrange", "(", "self", ".", "layer_counts", "[", "3", "]", ")", ":", "\n", "      ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "bottleneck_block", "(", "cnn", ",", "2048", ",", "512", ",", "stride", ",", "self", ".", "version", ")", "\n", "", "if", "self", ".", "version", ":", "\n", "      ", "cnn", ".", "batch_norm", "(", ")", "\n", "cnn", ".", "top_layer", "=", "tf", ".", "nn", ".", "relu", "(", "cnn", ".", "top_layer", ")", "\n", "", "cnn", ".", "spatial_mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.ResnetModel.get_learning_rate": [[298, 317], ["print", "print", "print", "tensorflow.train.piecewise_constant", "int", "tensorflow.cond", "float", "int"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "(", "\n", "float", "(", "datasets", ".", "IMAGENET_NUM_TRAIN_IMAGES", ")", "/", "batch_size", ")", "\n", "boundaries", "=", "[", "int", "(", "num_batches_per_epoch", "*", "x", ")", "for", "x", "in", "[", "30", ",", "60", ",", "90", ",", "100", "]", "]", "\n", "\n", "rescaled_lr", "=", "self", ".", "learning_rate", "/", "self", ".", "default_batch_size", "*", "batch_size", "\n", "print", "(", "'Init LR: '", ",", "rescaled_lr", ")", "\n", "rescaled_lr", "=", "rescaled_lr", "/", "(", "batch_size", "/", "self", ".", "batch_size", ")", "\n", "print", "(", "'GPU Num: '", ",", "batch_size", "/", "self", ".", "batch_size", ")", "\n", "print", "(", "'Batch size: '", ",", "batch_size", ")", "\n", "values", "=", "[", "1", ",", "0.1", ",", "0.01", ",", "0.001", ",", "0.0001", "]", "\n", "values", "=", "[", "rescaled_lr", "*", "v", "for", "v", "in", "values", "]", "\n", "lr", "=", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n", "warmup_steps", "=", "int", "(", "num_batches_per_epoch", ")", "\n", "\n", "warmup_lr", "=", "lr", "*", "0.1", "\n", "\n", "return", "tf", ".", "cond", "(", "global_step", "<", "warmup_steps", ",", "lambda", ":", "warmup_lr", ",", "lambda", ":", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.ResnetCifar10Model.__init__": [[357, 364], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "layer_counts", ")", ":", "\n", "    ", "if", "'v2'", "in", "model", ":", "\n", "      ", "self", ".", "version", "=", "'v2'", "\n", "", "else", ":", "\n", "      ", "self", ".", "version", "=", "'v1'", "\n", "", "super", "(", "ResnetCifar10Model", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "32", ",", "128", ",", "0.1", ",", "layer_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.ResnetCifar10Model.add_inference": [[365, 391], ["six.moves.xrange", "six.moves.xrange", "six.moves.xrange", "cnn.spatial_mean", "ValueError", "cnn.conv", "cnn.conv", "resnet_model.residual_block", "resnet_model.residual_block", "resnet_model.residual_block", "cnn.batch_norm", "tensorflow.nn.relu", "resnet_model.ResnetCifar10Model.get_model"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.spatial_mean", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.residual_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.residual_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.residual_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "if", "self", ".", "layer_counts", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Layer counts not specified for %s'", "%", "self", ".", "get_model", "(", ")", ")", "\n", "\n", "", "cnn", ".", "use_batch_norm", "=", "True", "\n", "cnn", ".", "batch_norm_config", "=", "{", "'decay'", ":", "0.9", ",", "'epsilon'", ":", "1e-5", ",", "'scale'", ":", "True", "}", "\n", "if", "self", ".", "version", "==", "'v2'", ":", "\n", "      ", "cnn", ".", "conv", "(", "16", ",", "3", ",", "3", ",", "1", ",", "1", ",", "use_batch_norm", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "cnn", ".", "conv", "(", "16", ",", "3", ",", "3", ",", "1", ",", "1", ",", "activation", "=", "None", ",", "use_batch_norm", "=", "True", ")", "\n", "", "for", "i", "in", "xrange", "(", "self", ".", "layer_counts", "[", "0", "]", ")", ":", "\n", "# reshape to batch_size x 16 x 32 x 32", "\n", "      ", "residual_block", "(", "cnn", ",", "16", ",", "1", ",", "self", ".", "version", ")", "\n", "", "for", "i", "in", "xrange", "(", "self", ".", "layer_counts", "[", "1", "]", ")", ":", "\n", "# Subsampling is performed at the first convolution with a stride of 2", "\n", "      ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "# reshape to batch_size x 32 x 16 x 16", "\n", "residual_block", "(", "cnn", ",", "32", ",", "stride", ",", "self", ".", "version", ")", "\n", "", "for", "i", "in", "xrange", "(", "self", ".", "layer_counts", "[", "2", "]", ")", ":", "\n", "      ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "# reshape to batch_size x 64 x 8 x 8", "\n", "residual_block", "(", "cnn", ",", "64", ",", "stride", ",", "self", ".", "version", ")", "\n", "", "if", "self", ".", "version", "==", "'v2'", ":", "\n", "      ", "cnn", ".", "batch_norm", "(", ")", "\n", "cnn", ".", "top_layer", "=", "tf", ".", "nn", ".", "relu", "(", "cnn", ".", "top_layer", ")", "\n", "", "cnn", ".", "spatial_mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.ResnetCifar10Model.get_learning_rate": [[392, 399], ["int", "tensorflow.train.piecewise_constant", "numpy.array"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "int", "(", "50000", "/", "batch_size", ")", "\n", "boundaries", "=", "num_batches_per_epoch", "*", "np", ".", "array", "(", "[", "82", ",", "123", ",", "300", "]", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "boundaries", "=", "[", "x", "for", "x", "in", "boundaries", "]", "\n", "values", "=", "[", "0.1", ",", "0.01", ",", "0.001", ",", "0.0002", "]", "\n", "return", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block_v1": [[41, 93], ["str", "tensorflow.variable_scope", "cnn.conv", "cnn.conv", "cnn.conv", "tensorflow.nn.relu", "cnn.conv", "cnn.apool"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.apool"], ["def", "bottleneck_block_v1", "(", "cnn", ",", "depth", ",", "depth_bottleneck", ",", "stride", ")", ":", "\n", "  ", "\"\"\"Bottleneck block with identity short-cut for ResNet v1.\n\n  Args:\n    cnn: the network to append bottleneck blocks.\n    depth: the number of output filters for this bottleneck block.\n    depth_bottleneck: the number of bottleneck filters for this block.\n    stride: Stride used in the first layer of the bottleneck block.\n  \"\"\"", "\n", "input_layer", "=", "cnn", ".", "top_layer", "\n", "in_size", "=", "cnn", ".", "top_size", "\n", "name_key", "=", "'resnet_v1'", "\n", "name", "=", "name_key", "+", "str", "(", "cnn", ".", "counts", "[", "name_key", "]", ")", "\n", "cnn", ".", "counts", "[", "name_key", "]", "+=", "1", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "if", "depth", "==", "in_size", ":", "\n", "      ", "if", "stride", "==", "1", ":", "\n", "        ", "shortcut", "=", "input_layer", "\n", "", "else", ":", "\n", "        ", "shortcut", "=", "cnn", ".", "apool", "(", "\n", "1", ",", "1", ",", "stride", ",", "stride", ",", "input_layer", "=", "input_layer", ",", "\n", "num_channels_in", "=", "in_size", ")", "\n", "", "", "else", ":", "\n", "      ", "shortcut", "=", "cnn", ".", "conv", "(", "\n", "depth", ",", "1", ",", "1", ",", "stride", ",", "stride", ",", "activation", "=", "None", ",", "\n", "use_batch_norm", "=", "True", ",", "input_layer", "=", "input_layer", ",", "\n", "num_channels_in", "=", "in_size", ",", "bias", "=", "None", ")", "\n", "", "cnn", ".", "conv", "(", "depth_bottleneck", ",", "1", ",", "1", ",", "stride", ",", "stride", ",", "\n", "input_layer", "=", "input_layer", ",", "num_channels_in", "=", "in_size", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "cnn", ".", "conv", "(", "depth_bottleneck", ",", "3", ",", "3", ",", "1", ",", "1", ",", "mode", "=", "'SAME_RESNET'", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "res", "=", "cnn", ".", "conv", "(", "depth", ",", "1", ",", "1", ",", "1", ",", "1", ",", "activation", "=", "None", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "'''\n    # se\n    cn = cnn.top_size\n    se = cnn.spatial_mean()\n    se = cnn.affine(cn / 16)\n    se = cnn.affine(cn, activation=None)\n    se = tf.sigmoid(se)\n    if cnn.data_format == 'NCHW':\n      se = tf.reshape(se, [-1, cn, 1, 1])\n    else:\n      se = tf.reshape(se, [-1, 1, 1, cn])\n    res = res * se\n    '''", "\n", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "shortcut", "+", "res", ")", "\n", "cnn", ".", "top_layer", "=", "output", "\n", "cnn", ".", "top_size", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block_v1_5": [[95, 141], ["str", "tensorflow.variable_scope", "cnn.conv", "cnn.conv", "cnn.conv", "tensorflow.nn.relu", "cnn.conv", "cnn.apool"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.apool"], ["", "", "def", "bottleneck_block_v1_5", "(", "cnn", ",", "depth", ",", "depth_bottleneck", ",", "stride", ")", ":", "\n", "  ", "\"\"\"Bottleneck block with identity short-cut for ResNet v1.5.\n\n  ResNet v1.5 is the informal name for ResNet v1 where stride 2 is used in the\n  first 3x3 convolution of each block instead of the first 1x1 convolution.\n\n  First seen at https://github.com/facebook/fb.resnet.torch. Used in the paper\n  \"Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour\"\n  (arXiv:1706.02677v2) and by fast.ai to train to accuracy in 45 epochs using\n  multiple image sizes.\n\n  Args:\n    cnn: the network to append bottleneck blocks.\n    depth: the number of output filters for this bottleneck block.\n    depth_bottleneck: the number of bottleneck filters for this block.\n    stride: Stride used in the first layer of the bottleneck block.\n  \"\"\"", "\n", "input_layer", "=", "cnn", ".", "top_layer", "\n", "in_size", "=", "cnn", ".", "top_size", "\n", "name_key", "=", "'resnet_v1.5'", "\n", "name", "=", "name_key", "+", "str", "(", "cnn", ".", "counts", "[", "name_key", "]", ")", "\n", "cnn", ".", "counts", "[", "name_key", "]", "+=", "1", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "if", "depth", "==", "in_size", ":", "\n", "      ", "if", "stride", "==", "1", ":", "\n", "        ", "shortcut", "=", "input_layer", "\n", "", "else", ":", "\n", "        ", "shortcut", "=", "cnn", ".", "apool", "(", "\n", "1", ",", "1", ",", "stride", ",", "stride", ",", "input_layer", "=", "input_layer", ",", "\n", "num_channels_in", "=", "in_size", ")", "\n", "", "", "else", ":", "\n", "      ", "shortcut", "=", "cnn", ".", "conv", "(", "\n", "depth", ",", "1", ",", "1", ",", "stride", ",", "stride", ",", "activation", "=", "None", ",", "\n", "use_batch_norm", "=", "True", ",", "input_layer", "=", "input_layer", ",", "\n", "num_channels_in", "=", "in_size", ",", "bias", "=", "None", ")", "\n", "", "cnn", ".", "conv", "(", "depth_bottleneck", ",", "1", ",", "1", ",", "1", ",", "1", ",", "\n", "input_layer", "=", "input_layer", ",", "num_channels_in", "=", "in_size", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "cnn", ".", "conv", "(", "depth_bottleneck", ",", "3", ",", "3", ",", "stride", ",", "stride", ",", "mode", "=", "'SAME_RESNET'", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "res", "=", "cnn", ".", "conv", "(", "depth", ",", "1", ",", "1", ",", "1", ",", "1", ",", "activation", "=", "None", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "shortcut", "+", "res", ")", "\n", "cnn", ".", "top_layer", "=", "output", "\n", "cnn", ".", "top_size", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block_v2": [[143, 187], ["cnn.batch_norm", "tensorflow.nn.relu", "str", "tensorflow.variable_scope", "cnn.conv", "cnn.conv", "cnn.conv", "cnn.conv", "cnn.apool"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.apool"], ["", "", "def", "bottleneck_block_v2", "(", "cnn", ",", "depth", ",", "depth_bottleneck", ",", "stride", ")", ":", "\n", "  ", "\"\"\"Bottleneck block with identity short-cut for ResNet v2.\n\n  The main difference from v1 is that a batch norm and relu are done at the\n  start of the block, instead of the end. This initial batch norm and relu is\n  collectively called a pre-activation.\n\n  Args:\n    cnn: the network to append bottleneck blocks.\n    depth: the number of output filters for this bottleneck block.\n    depth_bottleneck: the number of bottleneck filters for this block.\n    stride: Stride used in the first layer of the bottleneck block.\n  \"\"\"", "\n", "input_layer", "=", "cnn", ".", "top_layer", "\n", "in_size", "=", "cnn", ".", "top_size", "\n", "name_key", "=", "'resnet_v2'", "\n", "name", "=", "name_key", "+", "str", "(", "cnn", ".", "counts", "[", "name_key", "]", ")", "\n", "cnn", ".", "counts", "[", "name_key", "]", "+=", "1", "\n", "\n", "preact", "=", "cnn", ".", "batch_norm", "(", ")", "\n", "preact", "=", "tf", ".", "nn", ".", "relu", "(", "preact", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "if", "depth", "==", "in_size", ":", "\n", "      ", "if", "stride", "==", "1", ":", "\n", "        ", "shortcut", "=", "input_layer", "\n", "", "else", ":", "\n", "        ", "shortcut", "=", "cnn", ".", "apool", "(", "\n", "1", ",", "1", ",", "stride", ",", "stride", ",", "input_layer", "=", "input_layer", ",", "\n", "num_channels_in", "=", "in_size", ")", "\n", "", "", "else", ":", "\n", "      ", "shortcut", "=", "cnn", ".", "conv", "(", "\n", "depth", ",", "1", ",", "1", ",", "stride", ",", "stride", ",", "activation", "=", "None", ",", "use_batch_norm", "=", "False", ",", "\n", "input_layer", "=", "preact", ",", "num_channels_in", "=", "in_size", ",", "bias", "=", "None", ")", "\n", "", "cnn", ".", "conv", "(", "depth_bottleneck", ",", "1", ",", "1", ",", "stride", ",", "stride", ",", "\n", "input_layer", "=", "preact", ",", "num_channels_in", "=", "in_size", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "cnn", ".", "conv", "(", "depth_bottleneck", ",", "3", ",", "3", ",", "1", ",", "1", ",", "mode", "=", "'SAME_RESNET'", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "res", "=", "cnn", ".", "conv", "(", "depth", ",", "1", ",", "1", ",", "1", ",", "1", ",", "activation", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "bias", "=", "None", ")", "\n", "\n", "output", "=", "shortcut", "+", "res", "\n", "cnn", ".", "top_layer", "=", "output", "\n", "cnn", ".", "top_size", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block": [[189, 205], ["resnet_model.bottleneck_block_v2", "resnet_model.bottleneck_block_v1_5", "resnet_model.bottleneck_block_v1"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block_v2", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block_v1_5", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.bottleneck_block_v1"], ["", "", "def", "bottleneck_block", "(", "cnn", ",", "depth", ",", "depth_bottleneck", ",", "stride", ",", "version", ")", ":", "\n", "  ", "\"\"\"Bottleneck block with identity short-cut.\n\n  Args:\n    cnn: the network to append bottleneck blocks.\n    depth: the number of output filters for this bottleneck block.\n    depth_bottleneck: the number of bottleneck filters for this block.\n    stride: Stride used in the first layer of the bottleneck block.\n    version: version of ResNet to build.\n  \"\"\"", "\n", "if", "version", "==", "'v2'", ":", "\n", "    ", "bottleneck_block_v2", "(", "cnn", ",", "depth", ",", "depth_bottleneck", ",", "stride", ")", "\n", "", "elif", "version", "==", "'v1.5'", ":", "\n", "    ", "bottleneck_block_v1_5", "(", "cnn", ",", "depth", ",", "depth_bottleneck", ",", "stride", ")", "\n", "", "else", ":", "\n", "    ", "bottleneck_block_v1", "(", "cnn", ",", "depth", ",", "depth_bottleneck", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.residual_block": [[207, 251], ["cnn.conv", "cnn.apool", "cnn.batch_norm", "tensorflow.nn.relu", "cnn.conv", "cnn.conv", "tensorflow.nn.relu", "tensorflow.pad", "tensorflow.pad"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.apool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv"], ["", "", "def", "residual_block", "(", "cnn", ",", "depth", ",", "stride", ",", "version", ")", ":", "\n", "  ", "\"\"\"Residual block with identity short-cut.\n\n  Args:\n    cnn: the network to append residual blocks.\n    depth: the number of output filters for this residual block.\n    stride: Stride used in the first layer of the residual block.\n    version: version of ResNet to build.\n  \"\"\"", "\n", "pre_activation", "=", "True", "if", "version", "==", "'v2'", "else", "False", "\n", "input_layer", "=", "cnn", ".", "top_layer", "\n", "in_size", "=", "cnn", ".", "top_size", "\n", "if", "in_size", "!=", "depth", ":", "\n", "# Plan A of shortcut.", "\n", "    ", "shortcut", "=", "cnn", ".", "apool", "(", "1", ",", "1", ",", "stride", ",", "stride", ",", "\n", "input_layer", "=", "input_layer", ",", "\n", "num_channels_in", "=", "in_size", ")", "\n", "padding", "=", "(", "depth", "-", "in_size", ")", "//", "2", "\n", "if", "cnn", ".", "channel_pos", "==", "'channels_last'", ":", "\n", "      ", "shortcut", "=", "tf", ".", "pad", "(", "\n", "shortcut", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "padding", ",", "padding", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "shortcut", "=", "tf", ".", "pad", "(", "\n", "shortcut", ",", "[", "[", "0", ",", "0", "]", ",", "[", "padding", ",", "padding", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "", "", "else", ":", "\n", "    ", "shortcut", "=", "input_layer", "\n", "", "if", "pre_activation", ":", "\n", "    ", "res", "=", "cnn", ".", "batch_norm", "(", "input_layer", ")", "\n", "res", "=", "tf", ".", "nn", ".", "relu", "(", "res", ")", "\n", "", "else", ":", "\n", "    ", "res", "=", "input_layer", "\n", "", "cnn", ".", "conv", "(", "depth", ",", "3", ",", "3", ",", "stride", ",", "stride", ",", "\n", "input_layer", "=", "res", ",", "num_channels_in", "=", "in_size", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "if", "pre_activation", ":", "\n", "    ", "res", "=", "cnn", ".", "conv", "(", "depth", ",", "3", ",", "3", ",", "1", ",", "1", ",", "activation", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "bias", "=", "None", ")", "\n", "output", "=", "shortcut", "+", "res", "\n", "", "else", ":", "\n", "    ", "res", "=", "cnn", ".", "conv", "(", "depth", ",", "3", ",", "3", ",", "1", ",", "1", ",", "activation", "=", "None", ",", "\n", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "shortcut", "+", "res", ")", "\n", "", "cnn", ".", "top_layer", "=", "output", "\n", "cnn", ".", "top_size", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet50_model": [[319, 321], ["resnet_model.ResnetModel"], "function", ["None"], ["", "", "def", "create_resnet50_model", "(", ")", ":", "\n", "  ", "return", "ResnetModel", "(", "'resnet50'", ",", "(", "3", ",", "4", ",", "6", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet50_v1_5_model": [[323, 325], ["resnet_model.ResnetModel"], "function", ["None"], ["", "def", "create_resnet50_v1_5_model", "(", ")", ":", "\n", "  ", "return", "ResnetModel", "(", "'resnet50_v1.5'", ",", "(", "3", ",", "4", ",", "6", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet50_v2_model": [[327, 329], ["resnet_model.ResnetModel"], "function", ["None"], ["", "def", "create_resnet50_v2_model", "(", ")", ":", "\n", "  ", "return", "ResnetModel", "(", "'resnet50_v2'", ",", "(", "3", ",", "4", ",", "6", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet101_model": [[331, 333], ["resnet_model.ResnetModel"], "function", ["None"], ["", "def", "create_resnet101_model", "(", ")", ":", "\n", "  ", "return", "ResnetModel", "(", "'resnet101'", ",", "(", "3", ",", "4", ",", "23", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet101_v2_model": [[335, 337], ["resnet_model.ResnetModel"], "function", ["None"], ["", "def", "create_resnet101_v2_model", "(", ")", ":", "\n", "  ", "return", "ResnetModel", "(", "'resnet101_v2'", ",", "(", "3", ",", "4", ",", "23", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet152_model": [[339, 341], ["resnet_model.ResnetModel"], "function", ["None"], ["", "def", "create_resnet152_model", "(", ")", ":", "\n", "  ", "return", "ResnetModel", "(", "'resnet152'", ",", "(", "3", ",", "8", ",", "36", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet152_v2_model": [[343, 345], ["resnet_model.ResnetModel"], "function", ["None"], ["", "def", "create_resnet152_v2_model", "(", ")", ":", "\n", "  ", "return", "ResnetModel", "(", "'resnet152_v2'", ",", "(", "3", ",", "8", ",", "36", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet20_cifar_model": [[401, 403], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "", "def", "create_resnet20_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet20'", ",", "(", "3", ",", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet20_v2_cifar_model": [[405, 407], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet20_v2_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet20_v2'", ",", "(", "3", ",", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet32_cifar_model": [[409, 411], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet32_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet32_v2'", ",", "(", "5", ",", "5", ",", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet32_v2_cifar_model": [[413, 415], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet32_v2_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet32_v2'", ",", "(", "5", ",", "5", ",", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet44_cifar_model": [[417, 419], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet44_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet44'", ",", "(", "7", ",", "7", ",", "7", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet44_v2_cifar_model": [[421, 423], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet44_v2_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet44_v2'", ",", "(", "7", ",", "7", ",", "7", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet56_cifar_model": [[425, 427], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet56_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet56'", ",", "(", "9", ",", "9", ",", "9", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet56_v2_cifar_model": [[429, 431], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet56_v2_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet56_v2'", ",", "(", "9", ",", "9", ",", "9", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet110_cifar_model": [[433, 435], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet110_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet110'", ",", "(", "18", ",", "18", ",", "18", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.resnet_model.create_resnet110_v2_cifar_model": [[437, 439], ["resnet_model.ResnetCifar10Model"], "function", ["None"], ["", "def", "create_resnet110_v2_cifar_model", "(", ")", ":", "\n", "  ", "return", "ResnetCifar10Model", "(", "'resnet110_v2'", ",", "(", "18", ",", "18", ",", "18", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.setUp": [[47, 49], ["tensorflow.reset_default_graph"], "methods", ["None"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testCreation": [[50, 65], ["dict", "models.mobilenet.mobilenet", "len", "mobilenet_test.MobilenetV2Test.assertEqual", "range", "tensorflow.placeholder", "mobilenet_test.find_ops", "mobilenet_test.MobilenetV2Test.assertIn", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.find_ops"], ["", "def", "testCreation", "(", "self", ")", ":", "\n", "    ", "spec", "=", "dict", "(", "mobilenet_v2", ".", "V2_DEF", ")", "\n", "_", ",", "ep", "=", "mobilenet", ".", "mobilenet", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "conv_defs", "=", "spec", ")", "\n", "num_convs", "=", "len", "(", "find_ops", "(", "'Conv2D'", ")", ")", "\n", "\n", "# This is mostly a sanity test. No deep reason for these particular", "\n", "# constants.", "\n", "#", "\n", "# All but first 2 and last one have  two convolutions, and there is one", "\n", "# extra conv that is not in the spec. (logits)", "\n", "self", ".", "assertEqual", "(", "num_convs", ",", "len", "(", "spec", "[", "'spec'", "]", ")", "*", "2", "-", "2", ")", "\n", "# Check that depthwise are exposed.", "\n", "for", "i", "in", "range", "(", "2", ",", "17", ")", ":", "\n", "      ", "self", ".", "assertIn", "(", "'layer_%d/depthwise_output'", "%", "i", ",", "ep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testCreationNoClasses": [[66, 72], ["copy.deepcopy", "models.mobilenet.mobilenet", "mobilenet_test.MobilenetV2Test.assertIs", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet"], ["", "", "def", "testCreationNoClasses", "(", "self", ")", ":", "\n", "    ", "spec", "=", "copy", ".", "deepcopy", "(", "mobilenet_v2", ".", "V2_DEF", ")", "\n", "net", ",", "ep", "=", "mobilenet", ".", "mobilenet", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "conv_defs", "=", "spec", ",", "\n", "num_classes", "=", "None", ")", "\n", "self", ".", "assertIs", "(", "net", ",", "ep", "[", "'global_pool'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testImageSizes": [[73, 82], ["tensorflow.reset_default_graph", "models.mobilenet_v2.mobilenet", "mobilenet_test.MobilenetV2Test.assertEqual", "tensorflow.placeholder", "ep[].get_shape().as_list", "ep[].get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet"], ["", "def", "testImageSizes", "(", "self", ")", ":", "\n", "    ", "for", "input_size", ",", "output_size", "in", "[", "(", "224", ",", "7", ")", ",", "(", "192", ",", "6", ")", ",", "(", "160", ",", "5", ")", ",", "\n", "(", "128", ",", "4", ")", ",", "(", "96", ",", "3", ")", "]", ":", "\n", "      ", "tf", ".", "reset_default_graph", "(", ")", "\n", "_", ",", "ep", "=", "mobilenet_v2", ".", "mobilenet", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "input_size", ",", "input_size", ",", "3", ")", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "ep", "[", "'layer_18/output'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", ",", "\n", "[", "output_size", "]", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testWithSplits": [[83, 94], ["copy.deepcopy", "models.mobilenet.mobilenet", "len", "mobilenet_test.MobilenetV2Test.assertEqual", "dict", "tensorflow.placeholder", "mobilenet_test.find_ops", "len"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.find_ops"], ["", "", "def", "testWithSplits", "(", "self", ")", ":", "\n", "    ", "spec", "=", "copy", ".", "deepcopy", "(", "mobilenet_v2", ".", "V2_DEF", ")", "\n", "spec", "[", "'overrides'", "]", "=", "{", "\n", "(", "ops", ".", "expanded_conv", ",", ")", ":", "dict", "(", "split_expansion", "=", "2", ")", ",", "\n", "}", "\n", "_", ",", "_", "=", "mobilenet", ".", "mobilenet", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "conv_defs", "=", "spec", ")", "\n", "num_convs", "=", "len", "(", "find_ops", "(", "'Conv2D'", ")", ")", "\n", "# All but 3 op has 3 conv operatore, the remainign 3 have one", "\n", "# and there is one unaccounted.", "\n", "self", ".", "assertEqual", "(", "num_convs", ",", "len", "(", "spec", "[", "'spec'", "]", ")", "*", "3", "-", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testWithOutputStride8": [[95, 102], ["models.mobilenet.mobilenet_base", "mobilenet_test.MobilenetV2Test.assertEqual", "tensorflow.placeholder", "out.get_shape().as_list", "out.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet_base"], ["", "def", "testWithOutputStride8", "(", "self", ")", ":", "\n", "    ", "out", ",", "_", "=", "mobilenet", ".", "mobilenet_base", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "\n", "output_stride", "=", "8", ",", "\n", "scope", "=", "'MobilenetV2'", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", ",", "[", "28", ",", "28", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testDivisibleBy": [[103, 114], ["tensorflow.reset_default_graph", "models.mobilenet_v2.mobilenet", "set", "mobilenet_test.MobilenetV2Test.assertSameElements", "tensorflow.placeholder", "op.outputs[].get_shape().as_list", "mobilenet_test.find_ops", "op.outputs[].get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.find_ops"], ["", "def", "testDivisibleBy", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "mobilenet_v2", ".", "mobilenet", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "\n", "divisible_by", "=", "16", ",", "\n", "min_depth", "=", "32", ")", "\n", "s", "=", "[", "op", ".", "outputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "for", "op", "in", "find_ops", "(", "'Conv2D'", ")", "]", "\n", "s", "=", "set", "(", "s", ")", "\n", "self", ".", "assertSameElements", "(", "[", "32", ",", "64", ",", "96", ",", "160", ",", "192", ",", "320", ",", "384", ",", "576", ",", "960", ",", "1280", ",", "\n", "1001", "]", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testDivisibleByWithArgScope": [[115, 126], ["tensorflow.reset_default_graph", "slim.arg_scope", "models.mobilenet_v2.mobilenet", "set", "mobilenet_test.MobilenetV2Test.assertSameElements", "tensorflow.placeholder", "op.outputs[].get_shape().as_list", "mobilenet_test.find_ops", "op.outputs[].get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.find_ops"], ["", "def", "testDivisibleByWithArgScope", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "# Verifies that depth_multiplier arg scope actually works", "\n", "# if no default min_depth is provided.", "\n", "with", "slim", ".", "arg_scope", "(", "(", "mobilenet", ".", "depth_multiplier", ",", ")", ",", "min_depth", "=", "32", ")", ":", "\n", "      ", "mobilenet_v2", ".", "mobilenet", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "2", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "depth_multiplier", "=", "0.1", ")", "\n", "s", "=", "[", "op", ".", "outputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "for", "op", "in", "find_ops", "(", "'Conv2D'", ")", "]", "\n", "s", "=", "set", "(", "s", ")", "\n", "self", ".", "assertSameElements", "(", "s", ",", "[", "32", ",", "192", ",", "128", ",", "1001", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testFineGrained": [[127, 140], ["tensorflow.reset_default_graph", "models.mobilenet_v2.mobilenet", "set", "mobilenet_test.MobilenetV2Test.assertSameElements", "tensorflow.placeholder", "op.outputs[].get_shape().as_list", "mobilenet_test.find_ops", "op.outputs[].get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.find_ops"], ["", "", "def", "testFineGrained", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "# Verifies that depth_multiplier arg scope actually works", "\n", "# if no default min_depth is provided.", "\n", "\n", "mobilenet_v2", ".", "mobilenet", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "2", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "depth_multiplier", "=", "0.01", ",", "\n", "finegrain_classification_mode", "=", "True", ")", "\n", "s", "=", "[", "op", ".", "outputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "for", "op", "in", "find_ops", "(", "'Conv2D'", ")", "]", "\n", "s", "=", "set", "(", "s", ")", "\n", "# All convolutions will be 8->48, except for the last one.", "\n", "self", ".", "assertSameElements", "(", "s", ",", "[", "8", ",", "48", ",", "1001", ",", "1280", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testMobilenetBase": [[141, 149], ["tensorflow.reset_default_graph", "slim.arg_scope", "models.mobilenet_v2.mobilenet_base", "mobilenet_test.MobilenetV2Test.assertEqual", "tensorflow.placeholder", "net.get_shape().as_list", "net.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet_base"], ["", "def", "testMobilenetBase", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "# Verifies that mobilenet_base returns pre-pooling layer.", "\n", "with", "slim", ".", "arg_scope", "(", "(", "mobilenet", ".", "depth_multiplier", ",", ")", ",", "min_depth", "=", "32", ")", ":", "\n", "      ", "net", ",", "_", "=", "mobilenet_v2", ".", "mobilenet_base", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "depth_multiplier", "=", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "[", "10", ",", "7", ",", "7", ",", "128", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testWithOutputStride16": [[150, 157], ["tensorflow.reset_default_graph", "models.mobilenet.mobilenet_base", "mobilenet_test.MobilenetV2Test.assertEqual", "tensorflow.placeholder", "out.get_shape().as_list", "out.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet_base"], ["", "", "def", "testWithOutputStride16", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "out", ",", "_", "=", "mobilenet", ".", "mobilenet_base", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "\n", "output_stride", "=", "16", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", ",", "[", "14", ",", "14", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testWithOutputStride8AndExplicitPadding": [[158, 167], ["tensorflow.reset_default_graph", "models.mobilenet.mobilenet_base", "mobilenet_test.MobilenetV2Test.assertEqual", "tensorflow.placeholder", "out.get_shape().as_list", "out.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet_base"], ["", "def", "testWithOutputStride8AndExplicitPadding", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "out", ",", "_", "=", "mobilenet", ".", "mobilenet_base", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "\n", "output_stride", "=", "8", ",", "\n", "use_explicit_padding", "=", "True", ",", "\n", "scope", "=", "'MobilenetV2'", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", ",", "[", "28", ",", "28", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testWithOutputStride16AndExplicitPadding": [[168, 176], ["tensorflow.reset_default_graph", "models.mobilenet.mobilenet_base", "mobilenet_test.MobilenetV2Test.assertEqual", "tensorflow.placeholder", "out.get_shape().as_list", "out.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet_base"], ["", "def", "testWithOutputStride16AndExplicitPadding", "(", "self", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "out", ",", "_", "=", "mobilenet", ".", "mobilenet_base", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "10", ",", "224", ",", "224", ",", "16", ")", ")", ",", "\n", "conv_defs", "=", "mobilenet_v2", ".", "V2_DEF", ",", "\n", "output_stride", "=", "16", ",", "\n", "use_explicit_padding", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", ",", "[", "14", ",", "14", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testBatchNormScopeDoesNotHaveIsTrainingWhenItsSetToNone": [[177, 181], ["models.mobilenet.training_scope", "mobilenet_test.MobilenetV2Test.assertNotIn", "slim.arg_scope_func_key"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.training_scope"], ["", "def", "testBatchNormScopeDoesNotHaveIsTrainingWhenItsSetToNone", "(", "self", ")", ":", "\n", "    ", "sc", "=", "mobilenet", ".", "training_scope", "(", "is_training", "=", "None", ")", "\n", "self", ".", "assertNotIn", "(", "'is_training'", ",", "sc", "[", "slim", ".", "arg_scope_func_key", "(", "\n", "slim", ".", "batch_norm", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.MobilenetV2Test.testBatchNormScopeDoesHasIsTrainingWhenItsNotNone": [[182, 189], ["models.mobilenet.training_scope", "mobilenet_test.MobilenetV2Test.assertIn", "models.mobilenet.training_scope", "mobilenet_test.MobilenetV2Test.assertIn", "models.mobilenet.training_scope", "mobilenet_test.MobilenetV2Test.assertIn", "slim.arg_scope_func_key", "slim.arg_scope_func_key", "slim.arg_scope_func_key"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.training_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.training_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.training_scope"], ["", "def", "testBatchNormScopeDoesHasIsTrainingWhenItsNotNone", "(", "self", ")", ":", "\n", "    ", "sc", "=", "mobilenet", ".", "training_scope", "(", "is_training", "=", "False", ")", "\n", "self", ".", "assertIn", "(", "'is_training'", ",", "sc", "[", "slim", ".", "arg_scope_func_key", "(", "slim", ".", "batch_norm", ")", "]", ")", "\n", "sc", "=", "mobilenet", ".", "training_scope", "(", "is_training", "=", "True", ")", "\n", "self", ".", "assertIn", "(", "'is_training'", ",", "sc", "[", "slim", ".", "arg_scope_func_key", "(", "slim", ".", "batch_norm", ")", "]", ")", "\n", "sc", "=", "mobilenet", ".", "training_scope", "(", ")", "\n", "self", ".", "assertIn", "(", "'is_training'", ",", "sc", "[", "slim", ".", "arg_scope_func_key", "(", "slim", ".", "batch_norm", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_test.find_ops": [[33, 43], ["tensorflow.get_default_graph", "tf.get_default_graph.get_operations"], "function", ["None"], ["def", "find_ops", "(", "optype", ")", ":", "\n", "  ", "\"\"\"Find ops of a given type in graphdef or a graph.\n\n  Args:\n    optype: operation type (e.g. Conv2D)\n  Returns:\n     List of operations.\n  \"\"\"", "\n", "gd", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "return", "[", "var", "for", "var", "in", "gd", ".", "get_operations", "(", ")", "if", "var", ".", "type", "==", "optype", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model.Vgg11Model.__init__": [[67, 69], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Vgg11Model", ",", "self", ")", ".", "__init__", "(", "'vgg11'", ",", "224", ",", "64", ",", "0.004", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model.Vgg11Model.add_inference": [[70, 72], ["vgg_model._construct_vgg"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model._construct_vgg"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "_construct_vgg", "(", "cnn", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model.Vgg16Model.__init__": [[76, 78], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Vgg16Model", ",", "self", ")", ".", "__init__", "(", "'vgg16'", ",", "224", ",", "256", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model.Vgg16Model.add_inference": [[79, 83], ["vgg_model._construct_vgg"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model._construct_vgg"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "cnn", ".", "use_batch_norm", "=", "True", "\n", "cnn", ".", "batch_norm_config", "=", "{", "'decay'", ":", "0.9", ",", "'epsilon'", ":", "1e-5", ",", "'scale'", ":", "True", "}", "\n", "_construct_vgg", "(", "cnn", ",", "[", "2", ",", "2", ",", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model.Vgg16Model.get_learning_rate": [[84, 103], ["print", "print", "print", "tensorflow.train.piecewise_constant", "int", "tensorflow.cond", "float", "int"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "(", "\n", "float", "(", "datasets", ".", "IMAGENET_NUM_TRAIN_IMAGES", ")", "/", "batch_size", ")", "\n", "boundaries", "=", "[", "int", "(", "num_batches_per_epoch", "*", "x", ")", "for", "x", "in", "[", "30", ",", "60", ",", "90", ",", "100", "]", "]", "\n", "\n", "rescaled_lr", "=", "self", ".", "learning_rate", "/", "self", ".", "default_batch_size", "*", "batch_size", "\n", "print", "(", "'Init LR: '", ",", "rescaled_lr", ")", "\n", "rescaled_lr", "=", "rescaled_lr", "/", "(", "batch_size", "/", "self", ".", "batch_size", ")", "\n", "print", "(", "'GPU Num: '", ",", "batch_size", "/", "self", ".", "batch_size", ")", "\n", "print", "(", "'Batch size: '", ",", "batch_size", ")", "\n", "values", "=", "[", "1", ",", "0.1", ",", "0.01", ",", "0.001", ",", "0.0001", "]", "\n", "values", "=", "[", "rescaled_lr", "*", "v", "for", "v", "in", "values", "]", "\n", "lr", "=", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n", "warmup_steps", "=", "int", "(", "num_batches_per_epoch", ")", "\n", "\n", "warmup_lr", "=", "lr", "*", "0.1", "\n", "\n", "return", "tf", ".", "cond", "(", "global_step", "<", "warmup_steps", ",", "lambda", ":", "warmup_lr", ",", "lambda", ":", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model.Vgg19Model.__init__": [[107, 109], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Vgg19Model", ",", "self", ")", ".", "__init__", "(", "'vgg19'", ",", "224", ",", "64", ",", "0.004", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model.Vgg19Model.add_inference": [[110, 112], ["vgg_model._construct_vgg"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model._construct_vgg"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "_construct_vgg", "(", "cnn", ",", "[", "2", ",", "2", ",", "4", ",", "4", ",", "4", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.vgg_model._construct_vgg": [[35, 63], ["six.moves.xrange", "cnn.mpool", "six.moves.xrange", "cnn.mpool", "six.moves.xrange", "cnn.mpool", "six.moves.xrange", "cnn.mpool", "six.moves.xrange", "cnn.mpool", "cnn.reshape", "cnn.affine", "cnn.dropout", "cnn.affine", "cnn.dropout", "len", "cnn.conv", "cnn.conv", "cnn.conv", "cnn.conv", "cnn.conv"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv"], ["def", "_construct_vgg", "(", "cnn", ",", "num_conv_layers", ")", ":", "\n", "  ", "\"\"\"Build vgg architecture from blocks.\"\"\"", "\n", "assert", "len", "(", "num_conv_layers", ")", "==", "5", "\n", "for", "_", "in", "xrange", "(", "num_conv_layers", "[", "0", "]", ")", ":", "\n", "    ", "cnn", ".", "conv", "(", "64", ",", "3", ",", "3", ",", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "\n", "", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "for", "_", "in", "xrange", "(", "num_conv_layers", "[", "1", "]", ")", ":", "\n", "    ", "cnn", ".", "conv", "(", "128", ",", "3", ",", "3", ",", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "\n", "", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "for", "_", "in", "xrange", "(", "num_conv_layers", "[", "2", "]", ")", ":", "\n", "    ", "cnn", ".", "conv", "(", "256", ",", "3", ",", "3", ",", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "\n", "", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "for", "_", "in", "xrange", "(", "num_conv_layers", "[", "3", "]", ")", ":", "\n", "    ", "cnn", ".", "conv", "(", "512", ",", "3", ",", "3", ",", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "\n", "", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "for", "_", "in", "xrange", "(", "num_conv_layers", "[", "4", "]", ")", ":", "\n", "    ", "cnn", ".", "conv", "(", "512", ",", "3", ",", "3", ",", "use_batch_norm", "=", "True", ",", "bias", "=", "None", ")", "\n", "\n", "", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "512", "*", "7", "*", "7", "]", ")", "\n", "cnn", ".", "affine", "(", "4096", ")", "\n", "cnn", ".", "dropout", "(", ")", "\n", "cnn", ".", "affine", "(", "4096", ")", "\n", "cnn", ".", "dropout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.NoOpScope.__enter__": [[169, 171], ["None"], "methods", ["None"], ["def", "__enter__", "(", "self", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.NoOpScope.__exit__": [[172, 174], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.get_variable": [[29, 36], ["tensorflow.get_variable", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["def", "get_variable", "(", "name", ",", "shape", ",", "dtype", ",", "cast_dtype", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(reedwm): Currently variables and gradients are transferred to other", "\n", "# devices and machines as type `dtype`, not `cast_dtype`. In particular,", "\n", "# this means in fp16 mode, variables are transferred as fp32 values, not", "\n", "# fp16 values, which uses extra bandwidth.", "\n", "  ", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "dtype", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "tf", ".", "cast", "(", "var", ",", "cast_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.adaption": [[38, 74], ["input_layer.get_shape().as_list", "tensorflow.variable_scope", "mobilenet.get_variable", "mobilenet.get_variable", "mobilenet.get_variable", "mobilenet.get_variable", "tensorflow.square", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.pow", "tensorflow.reduce_mean", "input_layer.get_shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "def", "adaption", "(", "input_layer", ")", ":", "\n", "  ", "epsilon", "=", "1e-5", "\n", "variable_dtype", "=", "tf", ".", "float32", "\n", "dtype", "=", "tf", ".", "float16", "\n", "\n", "num_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "squeeze", "=", "[", "1", ",", "2", "]", "\n", "with", "tf", ".", "variable_scope", "(", "default_name", "=", "'adaption'", ")", ":", "\n", "    ", "beta", "=", "get_variable", "(", "'beta'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "alpha", "=", "get_variable", "(", "'alpha'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "gamma", "=", "get_variable", "(", "'gamma'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "theta", "=", "get_variable", "(", "'theta'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "\n", "X", "=", "input_layer", "\n", "alpha_2", "=", "tf", ".", "square", "(", "alpha", ")", "\n", "alpha_2", "=", "alpha_2", "/", "tf", ".", "reduce_mean", "(", "alpha_2", ")", "+", "epsilon", "\n", "alpha", "=", "tf", ".", "sqrt", "(", "alpha_2", ")", "\n", "A", "=", "alpha_2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "X", ")", ",", "squeeze", ",", "keepdims", "=", "True", ")", "-", "(", "\n", "2.", "*", "alpha", "*", "beta", ")", "*", "tf", ".", "reduce_mean", "(", "X", ",", "squeeze", ",", "keepdims", "=", "True", ")", "\n", "A", "=", "tf", ".", "reduce_mean", "(", "\n", "A", ",", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "+", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "beta", ")", ")", "+", "epsilon", ")", "\n", "# B = tf.reduce_sum(alpha_2)", "\n", "B", "=", "1.", "\n", "l2", "=", "tf", ".", "sqrt", "(", "B", "/", "A", ")", "\n", "adaptor", "=", "tf", ".", "pow", "(", "l2", ",", "gamma", "+", "theta", "*", "l2", ")", "\n", "trans_back", "=", "X", "*", "adaptor", "+", "(", "beta", "/", "alpha", ")", "*", "(", "1.", "-", "adaptor", ")", "\n", "\n", "", "return", "trans_back", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.adaption_conv2d": [[75, 79], ["mobilenet.adaption", "slim.conv2d"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption"], ["", "def", "adaption_conv2d", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "name", "=", "'adaption'", "\n", "inputs", "=", "adaption", "(", "inputs", ")", "\n", "return", "slim", ".", "conv2d", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.apply_activation": [[80, 83], ["activation_fn"], "function", ["None"], ["", "@", "slim", ".", "add_arg_scope", "\n", "def", "apply_activation", "(", "x", ",", "name", "=", "None", ",", "activation_fn", "=", "None", ")", ":", "\n", "  ", "return", "activation_fn", "(", "x", ",", "name", "=", "name", ")", "if", "activation_fn", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._fixed_padding": [[85, 109], ["tensorflow.pad"], "function", ["None"], ["", "def", "_fixed_padding", "(", "inputs", ",", "kernel_size", ",", "rate", "=", "1", ")", ":", "\n", "  ", "\"\"\"Pads the input along the spatial dimensions independently of input size.\n\n  Pads the input such that if it was used in a convolution with 'VALID' padding,\n  the output would have the same dimensions as if the unpadded input was used\n  in a convolution with 'SAME' padding.\n\n  Args:\n    inputs: A tensor of size [batch, height_in, width_in, channels].\n    kernel_size: The kernel to be used in the conv2d or max_pool2d operation.\n    rate: An integer, rate for atrous convolution.\n\n  Returns:\n    output: A tensor of size [batch, height_out, width_out, channels] with the\n      input, either intact (if kernel_size == 1) or padded (if kernel_size > 1).\n  \"\"\"", "\n", "kernel_size_effective", "=", "[", "kernel_size", "[", "0", "]", "+", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "(", "rate", "-", "1", ")", ",", "\n", "kernel_size", "[", "0", "]", "+", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "]", "\n", "pad_total", "=", "[", "kernel_size_effective", "[", "0", "]", "-", "1", ",", "kernel_size_effective", "[", "1", "]", "-", "1", "]", "\n", "pad_beg", "=", "[", "pad_total", "[", "0", "]", "//", "2", ",", "pad_total", "[", "1", "]", "//", "2", "]", "\n", "pad_end", "=", "[", "pad_total", "[", "0", "]", "-", "pad_beg", "[", "0", "]", ",", "pad_total", "[", "1", "]", "-", "pad_beg", "[", "1", "]", "]", "\n", "padded_inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg", "[", "0", "]", ",", "pad_end", "[", "0", "]", "]", ",", "\n", "[", "pad_beg", "[", "1", "]", ",", "pad_end", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._make_divisible": [[111, 119], ["max", "int"], "function", ["None"], ["", "def", "_make_divisible", "(", "v", ",", "divisor", ",", "min_value", "=", "None", ")", ":", "\n", "  ", "if", "min_value", "is", "None", ":", "\n", "    ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "    ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._set_arg_scope_defaults": [[121, 143], ["hasattr", "list", "defaults.items", "slim.arg_scope", "mobilenet._set_arg_scope_defaults"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._set_arg_scope_defaults"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "_set_arg_scope_defaults", "(", "defaults", ")", ":", "\n", "  ", "\"\"\"Sets arg scope defaults for all items present in defaults.\n\n  Args:\n    defaults: dictionary/list of pairs, containing a mapping from\n    function to a dictionary of default args.\n\n  Yields:\n    context manager where all defaults are set.\n  \"\"\"", "\n", "if", "hasattr", "(", "defaults", ",", "'items'", ")", ":", "\n", "    ", "items", "=", "list", "(", "defaults", ".", "items", "(", ")", ")", "\n", "", "else", ":", "\n", "    ", "items", "=", "defaults", "\n", "", "if", "not", "items", ":", "\n", "    ", "yield", "\n", "", "else", ":", "\n", "    ", "func", ",", "default_arg", "=", "items", "[", "0", "]", "\n", "with", "slim", ".", "arg_scope", "(", "func", ",", "**", "default_arg", ")", ":", "\n", "      ", "with", "_set_arg_scope_defaults", "(", "items", "[", "1", ":", "]", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.depth_multiplier": [[145, 156], ["mobilenet._make_divisible"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._make_divisible"], ["", "", "", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "depth_multiplier", "(", "output_params", ",", "\n", "multiplier", ",", "\n", "divisible_by", "=", "8", ",", "\n", "min_depth", "=", "8", ",", "\n", "**", "unused_kwargs", ")", ":", "\n", "  ", "if", "'num_outputs'", "not", "in", "output_params", ":", "\n", "    ", "return", "\n", "", "d", "=", "output_params", "[", "'num_outputs'", "]", "\n", "output_params", "[", "'num_outputs'", "]", "=", "_make_divisible", "(", "d", "*", "multiplier", ",", "divisible_by", ",", "\n", "min_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.op": [[161, 164], ["params.pop", "_Op"], "function", ["None"], ["def", "op", "(", "opfunc", ",", "**", "params", ")", ":", "\n", "  ", "multiplier", "=", "params", ".", "pop", "(", "'multiplier_transorm'", ",", "depth_multiplier", ")", "\n", "return", "_Op", "(", "opfunc", ",", "params", "=", "params", ",", "multiplier_func", "=", "multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.safe_arg_scope": [[176, 195], ["slim.arg_scope", "mobilenet.NoOpScope", "kwargs.items"], "function", ["None"], ["", "", "def", "safe_arg_scope", "(", "funcs", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Returns `slim.arg_scope` with all None arguments removed.\n\n  Arguments:\n    funcs: Functions to pass to `arg_scope`.\n    **kwargs: Arguments to pass to `arg_scope`.\n\n  Returns:\n    arg_scope or No-op context manager.\n\n  Note: can be useful if None value should be interpreted as \"do not overwrite\n    this parameter value\".\n  \"\"\"", "\n", "filtered_args", "=", "{", "name", ":", "value", "for", "name", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "if", "filtered_args", ":", "\n", "    ", "return", "slim", ".", "arg_scope", "(", "funcs", ",", "**", "filtered_args", ")", "\n", "", "else", ":", "\n", "    ", "return", "NoOpScope", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.mobilenet_base": [[197, 344], ["conv_defs.get", "conv_defs.get", "ValueError", "copy.deepcopy", "mobilenet._scope_all", "mobilenet.safe_arg_scope", "mobilenet._set_arg_scope_defaults", "mobilenet._set_arg_scope_defaults", "enumerate", "_fixed_padding.graph.get_operations", "ValueError", "dict", "opdef.multiplier_func", "dict.get", "os.path.dirname", "os.path.dirname", "os.path.basename", "opdef.op", "t.name.endswith", "mobilenet._fixed_padding", "print"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._scope_all", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.safe_arg_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._set_arg_scope_defaults", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._set_arg_scope_defaults", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.op", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._fixed_padding"], ["", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "mobilenet_base", "(", "# pylint: disable=invalid-name", "\n", "inputs", ",", "\n", "conv_defs", ",", "\n", "multiplier", "=", "1.0", ",", "\n", "final_endpoint", "=", "None", ",", "\n", "output_stride", "=", "None", ",", "\n", "use_explicit_padding", "=", "False", ",", "\n", "scope", "=", "None", ",", "\n", "is_training", "=", "False", ")", ":", "\n", "  ", "\"\"\"Mobilenet base network.\n\n  Constructs a network from inputs to the given final endpoint. By default\n  the network is constructed in inference mode. To create network\n  in training mode use:\n\n  with slim.arg_scope(mobilenet.training_scope()):\n     logits, endpoints = mobilenet_base(...)\n\n  Args:\n    inputs: a tensor of shape [batch_size, height, width, channels].\n    conv_defs: A list of op(...) layers specifying the net architecture.\n    multiplier: Float multiplier for the depth (number of channels)\n      for all convolution ops. The value must be greater than zero. Typical\n      usage will be to set this value in (0, 1) to reduce the number of\n      parameters or computation cost of the model.\n    final_endpoint: The name of last layer, for early termination for\n    for V1-based networks: last layer is \"layer_14\", for V2: \"layer_20\"\n    output_stride: An integer that specifies the requested ratio of input to\n      output spatial resolution. If not None, then we invoke atrous convolution\n      if necessary to prevent the network from reducing the spatial resolution\n      of the activation maps. Allowed values are 1 or any even number, excluding\n      zero. Typical values are 8 (accurate fully convolutional mode), 16\n      (fast fully convolutional mode), and 32 (classification mode).\n\n      NOTE- output_stride relies on all consequent operators to support dilated\n      operators via \"rate\" parameter. This might require wrapping non-conv\n      operators to operate properly.\n\n    use_explicit_padding: Use 'VALID' padding for convolutions, but prepad\n      inputs so that the output dimensions are the same as if 'SAME' padding\n      were used.\n    scope: optional variable scope.\n    is_training: How to setup batch_norm and other ops. Note: most of the time\n      this does not need be set directly. Use mobilenet.training_scope() to set\n      up training instead. This parameter is here for backward compatibility\n      only. It is safe to set it to the value matching\n      training_scope(is_training=...). It is also safe to explicitly set\n      it to False, even if there is outer training_scope set to to training.\n      (The network will be built in inference mode). If this is set to None,\n      no arg_scope is added for slim.batch_norm's is_training parameter.\n\n  Returns:\n    tensor_out: output tensor.\n    end_points: a set of activations for external use, for example summaries or\n                losses.\n\n  Raises:\n    ValueError: depth_multiplier <= 0, or the target output_stride is not\n                allowed.\n  \"\"\"", "\n", "if", "multiplier", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "'multiplier is not greater than zero.'", ")", "\n", "\n", "# Set conv defs defaults and overrides.", "\n", "", "conv_defs_defaults", "=", "conv_defs", ".", "get", "(", "'defaults'", ",", "{", "}", ")", "\n", "conv_defs_overrides", "=", "conv_defs", ".", "get", "(", "'overrides'", ",", "{", "}", ")", "\n", "if", "use_explicit_padding", ":", "\n", "    ", "conv_defs_overrides", "=", "copy", ".", "deepcopy", "(", "conv_defs_overrides", ")", "\n", "conv_defs_overrides", "[", "\n", "(", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", ")", "]", "=", "{", "'padding'", ":", "'VALID'", "}", "\n", "\n", "", "if", "output_stride", "is", "not", "None", ":", "\n", "    ", "if", "output_stride", "==", "0", "or", "(", "output_stride", ">", "1", "and", "output_stride", "%", "2", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'Output stride must be None, 1 or a multiple of 2.'", ")", "\n", "\n", "# a) Set the tensorflow scope", "\n", "# b) set padding to default: note we might consider removing this", "\n", "# since it is also set by mobilenet_scope", "\n", "# c) set all defaults", "\n", "# d) set all extra overrides.", "\n", "", "", "with", "_scope_all", "(", "scope", ",", "default_scope", "=", "'Mobilenet'", ")", ",", "safe_arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "is_training", "=", "is_training", ")", ",", "_set_arg_scope_defaults", "(", "conv_defs_defaults", ")", ",", "_set_arg_scope_defaults", "(", "conv_defs_overrides", ")", ":", "\n", "# The current_stride variable keeps track of the output stride of the", "\n", "# activations, i.e., the running product of convolution strides up to the", "\n", "# current network layer. This allows us to invoke atrous convolution", "\n", "# whenever applying the next convolution would result in the activations", "\n", "# having output stride larger than the target output_stride.", "\n", "    ", "current_stride", "=", "1", "\n", "\n", "# The atrous convolution rate parameter.", "\n", "rate", "=", "1", "\n", "\n", "net", "=", "inputs", "\n", "# Insert default parameters before the base scope which includes", "\n", "# any custom overrides set in mobilenet.", "\n", "end_points", "=", "{", "}", "\n", "scopes", "=", "{", "}", "\n", "for", "i", ",", "opdef", "in", "enumerate", "(", "conv_defs", "[", "'spec'", "]", ")", ":", "\n", "      ", "params", "=", "dict", "(", "opdef", ".", "params", ")", "\n", "opdef", ".", "multiplier_func", "(", "params", ",", "multiplier", ")", "\n", "stride", "=", "params", ".", "get", "(", "'stride'", ",", "1", ")", "\n", "if", "output_stride", "is", "not", "None", "and", "current_stride", "==", "output_stride", ":", "\n", "# If we have reached the target output_stride, then we need to employ", "\n", "# atrous convolution with stride=1 and multiply the atrous rate by the", "\n", "# current unit's stride for use in subsequent layers.", "\n", "        ", "layer_stride", "=", "1", "\n", "layer_rate", "=", "rate", "\n", "rate", "*=", "stride", "\n", "", "else", ":", "\n", "        ", "layer_stride", "=", "stride", "\n", "layer_rate", "=", "1", "\n", "current_stride", "*=", "stride", "\n", "# Update params.", "\n", "", "params", "[", "'stride'", "]", "=", "layer_stride", "\n", "# Only insert rate to params if rate > 1.", "\n", "if", "layer_rate", ">", "1", ":", "\n", "        ", "params", "[", "'rate'", "]", "=", "layer_rate", "\n", "# Set padding", "\n", "", "if", "use_explicit_padding", ":", "\n", "        ", "if", "'kernel_size'", "in", "params", ":", "\n", "          ", "net", "=", "_fixed_padding", "(", "net", ",", "params", "[", "'kernel_size'", "]", ",", "layer_rate", ")", "\n", "", "else", ":", "\n", "          ", "params", "[", "'use_explicit_padding'", "]", "=", "True", "\n", "\n", "", "", "end_point", "=", "'layer_%d'", "%", "(", "i", "+", "1", ")", "\n", "try", ":", "\n", "        ", "net", "=", "opdef", ".", "op", "(", "net", ",", "**", "params", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "'Failed to create op %i: %r params: %r'", "%", "(", "i", ",", "opdef", ",", "params", ")", ")", "\n", "raise", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "scope", "=", "os", ".", "path", ".", "dirname", "(", "net", ".", "name", ")", "\n", "scopes", "[", "scope", "]", "=", "end_point", "\n", "if", "final_endpoint", "is", "not", "None", "and", "end_point", "==", "final_endpoint", ":", "\n", "        ", "break", "\n", "\n", "# Add all tensors that end with 'output' to", "\n", "# endpoints", "\n", "", "", "for", "t", "in", "net", ".", "graph", ".", "get_operations", "(", ")", ":", "\n", "      ", "scope", "=", "os", ".", "path", ".", "dirname", "(", "t", ".", "name", ")", "\n", "bn", "=", "os", ".", "path", ".", "basename", "(", "t", ".", "name", ")", "\n", "if", "scope", "in", "scopes", "and", "t", ".", "name", ".", "endswith", "(", "'output'", ")", ":", "\n", "        ", "end_points", "[", "scopes", "[", "scope", "]", "+", "'/'", "+", "bn", "]", "=", "t", ".", "outputs", "[", "0", "]", "\n", "", "", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet._scope_all": [[346, 351], ["tensorflow.variable_scope", "tensorflow.name_scope"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "_scope_all", "(", "scope", ",", "default_scope", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "default_name", "=", "default_scope", ")", "as", "s", ",", "tf", ".", "name_scope", "(", "s", ".", "original_name_scope", ")", ":", "\n", "    ", "yield", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.mobilenet": [[353, 436], ["mobilenet_args.get", "tf.identity.get_shape().as_list", "len", "ValueError", "tensorflow.variable_scope", "tensorflow.identity", "mobilenet.mobilenet_base", "tensorflow.identity", "tf.identity.get_shape", "tensorflow.variable_scope", "mobilenet.global_pool", "slim.dropout", "mobilenet.adaption_conv2d", "tensorflow.squeeze", "tensorflow.identity", "prediction_fn", "len", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet_base", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.global_pool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption_conv2d"], ["", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "mobilenet", "(", "inputs", ",", "\n", "num_classes", "=", "1001", ",", "\n", "prediction_fn", "=", "slim", ".", "softmax", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'Mobilenet'", ",", "\n", "base_only", "=", "False", ",", "\n", "**", "mobilenet_args", ")", ":", "\n", "  ", "\"\"\"Mobilenet model for classification, supports both V1 and V2.\n\n  Note: default mode is inference, use mobilenet.training_scope to create\n  training network.\n\n\n  Args:\n    inputs: a tensor of shape [batch_size, height, width, channels].\n    num_classes: number of predicted classes. If 0 or None, the logits layer\n      is omitted and the input features to the logits layer (before dropout)\n      are returned instead.\n    prediction_fn: a function to get predictions out of logits\n      (default softmax).\n    reuse: whether or not the network and its variables should be reused. To be\n      able to reuse 'scope' must be given.\n    scope: Optional variable_scope.\n    base_only: if True will only create the base of the network (no pooling\n    and no logits).\n    **mobilenet_args: passed to mobilenet_base verbatim.\n      - conv_defs: list of conv defs\n      - multiplier: Float multiplier for the depth (number of channels)\n      for all convolution ops. The value must be greater than zero. Typical\n      usage will be to set this value in (0, 1) to reduce the number of\n      parameters or computation cost of the model.\n      - output_stride: will ensure that the last layer has at most total stride.\n      If the architecture calls for more stride than that provided\n      (e.g. output_stride=16, but the architecture has 5 stride=2 operators),\n      it will replace output_stride with fractional convolutions using Atrous\n      Convolutions.\n\n  Returns:\n    logits: the pre-softmax activations, a tensor of size\n      [batch_size, num_classes]\n    end_points: a dictionary from components of the network to the corresponding\n      activation tensor.\n\n  Raises:\n    ValueError: Input rank is invalid.\n  \"\"\"", "\n", "is_training", "=", "mobilenet_args", ".", "get", "(", "'is_training'", ",", "False", ")", "\n", "input_shape", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "input_shape", ")", "!=", "4", ":", "\n", "    ", "raise", "ValueError", "(", "'Expected rank 4 input, was: %d'", "%", "len", "(", "input_shape", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'Mobilenet'", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "    ", "inputs", "=", "tf", ".", "identity", "(", "inputs", ",", "'input'", ")", "\n", "net", ",", "end_points", "=", "mobilenet_base", "(", "inputs", ",", "scope", "=", "scope", ",", "**", "mobilenet_args", ")", "\n", "if", "base_only", ":", "\n", "      ", "return", "net", ",", "end_points", "\n", "\n", "", "net", "=", "tf", ".", "identity", "(", "net", ",", "name", "=", "'embedding'", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'Logits'", ")", ":", "\n", "      ", "net", "=", "global_pool", "(", "net", ")", "\n", "end_points", "[", "'global_pool'", "]", "=", "net", "\n", "if", "not", "num_classes", ":", "\n", "        ", "return", "net", ",", "end_points", "\n", "", "net", "=", "slim", ".", "dropout", "(", "net", ",", "scope", "=", "'Dropout'", ",", "is_training", "=", "is_training", ")", "\n", "# 1 x 1 x num_classes", "\n", "# Note: legacy scope name.", "\n", "logits", "=", "adaption_conv2d", "(", "\n", "net", ",", "\n", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "scope", "=", "'Conv2d_1c_1x1'", ")", "\n", "\n", "logits", "=", "tf", ".", "squeeze", "(", "logits", ",", "[", "1", ",", "2", "]", ")", "\n", "\n", "logits", "=", "tf", ".", "identity", "(", "logits", ",", "name", "=", "'output'", ")", "\n", "", "end_points", "[", "'Logits'", "]", "=", "logits", "\n", "if", "prediction_fn", ":", "\n", "      ", "end_points", "[", "'Predictions'", "]", "=", "prediction_fn", "(", "logits", ",", "'Predictions'", ")", "\n", "", "", "return", "logits", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.global_pool": [[438, 462], ["input_tensor.get_shape().as_list", "pool_op", "pool_op.set_shape", "tensorflow.convert_to_tensor", "input_tensor.get_shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "def", "global_pool", "(", "input_tensor", ",", "pool_op", "=", "tf", ".", "nn", ".", "avg_pool", ")", ":", "\n", "  ", "\"\"\"Applies avg pool to produce 1x1 output.\n\n  NOTE: This function is funcitonally equivalenet to reduce_mean, but it has\n  baked in average pool which has better support across hardware.\n\n  Args:\n    input_tensor: input tensor\n    pool_op: pooling op (avg pool is default)\n  Returns:\n    a tensor batch_size x 1 x 1 x depth.\n  \"\"\"", "\n", "shape", "=", "input_tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "shape", "[", "1", "]", "is", "None", "or", "shape", "[", "2", "]", "is", "None", ":", "\n", "    ", "kernel_size", "=", "tf", ".", "convert_to_tensor", "(", "\n", "[", "1", ",", "tf", ".", "shape", "(", "input_tensor", ")", "[", "1", "]", ",", "\n", "tf", ".", "shape", "(", "input_tensor", ")", "[", "2", "]", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "    ", "kernel_size", "=", "[", "1", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", "]", "\n", "", "output", "=", "pool_op", "(", "\n", "input_tensor", ",", "ksize", "=", "kernel_size", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "# Recover output shape, for unknown shape.", "\n", "output", ".", "set_shape", "(", "[", "None", ",", "1", ",", "1", ",", "None", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.training_scope": [[464, 517], ["slim.initializers.xavier_initializer", "tensorflow.truncated_normal_initializer", "slim.arg_scope", "slim.arg_scope", "mobilenet.safe_arg_scope", "mobilenet.safe_arg_scope", "slim.arg_scope", "slim.arg_scope", "slim.l2_regularizer"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.safe_arg_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet.safe_arg_scope"], ["", "def", "training_scope", "(", "is_training", "=", "True", ",", "\n", "weight_decay", "=", "0.00004", ",", "\n", "stddev", "=", "0.09", ",", "\n", "dropout_keep_prob", "=", "0.8", ",", "\n", "bn_decay", "=", "0.997", ")", ":", "\n", "  ", "\"\"\"Defines Mobilenet training scope.\n\n  Usage:\n     with tf.contrib.slim.arg_scope(mobilenet.training_scope()):\n       logits, endpoints = mobilenet_v2.mobilenet(input_tensor)\n\n     # the network created will be trainble with dropout/batch norm\n     # initialized appropriately.\n  Args:\n    is_training: if set to False this will ensure that all customizations are\n      set to non-training mode. This might be helpful for code that is reused\n      across both training/evaluation, but most of the time training_scope with\n      value False is not needed. If this is set to None, the parameters is not\n      added to the batch_norm arg_scope.\n\n    weight_decay: The weight decay to use for regularizing the model.\n    stddev: Standard deviation for initialization, if negative uses xavier.\n    dropout_keep_prob: dropout keep probability (not set if equals to None).\n    bn_decay: decay for the batch norm moving averages (not set if equals to\n      None).\n\n  Returns:\n    An argument scope to use via arg_scope.\n  \"\"\"", "\n", "# Note: do not introduce parameters that would change the inference", "\n", "# model here (for example whether to use bias), modify conv_def instead.", "\n", "batch_norm_params", "=", "{", "\n", "'decay'", ":", "bn_decay", ",", "\n", "'is_training'", ":", "is_training", "\n", "}", "\n", "if", "stddev", "<", "0", ":", "\n", "    ", "weight_intitializer", "=", "slim", ".", "initializers", ".", "xavier_initializer", "(", ")", "\n", "", "else", ":", "\n", "    ", "weight_intitializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "\n", "# Set weight_decay for weights in Conv and FC layers.", "\n", "", "with", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "weights_initializer", "=", "weight_intitializer", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ")", ",", "slim", ".", "arg_scope", "(", "[", "mobilenet_base", ",", "mobilenet", "]", ",", "is_training", "=", "is_training", ")", ",", "safe_arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", ",", "safe_arg_scope", "(", "[", "slim", ".", "dropout", "]", ",", "is_training", "=", "is_training", ",", "\n", "keep_prob", "=", "dropout_keep_prob", ")", ",", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ")", ",", "slim", ".", "arg_scope", "(", "[", "slim", ".", "separable_conv2d", "]", ",", "weights_regularizer", "=", "None", ")", "as", "s", ":", "\n", "    ", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.googlenet_model.GooglenetModel.__init__": [[31, 33], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "GooglenetModel", ",", "self", ")", ".", "__init__", "(", "'googlenet'", ",", "224", ",", "32", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.googlenet_model.GooglenetModel.add_inference": [[34, 59], ["cnn.conv", "cnn.mpool", "cnn.conv", "cnn.conv", "cnn.mpool", "googlenet_model.GooglenetModel.add_inference.inception_v1"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "def", "inception_v1", "(", "cnn", ",", "k", ",", "l", ",", "m", ",", "n", ",", "p", ",", "q", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'conv'", ",", "k", ",", "1", ",", "1", ")", "]", ",", "[", "(", "'conv'", ",", "l", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "m", ",", "3", ",", "3", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "n", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "p", ",", "5", ",", "5", ")", "]", ",", "\n", "[", "(", "'mpool'", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'SAME'", ")", ",", "(", "'conv'", ",", "q", ",", "1", ",", "1", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v1'", ",", "cols", ")", "\n", "\n", "", "cnn", ".", "conv", "(", "64", ",", "7", ",", "7", ",", "2", ",", "2", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'SAME'", ")", "\n", "cnn", ".", "conv", "(", "64", ",", "1", ",", "1", ")", "\n", "cnn", ".", "conv", "(", "192", ",", "3", ",", "3", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'SAME'", ")", "\n", "inception_v1", "(", "cnn", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "inception_v1", "(", "cnn", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'SAME'", ")", "\n", "inception_v1", "(", "cnn", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "inception_v1", "(", "cnn", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "inception_v1", "(", "cnn", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "inception_v1", "(", "cnn", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "inception_v1", "(", "cnn", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'SAME'", ")", "\n", "inception_v1", "(", "cnn", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "inception_v1", "(", "cnn", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "cnn", ".", "apool", "(", "7", ",", "7", ",", "1", ",", "1", ",", "mode", "=", "'VALID'", ")", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "1024", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.trivial_model.TrivialModel.__init__": [[23, 25], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "TrivialModel", ",", "self", ")", ".", "__init__", "(", "'trivial'", ",", "224", "+", "3", ",", "32", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.trivial_model.TrivialModel.add_inference": [[26, 30], ["cnn.reshape", "cnn.affine", "cnn.affine"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "227", "*", "227", "*", "3", "]", ")", "\n", "cnn", ".", "affine", "(", "1", ")", "\n", "cnn", ".", "affine", "(", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.trivial_model.TrivialCifar10Model.__init__": [[35, 37], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "TrivialCifar10Model", ",", "self", ")", ".", "__init__", "(", "'trivial'", ",", "32", ",", "32", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.trivial_model.TrivialCifar10Model.add_inference": [[38, 42], ["cnn.reshape", "cnn.affine", "cnn.affine"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "32", "*", "32", "*", "3", "]", ")", "\n", "cnn", ".", "affine", "(", "1", ")", "\n", "cnn", ".", "affine", "(", "4096", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.alexnet_model.AlexnetModel.__init__": [[31, 33], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "AlexnetModel", ",", "self", ")", ".", "__init__", "(", "'alexnet'", ",", "224", "+", "3", ",", "512", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.alexnet_model.AlexnetModel.add_inference": [[34, 49], ["cnn.conv", "cnn.mpool", "cnn.conv", "cnn.mpool", "cnn.conv", "cnn.conv", "cnn.conv", "cnn.mpool", "cnn.reshape", "cnn.affine", "cnn.dropout", "cnn.affine", "cnn.dropout"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "# Note: VALID requires padding the images by 3 in width and height", "\n", "    ", "cnn", ".", "conv", "(", "64", ",", "11", ",", "11", ",", "4", ",", "4", ",", "'VALID'", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ")", "\n", "cnn", ".", "conv", "(", "192", ",", "5", ",", "5", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ")", "\n", "cnn", ".", "conv", "(", "384", ",", "3", ",", "3", ")", "\n", "cnn", ".", "conv", "(", "384", ",", "3", ",", "3", ")", "\n", "cnn", ".", "conv", "(", "256", ",", "3", ",", "3", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ")", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "256", "*", "6", "*", "6", "]", ")", "\n", "cnn", ".", "affine", "(", "4096", ")", "\n", "cnn", ".", "dropout", "(", ")", "\n", "cnn", ".", "affine", "(", "4096", ")", "\n", "cnn", ".", "dropout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.alexnet_model.AlexnetCifar10Model.__init__": [[61, 63], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "AlexnetCifar10Model", ",", "self", ")", ".", "__init__", "(", "'alexnet'", ",", "32", ",", "128", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.alexnet_model.AlexnetCifar10Model.add_inference": [[64, 76], ["cnn.conv", "cnn.mpool", "cnn.lrn", "cnn.conv", "cnn.lrn", "cnn.mpool", "cnn.top_layer.get_shape().as_list", "cnn.reshape", "cnn.affine", "cnn.affine", "cnn.top_layer.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.lrn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.lrn", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "cnn", ".", "conv", "(", "64", ",", "5", ",", "5", ",", "1", ",", "1", ",", "'SAME'", ",", "stddev", "=", "5e-2", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'SAME'", ")", "\n", "cnn", ".", "lrn", "(", "depth_radius", "=", "4", ",", "bias", "=", "1.0", ",", "alpha", "=", "0.001", "/", "9.0", ",", "beta", "=", "0.75", ")", "\n", "cnn", ".", "conv", "(", "64", ",", "5", ",", "5", ",", "1", ",", "1", ",", "'SAME'", ",", "bias", "=", "0.1", ",", "stddev", "=", "5e-2", ")", "\n", "cnn", ".", "lrn", "(", "depth_radius", "=", "4", ",", "bias", "=", "1.0", ",", "alpha", "=", "0.001", "/", "9.0", ",", "beta", "=", "0.75", ")", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'SAME'", ")", "\n", "shape", "=", "cnn", ".", "top_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "flat_dim", "=", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", "*", "shape", "[", "3", "]", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "flat_dim", "]", ")", "\n", "cnn", ".", "affine", "(", "384", ",", "stddev", "=", "0.04", ",", "bias", "=", "0.1", ")", "\n", "cnn", ".", "affine", "(", "192", ",", "stddev", "=", "0.04", ",", "bias", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.alexnet_model.AlexnetCifar10Model.get_learning_rate": [[77, 86], ["int", "tensorflow.train.exponential_decay"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_examples_per_epoch", "=", "50000", "\n", "num_epochs_per_decay", "=", "100", "\n", "decay_steps", "=", "int", "(", "num_epochs_per_decay", "*", "num_examples_per_epoch", "/", "\n", "batch_size", ")", "\n", "decay_factor", "=", "0.1", "\n", "return", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "self", ".", "learning_rate", ",", "global_step", ",", "decay_steps", ",", "decay_factor", ",", "\n", "staircase", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model_config._get_model_map": [[102, 109], ["ValueError"], "function", ["None"], ["def", "_get_model_map", "(", "dataset_name", ")", ":", "\n", "  ", "if", "'cifar10'", "==", "dataset_name", ":", "\n", "    ", "return", "_model_name_to_cifar_model", "\n", "", "elif", "dataset_name", "in", "(", "'imagenet'", ",", "'synthetic'", ")", ":", "\n", "    ", "return", "_model_name_to_imagenet_model", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Invalid dataset name: %s'", "%", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model_config.get_model_config": [[111, 119], ["model_config._get_model_map", "ValueError"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.model_config._get_model_map"], ["", "", "def", "get_model_config", "(", "model_name", ",", "dataset", ")", ":", "\n", "  ", "\"\"\"Map model name to model network configuration.\"\"\"", "\n", "model_map", "=", "_get_model_map", "(", "dataset", ".", "name", ")", "\n", "if", "model_name", "not", "in", "model_map", ":", "\n", "    ", "raise", "ValueError", "(", "'Invalid model name \\'%s\\' for dataset \\'%s\\''", "%", "\n", "(", "model_name", ",", "dataset", ".", "name", ")", ")", "\n", "", "else", ":", "\n", "    ", "return", "model_map", "[", "model_name", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model_config.register_model": [[121, 128], ["model_config._get_model_map", "ValueError"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.model_config._get_model_map"], ["", "", "def", "register_model", "(", "model_name", ",", "dataset_name", ",", "model_func", ")", ":", "\n", "  ", "\"\"\"Register a new model that can be obtained with `get_model_config`.\"\"\"", "\n", "model_map", "=", "_get_model_map", "(", "dataset_name", ")", "\n", "if", "model_name", "in", "model_map", ":", "\n", "    ", "raise", "ValueError", "(", "'Model \"%s\" is already registered for dataset \"%s\"'", "%", "\n", "(", "model_name", ",", "dataset_name", ")", ")", "\n", "", "model_map", "[", "model_name", "]", "=", "model_func", "\n", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.official_resnet_model.ImagenetResnetModel.__init__": [[29, 48], ["default_batch_sizes.get", "models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "resnet_size", ",", "version", "=", "2", ")", ":", "\n", "    ", "\"\"\"These are the parameters that work for Imagenet data.\n\n    Args:\n      resnet_size: The number of convolutional layers needed in the model.\n      version: 1 or 2 for v1 or v2, respectively.\n    \"\"\"", "\n", "default_batch_sizes", "=", "{", "\n", "50", ":", "128", ",", "\n", "101", ":", "32", ",", "\n", "152", ":", "32", "\n", "}", "\n", "batch_size", "=", "default_batch_sizes", ".", "get", "(", "resnet_size", ",", "32", ")", "\n", "default_learning_rate", "=", "0.0125", "*", "batch_size", "/", "32", "\n", "model_name", "=", "'official_resnet_{}_v{}'", ".", "format", "(", "resnet_size", ",", "version", ")", "\n", "super", "(", "ImagenetResnetModel", ",", "self", ")", ".", "__init__", "(", "\n", "model_name", ",", "224", ",", "batch_size", ",", "default_learning_rate", ")", "\n", "self", ".", "resnet_size", "=", "resnet_size", "\n", "self", ".", "version", "=", "version", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.official_resnet_model.ImagenetResnetModel.get_learning_rate": [[49, 58], ["tensorflow.train.piecewise_constant", "float", "int"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "(", "\n", "float", "(", "datasets", ".", "IMAGENET_NUM_TRAIN_IMAGES", ")", "/", "batch_size", ")", "\n", "boundaries", "=", "[", "int", "(", "num_batches_per_epoch", "*", "x", ")", "for", "x", "in", "[", "30", ",", "60", ",", "80", ",", "90", "]", "]", "\n", "values", "=", "[", "1", ",", "0.1", ",", "0.01", ",", "0.001", ",", "0.0001", "]", "\n", "adjusted_learning_rate", "=", "(", "\n", "self", ".", "learning_rate", "/", "self", ".", "default_batch_size", "*", "batch_size", ")", "\n", "values", "=", "[", "v", "*", "adjusted_learning_rate", "for", "v", "in", "values", "]", "\n", "return", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.official_resnet_model.ImagenetResnetModel.build_network": [[59, 81], ["tensorflow.cast", "ImagenetModel", "ImagenetModel.", "tensorflow.cast", "tensorflow.logging.fatal"], "methods", ["None"], ["", "def", "build_network", "(", "self", ",", "images", ",", "phase_train", "=", "True", ",", "nclass", "=", "1001", ",", "image_depth", "=", "3", ",", "\n", "data_type", "=", "tf", ".", "float32", ",", "data_format", "=", "'NCHW'", ",", "\n", "use_tf_layers", "=", "True", ",", "fp16_vars", "=", "False", ")", ":", "\n", "    ", "del", "image_depth", "\n", "del", "data_format", "\n", "del", "use_tf_layers", "\n", "# pylint: disable=g-import-not-at-top", "\n", "try", ":", "\n", "      ", "from", "official", ".", "resnet", ".", "imagenet_main", "import", "ImagenetModel", "\n", "", "except", "ImportError", ":", "\n", "      ", "tf", ".", "logging", ".", "fatal", "(", "'Please include tensorflow/models to the PYTHONPATH.'", ")", "\n", "raise", "\n", "", "images", "=", "tf", ".", "cast", "(", "images", ",", "data_type", ")", "\n", "model_class", "=", "ImagenetModel", "(", "resnet_size", "=", "self", ".", "resnet_size", ",", "\n", "resnet_version", "=", "self", ".", "version", ",", "\n", "# The official model dtype seems to be ignored,", "\n", "# as the dtype it uses is the dtype of the input", "\n", "# images. Doesn't hurt to set it though.", "\n", "dtype", "=", "data_type", ")", "\n", "logits", "=", "model_class", "(", "images", ",", "phase_train", ")", "\n", "logits", "=", "tf", ".", "cast", "(", "logits", ",", "tf", ".", "float32", ")", "\n", "return", "logits", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.MobilenetModel.__init__": [[246, 248], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "MobilenetModel", ",", "self", ")", ".", "__init__", "(", "'mobilenet'", ",", "224", ",", "32", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.MobilenetModel.add_inference": [[249, 253], ["tensorflow.contrib.slim.arg_scope", "models.mobilenet", "mobilenet_v2.training_scope"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.training_scope"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "with", "tf", ".", "contrib", ".", "slim", ".", "arg_scope", "(", "training_scope", "(", "is_training", "=", "cnn", ".", "phase_train", ")", ")", ":", "\n", "      ", "cnn", ".", "top_layer", ",", "_", "=", "mobilenet", "(", "cnn", ".", "top_layer", ",", "is_training", "=", "cnn", ".", "phase_train", ")", "\n", "cnn", ".", "top_size", "=", "cnn", ".", "top_layer", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.get_variable": [[41, 48], ["tensorflow.get_variable", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["def", "get_variable", "(", "name", ",", "shape", ",", "dtype", ",", "cast_dtype", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(reedwm): Currently variables and gradients are transferred to other", "\n", "# devices and machines as type `dtype`, not `cast_dtype`. In particular,", "\n", "# this means in fp16 mode, variables are transferred as fp32 values, not", "\n", "# fp16 values, which uses extra bandwidth.", "\n", "  ", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "dtype", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "tf", ".", "cast", "(", "var", ",", "cast_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.adaption": [[50, 86], ["input_layer.get_shape().as_list", "tensorflow.variable_scope", "mobilenet_v2.get_variable", "mobilenet_v2.get_variable", "mobilenet_v2.get_variable", "mobilenet_v2.get_variable", "tensorflow.square", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.pow", "tensorflow.reduce_mean", "input_layer.get_shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "def", "adaption", "(", "input_layer", ")", ":", "\n", "  ", "epsilon", "=", "1e-5", "\n", "variable_dtype", "=", "tf", ".", "float32", "\n", "dtype", "=", "tf", ".", "float16", "\n", "\n", "num_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "squeeze", "=", "[", "1", ",", "2", "]", "\n", "with", "tf", ".", "variable_scope", "(", "default_name", "=", "'adaption'", ")", ":", "\n", "    ", "beta", "=", "get_variable", "(", "'beta'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "alpha", "=", "get_variable", "(", "'alpha'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "gamma", "=", "get_variable", "(", "'gamma'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "theta", "=", "get_variable", "(", "'theta'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "\n", "X", "=", "input_layer", "\n", "alpha_2", "=", "tf", ".", "square", "(", "alpha", ")", "\n", "alpha_2", "=", "alpha_2", "/", "tf", ".", "reduce_mean", "(", "alpha_2", ")", "+", "epsilon", "\n", "alpha", "=", "tf", ".", "sqrt", "(", "alpha_2", ")", "\n", "A", "=", "alpha_2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "X", ")", ",", "squeeze", ",", "keepdims", "=", "True", ")", "-", "(", "\n", "2.", "*", "alpha", "*", "beta", ")", "*", "tf", ".", "reduce_mean", "(", "X", ",", "squeeze", ",", "keepdims", "=", "True", ")", "\n", "A", "=", "tf", ".", "reduce_mean", "(", "\n", "A", ",", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "+", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "beta", ")", ")", "+", "epsilon", ")", "\n", "# B = tf.reduce_sum(alpha_2)", "\n", "B", "=", "1.", "\n", "l2", "=", "tf", ".", "sqrt", "(", "B", "/", "A", ")", "\n", "adaptor", "=", "tf", ".", "pow", "(", "l2", ",", "gamma", "+", "theta", "*", "l2", ")", "\n", "trans_back", "=", "X", "*", "adaptor", "+", "(", "beta", "/", "alpha", ")", "*", "(", "1.", "-", "adaptor", ")", "\n", "\n", "", "return", "trans_back", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.adaption_conv2d": [[88, 92], ["mobilenet_v2.adaption", "slim.conv2d"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption"], ["", "def", "adaption_conv2d", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "name", "=", "'adaption'", "\n", "inputs", "=", "adaption", "(", "inputs", ")", "\n", "return", "slim", ".", "conv2d", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet": [[139, 210], ["ValueError", "copy.deepcopy", "slim.arg_scope", "models.mobilenet.mobilenet"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet"], ["@", "slim", ".", "add_arg_scope", "\n", "def", "mobilenet", "(", "input_tensor", ",", "\n", "num_classes", "=", "1001", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "scope", "=", "'MobilenetV2'", ",", "\n", "conv_defs", "=", "None", ",", "\n", "finegrain_classification_mode", "=", "False", ",", "\n", "min_depth", "=", "None", ",", "\n", "divisible_by", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Creates mobilenet V2 network.\n\n  Inference mode is created by default. To create training use training_scope\n  below.\n\n  with tf.contrib.slim.arg_scope(mobilenet_v2.training_scope()):\n     logits, endpoints = mobilenet_v2.mobilenet(input_tensor)\n\n  Args:\n    input_tensor: The input tensor\n    num_classes: number of classes\n    depth_multiplier: The multiplier applied to scale number of\n    channels in each layer. Note: this is called depth multiplier in the\n    paper but the name is kept for consistency with slim's model builder.\n    scope: Scope of the operator\n    conv_defs: Allows to override default conv def.\n    finegrain_classification_mode: When set to True, the model\n    will keep the last layer large even for small multipliers. Following\n    https://arxiv.org/abs/1801.04381\n    suggests that it improves performance for ImageNet-type of problems.\n      *Note* ignored if final_endpoint makes the builder exit earlier.\n    min_depth: If provided, will ensure that all layers will have that\n    many channels after application of depth multiplier.\n    divisible_by: If provided will ensure that all layers # channels\n    will be divisible by this number.\n    **kwargs: passed directly to mobilenet.mobilenet:\n      prediction_fn- what prediction function to use.\n      reuse-: whether to reuse variables (if reuse set to true, scope\n      must be given).\n  Returns:\n    logits/endpoints pair\n\n  Raises:\n    ValueError: On invalid arguments\n  \"\"\"", "\n", "if", "conv_defs", "is", "None", ":", "\n", "    ", "conv_defs", "=", "V2_DEF", "\n", "", "if", "'multiplier'", "in", "kwargs", ":", "\n", "    ", "raise", "ValueError", "(", "'mobilenetv2 doesn\\'t support generic '", "\n", "'multiplier parameter use \"depth_multiplier\" instead.'", ")", "\n", "", "if", "finegrain_classification_mode", ":", "\n", "    ", "conv_defs", "=", "copy", ".", "deepcopy", "(", "conv_defs", ")", "\n", "if", "depth_multiplier", "<", "1", ":", "\n", "      ", "conv_defs", "[", "'spec'", "]", "[", "-", "1", "]", ".", "params", "[", "'num_outputs'", "]", "/=", "depth_multiplier", "\n", "\n", "", "", "depth_args", "=", "{", "}", "\n", "# NB: do not set depth_args unless they are provided to avoid overriding", "\n", "# whatever default depth_multiplier might have thanks to arg_scope.", "\n", "if", "min_depth", "is", "not", "None", ":", "\n", "    ", "depth_args", "[", "'min_depth'", "]", "=", "min_depth", "\n", "", "if", "divisible_by", "is", "not", "None", ":", "\n", "    ", "depth_args", "[", "'divisible_by'", "]", "=", "divisible_by", "\n", "\n", "", "with", "slim", ".", "arg_scope", "(", "(", "lib", ".", "depth_multiplier", ",", ")", ",", "**", "depth_args", ")", ":", "\n", "    ", "return", "lib", ".", "mobilenet", "(", "\n", "input_tensor", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "conv_defs", "=", "conv_defs", ",", "\n", "scope", "=", "scope", ",", "\n", "multiplier", "=", "depth_multiplier", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet_base": [[212, 218], ["models.mobilenet"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.mobilenet"], ["", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "mobilenet_base", "(", "input_tensor", ",", "depth_multiplier", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Creates base of the mobilenet (no pooling and no logits) .\"\"\"", "\n", "return", "mobilenet", "(", "input_tensor", ",", "\n", "depth_multiplier", "=", "depth_multiplier", ",", "\n", "base_only", "=", "True", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.training_scope": [[220, 241], ["models.mobilenet.training_scope"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_v2.training_scope"], ["", "def", "training_scope", "(", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Defines MobilenetV2 training scope.\n\n  Usage:\n     with tf.contrib.slim.arg_scope(mobilenet_v2.training_scope()):\n       logits, endpoints = mobilenet_v2.mobilenet(input_tensor)\n\n  with slim.\n\n  Args:\n    **kwargs: Passed to mobilenet.training_scope. The following parameters\n    are supported:\n      weight_decay- The weight decay to use for regularizing the model.\n      stddev-  Standard deviation for initialization, if negative uses xavier.\n      dropout_keep_prob- dropout keep probability\n      bn_decay- decay for the batch norm moving averages.\n\n  Returns:\n    An `arg_scope` to use for the mobilenet v2 model.\n  \"\"\"", "\n", "return", "lib", ".", "training_scope", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.lenet_model.Lenet5Model.__init__": [[30, 32], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Lenet5Model", ",", "self", ")", ".", "__init__", "(", "'lenet5'", ",", "28", ",", "32", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.lenet_model.Lenet5Model.add_inference": [[33, 41], ["cnn.conv", "cnn.mpool", "cnn.conv", "cnn.mpool", "cnn.reshape", "cnn.affine"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "# Note: This matches TF's MNIST tutorial model", "\n", "    ", "cnn", ".", "conv", "(", "32", ",", "5", ",", "5", ")", "\n", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "cnn", ".", "conv", "(", "64", ",", "5", ",", "5", ")", "\n", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "64", "*", "7", "*", "7", "]", ")", "\n", "cnn", ".", "affine", "(", "512", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.__init__": [[30, 35], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "layer_counts", ",", "growth_rate", ")", ":", "\n", "    ", "self", ".", "growth_rate", "=", "growth_rate", "\n", "super", "(", "DensenetCifar10Model", ",", "self", ")", ".", "__init__", "(", "model", ",", "32", ",", "64", ",", "0.1", ",", "\n", "layer_counts", "=", "layer_counts", ")", "\n", "self", ".", "batch_norm_config", "=", "{", "'decay'", ":", "0.9", ",", "'epsilon'", ":", "1e-5", ",", "'scale'", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.dense_block": [[36, 45], ["cnn.batch_norm", "tensorflow.nn.relu", "cnn.conv", "tensorflow.concat", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv"], ["", "def", "dense_block", "(", "self", ",", "cnn", ",", "growth_rate", ")", ":", "\n", "    ", "input_layer", "=", "cnn", ".", "top_layer", "\n", "c", "=", "cnn", ".", "batch_norm", "(", "input_layer", ",", "**", "self", ".", "batch_norm_config", ")", "\n", "c", "=", "tf", ".", "nn", ".", "relu", "(", "c", ")", "\n", "c", "=", "cnn", ".", "conv", "(", "growth_rate", ",", "3", ",", "3", ",", "1", ",", "1", ",", "stddev", "=", "np", ".", "sqrt", "(", "2.0", "/", "9", "/", "growth_rate", ")", ",", "\n", "activation", "=", "None", ",", "input_layer", "=", "c", ")", "\n", "channel_index", "=", "3", "if", "cnn", ".", "channel_pos", "==", "'channels_last'", "else", "1", "\n", "cnn", ".", "top_layer", "=", "tf", ".", "concat", "(", "[", "input_layer", ",", "c", "]", ",", "channel_index", ")", "\n", "cnn", ".", "top_size", "+=", "growth_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.transition_layer": [[46, 52], ["cnn.batch_norm", "tensorflow.nn.relu", "cnn.conv", "cnn.apool", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.apool"], ["", "def", "transition_layer", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "in_size", "=", "cnn", ".", "top_size", "\n", "cnn", ".", "batch_norm", "(", "**", "self", ".", "batch_norm_config", ")", "\n", "cnn", ".", "top_layer", "=", "tf", ".", "nn", ".", "relu", "(", "cnn", ".", "top_layer", ")", "\n", "cnn", ".", "conv", "(", "in_size", ",", "1", ",", "1", ",", "1", ",", "1", ",", "stddev", "=", "np", ".", "sqrt", "(", "2.0", "/", "9", "/", "in_size", ")", ")", "\n", "cnn", ".", "apool", "(", "2", ",", "2", ",", "2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.add_inference": [[53, 76], ["cnn.conv", "six.moves.xrange", "densenet_model.DensenetCifar10Model.transition_layer", "six.moves.xrange", "densenet_model.DensenetCifar10Model.transition_layer", "six.moves.xrange", "cnn.batch_norm", "tensorflow.nn.relu", "cnn.spatial_mean", "ValueError", "ValueError", "densenet_model.DensenetCifar10Model.dense_block", "densenet_model.DensenetCifar10Model.dense_block", "densenet_model.DensenetCifar10Model.dense_block", "cnn.top_layer.get_shape().as_list", "densenet_model.DensenetCifar10Model.get_model", "densenet_model.DensenetCifar10Model.get_model", "cnn.top_layer.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.transition_layer", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.transition_layer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.spatial_mean", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.dense_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.dense_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.dense_block", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "if", "self", ".", "layer_counts", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Layer counts not specified for %s'", "%", "self", ".", "get_model", "(", ")", ")", "\n", "", "if", "self", ".", "growth_rate", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Growth rate not specified for %s'", "%", "self", ".", "get_model", "(", ")", ")", "\n", "\n", "", "cnn", ".", "conv", "(", "16", ",", "3", ",", "3", ",", "1", ",", "1", ",", "activation", "=", "None", ")", "\n", "# Block 1", "\n", "for", "_", "in", "xrange", "(", "self", ".", "layer_counts", "[", "0", "]", ")", ":", "\n", "      ", "self", ".", "dense_block", "(", "cnn", ",", "self", ".", "growth_rate", ")", "\n", "", "self", ".", "transition_layer", "(", "cnn", ")", "\n", "# Block 2", "\n", "for", "_", "in", "xrange", "(", "self", ".", "layer_counts", "[", "1", "]", ")", ":", "\n", "      ", "self", ".", "dense_block", "(", "cnn", ",", "self", ".", "growth_rate", ")", "\n", "", "self", ".", "transition_layer", "(", "cnn", ")", "\n", "# Block 3", "\n", "for", "_", "in", "xrange", "(", "self", ".", "layer_counts", "[", "2", "]", ")", ":", "\n", "      ", "self", ".", "dense_block", "(", "cnn", ",", "self", ".", "growth_rate", ")", "\n", "", "cnn", ".", "batch_norm", "(", "**", "self", ".", "batch_norm_config", ")", "\n", "cnn", ".", "top_layer", "=", "tf", ".", "nn", ".", "relu", "(", "cnn", ".", "top_layer", ")", "\n", "channel_index", "=", "3", "if", "cnn", ".", "channel_pos", "==", "'channels_last'", "else", "1", "\n", "cnn", ".", "top_size", "=", "cnn", ".", "top_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "channel_index", "]", "\n", "cnn", ".", "spatial_mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.DensenetCifar10Model.get_learning_rate": [[77, 84], ["int", "tensorflow.train.piecewise_constant", "numpy.array"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "int", "(", "50000", "/", "batch_size", ")", "\n", "boundaries", "=", "num_batches_per_epoch", "*", "np", ".", "array", "(", "[", "150", ",", "225", ",", "300", "]", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "boundaries", "=", "[", "x", "for", "x", "in", "boundaries", "]", "\n", "values", "=", "[", "0.1", ",", "0.01", ",", "0.001", ",", "0.0001", "]", "\n", "return", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.create_densenet40_k12_model": [[86, 88], ["densenet_model.DensenetCifar10Model"], "function", ["None"], ["", "", "def", "create_densenet40_k12_model", "(", ")", ":", "\n", "  ", "return", "DensenetCifar10Model", "(", "'densenet40_k12'", ",", "(", "12", ",", "12", ",", "12", ")", ",", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.create_densenet100_k12_model": [[90, 92], ["densenet_model.DensenetCifar10Model"], "function", ["None"], ["", "def", "create_densenet100_k12_model", "(", ")", ":", "\n", "  ", "return", "DensenetCifar10Model", "(", "'densenet100_k12'", ",", "(", "32", ",", "32", ",", "32", ")", ",", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.densenet_model.create_densenet100_k24_model": [[94, 96], ["densenet_model.DensenetCifar10Model"], "function", ["None"], ["", "def", "create_densenet100_k24_model", "(", ")", ":", "\n", "  ", "return", "DensenetCifar10Model", "(", "'densenet100_k24'", ",", "(", "32", ",", "32", ",", "32", ")", ",", "24", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.overfeat_model.OverfeatModel.__init__": [[32, 34], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "OverfeatModel", ",", "self", ")", ".", "__init__", "(", "'overfeat'", ",", "231", ",", "32", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.overfeat_model.OverfeatModel.add_inference": [[35, 50], ["cnn.conv", "cnn.mpool", "cnn.conv", "cnn.mpool", "cnn.conv", "cnn.conv", "cnn.conv", "cnn.mpool", "cnn.reshape", "cnn.affine", "cnn.dropout", "cnn.affine", "cnn.dropout"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.reshape", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "# Note: VALID requires padding the images by 3 in width and height", "\n", "    ", "cnn", ".", "conv", "(", "96", ",", "11", ",", "11", ",", "4", ",", "4", ",", "mode", "=", "'VALID'", ")", "\n", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "cnn", ".", "conv", "(", "256", ",", "5", ",", "5", ",", "1", ",", "1", ",", "mode", "=", "'VALID'", ")", "\n", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "cnn", ".", "conv", "(", "512", ",", "3", ",", "3", ")", "\n", "cnn", ".", "conv", "(", "1024", ",", "3", ",", "3", ")", "\n", "cnn", ".", "conv", "(", "1024", ",", "3", ",", "3", ")", "\n", "cnn", ".", "mpool", "(", "2", ",", "2", ")", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "1024", "*", "6", "*", "6", "]", ")", "\n", "cnn", ".", "affine", "(", "3072", ")", "\n", "cnn", ".", "dropout", "(", ")", "\n", "cnn", ".", "affine", "(", "4096", ")", "\n", "cnn", ".", "dropout", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.NasnetModel.__init__": [[538, 540], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "NasnetModel", ",", "self", ")", ".", "__init__", "(", "'nasnet'", ",", "224", ",", "32", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.NasnetModel.add_inference": [[541, 548], ["tensorflow.logging.info", "nasnet_model.build_nasnet_mobile"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "'input_image_shape: {}'", ".", "format", "(", "cnn", ".", "top_layer", ".", "shape", ")", ")", "\n", "cnn", ".", "top_layer", ",", "_", "=", "build_nasnet_mobile", "(", "\n", "images", "=", "cnn", ".", "top_layer", ",", "\n", "is_training", "=", "cnn", ".", "phase_train", ",", "\n", "data_format", "=", "cnn", ".", "data_format", ")", "\n", "cnn", ".", "top_size", "=", "cnn", ".", "top_layer", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.NasnetLargeModel.__init__": [[553, 555], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "NasnetLargeModel", ",", "self", ")", ".", "__init__", "(", "'nasnet'", ",", "331", ",", "16", ",", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.NasnetLargeModel.add_inference": [[556, 563], ["tensorflow.logging.info", "nasnet_model.build_nasnet_large"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_large"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "'input_image_shape: {}'", ".", "format", "(", "cnn", ".", "top_layer", ".", "shape", ")", ")", "\n", "cnn", ".", "top_layer", ",", "_", "=", "build_nasnet_large", "(", "\n", "images", "=", "cnn", ".", "top_layer", ",", "\n", "is_training", "=", "cnn", ".", "phase_train", ",", "\n", "data_format", "=", "cnn", ".", "data_format", ")", "\n", "cnn", ".", "top_size", "=", "cnn", ".", "top_layer", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.NasnetCifarModel.__init__": [[568, 570], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "NasnetCifarModel", ",", "self", ")", ".", "__init__", "(", "'nasnet'", ",", "32", ",", "32", ",", "0.025", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.NasnetCifarModel.add_inference": [[571, 578], ["tensorflow.logging.info", "nasnet_model.build_nasnet_cifar"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_cifar"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "'input_image_shape: {}'", ".", "format", "(", "cnn", ".", "top_layer", ".", "shape", ")", ")", "\n", "cnn", ".", "top_layer", ",", "_", "=", "build_nasnet_cifar", "(", "\n", "images", "=", "cnn", ".", "top_layer", ",", "\n", "is_training", "=", "cnn", ".", "phase_train", ",", "\n", "data_format", "=", "cnn", ".", "data_format", ")", "\n", "cnn", ".", "top_size", "=", "cnn", ".", "top_layer", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._cifar_config": [[39, 56], ["tensorflow.contrib.training.HParams"], "function", ["None"], ["def", "_cifar_config", "(", "is_training", "=", "True", ",", "data_format", "=", "None", ",", "total_steps", "=", "None", ")", ":", "\n", "  ", "drop_path_keep_prob", "=", "1.0", "if", "not", "is_training", "else", "0.6", "\n", "return", "tf", ".", "contrib", ".", "training", ".", "HParams", "(", "\n", "stem_multiplier", "=", "3.0", ",", "\n", "drop_path_keep_prob", "=", "drop_path_keep_prob", ",", "\n", "num_cells", "=", "18", ",", "\n", "use_aux_head", "=", "1", ",", "\n", "num_conv_filters", "=", "32", ",", "\n", "dense_dropout_keep_prob", "=", "1.0", ",", "\n", "filter_scaling_rate", "=", "2.0", ",", "\n", "num_reduction_layers", "=", "2", ",", "\n", "skip_reduction_layer_input", "=", "0", ",", "\n", "data_format", "=", "data_format", "or", "'NHWC'", ",", "\n", "# 600 epochs with a batch size of 32", "\n", "# This is used for the drop path probabilities since it needs to increase", "\n", "# the drop out probability over the course of training.", "\n", "total_training_steps", "=", "total_steps", "or", "937500", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._large_imagenet_config": [[69, 84], ["tensorflow.contrib.training.HParams"], "function", ["None"], ["", "def", "_large_imagenet_config", "(", "is_training", "=", "True", ",", "data_format", "=", "None", ",", "\n", "total_steps", "=", "None", ")", ":", "\n", "  ", "drop_path_keep_prob", "=", "1.0", "if", "not", "is_training", "else", "0.7", "\n", "return", "tf", ".", "contrib", ".", "training", ".", "HParams", "(", "\n", "stem_multiplier", "=", "3.0", ",", "\n", "dense_dropout_keep_prob", "=", "0.5", ",", "\n", "num_cells", "=", "18", ",", "\n", "filter_scaling_rate", "=", "2.0", ",", "\n", "num_conv_filters", "=", "168", ",", "\n", "drop_path_keep_prob", "=", "drop_path_keep_prob", ",", "\n", "use_aux_head", "=", "1", ",", "\n", "num_reduction_layers", "=", "2", ",", "\n", "skip_reduction_layer_input", "=", "1", ",", "\n", "data_format", "=", "data_format", "or", "'NHWC'", ",", "\n", "total_training_steps", "=", "total_steps", "or", "250000", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._mobile_imagenet_config": [[97, 110], ["tensorflow.contrib.training.HParams"], "function", ["None"], ["", "def", "_mobile_imagenet_config", "(", "data_format", "=", "None", ",", "total_steps", "=", "None", ")", ":", "\n", "  ", "return", "tf", ".", "contrib", ".", "training", ".", "HParams", "(", "\n", "stem_multiplier", "=", "1.0", ",", "\n", "dense_dropout_keep_prob", "=", "0.5", ",", "\n", "num_cells", "=", "12", ",", "\n", "filter_scaling_rate", "=", "2.0", ",", "\n", "drop_path_keep_prob", "=", "1.0", ",", "\n", "num_conv_filters", "=", "44", ",", "\n", "use_aux_head", "=", "1", ",", "\n", "num_reduction_layers", "=", "2", ",", "\n", "skip_reduction_layer_input", "=", "0", ",", "\n", "data_format", "=", "data_format", "or", "'NHWC'", ",", "\n", "total_training_steps", "=", "total_steps", "or", "250000", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_cifar_arg_scope": [[113, 148], ["tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.variance_scaling_initializer", "arg_scope", "arg_scope", "arg_scope", "arg_scope"], "function", ["None"], ["", "def", "nasnet_cifar_arg_scope", "(", "weight_decay", "=", "5e-4", ",", "\n", "batch_norm_decay", "=", "0.9", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ")", ":", "\n", "  ", "\"\"\"Defines the default arg scope for the NASNet-A Cifar model.\n\n  Args:\n    weight_decay: The weight decay to use for regularizing the model.\n    batch_norm_decay: Decay for batch norm moving average.\n    batch_norm_epsilon: Small float added to variance to avoid dividing by zero\n      in batch norm.\n  Returns:\n    An `arg_scope` to use for the NASNet Cifar Model.\n  \"\"\"", "\n", "batch_norm_params", "=", "{", "\n", "# Decay for the moving averages.", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "# epsilon to prevent 0s in variance.", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "True", ",", "\n", "'fused'", ":", "True", ",", "\n", "}", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "weight_decay", ")", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "\n", "mode", "=", "'FAN_OUT'", ")", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "fully_connected", ",", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "weights_initializer", "=", "weights_initializer", ")", ":", "\n", "    ", "with", "arg_scope", "(", "[", "slim", ".", "fully_connected", "]", ",", "activation_fn", "=", "None", ",", "scope", "=", "'FC'", ")", ":", "\n", "      ", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "sc", ":", "\n", "          ", "return", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope": [[150, 185], ["tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.variance_scaling_initializer", "arg_scope", "arg_scope", "arg_scope", "arg_scope"], "function", ["None"], ["", "", "", "", "", "def", "nasnet_mobile_arg_scope", "(", "weight_decay", "=", "4e-5", ",", "\n", "batch_norm_decay", "=", "0.9997", ",", "\n", "batch_norm_epsilon", "=", "1e-3", ")", ":", "\n", "  ", "\"\"\"Defines the default arg scope for the NASNet-A Mobile ImageNet model.\n\n  Args:\n    weight_decay: The weight decay to use for regularizing the model.\n    batch_norm_decay: Decay for batch norm moving average.\n    batch_norm_epsilon: Small float added to variance to avoid dividing by zero\n      in batch norm.\n  Returns:\n    An `arg_scope` to use for the NASNet Mobile Model.\n  \"\"\"", "\n", "batch_norm_params", "=", "{", "\n", "# Decay for the moving averages.", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "# epsilon to prevent 0s in variance.", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "True", ",", "\n", "'fused'", ":", "True", ",", "\n", "}", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "weight_decay", ")", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "\n", "mode", "=", "'FAN_OUT'", ")", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "fully_connected", ",", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "weights_initializer", "=", "weights_initializer", ")", ":", "\n", "    ", "with", "arg_scope", "(", "[", "slim", ".", "fully_connected", "]", ",", "activation_fn", "=", "None", ",", "scope", "=", "'FC'", ")", ":", "\n", "      ", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "sc", ":", "\n", "          ", "return", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_large_arg_scope": [[187, 222], ["tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.variance_scaling_initializer", "arg_scope", "arg_scope", "arg_scope", "arg_scope"], "function", ["None"], ["", "", "", "", "", "def", "nasnet_large_arg_scope", "(", "weight_decay", "=", "5e-5", ",", "\n", "batch_norm_decay", "=", "0.9997", ",", "\n", "batch_norm_epsilon", "=", "1e-3", ")", ":", "\n", "  ", "\"\"\"Defines the default arg scope for the NASNet-A Large ImageNet model.\n\n  Args:\n    weight_decay: The weight decay to use for regularizing the model.\n    batch_norm_decay: Decay for batch norm moving average.\n    batch_norm_epsilon: Small float added to variance to avoid dividing by zero\n      in batch norm.\n  Returns:\n    An `arg_scope` to use for the NASNet Large Model.\n  \"\"\"", "\n", "batch_norm_params", "=", "{", "\n", "# Decay for the moving averages.", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "# epsilon to prevent 0s in variance.", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "True", ",", "\n", "'fused'", ":", "True", ",", "\n", "}", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "weight_decay", ")", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "\n", "mode", "=", "'FAN_OUT'", ")", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "fully_connected", ",", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "weights_initializer", "=", "weights_initializer", ")", ":", "\n", "    ", "with", "arg_scope", "(", "[", "slim", ".", "fully_connected", "]", ",", "activation_fn", "=", "None", ",", "scope", "=", "'FC'", ")", ":", "\n", "      ", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "biases_initializer", "=", "None", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "sc", ":", "\n", "          ", "return", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._build_aux_head": [[224, 246], ["tensorflow.variable_scope", "tensorflow.identity", "tensorflow.variable_scope", "slim.avg_pool2d", "slim.conv2d", "slim.batch_norm", "tensorflow.nn.relu", "slim.conv2d", "slim.batch_norm", "tensorflow.nn.relu", "tensorflow.contrib.layers.flatten", "slim.fully_connected"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm"], ["", "", "", "", "", "def", "_build_aux_head", "(", "net", ",", "end_points", ",", "num_classes", ",", "hparams", ",", "scope", ")", ":", "\n", "  ", "\"\"\"Auxiliary head used for all models across all datasets.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "    ", "aux_logits", "=", "tf", ".", "identity", "(", "net", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'aux_logits'", ")", ":", "\n", "      ", "aux_logits", "=", "slim", ".", "avg_pool2d", "(", "\n", "aux_logits", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "3", ",", "padding", "=", "'VALID'", ")", "\n", "aux_logits", "=", "slim", ".", "conv2d", "(", "aux_logits", ",", "128", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'proj'", ")", "\n", "aux_logits", "=", "slim", ".", "batch_norm", "(", "aux_logits", ",", "scope", "=", "'aux_bn0'", ")", "\n", "aux_logits", "=", "tf", ".", "nn", ".", "relu", "(", "aux_logits", ")", "\n", "# Shape of feature map before the final layer.", "\n", "shape", "=", "aux_logits", ".", "shape", "\n", "if", "hparams", ".", "data_format", "==", "'NHWC'", ":", "\n", "        ", "shape", "=", "shape", "[", "1", ":", "3", "]", "\n", "", "else", ":", "\n", "        ", "shape", "=", "shape", "[", "2", ":", "4", "]", "\n", "", "aux_logits", "=", "slim", ".", "conv2d", "(", "aux_logits", ",", "768", ",", "shape", ",", "padding", "=", "'VALID'", ")", "\n", "aux_logits", "=", "slim", ".", "batch_norm", "(", "aux_logits", ",", "scope", "=", "'aux_bn1'", ")", "\n", "aux_logits", "=", "tf", ".", "nn", ".", "relu", "(", "aux_logits", ")", "\n", "aux_logits", "=", "tf", ".", "contrib", ".", "layers", ".", "flatten", "(", "aux_logits", ")", "\n", "aux_logits", "=", "slim", ".", "fully_connected", "(", "aux_logits", ",", "num_classes", ")", "\n", "end_points", "[", "'AuxLogits'", "]", "=", "aux_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._imagenet_stem": [[248, 276], ["int", "slim.conv2d", "slim.batch_norm", "range", "stem_cell", "cell_outputs.append"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm"], ["", "", "", "def", "_imagenet_stem", "(", "inputs", ",", "hparams", ",", "stem_cell", ")", ":", "\n", "  ", "\"\"\"Stem used for models trained on ImageNet.\"\"\"", "\n", "num_stem_cells", "=", "2", "\n", "\n", "# 149 x 149 x 32", "\n", "num_stem_filters", "=", "int", "(", "32", "*", "hparams", ".", "stem_multiplier", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "\n", "inputs", ",", "\n", "num_stem_filters", ",", "[", "3", ",", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "scope", "=", "'conv0'", ",", "\n", "padding", "=", "'VALID'", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "net", ",", "scope", "=", "'conv0_bn'", ")", "\n", "\n", "# Run the reduction cells", "\n", "cell_outputs", "=", "[", "None", ",", "net", "]", "\n", "filter_scaling", "=", "1.0", "/", "(", "hparams", ".", "filter_scaling_rate", "**", "num_stem_cells", ")", "\n", "for", "cell_num", "in", "range", "(", "num_stem_cells", ")", ":", "\n", "    ", "net", "=", "stem_cell", "(", "\n", "net", ",", "\n", "scope", "=", "'cell_stem_{}'", ".", "format", "(", "cell_num", ")", ",", "\n", "filter_scaling", "=", "filter_scaling", ",", "\n", "stride", "=", "2", ",", "\n", "prev_layer", "=", "cell_outputs", "[", "-", "2", "]", ",", "\n", "cell_num", "=", "cell_num", ")", "\n", "cell_outputs", ".", "append", "(", "net", ")", "\n", "filter_scaling", "*=", "hparams", ".", "filter_scaling_rate", "\n", "", "return", "net", ",", "cell_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._cifar_stem": [[278, 284], ["int", "slim.conv2d", "slim.batch_norm"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm"], ["", "def", "_cifar_stem", "(", "inputs", ",", "hparams", ")", ":", "\n", "  ", "\"\"\"Stem used for models trained on Cifar.\"\"\"", "\n", "num_stem_filters", "=", "int", "(", "hparams", ".", "num_conv_filters", "*", "hparams", ".", "stem_multiplier", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "inputs", ",", "num_stem_filters", ",", "3", ",", "scope", "=", "'l1_stem_3x3'", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "net", ",", "scope", "=", "'l1_stem_bn'", ")", "\n", "return", "net", ",", "[", "None", ",", "net", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_cifar": [[286, 328], ["nasnet_model._cifar_config", "models.nasnet_utils.NasNetANormalCell", "models.nasnet_utils.NasNetAReductionCell", "tensorflow.test.is_gpu_available", "tensorflow.logging.info", "arg_scope", "arg_scope", "nasnet_model._build_nasnet_base"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._cifar_config", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._build_nasnet_base"], ["", "def", "build_nasnet_cifar", "(", "images", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "data_format", "=", "None", ",", "\n", "total_steps", "=", "None", ")", ":", "\n", "  ", "\"\"\"Build NASNet model for the Cifar Dataset.\"\"\"", "\n", "hparams", "=", "_cifar_config", "(", "\n", "is_training", "=", "is_training", ",", "data_format", "=", "data_format", ",", "total_steps", "=", "total_steps", ")", "\n", "\n", "if", "tf", ".", "test", ".", "is_gpu_available", "(", ")", "and", "hparams", ".", "data_format", "==", "'NHWC'", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "'A GPU is available on the machine, consider using NCHW '", "\n", "'data format for increased speed on GPU.'", ")", "\n", "\n", "# Calculate the total number of cells in the network", "\n", "# Add 2 for the reduction cells", "\n", "", "total_num_cells", "=", "hparams", ".", "num_cells", "+", "2", "\n", "\n", "normal_cell", "=", "nasnet_utils", ".", "NasNetANormalCell", "(", "\n", "hparams", ".", "num_conv_filters", ",", "hparams", ".", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "hparams", ".", "total_training_steps", ")", "\n", "reduction_cell", "=", "nasnet_utils", ".", "NasNetAReductionCell", "(", "\n", "hparams", ".", "num_conv_filters", ",", "hparams", ".", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "hparams", ".", "total_training_steps", ")", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "dropout", ",", "nasnet_utils", ".", "drop_path", ",", "slim", ".", "batch_norm", "]", ",", "\n", "is_training", "=", "is_training", ")", ":", "\n", "    ", "with", "arg_scope", "(", "\n", "[", "\n", "slim", ".", "avg_pool2d", ",", "slim", ".", "max_pool2d", ",", "slim", ".", "conv2d", ",", "slim", ".", "batch_norm", ",", "\n", "slim", ".", "separable_conv2d", ",", "nasnet_utils", ".", "factorized_reduction", ",", "\n", "nasnet_utils", ".", "global_avg_pool", ",", "nasnet_utils", ".", "get_channel_index", ",", "\n", "nasnet_utils", ".", "get_channel_dim", "\n", "]", ",", "\n", "data_format", "=", "hparams", ".", "data_format", ")", ":", "\n", "      ", "return", "_build_nasnet_base", "(", "\n", "images", ",", "\n", "normal_cell", "=", "normal_cell", ",", "\n", "reduction_cell", "=", "reduction_cell", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "hparams", "=", "hparams", ",", "\n", "is_training", "=", "is_training", ",", "\n", "stem_type", "=", "'cifar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile": [[333, 379], ["nasnet_model._mobile_imagenet_config", "models.nasnet_utils.NasNetANormalCell", "models.nasnet_utils.NasNetAReductionCell", "tensorflow.test.is_gpu_available", "tensorflow.logging.info", "arg_scope", "arg_scope", "nasnet_model._build_nasnet_base"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._mobile_imagenet_config", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._build_nasnet_base"], ["def", "build_nasnet_mobile", "(", "images", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "data_format", "=", "None", ",", "\n", "total_steps", "=", "None", ",", "\n", "final_endpoint", "=", "None", ")", ":", "\n", "  ", "\"\"\"Build NASNet Mobile model for the ImageNet Dataset.\"\"\"", "\n", "hparams", "=", "_mobile_imagenet_config", "(", "\n", "data_format", "=", "data_format", ",", "total_steps", "=", "total_steps", ")", "\n", "\n", "if", "tf", ".", "test", ".", "is_gpu_available", "(", ")", "and", "hparams", ".", "data_format", "==", "'NHWC'", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "'A GPU is available on the machine, consider using NCHW '", "\n", "'data format for increased speed on GPU.'", ")", "\n", "\n", "# Calculate the total number of cells in the network", "\n", "# Add 2 for the reduction cells", "\n", "", "total_num_cells", "=", "hparams", ".", "num_cells", "+", "2", "\n", "# If ImageNet, then add an additional two for the stem cells", "\n", "total_num_cells", "+=", "2", "\n", "\n", "normal_cell", "=", "nasnet_utils", ".", "NasNetANormalCell", "(", "\n", "hparams", ".", "num_conv_filters", ",", "hparams", ".", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "hparams", ".", "total_training_steps", ")", "\n", "reduction_cell", "=", "nasnet_utils", ".", "NasNetAReductionCell", "(", "\n", "hparams", ".", "num_conv_filters", ",", "hparams", ".", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "hparams", ".", "total_training_steps", ")", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "dropout", ",", "nasnet_utils", ".", "drop_path", ",", "slim", ".", "batch_norm", "]", ",", "\n", "is_training", "=", "is_training", ")", ":", "\n", "    ", "with", "arg_scope", "(", "\n", "[", "\n", "slim", ".", "avg_pool2d", ",", "slim", ".", "max_pool2d", ",", "slim", ".", "conv2d", ",", "slim", ".", "batch_norm", ",", "\n", "slim", ".", "separable_conv2d", ",", "nasnet_utils", ".", "factorized_reduction", ",", "\n", "nasnet_utils", ".", "global_avg_pool", ",", "nasnet_utils", ".", "get_channel_index", ",", "\n", "nasnet_utils", ".", "get_channel_dim", "\n", "]", ",", "\n", "data_format", "=", "hparams", ".", "data_format", ")", ":", "\n", "      ", "return", "_build_nasnet_base", "(", "\n", "images", ",", "\n", "normal_cell", "=", "normal_cell", ",", "\n", "reduction_cell", "=", "reduction_cell", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "hparams", "=", "hparams", ",", "\n", "is_training", "=", "is_training", ",", "\n", "stem_type", "=", "'imagenet'", ",", "\n", "final_endpoint", "=", "final_endpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_large": [[384, 430], ["nasnet_model._large_imagenet_config", "models.nasnet_utils.NasNetANormalCell", "models.nasnet_utils.NasNetAReductionCell", "tensorflow.test.is_gpu_available", "tensorflow.logging.info", "arg_scope", "arg_scope", "nasnet_model._build_nasnet_base"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._large_imagenet_config", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._build_nasnet_base"], ["def", "build_nasnet_large", "(", "images", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "data_format", "=", "None", ",", "\n", "total_steps", "=", "None", ",", "\n", "final_endpoint", "=", "None", ")", ":", "\n", "  ", "\"\"\"Build NASNet Large model for the ImageNet Dataset.\"\"\"", "\n", "hparams", "=", "_large_imagenet_config", "(", "\n", "is_training", "=", "is_training", ",", "data_format", "=", "data_format", ",", "total_steps", "=", "total_steps", ")", "\n", "\n", "if", "tf", ".", "test", ".", "is_gpu_available", "(", ")", "and", "hparams", ".", "data_format", "==", "'NHWC'", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "'A GPU is available on the machine, consider using NCHW '", "\n", "'data format for increased speed on GPU.'", ")", "\n", "\n", "# Calculate the total number of cells in the network", "\n", "# Add 2 for the reduction cells", "\n", "", "total_num_cells", "=", "hparams", ".", "num_cells", "+", "2", "\n", "# If ImageNet, then add an additional two for the stem cells", "\n", "total_num_cells", "+=", "2", "\n", "\n", "normal_cell", "=", "nasnet_utils", ".", "NasNetANormalCell", "(", "\n", "hparams", ".", "num_conv_filters", ",", "hparams", ".", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "hparams", ".", "total_training_steps", ")", "\n", "reduction_cell", "=", "nasnet_utils", ".", "NasNetAReductionCell", "(", "\n", "hparams", ".", "num_conv_filters", ",", "hparams", ".", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "hparams", ".", "total_training_steps", ")", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "dropout", ",", "nasnet_utils", ".", "drop_path", ",", "slim", ".", "batch_norm", "]", ",", "\n", "is_training", "=", "is_training", ")", ":", "\n", "    ", "with", "arg_scope", "(", "\n", "[", "\n", "slim", ".", "avg_pool2d", ",", "slim", ".", "max_pool2d", ",", "slim", ".", "conv2d", ",", "slim", ".", "batch_norm", ",", "\n", "slim", ".", "separable_conv2d", ",", "nasnet_utils", ".", "factorized_reduction", ",", "\n", "nasnet_utils", ".", "global_avg_pool", ",", "nasnet_utils", ".", "get_channel_index", ",", "\n", "nasnet_utils", ".", "get_channel_dim", "\n", "]", ",", "\n", "data_format", "=", "hparams", ".", "data_format", ")", ":", "\n", "      ", "return", "_build_nasnet_base", "(", "\n", "images", ",", "\n", "normal_cell", "=", "normal_cell", ",", "\n", "reduction_cell", "=", "reduction_cell", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "hparams", "=", "hparams", ",", "\n", "is_training", "=", "is_training", ",", "\n", "stem_type", "=", "'imagenet'", ",", "\n", "final_endpoint", "=", "final_endpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model._build_nasnet_base": [[435, 533], ["models.nasnet_utils.calc_reduction_layers", "stem", "nasnet_model._build_nasnet_base.add_and_check_endpoint"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.calc_reduction_layers"], ["def", "_build_nasnet_base", "(", "images", ",", "\n", "normal_cell", ",", "\n", "reduction_cell", ",", "\n", "num_classes", ",", "\n", "hparams", ",", "\n", "is_training", ",", "\n", "stem_type", ",", "\n", "final_endpoint", "=", "None", ")", ":", "\n", "  ", "\"\"\"Constructs a NASNet image model.\"\"\"", "\n", "\n", "end_points", "=", "{", "}", "\n", "\n", "def", "add_and_check_endpoint", "(", "endpoint_name", ",", "net", ")", ":", "\n", "    ", "end_points", "[", "endpoint_name", "]", "=", "net", "\n", "return", "final_endpoint", "and", "(", "endpoint_name", "==", "final_endpoint", ")", "\n", "\n", "# Find where to place the reduction cells or stride normal cells", "\n", "", "reduction_indices", "=", "nasnet_utils", ".", "calc_reduction_layers", "(", "\n", "hparams", ".", "num_cells", ",", "hparams", ".", "num_reduction_layers", ")", "\n", "stem_cell", "=", "reduction_cell", "\n", "\n", "if", "stem_type", "==", "'imagenet'", ":", "\n", "    ", "stem", "=", "lambda", ":", "_imagenet_stem", "(", "images", ",", "hparams", ",", "stem_cell", ")", "\n", "", "elif", "stem_type", "==", "'cifar'", ":", "\n", "    ", "stem", "=", "lambda", ":", "_cifar_stem", "(", "images", ",", "hparams", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Unknown stem_type: '", ",", "stem_type", ")", "\n", "", "net", ",", "cell_outputs", "=", "stem", "(", ")", "\n", "if", "add_and_check_endpoint", "(", "'Stem'", ",", "net", ")", ":", "\n", "    ", "return", "net", ",", "end_points", "\n", "\n", "# Setup for building in the auxiliary head.", "\n", "", "aux_head_cell_idxes", "=", "[", "]", "\n", "if", "len", "(", "reduction_indices", ")", ">=", "2", ":", "\n", "    ", "aux_head_cell_idxes", ".", "append", "(", "reduction_indices", "[", "1", "]", "-", "1", ")", "\n", "\n", "# Run the cells", "\n", "", "filter_scaling", "=", "1.0", "\n", "# true_cell_num accounts for the stem cells", "\n", "true_cell_num", "=", "2", "if", "stem_type", "==", "'imagenet'", "else", "0", "\n", "for", "cell_num", "in", "range", "(", "hparams", ".", "num_cells", ")", ":", "\n", "    ", "stride", "=", "1", "\n", "if", "hparams", ".", "skip_reduction_layer_input", ":", "\n", "      ", "prev_layer", "=", "cell_outputs", "[", "-", "2", "]", "\n", "", "if", "cell_num", "in", "reduction_indices", ":", "\n", "      ", "filter_scaling", "*=", "hparams", ".", "filter_scaling_rate", "\n", "net", "=", "reduction_cell", "(", "\n", "net", ",", "\n", "scope", "=", "'reduction_cell_{}'", ".", "format", "(", "reduction_indices", ".", "index", "(", "cell_num", ")", ")", ",", "\n", "filter_scaling", "=", "filter_scaling", ",", "\n", "stride", "=", "2", ",", "\n", "prev_layer", "=", "cell_outputs", "[", "-", "2", "]", ",", "\n", "cell_num", "=", "true_cell_num", ")", "\n", "if", "add_and_check_endpoint", "(", "'Reduction_Cell_{}'", ".", "format", "(", "\n", "reduction_indices", ".", "index", "(", "cell_num", ")", ")", ",", "net", ")", ":", "\n", "        ", "return", "net", ",", "end_points", "\n", "", "true_cell_num", "+=", "1", "\n", "cell_outputs", ".", "append", "(", "net", ")", "\n", "", "if", "not", "hparams", ".", "skip_reduction_layer_input", ":", "\n", "      ", "prev_layer", "=", "cell_outputs", "[", "-", "2", "]", "\n", "", "net", "=", "normal_cell", "(", "\n", "net", ",", "\n", "scope", "=", "'cell_{}'", ".", "format", "(", "cell_num", ")", ",", "\n", "filter_scaling", "=", "filter_scaling", ",", "\n", "stride", "=", "stride", ",", "\n", "prev_layer", "=", "prev_layer", ",", "\n", "cell_num", "=", "true_cell_num", ")", "\n", "\n", "if", "add_and_check_endpoint", "(", "'Cell_{}'", ".", "format", "(", "cell_num", ")", ",", "net", ")", ":", "\n", "      ", "return", "net", ",", "end_points", "\n", "", "true_cell_num", "+=", "1", "\n", "if", "(", "hparams", ".", "use_aux_head", "and", "cell_num", "in", "aux_head_cell_idxes", "and", "\n", "num_classes", "and", "is_training", ")", ":", "\n", "      ", "aux_net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "_build_aux_head", "(", "\n", "aux_net", ",", "\n", "end_points", ",", "\n", "num_classes", ",", "\n", "hparams", ",", "\n", "scope", "=", "'aux_{}'", ".", "format", "(", "cell_num", ")", ")", "\n", "", "cell_outputs", ".", "append", "(", "net", ")", "\n", "\n", "# Final softmax layer", "\n", "", "with", "tf", ".", "variable_scope", "(", "'final_layer'", ")", ":", "\n", "    ", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "net", "=", "nasnet_utils", ".", "global_avg_pool", "(", "net", ")", "\n", "if", "add_and_check_endpoint", "(", "'global_pool'", ",", "net", ")", "or", "num_classes", "is", "None", ":", "\n", "      ", "return", "net", ",", "end_points", "\n", "", "net", "=", "slim", ".", "dropout", "(", "net", ",", "hparams", ".", "dense_dropout_keep_prob", ",", "scope", "=", "'dropout'", ")", "\n", "logits", "=", "slim", ".", "fully_connected", "(", "net", ",", "num_classes", ")", "\n", "\n", "if", "add_and_check_endpoint", "(", "'Logits'", ",", "logits", ")", ":", "\n", "      ", "return", "net", ",", "end_points", "\n", "\n", "", "predictions", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "'predictions'", ")", "\n", "if", "add_and_check_endpoint", "(", "'Predictions'", ",", "predictions", ")", ":", "\n", "      ", "return", "net", ",", "end_points", "\n", "", "", "return", "logits", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.__init__": [[24, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_name", ",", "batch_size", ",", "learning_rate", ",", "fp16_loss_scale", ")", ":", "\n", "    ", "self", ".", "model", "=", "model_name", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "default_batch_size", "=", "batch_size", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "# TODO(reedwm) Set custom loss scales for each model instead of using the", "\n", "# default of 128.", "\n", "self", ".", "fp16_loss_scale", "=", "fp16_loss_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_model": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_batch_size": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_batch_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.set_batch_size": [[39, 41], ["None"], "methods", ["None"], ["", "def", "set_batch_size", "(", "self", ",", "batch_size", ")", ":", "\n", "    ", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_default_batch_size": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_default_batch_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "default_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_fp16_loss_scale": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_fp16_loss_scale", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "fp16_loss_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.get_learning_rate": [[48, 52], ["None"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "del", "global_step", "\n", "del", "batch_size", "\n", "return", "self", ".", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.add_inference": [[53, 55], ["ValueError"], "methods", ["None"], ["", "def", "add_inference", "(", "self", ",", "unused_cnn", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Must be implemented in derived classes'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.Model.build_network": [[56, 60], ["ValueError"], "methods", ["None"], ["", "def", "build_network", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "    ", "del", "inputs", "\n", "del", "kwargs", "\n", "raise", "ValueError", "(", "'Must be implemented in derived classes'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.__init__": [[65, 76], ["model.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "image_size", ",", "\n", "batch_size", ",", "\n", "learning_rate", ",", "\n", "layer_counts", "=", "None", ",", "\n", "fp16_loss_scale", "=", "128", ")", ":", "\n", "    ", "super", "(", "CNNModel", ",", "self", ")", ".", "__init__", "(", "model", ",", "batch_size", ",", "learning_rate", ",", "\n", "fp16_loss_scale", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "layer_counts", "=", "layer_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_image_size": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_image_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.get_layer_counts": [[80, 82], ["None"], "methods", ["None"], ["", "def", "get_layer_counts", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "layer_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.skip_final_affine_layer": [[83, 93], ["None"], "methods", ["None"], ["", "def", "skip_final_affine_layer", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns if the caller of this class should skip the final affine layer.\n\n    Normally, this class adds a final affine layer to the model after calling\n    self.add_inference(), to generate the logits. If a subclass override this\n    method to return True, the caller should not add the final affine layer.\n\n    This is useful for tests.\n    \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.build_network": [[94, 123], ["convnet_builder.ConvNetBuilder", "tensorflow.transpose", "tensorflow.variable_scope", "model.CNNModel.add_inference", "tensorflow.cast", "convnet_builder.ConvNetBuilder.affine", "tensorflow.cast", "convnet_builder.ConvNetBuilder.get_custom_getter", "model.CNNModel.skip_final_affine_layer", "convnet_builder.ConvNetBuilder.switch_to_aux_top_layer", "convnet_builder.ConvNetBuilder.affine"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv4Model.add_inference", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.get_custom_getter", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.model.CNNModel.skip_final_affine_layer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.switch_to_aux_top_layer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.affine"], ["", "def", "build_network", "(", "self", ",", "images", ",", "phase_train", "=", "True", ",", "nclass", "=", "1001", ",", "image_depth", "=", "3", ",", "\n", "data_type", "=", "tf", ".", "float32", ",", "data_format", "=", "'NCHW'", ",", "\n", "use_tf_layers", "=", "True", ",", "fp16_vars", "=", "False", ")", ":", "\n", "    ", "\"\"\"Returns logits and aux_logits from images.\"\"\"", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "      ", "images", "=", "tf", ".", "transpose", "(", "images", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "", "var_type", "=", "tf", ".", "float32", "\n", "if", "data_type", "==", "tf", ".", "float16", "and", "fp16_vars", ":", "\n", "      ", "var_type", "=", "tf", ".", "float16", "\n", "", "network", "=", "convnet_builder", ".", "ConvNetBuilder", "(", "\n", "images", ",", "image_depth", ",", "phase_train", ",", "use_tf_layers", ",", "\n", "data_format", ",", "data_type", ",", "var_type", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'cg'", ",", "custom_getter", "=", "network", ".", "get_custom_getter", "(", ")", ")", ":", "\n", "      ", "self", ".", "add_inference", "(", "network", ")", "\n", "# Add the final fully-connected class layer", "\n", "logits", "=", "(", "network", ".", "affine", "(", "nclass", ",", "activation", "=", "'linear'", ")", "\n", "if", "not", "self", ".", "skip_final_affine_layer", "(", ")", "\n", "else", "network", ".", "top_layer", ")", "\n", "aux_logits", "=", "None", "\n", "if", "network", ".", "aux_top_layer", "is", "not", "None", ":", "\n", "        ", "with", "network", ".", "switch_to_aux_top_layer", "(", ")", ":", "\n", "          ", "aux_logits", "=", "network", ".", "affine", "(", "\n", "nclass", ",", "activation", "=", "'linear'", ",", "stddev", "=", "0.001", ")", "\n", "", "", "", "if", "data_type", "==", "tf", ".", "float16", ":", "\n", "# TODO(reedwm): Determine if we should do this cast here.", "\n", "      ", "logits", "=", "tf", ".", "cast", "(", "logits", ",", "tf", ".", "float32", ")", "\n", "if", "aux_logits", "is", "not", "None", ":", "\n", "        ", "aux_logits", "=", "tf", ".", "cast", "(", "aux_logits", ",", "tf", ".", "float32", ")", "\n", "", "", "return", "logits", ",", "aux_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable": [[24, 31], ["tensorflow.get_variable", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["def", "get_variable", "(", "name", ",", "shape", ",", "dtype", ",", "cast_dtype", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(reedwm): Currently variables and gradients are transferred to other", "\n", "# devices and machines as type `dtype`, not `cast_dtype`. In particular,", "\n", "# this means in fp16 mode, variables are transferred as fp32 values, not", "\n", "# fp16 values, which uses extra bandwidth.", "\n", "  ", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "dtype", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "tf", ".", "cast", "(", "var", ",", "cast_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption": [[33, 69], ["input_layer.get_shape().as_list", "tensorflow.variable_scope", "mobilenet_conv_blocks.get_variable", "mobilenet_conv_blocks.get_variable", "mobilenet_conv_blocks.get_variable", "mobilenet_conv_blocks.get_variable", "tensorflow.square", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.pow", "tensorflow.reduce_mean", "input_layer.get_shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.get_variable"], ["", "def", "adaption", "(", "input_layer", ")", ":", "\n", "  ", "epsilon", "=", "1e-5", "\n", "variable_dtype", "=", "tf", ".", "float32", "\n", "dtype", "=", "tf", ".", "float16", "\n", "\n", "num_channels", "=", "input_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "squeeze", "=", "[", "1", ",", "2", "]", "\n", "with", "tf", ".", "variable_scope", "(", "default_name", "=", "'adaption'", ")", ":", "\n", "    ", "beta", "=", "get_variable", "(", "'beta'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "alpha", "=", "get_variable", "(", "'alpha'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "gamma", "=", "get_variable", "(", "'gamma'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", "\n", "theta", "=", "get_variable", "(", "'theta'", ",", "[", "1", ",", "1", ",", "1", ",", "num_channels", "]", ",", "\n", "variable_dtype", ",", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ")", "\n", "\n", "X", "=", "input_layer", "\n", "alpha_2", "=", "tf", ".", "square", "(", "alpha", ")", "\n", "alpha_2", "=", "alpha_2", "/", "tf", ".", "reduce_mean", "(", "alpha_2", ")", "+", "epsilon", "\n", "alpha", "=", "tf", ".", "sqrt", "(", "alpha_2", ")", "\n", "A", "=", "alpha_2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "X", ")", ",", "squeeze", ",", "keepdims", "=", "True", ")", "-", "(", "\n", "2.", "*", "alpha", "*", "beta", ")", "*", "tf", ".", "reduce_mean", "(", "X", ",", "squeeze", ",", "keepdims", "=", "True", ")", "\n", "A", "=", "tf", ".", "reduce_mean", "(", "\n", "A", ",", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "+", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "beta", ")", ")", "+", "epsilon", ")", "\n", "# B = tf.reduce_sum(alpha_2)", "\n", "B", "=", "1.", "\n", "l2", "=", "tf", ".", "sqrt", "(", "B", "/", "A", ")", "\n", "adaptor", "=", "tf", ".", "pow", "(", "l2", ",", "gamma", "+", "theta", "*", "l2", ")", "\n", "trans_back", "=", "X", "*", "adaptor", "+", "(", "beta", "/", "alpha", ")", "*", "(", "1.", "-", "adaptor", ")", "\n", "\n", "", "return", "trans_back", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption_conv2d": [[70, 74], ["mobilenet_conv_blocks.adaption", "slim.conv2d"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption"], ["", "def", "adaption_conv2d", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "name", "=", "'adaption'", "\n", "inputs", "=", "adaption", "(", "inputs", ")", "\n", "return", "slim", ".", "conv2d", "(", "inputs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._fixed_padding": [[76, 100], ["tensorflow.pad"], "function", ["None"], ["", "def", "_fixed_padding", "(", "inputs", ",", "kernel_size", ",", "rate", "=", "1", ")", ":", "\n", "  ", "\"\"\"Pads the input along the spatial dimensions independently of input size.\n\n  Pads the input such that if it was used in a convolution with 'VALID' padding,\n  the output would have the same dimensions as if the unpadded input was used\n  in a convolution with 'SAME' padding.\n\n  Args:\n    inputs: A tensor of size [batch, height_in, width_in, channels].\n    kernel_size: The kernel to be used in the conv2d or max_pool2d operation.\n    rate: An integer, rate for atrous convolution.\n\n  Returns:\n    output: A tensor of size [batch, height_out, width_out, channels] with the\n      input, either intact (if kernel_size == 1) or padded (if kernel_size > 1).\n  \"\"\"", "\n", "kernel_size_effective", "=", "[", "kernel_size", "[", "0", "]", "+", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "(", "rate", "-", "1", ")", ",", "\n", "kernel_size", "[", "0", "]", "+", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "]", "\n", "pad_total", "=", "[", "kernel_size_effective", "[", "0", "]", "-", "1", ",", "kernel_size_effective", "[", "1", "]", "-", "1", "]", "\n", "pad_beg", "=", "[", "pad_total", "[", "0", "]", "//", "2", ",", "pad_total", "[", "1", "]", "//", "2", "]", "\n", "pad_end", "=", "[", "pad_total", "[", "0", "]", "-", "pad_beg", "[", "0", "]", ",", "pad_total", "[", "1", "]", "-", "pad_beg", "[", "1", "]", "]", "\n", "padded_inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg", "[", "0", "]", ",", "pad_end", "[", "0", "]", "]", ",", "\n", "[", "pad_beg", "[", "1", "]", ",", "pad_end", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._make_divisible": [[102, 110], ["max", "int"], "function", ["None"], ["", "def", "_make_divisible", "(", "v", ",", "divisor", ",", "min_value", "=", "None", ")", ":", "\n", "  ", "if", "min_value", "is", "None", ":", "\n", "    ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "    ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._split_divisible": [[112, 128], ["range", "result.append"], "function", ["None"], ["", "def", "_split_divisible", "(", "num", ",", "num_ways", ",", "divisible_by", "=", "8", ")", ":", "\n", "  ", "\"\"\"Evenly splits num, num_ways so each piece is a multiple of divisible_by.\"\"\"", "\n", "assert", "num", "%", "divisible_by", "==", "0", "\n", "assert", "num", "/", "num_ways", ">=", "divisible_by", "\n", "# Note: want to round down, we adjust each split to match the total.", "\n", "base", "=", "num", "//", "num_ways", "//", "divisible_by", "*", "divisible_by", "\n", "result", "=", "[", "]", "\n", "accumulated", "=", "0", "\n", "for", "i", "in", "range", "(", "num_ways", ")", ":", "\n", "    ", "r", "=", "base", "\n", "while", "accumulated", "+", "r", "<", "num", "*", "(", "i", "+", "1", ")", "/", "num_ways", ":", "\n", "      ", "r", "+=", "divisible_by", "\n", "", "result", ".", "append", "(", "r", ")", "\n", "accumulated", "+=", "r", "\n", "", "assert", "accumulated", "==", "num", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._v1_compatible_scope_naming": [[130, 141], ["tensorflow.variable_scope", "tensorflow.name_scope"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "_v1_compatible_scope_naming", "(", "scope", ")", ":", "\n", "  ", "if", "scope", "is", "None", ":", "# Create uniqified separable blocks.", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "'separable'", ")", "as", "s", ",", "tf", ".", "name_scope", "(", "s", ".", "original_name_scope", ")", ":", "\n", "      ", "yield", "''", "\n", "", "", "else", ":", "\n", "# We use scope_depthwise, scope_pointwise for compatibility with V1 ckpts.", "\n", "# which provide numbered scopes.", "\n", "    ", "scope", "+=", "'_'", "\n", "yield", "scope", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.split_separable_conv2d": [[143, 208], ["mobilenet_conv_blocks._v1_compatible_scope_naming", "slim.separable_conv2d", "mobilenet_conv_blocks.adaption_conv2d", "mobilenet_conv_blocks._fixed_padding"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._v1_compatible_scope_naming", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption_conv2d", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._fixed_padding"], ["", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "split_separable_conv2d", "(", "input_tensor", ",", "\n", "num_outputs", ",", "\n", "scope", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "rate", "=", "1", ",", "\n", "endpoints", "=", "None", ",", "\n", "use_explicit_padding", "=", "False", ")", ":", "\n", "  ", "\"\"\"Separable mobilenet V1 style convolution.\n\n  Depthwise convolution, with default non-linearity,\n  followed by 1x1 depthwise convolution.  This is similar to\n  slim.separable_conv2d, but differs in tha it applies batch\n  normalization and non-linearity to depthwise. This  matches\n  the basic building of Mobilenet Paper\n  (https://arxiv.org/abs/1704.04861)\n\n  Args:\n    input_tensor: input\n    num_outputs: number of outputs\n    scope: optional name of the scope. Note if provided it will use\n    scope_depthwise for deptwhise, and scope_pointwise for pointwise.\n    normalizer_fn: which normalizer function to use for depthwise/pointwise\n    stride: stride\n    rate: output rate (also known as dilation rate)\n    endpoints: optional, if provided, will export additional tensors to it.\n    use_explicit_padding: Use 'VALID' padding for convolutions, but prepad\n      inputs so that the output dimensions are the same as if 'SAME' padding\n      were used.\n\n  Returns:\n    output tesnor\n  \"\"\"", "\n", "\n", "with", "_v1_compatible_scope_naming", "(", "scope", ")", "as", "scope", ":", "\n", "    ", "dw_scope", "=", "scope", "+", "'depthwise'", "\n", "endpoints", "=", "endpoints", "if", "endpoints", "is", "not", "None", "else", "{", "}", "\n", "kernel_size", "=", "[", "3", ",", "3", "]", "\n", "padding", "=", "'SAME'", "\n", "if", "use_explicit_padding", ":", "\n", "      ", "padding", "=", "'VALID'", "\n", "input_tensor", "=", "_fixed_padding", "(", "input_tensor", ",", "kernel_size", ",", "rate", ")", "\n", "", "net", "=", "slim", ".", "separable_conv2d", "(", "\n", "input_tensor", ",", "\n", "None", ",", "\n", "kernel_size", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "rate", "=", "rate", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ",", "\n", "padding", "=", "padding", ",", "\n", "scope", "=", "dw_scope", ")", "\n", "\n", "endpoints", "[", "dw_scope", "]", "=", "net", "\n", "\n", "pw_scope", "=", "scope", "+", "'pointwise'", "\n", "net", "=", "adaption_conv2d", "(", "\n", "net", ",", "\n", "num_outputs", ",", "[", "1", ",", "1", "]", ",", "\n", "stride", "=", "1", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ",", "\n", "scope", "=", "pw_scope", ")", "\n", "endpoints", "[", "pw_scope", "]", "=", "net", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.expand_input_by_factor": [[210, 212], ["mobilenet_conv_blocks._make_divisible"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._make_divisible"], ["", "def", "expand_input_by_factor", "(", "n", ",", "divisible_by", "=", "8", ")", ":", "\n", "  ", "return", "lambda", "num_inputs", ",", "**", "_", ":", "_make_divisible", "(", "num_inputs", "*", "n", ",", "divisible_by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.expanded_conv": [[214, 365], ["mobilenet_conv_blocks.expand_input_by_factor", "tensorflow.variable_scope", "tensorflow.name_scope", "functools.partial", "tensorflow.identity", "callable", "tensorflow.identity", "mobilenet_conv_blocks.split_conv", "callable", "tensorflow.identity", "tf.identity.get_shape().as_list", "TypeError", "functools.partial.", "expansion_size", "mobilenet_conv_blocks.split_conv", "tensorflow.identity", "functools.partial.", "expansion_transform", "functools.partial.", "residual", "TypeError", "mobilenet_conv_blocks._fixed_padding", "mobilenet_conv_blocks._fixed_padding", "mobilenet_conv_blocks._fixed_padding", "tf.identity.get_shape", "_fixed_padding.get_shape().as_list", "tf.identity.get_shape().as_list", "_fixed_padding.get_shape", "tf.identity.get_shape"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.expand_input_by_factor", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.split_conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.split_conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._fixed_padding", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._fixed_padding", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._fixed_padding"], ["", "@", "slim", ".", "add_arg_scope", "\n", "def", "expanded_conv", "(", "input_tensor", ",", "\n", "num_outputs", ",", "\n", "expansion_size", "=", "expand_input_by_factor", "(", "6", ")", ",", "\n", "stride", "=", "1", ",", "\n", "rate", "=", "1", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "residual", "=", "True", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "split_projection", "=", "1", ",", "\n", "split_expansion", "=", "1", ",", "\n", "expansion_transform", "=", "None", ",", "\n", "depthwise_location", "=", "'expansion'", ",", "\n", "depthwise_channel_multiplier", "=", "1", ",", "\n", "endpoints", "=", "None", ",", "\n", "use_explicit_padding", "=", "False", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Depthwise Convolution Block with expansion.\n\n  Builds a composite convolution that has the following structure\n  expansion (1x1) -> depthwise (kernel_size) -> projection (1x1)\n\n  Args:\n    input_tensor: input\n    num_outputs: number of outputs in the final layer.\n    expansion_size: the size of expansion, could be a constant or a callable.\n      If latter it will be provided 'num_inputs' as an input. For forward\n      compatibility it should accept arbitrary keyword arguments.\n      Default will expand the input by factor of 6.\n    stride: depthwise stride\n    rate: depthwise rate\n    kernel_size: depthwise kernel\n    residual: whether to include residual connection between input\n      and output.\n    normalizer_fn: batchnorm or otherwise\n    split_projection: how many ways to split projection operator\n      (that is conv expansion->bottleneck)\n    split_expansion: how many ways to split expansion op\n      (that is conv bottleneck->expansion) ops will keep depth divisible\n      by this value.\n    expansion_transform: Optional function that takes expansion\n      as a single input and returns output.\n    depthwise_location: where to put depthwise covnvolutions supported\n      values None, 'input', 'output', 'expansion'\n    depthwise_channel_multiplier: depthwise channel multiplier:\n    each input will replicated (with different filters)\n    that many times. So if input had c channels,\n    output will have c x depthwise_channel_multpilier.\n    endpoints: An optional dictionary into which intermediate endpoints are\n      placed. The keys \"expansion_output\", \"depthwise_output\",\n      \"projection_output\" and \"expansion_transform\" are always populated, even\n      if the corresponding functions are not invoked.\n    use_explicit_padding: Use 'VALID' padding for convolutions, but prepad\n      inputs so that the output dimensions are the same as if 'SAME' padding\n      were used.\n    padding: Padding type to use if `use_explicit_padding` is not set.\n    scope: optional scope.\n\n  Returns:\n    Tensor of depth num_outputs\n\n  Raises:\n    TypeError: on inval\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "default_name", "=", "'expanded_conv'", ")", "as", "s", ",", "tf", ".", "name_scope", "(", "s", ".", "original_name_scope", ")", ":", "\n", "    ", "prev_depth", "=", "input_tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "if", "depthwise_location", "not", "in", "[", "None", ",", "'input'", ",", "'output'", ",", "'expansion'", "]", ":", "\n", "      ", "raise", "TypeError", "(", "'%r is unknown value for depthwise_location'", "%", "\n", "depthwise_location", ")", "\n", "", "if", "use_explicit_padding", ":", "\n", "      ", "if", "padding", "!=", "'SAME'", ":", "\n", "        ", "raise", "TypeError", "(", "'`use_explicit_padding` should only be used with '", "\n", "'\"SAME\" padding.'", ")", "\n", "", "padding", "=", "'VALID'", "\n", "", "depthwise_func", "=", "functools", ".", "partial", "(", "\n", "slim", ".", "separable_conv2d", ",", "\n", "num_outputs", "=", "None", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "depth_multiplier", "=", "depthwise_channel_multiplier", ",", "\n", "stride", "=", "stride", ",", "\n", "rate", "=", "rate", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ",", "\n", "padding", "=", "padding", ",", "\n", "scope", "=", "'depthwise'", ")", "\n", "# b1 -> b2 * r -> b2", "\n", "#   i -> (o * r) (bottleneck) -> o", "\n", "input_tensor", "=", "tf", ".", "identity", "(", "input_tensor", ",", "'input'", ")", "\n", "net", "=", "input_tensor", "\n", "\n", "if", "depthwise_location", "==", "'input'", ":", "\n", "      ", "if", "use_explicit_padding", ":", "\n", "        ", "net", "=", "_fixed_padding", "(", "net", ",", "kernel_size", ",", "rate", ")", "\n", "", "net", "=", "depthwise_func", "(", "net", ",", "activation_fn", "=", "None", ")", "\n", "\n", "", "if", "callable", "(", "expansion_size", ")", ":", "\n", "      ", "inner_size", "=", "expansion_size", "(", "num_inputs", "=", "prev_depth", ")", "\n", "", "else", ":", "\n", "      ", "inner_size", "=", "expansion_size", "\n", "\n", "", "if", "inner_size", ">", "net", ".", "shape", "[", "3", "]", ":", "\n", "      ", "net", "=", "split_conv", "(", "\n", "net", ",", "\n", "inner_size", ",", "\n", "num_ways", "=", "split_expansion", ",", "\n", "scope", "=", "'expand'", ",", "\n", "stride", "=", "1", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ")", "\n", "net", "=", "tf", ".", "identity", "(", "net", ",", "'expansion_output'", ")", "\n", "", "if", "endpoints", "is", "not", "None", ":", "\n", "      ", "endpoints", "[", "'expansion_output'", "]", "=", "net", "\n", "\n", "", "if", "depthwise_location", "==", "'expansion'", ":", "\n", "      ", "if", "use_explicit_padding", ":", "\n", "        ", "net", "=", "_fixed_padding", "(", "net", ",", "kernel_size", ",", "rate", ")", "\n", "", "net", "=", "depthwise_func", "(", "net", ")", "\n", "\n", "", "net", "=", "tf", ".", "identity", "(", "net", ",", "name", "=", "'depthwise_output'", ")", "\n", "if", "endpoints", "is", "not", "None", ":", "\n", "      ", "endpoints", "[", "'depthwise_output'", "]", "=", "net", "\n", "", "if", "expansion_transform", ":", "\n", "      ", "net", "=", "expansion_transform", "(", "expansion_tensor", "=", "net", ",", "input_tensor", "=", "input_tensor", ")", "\n", "# Note in contrast with expansion, we always have", "\n", "# projection to produce the desired output size.", "\n", "", "net", "=", "split_conv", "(", "\n", "net", ",", "\n", "num_outputs", ",", "\n", "num_ways", "=", "split_projection", ",", "\n", "stride", "=", "1", ",", "\n", "scope", "=", "'project'", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ",", "\n", "activation_fn", "=", "tf", ".", "identity", ")", "\n", "if", "endpoints", "is", "not", "None", ":", "\n", "      ", "endpoints", "[", "'projection_output'", "]", "=", "net", "\n", "", "if", "depthwise_location", "==", "'output'", ":", "\n", "      ", "if", "use_explicit_padding", ":", "\n", "        ", "net", "=", "_fixed_padding", "(", "net", ",", "kernel_size", ",", "rate", ")", "\n", "", "net", "=", "depthwise_func", "(", "net", ",", "activation_fn", "=", "None", ")", "\n", "\n", "", "if", "callable", "(", "residual", ")", ":", "# custom residual", "\n", "      ", "net", "=", "residual", "(", "input_tensor", "=", "input_tensor", ",", "output_tensor", "=", "net", ")", "\n", "", "elif", "(", "residual", "and", "\n", "# stride check enforces that we don't add residuals when spatial", "\n", "# dimensions are None", "\n", "stride", "==", "1", "and", "\n", "# Depth matches", "\n", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "==", "\n", "input_tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", ")", ":", "\n", "      ", "net", "+=", "input_tensor", "\n", "", "return", "tf", ".", "identity", "(", "net", ",", "name", "=", "'output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.split_conv": [[367, 409], ["mobilenet_conv_blocks._split_divisible", "mobilenet_conv_blocks._split_divisible", "tensorflow.split", "enumerate", "tensorflow.concat", "input_tensor.get_shape().as_list", "mobilenet_conv_blocks.adaption_conv2d", "zip", "mobilenet_conv_blocks.adaption_conv2d", "tensorflow.identity", "outs.append", "min", "input_tensor.get_shape"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._split_divisible", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks._split_divisible", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption_conv2d", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.mobilenet_conv_blocks.adaption_conv2d"], ["", "", "def", "split_conv", "(", "input_tensor", ",", "\n", "num_outputs", ",", "\n", "num_ways", ",", "\n", "scope", ",", "\n", "divisible_by", "=", "8", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Creates a split convolution.\n\n  Split convolution splits the input and output into\n  'num_blocks' blocks of approximately the same size each,\n  and only connects $i$-th input to $i$ output.\n\n  Args:\n    input_tensor: input tensor\n    num_outputs: number of output filters\n    num_ways: num blocks to split by.\n    scope: scope for all the operators.\n    divisible_by: make sure that every part is divisiable by this.\n    **kwargs: will be passed directly into conv2d operator\n  Returns:\n    tensor\n  \"\"\"", "\n", "b", "=", "input_tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "\n", "if", "num_ways", "==", "1", "or", "min", "(", "b", "//", "num_ways", ",", "\n", "num_outputs", "//", "num_ways", ")", "<", "divisible_by", ":", "\n", "# Don't do any splitting if we end up with less than 8 filters", "\n", "# on either side.", "\n", "    ", "return", "adaption_conv2d", "(", "input_tensor", ",", "num_outputs", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "scope", ",", "**", "kwargs", ")", "\n", "\n", "", "outs", "=", "[", "]", "\n", "input_splits", "=", "_split_divisible", "(", "b", ",", "num_ways", ",", "divisible_by", "=", "divisible_by", ")", "\n", "output_splits", "=", "_split_divisible", "(", "\n", "num_outputs", ",", "num_ways", ",", "divisible_by", "=", "divisible_by", ")", "\n", "inputs", "=", "tf", ".", "split", "(", "input_tensor", ",", "input_splits", ",", "axis", "=", "3", ",", "name", "=", "'split_'", "+", "scope", ")", "\n", "base", "=", "scope", "\n", "for", "i", ",", "(", "input_tensor", ",", "out_size", ")", "in", "enumerate", "(", "zip", "(", "inputs", ",", "output_splits", ")", ")", ":", "\n", "    ", "scope", "=", "base", "+", "'_part_%d'", "%", "(", "i", ",", ")", "\n", "n", "=", "adaption_conv2d", "(", "input_tensor", ",", "out_size", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "scope", ",", "**", "kwargs", ")", "\n", "n", "=", "tf", ".", "identity", "(", "n", ",", "scope", "+", "'_output'", ")", "\n", "outs", ".", "append", "(", "n", ")", "\n", "", "return", "tf", ".", "concat", "(", "outs", ",", "3", ",", "name", "=", "scope", "+", "'_concat'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testBuildLogitsCifarModel": [[29, 45], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertListEqual", "nasnet_test.NASNetTest.assertListEqual", "nasnet_test.NASNetTest.assertListEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_cifar", "auxlogits.get_shape().as_list", "logits.get_shape().as_list", "predictions.get_shape().as_list", "models.nasnet_model.nasnet_cifar_arg_scope", "auxlogits.get_shape", "logits.get_shape", "predictions.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_cifar", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_cifar_arg_scope"], ["  ", "def", "testBuildLogitsCifarModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "32", ",", "32", "\n", "num_classes", "=", "10", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_cifar_arg_scope", "(", ")", ")", ":", "\n", "      ", "logits", ",", "end_points", "=", "nasnet", ".", "build_nasnet_cifar", "(", "inputs", ",", "num_classes", ")", "\n", "", "auxlogits", "=", "end_points", "[", "'AuxLogits'", "]", "\n", "predictions", "=", "end_points", "[", "'Predictions'", "]", "\n", "self", ".", "assertListEqual", "(", "auxlogits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "self", ".", "assertListEqual", "(", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "self", ".", "assertListEqual", "(", "predictions", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testBuildLogitsMobileModel": [[46, 62], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertListEqual", "nasnet_test.NASNetTest.assertListEqual", "nasnet_test.NASNetTest.assertListEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_mobile", "auxlogits.get_shape().as_list", "logits.get_shape().as_list", "predictions.get_shape().as_list", "models.nasnet_model.nasnet_mobile_arg_scope", "auxlogits.get_shape", "logits.get_shape", "predictions.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope"], ["", "def", "testBuildLogitsMobileModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "224", ",", "224", "\n", "num_classes", "=", "1000", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_mobile_arg_scope", "(", ")", ")", ":", "\n", "      ", "logits", ",", "end_points", "=", "nasnet", ".", "build_nasnet_mobile", "(", "inputs", ",", "num_classes", ")", "\n", "", "auxlogits", "=", "end_points", "[", "'AuxLogits'", "]", "\n", "predictions", "=", "end_points", "[", "'Predictions'", "]", "\n", "self", ".", "assertListEqual", "(", "auxlogits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "self", ".", "assertListEqual", "(", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "self", ".", "assertListEqual", "(", "predictions", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testBuildLogitsLargeModel": [[63, 79], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertListEqual", "nasnet_test.NASNetTest.assertListEqual", "nasnet_test.NASNetTest.assertListEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_large", "auxlogits.get_shape().as_list", "logits.get_shape().as_list", "predictions.get_shape().as_list", "models.nasnet_model.nasnet_large_arg_scope", "auxlogits.get_shape", "logits.get_shape", "predictions.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_large", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_large_arg_scope"], ["", "def", "testBuildLogitsLargeModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "331", ",", "331", "\n", "num_classes", "=", "1000", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_large_arg_scope", "(", ")", ")", ":", "\n", "      ", "logits", ",", "end_points", "=", "nasnet", ".", "build_nasnet_large", "(", "inputs", ",", "num_classes", ")", "\n", "", "auxlogits", "=", "end_points", "[", "'AuxLogits'", "]", "\n", "predictions", "=", "end_points", "[", "'Predictions'", "]", "\n", "self", ".", "assertListEqual", "(", "auxlogits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "self", ".", "assertListEqual", "(", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "self", ".", "assertListEqual", "(", "predictions", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "batch_size", ",", "num_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testBuildPreLogitsCifarModel": [[80, 92], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertFalse", "nasnet_test.NASNetTest.assertFalse", "nasnet_test.NASNetTest.assertTrue", "nasnet_test.NASNetTest.assertListEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_cifar", "net.op.name.startswith", "net.get_shape().as_list", "models.nasnet_model.nasnet_cifar_arg_scope", "net.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_cifar", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_cifar_arg_scope"], ["", "def", "testBuildPreLogitsCifarModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "32", ",", "32", "\n", "num_classes", "=", "None", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_cifar_arg_scope", "(", ")", ")", ":", "\n", "      ", "net", ",", "end_points", "=", "nasnet", ".", "build_nasnet_cifar", "(", "inputs", ",", "num_classes", ")", "\n", "", "self", ".", "assertFalse", "(", "'AuxLogits'", "in", "end_points", ")", "\n", "self", ".", "assertFalse", "(", "'Predictions'", "in", "end_points", ")", "\n", "self", ".", "assertTrue", "(", "net", ".", "op", ".", "name", ".", "startswith", "(", "'final_layer/Mean'", ")", ")", "\n", "self", ".", "assertListEqual", "(", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "[", "batch_size", ",", "768", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testBuildPreLogitsMobileModel": [[93, 105], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertFalse", "nasnet_test.NASNetTest.assertFalse", "nasnet_test.NASNetTest.assertTrue", "nasnet_test.NASNetTest.assertListEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_mobile", "net.op.name.startswith", "net.get_shape().as_list", "models.nasnet_model.nasnet_mobile_arg_scope", "net.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope"], ["", "def", "testBuildPreLogitsMobileModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "224", ",", "224", "\n", "num_classes", "=", "None", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_mobile_arg_scope", "(", ")", ")", ":", "\n", "      ", "net", ",", "end_points", "=", "nasnet", ".", "build_nasnet_mobile", "(", "inputs", ",", "num_classes", ")", "\n", "", "self", ".", "assertFalse", "(", "'AuxLogits'", "in", "end_points", ")", "\n", "self", ".", "assertFalse", "(", "'Predictions'", "in", "end_points", ")", "\n", "self", ".", "assertTrue", "(", "net", ".", "op", ".", "name", ".", "startswith", "(", "'final_layer/Mean'", ")", ")", "\n", "self", ".", "assertListEqual", "(", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "[", "batch_size", ",", "1056", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testBuildPreLogitsLargeModel": [[106, 118], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertFalse", "nasnet_test.NASNetTest.assertFalse", "nasnet_test.NASNetTest.assertTrue", "nasnet_test.NASNetTest.assertListEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_large", "net.op.name.startswith", "net.get_shape().as_list", "models.nasnet_model.nasnet_large_arg_scope", "net.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_large", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_large_arg_scope"], ["", "def", "testBuildPreLogitsLargeModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "331", ",", "331", "\n", "num_classes", "=", "None", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_large_arg_scope", "(", ")", ")", ":", "\n", "      ", "net", ",", "end_points", "=", "nasnet", ".", "build_nasnet_large", "(", "inputs", ",", "num_classes", ")", "\n", "", "self", ".", "assertFalse", "(", "'AuxLogits'", "in", "end_points", ")", "\n", "self", ".", "assertFalse", "(", "'Predictions'", "in", "end_points", ")", "\n", "self", ".", "assertTrue", "(", "net", ".", "op", ".", "name", ".", "startswith", "(", "'final_layer/Mean'", ")", ")", "\n", "self", ".", "assertListEqual", "(", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "[", "batch_size", ",", "4032", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testAllEndPointsShapesCifarModel": [[119, 160], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertItemsEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_cifar", "endpoints_shapes.keys", "end_points.keys", "tensorflow.logging.info", "nasnet_test.NASNetTest.assertTrue", "nasnet_test.NASNetTest.assertListEqual", "models.nasnet_model.nasnet_cifar_arg_scope", "end_points[].get_shape().as_list", "end_points[].get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_cifar", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_cifar_arg_scope"], ["", "def", "testAllEndPointsShapesCifarModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "32", ",", "32", "\n", "num_classes", "=", "10", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_cifar_arg_scope", "(", ")", ")", ":", "\n", "      ", "_", ",", "end_points", "=", "nasnet", ".", "build_nasnet_cifar", "(", "inputs", ",", "num_classes", ")", "\n", "", "endpoints_shapes", "=", "{", "'Stem'", ":", "[", "batch_size", ",", "32", ",", "32", ",", "96", "]", ",", "\n", "'Cell_0'", ":", "[", "batch_size", ",", "32", ",", "32", ",", "192", "]", ",", "\n", "'Cell_1'", ":", "[", "batch_size", ",", "32", ",", "32", ",", "192", "]", ",", "\n", "'Cell_2'", ":", "[", "batch_size", ",", "32", ",", "32", ",", "192", "]", ",", "\n", "'Cell_3'", ":", "[", "batch_size", ",", "32", ",", "32", ",", "192", "]", ",", "\n", "'Cell_4'", ":", "[", "batch_size", ",", "32", ",", "32", ",", "192", "]", ",", "\n", "'Cell_5'", ":", "[", "batch_size", ",", "32", ",", "32", ",", "192", "]", ",", "\n", "'Cell_6'", ":", "[", "batch_size", ",", "16", ",", "16", ",", "384", "]", ",", "\n", "'Cell_7'", ":", "[", "batch_size", ",", "16", ",", "16", ",", "384", "]", ",", "\n", "'Cell_8'", ":", "[", "batch_size", ",", "16", ",", "16", ",", "384", "]", ",", "\n", "'Cell_9'", ":", "[", "batch_size", ",", "16", ",", "16", ",", "384", "]", ",", "\n", "'Cell_10'", ":", "[", "batch_size", ",", "16", ",", "16", ",", "384", "]", ",", "\n", "'Cell_11'", ":", "[", "batch_size", ",", "16", ",", "16", ",", "384", "]", ",", "\n", "'Cell_12'", ":", "[", "batch_size", ",", "8", ",", "8", ",", "768", "]", ",", "\n", "'Cell_13'", ":", "[", "batch_size", ",", "8", ",", "8", ",", "768", "]", ",", "\n", "'Cell_14'", ":", "[", "batch_size", ",", "8", ",", "8", ",", "768", "]", ",", "\n", "'Cell_15'", ":", "[", "batch_size", ",", "8", ",", "8", ",", "768", "]", ",", "\n", "'Cell_16'", ":", "[", "batch_size", ",", "8", ",", "8", ",", "768", "]", ",", "\n", "'Cell_17'", ":", "[", "batch_size", ",", "8", ",", "8", ",", "768", "]", ",", "\n", "'Reduction_Cell_0'", ":", "[", "batch_size", ",", "16", ",", "16", ",", "256", "]", ",", "\n", "'Reduction_Cell_1'", ":", "[", "batch_size", ",", "8", ",", "8", ",", "512", "]", ",", "\n", "'global_pool'", ":", "[", "batch_size", ",", "768", "]", ",", "\n", "# Logits and predictions", "\n", "'AuxLogits'", ":", "[", "batch_size", ",", "num_classes", "]", ",", "\n", "'Logits'", ":", "[", "batch_size", ",", "num_classes", "]", ",", "\n", "'Predictions'", ":", "[", "batch_size", ",", "num_classes", "]", "}", "\n", "self", ".", "assertItemsEqual", "(", "endpoints_shapes", ".", "keys", "(", ")", ",", "end_points", ".", "keys", "(", ")", ")", "\n", "for", "endpoint_name", "in", "endpoints_shapes", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "'Endpoint name: {}'", ".", "format", "(", "endpoint_name", ")", ")", "\n", "expected_shape", "=", "endpoints_shapes", "[", "endpoint_name", "]", "\n", "self", ".", "assertTrue", "(", "endpoint_name", "in", "end_points", ")", "\n", "self", ".", "assertListEqual", "(", "end_points", "[", "endpoint_name", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "expected_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testAllEndPointsShapesMobileModel": [[161, 196], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertItemsEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_mobile", "endpoints_shapes.keys", "end_points.keys", "tensorflow.logging.info", "nasnet_test.NASNetTest.assertTrue", "nasnet_test.NASNetTest.assertListEqual", "models.nasnet_model.nasnet_mobile_arg_scope", "end_points[].get_shape().as_list", "end_points[].get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope"], ["", "", "def", "testAllEndPointsShapesMobileModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "224", ",", "224", "\n", "num_classes", "=", "1000", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_mobile_arg_scope", "(", ")", ")", ":", "\n", "      ", "_", ",", "end_points", "=", "nasnet", ".", "build_nasnet_mobile", "(", "inputs", ",", "num_classes", ")", "\n", "", "endpoints_shapes", "=", "{", "'Stem'", ":", "[", "batch_size", ",", "28", ",", "28", ",", "88", "]", ",", "\n", "'Cell_0'", ":", "[", "batch_size", ",", "28", ",", "28", ",", "264", "]", ",", "\n", "'Cell_1'", ":", "[", "batch_size", ",", "28", ",", "28", ",", "264", "]", ",", "\n", "'Cell_2'", ":", "[", "batch_size", ",", "28", ",", "28", ",", "264", "]", ",", "\n", "'Cell_3'", ":", "[", "batch_size", ",", "28", ",", "28", ",", "264", "]", ",", "\n", "'Cell_4'", ":", "[", "batch_size", ",", "14", ",", "14", ",", "528", "]", ",", "\n", "'Cell_5'", ":", "[", "batch_size", ",", "14", ",", "14", ",", "528", "]", ",", "\n", "'Cell_6'", ":", "[", "batch_size", ",", "14", ",", "14", ",", "528", "]", ",", "\n", "'Cell_7'", ":", "[", "batch_size", ",", "14", ",", "14", ",", "528", "]", ",", "\n", "'Cell_8'", ":", "[", "batch_size", ",", "7", ",", "7", ",", "1056", "]", ",", "\n", "'Cell_9'", ":", "[", "batch_size", ",", "7", ",", "7", ",", "1056", "]", ",", "\n", "'Cell_10'", ":", "[", "batch_size", ",", "7", ",", "7", ",", "1056", "]", ",", "\n", "'Cell_11'", ":", "[", "batch_size", ",", "7", ",", "7", ",", "1056", "]", ",", "\n", "'Reduction_Cell_0'", ":", "[", "batch_size", ",", "14", ",", "14", ",", "352", "]", ",", "\n", "'Reduction_Cell_1'", ":", "[", "batch_size", ",", "7", ",", "7", ",", "704", "]", ",", "\n", "'global_pool'", ":", "[", "batch_size", ",", "1056", "]", ",", "\n", "# Logits and predictions", "\n", "'AuxLogits'", ":", "[", "batch_size", ",", "num_classes", "]", ",", "\n", "'Logits'", ":", "[", "batch_size", ",", "num_classes", "]", ",", "\n", "'Predictions'", ":", "[", "batch_size", ",", "num_classes", "]", "}", "\n", "self", ".", "assertItemsEqual", "(", "endpoints_shapes", ".", "keys", "(", ")", ",", "end_points", ".", "keys", "(", ")", ")", "\n", "for", "endpoint_name", "in", "endpoints_shapes", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "'Endpoint name: {}'", ".", "format", "(", "endpoint_name", ")", ")", "\n", "expected_shape", "=", "endpoints_shapes", "[", "endpoint_name", "]", "\n", "self", ".", "assertTrue", "(", "endpoint_name", "in", "end_points", ")", "\n", "self", ".", "assertListEqual", "(", "end_points", "[", "endpoint_name", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "expected_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testAllEndPointsShapesLargeModel": [[197, 238], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "nasnet_test.NASNetTest.assertItemsEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_large", "endpoints_shapes.keys", "end_points.keys", "tensorflow.logging.info", "nasnet_test.NASNetTest.assertTrue", "nasnet_test.NASNetTest.assertListEqual", "models.nasnet_model.nasnet_large_arg_scope", "end_points[].get_shape().as_list", "end_points[].get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_large", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_large_arg_scope"], ["", "", "def", "testAllEndPointsShapesLargeModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "331", ",", "331", "\n", "num_classes", "=", "1000", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_large_arg_scope", "(", ")", ")", ":", "\n", "      ", "_", ",", "end_points", "=", "nasnet", ".", "build_nasnet_large", "(", "inputs", ",", "num_classes", ")", "\n", "", "endpoints_shapes", "=", "{", "'Stem'", ":", "[", "batch_size", ",", "42", ",", "42", ",", "336", "]", ",", "\n", "'Cell_0'", ":", "[", "batch_size", ",", "42", ",", "42", ",", "1008", "]", ",", "\n", "'Cell_1'", ":", "[", "batch_size", ",", "42", ",", "42", ",", "1008", "]", ",", "\n", "'Cell_2'", ":", "[", "batch_size", ",", "42", ",", "42", ",", "1008", "]", ",", "\n", "'Cell_3'", ":", "[", "batch_size", ",", "42", ",", "42", ",", "1008", "]", ",", "\n", "'Cell_4'", ":", "[", "batch_size", ",", "42", ",", "42", ",", "1008", "]", ",", "\n", "'Cell_5'", ":", "[", "batch_size", ",", "42", ",", "42", ",", "1008", "]", ",", "\n", "'Cell_6'", ":", "[", "batch_size", ",", "21", ",", "21", ",", "2016", "]", ",", "\n", "'Cell_7'", ":", "[", "batch_size", ",", "21", ",", "21", ",", "2016", "]", ",", "\n", "'Cell_8'", ":", "[", "batch_size", ",", "21", ",", "21", ",", "2016", "]", ",", "\n", "'Cell_9'", ":", "[", "batch_size", ",", "21", ",", "21", ",", "2016", "]", ",", "\n", "'Cell_10'", ":", "[", "batch_size", ",", "21", ",", "21", ",", "2016", "]", ",", "\n", "'Cell_11'", ":", "[", "batch_size", ",", "21", ",", "21", ",", "2016", "]", ",", "\n", "'Cell_12'", ":", "[", "batch_size", ",", "11", ",", "11", ",", "4032", "]", ",", "\n", "'Cell_13'", ":", "[", "batch_size", ",", "11", ",", "11", ",", "4032", "]", ",", "\n", "'Cell_14'", ":", "[", "batch_size", ",", "11", ",", "11", ",", "4032", "]", ",", "\n", "'Cell_15'", ":", "[", "batch_size", ",", "11", ",", "11", ",", "4032", "]", ",", "\n", "'Cell_16'", ":", "[", "batch_size", ",", "11", ",", "11", ",", "4032", "]", ",", "\n", "'Cell_17'", ":", "[", "batch_size", ",", "11", ",", "11", ",", "4032", "]", ",", "\n", "'Reduction_Cell_0'", ":", "[", "batch_size", ",", "21", ",", "21", ",", "1344", "]", ",", "\n", "'Reduction_Cell_1'", ":", "[", "batch_size", ",", "11", ",", "11", ",", "2688", "]", ",", "\n", "'global_pool'", ":", "[", "batch_size", ",", "4032", "]", ",", "\n", "# Logits and predictions", "\n", "'AuxLogits'", ":", "[", "batch_size", ",", "num_classes", "]", ",", "\n", "'Logits'", ":", "[", "batch_size", ",", "num_classes", "]", ",", "\n", "'Predictions'", ":", "[", "batch_size", ",", "num_classes", "]", "}", "\n", "self", ".", "assertItemsEqual", "(", "endpoints_shapes", ".", "keys", "(", ")", ",", "end_points", ".", "keys", "(", ")", ")", "\n", "for", "endpoint_name", "in", "endpoints_shapes", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "'Endpoint name: {}'", ".", "format", "(", "endpoint_name", ")", ")", "\n", "expected_shape", "=", "endpoints_shapes", "[", "endpoint_name", "]", "\n", "self", ".", "assertTrue", "(", "endpoint_name", "in", "end_points", ")", "\n", "self", ".", "assertListEqual", "(", "end_points", "[", "endpoint_name", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "expected_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testVariablesSetDeviceMobileModel": [[239, 256], ["tensorflow.random_uniform", "tensorflow.train.create_global_step", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.variable_scope", "tensorflow.device", "nasnet_test.NASNetTest.assertDeviceEqual", "nasnet_test.NASNetTest.assertDeviceEqual", "slim.arg_scope", "models.nasnet_model.build_nasnet_mobile", "slim.arg_scope", "models.nasnet_model.build_nasnet_mobile", "models.nasnet_model.nasnet_mobile_arg_scope", "models.nasnet_model.nasnet_mobile_arg_scope"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope"], ["", "", "def", "testVariablesSetDeviceMobileModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "height", ",", "width", "=", "224", ",", "224", "\n", "num_classes", "=", "1000", "\n", "inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "tf", ".", "train", ".", "create_global_step", "(", ")", "\n", "# Force all Variables to reside on the device.", "\n", "with", "tf", ".", "variable_scope", "(", "'on_cpu'", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_mobile_arg_scope", "(", ")", ")", ":", "\n", "        ", "nasnet", ".", "build_nasnet_mobile", "(", "inputs", ",", "num_classes", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'on_gpu'", ")", ",", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_mobile_arg_scope", "(", ")", ")", ":", "\n", "        ", "nasnet", ".", "build_nasnet_mobile", "(", "inputs", ",", "num_classes", ")", "\n", "", "", "for", "v", "in", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "'on_cpu'", ")", ":", "\n", "      ", "self", ".", "assertDeviceEqual", "(", "v", ".", "device", ",", "'/cpu:0'", ")", "\n", "", "for", "v", "in", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "'on_gpu'", ")", ":", "\n", "      ", "self", ".", "assertDeviceEqual", "(", "v", ".", "device", ",", "'/gpu:0'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testUnknownBatchSizeMobileModel": [[257, 271], ["nasnet_test.NASNetTest.test_session", "tensorflow.placeholder", "nasnet_test.NASNetTest.assertListEqual", "tensorflow.random_uniform", "sess.run", "sess.run", "nasnet_test.NASNetTest.assertEquals", "slim.arg_scope", "models.nasnet_model.build_nasnet_mobile", "logits.get_shape().as_list", "tensorflow.global_variables_initializer", "models.nasnet_model.nasnet_mobile_arg_scope", "tensorflow.random_uniform.eval", "logits.get_shape"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope"], ["", "", "def", "testUnknownBatchSizeMobileModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "height", ",", "width", "=", "224", ",", "224", "\n", "num_classes", "=", "1000", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_mobile_arg_scope", "(", ")", ")", ":", "\n", "        ", "logits", ",", "_", "=", "nasnet", ".", "build_nasnet_mobile", "(", "inputs", ",", "num_classes", ")", "\n", "", "self", ".", "assertListEqual", "(", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "\n", "[", "None", ",", "num_classes", "]", ")", "\n", "images", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "output", "=", "sess", ".", "run", "(", "logits", ",", "{", "inputs", ":", "images", ".", "eval", "(", ")", "}", ")", "\n", "self", ".", "assertEquals", "(", "output", ".", "shape", ",", "(", "batch_size", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_test.NASNetTest.testEvaluationMobileModel": [[272, 286], ["nasnet_test.NASNetTest.test_session", "tensorflow.random_uniform", "tensorflow.argmax", "sess.run", "sess.run", "nasnet_test.NASNetTest.assertEquals", "slim.arg_scope", "models.nasnet_model.build_nasnet_mobile", "tensorflow.global_variables_initializer", "models.nasnet_model.nasnet_mobile_arg_scope"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.benchmark_cnn.BenchmarkCNN.run", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.build_nasnet_mobile", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_model.nasnet_mobile_arg_scope"], ["", "", "def", "testEvaluationMobileModel", "(", "self", ")", ":", "\n", "    ", "batch_size", "=", "2", "\n", "height", ",", "width", "=", "224", ",", "224", "\n", "num_classes", "=", "1000", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "eval_inputs", "=", "tf", ".", "random_uniform", "(", "(", "batch_size", ",", "height", ",", "width", ",", "3", ")", ")", "\n", "with", "slim", ".", "arg_scope", "(", "nasnet", ".", "nasnet_mobile_arg_scope", "(", ")", ")", ":", "\n", "        ", "logits", ",", "_", "=", "nasnet", ".", "build_nasnet_mobile", "(", "eval_inputs", ",", "\n", "num_classes", ",", "\n", "is_training", "=", "False", ")", "\n", "", "predictions", "=", "tf", ".", "argmax", "(", "logits", ",", "1", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "output", "=", "sess", ".", "run", "(", "predictions", ")", "\n", "self", ".", "assertEquals", "(", "output", ".", "shape", ",", "(", "batch_size", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv3Model.__init__": [[49, 52], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "auxiliary", "=", "False", ")", ":", "\n", "    ", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "super", "(", "Inceptionv3Model", ",", "self", ")", ".", "__init__", "(", "'inception3'", ",", "224", ",", "256", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv3Model.add_inference": [[53, 133], ["cnn.conv", "cnn.conv", "cnn.conv", "cnn.mpool", "cnn.conv", "cnn.conv", "cnn.mpool", "inception_model.Inceptionv3Model.add_inference.inception_v3_a"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.mpool"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "\n", "    ", "def", "inception_v3_a", "(", "cnn", ",", "n", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'conv'", ",", "64", ",", "1", ",", "1", ")", "]", ",", "[", "(", "'conv'", ",", "48", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "64", ",", "5", ",", "5", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "64", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "96", ",", "3", ",", "3", ")", ",", "(", "'conv'", ",", "96", ",", "3", ",", "3", ")", "]", ",", "\n", "[", "(", "'apool'", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'SAME'", ")", ",", "(", "'conv'", ",", "n", ",", "1", ",", "1", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v3_a'", ",", "cols", ")", "\n", "\n", "\n", "", "def", "inception_v3_b", "(", "cnn", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'conv'", ",", "384", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "64", ",", "1", ",", "1", ")", ",", "\n", "(", "'conv'", ",", "96", ",", "3", ",", "3", ")", ",", "\n", "(", "'conv'", ",", "96", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'mpool'", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v3_b'", ",", "cols", ")", "\n", "\n", "\n", "", "def", "inception_v3_c", "(", "cnn", ",", "n", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "n", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "n", ",", "1", ",", "7", ")", ",", "(", "'conv'", ",", "192", ",", "7", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "n", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "n", ",", "7", ",", "1", ")", ",", "(", "'conv'", ",", "n", ",", "1", ",", "7", ")", ",", "\n", "(", "'conv'", ",", "n", ",", "7", ",", "1", ")", ",", "(", "'conv'", ",", "192", ",", "1", ",", "7", ")", "]", ",", "\n", "[", "(", "'apool'", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'SAME'", ")", ",", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v3_c'", ",", "cols", ")", "\n", "\n", "\n", "", "def", "inception_v3_d", "(", "cnn", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "320", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "192", ",", "1", ",", "7", ")", ",", "(", "'conv'", ",", "192", ",", "7", ",", "1", ")", ",", "\n", "(", "'conv'", ",", "192", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'mpool'", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v3_d'", ",", "cols", ")", "\n", "\n", "\n", "", "def", "inception_v3_e", "(", "cnn", ",", "pooltype", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'conv'", ",", "320", ",", "1", ",", "1", ")", "]", ",", "[", "(", "'conv'", ",", "384", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "384", ",", "1", ",", "3", ")", "]", ",", "\n", "[", "(", "'share'", ",", ")", ",", "(", "'conv'", ",", "384", ",", "3", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "448", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "384", ",", "3", ",", "3", ")", ",", "(", "'conv'", ",", "384", ",", "1", ",", "3", ")", "]", ",", "\n", "[", "(", "'share'", ",", ")", ",", "(", "'share'", ",", ")", ",", "(", "'conv'", ",", "384", ",", "3", ",", "1", ")", "]", ",", "\n", "[", "(", "'mpool'", "if", "pooltype", "==", "'max'", "else", "'apool'", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'SAME'", ")", ",", "\n", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v3_e'", ",", "cols", ")", "\n", "\n", "\n", "", "def", "incept_v3_aux", "(", "cnn", ")", ":", "\n", "      ", "assert", "cnn", ".", "aux_top_layer", "is", "None", "\n", "cnn", ".", "aux_top_layer", "=", "cnn", ".", "top_layer", "\n", "cnn", ".", "aux_top_size", "=", "cnn", ".", "top_size", "\n", "with", "cnn", ".", "switch_to_aux_top_layer", "(", ")", ":", "\n", "        ", "cnn", ".", "apool", "(", "5", ",", "5", ",", "3", ",", "3", ",", "mode", "=", "'VALID'", ")", "\n", "cnn", ".", "conv", "(", "128", ",", "1", ",", "1", ",", "mode", "=", "'SAME'", ")", "\n", "cnn", ".", "conv", "(", "768", ",", "5", ",", "5", ",", "mode", "=", "'VALID'", ",", "stddev", "=", "0.01", ")", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "768", "]", ")", "\n", "\n", "\n", "", "", "cnn", ".", "use_batch_norm", "=", "True", "\n", "cnn", ".", "batch_norm_config", "=", "{", "'decay'", ":", "0.9", ",", "'epsilon'", ":", "1e-5", ",", "'scale'", ":", "True", "}", "\n", "cnn", ".", "conv", "(", "32", ",", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'VALID'", ")", "# 299 x 299 x 3", "\n", "cnn", ".", "conv", "(", "32", ",", "3", ",", "3", ",", "1", ",", "1", ",", "mode", "=", "'VALID'", ")", "# 149 x 149 x 32", "\n", "cnn", ".", "conv", "(", "64", ",", "3", ",", "3", ",", "1", ",", "1", ",", "mode", "=", "'SAME'", ")", "# 147 x 147 x 64", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'VALID'", ")", "# 147 x 147 x 64", "\n", "cnn", ".", "conv", "(", "80", ",", "1", ",", "1", ",", "1", ",", "1", ",", "mode", "=", "'VALID'", ")", "# 73 x 73 x 80", "\n", "cnn", ".", "conv", "(", "192", ",", "3", ",", "3", ",", "1", ",", "1", ",", "mode", "=", "'VALID'", ")", "# 71 x 71 x 192", "\n", "cnn", ".", "mpool", "(", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "# 35 x 35 x 192", "\n", "inception_v3_a", "(", "cnn", ",", "32", ")", "# 35 x 35 x 256 mixed.", "\n", "inception_v3_a", "(", "cnn", ",", "64", ")", "# 35 x 35 x 288 mixed_1.", "\n", "inception_v3_a", "(", "cnn", ",", "64", ")", "# 35 x 35 x 288 mixed_2", "\n", "inception_v3_b", "(", "cnn", ")", "# 17 x 17 x 768 mixed_3", "\n", "inception_v3_c", "(", "cnn", ",", "128", ")", "# 17 x 17 x 768 mixed_4", "\n", "inception_v3_c", "(", "cnn", ",", "160", ")", "# 17 x 17 x 768 mixed_5", "\n", "inception_v3_c", "(", "cnn", ",", "160", ")", "# 17 x 17 x 768 mixed_6", "\n", "inception_v3_c", "(", "cnn", ",", "192", ")", "# 17 x 17 x 768 mixed_7", "\n", "if", "self", ".", "_auxiliary", ":", "\n", "      ", "incept_v3_aux", "(", "cnn", ")", "# Auxillary Head logits", "\n", "", "inception_v3_d", "(", "cnn", ")", "# 17 x 17 x 1280 mixed_8", "\n", "inception_v3_e", "(", "cnn", ",", "'avg'", ")", "# 8 x 8 x 2048 mixed_9", "\n", "inception_v3_e", "(", "cnn", ",", "'max'", ")", "# 8 x 8 x 2048 mixed_10", "\n", "cnn", ".", "spatial_mean", "(", ")", "# 8 x 8 x 2048", "\n", "cnn", ".", "reshape", "(", "[", "-", "1", ",", "2048", "]", ")", "# 1 x 1 x 2048", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv3Model.get_learning_rate": [[134, 153], ["print", "print", "print", "tensorflow.train.piecewise_constant", "int", "tensorflow.cond", "float", "int"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "(", "\n", "float", "(", "datasets", ".", "IMAGENET_NUM_TRAIN_IMAGES", ")", "/", "batch_size", ")", "\n", "boundaries", "=", "[", "int", "(", "num_batches_per_epoch", "*", "x", ")", "for", "x", "in", "[", "30", ",", "60", ",", "90", ",", "100", "]", "]", "\n", "\n", "rescaled_lr", "=", "self", ".", "learning_rate", "/", "self", ".", "default_batch_size", "*", "batch_size", "\n", "print", "(", "'Init LR: '", ",", "rescaled_lr", ")", "\n", "rescaled_lr", "=", "rescaled_lr", "/", "(", "batch_size", "/", "self", ".", "batch_size", ")", "\n", "print", "(", "'GPU Num: '", ",", "batch_size", "/", "self", ".", "batch_size", ")", "\n", "print", "(", "'Batch size: '", ",", "batch_size", ")", "\n", "values", "=", "[", "1", ",", "0.1", ",", "0.01", ",", "0.001", ",", "0.0001", "]", "\n", "values", "=", "[", "rescaled_lr", "*", "v", "for", "v", "in", "values", "]", "\n", "lr", "=", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n", "warmup_steps", "=", "int", "(", "num_batches_per_epoch", ")", "\n", "\n", "warmup_lr", "=", "lr", "*", "0.1", "\n", "\n", "return", "tf", ".", "cond", "(", "global_step", "<", "warmup_steps", ",", "lambda", ":", "warmup_lr", ",", "lambda", ":", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv4Model.__init__": [[195, 197], ["models.model.CNNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Inceptionv4Model", ",", "self", ")", ".", "__init__", "(", "'inception4'", ",", "224", ",", "64", ",", "0.004", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv4Model.add_inference": [[198, 242], ["cnn.conv", "cnn.conv", "cnn.conv", "inception_model.inception_v4_sa", "inception_model.inception_v4_sb", "inception_model.inception_v4_sc", "six.moves.xrange", "inception_model.inception_v4_ra", "six.moves.xrange", "inception_model.inception_v4_rb", "six.moves.xrange", "cnn.spatial_mean", "cnn.dropout", "cnn.inception_module", "cnn.inception_module", "cnn.inception_module", "inception_model.Inceptionv4Model.add_inference.inception_v4_a"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_sa", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_sb", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_sc", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_ra", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_rb", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.spatial_mean", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.dropout", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module"], ["", "def", "add_inference", "(", "self", ",", "cnn", ")", ":", "\n", "    ", "cnn", ".", "use_batch_norm", "=", "True", "\n", "cnn", ".", "batch_norm_config", "=", "{", "'decay'", ":", "0.9", ",", "'epsilon'", ":", "1e-5", ",", "'scale'", ":", "True", "}", "\n", "\n", "def", "inception_v4_a", "(", "cnn", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'apool'", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'SAME'", ")", ",", "(", "'conv'", ",", "96", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "96", ",", "1", ",", "1", ")", "]", ",", "[", "(", "'conv'", ",", "64", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "96", ",", "3", ",", "3", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "64", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "96", ",", "3", ",", "3", ")", ",", "(", "'conv'", ",", "96", ",", "3", ",", "3", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_a'", ",", "cols", ")", "\n", "\n", "", "def", "inception_v4_b", "(", "cnn", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'apool'", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'SAME'", ")", ",", "(", "'conv'", ",", "128", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "384", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "224", ",", "1", ",", "7", ")", ",", "(", "'conv'", ",", "256", ",", "7", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "192", ",", "1", ",", "7", ")", ",", "(", "'conv'", ",", "224", ",", "7", ",", "1", ")", ",", "\n", "(", "'conv'", ",", "224", ",", "1", ",", "7", ")", ",", "(", "'conv'", ",", "256", ",", "7", ",", "1", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_b'", ",", "cols", ")", "\n", "\n", "", "def", "inception_v4_c", "(", "cnn", ")", ":", "\n", "      ", "cols", "=", "[", "[", "(", "'apool'", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'SAME'", ")", ",", "(", "'conv'", ",", "256", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "256", ",", "1", ",", "1", ")", "]", ",", "[", "(", "'conv'", ",", "384", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "256", ",", "1", ",", "3", ")", "]", ",", "\n", "[", "(", "'share'", ",", ")", ",", "(", "'conv'", ",", "256", ",", "3", ",", "1", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "384", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "448", ",", "1", ",", "3", ")", ",", "(", "'conv'", ",", "512", ",", "3", ",", "1", ")", ",", "\n", "(", "'conv'", ",", "256", ",", "3", ",", "1", ")", "]", ",", "[", "(", "'share'", ",", ")", ",", "(", "'share'", ",", ")", ",", "(", "'share'", ",", ")", ",", "\n", "(", "'conv'", ",", "256", ",", "1", ",", "3", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_c'", ",", "cols", ")", "\n", "\n", "", "cnn", ".", "use_batch_norm", "=", "True", "\n", "cnn", ".", "conv", "(", "32", ",", "3", ",", "3", ",", "2", ",", "2", ",", "mode", "=", "'VALID'", ")", "\n", "cnn", ".", "conv", "(", "32", ",", "3", ",", "3", ",", "1", ",", "1", ",", "mode", "=", "'VALID'", ")", "\n", "cnn", ".", "conv", "(", "64", ",", "3", ",", "3", ")", "\n", "inception_v4_sa", "(", "cnn", ")", "\n", "inception_v4_sb", "(", "cnn", ")", "\n", "inception_v4_sc", "(", "cnn", ")", "\n", "for", "_", "in", "xrange", "(", "4", ")", ":", "\n", "      ", "inception_v4_a", "(", "cnn", ")", "\n", "", "inception_v4_ra", "(", "cnn", ",", "192", ",", "224", ",", "256", ",", "384", ")", "\n", "for", "_", "in", "xrange", "(", "7", ")", ":", "\n", "      ", "inception_v4_b", "(", "cnn", ")", "\n", "", "inception_v4_rb", "(", "cnn", ")", "\n", "for", "_", "in", "xrange", "(", "3", ")", ":", "\n", "      ", "inception_v4_c", "(", "cnn", ")", "\n", "", "cnn", ".", "spatial_mean", "(", ")", "\n", "cnn", ".", "dropout", "(", "0.8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.Inceptionv4Model.get_learning_rate": [[243, 256], ["tensorflow.train.piecewise_constant", "int", "tensorflow.cond", "float", "int", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "global_step", ",", "batch_size", ")", ":", "\n", "    ", "num_batches_per_epoch", "=", "(", "\n", "float", "(", "datasets", ".", "IMAGENET_NUM_TRAIN_IMAGES", ")", "/", "batch_size", ")", "\n", "boundaries", "=", "[", "int", "(", "num_batches_per_epoch", "*", "x", ")", "for", "x", "in", "[", "30", ",", "60", ",", "80", ",", "90", "]", "]", "\n", "rescaled_lr", "=", "self", ".", "learning_rate", "/", "self", ".", "default_batch_size", "*", "batch_size", "\n", "values", "=", "[", "1", ",", "0.1", ",", "0.01", ",", "0.001", ",", "0.0001", "]", "\n", "values", "=", "[", "rescaled_lr", "*", "v", "for", "v", "in", "values", "]", "\n", "lr", "=", "tf", ".", "train", ".", "piecewise_constant", "(", "global_step", ",", "boundaries", ",", "values", ")", "\n", "warmup_steps", "=", "int", "(", "num_batches_per_epoch", "*", "5", ")", "\n", "warmup_lr", "=", "(", "\n", "rescaled_lr", "*", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "float32", ")", "/", "tf", ".", "cast", "(", "\n", "warmup_steps", ",", "tf", ".", "float32", ")", ")", "\n", "return", "tf", ".", "cond", "(", "global_step", "<", "warmup_steps", ",", "lambda", ":", "warmup_lr", ",", "lambda", ":", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_sa": [[156, 160], ["cnn.inception_module"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module"], ["", "", "def", "inception_v4_sa", "(", "cnn", ")", ":", "\n", "  ", "cols", "=", "[", "[", "(", "'mpool'", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "[", "\n", "(", "'conv'", ",", "96", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_sa'", ",", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_sb": [[162, 167], ["cnn.inception_module"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module"], ["", "def", "inception_v4_sb", "(", "cnn", ")", ":", "\n", "  ", "cols", "=", "[", "[", "(", "'conv'", ",", "64", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "96", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "64", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "64", ",", "7", ",", "1", ")", ",", "(", "'conv'", ",", "64", ",", "1", ",", "7", ")", ",", "\n", "(", "'conv'", ",", "96", ",", "3", ",", "3", ",", "1", ",", "1", ",", "'VALID'", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_sb'", ",", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_sc": [[169, 173], ["cnn.inception_module"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module"], ["", "def", "inception_v4_sc", "(", "cnn", ")", ":", "\n", "  ", "cols", "=", "[", "[", "(", "'conv'", ",", "192", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'mpool'", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_sc'", ",", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_ra": [[176, 182], ["cnn.inception_module"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module"], ["", "def", "inception_v4_ra", "(", "cnn", ",", "k", ",", "l", ",", "m", ",", "n", ")", ":", "\n", "  ", "cols", "=", "[", "\n", "[", "(", "'mpool'", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "[", "(", "'conv'", ",", "n", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "k", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "l", ",", "3", ",", "3", ")", ",", "(", "'conv'", ",", "m", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", "\n", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_ra'", ",", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.inception_model.inception_v4_rb": [[184, 190], ["cnn.inception_module"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.inception_module"], ["", "def", "inception_v4_rb", "(", "cnn", ")", ":", "\n", "  ", "cols", "=", "[", "[", "(", "'mpool'", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "192", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "192", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", ",", "\n", "[", "(", "'conv'", ",", "256", ",", "1", ",", "1", ")", ",", "(", "'conv'", ",", "256", ",", "1", ",", "7", ")", ",", "(", "'conv'", ",", "320", ",", "7", ",", "1", ")", ",", "\n", "(", "'conv'", ",", "320", ",", "3", ",", "3", ",", "2", ",", "2", ",", "'VALID'", ")", "]", "]", "\n", "cnn", ".", "inception_module", "(", "'incept_v4_rb'", ",", "cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell.__init__": [[254, 264], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_conv_filters", ",", "operations", ",", "used_hiddenstates", ",", "\n", "hiddenstate_indices", ",", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "total_training_steps", ")", ":", "\n", "    ", "self", ".", "_num_conv_filters", "=", "num_conv_filters", "\n", "self", ".", "_operations", "=", "operations", "\n", "self", ".", "_used_hiddenstates", "=", "used_hiddenstates", "\n", "self", ".", "_hiddenstate_indices", "=", "hiddenstate_indices", "\n", "self", ".", "_drop_path_keep_prob", "=", "drop_path_keep_prob", "\n", "self", ".", "_total_num_cells", "=", "total_num_cells", "\n", "self", ".", "_total_training_steps", "=", "total_training_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._reduce_prev_layer": [[265, 283], ["nasnet_utils.get_channel_dim", "int", "int", "tensorflow.nn.relu", "nasnet_utils.factorized_reduction", "tensorflow.nn.relu", "slim.conv2d", "slim.batch_norm"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_dim", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.factorized_reduction", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm"], ["", "def", "_reduce_prev_layer", "(", "self", ",", "prev_layer", ",", "curr_layer", ")", ":", "\n", "    ", "\"\"\"Matches dimension of prev_layer to the curr_layer.\"\"\"", "\n", "# Set the prev layer to the current layer if it is none", "\n", "if", "prev_layer", "is", "None", ":", "\n", "      ", "return", "curr_layer", "\n", "", "curr_num_filters", "=", "self", ".", "_filter_size", "\n", "prev_num_filters", "=", "get_channel_dim", "(", "prev_layer", ".", "shape", ")", "\n", "curr_filter_shape", "=", "int", "(", "curr_layer", ".", "shape", "[", "2", "]", ")", "\n", "prev_filter_shape", "=", "int", "(", "prev_layer", ".", "shape", "[", "2", "]", ")", "\n", "if", "curr_filter_shape", "!=", "prev_filter_shape", ":", "\n", "      ", "prev_layer", "=", "tf", ".", "nn", ".", "relu", "(", "prev_layer", ")", "\n", "prev_layer", "=", "factorized_reduction", "(", "prev_layer", ",", "curr_num_filters", ",", "stride", "=", "2", ")", "\n", "", "elif", "curr_num_filters", "!=", "prev_num_filters", ":", "\n", "      ", "prev_layer", "=", "tf", ".", "nn", ".", "relu", "(", "prev_layer", ")", "\n", "prev_layer", "=", "slim", ".", "conv2d", "(", "\n", "prev_layer", ",", "curr_num_filters", ",", "1", ",", "scope", "=", "'prev_1x1'", ")", "\n", "prev_layer", "=", "slim", ".", "batch_norm", "(", "prev_layer", ",", "scope", "=", "'prev_bn'", ")", "\n", "", "return", "prev_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._cell_base": [[284, 301], ["nasnet_utils.NasNetABaseCell._reduce_prev_layer", "tensorflow.nn.relu", "slim.conv2d", "slim.batch_norm", "nasnet_utils.get_channel_index", "tensorflow.split", "tensorflow.split.append", "int", "int"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._reduce_prev_layer", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_index"], ["", "def", "_cell_base", "(", "self", ",", "net", ",", "prev_layer", ")", ":", "\n", "    ", "\"\"\"Runs the beginning of the conv cell before the predicted ops are run.\"\"\"", "\n", "num_filters", "=", "self", ".", "_filter_size", "\n", "\n", "# Check to be sure prev layer stuff is setup correctly", "\n", "prev_layer", "=", "self", ".", "_reduce_prev_layer", "(", "prev_layer", ",", "net", ")", "\n", "\n", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_filters", ",", "1", ",", "scope", "=", "'1x1'", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "net", ",", "scope", "=", "'beginning_bn'", ")", "\n", "split_axis", "=", "get_channel_index", "(", ")", "\n", "net", "=", "tf", ".", "split", "(", "axis", "=", "split_axis", ",", "num_or_size_splits", "=", "1", ",", "value", "=", "net", ")", "\n", "for", "split", "in", "net", ":", "\n", "      ", "assert", "int", "(", "split", ".", "shape", "[", "split_axis", "]", "==", "int", "(", "\n", "self", ".", "_num_conv_filters", "*", "self", ".", "_filter_scaling", ")", ")", "\n", "", "net", ".", "append", "(", "prev_layer", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell.__call__": [[302, 348], ["int", "tensorflow.variable_scope", "nasnet_utils.NasNetABaseCell._cell_base", "range", "tensorflow.variable_scope", "nasnet_utils.NasNetABaseCell._combine_unused_states", "tensorflow.variable_scope", "nasnet_utils.NasNetABaseCell.append", "tensorflow.variable_scope", "nasnet_utils.NasNetABaseCell._apply_conv_operation", "tensorflow.variable_scope", "nasnet_utils.NasNetABaseCell._apply_conv_operation", "tensorflow.variable_scope"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._cell_base", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._combine_unused_states", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._apply_conv_operation", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._apply_conv_operation"], ["", "def", "__call__", "(", "self", ",", "\n", "net", ",", "\n", "scope", "=", "None", ",", "\n", "filter_scaling", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "prev_layer", "=", "None", ",", "\n", "cell_num", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Runs the conv cell.\"\"\"", "\n", "self", ".", "_cell_num", "=", "cell_num", "\n", "self", ".", "_filter_scaling", "=", "filter_scaling", "\n", "self", ".", "_filter_size", "=", "int", "(", "self", ".", "_num_conv_filters", "*", "filter_scaling", ")", "\n", "\n", "i", "=", "0", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "      ", "net", "=", "self", ".", "_cell_base", "(", "net", ",", "prev_layer", ")", "\n", "for", "iteration", "in", "range", "(", "5", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'comb_iter_{}'", ".", "format", "(", "iteration", ")", ")", ":", "\n", "          ", "left_hiddenstate_idx", ",", "right_hiddenstate_idx", "=", "(", "\n", "self", ".", "_hiddenstate_indices", "[", "i", "]", ",", "self", ".", "_hiddenstate_indices", "[", "i", "+", "1", "]", ")", "\n", "original_input_left", "=", "left_hiddenstate_idx", "<", "2", "\n", "original_input_right", "=", "right_hiddenstate_idx", "<", "2", "\n", "h1", "=", "net", "[", "left_hiddenstate_idx", "]", "\n", "h2", "=", "net", "[", "right_hiddenstate_idx", "]", "\n", "\n", "operation_left", "=", "self", ".", "_operations", "[", "i", "]", "\n", "operation_right", "=", "self", ".", "_operations", "[", "i", "+", "1", "]", "\n", "i", "+=", "2", "\n", "# Apply conv operations", "\n", "with", "tf", ".", "variable_scope", "(", "'left'", ")", ":", "\n", "            ", "h1", "=", "self", ".", "_apply_conv_operation", "(", "h1", ",", "operation_left", ",", "stride", ",", "\n", "original_input_left", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'right'", ")", ":", "\n", "            ", "h2", "=", "self", ".", "_apply_conv_operation", "(", "h2", ",", "operation_right", ",", "stride", ",", "\n", "original_input_right", ")", "\n", "\n", "# Combine hidden states using 'add'.", "\n", "", "with", "tf", ".", "variable_scope", "(", "'combine'", ")", ":", "\n", "            ", "h", "=", "h1", "+", "h2", "\n", "\n", "# Add hiddenstate to the list of hiddenstates we can choose from", "\n", "", "net", ".", "append", "(", "h", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'cell_output'", ")", ":", "\n", "        ", "net", "=", "self", ".", "_combine_unused_states", "(", "net", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._apply_conv_operation": [[349, 376], ["nasnet_utils.get_channel_dim", "nasnet_utils._stacked_separable_conv", "nasnet_utils.NasNetABaseCell._apply_drop_path", "tensorflow.nn.relu", "slim.conv2d", "slim.batch_norm", "nasnet_utils._pooling", "ValueError", "slim.conv2d", "slim.batch_norm"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_dim", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._stacked_separable_conv", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._apply_drop_path", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._pooling", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm"], ["", "", "def", "_apply_conv_operation", "(", "self", ",", "net", ",", "operation", ",", "stride", ",", "\n", "is_from_original_input", ")", ":", "\n", "    ", "\"\"\"Applies the predicted conv operation to net.\"\"\"", "\n", "# Dont stride if this is not one of the original hiddenstates", "\n", "if", "stride", ">", "1", "and", "not", "is_from_original_input", ":", "\n", "      ", "stride", "=", "1", "\n", "", "input_filters", "=", "get_channel_dim", "(", "net", ".", "shape", ")", "\n", "filter_size", "=", "self", ".", "_filter_size", "\n", "if", "'separable'", "in", "operation", ":", "\n", "      ", "net", "=", "_stacked_separable_conv", "(", "net", ",", "stride", ",", "operation", ",", "filter_size", ")", "\n", "", "elif", "operation", "in", "[", "'none'", "]", ":", "\n", "# Check if a stride is needed, then use a strided 1x1 here", "\n", "      ", "if", "stride", ">", "1", "or", "(", "input_filters", "!=", "filter_size", ")", ":", "\n", "        ", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "filter_size", ",", "1", ",", "stride", "=", "stride", ",", "scope", "=", "'1x1'", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "net", ",", "scope", "=", "'bn_1'", ")", "\n", "", "", "elif", "'pool'", "in", "operation", ":", "\n", "      ", "net", "=", "_pooling", "(", "net", ",", "stride", ",", "operation", ")", "\n", "if", "input_filters", "!=", "filter_size", ":", "\n", "        ", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "filter_size", ",", "1", ",", "stride", "=", "1", ",", "scope", "=", "'1x1'", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "net", ",", "scope", "=", "'bn_1'", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Unimplemented operation'", ",", "operation", ")", "\n", "\n", "", "if", "operation", "!=", "'none'", ":", "\n", "      ", "net", "=", "self", ".", "_apply_drop_path", "(", "net", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._combine_unused_states": [[377, 406], ["int", "nasnet_utils.get_channel_dim", "enumerate", "nasnet_utils.get_channel_index", "tensorflow.concat", "len", "len", "int", "nasnet_utils.get_channel_dim", "zip", "tensorflow.variable_scope", "nasnet_utils.factorized_reduction"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_dim", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_index", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_dim", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.factorized_reduction"], ["", "def", "_combine_unused_states", "(", "self", ",", "net", ")", ":", "\n", "    ", "\"\"\"Concatenate the unused hidden states of the cell.\"\"\"", "\n", "used_hiddenstates", "=", "self", ".", "_used_hiddenstates", "\n", "\n", "final_height", "=", "int", "(", "net", "[", "-", "1", "]", ".", "shape", "[", "2", "]", ")", "\n", "final_num_filters", "=", "get_channel_dim", "(", "net", "[", "-", "1", "]", ".", "shape", ")", "\n", "assert", "len", "(", "used_hiddenstates", ")", "==", "len", "(", "net", ")", "\n", "for", "idx", ",", "used_h", "in", "enumerate", "(", "used_hiddenstates", ")", ":", "\n", "      ", "curr_height", "=", "int", "(", "net", "[", "idx", "]", ".", "shape", "[", "2", "]", ")", "\n", "curr_num_filters", "=", "get_channel_dim", "(", "net", "[", "idx", "]", ".", "shape", ")", "\n", "\n", "# Determine if a reduction should be applied to make the number of", "\n", "# filters match.", "\n", "should_reduce", "=", "final_num_filters", "!=", "curr_num_filters", "\n", "should_reduce", "=", "(", "final_height", "!=", "curr_height", ")", "or", "should_reduce", "\n", "should_reduce", "=", "should_reduce", "and", "not", "used_h", "\n", "if", "should_reduce", ":", "\n", "        ", "stride", "=", "2", "if", "final_height", "!=", "curr_height", "else", "1", "\n", "with", "tf", ".", "variable_scope", "(", "'reduction_{}'", ".", "format", "(", "idx", ")", ")", ":", "\n", "          ", "net", "[", "idx", "]", "=", "factorized_reduction", "(", "net", "[", "idx", "]", ",", "final_num_filters", ",", "stride", ")", "\n", "\n", "", "", "", "states_to_combine", "=", "(", "[", "\n", "h", "for", "h", ",", "is_used", "in", "zip", "(", "net", ",", "used_hiddenstates", ")", "if", "not", "is_used", "\n", "]", ")", "\n", "\n", "# Return the concat of all the states", "\n", "concat_axis", "=", "get_channel_index", "(", ")", "\n", "net", "=", "tf", ".", "concat", "(", "values", "=", "states_to_combine", ",", "axis", "=", "concat_axis", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetABaseCell._apply_drop_path": [[407, 458], ["nasnet_utils.drop_path", "tensorflow.minimum", "float", "tensorflow.cast", "tensorflow.device", "tensorflow.summary.scalar", "tensorflow.device", "tensorflow.summary.scalar", "tensorflow.train.get_or_create_global_step", "tensorflow.device", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.drop_path"], ["", "@", "tf", ".", "contrib", ".", "framework", ".", "add_arg_scope", "# No public API. For internal use only.", "\n", "def", "_apply_drop_path", "(", "self", ",", "\n", "net", ",", "\n", "current_step", "=", "None", ",", "\n", "use_summaries", "=", "True", ",", "\n", "drop_connect_version", "=", "'v3'", ")", ":", "\n", "    ", "\"\"\"Apply drop_path regularization.\n\n    Args:\n      net: the Tensor that gets drop_path regularization applied.\n      current_step: a float32 Tensor with the current global_step value,\n        to be divided by hparams.total_training_steps. Usually None, which\n        defaults to tf.train.get_or_create_global_step() properly casted.\n      use_summaries: a Python boolean. If set to False, no summaries are output.\n      drop_connect_version: one of 'v1', 'v2', 'v3', controlling whether\n        the dropout rate is scaled by current_step (v1), layer (v2), or\n        both (v3, the default).\n\n    Returns:\n      The dropped-out value of `net`.\n    \"\"\"", "\n", "drop_path_keep_prob", "=", "self", ".", "_drop_path_keep_prob", "\n", "if", "drop_path_keep_prob", "<", "1.0", ":", "\n", "      ", "assert", "drop_connect_version", "in", "[", "'v1'", ",", "'v2'", ",", "'v3'", "]", "\n", "if", "drop_connect_version", "in", "[", "'v2'", ",", "'v3'", "]", ":", "\n", "# Scale keep prob by layer number", "\n", "        ", "assert", "self", ".", "_cell_num", "!=", "-", "1", "\n", "# The added 2 is for the reduction cells", "\n", "num_cells", "=", "self", ".", "_total_num_cells", "\n", "layer_ratio", "=", "(", "self", ".", "_cell_num", "+", "1", ")", "/", "float", "(", "num_cells", ")", "\n", "if", "use_summaries", ":", "\n", "          ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'layer_ratio'", ",", "layer_ratio", ")", "\n", "", "", "drop_path_keep_prob", "=", "1", "-", "layer_ratio", "*", "(", "1", "-", "drop_path_keep_prob", ")", "\n", "", "if", "drop_connect_version", "in", "[", "'v1'", ",", "'v3'", "]", ":", "\n", "# Decrease the keep probability over time", "\n", "        ", "if", "not", "current_step", ":", "\n", "          ", "current_step", "=", "tf", ".", "cast", "(", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", ",", "\n", "tf", ".", "float32", ")", "\n", "", "drop_path_burn_in_steps", "=", "self", ".", "_total_training_steps", "\n", "current_ratio", "=", "current_step", "/", "drop_path_burn_in_steps", "\n", "current_ratio", "=", "tf", ".", "minimum", "(", "1.0", ",", "current_ratio", ")", "\n", "if", "use_summaries", ":", "\n", "          ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'current_ratio'", ",", "current_ratio", ")", "\n", "", "", "drop_path_keep_prob", "=", "(", "1", "-", "current_ratio", "*", "(", "1", "-", "drop_path_keep_prob", ")", ")", "\n", "", "if", "use_summaries", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "          ", "tf", ".", "summary", ".", "scalar", "(", "'drop_path_keep_prob'", ",", "drop_path_keep_prob", ")", "\n", "", "", "net", "=", "drop_path", "(", "net", ",", "drop_path_keep_prob", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetANormalCell.__init__": [[463, 475], ["nasnet_utils.NasNetABaseCell.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "num_conv_filters", ",", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "total_training_steps", ")", ":", "\n", "    ", "operations", "=", "[", "\n", "'separable_5x5_2'", ",", "'separable_3x3_2'", ",", "'separable_5x5_2'", ",", "\n", "'separable_3x3_2'", ",", "'avg_pool_3x3'", ",", "'none'", ",", "'avg_pool_3x3'", ",", "\n", "'avg_pool_3x3'", ",", "'separable_3x3_2'", ",", "'none'", "\n", "]", "\n", "used_hiddenstates", "=", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "hiddenstate_indices", "=", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", "\n", "super", "(", "NasNetANormalCell", ",", "self", ")", ".", "__init__", "(", "\n", "num_conv_filters", ",", "operations", ",", "used_hiddenstates", ",", "hiddenstate_indices", ",", "\n", "drop_path_keep_prob", ",", "total_num_cells", ",", "total_training_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__": [[480, 492], ["nasnet_utils.NasNetABaseCell.__init__"], "methods", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.NasNetAReductionCell.__init__"], ["def", "__init__", "(", "self", ",", "num_conv_filters", ",", "drop_path_keep_prob", ",", "total_num_cells", ",", "\n", "total_training_steps", ")", ":", "\n", "    ", "operations", "=", "[", "\n", "'separable_5x5_2'", ",", "'separable_7x7_2'", ",", "'max_pool_3x3'", ",", "'separable_7x7_2'", ",", "\n", "'avg_pool_3x3'", ",", "'separable_5x5_2'", ",", "'none'", ",", "'avg_pool_3x3'", ",", "\n", "'separable_3x3_2'", ",", "'max_pool_3x3'", "\n", "]", "\n", "used_hiddenstates", "=", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "hiddenstate_indices", "=", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "3", ",", "2", ",", "2", ",", "0", "]", "\n", "super", "(", "NasNetAReductionCell", ",", "self", ")", ".", "__init__", "(", "\n", "num_conv_filters", ",", "operations", ",", "used_hiddenstates", ",", "hiddenstate_indices", ",", "\n", "drop_path_keep_prob", ",", "total_num_cells", ",", "total_training_steps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.calc_reduction_layers": [[44, 52], ["range", "int", "reduction_layers.append", "float"], "function", ["None"], ["def", "calc_reduction_layers", "(", "num_cells", ",", "num_reduction_layers", ")", ":", "\n", "  ", "\"\"\"Figure out what layers should have reductions.\"\"\"", "\n", "reduction_layers", "=", "[", "]", "\n", "for", "pool_num", "in", "range", "(", "1", ",", "num_reduction_layers", "+", "1", ")", ":", "\n", "    ", "layer_num", "=", "(", "float", "(", "pool_num", ")", "/", "(", "num_reduction_layers", "+", "1", ")", ")", "*", "num_cells", "\n", "layer_num", "=", "int", "(", "layer_num", ")", "\n", "reduction_layers", ".", "append", "(", "layer_num", ")", "\n", "", "return", "reduction_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_index": [[54, 59], ["None"], "function", ["None"], ["", "@", "tf", ".", "contrib", ".", "framework", ".", "add_arg_scope", "\n", "def", "get_channel_index", "(", "data_format", "=", "INVALID", ")", ":", "\n", "  ", "assert", "data_format", "!=", "INVALID", "\n", "axis", "=", "3", "if", "data_format", "==", "'NHWC'", "else", "1", "\n", "return", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.get_channel_dim": [[61, 71], ["len", "int", "int", "ValueError"], "function", ["None"], ["", "@", "tf", ".", "contrib", ".", "framework", ".", "add_arg_scope", "\n", "def", "get_channel_dim", "(", "shape", ",", "data_format", "=", "INVALID", ")", ":", "\n", "  ", "assert", "data_format", "!=", "INVALID", "\n", "assert", "len", "(", "shape", ")", "==", "4", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "    ", "return", "int", "(", "shape", "[", "3", "]", ")", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "    ", "return", "int", "(", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Not a valid data_format'", ",", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.global_avg_pool": [[73, 83], ["tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "@", "tf", ".", "contrib", ".", "framework", ".", "add_arg_scope", "\n", "def", "global_avg_pool", "(", "x", ",", "data_format", "=", "INVALID", ")", ":", "\n", "  ", "\"\"\"Average pool away the height and width spatial dimensions of x.\"\"\"", "\n", "assert", "data_format", "!=", "INVALID", "\n", "assert", "data_format", "in", "[", "'NHWC'", ",", "'NCHW'", "]", "\n", "assert", "x", ".", "shape", ".", "ndims", "==", "4", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "x", ",", "[", "1", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "x", ",", "[", "2", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.factorized_reduction": [[85, 125], ["tensorflow.nn.avg_pool", "slim.conv2d", "tensorflow.nn.avg_pool", "slim.conv2d", "tensorflow.concat", "slim.batch_norm", "slim.conv2d", "slim.batch_norm", "int", "int", "tensorflow.pad", "tensorflow.pad"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm"], ["", "", "@", "tf", ".", "contrib", ".", "framework", ".", "add_arg_scope", "\n", "def", "factorized_reduction", "(", "net", ",", "output_filters", ",", "stride", ",", "data_format", "=", "INVALID", ")", ":", "\n", "  ", "\"\"\"Reduces the shape of net without information loss due to striding.\"\"\"", "\n", "assert", "output_filters", "%", "2", "==", "0", ",", "(", "\n", "'Need even number of filters when using this factorized reduction.'", ")", "\n", "assert", "data_format", "!=", "INVALID", "\n", "if", "stride", "==", "1", ":", "\n", "    ", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "output_filters", ",", "1", ",", "scope", "=", "'path_conv'", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "net", ",", "scope", "=", "'path_bn'", ")", "\n", "return", "net", "\n", "", "if", "data_format", "==", "'NHWC'", ":", "\n", "    ", "stride_spec", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "", "else", ":", "\n", "    ", "stride_spec", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "\n", "# Skip path 1", "\n", "", "path1", "=", "tf", ".", "nn", ".", "avg_pool", "(", "\n", "net", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "stride_spec", ",", "'VALID'", ",", "data_format", "=", "data_format", ")", "\n", "path1", "=", "slim", ".", "conv2d", "(", "path1", ",", "int", "(", "output_filters", "/", "2", ")", ",", "1", ",", "scope", "=", "'path1_conv'", ")", "\n", "\n", "# Skip path 2", "\n", "# First pad with 0's on the right and bottom, then shift the filter to", "\n", "# include those 0's that were added.", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "    ", "pad_arr", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "path2", "=", "tf", ".", "pad", "(", "net", ",", "pad_arr", ")", "[", ":", ",", "1", ":", ",", "1", ":", ",", ":", "]", "\n", "concat_axis", "=", "3", "\n", "", "else", ":", "\n", "    ", "pad_arr", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", "]", "\n", "path2", "=", "tf", ".", "pad", "(", "net", ",", "pad_arr", ")", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "\n", "concat_axis", "=", "1", "\n", "\n", "", "path2", "=", "tf", ".", "nn", ".", "avg_pool", "(", "\n", "path2", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "stride_spec", ",", "'VALID'", ",", "data_format", "=", "data_format", ")", "\n", "path2", "=", "slim", ".", "conv2d", "(", "path2", ",", "int", "(", "output_filters", "/", "2", ")", ",", "1", ",", "scope", "=", "'path2_conv'", ")", "\n", "\n", "# Concat and apply BN", "\n", "final_path", "=", "tf", ".", "concat", "(", "values", "=", "[", "path1", ",", "path2", "]", ",", "axis", "=", "concat_axis", ")", "\n", "final_path", "=", "slim", ".", "batch_norm", "(", "final_path", ",", "scope", "=", "'final_path_bn'", ")", "\n", "return", "final_path", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils.drop_path": [[127, 139], ["tensorflow.cast", "tensorflow.random_uniform", "tensorflow.floor", "tensorflow.shape", "tensorflow.div"], "function", ["None"], ["", "@", "tf", ".", "contrib", ".", "framework", ".", "add_arg_scope", "\n", "def", "drop_path", "(", "net", ",", "keep_prob", ",", "is_training", "=", "True", ")", ":", "\n", "  ", "\"\"\"Drops out a whole example hiddenstate with the specified probability.\"\"\"", "\n", "if", "is_training", ":", "\n", "    ", "batch_size", "=", "tf", ".", "shape", "(", "net", ")", "[", "0", "]", "\n", "noise_shape", "=", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", "\n", "keep_prob", "=", "tf", ".", "cast", "(", "keep_prob", ",", "dtype", "=", "net", ".", "dtype", ")", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ",", "dtype", "=", "net", ".", "dtype", ")", "\n", "binary_tensor", "=", "tf", ".", "floor", "(", "random_tensor", ")", "\n", "net", "=", "tf", ".", "div", "(", "net", ",", "keep_prob", ")", "*", "binary_tensor", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_filter_shape": [[141, 147], ["operation.split", "int", "int"], "function", ["None"], ["", "def", "_operation_to_filter_shape", "(", "operation", ")", ":", "\n", "  ", "splitted_operation", "=", "operation", ".", "split", "(", "'x'", ")", "\n", "filter_shape", "=", "int", "(", "splitted_operation", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "assert", "filter_shape", "==", "int", "(", "\n", "splitted_operation", "[", "1", "]", "[", "0", "]", ")", ",", "'Rectangular filters not supported.'", "\n", "return", "filter_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_num_layers": [[149, 154], ["operation.split", "int"], "function", ["None"], ["", "def", "_operation_to_num_layers", "(", "operation", ")", ":", "\n", "  ", "splitted_operation", "=", "operation", ".", "split", "(", "'_'", ")", "\n", "if", "'x'", "in", "splitted_operation", "[", "-", "1", "]", ":", "\n", "    ", "return", "1", "\n", "", "return", "int", "(", "splitted_operation", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_info": [[156, 170], ["nasnet_utils._operation_to_num_layers", "nasnet_utils._operation_to_filter_shape"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_num_layers", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_filter_shape"], ["", "def", "_operation_to_info", "(", "operation", ")", ":", "\n", "  ", "\"\"\"Takes in operation name and returns meta information.\n\n  An example would be 'separable_3x3_4' -> (3, 4).\n\n  Args:\n    operation: String that corresponds to convolution operation.\n\n  Returns:\n    Tuple of (filter shape, num layers).\n  \"\"\"", "\n", "num_layers", "=", "_operation_to_num_layers", "(", "operation", ")", "\n", "filter_shape", "=", "_operation_to_filter_shape", "(", "operation", ")", "\n", "return", "num_layers", ",", "filter_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._stacked_separable_conv": [[172, 202], ["nasnet_utils._operation_to_info", "range", "tensorflow.nn.relu", "slim.separable_conv2d", "slim.batch_norm", "tensorflow.cast", "tensorflow.cast", "tensorflow.nn.relu", "slim.separable_conv2d", "slim.batch_norm"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_info", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm", "home.repos.pwc.inspect_result.z-x-yang_GCT.TensorFlow.convnet_builder.ConvNetBuilder.batch_norm"], ["", "def", "_stacked_separable_conv", "(", "net", ",", "stride", ",", "operation", ",", "filter_size", ")", ":", "\n", "  ", "\"\"\"Takes in an operations and parses it to the correct sep operation.\"\"\"", "\n", "num_layers", ",", "kernel_size", "=", "_operation_to_info", "(", "operation", ")", "\n", "net_type", "=", "net", ".", "dtype", "\n", "net", "=", "tf", ".", "cast", "(", "net", ",", "tf", ".", "float32", ")", "if", "net_type", "==", "tf", ".", "float16", "else", "net", "\n", "\n", "for", "layer_num", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "    ", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "net", "=", "slim", ".", "separable_conv2d", "(", "\n", "net", ",", "\n", "filter_size", ",", "\n", "kernel_size", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "scope", "=", "'separable_{0}x{0}_{1}'", ".", "format", "(", "kernel_size", ",", "layer_num", "+", "1", ")", ",", "\n", "stride", "=", "stride", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "\n", "net", ",", "scope", "=", "'bn_sep_{0}x{0}_{1}'", ".", "format", "(", "kernel_size", ",", "layer_num", "+", "1", ")", ")", "\n", "stride", "=", "1", "\n", "", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "net", "=", "slim", ".", "separable_conv2d", "(", "\n", "net", ",", "\n", "filter_size", ",", "\n", "kernel_size", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "scope", "=", "'separable_{0}x{0}_{1}'", ".", "format", "(", "kernel_size", ",", "num_layers", ")", ",", "\n", "stride", "=", "stride", ")", "\n", "net", "=", "slim", ".", "batch_norm", "(", "\n", "net", ",", "scope", "=", "'bn_sep_{0}x{0}_{1}'", ".", "format", "(", "kernel_size", ",", "num_layers", ")", ")", "\n", "net", "=", "tf", ".", "cast", "(", "net", ",", "net_type", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_pooling_type": [[204, 208], ["operation.split"], "function", ["None"], ["", "def", "_operation_to_pooling_type", "(", "operation", ")", ":", "\n", "  ", "\"\"\"Takes in the operation string and returns the pooling type.\"\"\"", "\n", "splitted_operation", "=", "operation", ".", "split", "(", "'_'", ")", "\n", "return", "splitted_operation", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_pooling_shape": [[210, 218], ["operation.split", "shape.split", "int"], "function", ["None"], ["", "def", "_operation_to_pooling_shape", "(", "operation", ")", ":", "\n", "  ", "\"\"\"Takes in the operation string and returns the pooling kernel shape.\"\"\"", "\n", "splitted_operation", "=", "operation", ".", "split", "(", "'_'", ")", "\n", "shape", "=", "splitted_operation", "[", "-", "1", "]", "\n", "assert", "'x'", "in", "shape", "\n", "filter_height", ",", "filter_width", "=", "shape", ".", "split", "(", "'x'", ")", "\n", "assert", "filter_height", "==", "filter_width", "\n", "return", "int", "(", "filter_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_pooling_info": [[220, 225], ["nasnet_utils._operation_to_pooling_type", "nasnet_utils._operation_to_pooling_shape"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_pooling_type", "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_pooling_shape"], ["", "def", "_operation_to_pooling_info", "(", "operation", ")", ":", "\n", "  ", "\"\"\"Parses the pooling operation string to return its type and shape.\"\"\"", "\n", "pooling_type", "=", "_operation_to_pooling_type", "(", "operation", ")", "\n", "pooling_shape", "=", "_operation_to_pooling_shape", "(", "operation", ")", "\n", "return", "pooling_type", ",", "pooling_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._pooling": [[227, 238], ["nasnet_utils._operation_to_pooling_info", "slim.avg_pool2d", "slim.max_pool2d", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.z-x-yang_GCT.models.nasnet_utils._operation_to_pooling_info"], ["", "def", "_pooling", "(", "net", ",", "stride", ",", "operation", ")", ":", "\n", "  ", "\"\"\"Parses operation and performs the correct pooling operation on net.\"\"\"", "\n", "padding", "=", "'SAME'", "\n", "pooling_type", ",", "pooling_shape", "=", "_operation_to_pooling_info", "(", "operation", ")", "\n", "if", "pooling_type", "==", "'avg'", ":", "\n", "    ", "net", "=", "slim", ".", "avg_pool2d", "(", "net", ",", "pooling_shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "", "elif", "pooling_type", "==", "'max'", ":", "\n", "    ", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "pooling_shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'Unimplemented pooling type: '", ",", "pooling_type", ")", "\n", "", "return", "net", "\n", "\n"]]}