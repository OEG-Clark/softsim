{"home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.PlacerParams.__init__": [[34, 37], ["six.iteritems", "controller_device.PlacerParams.add_param"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.PlacerParams.add_param"], ["  ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "name", ",", "value", "in", "six", ".", "iteritems", "(", "kwargs", ")", ":", "\n", "      ", "self", ".", "add_param", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.PlacerParams.add_param": [[38, 40], ["setattr"], "methods", ["None"], ["", "", "def", "add_param", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "    ", "setattr", "(", "self", ",", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.Task.__init__": [[95, 104], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "num_ops", ",", "graph_idx", ",", "action", ",", "device_utilizations", ",", "is_policy", ",", "placement_file", ",", "cep_program", ",", "exp_folder", ")", ":", "\n", "    ", "self", ".", "num_ops", "=", "num_ops", "\n", "self", ".", "graph_idx", "=", "graph_idx", "\n", "self", ".", "action", "=", "action", "\n", "self", ".", "device_utilizations", "=", "device_utilizations", "\n", "self", ".", "is_policy", "=", "is_policy", "\n", "self", ".", "placement_file", "=", "placement_file", "\n", "self", ".", "cep_program", "=", "cep_program", "\n", "self", ".", "exp_folder", "=", "exp_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_time": [[146, 148], ["time.strftime", "time.gmtime"], "methods", ["None"], ["def", "get_time", "(", "self", ")", ":", "\n", "    ", "return", "strftime", "(", "\"%Y-%m-%d-%H:%M:%S\"", ",", "gmtime", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.__init__": [[149, 187], ["controller_device.ResourceAllocator.construct_placeholders", "controller_device.ResourceAllocator.prepare_data", "controller_device.ResourceAllocator.init_variables", "controller_device.ResourceAllocator.build_generate_samples", "controller_device.ResourceAllocator.build_controller", "controller_device.ResourceAllocator.init", "controller_device.ResourceAllocator.train", "controller_device.ResourceAllocator.build_graph_model", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.construct_placeholders", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.prepare_data", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.init_variables", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_generate_samples", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_controller", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.init", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.train", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_graph_model", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.load"], ["", "def", "__init__", "(", "self", ",", "hparams", ",", "exp_folder", ",", "restore_file", "=", "0", ")", ":", "\n", "    ", "\"\"\"ResourceAllocator class initializer.\n\n    Args:\n      hparams: All hyper-parameters.\n      exp_folder: The folder contains the dataset.\n    \"\"\"", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "exp_folder", "=", "exp_folder", "\n", "\n", "self", ".", "construct_placeholders", "(", ")", "\n", "\n", "#graph minibatch iterator ", "\n", "self", ".", "prepare_data", "(", ")", "\n", "\n", "#build graph model", "\n", "if", "self", ".", "hparams", ".", "embedding", "==", "'graphsage'", ":", "\n", "      ", "self", ".", "build_graph_model", "(", ")", "\n", "\n", "", "self", ".", "init_variables", "(", ")", "\n", "\n", "#build sample generation ", "\n", "self", ".", "build_generate_samples", "(", ")", "\n", "\n", "self", ".", "build_controller", "(", ")", "\n", "\n", "self", ".", "init", "(", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "restore", ":", "\n", "      ", "with", "open", "(", "self", ".", "hparams", ".", "env_restore_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self", ".", "envs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "envs", "=", "{", "}", "\n", "\n", "", "self", ".", "ignored_samples", "=", "0", "\n", "self", ".", "total_samples", "=", "0", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.load_metis_samples": [[188, 205], ["json.load", "range", "controller_device.ResourceAllocator.uniform_action", "controller_device.ResourceAllocator.calculate_utilization", "str", "open", "int", "len", "controller_device.ResourceAllocator.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.load", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.uniform_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.calculate_utilization"], ["", "def", "load_metis_samples", "(", "self", ",", "g_idx", ",", "batch_size", ",", "batch_loads", ")", ":", "\n", "    ", "filename", "=", "str", "(", "g_idx", ")", "+", "\".json\"", "\n", "G_data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "'metis_placement'", ",", "filename", ")", ")", ")", "\n", "p", "=", "G_data", "[", "'placements'", "]", "\n", "placement", "=", "{", "}", "\n", "for", "one_vm", "in", "p", ":", "\n", "      ", "vm_idx", "=", "int", "(", "one_vm", "[", "'idx'", "]", ")", "\n", "ops", "=", "one_vm", "[", "'ops'", "]", "\n", "for", "op", "in", "ops", ":", "\n", "        ", "op", "=", "int", "(", "op", ")", "\n", "placement", "[", "op", "]", "=", "vm_idx", "\n", "", "", "action", "=", "[", "]", "\n", "for", "op", "in", "range", "(", "len", "(", "placement", ")", ")", ":", "\n", "      ", "action", ".", "append", "(", "placement", "[", "op", "]", ")", "\n", "", "action", "=", "self", ".", "uniform_action", "(", "batch_size", ",", "action", ")", "\n", "device_utilization", "=", "self", ".", "calculate_utilization", "(", "action", ",", "batch_loads", ")", "\n", "return", "action", ",", "device_utilization", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.init_variables": [[206, 245], ["tensorflow.glorot_uniform_initializer", "tensorflow.variable_scope", "range", "tensorflow.one_hot", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "device_indices.append", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "init_variables", "(", "self", ")", ":", "\n", "    ", "self", ".", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", "seed", "=", "self", ".", "hparams", ".", "seed", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "self", ".", "hparams", ".", "name", ",", "\n", "initializer", "=", "self", ".", "initializer", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "if", "self", ".", "hparams", ".", "decoder", "==", "'lstm'", ":", "\n", "        ", "if", "self", ".", "hparams", ".", "embedding", "==", "'graphsage'", ":", "\n", "          ", "tf", ".", "get_variable", "(", "\"device_softmax\"", ",", "[", "2", "*", "self", ".", "hparams", ".", "hidden_size", ",", "self", ".", "num_devices", "]", ")", "#with attention", "\n", "tf", ".", "get_variable", "(", "\"device_embeddings\"", ",", "[", "self", ".", "num_devices", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "tf", ".", "get_variable", "(", "\"device_go_embedding\"", ",", "[", "1", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "tf", ".", "get_variable", "(", "\"attn_w_2\"", ",", "[", "self", ".", "hparams", ".", "hidden_size", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "tf", ".", "get_variable", "(", "\"attn_v\"", ",", "[", "self", ".", "hparams", ".", "hidden_size", ",", "1", "]", ")", "\n", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", "and", "self", ".", "hparams", ".", "consider_device_utilization", ":", "\n", "            ", "w_lstm_dimension", "=", "3", "*", "self", ".", "hparams", ".", "hidden_size", "\n", "", "elif", "self", ".", "hparams", ".", "consider_device_utilization", "or", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "            ", "w_lstm_dimension", "=", "3", "*", "self", ".", "hparams", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "w_lstm_dimension", "=", "2", "*", "self", ".", "hparams", ".", "hidden_size", "\n", "", "", "elif", "self", ".", "hparams", ".", "embedding", "==", "'original'", ":", "#original embedding", "\n", "          ", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", "and", "self", ".", "hparams", ".", "consider_device_utilization", ":", "\n", "            ", "w_lstm_dimension", "=", "3", "*", "self", ".", "hparams", ".", "hidden_size", "\n", "", "elif", "self", ".", "hparams", ".", "consider_device_utilization", "or", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "            ", "w_lstm_dimension", "=", "3", "*", "self", ".", "hparams", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "w_lstm_dimension", "=", "2", "*", "self", ".", "hparams", ".", "hidden_size", "\n", "", "tf", ".", "get_variable", "(", "\"device_softmax\"", ",", "[", "self", ".", "hparams", ".", "hidden_size", ",", "self", ".", "num_devices", "]", ")", "\n", "tf", ".", "get_variable", "(", "\"node_embedding\"", ",", "[", "self", ".", "hparams", ".", "feat_size", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "", "else", ":", "\n", "          ", "raise", "NotImplementedError", "\n", "", "tf", ".", "get_variable", "(", "\"decoder_lstm\"", ",", "[", "w_lstm_dimension", ",", "4", "*", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "tf", ".", "get_variable", "(", "\"device_aggregator\"", ",", "[", "self", ".", "num_devices", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "tf", ".", "get_variable", "(", "\"decoder_forget_bias\"", ",", "shape", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "self", ".", "hparams", ".", "forget_bias_init", ")", ")", "\n", "if", "self", ".", "hparams", ".", "consider_device_utilization", ":", "\n", "          ", "tf", ".", "get_variable", "(", "\"device_utilization\"", ",", "[", "2", "*", "self", ".", "num_devices", ",", "self", ".", "num_devices", "]", ")", "\n", "", "", "device_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_devices", ")", ":", "\n", "        ", "device_indices", ".", "append", "(", "i", ")", "\n", "", "self", ".", "device_encoding", "=", "tf", ".", "one_hot", "(", "device_indices", ",", "self", ".", "num_devices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.init": [[246, 257], ["tensorflow.Session", "tensorflow.train.Saver", "controller_device.ResourceAllocator.saver.restore", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.train.Saver", "controller_device.ResourceAllocator.sess.run"], "methods", ["None"], ["", "", "def", "init", "(", "self", ")", ":", "\n", "    ", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "restore", ":", "\n", "      ", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "self", ".", "hparams", ".", "model_restore_file", ")", "\n", "", "else", ":", "\n", "      ", "init_g", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "init_l", "=", "tf", ".", "local_variables_initializer", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "[", "init_g", ",", "init_l", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_random_action": [[258, 267], ["random.randint", "range", "controller_device.ResourceAllocator.uniform_action", "controller_device.ResourceAllocator.calculate_utilization", "controller_device.ResourceAllocator.append", "math.pow"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.uniform_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.calculate_utilization"], ["", "", "def", "get_random_action", "(", "self", ",", "batch_size", ",", "feed_dict", ",", "batch_loads", ")", ":", "\n", "    ", "a", "=", "random", ".", "randint", "(", "0", ",", "math", ".", "pow", "(", "self", ".", "num_devices", ",", "batch_size", ")", "-", "1", ")", "\n", "action", "=", "[", "]", "\n", "for", "op", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "action", ".", "append", "(", "a", "%", "self", ".", "num_devices", ")", "\n", "a", "=", "a", "/", "self", ".", "num_devices", "\n", "", "action", "=", "self", ".", "uniform_action", "(", "batch_size", ",", "action", ")", "\n", "device_utilization_backward", "=", "self", ".", "calculate_utilization", "(", "action", ",", "batch_loads", ")", "\n", "return", "action", ",", "device_utilization_backward", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_sample_action": [[268, 325], ["feed_dict.update", "feed_dict.update", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "range", "feed_dict.update", "feed_dict.update", "feed_dict.update", "feed_dict.update", "feed_dict.update", "range", "controller_device.ResourceAllocator.uniform_action", "uniform_actions.append", "device_utilization_backward.append", "range", "range", "range", "feed_dict.update", "feed_dict.update", "feed_dict.update", "controller_device.ResourceAllocator.sess.run", "action[].append", "controller_device.ResourceAllocator.calculate_utilization", "source_devices.append", "source_weights.append", "range", "controller_device.ResourceAllocator.sess.run", "source_devices[].append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.uniform_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.calculate_utilization"], ["", "def", "get_sample_action", "(", "self", ",", "sample_size", ",", "batch_size", ",", "feed_dict", ",", "batch_loads", ",", "batch_sources", ",", "batch_num_sources", ",", "batch_source_weights", ",", "mode", "=", "'sample'", ")", ":", "\n", "    ", "num_children", "=", "sample_size", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'sample_size'", "]", ":", "sample_size", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'num_samples'", "]", ":", "sample_size", "}", ")", "\n", "device_utilization", "=", "np", ".", "zeros", "(", "(", "num_children", ",", "self", ".", "num_devices", ")", ",", "dtype", "=", "float", ")", "\n", "prev_c", "=", "np", ".", "zeros", "(", "(", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", ")", ",", "dtype", "=", "float", ")", "\n", "prev_h", "=", "np", ".", "zeros", "(", "(", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", ")", ",", "dtype", "=", "float", ")", "\n", "prev_y", "=", "np", ".", "zeros", "(", "(", "num_children", ")", ",", "dtype", "=", "float", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_children", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "self", ".", "num_devices", ")", ":", "\n", "        ", "device_utilization", "[", "i", ",", "j", "]", "=", "self", ".", "hparams", ".", "utilization_max", "\n", "\n", "", "", "action", "=", "[", "None", "]", "*", "sample_size", "\n", "for", "i", "in", "range", "(", "sample_size", ")", ":", "\n", "      ", "action", "[", "i", "]", "=", "[", "]", "\n", "\n", "", "for", "op", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'target_op'", "]", ":", "op", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'prev_c'", "]", ":", "prev_c", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'prev_h'", "]", ":", "prev_h", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'prev_y'", "]", ":", "prev_y", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'device_utilizations_forward'", "]", ":", "device_utilization", "}", ")", "\n", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "        ", "source_weights", "=", "[", "]", "\n", "source_devices", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "sample_size", ")", ":", "\n", "          ", "source_devices", ".", "append", "(", "[", "]", ")", "\n", "", "node_sources_num", "=", "batch_num_sources", "[", "op", "]", "\n", "for", "i", "in", "range", "(", "node_sources_num", ")", ":", "\n", "          ", "source_weights", ".", "append", "(", "batch_source_weights", "[", "op", ",", "i", "]", ")", "\n", "", "for", "j", "in", "range", "(", "sample_size", ")", ":", "\n", "          ", "for", "i", "in", "range", "(", "node_sources_num", ")", ":", "\n", "            ", "source", "=", "batch_sources", "[", "op", ",", "i", "]", "\n", "source_devices", "[", "j", "]", ".", "append", "(", "action", "[", "j", "]", "[", "source", "]", ")", "\n", "", "", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'source_weights'", "]", ":", "source_weights", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'source_devices'", "]", ":", "source_devices", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'node_sources_num'", "]", ":", "node_sources_num", "}", ")", "\n", "\n", "", "if", "mode", "==", "'sample'", ":", "\n", "        ", "prev_y", ",", "prev_c", ",", "prev_h", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "policy_action", ",", "self", ".", "policy_c", ",", "self", ".", "policy_h", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "elif", "mode", "==", "'greedy'", ":", "\n", "        ", "prev_y", ",", "prev_c", ",", "prev_h", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "greedy_action", ",", "self", ".", "greedy_c", ",", "self", ".", "greedy_h", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "i", "in", "range", "(", "sample_size", ")", ":", "\n", "        ", "action", "[", "i", "]", ".", "append", "(", "prev_y", "[", "i", "]", ")", "\n", "load", "=", "batch_loads", "[", "op", "]", "/", "1e6", "\n", "device_utilization", "[", "i", ",", "action", "[", "i", "]", "[", "op", "]", "]", "-=", "load", "\n", "\n", "", "", "uniform_actions", "=", "[", "]", "\n", "device_utilization_backward", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sample_size", ")", ":", "\n", "      ", "a", "=", "self", ".", "uniform_action", "(", "batch_size", ",", "action", "[", "i", "]", ")", "\n", "uniform_actions", ".", "append", "(", "a", ")", "\n", "device_utilization_backward", ".", "append", "(", "self", ".", "calculate_utilization", "(", "a", ",", "batch_loads", ")", ")", "\n", "", "return", "uniform_actions", ",", "device_utilization_backward", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_action": [[326, 374], ["feed_dict.update", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "controller_device.ResourceAllocator.uniform_action", "controller_device.ResourceAllocator.calculate_utilization", "range", "feed_dict.update", "feed_dict.update", "feed_dict.update", "feed_dict.update", "feed_dict.update", "controller_device.ResourceAllocator.append", "range", "range", "range", "feed_dict.update", "feed_dict.update", "feed_dict.update", "controller_device.ResourceAllocator.sess.run", "source_devices.append", "source_weights.append", "range", "controller_device.ResourceAllocator.sess.run", "source_devices[].append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.uniform_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.calculate_utilization"], ["", "def", "get_action", "(", "self", ",", "batch_size", ",", "feed_dict", ",", "batch_loads", ",", "batch_sources", ",", "batch_num_sources", ",", "batch_source_weights", ",", "mode", "=", "'sample'", ")", ":", "\n", "    ", "num_children", "=", "1", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'num_samples'", "]", ":", "1", "}", ")", "\n", "device_utilization", "=", "np", ".", "zeros", "(", "(", "num_children", ",", "self", ".", "num_devices", ")", ",", "dtype", "=", "float", ")", "\n", "prev_c", "=", "np", ".", "zeros", "(", "(", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", ")", ",", "dtype", "=", "float", ")", "\n", "prev_h", "=", "np", ".", "zeros", "(", "(", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", ")", ",", "dtype", "=", "float", ")", "\n", "prev_y", "=", "np", ".", "zeros", "(", "(", "num_children", ")", ",", "dtype", "=", "float", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_children", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "self", ".", "num_devices", ")", ":", "\n", "        ", "device_utilization", "[", "i", ",", "j", "]", "=", "self", ".", "hparams", ".", "utilization_max", "\n", "\n", "", "", "action", "=", "[", "]", "\n", "for", "op", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'target_op'", "]", ":", "op", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'prev_c'", "]", ":", "prev_c", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'prev_h'", "]", ":", "prev_h", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'prev_y'", "]", ":", "prev_y", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'device_utilizations_forward'", "]", ":", "device_utilization", "}", ")", "\n", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "        ", "source_weights", "=", "[", "]", "\n", "source_devices", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "          ", "source_devices", ".", "append", "(", "[", "]", ")", "\n", "", "node_sources_num", "=", "batch_num_sources", "[", "op", "]", "\n", "for", "i", "in", "range", "(", "node_sources_num", ")", ":", "\n", "          ", "source_weights", ".", "append", "(", "batch_source_weights", "[", "op", ",", "i", "]", ")", "\n", "", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "          ", "for", "i", "in", "range", "(", "node_sources_num", ")", ":", "\n", "            ", "source", "=", "batch_sources", "[", "op", ",", "i", "]", "\n", "source_devices", "[", "j", "]", ".", "append", "(", "action", "[", "source", "]", ")", "\n", "", "", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'source_weights'", "]", ":", "source_weights", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'source_devices'", "]", ":", "source_devices", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'node_sources_num'", "]", ":", "node_sources_num", "}", ")", "\n", "\n", "", "if", "mode", "==", "'sample'", ":", "\n", "        ", "prev_y", ",", "prev_c", ",", "prev_h", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "policy_action", ",", "self", ".", "policy_c", ",", "self", ".", "policy_h", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "elif", "mode", "==", "'greedy'", ":", "\n", "        ", "prev_y", ",", "prev_c", ",", "prev_h", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "greedy_action", ",", "self", ".", "greedy_c", ",", "self", ".", "greedy_h", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "action", ".", "append", "(", "prev_y", "[", "0", "]", ")", "\n", "load", "=", "batch_loads", "[", "op", "]", "/", "1e6", "\n", "device_utilization", "[", "0", ",", "action", "[", "op", "]", "]", "-=", "load", "\n", "\n", "", "action", "=", "self", ".", "uniform_action", "(", "batch_size", ",", "action", ")", "\n", "device_utilization_backward", "=", "self", ".", "calculate_utilization", "(", "action", ",", "batch_loads", ")", "\n", "return", "action", ",", "device_utilization_backward", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_sample": [[375, 387], ["controller_device.ResourceAllocator.envs[].if_exist", "controller_device.ResourceAllocator.evaluate_cepsim", "environment.Sample", "str", "controller_device.ResourceAllocator.evaluate_cepsim"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.if_exist", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.evaluate_cepsim", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.evaluate_cepsim"], ["", "def", "get_sample", "(", "self", ",", "batch_size", ",", "real_idx", ",", "action", ",", "device_utilization", ",", "g_idx", "=", "-", "1", ")", ":", "\n", "    ", "action_str", "=", "''", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "action", ")", "\n", "s", "=", "None", "\n", "if", "g_idx", "!=", "-", "1", ":", "\n", "      ", "throughput", "=", "self", ".", "envs", "[", "g_idx", "]", ".", "if_exist", "(", "action_str", ")", "\n", "if", "throughput", "==", "-", "1", ":", "\n", "        ", "throughput", "=", "self", ".", "evaluate_cepsim", "(", "batch_size", ",", "real_idx", ",", "action", ")", "\n", "", "", "else", ":", "\n", "      ", "throughput", "=", "self", ".", "evaluate_cepsim", "(", "batch_size", ",", "real_idx", ",", "action", ")", "\n", "", "if", "throughput", ">", "0", ":", "\n", "      ", "s", "=", "Sample", "(", "action", ",", "throughput", ",", "device_utilization", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.prepare_samples_for_back": [[388, 420], ["numpy.vstack", "numpy.concatenate", "controller_device.ResourceAllocator.compute_probs", "enumerate", "numpy.array", "len", "len", "controller_device.ResourceAllocator.envs[].calculate_baseline", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.compute_probs", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.calculate_baseline"], ["", "def", "prepare_samples_for_back", "(", "self", ",", "fd", ",", "train_samples", ",", "epoch", ",", "num_replay_samples", ")", ":", "\n", "    ", "if", "len", "(", "train_samples", ")", "==", "0", ":", "\n", "      ", "return", "None", "\n", "", "actions", "=", "np", ".", "vstack", "(", "[", "s", ".", "action", "for", "s", "in", "train_samples", "]", ")", "\n", "ranks", "=", "[", "s", ".", "rank", "for", "s", "in", "train_samples", "]", "\n", "utilizations", "=", "[", "s", ".", "device_utilization", "for", "s", "in", "train_samples", "]", "\n", "utilizations", "=", "np", ".", "concatenate", "(", "utilizations", ",", "axis", "=", "1", ")", "\n", "fd", "[", "'device_utilizations'", "]", "=", "utilizations", "\n", "if", "self", ".", "hparams", ".", "real_baseline", "==", "True", ":", "\n", "      ", "baseline", "=", "self", ".", "envs", "[", "fd", "[", "'graph_idx'", "]", "]", ".", "calculate_baseline", "(", "epoch", ",", "num_replay_samples", ")", "\n", "", "else", ":", "\n", "      ", "baseline", "=", "np", ".", "mean", "(", "ranks", ")", "\n", "\n", "", "probs", "=", "self", ".", "compute_probs", "(", "actions", ",", "actions", ".", "shape", "[", "0", "]", ",", "fd", ")", "\n", "for", "idx", ",", "r", "in", "enumerate", "(", "ranks", ")", ":", "\n", "      ", "r_origin", "=", "r", "\n", "r", "-=", "baseline", "\n", "ranks", "[", "idx", "]", "=", "r", "\n", "p", "=", "probs", "[", "idx", "]", "\n", "if", "p", "==", "0.0", "and", "r", "<", "0", ":", "#if negative sample and probability is already small, ignore it", "\n", "        ", "ranks", "[", "idx", "]", "=", "0", "\n", "self", ".", "ignored_samples", "+=", "1", "\n", "", "else", ":", "\n", "        ", "self", ".", "total_samples", "+=", "1", "\n", "", "if", "r", ">", "0", ":", "\n", "        ", "ranks", "[", "idx", "]", "=", "self", ".", "hparams", ".", "replay_weight", "*", "r", "\n", "\n", "", "", "train_ranks", "=", "np", ".", "array", "(", "ranks", ")", "\n", "fd", "[", "'num_actions'", "]", "=", "len", "(", "train_samples", ")", "\n", "fd", "[", "'actions'", "]", "=", "actions", "\n", "fd", "[", "'reward'", "]", "=", "train_ranks", "\n", "return", "fd", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.train": [[421, 520], ["range", "time.time", "controller_device.ResourceAllocator.minibatch.shuffle", "print", "time.time", "controller_device.ResourceAllocator.test_w_throughput", "controller_device.ResourceAllocator.minibatch.end", "time.time", "controller_device.ResourceAllocator.minibatch.next_batch_size", "range", "controller_device.ResourceAllocator.save", "controller_device.ResourceAllocator.minibatch.next_minibatch_feed_dict", "feed_dict.update", "feed_dict.update", "controller_device.ResourceAllocator.optimize", "environment.Environment", "range", "controller_device.ResourceAllocator.envs[].sample", "controller_device.ResourceAllocator.get_sample", "int", "controller_device.ResourceAllocator.envs[].hard_problem", "set", "range", "set", "time.time", "controller_device.ResourceAllocator.get_sample_action", "range", "time.time", "controller_device.ResourceAllocator.envs[].replay", "controller_device.ResourceAllocator.prepare_samples_for_back", "numpy.random.rand", "controller_device.ResourceAllocator.get_random_action", "controller_device.ResourceAllocator.get_action", "controller_device.ResourceAllocator.envs[].save", "numpy.exp", "controller_device.ResourceAllocator.get_random_action", "controller_device.ResourceAllocator.load_metis_samples", "controller_device.Task", "tasks.append", "multiprocessing.pool.ThreadPool", "p.map", "len", "numpy.exp", "set.add", "controller_device.ResourceAllocator.envs[].if_exist", "set.add", "controller_device.ResourceAllocator.envs[].if_exist", "min", "str", "environment.Sample", "controller_device.ResourceAllocator.envs[].save", "controller_device.Task", "tasks.append", "str", "controller_device.Task", "tasks.append", "environment.Sample", "controller_device.ResourceAllocator.envs[].save", "controller_device.ResourceAllocator.append", "max", "controller_device.ResourceAllocator.envs[].save", "controller_device.ResourceAllocator.append", "controller_device.ResourceAllocator.envs[].save", "str", "len", "len", "str", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.shuffle", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.test_w_throughput", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.end", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.next_batch_size", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.next_minibatch_feed_dict", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.optimize", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.sample", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_sample", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.hard_problem", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_sample_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.replay", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.prepare_samples_for_back", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_random_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_action", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_random_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.load_metis_samples", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.if_exist", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.if_exist", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save"], ["", "def", "train", "(", "self", ")", ":", "\n", "    ", "for", "epoch", "in", "range", "(", "self", ".", "hparams", ".", "epoches", ")", ":", "\n", "      ", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "minibatch", ".", "shuffle", "(", ")", "\n", "print", "(", "\"start epoch {} {}\"", ".", "format", "(", "epoch", ",", "epoch_start_time", ")", ")", "\n", "self", ".", "ignored_samples", "=", "0", "\n", "self", ".", "total_samples", "=", "0", "\n", "while", "not", "self", ".", "minibatch", ".", "end", "(", ")", ":", "\n", "        ", "one_start_time", "=", "time", ".", "time", "(", ")", "\n", "dict_for_back", "=", "{", "}", "\n", "graph_batch_size", "=", "self", ".", "minibatch", ".", "next_batch_size", "(", ")", "\n", "for", "local_idx", "in", "range", "(", "graph_batch_size", ")", ":", "\n", "          ", "feed_dict", ",", "batch", ",", "batch_loads", ",", "batch_size", ",", "batch_sources", ",", "batch_source_weights", ",", "num_batch_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", "=", "self", ".", "minibatch", ".", "next_minibatch_feed_dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'dropout'", "]", ":", "self", ".", "hparams", ".", "dropout", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'sample_size'", "]", ":", "1", "}", ")", "\n", "fd", "=", "{", "'batch_size'", ":", "batch_size", ",", "'batch'", ":", "batch", ",", "'batch_sources'", ":", "batch_sources", ",", "'batch_num_sources'", ":", "num_batch_sources", ",", "'graph_idx'", ":", "graph_idx", ",", "'batch_source_weights'", ":", "batch_source_weights", "}", "\n", "\n", "if", "graph_idx", "not", "in", "self", ".", "envs", ":", "\n", "            ", "self", ".", "envs", "[", "graph_idx", "]", "=", "Environment", "(", "graph_idx", ",", "batch_size", ",", "max_throughput", ",", "queue_leangth", "=", "30", ")", "\n", "\n", "", "if", "self", ".", "hparams", ".", "strategy", "==", "'policy'", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "hparams", ".", "n_policy_samples", ")", ":", "\n", "              ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "hparams", ".", "random_prob", "/", "np", ".", "exp", "(", "epoch", ")", ":", "\n", "                ", "action", ",", "device_utilization", "=", "self", ".", "get_random_action", "(", "batch_size", ",", "feed_dict", ",", "batch_loads", ")", "\n", "", "else", ":", "\n", "                ", "action", ",", "device_utilization", "=", "self", ".", "get_action", "(", "batch_size", ",", "feed_dict", ",", "batch_loads", ",", "batch_sources", ",", "num_batch_sources", ",", "batch_source_weights", ",", "mode", "=", "'sample'", ")", "\n", "\n", "", "s", "=", "self", ".", "get_sample", "(", "batch_size", ",", "real_idx", ",", "action", ",", "device_utilization", ",", "g_idx", "=", "graph_idx", ")", "\n", "if", "s", "!=", "None", ":", "\n", "                ", "self", ".", "envs", "[", "graph_idx", "]", ".", "save", "(", "s", ",", "on_policy", "=", "True", ",", "build_replay", "=", "False", ")", "\n", "\n", "", "", "policy_samples", "=", "self", ".", "envs", "[", "graph_idx", "]", ".", "sample", "(", "self", ".", "hparams", ".", "n_policy_samples", ")", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "strategy", "==", "'memory'", ":", "\n", "            ", "random_prob", "=", "self", ".", "hparams", ".", "random_prob", "/", "np", ".", "exp", "(", "epoch", ")", "\n", "num_random_samples", "=", "(", "int", ")", "(", "self", ".", "hparams", ".", "n_explore_samples", "*", "random_prob", ")", "\n", "if", "self", ".", "envs", "[", "graph_idx", "]", ".", "hard_problem", "(", ")", ":", "\n", "              ", "num_random_samples", "=", "self", ".", "hparams", ".", "n_explore_samples", "\n", "", "tasks", "=", "[", "]", "\n", "random_set", "=", "set", "(", ")", "\n", "for", "_", "in", "range", "(", "num_random_samples", ")", ":", "\n", "              ", "action", ",", "device_utilization", "=", "self", ".", "get_random_action", "(", "batch_size", ",", "feed_dict", ",", "batch_loads", ")", "\n", "action_str", "=", "''", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "action", ")", "\n", "if", "action_str", "not", "in", "random_set", ":", "\n", "                ", "random_set", ".", "add", "(", "action_str", ")", "\n", "throughput", "=", "self", ".", "envs", "[", "graph_idx", "]", ".", "if_exist", "(", "action_str", ")", "\n", "if", "throughput", "!=", "-", "1", ":", "\n", "                  ", "s", "=", "Sample", "(", "action", ",", "throughput", ",", "device_utilization", ")", "\n", "self", ".", "envs", "[", "graph_idx", "]", ".", "save", "(", "s", ")", "\n", "", "else", ":", "\n", "                  ", "t", "=", "Task", "(", "batch_size", ",", "real_idx", ",", "action", ",", "device_utilization", ",", "False", ",", "self", ".", "hparams", ".", "placement_file", "+", "'_'", "+", "str", "(", "len", "(", "tasks", ")", ")", "+", "'.json'", ",", "self", ".", "hparams", ".", "cep_program", ",", "self", ".", "exp_folder", ")", "\n", "tasks", ".", "append", "(", "t", ")", "\n", "#load metis placement", "\n", "", "", "", "if", "epoch", "==", "0", "and", "self", ".", "hparams", ".", "metis_placement", "!=", "None", ":", "\n", "              ", "action", ",", "device_utilization", "=", "self", ".", "load_metis_samples", "(", "real_idx", ",", "batch_size", ",", "batch_loads", ")", "\n", "t", "=", "Task", "(", "batch_size", ",", "real_idx", ",", "action", ",", "device_utilization", ",", "False", ",", "self", ".", "hparams", ".", "placement_file", "+", "'_'", "+", "str", "(", "len", "(", "tasks", ")", ")", "+", "'.json'", ",", "self", ".", "hparams", ".", "cep_program", ",", "self", ".", "exp_folder", ")", "\n", "tasks", ".", "append", "(", "t", ")", "\n", "", "policy_samples", "=", "[", "]", "\n", "policy_set", "=", "set", "(", ")", "\n", "start_policy_time", "=", "time", ".", "time", "(", ")", ";", "\n", "actions", ",", "device_utilizations", "=", "self", ".", "get_sample_action", "(", "self", ".", "hparams", ".", "n_policy_samples", ",", "batch_size", ",", "feed_dict", ",", "batch_loads", ",", "batch_sources", ",", "num_batch_sources", ",", "batch_source_weights", ",", "mode", "=", "'sample'", ")", "\n", "for", "p", "in", "range", "(", "self", ".", "hparams", ".", "n_policy_samples", ")", ":", "\n", "              ", "action_str", "=", "''", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "actions", "[", "p", "]", ")", "\n", "if", "action_str", "not", "in", "policy_set", ":", "\n", "                ", "policy_set", ".", "add", "(", "action_str", ")", "\n", "throughput", "=", "self", ".", "envs", "[", "graph_idx", "]", ".", "if_exist", "(", "action_str", ")", "\n", "if", "throughput", "==", "-", "1", ":", "\n", "                  ", "t", "=", "Task", "(", "batch_size", ",", "real_idx", ",", "actions", "[", "p", "]", ",", "device_utilizations", "[", "p", "]", ",", "True", ",", "self", ".", "hparams", ".", "placement_file", "+", "'_'", "+", "str", "(", "len", "(", "tasks", ")", ")", "+", "'.json'", ",", "self", ".", "hparams", ".", "cep_program", ",", "self", ".", "exp_folder", ")", "\n", "tasks", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "                  ", "s", "=", "Sample", "(", "actions", "[", "p", "]", ",", "throughput", ",", "device_utilizations", "[", "p", "]", ")", "\n", "self", ".", "envs", "[", "graph_idx", "]", ".", "save", "(", "s", ",", "on_policy", "=", "True", ")", "\n", "policy_samples", ".", "append", "(", "s", ")", "\n", "\n", "\n", "", "", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "ThreadPool", "(", "min", "(", "10", ",", "max", "(", "self", ".", "hparams", ".", "pool_size", ",", "len", "(", "tasks", ")", ")", ")", ")", "as", "p", ":", "\n", "              ", "pending_samples", "=", "p", ".", "map", "(", "evaluate", ",", "tasks", ")", "\n", "for", "s", "in", "pending_samples", ":", "\n", "                ", "if", "s", ".", "is_policy", ":", "\n", "                  ", "self", ".", "envs", "[", "graph_idx", "]", ".", "save", "(", "s", ",", "on_policy", "=", "True", ")", "\n", "policy_samples", ".", "append", "(", "s", ")", "\n", "", "else", ":", "\n", "                  ", "self", ".", "envs", "[", "graph_idx", "]", ".", "save", "(", "s", ")", "\n", "\n", "", "", "", "replay_samples", "=", "self", ".", "envs", "[", "graph_idx", "]", ".", "replay", "(", "self", ".", "hparams", ".", "n_replay_samples", ",", "greedy", "=", "self", ".", "hparams", ".", "replay_greedy_sampling", ")", "\n", "train_samples", "=", "replay_samples", "+", "policy_samples", "\n", "\n", "dict_for_back", "=", "self", ".", "prepare_samples_for_back", "(", "fd", ",", "train_samples", ",", "epoch", ",", "len", "(", "replay_samples", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "if", "dict_for_back", "!=", "None", ":", "\n", "          ", "self", ".", "optimize", "(", "dict_for_back", ")", "\n", "\n", "", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "test_w_throughput", "(", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "checkpoint", "and", "epoch", "%", "10", "==", "0", ":", "\n", "        ", "self", ".", "save", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.test_w_throughput": [[521, 559], ["controller_device.ResourceAllocator.minibatch.eval_end", "controller_device.ResourceAllocator.minibatch.next_eval_minibatch_feed_dict", "feed_dict.update", "feed_dict.update", "controller_device.ResourceAllocator.get_action", "controller_device.ResourceAllocator.envs[].if_exist", "len", "environment.Environment", "print", "print", "controller_device.Task", "tasks.append", "len", "multiprocessing.Pool", "p.map", "zip", "str", "multiprocessing.Pool", "p.map", "zip", "min", "controller_device.ResourceAllocator.envs[].save_test", "print", "print", "controller_device.ResourceAllocator.envs[].save_test", "print", "print", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.eval_end", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.next_eval_minibatch_feed_dict", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_action", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.if_exist", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.save_test", "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.save_test"], ["", "", "", "def", "test_w_throughput", "(", "self", ")", ":", "\n", "    ", "tasks", "=", "[", "]", "\n", "while", "not", "self", ".", "minibatch", ".", "eval_end", "(", ")", ":", "\n", "      ", "feed_dict", ",", "batch", ",", "batch_loads", ",", "batch_size", ",", "batch_sources", ",", "batch_source_weights", ",", "num_batch_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", "=", "self", ".", "minibatch", ".", "next_eval_minibatch_feed_dict", "(", ")", "\n", "if", "graph_idx", "not", "in", "self", ".", "envs", ":", "\n", "        ", "self", ".", "envs", "[", "graph_idx", "]", "=", "Environment", "(", "graph_idx", ",", "batch_size", ",", "max_throughput", ")", "\n", "\n", "", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'dropout'", "]", ":", "self", ".", "hparams", ".", "dropout", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'sample_size'", "]", ":", "1", "}", ")", "\n", "action", ",", "_", "=", "self", ".", "get_action", "(", "batch_size", ",", "feed_dict", ",", "batch_loads", ",", "batch_sources", ",", "num_batch_sources", ",", "batch_source_weights", ",", "mode", "=", "'greedy'", ")", "\n", "action_str", "=", "''", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "action", ")", "\n", "throughput", "=", "self", ".", "envs", "[", "graph_idx", "]", ".", "if_exist", "(", "action_str", ")", "\n", "if", "throughput", "!=", "-", "1", ":", "\n", "        ", "print", "(", "\"evaluating graph {}, greedy placement\"", ".", "format", "(", "graph_idx", ")", ")", "\n", "print", "(", "\"action {} rank {}\"", ".", "format", "(", "action_str", ",", "throughput", "/", "max_throughput", ")", ")", "\n", "", "else", ":", "\n", "        ", "t", "=", "Task", "(", "batch_size", ",", "real_idx", ",", "action", ",", "None", ",", "False", ",", "self", ".", "hparams", ".", "placement_file", "+", "'_'", "+", "str", "(", "len", "(", "tasks", ")", ")", "+", "'.json'", ",", "self", ".", "hparams", ".", "cep_program", ",", "self", ".", "exp_folder", ")", "\n", "tasks", ".", "append", "(", "t", ")", "\n", "\n", "", "if", "len", "(", "tasks", ")", "==", "10", ":", "\n", "        ", "with", "Pool", "(", "10", ")", "as", "p", ":", "\n", "          ", "samples", "=", "p", ".", "map", "(", "evaluate", ",", "tasks", ")", "\n", "for", "s", ",", "t", "in", "zip", "(", "samples", ",", "tasks", ")", ":", "\n", "            ", "r", "=", "s", ".", "throughput", "/", "self", ".", "envs", "[", "t", ".", "graph_idx", "]", ".", "max_throughput", "\n", "self", ".", "envs", "[", "t", ".", "graph_idx", "]", ".", "save_test", "(", "s", ".", "throughput", ",", "s", ".", "action_str", ")", "\n", "print", "(", "\"evaluating graph {}, greedy placement\"", ".", "format", "(", "t", ".", "graph_idx", ")", ")", "\n", "print", "(", "\"action {} rank {}\"", ".", "format", "(", "s", ".", "action_str", ",", "r", ")", ")", "\n", "", "tasks", "=", "[", "]", "\n", "\n", "", "", "", "if", "len", "(", "tasks", ")", ">", "0", ":", "\n", "      ", "with", "Pool", "(", "min", "(", "10", ",", "len", "(", "tasks", ")", ")", ")", "as", "p", ":", "\n", "        ", "samples", "=", "p", ".", "map", "(", "evaluate", ",", "tasks", ")", "\n", "for", "s", ",", "t", "in", "zip", "(", "samples", ",", "tasks", ")", ":", "\n", "          ", "r", "=", "s", ".", "throughput", "/", "self", ".", "envs", "[", "t", ".", "graph_idx", "]", ".", "max_throughput", "\n", "self", ".", "envs", "[", "t", ".", "graph_idx", "]", ".", "save_test", "(", "s", ".", "throughput", ",", "s", ".", "action_str", ")", "\n", "print", "(", "\"evaluating graph {}, greedy placement\"", ".", "format", "(", "t", ".", "graph_idx", ")", ")", "\n", "print", "(", "\"action {} rank {}\"", ".", "format", "(", "s", ".", "action_str", ",", "r", ")", ")", "\n", "", "tasks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.exec_no_fail": [[560, 564], ["subprocess.Popen", "subprocess.Popen.communicate"], "methods", ["None"], ["", "", "", "def", "exec_no_fail", "(", "self", ",", "seq", ")", ":", "\n", "    ", "p", "=", "Popen", "(", "seq", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "stdout", ",", "stderr", "=", "p", ".", "communicate", "(", ")", "\n", "return", "stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.uniform_action": [[565, 581], ["range", "op_to_vm.items", "int", "new_actions.append", "int"], "methods", ["None"], ["", "def", "uniform_action", "(", "self", ",", "num_ops", ",", "action", ")", ":", "\n", "    ", "mapped_action", "=", "{", "}", "\n", "op_to_vm", "=", "{", "}", "\n", "vm_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "num_ops", ")", ":", "\n", "      ", "vm", "=", "int", "(", "action", "[", "i", "]", ")", "\n", "if", "vm", "not", "in", "mapped_action", ":", "\n", "        ", "mapped_action", "[", "vm", "]", "=", "vm_idx", "\n", "vm_idx", "+=", "1", "\n", "", "op_to_vm", "[", "int", "(", "i", ")", "]", "=", "mapped_action", "[", "vm", "]", "\n", "\n", "", "new_actions", "=", "[", "]", "\n", "for", "op", ",", "vm", "in", "op_to_vm", ".", "items", "(", ")", ":", "\n", "      ", "new_actions", ".", "append", "(", "vm", ")", "\n", "\n", "", "return", "new_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.calculate_utilization": [[582, 597], ["numpy.zeros", "range", "numpy.array.append", "enumerate", "numpy.array", "range", "numpy.copy", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["", "def", "calculate_utilization", "(", "self", ",", "action", ",", "batch_loads", ")", ":", "\n", "    ", "device_utilization", "=", "[", "]", "\n", "current_utilization", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "num_devices", ")", ",", "dtype", "=", "float", ")", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "self", ".", "num_devices", ")", ":", "\n", "        ", "current_utilization", "[", "i", ",", "j", "]", "=", "self", ".", "hparams", ".", "utilization_max", "\n", "\n", "", "", "device_utilization", ".", "append", "(", "current_utilization", ")", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "batch_loads", "[", ":", "-", "1", "]", ")", ":", "\n", "      ", "utilization", "=", "np", ".", "copy", "(", "current_utilization", ")", "\n", "utilization", "[", "0", ",", "action", "[", "idx", "]", "]", "-=", "batch_loads", "[", "idx", "]", "/", "1e6", "\n", "device_utilization", ".", "append", "(", "utilization", ")", "\n", "current_utilization", "=", "utilization", "\n", "", "device_utilization", "=", "np", ".", "array", "(", "device_utilization", ")", "\n", "return", "device_utilization", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.evaluate_cepsim": [[598, 625], ["range", "vm_placements.items", "len", "controller_device.ResourceAllocator.exec_no_fail", "controller_device.ResourceAllocator.split", "int", "vm_placements[].append", "placements.append", "open", "json.dump", "outfile.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "outfile.close", "int", "outfile.fileno", "float", "str", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.exec_no_fail"], ["", "def", "evaluate_cepsim", "(", "self", ",", "num_ops", ",", "graph_idx", ",", "action", ")", ":", "\n", "    ", "configs", "=", "{", "}", "\n", "placements", "=", "[", "]", "\n", "\n", "vm_placements", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_ops", ")", ":", "\n", "      ", "vm", "=", "int", "(", "action", "[", "i", "]", ")", "\n", "if", "vm", "not", "in", "vm_placements", ":", "\n", "        ", "vm_placements", "[", "vm", "]", "=", "[", "]", "\n", "", "vm_placements", "[", "vm", "]", ".", "append", "(", "int", "(", "i", ")", ")", "\n", "", "for", "vm", ",", "ops", "in", "vm_placements", ".", "items", "(", ")", ":", "\n", "      ", "placements", ".", "append", "(", "{", "'idx'", ":", "vm", ",", "'ops'", ":", "ops", "}", ")", "\n", "", "configs", "[", "'placements'", "]", "=", "placements", "\n", "\n", "used_vms", "=", "len", "(", "vm_placements", ")", "\n", "with", "open", "(", "self", ".", "hparams", ".", "placement_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "      ", "json", ".", "dump", "(", "configs", ",", "outfile", ")", "\n", "outfile", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "outfile", ".", "fileno", "(", ")", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "\n", "", "logs", "=", "self", ".", "exec_no_fail", "(", "[", "'timeout'", ",", "'-k'", ",", "'30s'", ",", "'-s'", ",", "'9'", ",", "'30s'", ",", "'java'", ",", "'ca.uwo.eng.sel.cepsim.example.'", "+", "self", ".", "hparams", ".", "cep_program", ",", "self", ".", "hparams", ".", "placement_file", ",", "self", ".", "exp_folder", "+", "'/graph_'", "+", "str", "(", "graph_idx", ")", "+", "'.json'", "]", ")", "\n", "throughput", "=", "0", "\n", "for", "line", "in", "logs", ".", "split", "(", "b'\\n'", ")", ":", "\n", "      ", "if", "b\"Throughputs:\"", "in", "line", ":", "\n", "        ", "throughput", "+=", "float", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "b':'", ")", "[", "1", "]", ")", "\n", "", "", "return", "throughput", "/", "used_vms", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.save": [[626, 632], ["controller_device.ResourceAllocator.saver.save", "print", "open", "pickle.dump", "str", "str"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "    ", "save_path", "=", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "hparams", ".", "checkpoint_folder", "+", "'/mode.'", "+", "str", "(", "epoch", ")", "+", "\".ckpt\"", ")", "\n", "print", "(", "\"Model saved in path: %s\"", "%", "save_path", ")", "\n", "#store the environment as well", "\n", "with", "open", "(", "self", ".", "hparams", ".", "checkpoint_folder", "+", "'/'", "+", "str", "(", "epoch", ")", "+", "'.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "self", ".", "envs", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.construct_placeholders": [[633, 660], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "", "def", "construct_placeholders", "(", "self", ")", ":", "\n", "    ", "placeholders", "=", "{", "\n", "'sample_size'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'sample_size'", ")", ",", "\n", "'num_samples'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'num_samples'", ")", ",", "\n", "'dropout'", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ",", "name", "=", "'dropout'", ")", ",", "\n", "'random_devices_logits'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'random_devices_logits'", ")", ",", "\n", "'reward'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'reward'", ")", ",", "\n", "'actions'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "\n", "name", "=", "'sample_actions'", ")", ",", "\n", "'num_actions'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'num_actions'", ")", ",", "\n", "'batch'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'batch1'", ")", ",", "\n", "'batch_size'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'batch_size'", ")", ",", "\n", "'graph_idx'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'graph_idx'", ")", ",", "\n", "'batch_sources'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'batch_sources'", ")", ",", "\n", "'batch_num_sources'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'batch_num_sources'", ")", ",", "\n", "'batch_source_weights'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'batch_source_weights'", ")", ",", "\n", "'device_utilizations'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ",", "None", ")", ",", "name", "=", "'device_utilization'", ")", ",", "\n", "'device_utilizations_forward'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'device_utilization_forward'", ")", ",", "\n", "'target_op'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'target_op'", ")", ",", "\n", "'prev_y'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'prev_y'", ")", ",", "\n", "'prev_c'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'prev_c'", ")", ",", "\n", "'prev_h'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'prev_h'", ")", ",", "\n", "'source_weights'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'source_weights'", ")", ",", "\n", "'source_devices'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "None", ")", ",", "name", "=", "'source_devices'", ")", ",", "\n", "'node_sources_num'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'node_sources_num'", ")", ",", "\n", "}", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.prepare_data": [[661, 672], ["graphsage.utils.load_ordered_folder_data", "graphsage.minibatch_eval.GraphMinibatchIterator", "enumerate", "numpy.array", "numpy.vstack", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.load_ordered_folder_data", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "    ", "G", ",", "features", ",", "num_devices", "=", "load_ordered_folder_data", "(", "self", ".", "exp_folder", ")", "\n", "self", ".", "num_devices", "=", "self", ".", "hparams", ".", "num_devices", "\n", "#create Batch iterator with G and feats", "\n", "self", ".", "minibatch", "=", "GraphMinibatchIterator", "(", "G", ",", "self", ".", "placeholders", ",", "seed", "=", "self", ".", "hparams", ".", "seed", ",", "train_ratio", "=", "self", ".", "hparams", ".", "train_ratio", ",", "batch_size", "=", "\n", "self", ".", "hparams", ".", "env_batch_size", ",", "max_degree", "=", "self", ".", "hparams", ".", "max_degree", ")", "\n", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "features", ")", ":", "\n", "      ", "features", "[", "idx", "]", "=", "np", ".", "vstack", "(", "[", "f", ",", "np", ".", "zeros", "(", "(", "f", ".", "shape", "[", "1", "]", ",", ")", ")", "]", ")", "\n", "\n", "", "self", ".", "features", "=", "np", ".", "array", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_graph_model": [[673, 736], ["graphsage.neigh_samplers.UniformNeighborSampler", "controller_device.ResourceAllocator.model.get_node_preds", "controller_device.ResourceAllocator.model.get_graph_preds", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "layer_infos.append", "graphsage.supervised_models.SupervisedGraphsage", "graphsage.models.SAGEInfo", "layer_infos.append", "graphsage.supervised_models.SupervisedGraphsage", "graphsage.models.SAGEInfo", "layer_infos.append", "graphsage.supervised_models.SupervisedGraphsage", "graphsage.models.SAGEInfo", "graphsage.supervised_models.SupervisedGraphsage", "graphsage.supervised_models.SupervisedGraphsage", "Exception"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.get_node_preds", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.get_graph_preds"], ["", "def", "build_graph_model", "(", "self", ")", ":", "\n", "    ", "sampler", "=", "UniformNeighborSampler", "(", "self", ".", "minibatch", ".", "adj_ins", ",", "self", ".", "minibatch", ".", "adj_outs", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "self", ".", "hparams", ".", "samples_1", ",", "self", ".", "hparams", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "self", ".", "hparams", ".", "samples_2", ",", "self", ".", "hparams", ".", "dim_2", ")", "]", "\n", "if", "self", ".", "hparams", ".", "samples_3", "!=", "0", ":", "\n", "      ", "layer_infos", ".", "append", "(", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "self", ".", "hparams", ".", "samples_3", ",", "self", ".", "hparams", ".", "dim_2", ")", ")", "\n", "if", "self", ".", "hparams", ".", "samples_4", "!=", "0", ":", "\n", "        ", "layer_infos", ".", "append", "(", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "self", ".", "hparams", ".", "samples_4", ",", "self", ".", "hparams", ".", "dim_2", ")", ")", "\n", "if", "self", ".", "hparams", ".", "samples_5", "!=", "0", ":", "\n", "          ", "layer_infos", ".", "append", "(", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "self", ".", "hparams", ".", "samples_5", ",", "self", ".", "hparams", ".", "dim_2", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "hparams", ".", "graphsage_model", "==", "'graphsage_mean'", ":", "\n", "      ", "self", ".", "model", "=", "SupervisedGraphsage", "(", "self", ".", "placeholders", ",", "\n", "self", ".", "features", ",", "\n", "layer_infos", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "env_batch_size", ",", "\n", "model_size", "=", "self", ".", "hparams", ".", "model_size", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "graphsage_model", "==", "'gcn'", ":", "\n", "# Create model", "\n", "      ", "self", ".", "model", "=", "SupervisedGraphsage", "(", "self", ".", "placeholders", ",", "\n", "self", ".", "features", ",", "\n", "layer_infos", ",", "\n", "aggregator_type", "=", "\"gcn\"", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "env_batch_size", ",", "\n", "model_size", "=", "self", ".", "hparams", ".", "model_size", ",", "\n", "concat", "=", "False", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "graphsage_model", "==", "'graphsage_seq'", ":", "\n", "      ", "self", ".", "model", "=", "SupervisedGraphsage", "(", "self", ".", "placeholders", ",", "\n", "self", ".", "features", ",", "\n", "layer_infos", ",", "\n", "aggregator_type", "=", "\"seq\"", ",", "\n", "model_size", "=", "self", ".", "hparams", ".", "model_size", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "env_batch_size", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "graphsage_model", "==", "'graphsage_maxpool'", ":", "\n", "      ", "self", ".", "model", "=", "SupervisedGraphsage", "(", "self", ".", "placeholders", ",", "\n", "self", ".", "features", ",", "\n", "layer_infos", ",", "\n", "aggregator_type", "=", "\"maxpool\"", ",", "\n", "model_size", "=", "self", ".", "hparams", ".", "model_size", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "env_batch_size", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "graphsage_model", "==", "'graphsage_meanpool'", ":", "\n", "      ", "self", ".", "model", "=", "SupervisedGraphsage", "(", "self", ".", "placeholders", ",", "\n", "self", ".", "features", ",", "\n", "layer_infos", ",", "\n", "aggregator_type", "=", "\"meanpool\"", ",", "\n", "model_size", "=", "self", ".", "hparams", ".", "model_size", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "env_batch_size", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "      ", "raise", "Exception", "(", "'Error: model name unrecognized.'", ")", "\n", "\n", "\n", "", "self", ".", "node_embeddings", "=", "self", ".", "model", ".", "get_node_preds", "(", ")", "\n", "self", ".", "graph_embeddings", "=", "self", ".", "model", ".", "get_graph_preds", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_controller": [[737, 765], ["tensorflow.train.get_or_create_global_step", "controller_device.ResourceAllocator.get_probs", "tensorflow.reduce_mean", "tensorflow.variable_scope", "controller_device.ResourceAllocator._get_train_ops", "tensorflow.get_collection"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_probs", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator._get_train_ops"], ["", "def", "build_controller", "(", "self", ")", ":", "\n", "    ", "self", ".", "_global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "\n", "ctr", "=", "{", "}", "\n", "ctr", "[", "\"loss\"", "]", "=", "0", "\n", "\n", "actions", "=", "self", ".", "placeholders", "[", "'actions'", "]", "\n", "num_actions", "=", "self", ".", "placeholders", "[", "'num_actions'", "]", "\n", "reward", "=", "self", ".", "placeholders", "[", "'reward'", "]", "\n", "ctr", "[", "\"probs\"", "]", "=", "self", ".", "get_probs", "(", "actions", ",", "num_actions", ")", "\n", "\n", "ctr", "[", "\"loss\"", "]", "=", "tf", ".", "reduce_mean", "(", "reward", "*", "ctr", "[", "\"probs\"", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "\"optimizer\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "(", "ctr", "[", "\"train_op\"", "]", ",", "ctr", "[", "\"lr\"", "]", ",", "ctr", "[", "\"grad_norm\"", "]", ",", "\n", "ctr", "[", "\"grad_norms\"", "]", ")", "=", "self", ".", "_get_train_ops", "(", "\n", "ctr", "[", "\"loss\"", "]", ",", "\n", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", ",", "\n", "self", ".", "global_step", ",", "\n", "grad_bound", "=", "self", ".", "hparams", ".", "grad_bound", ",", "\n", "lr_init", "=", "self", ".", "hparams", ".", "lr", ",", "\n", "lr_dec", "=", "self", ".", "hparams", ".", "lr_dec", ",", "\n", "start_decay_step", "=", "self", ".", "hparams", ".", "start_decay_step", ",", "\n", "decay_steps", "=", "self", ".", "hparams", ".", "decay_steps", ",", "\n", "optimizer_type", "=", "self", ".", "hparams", ".", "optimizer_type", ")", "\n", "\n", "", "self", ".", "ctr", "=", "ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.global_step": [[766, 769], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_step", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_generate_samples": [[770, 786], ["controller_device.ResourceAllocator.build_graphsage_lstm_decoder", "controller_device.ResourceAllocator.build_original_lstm_decoder"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_graphsage_lstm_decoder", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_original_lstm_decoder"], ["", "def", "build_generate_samples", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "hparams", ".", "decoder", "==", "'lstm'", ":", "\n", "      ", "if", "self", ".", "hparams", ".", "embedding", "==", "'graphsage'", ":", "\n", "        ", "[", "random_action", "]", ",", "[", "policy_action", ",", "policy_c", ",", "policy_h", "]", ",", "[", "greedy_action", ",", "greedy_c", ",", "greedy_h", "]", "=", "self", ".", "build_graphsage_lstm_decoder", "(", ")", "\n", "", "else", ":", "\n", "        ", "[", "random_action", "]", ",", "[", "policy_action", ",", "policy_c", ",", "policy_h", "]", ",", "[", "greedy_action", ",", "greedy_c", ",", "greedy_h", "]", "=", "self", ".", "build_original_lstm_decoder", "(", ")", "\n", "\n", "", "self", ".", "policy_action", "=", "policy_action", "\n", "self", ".", "greedy_action", "=", "greedy_action", "\n", "self", ".", "random_action", "=", "random_action", "\n", "self", ".", "greedy_c", "=", "greedy_c", "\n", "self", ".", "greedy_h", "=", "greedy_h", "\n", "self", ".", "policy_c", "=", "policy_c", "\n", "self", ".", "policy_h", "=", "policy_h", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_graphsage_lstm_decoder": [[787, 811], ["controller_device.ResourceAllocator.encode_forward_random", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "controller_device.ResourceAllocator.decode_forward", "controller_device.ResourceAllocator.decode_forward"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode_forward_random", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.decode_forward", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.decode_forward"], ["", "", "def", "build_graphsage_lstm_decoder", "(", "self", ")", ":", "\n", "    ", "ph", "=", "self", ".", "placeholders", "\n", "sample_size", "=", "ph", "[", "\"sample_size\"", "]", "\n", "random_devices_logits", "=", "ph", "[", "\"random_devices_logits\"", "]", "\n", "random_action", "=", "self", ".", "encode_forward_random", "(", "random_devices_logits", ")", "\n", "\n", "attn_mem", "=", "self", ".", "node_embeddings", "\n", "last_h", "=", "self", ".", "graph_embeddings", "\n", "attn_mem", "=", "tf", ".", "expand_dims", "(", "attn_mem", ",", "0", ")", "\n", "attn_mem", "=", "tf", ".", "tile", "(", "attn_mem", ",", "[", "sample_size", ",", "1", ",", "1", "]", ")", "\n", "last_h", "=", "tf", ".", "expand_dims", "(", "last_h", ",", "0", ")", "\n", "last_h", "=", "tf", ".", "tile", "(", "last_h", ",", "[", "sample_size", ",", "1", ",", "1", "]", ")", "\n", "last_h", "=", "tf", ".", "reshape", "(", "last_h", ",", "[", "sample_size", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "\n", "device_utilization", "=", "self", ".", "placeholders", "[", "'device_utilizations_forward'", "]", "\n", "target_op", "=", "self", ".", "placeholders", "[", "'target_op'", "]", "\n", "prev_c", "=", "self", ".", "placeholders", "[", "'prev_c'", "]", "\n", "prev_h", "=", "self", ".", "placeholders", "[", "'prev_h'", "]", "\n", "prev_y", "=", "self", ".", "placeholders", "[", "'prev_y'", "]", "\n", "\n", "num_ops", "=", "self", ".", "placeholders", "[", "'batch_size'", "]", "\n", "policy_action", ",", "policy_c", ",", "policy_h", "=", "(", "self", ".", "decode_forward", "(", "num_ops", ",", "target_op", ",", "sample_size", ",", "prev_c", ",", "prev_h", ",", "last_h", ",", "attn_mem", ",", "device_utilization", ",", "prev_y", ",", "mode", "=", "\"sample\"", ")", ")", "\n", "greedy_action", ",", "greedy_c", ",", "greedy_h", "=", "(", "self", ".", "decode_forward", "(", "num_ops", ",", "target_op", ",", "sample_size", ",", "prev_c", ",", "prev_h", ",", "last_h", ",", "attn_mem", ",", "device_utilization", ",", "prev_y", ",", "mode", "=", "\"greedy\"", ")", ")", "\n", "return", "[", "random_action", "]", ",", "[", "policy_action", ",", "policy_c", ",", "policy_h", "]", ",", "[", "greedy_action", ",", "greedy_c", ",", "greedy_h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.build_original_lstm_decoder": [[812, 833], ["controller_device.ResourceAllocator.encode_forward_random", "tensorflow.Variable", "tensorflow.slice", "tensorflow.reshape", "controller_device.ResourceAllocator.encode_forward", "controller_device.ResourceAllocator.encode_forward", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode_forward_random", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode_forward", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode_forward"], ["", "def", "build_original_lstm_decoder", "(", "self", ")", ":", "\n", "    ", "ph", "=", "self", ".", "placeholders", "\n", "sample_size", "=", "ph", "[", "\"sample_size\"", "]", "\n", "random_devices_logits", "=", "ph", "[", "\"random_devices_logits\"", "]", "\n", "g_id", "=", "ph", "[", "\"graph_idx\"", "]", "\n", "random_action", "=", "self", ".", "encode_forward_random", "(", "random_devices_logits", ")", "\n", "\n", "self", ".", "features", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "self", ".", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "trainable", "=", "False", ")", "\n", "graph_idx", "=", "self", ".", "placeholders", "[", "\"graph_idx\"", "]", "\n", "input_features", "=", "tf", ".", "slice", "(", "self", ".", "features", ",", "[", "g_id", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "input_features", "=", "tf", ".", "reshape", "(", "input_features", ",", "[", "self", ".", "features", ".", "shape", "[", "1", "]", ",", "self", ".", "features", ".", "shape", "[", "2", "]", "]", ")", "\n", "\n", "device_utilization", "=", "self", ".", "placeholders", "[", "'device_utilizations_forward'", "]", "\n", "target_op", "=", "self", ".", "placeholders", "[", "'target_op'", "]", "\n", "prev_c", "=", "self", ".", "placeholders", "[", "'prev_c'", "]", "\n", "prev_h", "=", "self", ".", "placeholders", "[", "'prev_h'", "]", "\n", "\n", "policy_action", ",", "policy_c", ",", "policy_h", "=", "(", "self", ".", "encode_forward", "(", "target_op", ",", "input_features", ",", "sample_size", ",", "prev_c", ",", "prev_h", ",", "device_utilization", ",", "mode", "=", "'sample'", ")", ")", "\n", "greedy_action", ",", "greedy_c", ",", "greedy_h", "=", "(", "self", ".", "encode_forward", "(", "target_op", ",", "input_features", ",", "sample_size", ",", "prev_c", ",", "prev_h", ",", "device_utilization", ",", "mode", "=", "'greedy'", ")", ")", "\n", "\n", "return", "[", "random_action", "]", ",", "[", "policy_action", ",", "policy_c", ",", "policy_h", "]", ",", "[", "greedy_action", ",", "greedy_c", ",", "greedy_h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.compute_probs": [[835, 848], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "controller_device.ResourceAllocator.sess.run", "numpy.exp"], "methods", ["None"], ["", "def", "compute_probs", "(", "self", ",", "actions", ",", "num_actions", ",", "fd", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'num_actions'", "]", ":", "num_actions", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'actions'", "]", ":", "actions", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "fd", "[", "'batch'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_sources'", "]", ":", "fd", "[", "'batch_sources'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_source_weights'", "]", ":", "fd", "[", "'batch_source_weights'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'device_utilizations'", "]", ":", "fd", "[", "'device_utilizations'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_num_sources'", "]", ":", "fd", "[", "'batch_num_sources'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "fd", "[", "'batch_size'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'graph_idx'", "]", ":", "fd", "[", "'graph_idx'", "]", "}", ")", "\n", "probs", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "ctr", "[", "\"probs\"", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "[", "np", ".", "exp", "(", "-", "l", ")", "for", "l", "in", "probs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_probs_graphsage_lstm": [[849, 865], ["tensorflow.expand_dims", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "controller_device.ResourceAllocator.decode"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.decode"], ["", "def", "get_probs_graphsage_lstm", "(", "self", ",", "actions", ",", "num_actions", ")", ":", "\n", "    ", "device_utilizations", "=", "self", ".", "placeholders", "[", "'device_utilizations'", "]", "\n", "attn_mem", "=", "self", ".", "node_embeddings", "\n", "last_h", "=", "self", ".", "graph_embeddings", "\n", "attn_mem", "=", "tf", ".", "expand_dims", "(", "attn_mem", ",", "0", ")", "\n", "attn_mem", "=", "tf", ".", "tile", "(", "attn_mem", ",", "[", "num_actions", ",", "1", ",", "1", "]", ")", "\n", "last_h", "=", "tf", ".", "expand_dims", "(", "last_h", ",", "0", ")", "\n", "last_h", "=", "tf", ".", "tile", "(", "last_h", ",", "[", "num_actions", ",", "1", ",", "1", "]", ")", "\n", "last_h", "=", "tf", ".", "reshape", "(", "last_h", ",", "[", "num_actions", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "\n", "num_ops", "=", "self", ".", "placeholders", "[", "'batch_size'", "]", "\n", "\n", "_", ",", "log_probs", "=", "(", "self", ".", "decode", "(", "num_ops", ",", "num_actions", ",", "\n", "last_h", ",", "attn_mem", ",", "device_utilizations", ",", "actions", ")", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_probs_original_lstm": [[866, 876], ["tensorflow.slice", "tensorflow.reshape", "controller_device.ResourceAllocator.encode"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode"], ["", "def", "get_probs_original_lstm", "(", "self", ",", "actions", ",", "num_actions", ")", ":", "\n", "    ", "device_utilizations", "=", "self", ".", "placeholders", "[", "'device_utilizations'", "]", "\n", "num_ops", "=", "self", ".", "placeholders", "[", "'batch_size'", "]", "\n", "g_id", "=", "self", ".", "placeholders", "[", "\"graph_idx\"", "]", "\n", "input_features", "=", "tf", ".", "slice", "(", "self", ".", "features", ",", "[", "g_id", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "input_features", "=", "tf", ".", "reshape", "(", "input_features", ",", "[", "self", ".", "features", ".", "shape", "[", "1", "]", ",", "self", ".", "features", ".", "shape", "[", "2", "]", "]", ")", "\n", "\n", "_", ",", "log_probs", "=", "(", "self", ".", "encode", "(", "input_features", ",", "num_ops", ",", "num_actions", ",", "device_utilizations", ",", "actions", ")", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_probs": [[877, 885], ["controller_device.ResourceAllocator.get_probs_graphsage_lstm", "controller_device.ResourceAllocator.get_probs_original_lstm"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_probs_graphsage_lstm", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.get_probs_original_lstm"], ["", "def", "get_probs", "(", "self", ",", "actions", ",", "num_actions", ")", ":", "\n", "    ", "if", "self", ".", "hparams", ".", "decoder", "==", "'lstm'", ":", "\n", "      ", "if", "self", ".", "hparams", ".", "embedding", "==", "'graphsage'", ":", "\n", "        ", "return", "self", ".", "get_probs_graphsage_lstm", "(", "actions", ",", "num_actions", ")", "\n", "", "elif", "self", ".", "hparams", ".", "embedding", "==", "'original'", ":", "\n", "        ", "return", "self", ".", "get_probs_original_lstm", "(", "actions", ",", "num_actions", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.aggregate_source_devices": [[886, 917], ["tensorflow.slice", "tensorflow.reshape", "tensorflow.map_fn", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.slice", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "actions.read"], "methods", ["None"], ["", "", "", "def", "aggregate_source_devices", "(", "self", ",", "i", ",", "actions", ",", "num_children", ",", "sources", ",", "node_sources_num", ",", "source_weights", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "device_aggregator", "=", "tf", ".", "get_variable", "(", "\"device_aggregator\"", ")", "\n", "\n", "", "node_sources", "=", "tf", ".", "slice", "(", "sources", ",", "[", "i", ",", "0", "]", ",", "[", "1", ",", "node_sources_num", "]", ")", "\n", "node_sources", "=", "tf", ".", "reshape", "(", "node_sources", ",", "[", "node_sources_num", "]", ")", "\n", "if", "self", ".", "hparams", ".", "weighed_neighbor_placement", ":", "\n", "      ", "source_weights", "=", "tf", ".", "slice", "(", "source_weights", ",", "[", "i", ",", "0", "]", ",", "[", "1", ",", "node_sources_num", "]", ")", "\n", "source_weights", "=", "tf", ".", "reshape", "(", "source_weights", ",", "[", "node_sources_num", "]", ")", "\n", "source_weights", "=", "tf", ".", "expand_dims", "(", "source_weights", ",", "0", ")", "\n", "source_weights", "=", "tf", ".", "tile", "(", "source_weights", ",", "[", "num_children", ",", "1", "]", ")", "\n", "source_weights", "=", "tf", ".", "reshape", "(", "source_weights", ",", "[", "num_children", "*", "node_sources_num", ",", "1", "]", ")", "\n", "\n", "", "source_actions", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "actions", ".", "read", "(", "x", ")", ",", "node_sources", ")", "\n", "source_actions", "=", "tf", ".", "transpose", "(", "source_actions", ",", "[", "1", ",", "0", "]", ")", "\n", "source_actions", "=", "tf", ".", "reshape", "(", "source_actions", ",", "[", "node_sources_num", "*", "num_children", "]", ")", "\n", "source_devices", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "device_encoding", ",", "source_actions", ")", "\n", "#", "\n", "source_devices", "=", "tf", ".", "reshape", "(", "source_devices", ",", "(", "node_sources_num", "*", "num_children", ",", "self", ".", "num_devices", ")", ")", "\n", "if", "self", ".", "hparams", ".", "weighed_neighbor_placement", ":", "\n", "      ", "source_devices", "=", "source_weights", "*", "source_devices", "\n", "", "source_devices_embeddings", "=", "tf", ".", "matmul", "(", "source_devices", ",", "device_aggregator", ")", "\n", "source_devices_embeddings", "=", "tf", ".", "reshape", "(", "source_devices_embeddings", ",", "[", "num_children", ",", "node_sources_num", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "if", "self", ".", "hparams", ".", "weighed_neighbor_placement", ":", "\n", "      ", "source_devices_embeddings", "=", "tf", ".", "reduce_sum", "(", "source_devices_embeddings", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "source_devices_embeddings", "=", "tf", ".", "reduce_mean", "(", "source_devices_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "", "source_devices_embeddings", "=", "tf", ".", "reshape", "(", "source_devices_embeddings", ",", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "\n", "return", "source_devices_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.aggregate_source_devices_forward": [[918, 940], ["tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "aggregate_source_devices_forward", "(", "self", ",", "num_children", ",", "source_devices", ",", "source_weights", ",", "node_sources_num", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "device_aggregator", "=", "tf", ".", "get_variable", "(", "\"device_aggregator\"", ")", "\n", "\n", "", "source_devices", "=", "tf", ".", "reshape", "(", "source_devices", ",", "[", "num_children", "*", "node_sources_num", ",", "1", "]", ")", "\n", "source_devices", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "device_encoding", ",", "source_devices", ")", "\n", "\n", "source_devices", "=", "tf", ".", "reshape", "(", "source_devices", ",", "(", "node_sources_num", "*", "num_children", ",", "self", ".", "num_devices", ")", ")", "\n", "if", "self", ".", "hparams", ".", "weighed_neighbor_placement", ":", "\n", "      ", "source_weights", "=", "tf", ".", "expand_dims", "(", "source_weights", ",", "0", ")", "\n", "source_weights", "=", "tf", ".", "tile", "(", "source_weights", ",", "[", "num_children", ",", "1", "]", ")", "\n", "source_weights", "=", "tf", ".", "reshape", "(", "source_weights", ",", "[", "num_children", "*", "node_sources_num", ",", "1", "]", ")", "\n", "source_devices", "=", "source_weights", "*", "source_devices", "\n", "", "source_devices_embeddings", "=", "tf", ".", "matmul", "(", "source_devices", ",", "device_aggregator", ")", "\n", "source_devices_embeddings", "=", "tf", ".", "reshape", "(", "source_devices_embeddings", ",", "[", "num_children", ",", "node_sources_num", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "if", "self", ".", "hparams", ".", "weighed_neighbor_placement", ":", "\n", "      ", "source_devices_embeddings", "=", "tf", ".", "reduce_sum", "(", "source_devices_embeddings", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "source_devices_embeddings", "=", "tf", ".", "reduce_mean", "(", "source_devices_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "", "source_devices_embeddings", "=", "tf", ".", "reshape", "(", "source_devices_embeddings", ",", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "return", "source_devices_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.decode_forward": [[941, 1008], ["tensorflow.cond", "tensorflow.slice", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "controller_device.lstm", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.tanh", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.matmul", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.equal", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.cond", "tensorflow.concat", "tensorflow.multinomial", "tensorflow.equal", "tensorflow.concat", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.log", "tensorflow.argmax", "tensorflow.zeros", "controller_device.ResourceAllocator.aggregate_source_devices_forward", "tensorflow.variable_scope", "tensorflow.get_variable"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.lstm", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.aggregate_source_devices_forward"], ["", "def", "decode_forward", "(", "self", ",", "num_ops", ",", "target_op", ",", "num_children", ",", "prev_c", ",", "prev_h", ",", "last_h", ",", "attn_mem", ",", "device_utilizations", ",", "prev_y", ",", "mode", "=", "'sample'", ")", ":", "\n", "    ", "h", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "target_op", ",", "0", ")", ",", "\n", "lambda", ":", "last_h", ",", "\n", "lambda", ":", "prev_h", ")", "\n", "ph", "=", "self", ".", "placeholders", "\n", "\n", "num_samples", "=", "self", ".", "placeholders", "[", "'num_samples'", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "w_lstm", "=", "tf", ".", "get_variable", "(", "\"decoder_lstm\"", ")", "\n", "forget_bias", "=", "tf", ".", "get_variable", "(", "\"decoder_forget_bias\"", ")", "\n", "device_embeddings", "=", "tf", ".", "get_variable", "(", "\"device_embeddings\"", ")", "\n", "device_softmax", "=", "tf", ".", "get_variable", "(", "\"device_softmax\"", ")", "\n", "\n", "device_go_embedding", "=", "tf", ".", "get_variable", "(", "\"device_go_embedding\"", ")", "\n", "attn_w_2", "=", "tf", ".", "get_variable", "(", "\"attn_w_2\"", ")", "\n", "attn_v", "=", "tf", ".", "get_variable", "(", "\"attn_v\"", ")", "\n", "\n", "", "attn", "=", "tf", ".", "slice", "(", "self", ".", "node_embeddings", ",", "[", "target_op", ",", "0", "]", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "attn", "=", "tf", ".", "reshape", "(", "attn", ",", "[", "1", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "attn", "=", "tf", ".", "expand_dims", "(", "attn", ",", "0", ")", "\n", "attn", "=", "tf", ".", "tile", "(", "attn", ",", "[", "num_children", ",", "1", ",", "1", "]", ")", "\n", "attn", "=", "tf", ".", "reshape", "(", "attn", ",", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "\n", "signal", "=", "attn", "\n", "\n", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "      ", "node_sources_num", "=", "self", ".", "placeholders", "[", "'node_sources_num'", "]", "\n", "source_devices", "=", "self", ".", "placeholders", "[", "'source_devices'", "]", "\n", "source_weights", "=", "self", ".", "placeholders", "[", "'source_weights'", "]", "\n", "source_devices_embeddings", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "node_sources_num", ",", "0", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "lambda", ":", "self", ".", "aggregate_source_devices_forward", "(", "num_children", ",", "source_devices", ",", "source_weights", ",", "node_sources_num", ")", ")", "\n", "signal", "=", "tf", ".", "concat", "(", "[", "signal", ",", "source_devices_embeddings", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "next_c", ",", "next_h", "=", "lstm", "(", "signal", ",", "prev_c", ",", "h", ",", "w_lstm", ",", "forget_bias", ")", "\n", "query", "=", "tf", ".", "matmul", "(", "next_h", ",", "attn_w_2", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "query", ",", "[", "num_children", ",", "1", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "query", "=", "tf", ".", "tanh", "(", "query", "+", "attn_mem", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "query", ",", "[", "num_children", "*", "num_ops", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "query", "=", "tf", ".", "matmul", "(", "query", ",", "attn_v", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "query", ",", "[", "num_children", ",", "num_ops", "]", ")", "\n", "query", "=", "tf", ".", "nn", ".", "softmax", "(", "query", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "query", ",", "[", "num_children", ",", "num_ops", ",", "1", "]", ")", "\n", "query", "=", "tf", ".", "reduce_sum", "(", "attn_mem", "*", "query", ",", "axis", "=", "1", ")", "\n", "query", "=", "tf", ".", "concat", "(", "[", "next_h", ",", "query", "]", ",", "axis", "=", "1", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "query", ",", "device_softmax", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "consider_device_utilization", ":", "\n", "      ", "if", "self", ".", "hparams", ".", "device_scheme", "==", "0", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "          ", "w_utilization", "=", "tf", ".", "get_variable", "(", "\"device_utilization\"", ")", "\n", "", "logits", "=", "tf", ".", "concat", "(", "[", "logits", ",", "device_utilizations", "]", ",", "axis", "=", "1", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "logits", ",", "w_utilization", ")", "\n", "", "else", ":", "\n", "        ", "logits", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "logits", "=", "logits", "*", "device_utilizations", "\n", "logits", "=", "tf", ".", "log", "(", "logits", ")", "\n", "\n", "", "", "if", "mode", "==", "\"sample\"", ":", "\n", "      ", "next_y", "=", "tf", ".", "multinomial", "(", "logits", ",", "1", ",", "seed", "=", "self", ".", "hparams", ".", "seed", ")", "\n", "", "elif", "mode", "==", "\"greedy\"", ":", "\n", "      ", "next_y", "=", "tf", ".", "argmax", "(", "logits", ",", "1", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "\n", "", "next_y", "=", "tf", ".", "to_int32", "(", "next_y", ")", "\n", "next_y", "=", "tf", ".", "reshape", "(", "next_y", ",", "[", "num_children", "]", ")", "\n", "return", "next_y", ",", "next_c", ",", "next_h", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.decode": [[1010, 1104], ["tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.zeros", "tensorflow.while_loop", "loop_outputs[].stack", "tensorflow.transpose", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.less", "tensorflow.slice", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "controller_device.lstm", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.tanh", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.matmul", "tensorflow.slice", "tensorflow.to_int32", "tensorflow.reshape", "actions.write.write.write", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.constant", "tensorflow.zeros", "tensorflow.gather", "tensorflow.cond", "tensorflow.concat", "tensorflow.slice", "tensorflow.reshape", "tensorflow.equal", "tensorflow.concat", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.log", "tensorflow.zeros", "controller_device.ResourceAllocator.aggregate_source_devices", "tensorflow.variable_scope", "tensorflow.get_variable"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.lstm", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.aggregate_source_devices"], ["", "def", "decode", "(", "self", ",", "\n", "num_ops", ",", "\n", "num_children", ",", "\n", "last_h", ",", "\n", "attn_mem", ",", "\n", "device_utilizations", ",", "\n", "y", ")", ":", "\n", "    ", "ph", "=", "self", ".", "placeholders", "\n", "sources", "=", "ph", "[", "\"batch_sources\"", "]", "\n", "num_sources", "=", "ph", "[", "\"batch_num_sources\"", "]", "\n", "source_weights", "=", "ph", "[", "\"batch_source_weights\"", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "w_lstm", "=", "tf", ".", "get_variable", "(", "\"decoder_lstm\"", ")", "\n", "forget_bias", "=", "tf", ".", "get_variable", "(", "\"decoder_forget_bias\"", ")", "\n", "device_embeddings", "=", "tf", ".", "get_variable", "(", "\"device_embeddings\"", ")", "\n", "device_softmax", "=", "tf", ".", "get_variable", "(", "\"device_softmax\"", ")", "\n", "\n", "device_go_embedding", "=", "tf", ".", "get_variable", "(", "\"device_go_embedding\"", ")", "\n", "attn_w_2", "=", "tf", ".", "get_variable", "(", "\"attn_w_2\"", ")", "\n", "attn_v", "=", "tf", ".", "get_variable", "(", "\"attn_v\"", ")", "\n", "\n", "", "actions", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "tf", ".", "int32", ",", "\n", "size", "=", "num_ops", ",", "\n", "infer_shape", "=", "False", ",", "\n", "clear_after_read", "=", "False", ")", "\n", "\n", "def", "condition", "(", "i", ",", "*", "args", ")", ":", "\n", "      ", "return", "tf", ".", "less", "(", "i", ",", "num_ops", ")", "\n", "\n", "", "def", "body", "(", "i", ",", "prev_c", ",", "prev_h", ",", "actions", ",", "log_probs", ")", ":", "\n", "      ", "attn", "=", "tf", ".", "slice", "(", "self", ".", "node_embeddings", ",", "[", "i", ",", "0", "]", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "attn", "=", "tf", ".", "reshape", "(", "attn", ",", "[", "1", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "attn", "=", "tf", ".", "expand_dims", "(", "attn", ",", "0", ")", "\n", "attn", "=", "tf", ".", "tile", "(", "attn", ",", "[", "num_children", ",", "1", ",", "1", "]", ")", "\n", "attn", "=", "tf", ".", "reshape", "(", "attn", ",", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "\n", "signal", "=", "attn", "\n", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "        ", "node_sources_num", "=", "tf", ".", "gather", "(", "num_sources", ",", "i", ")", "\n", "source_devices_embeddings", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "node_sources_num", ",", "0", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "lambda", ":", "self", ".", "aggregate_source_devices", "(", "i", ",", "actions", ",", "num_children", ",", "sources", ",", "node_sources_num", ",", "source_weights", ")", ")", "\n", "signal", "=", "tf", ".", "concat", "(", "[", "signal", ",", "source_devices_embeddings", "]", ",", "axis", "=", "1", ")", "\n", "", "next_c", ",", "next_h", "=", "lstm", "(", "signal", ",", "prev_c", ",", "prev_h", ",", "w_lstm", ",", "forget_bias", ")", "\n", "query", "=", "tf", ".", "matmul", "(", "next_h", ",", "attn_w_2", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "\n", "query", ",", "[", "num_children", ",", "1", ",", "self", ".", "hparams", ".", "hidden_size", "]", ")", "\n", "query", "=", "tf", ".", "tanh", "(", "query", "+", "attn_mem", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "query", ",", "[", "\n", "num_children", "*", "num_ops", ",", "self", ".", "hparams", ".", "hidden_size", "\n", "]", ")", "\n", "query", "=", "tf", ".", "matmul", "(", "query", ",", "attn_v", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "query", ",", "[", "num_children", ",", "num_ops", "]", ")", "\n", "query", "=", "tf", ".", "nn", ".", "softmax", "(", "query", ")", "\n", "query", "=", "tf", ".", "reshape", "(", "query", ",", "[", "num_children", ",", "num_ops", ",", "1", "]", ")", "\n", "query", "=", "tf", ".", "reduce_sum", "(", "attn_mem", "*", "query", ",", "axis", "=", "1", ")", "\n", "query", "=", "tf", ".", "concat", "(", "[", "next_h", ",", "query", "]", ",", "axis", "=", "1", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "query", ",", "device_softmax", ")", "\n", "if", "self", ".", "hparams", ".", "consider_device_utilization", ":", "\n", "        ", "utilization", "=", "tf", ".", "slice", "(", "device_utilizations", ",", "[", "i", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "utilization", "=", "tf", ".", "reshape", "(", "utilization", ",", "[", "num_children", ",", "self", ".", "num_devices", "]", ")", "\n", "if", "self", ".", "hparams", ".", "device_scheme", "==", "0", ":", "\n", "          ", "logits", "=", "tf", ".", "concat", "(", "[", "logits", ",", "utilization", "]", ",", "axis", "=", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "w_utilization", "=", "tf", ".", "get_variable", "(", "\"device_utilization\"", ")", "\n", "", "logits", "=", "tf", ".", "matmul", "(", "logits", ",", "w_utilization", ")", "\n", "", "else", ":", "\n", "          ", "logits", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "logits", "=", "logits", "*", "utilization", "\n", "logits", "=", "tf", ".", "log", "(", "logits", ")", "\n", "\n", "", "", "next_y", "=", "tf", ".", "slice", "(", "y", ",", "[", "0", ",", "i", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "next_y", "=", "tf", ".", "to_int32", "(", "next_y", ")", "\n", "next_y", "=", "tf", ".", "reshape", "(", "next_y", ",", "[", "num_children", "]", ")", "\n", "actions", "=", "actions", ".", "write", "(", "i", ",", "next_y", ")", "\n", "log_probs", "+=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "next_y", ")", "\n", "return", "i", "+", "1", ",", "next_c", ",", "next_h", ",", "actions", ",", "log_probs", "\n", "\n", "", "last_c", "=", "tf", ".", "zeros", "(", "\n", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "last_c", ",", "last_h", ",", "actions", ",", "\n", "tf", ".", "zeros", "(", "[", "num_children", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "]", "\n", "\n", "loop_outputs", "=", "tf", ".", "while_loop", "(", "condition", ",", "body", ",", "loop_vars", ")", "\n", "\n", "last_c", "=", "loop_outputs", "[", "-", "4", "]", "\n", "last_h", "=", "loop_outputs", "[", "-", "3", "]", "\n", "actions", "=", "loop_outputs", "[", "-", "2", "]", ".", "stack", "(", ")", "\n", "actions", "=", "tf", ".", "transpose", "(", "actions", ",", "[", "1", ",", "0", "]", ")", "\n", "log_probs", "=", "loop_outputs", "[", "-", "1", "]", "\n", "return", "actions", ",", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode_forward_random": [[1105, 1110], ["tensorflow.multinomial", "tensorflow.to_int32", "tensorflow.reshape"], "methods", ["None"], ["", "def", "encode_forward_random", "(", "self", ",", "random_logits", ")", ":", "\n", "    ", "next_y", "=", "tf", ".", "multinomial", "(", "random_logits", ",", "1", ",", "seed", "=", "self", ".", "hparams", ".", "seed", ")", "\n", "next_y", "=", "tf", ".", "to_int32", "(", "next_y", ")", "\n", "next_y", "=", "tf", ".", "reshape", "(", "next_y", ",", "[", "1", "]", ")", "#only generate one random action at a time", "\n", "return", "next_y", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode_forward": [[1111, 1154], ["tensorflow.slice", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "tensorflow.matmul", "controller_device.lstm", "tensorflow.matmul", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.concat", "tensorflow.cond", "tensorflow.concat", "tensorflow.multinomial", "tensorflow.equal", "tensorflow.argmax", "tensorflow.zeros", "controller_device.ResourceAllocator.aggregate_source_devices_forward"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.lstm", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.aggregate_source_devices_forward"], ["", "def", "encode_forward", "(", "self", ",", "target_op", ",", "input_features", ",", "num_children", ",", "prev_c", ",", "prev_h", ",", "device_utilization", ",", "mode", "=", "\"sample\"", ")", ":", "\n", "    ", "ph", "=", "self", ".", "placeholders", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "w_lstm", "=", "tf", ".", "get_variable", "(", "\"decoder_lstm\"", ")", "\n", "forget_bias", "=", "tf", ".", "get_variable", "(", "\"decoder_forget_bias\"", ")", "\n", "device_softmax", "=", "tf", ".", "get_variable", "(", "\"device_softmax\"", ")", "\n", "node_embedding", "=", "tf", ".", "get_variable", "(", "\"node_embedding\"", ")", "\n", "w_utilization", "=", "tf", ".", "get_variable", "(", "\"device_utilization\"", ")", "\n", "\n", "", "signal", "=", "tf", ".", "slice", "(", "input_features", ",", "[", "target_op", ",", "0", "]", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "signal", "=", "tf", ".", "reshape", "(", "signal", ",", "[", "self", ".", "hparams", ".", "feat_size", "]", ")", "\n", "signal", "=", "tf", ".", "expand_dims", "(", "signal", ",", "0", ")", "\n", "signal", "=", "tf", ".", "tile", "(", "signal", ",", "[", "num_children", ",", "1", "]", ")", "\n", "signal", "=", "tf", ".", "reshape", "(", "signal", ",", "[", "num_children", ",", "self", ".", "hparams", ".", "feat_size", "]", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "keep_prob", "is", "not", "None", ":", "\n", "      ", "signal", "=", "tf", ".", "nn", ".", "dropout", "(", "signal", ",", "self", ".", "hparams", ".", "keep_prob", ")", "\n", "\n", "", "feature_embedding", "=", "tf", ".", "matmul", "(", "signal", ",", "node_embedding", ")", "\n", "if", "self", ".", "hparams", ".", "consider_device_utilization", ":", "\n", "      ", "utilization_embedding", "=", "tf", ".", "matmul", "(", "device_utilization", ",", "w_utilization", ")", "\n", "feature_embedding", "=", "tf", ".", "concat", "(", "[", "feature_embedding", ",", "utilization_embedding", "]", ",", "axis", "=", "1", ")", "\n", "", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "      ", "node_sources_num", "=", "self", ".", "placeholders", "[", "'node_sources_num'", "]", "\n", "source_devices", "=", "self", ".", "placeholders", "[", "'source_devices'", "]", "\n", "source_weights", "=", "self", ".", "placeholders", "[", "'source_weights'", "]", "\n", "source_devices_embeddings", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "node_sources_num", ",", "0", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "lambda", ":", "self", ".", "aggregate_source_devices_forward", "(", "num_children", ",", "source_devices", ",", "source_weights", ",", "node_sources_num", ")", ")", "\n", "feature_embedding", "=", "tf", ".", "concat", "(", "[", "feature_embedding", ",", "source_devices_embeddings", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "next_c", ",", "next_h", "=", "lstm", "(", "feature_embedding", ",", "prev_c", ",", "prev_h", ",", "w_lstm", ",", "forget_bias", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "next_h", ",", "device_softmax", ")", "\n", "\n", "if", "mode", "==", "\"sample\"", ":", "\n", "      ", "next_y", "=", "tf", ".", "multinomial", "(", "logits", ",", "1", ",", "seed", "=", "self", ".", "hparams", ".", "seed", ")", "\n", "", "elif", "mode", "==", "\"greedy\"", ":", "\n", "      ", "next_y", "=", "tf", ".", "argmax", "(", "logits", ",", "1", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "\n", "", "next_y", "=", "tf", ".", "to_int32", "(", "next_y", ")", "\n", "next_y", "=", "tf", ".", "reshape", "(", "next_y", ",", "[", "num_children", "]", ")", "\n", "return", "next_y", ",", "next_c", ",", "next_h", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.encode": [[1155, 1226], ["tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.while_loop", "loop_outputs[].stack", "tensorflow.transpose", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.less", "tensorflow.slice", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "tensorflow.matmul", "controller_device.lstm", "tensorflow.matmul", "tensorflow.slice", "tensorflow.to_int32", "tensorflow.reshape", "actions.write.write.write", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.constant", "tensorflow.zeros", "tensorflow.nn.dropout", "tensorflow.slice", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.concat", "tensorflow.gather", "tensorflow.cond", "tensorflow.concat", "tensorflow.equal", "tensorflow.zeros", "controller_device.ResourceAllocator.aggregate_source_devices"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.lstm", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.aggregate_source_devices"], ["", "def", "encode", "(", "self", ",", "input_features", ",", "num_ops", ",", "num_children", ",", "device_utilization", ",", "y", ")", ":", "\n", "    ", "ph", "=", "self", ".", "placeholders", "\n", "sources", "=", "ph", "[", "\"batch_sources\"", "]", "\n", "num_sources", "=", "ph", "[", "\"batch_num_sources\"", "]", "\n", "source_weights", "=", "ph", "[", "\"batch_source_weights\"", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "hparams", ".", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "w_lstm", "=", "tf", ".", "get_variable", "(", "\"decoder_lstm\"", ")", "\n", "forget_bias", "=", "tf", ".", "get_variable", "(", "\"decoder_forget_bias\"", ")", "\n", "device_softmax", "=", "tf", ".", "get_variable", "(", "\"device_softmax\"", ")", "\n", "node_embedding", "=", "tf", ".", "get_variable", "(", "\"node_embedding\"", ")", "\n", "w_utilization", "=", "tf", ".", "get_variable", "(", "\"device_utilization\"", ")", "\n", "\n", "", "actions", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "tf", ".", "int32", ",", "\n", "size", "=", "num_ops", ",", "\n", "infer_shape", "=", "False", ",", "\n", "clear_after_read", "=", "False", ")", "\n", "\n", "def", "condition", "(", "i", ",", "*", "args", ")", ":", "\n", "      ", "return", "tf", ".", "less", "(", "i", ",", "num_ops", ")", "\n", "\n", "", "def", "body", "(", "i", ",", "prev_c", ",", "prev_h", ",", "actions", ",", "log_probs", ")", ":", "\n", "      ", "signal", "=", "tf", ".", "slice", "(", "input_features", ",", "[", "i", ",", "0", "]", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "signal", "=", "tf", ".", "reshape", "(", "signal", ",", "[", "self", ".", "hparams", ".", "feat_size", "]", ")", "\n", "signal", "=", "tf", ".", "expand_dims", "(", "signal", ",", "0", ")", "\n", "signal", "=", "tf", ".", "tile", "(", "signal", ",", "[", "num_children", ",", "1", "]", ")", "\n", "signal", "=", "tf", ".", "reshape", "(", "signal", ",", "[", "num_children", ",", "self", ".", "hparams", ".", "feat_size", "]", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "keep_prob", "is", "not", "None", ":", "\n", "        ", "signal", "=", "tf", ".", "nn", ".", "dropout", "(", "signal", ",", "self", ".", "hparams", ".", "keep_prob", ")", "\n", "", "feature_embedding", "=", "tf", ".", "matmul", "(", "signal", ",", "node_embedding", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "consider_device_utilization", ":", "\n", "        ", "utilization", "=", "tf", ".", "slice", "(", "device_utilization", ",", "[", "i", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "utilization", "=", "tf", ".", "reshape", "(", "utilization", ",", "[", "num_children", ",", "self", ".", "num_devices", "]", ")", "\n", "utilization_embedding", "=", "tf", ".", "matmul", "(", "utilization", ",", "w_utilization", ")", "\n", "feature_embedding", "=", "tf", ".", "concat", "(", "[", "feature_embedding", ",", "utilization_embedding", "]", ",", "axis", "=", "1", ")", "\n", "", "if", "self", ".", "hparams", ".", "consider_neighbor_placement", ":", "\n", "        ", "node_sources_num", "=", "tf", ".", "gather", "(", "num_sources", ",", "i", ")", "\n", "source_devices_embeddings", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "node_sources_num", ",", "0", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "lambda", ":", "self", ".", "aggregate_source_devices", "(", "i", ",", "actions", ",", "num_children", ",", "sources", ",", "node_sources_num", ",", "source_weights", ")", ")", "\n", "feature_embedding", "=", "tf", ".", "concat", "(", "[", "feature_embedding", ",", "source_devices_embeddings", "]", ",", "axis", "=", "1", ")", "\n", "", "next_c", ",", "next_h", "=", "lstm", "(", "feature_embedding", ",", "prev_c", ",", "prev_h", ",", "w_lstm", ",", "forget_bias", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "next_h", ",", "device_softmax", ")", "\n", "\n", "next_y", "=", "tf", ".", "slice", "(", "y", ",", "[", "0", ",", "i", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "next_y", "=", "tf", ".", "to_int32", "(", "next_y", ")", "\n", "next_y", "=", "tf", ".", "reshape", "(", "next_y", ",", "[", "num_children", "]", ")", "\n", "actions", "=", "actions", ".", "write", "(", "i", ",", "next_y", ")", "\n", "log_probs", "+=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "next_y", ")", "\n", "return", "i", "+", "1", ",", "next_c", ",", "next_h", ",", "actions", ",", "log_probs", "\n", "\n", "", "last_c", "=", "tf", ".", "zeros", "(", "\n", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "last_h", "=", "tf", ".", "zeros", "(", "\n", "[", "num_children", ",", "self", ".", "hparams", ".", "hidden_size", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "last_c", ",", "last_h", ",", "actions", ",", "\n", "tf", ".", "zeros", "(", "[", "num_children", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "]", "\n", "\n", "loop_outputs", "=", "tf", ".", "while_loop", "(", "condition", ",", "body", ",", "loop_vars", ")", "\n", "\n", "last_c", "=", "loop_outputs", "[", "-", "4", "]", "\n", "last_h", "=", "loop_outputs", "[", "-", "3", "]", "\n", "actions", "=", "loop_outputs", "[", "-", "2", "]", ".", "stack", "(", ")", "\n", "actions", "=", "tf", ".", "transpose", "(", "actions", ",", "[", "1", ",", "0", "]", ")", "\n", "log_probs", "=", "loop_outputs", "[", "-", "1", "]", "\n", "return", "actions", ",", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator.optimize": [[1227, 1249], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "controller_device.ResourceAllocator.sess.run"], "methods", ["None"], ["", "def", "optimize", "(", "self", ",", "fd", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'num_actions'", "]", ":", "fd", "[", "'num_actions'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'actions'", "]", ":", "fd", "[", "'actions'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'reward'", "]", ":", "fd", "[", "'reward'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "fd", "[", "'batch'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_sources'", "]", ":", "fd", "[", "'batch_sources'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_num_sources'", "]", ":", "fd", "[", "'batch_num_sources'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "fd", "[", "'batch_size'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'graph_idx'", "]", ":", "fd", "[", "'graph_idx'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'device_utilizations'", "]", ":", "fd", "[", "'device_utilizations'", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_source_weights'", "]", ":", "fd", "[", "'batch_source_weights'", "]", "}", ")", "\n", "\n", "controller_ops", "=", "self", ".", "ctr", "\n", "\n", "run_ops", "=", "[", "controller_ops", "[", "\"probs\"", "]", ",", "\n", "controller_ops", "[", "\"loss\"", "]", ",", "controller_ops", "[", "\"lr\"", "]", ",", "\n", "controller_ops", "[", "\"grad_norm\"", "]", ",", "controller_ops", "[", "\"grad_norms\"", "]", ",", "\n", "controller_ops", "[", "\"train_op\"", "]", "\n", "]", "\n", "probs", ",", "loss", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "sess", ".", "run", "(", "run_ops", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.ResourceAllocator._get_train_ops": [[1250, 1295], ["tensorflow.cond", "tensorflow.train.GradientDescentOptimizer.compute_gradients", "tensorflow.global_norm", "tensorflow.maximum", "tensorflow.train.GradientDescentOptimizer.apply_gradients", "tensorflow.constant", "tensorflow.train.exponential_decay", "tensorflow.less", "tensorflow.train.AdamOptimizer", "tensorflow.train.GradientDescentOptimizer", "isinstance", "tensorflow.sqrt", "clipped_grads.append", "tensorflow.reduce_sum", "tensorflow.IndexedSlices", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "_get_train_ops", "(", "self", ",", "\n", "loss", ",", "\n", "tf_variables", ",", "\n", "global_step", ",", "\n", "grad_bound", "=", "1.25", ",", "\n", "lr_init", "=", "1e-3", ",", "\n", "lr_dec", "=", "0.9", ",", "\n", "start_decay_step", "=", "10000", ",", "\n", "decay_steps", "=", "100", ",", "\n", "optimizer_type", "=", "\"adam\"", ")", ":", "\n", "    ", "def", "f1", "(", ")", ":", "\n", "      ", "return", "tf", ".", "constant", "(", "lr_init", ")", "\n", "\n", "", "def", "f2", "(", ")", ":", "\n", "      ", "return", "tf", ".", "train", ".", "exponential_decay", "(", "lr_init", ",", "lr_gstep", ",", "decay_steps", ",", "lr_dec", ",", "True", ")", "\n", "\n", "", "learning_rate", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "global_step", ",", "start_decay_step", ")", ",", "\n", "f1", ",", "\n", "f2", ",", "\n", "name", "=", "\"learning_rate\"", ")", "\n", "\n", "if", "optimizer_type", "==", "\"adam\"", ":", "\n", "      ", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "", "elif", "optimizer_type", "==", "\"sgd\"", ":", "\n", "      ", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", ")", "\n", "", "grads_and_vars", "=", "opt", ".", "compute_gradients", "(", "loss", ",", "tf_variables", ")", "\n", "grad_norm", "=", "tf", ".", "global_norm", "(", "[", "g", "for", "g", ",", "v", "in", "grads_and_vars", "]", ")", "\n", "all_grad_norms", "=", "{", "}", "\n", "clipped_grads", "=", "[", "]", "\n", "clipped_rate", "=", "tf", ".", "maximum", "(", "grad_norm", "/", "grad_bound", ",", "1.0", ")", "\n", "for", "g", ",", "v", "in", "grads_and_vars", ":", "\n", "      ", "if", "g", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "g", ",", "tf", ".", "IndexedSlices", ")", ":", "\n", "          ", "clipped", "=", "g", ".", "values", "/", "clipped_rate", "\n", "norm_square", "=", "tf", ".", "reduce_sum", "(", "clipped", "*", "clipped", ")", "\n", "clipped", "=", "tf", ".", "IndexedSlices", "(", "clipped", ",", "g", ".", "indices", ")", "\n", "", "else", ":", "\n", "          ", "clipped", "=", "g", "/", "clipped_rate", "\n", "norm_square", "=", "tf", ".", "reduce_sum", "(", "clipped", "*", "clipped", ")", "\n", "", "all_grad_norms", "[", "v", ".", "name", "]", "=", "tf", ".", "sqrt", "(", "norm_square", ")", "\n", "clipped_grads", ".", "append", "(", "(", "clipped", ",", "v", ")", ")", "\n", "\n", "", "", "train_op", "=", "opt", ".", "apply_gradients", "(", "clipped_grads", ",", "global_step", ")", "\n", "return", "train_op", ",", "learning_rate", ",", "grad_norm", ",", "all_grad_norms", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.allocator_hparams": [[41, 93], ["controller_device.PlacerParams"], "function", ["None"], ["", "", "def", "allocator_hparams", "(", ")", ":", "\n", "  ", "\"\"\"Hyperparameters for resource allocator.\"\"\"", "\n", "return", "PlacerParams", "(", "\n", "hidden_size", "=", "512", ",", "\n", "forget_bias_init", "=", "1.0", ",", "\n", "grad_bound", "=", "1.0", ",", "\n", "lr", "=", "0.01", ",", "\n", "lr_dec", "=", "1.0", ",", "\n", "decay_steps", "=", "50", ",", "\n", "start_decay_step", "=", "400", ",", "\n", "optimizer_type", "=", "\"adam\"", ",", "\n", "name", "=", "\"hierarchical_controller\"", ",", "\n", "keep_prob", "=", "1.0", ",", "\n", "seed", "=", "1", ",", "\n", "model_size", "=", "'small'", ",", "\n", "random_prob", "=", "1.0", ",", "\n", "max_degree", "=", "100", ",", "\n", "epoches", "=", "10000", ",", "\n", "dropout", "=", "0.0", ",", "\n", "n_explore_samples", "=", "20", ",", "\n", "n_replay_samples", "=", "5", ",", "\n", "replay_greedy_sampling", "=", "True", ",", "\n", "n_policy_samples", "=", "10", ",", "\n", "train_ratio", "=", "0.8", ",", "\n", "restore", "=", "False", ",", "\n", "checkpoint", "=", "True", ",", "\n", "checkpoint_folder", "=", "'checkpoints'", ",", "\n", "cep_program", "=", "'LogProcessing'", ",", "\n", "graphsage_model", "=", "'graphsage_maxpool'", ",", "\n", "samples_1", "=", "4", ",", "\n", "samples_2", "=", "4", ",", "\n", "samples_3", "=", "0", ",", "\n", "samples_4", "=", "0", ",", "\n", "samples_5", "=", "0", ",", "\n", "dim_1", "=", "128", ",", "\n", "dim_2", "=", "128", ",", "\n", "strategy", "=", "'policy'", ",", "# or memory", "\n", "replay_weight", "=", "10.0", ",", "\n", "env_batch_size", "=", "1", ",", "# number of env in a batch", "\n", "embedding", "=", "'original'", ",", "#original or use graphsage", "\n", "feat_size", "=", "1", ",", "#only valid if embedding is original", "\n", "decoder", "=", "'lstm'", ",", "# only lstm is supported", "\n", "placement_file", "=", "'tmp.json'", ",", "\n", "consider_neighbor_placement", "=", "False", ",", "#whether to consider the placement of neighbor nodes", "\n", "consider_device_utilization", "=", "False", ",", "\n", "weighed_neighbor_placement", "=", "True", ",", "#only useful if consider_neighbor_placement is True", "\n", "utilization_max", "=", "2.0", ",", "\n", "device_scheme", "=", "0", ",", "\n", "real_baseline", "=", "True", ",", "\n", "pool_size", "=", "5", ",", "\n", "num_devices", "=", "5", ",", "\n", "metis_placement", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.evaluate": [[105, 142], ["range", "vm_placements.items", "len", "subprocess.Popen", "subprocess.Popen.communicate", "logs.split", "environment.Sample", "int", "vm_placements[].append", "placements.append", "open", "json.dump", "int", "float", "str", "line.strip().split", "line.strip"], "function", ["None"], ["", "", "def", "evaluate", "(", "t", ")", ":", "\n", "  ", "action", "=", "t", ".", "action", "\n", "num_ops", "=", "t", ".", "num_ops", "\n", "graph_idx", "=", "t", ".", "graph_idx", "\n", "device_utilizations", "=", "t", ".", "device_utilizations", "\n", "is_policy", "=", "t", ".", "is_policy", "\n", "placement_file", "=", "t", ".", "placement_file", "\n", "cep_program", "=", "t", ".", "cep_program", "\n", "exp_folder", "=", "t", ".", "exp_folder", "\n", "\n", "configs", "=", "{", "}", "\n", "placements", "=", "[", "]", "\n", "vm_placements", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_ops", ")", ":", "\n", "    ", "vm", "=", "int", "(", "action", "[", "i", "]", ")", "\n", "if", "vm", "not", "in", "vm_placements", ":", "\n", "      ", "vm_placements", "[", "vm", "]", "=", "[", "]", "\n", "", "vm_placements", "[", "vm", "]", ".", "append", "(", "int", "(", "i", ")", ")", "\n", "", "for", "vm", ",", "ops", "in", "vm_placements", ".", "items", "(", ")", ":", "\n", "    ", "placements", ".", "append", "(", "{", "'idx'", ":", "vm", ",", "'ops'", ":", "ops", "}", ")", "\n", "", "configs", "[", "'placements'", "]", "=", "placements", "\n", "\n", "used_vms", "=", "len", "(", "vm_placements", ")", "\n", "with", "open", "(", "placement_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "    ", "json", ".", "dump", "(", "configs", ",", "outfile", ")", "\n", "\n", "", "seq", "=", "[", "'timeout'", ",", "'-k'", ",", "'30s'", ",", "'-s'", ",", "'9'", ",", "'30s'", ",", "'java'", ",", "'ca.uwo.eng.sel.cepsim.example.'", "+", "cep_program", ",", "placement_file", ",", "exp_folder", "+", "'/graph_'", "+", "str", "(", "graph_idx", ")", "+", "'.json'", "]", "\n", "p", "=", "Popen", "(", "seq", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "stdout", ",", "stderr", "=", "p", ".", "communicate", "(", ")", "\n", "logs", "=", "stdout", "\n", "throughput", "=", "0", "\n", "for", "line", "in", "logs", ".", "split", "(", "b'\\n'", ")", ":", "\n", "    ", "if", "b\"Throughputs:\"", "in", "line", ":", "\n", "      ", "throughput", "+=", "float", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "b':'", ")", "[", "1", "]", ")", "\n", "", "", "throughput", "/=", "used_vms", "\n", "s", "=", "Sample", "(", "action", ",", "throughput", ",", "device_utilizations", ",", "is_policy", "=", "is_policy", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.controller_device.lstm": [[1297, 1307], ["tensorflow.matmul", "tensorflow.split", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.tanh", "tensorflow.concat", "tensorflow.tanh"], "function", ["None"], ["", "", "def", "lstm", "(", "x", ",", "prev_c", ",", "prev_h", ",", "w_lstm", ",", "forget_bias", ")", ":", "\n", "  ", "ifog", "=", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "x", ",", "prev_h", "]", ",", "axis", "=", "1", ")", ",", "w_lstm", ")", "\n", "i", ",", "f", ",", "o", ",", "g", "=", "tf", ".", "split", "(", "ifog", ",", "4", ",", "axis", "=", "1", ")", "\n", "i", "=", "tf", ".", "sigmoid", "(", "i", ")", "\n", "f", "=", "tf", ".", "sigmoid", "(", "f", "+", "forget_bias", ")", "\n", "o", "=", "tf", ".", "sigmoid", "(", "o", ")", "\n", "g", "=", "tf", ".", "tanh", "(", "g", ")", "\n", "next_c", "=", "i", "*", "g", "+", "f", "*", "prev_c", "\n", "next_h", "=", "o", "*", "tf", ".", "tanh", "(", "next_c", ")", "\n", "return", "next_c", ",", "next_h", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Sample.__init__": [[8, 16], ["str"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "action", ",", "throughput", ",", "device_utilization", ",", "is_policy", "=", "False", ")", ":", "\n", "    ", "self", ".", "action", "=", "action", "\n", "self", ".", "throughput", "=", "throughput", "\n", "p", "=", "''", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "action", ")", "\n", "self", ".", "action_str", "=", "p", "\n", "self", ".", "rank", "=", "0", "\n", "self", ".", "device_utilization", "=", "device_utilization", "\n", "self", ".", "is_policy", "=", "is_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Sample.set_rank": [[17, 19], ["None"], "methods", ["None"], ["", "def", "set_rank", "(", "self", ",", "rank", ")", ":", "\n", "    ", "self", ".", "rank", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.__init__": [[23, 35], ["set", "collections.deque"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "graph_idx", ",", "batch_size", ",", "max_throughput", ",", "queue_leangth", "=", "200", ")", ":", "\n", "    ", "self", ".", "graph_idx", "=", "graph_idx", "\n", "self", ".", "exploration_buf", "=", "set", "(", ")", "\n", "self", ".", "min_throughput", "=", "0.0", "\n", "self", ".", "max_throughput", "=", "max_throughput", "\n", "self", ".", "replay_buffer", "=", "[", "]", "\n", "self", ".", "policy_queue", "=", "deque", "(", ")", "\n", "self", ".", "policy_queue_length", "=", "queue_leangth", "\n", "self", ".", "num_policy_samples", "=", "0", "\n", "self", ".", "exploration_done", "=", "False", "\n", "self", ".", "best_rank", "=", "0.0", "\n", "self", ".", "perf_map", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.set_exploration_done": [[36, 38], ["None"], "methods", ["None"], ["", "def", "set_exploration_done", "(", "self", ")", ":", "\n", "    ", "self", ".", "exploration_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.has": [[39, 44], ["str"], "methods", ["None"], ["", "def", "has", "(", "self", ",", "action", ")", ":", "\n", "    ", "p", "=", "''", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "action", ")", "\n", "if", "p", "not", "in", "self", ".", "exploration_buf", ":", "\n", "      ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.if_exist": [[45, 51], ["None"], "methods", ["None"], ["", "def", "if_exist", "(", "self", ",", "action_str", ")", ":", "\n", "    ", "if", "action_str", "in", "self", ".", "perf_map", ":", "\n", "      ", "throughput", "=", "self", ".", "perf_map", "[", "action_str", "]", "\n", "return", "throughput", "\n", "", "else", ":", "\n", "      ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.save": [[52, 70], ["environment.Environment.exploration_buf.add", "environment.Environment.replay_buffer.append", "environment.Environment.policy_queue.append", "environment.Environment.policy_queue.popleft"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "s", ",", "on_policy", "=", "False", ",", "build_replay", "=", "True", ")", ":", "\n", "    ", "self", ".", "perf_map", "[", "s", ".", "action_str", "]", "=", "s", ".", "throughput", "\n", "if", "build_replay", "and", "(", "s", ".", "action_str", "not", "in", "self", ".", "exploration_buf", ")", ":", "\n", "      ", "self", ".", "exploration_buf", ".", "add", "(", "s", ".", "action_str", ")", "\n", "self", ".", "replay_buffer", ".", "append", "(", "s", ")", "\n", "\n", "", "s", ".", "rank", "=", "s", ".", "throughput", "/", "self", ".", "max_throughput", "\n", "\n", "if", "s", ".", "rank", ">", "self", ".", "best_rank", ":", "\n", "      ", "self", ".", "best_rank", "=", "s", ".", "rank", "\n", "\n", "", "if", "on_policy", ":", "\n", "      ", "if", "self", ".", "num_policy_samples", ">", "self", ".", "policy_queue_length", ":", "\n", "        ", "self", ".", "policy_queue", ".", "popleft", "(", ")", "\n", "self", ".", "num_policy_samples", "-=", "1", "\n", "\n", "", "self", ".", "policy_queue", ".", "append", "(", "s", ")", "\n", "self", ".", "num_policy_samples", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.save_test": [[71, 73], ["None"], "methods", ["None"], ["", "", "def", "save_test", "(", "self", ",", "throughput", ",", "action_str", ")", ":", "\n", "    ", "self", ".", "perf_map", "[", "action_str", "]", "=", "throughput", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.calculate_baseline": [[74, 85], ["list", "numpy.mean", "min", "heapq.nlargest", "numpy.mean", "len", "max"], "methods", ["None"], ["", "def", "calculate_baseline", "(", "self", ",", "epoch", ",", "num_replay_samples", ")", ":", "\n", "    ", "if", "self", ".", "num_policy_samples", "==", "0", ":", "\n", "      ", "return", "0.0", "\n", "", "if", "epoch", "<", "1", ":", "\n", "      ", "policy_samples", "=", "list", "(", "self", ".", "policy_queue", ")", "\n", "base", "=", "np", ".", "mean", "(", "[", "s", ".", "rank", "for", "s", "in", "policy_samples", "]", ")", "\n", "", "else", ":", "\n", "      ", "num_selected", "=", "min", "(", "2", "*", "num_replay_samples", "-", "1", ",", "len", "(", "self", ".", "replay_buffer", ")", ")", "\n", "samples", "=", "heapq", ".", "nlargest", "(", "max", "(", "num_selected", ",", "2", ")", ",", "self", ".", "replay_buffer", ",", "key", "=", "lambda", "s", ":", "s", ".", "rank", ")", "\n", "base", "=", "np", ".", "mean", "(", "[", "s", ".", "rank", "for", "s", "in", "samples", "]", ")", "\n", "", "return", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.sample": [[86, 91], ["list", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "num_samples", ")", ":", "\n", "    ", "policy_samples", "=", "list", "(", "self", ".", "policy_queue", ")", "\n", "start_index", "=", "len", "(", "policy_samples", ")", "-", "num_samples", "\n", "selected_samples", "=", "policy_samples", "[", "start_index", ":", "]", "\n", "return", "selected_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.replay": [[92, 115], ["min", "print", "len", "heapq.nlargest", "numpy.random.choice", "numpy.random.choice", "len", "heapq.nlargest", "print", "str"], "methods", ["None"], ["", "def", "replay", "(", "self", ",", "num_samples", ",", "greedy", "=", "True", ")", ":", "\n", "    ", "num_selected", "=", "min", "(", "num_samples", ",", "len", "(", "self", ".", "replay_buffer", ")", ")", "\n", "\n", "if", "greedy", ":", "\n", "      ", "samples", "=", "heapq", ".", "nlargest", "(", "num_selected", ",", "self", ".", "replay_buffer", ",", "key", "=", "lambda", "s", ":", "s", ".", "rank", ")", "\n", "samples", "=", "np", ".", "random", ".", "choice", "(", "samples", ",", "num_selected", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "samples", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "replay_buffer", ",", "num_selected", ",", "replace", "=", "False", ")", "\n", "\n", "#filter the rank must be above 0.5", "\n", "", "samples", "=", "[", "x", "for", "x", "in", "samples", "if", "x", ".", "rank", ">=", "THRE", "]", "\n", "\n", "#select at least one top performer", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "      ", "num_selected", "=", "1", "\n", "samples", "=", "heapq", ".", "nlargest", "(", "num_selected", ",", "self", ".", "replay_buffer", ",", "key", "=", "lambda", "s", ":", "s", ".", "rank", ")", "\n", "samples", "=", "[", "x", "for", "x", "in", "samples", "]", "\n", "\n", "", "for", "s", "in", "samples", ":", "\n", "      ", "print", "(", "\"replay action: \"", "+", "s", ".", "action_str", "+", "\" rank: \"", "+", "str", "(", "s", ".", "rank", ")", ")", "\n", "", "print", "(", "\"max throughput {}\"", ".", "format", "(", "self", ".", "max_throughput", ")", ")", "\n", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.None.environment.Environment.hard_problem": [[116, 122], ["print"], "methods", ["None"], ["", "def", "hard_problem", "(", "self", ")", ":", "\n", "    ", "print", "(", "\"best rank {}\"", ".", "format", "(", "self", ".", "best_rank", ")", ")", "\n", "if", "self", ".", "best_rank", "<", "0.99", ":", "\n", "      ", "return", "True", "\n", "", "else", ":", "\n", "      ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.__init__": [[21, 38], ["kwargs.keys", "kwargs.get", "kwargs.get", "models.Model.__class__.__name__.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "activations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model._build": [[39, 41], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.build": [[42, 57], ["models.Model.activations.append", "tensorflow.get_collection", "tensorflow.variable_scope", "models.Model._build", "layer", "models.Model.activations.append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Build sequential layer model", "\n", "", "self", ".", "activations", ".", "append", "(", "self", ".", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "hidden", "=", "layer", "(", "self", ".", "activations", "[", "-", "1", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "hidden", ")", "\n", "", "self", ".", "outputs", "=", "self", ".", "activations", "[", "-", "1", "]", "\n", "\n", "# Store model variables for easy access", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save": [[59, 65], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.save"], ["", "def", "save", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", ")", "\n", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.load": [[66, 73], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.MLP.__init__": [[77, 87], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "dims", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dims", "=", "dims", "\n", "self", ".", "input_dim", "=", "dims", "[", "0", "]", "\n", "self", ".", "output_dim", "=", "dims", "[", "-", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "labels", "=", "placeholders", "[", "'labels'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.MLP._build": [[88, 101], ["models.MLP.layers.append", "models.MLP.layers.append", "graphsage.Dense", "graphsage.Dense", "graphsage.Dense", "graphsage.Dense"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "layers", ".", "Dense", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "dims", "[", "1", "]", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "layers", ".", "Dense", "(", "input_dim", "=", "self", ".", "dims", "[", "1", "]", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.GeneralizedModel.__init__": [[110, 112], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GeneralizedModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.GeneralizedModel.build": [[114, 122], ["tensorflow.get_collection", "tensorflow.variable_scope", "models.GeneralizedModel._build"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Store model variables for easy access", "\n", "", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.SampleAndAggregate.__init__": [[138, 190], ["models.GeneralizedModel.__init__", "tensorflow.Variable", "models.SampleAndAggregate.dims.extend", "tensorflow.train.AdamOptimizer", "models.SampleAndAggregate.build", "tensorflow.constant", "range", "len", "Exception"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "features", ",", "adj", ",", "degrees", ",", "\n", "layer_infos", ",", "concat", "=", "True", ",", "aggregator_type", "=", "\"mean\"", ",", "\n", "model_size", "=", "\"small\"", ",", "identity_dim", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            - placeholders: Stanford TensorFlow placeholder object.\n            - features: Numpy array with node features. \n                        NOTE: Pass a None object to train in featureless mode (identity features for nodes)!\n            - adj: Numpy array with adjacency lists (padded with random re-samples)\n            - degrees: Numpy array with node degrees. \n            - layer_infos: List of SAGEInfo namedtuples that describe the parameters of all \n                   the recursive layers. See SAGEInfo definition above.\n            - concat: whether to concatenate during recursive iterations\n            - aggregator_type: how to aggregate neighbor information\n            - model_size: one of \"small\" and \"big\"\n            - identity_dim: Set to positive int to use identity features (slow and cannot generalize, but better accuracy)\n        '''", "\n", "super", "(", "SampleAndAggregate", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "aggregator_type", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanAggregator", "\n", "", "elif", "aggregator_type", "==", "\"seq\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "SeqAggregator", "\n", "", "elif", "aggregator_type", "==", "\"maxpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MaxPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"meanpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"gcn\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "GCNAggregator", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown aggregator: \"", ",", "self", ".", "aggregator_cls", ")", "\n", "\n", "# get info from placeholders...", "\n", "", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch1\"", "]", "\n", "self", ".", "inputs2", "=", "placeholders", "[", "\"batch2\"", "]", "\n", "self", ".", "g_id", "=", "placeholders", "[", "\"graph_idx\"", "]", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "adj_info", "=", "adj", "\n", "\n", "self", ".", "features", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "trainable", "=", "False", ")", "\n", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "self", ".", "dims", "=", "[", "(", "0", "if", "features", "is", "None", "else", "features", ".", "shape", "[", "1", "]", ")", "+", "identity_dim", "]", "\n", "self", ".", "dims", ".", "extend", "(", "[", "layer_infos", "[", "i", "]", ".", "output_dim", "for", "i", "in", "range", "(", "len", "(", "layer_infos", ")", ")", "]", ")", "\n", "self", ".", "batch_size", "=", "placeholders", "[", "\"batch_size\"", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "layer_infos", "=", "layer_infos", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.SampleAndAggregate.sample": [[191, 213], ["range", "len", "sampler", "samples.append", "support_sizes.append", "tensorflow.reshape", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "inputs", ",", "layer_infos", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "\"\"\" Sample neighbors to be the supportive fields for multi-layer convolutions.\n\n        Args:\n            inputs: batch inputs\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        \"\"\"", "\n", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "samples", "=", "[", "inputs", "]", "\n", "# size of convolution support at each layer per node", "\n", "support_size", "=", "1", "\n", "support_sizes", "=", "[", "support_size", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "layer_infos", ")", ")", ":", "\n", "            ", "t", "=", "len", "(", "layer_infos", ")", "-", "k", "-", "1", "\n", "support_size", "*=", "layer_infos", "[", "t", "]", ".", "num_samples", "\n", "sampler", "=", "layer_infos", "[", "t", "]", ".", "neigh_sampler", "\n", "node", "=", "sampler", "(", "(", "self", ".", "g_id", ",", "samples", "[", "k", "]", ",", "layer_infos", "[", "t", "]", ".", "num_samples", ")", ")", "\n", "samples", ".", "append", "(", "tf", ".", "reshape", "(", "node", ",", "[", "support_size", "*", "batch_size", ",", "]", ")", ")", "\n", "support_sizes", ".", "append", "(", "support_size", ")", "\n", "", "return", "samples", ",", "support_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.SampleAndAggregate.aggregate": [[215, 270], ["range", "tensorflow.nn.embedding_lookup", "len", "range", "aggregators.append", "models.SampleAndAggregate.", "next_hidden.append", "models.SampleAndAggregate.aggregator_cls", "models.SampleAndAggregate.aggregator_cls", "len", "len", "tensorflow.reshape", "len"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "samples", ",", "input_features", ",", "dims", ",", "num_samples", ",", "support_sizes", ",", "batch_size", "=", "None", ",", "\n", "aggregators", "=", "None", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "model_size", "=", "\"small\"", ")", ":", "\n", "        ", "\"\"\" At each layer, aggregate hidden representations of neighbors to compute the hidden representations \n            at next layer.\n        Args:\n            samples: a list of samples of variable hops away for convolving at each layer of the\n                network. Length is the number of layers + 1. Each is a vector of node indices.\n            input_features: the input features for each sample of various hops away.\n            dims: a list of dimensions of the hidden representations from the input layer to the\n                final layer. Length is the number of layers + 1.\n            num_samples: list of number of samples for each layer.\n            support_sizes: the number of nodes to gather information from for each layer.\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        Returns:\n            The hidden representation at the final layer for all nodes in batch\n        \"\"\"", "\n", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "\n", "# length: number of layers + 1", "\n", "", "hidden", "=", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "input_features", ",", "node_samples", ")", "for", "node_samples", "in", "samples", "]", "\n", "new_agg", "=", "aggregators", "is", "None", "\n", "if", "new_agg", ":", "\n", "            ", "aggregators", "=", "[", "]", "\n", "", "for", "layer", "in", "range", "(", "len", "(", "num_samples", ")", ")", ":", "\n", "            ", "if", "new_agg", ":", "\n", "                ", "dim_mult", "=", "2", "if", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "# aggregator at current layer", "\n", "if", "layer", "==", "len", "(", "num_samples", ")", "-", "1", ":", "\n", "                    ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "dims", "[", "layer", "]", ",", "dims", "[", "layer", "+", "1", "]", ",", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "name", "=", "name", ",", "concat", "=", "concat", ",", "model_size", "=", "model_size", ")", "\n", "self", ".", "output_dim", "=", "dims", "[", "layer", "+", "1", "]", "\n", "\n", "", "else", ":", "\n", "                    ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "dims", "[", "layer", "]", ",", "dims", "[", "layer", "+", "1", "]", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "name", "=", "name", ",", "concat", "=", "concat", ",", "model_size", "=", "model_size", ")", "\n", "", "aggregators", ".", "append", "(", "aggregator", ")", "\n", "", "else", ":", "\n", "                ", "aggregator", "=", "aggregators", "[", "layer", "]", "\n", "# hidden representation at current layer for all support nodes that are various hops away", "\n", "", "next_hidden", "=", "[", "]", "\n", "# as layer increases, the number of support nodes needed decreases", "\n", "for", "hop", "in", "range", "(", "len", "(", "num_samples", ")", "-", "layer", ")", ":", "\n", "                ", "dim_mult", "=", "2", "if", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "neigh_dims", "=", "[", "batch_size", "*", "support_sizes", "[", "hop", "]", ",", "\n", "num_samples", "[", "len", "(", "num_samples", ")", "-", "hop", "-", "1", "]", ",", "\n", "dim_mult", "*", "dims", "[", "layer", "]", "]", "\n", "h", "=", "aggregator", "(", "(", "hidden", "[", "hop", "]", ",", "\n", "tf", ".", "reshape", "(", "hidden", "[", "hop", "+", "1", "]", ",", "neigh_dims", ")", ")", ")", "\n", "next_hidden", ".", "append", "(", "h", ")", "\n", "", "hidden", "=", "next_hidden", "\n", "", "return", "hidden", "[", "0", "]", ",", "aggregators", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.SampleAndAggregate._build": [[271, 310], ["tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.aggregate", "models.SampleAndAggregate.aggregate", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.aggregate", "prediction.BipartiteEdgePredLayer", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.cast", "len", "models.SampleAndAggregate.degrees.tolist"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.sample", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.sample", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.aggregate", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.aggregate", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.sample", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.aggregate"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "labels", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'batch2'", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "neg_samples", ",", "_", ",", "_", "=", "(", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "labels", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "FLAGS", ".", "neg_sample_size", ",", "\n", "unique", "=", "False", ",", "\n", "range_max", "=", "len", "(", "self", ".", "degrees", ")", ",", "\n", "distortion", "=", "0.75", ",", "\n", "unigrams", "=", "self", ".", "degrees", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "\n", "# perform \"convolution\"", "\n", "samples1", ",", "support_sizes1", "=", "self", ".", "sample", "(", "self", ".", "inputs1", ",", "self", ".", "layer_infos", ")", "\n", "samples2", ",", "support_sizes2", "=", "self", ".", "sample", "(", "self", ".", "inputs2", ",", "self", ".", "layer_infos", ")", "\n", "num_samples", "=", "[", "layer_info", ".", "num_samples", "for", "layer_info", "in", "self", ".", "layer_infos", "]", "\n", "self", ".", "outputs1", ",", "self", ".", "aggregators", "=", "self", ".", "aggregate", "(", "samples1", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes1", ",", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "self", ".", "outputs2", ",", "_", "=", "self", ".", "aggregate", "(", "samples2", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes2", ",", "aggregators", "=", "self", ".", "aggregators", ",", "concat", "=", "self", ".", "concat", ",", "\n", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "neg_samples", ",", "neg_support_sizes", "=", "self", ".", "sample", "(", "self", ".", "neg_samples", ",", "self", ".", "layer_infos", ",", "\n", "FLAGS", ".", "neg_sample_size", ")", "\n", "self", ".", "neg_outputs", ",", "_", "=", "self", ".", "aggregate", "(", "neg_samples", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "neg_support_sizes", ",", "batch_size", "=", "FLAGS", ".", "neg_sample_size", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "dim_mult", "=", "2", "if", "self", ".", "concat", "else", "1", "\n", "self", ".", "link_pred_layer", "=", "BipartiteEdgePredLayer", "(", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "\n", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "placeholders", ",", "act", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "bilinear_weights", "=", "False", ",", "\n", "name", "=", "'edge_predict'", ")", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs1", ",", "1", ")", "\n", "self", ".", "outputs2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs2", ",", "1", ")", "\n", "self", ".", "neg_outputs", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "neg_outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.SampleAndAggregate.build": [[311, 323], ["models.SampleAndAggregate._build", "models.SampleAndAggregate._loss", "models.SampleAndAggregate._accuracy", "models.SampleAndAggregate.optimizer.compute_gradients", "models.SampleAndAggregate.optimizer.apply_gradients", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._build", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._loss", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._accuracy"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build", "(", ")", "\n", "\n", "# TF graph management", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "loss", "/", "tf", ".", "cast", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "clipped_grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.0", ",", "5.0", ")", "if", "grad", "is", "not", "None", "else", "None", ",", "var", ")", "\n", "for", "grad", ",", "var", "in", "grads_and_vars", "]", "\n", "self", ".", "grad", ",", "_", "=", "clipped_grads_and_vars", "[", "0", "]", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "clipped_grads_and_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.SampleAndAggregate._loss": [[324, 331], ["models.SampleAndAggregate.link_pred_layer.loss", "tensorflow.summary.scalar", "aggregator.vars.values", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.loss"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "for", "aggregator", "in", "self", ".", "aggregators", ":", "\n", "            ", "for", "var", "in", "aggregator", ".", "vars", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "link_pred_layer", ".", "loss", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ",", "self", ".", "neg_outputs", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.SampleAndAggregate._accuracy": [[332, 345], ["models.SampleAndAggregate.link_pred_layer.affinity", "models.SampleAndAggregate.link_pred_layer.neg_cost", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.div", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "# shape: [batch_size]", "\n", "        ", "aff", "=", "self", ".", "link_pred_layer", ".", "affinity", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", "\n", "# shape : [batch_size x num_neg_samples]", "\n", "self", ".", "neg_aff", "=", "self", ".", "link_pred_layer", ".", "neg_cost", "(", "self", ".", "outputs1", ",", "self", ".", "neg_outputs", ")", "\n", "self", ".", "neg_aff", "=", "tf", ".", "reshape", "(", "self", ".", "neg_aff", ",", "[", "self", ".", "batch_size", ",", "FLAGS", ".", "neg_sample_size", "]", ")", "\n", "_aff", "=", "tf", ".", "expand_dims", "(", "aff", ",", "axis", "=", "1", ")", "\n", "self", ".", "aff_all", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "neg_aff", ",", "_aff", "]", ")", "\n", "size", "=", "tf", ".", "shape", "(", "self", ".", "aff_all", ")", "[", "1", "]", "\n", "_", ",", "indices_of_ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "aff_all", ",", "k", "=", "size", ")", "\n", "_", ",", "self", ".", "ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "indices_of_ranks", ",", "k", "=", "size", ")", "\n", "self", ".", "mrr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "div", "(", "1.0", ",", "tf", ".", "cast", "(", "self", ".", "ranks", "[", ":", ",", "-", "1", "]", "+", "1", ",", "tf", ".", "float32", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mrr'", ",", "self", ".", "mrr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel.__init__": [[348, 384], ["models.GeneralizedModel.__init__", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.GradientDescentOptimizer", "models.Node2VecModel.build", "tensorflow.random_uniform", "tensorflow.truncated_normal", "tensorflow.zeros", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.build", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "placeholders", ",", "dict_size", ",", "degrees", ",", "name", "=", "None", ",", "\n", "nodevec_dim", "=", "50", ",", "lr", "=", "0.001", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Simple version of Node2Vec/DeepWalk algorithm.\n\n        Args:\n            dict_size: the total number of nodes.\n            degrees: numpy array of node degrees, ordered as in the data's id_map\n            nodevec_dim: dimension of the vector representation of node.\n            lr: learning rate of optimizer.\n        \"\"\"", "\n", "\n", "super", "(", "Node2VecModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch1\"", "]", "\n", "self", ".", "inputs2", "=", "placeholders", "[", "\"batch2\"", "]", "\n", "\n", "self", ".", "batch_size", "=", "placeholders", "[", "'batch_size'", "]", "\n", "self", ".", "hidden_dim", "=", "nodevec_dim", "\n", "\n", "# following the tensorflow word2vec tutorial", "\n", "self", ".", "target_embeds", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_uniform", "(", "[", "dict_size", ",", "nodevec_dim", "]", ",", "-", "1", ",", "1", ")", ",", "\n", "name", "=", "\"target_embeds\"", ")", "\n", "self", ".", "context_embeds", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "truncated_normal", "(", "[", "dict_size", ",", "nodevec_dim", "]", ",", "\n", "stddev", "=", "1.0", "/", "math", ".", "sqrt", "(", "nodevec_dim", ")", ")", ",", "\n", "name", "=", "\"context_embeds\"", ")", "\n", "self", ".", "context_bias", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "zeros", "(", "[", "dict_size", "]", ")", ",", "\n", "name", "=", "\"context_bias\"", ")", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._build": [[385, 406], ["tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "prediction.BipartiteEdgePredLayer", "tensorflow.cast", "len", "models.Node2VecModel.degrees.tolist"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "labels", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'batch2'", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "neg_samples", ",", "_", ",", "_", "=", "(", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "labels", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "FLAGS", ".", "neg_sample_size", ",", "\n", "unique", "=", "True", ",", "\n", "range_max", "=", "len", "(", "self", ".", "degrees", ")", ",", "\n", "distortion", "=", "0.75", ",", "\n", "unigrams", "=", "self", ".", "degrees", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "target_embeds", ",", "self", ".", "inputs1", ")", "\n", "self", ".", "outputs2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_embeds", ",", "self", ".", "inputs2", ")", "\n", "self", ".", "outputs2_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_bias", ",", "self", ".", "inputs2", ")", "\n", "self", ".", "neg_outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_embeds", ",", "self", ".", "neg_samples", ")", "\n", "self", ".", "neg_outputs_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_bias", ",", "self", ".", "neg_samples", ")", "\n", "\n", "self", ".", "link_pred_layer", "=", "BipartiteEdgePredLayer", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "\n", "self", ".", "placeholders", ",", "bilinear_weights", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel.build": [[407, 413], ["models.Node2VecModel._build", "models.Node2VecModel._loss", "models.Node2VecModel._minimize", "models.Node2VecModel._accuracy"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._build", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._loss", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._minimize", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._accuracy"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build", "(", ")", "\n", "# TF graph management", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_minimize", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._minimize": [[414, 416], ["models.Node2VecModel.optimizer.minimize"], "methods", ["None"], ["", "def", "_minimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._loss": [[417, 427], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.summary.scalar", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.ones_like", "tensorflow.zeros_like"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "aff", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", ",", "1", ")", "+", "self", ".", "outputs2_bias", "\n", "neg_aff", "=", "tf", ".", "matmul", "(", "self", ".", "outputs1", ",", "tf", ".", "transpose", "(", "self", ".", "neg_outputs", ")", ")", "+", "self", ".", "neg_outputs_bias", "\n", "true_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "ones_like", "(", "aff", ")", ",", "logits", "=", "aff", ")", "\n", "negative_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "zeros_like", "(", "neg_aff", ")", ",", "logits", "=", "neg_aff", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "true_xent", ")", "+", "tf", ".", "reduce_sum", "(", "negative_xent", ")", "\n", "self", ".", "loss", "=", "loss", "/", "tf", ".", "cast", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Node2VecModel._accuracy": [[428, 441], ["models.Node2VecModel.link_pred_layer.affinity", "models.Node2VecModel.link_pred_layer.neg_cost", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.div", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "# shape: [batch_size]", "\n", "        ", "aff", "=", "self", ".", "link_pred_layer", ".", "affinity", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", "\n", "# shape : [batch_size x num_neg_samples]", "\n", "self", ".", "neg_aff", "=", "self", ".", "link_pred_layer", ".", "neg_cost", "(", "self", ".", "outputs1", ",", "self", ".", "neg_outputs", ")", "\n", "self", ".", "neg_aff", "=", "tf", ".", "reshape", "(", "self", ".", "neg_aff", ",", "[", "self", ".", "batch_size", ",", "FLAGS", ".", "neg_sample_size", "]", ")", "\n", "_aff", "=", "tf", ".", "expand_dims", "(", "aff", ",", "axis", "=", "1", ")", "\n", "self", ".", "aff_all", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "neg_aff", ",", "_aff", "]", ")", "\n", "size", "=", "tf", ".", "shape", "(", "self", ".", "aff_all", ")", "[", "1", "]", "\n", "_", ",", "indices_of_ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "aff_all", ",", "k", "=", "size", ")", "\n", "_", ",", "self", ".", "ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "indices_of_ranks", ",", "k", "=", "size", ")", "\n", "self", ".", "mrr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "div", "(", "1.0", ",", "tf", ".", "cast", "(", "self", ".", "ranks", "[", ":", ",", "-", "1", "]", "+", "1", ",", "tf", ".", "float32", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mrr'", ",", "self", ".", "mrr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.metrics.masked_logit_cross_entropy": [[7, 15], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.constant"], "function", ["None"], ["def", "masked_logit_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Logit cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "loss", ",", "axis", "=", "1", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "mask", ")", ",", "tf", ".", "constant", "(", "[", "1.", "]", ")", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.metrics.masked_softmax_cross_entropy": [[16, 23], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.constant"], "function", ["None"], ["", "def", "masked_softmax_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "mask", ")", ",", "tf", ".", "constant", "(", "[", "1.", "]", ")", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.metrics.masked_l2": [[25, 32], ["tensorflow.nn.l2", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "masked_l2", "(", "preds", ",", "actuals", ",", "mask", ")", ":", "\n", "    ", "\"\"\"L2 loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "l2", "(", "preds", ",", "actuals", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.metrics.masked_accuracy": [[33, 41], ["tensorflow.equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax"], "function", ["None"], ["", "def", "masked_accuracy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "preds", ",", "1", ")", ",", "tf", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "accuracy_all", "=", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "accuracy_all", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "accuracy_all", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MeanAggregator.__init__": [[11, 42], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MeanAggregator._call": [[43, 65], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanAggregator.act", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "neigh_means", "=", "tf", ".", "reduce_mean", "(", "neigh_vecs", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_means", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.GCNAggregator.__init__": [[72, 100], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "aggregators.GCNAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.GCNAggregator._call": [[101, 117], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "aggregators.GCNAggregator.act", "tensorflow.concat", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "means", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "concat", "(", "[", "neigh_vecs", ",", "\n", "tf", ".", "expand_dims", "(", "self_vecs", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "output", "=", "tf", ".", "matmul", "(", "means", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MaxPoolingAggregator.__init__": [[122, 168], ["layers.Layer.__init__", "aggregators.MaxPoolingAggregator.mlp_layers.append", "print", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MaxPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MaxPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "print", "(", "\"max pooling dimension {} and {}, {}\"", ".", "format", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ",", "self", ".", "concat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MaxPoolingAggregator._call": [[169, 197], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MaxPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_max", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MaxPoolingGraphAggregator.__init__": [[202, 243], ["layers.Layer.__init__", "aggregators.MaxPoolingGraphAggregator.mlp_layers.append", "print", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "aggregators.MaxPoolingGraphAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MaxPoolingGraphAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'weights'", ")", "\n", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "print", "(", "\"max pooling graph dimension {} and {}\"", ".", "format", "(", "self", ".", "input_dim", ",", "\n", "self", ".", "output_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MaxPoolingGraphAggregator._call": [[244, 265], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.matmul", "aggregators.MaxPoolingGraphAggregator.act", "l"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "node_vecs", ")", ":", "\n", "        ", "dims", "=", "tf", ".", "shape", "(", "node_vecs", ")", "\n", "num_nodes", "=", "dims", "[", "0", "]", "\n", "\n", "# [nodes] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "node_vecs", ",", "(", "num_nodes", ",", "self", ".", "input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "\n", "", "graph_h", "=", "tf", ".", "reduce_max", "(", "h_reshaped", ",", "axis", "=", "0", ")", "\n", "\n", "graph_h", "=", "tf", ".", "reshape", "(", "graph_h", ",", "(", "1", ",", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "output", "=", "tf", ".", "matmul", "(", "graph_h", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MeanPoolingAggregator.__init__": [[269, 314], ["layers.Layer.__init__", "aggregators.MeanPoolingAggregator.mlp_layers.append", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.MeanPoolingAggregator._call": [[315, 343], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_mean", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.TwoMaxLayerPoolingAggregator.__init__": [[348, 402], ["layers.Layer.__init__", "aggregators.TwoMaxLayerPoolingAggregator.mlp_layers.append", "aggregators.TwoMaxLayerPoolingAggregator.mlp_layers.append", "layers.Dense", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.TwoMaxLayerPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TwoMaxLayerPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim_1", "=", "self", ".", "hidden_dim_1", "=", "512", "\n", "hidden_dim_2", "=", "self", ".", "hidden_dim_2", "=", "256", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim_1", "=", "self", ".", "hidden_dim_1", "=", "1024", "\n", "hidden_dim_2", "=", "self", ".", "hidden_dim_2", "=", "512", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim_1", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "hidden_dim_1", ",", "\n", "output_dim", "=", "hidden_dim_2", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim_2", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.TwoMaxLayerPoolingAggregator._call": [[403, 431], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "aggregators.TwoMaxLayerPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim_2", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_max", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.SeqAggregator.__init__": [[435, 473], ["layers.Layer.__init__", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.SeqAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeqAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "128", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "256", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "self", ".", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.aggregators.SeqAggregator._call": [[474, 519], ["tensorflow.shape", "aggregators.SeqAggregator.cell.zero_state", "tensorflow.sign", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.cast", "int", "tensorflow.reshape", "tensorflow.gather", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.add_n", "aggregators.SeqAggregator.act", "tensorflow.reduce_max", "tensorflow.constant", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.shape", "tensorflow.add_n", "tensorflow.concat", "tensorflow.abs", "tensorflow.nn.dynamic_rnn", "rnn_outputs.get_shape", "tensorflow.range", "scope.reuse_variables", "tensorflow.nn.dynamic_rnn"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_vecs", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "initial_state", "=", "self", ".", "cell", ".", "zero_state", "(", "batch_size", ",", "tf", ".", "float32", ")", "\n", "used", "=", "tf", ".", "sign", "(", "tf", ".", "reduce_max", "(", "tf", ".", "abs", "(", "neigh_vecs", ")", ",", "axis", "=", "2", ")", ")", "\n", "length", "=", "tf", ".", "reduce_sum", "(", "used", ",", "axis", "=", "1", ")", "\n", "length", "=", "tf", ".", "maximum", "(", "length", ",", "tf", ".", "constant", "(", "1.", ")", ")", "\n", "length", "=", "tf", ".", "cast", "(", "length", ",", "tf", ".", "int32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "try", ":", "\n", "                ", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "self", ".", "cell", ",", "neigh_vecs", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "tf", ".", "float32", ",", "time_major", "=", "False", ",", "\n", "sequence_length", "=", "length", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "self", ".", "cell", ",", "neigh_vecs", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "tf", ".", "float32", ",", "time_major", "=", "False", ",", "\n", "sequence_length", "=", "length", ")", "\n", "", "", "batch_size", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "0", "]", "\n", "max_len", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "1", "]", "\n", "out_size", "=", "int", "(", "rnn_outputs", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "index", "=", "tf", ".", "range", "(", "0", ",", "batch_size", ")", "*", "max_len", "+", "(", "length", "-", "1", ")", "\n", "flat", "=", "tf", ".", "reshape", "(", "rnn_outputs", ",", "[", "-", "1", ",", "out_size", "]", ")", "\n", "neigh_h", "=", "tf", ".", "gather", "(", "flat", ",", "index", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Operator.__init__": [[4, 12], ["node.Operator._build_features"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator._build_features"], ["  ", "def", "__init__", "(", "self", ",", "idx", ",", "cpu", ",", "payload", ",", "ins", ",", "outs", ")", ":", "\n", "    ", "self", ".", "idx", "=", "idx", "\n", "self", ".", "cpu", "=", "cpu", "\n", "self", ".", "payload", "=", "payload", "\n", "self", ".", "ins", "=", "ins", "\n", "self", ".", "outs", "=", "outs", "\n", "self", ".", "neighbors", "=", "ins", "+", "outs", "\n", "self", ".", "_build_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Operator._build_features": [[13, 15], ["numpy.array"], "methods", ["None"], ["", "def", "_build_features", "(", "self", ")", ":", "\n", "    ", "self", ".", "feats", "=", "np", ".", "array", "(", "[", "self", ".", "cpu", ",", "self", ".", "payload", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Graph.__init__": [[17, 21], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "idx", ",", "num_nodes", ")", ":", "\n", "    ", "self", ".", "g_id", "=", "idx", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "node", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Graph.add_node": [[22, 24], ["node.Graph.node.append"], "methods", ["None"], ["", "def", "add_node", "(", "self", ",", "one_node", ")", ":", "\n", "    ", "self", ".", "node", ".", "append", "(", "one_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Graph.neighbors": [[25, 27], ["None"], "methods", ["None"], ["", "def", "neighbors", "(", "self", ",", "idx", ")", ":", "\n", "    ", "return", "self", ".", "node", "[", "idx", "]", ".", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Graph.ins": [[28, 30], ["None"], "methods", ["None"], ["", "def", "ins", "(", "self", ",", "idx", ")", ":", "\n", "    ", "return", "self", ".", "node", "[", "idx", "]", ".", "ins", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Graph.outs": [[31, 33], ["None"], "methods", ["None"], ["", "def", "outs", "(", "self", ",", "idx", ")", ":", "\n", "    ", "return", "self", ".", "node", "[", "idx", "]", ".", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.node.Graph.nodes": [[34, 36], ["None"], "methods", ["None"], ["", "def", "nodes", "(", "self", ")", ":", "\n", "    ", "return", "[", "n", ".", "idx", "for", "n", "in", "self", ".", "node", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.neigh_samplers.UniformNeighborSampler.__init__": [[20, 24], ["graphsage.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__"], ["def", "__init__", "(", "self", ",", "adj_ins", ",", "adj_outs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UniformNeighborSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "adj_ins", "=", "adj_ins", "\n", "self", ".", "adj_outs", "=", "adj_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.neigh_samplers.UniformNeighborSampler._call": [[26, 44], ["tensorflow.slice", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.slice", "tensorflow.slice", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.slice", "tensorflow.random_shuffle", "tensorflow.random_shuffle", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "      ", "g_id", ",", "ids", ",", "num_samples", ",", "ins", "=", "inputs", "\n", "num_nodes", "=", "self", ".", "adj_ins", ".", "shape", "[", "1", "]", "\n", "degrees", "=", "self", ".", "adj_ins", ".", "shape", "[", "2", "]", "\n", "if", "ins", ":", "\n", "        ", "cur_adj_info", "=", "tf", ".", "slice", "(", "self", ".", "adj_ins", ",", "[", "g_id", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "cur_adj_info", "=", "tf", ".", "reshape", "(", "cur_adj_info", ",", "[", "num_nodes", ",", "degrees", "]", ")", "\n", "adj_lists", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "cur_adj_info", ",", "ids", ")", "\n", "adj_lists", "=", "tf", ".", "transpose", "(", "tf", ".", "random_shuffle", "(", "tf", ".", "transpose", "(", "adj_lists", ")", ")", ")", "\n", "adj_lists", "=", "tf", ".", "slice", "(", "adj_lists", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "return", "adj_lists", "\n", "", "else", ":", "\n", "        ", "cur_adj_info", "=", "tf", ".", "slice", "(", "self", ".", "adj_outs", ",", "[", "g_id", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "cur_adj_info", "=", "tf", ".", "reshape", "(", "cur_adj_info", ",", "[", "num_nodes", ",", "degrees", "]", ")", "\n", "adj_lists", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "cur_adj_info", ",", "ids", ")", "\n", "adj_lists", "=", "tf", ".", "transpose", "(", "tf", ".", "random_shuffle", "(", "tf", ".", "transpose", "(", "adj_lists", ")", ")", ")", "\n", "adj_lists", "=", "tf", ".", "slice", "(", "adj_lists", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "return", "adj_lists", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.NodeMinibatchIterator.__init__": [[18, 26], ["G.nodes"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes"], ["def", "__init__", "(", "self", ",", "G", ",", "placeholders", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "G", "=", "G", "\n", "self", ".", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "train_nodes", "=", "self", ".", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.NodeMinibatchIterator.batch_feed_dict": [[27, 33], ["dict", "dict.update", "dict.update", "len"], "methods", ["None"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "val", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_nodes", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch_nodes", "}", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.NodeMinibatchIterator.next_minibatch_feed_dict": [[34, 40], ["len", "minibatch_order.NodeMinibatchIterator.batch_feed_dict"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "#feed all at a time for RL training", "\n", "        ", "start_idx", "=", "0", "\n", "end_idx", "=", "len", "(", "self", ".", "train_nodes", ")", "\n", "batch_nodes", "=", "self", ".", "train_nodes", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "batch_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.NodeMinibatchIterator.shuffle": [[41, 47], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_nodes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_nodes", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.__init__": [[59, 86], ["minibatch_order.GraphMinibatchIterator.construct_adj", "minibatch_order.GraphMinibatchIterator.construct_dep_sources", "numpy.random.seed", "int", "list", "set", "numpy.random.choice", "len", "minibatch_order.GraphMinibatchIterator.eval_graphs.append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.construct_adj", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.construct_dep_sources"], ["def", "__init__", "(", "self", ",", "graphs", ",", "placeholders", ",", "seed", "=", "1", ",", "upstream_devices_num", "=", "5", ",", "train_ratio", "=", "0.8", ",", "batch_size", "=", "\n", "32", ",", "max_degree", "=", "25", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "graphs", "=", "graphs", "\n", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "upstream_devices_num", "=", "upstream_devices_num", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "graph_num", "=", "0", "\n", "self", ".", "eval_graph_num", "=", "0", "\n", "\n", "self", ".", "adj_ins", ",", "self", ".", "adj_outs", ",", "self", ".", "deg", "=", "self", ".", "construct_adj", "(", ")", "\n", "\n", "self", ".", "construct_dep_sources", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "num_trains", "=", "(", "int", ")", "(", "train_ratio", "*", "len", "(", "self", ".", "graphs", ")", ")", "\n", "self", ".", "train_graphs", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "graphs", ",", "num_trains", ",", "replace", "=", "False", ")", ")", "\n", "train_sets", "=", "set", "(", "[", "g", ".", "real_idx", "for", "g", "in", "self", ".", "train_graphs", "]", ")", "\n", "self", ".", "eval_graphs", "=", "[", "]", "\n", "for", "g", "in", "self", ".", "graphs", ":", "\n", "          ", "if", "g", ".", "real_idx", "not", "in", "train_sets", ":", "\n", "            ", "self", ".", "eval_graphs", ".", "append", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.end": [[87, 89], ["len"], "methods", ["None"], ["", "", "", "def", "end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "graph_num", ">=", "len", "(", "self", ".", "train_graphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.eval_end": [[90, 96], ["len"], "methods", ["None"], ["", "def", "eval_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eval_graph_num", "==", "len", "(", "self", ".", "eval_graphs", ")", ":", "\n", "          ", "self", ".", "eval_graph_num", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "          ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.next_batch_size": [[97, 100], ["min", "len"], "methods", ["None"], ["", "", "def", "next_batch_size", "(", "self", ")", ":", "\n", "        ", "remaining", "=", "len", "(", "self", ".", "train_graphs", ")", "-", "self", ".", "graph_num", "\n", "return", "min", "(", "remaining", ",", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.construct_adj": [[101, 134], ["max", "numpy.zeros", "numpy.ones", "numpy.ones", "G.nodes", "len", "len", "numpy.array", "len", "numpy.array", "numpy.array", "G.nodes", "len", "len", "len", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "G.neighbors", "G.ins", "G.outs", "len", "numpy.random.choice", "len", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.ones", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.ones", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.neighbors", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.ins", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.outs"], ["", "def", "construct_adj", "(", "self", ")", ":", "\n", "        ", "max_graph_size", "=", "max", "(", "[", "len", "(", "G", ".", "nodes", "(", ")", ")", "for", "G", "in", "self", ".", "graphs", "]", ")", "\n", "\n", "adj_ins", "=", "max_graph_size", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "graphs", ")", ",", "max_graph_size", "+", "1", ",", "self", ".", "max_degree", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "adj_outs", "=", "max_graph_size", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "graphs", ")", ",", "max_graph_size", "+", "1", ",", "self", ".", "max_degree", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "graphs", ")", ",", "max_graph_size", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "G", "in", "self", ".", "graphs", ":", "\n", "            ", "for", "nodeid", "in", "G", ".", "nodes", "(", ")", ":", "\n", "                ", "neighbors", "=", "np", ".", "array", "(", "[", "_", "for", "_", "in", "G", ".", "neighbors", "(", "nodeid", ")", "]", ")", "\n", "deg", "[", "G", ".", "g_id", ",", "nodeid", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "ins", "=", "np", ".", "array", "(", "[", "_", "for", "_", "in", "G", ".", "ins", "(", "nodeid", ")", "]", ")", "\n", "outs", "=", "np", ".", "array", "(", "[", "_", "for", "_", "in", "G", ".", "outs", "(", "nodeid", ")", "]", ")", "\n", "\n", "if", "len", "(", "ins", ")", "!=", "0", ":", "\n", "                  ", "if", "len", "(", "ins", ")", ">=", "self", ".", "max_degree", ":", "\n", "                      ", "ins", "=", "np", ".", "random", ".", "choice", "(", "ins", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "ins", ")", "<", "self", ".", "max_degree", ":", "\n", "                      ", "ins", "=", "np", ".", "random", ".", "choice", "(", "ins", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj_ins", "[", "G", ".", "g_id", ",", "nodeid", ",", ":", "]", "=", "ins", "\n", "\n", "", "if", "len", "(", "outs", ")", "!=", "0", ":", "\n", "                  ", "if", "len", "(", "outs", ")", ">=", "self", ".", "max_degree", ":", "\n", "                      ", "outs", "=", "np", ".", "random", ".", "choice", "(", "outs", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "outs", ")", "<", "self", ".", "max_degree", ":", "\n", "                      ", "outs", "=", "np", ".", "random", ".", "choice", "(", "outs", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj_outs", "[", "G", ".", "g_id", ",", "nodeid", ",", ":", "]", "=", "outs", "\n", "\n", "", "", "", "return", "adj_ins", ",", "adj_outs", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.construct_dep_sources": [[135, 177], ["enumerate", "print", "G.nodes", "numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "deps.append", "source_weights.append", "source_counts.append", "len", "G.neighbors", "print", "min", "len", "len", "len", "len", "numpy.random.choice", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.choice.append", "numpy.array", "G.node[].get_weight", "G.node[].get_weight", "numpy.random.choice.tolist", "numpy.random.choice.tolist", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.neighbors", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.get_weight", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.get_weight"], ["", "def", "construct_dep_sources", "(", "self", ")", ":", "\n", "        ", "deps", "=", "[", "]", "\n", "source_counts", "=", "[", "]", "\n", "source_weights", "=", "[", "]", "\n", "for", "idx", ",", "G", "in", "enumerate", "(", "self", ".", "graphs", ")", ":", "\n", "            ", "print", "(", "\"processing graph {} id {}\"", ".", "format", "(", "idx", ",", "G", ".", "g_id", ")", ")", "\n", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "node_sources", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes", ")", ",", "self", ".", "upstream_devices_num", ")", ",", "dtype", "=", "int", ")", "\n", "node_source_weights", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes", ")", ",", "self", ".", "upstream_devices_num", ")", ",", "dtype", "=", "float", ")", "\n", "node_num_sources", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes", ")", ")", ",", "dtype", "=", "int", ")", "\n", "#should iterate through the ordered list", "\n", "print", "(", "\"iterating graph {} order {}\"", ".", "format", "(", "G", ".", "g_id", ",", "G", ".", "order", ")", ")", "\n", "for", "nidx", "in", "nodes", ":", "\n", "                ", "nodeid", "=", "G", ".", "order", "[", "nidx", "]", "\n", "\n", "neighs", "=", "G", ".", "neighbors", "(", "nodeid", ")", "\n", "\n", "ins", "=", "[", "]", "\n", "for", "n", "in", "neighs", ":", "\n", "                  ", "order", "=", "G", ".", "reverse_order", "[", "n", "]", "\n", "if", "order", "<", "nidx", ":", "\n", "                    ", "ins", ".", "append", "(", "n", ")", "\n", "\n", "", "", "print", "(", "\"{} source {}\"", ".", "format", "(", "nodeid", ",", "ins", ")", ")", "\n", "\n", "node_num_sources", "[", "nodeid", "]", "=", "min", "(", "len", "(", "ins", ")", ",", "self", ".", "upstream_devices_num", ")", "\n", "\n", "if", "len", "(", "ins", ")", ">", "self", ".", "upstream_devices_num", ":", "\n", "                    ", "ins", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "ins", ")", ",", "self", ".", "upstream_devices_num", ",", "replace", "=", "False", ")", "\n", "node_sources", "[", "nodeid", ",", ":", "]", "=", "np", ".", "array", "(", "[", "G", ".", "reverse_order", "[", "i", "]", "for", "i", "in", "ins", ".", "tolist", "(", ")", "]", ")", "\n", "node_source_weights", "[", "nodeid", ",", ":", "]", "=", "np", ".", "array", "(", "G", ".", "node", "[", "nodeid", "]", ".", "get_weight", "(", "ins", ".", "tolist", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "node_sources", "[", "nodeid", ",", ":", "len", "(", "ins", ")", "]", "=", "np", ".", "array", "(", "[", "G", ".", "reverse_order", "[", "i", "]", "for", "i", "in", "ins", "]", ")", "\n", "node_source_weights", "[", "nodeid", ",", ":", "len", "(", "ins", ")", "]", "=", "np", ".", "array", "(", "G", ".", "node", "[", "nodeid", "]", ".", "get_weight", "(", "ins", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "", "deps", ".", "append", "(", "node_sources", ")", "\n", "source_weights", ".", "append", "(", "node_source_weights", ")", "\n", "source_counts", ".", "append", "(", "node_num_sources", ")", "\n", "\n", "", "self", ".", "deps", "=", "deps", "\n", "self", ".", "source_counts", "=", "source_counts", "\n", "self", ".", "source_weights", "=", "source_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.batch_feed_dict": [[178, 188], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "len", "len"], "methods", ["None"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "cpu_weights", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", ",", "val", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_nodes", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch_nodes", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_sources'", "]", ":", "sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_source_weights'", "]", ":", "source_weights", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_num_sources'", "]", ":", "num_sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'graph_idx'", "]", ":", "graph_idx", "}", ")", "\n", "self", ".", "graph_num", "+=", "1", "\n", "return", "feed_dict", ",", "batch_nodes", ",", "cpu_weights", ",", "len", "(", "batch_nodes", ")", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.next_minibatch_feed_dict": [[189, 198], ["minibatch_order.GraphMinibatchIterator.batch_feed_dict", "cpu_weights.append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "#feed all at a time for RL training", "\n", "        ", "G", "=", "self", ".", "train_graphs", "[", "self", ".", "graph_num", "]", "\n", "#nodes = G.nodes()", "\n", "nodes", "=", "G", ".", "order", "\n", "cpu_weights", "=", "[", "]", "\n", "for", "n", "in", "nodes", ":", "\n", "          ", "cpu_weights", ".", "append", "(", "G", ".", "node", "[", "n", "]", ".", "weighted_load", ")", "\n", "", "return", "self", ".", "batch_feed_dict", "(", "nodes", ",", "cpu_weights", ",", "self", ".", "deps", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_weights", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_counts", "[", "G", ".", "g_id", "]", ",", "G", ".", "g_id", ",", "G", ".", "real_idx", ",", "G", ".", "max_throughput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.shuffle": [[199, 205], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_graphs", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_graphs", ")", "\n", "self", ".", "graph_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.eval_batch_feed_dict": [[206, 216], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "len", "len"], "methods", ["None"], ["", "def", "eval_batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "cpu_weights", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", ",", "val", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_nodes", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_sources'", "]", ":", "sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_source_weights'", "]", ":", "source_weights", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_num_sources'", "]", ":", "num_sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch_nodes", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'graph_idx'", "]", ":", "graph_idx", "}", ")", "\n", "self", ".", "eval_graph_num", "+=", "1", "\n", "return", "feed_dict", ",", "batch_nodes", ",", "cpu_weights", ",", "len", "(", "batch_nodes", ")", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_order.GraphMinibatchIterator.next_eval_minibatch_feed_dict": [[217, 227], ["minibatch_order.GraphMinibatchIterator.eval_batch_feed_dict", "cpu_weights.append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.eval_batch_feed_dict"], ["", "def", "next_eval_minibatch_feed_dict", "(", "self", ")", ":", "\n", "#feed all at a time for RL training", "\n", "        ", "G", "=", "self", ".", "eval_graphs", "[", "self", ".", "eval_graph_num", "]", "\n", "#nodes = G.nodes()", "\n", "#cpu_weights = [n.weighted_load for n in G.node]", "\n", "nodes", "=", "G", ".", "order", "\n", "cpu_weights", "=", "[", "]", "\n", "for", "n", "in", "nodes", ":", "\n", "          ", "cpu_weights", ".", "append", "(", "G", ".", "node", "[", "n", "]", ".", "weighted_load", ")", "\n", "", "return", "self", ".", "eval_batch_feed_dict", "(", "nodes", ",", "cpu_weights", ",", "self", ".", "deps", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_weights", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_counts", "[", "G", ".", "g_id", "]", ",", "G", ".", "g_id", ",", "G", ".", "real_idx", ",", "G", ".", "max_throughput", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.NodeMinibatchIterator.__init__": [[18, 26], ["G.nodes"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes"], ["def", "__init__", "(", "self", ",", "G", ",", "placeholders", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "G", "=", "G", "\n", "self", ".", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "train_nodes", "=", "self", ".", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.NodeMinibatchIterator.batch_feed_dict": [[27, 33], ["dict", "dict.update", "dict.update", "len"], "methods", ["None"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "val", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_nodes", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch_nodes", "}", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.NodeMinibatchIterator.next_minibatch_feed_dict": [[34, 40], ["len", "minibatch_eval.NodeMinibatchIterator.batch_feed_dict"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "#feed all at a time for RL training", "\n", "        ", "start_idx", "=", "0", "\n", "end_idx", "=", "len", "(", "self", ".", "train_nodes", ")", "\n", "batch_nodes", "=", "self", ".", "train_nodes", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "batch_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.NodeMinibatchIterator.shuffle": [[41, 47], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_nodes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_nodes", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.__init__": [[59, 87], ["minibatch_eval.GraphMinibatchIterator.construct_adj", "minibatch_eval.GraphMinibatchIterator.construct_dep_sources", "numpy.random.seed", "int", "list", "print", "set", "numpy.random.choice", "len", "minibatch_eval.GraphMinibatchIterator.eval_graphs.append"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.construct_adj", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.construct_dep_sources"], ["def", "__init__", "(", "self", ",", "graphs", ",", "placeholders", ",", "seed", "=", "1", ",", "upstream_devices_num", "=", "5", ",", "train_ratio", "=", "0.8", ",", "batch_size", "=", "\n", "32", ",", "max_degree", "=", "25", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "graphs", "=", "graphs", "\n", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "upstream_devices_num", "=", "upstream_devices_num", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "graph_num", "=", "0", "\n", "self", ".", "eval_graph_num", "=", "0", "\n", "\n", "self", ".", "adj_ins", ",", "self", ".", "adj_outs", ",", "self", ".", "deg", "=", "self", ".", "construct_adj", "(", ")", "\n", "\n", "self", ".", "construct_dep_sources", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "num_trains", "=", "(", "int", ")", "(", "train_ratio", "*", "len", "(", "self", ".", "graphs", ")", ")", "\n", "self", ".", "train_graphs", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "graphs", ",", "num_trains", ",", "replace", "=", "False", ")", ")", "\n", "print", "(", "[", "g", ".", "real_idx", "for", "g", "in", "self", ".", "train_graphs", "]", ")", "\n", "train_sets", "=", "set", "(", "[", "g", ".", "real_idx", "for", "g", "in", "self", ".", "train_graphs", "]", ")", "\n", "self", ".", "eval_graphs", "=", "[", "]", "\n", "for", "g", "in", "self", ".", "graphs", ":", "\n", "          ", "if", "g", ".", "real_idx", "not", "in", "train_sets", ":", "\n", "            ", "self", ".", "eval_graphs", ".", "append", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.end": [[88, 90], ["len"], "methods", ["None"], ["", "", "", "def", "end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "graph_num", ">=", "len", "(", "self", ".", "train_graphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.eval_end": [[91, 97], ["len"], "methods", ["None"], ["", "def", "eval_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eval_graph_num", "==", "len", "(", "self", ".", "eval_graphs", ")", ":", "\n", "          ", "self", ".", "eval_graph_num", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "          ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.next_batch_size": [[98, 101], ["min", "len"], "methods", ["None"], ["", "", "def", "next_batch_size", "(", "self", ")", ":", "\n", "        ", "remaining", "=", "len", "(", "self", ".", "train_graphs", ")", "-", "self", ".", "graph_num", "\n", "return", "min", "(", "remaining", ",", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.construct_adj": [[102, 135], ["max", "numpy.zeros", "numpy.ones", "numpy.ones", "G.nodes", "len", "len", "numpy.array", "len", "numpy.array", "numpy.array", "G.nodes", "len", "len", "len", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "G.neighbors", "G.ins", "G.outs", "len", "numpy.random.choice", "len", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.ones", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.ones", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.neighbors", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.ins", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.outs"], ["", "def", "construct_adj", "(", "self", ")", ":", "\n", "        ", "max_graph_size", "=", "max", "(", "[", "len", "(", "G", ".", "nodes", "(", ")", ")", "for", "G", "in", "self", ".", "graphs", "]", ")", "\n", "\n", "adj_ins", "=", "max_graph_size", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "graphs", ")", ",", "max_graph_size", "+", "1", ",", "self", ".", "max_degree", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "adj_outs", "=", "max_graph_size", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "graphs", ")", ",", "max_graph_size", "+", "1", ",", "self", ".", "max_degree", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "graphs", ")", ",", "max_graph_size", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "G", "in", "self", ".", "graphs", ":", "\n", "            ", "for", "nodeid", "in", "G", ".", "nodes", "(", ")", ":", "\n", "                ", "neighbors", "=", "np", ".", "array", "(", "[", "_", "for", "_", "in", "G", ".", "neighbors", "(", "nodeid", ")", "]", ")", "\n", "deg", "[", "G", ".", "g_id", ",", "nodeid", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "ins", "=", "np", ".", "array", "(", "[", "_", "for", "_", "in", "G", ".", "ins", "(", "nodeid", ")", "]", ")", "\n", "outs", "=", "np", ".", "array", "(", "[", "_", "for", "_", "in", "G", ".", "outs", "(", "nodeid", ")", "]", ")", "\n", "\n", "if", "len", "(", "ins", ")", "!=", "0", ":", "\n", "                  ", "if", "len", "(", "ins", ")", ">=", "self", ".", "max_degree", ":", "\n", "                      ", "ins", "=", "np", ".", "random", ".", "choice", "(", "ins", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "ins", ")", "<", "self", ".", "max_degree", ":", "\n", "                      ", "ins", "=", "np", ".", "random", ".", "choice", "(", "ins", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj_ins", "[", "G", ".", "g_id", ",", "nodeid", ",", ":", "]", "=", "ins", "\n", "\n", "", "if", "len", "(", "outs", ")", "!=", "0", ":", "\n", "                  ", "if", "len", "(", "outs", ")", ">=", "self", ".", "max_degree", ":", "\n", "                      ", "outs", "=", "np", ".", "random", ".", "choice", "(", "outs", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "outs", ")", "<", "self", ".", "max_degree", ":", "\n", "                      ", "outs", "=", "np", ".", "random", ".", "choice", "(", "outs", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj_outs", "[", "G", ".", "g_id", ",", "nodeid", ",", ":", "]", "=", "outs", "\n", "\n", "", "", "", "return", "adj_ins", ",", "adj_outs", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.construct_dep_sources": [[136, 166], ["enumerate", "print", "G.nodes", "numpy.zeros", "numpy.zeros", "numpy.zeros", "deps.append", "source_weights.append", "source_counts.append", "len", "G.ins", "min", "len", "len", "len", "len", "numpy.random.choice", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "G.node[].get_in_weight", "G.node[].get_in_weight", "numpy.random.choice.tolist", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.ins", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.get_in_weight", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.get_in_weight"], ["", "def", "construct_dep_sources", "(", "self", ")", ":", "\n", "        ", "deps", "=", "[", "]", "\n", "source_counts", "=", "[", "]", "\n", "source_weights", "=", "[", "]", "\n", "for", "idx", ",", "G", "in", "enumerate", "(", "self", ".", "graphs", ")", ":", "\n", "            ", "print", "(", "\"processing graph {} id {}\"", ".", "format", "(", "idx", ",", "G", ".", "g_id", ")", ")", "\n", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "node_sources", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes", ")", ",", "self", ".", "upstream_devices_num", ")", ",", "dtype", "=", "int", ")", "\n", "node_source_weights", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes", ")", ",", "self", ".", "upstream_devices_num", ")", ",", "dtype", "=", "float", ")", "\n", "node_num_sources", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes", ")", ")", ",", "dtype", "=", "int", ")", "\n", "for", "nodeid", "in", "nodes", ":", "\n", "                ", "ins", "=", "G", ".", "ins", "(", "nodeid", ")", "\n", "\n", "node_num_sources", "[", "nodeid", "]", "=", "min", "(", "len", "(", "ins", ")", ",", "self", ".", "upstream_devices_num", ")", "\n", "\n", "if", "len", "(", "ins", ")", ">", "self", ".", "upstream_devices_num", ":", "\n", "                    ", "ins", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "ins", ")", ",", "self", ".", "upstream_devices_num", ",", "replace", "=", "False", ")", "\n", "node_sources", "[", "nodeid", ",", ":", "]", "=", "ins", "\n", "node_source_weights", "[", "nodeid", ",", ":", "]", "=", "np", ".", "array", "(", "G", ".", "node", "[", "nodeid", "]", ".", "get_in_weight", "(", "ins", ".", "tolist", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "node_sources", "[", "nodeid", ",", ":", "len", "(", "ins", ")", "]", "=", "np", ".", "array", "(", "ins", ")", "\n", "node_source_weights", "[", "nodeid", ",", ":", "len", "(", "ins", ")", "]", "=", "np", ".", "array", "(", "G", ".", "node", "[", "nodeid", "]", ".", "get_in_weight", "(", "ins", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "", "deps", ".", "append", "(", "node_sources", ")", "\n", "source_weights", ".", "append", "(", "node_source_weights", ")", "\n", "source_counts", ".", "append", "(", "node_num_sources", ")", "\n", "\n", "", "self", ".", "deps", "=", "deps", "\n", "self", ".", "source_counts", "=", "source_counts", "\n", "self", ".", "source_weights", "=", "source_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.batch_feed_dict": [[167, 177], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "len", "len"], "methods", ["None"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "cpu_weights", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", ",", "val", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_nodes", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch_nodes", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_sources'", "]", ":", "sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_source_weights'", "]", ":", "source_weights", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_num_sources'", "]", ":", "num_sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'graph_idx'", "]", ":", "graph_idx", "}", ")", "\n", "self", ".", "graph_num", "+=", "1", "\n", "return", "feed_dict", ",", "batch_nodes", ",", "cpu_weights", ",", "len", "(", "batch_nodes", ")", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.next_minibatch_feed_dict": [[178, 184], ["G.nodes", "minibatch_eval.GraphMinibatchIterator.batch_feed_dict"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "#feed all at a time for RL training", "\n", "        ", "G", "=", "self", ".", "train_graphs", "[", "self", ".", "graph_num", "]", "\n", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "cpu_weights", "=", "[", "n", ".", "weighted_load", "for", "n", "in", "G", ".", "node", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "nodes", ",", "cpu_weights", ",", "self", ".", "deps", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_weights", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_counts", "[", "G", ".", "g_id", "]", ",", "G", ".", "g_id", ",", "G", ".", "real_idx", ",", "G", ".", "max_throughput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.shuffle": [[185, 191], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_graphs", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_graphs", ")", "\n", "self", ".", "graph_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.eval_batch_feed_dict": [[192, 202], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "len", "len"], "methods", ["None"], ["", "def", "eval_batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "cpu_weights", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", ",", "val", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_nodes", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_sources'", "]", ":", "sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_source_weights'", "]", ":", "source_weights", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_num_sources'", "]", ":", "num_sources", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch_nodes", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'graph_idx'", "]", ":", "graph_idx", "}", ")", "\n", "self", ".", "eval_graph_num", "+=", "1", "\n", "return", "feed_dict", ",", "batch_nodes", ",", "cpu_weights", ",", "len", "(", "batch_nodes", ")", ",", "sources", ",", "source_weights", ",", "num_sources", ",", "graph_idx", ",", "real_idx", ",", "max_throughput", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.next_eval_minibatch_feed_dict": [[203, 209], ["G.nodes", "minibatch_eval.GraphMinibatchIterator.eval_batch_feed_dict"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.eval_batch_feed_dict"], ["", "def", "next_eval_minibatch_feed_dict", "(", "self", ")", ":", "\n", "#feed all at a time for RL training", "\n", "        ", "G", "=", "self", ".", "eval_graphs", "[", "self", ".", "eval_graph_num", "]", "\n", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "cpu_weights", "=", "[", "n", ".", "weighted_load", "for", "n", "in", "G", ".", "node", "]", "\n", "return", "self", ".", "eval_batch_feed_dict", "(", "nodes", ",", "cpu_weights", ",", "self", ".", "deps", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_weights", "[", "G", ".", "g_id", "]", ",", "self", ".", "source_counts", "[", "G", ".", "g_id", "]", ",", "G", ".", "g_id", ",", "G", ".", "real_idx", ",", "G", ".", "max_throughput", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.__init__": [[13, 67], ["graphsage.layers.Layer.__init__", "tensorflow.variable_scope", "prediction.BipartiteEdgePredLayer._log_vars", "tensorflow.get_variable", "graphsage.inits.zeros", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "input_dim1", ",", "input_dim2", ",", "placeholders", ",", "dropout", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "loss_fn", "=", "'xent'", ",", "neg_sample_weights", "=", "1.0", ",", "\n", "bias", "=", "False", ",", "bilinear_weights", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Basic class that applies skip-gram-like loss\n        (i.e., dot product of node+target and node and negative samples)\n        Args:\n            bilinear_weights: use a bilinear weight for affinity calculation: u^T A v. If set to\n                false, it is assumed that input dimensions are the same and the affinity will be \n                based on dot product.\n        \"\"\"", "\n", "super", "(", "BipartiteEdgePredLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "input_dim1", "=", "input_dim1", "\n", "self", ".", "input_dim2", "=", "input_dim2", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "eps", "=", "1e-7", "\n", "\n", "# Margin for hinge loss", "\n", "self", ".", "margin", "=", "0.1", "\n", "self", ".", "neg_sample_weights", "=", "neg_sample_weights", "\n", "\n", "self", ".", "bilinear_weights", "=", "bilinear_weights", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "# output a likelihood term", "\n", "", "self", ".", "output_dim", "=", "1", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "# bilinear form", "\n", "            ", "if", "bilinear_weights", ":", "\n", "#self.vars['weights'] = glorot([input_dim1, input_dim2],", "\n", "#                              name='pred_weights')", "\n", "                ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "\n", "'pred_weights'", ",", "\n", "shape", "=", "(", "input_dim1", ",", "input_dim2", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "loss_fn", "==", "'xent'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_xent_loss", "\n", "", "elif", "loss_fn", "==", "'skipgram'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_skipgram_loss", "\n", "", "elif", "loss_fn", "==", "'hinge'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_hinge_loss", "\n", "\n", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.affinity": [[68, 81], ["tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.transpose"], "methods", ["None"], ["", "", "def", "affinity", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "\"\"\" Affinity score between batch of inputs1 and inputs2.\n        Args:\n            inputs1: tensor of shape [batch_size x feature_size].\n        \"\"\"", "\n", "# shape: [batch_size, input_dim1]", "\n", "if", "self", ".", "bilinear_weights", ":", "\n", "            ", "prod", "=", "tf", ".", "matmul", "(", "inputs2", ",", "tf", ".", "transpose", "(", "self", ".", "vars", "[", "'weights'", "]", ")", ")", "\n", "self", ".", "prod", "=", "prod", "\n", "result", "=", "tf", ".", "reduce_sum", "(", "inputs1", "*", "prod", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "tf", ".", "reduce_sum", "(", "inputs1", "*", "inputs2", ",", "axis", "=", "1", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.neg_cost": [[82, 93], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["None"], ["", "def", "neg_cost", "(", "self", ",", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "\"\"\" For each input in batch, compute the sum of its affinity to negative samples.\n\n        Returns:\n            Tensor of shape [batch_size x num_neg_samples]. For each node, a list of affinities to\n                negative samples is computed.\n        \"\"\"", "\n", "if", "self", ".", "bilinear_weights", ":", "\n", "            ", "inputs1", "=", "tf", ".", "matmul", "(", "inputs1", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "", "neg_aff", "=", "tf", ".", "matmul", "(", "inputs1", ",", "tf", ".", "transpose", "(", "neg_samples", ")", ")", "\n", "return", "neg_aff", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.loss": [[94, 101], ["prediction.BipartiteEdgePredLayer.loss_fn"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ")", ":", "\n", "        ", "\"\"\" negative sampling loss.\n        Args:\n            neg_samples: tensor of shape [num_neg_samples x input_dim2]. Negative samples for all\n            inputs in batch inputs1.\n        \"\"\"", "\n", "return", "self", ".", "loss_fn", "(", "inputs1", ",", "inputs2", ",", "neg_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer._xent_loss": [[102, 111], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_xent_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "true_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "ones_like", "(", "aff", ")", ",", "logits", "=", "aff", ")", "\n", "negative_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "zeros_like", "(", "neg_aff", ")", ",", "logits", "=", "neg_aff", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "true_xent", ")", "+", "self", ".", "neg_sample_weights", "*", "tf", ".", "reduce_sum", "(", "negative_xent", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer._skipgram_loss": [[112, 118], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_skipgram_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "neg_cost", "=", "tf", ".", "log", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "neg_aff", ")", ",", "axis", "=", "1", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "aff", "-", "neg_cost", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer._hinge_loss": [[119, 126], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.subtract", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_hinge_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "diff", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "subtract", "(", "neg_aff", ",", "tf", ".", "expand_dims", "(", "aff", ",", "1", ")", "-", "self", ".", "margin", ")", ",", "name", "=", "'diff'", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "diff", ")", "\n", "self", ".", "neg_shape", "=", "tf", ".", "shape", "(", "neg_aff", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.prediction.BipartiteEdgePredLayer.weights_norm": [[127, 129], ["tensorflow.nn.l2_norm"], "methods", ["None"], ["", "def", "weights_norm", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "l2_norm", "(", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer.__init__": [[42, 55], ["kwargs.keys", "kwargs.get", "kwargs.get", "layers.Layer.__class__.__name__.lower", "str", "layers.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._call": [[56, 58], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer.__call__": [[59, 67], ["tensorflow.name_scope", "layers.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Dense._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars": [[68, 71], ["tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Dense.__init__": [[75, 103], ["layers.Layer.__init__", "tensorflow.variable_scope", "tensorflow.get_variable", "layers.Dense._log_vars", "graphsage.inits.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Layer._log_vars", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dropout", "=", "0.", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "placeholders", "=", "None", ",", "bias", "=", "True", ",", "featureless", "=", "False", ",", "\n", "sparse_inputs", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "if", "sparse_inputs", ":", "\n", "            ", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "FLAGS", ".", "weight_decay", ")", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.Dense._call": [[104, 117], ["tensorflow.nn.dropout", "tensorflow.matmul", "layers.Dense.act"], "methods", ["None"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.layers.get_layer_uid": [[19, 27], ["None"], "function", ["None"], ["def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.__init__": [[10, 64], ["graphsage.GeneralizedModel.__init__", "graphsage.GeneralizedModel.__init__", "tensorflow.Variable", "print", "supervised_models.SupervisedGraphsage.dims.extend", "print", "supervised_models.SupervisedGraphsage.build_aggregators", "supervised_models.SupervisedGraphsage.build", "tensorflow.constant", "int", "range", "len", "Exception"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.build_aggregators", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "features", ",", "\n", "layer_infos", ",", "batch_size", "=", "32", ",", "concat", "=", "True", ",", "aggregator_type", "=", "\"mean\"", ",", "\n", "model_size", "=", "\"small\"", ",", "name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            - placeholders: Stanford TensorFlow placeholder object.\n            - features: Numpy array with node features.\n            - layer_infos: List of SAGEInfo namedtuples that describe the parameters of all \n                   the recursive layers. See SAGEInfo definition above.\n            - concat: whether to concatenate during recursive iterations\n            - aggregator_type: how to aggregate neighbor information\n            - model_size: one of \"small\" and \"big\"\n        '''", "\n", "\n", "models", ".", "GeneralizedModel", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "\n", "if", "aggregator_type", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanAggregator", "\n", "", "elif", "aggregator_type", "==", "\"seq\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "SeqAggregator", "\n", "", "elif", "aggregator_type", "==", "\"meanpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"maxpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MaxPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"gcn\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "GCNAggregator", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown aggregator: \"", ",", "self", ".", "aggregator_cls", ")", "\n", "\n", "", "self", ".", "graph_aggregator_cls", "=", "MaxPoolingGraphAggregator", "\n", "\n", "# get info from placeholders...", "\n", "self", ".", "model_size", "=", "model_size", "\n", "\n", "#features: shape (num_graphs, num_nodes, 2)", "\n", "#get the features related to this graph", "\n", "#self.features = features #tf.Variable(tf.constant(features[self.g_id], dtype=tf.float32), trainable=False)", "\n", "self", ".", "features", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "self", ".", "concat", "=", "concat", "\n", "print", "(", "self", ".", "features", ".", "shape", ")", "\n", "self", ".", "dims", "=", "[", "int", "(", "self", ".", "features", ".", "shape", "[", "2", "]", ")", "]", "#last dimention", "\n", "self", ".", "dims", ".", "extend", "(", "[", "layer_infos", "[", "i", "]", ".", "output_dim", "for", "i", "in", "range", "(", "len", "(", "layer_infos", ")", ")", "]", ")", "\n", "print", "(", "self", ".", "dims", ")", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "layer_infos", "=", "layer_infos", "\n", "\n", "self", ".", "env_batch_size", "=", "batch_size", "\n", "\n", "#self.optimizer = tf.train.AdamOptimizer(learning_rate=FLAGS.learning_rate)", "\n", "self", ".", "build_aggregators", "(", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.build_aggregators": [[66, 87], ["len", "range", "supervised_models.SupervisedGraphsage.graph_aggregator_cls", "supervised_models.SupervisedGraphsage.aggregators.append", "supervised_models.SupervisedGraphsage.aggregator_cls", "supervised_models.SupervisedGraphsage.aggregator_cls"], "methods", ["None"], ["", "def", "build_aggregators", "(", "self", ")", ":", "\n", "        ", "self", ".", "aggregators", "=", "[", "]", "\n", "self", ".", "num_layers", "=", "len", "(", "self", ".", "layer_infos", ")", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "dim_mult", "=", "2", "if", "self", ".", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "# aggregator at current layer", "\n", "if", "layer", "==", "self", ".", "num_layers", "-", "1", ":", "\n", "                ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "self", ".", "dims", "[", "layer", "]", ",", "\n", "self", ".", "dims", "[", "layer", "+", "1", "]", ",", "act", "=", "lambda", "x", ":", "x", ",", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "self", ".", "output_dim", "=", "self", ".", "dims", "[", "layer", "+", "1", "]", "*", "dim_mult", "\n", "\n", "", "else", ":", "\n", "                ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "self", ".", "dims", "[", "layer", "]", ",", "self", ".", "dims", "[", "layer", "+", "1", "]", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "", "self", ".", "aggregators", ".", "append", "(", "aggregator", ")", "\n", "\n", "", "self", ".", "graph_aggregator", "=", "self", ".", "graph_aggregator_cls", "(", "self", ".", "output_dim", "*", "2", ",", "\n", "self", ".", "output_dim", "*", "2", ",", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.build": [[88, 119], ["supervised_models.SupervisedGraphsage.sample", "tensorflow.slice", "tensorflow.reshape", "supervised_models.SupervisedGraphsage.aggregate", "tensorflow.nn.l2_normalize", "supervised_models.SupervisedGraphsage.sample", "tensorflow.slice", "tensorflow.reshape", "supervised_models.SupervisedGraphsage.aggregate", "tensorflow.nn.l2_normalize", "tensorflow.concat", "supervised_models.SupervisedGraphsage.graph_aggregator"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.sample", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.aggregate", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.sample", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.aggregate"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "num_samples", "=", "[", "layer_info", ".", "num_samples", "for", "layer_info", "in", "self", ".", "layer_infos", "]", "\n", "\n", "g_id", "=", "self", ".", "placeholders", "[", "'graph_idx'", "]", "\n", "\n", "samples1", ",", "support_sizes1", "=", "self", ".", "sample", "(", "g_id", ",", "self", ".", "placeholders", "[", "'batch'", "]", ",", "self", ".", "placeholders", "[", "'batch_size'", "]", ",", "True", ")", "\n", "\n", "features", "=", "tf", ".", "slice", "(", "self", ".", "features", ",", "[", "g_id", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "features", "=", "tf", ".", "reshape", "(", "features", ",", "[", "self", ".", "features", ".", "shape", "[", "1", "]", ",", "self", ".", "features", ".", "shape", "[", "2", "]", "]", ")", "\n", "outputs1", "=", "self", ".", "aggregate", "(", "samples1", ",", "[", "features", "]", ",", "num_samples", ",", "\n", "support_sizes1", ",", "self", ".", "placeholders", "[", "'batch_size'", "]", ",", "\n", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "outputs1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "outputs1", ",", "1", ")", "\n", "\n", "samples2", ",", "support_sizes2", "=", "self", ".", "sample", "(", "g_id", ",", "self", ".", "placeholders", "[", "'batch'", "]", ",", "self", ".", "placeholders", "[", "'batch_size'", "]", ",", "False", ")", "\n", "\n", "features", "=", "tf", ".", "slice", "(", "self", ".", "features", ",", "[", "g_id", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "features", "=", "tf", ".", "reshape", "(", "features", ",", "[", "self", ".", "features", ".", "shape", "[", "1", "]", ",", "self", ".", "features", ".", "shape", "[", "2", "]", "]", ")", "\n", "#features = tf.gather(self.features, g_id)", "\n", "#num_nodes = features.shape[0]", "\n", "#num_feats = features.shape[1]", "\n", "#features = tf.reshape(features, [num_nodes, num_feats])", "\n", "outputs2", "=", "self", ".", "aggregate", "(", "samples2", ",", "[", "features", "]", ",", "num_samples", ",", "\n", "support_sizes2", ",", "self", ".", "placeholders", "[", "'batch_size'", "]", ",", "\n", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "outputs2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "outputs2", ",", "1", ")", "\n", "\n", "self", ".", "node_preds", "=", "tf", ".", "concat", "(", "[", "outputs1", ",", "outputs2", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "graph_preds", "=", "self", ".", "graph_aggregator", "(", "self", ".", "node_preds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.get_node_preds": [[121, 123], ["None"], "methods", ["None"], ["", "def", "get_node_preds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.get_graph_preds": [[124, 126], ["None"], "methods", ["None"], ["", "def", "get_graph_preds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "graph_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.sample": [[127, 147], ["range", "len", "sampler", "samples.append", "support_sizes.append", "tensorflow.reshape", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "g_id", ",", "inputs", ",", "batch_size", ",", "ins", ")", ":", "\n", "        ", "\"\"\" Sample neighbors to be the supportive fields for multi-layer convolutions.\n\n        Args:\n            inputs: batch inputs\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        \"\"\"", "\n", "\n", "samples", "=", "[", "inputs", "]", "\n", "# size of convolution support at each layer per node", "\n", "support_size", "=", "1", "\n", "support_sizes", "=", "[", "support_size", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "layer_infos", ")", ")", ":", "\n", "            ", "t", "=", "len", "(", "self", ".", "layer_infos", ")", "-", "k", "-", "1", "\n", "support_size", "*=", "self", ".", "layer_infos", "[", "t", "]", ".", "num_samples", "\n", "sampler", "=", "self", ".", "layer_infos", "[", "t", "]", ".", "neigh_sampler", "\n", "node", "=", "sampler", "(", "(", "g_id", ",", "samples", "[", "k", "]", ",", "self", ".", "layer_infos", "[", "t", "]", ".", "num_samples", ",", "ins", ")", ")", "\n", "samples", ".", "append", "(", "tf", ".", "reshape", "(", "node", ",", "[", "support_size", "*", "batch_size", ",", "]", ")", ")", "\n", "support_sizes", ".", "append", "(", "support_size", ")", "\n", "", "return", "samples", ",", "support_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_models.SupervisedGraphsage.aggregate": [[149, 184], ["range", "tensorflow.nn.embedding_lookup", "len", "range", "aggregator", "next_hidden.append", "len", "tensorflow.reshape", "len"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "samples", ",", "input_features", ",", "num_samples", ",", "support_sizes", ",", "batch_size", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "model_size", "=", "\"small\"", ")", ":", "\n", "        ", "\"\"\" At each layer, aggregate hidden representations of neighbors to compute the hidden representations \n            at next layer.\n        Args:\n            samples: a list of samples of variable hops away for convolving at each layer of the\n                network. Length is the number of layers + 1. Each is a vector of node indices.\n            input_features: the input features for each sample of various hops away.\n            dims: a list of dimensions of the hidden representations from the input layer to the\n                final layer. Length is the number of layers + 1.\n            num_samples: list of number of samples for each layer.\n            support_sizes: the number of nodes to gather information from for each layer.\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        Returns:\n            The hidden representation at the final layer for all nodes in batch\n        \"\"\"", "\n", "\n", "\n", "# length: number of layers + 1", "\n", "hidden", "=", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "input_features", ",", "node_samples", ")", "for", "node_samples", "in", "samples", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "num_samples", ")", ")", ":", "\n", "            ", "aggregator", "=", "self", ".", "aggregators", "[", "layer", "]", "\n", "# hidden representation at current layer for all support nodes that are various hops away", "\n", "next_hidden", "=", "[", "]", "\n", "# as layer increases, the number of support nodes needed decreases", "\n", "for", "hop", "in", "range", "(", "len", "(", "num_samples", ")", "-", "layer", ")", ":", "\n", "                ", "dim_mult", "=", "2", "if", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "neigh_dims", "=", "[", "batch_size", "*", "support_sizes", "[", "hop", "]", ",", "\n", "num_samples", "[", "len", "(", "num_samples", ")", "-", "hop", "-", "1", "]", ",", "\n", "dim_mult", "*", "self", ".", "dims", "[", "layer", "]", "]", "\n", "h", "=", "aggregator", "(", "(", "hidden", "[", "hop", "]", ",", "\n", "tf", ".", "reshape", "(", "hidden", "[", "hop", "+", "1", "]", ",", "neigh_dims", ")", ")", ")", "\n", "next_hidden", ".", "append", "(", "h", ")", "\n", "", "hidden", "=", "next_hidden", "\n", "", "return", "hidden", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.log_dir": [[63, 72], ["os.path.exists", "os.makedirs", "FLAGS.train_prefix.split"], "function", ["None"], ["def", "log_dir", "(", ")", ":", "\n", "    ", "log_dir", "=", "FLAGS", ".", "base_log_dir", "+", "\"/sup-\"", "+", "FLAGS", ".", "train_prefix", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "log_dir", "+=", "\"/{model:s}_{model_size:s}_{lr:0.4f}/\"", ".", "format", "(", "\n", "model", "=", "FLAGS", ".", "model", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "lr", "=", "FLAGS", ".", "learning_rate", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.construct_placeholders": [[73, 81], ["tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder"], "function", ["None"], ["", "def", "construct_placeholders", "(", ")", ":", "\n", "# Define placeholders", "\n", "    ", "placeholders", "=", "{", "\n", "'batch'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'batch1'", ")", ",", "\n", "'dropout'", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ",", "name", "=", "'dropout'", ")", ",", "\n", "'batch_size'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'batch_size'", ")", ",", "\n", "}", "\n", "return", "placeholders", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.train": [[82, 232], ["supervised_train.construct_placeholders", "graphsage.minibatch.NodeMinibatchIterator", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tf.Session.run", "range", "print", "numpy.vstack", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "supervised_train.log_dir", "tensorflow.global_variables_initializer", "graphsage.minibatch.NodeMinibatchIterator.shuffle", "print", "epoch_val_costs.append", "graphsage.minibatch.NodeMinibatchIterator.next_minibatch_feed_dict", "minibatch.next_minibatch_feed_dict.update", "time.time", "tf.Session.run", "print", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "numpy.zeros", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "time.time", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "Exception", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.construct_placeholders", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.log_dir", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.shuffle", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.minibatch_eval.GraphMinibatchIterator.next_minibatch_feed_dict", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["", "def", "train", "(", "train_data", ",", "test_data", "=", "None", ")", ":", "\n", "\n", "    ", "G", "=", "train_data", "[", "0", "]", "\n", "features", "=", "train_data", "[", "1", "]", "\n", "\n", "if", "not", "features", "is", "None", ":", "\n", "# pad with dummy zero vector", "\n", "        ", "features", "=", "np", ".", "vstack", "(", "[", "features", ",", "np", ".", "zeros", "(", "(", "features", ".", "shape", "[", "1", "]", ",", ")", ")", "]", ")", "\n", "\n", "", "placeholders", "=", "construct_placeholders", "(", ")", "\n", "minibatch", "=", "NodeMinibatchIterator", "(", "G", ",", "\n", "placeholders", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "max_degree", "=", "FLAGS", ".", "max_degree", ")", "\n", "adj_info_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "minibatch", ".", "adj", ".", "shape", ")", "\n", "adj_info", "=", "tf", ".", "Variable", "(", "adj_info_ph", ",", "trainable", "=", "False", ",", "name", "=", "\"adj_info\"", ")", "\n", "\n", "if", "FLAGS", ".", "model", "==", "'graphsage_mean'", ":", "\n", "# Create model", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "if", "FLAGS", ".", "samples_3", "!=", "0", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_3", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "", "elif", "FLAGS", ".", "samples_2", "!=", "0", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "", "else", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", "]", "\n", "\n", "", "model", "=", "SupervisedGraphsage", "(", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "", "elif", "FLAGS", ".", "model", "==", "'gcn'", ":", "\n", "# Create model", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "2", "*", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "2", "*", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"gcn\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "concat", "=", "False", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_seq'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"seq\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_maxpool'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"maxpool\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_meanpool'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"meanpool\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Error: model name unrecognized.'", ")", "\n", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "#config.gpu_options.per_process_gpu_memory_fraction = GPU_MEM_FRACTION", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "\n", "# Initialize session", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", "(", ")", ",", "sess", ".", "graph", ")", "\n", "\n", "# Init variables", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "feed_dict", "=", "{", "adj_info_ph", ":", "minibatch", ".", "adj", "}", ")", "\n", "\n", "# Train model", "\n", "\n", "total_steps", "=", "0", "\n", "avg_time", "=", "0.0", "\n", "epoch_val_costs", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "FLAGS", ".", "epochs", ")", ":", "\n", "        ", "minibatch", ".", "shuffle", "(", ")", "\n", "\n", "iter", "=", "0", "\n", "print", "(", "'Epoch: %04d'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "epoch_val_costs", ".", "append", "(", "0", ")", "\n", "\n", "# Construct feed dictionary", "\n", "feed_dict", "=", "minibatch", ".", "next_minibatch_feed_dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'dropout'", "]", ":", "FLAGS", ".", "dropout", "}", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "# Training step", "\n", "outs", "=", "sess", ".", "run", "(", "[", "model", ".", "node_preds", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "print", "(", "outs", "[", "0", "]", ".", "shape", ")", "\n", "#if total_steps % FLAGS.print_every == 0:", "\n", "#   summary_writer.add_summary(outs[0], total_steps)", "\n", "\n", "# Print results", "\n", "avg_time", "=", "(", "avg_time", "*", "total_steps", "+", "time", ".", "time", "(", ")", "-", "t", ")", "/", "(", "total_steps", "+", "1", ")", "\n", "\n", "iter", "+=", "1", "\n", "total_steps", "+=", "1", "\n", "\n", "if", "total_steps", ">", "FLAGS", ".", "max_total_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.main": [[233, 238], ["print", "graphsage.utils.load_data", "print", "supervised_train.train"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.load_data", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.supervised_train.train"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Loading training data..\"", ")", "\n", "train_data", "=", "load_data", "(", "FLAGS", ".", "train_prefix", ")", "\n", "print", "(", "\"Done loading training data..\"", ")", "\n", "train", "(", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.uniform": [[9, 13], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.glorot": [[15, 20], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros": [[22, 26], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.ones": [[27, 31], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.__init__": [[10, 22], ["utils.Operator._build_features"], "methods", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator._build_features"], ["    ", "def", "__init__", "(", "self", ",", "idx", ",", "cpu", ",", "payload", ",", "weight", ")", ":", "\n", "        ", "self", ".", "idx", "=", "idx", "\n", "self", ".", "cpu", "=", "cpu", "\n", "self", ".", "payload", "=", "payload", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "weighted_load", "=", "cpu", "*", "weight", "\n", "self", ".", "ins", "=", "[", "]", "\n", "self", ".", "in_weights", "=", "{", "}", "\n", "self", ".", "outs", "=", "[", "]", "\n", "self", ".", "out_weights", "=", "{", "}", "\n", "self", ".", "weights", "=", "{", "}", "\n", "self", ".", "_build_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.add_in": [[23, 27], ["utils.Operator.ins.append"], "methods", ["None"], ["", "def", "add_in", "(", "self", ",", "up_op", ",", "weight", ")", ":", "\n", "        ", "self", ".", "ins", ".", "append", "(", "up_op", ")", "\n", "self", ".", "in_weights", "[", "up_op", "]", "=", "weight", "\n", "self", ".", "weights", "[", "up_op", "]", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.add_out": [[28, 32], ["utils.Operator.outs.append"], "methods", ["None"], ["", "def", "add_out", "(", "self", ",", "down_op", ",", "weight", ")", ":", "\n", "        ", "self", ".", "outs", ".", "append", "(", "down_op", ")", "\n", "self", ".", "out_weights", "[", "down_op", "]", "=", "weight", "\n", "self", ".", "weights", "[", "down_op", "]", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.get_in_weight": [[33, 38], ["weights.append"], "methods", ["None"], ["", "def", "get_in_weight", "(", "self", ",", "indices", ")", ":", "\n", "        ", "weights", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "weights", ".", "append", "(", "self", ".", "in_weights", "[", "i", "]", ")", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.get_weight": [[39, 44], ["w.append"], "methods", ["None"], ["", "def", "get_weight", "(", "self", ",", "indices", ")", ":", "\n", "        ", "w", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "w", ".", "append", "(", "self", ".", "weights", "[", "i", "]", ")", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator._build_neightbors": [[45, 47], ["None"], "methods", ["None"], ["", "def", "_build_neightbors", "(", "self", ")", ":", "\n", "        ", "self", ".", "neighbors", "=", "self", ".", "ins", "+", "self", ".", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator._build_features": [[48, 50], ["numpy.array"], "methods", ["None"], ["", "def", "_build_features", "(", "self", ")", ":", "\n", "        ", "self", ".", "feats", "=", "np", ".", "array", "(", "[", "self", ".", "weighted_load", ",", "self", ".", "payload", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.__init__": [[52, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx", ",", "num_nodes", ",", "real_idx", "=", "-", "1", ",", "max_throughput", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "g_id", "=", "idx", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "real_idx", "=", "real_idx", "\n", "self", ".", "node", "=", "[", "]", "\n", "self", ".", "max_throughput", "=", "max_throughput", "\n", "self", ".", "order", "=", "[", "]", "\n", "self", ".", "reverse_order", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.add_node": [[61, 63], ["utils.Graph.node.append"], "methods", ["None"], ["", "def", "add_node", "(", "self", ",", "one_node", ")", ":", "\n", "        ", "self", ".", "node", ".", "append", "(", "one_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.neighbors": [[64, 66], ["None"], "methods", ["None"], ["", "def", "neighbors", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "node", "[", "idx", "]", ".", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.ins": [[67, 69], ["None"], "methods", ["None"], ["", "def", "ins", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "node", "[", "idx", "]", ".", "ins", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.outs": [[70, 72], ["None"], "methods", ["None"], ["", "def", "outs", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "node", "[", "idx", "]", ".", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes": [[73, 75], ["None"], "methods", ["None"], ["", "def", "nodes", "(", "self", ")", ":", "\n", "        ", "return", "[", "n", ".", "idx", "for", "n", "in", "self", ".", "node", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.load_data": [[77, 94], ["json.load", "len", "utils.Graph", "numpy.vstack", "open", "utils.Operator", "utils.Graph.add_node", "StandardScaler", "StandardScaler.fit", "StandardScaler.transform"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.load", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.add_node"], ["", "", "def", "load_data", "(", "prefix", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "nodes", "=", "[", "]", "\n", "G_data", "=", "json", ".", "load", "(", "open", "(", "prefix", "+", "\"-adj.json\"", ")", ")", "\n", "num_ops", "=", "len", "(", "G_data", "[", "'ops'", "]", ")", "\n", "G", "=", "Graph", "(", "num_ops", ")", "\n", "for", "op", "in", "G_data", "[", "'ops'", "]", ":", "\n", "      ", "node", "=", "Operator", "(", "op", "[", "'idx'", "]", ",", "op", "[", "'cpu'", "]", ",", "op", "[", "'payload'", "]", ",", "op", "[", "'ins'", "]", ",", "op", "[", "'outs'", "]", ")", "\n", "G", ".", "add_node", "(", "node", ")", "\n", "\n", "", "feats", "=", "np", ".", "vstack", "(", "n", ".", "feats", "for", "n", "in", "G", ".", "node", ")", "\n", "if", "normalize", "and", "not", "feats", "is", "None", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "StandardScaler", "\n", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "feats", ")", "\n", "feats", "=", "scaler", ".", "transform", "(", "feats", ")", "\n", "\n", "", "return", "G", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.load_folder_data": [[95, 130], ["os.listdir", "numpy.vstack", "max", "enumerate", "StandardScaler", "StandardScaler.fit", "enumerate", "range", "filename.endswith", "filename.startswith", "json.load", "int", "len", "utils.Graph", "graphs.append", "numpy.vstack", "all_feats.append", "StandardScaler.transform", "len", "numpy.vstack", "open", "len", "utils.Operator", "utils.Graph.add_node", "utils.Graph.nodes", "os.path.join", "[].split", "numpy.log", "numpy.zeros", "filename.split"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.load", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.add_node", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["", "def", "load_folder_data", "(", "folder", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "graphs", "=", "[", "]", "\n", "all_feats", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "\".json\"", ")", "and", "filename", ".", "startswith", "(", "\"graph\"", ")", ":", "\n", "            ", "nodes", "=", "[", "]", "\n", "G_data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", ")", "\n", "g_idx", "=", "int", "(", "filename", ".", "split", "(", "'.json'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "num_ops", "=", "len", "(", "G_data", "[", "'ops'", "]", ")", "\n", "G", "=", "Graph", "(", "len", "(", "graphs", ")", ",", "num_ops", ",", "real_idx", "=", "g_idx", ")", "\n", "for", "op", "in", "G_data", "[", "'ops'", "]", ":", "\n", "              ", "node", "=", "Operator", "(", "op", "[", "'idx'", "]", ",", "op", "[", "'cpu'", "]", ",", "op", "[", "'payload'", "]", ",", "op", "[", "'ins'", "]", ",", "op", "[", "'outs'", "]", ")", "\n", "G", ".", "add_node", "(", "node", ")", "\n", "\n", "", "graphs", ".", "append", "(", "G", ")", "\n", "feats", "=", "np", ".", "vstack", "(", "[", "np", ".", "log", "(", "n", ".", "feats", "+", "0.00000001", ")", "for", "n", "in", "G", ".", "node", "]", ")", "\n", "all_feats", ".", "append", "(", "feats", ")", "\n", "\n", "", "", "feats", "=", "np", ".", "vstack", "(", "_", "for", "_", "in", "all_feats", ")", "\n", "\n", "if", "normalize", "and", "not", "feats", "is", "None", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "StandardScaler", "\n", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "feats", ")", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "            ", "all_feats", "[", "idx", "]", "=", "scaler", ".", "transform", "(", "f", ")", "\n", "\n", "", "", "max_graph_size", "=", "max", "(", "[", "len", "(", "G", ".", "nodes", "(", ")", ")", "for", "G", "in", "graphs", "]", ")", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "      ", "num_nodes", "=", "f", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "max_graph_size", "-", "num_nodes", ")", ":", "\n", "        ", "f", "=", "np", ".", "vstack", "(", "[", "f", ",", "np", ".", "zeros", "(", "(", "f", ".", "shape", "[", "1", "]", ",", ")", ")", "]", ")", "\n", "", "all_feats", "[", "idx", "]", "=", "f", "\n", "\n", "", "return", "graphs", ",", "all_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.load_ordered_folder_data": [[131, 185], ["os.listdir", "len", "range", "numpy.vstack", "max", "enumerate", "numpy.vstack", "all_feats.append", "graphs.append", "StandardScaler", "StandardScaler.fit", "enumerate", "range", "filename.endswith", "filename.startswith", "json.load", "int", "len", "float", "int", "utils.Graph", "StandardScaler.transform", "len", "numpy.vstack", "open", "utils.Operator", "utils.Graph.add_node", "Graph.node[].add_in", "Graph.node[].add_out", "op._build_neightbors", "numpy.log", "utils.Graph.nodes", "os.path.join", "[].split", "numpy.zeros", "filename.split"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.load", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.add_node", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.add_in", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.add_out", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator._build_neightbors", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["", "def", "load_ordered_folder_data", "(", "folder", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "graph_map", "=", "{", "}", "\n", "graphs", "=", "[", "]", "\n", "all_feats", "=", "[", "]", "\n", "num_vms", "=", "0", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "\".json\"", ")", "and", "filename", ".", "startswith", "(", "\"graph\"", ")", ":", "\n", "            ", "nodes", "=", "[", "]", "\n", "G_data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", ")", "\n", "g_idx", "=", "int", "(", "filename", ".", "split", "(", "'.json'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "num_ops", "=", "len", "(", "G_data", "[", "'operators'", "]", ")", "\n", "max_throughput", "=", "float", "(", "G_data", "[", "'max_throughput'", "]", ")", "\n", "num_vms", "=", "int", "(", "G_data", "[", "'num_vms'", "]", ")", "\n", "G", "=", "Graph", "(", "g_idx", ",", "num_ops", ",", "real_idx", "=", "g_idx", ",", "max_throughput", "=", "max_throughput", ")", "\n", "for", "op", "in", "G_data", "[", "'operators'", "]", ":", "\n", "              ", "node", "=", "Operator", "(", "op", "[", "'idx'", "]", ",", "op", "[", "'cpu'", "]", ",", "op", "[", "'payload'", "]", ",", "op", "[", "'weight'", "]", ")", "\n", "G", ".", "add_node", "(", "node", ")", "\n", "\n", "", "for", "edge", "in", "G_data", "[", "'connections'", "]", ":", "\n", "              ", "from_vertex", "=", "edge", "[", "'from_vertex'", "]", "\n", "to_vertex", "=", "edge", "[", "'to_vertex'", "]", "\n", "weight", "=", "edge", "[", "'weight'", "]", "\n", "G", ".", "node", "[", "to_vertex", "]", ".", "add_in", "(", "from_vertex", ",", "weight", ")", "\n", "G", ".", "node", "[", "from_vertex", "]", ".", "add_out", "(", "to_vertex", ",", "weight", ")", "\n", "\n", "", "for", "op", "in", "G", ".", "node", ":", "\n", "              ", "op", ".", "_build_neightbors", "(", ")", "\n", "\n", "", "graph_map", "[", "g_idx", "]", "=", "G", "\n", "\n", "", "", "num_graphs", "=", "len", "(", "graph_map", ")", "\n", "for", "idx", "in", "range", "(", "num_graphs", ")", ":", "\n", "      ", "G", "=", "graph_map", "[", "idx", "]", "\n", "feats", "=", "np", ".", "vstack", "(", "[", "np", ".", "log", "(", "n", ".", "feats", "+", "0.00000001", ")", "for", "n", "in", "G", ".", "node", "]", ")", "\n", "all_feats", ".", "append", "(", "feats", ")", "\n", "graphs", ".", "append", "(", "G", ")", "\n", "\n", "", "feats", "=", "np", ".", "vstack", "(", "_", "for", "_", "in", "all_feats", ")", "\n", "\n", "if", "normalize", "and", "not", "feats", "is", "None", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "StandardScaler", "\n", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "feats", ")", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "            ", "all_feats", "[", "idx", "]", "=", "scaler", ".", "transform", "(", "f", ")", "\n", "\n", "", "", "max_graph_size", "=", "max", "(", "[", "len", "(", "G", ".", "nodes", "(", ")", ")", "for", "G", "in", "graphs", "]", ")", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "      ", "num_nodes", "=", "f", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "max_graph_size", "-", "num_nodes", ")", ":", "\n", "        ", "f", "=", "np", ".", "vstack", "(", "[", "f", ",", "np", ".", "zeros", "(", "(", "f", ".", "shape", "[", "1", "]", ",", ")", ")", "]", ")", "\n", "", "all_feats", "[", "idx", "]", "=", "f", "\n", "\n", "", "return", "graphs", ",", "all_feats", ",", "num_vms", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.load_sorted_folder_data": [[186, 248], ["os.listdir", "len", "range", "numpy.vstack", "max", "enumerate", "numpy.vstack", "all_feats.append", "graphs.append", "orders.append", "reverse_orders.append", "StandardScaler", "StandardScaler.fit", "enumerate", "range", "filename.endswith", "filename.startswith", "json.load", "int", "len", "float", "int", "utils.Graph", "numpy.argsort().tolist", "enumerate", "StandardScaler.transform", "len", "numpy.vstack", "open", "utils.Operator", "utils.Graph.add_node", "Graph.node[].add_in", "Graph.node[].add_out", "op._build_neightbors", "numpy.log", "utils.Graph.nodes", "os.path.join", "[].split", "numpy.argsort", "numpy.zeros", "filename.split"], "function", ["home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.models.Model.load", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.add_node", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.add_in", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator.add_out", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Operator._build_neightbors", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.utils.Graph.nodes", "home.repos.pwc.inspect_result.xiangni_DREAM.graphsage.inits.zeros"], ["", "def", "load_sorted_folder_data", "(", "folder", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "graph_map", "=", "{", "}", "\n", "graphs", "=", "[", "]", "\n", "all_feats", "=", "[", "]", "\n", "orders", "=", "[", "]", "\n", "reverse_orders", "=", "[", "]", "\n", "num_vms", "=", "0", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "\".json\"", ")", "and", "filename", ".", "startswith", "(", "\"graph\"", ")", ":", "\n", "            ", "G_data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", ")", "\n", "g_idx", "=", "int", "(", "filename", ".", "split", "(", "'.json'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "num_ops", "=", "len", "(", "G_data", "[", "'operators'", "]", ")", "\n", "max_throughput", "=", "float", "(", "G_data", "[", "'max_throughput'", "]", ")", "\n", "num_vms", "=", "int", "(", "G_data", "[", "'num_vms'", "]", ")", "\n", "G", "=", "Graph", "(", "g_idx", ",", "num_ops", ",", "real_idx", "=", "g_idx", ",", "max_throughput", "=", "max_throughput", ")", "\n", "for", "op", "in", "G_data", "[", "'operators'", "]", ":", "\n", "              ", "node", "=", "Operator", "(", "op", "[", "'idx'", "]", ",", "op", "[", "'cpu'", "]", ",", "op", "[", "'payload'", "]", ",", "op", "[", "'weight'", "]", ")", "\n", "G", ".", "add_node", "(", "node", ")", "\n", "\n", "", "for", "edge", "in", "G_data", "[", "'connections'", "]", ":", "\n", "              ", "from_vertex", "=", "edge", "[", "'from_vertex'", "]", "\n", "to_vertex", "=", "edge", "[", "'to_vertex'", "]", "\n", "weight", "=", "edge", "[", "'weight'", "]", "\n", "G", ".", "node", "[", "to_vertex", "]", ".", "add_in", "(", "from_vertex", ",", "weight", ")", "\n", "G", ".", "node", "[", "from_vertex", "]", ".", "add_out", "(", "to_vertex", ",", "weight", ")", "\n", "\n", "", "for", "op", "in", "G", ".", "node", ":", "\n", "              ", "op", ".", "_build_neightbors", "(", ")", "\n", "\n", "", "op_cpus", "=", "[", "o", ".", "weighted_load", "*", "-", "1", "for", "o", "in", "G", ".", "node", "]", "\n", "G", ".", "order", "=", "np", ".", "argsort", "(", "op_cpus", ")", ".", "tolist", "(", ")", "\n", "G", ".", "reverse_order", "=", "[", "None", "]", "*", "G", ".", "num_nodes", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "G", ".", "order", ")", ":", "\n", "              ", "G", ".", "reverse_order", "[", "idx", "]", "=", "i", "\n", "", "graph_map", "[", "g_idx", "]", "=", "G", "\n", "\n", "", "", "num_graphs", "=", "len", "(", "graph_map", ")", "\n", "for", "idx", "in", "range", "(", "num_graphs", ")", ":", "\n", "      ", "G", "=", "graph_map", "[", "idx", "]", "\n", "feats", "=", "np", ".", "vstack", "(", "[", "np", ".", "log", "(", "n", ".", "feats", "+", "0.00000001", ")", "for", "n", "in", "G", ".", "node", "]", ")", "\n", "all_feats", ".", "append", "(", "feats", ")", "\n", "graphs", ".", "append", "(", "G", ")", "\n", "orders", ".", "append", "(", "G", ".", "order", ")", "\n", "reverse_orders", ".", "append", "(", "G", ".", "reverse_order", ")", "\n", "\n", "", "feats", "=", "np", ".", "vstack", "(", "_", "for", "_", "in", "all_feats", ")", "\n", "\n", "if", "normalize", "and", "not", "feats", "is", "None", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "StandardScaler", "\n", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "feats", ")", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "            ", "all_feats", "[", "idx", "]", "=", "scaler", ".", "transform", "(", "f", ")", "\n", "\n", "", "", "max_graph_size", "=", "max", "(", "[", "len", "(", "G", ".", "nodes", "(", ")", ")", "for", "G", "in", "graphs", "]", ")", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "all_feats", ")", ":", "\n", "      ", "num_nodes", "=", "f", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "max_graph_size", "-", "num_nodes", ")", ":", "\n", "        ", "f", "=", "np", ".", "vstack", "(", "[", "f", ",", "np", ".", "zeros", "(", "(", "f", ".", "shape", "[", "1", "]", ",", ")", ")", "]", ")", "\n", "", "all_feats", "[", "idx", "]", "=", "f", "\n", "\n", "", "return", "graphs", ",", "orders", ",", "reverse_orders", ",", "all_feats", ",", "num_vms", "\n", "\n"]]}