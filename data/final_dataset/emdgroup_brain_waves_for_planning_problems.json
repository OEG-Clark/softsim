{"home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics.__init__": [[11, 45], ["numpy.zeros", "matplotlib.ion", "matplotlib.subplots", "graphics.Graphics.fig_vid.set_tight_layout", "graphics.Graphics.ax_vid[].set_title", "graphics.Graphics.ax_vid[].set_title", "graphics.Graphics.ax_vid[].set_title", "graphics.Graphics.ax_vid[].set_title", "graphics.Graphics.ax_vid[].set_title", "graphics.Graphics.ax_vid[].set_title", "graphics.Graphics.ax_vid[].set_title", "graphics.Graphics.ax_vid[].remove", "matplotlib.subplots", "graphics.Graphics.fig_pub.subplots_adjust", "matplotlib.subplots", "graphics.Graphics.fig_pub2.set_tight_layout", "graphics.Graphics.ax_pub2[].set_title", "graphics.Graphics.ax_pub2[].set_title", "utils.animation.FFMPEGVideo", "utils.animation.FFMPEGVideo", "utils.animation.ImageStack", "utils.animation.ImageStack", "copy.copy", "graphics.Graphics.my_cmap.set_bad", "matplotlib.colors.ListedColormap", "matplotlib.cm.get_cmap"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ":", "Tuple", "[", "int", "]", ",", "name", ":", "str", ",", "blocked_neurons", ",", "target_neurons", ")", ":", "\n", "        ", "self", ".", "_blocked_neurons", "=", "blocked_neurons", "\n", "self", ".", "_target_neurons", "=", "target_neurons", "\n", "self", ".", "trajectory", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "\n", "plt", ".", "ion", "(", ")", "\n", "self", ".", "fig_vid", ",", "self", ".", "ax_vid", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "4", ",", "squeeze", "=", "True", ",", "figsize", "=", "(", "10", ",", "6", ")", ")", "\n", "self", ".", "fig_vid", ".", "set_tight_layout", "(", "True", ")", "\n", "self", ".", "ax_vid", "[", "0", ",", "0", "]", ".", "set_title", "(", "'Exci. Firing Pattern'", ",", "fontsize", "=", "8", ")", "\n", "self", ".", "ax_vid", "[", "0", ",", "1", "]", ".", "set_title", "(", "'Exci. SNN Membrane Potential'", ",", "fontsize", "=", "8", ")", "\n", "self", ".", "ax_vid", "[", "0", ",", "2", "]", ".", "set_title", "(", "'Inhi. Firing Pattern'", ",", "fontsize", "=", "8", ")", "\n", "self", ".", "ax_vid", "[", "0", ",", "3", "]", ".", "set_title", "(", "'Inhi. SNN Membrane Potential'", ",", "fontsize", "=", "8", ")", "\n", "self", ".", "ax_vid", "[", "1", ",", "0", "]", ".", "set_title", "(", "'Place Cell Activations'", ",", "fontsize", "=", "8", ")", "\n", "self", ".", "ax_vid", "[", "1", ",", "1", "]", ".", "set_title", "(", "'Overlap'", ",", "fontsize", "=", "8", ")", "\n", "self", ".", "ax_vid", "[", "1", ",", "2", "]", ".", "set_title", "(", "'Trajectory'", ",", "fontsize", "=", "8", ")", "\n", "self", ".", "ax_vid", "[", "1", ",", "3", "]", ".", "remove", "(", ")", "\n", "\n", "self", ".", "fig_pub", ",", "self", ".", "ax_pub", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "squeeze", "=", "True", ",", "figsize", "=", "(", "3", ",", "3.25", ")", ")", "\n", "self", ".", "fig_pub", ".", "subplots_adjust", "(", "left", "=", "0.05", ",", "right", "=", "0.95", ",", "top", "=", "0.925", ",", "bottom", "=", "0.", ")", "\n", "\n", "self", ".", "fig_pub2", ",", "self", ".", "ax_pub2", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "2", ",", "squeeze", "=", "True", ",", "figsize", "=", "(", "6", ",", "3", ")", ")", "\n", "self", ".", "fig_pub2", ".", "set_tight_layout", "(", "True", ")", "\n", "self", ".", "ax_pub2", "[", "0", "]", ".", "set_title", "(", "'Excitatory Firing Pattern'", ",", "fontsize", "=", "14", ")", "\n", "self", ".", "ax_pub2", "[", "1", "]", ".", "set_title", "(", "'Inhibitory Firing Pattern'", ",", "fontsize", "=", "14", ")", "\n", "\n", "self", ".", "animation", "=", "FFMPEGVideo", "(", "name", ")", "\n", "self", ".", "animation_pub", "=", "FFMPEGVideo", "(", "name", "+", "'_pub'", ")", "\n", "self", ".", "pub_images", "=", "ImageStack", "(", "name", ")", "\n", "self", ".", "pub_images2", "=", "ImageStack", "(", "name", "+", "'.exci_inhi'", ")", "\n", "\n", "self", ".", "my_cmap", "=", "copy", ".", "copy", "(", "plt", ".", "cm", ".", "get_cmap", "(", "'gray'", ")", ")", "# get a copy of the gray color map", "\n", "self", ".", "my_cmap", ".", "set_bad", "(", "alpha", "=", "0", ")", "# set how the colormap handles 'bad' values", "\n", "\n", "self", ".", "mask_cmap", "=", "ListedColormap", "(", "[", "(", "0", ",", "0", ",", "0", ",", "0", ")", ",", "(", "0.3", ",", "0.3", ",", "0.3", ",", "1.", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate": [[46, 85], ["numpy.zeros_like", "data.copy().astype", "hasattr", "ax.xaxis.set_ticks", "ax.yaxis.set_ticks", "overlay.copy", "ax.myplot.set_data", "ax.imshow", "data.copy", "ax.myoverlay.set_data", "ax.imshow", "ax.vlines", "ax.hlines", "ax.imshow", "ax.contourf", "numpy.arange", "numpy.arange", "ax.annotate", "ax.get_ylim", "ax.get_xlim", "ax.get_xlim", "ax.get_ylim", "dict"], "methods", ["None"], ["", "def", "_imupdate", "(", "self", ",", "ax", ",", "data", ",", "overlay", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "# mask geometry to make the setup visible in the plot", "\n", "        ", "mask", "=", "np", ".", "zeros_like", "(", "data", ")", "\n", "data_plot", "=", "data", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "for", "region", "in", "self", ".", "_blocked_neurons", ":", "\n", "            ", "mask", "[", "region", "]", "=", "1", "\n", "data_plot", "[", "region", "]", "=", "np", ".", "nan", "\n", "\n", "", "if", "overlay", "is", "not", "None", ":", "\n", "            ", "overlay_tmp", "=", "overlay", ".", "copy", "(", ")", "\n", "overlay_tmp", "[", "overlay_tmp", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n", "", "if", "hasattr", "(", "ax", ",", "'myplot'", ")", ":", "\n", "            ", "ax", ".", "myplot", ".", "set_data", "(", "data_plot", ")", "\n", "\n", "if", "overlay", "is", "not", "None", ":", "\n", "                ", "ax", ".", "myoverlay", ".", "set_data", "(", "overlay_tmp", ")", "\n", "", "", "else", ":", "\n", "            ", "ax", ".", "myplot", "=", "ax", ".", "imshow", "(", "data_plot", ",", "*", "args", ",", "**", "kwargs", ",", "zorder", "=", "1", ")", "\n", "if", "overlay", "is", "not", "None", ":", "\n", "                ", "ax", ".", "myoverlay", "=", "ax", ".", "imshow", "(", "overlay_tmp", ",", "vmin", "=", "0", ",", "vmax", "=", "2", ",", "cmap", "=", "self", ".", "my_cmap", ",", "zorder", "=", "1", ")", "\n", "\n", "", "ax", ".", "decoration", "=", "[", "\n", "ax", ".", "vlines", "(", "np", ".", "arange", "(", "*", "ax", ".", "get_xlim", "(", ")", ",", "1", ")", ",", "*", "ax", ".", "get_ylim", "(", ")", ",", "\n", "colors", "=", "[", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.75", ")", "]", ",", "linestyles", "=", "'-'", ",", "linewidth", "=", "0.25", ",", "zorder", "=", "2", ")", ",", "\n", "ax", ".", "hlines", "(", "np", ".", "arange", "(", "*", "ax", ".", "get_ylim", "(", ")", ",", "-", "1", ")", ",", "*", "ax", ".", "get_xlim", "(", ")", ",", "\n", "colors", "=", "[", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.75", ")", "]", ",", "linestyles", "=", "'-'", ",", "linewidth", "=", "0.25", ",", "zorder", "=", "2", ")", ",", "\n", "ax", ".", "imshow", "(", "mask", ",", "alpha", "=", "1.", ",", "cmap", "=", "self", ".", "mask_cmap", ",", "zorder", "=", "3", ")", ",", "\n", "ax", ".", "contourf", "(", "mask", ",", "1", ",", "hatches", "=", "[", "''", ",", "'xx'", "]", ",", "alpha", "=", "0", ",", "zorder", "=", "4", ")", ",", "\n", "[", "ax", ".", "annotate", "(", "\"\"", ",", "\n", "xy", "=", "(", "target_neuron", "[", "0", "]", "+", ".25", ",", "target_neuron", "[", "1", "]", "+", ".75", ")", ",", "\n", "xytext", "=", "(", "-", "20", ",", "50", ")", ",", "textcoords", "=", "'offset pixels'", ",", "\n", "zorder", "=", "4", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"->\"", ")", ")", "for", "target_neuron", "in", "self", ".", "_target_neurons", "]", "\n", "]", "\n", "\n", "", "ax", ".", "xaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "ax", ".", "yaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics.update": [[87, 121], ["graphics.Graphics.fig_vid.suptitle", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "graphics.Graphics.fig_pub.suptitle", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "graphics.Graphics._imupdate", "matplotlib.show", "matplotlib.pause", "graphics.Graphics.animation.add_frame", "graphics.Graphics.animation_pub.add_frame", "graphics.Graphics.pub_images.add_frame", "graphics.Graphics.pub_images2.add_frame", "matplotlib.fignum_exists", "tuple", "tuple", "numpy.round().astype", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics._imupdate", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.add_frame", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.add_frame", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.add_frame", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.add_frame"], ["", "def", "update", "(", "self", ",", "t", ",", "place_cell_peak", ",", "\u0394", ",", "spiking_fired", ",", "membrane_potential", ",", "attractor_activity", ",", "overlap", ")", ":", "\n", "# record trajectory for plotting", "\n", "        ", "self", ".", "trajectory", "*=", "0.99", "\n", "self", ".", "trajectory", "[", "tuple", "(", "np", ".", "round", "(", "place_cell_peak", "+", "\u0394", ")", ".", "astype", "(", "int", ")", ")", "]", "=", "1.", "# if direc == 0 this will be overwritten by the next line", "\n", "self", ".", "trajectory", "[", "tuple", "(", "place_cell_peak", ")", "]", "=", "-", "1.", "\n", "\n", "fire_grid", "=", "1.", "*", "spiking_fired", "[", "0", "]", "\n", "\n", "# ########### Plots for animation ###################", "\n", "self", ".", "fig_vid", ".", "suptitle", "(", "f't = {t}ms'", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_vid", "[", "0", ",", "0", "]", ",", "fire_grid", ",", "vmin", "=", "0", ",", "vmax", "=", "2", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_vid", "[", "0", ",", "1", "]", ",", "membrane_potential", "[", "0", "]", ",", "vmin", "=", "-", "70", ",", "vmax", "=", "30", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_vid", "[", "0", ",", "2", "]", ",", "1", "*", "spiking_fired", "[", "1", "]", ",", "vmin", "=", "0", ",", "vmax", "=", "2", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_vid", "[", "0", ",", "3", "]", ",", "membrane_potential", "[", "1", "]", ",", "vmin", "=", "-", "70", ",", "vmax", "=", "30", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_vid", "[", "1", ",", "0", "]", ",", "attractor_activity", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_vid", "[", "1", ",", "1", "]", ",", "overlap", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_vid", "[", "1", ",", "2", "]", ",", "self", ".", "trajectory", ",", "vmin", "=", "-", "1", ",", "vmax", "=", "1", ",", "cmap", "=", "'bwr'", ")", "\n", "\n", "# ########### Plots for publication ###################", "\n", "self", ".", "fig_pub", ".", "suptitle", "(", "f't = {t}ms'", ",", "fontsize", "=", "24", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_pub", ",", "attractor_activity", ",", "cmap", "=", "'Greys'", ",", "overlay", "=", "fire_grid", ")", "\n", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_pub2", "[", "0", "]", ",", "fire_grid", ",", "vmin", "=", "0", ",", "vmax", "=", "2", ",", "cmap", "=", "'Greys'", ")", "\n", "self", ".", "_imupdate", "(", "self", ".", "ax_pub2", "[", "1", "]", ",", "1", "*", "spiking_fired", "[", "1", "]", ",", "vmin", "=", "0", ",", "vmax", "=", "2", ",", "cmap", "=", "'Greys'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "pause", "(", "0.1", ")", "\n", "self", ".", "animation", ".", "add_frame", "(", "self", ".", "fig_vid", ")", "\n", "self", ".", "animation_pub", ".", "add_frame", "(", "self", ".", "fig_pub", ")", "\n", "self", ".", "pub_images", ".", "add_frame", "(", "self", ".", "fig_pub", ")", "\n", "self", ".", "pub_images2", ".", "add_frame", "(", "self", ".", "fig_pub2", ")", "\n", "\n", "return", "plt", ".", "fignum_exists", "(", "self", ".", "fig_vid", ".", "number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.graphics.Graphics.save_video": [[122, 125], ["graphics.Graphics.animation.save", "graphics.Graphics.animation_pub.save"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.save", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.save"], ["", "def", "save_video", "(", "self", ",", "fps", ":", "int", "=", "8", ",", "keep_frame_images", "=", "False", ")", ":", "\n", "        ", "self", ".", "animation", ".", "save", "(", "fps", "=", "fps", ",", "keep_frame_images", "=", "keep_frame_images", ")", "\n", "self", ".", "animation_pub", ".", "save", "(", "fps", "=", "fps", ",", "keep_frame_images", "=", "keep_frame_images", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer.__init__": [[7, 30], ["numpy.zeros", "numpy.zeros", "numpy.ones", "ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_synapses", "numpy.asarray", "numpy.array", "numpy.meshgrid", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_synapses"], ["    ", "def", "__init__", "(", "self", ",", "shape", ":", "Tuple", "[", "int", "]", ",", "J", ":", "float", ",", "T", ":", "float", ",", "\u03c3", ":", "float", ",", "\u03c4", ":", "float", ")", ":", "\n", "        ", "self", ".", "shape", "=", "shape", "\n", "self", ".", "_J", "=", "J", "\n", "self", ".", "_T", "=", "T", "\n", "self", ".", "_\u03c3", "=", "\u03c3", "\n", "self", ".", "_\u03c4", "=", "\u03c4", "\n", "\n", "# real-space position of the place cell activations", "\n", "ci", "=", "np", ".", "asarray", "(", "np", ".", "meshgrid", "(", "\n", "(", "np", ".", "arange", "(", "self", ".", "shape", "[", "0", "]", ")", "-", "0.5", ")", "/", "self", ".", "shape", "[", "0", "]", ",", "\n", "(", "np", ".", "arange", "(", "self", ".", "shape", "[", "1", "]", ")", "-", "0.5", ")", "/", "self", ".", "shape", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "# precompute pairwise difference between all entries in ci for the place_cell_synapses", "\n", "self", ".", "_ci_diff", "=", "ci", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "-", "ci", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "self", ".", "_place_cell_synapses", "=", "np", ".", "zeros", "(", "self", ".", "shape", "*", "2", ")", "\n", "self", ".", "_place_cell_activations", "=", "np", ".", "zeros", "(", "self", ".", "shape", ")", "\n", "self", ".", "_place_cell_blocked", "=", "np", ".", "ones", "(", "self", ".", "shape", ")", "\n", "\n", "# cache place cell synapses for \u0394 == (0, 0)", "\n", "self", ".", "_place_cell_synapses_0", "=", "None", "\n", "self", ".", "_update_place_cell_synapses", "(", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ")", "\n", "self", ".", "_place_cell_synapses_0", "=", "self", ".", "_place_cell_synapses", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer.block_region": [[31, 33], ["None"], "methods", ["None"], ["", "def", "block_region", "(", "self", ",", "region", ":", "Tuple", "[", "slice", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "_place_cell_blocked", "[", "region", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer.set_activation": [[34, 37], ["None"], "methods", ["None"], ["", "def", "set_activation", "(", "self", ",", "point", ":", "Tuple", "[", "int", "]", ")", "->", "None", ":", "\n", "        ", "if", "point", "is", "not", "None", ":", "\n", "            ", "self", ".", "_place_cell_activations", "[", "point", "]", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_synapses": [[38, 50], ["numpy.square", "numpy.sum", "numpy.exp"], "methods", ["None"], ["", "", "def", "_update_place_cell_synapses", "(", "self", ",", "\u0394", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "if", "\u0394", "[", "0", "]", "==", "0", "and", "\u0394", "[", "1", "]", "==", "0", "and", "self", ".", "_place_cell_synapses_0", "is", "not", "None", ":", "\n", "            ", "self", ".", "_place_cell_synapses", "=", "self", ".", "_place_cell_synapses_0", "\n", "", "else", ":", "\n", "            ", "diff", "=", "self", ".", "_ci_diff", "+", "\u0394", "\n", "np", ".", "square", "(", "diff", ",", "out", "=", "diff", ")", "\n", "# self._place_cell_synapses = J * np.exp(-(norm_sq/\u03c3**2)) - T", "\n", "self", ".", "_place_cell_synapses", "=", "np", ".", "sum", "(", "diff", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "_place_cell_synapses", "/=", "-", "self", ".", "_\u03c3", "**", "2", "\n", "np", ".", "exp", "(", "self", ".", "_place_cell_synapses", ",", "out", "=", "self", ".", "_place_cell_synapses", ")", "\n", "self", ".", "_place_cell_synapses", "*=", "self", ".", "_J", "\n", "self", ".", "_place_cell_synapses", "-=", "self", ".", "_T", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_activations": [[51, 61], ["numpy.sum", "numpy.einsum", "ContinuousAttractorLayer.ContinuousAttractorLayer._place_cell_activations.max"], "methods", ["None"], ["", "", "def", "_update_place_cell_activations", "(", "self", ")", "->", "None", ":", "\n", "\n", "        ", "\u03a3", "=", "np", ".", "sum", "(", "self", ".", "_place_cell_activations", ")", "\n", "\n", "if", "\u03a3", ">", "0", ":", "\n", "            ", "B", "=", "np", ".", "einsum", "(", "'ij,ijkl->kl'", ",", "self", ".", "_place_cell_activations", ",", "self", ".", "_place_cell_synapses", ")", "\n", "self", ".", "_place_cell_activations", "=", "(", "1", "-", "self", ".", "_\u03c4", ")", "*", "B", "+", "self", ".", "_\u03c4", "/", "\u03a3", "*", "B", "\n", "self", ".", "_place_cell_activations", "[", "self", ".", "_place_cell_activations", "<", "0", "]", "=", "0", "\n", "self", ".", "_place_cell_activations", "*=", "self", ".", "_place_cell_blocked", "\n", "self", ".", "_place_cell_activations", "/=", "self", ".", "_place_cell_activations", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer.update": [[62, 66], ["ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_synapses", "ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_activations"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_synapses", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer._update_place_cell_activations"], ["", "", "def", "update", "(", "self", ",", "\u0394", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "self", ".", "_update_place_cell_synapses", "(", "\u0394", ")", "\n", "self", ".", "_update_place_cell_activations", "(", ")", "\n", "return", "self", ".", "peak", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer.A": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "A", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "_place_cell_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.ContinuousAttractorLayer.ContinuousAttractorLayer.peak": [[71, 74], ["numpy.asarray", "numpy.unravel_index", "numpy.argmax"], "methods", ["None"], ["", "@", "property", "\n", "def", "peak", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "self", ".", "A", ")", ",", "self", ".", "A", ".", "shape", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer.__init__": [[7, 54], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.zeros", "WavePropagationLayer.WavePropagationLayer._imprint_circular_kernel", "WavePropagationLayer.WavePropagationLayer._imprint_circular_kernel", "WavePropagationLayer.WavePropagationLayer._imprint_circular_kernel", "numpy.random.seed", "numpy.random.uniform", "numpy.random.uniform", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.random.seed", "numpy.random.uniform", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer._imprint_circular_kernel", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer._imprint_circular_kernel", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer._imprint_circular_kernel"], ["    ", "def", "__init__", "(", "self", ",", "shape", ":", "Tuple", "[", "int", "]", ",", "randomize_neurons", ":", "bool", ",", "randomize_synapses", ":", "float", ")", ":", "\n", "        ", "self", ".", "shape", "=", "shape", "\n", "\n", "if", "randomize_neurons", ":", "\n", "# make results reproducible", "\n", "            ", "np", ".", "random", ".", "seed", "(", "7", ")", "\n", "# excitatory neurons", "\n", "re", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "shape", ")", "\n", "# inhibitory neurons", "\n", "ri", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "shape", ")", "\n", "", "else", ":", "\n", "            ", "re", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "ri", "=", "np", ".", "ones", "(", "shape", ")", "\n", "\n", "# time scale of the recovery variable u", "\n", "", "self", ".", "_a", "=", "np", ".", "asarray", "(", "[", "0.02", "*", "np", ".", "ones", "(", "shape", ")", ",", "0.02", "+", "0.08", "*", "ri", "]", ")", "\n", "# sensitivity of the recovery variable u to the subthreshold fluctuations of the membrane potential v.", "\n", "self", ".", "_b", "=", "np", ".", "asarray", "(", "[", "0.2", "*", "np", ".", "ones", "(", "shape", ")", ",", "0.25", "-", "0.05", "*", "ri", "]", ")", "\n", "# after-spike reset value of the membrane potential v caused by fast high-threshold K+ conductances.", "\n", "self", ".", "_c", "=", "np", ".", "asarray", "(", "[", "-", "65", "+", "15", "*", "re", "**", "2", ",", "-", "65", "*", "np", ".", "ones", "(", "shape", ")", "]", ")", "\n", "# after-spike reset of the recovery variable u caused by slow high-threshold Na+ and K+ conductances.", "\n", "self", ".", "_d", "=", "np", ".", "asarray", "(", "[", "8", "-", "6", "*", "re", "**", "2", ",", "2", "*", "np", ".", "ones", "(", "shape", ")", "]", ")", "\n", "\n", "self", ".", "_v", "=", "-", "65", "*", "np", ".", "ones", "(", "(", "2", ",", "*", "shape", ")", ")", "\n", "self", ".", "_u", "=", "self", ".", "_b", "*", "self", ".", "_v", "\n", "\n", "# construct synaptic connection matrix", "\n", "self", ".", "_S", "=", "np", ".", "zeros", "(", "(", "2", ",", "*", "shape", ")", "*", "2", ")", "\n", "\n", "suppression_range", "=", "1", "\n", "excitation_range", "=", "2", "\n", "\n", "# excitation layer", "\n", "self", ".", "_S", "=", "self", ".", "_imprint_circular_kernel", "(", "self", ".", "_S", ",", "layer_from", "=", "0", ",", "layer_to", "=", "0", ",", "radius", "=", "excitation_range", ",", "max_value", "=", "1", ",", "center_value", "=", "0", ")", "\n", "# inhibition layer", "\n", "self", ".", "_S", "=", "self", ".", "_imprint_circular_kernel", "(", "self", ".", "_S", ",", "layer_from", "=", "0", ",", "layer_to", "=", "1", ",", "radius", "=", "suppression_range", ",", "max_value", "=", "0.5", ",", "center_value", "=", "0", ")", "\n", "# inhibition deactivates a local cluster", "\n", "self", ".", "_S", "=", "self", ".", "_imprint_circular_kernel", "(", "self", ".", "_S", ",", "layer_from", "=", "1", ",", "layer_to", "=", "0", ",", "radius", "=", "suppression_range", ",", "max_value", "=", "-", "9", ",", "center_value", "=", "-", "9", ")", "\n", "# some rescaling as connections between nodes are sparse", "\n", "self", ".", "_S", "*=", "50", "\n", "\n", "if", "randomize_synapses", ">", "0.", ":", "\n", "# make results reproducible", "\n", "            ", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "# vary synaptics strength randomly by +/- setup['randomize_synapses'] (relative)", "\n", "rs", "=", "np", ".", "random", ".", "uniform", "(", "1.", "-", "randomize_synapses", ",", "1.", "+", "randomize_synapses", ",", "self", ".", "_S", ".", "shape", ")", "\n", "self", ".", "_S", "*=", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer._imprint_circular_kernel": [[55, 79], ["range", "list", "range", "range", "list", "max", "min", "range", "max", "min", "numpy.sqrt"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_imprint_circular_kernel", "(", "field", ":", "np", ".", "array", ",", "layer_from", ":", "int", ",", "layer_to", ":", "int", ",", "radius", ":", "int", ",", "max_value", ":", "float", ",", "\n", "center_value", ":", "float", ",", "center_radius", ":", "int", "=", "0", ",", "power", ":", "int", "=", "1", ")", "->", "np", ".", "array", ":", "\n", "\n", "        ", "assert", "field", ".", "shape", "[", "1", ":", "3", "]", "==", "field", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "for", "row", "in", "range", "(", "field", ".", "shape", "[", "-", "2", "]", ")", ":", "\n", "            ", "row_range", "=", "list", "(", "range", "(", "max", "(", "0", ",", "row", "-", "radius", ")", ",", "min", "(", "field", ".", "shape", "[", "-", "2", "]", ",", "row", "+", "radius", "+", "1", ")", ")", ")", "\n", "\n", "for", "col", "in", "range", "(", "field", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "                ", "col_range", "=", "list", "(", "range", "(", "max", "(", "0", ",", "col", "-", "radius", ")", ",", "min", "(", "field", ".", "shape", "[", "-", "1", "]", ",", "col", "+", "radius", "+", "1", ")", ")", ")", "\n", "\n", "for", "d_row", "in", "row_range", ":", "\n", "                    ", "for", "d_col", "in", "col_range", ":", "\n", "                        ", "delta", "=", "np", ".", "sqrt", "(", "(", "row", "-", "d_row", ")", "**", "2", "+", "(", "col", "-", "d_col", ")", "**", "2", ")", "\n", "\n", "if", "power", "==", "0", "and", "delta", ">", "radius", ":", "\n", "                            ", "field", "[", "layer_from", ",", "row", ",", "col", ",", "layer_to", ",", "d_row", ",", "d_col", "]", "=", "0", "\n", "", "elif", "delta", ">", "center_radius", ":", "\n", "                            ", "field", "[", "layer_from", ",", "row", ",", "col", ",", "layer_to", ",", "d_row", ",", "d_col", "]", "=", "max_value", "/", "delta", "**", "power", "\n", "", "else", ":", "\n", "                            ", "field", "[", "layer_from", ",", "row", ",", "col", ",", "layer_to", ",", "d_row", ",", "d_col", "]", "=", "center_value", "\n", "\n", "", "", "", "", "", "return", "field", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer.block_region": [[80, 82], ["slice"], "methods", ["None"], ["", "def", "block_region", "(", "self", ",", "region", ":", "Tuple", "[", "slice", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "_S", "[", "(", "slice", "(", "None", ")", ",", ")", "*", "4", "+", "region", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer.update": [[83, 102], ["numpy.zeros", "numpy.argwhere", "numpy.maximum", "range", "tuple", "numpy.where", "numpy.where"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "dt", ":", "float", ",", "thalamic_input", ":", "np", ".", "ndarray", ",", "subcycle", ":", "int", "=", "2", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "spiking_fired", "=", "self", ".", "_v", ">=", "30", "\n", "\n", "# reset SNN neurons that spiked and compute their output current towards the other neurons", "\n", "zs", "=", "np", ".", "zeros", "(", "(", "2", ",", "*", "self", ".", "shape", ")", ")", "\n", "for", "_i", "in", "np", ".", "argwhere", "(", "spiking_fired", ")", ":", "\n", "            ", "i", "=", "tuple", "(", "_i", ")", "\n", "self", ".", "_v", "[", "i", "]", "=", "self", ".", "_c", "[", "i", "]", "\n", "self", ".", "_u", "[", "i", "]", "+=", "self", ".", "_d", "[", "i", "]", "\n", "zs", "+=", "self", ".", "_S", "[", "i", "]", "\n", "\n", "", "total_current", "=", "np", ".", "maximum", "(", "thalamic_input", "+", "zs", ",", "0", ")", "\n", "\n", "for", "_", "in", "range", "(", "subcycle", ")", ":", "\n", "            ", "v_fired", "=", "self", ".", "_v", ">=", "30", "\n", "self", ".", "_v", "=", "np", ".", "where", "(", "v_fired", ",", "self", ".", "_v", ",", "self", ".", "_v", "+", "dt", "*", "(", "(", "(", "0.04", "*", "self", ".", "_v", "**", "2", ")", "+", "(", "5", "*", "self", ".", "_v", ")", "+", "140", "-", "self", ".", "_u", "+", "total_current", ")", "/", "subcycle", ")", ")", "\n", "self", ".", "_u", "=", "np", ".", "where", "(", "v_fired", ",", "self", ".", "_u", ",", "self", ".", "_u", "+", "dt", "*", "self", ".", "_a", "*", "(", "(", "self", ".", "_b", "*", "self", ".", "_v", ")", "-", "self", ".", "_u", ")", "/", "subcycle", ")", "\n", "\n", "", "return", "spiking_fired", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.None.WavePropagationLayer.WavePropagationLayer.v": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "v", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_v", "\n", "", "", ""]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.AnimatedImage.__init__": [[31, 34], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AnimatedImage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_frames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.AnimatedImage.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.AnimatedImage.add_frame": [[38, 43], ["isinstance", "animation.AnimatedImage.add_frame", "animation.AnimatedImage._frames.append", "animation.fig2img"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.add_frame", "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.fig2img"], ["", "def", "add_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "if", "isinstance", "(", "frame", ",", "Figure", ")", ":", "\n", "            ", "self", ".", "add_frame", "(", "fig2img", "(", "frame", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_frames", ".", "append", "(", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.AnimatedImage.save": [[44, 46], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "filename", ",", "fps", ",", "loop", "=", "False", ",", "comment", "=", "\"\"", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.AnimatedGIF.__init__": [[49, 51], ["animation.AnimatedImage.__init__"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AnimatedGIF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.AnimatedGIF.save": [[52, 61], ["animation.AnimatedGIF._frames[].save", "Exception", "filename.lower().endswith", "filename.lower"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.save"], ["", "def", "save", "(", "self", ",", "filename", ",", "fps", ",", "loop", "=", "False", ",", "comment", "=", "\"\"", ")", ":", "\n", "        ", "if", "not", "self", ".", "_frames", ":", "\n", "            ", "raise", "Exception", "(", "'No frames stored.'", ")", "\n", "\n", "", "if", "not", "filename", ".", "lower", "(", ")", ".", "endswith", "(", "'.gif'", ")", ":", "\n", "            ", "filename", "+=", "'.gif'", "\n", "\n", "", "self", ".", "_frames", "[", "0", "]", ".", "save", "(", "filename", ",", "save_all", "=", "True", ",", "append_images", "=", "self", ".", "_frames", "[", "1", ":", "]", ",", "\n", "optimize", "=", "False", ",", "duration", "=", "1000", "/", "fps", ",", "loop", "=", "loop", ",", "comment", "=", "comment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.__init__": [[64, 72], ["object.__init__", "shutil.which", "tempfile.mkdtemp", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "super", "(", "FFMPEGVideo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ffmpeg", "=", "shutil", ".", "which", "(", "'ffmpeg'", ")", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_workdir", "=", "mkdtemp", "(", "prefix", "=", "'FFMPEGVideo.'", ",", "dir", "=", "os", ".", "getcwd", "(", ")", ")", "\n", "self", ".", "_framecounter", "=", "0", "\n", "\n", "assert", "self", ".", "_ffmpeg", "is", "not", "None", "# should add ffmpeg\\bin directory to PATH", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.__len__": [[73, 75], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_framecounter", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.add_frame": [[76, 85], ["os.path.join", "isinstance", "frame.savefig", "frame.save"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.save"], ["", "def", "add_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_workdir", ",", "'frame_{:08d}.png'", ".", "format", "(", "self", ".", "_framecounter", ")", ")", "\n", "\n", "if", "isinstance", "(", "frame", ",", "Figure", ")", ":", "\n", "            ", "frame", ".", "savefig", "(", "filename", ",", "transparent", "=", "False", ")", "# ffmpeg cannot deal properly with transparent pngs", "\n", "", "else", ":", "\n", "            ", "frame", ".", "save", "(", "filename", ")", "\n", "\n", "", "self", ".", "_framecounter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.save": [[86, 113], ["subprocess.run", "Exception", "filename.lower().endswith", "logging.error", "os.path.join", "shutil.rmtree", "filename.lower"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ":", "str", "=", "None", ",", "fps", ":", "int", "=", "8", ",", "keep_frame_images", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_framecounter", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "'No frames stored.'", ")", "\n", "\n", "", "if", "filename", "is", "None", ":", "\n", "            ", "assert", "self", ".", "_name", "is", "not", "None", "\n", "filename", "=", "self", ".", "_name", "\n", "\n", "", "if", "not", "filename", ".", "lower", "(", ")", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "            ", "filename", "+=", "'.mp4'", "\n", "\n", "", "ffmpeg", "=", "subprocess", ".", "run", "(", "[", "self", ".", "_ffmpeg", ",", "\n", "'-y'", ",", "# force overwrite if output file exists", "\n", "'-framerate'", ",", "'{}'", ".", "format", "(", "fps", ")", ",", "\n", "'-i'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "_workdir", ",", "'frame_%08d.png'", ")", ",", "\n", "'-c:v'", ",", "'libx264'", ",", "\n", "'-preset'", ",", "'slow'", ",", "\n", "'-crf'", ",", "'17'", ",", "\n", "'-vf'", ",", "'pad=ceil(iw/2)*2:ceil(ih/2)*2,format=yuv420p'", ",", "\n", "filename", ",", "\n", "]", ")", "\n", "\n", "if", "ffmpeg", ".", "returncode", "!=", "0", ":", "\n", "            ", "logging", ".", "error", "(", "'Running the following command failed with return code {}:\\n\\t{}'", "\n", ".", "format", "(", "ffmpeg", ".", "returncode", ",", "' '", ".", "join", "(", "ffmpeg", ".", "args", ")", ")", ")", "\n", "", "elif", "not", "keep_frame_images", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "self", ".", "_workdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.__init__": [[116, 124], ["os.path.join", "os.path.exists", "os.makedirs", "os.getcwd", "shutil.rmtree"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", ",", "file_type", ":", "str", "=", "'pdf'", ")", ":", "\n", "        ", "self", ".", "_framecounter", "=", "0", "\n", "self", ".", "_file_type", "=", "file_type", "\n", "self", ".", "_workdir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "_workdir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "self", ".", "_workdir", ")", "\n", "", "os", ".", "makedirs", "(", "self", ".", "_workdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.ImageStack.add_frame": [[125, 134], ["os.path.join", "isinstance", "frame.savefig", "frame.save"], "methods", ["home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.FFMPEGVideo.save"], ["", "def", "add_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_workdir", ",", "'frame_{:08d}.{}'", ".", "format", "(", "self", ".", "_framecounter", ",", "self", ".", "_file_type", ")", ")", "\n", "\n", "if", "isinstance", "(", "frame", ",", "Figure", ")", ":", "\n", "            ", "frame", ".", "savefig", "(", "filename", ",", "transparent", "=", "False", ")", "# ffmpeg cannot deal properly with transparent pngs", "\n", "", "else", ":", "\n", "            ", "frame", ".", "save", "(", "filename", ")", "\n", "\n", "", "self", ".", "_framecounter", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.get_video_filename": [[13, 17], ["subprocess.check_output().strip().decode", "datetime.datetime.today().strftime", "subprocess.check_output().strip", "datetime.datetime.today", "subprocess.check_output"], "function", ["None"], ["def", "get_video_filename", "(", ")", ":", "\n", "    ", "git_hash", "=", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--short'", ",", "'HEAD'", "]", ")", ".", "strip", "(", ")", ".", "decode", "(", ")", "\n", "timestring", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %Hh%Mm%S\"", ")", "\n", "return", "f'animation_{timestring}_{git_hash}'", "\n", "\n"]], "home.repos.pwc.inspect_result.emdgroup_brain_waves_for_planning_problems.utils.animation.fig2img": [[19, 28], ["io.BytesIO", "fig.savefig", "buf.seek", "PIL.Image.open", "Image.open.load"], "function", ["None"], ["", "def", "fig2img", "(", "fig", ")", ":", "\n", "    ", "\"\"\"Convert a matplotlib figure to a PIL Image and return it\"\"\"", "\n", "with", "io", ".", "BytesIO", "(", ")", "as", "buf", ":", "\n", "        ", "fig", ".", "savefig", "(", "buf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "Image", ".", "open", "(", "buf", ")", "\n", "img", ".", "load", "(", ")", "\n", "\n", "", "return", "img", "\n", "\n"]]}