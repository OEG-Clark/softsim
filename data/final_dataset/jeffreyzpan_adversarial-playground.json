{"home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.run_adv.train": [[88, 135], ["lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.ProgressMeter", "model.train", "time.time", "enumerate", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "len", "lib.utils.utils.AverageMeter.update", "model", "criterion", "lib.utils.utils.accuracy", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "lib.utils.utils.AverageMeter.update", "time.time", "inputs.cuda.cuda", "target.cuda.cuda", "criterion.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "lib.utils.utils.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.train_models.train", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.accuracy", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter.display"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "'-1'", "not", "in", "args", ".", "gpu_ids", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "summary", ".", "add_scalar", "(", "'train acc5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'train acc1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'train loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.run_adv.validate": [[137, 189], ["lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.ProgressMeter", "model.eval", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "iter", "iter.next", "torchvision.make_grid", "summary.add_image", "len", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "model", "criterion", "lib.utils.utils.accuracy", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "time.time", "inputs.to.to", "target.to.to", "criterion.item", "inputs.to.size", "inputs.to.size", "inputs.to.size", "lib.utils.utils.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.accuracy", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Test: \"", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "'-1'", "not", "in", "args", ".", "gpu_ids", ":", "\n", "                ", "inputs", "=", "inputs", ".", "to", "(", "f'cuda:{args.gpu_ids}'", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "to", "(", "f'cuda:{args.gpu_ids}'", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "", "summary", ".", "add_scalar", "(", "'test acc5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'test acc1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'test loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "\n", "# visualize a batch of testing images", "\n", "dataiter", "=", "iter", "(", "val_loader", ")", "\n", "images", ",", "_", "=", "dataiter", ".", "next", "(", ")", "\n", "img_grid", "=", "utils", ".", "make_grid", "(", "images", ")", "\n", "summary", ".", "add_image", "(", "\"Validation Images\"", ",", "img_grid", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.run_adv.adjust_learning_rate": [[191, 204], ["zip", "len", "len"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "gammas", ",", "schedule", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "learning_rate", "\n", "assert", "len", "(", "gammas", ")", "==", "len", "(", "\n", "schedule", ")", ",", "\"length of gammas and schedule should be equal\"", "\n", "for", "(", "gamma", ",", "step", ")", "in", "zip", "(", "gammas", ",", "schedule", ")", ":", "\n", "        ", "if", "(", "epoch", ">=", "step", ")", ":", "\n", "            ", "lr", "=", "lr", "*", "gamma", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.train_models.train": [[59, 106], ["lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.ProgressMeter", "model.train", "time.time", "enumerate", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "len", "lib.utils.utils.AverageMeter.update", "model", "criterion", "lib.utils.utils.accuracy", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "lib.utils.utils.AverageMeter.update", "time.time", "inputs.cuda.cuda", "target.cuda.cuda", "criterion.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "lib.utils.utils.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.train_models.train", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.accuracy", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter.display"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "'-1'", "not", "in", "args", ".", "gpu_ids", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "summary", ".", "add_scalar", "(", "'train acc5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'train acc1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'train loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.train_models.validate": [[107, 160], ["lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.AverageMeter", "lib.utils.utils.ProgressMeter", "model.eval", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "iter", "iter.next", "torchvision.make_grid", "summary.add_image", "len", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "model", "print", "criterion", "lib.utils.utils.accuracy", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "lib.utils.utils.AverageMeter.update", "time.time", "inputs.cuda.cuda", "target.cuda.cuda", "criterion.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "lib.utils.utils.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.accuracy", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Test: \"", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "'-1'", "not", "in", "args", ".", "gpu_ids", ":", "\n", "                ", "inputs", "=", "inputs", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "inputs", ")", "\n", "print", "(", "inputs", ".", "shape", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "", "summary", ".", "add_scalar", "(", "'test acc5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'test acc1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "summary", ".", "add_scalar", "(", "'test loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "\n", "# visualize a batch of testing images", "\n", "dataiter", "=", "iter", "(", "val_loader", ")", "\n", "images", ",", "_", "=", "dataiter", ".", "next", "(", ")", "\n", "img_grid", "=", "utils", ".", "make_grid", "(", "images", ")", "\n", "summary", ".", "add_image", "(", "\"Validation Images\"", ",", "img_grid", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.None.train_models.adjust_learning_rate": [[161, 173], ["zip", "len", "len"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "gammas", ",", "schedule", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "learning_rate", "\n", "assert", "len", "(", "gammas", ")", "==", "len", "(", "schedule", ")", ",", "\"length of gammas and schedule should be equal\"", "\n", "for", "(", "gamma", ",", "step", ")", "in", "zip", "(", "gammas", ",", "schedule", ")", ":", "\n", "        ", "if", "(", "epoch", ">=", "step", ")", ":", "\n", "            ", "lr", "=", "lr", "*", "gamma", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.__init__": [[16, 20], ["torchvision.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.reset": [[21, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.update": [[27, 32], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.AverageMeter.__str__": [[33, 36], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter.__init__": [[39, 43], ["torchvision.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter.display": [[44, 48], ["print", "str", "torchvision.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.ProgressMeter._get_batch_fmtstr": [[49, 53], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.save_checkpoint": [[7, 13], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save_path", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "model_pth", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "model_pth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.adjust_learning_rate": [[55, 60], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "learning_rate", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.accuracy": [[62, 77], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.utils.utils.save_images": [[78, 95], ["enumerate", "os.path.isdir", "os.makedirs", "torchvision.save_image", "os.path.join", "os.path.join", "torch.Tensor", "os.path.join"], "function", ["None"], ["", "", "def", "save_images", "(", "dataset", ",", "save_dir", ",", "image_type", ",", "num_images", "=", "50", ")", ":", "\n", "    ", "''' Saves torch tensors from a torch dataloader as images in a \n    specified directory for visualization and sanity-checking\n    \n    inputs: \n    \n    dataset (torch Dataloader)\n    save_dir (directory path to save images in)\n    image_type (string to specify what type of images (eg. clean, attacked, etc.))\n    num_images (number of images from the Dataloader to save into the directory)\n\n    output: none (simply saves images into save_dir)\n    '''", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'images'", ",", "image_type", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'images'", ",", "image_type", ")", ")", "\n", "", "for", "i", ",", "image", "in", "enumerate", "(", "dataset", "[", ":", "num_images", "]", ")", ":", "\n", "        ", "utils", ".", "save_image", "(", "torch", ".", "Tensor", "(", "image", ")", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'images'", ",", "image_type", ",", "'image_{}.png'", ".", "format", "(", "i", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.datasets.data_utils.AdjustContrast.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "adjustment", "=", "1", ")", ":", "\n", "        ", "self", ".", "adjustment", "=", "adjustment", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.datasets.data_utils.AdjustContrast.__call__": [[19, 21], ["torchvision.functional.adjust_contrast", "torchvision.functional.adjust_contrast"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "transforms", ".", "functional", ".", "adjust_contrast", "(", "x", ",", "self", ".", "adjustment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.datasets.data_utils.get_data_statistics": [[22, 36], ["data.view.size", "data.view.view", "data.view.mean().sum", "data.view.std().sum", "data.view.size", "data.view.mean", "data.view.std"], "function", ["None"], ["", "", "def", "get_data_statistics", "(", "data_loader", ")", ":", "\n", "    ", "mean", "=", "0.", "\n", "std", "=", "0.", "\n", "nb_samples", "=", "0.", "\n", "for", "(", "data", ",", "labels", ")", "in", "data_loader", ":", "\n", "        ", "batch_samples", "=", "data", ".", "size", "(", "0", ")", "\n", "data", "=", "data", ".", "view", "(", "batch_samples", ",", "data", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "mean", "+=", "data", ".", "mean", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "std", "+=", "data", ".", "std", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "nb_samples", "+=", "batch_samples", "\n", "\n", "", "mean", "/=", "nb_samples", "\n", "std", "/=", "nb_samples", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.datasets.data_utils.get_image_complexity": [[37, 49], ["image.save", "PIL.Image.open", "Image.open.save", "os.remove", "os.remove", "os.path.join", "os.stat", "os.path.join", "os.path.join", "os.stat", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_image_complexity", "(", "image", ",", "out", ",", "name", ")", ":", "\n", "    ", "image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out", ",", "'{}.jpeg'", ".", "format", "(", "name", ")", ")", ",", "format", "=", "'jpeg'", ",", "quality", "=", "95", ")", "\n", "old_size", "=", "os", ".", "stat", "(", "os", ".", "path", ".", "join", "(", "out", ",", "'{}.jpeg'", ".", "format", "(", "name", ")", ")", ")", ".", "st_size", "\n", "\n", "image_copy", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "out", ",", "'{}.jpeg'", ".", "format", "(", "name", ")", ")", ")", "\n", "image_copy", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out", ",", "'{}_comp.jpeg'", ".", "format", "(", "name", ")", ")", ",", "format", "=", "'jpeg'", ",", "quality", "=", "10", ")", "\n", "new_size", "=", "os", ".", "stat", "(", "os", ".", "path", ".", "join", "(", "out", ",", "'{}_comp.jpeg'", ".", "format", "(", "name", ")", ")", ")", ".", "st_size", "\n", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "out", ",", "'{}.jpeg'", ".", "format", "(", "name", ")", ")", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "out", ",", "'{}_comp.jpeg'", ".", "format", "(", "name", ")", ")", ")", "\n", "\n", "return", "new_size", "/", "old_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.datasets.data_utils.generate_dataset": [[50, 195], ["print", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "torch.DataLoader", "torch.DataLoader", "data_utils.AdjustContrast", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "data_utils.AdjustContrast", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ImageFolder", "torchvision.ImageFolder", "os.path.exists", "torch.DataLoader", "torch.DataLoader", "int", "torchvision.Compose", "torchvision.Compose", "data_utils.AdjustContrast", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "data_utils.AdjustContrast", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.CIFAR10", "torchvision.CIFAR10", "os.path.exists", "torch.DataLoader", "torch.DataLoader", "int", "torchvision.Compose", "torchvision.Compose", "data_utils.AdjustContrast", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.ToTensor", "data_utils.AdjustContrast", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.CIFAR100", "torchvision.CIFAR100", "os.path.exists", "torch.DataLoader", "torch.DataLoader", "int", "torchvision.Compose", "torchvision.Compose", "data_utils.AdjustContrast", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "data_utils.AdjustContrast", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.MNIST", "torchvision.MNIST", "os.path.exists", "torch.DataLoader", "torch.DataLoader", "int", "torchvision.Compose", "torchvision.Compose", "data_utils.AdjustContrast", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "data_utils.AdjustContrast", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "int", "torchvision.Compose", "torchvision.Compose"], "function", ["None"], ["", "def", "generate_dataset", "(", "name", ",", "path", ",", "input_size", ",", "batch_size", ",", "num_workers", ",", "inc_contrast", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "print", "(", "'==> Loading dataset {}...'", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "==", "'imagenet'", ":", "\n", "        ", "train_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ",", "'train'", ")", "\n", "val_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ",", "'val'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "train_path", ")", ",", "train_path", "+", "' not found'", "\n", "assert", "os", ".", "path", ".", "exists", "(", "val_path", ")", ",", "val_path", "+", "' not found'", "\n", "\n", "train_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "test_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "Resize", "(", "int", "(", "input_size", "/", "0.875", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "train_path", ",", "transforms", ".", "Compose", "(", "train_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "val_path", ",", "transforms", ".", "Compose", "(", "test_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "n_class", "=", "1000", "\n", "\n", "", "elif", "name", "==", "'cifar10'", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "path", "+", "' not found'", "\n", "\n", "train_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "test_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "Resize", "(", "int", "(", "input_size", "/", "0.875", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "\n", "path", ",", "True", ",", "transforms", ".", "Compose", "(", "train_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR10", "(", "\n", "path", ",", "False", ",", "transforms", ".", "Compose", "(", "test_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "n_class", "=", "10", "\n", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "path", "+", "' not found'", "\n", "\n", "train_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "test_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "Resize", "(", "int", "(", "input_size", "/", "0.875", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "\n", "path", ",", "True", ",", "transforms", ".", "Compose", "(", "train_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "CIFAR100", "(", "\n", "path", ",", "False", ",", "transforms", ".", "Compose", "(", "test_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "n_class", "=", "100", "\n", "\n", "", "elif", "name", "==", "'mnist'", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "path", "+", "' not found'", "\n", "\n", "train_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "test_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "Resize", "(", "int", "(", "input_size", "/", "0.875", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "\n", "path", ",", "True", ",", "transforms", ".", "Compose", "(", "train_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "\n", "path", ",", "False", ",", "transforms", ".", "Compose", "(", "test_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "n_class", "=", "10", "\n", "\n", "", "elif", "name", "==", "'fmnist'", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "path", "+", "' not found'", "\n", "\n", "train_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "test_transform_list", "=", "[", "AdjustContrast", "(", "inc_contrast", ")", ",", "\n", "transforms", ".", "Resize", "(", "int", "(", "input_size", "/", "0.875", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "FashionMNIST", "(", "\n", "path", ",", "True", ",", "transforms", ".", "Compose", "(", "train_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "FashionMNIST", "(", "\n", "path", ",", "False", ",", "transforms", ".", "Compose", "(", "test_transform_list", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "n_class", "=", "10", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "train_loader", ",", "val_loader", ",", "n_class", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.BasicBlock.__init__": [[16, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.BasicBlock.forward": [[30, 36], ["torch.relu", "torch.relu", "torch.relu", "cifar_resnet.BasicBlock.bn2", "cifar_resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "cifar_resnet.BasicBlock.bn1", "cifar_resnet.BasicBlock.conv2", "cifar_resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.Bottleneck.__init__": [[41, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.Bottleneck.forward": [[57, 64], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "cifar_resnet.Bottleneck.bn3", "cifar_resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "cifar_resnet.Bottleneck.bn1", "cifar_resnet.Bottleneck.bn2", "cifar_resnet.Bottleneck.conv3", "cifar_resnet.Bottleneck.conv1", "cifar_resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.ResNet.__init__": [[67, 82], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "cifar_resnet.ResNet._make_layer", "cifar_resnet.ResNet._make_layer", "cifar_resnet.ResNet._make_layer", "cifar_resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "thermometer_encode", "=", "thermometer_encode", "\n", "\n", "if", "thermometer_encode", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", "*", "level", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.ResNet._make_layer": [[83, 90], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.ResNet.forward": [[91, 103], ["torch.relu", "torch.relu", "torch.relu", "cifar_resnet.ResNet.layer1", "cifar_resnet.ResNet.layer2", "cifar_resnet.ResNet.layer3", "cifar_resnet.ResNet.layer4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "cifar_resnet.ResNet.view", "cifar_resnet.ResNet.linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cifar_resnet.ResNet.bn1", "cifar_resnet.ResNet.size", "cifar_resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "thermometer_encode", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.cifar_resnet18": [[105, 107], ["cifar_resnet.ResNet"], "function", ["None"], ["", "", "def", "cifar_resnet18", "(", "num_classes", "=", "10", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ",", "thermometer_encode", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.cifar_resnet34": [[108, 110], ["cifar_resnet.ResNet"], "function", ["None"], ["", "def", "cifar_resnet34", "(", "num_classes", "=", "10", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "thermometer_encode", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.cifar_resnet50": [[111, 113], ["cifar_resnet.ResNet"], "function", ["None"], ["", "def", "cifar_resnet50", "(", "num_classes", "=", "10", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "thermometer_encode", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.cifar_resnet101": [[114, 116], ["cifar_resnet.ResNet"], "function", ["None"], ["", "def", "cifar_resnet101", "(", "num_classes", "=", "10", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "thermometer_encode", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.cifar_resnet.cifar_resnet152": [[117, 119], ["cifar_resnet.ResNet"], "function", ["None"], ["", "def", "cifar_resnet152", "(", "num_classes", "=", "10", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ",", "thermometer_encode", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.BasicBlock.__init__": [[38, 55], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv3x3", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.BasicBlock.forward": [[56, 73], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.Bottleneck.__init__": [[79, 95], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv1x1", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv3x3", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.Bottleneck.forward": [[96, 117], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.__init__": [[121, 178], ["torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "self", ".", "thermometer_encode", "=", "thermometer_encode", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "if", "thermometer_encode", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", "*", "level", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "self", ".", "i_defender", "=", "None", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._make_layer": [[179, 202], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.return_hidden_state_memory": [[203, 210], ["enumerate", "resnet.ResNet.modules", "isinstance", "final_list.append"], "methods", ["None"], ["", "def", "return_hidden_state_memory", "(", "self", ")", ":", "\n", "        ", "final_list", "=", "[", "]", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "final_list", ".", "append", "(", "m", ".", "hidden_states", ")", "\n", "m", ".", "hidden_states", "=", "[", "]", "\n", "", "", "return", "final_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.insert_forward_hooks": [[211, 228], ["enumerate", "resnet.ResNet.return_hidden_state_memory", "module.hidden_states.append", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.forward", "resnet.ResNet.forward", "m.register_forward_hook", "resnet.ResNet.hook_list.append", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.return_hidden_state_memory", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.mnist_cnn.mnistCNN.forward", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.mnist_cnn.mnistCNN.forward"], ["", "def", "insert_forward_hooks", "(", "self", ",", "input_shape", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "self", ".", "hook_list", "=", "[", "]", "\n", "\n", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "module", ".", "hidden_states", ".", "append", "(", "input", "[", "0", "]", ".", "data", ")", "#store the hidden state for each input in the fc layer", "\n", "\n", "", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "layer_hook", "=", "m", ".", "register_forward_hook", "(", "hook", ")", "\n", "self", ".", "hook_list", ".", "append", "(", "layer_hook", ")", "\n", "m", ".", "hidden_states", "=", "[", "]", "\n", "", "", "if", "cuda", ":", "\n", "            ", "self", ".", "forward", "(", "torch", ".", "randn", "(", "(", "2", ",", ")", "+", "input_shape", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", ")", "#add the hooks via a dry pass with random input", "\n", "", "else", ":", "\n", "            ", "self", ".", "forward", "(", "torch", ".", "randn", "(", "(", "2", ",", ")", "+", "input_shape", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "# clear our the random input", "\n", "", "self", ".", "return_hidden_state_memory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.remove_hooks": [[229, 232], ["hook.remove"], "methods", ["None"], ["", "def", "remove_hooks", "(", "self", ")", ":", "\n", "        ", "for", "hook", "in", "self", ".", "hook_list", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.update_defender": [[233, 237], ["None"], "methods", ["None"], ["", "", "def", "update_defender", "(", "self", ",", "defender", ")", ":", "\n", "        ", "self", ".", "i_defender", "=", "defender", "\n", "self", ".", "is_attacked_log", "=", "[", "]", "\n", "self", ".", "raw_prob_log", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.fetch_attack_log": [[238, 242], ["None"], "methods", ["None"], ["", "def", "fetch_attack_log", "(", "self", ")", ":", "\n", "        ", "return_val", "=", "self", ".", "is_attacked_log", "\n", "self", ".", "is_attacked_log", "=", "[", "]", "\n", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.fetch_raw_probs": [[243, 247], ["None"], "methods", ["None"], ["", "def", "fetch_raw_probs", "(", "self", ")", ":", "\n", "        ", "return_val", "=", "self", ".", "raw_prob_log", "\n", "self", ".", "raw_prob_log", "=", "[", "]", "\n", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._forward_impl": [[248, 279], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "resnet.ResNet.is_attacked_log.append", "resnet.ResNet.raw_prob_log.append", "resnet.ResNet.i_defender.estimate", "is_attacked.append", "prob_log.append", "state.unsqueeze"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "thermometer_encode", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "# See note [TorchScript super()]", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "hidden_state", "=", "x", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "predictions", "=", "torch", ".", "argmax", "(", "x", ",", "1", ")", "\n", "if", "self", ".", "i_defender", "is", "not", "None", ":", "\n", "            ", "is_attacked", "=", "[", "]", "\n", "prob_log", "=", "[", "]", "\n", "attack_num", "=", "0", "\n", "for", "state", ",", "pred", "in", "zip", "(", "hidden_state", ",", "predictions", ")", ":", "\n", "                ", "attacked", ",", "log_prob", "=", "self", ".", "i_defender", ".", "estimate", "(", "state", ".", "unsqueeze", "(", "0", ")", ",", "pred", ")", "\n", "is_attacked", ".", "append", "(", "attacked", ")", "\n", "prob_log", ".", "append", "(", "log_prob", ")", "\n", "attack_num", "+=", "attacked", "\n", "", "self", ".", "is_attacked_log", ".", "append", "(", "is_attacked", ")", "\n", "self", ".", "raw_prob_log", ".", "append", "(", "prob_log", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet.forward": [[280, 282], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.conv1x1": [[29, 32], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet._resnet": [[285, 292], ["resnet.ResNet", "torch.hub.load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "num_classes", ",", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "thermometer_encode", ",", "level", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "num_classes", "=", "num_classes", ",", "thermometer_encode", "=", "thermometer_encode", ",", "level", "=", "level", ",", "**", "kwargs", ")", "\n", "if", "pretrained", "and", "not", "thermometer_encode", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.resnet18": [[294, 304], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet._resnet"], ["", "def", "resnet18", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "num_classes", ",", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "thermometer_encode", ",", "level", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.resnet34": [[305, 315], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet._resnet"], ["", "def", "resnet34", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "num_classes", ",", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "thermometer_encode", ",", "level", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet.resnet50": [[317, 327], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.resnet._resnet"], ["", "def", "resnet50", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "num_classes", ",", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "thermometer_encode", ",", "level", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.mnist_cnn.mnistCNN.__init__": [[6, 19], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__"], ["    ", "def", "__init__", "(", "self", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "mnistCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thermometer_encode", "=", "thermometer_encode", "\n", "if", "thermometer_encode", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", "*", "level", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "5", ",", "5", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "5", "*", "5", "*", "64", ",", "1024", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.mnist_cnn.mnistCNN.forward": [[20, 32], ["mnist_cnn.mnistCNN.relu", "mnist_cnn.mnistCNN.pool1", "mnist_cnn.mnistCNN.relu", "mnist_cnn.mnistCNN.pool2", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "mnist_cnn.mnistCNN.relu", "mnist_cnn.mnistCNN.fc2", "mnist_cnn.mnistCNN.conv1", "mnist_cnn.mnistCNN.conv2", "mnist_cnn.mnistCNN.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#if self.thermometer_encode:", "\n", "#    x = torch.cat((x[0]), dim=1)", "\n", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.models.mnist_cnn.mnist_cnn": [[33, 35], ["mnist_cnn.mnistCNN"], "function", ["None"], ["", "", "def", "mnist_cnn", "(", "num_classes", "=", "10", ",", "thermometer_encode", "=", "False", ",", "level", "=", "-", "1", ")", ":", "\n", "    ", "return", "mnistCNN", "(", "thermometer_encode", ",", "level", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.adversarial.gen_attacks": [[7, 36], ["torch.tensor().long", "zip", "attacks.keys", "attacks.values", "print", "enumerate", "enumerate", "print", "torch.tensor", "tqdm.tqdm", "attack", "enumerate", "torch.cat", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "range", "inputs.cuda.cuda", "target.cuda.cuda", "adv_list[].append", "success.cpu().numpy().mean", "len", "adv_images.cpu", "success.cpu().numpy", "success.cpu"], "function", ["None"], ["def", "gen_attacks", "(", "test_loader", ",", "classifier", ",", "attacks", ",", "epsilons", ",", "gpu_id_list", "=", "'0,1,2,3'", ",", "use_gpu", "=", "True", ")", ":", "\n", "\n", "    ", "adv_dict", "=", "{", "}", "\n", "test_labels", "=", "torch", ".", "tensor", "(", "test_loader", ".", "dataset", ".", "targets", ")", ".", "long", "(", ")", "\n", "\n", "# loop through list of attacks and generate adversarial images using the given method", "\n", "for", "attack_name", ",", "attack", "in", "zip", "(", "attacks", ".", "keys", "(", ")", ",", "attacks", ".", "values", "(", ")", ")", ":", "\n", "\n", "        ", "print", "(", "attack_name", ")", "\n", "adv_list", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "epsilons", ")", ")", "]", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "inputs", "=", "inputs", ".", "cuda", "(", "f'cuda:{gpu_id_list}'", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "f'cuda:{gpu_id_list}'", ",", "non_blocking", "=", "True", ")", "\n", "", "_", ",", "adv", ",", "success", "=", "attack", "(", "classifier", ",", "inputs", ",", "target", ",", "epsilons", "=", "epsilons", ")", "\n", "for", "i", ",", "adv_images", "in", "enumerate", "(", "adv", ")", ":", "\n", "                ", "adv_list", "[", "i", "]", ".", "append", "(", "adv_images", ".", "cpu", "(", ")", ")", "\n", "", "robust_accuracy", "=", "1.0", "-", "success", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "\n", "", "for", "i", ",", "adv_examples", "in", "enumerate", "(", "adv_list", ")", ":", "\n", "            ", "adv_examples", "=", "torch", ".", "cat", "(", "adv_examples", ",", "axis", "=", "0", ")", "\n", "#convert list of adversarial images to PyTorch dataloader for CUDA validation later", "\n", "adv_set", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "adv_examples", ",", "test_labels", ")", "\n", "adv_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "adv_set", ",", "batch_size", "=", "128", ",", "num_workers", "=", "16", ")", "\n", "adv_list", "[", "i", "]", "=", "adv_loader", "\n", "", "adv_dict", "[", "attack_name", "]", "=", "adv_list", "\n", "print", "(", "'done'", ")", "\n", "\n", "", "return", "adv_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.adversarial.cw_linf": [[37, 59], ["zip", "torch.cat().numpy", "torch.cat().numpy", "print", "art.attacks.evasion.CarliniLInfMethod", "art.attacks.evasion.CarliniLInfMethod.generate", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "adv_list.append", "print", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "cw_linf", "(", "classifier", ",", "test_loader", ",", "epsilons", ")", ":", "\n", "\n", "    ", "adv_dict", "=", "{", "}", "\n", "adv_list", "=", "[", "]", "\n", "\n", "test_image_batches", ",", "test_label_batches", "=", "zip", "(", "*", "[", "batch", "for", "batch", "in", "test_loader", "]", ")", "\n", "test_images", "=", "torch", ".", "cat", "(", "test_image_batches", ")", ".", "numpy", "(", ")", "\n", "test_labels", "=", "torch", ".", "cat", "(", "test_label_batches", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "epsilon", "in", "epsilons", ":", "\n", "        ", "print", "(", "'running cw_linf with eps {}'", ".", "format", "(", "epsilon", ")", ")", "\n", "attack", "=", "CarliniLInfMethod", "(", "classifier", ",", "eps", "=", "epsilon", ",", "confidence", "=", "0.5", ",", "max_iter", "=", "10000", ")", "\n", "adv_examples", "=", "attack", ".", "generate", "(", "test_images", ")", "\n", "\n", "adv_set", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "torch", ".", "from_numpy", "(", "adv_examples", ")", ",", "torch", ".", "from_numpy", "(", "test_labels", ")", ")", "\n", "adv_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "adv_set", ",", "batch_size", "=", "128", ",", "num_workers", "=", "16", ")", "\n", "adv_list", ".", "append", "(", "adv_loader", ")", "\n", "print", "(", "'done'", ")", "\n", "\n", "", "adv_dict", "[", "'cw_Linf'", "]", "=", "adv_list", "\n", "\n", "return", "adv_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.adversarial.gen_defences": [[60, 88], ["zip", "art.keys", "art.values", "print", "enumerate", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "np.clip.numpy", "test_labels.numpy.numpy", "numpy.clip", "defence", "def_adv_list.append", "test_label_list.append", "torch.from_numpy", "torch.from_numpy().long", "numpy.concatenate", "torch.from_numpy", "numpy.concatenate"], "function", ["None"], ["", "def", "gen_defences", "(", "adv_loader", ",", "attack_name", ",", "defences", ")", ":", "\n", "\n", "    ", "def_adv_dict", "=", "{", "}", "\n", "\n", "# loop through list of defenses and generate defended images using the given method if method isn't adv. training based", "\n", "for", "defence_name", ",", "defence", "in", "zip", "(", "defences", ".", "keys", "(", ")", ",", "defences", ".", "values", "(", ")", ")", ":", "\n", "\n", "        ", "print", "(", "defence_name", ")", "\n", "def_adv_list", "=", "[", "]", "\n", "test_label_list", "=", "[", "]", "\n", "for", "i", ",", "(", "adv_images", ",", "test_labels", ")", "in", "enumerate", "(", "tqdm", "(", "adv_loader", ")", ")", ":", "\n", "            ", "adv_images", "=", "adv_images", ".", "numpy", "(", ")", "\n", "test_labels", "=", "test_labels", ".", "numpy", "(", ")", "\n", "\n", "adv_images", "=", "np", ".", "clip", "(", "adv_images", ",", "0", ",", "1", ")", "\n", "\n", "def_adv", ",", "_", "=", "defence", "(", "adv_images", ")", "\n", "\n", "def_adv_list", ".", "append", "(", "def_adv", ")", "\n", "test_label_list", ".", "append", "(", "test_labels", ")", "\n", "\n", "#convert np array of defended images to PyTorch dataloader for CUDA validation later", "\n", "\n", "", "def_adv_set", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "def_adv_list", ")", ")", ",", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "test_label_list", ")", ")", ".", "long", "(", ")", ")", "\n", "def_adv_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "def_adv_set", ",", "batch_size", "=", "128", ",", "num_workers", "=", "16", ")", "\n", "def_adv_dict", "[", "defence_name", "]", "=", "def_adv_loader", "\n", "\n", "", "return", "def_adv_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.adversarial.adversarial_retraining": [[89, 102], ["zip", "torch.cat().numpy", "torch.cat().numpy", "attack.generate", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.from_numpy", "torch.from_numpy().long", "torch.cat", "torch.cat", "torch.from_numpy"], "function", ["None"], ["", "def", "adversarial_retraining", "(", "clean_dataloader", ",", "attack", ")", ":", "\n", "\n", "# attack training set images with given attack and save it to a new dataloader", "\n", "# ART appears to only support numpy arrays, so convert dataloader into a numpy array of images", "\n", "    ", "clean_image_batches", ",", "clean_label_batches", "=", "zip", "(", "*", "[", "batch", "for", "batch", "in", "clean_dataloader", "]", ")", "\n", "clean_images", "=", "torch", ".", "cat", "(", "clean_image_batches", ")", ".", "numpy", "(", ")", "\n", "clean_labels", "=", "torch", ".", "cat", "(", "clean_label_batches", ")", ".", "numpy", "(", ")", "\n", "\n", "adv_images", "=", "attack", ".", "generate", "(", "x", "=", "clean_images", ")", "\n", "adv_set", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "torch", ".", "from_numpy", "(", "adv_images", ")", ",", "torch", ".", "from_numpy", "(", "clean_labels", ")", ".", "long", "(", ")", ")", "\n", "adv_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "adv_set", ",", "batch_size", "=", "128", ",", "num_workers", "=", "16", ")", "\n", "\n", "return", "adv_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.adversarial.thermometer_encoding": [[103, 131], ["art.ThermometerEncoding", "print", "zip", "torch.cat().numpy", "torch.cat().numpy", "defences.ThermometerEncoding.", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "zip", "torch.cat().numpy", "torch.cat().numpy", "defences.ThermometerEncoding.", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "numpy.save", "torch.from_numpy", "torch.from_numpy().long", "numpy.save", "torch.from_numpy", "torch.from_numpy().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "thermometer_encoding", "(", "train_loader", ",", "adv_loader", ",", "thm_params", ",", "save", "=", "False", ")", ":", "\n", "\n", "    ", "encoding", "=", "defences", ".", "ThermometerEncoding", "(", "clip_values", "=", "(", "thm_params", "[", "'clip_min'", "]", ",", "thm_params", "[", "'clip_max'", "]", ")", ",", "num_space", "=", "thm_params", "[", "'num_space'", "]", ",", "channel_index", "=", "thm_params", "[", "'channel_index'", "]", ")", "\n", "\n", "print", "(", "'Generating thermometer encoded images'", ")", "\n", "clean_image_batches", ",", "clean_label_batches", "=", "zip", "(", "*", "[", "batch", "for", "batch", "in", "train_loader", "]", ")", "\n", "clean_images", "=", "torch", ".", "cat", "(", "clean_image_batches", ")", ".", "numpy", "(", ")", "\n", "clean_labels", "=", "torch", ".", "cat", "(", "clean_label_batches", ")", ".", "numpy", "(", ")", "\n", "\n", "thermometer_images", ",", "_", "=", "encoding", "(", "clean_images", ")", "\n", "if", "save", ":", "\n", "        ", "np", ".", "save", "(", "'../thermometer_encoded_clean.npy'", ",", "thermometer_images", ")", "\n", "\n", "", "encoded_set", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "torch", ".", "from_numpy", "(", "thermometer_images", ")", ",", "torch", ".", "from_numpy", "(", "clean_labels", ")", ".", "long", "(", ")", ")", "\n", "clean_encoded_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "encoded_set", ",", "batch_size", "=", "128", ",", "num_workers", "=", "16", ")", "\n", "\n", "adv_images_batches", ",", "adv_label_batches", "=", "zip", "(", "*", "[", "batch", "for", "batch", "in", "adv_loader", "]", ")", "\n", "adv_images", "=", "torch", ".", "cat", "(", "adv_images_batches", ")", ".", "numpy", "(", ")", "\n", "adv_labels", "=", "torch", ".", "cat", "(", "adv_label_batches", ")", ".", "numpy", "(", ")", "\n", "\n", "attacked_encoded", ",", "_", "=", "encoding", "(", "adv_images", ")", "\n", "\n", "if", "save", ":", "\n", "        ", "np", ".", "save", "(", "'../thermometer_encoded_adversarial.npy'", ",", "attacked_encoded", ")", "\n", "\n", "", "adv_encoded_set", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "torch", ".", "from_numpy", "(", "attacked_encoded", ")", ",", "torch", ".", "from_numpy", "(", "adv_labels", ")", ".", "long", "(", ")", ")", "\n", "adv_encoded_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "adv_encoded_set", ",", "batch_size", "=", "128", ",", "num_workers", "=", "16", ")", "\n", "return", "clean_encoded_loader", ",", "adv_encoded_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__": [[37, 74], ["art.defences.preprocessor.preprocessor.Preprocessor.__init__", "tvm.TotalVarMin.set_params"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__init__", "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.set_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "prob", "=", "0.3", ",", "\n", "norm", "=", "2", ",", "\n", "lamb", "=", "0.5", ",", "\n", "solver", "=", "\"L-BFGS-B\"", ",", "\n", "max_iter", "=", "10", ",", "\n", "clip_values", "=", "None", ",", "\n", "apply_fit", "=", "False", ",", "\n", "apply_predict", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Create an instance of total variance minimization.\n\n        :param prob: Probability of the Bernoulli distribution.\n        :type prob: `float`\n        :param norm: The norm (positive integer).\n        :type norm: `int`\n        :param lamb: The lambda parameter in the objective function.\n        :type lamb: `float`\n        :param solver: Current support: `L-BFGS-B`, `CG`, `Newton-CG`.\n        :type solver: `str`\n        :param max_iter: Maximum number of iterations when performing optimization.\n        :type max_iter: `int`\n        :param clip_values: Tuple of the form `(min, max)` representing the minimum and maximum values allowed\n               for features.\n        :type clip_values: `tuple`\n        :param apply_fit: True if applied during fitting/training.\n        :type apply_fit: `bool`\n        :param apply_predict: True if applied during predicting.\n        :type apply_predict: `bool`\n        \"\"\"", "\n", "super", "(", "TotalVarMin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_is_fitted", "=", "True", "\n", "self", ".", "_apply_fit", "=", "apply_fit", "\n", "self", ".", "_apply_predict", "=", "apply_predict", "\n", "self", ".", "set_params", "(", "prob", "=", "prob", ",", "norm", "=", "norm", ",", "lamb", "=", "lamb", ",", "solver", "=", "solver", ",", "max_iter", "=", "max_iter", ",", "clip_values", "=", "clip_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.apply_fit": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "apply_fit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_apply_fit", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.apply_predict": [[80, 83], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "apply_predict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_apply_predict", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.__call__": [[84, 112], ["x.copy", "multiprocessing.Pool", "numpy.array", "len", "ValueError", "multiprocessing.Pool.apply_async", "i.get", "numpy.clip", "numpy.array.astype", "enumerate", "numpy.random.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Apply total variance minimization to sample `x`.\n\n        :param x: Sample to compress with shape `(batch_size, width, height, depth)`.\n        :type x: `np.ndarray`\n        :param y: Labels of the sample `x`. This function does not affect them in any way.\n        :type y: `np.ndarray`\n        :return: Similar samples.\n        :rtype: `np.ndarray`\n        \"\"\"", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Feature vectors detected. Variance minimization can only be applied to data with spatial\"", "\"dimensions.\"", "\n", ")", "\n", "\n", "", "x_preproc", "=", "x", ".", "copy", "(", ")", "\n", "\n", "# Minimize one input at a time", "\n", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "20", ")", "\n", "results", "=", "[", "pool", ".", "apply_async", "(", "self", ".", "_minimize", ",", "args", "=", "(", "x_i", ",", "(", "np", ".", "random", ".", "rand", "(", "*", "x_i", ".", "shape", ")", "<", "self", ".", "prob", ")", ".", "astype", "(", "\"int\"", ")", ")", ")", "for", "i", ",", "x_i", "in", "enumerate", "(", "x_preproc", ")", "]", "\n", "output", "=", "[", "i", ".", "get", "(", ")", "for", "i", "in", "results", "]", "\n", "x_preproc", "=", "np", ".", "array", "(", "output", ")", "\n", "\n", "if", "self", ".", "clip_values", "is", "not", "None", ":", "\n", "            ", "np", ".", "clip", "(", "x_preproc", ",", "self", ".", "clip_values", "[", "0", "]", ",", "self", ".", "clip_values", "[", "1", "]", ",", "out", "=", "x_preproc", ")", "\n", "\n", "", "return", "x_preproc", ".", "astype", "(", "ART_NUMPY_DTYPE", ")", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.estimate_gradient": [[114, 116], ["None"], "methods", ["None"], ["", "def", "estimate_gradient", "(", "self", ",", "x", ",", "grad", ")", ":", "\n", "        ", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin._minimize": [[118, 143], ["x.copy", "range", "scipy.optimize.minimize", "numpy.reshape", "z_min[].flatten"], "methods", ["None"], ["", "def", "_minimize", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Minimize the total variance objective function.\n\n        :param x: Original image.\n        :type x: `np.ndarray`\n        :param mask: A matrix that decides which points are kept.\n        :type mask: `np.ndarray`\n        :return: A new image.\n        :rtype: `np.ndarray`\n        \"\"\"", "\n", "z_min", "=", "x", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "res", "=", "minimize", "(", "\n", "self", ".", "_loss_func", ",", "\n", "z_min", "[", ":", ",", ":", ",", "i", "]", ".", "flatten", "(", ")", ",", "\n", "(", "x", "[", ":", ",", ":", ",", "i", "]", ",", "mask", "[", ":", ",", ":", ",", "i", "]", ",", "self", ".", "norm", ",", "self", ".", "lamb", ")", ",", "\n", "method", "=", "self", ".", "solver", ",", "\n", "jac", "=", "self", ".", "_deri_loss_func", ",", "\n", "options", "=", "{", "\"maxiter\"", ":", "self", ".", "max_iter", "}", ",", "\n", ")", "\n", "z_min", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "reshape", "(", "res", ".", "x", ",", "z_min", "[", ":", ",", ":", ",", "i", "]", ".", "shape", ")", "\n", "\n", "", "return", "z_min", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin._loss_func": [[144, 168], ["numpy.sqrt", "numpy.reshape", "numpy.power().dot", "numpy.linalg.norm().sum", "numpy.linalg.norm().sum", "mask.flatten", "numpy.power", "numpy.linalg.norm", "numpy.linalg.norm", "x.flatten"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_loss_func", "(", "z_init", ",", "x", ",", "mask", ",", "norm", ",", "lamb", ")", ":", "\n", "        ", "\"\"\"\n        Loss function to be minimized.\n\n        :param z_init: Initial guess.\n        :type z_init: `np.ndarray`\n        :param x: Original image.\n        :type x: `np.ndarray`\n        :param mask: A matrix that decides which points are kept.\n        :type mask: `np.ndarray`\n        :param norm: The norm (positive integer).\n        :type norm: `int`\n        :param lamb: The lambda parameter in the objective function.\n        :type lamb: `float`\n        :return: Loss value.\n        :rtype: `float`\n        \"\"\"", "\n", "res", "=", "np", ".", "sqrt", "(", "np", ".", "power", "(", "z_init", "-", "x", ".", "flatten", "(", ")", ",", "2", ")", ".", "dot", "(", "mask", ".", "flatten", "(", ")", ")", ")", "\n", "z_init", "=", "np", ".", "reshape", "(", "z_init", ",", "x", ".", "shape", ")", "\n", "res", "+=", "lamb", "*", "np", ".", "linalg", ".", "norm", "(", "z_init", "[", "1", ":", ",", ":", "]", "-", "z_init", "[", ":", "-", "1", ",", ":", "]", ",", "norm", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "res", "+=", "lamb", "*", "np", ".", "linalg", ".", "norm", "(", "z_init", "[", ":", ",", "1", ":", "]", "-", "z_init", "[", ":", ",", ":", "-", "1", "]", ",", "norm", ",", "axis", "=", "0", ")", ".", "sum", "(", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin._deri_loss_func": [[169, 218], ["numpy.sqrt", "numpy.reshape", "numpy.zeros", "numpy.power().dot", "numpy.sign", "numpy.sign", "numpy.power", "numpy.power", "numpy.repeat", "numpy.repeat", "numpy.zeros.flatten", "mask.flatten", "mask.flatten", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.power", "x.flatten", "numpy.power", "numpy.power", "x.flatten"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_deri_loss_func", "(", "z_init", ",", "x", ",", "mask", ",", "norm", ",", "lamb", ")", ":", "\n", "        ", "\"\"\"\n        Derivative of loss function to be minimized.\n\n        :param z_init: Initial guess.\n        :type z_init: `np.ndarray`\n        :param x: Original image.\n        :type x: `np.ndarray`\n        :param mask: A matrix that decides which points are kept.\n        :type mask: `np.ndarray`\n        :param norm: The norm (positive integer).\n        :type norm: `int`\n        :param lamb: The lambda parameter in the objective function.\n        :type lamb: `float`\n        :return: Derivative value.\n        :rtype: `float`\n        \"\"\"", "\n", "# First compute the derivative of the first component of the loss function", "\n", "nor1", "=", "np", ".", "sqrt", "(", "np", ".", "power", "(", "z_init", "-", "x", ".", "flatten", "(", ")", ",", "2", ")", ".", "dot", "(", "mask", ".", "flatten", "(", ")", ")", ")", "\n", "if", "nor1", "<", "1e-6", ":", "\n", "            ", "nor1", "=", "1e-6", "\n", "", "der1", "=", "(", "(", "z_init", "-", "x", ".", "flatten", "(", ")", ")", "*", "mask", ".", "flatten", "(", ")", ")", "/", "(", "nor1", "*", "1.0", ")", "\n", "\n", "# Then compute the derivative of the second component of the loss function", "\n", "z_init", "=", "np", ".", "reshape", "(", "z_init", ",", "x", ".", "shape", ")", "\n", "\n", "if", "norm", "==", "1", ":", "\n", "            ", "z_d1", "=", "np", ".", "sign", "(", "z_init", "[", "1", ":", ",", ":", "]", "-", "z_init", "[", ":", "-", "1", ",", ":", "]", ")", "\n", "z_d2", "=", "np", ".", "sign", "(", "z_init", "[", ":", ",", "1", ":", "]", "-", "z_init", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "z_d1_norm", "=", "np", ".", "power", "(", "np", ".", "linalg", ".", "norm", "(", "z_init", "[", "1", ":", ",", ":", "]", "-", "z_init", "[", ":", "-", "1", ",", ":", "]", ",", "norm", ",", "axis", "=", "1", ")", ",", "norm", "-", "1", ")", "\n", "z_d2_norm", "=", "np", ".", "power", "(", "np", ".", "linalg", ".", "norm", "(", "z_init", "[", ":", ",", "1", ":", "]", "-", "z_init", "[", ":", ",", ":", "-", "1", "]", ",", "norm", ",", "axis", "=", "0", ")", ",", "norm", "-", "1", ")", "\n", "z_d1_norm", "[", "z_d1_norm", "<", "1e-6", "]", "=", "1e-6", "\n", "z_d2_norm", "[", "z_d2_norm", "<", "1e-6", "]", "=", "1e-6", "\n", "z_d1_norm", "=", "np", ".", "repeat", "(", "z_d1_norm", "[", ":", ",", "np", ".", "newaxis", "]", ",", "z_init", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "z_d2_norm", "=", "np", ".", "repeat", "(", "z_d2_norm", "[", "np", ".", "newaxis", ",", ":", "]", ",", "z_init", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "z_d1", "=", "norm", "*", "np", ".", "power", "(", "z_init", "[", "1", ":", ",", ":", "]", "-", "z_init", "[", ":", "-", "1", ",", ":", "]", ",", "norm", "-", "1", ")", "/", "z_d1_norm", "\n", "z_d2", "=", "norm", "*", "np", ".", "power", "(", "z_init", "[", ":", ",", "1", ":", "]", "-", "z_init", "[", ":", ",", ":", "-", "1", "]", ",", "norm", "-", "1", ")", "/", "z_d2_norm", "\n", "\n", "", "der2", "=", "np", ".", "zeros", "(", "z_init", ".", "shape", ")", "\n", "der2", "[", ":", "-", "1", ",", ":", "]", "-=", "z_d1", "\n", "der2", "[", "1", ":", ",", ":", "]", "+=", "z_d1", "\n", "der2", "[", ":", ",", ":", "-", "1", "]", "-=", "z_d2", "\n", "der2", "[", ":", ",", "1", ":", "]", "+=", "z_d2", "\n", "der2", "=", "lamb", "*", "der2", ".", "flatten", "(", ")", "\n", "\n", "# Total derivative", "\n", "return", "der1", "+", "der2", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.fit": [[219, 224], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        No parameters to learn for this method; do nothing.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.set_params": [[226, 272], ["super().set_params", "logger.error", "ValueError", "logger.error", "ValueError", "logger.error", "ValueError", "logger.error", "ValueError", "numpy.array().any", "isinstance", "isinstance", "isinstance", "len", "ValueError", "ValueError", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jeffreyzpan_adversarial-playground.adversarial.tvm.TotalVarMin.set_params"], ["", "def", "set_params", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Take in a dictionary of parameters and applies defence-specific checks before saving them as attributes.\n\n        :param prob: Probability of the Bernoulli distribution.\n        :type prob: `float`\n        :param norm: The norm (positive integer).\n        :type norm: `int`\n        :param lamb: The lambda parameter in the objective function.\n        :type lamb: `float`\n        :param solver: Current support: `L-BFGS-B`, `CG`, `Newton-CG`.\n        :type solver: `str`\n        :param max_iter: Maximum number of iterations when performing optimization.\n        :type max_iter: `int`\n        :param clip_values: Tuple of the form `(min, max)` representing the minimum and maximum values allowed\n               for features.\n        :type clip_values: `tuple`\n        \"\"\"", "\n", "# Save defence-specific parameters", "\n", "super", "(", "TotalVarMin", ",", "self", ")", ".", "set_params", "(", "**", "kwargs", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "prob", ",", "(", "float", ",", "int", ")", ")", "or", "self", ".", "prob", "<", "0.0", "or", "self", ".", "prob", ">", "1.0", ":", "\n", "            ", "logger", ".", "error", "(", "\"Probability must be between 0 and 1.\"", ")", "\n", "raise", "ValueError", "(", "\"Probability must be between 0 and 1.\"", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "self", ".", "norm", ",", "(", "int", ",", "np", ".", "int", ")", ")", "or", "self", ".", "norm", "<=", "0", ":", "\n", "            ", "logger", ".", "error", "(", "\"Norm must be a positive integer.\"", ")", "\n", "raise", "ValueError", "(", "\"Norm must be a positive integer.\"", ")", "\n", "\n", "", "if", "not", "(", "self", ".", "solver", "==", "\"L-BFGS-B\"", "or", "self", ".", "solver", "==", "\"CG\"", "or", "self", ".", "solver", "==", "\"Newton-CG\"", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Current support only L-BFGS-B, CG, Newton-CG.\"", ")", "\n", "raise", "ValueError", "(", "\"Current support only L-BFGS-B, CG, Newton-CG.\"", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "self", ".", "max_iter", ",", "(", "int", ",", "np", ".", "int", ")", ")", "or", "self", ".", "max_iter", "<=", "0", ":", "\n", "            ", "logger", ".", "error", "(", "\"Number of iterations must be a positive integer.\"", ")", "\n", "raise", "ValueError", "(", "\"Number of iterations must be a positive integer.\"", ")", "\n", "\n", "", "if", "self", ".", "clip_values", "is", "not", "None", ":", "\n", "\n", "            ", "if", "len", "(", "self", ".", "clip_values", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"`clip_values` should be a tuple of 2 floats containing the allowed data range.\"", ")", "\n", "\n", "", "if", "np", ".", "array", "(", "self", ".", "clip_values", "[", "0", "]", ">=", "self", ".", "clip_values", "[", "1", "]", ")", ".", "any", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid `clip_values`: min >= max.\"", ")", "\n", "\n", "", "", "return", "True", "\n", "", "", ""]]}