{"home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.ex_post_regret": [[10, 22], ["numpy.abs", "regret_lst.append", "regret_lst.append"], "function", ["None"], ["def", "ex_post_regret", "(", "arm_lst", ",", "best_arm", ")", ":", "\n", "    ", "regret", "=", "0", "\n", "regret_lst", "=", "[", "]", "\n", "for", "i", "in", "arm_lst", ":", "\n", "        ", "if", "i", "!=", "best_arm", ":", "\n", "            ", "regret", "+=", "np", ".", "abs", "(", "THETA", "*", "best_arm", "-", "THETA", "*", "i", ")", "\n", "regret_lst", ".", "append", "(", "regret", ")", "\n", "", "else", ":", "\n", "            ", "regret_lst", ".", "append", "(", "regret", ")", "\n", "# Include the initial stage", "\n", "", "", "regret", "+=", "INIT_LEN", "/", "2", "*", "THETA", "\n", "return", "regret", ",", "regret_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.accuracy_plot": [[24, 32], ["range", "matplotlib.plot", "line.set_label", "matplotlib.plot", "line2.set_label", "matplotlib.legend", "matplotlib.show", "len"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot"], ["", "def", "accuracy_plot", "(", "theta_lst", ",", "theta_ols_lst", ")", ":", "\n", "    ", "time_ax", "=", "range", "(", "len", "(", "theta_lst", ")", ")", "\n", "line", ",", "=", "plt", ".", "plot", "(", "theta_lst", ",", "time_ax", ",", "'-g'", ")", "\n", "line", ".", "set_label", "(", "'IV-Regression'", ")", "\n", "line2", ",", "=", "plt", ".", "plot", "(", "theta_ols_lst", ",", "time_ax", ",", "'-b'", ")", "\n", "line2", ".", "set_label", "(", "'OLS'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.new_rho_experiment": [[38, 67], ["numpy.arange", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.show", "algorithm.initial_stage", "rho_lst.append", "print"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.initial_stage"], ["", "def", "new_rho_experiment", "(", ")", ":", "\n", "    ", "global", "THETA", "\n", "global", "P", "\n", "global", "INIT_LEN", "\n", "global", "ALG1_LEN", "\n", "global", "T", "\n", "THETA", "=", "0.5", "\n", "P", "=", "0.5", "\n", "INIT_LEN", "=", "1000", "\n", "ALG1_LEN", "=", "10000", "# hyperparameter", "\n", "T", "=", "1000000", "\n", "c1_lst", "=", "[", "0", ",", "0.25", ",", "0.5", ",", "0.75", ",", "1", "]", "\n", "gap", "=", "0.5", "# hyperparameter", "\n", "# var_lst = np.arange(0.1, 1, .1)", "\n", "var_lst", "=", "np", ".", "arange", "(", "0.8", ",", "2", ",", "0.2", ")", "\n", "# c1_val = 0.5", "\n", "i", "=", "0", "\n", "for", "c1_val", "in", "c1_lst", ":", "\n", "        ", "rho_lst", "=", "[", "]", "\n", "for", "var_val", "in", "var_lst", ":", "\n", "            ", "rho", ",", "_", "=", "initial_stage", "(", "500", ",", "500", ",", "threshold", "=", "1000", ",", "c0", "=", "c1_val", "-", "gap", ",", "c1", "=", "c1_val", ",", "mu", "=", "-", "0.5", ",", "var_g", "=", "var_val", ")", "\n", "rho_lst", ".", "append", "(", "rho", ")", "\n", "print", "(", "\"C1: {}, C0: {}, G: {}, Rho: {}\"", ".", "format", "(", "c1_val", ",", "c1_val", "-", "gap", ",", "gap", ",", "rho", ")", ")", "\n", "", "i", "+=", "1", "\n", "plt", ".", "plot", "(", "var_lst", ",", "rho_lst", ")", "\n", "plt", ".", "xlabel", "(", "'variance in prior over g(u) with var: {}'", ".", "format", "(", "var_val", ")", ")", "\n", "plt", ".", "ylabel", "(", "'rho'", ")", "\n", "plt", ".", "savefig", "(", "'g_prior_var_rho_experiment_{}'", ".", "format", "(", "i", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.new_sampling_stage_experiment": [[70, 126], ["algorithm.initial_stage", "numpy.arange", "algorithm.racing_stage_threshold", "range", "open", "pickle.dump", "open.close", "open", "pickle.dump", "open.close", "open", "pickle.dump", "open.close", "numpy.random.uniform", "enumerate", "str", "str", "str", "range", "range", "algorithm.sampling_stage", "utils.combine_samples", "utils.iv_regression", "numpy.abs", "utils.ols", "numpy.abs", "print", "print", "avg_approx[].append", "avg_ols[].append", "len", "len", "print", "print"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.initial_stage", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.racing_stage_threshold", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.sampling_stage", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.combine_samples", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols"], ["", "", "def", "new_sampling_stage_experiment", "(", "idx", ")", ":", "\n", "    ", "global", "THETA", "\n", "global", "P", "\n", "global", "INIT_LEN", "\n", "global", "T", "\n", "THETA", "=", "0.5", "\n", "P", "=", "0.5", "\n", "INIT_LEN", "=", "1000", "\n", "T", "=", "1000000", "\n", "rho", ",", "best", "=", "initial_stage", "(", "500", ",", "500", ",", "threshold", "=", "1000", ",", "c0", "=", "0", ",", "c1", "=", "0.1", ",", "mu", "=", "-", "0.5", ")", "# hyperparameter", "\n", "if", "rho", "==", "0", ":", "\n", "        ", "rho", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.001", ",", "high", "=", "0.03", ")", "\n", "", "tau", "=", "0.1", "\n", "num_run", "=", "5", "\n", "# phases_lst = [500, 1000, 1500]", "\n", "# phases_lst = np.arange(500, 5500, 500)", "\n", "phases_lst", "=", "np", ".", "arange", "(", "200000", ",", "2200000", ",", "200000", ")", "\n", "avg_approx", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "phases_lst", ")", ")", "]", "\n", "avg_ols", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "phases_lst", ")", ")", "]", "\n", "threshold", "=", "racing_stage_threshold", "(", "tau", ")", "\n", "for", "run", "in", "range", "(", "num_run", ")", ":", "\n", "        ", "sample_lst", "=", "[", "]", "\n", "prev_phase", "=", "0", "\n", "for", "i", ",", "num_phases", "in", "enumerate", "(", "phases_lst", ")", ":", "\n", "# samples = sampling_stage(rho, best, phases=num_phases-prev_phase)", "\n", "            ", "samples", "=", "sampling_stage", "(", "rho", ",", "best", ",", "alg1_len", "=", "num_phases", "-", "prev_phase", ")", "\n", "prev_phase", "=", "num_phases", "\n", "sample_lst", "=", "combine_samples", "(", "sample_lst", ",", "samples", ")", "\n", "theta_hat", "=", "iv_regression", "(", "sample_lst", ")", "\n", "approximation_bound", "=", "np", ".", "abs", "(", "theta_hat", "-", "THETA", ")", "\n", "theta_ols", "=", "ols", "(", "samples", ")", "\n", "ols_bound", "=", "np", ".", "abs", "(", "theta_ols", "-", "THETA", ")", "\n", "print", "(", "\"Approximation bound: {}\"", ".", "format", "(", "approximation_bound", ")", ")", "\n", "print", "(", "\"OLS bound: {}\"", ".", "format", "(", "ols_bound", ")", ")", "\n", "avg_approx", "[", "i", "]", ".", "append", "(", "approximation_bound", ")", "\n", "avg_ols", "[", "i", "]", ".", "append", "(", "ols_bound", ")", "\n", "if", "approximation_bound", "<=", "threshold", ":", "\n", "                ", "print", "(", "\"Sampling Stage Length: {}, reach BIC in racing stage\"", ".", "format", "(", "num_phases", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Sampling Stage Length: {}, does not reach BIC in racing stage\"", ".", "format", "(", "num_phases", ")", ")", "\n", "# pickle", "\n", "", "", "", "filename", "=", "'sampling_stage_iv_'", "+", "str", "(", "idx", ")", "\n", "outfile", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "avg_approx", ",", "outfile", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "\n", "filename_ols", "=", "'sampling_stage_ols_'", "+", "str", "(", "idx", ")", "\n", "outfile", "=", "open", "(", "filename_ols", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "avg_ols", ",", "outfile", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "\n", "filename_rho", "=", "'rho_'", "+", "str", "(", "idx", ")", "\n", "outfile", "=", "open", "(", "filename_rho", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "rho", ",", "outfile", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "return", "phases_lst", ",", "avg_approx", ",", "avg_ols", ",", "rho", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot": [[128, 148], ["utils.calc_average", "utils.calc_average", "matplotlib.plot", "matplotlib.plot", "matplotlib.yscale", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.show", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.calc_average", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.calc_average", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot"], ["", "def", "plot", "(", "phases_lst", ",", "avg_approx", ",", "avg_ols", ",", "i", "=", "100", ",", "rho", "=", "0.003", ",", "tau", "=", "0.1", ",", "stage", "=", "'racing'", ")", ":", "\n", "    ", "avg", ",", "max_error", ",", "min_error", "=", "calc_average", "(", "avg_approx", ",", "n", "=", "5", ")", "\n", "avg_ols", ",", "max_error_ols", ",", "min_error_ols", "=", "calc_average", "(", "avg_ols", ",", "n", "=", "5", ")", "\n", "plt", ".", "plot", "(", "phases_lst", ",", "avg", ",", "label", "=", "'IV-Regression treatment effect estimation error'", ",", "color", "=", "'blue'", ")", "\n", "plt", ".", "plot", "(", "phases_lst", ",", "avg_ols", ",", "label", "=", "'OLS treatment effect estimation error'", ",", "color", "=", "'red'", ")", "\n", "plt", ".", "yscale", "(", "'log'", ")", "\n", "plt", ".", "fill_between", "(", "phases_lst", ",", "min_error", ",", "max_error", ",", "alpha", "=", "0.3", ",", "facecolor", "=", "'blue'", ")", "\n", "plt", ".", "fill_between", "(", "phases_lst", ",", "min_error_ols", ",", "max_error_ols", ",", "alpha", "=", "0.3", ",", "facecolor", "=", "'red'", ")", "\n", "if", "stage", "==", "'racing'", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Number of rounds in Algorithm 2 with tau={:.4f}'", ".", "format", "(", "tau", ")", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Number of rounds in Algorithm 1 with rho={:.4f}'", ".", "format", "(", "rho", ")", ")", "\n", "", "plt", ".", "ylabel", "(", "'Approximation Error'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "if", "stage", "==", "'racing'", ":", "\n", "        ", "plt", ".", "savefig", "(", "'racing_stage_experiment_{}'", ".", "format", "(", "i", ")", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "savefig", "(", "'new_sampling_stage_experiment_phase_tauval_{}'", ".", "format", "(", "i", ")", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.racing_stage_experiment_prepartion": [[151, 179], ["utils.find_best_tau", "utils.find_best_tau", "print", "print", "print", "algorithm.faster_sampling_stage", "open", "pickle.dump", "open.close", "print", "math.ceil", "print", "print", "str", "algorithm.racing_stage_threshold"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.find_best_tau", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.find_best_tau", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.faster_sampling_stage", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.racing_stage_threshold"], ["", "def", "racing_stage_experiment_prepartion", "(", "idx", ",", "length", "=", "None", ")", ":", "\n", "    ", "global", "THETA", "\n", "global", "P", "\n", "global", "INIT_LEN", "\n", "global", "T", "\n", "THETA", "=", "0.5", "\n", "P", "=", "0.5", "\n", "INIT_LEN", "=", "1000", "\n", "T", "=", "1000000", "\n", "tau_0", ",", "constant_0", "=", "find_best_tau", "(", "type", "=", "0", ")", "\n", "tau_1", ",", "constant_1", "=", "find_best_tau", "(", "type", "=", "1", ")", "\n", "print", "(", "\"Tau for type 0: {}\"", ".", "format", "(", "tau_0", ")", ")", "\n", "print", "(", "\"Tau for type 1: {}\"", ".", "format", "(", "tau_1", ")", ")", "\n", "print", "(", "\"Constant for type 0: {}\"", ".", "format", "(", "constant_0", ")", ")", "\n", "if", "length", "is", "None", ":", "\n", "        ", "sampling_stage_len", "=", "math", ".", "ceil", "(", "racing_stage_threshold", "(", "tau_0", ",", "type", "=", "0", ",", "rho", "=", "0.001", ")", ")", "\n", "print", "(", "\"Sampling stage length: {}\"", ".", "format", "(", "sampling_stage_len", ")", ")", "\n", "", "else", ":", "\n", "        ", "sampling_stage_len", "=", "length", "\n", "print", "(", "\"Sampling stage length: {}\"", ".", "format", "(", "sampling_stage_len", ")", ")", "\n", "", "samples", "=", "faster_sampling_stage", "(", "0.001", ",", "0", ",", "alg1_len", "=", "sampling_stage_len", ",", "threshold", "=", "constant_0", ")", "\n", "filename_sample", "=", "'sampling_stage_sample_tau_'", "+", "str", "(", "idx", ")", "\n", "outfile", "=", "open", "(", "filename_sample", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "(", "samples", ",", "tau_0", ",", "tau_1", ")", ",", "outfile", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "print", "(", "\"Sampling stage done\"", ")", "\n", "\n", "return", "samples", ",", "tau_0", ",", "tau_1", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.racing_stage_experiment": [[181, 216], ["utils.iv_regression", "utils.ols", "len", "print", "numpy.arange", "range", "enumerate", "open", "pickle.dump", "open.close", "range", "range", "algorithm.racing_stage_only", "utils.combine_samples", "utils.iv_regression", "numpy.abs", "utils.ols", "numpy.abs", "print", "print", "avg_approx[].append", "avg_ols[].append", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.racing_stage_only", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.combine_samples", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols"], ["", "def", "racing_stage_experiment", "(", "samples", ",", "tau_0", ",", "tau_1", ",", "idx", ",", "num_run", "=", "5", ")", ":", "\n", "    ", "theta_hat", "=", "iv_regression", "(", "samples", ")", "\n", "theta_hat_ols", "=", "ols", "(", "samples", ")", "\n", "y_lst", ",", "x_lst", ",", "z_lst", "=", "samples", "\n", "n", "=", "len", "(", "y_lst", ")", "\n", "print", "(", "\"Length of sampling stage: {}\"", ".", "format", "(", "n", ")", ")", "\n", "phases_lst", "=", "np", ".", "arange", "(", "200000", ",", "2200000", ",", "200000", ")", "\n", "avg_approx", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "phases_lst", ")", ")", "]", "\n", "avg_ols", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "phases_lst", ")", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_run", ")", ":", "\n", "        ", "prev_phase", "=", "0", "\n", "sample_lst", "=", "[", "]", "\n", "for", "j", ",", "length", "in", "enumerate", "(", "phases_lst", ")", ":", "\n", "# just running the racing stage without any while condition", "\n", "            ", "best", ",", "t", ",", "theta_lst", ",", "theta_ols_lst", ",", "y_lst", ",", "x_lst", ",", "z_lst", "=", "racing_stage_only", "(", "theta_hat", ",", "theta_hat_ols", ",", "threshold", "=", "None", ",", "length", "=", "length", "-", "prev_phase", ",", "tau_0", "=", "tau_0", ",", "tau_1", "=", "tau_1", ")", "\n", "\n", "prev_phase", "=", "length", "\n", "sample_lst", "=", "combine_samples", "(", "sample_lst", ",", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "theta_hat", "=", "iv_regression", "(", "sample_lst", ")", "\n", "approximation_bound", "=", "np", ".", "abs", "(", "theta_hat", "-", "THETA", ")", "\n", "theta_ols", "=", "ols", "(", "samples", ")", "\n", "ols_bound", "=", "np", ".", "abs", "(", "theta_ols", "-", "THETA", ")", "\n", "print", "(", "\"Approximation bound: {}\"", ".", "format", "(", "approximation_bound", ")", ")", "\n", "print", "(", "\"OLS bound: {}\"", ".", "format", "(", "ols_bound", ")", ")", "\n", "avg_approx", "[", "j", "]", ".", "append", "(", "approximation_bound", ")", "\n", "avg_ols", "[", "j", "]", ".", "append", "(", "ols_bound", ")", "\n", "print", "(", "\"Best arm overall: {}\"", ".", "format", "(", "best", ")", ")", "\n", "\n", "", "filename_rho", "=", "'racing_stage_sample_{}_{}'", ".", "format", "(", "i", ",", "idx", ")", "\n", "outfile", "=", "open", "(", "filename_rho", ",", "'wb'", ")", "\n", "samples", "=", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", "\n", "pickle", ".", "dump", "(", "samples", ",", "outfile", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "", "return", "phases_lst", ",", "avg_approx", ",", "avg_ols", ",", "tau_0", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot_racing_stage": [[218, 244], ["open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "len", "range", "range", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "utils.iv_regression", "utils.ols", "theta_lst.append", "theta_ols_lst.append", "str", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols"], ["", "def", "plot_racing_stage", "(", "idx", "=", "1", ")", ":", "\n", "    ", "infile", "=", "open", "(", "'racing_stage_complete_{}'", ".", "format", "(", "idx", ")", ",", "'rb'", ")", "\n", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "infile", "=", "open", "(", "'sampling_stage_sample_tau_'", "+", "str", "(", "idx", ")", ",", "'rb'", ")", "\n", "_", ",", "tau_0", ",", "tau_1", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "y_lst", ")", "\n", "theta_lst", "=", "[", "]", "\n", "theta_ols_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "20000", ",", "n", ",", "20000", ")", ":", "\n", "        ", "y_sample", ",", "x_sample", ",", "z_sample", "=", "y_lst", "[", ":", "i", "]", ",", "x_lst", "[", ":", "i", "]", ",", "z_lst", "[", ":", "i", "]", "\n", "theta_hat", "=", "iv_regression", "(", "(", "y_sample", ",", "x_sample", ",", "z_sample", ")", ")", "\n", "theta_ols", "=", "ols", "(", "(", "y_sample", ",", "x_sample", ",", "z_sample", ")", ")", "\n", "theta_lst", ".", "append", "(", "np", ".", "abs", "(", "theta_hat", "-", "THETA", ")", ")", "\n", "theta_ols_lst", ".", "append", "(", "np", ".", "abs", "(", "theta_ols", "-", "THETA", ")", ")", "\n", "\n", "", "x_axis", "=", "range", "(", "20000", ",", "n", ",", "20000", ")", "\n", "plt", ".", "plot", "(", "x_axis", ",", "theta_lst", ",", "label", "=", "'IV-Regression treatment effect estimation error'", ",", "color", "=", "'blue'", ")", "\n", "plt", ".", "plot", "(", "x_axis", ",", "theta_ols_lst", ",", "label", "=", "'OLS treatment effect estimation error'", ",", "color", "=", "'red'", ")", "\n", "plt", ".", "xlabel", "(", "'Number of rounds in Algorithm 2 with tau={:.4f}'", ".", "format", "(", "tau_0", ")", ")", "\n", "plt", ".", "ylabel", "(", "'Approximation Error'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "savefig", "(", "'racing_stage_experiment_complete_{}'", ".", "format", "(", "idx", ")", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot_regret": [[246, 263], ["open", "pickle.load", "open.close", "range", "range", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "len", "regret_lst.append", "len", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.plot"], ["", "def", "plot_regret", "(", "idx", "=", "1", ")", ":", "\n", "    ", "infile", "=", "open", "(", "'racing_stage_complete_{}'", ".", "format", "(", "idx", ")", ",", "'rb'", ")", "\n", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "regret_lst", "=", "[", "]", "\n", "regret", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_lst", ")", ")", ":", "\n", "        ", "tmp", "=", "THETA", "*", "np", ".", "abs", "(", "x_lst", "[", "i", "]", "-", "1", ")", "\n", "regret", "+=", "tmp", "\n", "regret_lst", ".", "append", "(", "regret", ")", "\n", "", "x_axis", "=", "range", "(", "len", "(", "x_lst", ")", ")", "\n", "plt", ".", "plot", "(", "x_axis", ",", "regret_lst", ",", "label", "=", "'Regret for combined Algorithm 1 + Algorithm 2'", ")", "\n", "plt", ".", "xlabel", "(", "'Total number of rounds in the Algorithm 1 + Algorithm 2'", ")", "\n", "plt", ".", "ylabel", "(", "'Regret Accumulated'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "savefig", "(", "'regret_{}'", ".", "format", "(", "idx", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.main": [[265, 278], ["clean_experiment.racing_stage_experiment_prepartion", "open", "pickle.load", "open.close", "algorithm.racing_stage", "print", "print", "open", "pickle.dump", "open.close", "str"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.clean_experiment.racing_stage_experiment_prepartion", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.racing_stage"], ["", "def", "main", "(", "idx", "=", "1", ",", "alg1_len", "=", "None", ")", ":", "\n", "    ", "racing_stage_experiment_prepartion", "(", "idx", ",", "length", "=", "alg1_len", ")", "\n", "infile", "=", "open", "(", "'sampling_stage_sample_tau_'", "+", "str", "(", "idx", ")", ",", "'rb'", ")", "\n", "samples", ",", "tau_0", ",", "tau_1", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "best", ",", "t", ",", "theta_lst", ",", "theta_ols_lst", ",", "y_lst", ",", "x_lst", ",", "z_lst", "=", "racing_stage", "(", "samples", ",", "tau_0", "=", "tau_0", ",", "tau_1", "=", "tau_1", ")", "\n", "print", "(", "\"Best arm overall: {}\"", ".", "format", "(", "best", ")", ")", "\n", "print", "(", "\"End phase: {}\"", ".", "format", "(", "t", ")", ")", "\n", "filename_rho", "=", "'racing_stage_complete_{}'", ".", "format", "(", "idx", ")", "\n", "outfile", "=", "open", "(", "filename_rho", ",", "'wb'", ")", "\n", "samples", "=", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", "\n", "pickle", ".", "dump", "(", "samples", ",", "outfile", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.__init__": [[11, 28], ["numpy.sqrt", "scipy.stats.truncnorm", "scipy.stats.truncnorm.rvs", "numpy.random.normal", "numpy.random.normal", "agent.Type1Agent.find_best_tau"], "methods", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.find_best_tau"], ["    ", "def", "__init__", "(", "self", ",", "t", ",", "rec", ",", "alg1_start", "=", "INIT_LEN", ",", "alg2_start", "=", "INIT_LEN", "+", "ALG1_LEN", ",", "mu", "=", "0.9", ",", "c", "=", "0.5", ",", "var", "=", "1", ",", "var_g", "=", "1", ")", ":", "\n", "# self.theta = np.random.normal(mu, 1)", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "var", "=", "var", "\n", "self", ".", "var_g", "=", "var_g", "\n", "self", ".", "std", "=", "np", ".", "sqrt", "(", "self", ".", "var", ")", "\n", "alpha", "=", "(", "-", "1", "-", "self", ".", "mu", ")", "/", "self", ".", "std", "\n", "beta", "=", "(", "1", "-", "self", ".", "mu", ")", "/", "self", ".", "std", "\n", "self", ".", "dist", "=", "truncnorm", "(", "alpha", ",", "beta", ",", "loc", "=", "self", ".", "mu", ",", "scale", "=", "self", ".", "std", ")", "\n", "self", ".", "theta", "=", "truncnorm", ".", "rvs", "(", "alpha", ",", "beta", ",", "loc", "=", "self", ".", "mu", ",", "scale", "=", "self", ".", "std", ")", "\n", "mu_g", "=", "np", ".", "random", ".", "normal", "(", "c", ",", "var_g", ")", "\n", "self", ".", "g", "=", "np", ".", "random", ".", "normal", "(", "mu_g", ",", "var_g", ")", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "alg1_start", "=", "alg1_start", "\n", "self", ".", "alg2_start", "=", "alg2_start", "\n", "self", ".", "rec", "=", "rec", "\n", "self", ".", "tau", "=", "self", ".", "find_best_tau", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.action": [[29, 38], ["agent.Type1Agent.get_racing_stage_constant"], "methods", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_racing_stage_constant"], ["", "def", "action", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "self", ".", "alg1_start", "is", "None", ":", "\n", "# free to pick arm", "\n", "            ", "return", "1", "\n", "", "elif", "self", ".", "get_racing_stage_constant", "(", "self", ".", "tau", ")", "<=", "self", ".", "t", ":", "\n", "# racing stage", "\n", "            ", "return", "self", ".", "rec", "\n", "", "else", ":", "# sampling stage", "\n", "            ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.get_g": [[39, 41], ["None"], "methods", ["None"], ["", "", "def", "get_g", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.get_mu": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_mu", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.get_type": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_type", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.get_std": [[48, 50], ["None"], "methods", ["None"], ["", "def", "get_std", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.get_racing_stage_constant": [[51, 56], ["numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.log", "agent.Type1Agent.dist.cdf"], "methods", ["None"], ["", "def", "get_racing_stage_constant", "(", "self", ",", "tau", ",", "delta", "=", "0.1", ",", "p", "=", "0.5", ",", "rho", "=", "0.001", ")", ":", "\n", "        ", "prob", "=", "8", "*", "self", ".", "var_g", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "log", "(", "5", "/", "delta", ")", ")", "/", "(", "tau", "*", "(", "self", ".", "dist", ".", "cdf", "(", "-", "tau", ")", ")", "*", "p", "*", "rho", "*", "(", "1", "-", "rho", ")", ")", "\n", "prob", "+=", "(", "3", "-", "rho", ")", "*", "np", ".", "sqrt", "(", "rho", "*", "np", ".", "log", "(", "5", "/", "delta", ")", "/", "(", "2", "*", "(", "1", "-", "rho", ")", ")", ")", "\n", "prob", "=", "prob", "**", "2", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type1Agent.find_best_tau": [[57, 68], ["numpy.arange", "agent.Type1Agent.dist.cdf"], "methods", ["None"], ["", "def", "find_best_tau", "(", "self", ")", ":", "\n", "        ", "tau_lst", "=", "np", ".", "arange", "(", "0.1", ",", "1", ",", "0.01", ")", "\n", "best", "=", "0", "\n", "best_tau", "=", "0", "\n", "\n", "for", "tau", "in", "tau_lst", ":", "\n", "            ", "tmp", "=", "tau", "*", "(", "self", ".", "dist", ".", "cdf", "(", "-", "tau", ")", ")", "\n", "if", "tmp", ">", "best", ":", "\n", "                ", "best", "=", "tmp", "\n", "best_tau", "=", "tau", "\n", "", "", "return", "best_tau", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.__init__": [[71, 88], ["numpy.sqrt", "scipy.stats.truncnorm", "scipy.stats.truncnorm.rvs", "numpy.random.normal", "numpy.random.normal", "agent.Type0Agent.find_best_tau"], "methods", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.find_best_tau"], ["    ", "def", "__init__", "(", "self", ",", "t", ",", "rec", ",", "alg1_start", "=", "INIT_LEN", ",", "alg2_start", "=", "INIT_LEN", "+", "ALG1_LEN", ",", "mu", "=", "-", "0.5", ",", "c", "=", "0", ",", "var", "=", "1", ",", "var_g", "=", "1", ")", ":", "\n", "# self.theta = np.random.normal(mu, 1)", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "var", "=", "var", "\n", "self", ".", "var_g", "=", "var_g", "\n", "self", ".", "std", "=", "np", ".", "sqrt", "(", "self", ".", "var", ")", "\n", "alpha", "=", "(", "-", "1", "-", "self", ".", "mu", ")", "/", "self", ".", "std", "\n", "beta", "=", "(", "1", "-", "self", ".", "mu", ")", "/", "self", ".", "std", "\n", "self", ".", "dist", "=", "truncnorm", "(", "alpha", ",", "beta", ",", "loc", "=", "self", ".", "mu", ",", "scale", "=", "self", ".", "std", ")", "\n", "self", ".", "theta", "=", "truncnorm", ".", "rvs", "(", "alpha", ",", "beta", ",", "loc", "=", "self", ".", "mu", ",", "scale", "=", "self", ".", "std", ")", "\n", "mu_g", "=", "np", ".", "random", ".", "normal", "(", "c", ",", "var_g", ")", "\n", "self", ".", "g", "=", "np", ".", "random", ".", "normal", "(", "mu_g", ",", "var_g", ")", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "alg1_start", "=", "alg1_start", "\n", "self", ".", "alg2_start", "=", "alg2_start", "\n", "self", ".", "rec", "=", "rec", "\n", "self", ".", "tau", "=", "self", ".", "find_best_tau", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.action": [[89, 98], ["agent.Type0Agent.get_racing_stage_constant"], "methods", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_racing_stage_constant"], ["", "def", "action", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "self", ".", "alg1_start", "or", "self", ".", "rec", "is", "None", ":", "\n", "# free to pick arm", "\n", "            ", "return", "0", "\n", "", "elif", "self", ".", "get_racing_stage_constant", "(", "self", ".", "tau", ")", "<=", "self", ".", "t", ":", "\n", "# racing stage", "\n", "            ", "return", "self", ".", "rec", "\n", "", "else", ":", "# sampling stage", "\n", "            ", "return", "self", ".", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_g": [[99, 101], ["None"], "methods", ["None"], ["", "", "def", "get_g", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_mu": [[102, 104], ["None"], "methods", ["None"], ["", "def", "get_mu", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_type": [[105, 107], ["None"], "methods", ["None"], ["", "def", "get_type", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_std": [[108, 110], ["None"], "methods", ["None"], ["", "def", "get_std", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_racing_stage_constant": [[111, 116], ["numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.log", "agent.Type0Agent.dist.cdf"], "methods", ["None"], ["", "def", "get_racing_stage_constant", "(", "self", ",", "tau", ",", "delta", "=", "0.1", ",", "p", "=", "0.5", ",", "rho", "=", "0.001", ")", ":", "\n", "        ", "prob", "=", "8", "*", "self", ".", "var_g", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "log", "(", "5", "/", "delta", ")", ")", "/", "(", "tau", "*", "(", "1", "-", "self", ".", "dist", ".", "cdf", "(", "tau", ")", ")", "*", "p", "*", "rho", "*", "(", "1", "-", "rho", ")", ")", "\n", "prob", "+=", "(", "3", "-", "rho", ")", "*", "np", ".", "sqrt", "(", "rho", "*", "np", ".", "log", "(", "5", "/", "delta", ")", "/", "(", "2", "*", "(", "1", "-", "rho", ")", ")", ")", "\n", "prob", "=", "prob", "**", "2", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.find_best_tau": [[117, 128], ["numpy.arange", "agent.Type0Agent.dist.cdf"], "methods", ["None"], ["", "def", "find_best_tau", "(", "self", ")", ":", "\n", "        ", "tau_lst", "=", "np", ".", "arange", "(", "0.1", ",", "1", ",", "0.01", ")", "\n", "best", "=", "0", "\n", "best_tau", "=", "0", "\n", "\n", "for", "tau", "in", "tau_lst", ":", "\n", "            ", "tmp", "=", "tau", "*", "(", "1", "-", "self", ".", "dist", ".", "cdf", "(", "tau", ")", ")", "\n", "if", "tmp", ">", "best", ":", "\n", "                ", "best", "=", "tmp", "\n", "best_tau", "=", "tau", "\n", "", "", "return", "best_tau", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.initial_stage": [[12, 51], ["range", "print", "print", "range", "utils.get_random_agent", "numpy.sqrt", "numpy.sqrt", "utils.get_random_agent.get_g", "utils.get_random_agent.get_type", "utils.get_random_agent.action", "numpy.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.get_random_agent", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_g", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_type", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.action"], ["def", "initial_stage", "(", "l0", ",", "l1", ",", "threshold", "=", "1000", ",", "c0", "=", "0", ",", "c1", "=", "0.5", ",", "mu", "=", "-", "0.5", ",", "var", "=", "1", ",", "var_g", "=", "1", ")", ":", "\n", "    ", "count", "=", "0", "\n", "avg_gap", "=", "0", "\n", "# Calculate the gap", "\n", "delta", "=", "0.1", "# failure probability NEED TO RECHECK THIS", "\n", "G", "=", "c1", "-", "c0", "\n", "gap", "=", "np", ".", "sqrt", "(", "2", "*", "np", ".", "log", "(", "2", "/", "delta", ")", "/", "l0", ")", "+", "np", ".", "sqrt", "(", "2", "*", "np", ".", "log", "(", "2", "/", "delta", ")", "/", "l1", ")", "+", "G", "+", "0.5", "\n", "# Empirically estimate y_1_bar - y_0_bar", "\n", "for", "j", "in", "range", "(", "threshold", ")", ":", "\n", "        ", "y_0_bar", "=", "0", "\n", "y_1_bar", "=", "0", "\n", "count_0", "=", "0", "\n", "count_1", "=", "0", "\n", "for", "i", "in", "range", "(", "l0", "+", "l1", ")", ":", "\n", "            ", "agent", "=", "get_random_agent", "(", "i", ",", "None", ",", "c0", ",", "c1", ",", "var", "=", "var", ",", "var_g", "=", "var_g", ")", "\n", "reward", "=", "THETA", "*", "agent", ".", "action", "(", ")", "+", "agent", ".", "get_g", "(", ")", "\n", "if", "agent", ".", "get_type", "(", ")", "==", "0", ":", "\n", "                ", "y_0_bar", "+=", "reward", "\n", "count_0", "+=", "1", "\n", "", "else", ":", "\n", "                ", "y_1_bar", "+=", "reward", "\n", "count_1", "+=", "1", "\n", "", "", "y_0_bar", "=", "y_0_bar", "/", "count_0", "\n", "y_1_bar", "=", "y_1_bar", "/", "count_1", "\n", "actual_gap", "=", "y_1_bar", "-", "y_0_bar", "\n", "avg_gap", "+=", "actual_gap", "\n", "if", "actual_gap", ">=", "gap", ":", "\n", "            ", "count", "+=", "1", "\n", "# Calculate Prob[xi]", "\n", "", "", "prob_xi", "=", "count", "/", "threshold", "\n", "print", "(", "\"Prob[xi]: {}\"", ".", "format", "(", "prob_xi", ")", ")", "\n", "rho", "=", "1", "+", "(", "4", "*", "mu", ")", "/", "(", "prob_xi", "-", "4", "*", "mu", ")", "\n", "print", "(", "\"Rho: {}\"", ".", "format", "(", "rho", ")", ")", "\n", "avg_gap", "=", "avg_gap", "/", "threshold", "\n", "if", "avg_gap", ">", "gap", ":", "\n", "        ", "best", "=", "1", "\n", "", "else", ":", "\n", "        ", "best", "=", "0", "\n", "", "return", "rho", ",", "best", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.sampling_stage": [[53, 88], ["range", "numpy.random.rand", "utils.get_random_agent", "utils.get_random_agent.action", "y_lst.append", "x_lst.append", "z_lst.append", "int", "range", "utils.get_random_agent.get_g", "numpy.ceil", "utils.get_random_agent", "utils.get_random_agent.action", "y_lst.append", "x_lst.append", "z_lst.append", "range", "utils.get_random_agent.get_g", "utils.get_random_agent", "utils.get_random_agent.action", "y_lst.append", "x_lst.append", "z_lst.append", "utils.get_random_agent.get_g"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.get_random_agent", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.action", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_g", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.get_random_agent", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.action", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_g", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.get_random_agent", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.action", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_g"], ["", "def", "sampling_stage", "(", "rho", ",", "best", ",", "alg1_len", "=", "None", ",", "phases", "=", "None", ")", ":", "\n", "    ", "y_lst", "=", "[", "]", "\n", "x_lst", "=", "[", "]", "\n", "z_lst", "=", "[", "]", "\n", "if", "alg1_len", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "alg1_len", ")", ":", "\n", "            ", "tmp2", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp2", "<", "rho", ":", "# explore", "\n", "                ", "rec", "=", "1", "\n", "", "else", ":", "# exploit", "\n", "                ", "rec", "=", "best", "\n", "", "agent", "=", "get_random_agent", "(", "INIT_LEN", "+", "i", ",", "rec", ",", "c1", "=", "0.1", ",", "c0", "=", "0", ")", "\n", "action", "=", "agent", ".", "action", "(", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "agent", ".", "get_g", "(", ")", "\n", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "", "", "elif", "phases", "is", "not", "None", ":", "\n", "        ", "phase_length", "=", "int", "(", "np", ".", "ceil", "(", "1", "/", "rho", ")", ")", "\n", "for", "i", "in", "range", "(", "phases", ")", ":", "\n", "            ", "explore_agent", "=", "get_random_agent", "(", "INIT_LEN", "+", "i", ",", "rec", "=", "1", ",", "c0", "=", "0", ",", "c1", "=", "0.1", ")", "# Check this", "\n", "explore_action", "=", "explore_agent", ".", "action", "(", ")", "\n", "explore_reward", "=", "THETA", "*", "explore_action", "+", "explore_agent", ".", "get_g", "(", ")", "\n", "y_lst", ".", "append", "(", "explore_reward", ")", "\n", "x_lst", ".", "append", "(", "explore_action", ")", "\n", "z_lst", ".", "append", "(", "1", ")", "\n", "for", "j", "in", "range", "(", "phase_length", "-", "1", ")", ":", "\n", "                ", "agent", "=", "get_random_agent", "(", "INIT_LEN", "+", "i", "*", "j", "+", "1", ",", "rec", "=", "best", ",", "c1", "=", "0.1", ",", "c0", "=", "0", ")", "\n", "action", "=", "agent", ".", "action", "(", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "agent", ".", "get_g", "(", ")", "\n", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "best", ")", "\n", "\n", "", "", "", "return", "y_lst", ",", "x_lst", ",", "z_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.racing_stage": [[91, 180], ["utils.iv_regression", "utils.ols", "utils.approx_bound", "print", "len", "print", "numpy.random.normal", "numpy.random.normal", "agent.Type1Agent", "utils.find_best_tau", "print", "print", "range", "numpy.random.rand", "y_lst.append", "x_lst.append", "z_lst.append", "numpy.random.rand", "y_lst.append", "x_lst.append", "z_lst.append", "numpy.abs", "numpy.random.normal", "numpy.random.normal", "utils.iv_regression", "print", "utils.ols", "theta_lst.append", "theta_ols_lst.append", "utils.approx_bound", "print", "numpy.random.normal", "numpy.random.normal", "utils.iv_regression", "print", "utils.ols", "theta_lst.append", "theta_ols_lst.append", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.approx_bound", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.find_best_tau", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.approx_bound", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols"], ["", "def", "racing_stage", "(", "samples", ",", "T", "=", "100000000", ",", "P", "=", "0.5", ",", "tau_0", "=", "0.1", ",", "tau_1", "=", "0.1", ")", ":", "\n", "    ", "y_lst", ",", "x_lst", ",", "z_lst", "=", "samples", "\n", "theta_hat", "=", "iv_regression", "(", "samples", ")", "\n", "theta_hat_ols", "=", "ols", "(", "samples", ")", "\n", "threshold", "=", "approx_bound", "(", "samples", ",", "delta", "=", "0.1", ")", "\n", "print", "(", "\"Threshold: {}\"", ".", "format", "(", "threshold", ")", ")", "\n", "alg1_len", "=", "len", "(", "y_lst", ")", "\n", "t", "=", "INIT_LEN", "+", "alg1_len", "\n", "theta_lst", "=", "[", "theta_hat", "]", "\n", "print", "(", "\"Theta hat: {}\"", ".", "format", "(", "theta_hat", ")", ")", "\n", "theta_ols_lst", "=", "[", "theta_hat_ols", "]", "\n", "mu_0", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "mu_1", "=", "np", ".", "random", ".", "normal", "(", "0.5", ",", "1", ")", "\n", "agent_1", "=", "Type1Agent", "(", "t", ",", "0", ",", "c", "=", "0.5", ")", "\n", "# constant_1 = agent_1.get_racing_stage_constant(tau_1)", "\n", "_", ",", "constant_1", "=", "find_best_tau", "(", "type", "=", "1", ")", "\n", "print", "(", "\"Constant 1: {}\"", ".", "format", "(", "constant_1", ")", ")", "\n", "while", "np", ".", "abs", "(", "theta_hat", ")", "<=", "threshold", "or", "t", "<", "INIT_LEN", "+", "1.5", "*", "alg1_len", ":", "\n", "# while np.abs(theta_hat - THETA) <= constant_1 :", "\n", "        ", "if", "t", "%", "2", "==", "1", ":", "\n", "            ", "rec", "=", "0", "\n", "", "else", ":", "\n", "            ", "rec", "=", "1", "\n", "\n", "# agent = get_random_agent(i, rec, c1=0.1, c0=0)", "\n", "", "tmp", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp", "<", "0.5", ":", "\n", "            ", "action", "=", "rec", "\n", "g_0", "=", "np", ".", "random", ".", "normal", "(", "mu_0", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_0", "\n", "", "else", ":", "\n", "            ", "if", "np", ".", "abs", "(", "theta_hat", "-", "THETA", ")", "<=", "constant_1", ":", "\n", "# if t > INIT_LEN + 1.4539*alg1_len:", "\n", "                ", "action", "=", "rec", "\n", "", "else", ":", "\n", "                ", "action", "=", "1", "\n", "", "g_1", "=", "np", ".", "random", ".", "normal", "(", "mu_1", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_1", "\n", "", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "t", "+=", "1", "\n", "# update theta_hat", "\n", "if", "t", "%", "10000", "==", "0", "and", "t", ">", "10000", ":", "\n", "            ", "new_theta_hat", "=", "iv_regression", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "if", "new_theta_hat", ">", "theta_hat", ":", "\n", "                ", "theta_hat", "=", "new_theta_hat", "\n", "", "print", "(", "\"Theta-hat: {} at round {}\"", ".", "format", "(", "theta_hat", ",", "t", ")", ")", "\n", "theta_hat_ols", "=", "ols", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "theta_lst", ".", "append", "(", "theta_hat", ")", "\n", "theta_ols_lst", ".", "append", "(", "theta_hat_ols", ")", "\n", "# print(\"Theta hat: {}\".format(theta_hat))", "\n", "# update threshold", "\n", "threshold", "=", "approx_bound", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ",", "delta", "=", "0.1", ")", "\n", "print", "(", "\"Threshold: {}\"", ".", "format", "(", "threshold", ")", ")", "\n", "\n", "", "", "if", "theta_hat", ">=", "0", ":", "\n", "        ", "best", "=", "1", "\n", "", "else", ":", "\n", "        ", "best", "=", "0", "\n", "", "print", "(", "\"Best arm found!!\"", ")", "\n", "for", "i", "in", "range", "(", "t", ",", "t", "+", "100000", ")", ":", "\n", "        ", "rec", "=", "best", "\n", "tmp", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp", "<", "0.5", ":", "\n", "            ", "action", "=", "rec", "\n", "g_0", "=", "np", ".", "random", ".", "normal", "(", "mu_0", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_0", "\n", "", "else", ":", "\n", "            ", "if", "np", ".", "abs", "(", "theta_hat", "-", "THETA", ")", "<=", "constant_1", ":", "\n", "                ", "action", "=", "rec", "\n", "", "else", ":", "\n", "                ", "action", "=", "1", "\n", "", "g_1", "=", "np", ".", "random", ".", "normal", "(", "mu_1", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_1", "\n", "", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "if", "i", "%", "10000", "==", "0", "and", "i", ">", "10000", ":", "\n", "            ", "new_theta_hat", "=", "iv_regression", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "if", "new_theta_hat", ">", "theta_hat", ":", "\n", "                ", "theta_hat", "=", "new_theta_hat", "\n", "", "print", "(", "\"Theta-hat: {} at round {}\"", ".", "format", "(", "theta_hat", ",", "i", ")", ")", "\n", "theta_hat_ols", "=", "ols", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "theta_lst", ".", "append", "(", "theta_hat", ")", "\n", "theta_ols_lst", ".", "append", "(", "theta_hat_ols", ")", "\n", "# print(\"Theta hat: {}\".format(theta_hat))", "\n", "\n", "", "", "return", "best", ",", "t", ",", "theta_lst", ",", "theta_ols_lst", ",", "y_lst", ",", "x_lst", ",", "z_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.racing_stage_only": [[183, 304], ["numpy.random.normal", "numpy.random.normal", "range", "print", "utils.approx_bound", "print", "print", "print", "print", "range", "agent.Type1Agent", "agent.Type1Agent.get_racing_stage_constant", "range", "numpy.random.rand", "y_lst.append", "x_lst.append", "z_lst.append", "numpy.abs", "numpy.random.rand", "y_lst.append", "x_lst.append", "z_lst.append", "utils.get_random_agent", "utils.get_random_agent.action", "y_lst.append", "x_lst.append", "z_lst.append", "numpy.random.rand", "y_lst.append", "x_lst.append", "z_lst.append", "numpy.random.normal", "numpy.random.normal", "numpy.abs", "numpy.random.normal", "numpy.random.normal", "utils.iv_regression", "utils.ols", "theta_lst.append", "theta_ols_lst.append", "utils.approx_bound", "print", "utils.get_random_agent.get_g", "utils.iv_regression", "utils.ols", "theta_lst.append", "theta_ols_lst.append", "numpy.random.normal", "numpy.random.normal", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.approx_bound", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_racing_stage_constant", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.get_random_agent", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.action", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.approx_bound", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_g", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols"], ["", "def", "racing_stage_only", "(", "theta_hat", ",", "theta_hat_ols", ",", "threshold", ",", "P", "=", "0.5", ",", "tau_0", "=", "0.1", ",", "tau_1", "=", "0.1", ",", "T", "=", "100000000", ",", "t", "=", "10000000", ",", "length", "=", "None", ")", ":", "\n", "# threshold = racing_stage_threshold(tau)", "\n", "    ", "y_lst", "=", "[", "]", "\n", "x_lst", "=", "[", "]", "\n", "z_lst", "=", "[", "]", "\n", "theta_lst", "=", "[", "theta_hat", "]", "\n", "theta_ols_lst", "=", "[", "theta_hat_ols", "]", "\n", "mu_0", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "mu_1", "=", "np", ".", "random", ".", "normal", "(", "0.5", ",", "1", ")", "\n", "# print(\"Theta_hat: {}\".format(theta_hat))", "\n", "if", "threshold", "is", "None", "and", "length", "is", "not", "None", ":", "\n", "        ", "agent_1", "=", "Type1Agent", "(", "t", ",", "0", ",", "c", "=", "0.5", ")", "\n", "constant_1", "=", "agent_1", ".", "get_racing_stage_constant", "(", "tau_1", ")", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "if", "i", "%", "2", "==", "1", ":", "\n", "                ", "rec", "=", "0", "\n", "", "else", ":", "\n", "                ", "rec", "=", "1", "\n", "", "tmp", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp", "<", "0.5", ":", "\n", "                ", "action", "=", "rec", "\n", "g_0", "=", "np", ".", "random", ".", "normal", "(", "mu_0", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_0", "\n", "", "else", ":", "\n", "                ", "if", "i", ">", "constant_1", ":", "\n", "                    ", "action", "=", "rec", "\n", "", "else", ":", "\n", "                    ", "action", "=", "1", "\n", "", "g_1", "=", "np", ".", "random", ".", "normal", "(", "mu_1", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_1", "\n", "", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "# if i % 1000 == 0 and i > 1000:", "\n", "# theta_hat = iv_regression((y_lst, x_lst, z_lst))", "\n", "# theta_ols = ols((y_lst, x_lst, z_lst))", "\n", "# theta_lst.append(np.abs(theta_hat - THETA))", "\n", "# theta_ols_lst.append(np.abs(theta_ols - THETA))", "\n", "# print(\"t: {}, theta_hat: {}, theta_ols: {}\".format(i, theta_hat, theta_ols))", "\n", "\n", "", "if", "theta_hat", ">=", "0", ":", "\n", "            ", "best", "=", "1", "\n", "", "else", ":", "\n", "            ", "best", "=", "0", "\n", "", "return", "best", ",", "t", ",", "theta_lst", ",", "theta_ols_lst", ",", "y_lst", ",", "x_lst", ",", "z_lst", "\n", "", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "if", "i", "%", "2", "==", "1", ":", "\n", "            ", "rec", "=", "0", "\n", "", "else", ":", "\n", "            ", "rec", "=", "1", "\n", "\n", "", "tmp", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp", "<", "0.5", ":", "# type 0", "\n", "            ", "action", "=", "rec", "\n", "g_0", "=", "np", ".", "random", ".", "normal", "(", "mu_0", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_0", "\n", "", "else", ":", "\n", "            ", "action", "=", "1", "\n", "g_1", "=", "np", ".", "random", ".", "normal", "(", "mu_1", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_1", "\n", "\n", "", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "", "print", "(", "\"Going into racing stage\"", ")", "\n", "threshold", "=", "approx_bound", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "print", "(", "\"Threshold: {}\"", ".", "format", "(", "threshold", ")", ")", "\n", "print", "(", "\"Theta hat: {}\"", ".", "format", "(", "np", ".", "abs", "(", "theta_hat", ")", ")", ")", "\n", "while", "np", ".", "abs", "(", "theta_hat", ")", "<=", "threshold", ":", "\n", "# while (t < 1000000):", "\n", "        ", "if", "t", "%", "2", "==", "1", ":", "\n", "            ", "rec", "=", "0", "\n", "", "else", ":", "\n", "            ", "rec", "=", "1", "\n", "", "tmp", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp", "<", "0.5", ":", "# type 0", "\n", "            ", "action", "=", "rec", "\n", "g_0", "=", "np", ".", "random", ".", "normal", "(", "mu_0", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_0", "\n", "", "else", ":", "\n", "            ", "action", "=", "1", "\n", "g_1", "=", "np", ".", "random", ".", "normal", "(", "mu_1", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_1", "\n", "", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "t", "+=", "1", "\n", "if", "t", "%", "1000", "==", "0", ":", "\n", "            ", "new_theta_hat", "=", "iv_regression", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "if", "np", ".", "abs", "(", "new_theta_hat", ")", ">", "np", ".", "abs", "(", "theta_hat", ")", ":", "\n", "                ", "theta_hat", "=", "new_theta_hat", "\n", "", "theta_ols", "=", "ols", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "theta_lst", ".", "append", "(", "theta_hat", ")", "\n", "theta_ols_lst", ".", "append", "(", "theta_ols", ")", "\n", "threshold", "=", "approx_bound", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ",", "delta", "=", "0.1", ")", "\n", "", "if", "t", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"t: {}, new_theta_hat: {} theta_hat: {}, threshold: {}\"", ".", "format", "(", "t", ",", "new_theta_hat", ",", "theta_hat", ",", "threshold", ")", ")", "\n", "", "", "print", "(", "\"Racing Stage End!!\"", ")", "\n", "if", "theta_hat", ">=", "0", ":", "\n", "        ", "best", "=", "1", "\n", "", "else", ":", "\n", "        ", "best", "=", "0", "\n", "", "print", "(", "\"Best arm overall: {}\"", ".", "format", "(", "best", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "t", ",", "t", "+", "100000", ")", ":", "\n", "        ", "rec", "=", "best", "\n", "agent", "=", "get_random_agent", "(", "i", ",", "rec", ",", "c0", "=", "0", ",", "c1", "=", "0.1", ")", "\n", "action", "=", "agent", ".", "action", "(", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "agent", ".", "get_g", "(", ")", "\n", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "new_theta_hat", "=", "iv_regression", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "if", "np", ".", "abs", "(", "new_theta_hat", ")", ">", "np", ".", "abs", "(", "theta_hat", ")", ":", "\n", "                ", "theta_hat", "=", "new_theta_hat", "\n", "", "theta_ols", "=", "ols", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "\n", "theta_lst", ".", "append", "(", "theta_hat", ")", "\n", "theta_ols_lst", ".", "append", "(", "theta_ols", ")", "\n", "\n", "", "", "return", "best", ",", "t", ",", "theta_lst", ",", "theta_ols_lst", ",", "y_lst", ",", "x_lst", ",", "z_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.racing_stage_threshold": [[306, 314], ["agent.Type1Agent.get_racing_stage_constant", "print", "agent.Type0Agent", "agent.Type1Agent"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_racing_stage_constant"], ["", "def", "racing_stage_threshold", "(", "tau", "=", "0.1", ",", "type", "=", "0", ",", "rho", "=", "0.001", ")", ":", "\n", "    ", "if", "type", "==", "0", ":", "\n", "        ", "agent", "=", "Type0Agent", "(", "-", "1", ",", "rec", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "agent", "=", "Type1Agent", "(", "-", "1", ",", "rec", "=", "None", ")", "\n", "", "threshold", "=", "agent", ".", "get_racing_stage_constant", "(", "tau", ",", "rho", "=", "rho", ")", "\n", "print", "(", "\"Threshold: {}\"", ".", "format", "(", "threshold", ")", ")", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.algorithm.faster_sampling_stage": [[316, 351], ["numpy.random.normal", "numpy.random.normal", "range", "numpy.random.rand", "numpy.random.rand", "y_lst.append", "x_lst.append", "z_lst.append", "numpy.random.normal", "numpy.random.normal", "numpy.abs", "print", "print", "print", "utils.iv_regression"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression"], ["", "def", "faster_sampling_stage", "(", "rho", ",", "best", ",", "alg1_len", ",", "threshold", "=", "None", ")", ":", "\n", "    ", "y_lst", "=", "[", "]", "\n", "x_lst", "=", "[", "]", "\n", "z_lst", "=", "[", "]", "\n", "mu_0", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ")", "\n", "mu_1", "=", "np", ".", "random", ".", "normal", "(", "0.5", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "alg1_len", ")", ":", "\n", "        ", "tmp2", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp2", "<", "rho", ":", "# explore", "\n", "            ", "rec", "=", "1", "\n", "", "else", ":", "# exploit", "\n", "            ", "rec", "=", "best", "\n", "# agent = get_random_agent(INIT_LEN + i, rec, c1=0.1, c0=0)", "\n", "", "tmp", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp", "<", "0.5", ":", "# type 0", "\n", "            ", "action", "=", "rec", "\n", "g_0", "=", "np", ".", "random", ".", "normal", "(", "mu_0", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_0", "\n", "", "else", ":", "\n", "            ", "action", "=", "1", "\n", "g_1", "=", "np", ".", "random", ".", "normal", "(", "mu_1", ",", "1", ")", "\n", "reward", "=", "THETA", "*", "action", "+", "g_1", "\n", "", "y_lst", ".", "append", "(", "reward", ")", "\n", "x_lst", ".", "append", "(", "action", ")", "\n", "z_lst", ".", "append", "(", "rec", ")", "\n", "if", "threshold", "is", "not", "None", "and", "i", ">=", "100000", "and", "i", "%", "100000", "==", "0", ":", "\n", "# bound = approx_bound((y_lst, x_lst, z_lst))", "\n", "            ", "bound", "=", "np", ".", "abs", "(", "iv_regression", "(", "(", "y_lst", ",", "x_lst", ",", "z_lst", ")", ")", "-", "0.5", ")", "\n", "print", "(", "\"Bound: {}, threshold: {}\"", ".", "format", "(", "bound", ",", "threshold", ")", ")", "\n", "if", "bound", "<=", "threshold", ":", "\n", "                ", "print", "(", "\"Guaranteed BIC for racing stage\"", ")", "\n", "break", "\n", "", "", "if", "i", "%", "100000", "==", "0", ":", "\n", "            ", "print", "(", "\"i: {}\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "return", "y_lst", ",", "x_lst", ",", "z_lst", "\n", "", ""]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.get_random_agent": [[6, 13], ["numpy.random.rand", "agent.Type1Agent", "agent.Type0Agent"], "function", ["None"], ["def", "get_random_agent", "(", "i", ",", "rec", ",", "c0", ",", "c1", ",", "var", "=", "1", ",", "var_g", "=", "1", ",", "P", "=", "0.5", ")", ":", "\n", "    ", "tmp", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "tmp", ">", "P", ":", "\n", "        ", "agent", "=", "Type1Agent", "(", "i", ",", "rec", ",", "c", "=", "c1", ",", "var", "=", "var", ",", "var_g", "=", "var_g", ")", "\n", "", "else", ":", "\n", "        ", "agent", "=", "Type0Agent", "(", "i", ",", "rec", ",", "c", "=", "c0", ",", "var", "=", "var", ",", "var_g", "=", "var_g", ")", "\n", "", "return", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.iv_regression": [[15, 29], ["numpy.mean", "numpy.mean", "numpy.mean", "range", "len"], "function", ["None"], ["", "def", "iv_regression", "(", "samples", ")", ":", "\n", "    ", "y_lst", ",", "x_lst", ",", "z_lst", "=", "samples", "\n", "# print(len(y_lst))", "\n", "y_bar", "=", "np", ".", "mean", "(", "y_lst", ")", "\n", "x_bar", "=", "np", ".", "mean", "(", "x_lst", ")", "\n", "z_bar", "=", "np", ".", "mean", "(", "z_lst", ")", "\n", "# print(\"y-bar: {}, x-bar: {}, z-bar: {}\".format(y_bar, x_bar, z_bar))", "\n", "num", "=", "0", "\n", "denom", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "y_lst", ")", ")", ":", "\n", "        ", "num", "+=", "(", "y_lst", "[", "i", "]", "-", "y_bar", ")", "*", "(", "z_lst", "[", "i", "]", "-", "z_bar", ")", "\n", "denom", "+=", "(", "x_lst", "[", "i", "]", "-", "x_bar", ")", "*", "(", "z_lst", "[", "i", "]", "-", "z_bar", ")", "\n", "", "theta_hat", "=", "num", "/", "denom", "\n", "return", "theta_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.ols": [[31, 42], ["numpy.mean", "numpy.mean", "range", "len"], "function", ["None"], ["", "def", "ols", "(", "samples", ")", ":", "\n", "    ", "y_lst", ",", "x_lst", ",", "z_lst", "=", "samples", "\n", "y_bar", "=", "np", ".", "mean", "(", "y_lst", ")", "\n", "x_bar", "=", "np", ".", "mean", "(", "x_lst", ")", "\n", "num", "=", "0", "\n", "denom", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "y_lst", ")", ")", ":", "\n", "        ", "num", "+=", "(", "y_lst", "[", "i", "]", "-", "y_bar", ")", "*", "(", "x_lst", "[", "i", "]", "-", "x_bar", ")", "\n", "denom", "+=", "(", "x_lst", "[", "i", "]", "-", "x_bar", ")", "**", "2", "\n", "", "theta_hat", "=", "num", "/", "denom", "\n", "return", "theta_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.combine_samples": [[44, 55], ["len"], "function", ["None"], ["", "def", "combine_samples", "(", "old_sample", ",", "new_sample", ")", ":", "\n", "    ", "if", "len", "(", "old_sample", ")", ">", "0", ":", "\n", "        ", "y_lst", ",", "x_lst", ",", "z_lst", "=", "old_sample", "\n", "", "else", ":", "\n", "        ", "y_lst", ",", "x_lst", ",", "z_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "y_n", ",", "x_n", ",", "z_n", "=", "new_sample", "\n", "y", "=", "y_lst", "+", "y_n", "\n", "x", "=", "x_lst", "+", "x_n", "\n", "z", "=", "z_lst", "+", "z_n", "\n", "# print(len(y))", "\n", "return", "y", ",", "x", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.calc_average": [[57, 66], ["numpy.mean", "numpy.add", "numpy.subtract", "range", "numpy.std", "range", "range", "range", "len", "len", "len", "len"], "function", ["None"], ["", "def", "calc_average", "(", "avg_lst", ",", "n", "=", "5", ")", ":", "\n", "    ", "avg", "=", "[", "np", ".", "mean", "(", "avg_lst", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "avg_lst", ")", ")", "]", "\n", "std", "=", "[", "np", ".", "std", "(", "avg_lst", "[", "i", "]", ")", "/", "n", "for", "i", "in", "range", "(", "len", "(", "avg_lst", ")", ")", "]", "\n", "max_error", "=", "[", "np", ".", "add", "(", "avg", "[", "i", "]", ",", "std", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "avg_lst", ")", ")", "]", "\n", "min_error", "=", "[", "np", ".", "subtract", "(", "avg", "[", "i", "]", ",", "std", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "avg_lst", ")", ")", "]", "\n", "# print(avg)", "\n", "# print(max_error)", "\n", "# print(min_error)", "\n", "return", "avg", ",", "max_error", ",", "min_error", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.approx_bound": [[68, 80], ["numpy.mean", "numpy.mean", "len", "range", "numpy.abs", "numpy.sqrt", "numpy.log"], "function", ["None"], ["", "def", "approx_bound", "(", "samples", ",", "delta", "=", "0.1", ")", ":", "\n", "    ", "y_lst", ",", "x_lst", ",", "z_lst", "=", "samples", "\n", "x_bar", "=", "np", ".", "mean", "(", "x_lst", ")", "\n", "z_bar", "=", "np", ".", "mean", "(", "z_lst", ")", "\n", "n", "=", "len", "(", "y_lst", ")", "\n", "num", "=", "2", "*", "np", ".", "sqrt", "(", "2", "*", "n", "*", "np", ".", "log", "(", "2", "/", "delta", ")", ")", "\n", "denom", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "denom", "+=", "(", "x_lst", "[", "i", "]", "-", "x_bar", ")", "*", "(", "z_lst", "[", "i", "]", "-", "z_bar", ")", "\n", "", "denom", "=", "np", ".", "abs", "(", "denom", ")", "\n", "apprx", "=", "num", "/", "denom", "\n", "return", "apprx", "\n", "\n"]], "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.utils.find_best_tau": [[82, 102], ["numpy.arange", "scipy.stats.truncnorm", "agent.Type0Agent", "agent.Type1Agent", "agent.Type1Agent.get_std", "agent.Type1Agent.get_std", "agent.Type1Agent.get_mu", "agent.Type1Agent.get_mu", "agent.Type1Agent.get_mu", "agent.Type1Agent.get_std", "scipy.stats.truncnorm.cdf", "scipy.stats.truncnorm.cdf"], "function", ["home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_std", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_std", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_mu", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_mu", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_mu", "home.repos.pwc.inspect_result.DanielNgo207_Incentivizing-Compliance-with-Algorithmic-Instruments.None.agent.Type0Agent.get_std"], ["", "def", "find_best_tau", "(", "type", "=", "0", ")", ":", "\n", "    ", "tau_lst", "=", "np", ".", "arange", "(", "0.1", ",", "1", ",", "0.01", ")", "\n", "best", "=", "0", "\n", "best_tau", "=", "0", "\n", "if", "type", "==", "0", ":", "\n", "        ", "agent", "=", "Type0Agent", "(", "-", "1", ",", "None", ")", "\n", "", "else", ":", "\n", "        ", "agent", "=", "Type1Agent", "(", "-", "1", ",", "None", ")", "\n", "", "alpha", "=", "(", "-", "1", "-", "agent", ".", "get_mu", "(", ")", ")", "/", "agent", ".", "get_std", "(", ")", "\n", "beta", "=", "(", "1", "-", "agent", ".", "get_mu", "(", ")", ")", "/", "agent", ".", "get_std", "(", ")", "\n", "dist", "=", "truncnorm", "(", "alpha", ",", "beta", ",", "loc", "=", "agent", ".", "get_mu", "(", ")", ",", "scale", "=", "agent", ".", "get_std", "(", ")", ")", "\n", "for", "tau", "in", "tau_lst", ":", "\n", "        ", "if", "type", "==", "0", ":", "\n", "            ", "tmp", "=", "tau", "*", "(", "1", "-", "dist", ".", "cdf", "(", "tau", ")", ")", "\n", "", "else", ":", "\n", "            ", "tmp", "=", "tau", "*", "(", "dist", ".", "cdf", "(", "-", "tau", ")", ")", "\n", "", "if", "tmp", ">", "best", ":", "\n", "            ", "best", "=", "tmp", "\n", "best_tau", "=", "tau", "\n", "", "", "return", "best_tau", ",", "best", "\n", "\n"]]}