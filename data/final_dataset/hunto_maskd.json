{"home.repos.pwc.inspect_result.hunto_maskd.mmrazor.setup.readme": [[9, 13], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmrazor.setup.get_version": [[15, 20], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["", "def", "get_version", "(", ")", ":", "\n", "    ", "version_file", "=", "'mmrazor/version.py'", "\n", "with", "open", "(", "version_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmrazor.setup.parse_requirements": [[22, 96], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "import", "re", "\n", "import", "sys", "\n", "from", "os", ".", "path", "import", "exists", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"Parse information from a line in a requirements text file.\"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmrazor.setup.add_mim_extension": [[98, 144], ["os.dirname", "os.join", "os.makedirs", "os.makedirs", "os.exists", "os.join", "os.join", "os.isfile", "os.islink", "os.remove", "os.remove", "os.isdir", "os.relpath", "os.symlink", "os.symlink", "shutil.rmtree", "os.dirname", "os.isfile", "ValueError", "shutil.copyfile", "os.isdir", "shutil.copytree", "warnings.warn"], "function", ["None"], ["", "def", "add_mim_extension", "(", ")", ":", "\n", "    ", "\"\"\"Add extra files that are required to support MIM into the package.\n\n    These files will be added by creating a symlink to the originals if the\n    package is installed in `editable` mode (e.g. pip install -e .), or by\n    copying from the originals otherwise.\n    \"\"\"", "\n", "\n", "# parse installment mode", "\n", "if", "'develop'", "in", "sys", ".", "argv", ":", "\n", "# installed by `pip install -e .`", "\n", "        ", "mode", "=", "'symlink'", "\n", "", "elif", "'sdist'", "in", "sys", ".", "argv", "or", "'bdist_wheel'", "in", "sys", ".", "argv", ":", "\n", "# installed by `pip install .`", "\n", "# or create source distribution by `python setup.py sdist`", "\n", "        ", "mode", "=", "'copy'", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n", "", "filenames", "=", "[", "'tools'", ",", "'configs'", ",", "'model-index.yml'", "]", "\n", "repo_path", "=", "osp", ".", "dirname", "(", "__file__", ")", "\n", "mim_path", "=", "osp", ".", "join", "(", "repo_path", ",", "'mmrazor'", ",", "'.mim'", ")", "\n", "os", ".", "makedirs", "(", "mim_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "src_path", "=", "osp", ".", "join", "(", "repo_path", ",", "filename", ")", "\n", "tar_path", "=", "osp", ".", "join", "(", "mim_path", ",", "filename", ")", "\n", "\n", "if", "osp", ".", "isfile", "(", "tar_path", ")", "or", "osp", ".", "islink", "(", "tar_path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "tar_path", ")", "\n", "", "elif", "osp", ".", "isdir", "(", "tar_path", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "tar_path", ")", "\n", "\n", "", "if", "mode", "==", "'symlink'", ":", "\n", "                ", "src_relpath", "=", "osp", ".", "relpath", "(", "src_path", ",", "osp", ".", "dirname", "(", "tar_path", ")", ")", "\n", "os", ".", "symlink", "(", "src_relpath", ",", "tar_path", ")", "\n", "", "elif", "mode", "==", "'copy'", ":", "\n", "                ", "if", "osp", ".", "isfile", "(", "src_path", ")", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "src_path", ",", "tar_path", ")", "\n", "", "elif", "osp", ".", "isdir", "(", "src_path", ")", ":", "\n", "                    ", "shutil", ".", "copytree", "(", "src_path", ",", "tar_path", ")", "\n", "", "else", ":", "\n", "                    ", "warnings", ".", "warn", "(", "f'Cannot copy file {src_path}.'", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Invalid mode {mode}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmrazor.__init__.digit_version": [[10, 48], ["packaging.version.parse", "list", "tuple", "len", "list.extend", "list.extend", "list.extend", "list.extend", "warnings.warn", "len", "mmcv.__version__"], "function", ["None"], ["def", "digit_version", "(", "version_str", ":", "str", ",", "length", ":", "int", "=", "4", ")", ":", "\n", "    ", "\"\"\"Convert a version string into a tuple of integers.\n\n    This method is usually used for comparing two versions. For pre-release\n    versions: alpha < beta < rc.\n\n    Args:\n        version_str (str): The version string.\n        length (int): The maximum number of version levels. Default: 4.\n\n    Returns:\n        tuple[int]: The version info in digits (integers).\n    \"\"\"", "\n", "version", "=", "parse", "(", "version_str", ")", "\n", "assert", "version", ".", "release", ",", "f'failed to parse version {version_str}'", "\n", "release", "=", "list", "(", "version", ".", "release", ")", "\n", "release", "=", "release", "[", ":", "length", "]", "\n", "if", "len", "(", "release", ")", "<", "length", ":", "\n", "        ", "release", "=", "release", "+", "[", "0", "]", "*", "(", "length", "-", "len", "(", "release", ")", ")", "\n", "", "if", "version", ".", "is_prerelease", ":", "\n", "        ", "mapping", "=", "{", "'a'", ":", "-", "3", ",", "'b'", ":", "-", "2", ",", "'rc'", ":", "-", "1", "}", "\n", "val", "=", "-", "4", "\n", "# version.pre can be None", "\n", "if", "version", ".", "pre", ":", "\n", "            ", "if", "version", ".", "pre", "[", "0", "]", "not", "in", "mapping", ":", "\n", "                ", "warnings", ".", "warn", "(", "f'unknown prerelease version {version.pre[0]}, '", "\n", "'version checking may go wrong'", ")", "\n", "", "else", ":", "\n", "                ", "val", "=", "mapping", "[", "version", ".", "pre", "[", "0", "]", "]", "\n", "", "release", ".", "extend", "(", "[", "val", ",", "version", ".", "pre", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "release", ".", "extend", "(", "[", "val", ",", "0", "]", ")", "\n", "\n", "", "", "elif", "version", ".", "is_postrelease", ":", "\n", "        ", "release", ".", "extend", "(", "[", "1", ",", "version", ".", "post", "]", ")", "\n", "", "else", ":", "\n", "        ", "release", ".", "extend", "(", "[", "0", ",", "0", "]", ")", "\n", "", "return", "tuple", "(", "release", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmrazor.version.parse_version_info": [[6, 24], ["version_str.split", "tuple", "x.isdigit", "version_info.append", "int", "x.find", "x.split", "version_info.append", "version_info.append", "int"], "function", ["None"], ["def", "parse_version_info", "(", "version_str", ")", ":", "\n", "    ", "\"\"\"Parse a version string into a tuple.\n\n    Args:\n        version_str (str): The version string.\n    Returns:\n        tuple[int | str]: The version info, e.g., \"1.3.0\" is parsed into\n            (1, 3, 0), and \"2.0.0rc1\" is parsed into (2, 0, 0, 'rc1').\n    \"\"\"", "\n", "version_info", "=", "[", "]", "\n", "for", "x", "in", "version_str", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "if", "x", ".", "isdigit", "(", ")", ":", "\n", "            ", "version_info", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "x", ".", "find", "(", "'rc'", ")", "!=", "-", "1", ":", "\n", "            ", "patch_version", "=", "x", ".", "split", "(", "'rc'", ")", "\n", "version_info", ".", "append", "(", "int", "(", "patch_version", "[", "0", "]", ")", ")", "\n", "version_info", ".", "append", "(", "f'rc{patch_version[1]}'", ")", "\n", "", "", "return", "tuple", "(", "version_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.datasets.utils.split_dataset": [[4, 16], ["len", "torch.utils.data.random_split"], "function", ["None"], ["def", "split_dataset", "(", "dataset", ")", ":", "\n", "    ", "dset_length", "=", "len", "(", "dataset", ")", "\n", "\n", "first_dset_length", "=", "dset_length", "//", "2", "\n", "second_dset_length", "=", "dset_length", "-", "first_dset_length", "\n", "split_tuple", "=", "(", "first_dset_length", ",", "second_dset_length", ")", "\n", "first_dset", ",", "second_dset", "=", "random_split", "(", "dataset", ",", "split_tuple", ")", "\n", "\n", "first_dset", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "second_dset", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "return", "[", "first_dset", ",", "second_dset", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mmseg.train.set_random_seed": [[18, 35], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"Set random seed.\n\n    Args:\n        seed (int): Seed to be used.\n        deterministic (bool): Whether to set the deterministic option for\n            CUDNN backend, i.e., set ``torch.backends.cudnn.deterministic``\n            to True and ``torch.backends.cudnn.benchmark`` to False.\n            Default: False.\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmseg.train.train_segmentor": [[37, 157], ["mmseg.utils.get_root_logger", "mmrazor.core.optimizer.build_optimizers", "mmcv.runner.build_runner", "mmcv.runner.build_runner.register_training_hooks", "cfg.get", "mmcv.runner.build_runner.run", "isinstance", "mmseg.datasets.build_dataloader", "cfg.get", "cfg.get", "mmcv.parallel.MMDataParallel", "cfg.get", "warnings.warn", "cfg.get", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "isinstance", "mmcv.runner.build_runner.resume", "len", "mmrazor.core.distributed_wrapper.DistributedDataParallelWrapper", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDistributedDataParallel.cuda", "dict", "dict", "eval_hook", "isinstance", "hook_cfg.copy.copy", "hook_cfg.copy.pop", "mmcv.utils.build_from_cfg", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.load_checkpoint", "mmcv.parallel.MMDistributedDataParallel.cuda", "type", "type", "torch.cuda.current_device", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.optimizer.builder.build_optimizers", "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.run"], ["", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Copy from mmsegmentation and modify some codes.\n\n    This is an ugly implementation, and will be deprecated in the future. In\n    the future, there will be only one train api and no longer distinguish\n    between mmclassificaiton, mmsegmentation or mmdetection.\n    \"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "if", "cfg", ".", "get", "(", "'use_ddp_wrapper'", ",", "False", ")", ":", "\n", "# Difference from mmsegmentation.", "\n", "# In some algorithms, the ``optimizer.step()`` is executed in", "\n", "# ``train_step``. To rebuilt reducer buckets rightly, there need to", "\n", "# use DistributedDataParallelWrapper.", "\n", "            ", "model", "=", "DistributedDataParallelWrapper", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "# Sets the ``find_unused_parameters`` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "            ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build optimizers", "\n", "# Difference from mmdetection.", "\n", "# In some algorithms, there will be multi optimizers.", "\n", "", "optimizer", "=", "build_optimizers", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "# build runner", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a ``runner`` section, '", "\n", "'please set ``runner`` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "# In this PR (https://github.com/open-mmlab/mmcv/pull/1193), the", "\n", "# priority of IterTimerHook has been modified from 'NORMAL' to 'LOW'.", "\n", "runner", ".", "register_hook", "(", "\n", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ",", "priority", "=", "'LOW'", ")", "\n", "\n", "# user-defined hooks", "\n", "", "if", "cfg", ".", "get", "(", "'custom_hooks'", ",", "None", ")", ":", "\n", "        ", "custom_hooks", "=", "cfg", ".", "custom_hooks", "\n", "assert", "isinstance", "(", "custom_hooks", ",", "list", ")", ",", "f'custom_hooks expect list type, but got {type(custom_hooks)}'", "\n", "for", "hook_cfg", "in", "cfg", ".", "custom_hooks", ":", "\n", "            ", "assert", "isinstance", "(", "hook_cfg", ",", "dict", ")", ",", "'Each item in custom_hooks expects dict type, but got '", "f'{type(hook_cfg)}'", "\n", "hook_cfg", "=", "hook_cfg", ".", "copy", "(", ")", "\n", "priority", "=", "hook_cfg", ".", "pop", "(", "'priority'", ",", "'NORMAL'", ")", "\n", "hook", "=", "build_from_cfg", "(", "hook_cfg", ",", "HOOKS", ")", "\n", "runner", ".", "register_hook", "(", "hook", ",", "priority", "=", "priority", ")", "\n", "\n", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mmseg.test_mmseg.parse_args": [[29, 94], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'mmseg test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "(", "'if specified, the evaluation metric results will be dumped'", "\n", "'into the directory as json'", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aug-test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use Flip and Multi scale aug'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"mIoU\"'", "\n", "' for generic datasets, and \"cityscapes\" for Cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu_collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--opacity'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'Opacity of painted segmentation map. In (0, 1] range.'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmseg.test_mmseg.main": [[96, 245], ["test_mmseg.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.runner.get_dist_info", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "mmrazor.models.builder.build_algorithm", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "torch.cuda.empty_cache", "eval_kwargs.get", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "mmcv.Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcv.runner.wrap_fp16_model", "mmcv.runner.load_checkpoint.get", "print", "mmcv.runner.load_checkpoint.get", "print", "warnings.warn", "mmcv.mkdir_or_exist", "mmcv.parallel.MMDataParallel", "mmseg.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmseg.apis.multi_gpu_test", "parse_args.out.endswith", "os.abspath", "time.localtime", "len", "eval_kwargs.setdefault", "mmcv.parallel.MMDistributedDataParallel.cuda", "warnings.warn", "print", "mmcv.dump", "eval_kwargs.update", "mmseg.datasets.build_dataset.evaluate", "dict", "mmcv.dump", "shutil.rmtree", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "if", "args", ".", "aug_test", ":", "\n", "# hard code index", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", ".", "img_ratios", "=", "[", "\n", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", "\n", "]", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", ".", "flip", "=", "True", "\n", "# Difference from mmsegmentation", "\n", "", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "# allows not to create", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "args", ".", "work_dir", ")", ")", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "json_file", "=", "osp", ".", "join", "(", "args", ".", "work_dir", ",", "f'eval_{timestamp}.json'", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "# Difference from mmsegmentation", "\n", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'\"CLASSES\" not found in meta, use dataset.CLASSES instead'", ")", "\n", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "", "if", "'PALETTE'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "PALETTE", "=", "checkpoint", "[", "'meta'", "]", "[", "'PALETTE'", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'\"PALETTE\" not found in meta, use dataset.PALETTE instead'", ")", "\n", "model", ".", "PALETTE", "=", "dataset", ".", "PALETTE", "\n", "\n", "# clean gpu memory when starting a new evaluation.", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "eval_kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "\n", "# Deprecated", "\n", "efficient_test", "=", "eval_kwargs", ".", "get", "(", "'efficient_test'", ",", "False", ")", "\n", "if", "efficient_test", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'``efficient_test=True`` does not have effect in tools/test.py, '", "\n", "'the evaluation and format results are CPU memory efficient by '", "\n", "'default'", ")", "\n", "\n", "", "eval_on_format_results", "=", "(", "\n", "args", ".", "eval", "is", "not", "None", "and", "'cityscapes'", "in", "args", ".", "eval", ")", "\n", "if", "eval_on_format_results", ":", "\n", "        ", "assert", "len", "(", "args", ".", "eval", ")", "==", "1", ",", "'eval on format results is not '", "'applicable for metrics other than '", "'cityscapes'", "\n", "", "if", "args", ".", "format_only", "or", "eval_on_format_results", ":", "\n", "        ", "if", "'imgfile_prefix'", "in", "eval_kwargs", ":", "\n", "            ", "tmpdir", "=", "eval_kwargs", "[", "'imgfile_prefix'", "]", "\n", "", "else", ":", "\n", "            ", "tmpdir", "=", "'.format_cityscapes'", "\n", "eval_kwargs", ".", "setdefault", "(", "'imgfile_prefix'", ",", "tmpdir", ")", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "", "else", ":", "\n", "        ", "tmpdir", "=", "None", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "results", "=", "single_gpu_test", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "args", ".", "show", ",", "\n", "args", ".", "show_dir", ",", "\n", "False", ",", "\n", "args", ".", "opacity", ",", "\n", "pre_eval", "=", "args", ".", "eval", "is", "not", "None", "and", "not", "eval_on_format_results", ",", "\n", "format_only", "=", "args", ".", "format_only", "or", "eval_on_format_results", ",", "\n", "format_args", "=", "eval_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "results", "=", "multi_gpu_test", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ",", "\n", "False", ",", "\n", "pre_eval", "=", "args", ".", "eval", "is", "not", "None", "and", "not", "eval_on_format_results", ",", "\n", "format_only", "=", "args", ".", "format_only", "or", "eval_on_format_results", ",", "\n", "format_args", "=", "eval_kwargs", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'The behavior of ``args.out`` has been changed since MMSeg '", "\n", "'v0.16, the pickled outputs could be seg map as type of '", "\n", "'np.array, pre-eval results or file paths for '", "\n", "'``dataset.format_results()``.'", ")", "\n", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "args", ".", "out", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "eval_kwargs", ".", "update", "(", "metric", "=", "args", ".", "eval", ")", "\n", "metric", "=", "dataset", ".", "evaluate", "(", "results", ",", "**", "eval_kwargs", ")", "\n", "metric_dict", "=", "dict", "(", "config", "=", "args", ".", "config", ",", "metric", "=", "metric", ")", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "                ", "mmcv", ".", "dump", "(", "metric_dict", ",", "json_file", ",", "indent", "=", "4", ")", "\n", "", "if", "tmpdir", "is", "not", "None", "and", "eval_on_format_results", ":", "\n", "# remove tmp dir when cityscapes evaluation", "\n", "                ", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmseg.train_mmseg.parse_args": [[31, 81], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a segmentor'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--load-from'", ",", "help", "=", "'the checkpoint file to load weights from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmseg.train_mmseg.main": [[83, 198], ["train_mmseg.parse_args", "mmcv.utils.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmseg.utils.get_root_logger", "dict", "mmseg.utils.collect_env", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "os.basename", "mmrazor.models.builder.build_algorithm", "mmcv.cnn.utils.revert_sync_batchnorm.init_weights", "mmseg.utils.get_root_logger.info", "dict.update", "mmrazor.apis.mmseg.train_segmentor", "Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmseg.utils.get_root_logger.info", "mmrazor.apis.mmseg.set_random_seed", "warnings.warn", "mmcv.cnn.utils.revert_sync_batchnorm", "mmseg.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "mmseg.datasets.build_dataset", "mmseg.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights", "home.repos.pwc.inspect_result.hunto_maskd.mmseg.train.train_segmentor", "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train.set_random_seed"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "load_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "load_from", "=", "args", ".", "load_from", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "# gpu_ids is used to calculate iter when resuming checkpoint", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "f'{k}: {v}'", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, deterministic: '", "\n", "f'{args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "# Difference from mmsegmentation", "\n", "# replace `model` to `algorithm`", "\n", "algorithm", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "algorithm", ".", "init_weights", "(", ")", "\n", "\n", "# SyncBN is not support for DP", "\n", "if", "not", "distributed", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'SyncBN is only supported with DDP. To be compatible with DP, '", "\n", "'we convert SyncBN to BN. Please use dist_train.sh which can '", "\n", "'avoid this error.'", ")", "\n", "algorithm", "=", "revert_sync_batchnorm", "(", "algorithm", ")", "\n", "\n", "", "logger", ".", "info", "(", "algorithm", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmseg version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmseg_version", "=", "f'{__version__}+{get_git_hash()[:7]}'", ",", "\n", "config", "=", "cfg", ".", "pretty_text", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ",", "\n", "PALETTE", "=", "datasets", "[", "0", "]", ".", "PALETTE", ")", "\n", "# add an attribute for visualization convenience", "\n", "# Difference from mmsegmentation", "\n", "# replace `model` to `algorithm`", "\n", "", "algorithm", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "# passing checkpoint meta for saving best checkpoint", "\n", "meta", ".", "update", "(", "cfg", ".", "checkpoint_config", ".", "meta", ")", "\n", "train_segmentor", "(", "\n", "# Difference from mmsegmentation", "\n", "# replace `model` to `algorithm`", "\n", "algorithm", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.train.set_random_seed": [[20, 37], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "\n", "", "", "def", "train_segmentor", "(", "model", ",", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.train.train_detector": [[39, 205], ["mmdet.utils.get_root_logger", "mmrazor.core.optimizer.build_optimizers", "mmcv.runner.build_runner", "cfg.get", "mmcv.runner.build_runner.register_training_hooks", "cfg.get", "mmcv.runner.build_runner.run", "isinstance", "mmdet.utils.get_root_logger.warning", "mmdet.datasets.build_dataloader", "cfg.get", "cfg.get", "warnings.warn", "mmcv.runner.Fp16OptimizerHook", "cfg.get", "isinstance", "cfg.data.val.pop", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "isinstance", "mmcv.runner.build_runner.resume", "mmdet.utils.get_root_logger.warning", "mmdet.utils.get_root_logger.warning", "mmrazor.core.distributed_wrapper.DistributedDataParallelWrapper", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "dict", "mmcv.runner.OptimizerHook", "mmcv.runner.build_runner.register_hook", "mmdet.datasets.replace_ImageToTensor", "dict", "eval_hook", "isinstance", "hook_cfg.copy.copy", "hook_cfg.copy.pop", "mmcv.utils.build_from_cfg", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.load_checkpoint", "len", "model.cpu.cuda", "model.cpu.cuda", "model.cpu.cpu", "ValueError", "mmrazor.core.hooks.DistSamplerSeedHook", "type", "type", "torch.cuda.current_device", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.optimizer.builder.build_optimizers", "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.run"], ["cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Copy from mmsegmentation and modify some codes.\n\n    This is an ugly implementation, and will be deprecated in the future. In\n    the future, there will be only one train api and no longer distinguish\n    between mmclassificaiton, mmsegmentation or mmdetection.\n    \"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "if", "cfg", ".", "get", "(", "'use_ddp_wrapper'", ",", "False", ")", ":", "\n", "# Difference from mmsegmentation.", "\n", "# In some algorithms, the ``optimizer.step()`` is executed in", "\n", "# ``train_step``. To rebuilt reducer buckets rightly, there need to", "\n", "# use DistributedDataParallelWrapper.", "\n", "            ", "model", "=", "DistributedDataParallelWrapper", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "# Sets the ``find_unused_parameters`` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "            ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build optimizers", "\n", "# Difference from mmdetection.", "\n", "# In some algorithms, there will be multi optimizers.", "\n", "", "optimizer", "=", "build_optimizers", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "# build runner", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a ``runner`` section, '", "\n", "'please set ``runner`` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "# In this PR (https://github.com/open-mmlab/mmcv/pull/1193), the", "\n", "# priority of IterTimerHook has been modified from 'NORMAL' to 'LOW'.", "\n", "runner", ".", "register_hook", "(", "\n", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ",", "priority", "=", "'LOW'", ")", "\n", "\n", "# user-defined hooks", "\n", "", "if", "cfg", ".", "get", "(", "'custom_hooks'", ",", "None", ")", ":", "\n", "        ", "custom_hooks", "=", "cfg", ".", "custom_hooks", "\n", "assert", "isinstance", "(", "custom_hooks", ",", "list", ")", ",", "f'custom_hooks expect list type, but got {type(custom_hooks)}'", "\n", "for", "hook_cfg", "in", "cfg", ".", "custom_hooks", ":", "\n", "            ", "assert", "isinstance", "(", "hook_cfg", ",", "dict", ")", ",", "'Each item in custom_hooks expects dict type, but got '", "f'{type(hook_cfg)}'", "\n", "hook_cfg", "=", "hook_cfg", ".", "copy", "(", ")", "\n", "priority", "=", "hook_cfg", ".", "pop", "(", "'priority'", ",", "'NORMAL'", ")", "\n", "hook", "=", "build_from_cfg", "(", "hook_cfg", ",", "HOOKS", ")", "\n", "runner", ".", "register_hook", "(", "hook", ",", "priority", "=", "priority", ")", "\n", "\n", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.test_mmdet.parse_args": [[28, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "'the directory to save the file containing evaluation metrics'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"bbox\",'", "\n", "' \"segm\", \"proposal\" for COCO, and \"mAP\", \"recall\" for PASCAL VOC'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "'score threshold (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu-collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.test_mmdet.main": [[99, 224], ["test_mmdet.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.algorithm.architecture.model.get", "isinstance", "mmcv.runner.get_dist_info", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmrazor.models.builder.build_algorithm", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.algorithm.architecture.model.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "os.abspath", "time.localtime", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "mmdet.datasets.build_dataset.evaluate", "print", "dict", "neck_cfg.get", "Config.fromfile.algorithm.architecture.model.neck.rfp_backbone.get", "cfg.get().copy.pop", "dict", "mmcv.dump", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "pretrained", "=", "None", "\n", "if", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "get", "(", "'neck'", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "neck", ",", "list", ")", ":", "\n", "            ", "for", "neck_cfg", "in", "cfg", ".", "algorithm", ".", "architecture", ".", "neck", ":", "\n", "                ", "if", "neck_cfg", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "                    ", "if", "neck_cfg", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                        ", "neck_cfg", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "", "", "", "", "elif", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "neck", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "            ", "if", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "get", "(", "\n", "'pretrained'", ")", ":", "\n", "                ", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "pretrained", "=", "None", "# noqa E501", "\n", "\n", "# in case the test dataset is concatenated", "\n", "", "", "", "samples_per_gpu", "=", "1", "\n", "if", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "dict", ")", ":", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "list", ")", ":", "\n", "        ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "            ", "ds_cfg", ".", "test_mode", "=", "True", "\n", "", "samples_per_gpu", "=", "max", "(", "\n", "[", "ds_cfg", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", "]", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "            ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "                ", "ds_cfg", ".", "pipeline", "=", "replace_ImageToTensor", "(", "ds_cfg", ".", "pipeline", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "# allows not to create", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "args", ".", "work_dir", ")", ")", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "json_file", "=", "osp", ".", "join", "(", "args", ".", "work_dir", ",", "f'eval_{timestamp}.json'", ")", "\n", "\n", "# build the dataloader", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "algorithm", ".", "architecture", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "args", ".", "show_score_thr", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "eval_kwargs", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", ".", "copy", "(", ")", "\n", "# hard-code way to remove EvalHook args", "\n", "for", "key", "in", "[", "\n", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'gpu_collect'", ",", "'save_best'", ",", "\n", "'rule'", ",", "'dynamic_intervals'", "\n", "]", ":", "\n", "                ", "eval_kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "eval_kwargs", ".", "update", "(", "dict", "(", "metric", "=", "args", ".", "eval", ",", "**", "kwargs", ")", ")", "\n", "metric", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_kwargs", ")", "\n", "print", "(", "metric", ")", "\n", "metric_dict", "=", "dict", "(", "config", "=", "args", ".", "config", ",", "metric", "=", "metric", ")", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "                ", "mmcv", ".", "dump", "(", "metric_dict", ",", "json_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.train_mmdet.parse_args": [[31, 81], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.train_mmdet.main": [[83, 182], ["train_mmdet.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmrazor.core.utils.env_utils.setup_multi_processes", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmrazor.models.build_algorithm", "mmrazor.models.build_algorithm.init_weights", "mmdet.utils.get_root_logger.info", "mmrazor.apis.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmrazor.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.utils.env_utils.setup_multi_processes", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights", "home.repos.pwc.inspect_result.hunto_maskd.mmdet.train.train_detector", "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train.set_random_seed"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "# re-set gpu_ids with distributed training mode", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "", "setup_multi_processes", "(", "cfg", ")", "\n", "\n", "# create work_dir", "\n", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "meta", "[", "'config'", "]", "=", "cfg", ".", "pretty_text", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, '", "\n", "f'deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "algorithm", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "algorithm", ".", "init_weights", "(", ")", "\n", "logger", ".", "info", "(", "algorithm", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmdet version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmdet_version", "=", "__version__", "+", "get_git_hash", "(", ")", "[", ":", "7", "]", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "algorithm", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "train_detector", "(", "\n", "algorithm", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.search_mmdet.parse_args": [[29, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMClsArchitecture search subnet'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "'working direction is '", "\n", "'to save search result and log'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-from'", ",", "help", "=", "'resume searching'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdet.search_mmdet.main": [[67, 194], ["search_mmdet.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "model_cfg.get", "isinstance", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmrazor.models.build_algorithm", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmdet.utils.get_root_logger.info", "mmrazor.core.build_searcher", "mmdet.utils.get_root_logger.info", "mmrazor.core.build_searcher.search", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmcv.parallel.MMDistributedDataParallel", "model_cfg.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "Config.fromfile.get", "os.join", "mmcv.parallel.MMDistributedDataParallel.cuda", "dict", "neck_cfg.get", "model_cfg.neck.rfp_backbone.get", "mmdet.utils.collect_env.items", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "os.splitext", "torch.cuda.current_device", "os.basename"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm", "home.repos.pwc.inspect_result.hunto_maskd.core.builder.build_searcher", "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.search"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "model_cfg", "=", "cfg", ".", "algorithm", ".", "architecture", ".", "model", "\n", "model_cfg", ".", "pretrained", "=", "None", "\n", "if", "model_cfg", ".", "get", "(", "'neck'", ")", ":", "\n", "        ", "if", "isinstance", "(", "model_cfg", ".", "neck", ",", "list", ")", ":", "\n", "            ", "for", "neck_cfg", "in", "model_cfg", ".", "neck", ":", "\n", "                ", "if", "neck_cfg", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "                    ", "if", "neck_cfg", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                        ", "neck_cfg", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "", "", "", "", "elif", "model_cfg", ".", "neck", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "            ", "if", "model_cfg", ".", "neck", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                ", "model_cfg", ".", "neck", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "\n", "# in case the test dataset is concatenated", "\n", "", "", "", "samples_per_gpu", "=", "1", "\n", "if", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "dict", ")", ":", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "list", ")", ":", "\n", "        ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "            ", "ds_cfg", ".", "test_mode", "=", "True", "\n", "", "samples_per_gpu", "=", "max", "(", "\n", "[", "ds_cfg", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", "]", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "            ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "                ", "ds_cfg", ".", "pipeline", "=", "replace_ImageToTensor", "(", "ds_cfg", ".", "pipeline", ")", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# build the dataloader", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model_cfg", ".", "train_cfg", "=", "None", "\n", "algorithm", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "model", "=", "algorithm", ".", "architecture", ".", "model", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "\n", "algorithm", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "algorithm", "=", "MMDataParallel", "(", "algorithm", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "test_fn", "=", "single_gpu_test", "\n", "", "else", ":", "\n", "        ", "algorithm", "=", "MMDistributedDataParallel", "(", "\n", "algorithm", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "test_fn", "=", "multi_gpu_test", "\n", "\n", "", "logger", ".", "info", "(", "'build search...'", ")", "\n", "searcher", "=", "build_searcher", "(", "\n", "cfg", ".", "searcher", ",", "\n", "default_args", "=", "dict", "(", "\n", "algorithm", "=", "algorithm", ",", "\n", "dataloader", "=", "data_loader", ",", "\n", "test_fn", "=", "test_fn", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "resume_from", "=", "args", ".", "resume_from", ")", ")", "\n", "logger", ".", "info", "(", "'start search...'", ")", "\n", "searcher", ".", "search", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train.set_random_seed": [[23, 40], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "\n", "", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train.train_model": [[42, 214], ["mmcls.utils.get_root_logger", "cfg.data.get", "list", "mmrazor.core.optimizer.build_optimizers", "mmcv.runner.build_runner", "cfg.get", "mmcv.runner.build_runner.register_training_hooks", "cfg.get", "mmcv.runner.build_runner.run", "mmrazor.datasets.utils.split_dataset", "isinstance", "list.append", "cfg.get", "cfg.get", "cfg.get", "warnings.warn", "mmcv.runner.Fp16OptimizerHook", "cfg.get", "isinstance", "mmcls.datasets.build_dataset", "mmcls.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "isinstance", "mmcv.runner.build_runner.resume", "mmcls.datasets.build_dataloader", "mmrazor.core.distributed_wrapper.DistributedDataParallelWrapper", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "dict", "mmcls.core.DistOptimizerHook", "cfg.get", "mmcv.runner.build_runner.register_hook", "dict", "eval_hook", "isinstance", "hook_cfg.copy.copy", "hook_cfg.copy.pop", "mmcv.utils.build_from_cfg", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.load_checkpoint", "mmcls.datasets.build_dataloader", "model.cpu.cuda", "model.cpu.cuda", "model.cpu.cpu", "ValueError", "mmrazor.core.hooks.DistSamplerSeedHook", "type", "len", "type", "len", "torch.cuda.current_device", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.optimizer.builder.build_optimizers", "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.run", "home.repos.pwc.inspect_result.hunto_maskd.datasets.utils.split_dataset"], ["timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Copy from mmsegmentation and modify some codes.\n\n    This is an ugly implementation, and will be deprecated in the future. In\n    the future, there will be only one train api and no longer distinguish\n    between mmclassificaiton, mmsegmentation or mmdetection.\n    \"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "if", "cfg", ".", "get", "(", "'use_ddp_wrapper'", ",", "False", ")", ":", "\n", "# Difference from mmsegmentation.", "\n", "# In some algorithms, the ``optimizer.step()`` is executed in", "\n", "# ``train_step``. To rebuilt reducer buckets rightly, there need to", "\n", "# use DistributedDataParallelWrapper.", "\n", "            ", "model", "=", "DistributedDataParallelWrapper", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "# Sets the ``find_unused_parameters`` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "            ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build optimizers", "\n", "# Difference from mmdetection.", "\n", "# In some algorithms, there will be multi optimizers.", "\n", "", "optimizer", "=", "build_optimizers", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "# build runner", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a ``runner`` section, '", "\n", "'please set ``runner`` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "# In this PR (https://github.com/open-mmlab/mmcv/pull/1193), the", "\n", "# priority of IterTimerHook has been modified from 'NORMAL' to 'LOW'.", "\n", "runner", ".", "register_hook", "(", "\n", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ",", "priority", "=", "'LOW'", ")", "\n", "\n", "# user-defined hooks", "\n", "", "if", "cfg", ".", "get", "(", "'custom_hooks'", ",", "None", ")", ":", "\n", "        ", "custom_hooks", "=", "cfg", ".", "custom_hooks", "\n", "assert", "isinstance", "(", "custom_hooks", ",", "list", ")", ",", "f'custom_hooks expect list type, but got {type(custom_hooks)}'", "\n", "for", "hook_cfg", "in", "cfg", ".", "custom_hooks", ":", "\n", "            ", "assert", "isinstance", "(", "hook_cfg", ",", "dict", ")", ",", "'Each item in custom_hooks expects dict type, but got '", "f'{type(hook_cfg)}'", "\n", "hook_cfg", "=", "hook_cfg", ".", "copy", "(", ")", "\n", "priority", "=", "hook_cfg", ".", "pop", "(", "'priority'", ",", "'NORMAL'", ")", "\n", "hook", "=", "build_from_cfg", "(", "hook_cfg", ",", "HOOKS", ")", "\n", "runner", ".", "register_hook", "(", "hook", ",", "priority", "=", "priority", ")", "\n", "\n", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.test_mmcls.parse_args": [[26, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'mmcls test model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--metrics'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., '", "\n", "'\"accuracy\", \"precision\", \"recall\", \"f1_score\", \"support\" for single '", "\n", "'label dataset, and \"mAP\", \"CP\", \"CR\", \"CF1\", \"OP\", \"OR\", \"OF1\" for '", "\n", "'multi-label dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu_collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--metric-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "default", "=", "{", "}", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be parsed as a dict metric_options for dataset.evaluate()'", "\n", "' function.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for show_result. key-value pair in xxx=yyy.'", "\n", "'Check available options in `model.show_result`.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--device'", ",", "\n", "choices", "=", "[", "'cpu'", ",", "'cuda'", "]", ",", "\n", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device used for testing'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.test_mmcls.main": [[88, 175], ["test_mmcls.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcls.datasets.build_dataset", "mmcls.datasets.build_dataloader", "mmrazor.models.builder.build_algorithm", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "mmcv.Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "wrap_fp16_model", "mmcv.runner.load_checkpoint.get", "warnings.simplefilter", "warnings.warn", "mmcls.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmcls.apis.multi_gpu_test", "mmcv.parallel.MMDataParallel.cpu", "mmcv.parallel.MMDataParallel", "mmcv.parallel.MMDataParallel.cuda", "mmcls.datasets.build_dataset.evaluate", "results.update", "dataset.evaluate.items", "numpy.vstack", "numpy.max", "numpy.argmax", "results.update", "print", "mmcv.dump", "print", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "assert", "args", ".", "metrics", "or", "args", ".", "out", ",", "'Please specify at least one of output path and evaluation metrics.'", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "# the extra round_up data will be removed during gpu/cpu collect", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ",", "\n", "round_up", "=", "True", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "from", "mmcls", ".", "datasets", "import", "ImageNet", "\n", "warnings", ".", "simplefilter", "(", "'once'", ")", "\n", "warnings", ".", "warn", "(", "'Class names are not saved in the checkpoint\\'s '", "\n", "'meta data, use imagenet by default.'", ")", "\n", "CLASSES", "=", "ImageNet", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "if", "args", ".", "device", "==", "'cpu'", ":", "\n", "            ", "model", "=", "model", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "", "model", ".", "CLASSES", "=", "CLASSES", "\n", "show_kwargs", "=", "{", "}", "if", "args", ".", "show_options", "is", "None", "else", "args", ".", "show_options", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "**", "show_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "results", "=", "{", "}", "\n", "if", "args", ".", "metrics", ":", "\n", "            ", "eval_results", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "args", ".", "metrics", ",", "\n", "args", ".", "metric_options", ")", "\n", "results", ".", "update", "(", "eval_results", ")", "\n", "for", "k", ",", "v", "in", "eval_results", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f'\\n{k} : {v:.2f}'", ")", "\n", "", "", "if", "args", ".", "out", ":", "\n", "            ", "scores", "=", "np", ".", "vstack", "(", "outputs", ")", "\n", "pred_score", "=", "np", ".", "max", "(", "scores", ",", "axis", "=", "1", ")", "\n", "pred_label", "=", "np", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "pred_class", "=", "[", "CLASSES", "[", "lb", "]", "for", "lb", "in", "pred_label", "]", "\n", "results", ".", "update", "(", "{", "\n", "'class_scores'", ":", "scores", ",", "\n", "'pred_score'", ":", "pred_score", ",", "\n", "'pred_label'", ":", "pred_label", ",", "\n", "'pred_class'", ":", "pred_class", "\n", "}", ")", "\n", "print", "(", "f'\\ndumping results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "args", ".", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train_mmcls.parse_args": [[23, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "'--device'", ",", "help", "=", "'device used for training'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train_mmcls.main": [[74, 172], ["train_mmcls.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmrazor.core.utils.env_utils.setup_multi_processes", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmcls.utils.get_root_logger", "dict", "mmcls.utils.collect_env", "mmcls.utils.get_root_logger.info", "mmcls.utils.get_root_logger.info", "mmcls.utils.get_root_logger.info", "mmrazor.models.build_algorithm", "mmrazor.models.build_algorithm.init_weights", "mmcls.utils.get_root_logger.info", "mmrazor.apis.mmcls.train.train_model", "Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmcls.utils.get_root_logger.info", "mmrazor.apis.mmcls.train.set_random_seed", "mmcls.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "mmcls.datasets.build_dataset", "mmcls.utils.collect_env.items", "os.splitext", "os.basename"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.utils.env_utils.setup_multi_processes", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights", "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train.train_model", "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train.set_random_seed"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "", "setup_multi_processes", "(", "cfg", ")", "\n", "\n", "# create work_dir", "\n", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, '", "\n", "f'deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "\n", "# Difference from mmclassification", "\n", "# replace `model` to `algorithm`", "\n", "algorithm", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "algorithm", ".", "init_weights", "(", ")", "\n", "logger", ".", "info", "(", "algorithm", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmcls version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmcls_version", "=", "__version__", ",", "\n", "config", "=", "cfg", ".", "pretty_text", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "train_model", "(", "\n", "# Difference from mmclassification", "\n", "# replace `model` to `algorithm`", "\n", "algorithm", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "device", "=", "'cpu'", "if", "args", ".", "device", "==", "'cpu'", "else", "'cuda'", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.search_mmcls.parse_args": [[29, 66], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMClsArchitecture search subnet'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "'working direction is '", "\n", "'to save search result and log'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "type", "=", "str", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--device'", ",", "\n", "choices", "=", "[", "'cpu'", ",", "'cuda'", "]", ",", "\n", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device used for testing'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmcls.search_mmcls.main": [[68, 172], ["search_mmcls.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcls.utils.get_root_logger", "mmcls.utils.collect_env", "mmcls.utils.get_root_logger.info", "mmcls.utils.get_root_logger.info", "mmcls.utils.get_root_logger.info", "mmcls.datasets.build_dataset", "mmcls.datasets.build_dataloader", "mmrazor.models.build_algorithm", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcls.utils.get_root_logger.info", "mmrazor.core.build_searcher", "mmcls.utils.get_root_logger.info", "mmrazor.core.build_searcher.search", "mmcv.Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "wrap_fp16_model", "mmcv.runner.load_checkpoint.get", "warnings.simplefilter", "warnings.warn", "mmcv.parallel.MMDistributedDataParallel", "mmcv.Config.fromfile.get", "os.join", "mmcv.parallel.MMDataParallel.cpu", "mmcv.parallel.MMDataParallel", "mmcv.parallel.MMDataParallel.cuda", "dict", "mmcls.utils.collect_env.items", "os.splitext", "torch.cuda.current_device", "os.basename"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm", "home.repos.pwc.inspect_result.hunto_maskd.core.builder.build_searcher", "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.search"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# build the dataloader", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "\n", "# the extra round_up data will be removed during gpu/cpu collect", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ",", "\n", "round_up", "=", "True", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "from", "mmcls", ".", "datasets", "import", "ImageNet", "\n", "warnings", ".", "simplefilter", "(", "'once'", ")", "\n", "warnings", ".", "warn", "(", "'Class names are not saved in the checkpoint\\'s '", "\n", "'meta data, use imagenet by default.'", ")", "\n", "CLASSES", "=", "ImageNet", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "if", "args", ".", "device", "==", "'cpu'", ":", "\n", "            ", "model", "=", "model", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "", "model", ".", "CLASSES", "=", "CLASSES", "\n", "test_fn", "=", "single_gpu_test", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "test_fn", "=", "multi_gpu_test", "\n", "\n", "", "logger", ".", "info", "(", "'build search...'", ")", "\n", "searcher", "=", "build_searcher", "(", "\n", "cfg", ".", "searcher", ",", "\n", "default_args", "=", "dict", "(", "\n", "algorithm", "=", "model", ",", "\n", "dataloader", "=", "data_loader", ",", "\n", "test_fn", "=", "test_fn", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "resume_from", "=", "args", ".", "resume_from", ")", ")", "\n", "logger", ".", "info", "(", "'start search...'", ")", "\n", "searcher", ".", "search", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm": [[18, 21], ["ALGORITHMS.build"], "function", ["None"], ["def", "build_algorithm", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build compressor.\"\"\"", "\n", "return", "ALGORITHMS", ".", "build", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_architecture": [[23, 26], ["ARCHITECTURES.build"], "function", ["None"], ["", "def", "build_architecture", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build architecture.\"\"\"", "\n", "return", "ARCHITECTURES", ".", "build", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_mutator": [[28, 31], ["MUTATORS.build"], "function", ["None"], ["", "def", "build_mutator", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build mutator.\"\"\"", "\n", "return", "MUTATORS", ".", "build", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_distiller": [[33, 36], ["DISTILLERS.build"], "function", ["None"], ["", "def", "build_distiller", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build distiller.\"\"\"", "\n", "return", "DISTILLERS", ".", "build", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_pruner": [[38, 41], ["PRUNERS.build"], "function", ["None"], ["", "def", "build_pruner", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build pruner.\"\"\"", "\n", "return", "PRUNERS", ".", "build", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_mutable": [[43, 46], ["MUTABLES.build"], "function", ["None"], ["", "def", "build_mutable", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build mutable.\"\"\"", "\n", "return", "MUTABLES", ".", "build", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_op": [[48, 51], ["OPS.build"], "function", ["None"], ["", "def", "build_op", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build op.\"\"\"", "\n", "return", "OPS", ".", "build", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_loss": [[53, 56], ["LOSSES.build"], "function", ["None"], ["", "def", "build_loss", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build loss.\"\"\"", "\n", "return", "LOSSES", ".", "build", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.utils.kd_bbox_head.KDShared2FCBBoxHead.__init__": [[8, 10], ["mmdet.models.roi_heads.bbox_heads.Shared2FCBBoxHead.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KDShared2FCBBoxHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.utils.kd_bbox_head.KDShared2FCBBoxHead.loss": [[11, 13], ["None"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix": [[2, 18], ["dict", "inputs.items"], "function", ["None"], ["def", "add_prefix", "(", "inputs", ",", "prefix", ")", ":", "\n", "    ", "\"\"\"Add prefix for dict.\n\n    Args:\n        inputs (dict): The input dict with str keys.\n        prefix (str): The prefix to add.\n\n    Returns:\n        dict: The dict with keys updated with ``prefix``.\n    \"\"\"", "\n", "\n", "outputs", "=", "dict", "(", ")", "\n", "for", "name", ",", "value", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "outputs", "[", "f'{prefix}.{name}'", "]", "=", "value", "\n", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.utils.switchable_bn.SwitchableBatchNorm2d.__init__": [[22, 34], ["torch.Module.__init__", "range", "torch.ModuleList", "bns.append", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "max_num_features", ",", "num_bns", ")", ":", "\n", "        ", "super", "(", "SwitchableBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_num_features", "=", "max_num_features", "\n", "# number of BatchNorm2d in a SwitchableBatchNorm2d", "\n", "self", ".", "num_bns", "=", "num_bns", "\n", "bns", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_bns", ")", ":", "\n", "            ", "bns", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "max_num_features", ")", ")", "\n", "", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "bns", ")", "\n", "# When switching bn we should switch index simultaneously", "\n", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.utils.switchable_bn.SwitchableBatchNorm2d.forward": [[35, 39], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward computation according to the current switch of the slimmable\n        networks.\"\"\"", "\n", "return", "self", ".", "bns", "[", "self", ".", "index", "]", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.utils.placeholder.Placeholder.__init__": [[17, 25], ["torch.nn.Module.__init__", "dict", "placeholder.Placeholder.placeholder_kwargs.update", "placeholder.Placeholder.placeholder_kwargs.update", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "group", ",", "space_id", ",", "choices", "=", "None", ",", "choice_args", "=", "None", ")", ":", "\n", "        ", "super", "(", "Placeholder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "placeholder_group", "=", "group", "\n", "self", ".", "placeholder_kwargs", "=", "dict", "(", "space_id", "=", "space_id", ")", "\n", "if", "choices", "is", "not", "None", ":", "\n", "            ", "self", ".", "placeholder_kwargs", ".", "update", "(", "dict", "(", "choices", "=", "choices", ")", ")", "\n", "", "if", "choice_args", "is", "not", "None", ":", "\n", "            ", "self", ".", "placeholder_kwargs", ".", "update", "(", "dict", "(", "choice_args", "=", "choice_args", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.utils.broadcast.broadcast_object_list": [[12, 50], ["mmcv.runner.get_dist_info", "torch.full", "torch.full", "list", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "torch.barrier", "mmcv.mkdir_or_exist", "tempfile.mkdtemp", "mmcv.dump", "torch.tensor", "torch.tensor", "mmcv.load", "shutil.rmtree", "os.join", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "os.join", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["def", "broadcast_object_list", "(", "object_list", ",", "src", "=", "0", ")", ":", "\n", "    ", "\"\"\"Broadcasts picklable objects in ``object_list`` to the whole group.\n\n    Note that all objects in ``object_list`` must be picklable in order to be\n    broadcasted.\n\n    Args:\n        object_list (List[Any]): List of input objects to broadcast.\n            Each object must be picklable. Only objects on the src rank will be\n            broadcast, but each rank must provide lists of equal sizes.\n        src (int): Source rank from which to broadcast ``object_list``.\n    \"\"\"", "\n", "my_rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "\n", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "32", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "object_list_return", "=", "list", "(", ")", "\n", "if", "my_rank", "==", "src", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "'.dist_broadcast'", ")", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", "dir", "=", "'.dist_broadcast'", ")", "\n", "mmcv", ".", "dump", "(", "object_list", ",", "osp", ".", "join", "(", "tmpdir", ",", "'object_list.pkl'", ")", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "src", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "\n", "if", "my_rank", "!=", "src", ":", "\n", "        ", "object_list_return", "=", "mmcv", ".", "load", "(", "osp", ".", "join", "(", "tmpdir", ",", "'object_list.pkl'", ")", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "if", "my_rank", "==", "src", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "object_list_return", "=", "object_list", "\n", "\n", "", "return", "object_list_return", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.utils.lr.set_lr": [[1, 12], ["isinstance", "runner.optimizer.items", "zip", "zip"], "function", ["None"], ["def", "set_lr", "(", "runner", ",", "lr_groups", ",", "freeze_optimizers", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Set specified learning rate in optimizer.\"\"\"", "\n", "if", "isinstance", "(", "runner", ".", "optimizer", ",", "dict", ")", ":", "\n", "        ", "for", "k", ",", "optim", "in", "runner", ".", "optimizer", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "freeze_optimizers", ":", "\n", "                ", "continue", "\n", "", "for", "param_group", ",", "lr", "in", "zip", "(", "optim", ".", "param_groups", ",", "lr_groups", "[", "k", "]", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", "else", ":", "\n", "        ", "for", "param_group", ",", "lr", "in", "zip", "(", "runner", ".", "optimizer", ".", "param_groups", ",", "lr_groups", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.utils.env_utils.setup_multi_processes": [[9, 47], ["cfg.get", "cv2.setNumThreads", "platform.system", "cfg.get", "multiprocessing.get_start_method", "multiprocessing.set_start_method", "warnings.warn", "str", "warnings.warn", "str", "warnings.warn"], "function", ["None"], ["def", "setup_multi_processes", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Setup multi-processing environment variables.\"\"\"", "\n", "# set multi-process start method as `fork` to speed up the training", "\n", "if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "        ", "mp_start_method", "=", "cfg", ".", "get", "(", "'mp_start_method'", ",", "'fork'", ")", "\n", "current_method", "=", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "\n", "if", "current_method", "is", "not", "None", "and", "current_method", "!=", "mp_start_method", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "f'Multi-processing start method `{mp_start_method}` is '", "\n", "f'different from the previous setting `{current_method}`.'", "\n", "f'It will be force set to `{mp_start_method}`. You can change '", "\n", "f'this behavior by changing `mp_start_method` in your config.'", ")", "\n", "", "mp", ".", "set_start_method", "(", "mp_start_method", ",", "force", "=", "True", ")", "\n", "\n", "# disable opencv multithreading to avoid system being overloaded", "\n", "", "opencv_num_threads", "=", "cfg", ".", "get", "(", "'opencv_num_threads'", ",", "0", ")", "\n", "cv2", ".", "setNumThreads", "(", "opencv_num_threads", ")", "\n", "\n", "# setup OMP threads", "\n", "# This code is referred from https://github.com/pytorch/pytorch/blob/master/torch/distributed/run.py  # noqa", "\n", "if", "'OMP_NUM_THREADS'", "not", "in", "os", ".", "environ", "and", "cfg", ".", "data", ".", "workers_per_gpu", ">", "1", ":", "\n", "        ", "omp_num_threads", "=", "1", "\n", "warnings", ".", "warn", "(", "\n", "f'Setting OMP_NUM_THREADS environment variable for each process '", "\n", "f'to be {omp_num_threads} in default, to avoid your system being '", "\n", "f'overloaded, please further tune the variable for optimal '", "\n", "f'performance in your application as needed.'", ")", "\n", "os", ".", "environ", "[", "'OMP_NUM_THREADS'", "]", "=", "str", "(", "omp_num_threads", ")", "\n", "\n", "# setup MKL threads", "\n", "", "if", "'MKL_NUM_THREADS'", "not", "in", "os", ".", "environ", "and", "cfg", ".", "data", ".", "workers_per_gpu", ">", "1", ":", "\n", "        ", "mkl_num_threads", "=", "1", "\n", "warnings", ".", "warn", "(", "\n", "f'Setting MKL_NUM_THREADS environment variable for each process '", "\n", "f'to be {mkl_num_threads} in default, to avoid your system being '", "\n", "f'overloaded, please further tune the variable for optimal '", "\n", "f'performance in your application as needed.'", ")", "\n", "os", ".", "environ", "[", "'MKL_NUM_THREADS'", "]", "=", "str", "(", "mkl_num_threads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.FunctionContext.__init__": [[39, 45], ["mmcv.utils.import_modules_from_strings"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ctx", ",", "method", ",", "import_module", "=", "None", ")", ":", "\n", "        ", "self", ".", "ctx", "=", "ctx", "\n", "\n", "self", ".", "import_module", "=", "import_modules_from_strings", "(", "import_module", ")", "\n", "self", ".", "method_str", "=", "method", "\n", "self", ".", "method_exec_str", "=", "f'self.import_module.{method}'", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.FunctionContext._set_method": [[46, 49], ["exec"], "methods", ["None"], ["", "def", "_set_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"Modify a function.\"\"\"", "\n", "exec", "(", "f'{self.method_exec_str} = method'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.FunctionContext.__enter__": [[50, 58], ["eval", "base.FunctionContext._set_method", "base.function_wrapper"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.base.FunctionContext._set_method", "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.function_wrapper"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Rewrite the function.\"\"\"", "\n", "self", ".", "method_impl", "=", "eval", "(", "self", ".", "method_exec_str", ")", "\n", "\n", "if", "self", ".", "method_impl", ":", "\n", "            ", "self", ".", "_set_method", "(", "\n", "function_wrapper", "(", "self", ".", "ctx", ",", "self", ".", "method_impl", ",", "self", ".", "method_str", ",", "\n", "self", ".", "align_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.FunctionContext.__exit__": [[59, 63], ["base.FunctionContext._set_method"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.base.FunctionContext._set_method"], ["", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "\"\"\"Restore the function.\"\"\"", "\n", "if", "self", ".", "method_impl", ":", "\n", "            ", "self", ".", "_set_method", "(", "self", ".", "method_impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.ConversionContext.__init__": [[68, 81], ["dict", "dict", "dict", "base.ConversionContext.hooks.append", "base.FunctionContext"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hooks", ")", ":", "\n", "# save functions' inputs", "\n", "        ", "self", ".", "method_args", "=", "dict", "(", ")", "\n", "self", ".", "method_kwargs", "=", "dict", "(", ")", "\n", "# save functions' outputs", "\n", "self", ".", "method_return", "=", "dict", "(", ")", "\n", "\n", "# Each function will have a sub context manager, the function will be", "\n", "# rewritten when enter the sub context manager.", "\n", "self", ".", "hooks", "=", "[", "]", "\n", "self", ".", "is_teacher", "=", "True", "\n", "for", "hook", "in", "hooks", ":", "\n", "            ", "self", ".", "hooks", ".", "append", "(", "FunctionContext", "(", "self", ",", "**", "hook", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.ConversionContext.__enter__": [[82, 87], ["hook.__enter__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.base.ConversionContext.__enter__"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Enter every sub context managers.\"\"\"", "\n", "for", "hook", "in", "self", ".", "hooks", ":", "\n", "            ", "hook", ".", "__enter__", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.ConversionContext.__exit__": [[88, 92], ["hook.__exit__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.base.ConversionContext.__exit__"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "\"\"\"Exit every sub context managers.\"\"\"", "\n", "for", "hook", "in", "self", ".", "hooks", ":", "\n", "            ", "hook", ".", "__exit__", "(", "exc_type", ",", "exc_value", ",", "traceback", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.__init__": [[108, 121], ["mmcv.runner.BaseModule.__init__", "base.ConversionContext"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "align_methods", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseDistiller", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "align_methods", "is", "None", ":", "\n", "            ", "self", ".", "context_manager", "=", "None", "\n", "", "else", ":", "\n", "# To obtain the python function's outputs, there will build a", "\n", "# specific context manager. When enter the context manager, the", "\n", "# functions will be rewrite. The context manager could record", "\n", "# inputs or outputs of the functions , and pass from teachr to", "\n", "# student. When exit the context manager, the rewritten functions", "\n", "# will restore.", "\n", "            ", "self", ".", "context_manager", "=", "ConversionContext", "(", "align_methods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.prepare_from_student": [[122, 126], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "prepare_from_student", "(", "self", ",", "supernet", ")", ":", "\n", "        ", "\"\"\"Register forward hooks to students and teachers.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.teacher_forward_output_hook": [[127, 131], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "teacher_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the teacher output.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.student_forward_output_hook": [[132, 136], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "student_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the student output.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.reset_ctx_teacher_mode": [[137, 140], ["None"], "methods", ["None"], ["", "def", "reset_ctx_teacher_mode", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "context_manager", "is", "not", "None", ":", "\n", "            ", "self", ".", "context_manager", ".", "is_teacher", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.exec_teacher_forward": [[141, 145], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "exec_teacher_forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Execute the teacher's forward function.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.exec_student_forward": [[146, 150], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "exec_student_forward", "(", "self", ",", "student", ",", "data", ")", ":", "\n", "        ", "\"\"\"Execute the student's forward function.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.compute_distill_loss": [[151, 156], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "compute_distill_loss", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Compute distill loss according teacher's outputs and student's\n        outputs.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.base.function_wrapper": [[8, 29], ["method"], "function", ["None"], ["def", "function_wrapper", "(", "ctx", ",", "method", ",", "method_str", ")", ":", "\n", "    ", "\"\"\"Pass teacher's outputs to student.\"\"\"", "\n", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# record inputs", "\n", "        ", "ctx", ".", "method_args", "[", "method_str", "]", "=", "args", "\n", "ctx", ".", "method_kwargs", "[", "method_str", "]", "=", "kwargs", "\n", "# TODO cover more usecases, not only pass teacher's outputs to", "\n", "# student.", "\n", "if", "ctx", ".", "is_teacher", ":", "\n", "# execute the raw function", "\n", "            ", "outputs", "=", "method", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# record outputs", "\n", "ctx", ".", "method_return", "[", "method_str", "]", "=", "outputs", "\n", "", "else", ":", "\n", "# modify student's outputs to be same with teacher", "\n", "            ", "outputs", "=", "ctx", ".", "method_return", "[", "method_str", "]", "\n", "\n", "", "return", "outputs", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.__init__": [[18, 36], ["base.BaseDistiller.__init__", "torch.ModuleDict", "dict", "dict", "list", "list", "loss.copy", "loss.copy.pop", "builder.build_loss"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "components", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "components", "=", "components", "\n", "self", ".", "losses", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "self", ".", "student_outputs", "=", "dict", "(", ")", "\n", "self", ".", "teacher_outputs", "=", "dict", "(", ")", "\n", "\n", "for", "component", "in", "self", ".", "components", ":", "\n", "            ", "student_module_name", "=", "component", "[", "'student_module'", "]", "\n", "teacher_module_name", "=", "component", "[", "'teacher_module'", "]", "\n", "self", ".", "student_outputs", "[", "student_module_name", "]", "=", "list", "(", ")", "\n", "self", ".", "teacher_outputs", "[", "teacher_module_name", "]", "=", "list", "(", ")", "\n", "\n", "for", "loss", "in", "component", ".", "losses", ":", "\n", "                ", "loss_cfg", "=", "loss", ".", "copy", "(", ")", "\n", "loss_name", "=", "loss_cfg", ".", "pop", "(", "'name'", ")", "\n", "self", ".", "losses", "[", "loss_name", "]", "=", "build_loss", "(", "loss_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.prepare_from_student": [[37, 61], ["student.model.named_modules", "dict", "student.model.named_modules", "student_module.register_forward_hook", "teacher_module.register_forward_hook"], "methods", ["None"], ["", "", "", "def", "prepare_from_student", "(", "self", ",", "student", ")", ":", "\n", "        ", "\"\"\"Registers a global forward hook for each teacher module and student\n        module to be used in the distillation.\n\n        Args:\n            student (:obj:`torch.nn.Module`): The student model to be used\n                in the distillation.\n        \"\"\"", "\n", "self", ".", "module2name", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "student", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "self", ".", "module2name", "[", "module", "]", "=", "name", "\n", "", "self", ".", "name_modules", "=", "dict", "(", "student", ".", "model", ".", "named_modules", "(", ")", ")", "\n", "\n", "for", "component", "in", "self", ".", "components", ":", "\n", "            ", "student_module_name", "=", "component", "[", "'student_module'", "]", "\n", "teacher_module_name", "=", "component", "[", "'teacher_module'", "]", "\n", "\n", "student_module", "=", "self", ".", "name_modules", "[", "student_module_name", "]", "\n", "teacher_module", "=", "self", ".", "name_modules", "[", "teacher_module_name", "]", "\n", "\n", "student_module", ".", "register_forward_hook", "(", "\n", "self", ".", "student_forward_output_hook", ")", "\n", "teacher_module", ".", "register_forward_hook", "(", "\n", "self", ".", "teacher_forward_output_hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.teacher_forward_output_hook": [[62, 72], ["getattr", "self_distiller.SelfDistiller.SelfDistiller.teacher_outputs[].append"], "methods", ["None"], ["", "", "def", "teacher_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the output.\n\n        Args:\n            module (:obj:`torch.nn.Module`): the module of register hook\n            inputs (tuple): input of module\n            outputs (tuple): out of module\n        \"\"\"", "\n", "if", "self", ".", "training", "and", "getattr", "(", "self", ",", "'is_teacher'", ",", "None", ")", ":", "\n", "            ", "self", ".", "teacher_outputs", "[", "self", ".", "module2name", "[", "module", "]", "]", ".", "append", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.student_forward_output_hook": [[73, 83], ["self_distiller.SelfDistiller.SelfDistiller.student_outputs[].append", "getattr"], "methods", ["None"], ["", "", "def", "student_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the output.\n\n        Args:\n            module (:obj:`torch.nn.Module`): the module of register hook\n            inputs (tuple): input of module\n            outputs (tuple): out of module\n        \"\"\"", "\n", "if", "self", ".", "training", "and", "not", "getattr", "(", "self", ",", "'is_teacher'", ",", "None", ")", ":", "\n", "            ", "self", ".", "student_outputs", "[", "self", ".", "module2name", "[", "module", "]", "]", ".", "append", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.reset_outputs": [[84, 88], ["outputs.keys", "list"], "methods", ["None"], ["", "", "def", "reset_outputs", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Reset the teacher's outputs or student's outputs.\"\"\"", "\n", "for", "key", "in", "outputs", ".", "keys", "(", ")", ":", "\n", "            ", "outputs", "[", "key", "]", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.exec_teacher_forward": [[89, 103], ["self_distiller.SelfDistiller.SelfDistiller.reset_outputs", "teacher"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.reset_outputs"], ["", "", "def", "exec_teacher_forward", "(", "self", ",", "teacher", ",", "data", ")", ":", "\n", "        ", "\"\"\"Forward computation of the teacher.\n\n        Args:\n            teacher (:obj:`torch.nn.Module`): The teacher model to be used\n                in the distillation.\n            data (dict): The output of dataloader.\n        \"\"\"", "\n", "self", ".", "reset_outputs", "(", "self", ".", "teacher_outputs", ")", "\n", "self", ".", "is_teacher", "=", "True", "\n", "output", "=", "teacher", "(", "**", "data", ")", "\n", "self", ".", "is_teacher", "=", "False", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.exec_student_forward": [[104, 117], ["self_distiller.SelfDistiller.SelfDistiller.reset_outputs", "student"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.reset_outputs"], ["", "def", "exec_student_forward", "(", "self", ",", "student", ",", "data", ")", ":", "\n", "        ", "\"\"\"Forward computation of the student.\n\n        Args:\n            student (:obj:`torch.nn.Module`): The student model to be used\n                in the distillation.\n            data (dict): The output of dataloader.\n        \"\"\"", "\n", "assert", "not", "self", ".", "is_teacher", "\n", "self", ".", "reset_outputs", "(", "self", ".", "student_outputs", ")", "\n", "output", "=", "student", "(", "**", "data", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.self_distiller.SelfDistiller.compute_distill_loss": [[118, 142], ["dict", "enumerate", "enumerate", "zip", "loss_module"], "methods", ["None"], ["", "def", "compute_distill_loss", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Compute the distillation loss.\"\"\"", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "for", "i", ",", "component", "in", "enumerate", "(", "self", ".", "components", ")", ":", "\n", "            ", "student_module_name", "=", "component", "[", "'student_module'", "]", "\n", "student_outputs", "=", "self", ".", "student_outputs", "[", "student_module_name", "]", "\n", "\n", "teacher_module_name", "=", "component", "[", "'teacher_module'", "]", "\n", "teacher_outputs", "=", "self", ".", "teacher_outputs", "[", "teacher_module_name", "]", "\n", "\n", "for", "out_idx", ",", "(", "s_out", ",", "t_out", ")", "in", "enumerate", "(", "\n", "zip", "(", "student_outputs", ",", "teacher_outputs", ")", ")", ":", "\n", "\n", "                ", "for", "loss", "in", "component", ".", "losses", ":", "\n", "                    ", "loss_module", "=", "self", ".", "losses", "[", "loss", ".", "name", "]", "\n", "loss_name", "=", "f'{loss.name}.{out_idx}'", "\n", "\n", "loss_module", ".", "current_data", "=", "data", "\n", "losses", "[", "loss_name", "]", "=", "loss_module", "(", "s_out", ",", "t_out", ")", "\n", "loss_module", ".", "current_data", "=", "None", "\n", "\n", "", "", "", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.__init__": [[27, 71], ["tuple", "base.BaseDistiller.__init__", "single_teacher.SingleTeacherDistiller.build_teacher", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "dict", "dict", "dict", "dict", "dict", "enumerate", "list", "list", "getattr", "single_teacher.SingleTeacherDistiller.build_align_module", "loss.copy", "loss.copy.pop", "builder.build_loss"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.build_teacher", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.build_align_module", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "teacher", ",", "\n", "teacher_trainable", "=", "False", ",", "\n", "teacher_norm_eval", "=", "True", ",", "\n", "components", "=", "tuple", "(", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "teacher_trainable", "=", "teacher_trainable", "\n", "self", ".", "teacher_norm_eval", "=", "teacher_norm_eval", "\n", "self", ".", "teacher", "=", "self", ".", "build_teacher", "(", "teacher", ")", "\n", "\n", "self", ".", "components", "=", "components", "\n", "self", ".", "losses", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "align_modules", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "# Record the featuremaps that need to calculate the distillation loss.", "\n", "self", ".", "student_outputs", "=", "dict", "(", ")", "\n", "self", ".", "teacher_outputs", "=", "dict", "(", ")", "\n", "self", ".", "student_inputs", "=", "dict", "(", ")", "\n", "self", ".", "teacher_inputs", "=", "dict", "(", ")", "\n", "self", ".", "teacher_student_name_map", "=", "dict", "(", ")", "\n", "\n", "for", "i", ",", "component", "in", "enumerate", "(", "self", ".", "components", ")", ":", "\n", "            ", "student_module_name", "=", "component", "[", "'student_module'", "]", "\n", "teacher_module_name", "=", "component", "[", "'teacher_module'", "]", "\n", "# The type of every student_output is a list by default, because", "\n", "# some modules will execute multiple forward calculations, such as", "\n", "# the shareable head in Retinanet", "\n", "self", ".", "student_outputs", "[", "student_module_name", "]", "=", "list", "(", ")", "\n", "self", ".", "teacher_outputs", "[", "teacher_module_name", "]", "=", "list", "(", ")", "\n", "\n", "# If the number of featuremap channels of student and teacher are", "\n", "# inconsistent, they need to be aligned by a 1x1 convolution", "\n", "align_module_cfg", "=", "getattr", "(", "component", ",", "'align_module'", ",", "None", ")", "\n", "if", "align_module_cfg", "is", "not", "None", ":", "\n", "                ", "align_module_name", "=", "f'component_{i}'", "\n", "align_module", "=", "self", ".", "build_align_module", "(", "align_module_cfg", ")", "\n", "self", ".", "align_modules", "[", "align_module_name", "]", "=", "align_module", "\n", "\n", "# Multiple losses can be calculated at the same location", "\n", "", "for", "loss", "in", "component", ".", "losses", ":", "\n", "                ", "loss_cfg", "=", "loss", ".", "copy", "(", ")", "\n", "loss_name", "=", "loss_cfg", ".", "pop", "(", "'name'", ")", "\n", "self", ".", "losses", "[", "loss_name", "]", "=", "build_loss", "(", "loss_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.build_teacher": [[72, 78], ["builder.MODELS.build"], "methods", ["None"], ["", "", "", "def", "build_teacher", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Build a model from the `cfg`.\"\"\"", "\n", "\n", "teacher", "=", "MODELS", ".", "build", "(", "cfg", ")", "\n", "\n", "return", "teacher", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.build_align_module": [[79, 111], ["cfg.get", "range", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "align_modules.append", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "build_align_module", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Build ``align_module`` from the `cfg`.\n\n        ``align_module`` is needed when the number of channels output by the\n        teacher module is not equal to that of the student module, or for some\n        other reasons.\n\n        Args:\n            cfg (dict): The config dict for ``align_module``.\n        \"\"\"", "\n", "\n", "in_channels", "=", "cfg", ".", "student_channels", "\n", "out_channels", "=", "cfg", ".", "teacher_channels", "\n", "if", "cfg", ".", "get", "(", "'num_modules'", ",", "1", ")", "==", "1", ":", "\n", "            ", "if", "cfg", ".", "type", "==", "'conv2d'", ":", "\n", "                ", "align_module", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "", "elif", "cfg", ".", "type", "==", "'linear'", ":", "\n", "                ", "align_module", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "", "", "else", ":", "\n", "            ", "align_modules", "=", "[", "]", "\n", "if", "not", "isinstance", "(", "in_channels", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "in_channels", "=", "[", "in_channels", "]", "*", "cfg", ".", "num_modules", "\n", "", "if", "not", "isinstance", "(", "out_channels", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "out_channels", "=", "[", "out_channels", "]", "*", "cfg", ".", "num_modules", "\n", "", "for", "i", "in", "range", "(", "cfg", ".", "num_modules", ")", ":", "\n", "                ", "if", "cfg", ".", "type", "==", "'conv2d'", ":", "\n", "                    ", "align_module_", "=", "nn", ".", "Conv2d", "(", "in_channels", "[", "i", "]", ",", "out_channels", "[", "i", "]", ",", "1", ")", "\n", "", "elif", "cfg", ".", "type", "==", "'linear'", ":", "\n", "                    ", "align_module_", "=", "nn", ".", "Linear", "(", "in_channels", "[", "i", "]", ",", "out_channels", "[", "i", "]", ")", "\n", "", "align_modules", ".", "append", "(", "align_module_", ")", "\n", "", "align_module", "=", "nn", ".", "ModuleList", "(", "align_modules", ")", "\n", "", "return", "align_module", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.prepare_from_student": [[112, 161], ["student.model.named_modules", "dict", "single_teacher.SingleTeacherDistiller.teacher.named_modules", "dict", "student.model.named_modules", "single_teacher.SingleTeacherDistiller.teacher.named_modules", "student_module.register_forward_hook", "teacher_module.register_forward_hook", "component.get", "list", "list", "s_module.register_forward_pre_hook", "t_module.register_forward_pre_hook", "functools.partial", "functools.partial"], "methods", ["None"], ["", "def", "prepare_from_student", "(", "self", ",", "student", ")", ":", "\n", "        ", "\"\"\"Registers a global forward hook for each teacher module and student\n        module to be used in the distillation.\n\n        Args:\n            student (:obj:`torch.nn.Module`): The student model to be used\n                in the distillation.\n        \"\"\"", "\n", "\n", "# Record the mapping relationship between student's modules and module", "\n", "# names.", "\n", "self", ".", "student_module2name", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "student", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "self", ".", "student_module2name", "[", "module", "]", "=", "name", "\n", "", "self", ".", "student_name2module", "=", "dict", "(", "student", ".", "model", ".", "named_modules", "(", ")", ")", "\n", "\n", "# Record the mapping relationship between teacher's modules and module", "\n", "# names.", "\n", "self", ".", "teacher_module2name", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "self", ".", "teacher", ".", "named_modules", "(", ")", ":", "\n", "            ", "self", ".", "teacher_module2name", "[", "module", "]", "=", "name", "\n", "", "self", ".", "teacher_name2module", "=", "dict", "(", "self", ".", "teacher", ".", "named_modules", "(", ")", ")", "\n", "\n", "# Register forward hooks for modules that need to participate in loss", "\n", "# calculation.", "\n", "for", "component", "in", "self", ".", "components", ":", "\n", "            ", "student_module_name", "=", "component", "[", "'student_module'", "]", "\n", "teacher_module_name", "=", "component", "[", "'teacher_module'", "]", "\n", "\n", "student_module", "=", "self", ".", "student_name2module", "[", "student_module_name", "]", "\n", "teacher_module", "=", "self", ".", "teacher_name2module", "[", "teacher_module_name", "]", "\n", "\n", "student_module", ".", "register_forward_hook", "(", "\n", "self", ".", "student_forward_output_hook", ")", "\n", "teacher_module", ".", "register_forward_hook", "(", "\n", "self", ".", "teacher_forward_output_hook", ")", "\n", "\n", "if", "component", ".", "get", "(", "'modules_with_student_inputs'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "for", "mod", "in", "component", "[", "'modules_with_student_inputs'", "]", ":", "\n", "                    ", "s_module_name", "=", "mod", "[", "'student_module'", "]", "\n", "t_module_name", "=", "mod", "[", "'teacher_module'", "]", "\n", "self", ".", "teacher_student_name_map", "[", "t_module_name", "]", "=", "s_module_name", "\n", "self", ".", "student_inputs", "[", "s_module_name", "]", "=", "list", "(", ")", "\n", "self", ".", "teacher_inputs", "[", "t_module_name", "]", "=", "list", "(", ")", "\n", "same_indices", "=", "mod", "[", "'same_indices'", "]", "\n", "s_module", "=", "self", ".", "student_name2module", "[", "s_module_name", "]", "\n", "t_module", "=", "self", ".", "teacher_name2module", "[", "t_module_name", "]", "\n", "s_module", ".", "register_forward_pre_hook", "(", "partial", "(", "self", ".", "student_forward_pre_hook", ",", "same_indices", "=", "same_indices", ")", ")", "\n", "t_module", ".", "register_forward_pre_hook", "(", "partial", "(", "self", ".", "teacher_forward_pre_hook", ",", "same_indices", "=", "same_indices", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.teacher_forward_pre_hook": [[162, 170], ["list", "zip", "tuple", "single_teacher.SingleTeacherDistiller.student_inputs[].pop", "input[].copy_", "input[].resize_"], "methods", ["None"], ["", "", "", "", "def", "teacher_forward_pre_hook", "(", "self", ",", "module", ",", "input", ",", "same_indices", ")", ":", "\n", "        ", "input", "=", "list", "(", "input", ")", "\n", "s_module_name", "=", "self", ".", "teacher_student_name_map", "[", "self", ".", "teacher_module2name", "[", "module", "]", "]", "\n", "for", "idx", ",", "item", "in", "zip", "(", "same_indices", ",", "self", ".", "student_inputs", "[", "s_module_name", "]", ".", "pop", "(", "0", ")", ")", ":", "\n", "            ", "if", "input", "[", "idx", "]", ".", "shape", "!=", "item", ".", "shape", ":", "\n", "                ", "input", "[", "idx", "]", ".", "resize_", "(", "item", ".", "shape", ")", "\n", "", "input", "[", "idx", "]", ".", "copy_", "(", "item", ")", "\n", "", "return", "tuple", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.student_forward_pre_hook": [[171, 179], ["single_teacher.SingleTeacherDistiller.student_inputs[].append", "same_input.append"], "methods", ["None"], ["", "def", "student_forward_pre_hook", "(", "self", ",", "module", ",", "input", ",", "same_indices", ")", ":", "\n", "        ", "if", "not", "module", ".", "training", ":", "\n", "            ", "return", "input", "\n", "", "same_input", "=", "[", "]", "\n", "for", "idx", "in", "same_indices", ":", "\n", "            ", "same_input", ".", "append", "(", "input", "[", "idx", "]", ")", "\n", "", "self", ".", "student_inputs", "[", "self", ".", "student_module2name", "[", "module", "]", "]", ".", "append", "(", "same_input", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.teacher_forward_output_hook": [[180, 191], ["single_teacher.SingleTeacherDistiller.teacher_outputs[].append"], "methods", ["None"], ["", "def", "teacher_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the module's forward output.\n\n        Args:\n            module (:obj:`torch.nn.Module`): The module to register hook.\n            inputs (tuple): The input of the module.\n            outputs (tuple): The output of the module.\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "teacher_outputs", "[", "self", ".", "teacher_module2name", "[", "module", "]", "]", ".", "append", "(", "\n", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.student_forward_output_hook": [[192, 203], ["single_teacher.SingleTeacherDistiller.student_outputs[].append"], "methods", ["None"], ["", "", "def", "student_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the module's forward output.\n\n        Args:\n            module (:obj:`torch.nn.Module`): The module to register hook.\n            inputs (tuple): The input of the module.\n            outputs (tuple): The output of the module.\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "student_outputs", "[", "self", ".", "student_module2name", "[", "module", "]", "]", ".", "append", "(", "\n", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.reset_outputs": [[204, 208], ["outputs.keys", "list"], "methods", ["None"], ["", "", "def", "reset_outputs", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Reset the teacher's outputs or student's outputs.\"\"\"", "\n", "for", "key", "in", "outputs", ".", "keys", "(", ")", ":", "\n", "            ", "outputs", "[", "key", "]", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_teacher_forward": [[209, 228], ["single_teacher.SingleTeacherDistiller.reset_ctx_teacher_mode", "single_teacher.SingleTeacherDistiller.reset_outputs", "single_teacher.SingleTeacherDistiller.teacher", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "single_teacher.SingleTeacherDistiller.teacher"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.reset_ctx_teacher_mode", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.reset_outputs"], ["", "", "def", "exec_teacher_forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Execute the teacher's forward function.\n\n        After this function, the teacher's featuremaps will be saved in\n        ``teacher_outputs``.\n        \"\"\"", "\n", "\n", "# Convert the context manager's mode to teacher.", "\n", "self", ".", "reset_ctx_teacher_mode", "(", "True", ")", "\n", "# Clear the saved data of the last forward\u3002", "\n", "self", ".", "reset_outputs", "(", "self", ".", "teacher_outputs", ")", "\n", "\n", "if", "self", ".", "teacher_trainable", ":", "\n", "            ", "output", "=", "self", ".", "teacher", "(", "**", "data", ")", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "teacher", "(", "**", "data", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_student_forward": [[229, 242], ["single_teacher.SingleTeacherDistiller.reset_ctx_teacher_mode", "single_teacher.SingleTeacherDistiller.reset_outputs", "student"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.base.BaseDistiller.reset_ctx_teacher_mode", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.reset_outputs"], ["", "def", "exec_student_forward", "(", "self", ",", "student", ",", "data", ")", ":", "\n", "        ", "\"\"\"Execute the teacher's forward function.\n\n        After this function, the student's featuremaps will be saved in\n        ``student_outputs``.\n        \"\"\"", "\n", "# Convert the context manager's mode to teacher.", "\n", "self", ".", "reset_ctx_teacher_mode", "(", "False", ")", "\n", "# Clear the saved data of the last forward\u3002", "\n", "self", ".", "reset_outputs", "(", "self", ".", "student_outputs", ")", "\n", "\n", "output", "=", "student", "(", "**", "data", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.train": [[243, 250], ["super().train", "single_teacher.SingleTeacherDistiller.teacher.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Set distiller's forward mode.\"\"\"", "\n", "super", "(", "SingleTeacherDistiller", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "mode", "and", "self", ".", "teacher_norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "teacher", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.get_teacher_outputs": [[251, 254], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_teacher_outputs", "(", "self", ",", "teacher_module_name", ")", ":", "\n", "        ", "\"\"\"Get the outputs according module name.\"\"\"", "\n", "return", "self", ".", "teacher_outputs", "[", "teacher_module_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.compute_distill_loss": [[255, 308], ["dict", "enumerate", "single_teacher.SingleTeacherDistiller.get_teacher_outputs", "enumerate", "zip", "isinstance", "loss_module", "align_module", "len", "len", "zip", "isinstance", "tuple", "student_outputs_.append", "isinstance", "tuple", "student_outputs_.append", "len", "len", "module", "module", "zip"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.get_teacher_outputs"], ["", "def", "compute_distill_loss", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "\"\"\"Compute the distillation loss.\"\"\"", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "for", "i", ",", "component", "in", "enumerate", "(", "self", ".", "components", ")", ":", "\n", "# Get the student's outputs.", "\n", "            ", "student_module_name", "=", "component", "[", "'student_module'", "]", "\n", "student_outputs", "=", "self", ".", "student_outputs", "[", "student_module_name", "]", "\n", "\n", "# Align student output's channels with teacher.", "\n", "align_module_name", "=", "f'component_{i}'", "\n", "if", "align_module_name", "in", "self", ".", "align_modules", ":", "\n", "                ", "align_module", "=", "self", ".", "align_modules", "[", "align_module_name", "]", "\n", "if", "not", "isinstance", "(", "align_module", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                    ", "student_outputs", "=", "[", "\n", "align_module", "(", "s_out", ")", "for", "s_out", "in", "student_outputs", "\n", "]", "\n", "", "else", ":", "\n", "                    ", "student_outputs_", "=", "[", "]", "\n", "if", "len", "(", "align_module", ")", "==", "len", "(", "student_outputs", ")", ":", "\n", "                        ", "for", "module", ",", "s_out", "in", "zip", "(", "align_module", ",", "student_outputs", ")", ":", "\n", "                            ", "assert", "isinstance", "(", "s_out", ",", "(", "list", ",", "tuple", ")", ")", "\n", "s_out", "=", "tuple", "(", "[", "module", "(", "x", ")", "for", "x", "in", "s_out", "]", ")", "\n", "student_outputs_", ".", "append", "(", "s_out", ")", "\n", "", "", "else", ":", "\n", "                        ", "for", "s_out", "in", "student_outputs", ":", "\n", "                            ", "assert", "isinstance", "(", "s_out", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "s_out", ")", "==", "len", "(", "align_module", ")", "\n", "s_out", "=", "tuple", "(", "[", "module", "(", "x", ")", "for", "module", ",", "x", "in", "zip", "(", "align_module", ",", "s_out", ")", "]", ")", "\n", "student_outputs_", ".", "append", "(", "s_out", ")", "\n", "", "", "student_outputs", "=", "student_outputs_", "\n", "\n", "# Get the teacher's outputs.", "\n", "", "", "teacher_module_name", "=", "component", "[", "'teacher_module'", "]", "\n", "teacher_outputs", "=", "self", ".", "get_teacher_outputs", "(", "teacher_module_name", ")", "\n", "\n", "# One module maybe have N outputs, such as the shareable head in", "\n", "# RetinaNet.", "\n", "for", "out_idx", ",", "(", "s_out", ",", "t_out", ")", "in", "enumerate", "(", "\n", "zip", "(", "student_outputs", ",", "teacher_outputs", ")", ")", ":", "\n", "\n", "                ", "for", "loss", "in", "component", ".", "losses", ":", "\n", "                    ", "loss_module", "=", "self", ".", "losses", "[", "loss", ".", "name", "]", "\n", "loss_name", "=", "f'{loss.name}.{out_idx}'", "\n", "# TODO ugly implementation.", "\n", "# Pass the gt_label to loss function.", "\n", "# Only used by WSLD.", "\n", "loss_module", ".", "current_data", "=", "data", "\n", "losses", "[", "loss_name", "]", "=", "loss_module", "(", "s_out", ",", "t_out", ")", "\n", "loss_module", ".", "current_data", "=", "None", "\n", "\n", "", "", "", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.autoslim.AutoSlim.__init__": [[36, 53], ["base.BaseAlgorithm.__init__", "autoslim.AutoSlim._init_flops"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.detnas.DetNAS._init_flops"], ["def", "__init__", "(", "self", ",", "\n", "num_sample_training", "=", "4", ",", "\n", "input_shape", "=", "(", "3", ",", "224", ",", "224", ")", ",", "\n", "bn_training_mode", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "AutoSlim", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "num_sample_training", ">=", "2", ",", "'num_sample_training should be no less than 2'", "\n", "self", ".", "num_sample_training", "=", "num_sample_training", "\n", "\n", "# set bn to training mode when model is set to eval mode", "\n", "self", ".", "bn_training_mode", "=", "bn_training_mode", "\n", "\n", "if", "input_shape", "is", "not", "None", ":", "\n", "            ", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "_init_flops", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.autoslim.AutoSlim._init_pruner": [[54, 99], ["mmrazor.models.builder.build_pruner", "mmrazor.models.builder.build_pruner", "copy.deepcopy", "mmrazor.models.builder.build_pruner.prepare_from_supernet", "mmrazor.models.builder.build_pruner.sample_subnet", "mmrazor.models.builder.build_pruner.set_subnet", "mmrazor.models.builder.build_pruner.export_subnet", "mmrazor.models.builder.build_pruner.deploy_subnet", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "copy.deepcopy.forward_dummy", "isinstance", "autoslim.AutoSlim.pruner.prepare_from_supernet", "NotImplementedError", "autoslim.AutoSlim.pruner.deploy_subnet", "isinstance", "autoslim.AutoSlim.pruner.convert_switchable_bn", "autoslim.AutoSlim.pruner.prepare_from_supernet", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_pruner", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_pruner", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.export_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet", "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmcls.MMClsArchitecture.forward_dummy", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.convert_switchable_bn", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet"], ["", "", "def", "_init_pruner", "(", "self", ",", "pruner", ")", ":", "\n", "        ", "\"\"\"Build registered pruners and make preparations.\n\n        Args:\n            pruner (dict): The registered pruner to be used\n                in the algorithm.\n        \"\"\"", "\n", "if", "pruner", "is", "None", ":", "\n", "            ", "self", ".", "pruner", "=", "None", "\n", "return", "\n", "\n", "# judge whether our StructurePruner can prune the architecture", "\n", "", "try", ":", "\n", "            ", "pseudo_pruner", "=", "build_pruner", "(", "pruner", ")", "\n", "pseudo_architecture", "=", "copy", ".", "deepcopy", "(", "self", ".", "architecture", ")", "\n", "pseudo_pruner", ".", "prepare_from_supernet", "(", "pseudo_architecture", ")", "\n", "subnet_dict", "=", "pseudo_pruner", ".", "sample_subnet", "(", ")", "\n", "pseudo_pruner", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "subnet_dict", "=", "pseudo_pruner", ".", "export_subnet", "(", ")", "\n", "\n", "pseudo_pruner", ".", "deploy_subnet", "(", "pseudo_architecture", ",", "subnet_dict", ")", "\n", "pseudo_img", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "pseudo_architecture", ".", "forward_dummy", "(", "pseudo_img", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Our current StructurePruner does not '", "\n", "'support pruning this architecture. '", "\n", "'StructurePruner is not perfect enough '", "\n", "'to handle all the corner cases. We will'", "\n", "' appreciate it if you create a issue.'", ")", "\n", "\n", "", "self", ".", "pruner", "=", "build_pruner", "(", "pruner", ")", "\n", "\n", "if", "self", ".", "retraining", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "channel_cfg", ",", "dict", ")", ":", "\n", "                ", "self", ".", "pruner", ".", "deploy_subnet", "(", "self", ".", "architecture", ",", "self", ".", "channel_cfg", ")", "\n", "self", ".", "deployed", "=", "True", "\n", "", "elif", "isinstance", "(", "self", ".", "channel_cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\n", "                ", "self", ".", "pruner", ".", "convert_switchable_bn", "(", "self", ".", "architecture", ",", "\n", "len", "(", "self", ".", "channel_cfg", ")", ")", "\n", "self", ".", "pruner", ".", "prepare_from_supernet", "(", "self", ".", "architecture", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "pruner", ".", "prepare_from_supernet", "(", "self", ".", "architecture", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.autoslim.AutoSlim._init_flops": [[100, 121], ["copy.deepcopy", "copy.deepcopy.eval", "hasattr", "mmcv.cnn.get_model_complexity_info", "dict", "copy.deepcopy.named_modules", "autoslim.AutoSlim.architecture.named_modules", "NotImplementedError", "getattr"], "methods", ["None"], ["", "", "def", "_init_flops", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get flops information of the supernet.\"\"\"", "\n", "flops_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "architecture", ")", "\n", "flops_model", ".", "eval", "(", ")", "\n", "if", "hasattr", "(", "flops_model", ",", "'forward_dummy'", ")", ":", "\n", "            ", "flops_model", ".", "forward", "=", "flops_model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "flops_model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_model_complexity_info", "(", "\n", "flops_model", ",", "self", ".", "input_shape", ",", "print_per_layer_stat", "=", "False", ")", "\n", "flops_lookup", "=", "dict", "(", ")", "\n", "for", "name", ",", "module", "in", "flops_model", ".", "named_modules", "(", ")", ":", "\n", "            ", "flops", "=", "getattr", "(", "module", ",", "'__flops__'", ",", "0", ")", "\n", "flops_lookup", "[", "name", "]", "=", "flops", "\n", "", "del", "(", "flops_model", ")", "\n", "\n", "for", "name", ",", "module", "in", "self", ".", "architecture", ".", "named_modules", "(", ")", ":", "\n", "            ", "module", ".", "__flops__", "=", "flops_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.autoslim.AutoSlim.get_subnet_flops": [[122, 151], ["autoslim.AutoSlim.architecture.named_modules", "round", "type", "float", "float", "type", "float", "module.in_mask.sum", "module.in_mask.numel", "module.out_mask.sum", "module.out_mask.numel", "type", "module.out_mask.sum", "module.out_mask.numel"], "methods", ["None"], ["", "", "def", "get_subnet_flops", "(", "self", ")", ":", "\n", "        ", "\"\"\"A hacky way to get flops information of a subnet.\"\"\"", "\n", "flops", "=", "0", "\n", "last_out_mask_ratio", "=", "None", "\n", "for", "name", ",", "module", "in", "self", ".", "architecture", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "type", "(", "module", ")", "in", "[", "\n", "nn", ".", "Conv2d", ",", "mmcv", ".", "cnn", ".", "bricks", ".", "Conv2d", ",", "nn", ".", "Linear", ",", "\n", "mmcv", ".", "cnn", ".", "bricks", ".", "Linear", "\n", "]", ":", "\n", "                ", "in_mask_ratio", "=", "float", "(", "module", ".", "in_mask", ".", "sum", "(", ")", "/", "\n", "module", ".", "in_mask", ".", "numel", "(", ")", ")", "\n", "out_mask_ratio", "=", "float", "(", "module", ".", "out_mask", ".", "sum", "(", ")", "/", "\n", "module", ".", "out_mask", ".", "numel", "(", ")", ")", "\n", "flops", "+=", "module", ".", "__flops__", "*", "in_mask_ratio", "*", "out_mask_ratio", "\n", "last_out_mask_ratio", "=", "out_mask_ratio", "\n", "", "elif", "type", "(", "module", ")", "==", "nn", ".", "BatchNorm2d", ":", "\n", "                ", "out_mask_ratio", "=", "float", "(", "module", ".", "out_mask", ".", "sum", "(", ")", "/", "\n", "module", ".", "out_mask", ".", "numel", "(", ")", ")", "\n", "flops", "+=", "module", ".", "__flops__", "*", "out_mask_ratio", "\n", "last_out_mask_ratio", "=", "out_mask_ratio", "\n", "", "elif", "type", "(", "module", ")", "in", "[", "\n", "nn", ".", "ReLU", ",", "nn", ".", "PReLU", ",", "nn", ".", "ELU", ",", "nn", ".", "LeakyReLU", ",", "nn", ".", "ReLU6", "\n", "]", ":", "\n", "\n", "                ", "assert", "last_out_mask_ratio", ",", "'An activate module can not be '", "'the first module of a network.'", "\n", "flops", "+=", "module", ".", "__flops__", "*", "last_out_mask_ratio", "\n", "\n", "", "", "return", "round", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.autoslim.AutoSlim.train_step": [[152, 233], ["optimizer.zero_grad", "dict", "optimizer.step", "autoslim.AutoSlim._parse_losses", "dict", "autoslim.AutoSlim.pruner.set_max_channel", "dict.update", "autoslim.AutoSlim._parse_losses", "max_model_loss.backward", "autoslim.AutoSlim.pruner.set_min_channel", "dict.update", "autoslim.AutoSlim._parse_losses", "min_model_loss.backward", "range", "autoslim.AutoSlim.distiller.exec_teacher_forward", "autoslim.AutoSlim.", "mmrazor.models.utils.add_prefix", "autoslim.AutoSlim.distiller.exec_student_forward", "autoslim.AutoSlim.distiller.compute_distill_loss", "autoslim.AutoSlim.", "mmrazor.models.utils.add_prefix", "autoslim.AutoSlim.pruner.sample_subnet", "autoslim.AutoSlim.pruner.set_subnet", "autoslim.AutoSlim._parse_losses", "model_loss.backward", "autoslim.AutoSlim.", "dict.update", "autoslim.AutoSlim._parse_losses", "model_loss.backward", "isinstance", "enumerate", "len", "autoslim.AutoSlim.distiller.exec_student_forward", "autoslim.AutoSlim.distiller.compute_distill_loss", "dict.update", "autoslim.AutoSlim.", "dict.update", "mmrazor.models.utils.add_prefix", "autoslim.AutoSlim.pruner.switch_subnet", "autoslim.AutoSlim.", "dict.update", "autoslim.AutoSlim._parse_losses", "model_loss.backward", "mmrazor.models.utils.add_prefix", "mmrazor.models.utils.add_prefix", "mmrazor.models.utils.add_prefix"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_max_channel", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.set_min_channel", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_teacher_forward", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_student_forward", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.compute_distill_loss", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_student_forward", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.compute_distill_loss", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.switch_subnet", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix"], ["", "def", "train_step", "(", "self", ",", "data", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"Train step function.\n\n        This function implements the standard training iteration for\n        autoslim pretraining and retraining.\n\n        Args:\n            data (dict): Input data from dataloader.\n            optimizer (:obj:`torch.optim.Optimizer`): The optimizer to\n                accumulate gradient\n        \"\"\"", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "if", "not", "self", ".", "retraining", ":", "\n", "            ", "assert", "self", ".", "pruner", "is", "not", "None", "\n", "\n", "self", ".", "pruner", ".", "set_max_channel", "(", ")", "\n", "if", "self", ".", "distiller", "is", "not", "None", ":", "\n", "                ", "max_model_losses", "=", "self", ".", "distiller", ".", "exec_teacher_forward", "(", "\n", "self", ".", "architecture", ",", "data", ")", "\n", "", "else", ":", "\n", "                ", "max_model_losses", "=", "self", "(", "**", "data", ")", "\n", "", "losses", ".", "update", "(", "add_prefix", "(", "max_model_losses", ",", "'max_model'", ")", ")", "\n", "max_model_loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "max_model_losses", ")", "\n", "max_model_loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "pruner", ".", "set_min_channel", "(", ")", "\n", "if", "self", ".", "distiller", "is", "not", "None", ":", "\n", "                ", "self", ".", "distiller", ".", "exec_student_forward", "(", "self", ".", "architecture", ",", "data", ")", "\n", "min_model_losses", "=", "self", ".", "distiller", ".", "compute_distill_loss", "(", "data", ")", "\n", "", "else", ":", "\n", "                ", "min_model_losses", "=", "self", "(", "**", "data", ")", "\n", "", "losses", ".", "update", "(", "add_prefix", "(", "min_model_losses", ",", "'min_model'", ")", ")", "\n", "min_model_loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "min_model_losses", ")", "\n", "min_model_loss", ".", "backward", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_sample_training", "-", "2", ")", ":", "\n", "                ", "subnet_dict", "=", "self", ".", "pruner", ".", "sample_subnet", "(", ")", "\n", "self", ".", "pruner", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "if", "self", ".", "distiller", "is", "not", "None", ":", "\n", "                    ", "self", ".", "distiller", ".", "exec_student_forward", "(", "\n", "self", ".", "architecture", ",", "data", ")", "\n", "model_losses", "=", "self", ".", "distiller", ".", "compute_distill_loss", "(", "data", ")", "\n", "losses", ".", "update", "(", "\n", "add_prefix", "(", "model_losses", ",", "\n", "'prune_model{}_distiller'", ".", "format", "(", "i", "+", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "model_losses", "=", "self", "(", "**", "data", ")", "\n", "losses", ".", "update", "(", "\n", "add_prefix", "(", "model_losses", ",", "\n", "'prune_model{}'", ".", "format", "(", "i", "+", "1", ")", ")", ")", "\n", "", "model_loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "model_losses", ")", "\n", "model_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "deployed", ":", "\n", "# Only one subnet retrains. The supernet has already deploy", "\n", "                ", "model_losses", "=", "self", "(", "**", "data", ")", "\n", "losses", ".", "update", "(", "add_prefix", "(", "model_losses", ",", "'prune_model'", ")", ")", "\n", "model_loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "model_losses", ")", "\n", "model_loss", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "# More than one subnet retraining together", "\n", "                ", "assert", "isinstance", "(", "self", ".", "channel_cfg", ",", "(", "list", ",", "tuple", ")", ")", "\n", "for", "i", ",", "subnet", "in", "enumerate", "(", "self", ".", "channel_cfg", ")", ":", "\n", "                    ", "self", ".", "pruner", ".", "switch_subnet", "(", "subnet", ",", "i", ")", "\n", "model_losses", "=", "self", "(", "**", "data", ")", "\n", "losses", ".", "update", "(", "\n", "add_prefix", "(", "model_losses", ",", "\n", "'prune_model_{}'", ".", "format", "(", "i", "+", "1", ")", ")", ")", "\n", "model_loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "model_losses", ")", "\n", "model_loss", ".", "backward", "(", ")", "\n", "\n", "# TODO: clip grad norm", "\n", "", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss", ",", "log_vars", "=", "self", ".", "_parse_losses", "(", "losses", ")", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "len", "(", "data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.autoslim.AutoSlim.train": [[234, 248], ["super().train", "autoslim.AutoSlim.modules", "isinstance"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Overwrite the train method in ``nn.Module`` to set ``nn.BatchNorm``\n        to training mode when model is set to eval mode when\n        ``self.bn_training_mode`` is ``True``.\n\n        Args:\n            mode (bool): whether to set training mode (``True``) or evaluation\n                mode (``False``). Default: ``True``.\n        \"\"\"", "\n", "super", "(", "AutoSlim", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "not", "mode", "and", "self", ".", "bn_training_mode", ":", "\n", "            ", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "_BatchNorm", ")", ":", "\n", "                    ", "module", ".", "training", "=", "True", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.__init__": [[36, 58], ["mmcv.runner.BaseModule.__init__", "mmrazor.models.builder.build_architecture", "base.BaseAlgorithm._init_mutator", "base.BaseAlgorithm._init_pruner", "base.BaseAlgorithm._init_distiller", "base.BaseAlgorithm.load_subnet", "base.BaseAlgorithm.load_subnet"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_architecture", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._init_mutator", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._init_pruner", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._init_distiller", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.load_subnet", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.load_subnet"], ["\n", "\n", "def", "__init__", "(", "self", ",", "ctx", ",", "method", ",", "import_module", "=", "None", ")", ":", "\n", "        ", "self", ".", "ctx", "=", "ctx", "\n", "\n", "self", ".", "import_module", "=", "import_modules_from_strings", "(", "import_module", ")", "\n", "self", ".", "method_str", "=", "method", "\n", "self", ".", "method_exec_str", "=", "f'self.import_module.{method}'", "\n", "\n", "", "def", "_set_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"Modify a function.\"\"\"", "\n", "exec", "(", "f'{self.method_exec_str} = method'", ")", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Rewrite the function.\"\"\"", "\n", "self", ".", "method_impl", "=", "eval", "(", "self", ".", "method_exec_str", ")", "\n", "\n", "if", "self", ".", "method_impl", ":", "\n", "            ", "self", ".", "_set_method", "(", "\n", "function_wrapper", "(", "self", ".", "ctx", ",", "self", ".", "method_impl", ",", "self", ".", "method_str", ",", "\n", "self", ".", "align_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.load_subnet": [[59, 83], ["isinstance", "mmcv.fileio.load", "isinstance", "list", "list.append", "mmcv.fileio.load"], "methods", ["None"], ["", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "\"\"\"Restore the function.\"\"\"", "\n", "if", "self", ".", "method_impl", ":", "\n", "            ", "self", ".", "_set_method", "(", "self", ".", "method_impl", ")", "\n", "\n", "\n", "", "", "", "class", "ConversionContext", "(", ")", ":", "\n", "    ", "\"\"\"Context manager for record functions' inputs or outputs.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "hooks", ")", ":", "\n", "# save functions' inputs", "\n", "        ", "self", ".", "method_args", "=", "dict", "(", ")", "\n", "self", ".", "method_kwargs", "=", "dict", "(", ")", "\n", "# save functions' outputs", "\n", "self", ".", "method_return", "=", "dict", "(", ")", "\n", "\n", "# Each function will have a sub context manager, the function will be", "\n", "# rewritten when enter the sub context manager.", "\n", "self", ".", "hooks", "=", "[", "]", "\n", "self", ".", "is_teacher", "=", "True", "\n", "for", "hook", "in", "hooks", ":", "\n", "            ", "self", ".", "hooks", ".", "append", "(", "FunctionContext", "(", "self", ",", "**", "hook", ")", ")", "\n", "\n", "", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Enter every sub context managers.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._init_mutator": [[84, 102], ["mmrazor.models.builder.build_mutator", "base.BaseAlgorithm.mutator.prepare_from_supernet", "isinstance", "base.BaseAlgorithm.mutator.deploy_subnet"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_mutator", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet"], ["for", "hook", "in", "self", ".", "hooks", ":", "\n", "            ", "hook", ".", "__enter__", "(", ")", "\n", "", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "\"\"\"Exit every sub context managers.\"\"\"", "\n", "for", "hook", "in", "self", ".", "hooks", ":", "\n", "            ", "hook", ".", "__exit__", "(", "exc_type", ",", "exc_value", ",", "traceback", ")", "\n", "\n", "\n", "", "", "", "class", "BaseDistiller", "(", "BaseModule", ",", "metaclass", "=", "ABCMeta", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._init_pruner": [[103, 123], ["mmrazor.models.builder.build_pruner", "isinstance", "base.BaseAlgorithm.pruner.prepare_from_supernet", "base.BaseAlgorithm.pruner.deploy_subnet"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_pruner", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet"], ["\n", "\n", "def", "__init__", "(", "self", ",", "align_methods", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseDistiller", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "align_methods", "is", "None", ":", "\n", "            ", "self", ".", "context_manager", "=", "None", "\n", "", "else", ":", "\n", "# To obtain the python function's outputs, there will build a", "\n", "# specific context manager. When enter the context manager, the", "\n", "# functions will be rewrite. The context manager could record", "\n", "# inputs or outputs of the functions , and pass from teachr to", "\n", "# student. When exit the context manager, the rewritten functions", "\n", "# will restore.", "\n", "            ", "self", ".", "context_manager", "=", "ConversionContext", "(", "align_methods", ")", "\n", "\n", "", "", "@", "abstractmethod", "\n", "def", "prepare_from_student", "(", "self", ",", "supernet", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._init_distiller": [[124, 136], ["mmrazor.models.builder.build_distiller", "base.BaseAlgorithm.distiller.prepare_from_student"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_distiller", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.prepare_from_student"], ["        ", "\"\"\"Register forward hooks to students and teachers.\"\"\"", "\n", "pass", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "teacher_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the teacher output.\"\"\"", "\n", "pass", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "student_forward_output_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the student output.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.with_mutator": [[137, 141], ["hasattr"], "methods", ["None"], ["", "def", "reset_ctx_teacher_mode", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "context_manager", "is", "not", "None", ":", "\n", "            ", "self", ".", "context_manager", ".", "is_teacher", "=", "mode", "\n", "\n", "", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.with_pruner": [[142, 146], ["hasattr"], "methods", ["None"], ["def", "exec_teacher_forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Execute the teacher's forward function.\"\"\"", "\n", "pass", "\n", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.with_distiller": [[147, 151], ["hasattr"], "methods", ["None"], ["def", "exec_student_forward", "(", "self", ",", "student", ",", "data", ")", ":", "\n", "        ", "\"\"\"Execute the student's forward function.\"\"\"", "\n", "pass", "\n", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.forward": [[152, 163], ["base.BaseAlgorithm.architecture"], "methods", ["None"], ["def", "compute_distill_loss", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Compute distill loss according teacher's outputs and student's\n        outputs.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.simple_test": [[164, 167], ["base.BaseAlgorithm.architecture.simple_test"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.simple_test"], []], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.show_result": [[168, 171], ["base.BaseAlgorithm.architecture.show_result"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.show_result"], []], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses": [[172, 208], ["collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict.items", "isinstance", "loss_value.data.clone.data.clone.item", "loss_value.data.clone.data.clone.mean", "isinstance", "torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "loss_value.data.clone.data.clone.data.clone", "torch.all_reduce", "torch.all_reduce", "sum", "isinstance", "collections.OrderedDict.items", "loss_value.data.clone.data.clone.div_", "loss_value.data.clone.data.clone.items", "TypeError", "torch.get_world_size", "torch.get_world_size", "_loss.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.train_step": [[209, 240], ["base.BaseAlgorithm.", "base.BaseAlgorithm._parse_losses", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses"], []], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm.val_step": [[241, 255], ["base.BaseAlgorithm.", "base.BaseAlgorithm._parse_losses", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses"], []], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts.__init__": [[15, 19], ["base.BaseAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "unroll", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "Darts", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "unroll", "=", "unroll", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts.train_step": [[20, 81], ["isinstance", "isinstance", "optimizer[].zero_grad", "optimizer[].step", "darts.Darts.", "darts.Darts._parse_losses", "optimizer[].zero_grad", "model_loss.backward", "torch.nn.utils.clip_grad_norm_", "optimizer[].step", "dict", "super().train_step", "len", "len", "darts.Darts._unrolled_backward", "darts.Darts.", "darts.Darts._parse_losses", "arch_loss.backward", "darts.Darts.architecture.parameters", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._unrolled_backward", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses"], ["", "def", "train_step", "(", "self", ",", "data", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"The iteration step during training.\n\n        This method defines an iteration step during training, except for the\n        back propagation and optimizer updating, which are done in an optimizer\n        hook. Note that in some complicated cases or models, the whole process\n        including back propagation and optimizer updating are also defined in\n        this method, such as GAN.\n\n        Args:\n            data (dict): The output of dataloader.\n            optimizer (:obj:`torch.optim.Optimizer` | dict): The optimizer of\n                runner is passed to ``train_step()``. This argument is unused\n                and reserved.\n\n        Returns:\n            dict: It should contain at least 3 keys: ``loss``, ``log_vars``,\n                ``num_samples``.\n                ``loss`` is a tensor for back propagation, which can be a\n                weighted sum of multiple losses.\n                ``log_vars`` contains all the variables to be sent to the\n                logger.\n                ``num_samples`` indicates the batch size (when the model is\n                DDP, it means the batch size on each GPU), which is used for\n                averaging the logs.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "data", ",", "(", "tuple", ",", "list", ")", ")", "and", "isinstance", "(", "optimizer", ",", "dict", ")", ":", "\n", "            ", "assert", "len", "(", "data", ")", "==", "len", "(", "optimizer", ")", "\n", "\n", "train_arch_data", ",", "train_supernet_data", "=", "data", "\n", "\n", "optimizer", "[", "'mutator'", "]", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "unroll", ":", "\n", "                ", "self", ".", "_unrolled_backward", "(", "train_arch_data", ",", "train_supernet_data", ",", "\n", "optimizer", ")", "\n", "", "else", ":", "\n", "\n", "                ", "arch_losses", "=", "self", "(", "**", "train_arch_data", ")", "\n", "arch_loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "arch_losses", ")", "\n", "arch_loss", ".", "backward", "(", ")", "\n", "", "optimizer", "[", "'mutator'", "]", ".", "step", "(", ")", "\n", "\n", "model_losses", "=", "self", "(", "**", "train_supernet_data", ")", "\n", "model_loss", ",", "log_vars", "=", "self", ".", "_parse_losses", "(", "model_losses", ")", "\n", "\n", "optimizer", "[", "'architecture'", "]", ".", "zero_grad", "(", ")", "\n", "model_loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "architecture", ".", "parameters", "(", ")", ",", "max_norm", "=", "5", ",", "norm_type", "=", "2", ")", "\n", "optimizer", "[", "'architecture'", "]", ".", "step", "(", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "model_loss", ",", "\n", "log_vars", "=", "log_vars", ",", "\n", "num_samples", "=", "len", "(", "train_supernet_data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "outputs", "=", "super", "(", "Darts", ",", "self", ")", ".", "train_step", "(", "data", ",", "optimizer", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._unrolled_backward": [[82, 114], ["copy.deepcopy", "darts.Darts._compute_virtual_model", "darts.Darts.", "darts.Darts._parse_losses", "torch.autograd.grad", "darts.Darts._compute_hessian", "darts.Darts._restore_weights", "tuple", "tuple", "tuple", "torch.no_grad", "zip", "darts.Darts.architecture.parameters", "darts.Darts.architecture.parameters", "darts.Darts.mutator.parameters", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._compute_virtual_model", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._compute_hessian", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._restore_weights"], ["", "def", "_unrolled_backward", "(", "self", ",", "train_arch_data", ",", "train_supernet_data", ",", "\n", "optimizer", ")", ":", "\n", "        ", "\"\"\"Compute unrolled loss and backward its gradients.\"\"\"", "\n", "backup_params", "=", "copy", ".", "deepcopy", "(", "tuple", "(", "self", ".", "architecture", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# do virtual step on training data", "\n", "lr", "=", "optimizer", "[", "'architecture'", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "momentum", "=", "optimizer", "[", "'architecture'", "]", ".", "param_groups", "[", "0", "]", "[", "'momentum'", "]", "\n", "weight_decay", "=", "optimizer", "[", "'architecture'", "]", ".", "param_groups", "[", "0", "]", "[", "\n", "'weight_decay'", "]", "\n", "self", ".", "_compute_virtual_model", "(", "train_supernet_data", ",", "lr", ",", "momentum", ",", "\n", "weight_decay", ",", "optimizer", ")", "\n", "\n", "# calculate unrolled loss on validation data", "\n", "# keep gradients for model here for compute hessian", "\n", "losses", "=", "self", "(", "**", "train_arch_data", ")", "\n", "loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "losses", ")", "\n", "w_model", ",", "w_arch", "=", "tuple", "(", "self", ".", "architecture", ".", "parameters", "(", ")", ")", ",", "tuple", "(", "\n", "self", ".", "mutator", ".", "parameters", "(", ")", ")", "\n", "w_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "w_model", "+", "w_arch", ")", "\n", "d_model", ",", "d_arch", "=", "w_grads", "[", ":", "len", "(", "w_model", ")", "]", ",", "w_grads", "[", "len", "(", "w_model", ")", ":", "]", "\n", "\n", "# compute hessian and final gradients", "\n", "hessian", "=", "self", ".", "_compute_hessian", "(", "backup_params", ",", "d_model", ",", "\n", "train_supernet_data", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "param", ",", "d", ",", "h", "in", "zip", "(", "w_arch", ",", "d_arch", ",", "hessian", ")", ":", "\n", "# gradient = dalpha - lr * hessian", "\n", "                ", "param", ".", "grad", "=", "d", "-", "lr", "*", "h", "\n", "\n", "# restore weights", "\n", "", "", "self", ".", "_restore_weights", "(", "backup_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._compute_virtual_model": [[115, 127], ["darts.Darts.", "darts.Darts._parse_losses", "torch.autograd.grad", "darts.Darts.architecture.parameters", "torch.no_grad", "zip", "darts.Darts.architecture.parameters", "optimizer[].state[].get"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses"], ["", "def", "_compute_virtual_model", "(", "self", ",", "data", ",", "lr", ",", "momentum", ",", "weight_decay", ",", "\n", "optimizer", ")", ":", "\n", "        ", "\"\"\"Compute unrolled weights w`\"\"\"", "\n", "# don't need zero_grad, using autograd to calculate gradients", "\n", "losses", "=", "self", "(", "**", "data", ")", "\n", "loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "losses", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "architecture", ".", "parameters", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "w", ",", "g", "in", "zip", "(", "self", ".", "architecture", ".", "parameters", "(", ")", ",", "gradients", ")", ":", "\n", "                ", "m", "=", "optimizer", "[", "'architecture'", "]", ".", "state", "[", "w", "]", ".", "get", "(", "\n", "'momentum_buffer'", ",", "0.", ")", "\n", "w", "=", "w", "-", "lr", "*", "(", "momentum", "*", "m", "+", "g", "+", "weight_decay", "*", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._restore_weights": [[128, 133], ["torch.no_grad", "zip", "darts.Darts.architecture.parameters", "param.copy_"], "methods", ["None"], ["", "", "", "def", "_restore_weights", "(", "self", ",", "backup_params", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "param", ",", "backup", "in", "zip", "(", "self", ".", "architecture", ".", "parameters", "(", ")", ",", "\n", "backup_params", ")", ":", "\n", "                ", "param", ".", "copy_", "(", "backup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._compute_hessian": [[134, 167], ["darts.Darts._restore_weights", "torch.cat().norm", "print", "darts.Darts.", "darts.Darts._parse_losses", "dalphas.append", "torch.cat", "torch.cat().norm.item", "torch.no_grad", "zip", "torch.autograd.grad", "zip", "darts.Darts.architecture.parameters", "tuple", "w.view", "darts.Darts.mutator.parameters"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.darts.Darts._restore_weights", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses"], ["", "", "", "def", "_compute_hessian", "(", "self", ",", "backup_params", ",", "dw", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n            dw = dw` { L_val(w`, alpha) }\n            w+ = w + eps * dw\n            w- = w - eps * dw\n            hessian = (dalpha { L_trn(w+, alpha) }  \\\n                - dalpha { L_trn(w-, alpha) }) / (2*eps)\n            eps = 0.01 / ||dw||\n        \"\"\"", "\n", "self", ".", "_restore_weights", "(", "backup_params", ")", "\n", "norm", "=", "torch", ".", "cat", "(", "[", "w", ".", "view", "(", "-", "1", ")", "for", "w", "in", "dw", "]", ")", ".", "norm", "(", ")", "\n", "eps", "=", "0.01", "/", "norm", "\n", "if", "norm", "<", "1E-8", ":", "\n", "            ", "print", "(", "\n", "'In computing hessian, norm is smaller than 1E-8, \\\n                cause eps to be %.6f.'", ",", "norm", ".", "item", "(", ")", ")", "\n", "\n", "", "dalphas", "=", "[", "]", "\n", "for", "e", "in", "[", "eps", ",", "-", "2.", "*", "eps", "]", ":", "\n", "# w+ = w + eps*dw`, w- = w - eps*dw`", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "p", ",", "d", "in", "zip", "(", "self", ".", "architecture", ".", "parameters", "(", ")", ",", "dw", ")", ":", "\n", "                    ", "p", "+=", "e", "*", "d", "\n", "\n", "", "", "losses", "=", "self", "(", "**", "data", ")", "\n", "loss", ",", "_", "=", "self", ".", "_parse_losses", "(", "losses", ")", "\n", "dalphas", ".", "append", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "tuple", "(", "self", ".", "mutator", ".", "parameters", "(", ")", ")", ")", ")", "\n", "# dalpha { L_trn(w+) }, # dalpha { L_trn(w-) }", "\n", "", "dalpha_pos", ",", "dalpha_neg", "=", "dalphas", "\n", "hessian", "=", "[", "(", "p", "-", "n", ")", "/", "(", "2.", "*", "eps", ")", "\n", "for", "p", ",", "n", "in", "zip", "(", "dalpha_pos", ",", "dalpha_neg", ")", "]", "\n", "return", "hessian", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.general_distill.GeneralDistill.__init__": [[18, 26], ["base.BaseAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "with_student_loss", "=", "True", ",", "\n", "with_teacher_loss", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "GeneralDistill", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "with_student_loss", "=", "with_student_loss", "\n", "self", ".", "with_teacher_loss", "=", "with_teacher_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.general_distill.GeneralDistill.train_step": [[27, 57], ["dict", "general_distill.GeneralDistill.distiller.compute_distill_loss", "mmrazor.models.utils.add_prefix", "dict.update", "general_distill.GeneralDistill._parse_losses", "dict", "general_distill.GeneralDistill.distiller.exec_student_forward", "mmrazor.models.utils.add_prefix", "dict.update", "general_distill.GeneralDistill.distiller.exec_student_forward", "general_distill.GeneralDistill.distiller.exec_teacher_forward", "mmrazor.models.utils.add_prefix", "dict.update", "general_distill.GeneralDistill.distiller.exec_teacher_forward", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.compute_distill_loss", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.base.BaseAlgorithm._parse_losses", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_student_forward", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_student_forward", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_teacher_forward", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix", "home.repos.pwc.inspect_result.hunto_maskd.distillers.single_teacher.SingleTeacherDistiller.exec_teacher_forward"], ["", "def", "train_step", "(", "self", ",", "data", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "losses", "=", "dict", "(", ")", "\n", "if", "self", ".", "with_student_loss", ":", "\n", "            ", "student_losses", "=", "self", ".", "distiller", ".", "exec_student_forward", "(", "\n", "self", ".", "architecture", ",", "data", ")", "\n", "student_losses", "=", "add_prefix", "(", "student_losses", ",", "'student'", ")", "\n", "losses", ".", "update", "(", "student_losses", ")", "\n", "", "else", ":", "\n", "# Just to be able to trigger the forward hooks that", "\n", "# have been registered", "\n", "            ", "_", "=", "self", ".", "distiller", ".", "exec_student_forward", "(", "self", ".", "architecture", ",", "data", ")", "\n", "\n", "", "if", "self", ".", "with_teacher_loss", ":", "\n", "            ", "teacher_losses", "=", "self", ".", "distiller", ".", "exec_teacher_forward", "(", "data", ")", "\n", "teacher_losses", "=", "add_prefix", "(", "teacher_losses", ",", "'teacher'", ")", "\n", "losses", ".", "update", "(", "teacher_losses", ")", "\n", "", "else", ":", "\n", "# Just to be able to trigger the forward hooks that", "\n", "# have been registered", "\n", "            ", "_", "=", "self", ".", "distiller", ".", "exec_teacher_forward", "(", "data", ")", "\n", "\n", "", "distill_losses", "=", "self", ".", "distiller", ".", "compute_distill_loss", "(", "data", ")", "\n", "distill_losses", "=", "add_prefix", "(", "distill_losses", ",", "'distiller'", ")", "\n", "losses", ".", "update", "(", "distill_losses", ")", "\n", "\n", "loss", ",", "log_vars", "=", "self", ".", "_parse_losses", "(", "losses", ")", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "len", "(", "data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.align_method_kd.AlignMethodDistill.__init__": [[9, 11], ["general_distill.GeneralDistill.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AlignMethodDistill", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.align_method_kd.AlignMethodDistill.train_step": [[12, 17], ["super().train_step"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step"], ["", "def", "train_step", "(", "self", ",", "data", ",", "optimizer", ")", ":", "\n", "\n", "        ", "with", "self", ".", "distiller", ".", "context_manager", ":", "\n", "            ", "outputs", "=", "super", "(", ")", ".", "train_step", "(", "data", ",", "optimizer", ")", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.__init__": [[16, 27], ["base.BaseAlgorithm.__init__", "spos.SPOS.apply", "spos.SPOS._init_flops", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.detnas.DetNAS._init_flops"], ["def", "__init__", "(", "self", ",", "\n", "input_shape", "=", "(", "3", ",", "224", ",", "224", ")", ",", "\n", "bn_training_mode", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "SPOS", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "bn_training_mode", "=", "bn_training_mode", "\n", "if", "not", "self", ".", "retraining", ":", "\n", "            ", "self", ".", "_init_flops", "(", ")", "\n", "", "self", ".", "apply", "(", "partial", "(", "self", ".", "mutator", ".", "reset_in_subnet", ",", "in_subnet", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS._init_flops": [[28, 50], ["copy.deepcopy", "copy.deepcopy.eval", "hasattr", "mmcv.cnn.get_model_complexity_info", "dict", "copy.deepcopy.named_modules", "spos.SPOS.architecture.named_modules", "NotImplementedError", "getattr"], "methods", ["None"], ["", "def", "_init_flops", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get flops of all modules in supernet in order to easily get each\n        subnet's flops.\"\"\"", "\n", "flops_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "architecture", ")", "\n", "flops_model", ".", "eval", "(", ")", "\n", "if", "hasattr", "(", "flops_model", ",", "'forward_dummy'", ")", ":", "\n", "            ", "flops_model", ".", "forward", "=", "flops_model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "flops_model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_model_complexity_info", "(", "flops_model", ",", "\n", "self", ".", "input_shape", ")", "\n", "flops_lookup", "=", "dict", "(", ")", "\n", "for", "name", ",", "module", "in", "flops_model", ".", "named_modules", "(", ")", ":", "\n", "            ", "flops", "=", "getattr", "(", "module", ",", "'__flops__'", ",", "0", ")", "\n", "flops_lookup", "[", "name", "]", "=", "flops", "\n", "", "del", "(", "flops_model", ")", "\n", "\n", "for", "name", ",", "module", "in", "self", ".", "architecture", ".", "named_modules", "(", ")", ":", "\n", "            ", "module", ".", "__flops__", "=", "flops_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.get_subnet_flops": [[51, 59], ["spos.SPOS.architecture.named_modules", "getattr"], "methods", ["None"], ["", "", "def", "get_subnet_flops", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get subnet's flops based on the complexity information of\n        supernet.\"\"\"", "\n", "flops", "=", "0", "\n", "for", "name", ",", "module", "in", "self", ".", "architecture", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "module", ".", "__in_subnet__", ":", "\n", "                ", "flops", "+=", "getattr", "(", "module", ",", "'__flops__'", ",", "0", ")", "\n", "", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.train_step": [[60, 74], ["super().train_step", "spos.SPOS.mutator.sample_subnet", "spos.SPOS.mutator.set_subnet", "super().train_step"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step"], ["", "def", "train_step", "(", "self", ",", "data", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"The iteration step during training.\n\n        In retraining stage, to train subnet like common model. In pre-training\n        stage, First to sample a subnet from supernet, then to train the\n        subnet.\n        \"\"\"", "\n", "if", "self", ".", "retraining", ":", "\n", "            ", "outputs", "=", "super", "(", "SPOS", ",", "self", ")", ".", "train_step", "(", "data", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "            ", "subnet_dict", "=", "self", ".", "mutator", ".", "sample_subnet", "(", ")", "\n", "self", ".", "mutator", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "outputs", "=", "super", "(", "SPOS", ",", "self", ")", ".", "train_step", "(", "data", ",", "optimizer", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.train": [[75, 89], ["super().train", "spos.SPOS.modules", "isinstance"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Overwrite the train method in `nn.Module` to set `nn.BatchNorm` to\n        training mode when model is set to eval mode when\n        `self.bn_training_mode` is `True`.\n\n        Args:\n            mode (bool): whether to set training mode (`True`) or evaluation\n                mode (`False`). Default: `True`.\n        \"\"\"", "\n", "super", "(", "SPOS", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "not", "mode", "and", "self", ".", "bn_training_mode", ":", "\n", "            ", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "_BatchNorm", ")", ":", "\n", "                    ", "module", ".", "training", "=", "True", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.detnas.DetNAS.__init__": [[18, 20], ["spos.SPOS.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DetNAS", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.algorithms.detnas.DetNAS._init_flops": [[21, 37], ["copy.deepcopy", "revert_sync_batchnorm", "revert_sync_batchnorm.eval", "mmcv.cnn.get_model_complexity_info", "dict", "revert_sync_batchnorm.named_modules", "detnas.DetNAS.architecture.named_modules", "getattr"], "methods", ["None"], ["", "def", "_init_flops", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get flops of all modules in supernet in order to easily get each\n        subnet's flops.\"\"\"", "\n", "flops_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "architecture", ")", "\n", "flops_model", "=", "revert_sync_batchnorm", "(", "flops_model", ")", "\n", "flops_model", ".", "eval", "(", ")", "\n", "flops", ",", "params", "=", "get_model_complexity_info", "(", "flops_model", ".", "model", ".", "backbone", ",", "\n", "self", ".", "input_shape", ")", "\n", "flops_lookup", "=", "dict", "(", ")", "\n", "for", "name", ",", "module", "in", "flops_model", ".", "named_modules", "(", ")", ":", "\n", "            ", "flops", "=", "getattr", "(", "module", ",", "'__flops__'", ",", "0", ")", "\n", "flops_lookup", "[", "name", "]", "=", "flops", "\n", "", "del", "(", "flops_model", ")", "\n", "\n", "for", "name", ",", "module", "in", "self", ".", "architecture", ".", "named_modules", "(", ")", ":", "\n", "            ", "module", ".", "__flops__", "=", "flops_lookup", "[", "name", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.__init__": [[85, 91], ["mmcv.runner.BaseModule.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "except_start_keys", "=", "[", "'head.fc'", "]", ")", ":", "\n", "        ", "super", "(", "StructurePruner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "except_start_keys", "is", "None", ":", "\n", "            ", "self", ".", "except_start_keys", "=", "list", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "except_start_keys", "=", "except_start_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.prepare_from_supernet": [[92, 153], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "dict", "supernet.model.named_modules", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "supernet.forward_dummy", "supernet.cal_pseudo_loss", "list", "list", "structure_pruning.StructurePruner.trace_non_pass_path", "dict", "structure_pruning.StructurePruner.trace_bn_conv_links", "structure_pruning.StructurePruner.find_node_parents", "structure_pruning.StructurePruner.make_same_out_channel_groups", "dict", "structure_pruning.StructurePruner.items", "list", "structure_pruning.StructurePruner.items", "ordered_set.OrderedSet", "structure_pruning.StructurePruner.values", "structure_pruning.StructurePruner.build_channel_spaces", "hasattr", "isinstance", "structure_pruning.StructurePruner.add_pruning_attrs", "structure_pruning.StructurePruner.modules_have_ancest.append", "len", "structure_pruning.StructurePruner.modules_have_child.add", "id"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.architectures.mmcls.MMClsArchitecture.forward_dummy", "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmcls.MMClsArchitecture.cal_pseudo_loss", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_non_pass_path", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_bn_conv_links", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.find_node_parents", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.make_same_out_channel_groups", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.build_channel_spaces", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.add_pruning_attrs"], ["", "", "def", "prepare_from_supernet", "(", "self", ",", "supernet", ")", ":", "\n", "        ", "\"\"\"Prepare for pruning.\"\"\"", "\n", "\n", "module2name", "=", "OrderedDict", "(", ")", "\n", "name2module", "=", "OrderedDict", "(", ")", "\n", "var2module", "=", "OrderedDict", "(", ")", "\n", "\n", "# record the visited module name during trace path", "\n", "visited", "=", "dict", "(", ")", "\n", "\n", "for", "name", ",", "module", "in", "supernet", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "'weight'", ")", ":", "\n", "                ", "module2name", "[", "module", "]", "=", "name", "\n", "name2module", "[", "name", "]", "=", "module", "\n", "var2module", "[", "id", "(", "module", ".", "weight", ")", "]", "=", "module", "\n", "self", ".", "add_pruning_attrs", "(", "module", ")", "\n", "visited", "[", "name", "]", "=", "False", "\n", "", "if", "isinstance", "(", "module", ",", "SwitchableBatchNorm2d", ")", ":", "\n", "                ", "name2module", "[", "name", "]", "=", "module", "\n", "", "", "self", ".", "name2module", "=", "name2module", "\n", "\n", "pseudo_img", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "# todo: support two stage detector and mmseg", "\n", "pseudo_img", "=", "supernet", ".", "forward_dummy", "(", "pseudo_img", ")", "\n", "pseudo_loss", "=", "supernet", ".", "cal_pseudo_loss", "(", "pseudo_img", ")", "\n", "\n", "non_pass_paths", "=", "list", "(", ")", "\n", "cur_non_pass_path", "=", "list", "(", ")", "\n", "self", ".", "trace_non_pass_path", "(", "pseudo_loss", ".", "grad_fn", ",", "module2name", ",", "var2module", ",", "\n", "cur_non_pass_path", ",", "non_pass_paths", ",", "visited", ")", "\n", "\n", "bn_conv_links", "=", "dict", "(", ")", "\n", "self", ".", "trace_bn_conv_links", "(", "pseudo_loss", ".", "grad_fn", ",", "module2name", ",", "var2module", ",", "\n", "bn_conv_links", ",", "visited", ")", "\n", "self", ".", "bn_conv_links", "=", "bn_conv_links", "\n", "\n", "# a node can be the name of a conv module or a str like 'concat_{id}'", "\n", "node2parents", "=", "self", ".", "find_node_parents", "(", "non_pass_paths", ")", "\n", "self", ".", "node2parents", "=", "node2parents", "\n", "\n", "same_out_channel_groups", "=", "self", ".", "make_same_out_channel_groups", "(", "\n", "node2parents", ",", "name2module", ")", "\n", "\n", "self", ".", "module2group", "=", "dict", "(", ")", "\n", "for", "group_name", ",", "group", "in", "same_out_channel_groups", ".", "items", "(", ")", ":", "\n", "            ", "for", "module_name", "in", "group", ":", "\n", "                ", "self", ".", "module2group", "[", "module_name", "]", "=", "group_name", "\n", "\n", "", "", "self", ".", "modules_have_ancest", "=", "list", "(", ")", "\n", "for", "node_name", ",", "parents_name", "in", "node2parents", ".", "items", "(", ")", ":", "\n", "            ", "if", "node_name", "in", "name2module", "and", "len", "(", "parents_name", ")", ">", "0", ":", "\n", "                ", "self", ".", "modules_have_ancest", ".", "append", "(", "node_name", ")", "\n", "\n", "", "", "self", ".", "modules_have_child", "=", "OrderedSet", "(", ")", "\n", "for", "parents_name", "in", "node2parents", ".", "values", "(", ")", ":", "\n", "            ", "for", "name", "in", "parents_name", ":", "\n", "# The node is a module in supernet", "\n", "                ", "if", "name", "in", "name2module", ":", "\n", "                    ", "self", ".", "modules_have_child", ".", "add", "(", "name", ")", "\n", "\n", "", "", "", "self", ".", "channel_spaces", "=", "self", ".", "build_channel_spaces", "(", "name2module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.sample_subnet": [[154, 164], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample_subnet", "(", "self", ")", ":", "\n", "        ", "\"\"\"Sample a subnet from the supernet.\n\n        Returns:\n            dict: Record the information to build the subnet from the supernet,\n                its keys are the properties ``space_id`` in the pruner's search\n                spaces, and its values are corresponding sampled out_mask.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_space_id": [[165, 203], ["structure_pruning.StructurePruner.get_space_id", "dict", "structure_pruning.StructurePruner.get_space_id"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_space_id", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_space_id"], ["", "def", "get_space_id", "(", "self", ",", "module_name", ")", ":", "\n", "        ", "\"\"\"Get the corresponding space_id of the module_name.\n\n        The modules who share the same space_id will share the same out_mask.\n        If the module is the output module(there is no other ``nn.Module``\n        whose input is its output), this function will return None. As the\n        output module can not be pruned.\n        If the input of this module is the concatenation of the output\n        of several ``nn.Module``, this function will return a dict object.\n        If this module is in one of the groups, this function will return the\n        group name. As the modules in the same group should share the same\n        space_id.\n        Otherwise, this function will return the module_name as space_id.\n\n        Args:\n            module_name (str): the name of a ``nn.Module``.\n\n        Return:\n            str or dict or None: the corresponding space_id of the module_name.\n        \"\"\"", "\n", "if", "'concat'", "in", "module_name", "and", "module_name", "not", "in", "self", ".", "name2module", ":", "\n", "# each module_name in concat_parents should be in name2module", "\n", "            ", "if", "'item'", "in", "module_name", ":", "\n", "                ", "space_id", "=", "self", ".", "get_space_id", "(", "self", ".", "node2parents", "[", "module_name", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "concat_parents", "=", "[", "\n", "self", ".", "get_space_id", "(", "parent", ")", "\n", "for", "parent", "in", "self", ".", "node2parents", "[", "module_name", "]", "\n", "]", "\n", "space_id", "=", "dict", "(", "concat", "=", "concat_parents", ")", "\n", "\n", "", "", "elif", "module_name", "not", "in", "self", ".", "modules_have_child", ":", "\n", "            ", "return", "None", "\n", "", "elif", "module_name", "in", "self", ".", "module2group", ":", "\n", "            ", "space_id", "=", "self", ".", "module2group", "[", "module_name", "]", "\n", "", "else", ":", "\n", "            ", "space_id", "=", "module_name", "\n", "", "return", "space_id", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_subnet": [[204, 249], ["structure_pruning.StructurePruner.bn_conv_links.items", "structure_pruning.StructurePruner.get_space_id", "subnet_dict[].to", "structure_pruning.StructurePruner.get_space_id", "structure_pruning.StructurePruner.get_space_id", "isinstance", "subnet_dict[].to", "subnet_dict[].to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "in_mask.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_space_id", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_space_id", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_space_id"], ["", "def", "set_subnet", "(", "self", ",", "subnet_dict", ")", ":", "\n", "        ", "\"\"\"Modify the in_mask and out_mask of modules in supernet according to\n        subnet_dict.\n\n        Args:\n            subnet_dict (dict): the key is space_id and the value is the\n                corresponding sampled out_mask.\n        \"\"\"", "\n", "for", "module_name", "in", "self", ".", "modules_have_child", ":", "\n", "            ", "space_id", "=", "self", ".", "get_space_id", "(", "module_name", ")", "\n", "module", "=", "self", ".", "name2module", "[", "module_name", "]", "\n", "module", ".", "out_mask", "=", "subnet_dict", "[", "space_id", "]", ".", "to", "(", "module", ".", "out_mask", ".", "device", ")", "\n", "\n", "", "for", "bn", ",", "conv", "in", "self", ".", "bn_conv_links", ".", "items", "(", ")", ":", "\n", "            ", "module", "=", "self", ".", "name2module", "[", "bn", "]", "\n", "conv_space_id", "=", "self", ".", "get_space_id", "(", "conv", ")", "\n", "# conv_space_id is None means the conv layer in front of", "\n", "# this bn module can not be pruned. So we should not set", "\n", "# the out_mask of this bn layer", "\n", "if", "conv_space_id", "is", "not", "None", ":", "\n", "                ", "module", ".", "out_mask", "=", "subnet_dict", "[", "conv_space_id", "]", ".", "to", "(", "\n", "module", ".", "out_mask", ".", "device", ")", "\n", "\n", "", "", "for", "module_name", "in", "self", ".", "modules_have_ancest", ":", "\n", "            ", "module", "=", "self", ".", "name2module", "[", "module_name", "]", "\n", "parents", "=", "self", ".", "node2parents", "[", "module_name", "]", "\n", "# To avoid ambiguity, we only allow the following two cases:", "\n", "# 1. all elements in parents are ``Conv2d``,", "\n", "# 2. there is only one element in parents, ``concat`` or ``chunk``", "\n", "# In case 1, all the ``Conv2d`` share the same space_id and", "\n", "# out_mask.", "\n", "# So in all cases, we only need the very first element in parents", "\n", "parent", "=", "parents", "[", "0", "]", "\n", "space_id", "=", "self", ".", "get_space_id", "(", "parent", ")", "\n", "\n", "if", "isinstance", "(", "space_id", ",", "dict", ")", ":", "\n", "                ", "if", "'concat'", "in", "space_id", ":", "\n", "                    ", "in_mask", "=", "[", "]", "\n", "for", "parent_space_id", "in", "space_id", "[", "'concat'", "]", ":", "\n", "                        ", "in_mask", ".", "append", "(", "subnet_dict", "[", "parent_space_id", "]", ")", "\n", "", "module", ".", "in_mask", "=", "torch", ".", "cat", "(", "\n", "in_mask", ",", "dim", "=", "1", ")", ".", "to", "(", "module", ".", "in_mask", ".", "device", ")", "\n", "", "", "else", ":", "\n", "                ", "module", ".", "in_mask", "=", "subnet_dict", "[", "space_id", "]", ".", "to", "(", "\n", "module", ".", "in_mask", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.export_subnet": [[250, 270], ["dict", "structure_pruning.StructurePruner.name2module.items", "dict", "hasattr", "hasattr", "int", "int", "int", "int", "module.in_mask.cpu().sum", "module.in_mask.cpu().numel", "module.out_mask.cpu().sum", "module.out_mask.cpu().numel", "module.in_mask.cpu", "module.in_mask.cpu", "module.out_mask.cpu", "module.out_mask.cpu"], "methods", ["None"], ["", "", "", "def", "export_subnet", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate subnet configs according to the in_mask and out_mask of a\n        module.\"\"\"", "\n", "channel_cfg", "=", "dict", "(", ")", "\n", "for", "name", ",", "module", "in", "self", ".", "name2module", ".", "items", "(", ")", ":", "\n", "\n", "            ", "channel_cfg", "[", "name", "]", "=", "dict", "(", ")", "\n", "if", "hasattr", "(", "module", ",", "'in_mask'", ")", ":", "\n", "                ", "channel_cfg", "[", "name", "]", "[", "'in_channels'", "]", "=", "int", "(", "\n", "module", ".", "in_mask", ".", "cpu", "(", ")", ".", "sum", "(", ")", ")", "\n", "channel_cfg", "[", "name", "]", "[", "'raw_in_channels'", "]", "=", "int", "(", "\n", "module", ".", "in_mask", ".", "cpu", "(", ")", ".", "numel", "(", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "module", ",", "'out_mask'", ")", ":", "\n", "                ", "channel_cfg", "[", "name", "]", "[", "'out_channels'", "]", "=", "int", "(", "\n", "module", ".", "out_mask", ".", "cpu", "(", ")", ".", "sum", "(", ")", ")", "\n", "channel_cfg", "[", "name", "]", "[", "'raw_out_channels'", "]", "=", "int", "(", "\n", "module", ".", "out_mask", ".", "cpu", "(", ")", ".", "numel", "(", ")", ")", "\n", "\n", "", "", "return", "channel_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_max_channel": [[271, 278], ["dict", "structure_pruning.StructurePruner.channel_spaces.items", "structure_pruning.StructurePruner.set_subnet", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet"], ["", "def", "set_max_channel", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set the number of channels each layer to maximum.\"\"\"", "\n", "subnet_dict", "=", "dict", "(", ")", "\n", "for", "space_id", ",", "out_mask", "in", "self", ".", "channel_spaces", ".", "items", "(", ")", ":", "\n", "            ", "new_out_mask", "=", "torch", ".", "ones_like", "(", "out_mask", ")", "\n", "subnet_dict", "[", "space_id", "]", "=", "new_out_mask", "\n", "", "self", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_min_channel": [[279, 283], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_min_channel", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set the number of channels each layer to minimum.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.find_make_group_parser": [[284, 298], ["isinstance"], "methods", ["None"], ["", "def", "find_make_group_parser", "(", "self", ",", "node_name", ",", "name2module", ")", ":", "\n", "        ", "\"\"\"Find the corresponding make_group_parser according to the\n        ``node_name``\"\"\"", "\n", "if", "'concat'", "in", "node_name", "and", "node_name", "not", "in", "name2module", ":", "\n", "            ", "return", "MAKE_GROUP_PARSER_DICT", "[", "'concat'", "]", "\n", "", "elif", "'chunk'", "in", "node_name", "and", "node_name", "not", "in", "name2module", ":", "\n", "            ", "return", "MAKE_GROUP_PARSER_DICT", "[", "'chunk'", "]", "\n", "", "elif", "(", "node_name", "in", "name2module", "\n", "and", "isinstance", "(", "name2module", "[", "node_name", "]", ",", "nn", ".", "Conv2d", ")", "\n", "and", "name2module", "[", "node_name", "]", ".", "in_channels", "\n", "==", "name2module", "[", "node_name", "]", ".", "groups", ")", ":", "\n", "            ", "return", "MAKE_GROUP_PARSER_DICT", "[", "'depthwise'", "]", "\n", "", "else", ":", "\n", "            ", "return", "MAKE_GROUP_PARSER_DICT", "[", "'common'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.concat_make_group_parser": [[299, 309], ["structure_pruning.register_parser", "structure_pruning.StructurePruner.make_group_parser"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.make_group_parser"], ["", "", "@", "register_parser", "(", "MAKE_GROUP_PARSER_DICT", ",", "'concat'", ")", "\n", "def", "concat_make_group_parser", "(", "self", ",", "node_name", ",", "parents_name", ",", "group_idx", ",", "\n", "same_in_channel_groups", ",", "\n", "same_out_channel_groups", ")", ":", "\n", "        ", "if", "'item'", "in", "node_name", ":", "\n", "            ", "return", "self", ".", "make_group_parser", "(", "node_name", ",", "parents_name", ",", "group_idx", ",", "\n", "same_in_channel_groups", ",", "\n", "same_out_channel_groups", ")", "\n", "", "else", ":", "\n", "            ", "return", "group_idx", ",", "same_in_channel_groups", ",", "same_out_channel_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.chunk_make_group_parser": [[310, 314], ["structure_pruning.register_parser"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser"], ["", "", "@", "register_parser", "(", "MAKE_GROUP_PARSER_DICT", ",", "'chunk'", ")", "\n", "def", "chunk_make_group_parser", "(", "self", ",", "group_idx", ",", "same_in_channel_groups", ",", "\n", "same_out_channel_groups", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "group_idx", ",", "same_in_channel_groups", ",", "same_out_channel_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.depthwise_make_group_parser": [[315, 320], ["structure_pruning.register_parser", "parents_name.add", "structure_pruning.StructurePruner.make_group_parser"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.make_group_parser"], ["", "@", "register_parser", "(", "MAKE_GROUP_PARSER_DICT", ",", "'depthwise'", ")", "\n", "def", "depthwise_make_group_parser", "(", "self", ",", "node_name", ",", "parents_name", ",", "**", "kwargs", ")", ":", "\n", "# depth wise conv should be in the same group with its parent", "\n", "        ", "parents_name", ".", "add", "(", "node_name", ")", "\n", "return", "self", ".", "make_group_parser", "(", "node_name", ",", "parents_name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.make_group_parser": [[321, 339], ["structure_pruning.register_parser", "set", "list", "len", "same_in_channel_groups[].append", "list", "parents_name.intersection", "parents_name.union"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser"], ["", "@", "register_parser", "(", "MAKE_GROUP_PARSER_DICT", ",", "'common'", ")", "\n", "def", "make_group_parser", "(", "self", ",", "node_name", ",", "parents_name", ",", "group_idx", ",", "\n", "same_in_channel_groups", ",", "same_out_channel_groups", ")", ":", "\n", "        ", "added", "=", "False", "\n", "for", "group_name", "in", "same_in_channel_groups", ":", "\n", "            ", "group_parents", "=", "set", "(", "same_out_channel_groups", "[", "group_name", "]", ")", "\n", "if", "len", "(", "parents_name", ".", "intersection", "(", "group_parents", ")", ")", ">", "0", ":", "\n", "                ", "same_in_channel_groups", "[", "group_name", "]", ".", "append", "(", "node_name", ")", "\n", "same_out_channel_groups", "[", "group_name", "]", "=", "list", "(", "\n", "parents_name", ".", "union", "(", "group_parents", ")", ")", "\n", "added", "=", "True", "\n", "break", "\n", "", "", "if", "not", "added", ":", "\n", "            ", "group_idx", "+=", "1", "\n", "same_in_channel_groups", "[", "group_idx", "]", "=", "[", "node_name", "]", "\n", "same_out_channel_groups", "[", "group_idx", "]", "=", "list", "(", "parents_name", ")", "\n", "\n", "", "return", "group_idx", ",", "same_in_channel_groups", ",", "same_out_channel_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.make_same_out_channel_groups": [[340, 365], ["node2parents.items", "dict", "same_out_channel_groups.values", "structure_pruning.StructurePruner.find_make_group_parser", "structure_pruning.StructurePruner.", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.find_make_group_parser"], ["", "def", "make_same_out_channel_groups", "(", "self", ",", "node2parents", ",", "name2module", ")", ":", "\n", "        ", "\"\"\"Modules have the same child should be in the same group.\"\"\"", "\n", "idx", "=", "-", "1", "\n", "# the nodes in same_out_channel_groups are parents of", "\n", "# nodes in same_in_channel_groups", "\n", "same_in_channel_groups", ",", "same_out_channel_groups", "=", "{", "}", ",", "{", "}", "\n", "for", "node_name", ",", "parents_name", "in", "node2parents", ".", "items", "(", ")", ":", "\n", "            ", "parser", "=", "self", ".", "find_make_group_parser", "(", "node_name", ",", "name2module", ")", "\n", "idx", ",", "same_in_channel_groups", ",", "same_out_channel_groups", "=", "parser", "(", "self", ",", "\n", "node_name", "=", "node_name", ",", "\n", "parents_name", "=", "parents_name", ",", "\n", "group_idx", "=", "idx", ",", "\n", "same_in_channel_groups", "=", "same_in_channel_groups", ",", "\n", "same_out_channel_groups", "=", "same_out_channel_groups", ")", "\n", "\n", "", "groups", "=", "dict", "(", ")", "\n", "idx", "=", "0", "\n", "for", "group", "in", "same_out_channel_groups", ".", "values", "(", ")", ":", "\n", "            ", "if", "len", "(", "group", ")", ">", "1", ":", "\n", "                ", "group_name", "=", "f'group_{idx}'", "\n", "groups", "[", "group_name", "]", "=", "group", "\n", "idx", "+=", "1", "\n", "\n", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.modify_conv_forward": [[366, 376], ["types.MethodType", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_conv_forward", "(", "module", ")", ":", "\n", "        ", "\"\"\"Modify the forward method of a conv layer.\"\"\"", "\n", "\n", "def", "modified_forward", "(", "self", ",", "feature", ")", ":", "\n", "            ", "feature", "=", "feature", "*", "self", ".", "in_mask", "\n", "return", "F", ".", "conv2d", "(", "feature", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "return", "MethodType", "(", "modified_forward", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.modify_fc_forward": [[377, 389], ["types.MethodType", "torch.linear", "torch.linear", "torch.linear", "structure_pruning.StructurePruner.in_mask.reshape", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_fc_forward", "(", "module", ")", ":", "\n", "        ", "\"\"\"Modify the forward method of a linear layer.\"\"\"", "\n", "\n", "def", "modified_forward", "(", "self", ",", "feature", ")", ":", "\n", "            ", "if", "not", "len", "(", "self", ".", "in_mask", ".", "shape", ")", "==", "len", "(", "self", ".", "out_mask", ".", "shape", ")", ":", "\n", "                ", "self", ".", "in_mask", "=", "self", ".", "in_mask", ".", "reshape", "(", "self", ".", "in_mask", ".", "shape", "[", ":", "2", "]", ")", "\n", "\n", "", "feature", "=", "feature", "*", "self", ".", "in_mask", "\n", "return", "F", ".", "linear", "(", "feature", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n", "", "return", "MethodType", "(", "modified_forward", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.add_pruning_attrs": [[390, 410], ["isinstance", "module.register_buffer", "module.register_buffer", "structure_pruning.StructurePruner.modify_conv_forward", "module.register_buffer", "module.register_buffer", "structure_pruning.StructurePruner.modify_fc_forward", "module.register_buffer", "type", "module.weight.new_ones", "module.weight.new_ones", "type", "module.weight.new_ones", "module.weight.new_ones", "module.weight.new_ones", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.modify_conv_forward", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.modify_fc_forward"], ["", "def", "add_pruning_attrs", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\"Add masks to a ``nn.Module``.\"\"\"", "\n", "if", "type", "(", "module", ")", ".", "__name__", "==", "'Conv2d'", ":", "\n", "            ", "module", ".", "register_buffer", "(", "\n", "'in_mask'", ",", "\n", "module", ".", "weight", ".", "new_ones", "(", "(", "1", ",", "module", ".", "in_channels", ",", "1", ",", "1", ")", ",", ")", ")", "\n", "module", ".", "register_buffer", "(", "\n", "'out_mask'", ",", "\n", "module", ".", "weight", ".", "new_ones", "(", "(", "1", ",", "module", ".", "out_channels", ",", "1", ",", "1", ")", ",", ")", ")", "\n", "module", ".", "forward", "=", "self", ".", "modify_conv_forward", "(", "module", ")", "\n", "", "if", "type", "(", "module", ")", ".", "__name__", "==", "'Linear'", ":", "\n", "            ", "module", ".", "register_buffer", "(", "\n", "'in_mask'", ",", "module", ".", "weight", ".", "new_ones", "(", "(", "1", ",", "module", ".", "in_features", ")", ",", ")", ")", "\n", "module", ".", "register_buffer", "(", "\n", "'out_mask'", ",", "module", ".", "weight", ".", "new_ones", "(", "(", "1", ",", "module", ".", "out_features", ")", ",", ")", ")", "\n", "module", ".", "forward", "=", "self", ".", "modify_fc_forward", "(", "module", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "register_buffer", "(", "\n", "'out_mask'", ",", "\n", "module", ".", "weight", ".", "new_ones", "(", "(", "1", ",", "len", "(", "module", ".", "weight", ")", ",", "1", ",", "1", ")", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.find_node_parents": [[411, 437], ["dict", "enumerate", "len", "dict.keys", "ordered_set.OrderedSet", "dict.keys", "node2parents[].add", "ordered_set.OrderedSet"], "methods", ["None"], ["", "", "def", "find_node_parents", "(", "self", ",", "paths", ")", ":", "\n", "        ", "\"\"\"Find the parent node of a node.\n\n        A node in the ``paths`` can be a module name or a operation name such\n        as `concat_140719322997152`. Note that the string of numbers following\n        ``concat`` do not have a particular meaning. It just make the operation\n        name unique.\n\n        Args:\n            paths (list): The traced paths.\n        \"\"\"", "\n", "node2parents", "=", "dict", "(", ")", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "if", "len", "(", "path", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "i", ",", "node_name", "in", "enumerate", "(", "path", "[", ":", "-", "1", "]", ")", ":", "\n", "                ", "parent_name", "=", "path", "[", "i", "+", "1", "]", "\n", "if", "node_name", "in", "node2parents", ".", "keys", "(", ")", ":", "\n", "                    ", "node2parents", "[", "node_name", "]", ".", "add", "(", "parent_name", ")", "\n", "", "else", ":", "\n", "                    ", "node2parents", "[", "node_name", "]", "=", "OrderedSet", "(", "[", "parent_name", "]", ")", "\n", "\n", "", "", "leaf_name", "=", "path", "[", "-", "1", "]", "\n", "if", "leaf_name", "not", "in", "node2parents", ".", "keys", "(", ")", ":", "\n", "                ", "node2parents", "[", "leaf_name", "]", "=", "OrderedSet", "(", ")", "\n", "", "", "return", "node2parents", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.build_channel_spaces": [[438, 467], ["dict", "module_name.startswith"], "methods", ["None"], ["", "def", "build_channel_spaces", "(", "self", ",", "name2module", ")", ":", "\n", "        ", "\"\"\"Build channel search space.\n\n        Args:\n            name2module (dict): A mapping between module_name and module.\n\n        Return:\n            dict: The channel search space. The key is space_id and the value\n                is the corresponding out_mask.\n        \"\"\"", "\n", "search_space", "=", "dict", "(", ")", "\n", "\n", "for", "module_name", "in", "self", ".", "modules_have_child", ":", "\n", "            ", "need_prune", "=", "True", "\n", "for", "key", "in", "self", ".", "except_start_keys", ":", "\n", "                ", "if", "module_name", ".", "startswith", "(", "key", ")", ":", "\n", "                    ", "need_prune", "=", "False", "\n", "break", "\n", "", "", "if", "not", "need_prune", ":", "\n", "                ", "continue", "\n", "", "if", "module_name", "in", "self", ".", "module2group", ":", "\n", "                ", "space_id", "=", "self", ".", "module2group", "[", "module_name", "]", "\n", "", "else", ":", "\n", "                ", "space_id", "=", "module_name", "\n", "", "module", "=", "name2module", "[", "module_name", "]", "\n", "if", "space_id", "not", "in", "search_space", ":", "\n", "                ", "search_space", "[", "space_id", "]", "=", "module", ".", "out_mask", "\n", "\n", "", "", "return", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.deploy_subnet": [[468, 513], ["supernet.model.named_modules", "hasattr", "hasattr", "hasattr", "torch.Parameter", "torch.Parameter", "torch.Parameter", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "torch.Parameter", "torch.Parameter", "torch.Parameter", "getattr"], "methods", ["None"], ["", "def", "deploy_subnet", "(", "self", ",", "supernet", ",", "channel_cfg", ")", ":", "\n", "        ", "\"\"\"Deploy subnet according `channel_cfg`.\"\"\"", "\n", "for", "name", ",", "module", "in", "supernet", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "name", "not", "in", "channel_cfg", ":", "\n", "                ", "continue", "\n", "\n", "", "channels_per_layer", "=", "channel_cfg", "[", "name", "]", "\n", "requires_grad", "=", "module", ".", "weight", ".", "requires_grad", "\n", "out_channels", "=", "channels_per_layer", "[", "'out_channels'", "]", "\n", "temp_weight", "=", "module", ".", "weight", ".", "data", "[", ":", "out_channels", "]", "\n", "\n", "if", "hasattr", "(", "module", ",", "'out_channels'", ")", ":", "\n", "                ", "module", ".", "out_channels", "=", "out_channels", "\n", "", "if", "hasattr", "(", "module", ",", "'out_features'", ")", ":", "\n", "                ", "module", ".", "out_features", "=", "out_channels", "\n", "", "if", "hasattr", "(", "module", ",", "'out_mask'", ")", ":", "\n", "                ", "module", ".", "out_mask", "=", "module", ".", "out_mask", "[", ":", ",", ":", "out_channels", "]", "\n", "\n", "", "if", "'in_channels'", "in", "channels_per_layer", ":", "\n", "                ", "in_channels", "=", "channels_per_layer", "[", "'in_channels'", "]", "\n", "\n", "if", "in_channels", ">", "1", ":", "\n", "                    ", "temp_weight", "=", "temp_weight", "[", ":", ",", ":", "in_channels", "]", ".", "data", "\n", "", "if", "hasattr", "(", "module", ",", "'in_channels'", ")", ":", "\n", "                    ", "module", ".", "in_channels", "=", "in_channels", "\n", "", "if", "hasattr", "(", "module", ",", "'in_features'", ")", ":", "\n", "                    ", "module", ".", "in_features", "=", "in_channels", "\n", "", "if", "hasattr", "(", "module", ",", "'in_mask'", ")", ":", "\n", "                    ", "module", ".", "in_mask", "=", "module", ".", "in_mask", "[", ":", ",", ":", "in_channels", "]", "\n", "# TODO Seems not support GroupConv", "\n", "", "if", "getattr", "(", "module", ",", "'groups'", ",", "in_channels", ")", ">", "1", ":", "\n", "                    ", "module", ".", "groups", "=", "in_channels", "\n", "\n", "", "", "module", ".", "weight", "=", "nn", ".", "Parameter", "(", "temp_weight", ".", "data", ")", "\n", "module", ".", "weight", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", "=", "nn", ".", "Parameter", "(", "module", ".", "bias", ".", "data", "[", ":", "out_channels", "]", ")", "\n", "module", ".", "bias", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "if", "hasattr", "(", "module", ",", "'running_mean'", ")", ":", "\n", "                ", "module", ".", "running_mean", "=", "module", ".", "running_mean", "[", ":", "out_channels", "]", "\n", "\n", "", "if", "hasattr", "(", "module", ",", "'running_var'", ")", ":", "\n", "                ", "module", ".", "running_var", "=", "module", ".", "running_var", "[", ":", "out_channels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_max_channel_bins": [[514, 525], ["dict", "structure_pruning.StructurePruner.channel_spaces.keys", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "", "def", "get_max_channel_bins", "(", "self", ",", "max_channel_bins", ")", ":", "\n", "        ", "\"\"\"Get the max number of channel bins of all the groups which can be\n        pruned during searching.\n\n        Args:\n            max_channel_bins (int): The max number of bins in each layer.\n        \"\"\"", "\n", "channel_bins_dict", "=", "dict", "(", ")", "\n", "for", "space_id", "in", "self", ".", "channel_spaces", ".", "keys", "(", ")", ":", "\n", "            ", "channel_bins_dict", "[", "space_id", "]", "=", "torch", ".", "ones", "(", "(", "max_channel_bins", ",", ")", ")", "\n", "", "return", "channel_bins_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_channel_bins": [[526, 549], ["dict", "channel_bins_dict.items", "structure_pruning.StructurePruner.set_subnet", "torch.tensor().reshape.extend", "torch.tensor().reshape.extend", "torch.tensor().reshape.extend", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape.extend", "torch.tensor().reshape.extend", "torch.tensor().reshape.extend", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet"], ["", "def", "set_channel_bins", "(", "self", ",", "channel_bins_dict", ",", "max_channel_bins", ")", ":", "\n", "        ", "\"\"\"Set subnet according to the number of channel bins in a layer.\n\n        Args:\n            channel_bins_dict (dict): The number of bins in each layer. Key is\n                the space_id of each layer and value is the corresponding\n                mask of channel bin.\n            max_channel_bins (int): The max number of bins in each layer.\n        \"\"\"", "\n", "subnet_dict", "=", "dict", "(", ")", "\n", "for", "space_id", ",", "bin_mask", "in", "channel_bins_dict", ".", "items", "(", ")", ":", "\n", "            ", "mask", "=", "self", ".", "channel_spaces", "[", "space_id", "]", "\n", "shape", "=", "mask", ".", "shape", "\n", "channel_num", "=", "shape", "[", "1", "]", "\n", "channels_per_bin", "=", "channel_num", "//", "max_channel_bins", "\n", "new_mask", "=", "[", "]", "\n", "for", "mask", "in", "bin_mask", ":", "\n", "                ", "new_mask", ".", "extend", "(", "[", "1", "]", "*", "channels_per_bin", "if", "mask", "else", "[", "0", "]", "*", "\n", "channels_per_bin", ")", "\n", "", "new_mask", ".", "extend", "(", "[", "0", "]", "*", "(", "channel_num", "%", "max_channel_bins", ")", ")", "\n", "new_mask", "=", "torch", ".", "tensor", "(", "new_mask", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "subnet_dict", "[", "space_id", "]", "=", "new_mask", "\n", "", "self", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_non_pass_path": [[550, 570], ["isinstance", "structure_pruning.StructurePruner.find_backward_parser", "result_paths.append", "structure_pruning.StructurePruner.", "copy.deepcopy", "structure_pruning.StructurePruner.trace_non_pass_path"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.find_backward_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_non_pass_path"], ["", "def", "trace_non_pass_path", "(", "self", ",", "grad_fn", ",", "module2name", ",", "var2module", ",", "cur_path", ",", "\n", "result_paths", ",", "visited", ")", ":", "\n", "        ", "\"\"\"Trace the topology of all the ``NON_PASS_MODULE``.\"\"\"", "\n", "grad_fn", "=", "grad_fn", "[", "0", "]", "if", "isinstance", "(", "grad_fn", ",", "(", "list", ",", "tuple", ")", ")", "else", "grad_fn", "\n", "\n", "if", "grad_fn", "is", "not", "None", ":", "\n", "            ", "parser", "=", "self", ".", "find_backward_parser", "(", "grad_fn", ")", "\n", "if", "parser", "is", "not", "None", ":", "\n", "                ", "parser", "(", "self", ",", "grad_fn", ",", "module2name", ",", "var2module", ",", "cur_path", ",", "\n", "result_paths", ",", "visited", ")", "\n", "", "else", ":", "\n", "# If the op is AccumulateGrad, parents is (),", "\n", "                ", "parents", "=", "grad_fn", ".", "next_functions", "\n", "if", "parents", "is", "not", "None", ":", "\n", "                    ", "for", "parent", "in", "parents", ":", "\n", "                        ", "self", ".", "trace_non_pass_path", "(", "parent", ",", "module2name", ",", "\n", "var2module", ",", "cur_path", ",", "\n", "result_paths", ",", "visited", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "result_paths", ".", "append", "(", "copy", ".", "deepcopy", "(", "cur_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_bn_conv_links": [[571, 626], ["isinstance", "type().__name__.startswith", "structure_pruning.StructurePruner.trace_bn_conv_links", "id", "id", "structure_pruning.StructurePruner.trace_bn_conv_links", "type"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_bn_conv_links", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_bn_conv_links"], ["", "", "def", "trace_bn_conv_links", "(", "self", ",", "grad_fn", ",", "module2name", ",", "var2module", ",", "\n", "bn_conv_links", ",", "visited", ")", ":", "\n", "        ", "\"\"\"Get the convolutional layer placed before a bn layer in the model.\n\n        Example:\n            >>> conv = nn.Conv2d(3, 3, 3)\n            >>> bn = nn.BatchNorm2d(3)\n            >>> pseudo_img = torch.rand(1, 3, 224, 224)\n            >>> out = bn(conv(pseudo_img))\n            >>> print(out.grad_fn.next_functions)\n            ((<ThnnConv2DBackward object at 0x0000020E40639688>, 0),\n            (<AccumulateGrad object at 0x0000020E40639208>, 0),\n            (<AccumulateGrad object at 0x0000020E406398C8>, 0))\n            >>> # op.next_functions[0][0] is ThnnConv2DBackward means\n            >>> # the parent of this NativeBatchNormBackward op is\n            >>> # ThnnConv2DBackward\n            >>> # op.next_functions[1][0].variable is the weight of this bn\n            >>> # module\n            >>> # op.next_functions[2][0].variable is the bias of this bn\n            >>> # module\n        \"\"\"", "\n", "grad_fn", "=", "grad_fn", "[", "0", "]", "if", "isinstance", "(", "grad_fn", ",", "(", "list", ",", "tuple", ")", ")", "else", "grad_fn", "\n", "if", "grad_fn", "is", "not", "None", ":", "\n", "            ", "is_bn_grad_fn", "=", "False", "\n", "for", "fn_name", "in", "BN", ":", "\n", "                ", "if", "type", "(", "grad_fn", ")", ".", "__name__", ".", "startswith", "(", "fn_name", ")", ":", "\n", "                    ", "is_bn_grad_fn", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "is_bn_grad_fn", ":", "\n", "                ", "conv_grad_fn", "=", "grad_fn", ".", "next_functions", "[", "0", "]", "[", "0", "]", "\n", "conv_var", "=", "conv_grad_fn", ".", "next_functions", "[", "1", "]", "[", "0", "]", ".", "variable", "\n", "bn_var", "=", "grad_fn", ".", "next_functions", "[", "1", "]", "[", "0", "]", ".", "variable", "\n", "conv_module", "=", "var2module", "[", "id", "(", "conv_var", ")", "]", "\n", "bn_module", "=", "var2module", "[", "id", "(", "bn_var", ")", "]", "\n", "conv_name", "=", "module2name", "[", "conv_module", "]", "\n", "bn_name", "=", "module2name", "[", "bn_module", "]", "\n", "if", "visited", "[", "bn_name", "]", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "visited", "[", "bn_name", "]", "=", "True", "\n", "bn_conv_links", "[", "bn_name", "]", "=", "conv_name", "\n", "\n", "self", ".", "trace_bn_conv_links", "(", "conv_grad_fn", ",", "module2name", ",", "\n", "var2module", ",", "bn_conv_links", ",", "\n", "visited", ")", "\n", "\n", "", "", "else", ":", "\n", "# If the op is AccumulateGrad, parents is (),", "\n", "                ", "parents", "=", "grad_fn", ".", "next_functions", "\n", "if", "parents", "is", "not", "None", ":", "\n", "                    ", "for", "parent", "in", "parents", ":", "\n", "                        ", "self", ".", "trace_bn_conv_links", "(", "parent", ",", "module2name", ",", "\n", "var2module", ",", "bn_conv_links", ",", "\n", "visited", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.find_backward_parser": [[627, 631], ["BACKWARD_PARSER_DICT.items", "type().__name__.startswith", "type"], "methods", ["None"], ["", "", "", "", "", "def", "find_backward_parser", "(", "self", ",", "grad_fn", ")", ":", "\n", "        ", "for", "name", ",", "parser", "in", "BACKWARD_PARSER_DICT", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "grad_fn", ")", ".", "__name__", ".", "startswith", "(", "name", ")", ":", "\n", "                ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.conv_backward_parser": [[632, 666], ["structure_pruning.register_parser", "structure_pruning.register_parser", "structure_pruning.register_parser", "id", "cur_path.append", "cur_path.pop", "result_paths.append", "structure_pruning.StructurePruner.trace_non_pass_path", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_non_pass_path"], ["", "", "", "@", "register_parser", "(", "BACKWARD_PARSER_DICT", ",", "'ThnnConv2DBackward'", ")", "\n", "@", "register_parser", "(", "BACKWARD_PARSER_DICT", ",", "'CudnnConvolutionBackward'", ")", "\n", "@", "register_parser", "(", "BACKWARD_PARSER_DICT", ",", "'MkldnnConvolutionBackward'", ")", "\n", "def", "conv_backward_parser", "(", "self", ",", "grad_fn", ",", "module2name", ",", "var2module", ",", "cur_path", ",", "\n", "result_paths", ",", "visited", ")", ":", "\n", "        ", "\"\"\"Parse the backward of a conv layer.\n\n        Example:\n            >>> conv = nn.Conv2d(3, 3, 3)\n            >>> pseudo_img = torch.rand(1, 3, 224, 224)\n            >>> out = conv(pseudo_img)\n            >>> print(out.grad_fn.next_functions)\n            ((None, 0), (<AccumulateGrad object at 0x0000020E405CBD88>, 0),\n            (<AccumulateGrad object at 0x0000020E405CB588>, 0))\n            >>> # op.next_functions[0][0] is None means this ThnnConv2DBackward\n            >>> # op has no parents\n            >>> # op.next_functions[1][0].variable is the weight of this Conv2d\n            >>> # module\n            >>> # op.next_functions[2][0].variable is the bias of this Conv2d\n            >>> # module\n        \"\"\"", "\n", "variable", "=", "grad_fn", ".", "next_functions", "[", "1", "]", "[", "0", "]", ".", "variable", "\n", "var_id", "=", "id", "(", "variable", ")", "\n", "module", "=", "var2module", "[", "var_id", "]", "\n", "name", "=", "module2name", "[", "module", "]", "\n", "parent", "=", "grad_fn", ".", "next_functions", "[", "0", "]", "[", "0", "]", "\n", "cur_path", ".", "append", "(", "name", ")", "\n", "if", "visited", "[", "name", "]", ":", "\n", "            ", "result_paths", ".", "append", "(", "copy", ".", "deepcopy", "(", "cur_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "visited", "[", "name", "]", "=", "True", "\n", "self", ".", "trace_non_pass_path", "(", "parent", ",", "module2name", ",", "var2module", ",", "cur_path", ",", "\n", "result_paths", ",", "visited", ")", "\n", "", "cur_path", ".", "pop", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.linear_backward_parser": [[667, 703], ["structure_pruning.register_parser", "structure_pruning.register_parser", "structure_pruning.register_parser", "id", "cur_path.append", "cur_path.pop", "result_paths.append", "structure_pruning.StructurePruner.trace_non_pass_path", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_non_pass_path"], ["", "@", "register_parser", "(", "BACKWARD_PARSER_DICT", ",", "'ThAddmmBackward'", ")", "\n", "@", "register_parser", "(", "BACKWARD_PARSER_DICT", ",", "'AddmmBackward'", ")", "\n", "@", "register_parser", "(", "BACKWARD_PARSER_DICT", ",", "'MmBackward'", ")", "\n", "def", "linear_backward_parser", "(", "self", ",", "grad_fn", ",", "module2name", ",", "var2module", ",", "\n", "cur_path", ",", "result_paths", ",", "visited", ")", ":", "\n", "        ", "\"\"\"Parse the backward of a conv layer.\n\n        Example:\n            >>> fc = nn.Linear(3, 3, bias=True)\n            >>> input = torch.rand(3, 3)\n            >>> out = fc(input)\n            >>> print(out.grad_fn.next_functions)\n            ((<AccumulateGrad object at 0x0000020E405F75C8>, 0), (None, 0),\n            (<TBackward object at 0x0000020E405F7D48>, 0))\n            >>> # op.next_functions[0][0].variable is the bias of this Linear\n            >>> # module\n            >>> # op.next_functions[1][0] is None means this AddmmBackward op\n            >>> # has no parents\n            >>> # op.next_functions[2][0] is the TBackward op, and\n            >>> # op.next_functions[2][0].next_functions[0][0].variable is\n            >>> # the transpose of the weight of this Linear module\n        \"\"\"", "\n", "variable", "=", "grad_fn", ".", "next_functions", "[", "2", "]", "[", "0", "]", ".", "next_functions", "[", "0", "]", "[", "0", "]", ".", "variable", "\n", "var_id", "=", "id", "(", "variable", ")", "\n", "module", "=", "var2module", "[", "var_id", "]", "\n", "name", "=", "module2name", "[", "module", "]", "\n", "parent", "=", "grad_fn", ".", "next_functions", "[", "1", "]", "[", "0", "]", "\n", "\n", "cur_path", ".", "append", "(", "name", ")", "\n", "if", "visited", "[", "name", "]", ":", "\n", "            ", "result_paths", ".", "append", "(", "copy", ".", "deepcopy", "(", "cur_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "visited", "[", "name", "]", "=", "True", "\n", "self", ".", "trace_non_pass_path", "(", "parent", ",", "module2name", ",", "var2module", ",", "cur_path", ",", "\n", "result_paths", ",", "visited", ")", "\n", "", "cur_path", ".", "pop", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.concat_backward_parser": [[704, 736], ["structure_pruning.register_parser", "cur_path.append", "cur_path.pop", "result_paths.append", "enumerate", "str", "copy.deepcopy", "cur_path.append", "structure_pruning.StructurePruner.trace_non_pass_path", "id", "cur_path.pop", "print"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.trace_non_pass_path"], ["", "@", "register_parser", "(", "BACKWARD_PARSER_DICT", ",", "'CatBackward'", ")", "\n", "def", "concat_backward_parser", "(", "self", ",", "grad_fn", ",", "module2name", ",", "var2module", ",", "\n", "cur_path", ",", "result_paths", ",", "visited", ")", ":", "\n", "        ", "\"\"\"Parse the backward of a concat operation.\n\n        Example:\n            >>> conv = nn.Conv2d(3, 3, 3)\n            >>> pseudo_img = torch.rand(1, 3, 224, 224)\n            >>> out1 = conv(pseudo_img)\n            >>> out2 = conv(pseudo_img)\n            >>> out = torch.cat([out1, out2], dim=1)\n            >>> print(out.grad_fn.next_functions)\n            ((<ThnnConv2DBackward object at 0x0000020E405F24C8>, 0),\n            (<ThnnConv2DBackward object at 0x0000020E405F2648>, 0))\n            >>> # the length of ``out.grad_fn.next_functions`` is two means\n            >>> # ``out`` is obtained by concatenating two tensors\n        \"\"\"", "\n", "parents", "=", "grad_fn", ".", "next_functions", "\n", "concat_id", "=", "'_'", ".", "join", "(", "[", "str", "(", "id", "(", "p", ")", ")", "for", "p", "in", "parents", "]", ")", "\n", "name", "=", "f'concat_{concat_id}'", "\n", "cur_path", ".", "append", "(", "name", ")", "\n", "if", "name", "in", "visited", "and", "visited", "[", "name", "]", ":", "\n", "            ", "result_paths", ".", "append", "(", "copy", ".", "deepcopy", "(", "cur_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "visited", "[", "name", "]", "=", "True", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "cur_path", ".", "append", "(", "f'{name}_item_{i}'", ")", "\n", "self", ".", "trace_non_pass_path", "(", "parent", ",", "module2name", ",", "var2module", ",", "\n", "cur_path", ",", "result_paths", ",", "visited", ")", "\n", "if", "cur_path", ".", "pop", "(", "-", "1", ")", "!=", "f'{name}_item_{i}'", ":", "\n", "                    ", "print", "(", "f'{name}_item_{i}'", ")", "\n", "", "", "", "cur_path", ".", "pop", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.register_parser": [[36, 68], ["KeyError"], "function", ["None"], ["def", "register_parser", "(", "parser_dict", ",", "name", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "    ", "\"\"\"Register a parser function.\n\n    A record will be added to ``parser_dict``, whose key is the specified\n    ``name``, and value is the function itself.\n    It can be used as a decorator or a normal function.\n\n    Example:\n        >>> BACKWARD_PARSER_DICT = dict()\n        >>> @register_parser(BACKWARD_PARSER_DICT, 'ThnnConv2DBackward')\n        >>> def conv_backward_parser():\n        >>>     pass\n\n    Args:\n        parser_dict (dict): A dict to map strings to parser functions.\n        name (str | None): The function name to be registered. If not\n            specified, the function name will be used.\n        force (bool, optional): Whether to override an existing function with\n            the same name. Default: False.\n    \"\"\"", "\n", "\n", "def", "_register", "(", "parser_func", ")", ":", "\n", "        ", "parser_name", "=", "parser_func", ".", "__name__", "if", "name", "is", "None", "else", "name", "\n", "if", "(", "parser_name", "not", "in", "parser_dict", ")", "or", "force", ":", "\n", "            ", "parser_dict", "[", "parser_name", "]", "=", "parser_func", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "f'{parser_name} is already registered in task_dict, '", "\n", "'add \"force=True\" if you want to override it'", ")", "\n", "", "return", "parser_func", "\n", "\n", "", "return", "_register", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.__init__": [[27, 33], ["structure_pruning.StructurePruner.__init__", "list", "list.sort"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "ratios", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RatioPruner", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "ratios", "=", "list", "(", "ratios", ")", "\n", "ratios", ".", "sort", "(", ")", "\n", "self", ".", "ratios", "=", "ratios", "\n", "self", ".", "min_ratio", "=", "ratios", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.get_channel_mask": [[34, 45], ["out_mask.size", "numpy.random.choice", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "round"], "methods", ["None"], ["", "def", "get_channel_mask", "(", "self", ",", "out_mask", ")", ":", "\n", "        ", "\"\"\"Randomly choose a width ratio of a layer from ``ratios``\"\"\"", "\n", "out_channels", "=", "out_mask", ".", "size", "(", "1", ")", "\n", "random_ratio", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "ratios", ")", "\n", "new_channels", "=", "int", "(", "round", "(", "out_channels", "*", "random_ratio", ")", ")", "\n", "assert", "new_channels", ">", "0", ",", "'Output channels should be a positive integer.'", "\n", "new_out_mask", "=", "torch", ".", "zeros_like", "(", "out_mask", ")", "\n", "new_out_mask", "[", ":", ",", ":", "new_channels", "]", "=", "1", "\n", "\n", "return", "new_out_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.sample_subnet": [[46, 58], ["dict", "ratio_pruning.RatioPruner.channel_spaces.items", "ratio_pruning.RatioPruner.get_channel_mask"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.get_channel_mask"], ["", "def", "sample_subnet", "(", "self", ")", ":", "\n", "        ", "\"\"\"Random sample subnet by random mask.\n\n        Returns:\n            dict: Record the information to build the subnet from the supernet,\n                its keys are the properties ``space_id`` in the pruner's search\n                spaces, and its values are corresponding sampled out_mask.\n        \"\"\"", "\n", "subnet_dict", "=", "dict", "(", ")", "\n", "for", "space_id", ",", "out_mask", "in", "self", ".", "channel_spaces", ".", "items", "(", ")", ":", "\n", "            ", "subnet_dict", "[", "space_id", "]", "=", "self", ".", "get_channel_mask", "(", "out_mask", ")", "\n", "", "return", "subnet_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.set_min_channel": [[59, 74], ["dict", "ratio_pruning.RatioPruner.channel_spaces.items", "ratio_pruning.RatioPruner.set_subnet", "out_mask.size", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "round"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet"], ["", "def", "set_min_channel", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set the number of channels each layer to minimum.\"\"\"", "\n", "subnet_dict", "=", "dict", "(", ")", "\n", "for", "space_id", ",", "out_mask", "in", "self", ".", "channel_spaces", ".", "items", "(", ")", ":", "\n", "            ", "out_channels", "=", "out_mask", ".", "size", "(", "1", ")", "\n", "random_ratio", "=", "self", ".", "min_ratio", "\n", "new_channels", "=", "int", "(", "round", "(", "out_channels", "*", "random_ratio", ")", ")", "\n", "assert", "new_channels", ">", "0", ",", "'Output channels should be a positive integer.'", "\n", "new_out_mask", "=", "torch", ".", "zeros_like", "(", "out_mask", ")", "\n", "new_out_mask", "[", ":", ",", ":", "new_channels", "]", "=", "1", "\n", "\n", "subnet_dict", "[", "space_id", "]", "=", "new_out_mask", "\n", "\n", "", "self", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.switch_subnet": [[75, 110], ["dict", "channel_cfg.items", "ratio_pruning.RatioPruner.set_subnet", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "ratio_pruning.RatioPruner.get_space_id", "isinstance", "torch.equal", "torch.equal", "torch.equal", "torch.equal"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_space_id"], ["", "def", "switch_subnet", "(", "self", ",", "channel_cfg", ",", "subnet_ind", "=", "None", ")", ":", "\n", "        ", "\"\"\"Switch the channel config of the supernet according to channel_cfg.\n\n        If we train more than one subnet together, we need to switch the\n        channel_cfg from one to another during one training iteration.\n\n        Args:\n            channel_cfg (dict): The channel config of a subnet. Key is space_id\n                and value is a dict which includes out_channels (and\n                in_channels if exists).\n            subnet_ind (int, optional): The index of the current subnet. If\n                we replace normal BatchNorm2d with ``SwitchableBatchNorm2d``,\n                we should switch the index of ``SwitchableBatchNorm2d`` when\n                switch subnet. Defaults to None.\n        \"\"\"", "\n", "subnet_dict", "=", "dict", "(", ")", "\n", "for", "name", ",", "channels_per_layer", "in", "channel_cfg", ".", "items", "(", ")", ":", "\n", "            ", "module", "=", "self", ".", "name2module", "[", "name", "]", "\n", "if", "(", "isinstance", "(", "module", ",", "SwitchableBatchNorm2d", ")", "\n", "and", "subnet_ind", "is", "not", "None", ")", ":", "\n", "# When switching bn we should switch index simultaneously", "\n", "                ", "module", ".", "index", "=", "subnet_ind", "\n", "continue", "\n", "\n", "", "out_channels", "=", "channels_per_layer", "[", "'out_channels'", "]", "\n", "out_mask", "=", "torch", ".", "zeros_like", "(", "module", ".", "out_mask", ")", "\n", "out_mask", "[", ":", ",", ":", "out_channels", "]", "=", "1", "\n", "\n", "space_id", "=", "self", ".", "get_space_id", "(", "name", ")", "\n", "if", "space_id", "in", "subnet_dict", ":", "\n", "                ", "assert", "torch", ".", "equal", "(", "subnet_dict", "[", "space_id", "]", ",", "out_mask", ")", "\n", "", "elif", "space_id", "is", "not", "None", ":", "\n", "                ", "subnet_dict", "[", "space_id", "]", "=", "out_mask", "\n", "\n", "", "", "self", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.convert_switchable_bn": [[111, 134], ["isinstance", "module.named_children", "utils.SwitchableBatchNorm2d", "utils.SwitchableBatchNorm2d.add_module", "ratio_pruning.RatioPruner.convert_switchable_bn"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.convert_switchable_bn"], ["", "def", "convert_switchable_bn", "(", "self", ",", "module", ",", "num_bns", ")", ":", "\n", "        ", "\"\"\"Convert normal ``nn.BatchNorm2d`` to ``SwitchableBatchNorm2d``.\n\n        Args:\n            module (:obj:`torch.nn.Module`): The module to be converted.\n            num_bns (int): The number of ``nn.BatchNorm2d`` in a\n                ``SwitchableBatchNorm2d``.\n\n        Return:\n            :obj:`torch.nn.Module`: The converted module. Each\n                ``nn.BatchNorm2d`` in this module has been converted to a\n                ``SwitchableBatchNorm2d``.\n        \"\"\"", "\n", "module_output", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module_output", "=", "SwitchableBatchNorm2d", "(", "module", ".", "num_features", ",", "num_bns", ")", "\n", "\n", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "            ", "module_output", ".", "add_module", "(", "\n", "name", ",", "self", ".", "convert_switchable_bn", "(", "child", ",", "num_bns", ")", ")", "\n", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.ops.base.BaseOP.__init__": [[14, 20], ["mmcv.runner.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["ctx", ".", "method_kwargs", "[", "method_str", "]", "=", "kwargs", "\n", "# TODO cover more usecases, not only pass teacher's outputs to", "\n", "# student.", "\n", "if", "ctx", ".", "is_teacher", ":", "\n", "# execute the raw function", "\n", "            ", "outputs", "=", "method", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# record outputs", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsPoolBN.__init__": [[13, 33], ["dict", "base.BaseOP.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "mmcv.cnn.build_norm_layer", "mmcv.cnn.bricks.DropPath", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "pool_type", ",", "\n", "kernel_size", "=", "3", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "use_drop_path", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DartsPoolBN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "if", "pool_type", "==", "'max'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "1", ")", "\n", "", "elif", "pool_type", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "\n", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "1", ",", "count_include_pad", "=", "False", ")", "\n", "", "self", ".", "bn", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "out_channels", ")", "[", "1", "]", "\n", "\n", "if", "use_drop_path", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "drop_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsPoolBN.forward": [[34, 41], ["darts_series.DartsPoolBN.pool", "darts_series.DartsPoolBN.bn", "darts_series.DartsPoolBN.drop_path"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pool", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "if", "self", ".", "drop_path", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "drop_path", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsDilConv.__init__": [[46, 75], ["dict", "base.BaseOP.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.bricks.DropPath", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "kernel_size", ",", "\n", "use_drop_path", "=", "False", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DartsDilConv", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "dilation", "=", "2", "\n", "assert", "self", ".", "kernel_size", "in", "[", "3", ",", "5", "]", "\n", "assert", "self", ".", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "(", "self", ".", "kernel_size", "//", "2", ")", "*", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "in_channels", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "in_channels", ")", "[", "1", "]", ")", "\n", "\n", "if", "use_drop_path", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "drop_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsDilConv.forward": [[76, 81], ["darts_series.DartsDilConv.conv1", "darts_series.DartsDilConv.drop_path"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "drop_path", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "drop_path", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsSepConv.__init__": [[86, 128], ["dict", "base.BaseOP.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.bricks.DropPath", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "kernel_size", ",", "\n", "use_drop_path", "=", "False", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DartsSepConv", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "assert", "self", ".", "kernel_size", "in", "[", "3", ",", "5", "]", "\n", "assert", "self", ".", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "kernel_size", "//", "2", ",", "\n", "groups", "=", "self", ".", "in_channels", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "in_channels", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "in_channels", ")", "[", "1", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ",", "\n", "self", ".", "kernel_size", ",", "\n", "1", ",", "\n", "self", ".", "kernel_size", "//", "2", ",", "\n", "groups", "=", "self", ".", "in_channels", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "out_channels", ",", "self", ".", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "out_channels", ")", "[", "1", "]", ")", "\n", "\n", "if", "use_drop_path", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "drop_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsSepConv.forward": [[129, 135], ["darts_series.DartsSepConv.conv1", "darts_series.DartsSepConv.conv2", "darts_series.DartsSepConv.drop_path"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "drop_path", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "drop_path", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsSkipConnect.__init__": [[141, 169], ["dict", "base.BaseOP.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.bricks.DropPath", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "use_drop_path", "=", "False", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DartsSkipConnect", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", "//", "2", ",", "\n", "1", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", "//", "2", ",", "\n", "1", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "out_channels", ")", "[", "1", "]", "\n", "\n", "", "if", "use_drop_path", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "drop_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsSkipConnect.forward": [[170, 181], ["darts_series.DartsSkipConnect.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "darts_series.DartsSkipConnect.bn", "darts_series.DartsSkipConnect.drop_path", "darts_series.DartsSkipConnect.conv1", "darts_series.DartsSkipConnect.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "if", "self", ".", "drop_path", "is", "not", "None", ":", "\n", "                ", "out", "=", "self", ".", "drop_path", "(", "out", ")", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsZero.__init__": [[186, 188], ["base.BaseOP.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DartsZero", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.darts_series.DartsZero.forward": [[189, 193], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.ops.shufflenet_series.ShuffleBlock.__init__": [[32, 113], ["dict", "dict", "base.BaseOP.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "kernel_size", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "assert", "kernel_size", "in", "[", "3", ",", "5", ",", "7", "]", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "branch_features", "=", "self", ".", "out_channels", "//", "2", "\n", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "assert", "self", ".", "in_channels", "==", "branch_features", "*", "2", ",", "(", "\n", "f'in_channels ({self.in_channels}) should equal to '", "\n", "f'branch_features * 2 ({branch_features * 2}) '", "\n", "'when stride is 1'", ")", "\n", "\n", "", "if", "self", ".", "in_channels", "!=", "branch_features", "*", "2", ":", "\n", "            ", "assert", "self", ".", "stride", "!=", "1", ",", "(", "\n", "f'stride ({self.stride}) should not equal 1 when '", "\n", "f'in_channels != branch_features * 2'", ")", "\n", "\n", "", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "groups", "=", "self", ".", "in_channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "ConvModule", "(", "\n", "branch_features", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "groups", "=", "branch_features", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", ",", "\n", "ConvModule", "(", "\n", "branch_features", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.shufflenet_series.ShuffleBlock.forward": [[114, 133], ["mmcls.models.utils.channel_shuffle", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "shufflenet_series.ShuffleBlock.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "if", "self", ".", "stride", ">", "1", ":", "\n", "                ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.shufflenet_series.ShuffleXception.__init__": [[153, 237], ["dict", "dict", "base.BaseOP.__init__", "shufflenet_series.ShuffleXception.branch2.append", "shufflenet_series.ShuffleXception.branch2.append", "shufflenet_series.ShuffleXception.branch2.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ShuffleXception", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "mid_channels", "=", "self", ".", "out_channels", "//", "2", "\n", "\n", "branch_features", "=", "self", ".", "out_channels", "//", "2", "\n", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "assert", "self", ".", "in_channels", "==", "branch_features", "*", "2", ",", "(", "\n", "f'in_channels ({self.in_channels}) should equal to '", "\n", "f'branch_features * 2 ({branch_features * 2}) '", "\n", "'when stride is 1'", ")", "\n", "\n", "", "if", "self", ".", "in_channels", "!=", "branch_features", "*", "2", ":", "\n", "            ", "assert", "self", ".", "stride", "!=", "1", ",", "(", "\n", "f'stride ({self.stride}) should not equal 1 when '", "\n", "f'in_channels != branch_features * 2'", ")", "\n", "\n", "", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "self", ".", "in_channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "branch2", "=", "[", "]", "\n", "\n", "self", ".", "branch2", ".", "append", "(", "\n", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "in_channels", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "\n", "self", ".", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dw_act_cfg", "=", "None", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", ")", "\n", "self", ".", "branch2", ".", "append", "(", "\n", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "mid_channels", ",", "\n", "self", ".", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dw_act_cfg", "=", "None", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "self", ".", "branch2", ".", "append", "(", "\n", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "mid_channels", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dw_act_cfg", "=", "None", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "branch2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.ops.shufflenet_series.ShuffleXception.forward": [[238, 257], ["mmcls.models.utils.channel_shuffle", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "shufflenet_series.ShuffleXception.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "if", "self", ".", "stride", ">", "1", ":", "\n", "                ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.__init__": [[15, 18], ["mmcv.runner.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["# TODO cover more usecases, not only pass teacher's outputs to", "\n", "# student.", "\n", "if", "ctx", ".", "is_teacher", ":", "\n", "# execute the raw function", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.prepare_from_supernet": [[19, 31], ["base.BaseMutator.build_search_spaces", "base.BaseMutator.convert_placeholder"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.build_search_spaces", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.convert_placeholder"], ["            ", "outputs", "=", "method", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# record outputs", "\n", "ctx", ".", "method_return", "[", "method_str", "]", "=", "outputs", "\n", "", "else", ":", "\n", "# modify student's outputs to be same with teacher", "\n", "            ", "outputs", "=", "ctx", ".", "method_return", "[", "method_str", "]", "\n", "\n", "", "return", "outputs", "\n", "\n", "", "return", "wrapper", "\n", "\n", "\n", "", "class", "FunctionContext", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.build_search_spaces": [[32, 61], ["dict", "base.BaseMutator.build_search_spaces.traverse"], "methods", ["None"], ["    ", "\"\"\"Function context manager for rewrite function.\n\n    Args:\n        ctx (ConversionContext): The distiller's overall context manager.\n        method (str): The name of the function to rewrite.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "ctx", ",", "method", ",", "import_module", "=", "None", ")", ":", "\n", "        ", "self", ".", "ctx", "=", "ctx", "\n", "\n", "self", ".", "import_module", "=", "import_modules_from_strings", "(", "import_module", ")", "\n", "self", ".", "method_str", "=", "method", "\n", "self", ".", "method_exec_str", "=", "f'self.import_module.{method}'", "\n", "\n", "", "def", "_set_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"Modify a function.\"\"\"", "\n", "exec", "(", "f'{self.method_exec_str} = method'", ")", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Rewrite the function.\"\"\"", "\n", "self", ".", "method_impl", "=", "eval", "(", "self", ".", "method_exec_str", ")", "\n", "\n", "if", "self", ".", "method_impl", ":", "\n", "            ", "self", ".", "_set_method", "(", "\n", "function_wrapper", "(", "self", ".", "ctx", ",", "self", ".", "method_impl", ",", "self", ".", "method_str", ",", "\n", "self", ".", "align_mode", ")", ")", "\n", "\n", "", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "\"\"\"Restore the function.\"\"\"", "\n", "if", "self", ".", "method_impl", ":", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.convert_placeholder": [[62, 100], ["base.BaseMutator.build_search_spaces.traverse"], "methods", ["None"], ["            ", "self", ".", "_set_method", "(", "self", ".", "method_impl", ")", "\n", "\n", "\n", "", "", "", "class", "ConversionContext", "(", ")", ":", "\n", "    ", "\"\"\"Context manager for record functions' inputs or outputs.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "hooks", ")", ":", "\n", "# save functions' inputs", "\n", "        ", "self", ".", "method_args", "=", "dict", "(", ")", "\n", "self", ".", "method_kwargs", "=", "dict", "(", ")", "\n", "# save functions' outputs", "\n", "self", ".", "method_return", "=", "dict", "(", ")", "\n", "\n", "# Each function will have a sub context manager, the function will be", "\n", "# rewritten when enter the sub context manager.", "\n", "self", ".", "hooks", "=", "[", "]", "\n", "self", ".", "is_teacher", "=", "True", "\n", "for", "hook", "in", "hooks", ":", "\n", "            ", "self", ".", "hooks", ".", "append", "(", "FunctionContext", "(", "self", ",", "**", "hook", ")", ")", "\n", "\n", "", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Enter every sub context managers.\"\"\"", "\n", "for", "hook", "in", "self", ".", "hooks", ":", "\n", "            ", "hook", ".", "__enter__", "(", ")", "\n", "", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "\"\"\"Exit every sub context managers.\"\"\"", "\n", "for", "hook", "in", "self", ".", "hooks", ":", "\n", "            ", "hook", ".", "__exit__", "(", "exc_type", ",", "exc_value", ",", "traceback", ")", "\n", "\n", "\n", "", "", "", "class", "BaseDistiller", "(", "BaseModule", ",", "metaclass", "=", "ABCMeta", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet": [[101, 126], ["base.BaseMutator.build_search_spaces.traverse"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "align_methods", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseDistiller", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "align_methods", "is", "None", ":", "\n", "            ", "self", ".", "context_manager", "=", "None", "\n", "", "else", ":", "\n", "# To obtain the python function's outputs, there will build a", "\n", "# specific context manager. When enter the context manager, the", "\n", "# functions will be rewrite. The context manager could record", "\n", "# inputs or outputs of the functions , and pass from teachr to", "\n", "# student. When exit the context manager, the rewritten functions", "\n", "# will restore.", "\n", "            ", "self", ".", "context_manager", "=", "ConversionContext", "(", "align_methods", ")", "\n", "\n", "", "", "@", "abstractmethod", "\n", "def", "prepare_from_student", "(", "self", ",", "supernet", ")", ":", "\n", "        ", "\"\"\"Register forward hooks to students and teachers.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.__init__": [[17, 19], ["base.BaseMutator.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet": [[20, 31], ["super().prepare_from_supernet", "differentiable_mutator.DifferentiableMutator.build_arch_params", "differentiable_mutator.DifferentiableMutator.modify_supernet_forward"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.build_arch_params", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.modify_supernet_forward"], ["", "def", "prepare_from_supernet", "(", "self", ",", "supernet", ")", ":", "\n", "        ", "\"\"\"Inherit from ``BaseMutator``'s, execute some customized functions\n        exclude implementing origin ``prepare_from_supernet``.\n\n        Args:\n            supernet (:obj:`torch.nn.Module`): The architecture to be used\n                in your algorithm.\n        \"\"\"", "\n", "super", "(", ")", ".", "prepare_from_supernet", "(", "supernet", ")", "\n", "self", ".", "arch_params", "=", "self", ".", "build_arch_params", "(", "supernet", ")", "\n", "self", ".", "modify_supernet_forward", "(", "supernet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.build_arch_params": [[32, 68], ["torch.nn.ParameterDict", "differentiable_mutator.DifferentiableMutator.build_arch_params.traverse"], "methods", ["None"], ["", "def", "build_arch_params", "(", "self", ",", "supernet", ")", ":", "\n", "        ", "\"\"\"This function will build many arch params, which are generally used\n        in diffirentiale search algorithms, such as Darts' series. Each\n        space_id corresponds to an arch param, so the Mutable with the same\n        space_id share the same arch param.\n\n        Args:\n            supernet (:obj:`torch.nn.Module`): The architecture to be used\n                in your algorithm.\n\n        Returns:\n            torch.nn.ParameterDict: the arch params are got after traversing\n                the supernet.\n        \"\"\"", "\n", "\n", "arch_params", "=", "nn", ".", "ParameterDict", "(", ")", "\n", "\n", "# Traverse all the child modules of the model. If a child module is an", "\n", "# Space instance and its space_id is not recorded, call its", "\n", "# :func:'build_space_architecture' and record the return value. If not,", "\n", "# pass.", "\n", "def", "traverse", "(", "module", ")", ":", "\n", "            ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "\n", "                ", "if", "isinstance", "(", "child", ",", "MutableModule", ")", ":", "\n", "                    ", "space_id", "=", "child", ".", "space_id", "\n", "if", "space_id", "not", "in", "arch_params", ":", "\n", "                        ", "space_arch_param", "=", "child", ".", "build_arch_param", "(", ")", "\n", "if", "space_arch_param", "is", "not", "None", ":", "\n", "                            ", "arch_params", "[", "space_id", "]", "=", "space_arch_param", "\n", "\n", "", "", "", "traverse", "(", "child", ")", "\n", "\n", "", "", "traverse", "(", "supernet", ")", "\n", "\n", "return", "arch_params", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.modify_supernet_forward": [[69, 92], ["differentiable_mutator.DifferentiableMutator.build_arch_params.traverse"], "methods", ["None"], ["", "def", "modify_supernet_forward", "(", "self", ",", "supernet", ")", ":", "\n", "        ", "\"\"\"Modify the supernet's default value in forward. Traverse all child\n        modules of the model, modify the supernet's default value in\n        :func:'forward' of each Space.\n\n        Args:\n            supernet (:obj:`torch.nn.Module`): The architecture to be used\n                in your algorithm.\n        \"\"\"", "\n", "\n", "def", "traverse", "(", "module", ")", ":", "\n", "            ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "\n", "                ", "if", "isinstance", "(", "child", ",", "MutableModule", ")", ":", "\n", "                    ", "if", "child", ".", "space_id", "in", "self", ".", "arch_params", ".", "keys", "(", ")", ":", "\n", "                        ", "space_id", "=", "child", ".", "space_id", "\n", "space_arch_param", "=", "self", ".", "arch_params", "[", "space_id", "]", "\n", "child", ".", "forward", "=", "partial", "(", "\n", "child", ".", "forward", ",", "arch_param", "=", "space_arch_param", ")", "\n", "\n", "", "", "traverse", "(", "child", ")", "\n", "\n", "", "", "traverse", "(", "supernet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.search_subnet": [[93, 96], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "search_subnet", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.darts_mutator.DartsMutator.__init__": [[13, 16], ["differentiable_mutator.DifferentiableMutator.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_choices", "=", "(", "'zero'", ",", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "ignore_choices", "=", "ignore_choices", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.darts_mutator.DartsMutator.search_subnet": [[17, 54], ["dict", "darts_mutator.DartsMutator.search_spaces.items", "darts_mutator.DartsMutator.search_spaces.items", "torch.nn.functional.softmax", "torch.max", "dict", "list", "dict", "sorted", "dict.pop", "enumerate", "best_choice_idx.item", "best_choice_prob.item"], "methods", ["None"], ["", "def", "search_subnet", "(", "self", ")", ":", "\n", "\n", "        ", "subnet_dict", "=", "dict", "(", ")", "\n", "for", "space_id", ",", "sub_space", "in", "self", ".", "search_spaces", ".", "items", "(", ")", ":", "\n", "            ", "if", "space_id", "in", "self", ".", "arch_params", ":", "\n", "                ", "space_arch_param", "=", "self", ".", "arch_params", "[", "space_id", "]", "\n", "arch_probs", "=", "F", ".", "softmax", "(", "space_arch_param", ",", "dim", "=", "-", "1", ")", "\n", "choice_names", "=", "sub_space", "[", "'choice_names'", "]", "\n", "keep_idx", "=", "[", "\n", "i", "for", "i", ",", "name", "in", "enumerate", "(", "choice_names", ")", "\n", "if", "name", "not", "in", "self", ".", "ignore_choices", "\n", "]", "\n", "best_choice_prob", ",", "best_choice_idx", "=", "torch", ".", "max", "(", "\n", "arch_probs", "[", "keep_idx", "]", ",", "0", ")", "\n", "best_choice_idx", "=", "keep_idx", "[", "best_choice_idx", ".", "item", "(", ")", "]", "\n", "best_choice_name", "=", "choice_names", "[", "best_choice_idx", "]", "\n", "\n", "subnet_dict", "[", "space_id", "]", "=", "dict", "(", "\n", "chosen", "=", "[", "best_choice_name", "]", ",", "\n", "chosen_probs", "=", "[", "best_choice_prob", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "", "def", "sort_key", "(", "x", ")", ":", "\n", "            ", "return", "subnet_dict", "[", "x", "]", "[", "'chosen_probs'", "]", "[", "0", "]", "\n", "\n", "", "for", "space_id", ",", "sub_space", "in", "self", ".", "search_spaces", ".", "items", "(", ")", ":", "\n", "            ", "if", "space_id", "not", "in", "self", ".", "arch_params", ":", "\n", "                ", "num_chosen", "=", "sub_space", "[", "'num_chosen'", "]", "\n", "choice_names", "=", "sub_space", "[", "'choice_names'", "]", "\n", "sorted_edges", "=", "list", "(", "\n", "sorted", "(", "choice_names", ",", "key", "=", "sort_key", ",", "reverse", "=", "True", ")", ")", "\n", "chosen", "=", "sorted_edges", "[", ":", "num_chosen", "]", "\n", "subnet_dict", "[", "space_id", "]", "=", "dict", "(", "chosen", "=", "chosen", ")", "\n", "\n", "for", "not_chosen", "in", "sorted_edges", "[", "num_chosen", ":", "]", ":", "\n", "                    ", "subnet_dict", ".", "pop", "(", "not_chosen", ")", "\n", "\n", "", "", "", "return", "subnet_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.__init__": [[18, 20], ["base.BaseMutator.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.get_random_mask": [[21, 42], ["torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "torch.broadcast", "torch.broadcast", "space_mask.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_random_mask", "(", "space_info", ",", "searching", ")", ":", "\n", "        ", "\"\"\"Generate random mask for randomly sampling.\n\n        Args:\n            space_info (dict): Record the information of the space need\n                to sample.\n            searching (bool): Whether is in search stage.\n\n        Returns:\n            torch.Tensor: Random mask generated.\n        \"\"\"", "\n", "space_mask", "=", "space_info", "[", "'space_mask'", "]", "\n", "num_chosen", "=", "space_info", "[", "'num_chosen'", "]", "\n", "assert", "num_chosen", "<=", "space_mask", ".", "size", "(", ")", "[", "0", "]", "\n", "choice_idx", "=", "torch", ".", "multinomial", "(", "space_mask", ",", "num_chosen", ")", "\n", "choice_mask", "=", "torch", ".", "zeros_like", "(", "space_mask", ")", "\n", "choice_mask", "[", "choice_idx", "]", "=", "1", "\n", "if", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", "and", "not", "searching", ":", "\n", "            ", "dist", ".", "broadcast", "(", "choice_mask", ",", "src", "=", "0", ")", "\n", "", "return", "choice_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet": [[43, 59], ["dict", "one_shot_mutator.OneShotMutator.search_spaces.items", "one_shot_mutator.OneShotMutator.get_random_mask"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.get_random_mask"], ["", "def", "sample_subnet", "(", "self", ",", "searching", "=", "False", ")", ":", "\n", "        ", "\"\"\"Random sample subnet by random mask.\n\n        Args:\n            searching (bool): Whether is in search stage.\n\n        Returns:\n            dict: Record the information to build the subnet from the supernet,\n                its keys are the properties ``space_id`` of placeholders in the\n                mutator's search spaces,\n                its values are random mask generated.\n        \"\"\"", "\n", "subnet_dict", "=", "dict", "(", ")", "\n", "for", "space_id", ",", "space_info", "in", "self", ".", "search_spaces", ".", "items", "(", ")", ":", "\n", "            ", "subnet_dict", "[", "space_id", "]", "=", "self", ".", "get_random_mask", "(", "space_info", ",", "searching", ")", "\n", "", "return", "subnet_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet": [[60, 84], ["one_shot_mutator.OneShotMutator.search_spaces.items", "enumerate", "module.choices.values", "choice.apply", "choice.apply", "functools.partial", "functools.partial"], "methods", ["None"], ["", "def", "set_subnet", "(", "self", ",", "subnet_dict", ")", ":", "\n", "        ", "\"\"\"Setting subnet in the supernet based on the result of\n        ``sample_subnet`` by changing the flag: ``in_subnet``, which is easy to\n        implement some operations for subnet, such as ``forward``, calculate\n        flops and so on.\n\n        Args:\n            subnet_dict (dict): Record the information to build the subnet\n                from the supernet,\n                its keys are the properties ``space_id`` of placeholders in the\n                mutator's search spaces,\n                its values are masks.\n        \"\"\"", "\n", "for", "space_id", ",", "space_info", "in", "self", ".", "search_spaces", ".", "items", "(", ")", ":", "\n", "            ", "choice_mask", "=", "subnet_dict", "[", "space_id", "]", "\n", "for", "module", "in", "space_info", "[", "'modules'", "]", ":", "\n", "                ", "module", ".", "choice_mask", "=", "choice_mask", "\n", "for", "i", ",", "choice", "in", "enumerate", "(", "module", ".", "choices", ".", "values", "(", ")", ")", ":", "\n", "                    ", "if", "choice_mask", "[", "i", "]", ":", "\n", "                        ", "choice", ".", "apply", "(", "\n", "partial", "(", "self", ".", "reset_in_subnet", ",", "in_subnet", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                        ", "choice", ".", "apply", "(", "\n", "partial", "(", "self", ".", "reset_in_subnet", ",", "in_subnet", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.reset_in_subnet": [[85, 95], ["None"], "methods", ["None"], ["", "", "", "", "", "@", "staticmethod", "\n", "def", "reset_in_subnet", "(", "m", ",", "in_subnet", "=", "True", ")", ":", "\n", "        ", "\"\"\"Reset the module's attribution.\n\n        Args:\n            m (:obj:`torch.nn.Module`): The module in the supernet.\n            in_subnet (bool): If the module in subnet, set ``in_subnet`` to\n                True, otherwise set to False.\n        \"\"\"", "\n", "m", ".", "__in_subnet__", "=", "in_subnet", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_chosen_subnet": [[96, 110], ["subnet_dict.items", "enumerate", "mask.tolist"], "methods", ["None"], ["", "def", "set_chosen_subnet", "(", "self", ",", "subnet_dict", ")", ":", "\n", "        ", "\"\"\"Set chosen subnet in the search_spaces after searching stage.\n\n        Args:\n            subnet_dict (dict): Record the information to build the subnet from\n                the supernet,\n                its keys are the properties ``space_id`` of placeholders in the\n                mutator's search spaces,\n                its values are masks.\n        \"\"\"", "\n", "for", "space_id", ",", "mask", "in", "subnet_dict", ".", "items", "(", ")", ":", "\n", "            ", "idxs", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "mask", ".", "tolist", "(", ")", ")", "if", "x", "==", "1.0", "]", "\n", "self", ".", "search_spaces", "[", "space_id", "]", "[", "'chosen'", "]", "=", "[", "\n", "self", ".", "search_spaces", "[", "space_id", "]", "[", "'choice_names'", "]", "[", "i", "]", "for", "i", "in", "idxs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.mutation": [[112, 131], ["copy.deepcopy", "subnet_dict.items", "numpy.random.random_sample", "one_shot_mutator.OneShotMutator.get_random_mask"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.get_random_mask"], ["", "", "def", "mutation", "(", "self", ",", "subnet_dict", ",", "prob", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"Mutation used in evolution search.\n\n        Args:\n            subnet_dict (dict): Record the information to build the subnet\n                from the supernet, its keys are the properties ``space_id``\n                of placeholders in the mutator's search spaces, its values\n                are masks.\n            prob (float): The probability of mutation.\n\n        Returns:\n            dict: A new subnet_dict after mutation.\n        \"\"\"", "\n", "mutation_subnet_dict", "=", "copy", ".", "deepcopy", "(", "subnet_dict", ")", "\n", "for", "name", ",", "mask", "in", "subnet_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "np", ".", "random", ".", "random_sample", "(", ")", "<", "prob", ":", "\n", "                ", "mutation_subnet_dict", "[", "name", "]", "=", "self", ".", "get_random_mask", "(", "\n", "self", ".", "search_spaces", "[", "name", "]", ",", "searching", "=", "True", ")", "\n", "", "", "return", "mutation_subnet_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.crossover": [[132, 156], ["copy.deepcopy", "subnet_dict2.items", "numpy.random.random_sample"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "crossover", "(", "subnet_dict1", ",", "subnet_dict2", ")", ":", "\n", "        ", "\"\"\"Crossover used in evolution search.\n\n        Args:\n            subnet_dict1 (dict): Record the information to build the subnet\n                from the supernet,\n                its keys are the properties ``space_id`` of placeholders in the\n                mutator's search spaces,\n                its values are masks.\n            subnet_dict2 (dict): Record the information to build the subnet\n                from the supernet,\n                its keys are the properties ``space_id`` of placeholders in the\n                mutator's search spaces,\n                its values are masks.\n\n        Returns:\n            dict: A new subnet_dict after crossover.\n        \"\"\"", "\n", "crossover_subnet_dict", "=", "copy", ".", "deepcopy", "(", "subnet_dict1", ")", "\n", "for", "name", ",", "mask", "in", "subnet_dict2", ".", "items", "(", ")", ":", "\n", "            ", "if", "np", ".", "random", ".", "random_sample", "(", ")", "<", "0.5", ":", "\n", "                ", "crossover_subnet_dict", "[", "name", "]", "=", "mask", "\n", "", "", "return", "crossover_subnet_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.__init__": [[14, 17], ["mmcv.runner.BaseModule.__init__", "mmcv.cnn.MODELS.build"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["ctx", ".", "method_kwargs", "[", "method_str", "]", "=", "kwargs", "\n", "# TODO cover more usecases, not only pass teacher's outputs to", "\n", "# student.", "\n", "if", "ctx", ".", "is_teacher", ":", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.forward_dummy": [[18, 22], ["hasattr", "base.BaseArchitecture.model.forward_dummy"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.architectures.mmcls.MMClsArchitecture.forward_dummy"], ["# execute the raw function", "\n", "            ", "outputs", "=", "method", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# record outputs", "\n", "ctx", ".", "method_return", "[", "method_str", "]", "=", "outputs", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.forward": [[23, 34], ["base.BaseArchitecture.model"], "methods", ["None"], ["# modify student's outputs to be same with teacher", "\n", "            ", "outputs", "=", "ctx", ".", "method_return", "[", "method_str", "]", "\n", "\n", "", "return", "outputs", "\n", "\n", "", "return", "wrapper", "\n", "\n", "\n", "", "class", "FunctionContext", "(", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.simple_test": [[35, 38], ["base.BaseArchitecture.model.simple_test"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.simple_test"], ["\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.show_result": [[39, 42], ["base.BaseArchitecture.model.show_result"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.show_result"], ["def", "__init__", "(", "self", ",", "ctx", ",", "method", ",", "import_module", "=", "None", ")", ":", "\n", "        ", "self", ".", "ctx", "=", "ctx", "\n", "\n", "self", ".", "import_module", "=", "import_modules_from_strings", "(", "import_module", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmdet.MMDetArchitecture.__init__": [[11, 13], ["base.BaseArchitecture.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MMDetArchitecture", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmdet.MMDetArchitecture.cal_pseudo_loss": [[14, 21], ["sum", "level.sum"], "methods", ["None"], ["", "def", "cal_pseudo_loss", "(", "self", ",", "pseudo_img", ")", ":", "\n", "        ", "\"\"\"Used for executing ``forward`` with pseudo_img.\"\"\"", "\n", "out", "=", "0.", "\n", "for", "levels", "in", "pseudo_img", ":", "\n", "            ", "out", "+=", "sum", "(", "[", "level", ".", "sum", "(", ")", "for", "level", "in", "levels", "]", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmcls.MMClsArchitecture.__init__": [[10, 12], ["base.BaseArchitecture.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MMClsArchitecture", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmcls.MMClsArchitecture.forward_dummy": [[13, 22], ["mmcls.MMClsArchitecture.model.named_children", "child.fc", "child"], "methods", ["None"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Used for calculating network flops.\"\"\"", "\n", "output", "=", "img", "\n", "for", "name", ",", "child", "in", "self", ".", "model", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "==", "'head'", ":", "\n", "                ", "output", "=", "child", ".", "fc", "(", "output", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "child", "(", "output", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmcls.MMClsArchitecture.cal_pseudo_loss": [[23, 26], ["sum"], "methods", ["None"], ["", "def", "cal_pseudo_loss", "(", "self", ",", "pseudo_img", ")", ":", "\n", "        ", "\"\"\"Used for executing ``forward`` with pseudo_img.\"\"\"", "\n", "return", "sum", "(", "pseudo_img", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.architectures.mmseg.MMSegArchitecture.__init__": [[10, 12], ["base.BaseArchitecture.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MMSegArchitecture", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.heads.darts_head.DartsSubnetClsHead.__init__": [[13, 17], ["mmcls.models.heads.LinearClsHead.__init__", "torch.nn.Linear", "mmcls.models.build_loss"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_loss"], ["    ", "def", "__init__", "(", "self", ",", "aux_in_channels", ",", "aux_loss", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DartsSubnetClsHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "aux_linear", "=", "nn", ".", "Linear", "(", "aux_in_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "compute_aux_loss", "=", "build_loss", "(", "aux_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.heads.darts_head.DartsSubnetClsHead.forward_train": [[18, 34], ["super().forward_train", "mmrazor.models.utils.add_prefix", "darts_head.DartsSubnetClsHead.aux_linear", "len", "darts_head.DartsSubnetClsHead.compute_aux_loss", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_train", "home.repos.pwc.inspect_result.hunto_maskd.utils.misc.add_prefix"], ["", "def", "forward_train", "(", "self", ",", "x", ",", "gt_label", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "losses", "=", "super", "(", ")", ".", "forward_train", "(", "x", ",", "gt_label", ",", "**", "kwargs", ")", "\n", "losses", "=", "add_prefix", "(", "losses", ",", "'subnet'", ")", "\n", "\n", "assert", "isinstance", "(", "x", ",", "tuple", ")", "and", "len", "(", "x", ")", ">", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "\n", "cls_score", "=", "self", ".", "aux_linear", "(", "x", ")", "\n", "num_samples", "=", "len", "(", "cls_score", ")", "\n", "aux_loss", "=", "self", ".", "compute_aux_loss", "(", "\n", "cls_score", ",", "gt_label", ",", "avg_factor", "=", "num_samples", ",", "**", "kwargs", ")", "\n", "\n", "losses", "[", "'aux_head.loss'", "]", "=", "aux_loss", "\n", "\n", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.heads.no_bias_fc_head.LinearNoBiasClsHead.__init__": [[10, 13], ["mmcls.models.heads.LinearClsHead.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LinearNoBiasClsHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2.__init__": [[37, 93], ["dict", "dict", "mmcls.models.backbones.base_backbone.BaseBackbone.__init__", "mmcv.cnn.ConvModule", "torch.ModuleList", "enumerate", "round", "round", "round", "round", "searchable_shufflenet_v2.SearchableShuffleNetV2._make_layer", "searchable_shufflenet_v2.SearchableShuffleNetV2.layers.append", "searchable_shufflenet_v2.SearchableShuffleNetV2.layers.append", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "stem_multiplier", "=", "1", ",", "\n", "widen_factor", "=", "1.0", ",", "\n", "out_indices", "=", "(", "4", ",", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "with_last_layer", "=", "True", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SearchableShuffleNetV2", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "stage_blocks", "=", "[", "4", ",", "4", ",", "8", ",", "4", "]", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "channels", "=", "[", "\n", "round", "(", "64", "*", "self", ".", "widen_factor", ")", ",", "\n", "round", "(", "160", "*", "self", ".", "widen_factor", ")", ",", "\n", "round", "(", "320", "*", "self", ".", "widen_factor", ")", ",", "\n", "round", "(", "640", "*", "self", ".", "widen_factor", ")", "\n", "]", "\n", "last_channels", "=", "1024", "\n", "\n", "self", ".", "in_channels", "=", "16", "*", "stem_multiplier", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", "=", "3", ",", "\n", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "layer", "=", "self", ".", "_make_layer", "(", "channels", "[", "i", "]", ",", "num_blocks", ",", "i", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "if", "with_last_layer", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "last_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2._make_layer": [[94, 119], ["range", "torch.Sequential", "layers.append", "utils.Placeholder", "dict"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ",", "stage_idx", ")", ":", "\n", "        ", "\"\"\"Stack blocks to make a layer.\n\n        Args:\n            out_channels (int): out_channels of the block.\n            num_blocks (int): number of blocks.\n            stage_idx (int): used in ``space_id``.\n        Returns:\n            torch.nn.Sequential: The layer made.\n        \"\"\"", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "layers", ".", "append", "(", "\n", "Placeholder", "(", "\n", "group", "=", "'all_blocks'", ",", "\n", "space_id", "=", "f'stage_{stage_idx}_block_{i}'", ",", "\n", "choice_args", "=", "dict", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "stride", "=", "stride", ",", "\n", ")", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2._freeze_stages": [[120, 131], ["range", "searchable_shufflenet_v2.SearchableShuffleNetV2.conv1.parameters", "m.eval", "m.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "\"\"\"Freeze params not to update in the specified stages.\"\"\"", "\n", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "frozen_stages", ")", ":", "\n", "            ", "m", "=", "self", ".", "layers", "[", "i", "]", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2.init_weights": [[132, 152], ["super().init_weights", "searchable_shufflenet_v2.SearchableShuffleNetV2.named_modules", "isinstance", "isinstance", "isinstance", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.constant_init", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Init weights of ``SearchableShuffleNetV2``.\"\"\"", "\n", "super", "(", "SearchableShuffleNetV2", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "\n", "if", "(", "isinstance", "(", "self", ".", "init_cfg", ",", "dict", ")", "\n", "and", "self", ".", "init_cfg", "[", "'type'", "]", "==", "'Pretrained'", ")", ":", "\n", "# Suppress default init if use pretrained model.", "\n", "            ", "return", "\n", "\n", "", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "'conv1'", "in", "name", ":", "\n", "                    ", "normal_init", "(", "m", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "", "else", ":", "\n", "                    ", "normal_init", "(", "m", ",", "mean", "=", "0", ",", "std", "=", "1.0", "/", "m", ".", "weight", ".", "shape", "[", "1", "]", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "constant_init", "(", "m", ",", "val", "=", "1", ",", "bias", "=", "0.0001", ")", "\n", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "if", "m", ".", "running_mean", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "running_mean", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2.forward": [[153, 169], ["searchable_shufflenet_v2.SearchableShuffleNetV2.conv1", "enumerate", "tuple", "layer", "outs.append"], "methods", ["None"], ["", "", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward computation.\n\n        Args:\n            x (tensor | tuple[tensor]): x could be a Torch.tensor or a tuple of\n                Torch.tensor, containing input data for forward computation.\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2.train": [[170, 182], ["super().train", "searchable_shufflenet_v2.SearchableShuffleNetV2._freeze_stages", "searchable_shufflenet_v2.SearchableShuffleNetV2.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.train", "home.repos.pwc.inspect_result.hunto_maskd.backbones.searchable_shufflenet_v2.SearchableShuffleNetV2._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Set module status before forward computation.\n\n        Args:\n            mode (bool): Whether it is train_mode or test_mode\n        \"\"\"", "\n", "super", "(", "SearchableShuffleNetV2", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.FactorizedReduce.__init__": [[14, 40], ["dict", "dict", "torch.Module.__init__", "mmcv.cnn.build_activation_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "relu", "=", "build_activation_layer", "(", "self", ".", "act_cfg", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", "//", "2", ",", "\n", "1", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", "//", "2", ",", "\n", "1", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "out_channels", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.FactorizedReduce.forward": [[41, 46], ["darts_backbone.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "darts_backbone.FactorizedReduce.bn", "darts_backbone.FactorizedReduce.conv1", "darts_backbone.FactorizedReduce.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.StandardConv.__init__": [[53, 79], ["dict", "dict", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "mmcv.cnn.build_activation_layer", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "build_activation_layer", "(", "self", ".", "act_cfg", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "out_channels", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.StandardConv.forward": [[80, 82], ["darts_backbone.StandardConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.Node.__init__": [[86, 110], ["torch.Module.__init__", "torch.ModuleDict", "torch.ModuleDict", "range", "utils.Placeholder", "torch.ModuleDict.add_module", "torch.Sequential", "torch.Sequential", "utils.Placeholder", "dict"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_id", ",", "num_prev_nodes", ",", "channels", ",", "\n", "num_downsample_nodes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "num_prev_nodes", ")", ":", "\n", "            ", "if", "i", "<", "num_downsample_nodes", ":", "\n", "                ", "stride", "=", "2", "\n", "", "else", ":", "\n", "                ", "stride", "=", "1", "\n", "\n", "", "edge_id", "=", "'{}_p{}'", ".", "format", "(", "node_id", ",", "i", ")", "\n", "edges", ".", "add_module", "(", "\n", "edge_id", ",", "\n", "nn", ".", "Sequential", "(", "\n", "Placeholder", "(", "\n", "group", "=", "'node'", ",", "\n", "space_id", "=", "edge_id", ",", "\n", "choice_args", "=", "dict", "(", "\n", "stride", "=", "stride", ",", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "channels", ")", ")", ",", ")", ")", "\n", "\n", "", "self", ".", "edges", "=", "Placeholder", "(", "\n", "group", "=", "'node_edge'", ",", "space_id", "=", "node_id", ",", "choices", "=", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.Node.forward": [[111, 113], ["darts_backbone.Node.edges"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prev_nodes", ")", ":", "\n", "        ", "return", "self", ".", "edges", "(", "prev_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.Cell.__init__": [[117, 155], ["dict", "dict", "torch.Module.__init__", "darts_backbone.StandardConv", "torch.ModuleList", "torch.ModuleList", "range", "darts_backbone.FactorizedReduce", "darts_backbone.StandardConv", "darts_backbone.Cell.nodes.append", "darts_backbone.Node"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "channels", ",", "\n", "prev_channels", ",", "\n", "prev_prev_channels", ",", "\n", "reduction", ",", "\n", "prev_reduction", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "\n", "# If previous cell is reduction cell, current input size does not match", "\n", "# with output size of cell[k-2]. So the output[k-2] should be reduced", "\n", "# by preprocessing.", "\n", "if", "prev_reduction", ":", "\n", "            ", "self", ".", "preproc0", "=", "FactorizedReduce", "(", "prev_prev_channels", ",", "channels", ",", "\n", "self", ".", "act_cfg", ",", "self", ".", "norm_cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preproc0", "=", "StandardConv", "(", "prev_prev_channels", ",", "channels", ",", "1", ",", "1", ",", "0", ",", "\n", "self", ".", "act_cfg", ",", "self", ".", "norm_cfg", ")", "\n", "", "self", ".", "preproc1", "=", "StandardConv", "(", "prev_channels", ",", "channels", ",", "1", ",", "1", ",", "0", ",", "\n", "self", ".", "act_cfg", ",", "self", ".", "norm_cfg", ")", "\n", "\n", "# generate dag", "\n", "self", ".", "nodes", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "depth", "in", "range", "(", "2", ",", "self", ".", "num_nodes", "+", "2", ")", ":", "\n", "            ", "if", "reduction", ":", "\n", "                ", "node_id", "=", "f'reduce_n{depth}'", "\n", "num_downsample_nodes", "=", "2", "\n", "", "else", ":", "\n", "                ", "node_id", "=", "f'normal_n{depth}'", "\n", "num_downsample_nodes", "=", "0", "\n", "", "self", ".", "nodes", ".", "append", "(", "\n", "Node", "(", "node_id", ",", "depth", ",", "channels", ",", "num_downsample_nodes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.Cell.forward": [[156, 166], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "darts_backbone.Cell.preproc0", "darts_backbone.Cell.preproc1", "node", "tensors.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ")", ":", "\n", "# s0, s1 are the outputs of previous previous cell and previous cell,", "\n", "# respectively.", "\n", "        ", "tensors", "=", "[", "self", ".", "preproc0", "(", "s0", ")", ",", "self", ".", "preproc1", "(", "s1", ")", "]", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "            ", "cur_tensor", "=", "node", "(", "tensors", ")", "\n", "tensors", ".", "append", "(", "cur_tensor", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "tensors", "[", "2", ":", "]", ",", "dim", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.AuxiliaryModule.__init__": [[171, 190], ["dict", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "base_channels", ",", "\n", "out_channels", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "\n", "count_include_pad", "=", "False", ")", ",", "# 2x2 out", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "base_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "base_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "base_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "\n", "bias", "=", "False", ")", ",", "# 1x1 out", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.AuxiliaryModule.forward": [[191, 193], ["darts_backbone.AuxiliaryModule.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.DartsBackbone.__init__": [[198, 268], ["dict", "dict", "torch.Module.__init__", "copy.deepcopy", "copy.deepcopy.update", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "dict", "torch.Conv2d", "torch.Conv2d", "darts_backbone.Cell", "darts_backbone.DartsBackbone.cells.append", "mmcv.cnn.build_norm_layer", "darts_backbone.AuxiliaryModule"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "base_channels", ",", "\n", "num_layers", "=", "8", ",", "\n", "num_nodes", "=", "4", ",", "\n", "stem_multiplier", "=", "3", ",", "\n", "out_indices", "=", "(", "7", ",", ")", ",", "\n", "auxliary", "=", "False", ",", "\n", "aux_channels", "=", "None", ",", "\n", "aux_out_channels", "=", "None", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "stem_multiplier", "=", "stem_multiplier", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "self", ".", "out_indices", "[", "-", "1", "]", "==", "self", ".", "num_layers", "-", "1", "\n", "if", "auxliary", ":", "\n", "            ", "assert", "aux_channels", "is", "not", "None", "\n", "assert", "aux_out_channels", "is", "not", "None", "\n", "self", ".", "aux_channels", "=", "aux_channels", "\n", "self", ".", "aux_out_channels", "=", "aux_out_channels", "\n", "self", ".", "auxliary_indice", "=", "2", "*", "self", ".", "num_layers", "//", "3", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "auxliary_indice", "=", "-", "1", "\n", "", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "out_channels", "=", "self", ".", "stem_multiplier", "*", "self", ".", "base_channels", "\n", "stem_norm_cfg", "=", "copy", ".", "deepcopy", "(", "self", ".", "norm_cfg", ")", "\n", "stem_norm_cfg", ".", "update", "(", "dict", "(", "affine", "=", "True", ")", ")", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "out_channels", ")", "[", "1", "]", ")", "\n", "\n", "# for the first cell, stem is used for both s0 and s1", "\n", "# [!] prev_prev_channels and prev_channels is output channel size,", "\n", "# but c_cur is input channel size.", "\n", "prev_prev_channels", "=", "self", ".", "out_channels", "\n", "prev_channels", "=", "self", ".", "out_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "base_channels", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "prev_reduction", ",", "reduction", "=", "False", ",", "False", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "prev_reduction", ",", "reduction", "=", "reduction", ",", "False", "\n", "# Reduce featuremap size and double channels in 1/3", "\n", "# and 2/3 layer.", "\n", "if", "i", "==", "self", ".", "num_layers", "//", "3", "or", "i", "==", "2", "*", "self", ".", "num_layers", "//", "3", ":", "\n", "                ", "self", ".", "out_channels", "*=", "2", "\n", "reduction", "=", "True", "\n", "\n", "", "cell", "=", "Cell", "(", "self", ".", "num_nodes", ",", "self", ".", "out_channels", ",", "prev_channels", ",", "\n", "prev_prev_channels", ",", "reduction", ",", "prev_reduction", ",", "\n", "self", ".", "act_cfg", ",", "self", ".", "norm_cfg", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "\n", "prev_prev_channels", "=", "prev_channels", "\n", "prev_channels", "=", "self", ".", "out_channels", "*", "self", ".", "num_nodes", "\n", "\n", "if", "i", "==", "self", ".", "auxliary_indice", ":", "\n", "                ", "self", ".", "auxliary_module", "=", "AuxiliaryModule", "(", "prev_channels", ",", "\n", "self", ".", "aux_channels", ",", "\n", "self", ".", "aux_out_channels", ",", "\n", "self", ".", "norm_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.backbones.darts_backbone.DartsBackbone.forward": [[269, 282], ["darts_backbone.DartsBackbone.stem", "enumerate", "tuple", "cell", "outs.append", "darts_backbone.DartsBackbone.auxliary_module", "outs.insert"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "s1", ")", "\n", "", "if", "i", "==", "self", ".", "auxliary_indice", "and", "self", ".", "training", ":", "\n", "                ", "aux_feature", "=", "self", ".", "auxliary_module", "(", "s1", ")", "\n", "\n", "outs", ".", "insert", "(", "0", ",", "aux_feature", ")", "\n", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.losses.cwd.ChannelWiseDivergence.__init__": [[20, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "tau", "=", "1.0", ",", "\n", "loss_weight", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ChannelWiseDivergence", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.cwd.ChannelWiseDivergence.forward": [[29, 56], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "preds_T.view", "torch.nn.LogSoftmax.", "torch.nn.LogSoftmax.", "torch.nn.LogSoftmax.", "torch.nn.LogSoftmax.", "torch.nn.LogSoftmax.", "torch.nn.LogSoftmax.", "preds_T.view", "preds_S.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds_S", ",", "preds_T", ")", ":", "\n", "        ", "\"\"\"Forward computation.\n\n        Args:\n            preds_S (torch.Tensor): The student model prediction with\n                shape (N, C, H, W).\n            preds_T (torch.Tensor): The teacher model prediction with\n                shape (N, C, H, W).\n\n        Return:\n            torch.Tensor: The calculated loss value.\n        \"\"\"", "\n", "assert", "preds_S", ".", "shape", "[", "-", "2", ":", "]", "==", "preds_T", ".", "shape", "[", "-", "2", ":", "]", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "preds_S", ".", "shape", "\n", "\n", "softmax_pred_T", "=", "F", ".", "softmax", "(", "preds_T", ".", "view", "(", "-", "1", ",", "W", "*", "H", ")", "/", "self", ".", "tau", ",", "dim", "=", "1", ")", "\n", "\n", "logsoftmax", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "softmax_pred_T", "*", "\n", "logsoftmax", "(", "preds_T", ".", "view", "(", "-", "1", ",", "W", "*", "H", ")", "/", "self", ".", "tau", ")", "-", "\n", "softmax_pred_T", "*", "\n", "logsoftmax", "(", "preds_S", ".", "view", "(", "-", "1", ",", "W", "*", "H", ")", "/", "self", ".", "tau", ")", ")", "*", "(", "\n", "self", ".", "tau", "**", "2", ")", "\n", "\n", "loss", "=", "self", ".", "loss_weight", "*", "loss", "/", "(", "C", "*", "N", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.losses.kl_divergence.KLDivergence.__init__": [[26, 41], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "tau", "=", "1.0", ",", "\n", "reduction", "=", "'batchmean'", ",", "\n", "loss_weight", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "KLDivergence", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n", "accept_reduction", "=", "{", "'none'", ",", "'batchmean'", ",", "'sum'", ",", "'mean'", "}", "\n", "assert", "reduction", "in", "accept_reduction", ",", "f'KLDivergence supports reduction {accept_reduction}, '", "f'but gets {reduction}.'", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.kl_divergence.KLDivergence.forward": [[42, 62], ["preds_T.detach.detach.detach", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds_S", ",", "preds_T", ")", ":", "\n", "        ", "\"\"\"Forward computation.\n\n        Args:\n            preds_S (torch.Tensor): The student model prediction with\n                shape (N, C, H, W) or shape (N, C).\n            preds_T (torch.Tensor): The teacher model prediction with\n                shape (N, C, H, W) or shape (N, C).\n\n        Return:\n            torch.Tensor: The calculated loss value.\n        \"\"\"", "\n", "preds_T", "=", "preds_T", ".", "detach", "(", ")", "\n", "softmax_pred_T", "=", "F", ".", "softmax", "(", "preds_T", "/", "self", ".", "tau", ",", "dim", "=", "1", ")", "\n", "logsoftmax_preds_S", "=", "F", ".", "log_softmax", "(", "preds_S", "/", "self", ".", "tau", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "self", ".", "tau", "**", "2", ")", "*", "F", ".", "kl_div", "(", "\n", "logsoftmax_preds_S", ",", "\n", "softmax_pred_T", ",", "\n", "reduction", "=", "self", ".", "reduction", ")", "\n", "return", "self", ".", "loss_weight", "*", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.losses.soft_cross_entropy.SoftCrossEntropy.__init__": [[26, 34], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "loss_weight", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SoftCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.soft_cross_entropy.SoftCrossEntropy.forward": [[36, 71], ["preds_T.softmax.softmax.detach", "preds_S.softmax.softmax.sigmoid", "preds_T.softmax.softmax.sigmoid", "loss.mean.mean.mean", "preds_S.softmax.softmax.transpose().reshape", "preds_T.softmax.softmax.transpose().reshape", "preds_S.softmax.softmax.sigmoid", "preds_T.softmax.softmax.sigmoid", "preds_S.softmax.softmax.softmax", "preds_T.softmax.softmax.softmax", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "preds_S.softmax.softmax.transpose", "preds_T.softmax.softmax.transpose", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds_S", ",", "preds_T", ")", ":", "\n", "        ", "\"\"\"Forward computation.\n\n        Args:\n            preds_S (torch.Tensor): The student model prediction with\n                shape (N, C, H, W) or shape (N, C).\n            preds_T (torch.Tensor): The teacher model prediction with\n                shape (N, C, H, W) or shape (N, C).\n\n        Return:\n            torch.Tensor: The calculated loss value.\n        \"\"\"", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "# bce loss", "\n", "            ", "preds_S", "=", "preds_S", ".", "sigmoid", "(", ")", "\n", "preds_T", "=", "preds_T", ".", "sigmoid", "(", ")", "\n", "pos_loss", "=", "-", "preds_T", "*", "(", "preds_S", "+", "1e-8", ")", ".", "log", "(", ")", "\n", "neg_loss", "=", "-", "(", "1", "-", "preds_T", ")", "*", "(", "1", "-", "preds_S", "+", "1e-8", ")", ".", "log", "(", ")", "\n", "loss", "=", "pos_loss", "+", "neg_loss", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "#loss = loss.view(loss.shape[0], -1).sum(1).mean()", "\n", "return", "loss", "\n", "", "if", "preds_S", ".", "ndim", "==", "4", ":", "\n", "            ", "preds_S", "=", "preds_S", ".", "transpose", "(", "1", ",", "3", ")", ".", "reshape", "(", "-", "1", ",", "80", ")", "\n", "preds_T", "=", "preds_T", ".", "transpose", "(", "1", ",", "3", ")", ".", "reshape", "(", "-", "1", ",", "80", ")", "\n", "", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "preds_S", "=", "preds_S", ".", "sigmoid", "(", ")", "\n", "preds_T", "=", "preds_T", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "preds_S", ".", "shape", ")", "==", "2", "\n", "preds_S", "=", "preds_S", ".", "softmax", "(", "-", "1", ")", "\n", "preds_T", "=", "preds_T", ".", "softmax", "(", "-", "1", ")", "\n", "", "preds_T", "=", "preds_T", ".", "detach", "(", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "preds_T", "*", "torch", ".", "log", "(", "preds_S", "+", "1e-6", ")", ")", "/", "preds_S", ".", "shape", "[", "0", "]", "\n", "return", "self", ".", "loss_weight", "*", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MaskModule.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.randn().normal_", "torch.randn().normal_", "torch.randn().normal_", "torch.randn().normal_", "torch.Sequential", "torch.Sequential", "maskd.MaskModule.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "num_tokens", "=", "8", ",", "weight_mask", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight_mask", "=", "weight_mask", "\n", "self", ".", "mask_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tokens", ",", "channels", ")", ".", "normal_", "(", "0", ",", "0.01", ")", ")", "\n", "if", "self", ".", "weight_mask", ":", "\n", "            ", "self", ".", "prob", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channels", ",", "num_tokens", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MaskModule.init_weights": [[39, 46], ["maskd.MaskModule.modules", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "# fan-out", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MaskModule.forward_mask": [[47, 55], ["maskd.MaskModule.mask_token.expand", "x.view", "attn.view.view.sigmoid", "attn.view.view.view"], "methods", ["None"], ["", "", "", "", "def", "forward_mask", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "mask_token", "=", "self", ".", "mask_token", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ")", "# [N, T, C]", "\n", "k", "=", "x", ".", "view", "(", "N", ",", "-", "1", ",", "H", "*", "W", ")", "\n", "attn", "=", "mask_token", "@", "k", "# [N, T, H * W]", "\n", "attn", "=", "attn", ".", "sigmoid", "(", ")", "\n", "attn", "=", "attn", ".", "view", "(", "N", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MaskModule.forward_prob": [[56, 60], ["maskd.MaskModule.prob", "mask_probs.softmax().unsqueeze.softmax().unsqueeze.softmax().unsqueeze", "mask_probs.softmax().unsqueeze.softmax().unsqueeze.softmax"], "methods", ["None"], ["", "def", "forward_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask_probs", "=", "self", ".", "prob", "(", "x", ")", "# [N, T, 1, 1]", "\n", "mask_probs", "=", "mask_probs", ".", "softmax", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# [N, T, 1, 1, 1]", "\n", "return", "mask_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MaskModule.forward_train": [[61, 73], ["maskd.MaskModule.forward_mask", "out.sum.sum.sum", "maskd.dice_coeff", "x.unsqueeze", "maskd.MaskModule.unsqueeze", "maskd.MaskModule.forward_prob", "maskd.MaskModule.flatten"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_mask", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.dice_coeff", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_prob"], ["", "def", "forward_train", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask", "=", "self", ".", "forward_mask", "(", "x", ")", "\n", "out", "=", "x", ".", "unsqueeze", "(", "1", ")", "*", "mask", ".", "unsqueeze", "(", "2", ")", "# [N, T, C, H, W]", "\n", "# probs", "\n", "if", "self", ".", "weight_mask", ":", "\n", "            ", "mask_probs", "=", "self", ".", "forward_prob", "(", "x", ")", "\n", "#print(mask_probs.detach().flatten(1))", "\n", "out", "=", "out", "*", "mask_probs", "\n", "", "out", "=", "out", ".", "sum", "(", "1", ")", "\n", "# loss", "\n", "mask_loss", "=", "dice_coeff", "(", "mask", ".", "flatten", "(", "2", ")", ")", "\n", "return", "out", ",", "mask_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MaskModule.forward": [[74, 76], ["maskd.MaskModule.forward_train"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_train"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "forward_train", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MasKDLoss.__init__": [[81, 94], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "maskd.MasKDLoss.init_weights", "maskd.MaskModule"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "num_tokens", "=", "6", ",", "weight_mask", "=", "True", ",", "custom_mask", "=", "True", ",", "custom_mask_warmup", "=", "1000", ",", "pretrained", "=", "None", ",", "loss_weight", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "weight_mask", "=", "weight_mask", "\n", "self", ".", "custom_mask", "=", "custom_mask", "\n", "self", ".", "custom_mask_warmup", "=", "custom_mask_warmup", "\n", "\n", "self", ".", "mask_modules", "=", "nn", ".", "ModuleList", "(", "[", "\n", "MaskModule", "(", "channels", "=", "c", ",", "num_tokens", "=", "num_tokens", ",", "weight_mask", "=", "weight_mask", ")", "for", "c", "in", "channels", "]", "\n", ")", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MasKDLoss.init_weights": [[95, 104], ["mmcv.runner.checkpoint._load_checkpoint", "ckpt[].items", "maskd.MasKDLoss.load_state_dict", "k.find"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "None", ":", "\n", "            ", "return", "\n", "", "ckpt", "=", "_load_checkpoint", "(", "pretrained", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'mask_modules'", "in", "k", ":", "\n", "                ", "state_dict", "[", "k", "[", "k", ".", "find", "(", "'mask_modules'", ")", ":", "]", "]", "=", "v", "\n", "", "", "self", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.MasKDLoss.forward": [[105, 141], ["zip", "sum", "isinstance", "len", "len", "len", "mask_module.forward_mask", "loss.mean.mean.sum", "loss.mean.mean.mean", "losses.append", "y_s.unsqueeze", "mask_module.forward_mask.unsqueeze", "y_t.unsqueeze", "mask_module.forward_mask.unsqueeze", "mask_module.forward_mask.sum().unsqueeze", "mask_module.forward_prob().flatten", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mask_module.forward_mask", "mask_module.forward_mask.sum", "mask_module.forward_prob", "loss.mean.mean.mean"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_mask", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_mask", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_prob"], ["", "def", "forward", "(", "self", ",", "y_s_list", ",", "y_t_list", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "y_s_list", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "y_s_list", "=", "(", "y_s_list", ",", ")", "\n", "y_t_list", "=", "(", "y_t_list", ",", ")", "\n", "", "assert", "len", "(", "y_s_list", ")", "==", "len", "(", "y_t_list", ")", "==", "len", "(", "self", ".", "mask_modules", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "for", "y_s", ",", "y_t", ",", "mask_module", "in", "zip", "(", "y_s_list", ",", "y_t_list", ",", "self", ".", "mask_modules", ")", ":", "\n", "# predict the masks", "\n", "            ", "mask", "=", "mask_module", ".", "forward_mask", "(", "y_t", ")", "\n", "if", "self", ".", "custom_mask", "and", "self", ".", "_iter", ">=", "self", ".", "custom_mask_warmup", ":", "\n", "                ", "if", "self", ".", "_iter", "==", "self", ".", "custom_mask_warmup", ":", "\n", "                    ", "print", "(", "'Start customizing masks using student\\'s masks.'", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "mask_s", "=", "mask_module", ".", "forward_mask", "(", "y_s", ")", "# [N, T, H, W]", "\n", "", "mask", "=", "mask", "*", "mask_s", "\n", "\n", "# get the masked features", "\n", "", "masked_y_s", "=", "y_s", ".", "unsqueeze", "(", "1", ")", "*", "mask", ".", "unsqueeze", "(", "2", ")", "# [N, n_masks, C, H, W]", "\n", "masked_y_t", "=", "y_t", ".", "unsqueeze", "(", "1", ")", "*", "mask", ".", "unsqueeze", "(", "2", ")", "# [N, n_masks, C, H, W]", "\n", "\n", "# masked distillation", "\n", "loss", "=", "(", "masked_y_s", "-", "masked_y_t", ")", "**", "2", "\n", "loss", "=", "loss", ".", "sum", "(", "(", "3", ",", "4", ")", ")", "# [N, n_masks, C]", "\n", "loss", "=", "loss", "/", "mask", ".", "sum", "(", "(", "2", ",", "3", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "self", ".", "weight_mask", ":", "\n", "                ", "weights", "=", "mask_module", ".", "forward_prob", "(", "y_t", ")", ".", "flatten", "(", "1", ")", "# [N, T]", "\n", "loss", "=", "(", "loss", ".", "mean", "(", "-", "1", ")", "*", "weights", ")", ".", "sum", "(", "-", "1", ")", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "loss", "=", "sum", "(", "losses", ")", "\n", "self", ".", "_iter", "+=", "1", "\n", "return", "self", ".", "loss_weight", "*", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.losses.maskd.dice_coeff": [[9, 23], ["pred.new_ones", "torch.sum", "torch.sum", "pred.size", "target.size", "pred.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.new_ones.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "pred.new_ones.size", "pred.new_ones.size"], "function", ["None"], ["def", "dice_coeff", "(", "inputs", ")", ":", "\n", "# inputs: [B, T, H*W]", "\n", "    ", "pred", "=", "inputs", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "target", "=", "inputs", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "\n", "mask", "=", "pred", ".", "new_ones", "(", "pred", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ",", "pred", ".", "size", "(", "2", ")", ")", "\n", "mask", "[", ":", ",", "torch", ".", "arange", "(", "mask", ".", "size", "(", "1", ")", ")", ",", "torch", ".", "arange", "(", "mask", ".", "size", "(", "2", ")", ")", "]", "=", "0", "\n", "\n", "a", "=", "torch", ".", "sum", "(", "pred", "*", "target", ",", "-", "1", ")", "\n", "b", "=", "torch", ".", "sum", "(", "pred", "*", "pred", ",", "-", "1", ")", "+", "1e-12", "\n", "c", "=", "torch", ".", "sum", "(", "target", "*", "target", ",", "-", "1", ")", "+", "1e-12", "\n", "d", "=", "(", "2", "*", "a", ")", "/", "(", "b", "+", "c", ")", "\n", "d", "=", "(", "d", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.weighted_soft_label_distillation.WSLD.__init__": [[21, 29], ["torch.Module.__init__", "torch.Softmax().cuda", "torch.Softmax().cuda", "torch.Softmax().cuda", "torch.LogSoftmax().cuda", "torch.LogSoftmax().cuda", "torch.LogSoftmax().cuda", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "tau", "=", "1.0", ",", "loss_weight", "=", "1.0", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "WSLD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.weighted_soft_label_distillation.WSLD.forward": [[30, 62], ["weighted_soft_label_distillation.WSLD.softmax", "student.detach", "teacher.detach", "weighted_soft_label_distillation.WSLD.logsoftmax", "weighted_soft_label_distillation.WSLD.logsoftmax", "torch.one_hot().float", "torch.one_hot().float", "torch.one_hot().float", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "weighted_soft_label_distillation.WSLD.logsoftmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "student", ",", "teacher", ")", ":", "\n", "\n", "        ", "gt_labels", "=", "self", ".", "current_data", "[", "'gt_label'", "]", "\n", "\n", "student_logits", "=", "student", "/", "self", ".", "tau", "\n", "teacher_logits", "=", "teacher", "/", "self", ".", "tau", "\n", "\n", "teacher_probs", "=", "self", ".", "softmax", "(", "teacher_logits", ")", "\n", "\n", "ce_loss", "=", "-", "torch", ".", "sum", "(", "\n", "teacher_probs", "*", "self", ".", "logsoftmax", "(", "student_logits", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "student_detach", "=", "student", ".", "detach", "(", ")", "\n", "teacher_detach", "=", "teacher", ".", "detach", "(", ")", "\n", "log_softmax_s", "=", "self", ".", "logsoftmax", "(", "student_detach", ")", "\n", "log_softmax_t", "=", "self", ".", "logsoftmax", "(", "teacher_detach", ")", "\n", "one_hot_labels", "=", "F", ".", "one_hot", "(", "\n", "gt_labels", ",", "num_classes", "=", "self", ".", "num_classes", ")", ".", "float", "(", ")", "\n", "ce_loss_s", "=", "-", "torch", ".", "sum", "(", "one_hot_labels", "*", "log_softmax_s", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "ce_loss_t", "=", "-", "torch", ".", "sum", "(", "one_hot_labels", "*", "log_softmax_t", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "focal_weight", "=", "ce_loss_s", "/", "(", "ce_loss_t", "+", "1e-7", ")", "\n", "ratio_lower", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "focal_weight", "=", "torch", ".", "max", "(", "focal_weight", ",", "ratio_lower", ")", "\n", "focal_weight", "=", "1", "-", "torch", ".", "exp", "(", "-", "focal_weight", ")", "\n", "ce_loss", "=", "focal_weight", "*", "ce_loss", "\n", "\n", "loss", "=", "(", "self", ".", "tau", "**", "2", ")", "*", "torch", ".", "mean", "(", "ce_loss", ")", "\n", "\n", "loss", "=", "self", ".", "loss_weight", "*", "loss", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.losses.mse.MSELoss.__init__": [[10, 14], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "MSELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.mse.MSELoss.forward": [[15, 27], ["isinstance", "zip", "sum", "mse.MSELoss.mse", "len", "len", "losses.append", "mse.MSELoss.mse"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_s", ",", "y_t", ")", ":", "\n", "        ", "if", "isinstance", "(", "y_s", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "assert", "len", "(", "y_s", ")", "==", "len", "(", "y_t", ")", "\n", "losses", "=", "[", "]", "\n", "for", "s", ",", "t", "in", "zip", "(", "y_s", ",", "y_t", ")", ":", "\n", "                ", "assert", "s", ".", "shape", "==", "t", ".", "shape", "\n", "losses", ".", "append", "(", "self", ".", "mse", "(", "s", ",", "t", ")", ")", "\n", "", "loss", "=", "sum", "(", "losses", ")", "\n", "", "else", ":", "\n", "            ", "assert", "y_s", ".", "shape", "==", "y_t", ".", "shape", "\n", "loss", "=", "self", ".", "mse", "(", "y_s", ",", "y_t", ")", "\n", "", "return", "self", ".", "loss_weight", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.DIST.__init__": [[26, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", ",", "gamma", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "DIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.DIST.forward": [[33, 50], ["dist_kd.inter_class_relation", "dist_kd.intra_class_relation", "y_s.softmax.softmax.transpose().reshape", "y_t.softmax.softmax.transpose().reshape", "y_s.softmax.softmax.sigmoid", "y_t.softmax.softmax.sigmoid", "y_s.softmax.softmax.softmax", "y_t.softmax.softmax.softmax", "y_s.softmax.softmax.transpose", "y_t.softmax.softmax.transpose"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.inter_class_relation", "home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.intra_class_relation"], ["", "def", "forward", "(", "self", ",", "y_s", ",", "y_t", ")", ":", "\n", "        ", "assert", "y_s", ".", "ndim", "in", "(", "2", ",", "4", ")", "\n", "if", "y_s", ".", "ndim", "==", "4", ":", "\n", "            ", "num_classes", "=", "y_s", ".", "shape", "[", "1", "]", "\n", "y_s", "=", "y_s", ".", "transpose", "(", "1", ",", "3", ")", ".", "reshape", "(", "-", "1", ",", "num_classes", ")", "\n", "y_t", "=", "y_t", ".", "transpose", "(", "1", ",", "3", ")", ".", "reshape", "(", "-", "1", ",", "num_classes", ")", "\n", "", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "y_s", "=", "y_s", ".", "sigmoid", "(", ")", "\n", "y_t", "=", "y_t", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "y_s", "=", "y_s", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "y_t", "=", "y_t", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "\n", "", "inter_loss", "=", "inter_class_relation", "(", "y_s", ",", "y_t", ")", "\n", "intra_loss", "=", "intra_class_relation", "(", "y_s", ",", "y_t", ")", "\n", "kd_loss", "=", "self", ".", "beta", "*", "inter_loss", "+", "self", ".", "gamma", "*", "intra_loss", "\n", "return", "self", ".", "loss_weight", "*", "kd_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.cosine_similarity": [[7, 9], ["a.norm", "b.norm"], "function", ["None"], ["def", "cosine_similarity", "(", "a", ",", "b", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "return", "(", "a", "*", "b", ")", ".", "sum", "(", "1", ")", "/", "(", "a", ".", "norm", "(", "dim", "=", "1", ")", "*", "b", ".", "norm", "(", "dim", "=", "1", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.pearson_correlation": [[11, 14], ["dist_kd.cosine_similarity", "a.mean().unsqueeze", "b.mean().unsqueeze", "a.mean", "b.mean"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.cosine_similarity"], ["", "def", "pearson_correlation", "(", "a", ",", "b", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "return", "cosine_similarity", "(", "a", "-", "a", ".", "mean", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "b", "-", "b", ".", "mean", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.inter_class_relation": [[16, 18], ["pearson_correlation().mean", "dist_kd.pearson_correlation"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.pearson_correlation"], ["", "def", "inter_class_relation", "(", "y_s", ",", "y_t", ")", ":", "\n", "    ", "return", "1", "-", "pearson_correlation", "(", "y_s", ",", "y_t", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.intra_class_relation": [[20, 22], ["dist_kd.inter_class_relation", "y_s.transpose", "y_t.transpose"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.losses.dist_kd.inter_class_relation"], ["", "def", "intra_class_relation", "(", "y_s", ",", "y_t", ")", ":", "\n", "    ", "return", "inter_class_relation", "(", "y_s", ".", "transpose", "(", "0", ",", "1", ")", ",", "y_t", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.MutableOP.__init__": [[21, 26], ["mutable_module.MutableModule.__init__", "mutable_op.MutableOP.build_choices", "mutable_op.MutableOP.build_choice_mask", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.build_choices", "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.build_choice_mask"], ["def", "__init__", "(", "self", ",", "choices", ",", "choice_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MutableOP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "choices", "=", "self", ".", "build_choices", "(", "choices", ",", "choice_args", ")", "\n", "self", ".", "choice_mask", "=", "self", ".", "build_choice_mask", "(", ")", "\n", "self", ".", "full_choice_names", "=", "copy", ".", "deepcopy", "(", "self", ".", "choice_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.MutableOP.build_choices": [[27, 44], ["torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "cfgs.items", "cfg.update", "builder.build_op", "torch.ModuleDict.add_module"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_op"], ["", "def", "build_choices", "(", "self", ",", "cfgs", ",", "choice_args", ")", ":", "\n", "        ", "\"\"\"Build all chosen ``OPS`` used to combine ``MUTABLES``, and the\n        choices will be sampled.\n\n        Args:\n            cfgs (dict): The configs for the choices.\n            choice_args (dict): The args used to set chosen ``OPS``.\n\n        Returns:\n            torch.nn.ModuleDict: Consists of chosen ``OPS`` in the arg `cfgs`.\n        \"\"\"", "\n", "choices", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "name", ",", "cfg", "in", "cfgs", ".", "items", "(", ")", ":", "\n", "            ", "cfg", ".", "update", "(", "choice_args", ")", "\n", "op_module", "=", "build_op", "(", "cfg", ")", "\n", "choices", ".", "add_module", "(", "name", ",", "op_module", ")", "\n", "", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.OneShotOP.__init__": [[50, 53], ["mutable_op.MutableOP.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OneShotOP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "self", ".", "num_chosen", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.OneShotOP.forward": [[54, 77], ["list", "zip", "sum", "list.append", "len", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward computation for chosen ``OPS``, in one-shot NAS, the number\n        of chosen ``OPS`` can only be one.\n\n        Args:\n            x (tensor | tuple[tensor]): x could be a Torch.tensor or a tuple of\n                Torch.tensor, containing input data for forward computation.\n\n        Returns:\n            torch.Tensor: The result of forward.\n        \"\"\"", "\n", "outputs", "=", "list", "(", ")", "\n", "for", "name", ",", "chosen_bool", "in", "zip", "(", "self", ".", "full_choice_names", ",", "self", ".", "choice_mask", ")", ":", "\n", "            ", "if", "name", "not", "in", "self", ".", "choice_names", ":", "\n", "                ", "continue", "\n", "", "if", "not", "chosen_bool", ":", "\n", "                ", "continue", "\n", "", "module", "=", "self", ".", "choices", "[", "name", "]", "\n", "outputs", ".", "append", "(", "module", "(", "x", ")", ")", "\n", "\n", "", "assert", "len", "(", "outputs", ")", ">", "0", "\n", "\n", "return", "sum", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.DifferentiableOP.__init__": [[89, 92], ["mutable_op.MutableOP.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "with_arch_param", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DifferentiableOP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "with_arch_param", "=", "with_arch_param", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.DifferentiableOP.build_arch_param": [[93, 99], ["torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "build_arch_param", "(", "self", ")", ":", "\n", "        ", "\"\"\"build learnable architecture parameters.\"\"\"", "\n", "if", "self", ".", "with_arch_param", ":", "\n", "            ", "return", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_choices", ")", "*", "1e-3", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.DifferentiableOP.compute_arch_probs": [[100, 103], ["torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "compute_arch_probs", "(", "self", ",", "arch_param", ")", ":", "\n", "        ", "\"\"\"compute chosen probs according architecture parameters.\"\"\"", "\n", "return", "F", ".", "softmax", "(", "arch_param", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.DifferentiableOP.forward": [[104, 142], ["sum", "mutable_op.DifferentiableOP.compute_arch_probs", "list", "zip", "list", "zip", "list.append", "len", "list.append", "module", "module"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.GumbelEdge.compute_arch_probs"], ["", "def", "forward", "(", "self", ",", "x", ",", "arch_param", "=", "None", ")", ":", "\n", "        ", "\"\"\"forward function.\n\n        In some algorithms, there are several ``MutableModule`` share the same\n        architecture parameters. So the architecture parameters are passed\n        in as args.\n\n        Args:\n            prev_inputs (list[torch.Tensor]): each choice's inputs.\n            arch_param (torch.nn.Parameter): architecture parameters.\n        \"\"\"", "\n", "if", "self", ".", "with_arch_param", ":", "\n", "            ", "assert", "arch_param", "is", "not", "None", ",", "f'In {self.space_id}, the arch_param can not be None when the \\\n                    with_arch_param=True.'", "\n", "\n", "# 1. compute choices' probs.", "\n", "probs", "=", "self", ".", "compute_arch_probs", "(", "arch_param", ")", "\n", "\n", "# 2. compute every op's outputs.", "\n", "outputs", "=", "list", "(", ")", "\n", "for", "prob", ",", "module", "in", "zip", "(", "probs", ",", "self", ".", "choice_modules", ")", ":", "\n", "                ", "if", "prob", ">", "0", ":", "\n", "                    ", "outputs", ".", "append", "(", "prob", "*", "module", "(", "x", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "outputs", "=", "list", "(", ")", "\n", "for", "name", ",", "chosen_bool", "in", "zip", "(", "self", ".", "full_choice_names", ",", "\n", "self", ".", "choice_mask", ")", ":", "\n", "                ", "if", "name", "not", "in", "self", ".", "choice_names", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "chosen_bool", ":", "\n", "                    ", "continue", "\n", "", "module", "=", "self", ".", "choices", "[", "name", "]", "\n", "outputs", ".", "append", "(", "module", "(", "x", ")", ")", "\n", "\n", "", "assert", "len", "(", "outputs", ")", ">", "0", "\n", "", "return", "sum", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.GumbelOP.__init__": [[151, 155], ["mutable_op.DifferentiableOP.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "tau", "=", "1.0", ",", "hard", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GumbelOP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "hard", "=", "hard", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.GumbelOP.set_temperature": [[156, 159], ["None"], "methods", ["None"], ["", "def", "set_temperature", "(", "self", ",", "temperature", ")", ":", "\n", "        ", "\"\"\"Modify the temperature.\"\"\"", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_op.GumbelOP.compute_arch_probs": [[160, 165], ["torch.gumbel_softmax", "torch.gumbel_softmax", "torch.gumbel_softmax"], "methods", ["None"], ["", "def", "compute_arch_probs", "(", "self", ",", "arch_param", ")", ":", "\n", "        ", "\"\"\"compute chosen probs by gumbel trick.\"\"\"", "\n", "probs", "=", "F", ".", "gumbel_softmax", "(", "\n", "arch_param", ",", "tau", "=", "self", ".", "tau", ",", "hard", "=", "self", ".", "hard", ",", "dim", "=", "-", "1", ")", "\n", "return", "probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.MutableEdge.__init__": [[23, 32], ["mutable_module.MutableModule.__init__", "isinstance", "mutable_edge.MutableEdge.build_choice_mask", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.build_choice_mask"], ["def", "__init__", "(", "self", ",", "choices", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MutableEdge", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "choices", ",", "nn", ".", "ModuleDict", ")", ",", "f'In {self.space_id}, the choices must be torch.nn.ModuleDict.'", "\n", "self", ".", "choices", "=", "choices", "\n", "self", ".", "choice_mask", "=", "self", ".", "build_choice_mask", "(", ")", "\n", "# Once execute ``export``, the unchosen modules will be removed.", "\n", "# Record full choice names, which will be used in forward.", "\n", "self", ".", "full_choice_names", "=", "copy", ".", "deepcopy", "(", "self", ".", "choice_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.MutableEdge.build_choices": [[33, 36], ["None"], "methods", ["None"], ["", "def", "build_choices", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"MutableEdge's choices is already built.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.DifferentiableEdge.__init__": [[48, 51], ["mutable_edge.MutableEdge.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "with_arch_param", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DifferentiableEdge", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "with_arch_param", "=", "with_arch_param", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.DifferentiableEdge.build_arch_param": [[52, 58], ["torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "build_arch_param", "(", "self", ")", ":", "\n", "        ", "\"\"\"build learnable architecture parameters.\"\"\"", "\n", "if", "self", ".", "with_arch_param", ":", "\n", "            ", "return", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_choices", ")", "*", "1e-3", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.DifferentiableEdge.compute_arch_probs": [[59, 62], ["torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "compute_arch_probs", "(", "self", ",", "arch_param", ")", ":", "\n", "        ", "\"\"\"compute chosen probs according architecture parameters.\"\"\"", "\n", "return", "F", ".", "softmax", "(", "arch_param", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.DifferentiableEdge.forward": [[63, 105], ["sum", "len", "len", "mutable_edge.DifferentiableEdge.compute_arch_probs", "list", "zip", "list", "zip", "list.append", "len", "list.append", "module", "module"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.GumbelEdge.compute_arch_probs"], ["", "def", "forward", "(", "self", ",", "prev_inputs", ",", "arch_param", "=", "None", ")", ":", "\n", "        ", "\"\"\"forward function.\n\n        In some algorithms, there are several ``MutableModule`` share the same\n        architecture parameters. So the architecture parameters are passed\n        in as args.\n\n        Args:\n            prev_inputs (list[torch.Tensor]): each choice's inputs.\n            arch_param (torch.nn.Parameter): architecture parameters.\n        \"\"\"", "\n", "\n", "assert", "len", "(", "self", ".", "full_choice_names", ")", "==", "len", "(", "prev_inputs", ")", ",", "f'In {self.space_id}, the length of full choice names must be \\\n                same as the length of previous inputs.'", "\n", "\n", "if", "self", ".", "with_arch_param", ":", "\n", "            ", "assert", "arch_param", "is", "not", "None", ",", "f'In {self.space_id}, the arch_param can not be None when the \\\n                    with_arch_param=True.'", "\n", "\n", "# 1. compute choices' probs.", "\n", "probs", "=", "self", ".", "compute_arch_probs", "(", "arch_param", ")", "\n", "\n", "# 2. process each input", "\n", "outputs", "=", "list", "(", ")", "\n", "for", "prob", ",", "module", ",", "input", "in", "zip", "(", "probs", ",", "self", ".", "choice_modules", ",", "\n", "prev_inputs", ")", ":", "\n", "                ", "if", "prob", ">", "0", ":", "\n", "                    ", "outputs", ".", "append", "(", "prob", "*", "module", "(", "input", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "outputs", "=", "list", "(", ")", "\n", "for", "name", ",", "input", "in", "zip", "(", "self", ".", "full_choice_names", ",", "prev_inputs", ")", ":", "\n", "                ", "if", "name", "not", "in", "self", ".", "choice_names", ":", "\n", "                    ", "continue", "\n", "", "module", "=", "self", ".", "choices", "[", "name", "]", "\n", "outputs", ".", "append", "(", "module", "(", "input", ")", ")", "\n", "\n", "", "assert", "len", "(", "outputs", ")", ">", "0", "\n", "\n", "", "return", "sum", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.GumbelEdge.__init__": [[114, 116], ["mutable_edge.DifferentiableEdge.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GumbelEdge", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.GumbelEdge.set_temperature": [[117, 120], ["None"], "methods", ["None"], ["", "def", "set_temperature", "(", "self", ",", "temperature", ")", ":", "\n", "        ", "\"\"\"Modify the temperature.\"\"\"", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.GumbelEdge.compute_arch_probs": [[121, 126], ["torch.gumbel_softmax", "torch.gumbel_softmax", "torch.gumbel_softmax"], "methods", ["None"], ["", "def", "compute_arch_probs", "(", "self", ",", "arch_param", ")", ":", "\n", "        ", "\"\"\"compute chosen probs by gumbel trick.\"\"\"", "\n", "probs", "=", "F", ".", "gumbel_softmax", "(", "\n", "arch_param", ",", "tau", "=", "self", ".", "tau", ",", "hard", "=", "self", ".", "hard", ",", "dim", "=", "-", "1", ")", "\n", "return", "probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.__init__": [[21, 25], ["mmcv.runner.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "space_id", ",", "num_chosen", "=", "1", ",", "init_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MutableModule", ",", "self", ")", ".", "__init__", "(", "init_cfg", ")", "\n", "self", ".", "space_id", "=", "space_id", "\n", "self", ".", "num_chosen", "=", "num_chosen", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.forward": [[26, 35], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward computation.\n\n        Args:\n            x (tensor | tuple[tensor]): x could be a Torch.tensor or a tuple of\n                Torch.tensor, containing input data for forward computation.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.build_choices": [[36, 45], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "build_choices", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Build all chosen ``OPS`` used to combine ``MUTABLES``, and the\n        choices will be sampled.\n\n        Args:\n            cfg (dict): The config for the choices.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.build_choice_mask": [[46, 56], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.ones().bool().cuda", "torch.ones().bool().cuda", "torch.ones().bool().cuda", "torch.ones().bool().cuda", "torch.ones().bool", "torch.ones().bool", "torch.ones().bool", "torch.ones().bool", "torch.ones().bool", "torch.ones().bool", "torch.ones().bool", "torch.ones().bool", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "build_choice_mask", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate the choice mask for the choices of ``MUTABLES``.\n\n        Returns:\n            torch.Tensor: Init choice mask. Its elements' type is bool.\n        \"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "torch", ".", "ones", "(", "self", ".", "num_choices", ")", ".", "bool", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "ones", "(", "self", ".", "num_choices", ")", ".", "bool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.set_choice_mask": [[57, 66], ["mutable_module.MutableModule.choice_mask.size", "mask.size"], "methods", ["None"], ["", "", "def", "set_choice_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Use the mask to update the choice mask.\n\n        Args:\n            mask (torch.Tensor): Choice mask specified to update the choice\n                mask.\n        \"\"\"", "\n", "assert", "self", ".", "choice_mask", ".", "size", "(", "0", ")", "==", "mask", ".", "size", "(", "0", ")", "\n", "self", ".", "choice_mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.num_choices": [[67, 75], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_choices", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of the choices.\n\n        Returns:\n            int: the length of the choices.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "choices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.choice_names": [[76, 86], ["isinstance", "tuple", "mutable_module.MutableModule.choices.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "choice_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"The choices' names.\n\n        Returns:\n            tuple: The keys of the choices.\n        \"\"\"", "\n", "assert", "isinstance", "(", "self", ".", "choices", ",", "nn", ".", "ModuleDict", ")", ",", "'candidates must be nn.ModuleDict.'", "\n", "return", "tuple", "(", "self", ".", "choices", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.choice_modules": [[87, 97], ["isinstance", "tuple", "mutable_module.MutableModule.choices.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "choice_modules", "(", "self", ")", ":", "\n", "        ", "\"\"\"The choices' modules.\n\n        Returns:\n            tuple: The values of the choices.\n        \"\"\"", "\n", "assert", "isinstance", "(", "self", ".", "choices", ",", "nn", ".", "ModuleDict", ")", ",", "'candidates must be nn.ModuleDict.'", "\n", "return", "tuple", "(", "self", ".", "choices", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.build_space_mask": [[98, 108], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "build_space_mask", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate the space mask for the search spaces of ``MUTATORS``.\n\n        Returns:\n            torch.Tensor: Init choice mask. Its elements' type is float.\n        \"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "torch", ".", "ones", "(", "self", ".", "num_choices", ")", ".", "cuda", "(", ")", "*", "1.0", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "ones", "(", "self", ".", "num_choices", ")", "*", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_module.MutableModule.export": [[109, 118], ["mutable_module.MutableModule.choices.pop"], "methods", ["None"], ["", "", "def", "export", "(", "self", ",", "chosen", ")", ":", "\n", "        ", "\"\"\"Delete not chosen ``OPS`` in the choices.\n\n        Args:\n            chosen (list[str]): Names of chosen ``OPS``.\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "choice_names", ":", "\n", "            ", "if", "name", "not", "in", "chosen", ":", "\n", "                ", "self", ".", "choices", ".", "pop", "(", "name", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.__init__": [[48, 69], ["torch.Module.__init__", "distributed_wrapper.DistributedDataParallelWrapper.to_ddp", "torch.cuda._utils._get_device_index", "torch.cuda._utils._get_device_index", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.to_ddp"], ["def", "__init__", "(", "self", ",", "\n", "module", ",", "\n", "device_ids", ",", "\n", "dim", "=", "0", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "device_ids", ")", "==", "1", ",", "(", "\n", "'Currently, DistributedDataParallelWrapper only supports one'", "\n", "'single CUDA device for each process.'", "\n", "f'The length of device_ids must be 1, but got {len(device_ids)}.'", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "to_ddp", "(", "\n", "device_ids", "=", "device_ids", ",", "\n", "dim", "=", "dim", ",", "\n", "broadcast_buffers", "=", "broadcast_buffers", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "output_device", "=", "_get_device_index", "(", "device_ids", "[", "0", "]", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.to_ddp": [[70, 90], ["distributed_wrapper.DistributedDataParallelWrapper.module._modules.items", "next", "mmcv.parallel.MMDistributedDataParallel.cuda", "all", "mmcv.parallel.MMDistributedDataParallel.parameters", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmcv.parallel.MMDistributedDataParallel.parameters"], "methods", ["None"], ["", "def", "to_ddp", "(", "self", ",", "device_ids", ",", "dim", ",", "broadcast_buffers", ",", "\n", "find_unused_parameters", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Wrap models with separate MMDistributedDataParallel.\n\n        It only wraps the modules with parameters.\n        \"\"\"", "\n", "for", "name", ",", "module", "in", "self", ".", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "next", "(", "module", ".", "parameters", "(", ")", ",", "None", ")", "is", "None", ":", "\n", "                ", "module", "=", "module", ".", "cuda", "(", ")", "\n", "", "elif", "all", "(", "not", "p", ".", "requires_grad", "for", "p", "in", "module", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "module", "=", "module", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "module", "=", "MMDistributedDataParallel", "(", "\n", "module", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "device_ids", ",", "\n", "dim", "=", "dim", ",", "\n", "broadcast_buffers", "=", "broadcast_buffers", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ",", "\n", "**", "kwargs", ")", "\n", "", "self", ".", "module", ".", "_modules", "[", "name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.scatter": [[91, 101], ["mmcv.parallel.scatter_gather.scatter_kwargs"], "methods", ["None"], ["", "", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "\"\"\"Scatter function.\n\n        Args:\n            inputs (Tensor): Input Tensor.\n            kwargs (dict): Args for\n                ``mmcv.parallel.scatter_gather.scatter_kwargs``.\n            device_ids (int): Device id.\n        \"\"\"", "\n", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.forward": [[102, 113], ["distributed_wrapper.DistributedDataParallelWrapper.scatter", "distributed_wrapper.DistributedDataParallelWrapper.module", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.scatter"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\n\n        Args:\n            inputs (tuple): Input data.\n            kwargs (dict): Args for\n                ``mmcv.parallel.scatter_gather.scatter_kwargs``.\n        \"\"\"", "\n", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step": [[114, 126], ["distributed_wrapper.DistributedDataParallelWrapper.scatter", "distributed_wrapper.DistributedDataParallelWrapper.module.train_step", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.scatter", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step"], ["", "def", "train_step", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Train step function.\n\n        Args:\n            inputs (Tensor): Input Tensor.\n            kwargs (dict): Args for\n                ``mmcv.parallel.scatter_gather.scatter_kwargs``.\n        \"\"\"", "\n", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "output", "=", "self", ".", "module", ".", "train_step", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.val_step": [[127, 138], ["distributed_wrapper.DistributedDataParallelWrapper.scatter", "distributed_wrapper.DistributedDataParallelWrapper.module.val_step", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.scatter", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.val_step"], ["", "def", "val_step", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Validation step function.\n\n        Args:\n            inputs (tuple): Input data.\n            kwargs (dict): Args for ``scatter_kwargs``.\n        \"\"\"", "\n", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "output", "=", "self", ".", "module", ".", "val_step", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.core.builder.build_searcher": [[6, 9], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["\n", "ALGORITHMS", "=", "MODELS", "\n", "MUTABLES", "=", "MODELS", "\n", "DISTILLERS", "=", "MODELS", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.searcher.greedy_search.GreedySearcher.__init__": [[49, 80], ["super().__init__", "sorted", "hasattr", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], ["def", "__init__", "(", "self", ",", "\n", "algorithm", ",", "\n", "dataloader", ",", "\n", "target_flops", ",", "\n", "test_fn", ",", "\n", "work_dir", ",", "\n", "logger", ",", "\n", "max_channel_bins", ",", "\n", "min_channel_bins", "=", "1", ",", "\n", "metrics", "=", "'accuracy'", ",", "\n", "metric_options", "=", "None", ",", "\n", "score_key", "=", "'accuracy_top-1'", ",", "\n", "resume_from", "=", "None", ",", "\n", "**", "search_kwargs", ")", ":", "\n", "        ", "super", "(", "GreedySearcher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "hasattr", "(", "algorithm", ",", "'module'", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Do not support searching with cpu.'", ")", "\n", "\n", "", "self", ".", "algorithm", "=", "algorithm", ".", "module", "\n", "self", ".", "algorithm_for_test", "=", "algorithm", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "target_flops", "=", "sorted", "(", "target_flops", ",", "reverse", "=", "True", ")", "\n", "self", ".", "test_fn", "=", "test_fn", "\n", "self", ".", "work_dir", "=", "work_dir", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "max_channel_bins", "=", "max_channel_bins", "\n", "self", ".", "min_channel_bins", "=", "min_channel_bins", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "metric_options", "=", "metric_options", "\n", "self", ".", "score_key", "=", "score_key", "\n", "self", ".", "resume_from", "=", "resume_from", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.searcher.greedy_search.GreedySearcher.search": [[81, 192], ["mmcv.runner.get_dist_info", "greedy_search.GreedySearcher.logger.info", "mmcv.fileio.load", "greedy_search.GreedySearcher.logger.info", "algorithm.pruner.set_max_channel", "algorithm.pruner.get_max_channel_bins", "algorithm.get_subnet_flops", "algorithm.pruner.set_channel_bins", "algorithm.pruner.export_subnet", "result_subnet.append", "result_flops.append", "greedy_search.GreedySearcher.logger.info", "zip", "greedy_search.GreedySearcher.logger.info", "algorithm.pruner.set_channel_bins", "algorithm.pruner.export_subnet", "result_subnet.append", "result_flops.append", "greedy_search.GreedySearcher.logger.info", "enumerate", "algorithm.pruner.set_channel_bins", "algorithm.get_subnet_flops", "greedy_search.GreedySearcher.logger.info", "dict", "mmcv.fileio.dump", "mmcv.fileio.dump", "sorted", "copy.deepcopy", "algorithm.pruner.set_channel_bins", "greedy_search.GreedySearcher.test_fn", "utils.broadcast_object_list", "greedy_search.GreedySearcher.logger.info", "RuntimeError", "os.join", "os.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "subnet.keys", "torch.sum", "greedy_search.GreedySearcher.dataloader.dataset.evaluate", "torch.where"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_max_channel", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_max_channel_bins", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.get_subnet_flops", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_channel_bins", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.export_subnet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_channel_bins", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.export_subnet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_channel_bins", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.get_subnet_flops", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_channel_bins", "home.repos.pwc.inspect_result.hunto_maskd.utils.broadcast.broadcast_object_list"], ["", "def", "search", "(", "self", ")", ":", "\n", "        ", "\"\"\"Greedy Slimming.\"\"\"", "\n", "algorithm", "=", "self", ".", "algorithm", "\n", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "\n", "if", "self", ".", "resume_from", "is", "not", "None", ":", "\n", "            ", "searcher_resume", "=", "mmcv", ".", "fileio", ".", "load", "(", "self", ".", "resume_from", ")", "# a dict", "\n", "result_subnet", "=", "searcher_resume", "[", "'result_subnet'", "]", "\n", "result_flops", "=", "searcher_resume", "[", "'result_flops'", "]", "\n", "subnet", "=", "searcher_resume", "[", "'subnet'", "]", "\n", "flops", "=", "searcher_resume", "[", "'flops'", "]", "\n", "self", ".", "logger", ".", "info", "(", "f'Resume from subnet: {subnet}'", ")", "\n", "", "else", ":", "\n", "            ", "result_subnet", ",", "result_flops", "=", "[", "]", ",", "[", "]", "\n", "# We start with the largest model", "\n", "algorithm", ".", "pruner", ".", "set_max_channel", "(", ")", "\n", "max_subnet", "=", "algorithm", ".", "pruner", ".", "get_max_channel_bins", "(", "\n", "self", ".", "max_channel_bins", ")", "\n", "# channel_cfg", "\n", "subnet", "=", "max_subnet", "\n", "flops", "=", "algorithm", ".", "get_subnet_flops", "(", ")", "\n", "\n", "", "for", "target", "in", "self", ".", "target_flops", ":", "\n", "            ", "if", "self", ".", "resume_from", "is", "not", "None", "and", "flops", "<=", "target", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "flops", "<=", "target", ":", "\n", "                ", "algorithm", ".", "pruner", ".", "set_channel_bins", "(", "subnet", ",", "\n", "self", ".", "max_channel_bins", ")", "\n", "channel_cfg", "=", "algorithm", ".", "pruner", ".", "export_subnet", "(", ")", "\n", "result_subnet", ".", "append", "(", "channel_cfg", ")", "\n", "result_flops", ".", "append", "(", "flops", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Find model flops {flops} <= {target}'", ")", "\n", "continue", "\n", "\n", "", "while", "flops", ">", "target", ":", "\n", "# search which layer needs to shrink", "\n", "                ", "best_score", "=", "None", "\n", "best_subnet", "=", "None", "\n", "\n", "# During distributed training, the order of ``subnet.keys()``", "\n", "# on different ranks may be different. So we need to sort it", "\n", "# first.", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "sorted", "(", "subnet", ".", "keys", "(", ")", ")", ")", ":", "\n", "                    ", "new_subnet", "=", "copy", ".", "deepcopy", "(", "subnet", ")", "\n", "# we prune the very last channel bin", "\n", "last_bin_ind", "=", "torch", ".", "where", "(", "new_subnet", "[", "name", "]", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "# The ``new_subnet`` on different ranks are the same,", "\n", "# so we do not need to broadcast here.", "\n", "new_subnet", "[", "name", "]", "[", "last_bin_ind", "]", "=", "0", "\n", "if", "torch", ".", "sum", "(", "new_subnet", "[", "name", "]", ")", "<", "self", ".", "min_channel_bins", ":", "\n", "# subnet is invalid", "\n", "                        ", "continue", "\n", "\n", "", "algorithm", ".", "pruner", ".", "set_channel_bins", "(", "new_subnet", ",", "\n", "self", ".", "max_channel_bins", ")", "\n", "\n", "outputs", "=", "self", ".", "test_fn", "(", "self", ".", "algorithm_for_test", ",", "\n", "self", ".", "dataloader", ")", "\n", "broadcast_scores", "=", "[", "None", "]", "\n", "if", "rank", "==", "0", ":", "\n", "                        ", "eval_result", "=", "self", ".", "dataloader", ".", "dataset", ".", "evaluate", "(", "\n", "outputs", ",", "self", ".", "metrics", ",", "self", ".", "metric_options", ")", "\n", "broadcast_scores", "=", "[", "eval_result", "[", "self", ".", "score_key", "]", "]", "\n", "\n", "# Broadcasts scores in broadcast_scores to the whole", "\n", "# group.", "\n", "", "broadcast_scores", "=", "broadcast_object_list", "(", "broadcast_scores", ")", "\n", "score", "=", "broadcast_scores", "[", "0", "]", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f'Slimming group {name}, {self.score_key}: {score}'", ")", "\n", "if", "best_score", "is", "None", "or", "score", ">", "best_score", ":", "\n", "                        ", "best_score", "=", "score", "\n", "best_subnet", "=", "new_subnet", "\n", "\n", "", "", "if", "best_subnet", "is", "None", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Cannot find any valid model, check your '", "\n", "'configurations.'", ")", "\n", "\n", "", "subnet", "=", "best_subnet", "\n", "algorithm", ".", "pruner", ".", "set_channel_bins", "(", "subnet", ",", "\n", "self", ".", "max_channel_bins", ")", "\n", "flops", "=", "algorithm", ".", "get_subnet_flops", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f'Greedy find model, score: {best_score}, FLOPS: {flops}'", ")", "\n", "\n", "save_for_resume", "=", "dict", "(", ")", "\n", "save_for_resume", "[", "'result_subnet'", "]", "=", "result_subnet", "\n", "save_for_resume", "[", "'result_flops'", "]", "=", "result_flops", "\n", "save_for_resume", "[", "'subnet'", "]", "=", "subnet", "\n", "save_for_resume", "[", "'flops'", "]", "=", "flops", "\n", "mmcv", ".", "fileio", ".", "dump", "(", "save_for_resume", ",", "\n", "osp", ".", "join", "(", "self", ".", "work_dir", ",", "'latest.pkl'", ")", ")", "\n", "\n", "", "algorithm", ".", "pruner", ".", "set_channel_bins", "(", "subnet", ",", "self", ".", "max_channel_bins", ")", "\n", "channel_cfg", "=", "algorithm", ".", "pruner", ".", "export_subnet", "(", ")", "\n", "result_subnet", ".", "append", "(", "channel_cfg", ")", "\n", "result_flops", ".", "append", "(", "flops", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Find model flops {flops} <= {target}'", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Search models done.'", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "for", "flops", ",", "subnet", "in", "zip", "(", "result_flops", ",", "result_subnet", ")", ":", "\n", "                ", "mmcv", ".", "fileio", ".", "dump", "(", "\n", "subnet", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "work_dir", ",", "\n", "'subnet_{}.yaml'", ".", "format", "(", "flops", ")", ")", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Save searched results to {self.work_dir}'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.__init__": [[38, 79], ["dict", "list", "dict", "dict", "hasattr", "NotImplementedError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "algorithm", ",", "\n", "dataloader", ",", "\n", "test_fn", ",", "\n", "work_dir", ",", "\n", "logger", ",", "\n", "candidate_pool_size", "=", "50", ",", "\n", "candidate_top_k", "=", "10", ",", "\n", "constraints", "=", "dict", "(", "flops", "=", "330", "*", "1e6", ")", ",", "\n", "metrics", "=", "None", ",", "\n", "metric_options", "=", "None", ",", "\n", "score_key", "=", "'accuracy_top-1'", ",", "\n", "max_epoch", "=", "20", ",", "\n", "num_mutation", "=", "25", ",", "\n", "num_crossover", "=", "25", ",", "\n", "mutate_prob", "=", "0.1", ",", "\n", "resume_from", "=", "None", ",", "\n", "**", "search_kwargs", ")", ":", "\n", "\n", "        ", "if", "not", "hasattr", "(", "algorithm", ",", "'module'", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Do not support searching with cpu.'", ")", "\n", "", "self", ".", "algorithm", "=", "algorithm", ".", "module", "\n", "self", ".", "algorithm_for_test", "=", "algorithm", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "constraints", "=", "constraints", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "metric_options", "=", "metric_options", "\n", "self", ".", "score_key", "=", "score_key", "\n", "self", ".", "candidate_pool", "=", "list", "(", ")", "\n", "self", ".", "candidate_pool_size", "=", "candidate_pool_size", "\n", "self", ".", "max_epoch", "=", "max_epoch", "\n", "self", ".", "test_fn", "=", "test_fn", "\n", "self", ".", "candidate_top_k", "=", "candidate_top_k", "\n", "self", ".", "num_mutation", "=", "num_mutation", "\n", "self", ".", "num_crossover", "=", "num_crossover", "\n", "self", ".", "mutate_prob", "=", "mutate_prob", "\n", "self", ".", "top_k_candidates_with_score", "=", "dict", "(", ")", "\n", "self", ".", "candidate_pool_with_score", "=", "dict", "(", ")", "\n", "self", ".", "work_dir", "=", "work_dir", "\n", "self", ".", "resume_from", "=", "resume_from", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.check_constraints": [[80, 91], ["evolution_search.EvolutionSearcher.algorithm.get_subnet_flops"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.get_subnet_flops"], ["", "def", "check_constraints", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check whether is beyond constraints.\n\n        Returns:\n            bool: The result of checking.\n        \"\"\"", "\n", "flops", "=", "self", ".", "algorithm", ".", "get_subnet_flops", "(", ")", "\n", "if", "flops", "<", "self", ".", "constraints", "[", "'flops'", "]", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.update_top_k": [[92, 105], ["evolution_search.EvolutionSearcher.top_k_candidates_with_score.update", "dict", "list", "dict", "dict.copy", "sorted", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.keys", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.items"], "methods", ["None"], ["", "", "def", "update_top_k", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update top k candidates.\"\"\"", "\n", "self", ".", "top_k_candidates_with_score", ".", "update", "(", "self", ".", "candidate_pool_with_score", ")", "\n", "self", ".", "top_k_candidates_with_score", "=", "dict", "(", "\n", "sorted", "(", "\n", "self", ".", "top_k_candidates_with_score", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "\n", "reverse", "=", "True", ")", ")", "\n", "keys", "=", "list", "(", "self", ".", "top_k_candidates_with_score", ".", "keys", "(", ")", ")", "\n", "new_dict", "=", "dict", "(", ")", "\n", "for", "k", "in", "keys", "[", ":", "self", ".", "candidate_top_k", "]", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "self", ".", "top_k_candidates_with_score", "[", "k", "]", "\n", "", "self", ".", "top_k_candidates_with_score", "=", "new_dict", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.search": [[106, 233], ["evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "range", "mmcv.fileio.load", "mmcv.fileio.load.keys", "int", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.logger.info", "mmcv.runner.get_dist_info", "utils.broadcast_object_list", "enumerate", "utils.broadcast_object_list", "evolution_search.EvolutionSearcher.algorithm.mutator.set_chosen_subnet", "dict", "final_subnet_dict.keys", "time.strftime", "mmcv.fileio.dump", "evolution_search.EvolutionSearcher.logger.info", "setattr", "evolution_search.EvolutionSearcher.algorithm.mutator.set_subnet", "evolution_search.EvolutionSearcher.test_fn", "list", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.update_top_k", "list", "evolution_search.EvolutionSearcher.logger.info", "list", "list", "dict", "mmcv.fileio.dump", "evolution_search.EvolutionSearcher.logger.info", "list", "dict", "time.localtime", "os.join", "len", "evolution_search.EvolutionSearcher.algorithm.mutator.sample_subnet", "evolution_search.EvolutionSearcher.algorithm.mutator.set_subnet", "evolution_search.EvolutionSearcher.check_constraints", "evolution_search.EvolutionSearcher.dataloader.dataset.evaluate", "evolution_search.EvolutionSearcher.logger.info", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.keys", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.keys", "len", "random.choice", "evolution_search.EvolutionSearcher.algorithm.mutator.mutation", "evolution_search.EvolutionSearcher.algorithm.mutator.set_subnet", "evolution_search.EvolutionSearcher.check_constraints", "len", "random.choice", "random.choice", "evolution_search.EvolutionSearcher.algorithm.mutator.crossover", "evolution_search.EvolutionSearcher.algorithm.mutator.set_subnet", "evolution_search.EvolutionSearcher.check_constraints", "getattr", "os.join", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.values", "evolution_search.EvolutionSearcher.candidate_pool.append", "list", "list.append", "list", "list", "list.append", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.values", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.values", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.values", "list", "evolution_search.EvolutionSearcher.top_k_candidates_with_score.keys"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.utils.broadcast.broadcast_object_list", "home.repos.pwc.inspect_result.hunto_maskd.utils.broadcast.broadcast_object_list", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_chosen_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.update_top_k", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.check_constraints", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.mutation", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.check_constraints", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.crossover", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.searcher.evolution_search.EvolutionSearcher.check_constraints"], ["", "def", "search", "(", "self", ")", ":", "\n", "        ", "\"\"\"Execute the pipeline of evolution search.\"\"\"", "\n", "epoch_start", "=", "0", "\n", "if", "self", ".", "resume_from", "is", "not", "None", ":", "\n", "            ", "searcher_resume", "=", "mmcv", ".", "fileio", ".", "load", "(", "self", ".", "resume_from", ")", "\n", "for", "k", "in", "searcher_resume", ".", "keys", "(", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "k", ",", "searcher_resume", "[", "k", "]", ")", "\n", "", "epoch_start", "=", "int", "(", "searcher_resume", "[", "'epoch'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'#'", "*", "100", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Resume from epoch: {epoch_start}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "'#'", "*", "100", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Experiment setting:'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'candidate_pool_size: {self.candidate_pool_size}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'candidate_top_k: {self.candidate_top_k}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'num_crossover: {self.num_crossover}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'num_mutation: {self.num_mutation}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'mutate_prob: {self.mutate_prob}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'max_epoch: {self.max_epoch}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'score_key: {self.score_key}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'constraints: {self.constraints}'", ")", "\n", "self", ".", "logger", ".", "info", "(", "'#'", "*", "100", ")", "\n", "\n", "rank", "=", "get_dist_info", "(", ")", "[", "0", "]", "\n", "for", "epoch", "in", "range", "(", "epoch_start", ",", "self", ".", "max_epoch", ")", ":", "\n", "            ", "if", "rank", "==", "0", ":", "\n", "                ", "while", "len", "(", "self", ".", "candidate_pool", ")", "<", "self", ".", "candidate_pool_size", ":", "\n", "                    ", "candidate", "=", "self", ".", "algorithm", ".", "mutator", ".", "sample_subnet", "(", "searching", "=", "True", ")", "\n", "self", ".", "algorithm", ".", "mutator", ".", "set_subnet", "(", "candidate", ")", "\n", "\n", "if", "self", ".", "check_constraints", "(", ")", ":", "\n", "                        ", "self", ".", "candidate_pool", ".", "append", "(", "candidate", ")", "\n", "\n", "", "", "broadcast_candidate_pool", "=", "self", ".", "candidate_pool", "\n", "", "else", ":", "\n", "                ", "broadcast_candidate_pool", "=", "[", "None", "]", "*", "self", ".", "candidate_pool_size", "\n", "", "broadcast_candidate_pool", "=", "broadcast_object_list", "(", "\n", "broadcast_candidate_pool", ")", "\n", "\n", "for", "i", ",", "candidate", "in", "enumerate", "(", "broadcast_candidate_pool", ")", ":", "\n", "                ", "self", ".", "algorithm", ".", "mutator", ".", "set_subnet", "(", "candidate", ")", "\n", "outputs", "=", "self", ".", "test_fn", "(", "self", ".", "algorithm_for_test", ",", "\n", "self", ".", "dataloader", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                    ", "eval_result", "=", "self", ".", "dataloader", ".", "dataset", ".", "evaluate", "(", "\n", "outputs", ",", "self", ".", "metrics", ",", "self", ".", "metric_options", ")", "\n", "score", "=", "eval_result", "[", "self", ".", "score_key", "]", "\n", "self", ".", "candidate_pool_with_score", "[", "score", "]", "=", "candidate", "\n", "self", ".", "logger", ".", "info", "(", "f'Epoch:[{epoch + 1}/{self.max_epoch}] '", "\n", "f'Candidate:[{i + 1}/'", "\n", "f'{self.candidate_pool_size}] '", "\n", "f'Score:{score}'", ")", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "                ", "scores_before", "=", "list", "(", "self", ".", "top_k_candidates_with_score", ".", "keys", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'top k scores before update: '", "\n", "f'{scores_before}'", ")", "\n", "self", ".", "update_top_k", "(", ")", "\n", "scores_after", "=", "list", "(", "self", ".", "top_k_candidates_with_score", ".", "keys", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'top k scores before update: '", "\n", "f'{scores_after}'", ")", "\n", "\n", "mutation_candidates", "=", "list", "(", ")", "\n", "max_mutate_iters", "=", "self", ".", "num_mutation", "*", "10", "\n", "mutate_iter", "=", "0", "\n", "while", "len", "(", "mutation_candidates", ")", "<", "self", ".", "num_mutation", ":", "\n", "                    ", "mutate_iter", "+=", "1", "\n", "if", "mutate_iter", ">", "max_mutate_iters", ":", "\n", "                        ", "break", "\n", "", "candidate", "=", "random", ".", "choice", "(", "\n", "list", "(", "self", ".", "top_k_candidates_with_score", ".", "values", "(", ")", ")", ")", "\n", "mutation", "=", "self", ".", "algorithm", ".", "mutator", ".", "mutation", "(", "\n", "candidate", ",", "self", ".", "mutate_prob", ")", "\n", "self", ".", "algorithm", ".", "mutator", ".", "set_subnet", "(", "mutation", ")", "\n", "if", "self", ".", "check_constraints", "(", ")", ":", "\n", "                        ", "mutation_candidates", ".", "append", "(", "mutation", ")", "\n", "\n", "", "", "crossover_candidates", "=", "list", "(", ")", "\n", "crossover_iter", "=", "0", "\n", "max_crossover_iters", "=", "self", ".", "num_crossover", "*", "10", "\n", "while", "len", "(", "crossover_candidates", ")", "<", "self", ".", "num_crossover", ":", "\n", "                    ", "crossover_iter", "+=", "1", "\n", "if", "crossover_iter", ">", "max_crossover_iters", ":", "\n", "                        ", "break", "\n", "\n", "", "random_candidate1", "=", "random", ".", "choice", "(", "\n", "list", "(", "self", ".", "top_k_candidates_with_score", ".", "values", "(", ")", ")", ")", "\n", "random_candidate2", "=", "random", ".", "choice", "(", "\n", "list", "(", "self", ".", "top_k_candidates_with_score", ".", "values", "(", ")", ")", ")", "\n", "\n", "crossover_candidate", "=", "self", ".", "algorithm", ".", "mutator", ".", "crossover", "(", "\n", "random_candidate1", ",", "random_candidate2", ")", "\n", "self", ".", "algorithm", ".", "mutator", ".", "set_subnet", "(", "crossover_candidate", ")", "\n", "if", "self", ".", "check_constraints", "(", ")", ":", "\n", "                        ", "crossover_candidates", ".", "append", "(", "crossover_candidate", ")", "\n", "\n", "", "", "self", ".", "candidate_pool", "=", "(", "\n", "mutation_candidates", "+", "crossover_candidates", ")", "\n", "\n", "save_for_resume", "=", "dict", "(", ")", "\n", "save_for_resume", "[", "'epoch'", "]", "=", "epoch", "+", "1", "\n", "for", "k", "in", "[", "'candidate_pool'", ",", "'top_k_candidates_with_score'", "]", ":", "\n", "                    ", "save_for_resume", "[", "k", "]", "=", "getattr", "(", "self", ",", "k", ")", "\n", "", "mmcv", ".", "fileio", ".", "dump", "(", "\n", "save_for_resume", ",", "\n", "osp", ".", "join", "(", "self", ".", "work_dir", ",", "f'search_epoch_{epoch + 1}.pkl'", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f'Epoch:[{epoch + 1}/{self.max_epoch}], top1_score: '", "\n", "f'{list(self.top_k_candidates_with_score.keys())[0]}'", ")", "\n", "", "self", ".", "candidate_pool", "=", "broadcast_object_list", "(", "self", ".", "candidate_pool", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "final_subnet_dict", "=", "list", "(", "\n", "self", ".", "top_k_candidates_with_score", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "algorithm", ".", "mutator", ".", "set_chosen_subnet", "(", "final_subnet_dict", ")", "\n", "final_subnet_dict_to_save", "=", "dict", "(", ")", "\n", "for", "k", "in", "final_subnet_dict", ".", "keys", "(", ")", ":", "\n", "                ", "final_subnet_dict_to_save", "[", "k", "]", "=", "dict", "(", "{", "\n", "'chosen'", ":", "\n", "self", ".", "algorithm", ".", "mutator", ".", "search_spaces", "[", "k", "]", "[", "'chosen'", "]", "\n", "}", ")", "\n", "", "timestamp_subnet", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "save_name", "=", "f'final_subnet_{timestamp_subnet}.yaml'", "\n", "mmcv", ".", "fileio", ".", "dump", "(", "final_subnet_dict_to_save", ",", "\n", "osp", ".", "join", "(", "self", ".", "work_dir", ",", "save_name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Search finished and '", "\n", "f'{save_name} saved in {self.work_dir}.'", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.optimizer.builder.build_optimizers": [[4, 48], ["hasattr", "cfgs.items", "mmcv.runner.build_optimizer", "cfgs.items", "isinstance", "cfg.copy", "getattr", "mmcv.runner.build_optimizer"], "function", ["None"], ["\n", "MODELS", "=", "Registry", "(", "'models'", ",", "parent", "=", "MMCV_MODELS", ")", "\n", "\n", "ALGORITHMS", "=", "MODELS", "\n", "MUTABLES", "=", "MODELS", "\n", "DISTILLERS", "=", "MODELS", "\n", "LOSSES", "=", "MODELS", "\n", "OPS", "=", "MODELS", "\n", "PRUNERS", "=", "MODELS", "\n", "QUANTIZERS", "=", "MODELS", "\n", "ARCHITECTURES", "=", "MODELS", "\n", "MUTATORS", "=", "MODELS", "\n", "\n", "\n", "def", "build_algorithm", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build compressor.\"\"\"", "\n", "return", "ALGORITHMS", ".", "build", "(", "cfg", ")", "\n", "\n", "\n", "", "def", "build_architecture", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build architecture.\"\"\"", "\n", "return", "ARCHITECTURES", ".", "build", "(", "cfg", ")", "\n", "\n", "\n", "", "def", "build_mutator", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build mutator.\"\"\"", "\n", "return", "MUTATORS", ".", "build", "(", "cfg", ")", "\n", "\n", "\n", "", "def", "build_distiller", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build distiller.\"\"\"", "\n", "return", "DISTILLERS", ".", "build", "(", "cfg", ")", "\n", "\n", "\n", "", "def", "build_pruner", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build pruner.\"\"\"", "\n", "return", "PRUNERS", ".", "build", "(", "cfg", ")", "\n", "\n", "\n", "", "def", "build_mutable", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"Build mutable.\"\"\"", "\n", "return", "MUTABLES", ".", "build", "(", "cfg", ")", "\n", "\n", "\n", "", "def", "build_op", "(", "cfg", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.EpochMultiLoader.__init__": [[18, 21], ["iter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloaders", ")", ":", "\n", "        ", "self", ".", "_dataloaders", "=", "dataloaders", "\n", "self", ".", "iter_loaders", "=", "[", "iter", "(", "loader", ")", "for", "loader", "in", "self", ".", "_dataloaders", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.EpochMultiLoader.num_loaders": [[22, 26], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_loaders", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of dataloaders.\"\"\"", "\n", "return", "len", "(", "self", ".", "_dataloaders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.EpochMultiLoader.__iter__": [[27, 30], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return self when executing __iter__.\"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.EpochMultiLoader.__next__": [[31, 36], ["tuple", "next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get next iter's data.\"\"\"", "\n", "data", "=", "tuple", "(", "[", "next", "(", "loader", ")", "for", "loader", "in", "self", ".", "iter_loaders", "]", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.EpochMultiLoader.__len__": [[37, 40], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the length of loader.\"\"\"", "\n", "return", "min", "(", "[", "len", "(", "loader", ")", "for", "loader", "in", "self", ".", "_dataloaders", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.train": [[51, 75], ["epoch_based_runner.MultiLoaderEpochBasedRunner.model.train", "isinstance", "epoch_based_runner.MultiLoaderEpochBasedRunner.call_hook", "time.sleep", "enumerate", "epoch_based_runner.MultiLoaderEpochBasedRunner.call_hook", "epoch_based_runner.EpochMultiLoader", "len", "epoch_based_runner.MultiLoaderEpochBasedRunner.call_hook", "epoch_based_runner.MultiLoaderEpochBasedRunner.run_iter", "epoch_based_runner.MultiLoaderEpochBasedRunner.call_hook"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.train"], ["def", "train", "(", "self", ",", "data_loader", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Rewrite the ``train`` of ``EpochBasedRunner``.\"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "mode", "=", "'train'", "\n", "\n", "# the only difference from EpochBasedRunner's ``train``", "\n", "if", "isinstance", "(", "data_loader", ",", "list", ")", ":", "\n", "            ", "self", ".", "data_loader", "=", "EpochMultiLoader", "(", "data_loader", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_loader", "=", "data_loader", "\n", "\n", "", "self", ".", "_max_iters", "=", "self", ".", "_max_epochs", "*", "len", "(", "self", ".", "data_loader", ")", "\n", "self", ".", "call_hook", "(", "'before_train_epoch'", ")", "\n", "time", ".", "sleep", "(", "2", ")", "# Prevent possible deadlock during epoch transition", "\n", "for", "i", ",", "data_batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "self", ".", "_inner_iter", "=", "i", "\n", "self", ".", "call_hook", "(", "'before_train_iter'", ")", "\n", "self", ".", "run_iter", "(", "data_batch", ",", "train_mode", "=", "True", ",", "**", "kwargs", ")", "\n", "self", ".", "call_hook", "(", "'after_train_iter'", ")", "\n", "self", ".", "_iter", "+=", "1", "\n", "\n", "", "self", ".", "call_hook", "(", "'after_train_epoch'", ")", "\n", "\n", "self", ".", "_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.register_lr_hook": [[76, 109], ["epoch_based_runner.MultiLoaderEpochBasedRunner.register_hook", "isinstance", "lr_config.pop", "mmcv.build_from_cfg", "functools.partial", "lr_config.pop", "policy_type.title.title.lower", "policy_type.title.title.title"], "methods", ["None"], ["", "def", "register_lr_hook", "(", "self", ",", "lr_config", ")", ":", "\n", "        ", "\"\"\"Resister a hook for setting learning rate.\n\n        Args:\n            lr_config (dict): Config for setting learning rate.\n        \"\"\"", "\n", "if", "lr_config", "is", "None", ":", "\n", "            ", "return", "\n", "", "elif", "isinstance", "(", "lr_config", ",", "dict", ")", ":", "\n", "            ", "assert", "'policy'", "in", "lr_config", "\n", "policy_type", "=", "lr_config", ".", "pop", "(", "'policy'", ")", "\n", "if", "'freeze_optimizers'", "in", "lr_config", ":", "\n", "                ", "freeze_optimizers", "=", "lr_config", ".", "pop", "(", "'freeze_optimizers'", ")", "\n", "", "else", ":", "\n", "                ", "freeze_optimizers", "=", "[", "]", "\n", "# If the type of policy is all in lower case, e.g., 'cyclic',", "\n", "# then its first letter will be capitalized, e.g., to be 'Cyclic'.", "\n", "# This is for the convenient usage of Lr updater.", "\n", "# Since this is not applicable for ``CosineAnnealingLrUpdater``,", "\n", "# the string will not be changed if it contains capital letters.", "\n", "", "if", "policy_type", "==", "policy_type", ".", "lower", "(", ")", ":", "\n", "                ", "policy_type", "=", "policy_type", ".", "title", "(", ")", "\n", "", "hook_type", "=", "policy_type", "+", "'LrUpdaterHook'", "\n", "lr_config", "[", "'type'", "]", "=", "hook_type", "\n", "hook", "=", "mmcv", ".", "build_from_cfg", "(", "lr_config", ",", "HOOKS", ")", "\n", "\n", "# modify the hook's ``_set_lr``", "\n", "# the only difference from BasedRunner's ``register_lr_hook``", "\n", "hook", ".", "_set_lr", "=", "partial", "(", "set_lr", ",", "freeze_optimizers", "=", "freeze_optimizers", ")", "\n", "", "else", ":", "\n", "            ", "hook", "=", "lr_config", "\n", "\n", "", "self", ".", "register_hook", "(", "hook", ",", "priority", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.epoch_based_runner.MultiLoaderEpochBasedRunner.search_subnet": [[110, 144], ["filename_tmpl.format", "os.join", "mutator.search_subnet", "hasattr", "hasattr", "open", "yaml.dump", "os.join", "platform.system", "mmcv.symlink", "shutil.copy"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.search_subnet"], ["", "def", "search_subnet", "(", "self", ",", "\n", "out_dir", ",", "\n", "filename_tmpl", "=", "'epoch_{}.yaml'", ",", "\n", "create_symlink", "=", "True", ")", ":", "\n", "        ", "\"\"\"Search the best subnet.\n\n        Args:\n            out_dir (str): The directory that subnets are saved.\n            filename_tmpl (str, optional): The subnet filename template,\n                which contains a placeholder for the epoch number.\n                Defaults to 'epoch_{}.yaml'.\n            create_symlink (bool, optional): Whether to create a symlink\n                \"latest.yaml\" to point to the latest subnet.\n                Defaults to True.\n        \"\"\"", "\n", "\n", "filename", "=", "filename_tmpl", ".", "format", "(", "self", ".", "epoch", "+", "1", ")", "\n", "filepath", "=", "osp", ".", "join", "(", "out_dir", ",", "filename", ")", "\n", "\n", "algorithm", "=", "self", ".", "model", ".", "module", "if", "hasattr", "(", "self", ".", "model", ",", "\n", "'module'", ")", "else", "self", ".", "model", "\n", "mutator", "=", "algorithm", ".", "mutator", ".", "module", "if", "hasattr", "(", "\n", "algorithm", ".", "mutator", ",", "'module'", ")", "else", "algorithm", ".", "mutator", "\n", "subnet", "=", "mutator", ".", "search_subnet", "(", ")", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "subnet", ",", "f", ")", "\n", "# in some environments, ``os.symlink`` is not supported, you may need", "\n", "# to set ``create_symlink`` to False", "\n", "", "if", "create_symlink", ":", "\n", "            ", "dst_file", "=", "osp", ".", "join", "(", "out_dir", ",", "'latest.yaml'", ")", "\n", "if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "                ", "mmcv", ".", "symlink", "(", "filename", ",", "dst_file", ")", "\n", "", "else", ":", "\n", "                ", "shutil", ".", "copy", "(", "filepath", ",", "dst_file", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.IterMultiLoader.__init__": [[20, 25], ["isinstance", "iter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloaders", ")", ":", "\n", "        ", "self", ".", "_dataloaders", "=", "dataloaders", "if", "isinstance", "(", "dataloaders", ",", "\n", "list", ")", "else", "[", "dataloaders", "]", "\n", "self", ".", "iter_loaders", "=", "[", "iter", "(", "loader", ")", "for", "loader", "in", "self", ".", "_dataloaders", "]", "\n", "self", ".", "_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.IterMultiLoader.epoch": [[26, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"The property of the class.\"\"\"", "\n", "return", "self", ".", "_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.IterMultiLoader.num_loaders": [[31, 35], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_loaders", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of dataloaders.\"\"\"", "\n", "return", "len", "(", "self", ".", "_dataloaders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.IterMultiLoader.__next__": [[36, 49], ["tuple", "tuple", "next", "hasattr", "iter", "loader.sampler.set_epoch", "next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get next iter's data.\"\"\"", "\n", "try", ":", "\n", "            ", "data", "=", "tuple", "(", "[", "next", "(", "loader", ")", "for", "loader", "in", "self", ".", "iter_loaders", "]", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "_epoch", "+=", "1", "\n", "for", "loader", "in", "self", ".", "_dataloaders", ":", "\n", "                ", "if", "hasattr", "(", "loader", ".", "sampler", ",", "'set_epoch'", ")", ":", "\n", "                    ", "loader", ".", "sampler", ".", "set_epoch", "(", "self", ".", "_epoch", ")", "\n", "", "", "self", ".", "iter_loader", "=", "[", "iter", "(", "loader", ")", "for", "loader", "in", "self", ".", "_dataloaders", "]", "\n", "data", "=", "tuple", "(", "[", "next", "(", "loader", ")", "for", "loader", "in", "self", ".", "iter_loaders", "]", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.IterMultiLoader.__len__": [[50, 53], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the length of loader.\"\"\"", "\n", "return", "min", "(", "[", "len", "(", "loader", ")", "for", "loader", "in", "self", ".", "_dataloaders", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.run": [[64, 118], ["isinstance", "mmcv.is_list_of", "iter_based_runner.MultiLoaderIterBasedRunner.logger.info", "iter_based_runner.MultiLoaderIterBasedRunner.logger.info", "iter_based_runner.MultiLoaderIterBasedRunner.logger.info", "iter_based_runner.MultiLoaderIterBasedRunner.call_hook", "iter_based_runner.MultiLoaderIterBasedRunner.call_hook", "time.sleep", "iter_based_runner.MultiLoaderIterBasedRunner.call_hook", "iter_based_runner.MultiLoaderIterBasedRunner.call_hook", "len", "len", "warnings.warn", "mmcv.runner.utils.get_host_info", "iter_based_runner.MultiLoaderIterBasedRunner.get_hook_info", "iter_based_runner.IterMultiLoader", "enumerate", "getattr", "range", "ValueError", "getattr.", "isinstance", "hasattr"], "methods", ["None"], ["def", "run", "(", "self", ",", "data_loaders", ",", "workflow", ",", "max_iters", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Start running.\n\n        Args:\n            data_loaders (list[:obj:`DataLoader`]): Dataloaders for training\n                and validation.\n            workflow (list[tuple]): A list of (phase, iters) to specify the\n                running order and iterations. E.g, [('train', 10000),\n                ('val', 1000)] means running 10000 iterations for training and\n                1000 iterations for validation, iteratively.\n            max_iters (int): Specify the max iters.\n        \"\"\"", "\n", "assert", "isinstance", "(", "data_loaders", ",", "list", ")", "\n", "assert", "mmcv", ".", "is_list_of", "(", "workflow", ",", "tuple", ")", "\n", "assert", "len", "(", "data_loaders", ")", "==", "len", "(", "workflow", ")", "\n", "if", "max_iters", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'setting max_iters in run is deprecated, '", "\n", "'please set max_iters in runner_config'", ",", "DeprecationWarning", ")", "\n", "self", ".", "_max_iters", "=", "max_iters", "\n", "", "assert", "self", ".", "_max_iters", "is", "not", "None", ",", "(", "\n", "'max_iters must be specified during instantiation'", ")", "\n", "\n", "work_dir", "=", "self", ".", "work_dir", "if", "self", ".", "work_dir", "is", "not", "None", "else", "'NONE'", "\n", "self", ".", "logger", ".", "info", "(", "'Start running, host: %s, work_dir: %s'", ",", "\n", "get_host_info", "(", ")", ",", "work_dir", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Hooks will be executed in the following order:\\n%s'", ",", "\n", "self", ".", "get_hook_info", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'workflow: %s, max: %d iters'", ",", "workflow", ",", "\n", "self", ".", "_max_iters", ")", "\n", "self", ".", "call_hook", "(", "'before_run'", ")", "\n", "\n", "# the only difference from IterBasedRunner's ``train``", "\n", "iter_loaders", "=", "[", "IterMultiLoader", "(", "x", ")", "for", "x", "in", "data_loaders", "]", "\n", "\n", "self", ".", "call_hook", "(", "'before_epoch'", ")", "\n", "\n", "while", "self", ".", "iter", "<", "self", ".", "_max_iters", ":", "\n", "            ", "for", "i", ",", "flow", "in", "enumerate", "(", "workflow", ")", ":", "\n", "                ", "self", ".", "_inner_iter", "=", "0", "\n", "mode", ",", "iters", "=", "flow", "\n", "if", "not", "isinstance", "(", "mode", ",", "str", ")", "or", "not", "hasattr", "(", "self", ",", "mode", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "'runner has no method named \"{}\" to run a workflow'", ".", "\n", "format", "(", "mode", ")", ")", "\n", "", "iter_runner", "=", "getattr", "(", "self", ",", "mode", ")", "\n", "for", "_", "in", "range", "(", "iters", ")", ":", "\n", "                    ", "if", "mode", "==", "'train'", "and", "self", ".", "iter", ">=", "self", ".", "_max_iters", ":", "\n", "                        ", "break", "\n", "", "iter_runner", "(", "iter_loaders", "[", "i", "]", ",", "**", "kwargs", ")", "\n", "\n", "", "", "", "time", ".", "sleep", "(", "1", ")", "# wait for some hooks like loggers to finish", "\n", "self", ".", "call_hook", "(", "'after_epoch'", ")", "\n", "self", ".", "call_hook", "(", "'after_run'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.register_lr_hook": [[119, 152], ["iter_based_runner.MultiLoaderIterBasedRunner.register_hook", "isinstance", "lr_config.pop", "mmcv.build_from_cfg", "functools.partial", "lr_config.pop", "policy_type.title.title.lower", "policy_type.title.title.title"], "methods", ["None"], ["", "def", "register_lr_hook", "(", "self", ",", "lr_config", ")", ":", "\n", "        ", "\"\"\"Resister a hook for setting learning rate.\n\n        Args:\n            lr_config (dict): Config for setting learning rate.\n        \"\"\"", "\n", "if", "lr_config", "is", "None", ":", "\n", "            ", "return", "\n", "", "elif", "isinstance", "(", "lr_config", ",", "dict", ")", ":", "\n", "            ", "assert", "'policy'", "in", "lr_config", "\n", "policy_type", "=", "lr_config", ".", "pop", "(", "'policy'", ")", "\n", "if", "'freeze_optimizers'", "in", "lr_config", ":", "\n", "                ", "freeze_optimizers", "=", "lr_config", ".", "pop", "(", "'freeze_optimizers'", ")", "\n", "", "else", ":", "\n", "                ", "freeze_optimizers", "=", "[", "]", "\n", "# If the type of policy is all in lower case, e.g., 'cyclic',", "\n", "# then its first letter will be capitalized, e.g., to be 'Cyclic'.", "\n", "# This is for the convenient usage of Lr updater.", "\n", "# Since this is not applicable for ``CosineAnnealingLrUpdater``,", "\n", "# the string will not be changed if it contains capital letters.", "\n", "", "if", "policy_type", "==", "policy_type", ".", "lower", "(", ")", ":", "\n", "                ", "policy_type", "=", "policy_type", ".", "title", "(", ")", "\n", "", "hook_type", "=", "policy_type", "+", "'LrUpdaterHook'", "\n", "lr_config", "[", "'type'", "]", "=", "hook_type", "\n", "hook", "=", "mmcv", ".", "build_from_cfg", "(", "lr_config", ",", "HOOKS", ")", "\n", "\n", "# modify the hook's ``_set_lr``", "\n", "# the only difference from BasedRunner's ``register_lr_hook``", "\n", "hook", ".", "_set_lr", "=", "partial", "(", "set_lr", ",", "freeze_optimizers", "=", "freeze_optimizers", ")", "\n", "", "else", ":", "\n", "            ", "hook", "=", "lr_config", "\n", "\n", "", "self", ".", "register_hook", "(", "hook", ",", "priority", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.search_subnet": [[153, 184], ["filename_tmpl.format", "os.join", "iter_based_runner.MultiLoaderIterBasedRunner.model.module.search_subnet", "open", "yaml.dump", "os.join", "platform.system", "mmcv.symlink", "shutil.copy"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.search_subnet"], ["", "def", "search_subnet", "(", "self", ",", "\n", "out_dir", ",", "\n", "filename_tmpl", "=", "'epoch_{}.yaml'", ",", "\n", "create_symlink", "=", "True", ")", ":", "\n", "        ", "\"\"\"Search the best subnet.\n\n        Args:\n            out_dir (str): The directory that subnets are saved.\n            filename_tmpl (str, optional): The subnet filename template,\n                which contains a placeholder for the epoch number.\n                Defaults to 'epoch_{}.yaml'.\n            create_symlink (bool, optional): Whether to create a symlink\n                \"latest.yaml\" to point to the latest subnet.\n                Defaults to True.\n        \"\"\"", "\n", "\n", "filename", "=", "filename_tmpl", ".", "format", "(", "self", ".", "epoch", "+", "1", ")", "\n", "filepath", "=", "osp", ".", "join", "(", "out_dir", ",", "filename", ")", "\n", "\n", "# save_checkpoint(self.model, filepath, optimizer=optimizer, meta=meta)", "\n", "subnet", "=", "self", ".", "model", ".", "module", ".", "search_subnet", "(", ")", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "subnet", ",", "f", ")", "\n", "# in some environments, ``os.symlink`` is not supported, you may need", "\n", "# to set ``create_symlink`` to False", "\n", "", "if", "create_symlink", ":", "\n", "            ", "dst_file", "=", "osp", ".", "join", "(", "out_dir", ",", "'latest.yaml'", ")", "\n", "if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "                ", "mmcv", ".", "symlink", "(", "filename", ",", "dst_file", ")", "\n", "", "else", ":", "\n", "                ", "shutil", ".", "copy", "(", "filepath", ",", "dst_file", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.search_subnet.SearchSubnetHook.__init__": [[27, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "interval", "=", "-", "1", ",", "\n", "by_epoch", "=", "True", ",", "\n", "out_dir", "=", "None", ",", "\n", "max_keep_ckpts", "=", "-", "1", ",", "\n", "save_last", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "interval", "=", "interval", "\n", "self", ".", "by_epoch", "=", "by_epoch", "\n", "\n", "self", ".", "out_dir", "=", "out_dir", "\n", "self", ".", "max_keep_ckpts", "=", "max_keep_ckpts", "\n", "self", ".", "save_last", "=", "save_last", "\n", "self", ".", "args", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.search_subnet.SearchSubnetHook.before_run": [[42, 46], ["None"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Executed in before_run stage.\"\"\"", "\n", "if", "not", "self", ".", "out_dir", ":", "\n", "            ", "self", ".", "out_dir", "=", "runner", ".", "work_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.search_subnet.SearchSubnetHook.after_train_epoch": [[47, 60], ["search_subnet.SearchSubnetHook.every_n_epochs", "runner.logger.info", "search_subnet.SearchSubnetHook._search_subnet", "search_subnet.SearchSubnetHook.is_last_epoch"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.hooks.search_subnet.SearchSubnetHook._search_subnet"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Executed in after_train_epoch stage.\"\"\"", "\n", "if", "not", "self", ".", "by_epoch", ":", "\n", "            ", "return", "\n", "\n", "# save checkpoint for following cases:", "\n", "# 1. every ``self.interval`` epochs", "\n", "# 2. reach the last epoch of training", "\n", "", "if", "self", ".", "every_n_epochs", "(", "\n", "runner", ",", "self", ".", "interval", ")", "or", "(", "self", ".", "save_last", "\n", "and", "self", ".", "is_last_epoch", "(", "runner", ")", ")", ":", "\n", "            ", "runner", ".", "logger", ".", "info", "(", "f'Saving subnet at {runner.epoch + 1} epochs'", ")", "\n", "self", ".", "_search_subnet", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.search_subnet.SearchSubnetHook._search_subnet": [[61, 94], ["runner.search_subnet", "runner.meta.setdefault", "os.path.join", "range", "search_subnet.SearchSubnetHook.args.get", "search_subnet.SearchSubnetHook.args.get().format", "search_subnet.SearchSubnetHook.args.get().format", "dict", "os.path.join", "os.path.exists", "search_subnet.SearchSubnetHook.format", "os.remove", "search_subnet.SearchSubnetHook.args.get", "search_subnet.SearchSubnetHook.args.get"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.runners.iter_based_runner.MultiLoaderIterBasedRunner.search_subnet"], ["", "", "@", "master_only", "\n", "def", "_search_subnet", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Save the current checkpoint and delete unwanted checkpoint.\"\"\"", "\n", "runner", ".", "search_subnet", "(", "self", ".", "out_dir", ",", "**", "self", ".", "args", ")", "\n", "if", "runner", ".", "meta", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "by_epoch", ":", "\n", "                ", "cur_subnet_filename", "=", "self", ".", "args", ".", "get", "(", "\n", "'filename_tmpl'", ",", "'epoch_{}.yaml'", ")", ".", "format", "(", "runner", ".", "epoch", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "cur_subnet_filename", "=", "self", ".", "args", ".", "get", "(", "\n", "'filename_tmpl'", ",", "'iter_{}.yaml'", ")", ".", "format", "(", "runner", ".", "iter", "+", "1", ")", "\n", "", "runner", ".", "meta", ".", "setdefault", "(", "'hook_msgs'", ",", "dict", "(", ")", ")", "\n", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'last_subnet'", "]", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "out_dir", ",", "cur_subnet_filename", ")", "\n", "# remove other checkpoints", "\n", "", "if", "self", ".", "max_keep_ckpts", ">", "0", ":", "\n", "            ", "if", "self", ".", "by_epoch", ":", "\n", "                ", "name", "=", "'epoch_{}.yaml'", "\n", "current_subnet", "=", "runner", ".", "epoch", "+", "1", "\n", "", "else", ":", "\n", "                ", "name", "=", "'iter_{}.yaml'", "\n", "current_subnet", "=", "runner", ".", "iter", "+", "1", "\n", "", "redundant_subnets", "=", "range", "(", "\n", "current_subnet", "-", "self", ".", "max_keep_subnets", "*", "self", ".", "interval", ",", "0", ",", "\n", "-", "self", ".", "interval", ")", "\n", "filename_tmpl", "=", "self", ".", "args", ".", "get", "(", "'filename_tmpl'", ",", "name", ")", "\n", "for", "_step", "in", "redundant_subnets", ":", "\n", "                ", "subnet_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "\n", "filename_tmpl", ".", "format", "(", "_step", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "subnet_path", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "subnet_path", ")", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.search_subnet.SearchSubnetHook.after_train_iter": [[95, 110], ["search_subnet.SearchSubnetHook.every_n_iters", "runner.logger.info", "search_subnet.SearchSubnetHook._search_subnet", "search_subnet.SearchSubnetHook.is_last_iter"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.hooks.search_subnet.SearchSubnetHook._search_subnet"], ["", "", "", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Executed in after_train_iter stage.\"\"\"", "\n", "if", "self", ".", "by_epoch", ":", "\n", "            ", "return", "\n", "\n", "# save checkpoint for following cases:", "\n", "# 1. every ``self.interval`` iterations", "\n", "# 2. reach the last iteration of training", "\n", "", "if", "self", ".", "every_n_iters", "(", "\n", "runner", ",", "self", ".", "interval", ")", "or", "(", "self", ".", "save_last", "\n", "and", "self", ".", "is_last_iter", "(", "runner", ")", ")", ":", "\n", "            ", "runner", ".", "logger", ".", "info", "(", "\n", "f'Saving subnet at {runner.iter + 1} iterations'", ")", "\n", "\n", "self", ".", "_search_subnet", "(", "runner", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.drop_path_prob.DropPathProbHook.__init__": [[20, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_prob", ",", "interval", "=", "-", "1", ",", "by_epoch", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "interval", "=", "interval", "\n", "self", ".", "by_epoch", "=", "by_epoch", "\n", "self", ".", "max_prob", "=", "max_prob", "\n", "assert", "self", ".", "by_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.drop_path_prob.DropPathProbHook.before_train_epoch": [[26, 42], ["drop_path_prob.DropPathProbHook.every_n_epochs", "runner.model.modules", "runner.logger.info", "drop_path_prob.DropPathProbHook.is_last_epoch", "isinstance"], "methods", ["None"], ["", "def", "before_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Executed in before_train_epoch stage.\"\"\"", "\n", "if", "not", "self", ".", "by_epoch", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "every_n_epochs", "(", "\n", "runner", ",", "self", ".", "interval", ")", "or", "(", "self", ".", "save_last", "\n", "and", "self", ".", "is_last_epoch", "(", "runner", ")", ")", ":", "\n", "            ", "cur_epoch", "=", "runner", ".", "epoch", "\n", "max_epoch", "=", "runner", ".", "_max_epochs", "\n", "drop_prob", "=", "self", ".", "max_prob", "*", "(", "cur_epoch", "*", "1.0", ")", "/", "(", "max_epoch", "*", "1.0", ")", "\n", "for", "module", "in", "runner", ".", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "DropPath", ")", ":", "\n", "                    ", "module", ".", "drop_prob", "=", "drop_prob", "\n", "", "", "runner", ".", "logger", ".", "info", "(", "f'Set drop_prob to {drop_prob} \\\n                    at {runner.epoch + 1} epochs'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.hooks.sampler_seed.DistSamplerSeedHook.before_epoch": [[14, 29], ["hasattr", "hasattr", "data_loader.sampler.set_epoch", "hasattr", "data_loader.batch_sampler.sampler.set_epoch"], "methods", ["None"], ["def", "before_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Executed in before_epoch stage.\"\"\"", "\n", "if", "hasattr", "(", "runner", ".", "data_loader", ",", "'_dataloaders'", ")", ":", "\n", "            ", "data_loaders", "=", "runner", ".", "data_loader", ".", "_dataloaders", "\n", "", "else", ":", "\n", "            ", "data_loaders", "=", "[", "runner", ".", "data_loader", "]", "\n", "\n", "", "for", "data_loader", "in", "data_loaders", ":", "\n", "\n", "            ", "if", "hasattr", "(", "data_loader", ".", "sampler", ",", "'set_epoch'", ")", ":", "\n", "# in case the data loader uses ``SequentialSampler`` in Pytorch", "\n", "                ", "data_loader", ".", "sampler", ".", "set_epoch", "(", "runner", ".", "epoch", ")", "\n", "", "elif", "hasattr", "(", "data_loader", ".", "batch_sampler", ".", "sampler", ",", "'set_epoch'", ")", ":", "\n", "# batch sampler in pytorch warps the sampler as its attributes.", "\n", "                ", "data_loader", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "runner", ".", "epoch", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.model_converters.publish_model.parse_args": [[11, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Process a checkpoint to be published'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint filename'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint filename'", ")", "\n", "parser", ".", "add_argument", "(", "'--mutable-cfg'", ",", "help", "=", "'input mutable cfg filename'", ")", "\n", "parser", ".", "add_argument", "(", "'--channel-cfg'", ",", "help", "=", "'output channel cfg filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.model_converters.publish_model.cal_file_sha256": [[22, 35], ["hashlib.sha256", "hashlib.sha256.hexdigest", "open", "f.read", "hashlib.sha256.update", "f.read"], "function", ["None"], ["", "def", "cal_file_sha256", "(", "file_path", ":", "str", ")", "->", "str", ":", "\n", "    ", "import", "hashlib", "\n", "\n", "BLOCKSIZE", "=", "65536", "\n", "sha256_hash", "=", "hashlib", ".", "sha256", "(", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "block", "=", "f", ".", "read", "(", "BLOCKSIZE", ")", "\n", "while", "block", ":", "\n", "            ", "sha256_hash", ".", "update", "(", "block", ")", "\n", "block", "=", "f", ".", "read", "(", "BLOCKSIZE", ")", "\n", "\n", "", "", "return", "sha256_hash", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.model_converters.publish_model.process_checkpoint": [[37, 78], ["torch.load", "publish_model.cal_file_sha256", "out_file.endswith", "datetime.datetime.now().strftime", "pathlib.Path().rename", "print", "mmcv.digit_version", "mmcv.digit_version", "torch.save", "torch.save", "mmcv.fileio.load", "mmcv.fileio.dump", "print", "mmcv.fileio.load", "mmcv.fileio.dump", "print", "datetime.datetime.now", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.model_converters.publish_model.cal_file_sha256", "home.repos.pwc.inspect_result.hunto_maskd.mmrazor.__init__.digit_version", "home.repos.pwc.inspect_result.hunto_maskd.mmrazor.__init__.digit_version"], ["", "def", "process_checkpoint", "(", "in_file", ",", "\n", "out_file", ",", "\n", "mutable_cfg_file", "=", "None", ",", "\n", "channel_cfg_file", "=", "None", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ",", "map_location", "=", "'cpu'", ")", "\n", "# remove optimizer for smaller file size", "\n", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "        ", "del", "checkpoint", "[", "'optimizer'", "]", "\n", "# if it is necessary to remove some sensitive data in checkpoint['meta'],", "\n", "# add the code here.", "\n", "", "if", "digit_version", "(", "torch", ".", "__version__", ")", ">=", "digit_version", "(", "'1.6'", ")", ":", "\n", "        ", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "\n", "", "sha", "=", "cal_file_sha256", "(", "out_file", ")", "\n", "if", "out_file", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "        ", "out_file_name", "=", "out_file", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "        ", "out_file_name", "=", "out_file", "\n", "\n", "", "current_date", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d'", ")", "\n", "final_file_prefix", "=", "out_file_name", "+", "f'_{current_date}-{sha[:8]}'", "\n", "final_ckpt_file", "=", "f'{final_file_prefix}.pth'", "\n", "Path", "(", "out_file", ")", ".", "rename", "(", "final_ckpt_file", ")", "\n", "\n", "print", "(", "f'Successfully generated the publish-ckpt as {final_ckpt_file}.'", ")", "\n", "\n", "if", "mutable_cfg_file", ":", "\n", "        ", "mutable_cfg", "=", "mmcv", ".", "fileio", ".", "load", "(", "mutable_cfg_file", ")", "\n", "final_mutable_cfg_file", "=", "f'{final_file_prefix}_mutable_cfg.yaml'", "\n", "mmcv", ".", "fileio", ".", "dump", "(", "mutable_cfg", ",", "final_mutable_cfg_file", ")", "\n", "print", "(", "f'Successfully generated the publish-mutable-cfg as \\\n                {final_mutable_cfg_file}.'", ")", "\n", "\n", "", "if", "channel_cfg_file", ":", "\n", "        ", "channel_cfg", "=", "mmcv", ".", "fileio", ".", "load", "(", "channel_cfg_file", ")", "\n", "final_channel_cfg_file", "=", "f'{final_file_prefix}_channel_cfg.yaml'", "\n", "mmcv", ".", "fileio", ".", "dump", "(", "channel_cfg", ",", "final_channel_cfg_file", ")", "\n", "print", "(", "f'Successfully generated the publish-channel-cfg as \\\n                {final_channel_cfg_file}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.model_converters.publish_model.main": [[80, 88], ["publish_model.parse_args", "publish_model.process_checkpoint", "pathlib.Path", "out_dir.exists", "ValueError"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.model_converters.publish_model.process_checkpoint"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "out_dir", "=", "Path", "(", "args", ".", "out_file", ")", ".", "parent", "\n", "if", "not", "out_dir", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Directory {out_dir} does not exist, '", "\n", "'please generate it manually.'", ")", "\n", "", "process_checkpoint", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ",", "args", ".", "mutable_cfg", ",", "\n", "args", ".", "channel_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.model_converters.split_checkpoint.parse_args": [[12, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Split a slimmable trained'", "\n", "'model checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "type", "=", "str", ",", "help", "=", "'path of train config file'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'checkpoint path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--channel-cfgs'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'The path of the channel configs. '", "\n", "'The order should be the same as that of train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dir'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.model_converters.split_checkpoint.convert_bn": [[28, 38], ["split_checkpoint.convert_bn.traverse"], "function", ["None"], ["", "def", "convert_bn", "(", "module", ",", "bn_ind", ")", ":", "\n", "\n", "    ", "def", "traverse", "(", "module", ")", ":", "\n", "        ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "child", ",", "SwitchableBatchNorm2d", ")", ":", "\n", "                ", "setattr", "(", "module", ",", "name", ",", "child", ".", "bns", "[", "bn_ind", "]", ")", "\n", "", "else", ":", "\n", "                ", "traverse", "(", "child", ")", "\n", "\n", "", "", "", "traverse", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.model_converters.split_checkpoint.main": [[40, 64], ["split_checkpoint.parse_args", "mmcv.Config.fromfile", "Config.fromfile.merge_from_dict", "enumerate", "print", "dict", "mmrazor.models.build_algorithm", "mmcv.runner.load_checkpoint", "split_checkpoint.convert_bn", "mmrazor.models.build_algorithm.modules", "mmrazor.models.build_algorithm.pruner.deploy_subnet", "os.join", "mmcv.runner.save_checkpoint", "hasattr", "hasattr", "dict", "len"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm", "home.repos.pwc.inspect_result.hunto_maskd.model_converters.split_checkpoint.convert_bn", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "merge_from_dict", "(", "dict", "(", "algorithm", "=", "dict", "(", "channel_cfg", "=", "args", ".", "channel_cfgs", ")", ")", ")", "\n", "\n", "for", "i", ",", "channel_cfg", "in", "enumerate", "(", "args", ".", "channel_cfgs", ")", ":", "\n", "        ", "algorithm", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "load_checkpoint", "(", "algorithm", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "convert_bn", "(", "algorithm", ",", "i", ")", "\n", "for", "module", "in", "algorithm", ".", "modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "'out_mask'", ")", ":", "\n", "                ", "del", "module", ".", "out_mask", "\n", "", "if", "hasattr", "(", "module", ",", "'in_mask'", ")", ":", "\n", "                ", "del", "module", ".", "in_mask", "\n", "", "", "assert", "algorithm", ".", "with_pruner", ",", "'The algorithm should has attr pruner. Please check your '", "'config file.'", "\n", "algorithm", ".", "pruner", ".", "deploy_subnet", "(", "algorithm", ".", "architecture", ",", "\n", "algorithm", ".", "channel_cfg", "[", "i", "]", ")", "\n", "filename", "=", "osp", ".", "join", "(", "args", ".", "output_dir", ",", "f'checkpoint_{i + 1}.pth'", ")", "\n", "save_checkpoint", "(", "algorithm", ",", "filename", ")", "\n", "\n", "", "print", "(", "f'Successfully split the original checkpoint `{args.checkpoint}` to '", "\n", "f'{len(args.channel_cfgs)} different checkpoints.'", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.misc.print_config.parse_args": [[8, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Print the whole config'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file (deprecate), '", "\n", "'change to --cfg-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "options", "and", "args", ".", "cfg_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --cfg-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --cfg-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --cfg-options'", ")", "\n", "args", ".", "cfg_options", "=", "args", ".", "options", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.misc.print_config.main": [[41, 48], ["print_config.parse_args", "mmcv.Config.fromfile", "print", "Config.fromfile.merge_from_dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "", "print", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.misc.get_flops.parse_args": [[12, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Get model flops and params'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "224", ",", "224", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--size-divisor'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "'Pad the input image, the minimum size that is divisible '", "\n", "'by size_divisor, -1 means do not pad the image.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.misc.get_flops.main": [[41, 85], ["get_flops.parse_args", "mmcv.Config.fromfile", "mmrazor.models.build_algorithm", "torch.cuda.is_available", "mmrazor.models.build_algorithm.eval", "hasattr", "mmcv.cnn.utils.get_model_complexity_info", "print", "print", "len", "Config.fromfile.merge_from_dict", "mmrazor.models.build_algorithm.cuda", "NotImplementedError", "print", "len", "ValueError", "int", "int", "numpy.ceil", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.models.builder.build_algorithm"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "len", "(", "args", ".", "shape", ")", "==", "1", ":", "\n", "        ", "h", "=", "w", "=", "args", ".", "shape", "[", "0", "]", "\n", "", "elif", "len", "(", "args", ".", "shape", ")", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "args", ".", "shape", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid input shape'", ")", "\n", "", "orig_shape", "=", "(", "3", ",", "h", ",", "w", ")", "\n", "divisor", "=", "args", ".", "size_divisor", "\n", "if", "divisor", ">", "0", ":", "\n", "        ", "h", "=", "int", "(", "np", ".", "ceil", "(", "h", "/", "divisor", ")", ")", "*", "divisor", "\n", "w", "=", "int", "(", "np", ".", "ceil", "(", "w", "/", "divisor", ")", ")", "*", "divisor", "\n", "\n", "", "input_shape", "=", "(", "3", ",", "h", ",", "w", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "\n", "", "algorithm", "=", "build_algorithm", "(", "cfg", ".", "algorithm", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "algorithm", ".", "cuda", "(", ")", "\n", "", "algorithm", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "algorithm", ".", "architecture", ",", "'forward_dummy'", ")", ":", "\n", "        ", "algorithm", ".", "architecture", ".", "forward", "=", "algorithm", ".", "architecture", ".", "forward_dummy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "algorithm", ".", "architecture", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_model_complexity_info", "(", "algorithm", ".", "architecture", ",", "\n", "input_shape", ")", "\n", "split_line", "=", "'='", "*", "30", "\n", "\n", "if", "divisor", ">", "0", "and", "input_shape", "!=", "orig_shape", ":", "\n", "        ", "print", "(", "f'{split_line}\\nUse size divisor set input shape '", "\n", "f'from {orig_shape} to {input_shape}\\n'", ")", "\n", "", "print", "(", "f'{split_line}\\nInput shape: {input_shape}\\n'", "\n", "f'Flops: {flops}\\nParams: {params}\\n{split_line}'", ")", "\n", "print", "(", "'!!!Please be cautious if you use the results in papers. '", "\n", "'You may need to check if all ops are supported and verify that the '", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.en.conf.get_version": [[29, 33], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.en.gen_model_zoo.gen_md_from_configs": [[5, 34], ["gen_model_zoo.gen_md_from_configs.to_path"], "function", ["None"], ["def", "gen_md_from_configs", "(", "config_root_dir", ":", "Union", "[", "Path", ",", "str", "]", ",", "\n", "target_md_path", ":", "Union", "[", "Path", ",", "str", "]", "=", "'model_zoo.md'", ",", "\n", "prefix", ":", "str", "=", "''", ")", "->", "None", ":", "\n", "\n", "    ", "def", "to_path", "(", "p", ":", "Union", "[", "Path", ",", "str", "]", ")", "->", "Path", ":", "\n", "        ", "if", "isinstance", "(", "p", ",", "Path", ")", ":", "\n", "            ", "return", "p", "\n", "", "if", "isinstance", "(", "p", ",", "str", ")", ":", "\n", "            ", "return", "Path", "(", "p", ")", "\n", "", "raise", "ValueError", "(", "f'Unsupported type: {type(p)}'", ")", "\n", "\n", "", "config_root_dir", "=", "to_path", "(", "config_root_dir", ")", "\n", "target_md_path", "=", "to_path", "(", "target_md_path", ")", "\n", "\n", "readme_path_list", "=", "[", "]", "\n", "for", "readme_path", "in", "config_root_dir", ".", "rglob", "(", "'README.md'", ")", ":", "\n", "        ", "if", "readme_path", ".", "exists", "(", ")", ":", "\n", "            ", "config_name", "=", "readme_path", ".", "parent", ".", "name", "\n", "path", "=", "prefix", "/", "readme_path", "\n", "readme_path_list", ".", "append", "(", "(", "config_name", ",", "path", ".", "as_posix", "(", ")", ")", ")", "\n", "\n", "", "", "with", "target_md_path", ".", "open", "(", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'# Model Zoo\\n\\n'", ")", "\n", "f", ".", "write", "(", "'## Baselines\\n\\n'", ")", "\n", "\n", "for", "name", ",", "path", "in", "readme_path_list", ":", "\n", "            ", "f", ".", "write", "(", "f'### {name.upper()}\\n\\n'", ")", "\n", "f", ".", "write", "(", "\n", "f'Please refer to [{name.upper()}]({path}) for details.\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_mutable.test_one_shot_op": [[7, 27], ["dict", "mmrazor.models.builder.MUTABLES.build", "torch.randn", "MUTABLES.build.", "dict", "dict", "model.size", "model.size", "dict", "dict", "dict", "dict"], "function", ["None"], ["def", "test_one_shot_op", "(", ")", ":", "\n", "    ", "oneshot_choice_op", "=", "dict", "(", "\n", "type", "=", "'OneShotOP'", ",", "\n", "space_id", "=", "'test'", ",", "\n", "num_chosen", "=", "1", ",", "\n", "choices", "=", "dict", "(", "\n", "shuffle_3x3", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "3", ")", ",", "\n", "shuffle_5x5", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "5", ")", ",", "\n", "shuffle_7x7", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "7", ")", ",", "\n", "shuffle_xception", "=", "dict", "(", "type", "=", "'ShuffleXception'", ")", ",", "\n", ")", ",", "\n", "choice_args", "=", "dict", "(", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "stride", "=", "1", ")", ")", "\n", "\n", "model", "=", "MUTABLES", ".", "build", "(", "oneshot_choice_op", ")", "\n", "\n", "tensor", "=", "torch", ".", "randn", "(", "16", ",", "16", ",", "32", ",", "32", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "model", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_mutable.test_differentiable_op": [[29, 53], ["dict", "mmrazor.models.builder.MUTABLES.build", "MUTABLES.build.build_arch_param", "torch.randn", "MUTABLES.build.", "dict", "dict", "model.size", "model.size", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.mutables.mutable_edge.DifferentiableEdge.build_arch_param"], ["", "def", "test_differentiable_op", "(", ")", ":", "\n", "    ", "oneshot_choice_op", "=", "dict", "(", "\n", "type", "=", "'DifferentiableOP'", ",", "\n", "space_id", "=", "'test'", ",", "\n", "num_chosen", "=", "1", ",", "\n", "with_arch_param", "=", "True", ",", "\n", "choices", "=", "dict", "(", "\n", "zero", "=", "dict", "(", "type", "=", "'DartsZero'", ")", ",", "\n", "skip_connect", "=", "dict", "(", "type", "=", "'DartsSkipConnect'", ")", ",", "\n", "dil_conv_3x3", "=", "dict", "(", "type", "=", "'DartsDilConv'", ",", "kernel_size", "=", "3", ")", ",", "\n", "dil_conv_5x5", "=", "dict", "(", "type", "=", "'DartsDilConv'", ",", "kernel_size", "=", "5", ")", ",", "\n", "sep_conv_3x3", "=", "dict", "(", "type", "=", "'DartsSepConv'", ",", "kernel_size", "=", "3", ")", ",", "\n", "sep_conv_5x5", "=", "dict", "(", "type", "=", "'DartsSepConv'", ",", "kernel_size", "=", "5", ")", ",", "\n", ")", ",", "\n", "choice_args", "=", "dict", "(", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "stride", "=", "2", ")", ")", "\n", "\n", "model", "=", "MUTABLES", ".", "build", "(", "oneshot_choice_op", ")", "\n", "arch_param", "=", "model", ".", "build_arch_param", "(", ")", "\n", "\n", "tensor", "=", "torch", ".", "randn", "(", "16", ",", "16", ",", "32", ",", "32", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "model", "(", "tensor", ",", "arch_param", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "16", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_architecture.test_architecture_mmcls": [[12, 89], ["dict", "dict", "torch.randn", "torch.randint", "copy.deepcopy", "mmrazor.models.builder.ARCHITECTURES.build", "ARCHITECTURES.build.model.train_step", "ARCHITECTURES.build.model.val_step", "ARCHITECTURES.build.", "copy.deepcopy", "mmrazor.models.builder.ARCHITECTURES.build", "ARCHITECTURES.build.", "torch.randn", "ARCHITECTURES.build.", "torch.randn", "ARCHITECTURES.build.simple_test", "numpy.random.randint().astype", "dict", "dict", "outputs[].item", "outputs[].item", "losses[].item", "isinstance", "isinstance", "isinstance", "tempfile.TemporaryDirectory", "os.join", "ARCHITECTURES.build.show_result", "os.exists", "tempfile.TemporaryDirectory", "os.join", "ARCHITECTURES.build.show_result", "os.exists", "len", "len", "len", "numpy.random.randint", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.val_step", "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.simple_test", "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.show_result", "home.repos.pwc.inspect_result.hunto_maskd.architectures.base.BaseArchitecture.show_result"], ["def", "test_architecture_mmcls", "(", ")", ":", "\n", "    ", "model_cfg", "=", "dict", "(", "\n", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "\n", "type", "=", "'mmcls.ResNet_CIFAR'", ",", "\n", "depth", "=", "50", ",", "\n", "num_stages", "=", "4", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ",", "\n", "style", "=", "'pytorch'", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'mmcls.GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'mmcls.LinearClsHead'", ",", "\n", "num_classes", "=", "10", ",", "\n", "in_channels", "=", "2048", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ")", ")", ")", ",", ")", "\n", "\n", "architecture_cfg", "=", "dict", "(", "type", "=", "'MMClsArchitecture'", ",", "model", "=", "model_cfg", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "32", ",", "32", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "16", ",", ")", ")", "\n", "\n", "supernet_cfg_", "=", "deepcopy", "(", "architecture_cfg", ")", "\n", "architecture", "=", "ARCHITECTURES", ".", "build", "(", "supernet_cfg_", ")", "\n", "\n", "# test property", "\n", "assert", "architecture", ".", "model", ".", "with_neck", "\n", "assert", "architecture", ".", "model", ".", "with_head", "\n", "\n", "# test train_step", "\n", "outputs", "=", "architecture", ".", "model", ".", "train_step", "(", "{", "\n", "'img'", ":", "imgs", ",", "\n", "'gt_label'", ":", "label", "\n", "}", ",", "None", ")", "\n", "assert", "outputs", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "assert", "outputs", "[", "'num_samples'", "]", "==", "16", "\n", "\n", "# test val_step", "\n", "outputs", "=", "architecture", ".", "model", ".", "val_step", "(", "{", "\n", "'img'", ":", "imgs", ",", "\n", "'gt_label'", ":", "label", "\n", "}", ",", "None", ")", "\n", "assert", "outputs", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "assert", "outputs", "[", "'num_samples'", "]", "==", "16", "\n", "\n", "# test forward", "\n", "losses", "=", "architecture", "(", "imgs", ",", "return_loss", "=", "True", ",", "gt_label", "=", "label", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "\n", "# test forward_test", "\n", "architecture_cfg_", "=", "deepcopy", "(", "architecture_cfg", ")", "\n", "architecture", "=", "ARCHITECTURES", ".", "build", "(", "architecture_cfg_", ")", "\n", "pred", "=", "architecture", "(", "imgs", ",", "return_loss", "=", "False", ",", "img_metas", "=", "None", ")", "\n", "assert", "isinstance", "(", "pred", ",", "list", ")", "and", "len", "(", "pred", ")", "==", "16", "\n", "\n", "single_img", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "pred", "=", "architecture", "(", "single_img", ",", "return_loss", "=", "False", ",", "img_metas", "=", "None", ")", "\n", "assert", "isinstance", "(", "pred", ",", "list", ")", "and", "len", "(", "pred", ")", "==", "1", "\n", "\n", "# test simple_test", "\n", "single_img", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "pred", "=", "architecture", ".", "simple_test", "(", "single_img", ",", "img_metas", "=", "None", ")", "\n", "assert", "isinstance", "(", "pred", ",", "list", ")", "and", "len", "(", "pred", ")", "==", "1", "\n", "\n", "# test show_result", "\n", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "(", "224", ",", "224", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "result", "=", "dict", "(", "pred_class", "=", "'cat'", ",", "pred_label", "=", "0", ",", "pred_score", "=", "0.9", ")", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "out_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'out.png'", ")", "\n", "architecture", ".", "show_result", "(", "img", ",", "result", ",", "out_file", "=", "out_file", ")", "\n", "assert", "osp", ".", "exists", "(", "out_file", ")", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "out_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'out.png'", ")", "\n", "architecture", ".", "show_result", "(", "img", ",", "result", ",", "out_file", "=", "out_file", ")", "\n", "assert", "osp", ".", "exists", "(", "out_file", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_pruner.test_ratio_pruner": [[10, 83], ["dict", "dict", "dict", "torch.randn", "torch.randint", "mmrazor.models.builder.ARCHITECTURES.build", "mmrazor.models.builder.PRUNERS.build", "PRUNERS.build.prepare_from_supernet", "hasattr", "copy.deepcopy", "pruner_cfg_[].insert", "mmrazor.models.builder.PRUNERS.build", "mmrazor.models.builder.ARCHITECTURES.build", "PRUNERS.build.prepare_from_supernet", "PRUNERS.build.set_max_channel", "ARCHITECTURES.build.model.named_modules", "PRUNERS.build.set_min_channel", "PRUNERS.build.get_max_channel_bins", "PRUNERS.build.set_channel_bins", "ARCHITECTURES.build.model.named_modules", "PRUNERS.build.sample_subnet", "isinstance", "PRUNERS.build.set_subnet", "PRUNERS.build.export_subnet", "isinstance", "PRUNERS.build.deploy_subnet", "ARCHITECTURES.build.", "pytest.raises", "PRUNERS.build.set_min_channel", "hasattr", "hasattr", "hasattr", "hasattr", "losses[].item", "dict", "dict", "dict", "module.in_mask.sum", "module.in_mask.numel", "module.out_mask.sum", "module.out_mask.numel", "module.in_mask.sum", "module.in_mask.numel", "module.out_mask.sum", "module.out_mask.numel", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_max_channel", "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.set_min_channel", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.get_max_channel_bins", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.set_channel_bins", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.structure_pruning.StructurePruner.export_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet", "home.repos.pwc.inspect_result.hunto_maskd.pruners.ratio_pruning.RatioPruner.set_min_channel"], ["def", "test_ratio_pruner", "(", ")", ":", "\n", "    ", "model_cfg", "=", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "\n", "type", "=", "'mmcls.ResNet'", ",", "\n", "depth", "=", "18", ",", "\n", "num_stages", "=", "4", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ",", "\n", "style", "=", "'pytorch'", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'mmcls.GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'mmcls.LinearClsHead'", ",", "\n", "num_classes", "=", "1000", ",", "\n", "in_channels", "=", "512", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'mmcls.CrossEntropyLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "\n", ")", ")", "\n", "\n", "architecture_cfg", "=", "dict", "(", "\n", "type", "=", "'MMClsArchitecture'", ",", "\n", "model", "=", "model_cfg", ",", "\n", ")", "\n", "\n", "pruner_cfg", "=", "dict", "(", "\n", "type", "=", "'RatioPruner'", ",", "\n", "ratios", "=", "[", "1", "/", "8", ",", "2", "/", "8", ",", "3", "/", "8", ",", "4", "/", "8", ",", "5", "/", "8", ",", "6", "/", "8", ",", "7", "/", "8", ",", "1.0", "]", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "224", ",", "224", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "1000", ",", "(", "16", ",", ")", ")", "\n", "\n", "architecture", "=", "ARCHITECTURES", ".", "build", "(", "architecture_cfg", ")", "\n", "pruner", "=", "PRUNERS", ".", "build", "(", "pruner_cfg", ")", "\n", "\n", "pruner", ".", "prepare_from_supernet", "(", "architecture", ")", "\n", "assert", "hasattr", "(", "pruner", ",", "'channel_spaces'", ")", "\n", "\n", "# test set_min_channel", "\n", "pruner_cfg_", "=", "deepcopy", "(", "pruner_cfg", ")", "\n", "pruner_cfg_", "[", "'ratios'", "]", ".", "insert", "(", "0", ",", "0", ")", "\n", "pruner_", "=", "PRUNERS", ".", "build", "(", "pruner_cfg_", ")", "\n", "architecture_", "=", "ARCHITECTURES", ".", "build", "(", "architecture_cfg", ")", "\n", "pruner_", ".", "prepare_from_supernet", "(", "architecture_", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Output channels should be a positive integer not zero", "\n", "        ", "pruner_", ".", "set_min_channel", "(", ")", "\n", "\n", "# test set_max_channel", "\n", "", "pruner", ".", "set_max_channel", "(", ")", "\n", "for", "name", ",", "module", "in", "architecture", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'in_mask'", ")", ":", "\n", "            ", "assert", "module", ".", "in_mask", ".", "sum", "(", ")", "==", "module", ".", "in_mask", ".", "numel", "(", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'out_mask'", ")", ":", "\n", "            ", "assert", "module", ".", "out_mask", ".", "sum", "(", ")", "==", "module", ".", "out_mask", ".", "numel", "(", ")", "\n", "\n", "# test channel bins", "\n", "", "", "pruner", ".", "set_min_channel", "(", ")", "\n", "channel_bins_dict", "=", "pruner", ".", "get_max_channel_bins", "(", "max_channel_bins", "=", "4", ")", "\n", "pruner", ".", "set_channel_bins", "(", "channel_bins_dict", ",", "4", ")", "\n", "for", "name", ",", "module", "in", "architecture", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'in_mask'", ")", ":", "\n", "            ", "assert", "module", ".", "in_mask", ".", "sum", "(", ")", "==", "module", ".", "in_mask", ".", "numel", "(", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'out_mask'", ")", ":", "\n", "            ", "assert", "module", ".", "out_mask", ".", "sum", "(", ")", "==", "module", ".", "out_mask", ".", "numel", "(", ")", "\n", "\n", "# test making groups logic", "\n", "", "", "subnet_dict", "=", "pruner", ".", "sample_subnet", "(", ")", "\n", "assert", "isinstance", "(", "subnet_dict", ",", "dict", ")", "\n", "pruner", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "subnet_dict", "=", "pruner", ".", "export_subnet", "(", ")", "\n", "assert", "isinstance", "(", "subnet_dict", ",", "dict", ")", "\n", "pruner", ".", "deploy_subnet", "(", "architecture", ",", "subnet_dict", ")", "\n", "losses", "=", "architecture", "(", "imgs", ",", "return_loss", "=", "True", ",", "gt_label", "=", "label", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_op.test_shuffle_series": [[7, 62], ["torch.randn", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size"], "function", ["None"], ["def", "test_shuffle_series", "(", ")", ":", "\n", "\n", "    ", "tensor", "=", "torch", ".", "randn", "(", "16", ",", "16", ",", "32", ",", "32", ")", "\n", "\n", "# test ShuffleBlock_7x7", "\n", "shuffle_block_7x7", "=", "dict", "(", "\n", "type", "=", "'ShuffleBlock'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "shuffle_block_7x7", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test ShuffleBlock_5x5", "\n", "shuffle_block_5x5", "=", "dict", "(", "\n", "type", "=", "'ShuffleBlock'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "shuffle_block_5x5", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test ShuffleBlock_3x3", "\n", "shuffle_block_3x3", "=", "dict", "(", "\n", "type", "=", "'ShuffleBlock'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "shuffle_block_3x3", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test ShuffleXception", "\n", "shuffle_xception", "=", "dict", "(", "\n", "type", "=", "'ShuffleXception'", ",", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "shuffle_xception", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_op.test_darts_series": [[64, 149], ["torch.randn", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "dict", "mmrazor.models.builder.OPS.build", "OPS.build.", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size", "op.size"], "function", ["None"], ["", "def", "test_darts_series", "(", ")", ":", "\n", "\n", "    ", "tensor", "=", "torch", ".", "randn", "(", "16", ",", "16", ",", "32", ",", "32", ")", "\n", "\n", "# test avg pool bn", "\n", "avg_pool_bn", "=", "dict", "(", "\n", "type", "=", "'DartsPoolBN'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "avg_pool_bn", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test max pool bn", "\n", "max_pool_bn", "=", "dict", "(", "\n", "type", "=", "'DartsPoolBN'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "pool_type", "=", "'max'", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "max_pool_bn", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test DartsSepConv", "\n", "sep_conv", "=", "dict", "(", "\n", "type", "=", "'DartsSepConv'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "sep_conv", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test DartsSepConv", "\n", "sep_conv", "=", "dict", "(", "\n", "type", "=", "'DartsSepConv'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "sep_conv", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test DartsDilConv", "\n", "dil_conv", "=", "dict", "(", "\n", "type", "=", "'DartsDilConv'", ",", "\n", "in_channels", "=", "16", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "dil_conv", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "\n", "# test DartsSkipConnect", "\n", "skip_connect", "=", "dict", "(", "\n", "type", "=", "'DartsSkipConnect'", ",", "in_channels", "=", "16", ",", "out_channels", "=", "16", ",", "stride", "=", "1", ")", "\n", "\n", "op", "=", "OPS", ".", "build", "(", "skip_connect", ")", "\n", "\n", "# test forward", "\n", "outputs", "=", "op", "(", "tensor", ")", "\n", "assert", "outputs", ".", "size", "(", "1", ")", "==", "16", "and", "outputs", ".", "size", "(", "2", ")", "==", "32", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_mutator.test_one_shot_mutator": [[9, 74], ["dict", "dict", "dict", "torch.randn", "torch.randint", "copy.deepcopy", "mmrazor.models.builder.ARCHITECTURES.build", "copy.deepcopy", "mmrazor.models.builder.MUTATORS.build", "MUTATORS.build.prepare_from_supernet", "hasattr", "MUTATORS.build.sample_subnet", "MUTATORS.build.set_subnet", "ARCHITECTURES.build.", "MUTATORS.build.set_chosen_subnet", "search_spaces.keys", "MUTATORS.build.sample_subnet", "MUTATORS.build.sample_subnet", "MUTATORS.build.mutation", "MUTATORS.build.crossover", "isinstance", "isinstance", "len", "losses[].item", "len", "len", "dict", "dict", "dict", "dict", "search_spaces[].keys", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_chosen_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.mutation", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.crossover"], ["def", "test_one_shot_mutator", "(", ")", ":", "\n", "    ", "model_cfg", "=", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'SearchableShuffleNetV2'", ",", "widen_factor", "=", "1.0", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'mmcls.GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'mmcls.LinearClsHead'", ",", "\n", "num_classes", "=", "1000", ",", "\n", "in_channels", "=", "1024", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'mmcls.CrossEntropyLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "architecture_cfg", "=", "dict", "(", "\n", "type", "=", "'MMClsArchitecture'", ",", "\n", "model", "=", "model_cfg", ",", "\n", ")", "\n", "\n", "mutator_cfg", "=", "dict", "(", "\n", "type", "=", "'OneShotMutator'", ",", "\n", "placeholder_mapping", "=", "dict", "(", "\n", "all_blocks", "=", "dict", "(", "\n", "type", "=", "'OneShotOP'", ",", "\n", "choices", "=", "dict", "(", "\n", "shuffle_3x3", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "3", ")", ",", "\n", "shuffle_5x5", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "5", ")", ",", "\n", "shuffle_7x7", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "7", ")", ",", "\n", "shuffle_xception", "=", "dict", "(", "type", "=", "'ShuffleXception'", ")", ",", "\n", ")", ")", ")", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "224", ",", "224", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "1000", ",", "(", "16", ",", ")", ")", "\n", "\n", "architecture_cfg_", "=", "deepcopy", "(", "architecture_cfg", ")", "\n", "architecture", "=", "ARCHITECTURES", ".", "build", "(", "architecture_cfg_", ")", "\n", "\n", "mutator_cfg_", "=", "deepcopy", "(", "mutator_cfg", ")", "\n", "mutator", "=", "MUTATORS", ".", "build", "(", "mutator_cfg_", ")", "\n", "\n", "mutator", ".", "prepare_from_supernet", "(", "architecture", ")", "\n", "assert", "hasattr", "(", "mutator", ",", "'search_spaces'", ")", "\n", "assert", "len", "(", "mutator", ".", "search_spaces", ")", ">", "0", "\n", "\n", "# test forward", "\n", "subnet_dict", "=", "mutator", ".", "sample_subnet", "(", ")", "\n", "mutator", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "losses", "=", "architecture", "(", "imgs", ",", "return_loss", "=", "True", ",", "gt_label", "=", "label", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "\n", "# test set_chosen_subnet", "\n", "mutator", ".", "set_chosen_subnet", "(", "subnet_dict", ")", "\n", "search_spaces", "=", "mutator", ".", "search_spaces", "\n", "for", "key", "in", "search_spaces", ".", "keys", "(", ")", ":", "\n", "        ", "assert", "'chosen'", "in", "search_spaces", "[", "key", "]", ".", "keys", "(", ")", "\n", "\n", "# test mutation and crossover", "\n", "", "subnet_dict1", "=", "mutator", ".", "sample_subnet", "(", ")", "\n", "subnet_dict2", "=", "mutator", ".", "sample_subnet", "(", ")", "\n", "mutation_subnet_dict", "=", "mutator", ".", "mutation", "(", "subnet_dict1", ")", "\n", "crossover_subnet_dict", "=", "mutator", ".", "crossover", "(", "subnet_dict1", ",", "subnet_dict2", ")", "\n", "assert", "isinstance", "(", "mutation_subnet_dict", ",", "dict", ")", "\n", "assert", "len", "(", "mutation_subnet_dict", ")", ">", "0", "\n", "assert", "isinstance", "(", "crossover_subnet_dict", ",", "dict", ")", "\n", "assert", "len", "(", "crossover_subnet_dict", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_models.test_mutator.test_differentiable_mutator": [[76, 160], ["dict", "dict", "torch.randn", "torch.randint", "copy.deepcopy", "mmrazor.models.builder.ARCHITECTURES.build", "copy.deepcopy", "mmrazor.models.builder.MUTATORS.build", "MUTATORS.build.prepare_from_supernet", "hasattr", "hasattr", "ARCHITECTURES.build.", "losses[].item", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.differentiable_mutator.DifferentiableMutator.prepare_from_supernet"], ["", "def", "test_differentiable_mutator", "(", ")", ":", "\n", "    ", "architecture_cfg", "=", "dict", "(", "\n", "type", "=", "'MMClsArchitecture'", ",", "\n", "model", "=", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "\n", "type", "=", "'DartsBackbone'", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "8", ",", "\n", "num_layers", "=", "4", ",", "\n", "num_nodes", "=", "4", ",", "\n", "stem_multiplier", "=", "3", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'LinearClsHead'", ",", "\n", "num_classes", "=", "10", ",", "\n", "in_channels", "=", "128", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "mutator_cfg", "=", "dict", "(", "\n", "type", "=", "'DartsMutator'", ",", "\n", "placeholder_mapping", "=", "dict", "(", "\n", "node", "=", "dict", "(", "\n", "type", "=", "'DifferentiableOP'", ",", "\n", "with_arch_param", "=", "True", ",", "\n", "choices", "=", "dict", "(", "\n", "zero", "=", "dict", "(", "type", "=", "'DartsZero'", ")", ",", "\n", "skip_connect", "=", "dict", "(", "\n", "type", "=", "'DartsSkipConnect'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "max_pool_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsPoolBN'", ",", "\n", "pool_type", "=", "'max'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "avg_pool_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsPoolBN'", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "sep_conv_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsSepConv'", ",", "\n", "kernel_size", "=", "3", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "sep_conv_5x5", "=", "dict", "(", "\n", "type", "=", "'DartsSepConv'", ",", "\n", "kernel_size", "=", "5", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "dil_conv_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsDilConv'", ",", "\n", "kernel_size", "=", "3", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "dil_conv_5x5", "=", "dict", "(", "\n", "type", "=", "'DartsDilConv'", ",", "\n", "kernel_size", "=", "5", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", ")", ")", ",", "\n", "node_edge", "=", "dict", "(", "\n", "type", "=", "'DifferentiableEdge'", ",", "\n", "num_chosen", "=", "2", ",", "\n", "with_arch_param", "=", "False", ",", "\n", ")", ")", ",", "\n", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "32", ",", "32", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "16", ",", ")", ")", "\n", "\n", "architecture_cfg_", "=", "deepcopy", "(", "architecture_cfg", ")", "\n", "architecture", "=", "ARCHITECTURES", ".", "build", "(", "architecture_cfg_", ")", "\n", "\n", "mutator_cfg_", "=", "deepcopy", "(", "mutator_cfg", ")", "\n", "mutator", "=", "MUTATORS", ".", "build", "(", "mutator_cfg_", ")", "\n", "\n", "# test prepare_from_superbet", "\n", "mutator", ".", "prepare_from_supernet", "(", "architecture", ")", "\n", "assert", "hasattr", "(", "mutator", ",", "'search_spaces'", ")", "\n", "assert", "hasattr", "(", "mutator", ",", "'arch_params'", ")", "\n", "\n", "# test forward", "\n", "losses", "=", "architecture", "(", "imgs", ",", "return_loss", "=", "True", ",", "gt_label", "=", "label", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.test_algorithm._demo_mm_inputs": [[14, 47], ["numpy.random.RandomState", "np.random.RandomState.rand", "np.random.RandomState.randint().astype", "torch.FloatTensor", "torch.LongTensor", "np.random.RandomState.randint", "range"], "function", ["None"], ["def", "_demo_mm_inputs", "(", "input_shape", "=", "(", "1", ",", "3", ",", "8", ",", "16", ")", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Create a superset of inputs needed to run test or train batches.\n\n    Args:\n        input_shape (tuple):\n            input batch dimensions\n        num_classes (int):\n            number of semantic classes\n    \"\"\"", "\n", "(", "N", ",", "C", ",", "H", ",", "W", ")", "=", "input_shape", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "\n", "imgs", "=", "rng", ".", "rand", "(", "*", "input_shape", ")", "\n", "segs", "=", "rng", ".", "randint", "(", "\n", "low", "=", "0", ",", "high", "=", "num_classes", "-", "1", ",", "size", "=", "(", "N", ",", "1", ",", "H", ",", "W", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'ori_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'pad_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'filename'", ":", "'<demo>.png'", ",", "\n", "'scale_factor'", ":", "1.0", ",", "\n", "'flip'", ":", "False", ",", "\n", "'flip_direction'", ":", "'horizontal'", "\n", "}", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "\n", "mm_inputs", "=", "{", "\n", "'img'", ":", "torch", ".", "FloatTensor", "(", "imgs", ")", ",", "\n", "'img_metas'", ":", "img_metas", ",", "\n", "'gt_semantic_seg'", ":", "torch", ".", "LongTensor", "(", "segs", ")", "\n", "}", "\n", "return", "mm_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.test_algorithm.test_autoslim_pretrain": [[49, 112], ["dict", "dict", "dict", "dict", "mmcv.ConfigDict", "torch.randn", "torch.randint", "mmrazor.models.builder.ALGORITHMS.build", "torch.optim.SGD", "ALGORITHMS.build.train_step", "ALGORITHMS.build.", "ALGORITHMS.build.parameters", "outputs[].item", "losses[].item", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step"], ["", "def", "test_autoslim_pretrain", "(", ")", ":", "\n", "    ", "model_cfg", "=", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "\n", "type", "=", "'mmcls.ResNet'", ",", "\n", "depth", "=", "18", ",", "\n", "num_stages", "=", "4", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ",", "\n", "style", "=", "'pytorch'", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'mmcls.GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'mmcls.LinearClsHead'", ",", "\n", "num_classes", "=", "1000", ",", "\n", "in_channels", "=", "512", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'mmcls.CrossEntropyLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "\n", ")", ")", "\n", "\n", "architecture_cfg", "=", "dict", "(", "\n", "type", "=", "'MMClsArchitecture'", ",", "\n", "model", "=", "model_cfg", ",", "\n", ")", "\n", "\n", "pruner_cfg", "=", "dict", "(", "\n", "type", "=", "'RatioPruner'", ",", "\n", "ratios", "=", "[", "1", "/", "8", ",", "2", "/", "8", ",", "3", "/", "8", ",", "4", "/", "8", ",", "5", "/", "8", ",", "6", "/", "8", ",", "7", "/", "8", ",", "1.0", "]", ")", "\n", "\n", "distiller_cfg", "=", "dict", "(", "\n", "type", "=", "'SelfDistiller'", ",", "\n", "components", "=", "[", "\n", "dict", "(", "\n", "student_module", "=", "'head.fc'", ",", "\n", "teacher_module", "=", "'head.fc'", ",", "\n", "losses", "=", "[", "\n", "dict", "(", "\n", "type", "=", "'KLDivergence'", ",", "\n", "name", "=", "'loss_kd'", ",", "\n", "tau", "=", "1", ",", "\n", "loss_weight", "=", "1", ",", "\n", ")", "\n", "]", ")", ",", "\n", "]", ")", "\n", "\n", "algorithm_cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'AutoSlim'", ",", "\n", "architecture", "=", "architecture_cfg", ",", "\n", "pruner", "=", "pruner_cfg", ",", "\n", "distiller", "=", "distiller_cfg", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "224", ",", "224", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "1000", ",", "(", "16", ",", ")", ")", "\n", "\n", "model", "=", "ALGORITHMS", ".", "build", "(", "algorithm_cfg", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "\n", "outputs", "=", "model", ".", "train_step", "(", "{", "'img'", ":", "imgs", ",", "'gt_label'", ":", "label", "}", ",", "optimizer", ")", "\n", "\n", "assert", "outputs", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "assert", "outputs", "[", "'num_samples'", "]", "==", "16", "\n", "\n", "# test forward", "\n", "losses", "=", "model", "(", "imgs", ",", "return_loss", "=", "True", ",", "gt_label", "=", "label", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.test_algorithm.test_autoslim_retrain": [[114, 172], ["dict", "dict", "dict", "os.path.dirname", "mmcv.ConfigDict", "torch.randn", "torch.randint", "mmrazor.models.builder.ALGORITHMS.build", "torch.optim.SGD", "ALGORITHMS.build.train_step", "mmrazor.models.builder.ALGORITHMS.build", "torch.optim.SGD", "ALGORITHMS.build.train_step", "os.path.dirname", "os.path.join", "os.path.join", "ALGORITHMS.build.parameters", "outputs[].item", "ALGORITHMS.build.parameters", "outputs[].item", "dict", "dict", "dict", "os.path.dirname", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step"], ["", "def", "test_autoslim_retrain", "(", ")", ":", "\n", "    ", "model_cfg", "=", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'MobileNetV2'", ",", "widen_factor", "=", "1.5", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'LinearClsHead'", ",", "\n", "num_classes", "=", "1000", ",", "\n", "in_channels", "=", "1920", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "\n", ")", ")", "\n", "\n", "architecture_cfg", "=", "dict", "(", "\n", "type", "=", "'MMClsArchitecture'", ",", "\n", "model", "=", "model_cfg", ",", "\n", ")", "\n", "\n", "pruner_cfg", "=", "dict", "(", "\n", "type", "=", "'RatioPruner'", ",", "\n", "ratios", "=", "(", "2", "/", "12", ",", "3", "/", "12", ",", "4", "/", "12", ",", "5", "/", "12", ",", "6", "/", "12", ",", "7", "/", "12", ",", "8", "/", "12", ",", "9", "/", "12", ",", "\n", "10", "/", "12", ",", "11", "/", "12", ",", "1.0", ")", ")", "\n", "\n", "root_path", "=", "dirname", "(", "dirname", "(", "dirname", "(", "__file__", ")", ")", ")", "\n", "channel_cfg", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "root_path", ",", "'data/AUTOSLIM_MBV2_530M_OFFICIAL.yaml'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "root_path", ",", "'data/AUTOSLIM_MBV2_320M_OFFICIAL.yaml'", ")", "\n", "]", "\n", "\n", "algorithm_cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'AutoSlim'", ",", "\n", "architecture", "=", "architecture_cfg", ",", "\n", "pruner", "=", "pruner_cfg", ",", "\n", "retraining", "=", "True", ",", "\n", "channel_cfg", "=", "channel_cfg", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "224", ",", "224", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "1000", ",", "(", "16", ",", ")", ")", "\n", "\n", "# test multi subnet retraining", "\n", "model", "=", "ALGORITHMS", ".", "build", "(", "algorithm_cfg", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "\n", "outputs", "=", "model", ".", "train_step", "(", "{", "'img'", ":", "imgs", ",", "'gt_label'", ":", "label", "}", ",", "optimizer", ")", "\n", "\n", "assert", "outputs", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "assert", "outputs", "[", "'num_samples'", "]", "==", "16", "\n", "\n", "# test single subnet retraining", "\n", "algorithm_cfg", ".", "channel_cfg", "=", "algorithm_cfg", ".", "channel_cfg", "[", "0", "]", "\n", "model", "=", "ALGORITHMS", ".", "build", "(", "algorithm_cfg", ")", "\n", "assert", "model", ".", "deployed", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "\n", "outputs", "=", "model", ".", "train_step", "(", "{", "'img'", ":", "imgs", ",", "'gt_label'", ":", "label", "}", ",", "optimizer", ")", "\n", "\n", "assert", "outputs", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "assert", "outputs", "[", "'num_samples'", "]", "==", "16", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.test_algorithm.test_spos": [[174, 237], ["dict", "dict", "dict", "dict", "torch.randn", "torch.randint", "os.path.join", "copy.deepcopy", "mmrazor.models.builder.ALGORITHMS.build", "ALGORITHMS.build.", "ALGORITHMS.build.mutator.sample_subnet", "ALGORITHMS.build.get_subnet_flops", "ALGORITHMS.build.mutator.set_subnet", "ALGORITHMS.build.get_subnet_flops", "mmcv.fileio.load", "ALGORITHMS.build.mutator.deploy_subnet", "ALGORITHMS.build.get_subnet_flops", "os.path.dirname", "losses[].item", "dict", "dict", "dict", "dict", "os.path.dirname", "os.path.dirname", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.sample_subnet", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.get_subnet_flops", "home.repos.pwc.inspect_result.hunto_maskd.mutators.one_shot_mutator.OneShotMutator.set_subnet", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.get_subnet_flops", "home.repos.pwc.inspect_result.hunto_maskd.mutators.base.BaseMutator.deploy_subnet", "home.repos.pwc.inspect_result.hunto_maskd.algorithms.spos.SPOS.get_subnet_flops"], ["", "def", "test_spos", "(", ")", ":", "\n", "\n", "    ", "model_cfg", "=", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'SearchableShuffleNetV2'", ",", "widen_factor", "=", "1.0", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'mmcls.GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'mmcls.LinearClsHead'", ",", "\n", "num_classes", "=", "1000", ",", "\n", "in_channels", "=", "1024", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'mmcls.CrossEntropyLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "architecture_cfg", "=", "dict", "(", "\n", "type", "=", "'MMClsArchitecture'", ",", "\n", "model", "=", "model_cfg", ",", "\n", ")", "\n", "\n", "mutator_cfg", "=", "dict", "(", "\n", "type", "=", "'OneShotMutator'", ",", "\n", "placeholder_mapping", "=", "dict", "(", "\n", "all_blocks", "=", "dict", "(", "\n", "type", "=", "'OneShotOP'", ",", "\n", "choices", "=", "dict", "(", "\n", "shuffle_3x3", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "3", ")", ",", "\n", "shuffle_5x5", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "5", ")", ",", "\n", "shuffle_7x7", "=", "dict", "(", "type", "=", "'ShuffleBlock'", ",", "kernel_size", "=", "7", ")", ",", "\n", "shuffle_xception", "=", "dict", "(", "type", "=", "'ShuffleXception'", ")", ",", "\n", ")", ")", ")", ")", "\n", "\n", "algorithm_cfg", "=", "dict", "(", "\n", "type", "=", "'SPOS'", ",", "\n", "architecture", "=", "architecture_cfg", ",", "\n", "mutator", "=", "mutator_cfg", ",", "\n", "retraining", "=", "False", ",", "\n", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "224", ",", "224", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "1000", ",", "(", "16", ",", ")", ")", "\n", "spos_subnet_path", "=", "os", ".", "path", ".", "join", "(", "\n", "dirname", "(", "dirname", "(", "dirname", "(", "__file__", ")", ")", ")", ",", "'data/spos_subnet.yaml'", ")", "\n", "\n", "algorithm_cfg_", "=", "deepcopy", "(", "algorithm_cfg", ")", "\n", "algorithm", "=", "ALGORITHMS", ".", "build", "(", "algorithm_cfg_", ")", "\n", "\n", "# test forward", "\n", "losses", "=", "algorithm", "(", "imgs", ",", "return_loss", "=", "True", ",", "gt_label", "=", "label", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "\n", "# test get_subnet_flops", "\n", "subnet_dict", "=", "algorithm", ".", "mutator", ".", "sample_subnet", "(", ")", "\n", "flops_supernet", "=", "algorithm", ".", "get_subnet_flops", "(", ")", "\n", "algorithm", ".", "mutator", ".", "set_subnet", "(", "subnet_dict", ")", "\n", "flops_subnet", "=", "algorithm", ".", "get_subnet_flops", "(", ")", "\n", "assert", "flops_supernet", ">", "flops_subnet", ">", "0", "\n", "\n", "# deploy_subnet in BaseMutator", "\n", "spos_subnet_dict", "=", "mmcv", ".", "fileio", ".", "load", "(", "spos_subnet_path", ")", "\n", "algorithm", ".", "mutator", ".", "deploy_subnet", "(", "algorithm", ".", "architecture", ",", "spos_subnet_dict", ")", "\n", "flops_subnet_spos", "=", "algorithm", ".", "get_subnet_flops", "(", ")", "\n", "assert", "flops_supernet", ">", "flops_subnet_spos", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.test_algorithm.test_detnas": [[239, 248], ["os.path.join", "mmcv.Config.fromfile", "mmrazor.models.builder.ALGORITHMS.build", "hasattr", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "def", "test_detnas", "(", ")", ":", "\n", "    ", "config_path", "=", "os", ".", "path", ".", "join", "(", "\n", "dirname", "(", "dirname", "(", "dirname", "(", "__file__", ")", ")", ")", ",", "\n", "'data/detnas_frcnn_shufflenet_fpn.py'", ")", "\n", "config", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "\n", "# test detnas init", "\n", "algorithm", "=", "ALGORITHMS", ".", "build", "(", "config", ".", "algorithm", ")", "\n", "assert", "hasattr", "(", "algorithm", ",", "'architecture'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.test_algorithm.test_darts": [[250, 342], ["dict", "dict", "dict", "torch.randn", "torch.randint", "copy.deepcopy", "mmrazor.models.builder.ALGORITHMS.build", "dict", "ALGORITHMS.build.train_step", "losses[].item", "dict", "dict", "torch.optim.SGD", "torch.optim.SGD", "ALGORITHMS.build.architecture.parameters", "ALGORITHMS.build.mutator.parameters", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step"], ["", "def", "test_darts", "(", ")", ":", "\n", "\n", "    ", "architecture_cfg", "=", "dict", "(", "\n", "type", "=", "'MMClsArchitecture'", ",", "\n", "model", "=", "dict", "(", "\n", "type", "=", "'mmcls.ImageClassifier'", ",", "\n", "backbone", "=", "dict", "(", "\n", "type", "=", "'DartsBackbone'", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "8", ",", "\n", "num_layers", "=", "4", ",", "\n", "num_nodes", "=", "4", ",", "\n", "stem_multiplier", "=", "3", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ")", ",", "\n", "neck", "=", "dict", "(", "type", "=", "'GlobalAveragePooling'", ")", ",", "\n", "head", "=", "dict", "(", "\n", "type", "=", "'LinearClsHead'", ",", "\n", "num_classes", "=", "10", ",", "\n", "in_channels", "=", "128", ",", "\n", "loss", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "mutator_cfg", "=", "dict", "(", "\n", "type", "=", "'DartsMutator'", ",", "\n", "placeholder_mapping", "=", "dict", "(", "\n", "node", "=", "dict", "(", "\n", "type", "=", "'DifferentiableOP'", ",", "\n", "with_arch_param", "=", "True", ",", "\n", "choices", "=", "dict", "(", "\n", "zero", "=", "dict", "(", "type", "=", "'DartsZero'", ")", ",", "\n", "skip_connect", "=", "dict", "(", "\n", "type", "=", "'DartsSkipConnect'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "max_pool_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsPoolBN'", ",", "\n", "pool_type", "=", "'max'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "avg_pool_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsPoolBN'", ",", "\n", "pool_type", "=", "'avg'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "sep_conv_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsSepConv'", ",", "\n", "kernel_size", "=", "3", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "sep_conv_5x5", "=", "dict", "(", "\n", "type", "=", "'DartsSepConv'", ",", "\n", "kernel_size", "=", "5", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "dil_conv_3x3", "=", "dict", "(", "\n", "type", "=", "'DartsDilConv'", ",", "\n", "kernel_size", "=", "3", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", "dil_conv_5x5", "=", "dict", "(", "\n", "type", "=", "'DartsDilConv'", ",", "\n", "kernel_size", "=", "5", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "affine", "=", "False", ")", ")", ",", "\n", ")", ")", ",", "\n", "node_edge", "=", "dict", "(", "\n", "type", "=", "'DifferentiableEdge'", ",", "\n", "num_chosen", "=", "2", ",", "\n", "with_arch_param", "=", "False", ",", "\n", ")", ")", ",", "\n", ")", "\n", "\n", "algorithm_cfg", "=", "dict", "(", "\n", "type", "=", "'Darts'", ",", "\n", "architecture", "=", "architecture_cfg", ",", "\n", "mutator", "=", "mutator_cfg", ",", "\n", "retraining", "=", "False", ",", "\n", "unroll", "=", "False", ",", "\n", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "16", ",", "3", ",", "32", ",", "32", ")", "\n", "label", "=", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "16", ",", ")", ")", "\n", "\n", "algorithm_cfg_", "=", "deepcopy", "(", "algorithm_cfg", ")", "\n", "algorithm", "=", "ALGORITHMS", ".", "build", "(", "algorithm_cfg_", ")", "\n", "\n", "optimizers", "=", "dict", "(", "\n", "architecture", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "algorithm", ".", "architecture", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", ",", "\n", "mutator", "=", "torch", ".", "optim", ".", "SGD", "(", "algorithm", ".", "mutator", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", ",", "\n", ")", "\n", "\n", "data", "=", "[", "{", "'img'", ":", "imgs", ",", "'gt_label'", ":", "label", "}", ",", "{", "'img'", ":", "imgs", ",", "'gt_label'", ":", "label", "}", "]", "\n", "# test forward", "\n", "losses", "=", "algorithm", ".", "train_step", "(", "data", ",", "optimizers", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.test_algorithm.test_cwd": [[344, 355], ["mmcv.Config.fromfile", "test_algorithm._demo_mm_inputs", "mmrazor.models.builder.ALGORITHMS.build", "ALGORITHMS.build.train_step", "losses[].item"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils._demo_mm_inputs", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step"], ["", "def", "test_cwd", "(", ")", ":", "\n", "    ", "config_path", "=", "'./tests/data/cwd_pspnet.py'", "\n", "\n", "config", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", "=", "(", "16", ",", "3", ",", "256", ",", "256", ")", ",", "num_classes", "=", "19", ")", "\n", "algorithm", "=", "ALGORITHMS", ".", "build", "(", "config", ".", "algorithm", ")", "\n", "\n", "# test algorithm train_step", "\n", "losses", "=", "algorithm", ".", "train_step", "(", "mm_inputs", ",", "None", ")", "\n", "assert", "losses", "[", "'loss'", "]", ".", "item", "(", ")", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils.ExampleBackbone.__init__": [[48, 51], ["torch.nn.Module.__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], []], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils.ExampleBackbone.init_weights": [[52, 54], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils.ExampleBackbone.forward": [[55, 57], ["utils.ExampleBackbone.conv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils.ExampleDecodeHead.__init__": [[62, 64], ["mmseg.models.decode_heads.decode_head.BaseDecodeHead.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], []], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils.ExampleDecodeHead.forward": [[65, 67], ["utils.ExampleDecodeHead.cls_seg"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils.ExampleCascadeDecodeHead.__init__": [[72, 74], ["mmseg.models.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.__init__"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__"], []], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils.ExampleCascadeDecodeHead.forward": [[75, 77], ["utils.ExampleCascadeDecodeHead.cls_seg"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils._demo_mm_inputs": [[10, 43], ["numpy.random.RandomState", "np.random.RandomState.rand", "np.random.RandomState.randint().astype", "torch.FloatTensor", "torch.LongTensor", "np.random.RandomState.randint", "range"], "function", ["None"], ["first_dset", ",", "second_dset", "=", "random_split", "(", "dataset", ",", "split_tuple", ")", "\n", "\n", "first_dset", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "second_dset", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "return", "[", "first_dset", ",", "second_dset", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils._segmentor_forward_train_test": [[79, 139], ["isinstance", "utils._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "torch.cuda.is_available", "segmentor.cuda.forward", "isinstance", "dict", "segmentor.cuda.train_step", "isinstance", "segmentor.cuda.cuda", "imgs.cuda.cuda", "gt_semantic_seg.cuda.cuda", "torch.no_grad", "segmentor.cuda.eval", "dict", "segmentor.cuda.val_step", "isinstance", "torch.no_grad", "segmentor.cuda.eval", "segmentor.cuda.forward", "torch.no_grad", "segmentor.cuda.eval", "segmentor.cuda.forward"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.test_algorithms.utils._demo_mm_inputs", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.train_step", "home.repos.pwc.inspect_result.hunto_maskd.core.distributed_wrapper.DistributedDataParallelWrapper.val_step", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward"], []], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd_hook.MasKDHook.__init__": [[13, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "module_name", "=", "''", ",", "channels", "=", "[", "]", ",", "num_tokens", "=", "6", ",", "weight_mask", "=", "True", ")", ":", "\n", "        ", "self", ".", "module_name", "=", "module_name", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "num_tokens", "=", "num_tokens", "\n", "self", ".", "weight_mask", "=", "weight_mask", "\n", "self", ".", "norms", "=", "[", "]", "\n", "self", ".", "div_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd_hook.MasKDHook.before_run": [[21, 42], ["torch.ModuleList", "torch.ModuleList", "maskd_hook.MasKDHook.mask_modules.cuda", "isinstance", "runner.model.module.add_module", "maskd_hook.MasKDHook._fix_weights", "mmcv.parallel.MMDistributedDataParallel", "runner.model.module.named_modules", "module.register_forward_hook", "maskd.MaskModule", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd_hook.MasKDHook._fix_weights"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "# init mask modules", "\n", "        ", "self", ".", "mask_modules", "=", "nn", ".", "ModuleList", "(", "[", "MaskModule", "(", "c", ",", "self", ".", "num_tokens", ",", "self", ".", "weight_mask", ")", "\n", "for", "c", "in", "self", ".", "channels", "]", ")", "\n", "self", ".", "mask_modules", ".", "cuda", "(", ")", "\n", "assert", "isinstance", "(", "runner", ".", "model", ",", "MMDistributedDataParallel", ")", "\n", "runner", ".", "model", ".", "module", ".", "add_module", "(", "'mask_modules'", ",", "self", ".", "mask_modules", ")", "\n", "# fix the weights of model", "\n", "self", ".", "_fix_weights", "(", "runner", ")", "\n", "runner", ".", "model", "=", "MMDistributedDataParallel", "(", "\n", "runner", ".", "model", ".", "module", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "# register module forward hook", "\n", "module", "=", "None", "\n", "for", "k", ",", "m", "in", "runner", ".", "model", ".", "module", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "k", "==", "self", ".", "module_name", ":", "\n", "                ", "module", "=", "m", "\n", "break", "\n", "", "", "assert", "module", "is", "not", "None", ",", "f'Cannot find module {self.module_name}'", "\n", "module", ".", "register_forward_hook", "(", "self", ".", "_module_forward_hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd_hook.MasKDHook.after_train_iter": [[43, 52], ["enumerate", "runner.log_buffer.update", "sum", "loss.item"], "methods", ["None"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "# for verbose", "\n", "        ", "log_vars", "=", "{", "}", "\n", "for", "i", ",", "loss", "in", "enumerate", "(", "self", ".", "div_losses", ")", ":", "\n", "            ", "log_vars", "[", "f'mask_div_loss_{i}'", "]", "=", "loss", ".", "item", "(", ")", "\n", "", "runner", ".", "log_buffer", ".", "update", "(", "log_vars", ",", "runner", ".", "outputs", "[", "'num_samples'", "]", ")", "\n", "# add divergence loss to task loss", "\n", "runner", ".", "outputs", "[", "'loss'", "]", "+=", "sum", "(", "self", ".", "div_losses", ")", "\n", "self", ".", "div_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd_hook.MasKDHook.before_train_iter": [[53, 57], ["m.eval"], "methods", ["None"], ["", "def", "before_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "self", ".", "div_losses", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "norms", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd_hook.MasKDHook._module_forward_hook": [[58, 66], ["zip", "tuple", "len", "len", "mask_module", "masked_outputs.append", "maskd_hook.MasKDHook.div_losses.append"], "methods", ["None"], ["", "", "def", "_module_forward_hook", "(", "self", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "assert", "len", "(", "output", ")", "==", "len", "(", "self", ".", "channels", ")", "\n", "masked_outputs", "=", "[", "]", "\n", "for", "mask_module", ",", "out", "in", "zip", "(", "self", ".", "mask_modules", ",", "output", ")", ":", "\n", "            ", "masked_out", ",", "div_loss", "=", "mask_module", "(", "out", ")", "\n", "masked_outputs", ".", "append", "(", "masked_out", ")", "\n", "self", ".", "div_losses", ".", "append", "(", "div_loss", ")", "\n", "", "return", "tuple", "(", "masked_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd_hook.MasKDHook._fix_weights": [[67, 85], ["runner.model.module.named_parameters", "set", "runner.model.module.named_modules", "list", "isinstance", "isinstance", "maskd_hook.MasKDHook.mask_modules.parameters", "runner.logger.info", "m.parameters", "maskd_hook.MasKDHook.norms.append", "set.add"], "methods", ["None"], ["", "def", "_fix_weights", "(", "self", ",", "runner", ")", ":", "\n", "# ignore grads", "\n", "        ", "for", "n", ",", "p", "in", "runner", ".", "model", ".", "module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "opt_params", "=", "set", "(", ")", "\n", "for", "k", ",", "m", "in", "runner", ".", "model", ".", "module", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "MaskModule", ")", ":", "\n", "                ", "runner", ".", "logger", ".", "info", "(", "f'Mask module: {k}'", ")", "\n", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "True", "\n", "opt_params", ".", "add", "(", "p", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                ", "self", ".", "norms", ".", "append", "(", "m", ")", "\n", "\n", "# add mask modules into optimizer", "\n", "", "", "runner", ".", "optimizer", ".", "param_groups", "=", "[", "runner", ".", "optimizer", ".", "param_groups", "[", "0", "]", "]", "\n", "runner", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'params'", "]", "=", "list", "(", "self", ".", "mask_modules", ".", "parameters", "(", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__": [[24, 35], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.randn().normal_", "torch.randn().normal_", "torch.randn().normal_", "torch.randn().normal_", "torch.Sequential", "torch.Sequential", "maskd.MaskModule.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.__init__", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights"], ["\n", "", "class", "MaskModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "channels", ",", "num_tokens", "=", "8", ",", "weight_mask", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight_mask", "=", "weight_mask", "\n", "self", ".", "mask_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tokens", ",", "channels", ")", ".", "normal_", "(", "0", ",", "0.01", ")", ")", "\n", "if", "self", ".", "weight_mask", ":", "\n", "            ", "self", ".", "prob", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channels", ",", "num_tokens", ",", "kernel_size", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights": [[36, 43], ["maskd.MaskModule.modules", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], [")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "# fan-out", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_mask": [[44, 52], ["maskd.MaskModule.mask_token.expand", "x.view", "attn.view.view.sigmoid", "attn.view.view.view"], "methods", ["None"], ["if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "", "def", "forward_mask", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "mask_token", "=", "self", ".", "mask_token", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ")", "# [N, T, C]", "\n", "k", "=", "x", ".", "view", "(", "N", ",", "-", "1", ",", "H", "*", "W", ")", "\n", "attn", "=", "mask_token", "@", "k", "# [N, T, H * W]", "\n", "attn", "=", "attn", ".", "sigmoid", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_prob": [[53, 57], ["maskd.MaskModule.prob", "mask_probs.softmax().unsqueeze.softmax().unsqueeze.softmax().unsqueeze", "mask_probs.softmax().unsqueeze.softmax().unsqueeze.softmax"], "methods", ["None"], ["attn", "=", "attn", ".", "view", "(", "N", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "return", "attn", "\n", "\n", "", "def", "forward_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask_probs", "=", "self", ".", "prob", "(", "x", ")", "# [N, T, 1, 1]", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_train": [[58, 69], ["maskd.MaskModule.forward_mask", "out.sum.sum.sum", "maskd.dice_coeff", "x.unsqueeze", "maskd.MaskModule.unsqueeze", "maskd.MaskModule.forward_prob", "maskd.MaskModule.flatten"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_mask", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.dice_coeff", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_prob"], ["mask_probs", "=", "mask_probs", ".", "softmax", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# [N, T, 1, 1, 1]", "\n", "return", "mask_probs", "\n", "\n", "", "def", "forward_train", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask", "=", "self", ".", "forward_mask", "(", "x", ")", "\n", "out", "=", "x", ".", "unsqueeze", "(", "1", ")", "*", "mask", ".", "unsqueeze", "(", "2", ")", "# [N, T, C, H, W]", "\n", "# probs", "\n", "if", "self", ".", "weight_mask", ":", "\n", "            ", "mask_probs", "=", "self", ".", "forward_prob", "(", "x", ")", "\n", "#print(mask_probs.detach().flatten(1))", "\n", "out", "=", "out", "*", "mask_probs", "\n", "", "out", "=", "out", ".", "sum", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward": [[70, 72], ["maskd.MaskModule.forward_train"], "methods", ["home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.forward_train"], ["# loss", "\n", "mask_loss", "=", "dice_coeff", "(", "mask", ".", "flatten", "(", "2", ")", ")", "\n", "return", "out", ",", "mask_loss", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.dice_coeff": [[6, 20], ["pred.new_ones", "torch.sum", "torch.sum", "pred.size", "target.size", "pred.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.new_ones.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "pred.new_ones.size", "pred.new_ones.size"], "function", ["None"], ["from", ".", ".", "builder", "import", "LOSSES", "\n", "\n", "\n", "def", "dice_coeff", "(", "inputs", ")", ":", "\n", "# inputs: [B, T, H*W]", "\n", "    ", "pred", "=", "inputs", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "target", "=", "inputs", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "\n", "mask", "=", "pred", ".", "new_ones", "(", "pred", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ",", "pred", ".", "size", "(", "2", ")", ")", "\n", "mask", "[", ":", ",", "torch", ".", "arange", "(", "mask", ".", "size", "(", "1", ")", ")", ",", "torch", ".", "arange", "(", "mask", ".", "size", "(", "2", ")", ")", "]", "=", "0", "\n", "\n", "a", "=", "torch", ".", "sum", "(", "pred", "*", "target", ",", "-", "1", ")", "\n", "b", "=", "torch", ".", "sum", "(", "pred", "*", "pred", ",", "-", "1", ")", "+", "1e-12", "\n", "c", "=", "torch", ".", "sum", "(", "target", "*", "target", ",", "-", "1", ")", "+", "1e-12", "\n", "d", "=", "(", "2", "*", "a", ")", "/", "(", "b", "+", "c", ")", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.tools.train.parse_args": [[25, 88], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "\n", "", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Copy from mmsegmentation and modify some codes.\n\n    This is an ugly implementation, and will be deprecated in the future. In\n    the future, there will be only one train api and no longer distinguish\n    between mmclassificaiton, mmsegmentation or mmdetection.\n    \"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "if", "cfg", ".", "get", "(", "'use_ddp_wrapper'", ",", "False", ")", ":", "\n", "# Difference from mmsegmentation.", "\n", "# In some algorithms, the ``optimizer.step()`` is executed in", "\n", "# ``train_step``. To rebuilt reducer buckets rightly, there need to", "\n", "# use DistributedDataParallelWrapper.", "\n", "            ", "model", "=", "DistributedDataParallelWrapper", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "# Sets the ``find_unused_parameters`` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "            ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.tools.train.main": [[90, 189], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmdet.models.build_detector", "mmdet.models.build_detector.init_weights", "mmdet.apis.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args", "home.repos.pwc.inspect_result.hunto_maskd.mmdetection.maskd.MaskModule.init_weights", "home.repos.pwc.inspect_result.hunto_maskd.mmdet.train.train_detector", "home.repos.pwc.inspect_result.hunto_maskd.mmcls.train.set_random_seed"], ["\n", "# build optimizers", "\n", "# Difference from mmdetection.", "\n", "# In some algorithms, there will be multi optimizers.", "\n", "", "optimizer", "=", "build_optimizers", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "# build runner", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a ``runner`` section, '", "\n", "'please set ``runner`` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "# In this PR (https://github.com/open-mmlab/mmcv/pull/1193), the", "\n", "# priority of IterTimerHook has been modified from 'NORMAL' to 'LOW'.", "\n", "runner", ".", "register_hook", "(", "\n", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ",", "priority", "=", "'LOW'", ")", "\n", "\n", "# user-defined hooks", "\n", "", "if", "cfg", ".", "get", "(", "'custom_hooks'", ",", "None", ")", ":", "\n", "        ", "custom_hooks", "=", "cfg", ".", "custom_hooks", "\n", "assert", "isinstance", "(", "custom_hooks", ",", "list", ")", ",", "f'custom_hooks expect list type, but got {type(custom_hooks)}'", "\n", "for", "hook_cfg", "in", "cfg", ".", "custom_hooks", ":", "\n", "            ", "assert", "isinstance", "(", "hook_cfg", ",", "dict", ")", ",", "'Each item in custom_hooks expects dict type, but got '", "f'{type(hook_cfg)}'", "\n", "hook_cfg", "=", "hook_cfg", ".", "copy", "(", ")", "\n", "priority", "=", "hook_cfg", ".", "pop", "(", "'priority'", ",", "'NORMAL'", ")", "\n", "hook", "=", "build_from_cfg", "(", "hook_cfg", ",", "HOOKS", ")", "\n", "runner", ".", "register_hook", "(", "hook", ",", "priority", "=", "priority", ")", "\n", "\n", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args": [[21, 104], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "'the directory to save the file containing evaluation metrics'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"bbox\",'", "\n", "' \"segm\", \"proposal\" for COCO, and \"mAP\", \"recall\" for PASCAL VOC'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "'score threshold (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu-collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function (deprecate), '", "\n", "'change to --eval-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "eval_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --eval-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --eval-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --eval-options'", ")", "\n", "args", ".", "eval_options", "=", "args", ".", "options", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hunto_maskd.tools.test.main": [[106, 234], ["test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.model.get", "isinstance", "mmcv.runner.get_dist_info", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.model.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "os.abspath", "time.localtime", "Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "mmdet.datasets.build_dataset.evaluate", "print", "dict", "neck_cfg.get", "Config.fromfile.model.neck.rfp_backbone.get", "cfg.get().copy.pop", "dict", "mmcv.dump", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.hunto_maskd.tools.test.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "if", "cfg", ".", "model", ".", "get", "(", "'neck'", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", ".", "model", ".", "neck", ",", "list", ")", ":", "\n", "            ", "for", "neck_cfg", "in", "cfg", ".", "model", ".", "neck", ":", "\n", "                ", "if", "neck_cfg", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "                    ", "if", "neck_cfg", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                        ", "neck_cfg", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "", "", "", "", "elif", "cfg", ".", "model", ".", "neck", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "            ", "if", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                ", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "\n", "# in case the test dataset is concatenated", "\n", "", "", "", "samples_per_gpu", "=", "1", "\n", "if", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "dict", ")", ":", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "list", ")", ":", "\n", "        ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "            ", "ds_cfg", ".", "test_mode", "=", "True", "\n", "", "samples_per_gpu", "=", "max", "(", "\n", "[", "ds_cfg", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", "]", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "            ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "                ", "ds_cfg", ".", "pipeline", "=", "replace_ImageToTensor", "(", "ds_cfg", ".", "pipeline", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "# allows not to create", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "args", ".", "work_dir", ")", ")", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "json_file", "=", "osp", ".", "join", "(", "args", ".", "work_dir", ",", "f'eval_{timestamp}.json'", ")", "\n", "\n", "# build the dataloader", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "args", ".", "show_score_thr", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "eval_kwargs", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", ".", "copy", "(", ")", "\n", "# hard-code way to remove EvalHook args", "\n", "for", "key", "in", "[", "\n", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'gpu_collect'", ",", "'save_best'", ",", "\n", "'rule'", "\n", "]", ":", "\n", "                ", "eval_kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "eval_kwargs", ".", "update", "(", "dict", "(", "metric", "=", "args", ".", "eval", ",", "**", "kwargs", ")", ")", "\n", "metric", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_kwargs", ")", "\n", "print", "(", "metric", ")", "\n", "metric_dict", "=", "dict", "(", "config", "=", "args", ".", "config", ",", "metric", "=", "metric", ")", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "                ", "mmcv", ".", "dump", "(", "metric_dict", ",", "json_file", ")", "\n", "\n"]]}