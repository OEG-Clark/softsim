{"home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.CNNEncoder.__init__": [[57, 64], ["torch.Module.__init__", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torchvision.vgg16_bn"], "methods", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.RelationNetwork.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "list", "(", "models", ".", "vgg16_bn", "(", "pretrained", "=", "False", ")", ".", "features", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "features", ")", "[", "1", ":", "]", "#.eval()", "\n", "# print (nn.Sequential(*list(models.vgg16_bn(pretrained=True).children())[0]))", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.CNNEncoder.forward": [[67, 76], ["autolabel.CNNEncoder.layer1", "enumerate", "model", "results.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "for", "ii", ",", "model", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "x", "=", "model", "(", "x", ")", "\n", "if", "ii", "in", "{", "4", ",", "11", ",", "21", ",", "31", ",", "41", "}", ":", "\n", "                ", "results", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "x", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.RelationNetwork.__init__": [[79, 129], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.RelationNetwork.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RelationNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "double_conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 14 x 14", "\n", "self", ".", "double_conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 28 x 28", "\n", "self", ".", "double_conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 56 x 56", "\n", "self", ".", "double_conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 112 x 112", "\n", "self", ".", "double_conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "# 256 x 256", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.RelationNetwork.forward": [[132, 153], ["autolabel.RelationNetwork.layer1", "autolabel.RelationNetwork.layer2", "autolabel.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autolabel.RelationNetwork.double_conv1", "autolabel.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autolabel.RelationNetwork.double_conv2", "autolabel.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autolabel.RelationNetwork.double_conv3", "autolabel.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autolabel.RelationNetwork.double_conv4", "autolabel.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "autolabel.RelationNetwork.double_conv5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "concat_features", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 1", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 2", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 3", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "3", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 4", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "4", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv4", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 5", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "5", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv5", "(", "out", ")", "\n", "\n", "out", "=", "F", ".", "sigmoid", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.get_oneshot_batch": [[154, 209], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "os.listdir", "os.listdir", "cv2.imread", "cv2.resize", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "list", "cv2.imread", "numpy.transpose", "range", "Exception", "cv2.imread", "len", "imgnames[].replace"], "function", ["None"], ["", "", "def", "get_oneshot_batch", "(", "testname", ")", ":", "#shuffle in query_images not done", "\n", "# classes_name = os.listdir('./%s' % args.support_dir)", "\n", "# classes_name = ['android_robot', 'bucket_water' , 'nintendo_gameboy']", "\n", "\n", "\n", "    ", "support_images", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "SAMPLE_NUM_PER_CLASS", ",", "3", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "support_labels", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "SAMPLE_NUM_PER_CLASS", ",", "CLASS_NUM", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "query_images", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "BATCH_NUM_PER_CLASS", ",", "3", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "query_labels", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "BATCH_NUM_PER_CLASS", ",", "CLASS_NUM", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "BATCH_NUM_PER_CLASS", ",", "1", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "class_cnt", "=", "0", "\n", "\n", "# print ('class %s is chosen' % i)", "\n", "# classnames = ['english_foxhound', 'guitar']", "\n", "imgnames", "=", "os", ".", "listdir", "(", "'./%s/label'", "%", "args", ".", "support_dir", ")", "\n", "# print (args.support_dir, imgnames)", "\n", "testnames", "=", "os", ".", "listdir", "(", "'%s'", "%", "args", ".", "test_dir", ")", "\n", "indexs", "=", "list", "(", "range", "(", "0", ",", "len", "(", "imgnames", ")", ")", ")", "[", "0", ":", "5", "]", "\n", "chosen_index", "=", "indexs", "\n", "j", "=", "0", "\n", "for", "k", "in", "chosen_index", ":", "\n", "# process image", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "'%s/image/%s'", "%", "(", "args", ".", "support_dir", ",", "imgnames", "[", "k", "]", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", ")", ")", "\n", "if", "image", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'cannot load image '", ")", "\n", "\n", "", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# bgr to rgb", "\n", "image", "=", "image", "/", "255.0", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "# labels", "\n", "# print ('%s/label/%s' % (args.support_dir, imgnames[k]))", "\n", "label", "=", "cv2", ".", "imread", "(", "'%s/label/%s'", "%", "(", "args", ".", "support_dir", ",", "imgnames", "[", "k", "]", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "support_images", "[", "k", "]", "=", "image", "\n", "support_labels", "[", "k", "]", "[", "0", "]", "=", "label", "\n", "\n", "", "testimage", "=", "cv2", ".", "imread", "(", "'%s/%s'", "%", "(", "args", ".", "test_dir", ",", "testname", ")", ")", "\n", "testimage", "=", "cv2", ".", "resize", "(", "testimage", ",", "(", "224", ",", "224", ")", ")", "\n", "testimage", "=", "testimage", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# bgr to rgb", "\n", "testimage", "=", "testimage", "/", "255.0", "\n", "testimage", "=", "np", ".", "transpose", "(", "testimage", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "query_images", "[", "0", "]", "=", "testimage", "\n", "\n", "class_cnt", "+=", "1", "\n", "support_images_tensor", "=", "torch", ".", "from_numpy", "(", "support_images", ")", "\n", "support_labels_tensor", "=", "torch", ".", "from_numpy", "(", "support_labels", ")", "\n", "support_images_tensor", "=", "torch", ".", "cat", "(", "(", "support_images_tensor", ",", "support_labels_tensor", ")", ",", "dim", "=", "1", ")", "\n", "\n", "zeros_tensor", "=", "torch", ".", "from_numpy", "(", "zeros", ")", "\n", "query_images_tensor", "=", "torch", ".", "from_numpy", "(", "query_images", ")", "\n", "query_images_tensor", "=", "torch", ".", "cat", "(", "(", "query_images_tensor", ",", "zeros_tensor", ")", ",", "dim", "=", "1", ")", "\n", "query_labels_tensor", "=", "torch", ".", "from_numpy", "(", "query_labels", ")", "\n", "\n", "return", "support_images_tensor", ",", "support_labels_tensor", ",", "query_images_tensor", ",", "query_labels_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.get_pascal_labels": [[210, 222], ["numpy.asarray"], "function", ["None"], ["", "def", "get_pascal_labels", "(", ")", ":", "\n", "    ", "\"\"\"Load the mapping that associates pascal classes with label colors\n\n    Returns:\n        np.ndarray with dimensions (21, 3)\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "[", "64", ",", "0", ",", "0", "]", ",", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "\n", "[", "64", ",", "0", ",", "128", "]", ",", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "\n", "[", "0", ",", "64", ",", "0", "]", ",", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "\n", "[", "0", ",", "64", ",", "128", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.encode_segmap": [[224, 241], ["mask.astype.astype", "numpy.zeros", "enumerate", "label_mask.astype.astype", "autolabel.get_pascal_labels", "numpy.where", "numpy.all"], "function", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_pascal_labels"], ["", "def", "encode_segmap", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Encode segmentation label images as pascal classes\n\n    Args:\n        mask (np.ndarray): raw segmentation label image of dimension\n          (M, N, 3), in which the Pascal classes are encoded as colours.\n\n    Returns:\n        (np.ndarray): class map with dimensions (M,N), where the value at\n        a given location is the integer denoting the class index.\n    \"\"\"", "\n", "mask", "=", "mask", ".", "astype", "(", "int", ")", "\n", "label_mask", "=", "np", ".", "zeros", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "ii", ",", "label", "in", "enumerate", "(", "get_pascal_labels", "(", ")", ")", ":", "\n", "        ", "label_mask", "[", "np", ".", "where", "(", "np", ".", "all", "(", "mask", "==", "label", ",", "axis", "=", "-", "1", ")", ")", "[", ":", "2", "]", "]", "=", "ii", "\n", "", "label_mask", "=", "label_mask", ".", "astype", "(", "int", ")", "\n", "return", "label_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.decode_segmap": [[243, 272], ["autolabel.get_pascal_labels", "label_mask.copy", "label_mask.copy", "label_mask.copy", "range", "numpy.zeros", "plt.imshow", "plt.show"], "function", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_pascal_labels"], ["", "def", "decode_segmap", "(", "label_mask", ",", "plot", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decode segmentation class labels into a color image\n\n    Args:\n        label_mask (np.ndarray): an (M,N) array of integer values denoting\n          the class label at each spatial location.\n        plot (bool, optional): whether to show the resulting color image\n          in a figure.\n\n    Returns:\n        (np.ndarray, optional): the resulting decoded color image.\n    \"\"\"", "\n", "label_colours", "=", "get_pascal_labels", "(", ")", "\n", "r", "=", "label_mask", ".", "copy", "(", ")", "\n", "g", "=", "label_mask", ".", "copy", "(", ")", "\n", "b", "=", "label_mask", ".", "copy", "(", ")", "\n", "for", "ll", "in", "range", "(", "0", ",", "21", ")", ":", "\n", "        ", "r", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "0", "]", "\n", "g", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "1", "]", "\n", "b", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "2", "]", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "label_mask", ".", "shape", "[", "0", "]", ",", "label_mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "#/ 255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "#/ 255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "#/ 255.0", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "imshow", "(", "rgb", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.maskimg": [[273, 290], ["img.copy", "img.copy", "img.copy", "cv2.addWeighted", "cv2.addWeighted"], "function", ["None"], ["", "", "def", "maskimg", "(", "img", ",", "mask", ",", "edge", ",", "color", "=", "[", "0", ",", "0", ",", "255", "]", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "'''\n    img: cv2 image\n    mask: bool or np.where\n    color: BGR triplet [_, _, _]. Default: [0, 255, 255] is yellow.\n    alpha: float [0, 1].\n\n    Ref: http://www.pyimagesearch.com/2016/03/07/transparent-overlays-with-opencv/\n    '''", "\n", "out", "=", "img", ".", "copy", "(", ")", "\n", "img_layer", "=", "img", ".", "copy", "(", ")", "\n", "img_layer", "[", "mask", "==", "255", "]", "=", "color", "\n", "edge_layer", "=", "img", ".", "copy", "(", ")", "\n", "edge_layer", "[", "edge", "==", "255", "]", "=", "color", "\n", "out", "=", "cv2", ".", "addWeighted", "(", "edge_layer", ",", "1", ",", "out", ",", "0", ",", "0", ",", "out", ")", "\n", "out", "=", "cv2", ".", "addWeighted", "(", "img_layer", ",", "alpha", ",", "out", ",", "1", "-", "alpha", ",", "0", ",", "out", ")", "\n", "return", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.main": [[293, 396], ["print", "print", "autolabel.CNNEncoder", "autolabel.RelationNetwork", "CNNEncoder.cuda", "RelationNetwork.cuda", "os.path.exists", "os.path.exists", "print", "os.path.exists", "os.path.exists", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "os.listdir", "print", "enumerate", "CNNEncoder.load_state_dict", "print", "Exception", "RelationNetwork.load_state_dict", "print", "Exception", "os.system", "os.system", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "print", "print", "autolabel.get_oneshot_batch", "CNNEncoder.", "torch.sum().squeeze.view", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "CNNEncoder.", "torch.sum().squeeze.unsqueeze().repeat", "batch_features.unsqueeze().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cat().view", "torch.cat().view", "torch.cat().view", "RelationNetwork.view", "range", "stick[].astype", "cv2.Canny", "cv2.imwrite", "cv2.imwrite", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "cv2.imread", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "demo.copy", "[].astype", "pred.astype.astype", "range", "autolabel.maskimg", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum().squeeze.unsqueeze", "batch_features.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "RelationNetwork.", "batches.size", "cv2.cvtColor", "overlap.sum", "float", "numpy.transpose", "cv2.cvtColor", "cv2.Canny", "cv2.imwrite", "numpy.transpose", "len", "torch.autograd.Variable", "torch.autograd.Variable", "relation_network().view.data.cpu().numpy", "union.sum", "samples.size", "autolabel.maskimg", "[].astype.copy", "numpy.transpose", "sample_labels.numpy", "relation_network().view.data.cpu", "batch_labels.numpy", "cv2.cvtColor.copy", "batches.numpy", "samples.numpy"], "function", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_oneshot_batch", "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.maskimg", "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.autolabel.maskimg"], ["", "def", "main", "(", ")", ":", "\n", "# Step 1: init data folders", "\n", "    ", "print", "(", "\"init data folders\"", ")", "\n", "# init character folders for dataset construction", "\n", "# metatrain_character_folders,metatest_character_folders = tg.omniglot_character_folders()", "\n", "\n", "# Step 2: init neural networks", "\n", "print", "(", "\"init neural networks\"", ")", "\n", "\n", "feature_encoder", "=", "CNNEncoder", "(", ")", "\n", "relation_network", "=", "RelationNetwork", "(", ")", "\n", "\n", "feature_encoder", ".", "cuda", "(", "GPU", ")", "\n", "relation_network", ".", "cuda", "(", "GPU", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "FEATURE_MODEL", ")", ":", "\n", "        ", "feature_encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "FEATURE_MODEL", ")", ")", "\n", "print", "(", "\"load feature encoder success\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Can not load feature encoder: %s'", "%", "FEATURE_MODEL", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "RELATION_MODEL", ")", ":", "\n", "        ", "relation_network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "RELATION_MODEL", ")", ")", "\n", "print", "(", "\"load relation network success\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Can not load relation network: %s'", "%", "RELATION_MODEL", ")", "\n", "\n", "\n", "", "print", "(", "\"Testing...\"", ")", "\n", "meaniou", "=", "0", "\n", "classname", "=", "args", ".", "support_dir", "\n", "if", "os", ".", "path", ".", "exists", "(", "'result1'", ")", ":", "\n", "        ", "os", ".", "system", "(", "'rm -r result1'", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "'result.zip'", ")", ":", "\n", "        ", "os", ".", "system", "(", "'rm result.zip'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'result1'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'result1'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'./result1/%s'", "%", "classname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'./result1/%s'", "%", "classname", ")", "\n", "", "stick", "=", "np", ".", "zeros", "(", "(", "224", "*", "4", ",", "224", "*", "5", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "support_image", "=", "np", ".", "zeros", "(", "(", "5", ",", "3", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "support_label", "=", "np", ".", "zeros", "(", "(", "5", ",", "1", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "supp_demo", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", "*", "5", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "supplabel_demo", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", "*", "5", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "testnames", "=", "os", ".", "listdir", "(", "'%s'", "%", "args", ".", "test_dir", ")", "\n", "print", "(", "'%s testing images in class %s'", "%", "(", "len", "(", "testnames", ")", ",", "classname", ")", ")", "\n", "\n", "for", "cnt", ",", "testname", "in", "enumerate", "(", "testnames", ")", ":", "\n", "\n", "        ", "print", "(", "'%s / %s'", "%", "(", "cnt", ",", "len", "(", "testnames", ")", ")", ")", "\n", "print", "(", "testname", ")", "\n", "if", "cv2", ".", "imread", "(", "'%s/%s'", "%", "(", "args", ".", "test_dir", ",", "testname", ")", ")", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "\n", "", "samples", ",", "sample_labels", ",", "batches", ",", "batch_labels", "=", "get_oneshot_batch", "(", "testname", ")", "\n", "\n", "#forward", "\n", "sample_features", ",", "_", "=", "feature_encoder", "(", "Variable", "(", "samples", ")", ".", "cuda", "(", "GPU", ")", ")", "\n", "sample_features", "=", "sample_features", ".", "view", "(", "CLASS_NUM", ",", "SAMPLE_NUM_PER_CLASS", ",", "512", ",", "7", ",", "7", ")", "\n", "sample_features", "=", "torch", ".", "sum", "(", "sample_features", ",", "1", ")", ".", "squeeze", "(", "1", ")", "# 1*512*7*7", "\n", "batch_features", ",", "ft_list", "=", "feature_encoder", "(", "Variable", "(", "batches", ")", ".", "cuda", "(", "GPU", ")", ")", "\n", "sample_features_ext", "=", "sample_features", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "BATCH_NUM_PER_CLASS", "*", "CLASS_NUM", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "batch_features_ext", "=", "batch_features", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "CLASS_NUM", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "batch_features_ext", "=", "torch", ".", "transpose", "(", "batch_features_ext", ",", "0", ",", "1", ")", "\n", "relation_pairs", "=", "torch", ".", "cat", "(", "(", "sample_features_ext", ",", "batch_features_ext", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "1024", ",", "7", ",", "7", ")", "\n", "output", "=", "relation_network", "(", "relation_pairs", ",", "ft_list", ")", ".", "view", "(", "-", "1", ",", "CLASS_NUM", ",", "224", ",", "224", ")", "\n", "\n", "classiou", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "batches", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "#get prediction", "\n", "            ", "pred", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "i", "]", "[", "0", "]", "\n", "pred", "[", "pred", "<=", "0.5", "]", "=", "0", "\n", "pred", "[", "pred", ">", "0.5", "]", "=", "1", "\n", "#vis", "\n", "demo", "=", "cv2", ".", "cvtColor", "(", "pred", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "*", "255", "\n", "stick", "[", "224", "*", "3", ":", "224", "*", "4", ",", "224", "*", "i", ":", "224", "*", "(", "i", "+", "1", ")", ",", ":", "]", "=", "demo", ".", "copy", "(", ")", "\n", "\n", "testlabel", "=", "batch_labels", ".", "numpy", "(", ")", "[", "i", "]", "[", "0", "]", ".", "astype", "(", "bool", ")", "\n", "pred", "=", "pred", ".", "astype", "(", "bool", ")", "\n", "#compute IOU", "\n", "overlap", "=", "testlabel", "*", "pred", "\n", "union", "=", "testlabel", "+", "pred", "\n", "iou", "=", "overlap", ".", "sum", "(", ")", "/", "float", "(", "union", ".", "sum", "(", ")", ")", "\n", "# print ('iou=%0.4f' % iou)", "\n", "classiou", "+=", "iou", "\n", "", "classiou", "/=", "5.0", "\n", "\n", "#visulization", "\n", "if", "(", "cnt", "==", "0", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "samples", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "suppimg", "=", "np", ".", "transpose", "(", "samples", ".", "numpy", "(", ")", "[", "i", "]", "[", "0", ":", "3", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "*", "255", "\n", "supplabel", "=", "np", ".", "transpose", "(", "sample_labels", ".", "numpy", "(", ")", "[", "i", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "supplabel", "=", "cv2", ".", "cvtColor", "(", "supplabel", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "supplabel", "=", "(", "supplabel", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "suppedge", "=", "cv2", ".", "Canny", "(", "supplabel", ",", "1", ",", "1", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "'./result1/%s/supp%s.png'", "%", "(", "classname", ",", "i", ")", ",", "maskimg", "(", "suppimg", ",", "supplabel", ".", "copy", "(", ")", "[", ":", ",", ":", ",", "0", "]", ",", "suppedge", ",", "color", "=", "[", "0", ",", "255", ",", "0", "]", ")", ")", "\n", "", "", "testimg", "=", "np", ".", "transpose", "(", "batches", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", ":", "3", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "*", "255", "\n", "testlabel", "=", "stick", "[", "224", "*", "3", ":", "224", "*", "4", ",", "224", "*", "i", ":", "224", "*", "(", "i", "+", "1", ")", ",", ":", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "testedge", "=", "cv2", ".", "Canny", "(", "testlabel", ",", "1", ",", "1", ")", "\n", "cv2", ".", "imwrite", "(", "'./result1/%s/test%s_raw.png'", "%", "(", "classname", ",", "cnt", ")", ",", "testimg", ")", "#raw image", "\n", "cv2", ".", "imwrite", "(", "'./result1/%s/test%s.png'", "%", "(", "classname", ",", "cnt", ")", ",", "maskimg", "(", "testimg", ",", "testlabel", ".", "copy", "(", ")", "[", ":", ",", ":", ",", "0", "]", ",", "testedge", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.CNNEncoder.__init__": [[59, 66], ["torch.Module.__init__", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torchvision.vgg16_bn"], "methods", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.RelationNetwork.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "list", "(", "models", ".", "vgg16_bn", "(", "pretrained", "=", "args", ".", "loadImagenet", ")", ".", "features", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "features", ")", "[", "1", ":", "]", "#.eval()", "\n", "# print (nn.Sequential(*list(models.vgg16_bn(pretrained=True).children())[0]))", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.CNNEncoder.forward": [[69, 78], ["training.CNNEncoder.layer1", "enumerate", "model", "results.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "for", "ii", ",", "model", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "x", "=", "model", "(", "x", ")", "\n", "if", "ii", "in", "{", "4", ",", "11", ",", "21", ",", "31", ",", "41", "}", ":", "\n", "                ", "results", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "x", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.RelationNetwork.__init__": [[81, 131], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.RelationNetwork.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RelationNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "double_conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 14 x 14", "\n", "self", ".", "double_conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 28 x 28", "\n", "self", ".", "double_conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 56 x 56", "\n", "self", ".", "double_conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 112 x 112", "\n", "self", ".", "double_conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "1", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "# 256 x 256", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.RelationNetwork.forward": [[133, 154], ["training.RelationNetwork.layer1", "training.RelationNetwork.layer2", "training.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training.RelationNetwork.double_conv1", "training.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training.RelationNetwork.double_conv2", "training.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training.RelationNetwork.double_conv3", "training.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training.RelationNetwork.double_conv4", "training.RelationNetwork.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "training.RelationNetwork.double_conv5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "concat_features", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 1", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 2", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 3", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "3", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 4", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "4", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv4", "(", "out", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ")", "#block 5", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "concat_features", "[", "-", "5", "]", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "double_conv5", "(", "out", ")", "\n", "\n", "out", "=", "F", ".", "sigmoid", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.weights_init": [[155, 169], ["classname.find", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_", "classname.find", "m.weight.data.fill_", "m.bias.data.zero_", "classname.find", "m.weight.size", "m.weight.data.normal_", "torch.ones", "torch.ones", "torch.ones", "m.bias.data.size"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", "=", "torch", ".", "ones", "(", "m", ".", "bias", ".", "data", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_oneshot_batch": [[172, 220], ["os.listdir", "list", "random.sample", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "os.listdir", "list", "random.sample", "len", "range", "cv2.imread", "numpy.transpose", "len", "print", "cv2.imread", "imgnames[].replace", "imgnames[].replace"], "function", ["None"], ["", "", "def", "get_oneshot_batch", "(", ")", ":", "#shuffle in query_images not done", "\n", "# classes.remove(EXCLUDE_CLASS)", "\n", "    ", "classes_name", "=", "os", ".", "listdir", "(", "'./fewshot/support/'", ")", "\n", "classes", "=", "list", "(", "range", "(", "0", ",", "len", "(", "classes_name", ")", ")", ")", "\n", "\n", "chosen_classes", "=", "random", ".", "sample", "(", "classes", ",", "CLASS_NUM", ")", "\n", "support_images", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "SAMPLE_NUM_PER_CLASS", ",", "3", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "support_labels", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "SAMPLE_NUM_PER_CLASS", ",", "CLASS_NUM", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "query_images", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "BATCH_NUM_PER_CLASS", ",", "3", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "query_labels", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "BATCH_NUM_PER_CLASS", ",", "CLASS_NUM", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "CLASS_NUM", "*", "BATCH_NUM_PER_CLASS", ",", "1", ",", "224", ",", "224", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "class_cnt", "=", "0", "\n", "for", "i", "in", "chosen_classes", ":", "\n", "# print ('class %s is chosen' % i)", "\n", "        ", "imgnames", "=", "os", ".", "listdir", "(", "'./fewshot/support/%s/label'", "%", "classes_name", "[", "i", "]", ")", "\n", "indexs", "=", "list", "(", "range", "(", "0", ",", "len", "(", "imgnames", ")", ")", ")", "\n", "chosen_index", "=", "random", ".", "sample", "(", "indexs", ",", "SAMPLE_NUM_PER_CLASS", "+", "BATCH_NUM_PER_CLASS", ")", "\n", "j", "=", "0", "\n", "for", "k", "in", "chosen_index", ":", "\n", "# process image", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "'./fewshot/support/%s/image/%s'", "%", "(", "classes_name", "[", "i", "]", ",", "imgnames", "[", "k", "]", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", ")", ")", "\n", "if", "image", "is", "None", ":", "\n", "                ", "print", "(", "'./fewshot/support/%s/image/%s'", "%", "(", "classes_name", "[", "i", "]", ",", "imgnames", "[", "k", "]", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", ")", ")", "\n", "stop", "\n", "", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# bgr to rgb", "\n", "image", "=", "image", "/", "255.0", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "# labels", "\n", "label", "=", "cv2", ".", "imread", "(", "'./fewshot/support/%s/label/%s'", "%", "(", "classes_name", "[", "i", "]", ",", "imgnames", "[", "k", "]", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "if", "j", "<", "SAMPLE_NUM_PER_CLASS", ":", "\n", "                ", "support_images", "[", "j", "]", "=", "image", "\n", "support_labels", "[", "j", "]", "[", "0", "]", "=", "label", "\n", "", "else", ":", "\n", "                ", "query_images", "[", "j", "-", "SAMPLE_NUM_PER_CLASS", "]", "=", "image", "\n", "query_labels", "[", "j", "-", "SAMPLE_NUM_PER_CLASS", "]", "[", "class_cnt", "]", "=", "label", "\n", "", "j", "+=", "1", "\n", "\n", "", "class_cnt", "+=", "1", "\n", "", "support_images_tensor", "=", "torch", ".", "from_numpy", "(", "support_images", ")", "\n", "support_labels_tensor", "=", "torch", ".", "from_numpy", "(", "support_labels", ")", "\n", "support_images_tensor", "=", "torch", ".", "cat", "(", "(", "support_images_tensor", ",", "support_labels_tensor", ")", ",", "dim", "=", "1", ")", "\n", "\n", "zeros_tensor", "=", "torch", ".", "from_numpy", "(", "zeros", ")", "\n", "query_images_tensor", "=", "torch", ".", "from_numpy", "(", "query_images", ")", "\n", "query_images_tensor", "=", "torch", ".", "cat", "(", "(", "query_images_tensor", ",", "zeros_tensor", ")", ",", "dim", "=", "1", ")", "\n", "query_labels_tensor", "=", "torch", ".", "from_numpy", "(", "query_labels", ")", "\n", "\n", "return", "support_images_tensor", ",", "support_labels_tensor", ",", "query_images_tensor", ",", "query_labels_tensor", ",", "chosen_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_pascal_labels": [[222, 234], ["numpy.asarray"], "function", ["None"], ["", "def", "get_pascal_labels", "(", ")", ":", "\n", "    ", "\"\"\"Load the mapping that associates pascal classes with label colors\n\n    Returns:\n        np.ndarray with dimensions (21, 3)\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "[", "64", ",", "0", ",", "0", "]", ",", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "\n", "[", "64", ",", "0", ",", "128", "]", ",", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "\n", "[", "0", ",", "64", ",", "0", "]", ",", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "\n", "[", "0", ",", "64", ",", "128", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.encode_segmap": [[236, 253], ["mask.astype.astype", "numpy.zeros", "enumerate", "label_mask.astype.astype", "training.get_pascal_labels", "numpy.where", "numpy.all"], "function", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_pascal_labels"], ["", "def", "encode_segmap", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Encode segmentation label images as pascal classes\n\n    Args:\n        mask (np.ndarray): raw segmentation label image of dimension\n          (M, N, 3), in which the Pascal classes are encoded as colours.\n\n    Returns:\n        (np.ndarray): class map with dimensions (M,N), where the value at\n        a given location is the integer denoting the class index.\n    \"\"\"", "\n", "mask", "=", "mask", ".", "astype", "(", "int", ")", "\n", "label_mask", "=", "np", ".", "zeros", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "ii", ",", "label", "in", "enumerate", "(", "get_pascal_labels", "(", ")", ")", ":", "\n", "        ", "label_mask", "[", "np", ".", "where", "(", "np", ".", "all", "(", "mask", "==", "label", ",", "axis", "=", "-", "1", ")", ")", "[", ":", "2", "]", "]", "=", "ii", "\n", "", "label_mask", "=", "label_mask", ".", "astype", "(", "int", ")", "\n", "return", "label_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.decode_segmap": [[255, 284], ["training.get_pascal_labels", "label_mask.copy", "label_mask.copy", "label_mask.copy", "range", "numpy.zeros", "plt.imshow", "plt.show"], "function", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_pascal_labels"], ["", "def", "decode_segmap", "(", "label_mask", ",", "plot", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decode segmentation class labels into a color image\n\n    Args:\n        label_mask (np.ndarray): an (M,N) array of integer values denoting\n          the class label at each spatial location.\n        plot (bool, optional): whether to show the resulting color image\n          in a figure.\n\n    Returns:\n        (np.ndarray, optional): the resulting decoded color image.\n    \"\"\"", "\n", "label_colours", "=", "get_pascal_labels", "(", ")", "\n", "r", "=", "label_mask", ".", "copy", "(", ")", "\n", "g", "=", "label_mask", ".", "copy", "(", ")", "\n", "b", "=", "label_mask", ".", "copy", "(", ")", "\n", "for", "ll", "in", "range", "(", "0", ",", "21", ")", ":", "\n", "        ", "r", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "0", "]", "\n", "g", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "1", "]", "\n", "b", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "2", "]", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "label_mask", ".", "shape", "[", "0", "]", ",", "label_mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "#/ 255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "#/ 255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "#/ 255.0", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "imshow", "(", "rgb", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.main": [[288, 423], ["print", "training.CNNEncoder", "training.RelationNetwork", "RelationNetwork.apply", "CNNEncoder.cuda", "RelationNetwork.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "print", "range", "os.path.exists", "os.path.exists", "CNNEncoder.parameters", "RelationNetwork.parameters", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "training.get_oneshot_batch", "CNNEncoder.", "torch.sum().squeeze.view", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "CNNEncoder.", "torch.sum().squeeze.unsqueeze().repeat", "batch_features.unsqueeze().repeat", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cat().view", "torch.cat().view", "torch.cat().view", "RelationNetwork.view", "torch.MSELoss().cuda", "nn.MSELoss().cuda.", "CNNEncoder.zero_grad", "RelationNetwork.zero_grad", "mse.backward", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.optim.Adam.step", "torch.optim.Adam.step", "CNNEncoder.load_state_dict", "print", "print", "print", "RelationNetwork.load_state_dict", "print", "print", "print", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "CNNEncoder.parameters", "RelationNetwork.parameters", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "numpy.zeros", "numpy.zeros", "random.sample", "range", "np.zeros.copy", "range", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.sum", "torch.sum", "torch.sum", "torch.sum().squeeze.unsqueeze", "batch_features.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "RelationNetwork.", "torch.MSELoss", "mse.cpu().data.numpy", "list", "range", "enumerate", "enumerate", "CNNEncoder.state_dict", "str", "RelationNetwork.state_dict", "str", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "training.decode_segmap", "training.decode_segmap", "numpy.zeros", "numpy.zeros", "mse.cpu", "sample_labels.numpy", "batch_labels.numpy", "relation_network().view.detach().cpu().numpy", "batch_labels.numpy", "str", "str", "relation_network().view.detach().cpu", "str", "str", "numpy.transpose", "numpy.transpose", "relation_network().view.detach", "str", "str", "samples.numpy", "batches.numpy"], "function", ["home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.get_oneshot_batch", "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.decode_segmap", "home.repos.pwc.inspect_result.HKUSTCV_FSS-1000.None.training.decode_segmap"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "# Step 1: init neural networks", "\n", "    ", "print", "(", "\"init neural networks\"", ")", "\n", "\n", "feature_encoder", "=", "CNNEncoder", "(", ")", "\n", "relation_network", "=", "RelationNetwork", "(", ")", "\n", "\n", "relation_network", ".", "apply", "(", "weights_init", ")", "\n", "\n", "feature_encoder", ".", "cuda", "(", "GPU", ")", "\n", "relation_network", ".", "cuda", "(", "GPU", ")", "\n", "\n", "# fine-tuning", "\n", "if", "(", "args", ".", "finetune", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "FEATURE_MODEL", ")", ":", "\n", "            ", "feature_encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "FEATURE_MODEL", ")", ")", "\n", "print", "(", "\"load feature encoder success\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Can not load feature encoder: %s'", "%", "FEATURE_MODEL", ")", "\n", "print", "(", "'starting from scratch'", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "RELATION_MODEL", ")", ":", "\n", "            ", "relation_network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "RELATION_MODEL", ")", ")", "\n", "print", "(", "\"load relation network success\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Can not load relation network: %s'", "%", "RELATION_MODEL", ")", "\n", "print", "(", "'starting from scratch'", ")", "\n", "\n", "\n", "\n", "", "", "feature_encoder_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "feature_encoder", ".", "parameters", "(", ")", ",", "lr", "=", "LEARNING_RATE", ")", "\n", "feature_encoder_scheduler", "=", "StepLR", "(", "feature_encoder_optim", ",", "step_size", "=", "EPISODE", "//", "10", ",", "gamma", "=", "0.5", ")", "\n", "relation_network_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "relation_network", ".", "parameters", "(", ")", ",", "lr", "=", "LEARNING_RATE", ")", "\n", "relation_network_scheduler", "=", "StepLR", "(", "relation_network_optim", ",", "step_size", "=", "EPISODE", "//", "10", ",", "gamma", "=", "0.5", ")", "\n", "\n", "\n", "print", "(", "\"Training...\"", ")", "\n", "\n", "last_accuracy", "=", "0.0", "\n", "\n", "for", "episode", "in", "range", "(", "args", ".", "start_episode", ",", "EPISODE", ")", ":", "\n", "        ", "feature_encoder_scheduler", ".", "step", "(", "episode", ")", "\n", "relation_network_scheduler", ".", "step", "(", "episode", ")", "\n", "\n", "samples", ",", "sample_labels", ",", "batches", ",", "batch_labels", ",", "chosen_classes", "=", "get_oneshot_batch", "(", ")", "\n", "\n", "\n", "# calculate features", "\n", "sample_features", ",", "_", "=", "feature_encoder", "(", "Variable", "(", "samples", ")", ".", "cuda", "(", "GPU", ")", ")", "\n", "sample_features", "=", "sample_features", ".", "view", "(", "CLASS_NUM", ",", "SAMPLE_NUM_PER_CLASS", ",", "512", ",", "7", ",", "7", ")", "\n", "sample_features", "=", "torch", ".", "sum", "(", "sample_features", ",", "1", ")", ".", "squeeze", "(", "1", ")", "# 1*512*7*7", "\n", "batch_features", ",", "ft_list", "=", "feature_encoder", "(", "Variable", "(", "batches", ")", ".", "cuda", "(", "GPU", ")", ")", "\n", "\n", "# calculate relations", "\n", "sample_features_ext", "=", "sample_features", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "BATCH_NUM_PER_CLASS", "*", "CLASS_NUM", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "batch_features_ext", "=", "batch_features", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "CLASS_NUM", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "batch_features_ext", "=", "torch", ".", "transpose", "(", "batch_features_ext", ",", "0", ",", "1", ")", "\n", "\n", "relation_pairs", "=", "torch", ".", "cat", "(", "(", "sample_features_ext", ",", "batch_features_ext", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "1024", ",", "7", ",", "7", ")", "\n", "output", "=", "relation_network", "(", "relation_pairs", ",", "ft_list", ")", ".", "view", "(", "-", "1", ",", "CLASS_NUM", ",", "224", ",", "224", ")", "\n", "\n", "mse", "=", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", "GPU", ")", "\n", "loss", "=", "mse", "(", "output", ",", "Variable", "(", "batch_labels", ")", ".", "cuda", "(", "GPU", ")", ")", "\n", "\n", "\n", "# training", "\n", "\n", "feature_encoder", ".", "zero_grad", "(", ")", "\n", "relation_network", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "feature_encoder", ".", "parameters", "(", ")", ",", "0.5", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "relation_network", ".", "parameters", "(", ")", ",", "0.5", ")", "\n", "\n", "feature_encoder_optim", ".", "step", "(", ")", "\n", "relation_network_optim", ".", "step", "(", ")", "\n", "\n", "if", "(", "episode", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "\"episode:\"", ",", "episode", "+", "1", ",", "\"loss\"", ",", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "TrainResultPath", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "TrainResultPath", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "ModelSavePath", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "ModelSavePath", ")", "\n", "\n", "# training result visualization", "\n", "", "if", "(", "episode", "+", "1", ")", "%", "args", ".", "ResultSaveFreq", "==", "0", ":", "\n", "            ", "support_output", "=", "np", ".", "zeros", "(", "(", "224", "*", "2", ",", "224", "*", "SAMPLE_NUM_PER_CLASS", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "query_output", "=", "np", ".", "zeros", "(", "(", "224", "*", "3", ",", "224", "*", "DISPLAY_QUERY", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "chosen_query", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "0", ",", "BATCH_NUM_PER_CLASS", ")", ")", ",", "DISPLAY_QUERY", ")", "\n", "\n", "for", "i", "in", "range", "(", "CLASS_NUM", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "SAMPLE_NUM_PER_CLASS", ")", ":", "\n", "                    ", "supp_img", "=", "(", "np", ".", "transpose", "(", "samples", ".", "numpy", "(", ")", "[", "j", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", "3", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "support_output", "[", "0", ":", "224", ",", "j", "*", "224", ":", "(", "j", "+", "1", ")", "*", "224", ",", ":", "]", "=", "supp_img", "\n", "supp_label", "=", "sample_labels", ".", "numpy", "(", ")", "[", "j", "]", "[", "0", "]", "\n", "supp_label", "[", "supp_label", "!=", "0", "]", "=", "chosen_classes", "[", "i", "]", "\n", "supp_label", "=", "decode_segmap", "(", "supp_label", ")", "\n", "support_output", "[", "224", ":", "224", "*", "2", ",", "j", "*", "224", ":", "(", "j", "+", "1", ")", "*", "224", ",", ":", "]", "=", "supp_label", "\n", "\n", "", "for", "cnt", ",", "x", "in", "enumerate", "(", "chosen_query", ")", ":", "\n", "                    ", "query_img", "=", "(", "np", ".", "transpose", "(", "batches", ".", "numpy", "(", ")", "[", "x", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", "3", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "query_output", "[", "0", ":", "224", ",", "cnt", "*", "224", ":", "(", "cnt", "+", "1", ")", "*", "224", ",", ":", "]", "=", "query_img", "\n", "query_label", "=", "batch_labels", ".", "numpy", "(", ")", "[", "x", "]", "[", "0", "]", "#only apply to one-way setting", "\n", "query_label", "[", "query_label", "!=", "0", "]", "=", "chosen_classes", "[", "i", "]", "\n", "query_label", "=", "decode_segmap", "(", "query_label", ")", "\n", "query_output", "[", "224", ":", "224", "*", "2", ",", "cnt", "*", "224", ":", "(", "cnt", "+", "1", ")", "*", "224", ",", ":", "]", "=", "query_label", "\n", "\n", "query_pred", "=", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "x", "]", "[", "0", "]", "\n", "query_pred", "=", "(", "query_pred", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "result", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "result", "[", ":", ",", ":", ",", "0", "]", "=", "query_pred", "\n", "result", "[", ":", ",", ":", ",", "1", "]", "=", "query_pred", "\n", "result", "[", ":", ",", ":", ",", "2", "]", "=", "query_pred", "\n", "query_output", "[", "224", "*", "2", ":", "224", "*", "3", ",", "cnt", "*", "224", ":", "(", "cnt", "+", "1", ")", "*", "224", ",", ":", "]", "=", "result", "\n", "", "", "extra", "=", "query_output", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "CLASS_NUM", ")", ":", "\n", "                ", "for", "cnt", ",", "x", "in", "enumerate", "(", "chosen_query", ")", ":", "\n", "                    ", "extra_label", "=", "batch_labels", ".", "numpy", "(", ")", "[", "x", "]", "[", "0", "]", "\n", "extra_label", "[", "extra_label", "!=", "0", "]", "=", "255", "\n", "result1", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "result1", "[", ":", ",", ":", ",", "0", "]", "=", "extra_label", "\n", "result1", "[", ":", ",", ":", ",", "1", "]", "=", "extra_label", "\n", "result1", "[", ":", ",", ":", ",", "2", "]", "=", "extra_label", "\n", "extra", "[", "224", "*", "2", ":", "224", "*", "3", ",", "cnt", "*", "224", ":", "(", "cnt", "+", "1", ")", "*", "224", ",", ":", "]", "=", "result1", "\n", "", "", "cv2", ".", "imwrite", "(", "'%s/%s_query.png'", "%", "(", "args", ".", "TrainResultPath", ",", "episode", ")", ",", "query_output", ")", "\n", "cv2", ".", "imwrite", "(", "'%s/%s_show.png'", "%", "(", "args", ".", "TrainResultPath", ",", "episode", ")", ",", "extra", ")", "\n", "cv2", ".", "imwrite", "(", "'%s/%s_support.png'", "%", "(", "args", ".", "TrainResultPath", ",", "episode", ")", ",", "support_output", ")", "\n", "\n", "#save models", "\n", "", "if", "(", "episode", "+", "1", ")", "%", "args", ".", "ModelSaveFreq", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "feature_encoder", ".", "state_dict", "(", ")", ",", "str", "(", "\"./%s/feature_encoder_\"", "%", "args", ".", "ModelSavePath", "+", "str", "(", "episode", ")", "+", "'_'", "+", "str", "(", "CLASS_NUM", ")", "+", "\"_way_\"", "+", "str", "(", "SAMPLE_NUM_PER_CLASS", ")", "+", "\"shot.pkl\"", ")", ")", "\n", "torch", ".", "save", "(", "relation_network", ".", "state_dict", "(", ")", ",", "str", "(", "\"./%s/relation_network_\"", "%", "args", ".", "ModelSavePath", "+", "str", "(", "episode", ")", "+", "'_'", "+", "str", "(", "CLASS_NUM", ")", "+", "\"_way_\"", "+", "str", "(", "SAMPLE_NUM_PER_CLASS", ")", "+", "\"shot.pkl\"", ")", ")", "\n", "print", "(", "\"save networks for episode:\"", ",", "episode", ")", "\n", "\n"]]}