{"home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.check_solution_rl.score_rl_solution": [[8, 45], ["pathlib.Path().parent.absolute", "Path().parent.absolute.joinpath", "Path().parent.absolute.joinpath", "open", "json.load", "json.load.keys", "numpy.mean", "numpy.round", "os.path.join", "os.path.join", "env_rl.EnvRL", "instance[].keys", "len", "env_rl.EnvRL.get_collected_rewards", "env_rl.EnvRL.get_incurred_penalties", "env_rl.EnvRL.get_feasibility", "float", "scores.append", "env_rl.EnvRL.reset", "pathlib.Path", "instance[].keys", "env_rl.EnvRL.step", "env_rl.EnvRL.get_sim_name"], "function", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_collected_rewards", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_incurred_penalties", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_feasibility", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.reset", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.step", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_sim_name"], ["def", "score_rl_solution", "(", "submission_filepath", "=", "'example_output_rl.json'", ",", "final_submission", "=", "False", ")", ":", "\n", "    ", "base_path", "=", "Path", "(", "__file__", ")", ".", "parent", ".", "absolute", "(", ")", "\n", "test_data_instance_path", "=", "base_path", ".", "joinpath", "(", "'data/test/instances'", ")", "\n", "test_data_adj_path", "=", "base_path", ".", "joinpath", "(", "'data/test/adjs'", ")", "\n", "\n", "f", "=", "open", "(", "submission_filepath", ")", "\n", "submission", "=", "json", ".", "load", "(", "f", ")", "\n", "final_submission_seed", "=", "19120623", "\n", "scores", "=", "[", "]", "\n", "n_feas_sols", "=", "0", "\n", "for", "instance_name", "in", "submission", ".", "keys", "(", ")", ":", "\n", "        ", "x_path", "=", "os", ".", "path", ".", "join", "(", "test_data_instance_path", ",", "instance_name", "+", "'.csv'", ")", "\n", "adj_path", "=", "os", ".", "path", ".", "join", "(", "test_data_adj_path", ",", "'adj-'", "+", "instance_name", "+", "'.csv'", ")", "\n", "seed", "=", "submission", "[", "instance_name", "]", "[", "'seed'", "]", "\n", "assert", "seed", "==", "final_submission_seed", ",", "f'wrong seed, expected: {final_submission_seed} but found {seed}.'", "\n", "env", "=", "EnvRL", "(", "from_file", "=", "True", ",", "seed", "=", "seed", ",", "x_path", "=", "x_path", ",", "adj_path", "=", "adj_path", ")", "\n", "\n", "instance", "=", "submission", "[", "instance_name", "]", "\n", "if", "final_submission", ":", "\n", "            ", "n_tours", "=", "len", "(", "instance", "[", "'tours'", "]", ".", "keys", "(", ")", ")", "\n", "assert", "n_tours", "==", "100", ",", "f'each instance must have 100 tours, but found {n_tours} in {instance_name}'", "\n", "", "for", "tour_name", "in", "instance", "[", "'tours'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "sol", "=", "instance", "[", "'tours'", "]", "[", "tour_name", "]", "\n", "for", "node", "in", "sol", "[", "1", ":", "]", ":", "\n", "                ", "env", ".", "step", "(", "node", ")", "\n", "", "rewards", "=", "env", ".", "get_collected_rewards", "(", ")", "\n", "pen", "=", "env", ".", "get_incurred_penalties", "(", ")", "\n", "feas", "=", "env", ".", "get_feasibility", "(", ")", "\n", "assert", "tour_name", "==", "env", ".", "get_sim_name", "(", ")", ",", "f'submission {tour_name} in {instance_name} is in the wrong order.'", "\n", "score", "=", "rewards", "+", "pen", "\n", "n_feas_sols", "+=", "float", "(", "feas", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "", "", "avg_score", "=", "np", ".", "mean", "(", "scores", ")", "\n", "\n", "return", "np", ".", "round", "(", "avg_score", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.__init__": [[8, 33], ["env.Env.__init__", "env_rl.EnvRL.reset"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__init__", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.reset"], ["    ", "def", "__init__", "(", "self", ",", "n_nodes", "=", "None", ",", "seed", "=", "None", ",", "from_file", "=", "False", ",", "x_path", "=", "None", ",", "adj_path", "=", "None", ",", "verbose", "=", "False", ",", "\n", "adaptive", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_nodes", ",", "seed", ",", "from_file", ",", "x_path", ",", "adj_path", ")", "\n", "self", ".", "sim_counter", "=", "0", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "\n", "self", ".", "current_node", "=", "None", "\n", "self", ".", "mask", "=", "None", "\n", "self", ".", "tour_time", "=", "None", "\n", "self", ".", "time_t", "=", "None", "\n", "\n", "self", ".", "feas", "=", "None", "\n", "self", ".", "return_to_depot", "=", "None", "\n", "self", ".", "rewards", "=", "None", "\n", "self", ".", "pen", "=", "None", "\n", "self", ".", "tw_high", "=", "None", "\n", "self", ".", "tw_low", "=", "None", "\n", "self", ".", "prizes", "=", "None", "\n", "self", ".", "maxT", "=", "None", "\n", "self", ".", "tour", "=", "None", "\n", "self", ".", "violation_t", "=", "None", "\n", "self", ".", "name", "=", "None", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_seed": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_seed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_sim_name": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_sim_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_instance_name": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_instance_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "instance_name", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.visited": [[43, 45], ["bool"], "methods", ["None"], ["", "def", "visited", "(", "self", ",", "node", ")", ":", "\n", "        ", "return", "bool", "(", "self", ".", "mask", "[", "node", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.check_solution": [[46, 53], ["op_utils.tour_check"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.tour_check"], ["", "def", "check_solution", "(", "self", ",", "sol", ")", ":", "\n", "        ", "if", "self", ".", "adaptive", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "# this is will generate a different randomness than 'step()'", "\n", "            ", "return", "u_o", ".", "tour_check", "(", "sol", ",", "self", ".", "x", ",", "self", ".", "adj", ",", "self", ".", "maxT_pen", ",", "\n", "self", ".", "tw_pen", ",", "self", ".", "n_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_remaining_time": [[54, 56], ["None"], "methods", ["None"], ["", "", "def", "get_remaining_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "maxT", "-", "self", ".", "tour_time", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_collected_rewards": [[57, 59], ["None"], "methods", ["None"], ["", "def", "get_collected_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_incurred_penalties": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_incurred_penalties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pen", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_feasibility": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_feasibility", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "feas", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_current_violation": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_current_violation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "violation_t", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_current_node": [[69, 71], ["None"], "methods", ["None"], ["", "def", "get_current_node", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "current_node", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.is_tour_done": [[72, 74], ["None"], "methods", ["None"], ["", "def", "is_tour_done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "return_to_depot", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.get_current_node_features": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_current_node_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x", "[", "self", ".", "current_node", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL._get_rewards": [[78, 120], ["env_rl.EnvRL.tour.append", "env_rl.EnvRL.visited"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.visited"], ["", "def", "_get_rewards", "(", "self", ",", "node", ")", ":", "\n", "\n", "        ", "self", ".", "pen_t", "=", "0", "\n", "self", ".", "rwd_t", "=", "0", "\n", "self", ".", "violation_t", "=", "0", "\n", "\n", "# only compute stuff if you are not back to depot", "\n", "if", "not", "self", ".", "return_to_depot", ":", "\n", "# make sure a node is not visited twice", "\n", "            ", "assert", "not", "self", ".", "visited", "(", "node", ")", ",", "f'node: {node} already visited in the tour'", "\n", "assert", "node", "!=", "0", ",", "'node: 0 (zero) is not allowed.'", "\n", "\n", "if", "self", ".", "tour_time", ">", "self", ".", "tw_high", "[", "node", "-", "1", "]", ":", "\n", "                ", "self", ".", "feas", "=", "False", "\n", "# penalty added for each missed tw", "\n", "self", ".", "pen", "+=", "self", ".", "tw_pen", "\n", "self", ".", "pen_t", "=", "self", ".", "tw_pen", "\n", "self", ".", "violation_t", "=", "1", "\n", "\n", "", "elif", "self", ".", "tour_time", "<", "self", ".", "tw_low", "[", "node", "-", "1", "]", ":", "\n", "# time added for being too early", "\n", "                ", "self", ".", "tour_time", "+=", "self", ".", "tw_low", "[", "node", "-", "1", "]", "-", "self", ".", "tour_time", "\n", "self", ".", "rewards", "+=", "self", ".", "prizes", "[", "node", "-", "1", "]", "\n", "self", ".", "rwd_t", "=", "self", ".", "prizes", "[", "node", "-", "1", "]", "\n", "", "else", ":", "\n", "# within the time window - nothing to fix", "\n", "                ", "self", ".", "rewards", "+=", "self", ".", "prizes", "[", "node", "-", "1", "]", "\n", "self", ".", "rwd_t", "=", "self", ".", "prizes", "[", "node", "-", "1", "]", "\n", "\n", "", "if", "node", "==", "1", ":", "\n", "                ", "self", ".", "return_to_depot", "=", "True", "\n", "\n", "", "if", "self", ".", "tour_time", ">", "self", ".", "maxT", ":", "\n", "# penalty added for taking longer than maxT", "\n", "                ", "self", ".", "pen", "+=", "self", ".", "maxT_pen", "*", "self", ".", "n_nodes", "\n", "self", ".", "pen_t", "+=", "self", ".", "maxT_pen", "*", "self", ".", "n_nodes", "\n", "self", ".", "feas", "=", "False", "\n", "self", ".", "violation_t", "=", "2", "\n", "\n", "# add the next node to the tour", "\n", "", "self", ".", "tour", ".", "append", "(", "node", ")", "\n", "self", ".", "mask", "[", "node", "-", "1", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.step": [[121, 136], ["numpy.round", "env_rl.EnvRL._get_rewards", "len", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL._get_rewards"], ["", "", "def", "step", "(", "self", ",", "node", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "tour", ")", ">=", "self", ".", "n_nodes", "+", "1", ":", "\n", "            ", "return", "None", "\n", "", "assert", "node", "<=", "self", ".", "n_nodes", ",", "f'node {node} does not exist for instance of size {self.n_nodes}'", "\n", "\n", "previous_tour_time", "=", "self", ".", "tour_time", "\n", "time", "=", "self", ".", "adj", "[", "self", ".", "current_node", "-", "1", ",", "node", "-", "1", "]", "\n", "noise", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "101", ",", "size", "=", "1", ")", "[", "0", "]", "/", "100", "\n", "self", ".", "tour_time", "+=", "np", ".", "round", "(", "noise", "*", "time", ",", "2", ")", "\n", "self", ".", "_get_rewards", "(", "node", ")", "\n", "self", ".", "time_t", "=", "self", ".", "tour_time", "-", "previous_tour_time", "\n", "self", ".", "current_node", "=", "node", "\n", "\n", "return", "self", ".", "tour_time", ",", "self", ".", "time_t", ",", "self", ".", "rwd_t", ",", "self", ".", "pen_t", ",", "self", ".", "feas", ",", "self", ".", "violation_t", ",", "self", ".", "return_to_depot", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env_rl.EnvRL.reset": [[137, 157], ["print"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "current_node", "=", "1", "\n", "self", ".", "mask", "=", "[", "0", "]", "*", "self", ".", "n_nodes", "\n", "self", ".", "tour_time", "=", "0", "\n", "self", ".", "time_t", "=", "0", "\n", "self", ".", "feas", "=", "True", "\n", "self", ".", "return_to_depot", "=", "False", "\n", "self", ".", "rewards", "=", "0", "\n", "self", ".", "pen", "=", "0", "\n", "self", ".", "tw_high", "=", "self", ".", "x", "[", ":", ",", "-", "3", "]", "\n", "self", ".", "tw_low", "=", "self", ".", "x", "[", ":", ",", "-", "4", "]", "\n", "self", ".", "prizes", "=", "self", ".", "x", "[", ":", ",", "-", "2", "]", "\n", "self", ".", "maxT", "=", "self", ".", "x", "[", "0", ",", "-", "1", "]", "\n", "self", ".", "tour", "=", "[", "self", ".", "current_node", "]", "\n", "self", ".", "violation_t", "=", "0", "# 0: none, 1: tw, 2: maxT (takes precedence on tw)", "\n", "self", ".", "sim_counter", "+=", "1", "\n", "self", ".", "name", "=", "f'tour{self.sim_counter:03}'", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'[*] Starting a new simulation: {self.name}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env.Env.__init__": [[11, 28], ["numpy.random.seed", "random.seed", "op_utils.read_instance", "op_utils.read_instance", "len", "op_utils.make_instance", "op_utils.make_instance"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.instance.read_instance", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.instance.read_instance", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.instance.make_instance", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.instance.make_instance"], ["def", "__init__", "(", "self", ",", "n_nodes", "=", "50", ",", "seed", "=", "None", ",", "from_file", "=", "False", ",", "x_path", "=", "None", ",", "adj_path", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "x", "=", "None", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "seed", "=", "seed", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "self", ".", "sim_counter", "=", "0", "\n", "self", ".", "name", "=", "None", "\n", "if", "from_file", ":", "\n", "            ", "self", ".", "x", ",", "self", ".", "adj", ",", "self", ".", "instance_name", "=", "u_i", ".", "read_instance", "(", "x_path", ",", "adj_path", ")", "\n", "self", ".", "n_nodes", "=", "len", "(", "self", ".", "x", ")", "\n", "", "else", ":", "\n", "            ", "assert", "n_nodes", "is", "not", "None", ",", "'if no file is given, n_nodes is required'", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "self", ".", "instance_name", "=", "''", "\n", "self", ".", "x", ",", "self", ".", "adj", "=", "u_i", ".", "make_instance", "(", "self", ".", "n_nodes", ",", "seed", "=", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env.Env.get_features": [[29, 31], ["None"], "methods", ["None"], ["", "", "def", "get_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x", ",", "self", ".", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.None.env.Env.check_solution": [[32, 41], ["op_utils.tour_check", "op_utils.tour_check", "len", "str", "len", "len", "len", "str", "len", "set", "len"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.tour_check", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.tour_check"], ["", "def", "check_solution", "(", "self", ",", "sol", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "sol", ")", "==", "len", "(", "self", ".", "x", ")", "+", "1", ",", "'len(sol) = '", "+", "str", "(", "len", "(", "sol", ")", ")", "+", "', n_nodes+1 = '", "+", "str", "(", "len", "(", "self", ".", "x", ")", "+", "1", ")", "\n", "assert", "len", "(", "sol", ")", "==", "len", "(", "set", "(", "sol", ")", ")", "+", "1", "\n", "self", ".", "sim_counter", "+=", "1", "\n", "self", ".", "name", "=", "f'tour{self.sim_counter:03}'", "\n", "tour_time", ",", "rewards", ",", "pen", ",", "feas", "=", "u_o", ".", "tour_check", "(", "sol", ",", "self", ".", "x", ",", "self", ".", "adj", ",", "self", ".", "maxT_pen", ",", "\n", "self", ".", "tw_pen", ",", "self", ".", "n_nodes", ")", "\n", "return", "tour_time", ",", "rewards", ",", "pen", ",", "feas", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Encoder.__init__": [[13, 19], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "neuralconet.Encoder.init_hidden"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__init__", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Encoder.init_hidden"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "use_cuda", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_dim", ",", "hidden_dim", ")", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "enc_init_state", "=", "self", ".", "init_hidden", "(", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Encoder.forward": [[20, 23], ["neuralconet.Encoder.lstm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "        ", "output", ",", "hidden", "=", "self", ".", "lstm", "(", "x", ",", "hidden", ")", "\n", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Encoder.init_hidden": [[24, 41], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enc_init_hx.cuda.cuda.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enc_init_cx.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "hidden_dim", ")", ":", "\n", "        ", "\"\"\"Trainable initial hidden state\"\"\"", "\n", "enc_init_hx", "=", "Variable", "(", "torch", ".", "zeros", "(", "hidden_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "enc_init_hx", "=", "enc_init_hx", ".", "cuda", "(", ")", "\n", "\n", "# enc_init_hx.data.uniform_(-(1. / math.sqrt(hidden_dim)),", "\n", "#        1. / math.sqrt(hidden_dim))", "\n", "\n", "", "enc_init_cx", "=", "Variable", "(", "torch", ".", "zeros", "(", "hidden_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "enc_init_cx", "=", "enc_init_cx", ".", "cuda", "(", ")", "\n", "\n", "# enc_init_cx = nn.Parameter(enc_init_cx)", "\n", "# enc_init_cx.data.uniform_(-(1. / math.sqrt(hidden_dim)),", "\n", "#        1. / math.sqrt(hidden_dim))", "\n", "", "return", "(", "enc_init_hx", ",", "enc_init_cx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Attention.__init__": [[46, 59], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Tanh", "torch.Tanh", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Parameter", "torch.Parameter", "neuralconet.Attention.v.data.uniform_", "v.cuda.cuda.cuda", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "use_tanh", "=", "False", ",", "C", "=", "10", ",", "use_cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_tanh", "=", "use_tanh", "\n", "self", ".", "project_query", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "project_ref", "=", "nn", ".", "Conv1d", "(", "dim", ",", "dim", ",", "1", ",", "1", ")", "\n", "self", ".", "C", "=", "C", "# tanh exploration", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "v", "=", "torch", ".", "FloatTensor", "(", "dim", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "v", "=", "v", ".", "cuda", "(", ")", "\n", "", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "v", ")", "\n", "self", ".", "v", ".", "data", ".", "uniform_", "(", "-", "(", "1.", "/", "math", ".", "sqrt", "(", "dim", ")", ")", ",", "1.", "/", "math", ".", "sqrt", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Attention.forward": [[60, 85], ["ref.permute.permute.permute", "neuralconet.Attention.project_query().unsqueeze", "neuralconet.Attention.project_ref", "neuralconet.Attention.repeat", "neuralconet.Attention.v.unsqueeze().expand().unsqueeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "neuralconet.Attention.size", "neuralconet.Attention.project_query", "neuralconet.Attention.v.unsqueeze().expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "neuralconet.Attention.tanh", "neuralconet.Attention.repeat.size", "len", "neuralconet.Attention.tanh", "neuralconet.Attention.v.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "ref", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            query: is the hidden state of the decoder at the current\n                time step. batch x dim\n            ref: the set of hidden states from the encoder.\n                sourceL x batch x hidden_dim\n        \"\"\"", "\n", "# ref is now [batch_size x hidden_dim x sourceL]", "\n", "ref", "=", "ref", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "q", "=", "self", ".", "project_query", "(", "query", ")", ".", "unsqueeze", "(", "2", ")", "# batch x dim x 1", "\n", "e", "=", "self", ".", "project_ref", "(", "ref", ")", "# batch_size x hidden_dim x sourceL", "\n", "# expand the query by sourceL", "\n", "# batch x dim x sourceL", "\n", "expanded_q", "=", "q", ".", "repeat", "(", "1", ",", "1", ",", "e", ".", "size", "(", "2", ")", ")", "\n", "# batch x 1 x hidden_dim", "\n", "v_view", "=", "self", ".", "v", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "\n", "expanded_q", ".", "size", "(", "0", ")", ",", "len", "(", "self", ".", "v", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# [batch_size x 1 x hidden_dim] * [batch_size x hidden_dim x sourceL]", "\n", "u", "=", "torch", ".", "bmm", "(", "v_view", ",", "self", ".", "tanh", "(", "expanded_q", "+", "e", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "if", "self", ".", "use_tanh", ":", "\n", "            ", "logits", "=", "self", ".", "C", "*", "self", ".", "tanh", "(", "u", ")", "\n", "", "else", ":", "\n", "            ", "logits", "=", "u", "\n", "", "return", "e", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Decoder.__init__": [[88, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "neuralconet.Attention", "neuralconet.Attention", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "max_length", ",", "\n", "tanh_exploration", ",", "\n", "terminating_symbol", ",", "\n", "use_tanh", ",", "\n", "decode_type", ",", "\n", "n_glimpses", "=", "1", ",", "\n", "use_cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "n_glimpses", "=", "n_glimpses", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "terminating_symbol", "=", "terminating_symbol", "\n", "self", ".", "decode_type", "=", "decode_type", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "self", ".", "input_weights", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "4", "*", "hidden_dim", ")", "\n", "self", ".", "hidden_weights", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "4", "*", "hidden_dim", ")", "\n", "\n", "self", ".", "pointer", "=", "Attention", "(", "hidden_dim", ",", "use_tanh", "=", "use_tanh", ",", "C", "=", "tanh_exploration", ",", "use_cuda", "=", "self", ".", "use_cuda", ")", "\n", "self", ".", "glimpse", "=", "Attention", "(", "hidden_dim", ",", "use_tanh", "=", "False", ",", "use_cuda", "=", "self", ".", "use_cuda", ")", "\n", "self", ".", "sm", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Decoder.apply_mask_to_logits": [[115, 141], ["mask.cuda.cuda.clone", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "mask.cuda.cuda.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask.cuda.clone.bool", "mask.cuda.clone.bool", "logits.size", "range", "logits.size", "range", "range", "logits.size", "logits.size"], "methods", ["None"], ["", "def", "apply_mask_to_logits", "(", "self", ",", "step", ",", "logits", ",", "mask", ",", "prev_idxs", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros", "(", "logits", ".", "size", "(", ")", ")", ".", "byte", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "\n", "", "", "maskk", "=", "mask", ".", "clone", "(", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "            ", "maskk", "[", "[", "x", "for", "x", "in", "range", "(", "logits", ".", "size", "(", "0", ")", ")", "]", ",", "0", "]", "=", "1", "\n", "logits", "[", "maskk", ".", "bool", "(", ")", "]", "=", "-", "np", ".", "inf", "\n", "\n", "", "else", ":", "\n", "\n", "# to prevent them from being reselected.", "\n", "# Or, allow re-selection and penalize in the objective function", "\n", "            ", "if", "prev_idxs", "is", "not", "None", ":", "\n", "                ", "if", "step", "==", "1", ":", "\n", "                    ", "maskk", "[", "[", "x", "for", "x", "in", "range", "(", "logits", ".", "size", "(", "0", ")", ")", "]", ",", "0", "]", "=", "0", "\n", "# set most recently selected idx values to 1", "\n", "", "maskk", "[", "[", "x", "for", "x", "in", "range", "(", "logits", ".", "size", "(", "0", ")", ")", "]", ",", "\n", "prev_idxs", ".", "data", "]", "=", "1", "\n", "\n", "", "logits", "[", "maskk", ".", "bool", "(", ")", "]", "=", "-", "np", ".", "inf", "\n", "\n", "", "return", "logits", ",", "maskk", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Decoder.forward": [[142, 209], ["context.size", "range", "gates.chunk", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "range", "neuralconet.Decoder.pointer", "neuralconet.Decoder.apply_mask_to_logits", "neuralconet.Decoder.sm", "neuralconet.Decoder.forward.recurrence"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Decoder.apply_mask_to_logits"], ["", "def", "forward", "(", "self", ",", "decoder_input", ",", "embedded_inputs", ",", "hidden", ",", "context", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            decoder_input: The initial input to the decoder\n                size is [batch_size x embedding_dim]. Trainable parameter.\n            embedded_inputs: [sourceL x batch_size x embedding_dim]\n            hidden: the prev hidden state, size is [batch_size x hidden_dim].\n                Initially this is set to (enc_h[-1], enc_c[-1])\n            context: encoder outputs, [sourceL x batch_size x hidden_dim]\n        \"\"\"", "\n", "\n", "def", "recurrence", "(", "x", ",", "hidden", ",", "logit_mask", ",", "prev_idxs", ",", "step", ")", ":", "\n", "\n", "            ", "hx", ",", "cx", "=", "hidden", "# batch_size x hidden_dim", "\n", "\n", "gates", "=", "self", ".", "input_weights", "(", "x", ")", "+", "self", ".", "hidden_weights", "(", "hx", ")", "\n", "ingate", ",", "forgetgate", ",", "cellgate", ",", "outgate", "=", "gates", ".", "chunk", "(", "4", ",", "1", ")", "\n", "\n", "ingate", "=", "torch", ".", "sigmoid", "(", "ingate", ")", "\n", "forgetgate", "=", "torch", ".", "sigmoid", "(", "forgetgate", ")", "\n", "cellgate", "=", "torch", ".", "tanh", "(", "cellgate", ")", "\n", "outgate", "=", "torch", ".", "sigmoid", "(", "outgate", ")", "\n", "\n", "cy", "=", "(", "forgetgate", "*", "cx", ")", "+", "(", "ingate", "*", "cellgate", ")", "\n", "hy", "=", "outgate", "*", "torch", ".", "tanh", "(", "cy", ")", "# batch_size x hidden_dim", "\n", "\n", "g_l", "=", "hy", "\n", "for", "i", "in", "range", "(", "self", ".", "n_glimpses", ")", ":", "\n", "                ", "ref", ",", "logits", "=", "self", ".", "glimpse", "(", "g_l", ",", "context", ")", "\n", "logits", ",", "logit_mask", "=", "self", ".", "apply_mask_to_logits", "(", "step", ",", "logits", ",", "logit_mask", ",", "prev_idxs", ")", "\n", "# [batch_size x h_dim x sourceL] * [batch_size x sourceL x 1] =", "\n", "# [batch_size x h_dim x 1]", "\n", "g_l", "=", "torch", ".", "bmm", "(", "ref", ",", "self", ".", "sm", "(", "logits", ")", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "", "_", ",", "logits", "=", "self", ".", "pointer", "(", "g_l", ",", "context", ")", "\n", "\n", "logits", ",", "logit_mask", "=", "self", ".", "apply_mask_to_logits", "(", "step", ",", "logits", ",", "logit_mask", ",", "prev_idxs", ")", "\n", "probs", "=", "self", ".", "sm", "(", "logits", ")", "\n", "return", "hy", ",", "cy", ",", "probs", ",", "logit_mask", "\n", "\n", "", "batch_size", "=", "context", ".", "size", "(", "1", ")", "\n", "outputs", "=", "[", "]", "\n", "selections", "=", "[", "]", "\n", "steps", "=", "range", "(", "self", ".", "max_length", ")", "# or until terminating symbol ?", "\n", "inps", "=", "[", "]", "\n", "idxs", "=", "None", "\n", "mask", "=", "None", "\n", "\n", "for", "i", "in", "steps", ":", "\n", "            ", "hx", ",", "cx", ",", "probs", ",", "mask", "=", "recurrence", "(", "decoder_input", ",", "hidden", ",", "mask", ",", "idxs", ",", "i", ")", "\n", "hidden", "=", "(", "hx", ",", "cx", ")", "\n", "# select the next inputs for the decoder [batch_size x hidden_dim]", "\n", "if", "self", ".", "decode_type", "==", "\"stochastic\"", ":", "\n", "                ", "decoder_input", ",", "idxs", "=", "self", ".", "decode_stochastic", "(", "\n", "probs", ",", "\n", "embedded_inputs", ",", "\n", "selections", ")", "\n", "", "if", "self", ".", "decode_type", "==", "'greedy'", ":", "\n", "                ", "decoder_input", ",", "idxs", "=", "self", ".", "decode_greedy", "(", "\n", "probs", ",", "\n", "embedded_inputs", ",", "\n", "selections", ")", "\n", "\n", "", "inps", ".", "append", "(", "decoder_input", ")", "\n", "# use outs to point to next object", "\n", "outputs", ".", "append", "(", "probs", ")", "\n", "selections", ".", "append", "(", "idxs", ")", "\n", "", "return", "(", "outputs", ",", "selections", ")", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Decoder.decode_stochastic": [[210, 243], ["probs.size", "probs.multinomial().squeeze", "old_idxs.eq().data.any", "probs.multinomial", "print", "probs.multinomial().squeeze", "old_idxs.eq", "probs.multinomial", "range"], "methods", ["None"], ["", "def", "decode_stochastic", "(", "self", ",", "probs", ",", "embedded_inputs", ",", "selections", ")", ":", "\n", "        ", "\"\"\"\n        Return the next input for the decoder by selecting the\n        input corresponding to the max output\n\n        Args:\n            probs: [batch_size x sourceL]\n            embedded_inputs: [sourceL x batch_size x embedding_dim]\n            selections: list of all of the previously selected indices during decoding\n       Returns:\n            Tensor of size [batch_size x sourceL] containing the embeddings\n            from the inputs corresponding to the [batch_size] indices\n            selected for this iteration of the decoding, as well as the\n            corresponding indicies\n        \"\"\"", "\n", "batch_size", "=", "probs", ".", "size", "(", "0", ")", "\n", "# idxs is [batch_size]", "\n", "# idxs = probs.multinomial().squeeze(1)", "\n", "\n", "idxs", "=", "probs", ".", "multinomial", "(", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# due to race conditions, might need to resample here", "\n", "for", "old_idxs", "in", "selections", ":", "\n", "# compare new idxs", "\n", "# elementwise with the previous idxs. If any matches,", "\n", "# then need to resample", "\n", "            ", "if", "old_idxs", ".", "eq", "(", "idxs", ")", ".", "data", ".", "any", "(", ")", ":", "\n", "                ", "print", "(", "' [!] resampling due to race condition'", ")", "\n", "idxs", "=", "probs", ".", "multinomial", "(", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "break", "\n", "\n", "", "", "sels", "=", "embedded_inputs", "[", "idxs", ".", "data", ",", "[", "i", "for", "i", "in", "range", "(", "batch_size", ")", "]", ",", ":", "]", "\n", "return", "sels", ",", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.Decoder.decode_greedy": [[244, 277], ["probs.size", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "old_idxs.eq().data.any", "print", "probs.multinomial().squeeze", "old_idxs.eq", "probs.multinomial", "range"], "methods", ["None"], ["", "def", "decode_greedy", "(", "self", ",", "probs", ",", "embedded_inputs", ",", "selections", ")", ":", "\n", "        ", "\"\"\"\n        Return the next input for the decoder by selecting the\n        input corresponding to the max output\n\n        Args:\n            probs: [batch_size x sourceL]\n            embedded_inputs: [sourceL x batch_size x embedding_dim]\n            selections: list of all of the previously selected indices during decoding\n       Returns:\n            Tensor of size [batch_size x sourceL] containing the embeddings\n            from the inputs corresponding to the [batch_size] indices\n            selected for this iteration of the decoding, as well as the\n            corresponding indicies\n        \"\"\"", "\n", "batch_size", "=", "probs", ".", "size", "(", "0", ")", "\n", "# idxs is [batch_size]", "\n", "# idxs = probs.multinomial().squeeze(1)", "\n", "\n", "idxs", "=", "torch", ".", "argmax", "(", "probs", ",", "1", ")", "\n", "\n", "# due to race conditions, might need to resample here", "\n", "for", "old_idxs", "in", "selections", ":", "\n", "# compare new idxs", "\n", "# elementwise with the previous idxs. If any matches,", "\n", "# then need to resample", "\n", "            ", "if", "old_idxs", ".", "eq", "(", "idxs", ")", ".", "data", ".", "any", "(", ")", ":", "\n", "                ", "print", "(", "' [!] resampling due to race condition'", ")", "\n", "idxs", "=", "probs", ".", "multinomial", "(", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "break", "\n", "\n", "", "", "sels", "=", "embedded_inputs", "[", "idxs", ".", "data", ",", "[", "i", "for", "i", "in", "range", "(", "batch_size", ")", "]", ",", ":", "]", "\n", "return", "sels", ",", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.PointerNetwork.__init__": [[283, 318], ["torch.Module.__init__", "neuralconet.Encoder", "neuralconet.Decoder", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Parameter", "torch.Parameter", "neuralconet.PointerNetwork.decoder_in_0.data.uniform_", "dec_in_0.cuda.cuda.cuda", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "max_decoding_len", ",", "\n", "terminating_symbol", ",", "\n", "n_glimpses", ",", "\n", "tanh_exploration", ",", "\n", "use_tanh", ",", "\n", "use_cuda", ")", ":", "\n", "        ", "super", "(", "PointerNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "use_cuda", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "max_length", "=", "max_decoding_len", ",", "\n", "tanh_exploration", "=", "tanh_exploration", ",", "\n", "use_tanh", "=", "use_tanh", ",", "\n", "terminating_symbol", "=", "terminating_symbol", ",", "\n", "decode_type", "=", "\"stochastic\"", ",", "\n", "n_glimpses", "=", "n_glimpses", ",", "\n", "use_cuda", "=", "use_cuda", ")", "\n", "\n", "# Trainable initial hidden states", "\n", "dec_in_0", "=", "torch", ".", "FloatTensor", "(", "embedding_dim", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "dec_in_0", "=", "dec_in_0", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "decoder_in_0", "=", "nn", ".", "Parameter", "(", "dec_in_0", ")", "\n", "self", ".", "decoder_in_0", ".", "data", ".", "uniform_", "(", "-", "(", "1.", "/", "math", ".", "sqrt", "(", "embedding_dim", ")", ")", ",", "\n", "1.", "/", "math", ".", "sqrt", "(", "embedding_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.PointerNetwork.forward": [[319, 343], ["encoder_hx.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze", "encoder_cx.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze", "neuralconet.PointerNetwork.encoder", "neuralconet.PointerNetwork.decoder_in_0.unsqueeze().repeat", "neuralconet.PointerNetwork.decoder", "inputs.size", "encoder_hx.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze.unsqueeze().repeat", "encoder_cx.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze.unsqueeze().repeat", "neuralconet.PointerNetwork.decoder_in_0.unsqueeze", "inputs.size", "inputs.size", "encoder_hx.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze.unsqueeze", "encoder_cx.unsqueeze().repeat().unsqueeze.unsqueeze().repeat().unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Propagate inputs through the network\n        Args:\n            inputs: [sourceL x batch_size x embedding_dim]\n        \"\"\"", "\n", "\n", "(", "encoder_hx", ",", "encoder_cx", ")", "=", "self", ".", "encoder", ".", "enc_init_state", "\n", "encoder_hx", "=", "encoder_hx", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "inputs", ".", "size", "(", "1", ")", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "encoder_cx", "=", "encoder_cx", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "inputs", ".", "size", "(", "1", ")", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# encoder forward pass", "\n", "enc_h", ",", "(", "enc_h_t", ",", "enc_c_t", ")", "=", "self", ".", "encoder", "(", "inputs", ",", "(", "encoder_hx", ",", "encoder_cx", ")", ")", "\n", "\n", "dec_init_state", "=", "(", "enc_h_t", "[", "-", "1", "]", ",", "enc_c_t", "[", "-", "1", "]", ")", "\n", "\n", "# repeat decoder_in_0 across batch", "\n", "decoder_input", "=", "self", ".", "decoder_in_0", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "inputs", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "\n", "(", "pointer_probs", ",", "input_idxs", ")", ",", "dec_hidden_t", "=", "self", ".", "decoder", "(", "decoder_input", ",", "\n", "inputs", ",", "\n", "dec_init_state", ",", "\n", "enc_h", ")", "\n", "\n", "return", "pointer_probs", ",", "input_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.NeuralCombOptRL.__init__": [[352, 386], ["torch.Module.__init__", "neuralconet.PointerNetwork", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Parameter", "torch.Parameter", "neuralconet.NeuralCombOptRL.embedding.data.uniform_", "embedding_.cuda.cuda.cuda", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "max_decoding_len", ",", "\n", "terminating_symbol", ",", "\n", "n_glimpses", ",", "\n", "n_process_block_iters", ",", "\n", "tanh_exploration", ",", "\n", "use_tanh", ",", "\n", "is_train", ",", "\n", "use_cuda", ")", ":", "\n", "        ", "super", "(", "NeuralCombOptRL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "self", ".", "actor_net", "=", "PointerNetwork", "(", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "max_decoding_len", ",", "\n", "terminating_symbol", ",", "\n", "n_glimpses", ",", "\n", "tanh_exploration", ",", "\n", "use_tanh", ",", "\n", "use_cuda", ")", "\n", "\n", "embedding_", "=", "torch", ".", "FloatTensor", "(", "input_dim", ",", "\n", "embedding_dim", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "embedding_", "=", "embedding_", ".", "cuda", "(", ")", "\n", "", "self", ".", "embedding", "=", "nn", ".", "Parameter", "(", "embedding_", ")", "\n", "self", ".", "embedding", ".", "data", ".", "uniform_", "(", "-", "(", "1.", "/", "math", ".", "sqrt", "(", "embedding_dim", ")", ")", ",", "\n", "1.", "/", "math", ".", "sqrt", "(", "embedding_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.neuralconet.NeuralCombOptRL.forward": [[387, 444], ["inputs.size", "inputs.size", "inputs.size", "neuralconet.NeuralCombOptRL.embedding.repeat", "inputs.unsqueeze", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "neuralconet.NeuralCombOptRL.actor_net", "inputs.transpose", "torch.cat().view.append", "torch.cat().view.append", "neuralconet.NeuralCombOptRL.size", "actions.append", "zip", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "probs.append", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "ips[].float", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: [batch_size, input_dim, sourceL]\n        \"\"\"", "\n", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "input_dim", "=", "inputs", ".", "size", "(", "1", ")", "\n", "sourceL", "=", "inputs", ".", "size", "(", "2", ")", "\n", "\n", "# repeat embeddings across batch_size", "\n", "# result is [batch_size x input_dim x embedding_dim]", "\n", "embedding", "=", "self", ".", "embedding", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "embedded_inputs", "=", "[", "]", "\n", "# result is [batch_size, 1, input_dim, sourceL]", "\n", "ips", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "sourceL", ")", ":", "\n", "# [batch_size x 1 x input_dim] * [batch_size x input_dim x embedding_dim]", "\n", "# result is [batch_size, embedding_dim]", "\n", "            ", "embedded_inputs", ".", "append", "(", "torch", ".", "bmm", "(", "\n", "ips", "[", ":", ",", ":", ",", ":", ",", "i", "]", ".", "float", "(", ")", ",", "\n", "embedding", ")", ".", "squeeze", "(", "1", ")", ")", "\n", "\n", "# Result is [sourceL x batch_size x embedding_dim]", "\n", "", "embedded_inputs", "=", "torch", ".", "cat", "(", "embedded_inputs", ")", ".", "view", "(", "\n", "sourceL", ",", "\n", "batch_size", ",", "\n", "embedding", ".", "size", "(", "2", ")", ")", "\n", "\n", "# query the actor net for the input indices", "\n", "# making up the output, and the pointer attn", "\n", "probs_", ",", "action_idxs", "=", "self", ".", "actor_net", "(", "embedded_inputs", ")", "\n", "\n", "# Select the actions (inputs pointed to", "\n", "# by the pointer net) and the corresponding", "\n", "# logits", "\n", "# should be size [batch_size x", "\n", "actions", "=", "[", "]", "\n", "# inputs is [batch_size, input_dim, sourceL]", "\n", "inputs_", "=", "inputs", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# inputs_ is [batch_size, sourceL, input_dim]", "\n", "for", "action_id", "in", "action_idxs", ":", "\n", "            ", "actions", ".", "append", "(", "inputs_", "[", "[", "x", "for", "x", "in", "range", "(", "batch_size", ")", "]", ",", "action_id", ".", "data", ",", ":", "]", ")", "\n", "\n", "", "if", "self", ".", "is_train", ":", "\n", "# probs_ is a list of len sourceL of [batch_size x sourceL]", "\n", "            ", "probs", "=", "[", "]", "\n", "for", "prob", ",", "action_id", "in", "zip", "(", "probs_", ",", "action_idxs", ")", ":", "\n", "                ", "probs", ".", "append", "(", "prob", "[", "[", "x", "for", "x", "in", "range", "(", "batch_size", ")", "]", ",", "action_id", ".", "data", "]", ")", "\n", "", "", "else", ":", "\n", "# return the list of len sourceL of [batch_size x sourceL]", "\n", "            ", "probs", "=", "probs_", "\n", "\n", "", "_", "=", "None", "\n", "\n", "# return _, v, probs, actions, action_idxs", "\n", "return", "_", ",", "probs", ",", "actions", ",", "action_idxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.__init__": [[10, 44], ["print", "print", "os.listdir", "print", "range", "os.path.isfile", "batch_env_rl.BatchEnvRL.envs.append", "os.path.join", "os.path.isfile", "env_rl.EnvRL", "batch_env_rl.BatchEnvRL.envs.append", "env_rl.EnvRL", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_envs", ",", "n_nodes", "=", "50", ",", "seed", "=", "None", ",", "\n", "from_file", "=", "False", ",", "x_dir", "=", "None", ",", "adj_dir", "=", "None", ",", "verbose", "=", "False", ",", "adaptive", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "adaptive", "=", "adaptive", "\n", "self", ".", "envs", "=", "[", "]", "\n", "if", "from_file", ":", "\n", "            ", "print", "(", "f'Reading instance features from {x_dir}...'", ")", "\n", "print", "(", "f'Reading instance time matrix from {adj_dir}...'", ")", "\n", "\n", "count", "=", "0", "\n", "n_nodes", "=", "0", "\n", "for", "path_", "in", "os", ".", "listdir", "(", "x_dir", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "x_dir", ",", "path_", ")", ")", ":", "\n", "                    ", "assert", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "adj_dir", ",", "'adj-'", "+", "path_", ")", ")", "\n", "count", "+=", "1", "\n", "env", "=", "EnvRL", "(", "from_file", "=", "from_file", ",", "x_path", "=", "os", ".", "path", ".", "join", "(", "x_dir", ",", "path_", ")", ",", "\n", "adj_path", "=", "os", ".", "path", ".", "join", "(", "adj_dir", ",", "'adj-'", "+", "path_", ")", ",", "adaptive", "=", "adaptive", ")", "\n", "self", ".", "envs", ".", "append", "(", "env", ")", "\n", "if", "env", ".", "n_nodes", ">", "n_nodes", ":", "\n", "                        ", "n_nodes", "=", "env", ".", "n_nodes", "\n", "", "if", "count", ">=", "n_envs", ":", "\n", "                        ", "break", "\n", "\n", "\n", "", "", "", "self", ".", "n_envs", "=", "count", "\n", "#n_nodes will be the maximum number of nodes in the files", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "print", "(", "f'read {self.n_envs} files, with a max number of nodes: {self.n_nodes}'", ")", "\n", "", "else", ":", "\n", "# print('Generating instances on the fly...')", "\n", "            ", "for", "i", "in", "range", "(", "n_envs", ")", ":", "\n", "                ", "self", ".", "envs", ".", "append", "(", "EnvRL", "(", "n_nodes", "=", "n_nodes", ",", "seed", "=", "seed", ",", "verbose", "=", "verbose", ",", "adaptive", "=", "adaptive", ")", ")", "\n", "", "self", ".", "n_envs", "=", "n_envs", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "# print(f'Created {self.n_envs} environments.')", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.reset": [[46, 49], ["env.reset"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.get_features": [[50, 61], ["numpy.zeros", "numpy.concatenate", "len", "numpy.zeros", "numpy.concatenate", "batch_env_rl.BatchEnvRL._normalize_features"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL._normalize_features"], ["", "", "def", "get_features", "(", "self", ")", ":", "\n", "        ", "x", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "self", ".", "n_nodes", ",", "3", ")", ")", "\n", "idx", "=", "0", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "x_", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_normalize_features", "(", "env", ".", "x", "[", ":", ",", "1", ":", "3", "]", ")", ",", "env", ".", "x", "[", ":", ",", "-", "2", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "n_", "=", "len", "(", "x_", ")", "\n", "z_", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_nodes", "-", "n_", ",", "3", ")", ")", "\n", "x_", "=", "np", ".", "concatenate", "(", "(", "x_", ",", "z_", ")", ",", "axis", "=", "0", ")", "\n", "x", "[", "idx", "]", "=", "x_", "\n", "idx", "+=", "1", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL._normalize_features": [[62, 68], ["numpy.max", "numpy.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_normalize_features", "(", "x", ")", ":", "\n", "        ", "max_x", "=", "np", ".", "max", "(", "x", ",", "axis", "=", "0", ")", "\n", "min_x", "=", "np", ".", "min", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n", "return", "(", "x", "-", "min_x", ")", "/", "(", "max_x", "-", "min_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.step": [[69, 83], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.zeros", "env.step"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.step"], ["", "def", "step", "(", "self", ",", "next_nodes", ")", ":", "\n", "        ", "tour_time", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "1", ")", ")", "\n", "time_t", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "1", ")", ")", "\n", "rwd_t", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "1", ")", ")", "\n", "pen_t", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "1", ")", ")", "\n", "feas", "=", "np", ".", "ones", "(", "(", "self", ".", "n_envs", ",", "1", ")", ",", "dtype", "=", "bool", ")", "\n", "violation_t", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "1", ")", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "tour_time", "[", "idx", "]", ",", "time_t", "[", "idx", "]", ",", "rwd_t", "[", "idx", "]", ",", "pen_t", "[", "idx", "]", ",", "feas", "[", "idx", "]", ",", "violation_t", "[", "idx", "]", ",", "_", "=", "env", ".", "step", "(", "\n", "next_nodes", "[", "idx", "]", "[", "0", "]", ")", "\n", "idx", "+=", "1", "\n", "", "return", "tour_time", ",", "time_t", ",", "rwd_t", ",", "pen_t", ",", "feas", ",", "violation_t", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.check_solution": [[84, 96], ["sols.cpu().detach().numpy.cpu().detach().numpy.cpu().detach().numpy", "numpy.zeros", "numpy.zeros", "sols.cpu().detach().numpy.cpu().detach().numpy.cpu().detach", "env.check_solution", "sols.cpu().detach().numpy.cpu().detach().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.check_solution"], ["", "def", "check_solution", "(", "self", ",", "sols", ")", ":", "\n", "        ", "sols", "=", "sols", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "self", ".", "adaptive", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "rwds", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "1", ")", ")", "\n", "pens", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_envs", ",", "1", ")", ")", "\n", "idx", "=", "0", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "                ", "_", ",", "rwds", "[", "idx", "]", ",", "pens", "[", "idx", "]", ",", "_", "=", "env", ".", "check_solution", "(", "sols", "[", "idx", "]", ")", "\n", "idx", "+=", "1", "\n", "", "return", "rwds", ",", "pens", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.__init__": [[19, 39], ["numpy.random.seed", "random.seed", "os.path.join", "generator.op.timewindows.TWGenerator", "generator.op.prizes.PrizeGenerator"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_instances", ",", "n_nodes", ",", "w", "=", "(", "20", ",", "40", ",", "60", ",", "80", ",", "100", ")", ",", "ylim", "=", "(", "0", ",", "50", ")", ",", "xlim", "=", "(", "0", ",", "200", ")", ",", "prize", "=", "'distance'", ",", "\n", "seed", "=", "None", ",", "data_dir", "=", "'data/test'", ",", "offset", "=", "0", ")", ":", "\n", "# seed the generation process", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "self", ".", "n_instances", "=", "n_instances", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "xlim", "=", "xlim", "\n", "self", ".", "ylim", "=", "ylim", "\n", "self", ".", "prize", "=", "prize", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "data_dir", "=", "path", ".", "join", "(", "self", ".", "base_dir", ",", "data_dir", ")", "\n", "\n", "assert", "prize", "in", "(", "'distance'", ",", "'constant'", ",", "'uniform'", ")", ",", "'prize has to be: distance, constant or uniform'", "\n", "\n", "self", ".", "tw_gen", "=", "TWGenerator", "(", ")", "\n", "self", ".", "op_gen", "=", "PrizeGenerator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.generate_coord": [[40, 47], ["numpy.zeros", "numpy.random.randint().astype", "numpy.random.randint().astype", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "generate_coord", "(", "self", ")", ":", "\n", "\n", "        ", "coord", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_nodes", ",", "2", ")", ")", "\n", "coord", "[", ":", ",", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "xlim", "[", "0", "]", ",", "high", "=", "self", ".", "xlim", "[", "1", "]", ",", "size", "=", "self", ".", "n_nodes", ")", ".", "astype", "(", "float", ")", "\n", "coord", "[", ":", ",", "1", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "self", ".", "ylim", "[", "0", "]", ",", "high", "=", "self", ".", "ylim", "[", "1", "]", ",", "size", "=", "self", ".", "n_nodes", ")", ".", "astype", "(", "float", ")", "\n", "\n", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.generate_instance_files": [[48, 68], ["numpy.arange", "numpy.zeros", "range", "instances.InstanceGenerator.generate_coord", "pandas.DataFrame", "inst_df.set_index.set_index.set_index", "instances.InstanceGenerator.tw_gen", "instances.InstanceGenerator.op_gen", "instances.InstanceGenerator.save_optw", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.generate_coord", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.save_optw"], ["", "def", "generate_instance_files", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "1", ",", "self", ".", "n_nodes", "+", "1", ")", "\n", "blanks", "=", "np", ".", "zeros", "(", "self", ".", "n_nodes", ")", "\n", "inst_optw", ",", "adj", "=", "None", ",", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "n_instances", ")", ":", "\n", "            ", "coord", "=", "self", ".", "generate_coord", "(", ")", "\n", "data", "=", "{", "'CUSTNO'", ":", "indices", ",", "'XCOORD'", ":", "coord", "[", ":", ",", "0", "]", ",", "'YCOORD'", ":", "coord", "[", ":", ",", "1", "]", ",", "'DEMAND'", ":", "blanks", ",", "\n", "'READY TIME'", ":", "blanks", ",", "'DUE DATE'", ":", "blanks", ",", "'SERVICE TIME'", ":", "blanks", "}", "\n", "\n", "inst_df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "inst_df", "=", "inst_df", ".", "set_index", "(", "'CUSTNO'", ")", "\n", "# get the time windows", "\n", "inst_tw", ",", "adj", "=", "self", ".", "tw_gen", "(", "inst_df", ",", "w", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "w", ")", ")", "\n", "# get the prizes and maximum length", "\n", "inst_optw", "=", "self", ".", "op_gen", "(", "inst_tw", ",", "adj", ",", "self", ".", "prize", ")", "\n", "if", "save", ":", "\n", "                ", "self", ".", "save_optw", "(", "i", ",", "inst_optw", ",", "adj", ")", "\n", "\n", "", "", "return", "inst_optw", ",", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.make_dir": [[69, 77], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "make_dir", "(", "self", ",", "name", ")", ":", "\n", "\n", "        ", "path_", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path_", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_", ")", "\n", "", "return", "path_", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.save_optw": [[78, 84], ["instances.InstanceGenerator.make_dir", "instances.InstanceGenerator.make_dir", "inst.to_csv", "adj.to_csv", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.make_dir", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.make_dir"], ["", "def", "save_optw", "(", "self", ",", "i", ",", "inst", ",", "adj", ",", "x_dir", "=", "'instances'", ",", "adj_dir", "=", "'adjs'", ")", ":", "\n", "        ", "path_x", "=", "self", ".", "make_dir", "(", "x_dir", ")", "\n", "path_adj", "=", "self", ".", "make_dir", "(", "adj_dir", ")", "\n", "\n", "inst", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path_x", ",", "f'instance{self.offset + i + 1:04}.csv'", ")", ",", "index", "=", "False", ",", "sep", "=", "','", ")", "\n", "adj", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path_adj", ",", "f'adj-instance{self.offset + i + 1:04}.csv'", ")", ",", "index", "=", "False", ",", "sep", "=", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.prizes.PrizeGenerator.__call__": [[11, 70], ["len", "op_utils.nn_algo", "op_utils.nn_algo", "numpy.max", "op_utils.tsp_tour_cost", "op_utils.tsp_tour_cost", "max", "numpy.random.randint", "numpy.repeat", "numpy.arange", "pandas.Series", "pandas.Series", "len", "len", "math.ceil", "numpy.ones", "set", "numpy.random.randint", "numpy.zeros", "range", "math.floor"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.heuristics.nn_algo", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.heuristics.nn_algo", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.tsp_tour_cost", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.tsp_tour_cost"], ["    ", "def", "__call__", "(", "self", ",", "ins_tw", ",", "D", ",", "prize", "=", "'distance'", ",", "depot", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        receives a dataframe with 4 columns and n rows where n is the number of nodes.\n        the columns are [ 'XCOORD.', 'YCOORD.', 'TW_LOW', 'TW_HIGH'] showing the x and y coordinates\n        and left and right bound of time window.\n        this function adds a new columns named PRIZE that contains the prize for each node.\n        the type of the prize is an input and it could be constant, uniform or distance\n        \"\"\"", "\n", "\n", "# it is missing the maximum length of the op tour, otherwise the problem is just a max prize", "\n", "# This parameter can be computed from half the optimal uncostrained tsp tour - need to call concorde here", "\n", "\n", "n_nodes", "=", "len", "(", "ins_tw", ".", "index", ")", "\n", "\n", "# create a nearest neighbour tour", "\n", "nn_tour", "=", "h", ".", "nn_algo", "(", "depot", ",", "D", ",", "n_nodes", ")", "\n", "\n", "# sanity check", "\n", "assert", "len", "(", "set", "(", "nn_tour", ")", ")", "==", "n_nodes", "\n", "assert", "len", "(", "nn_tour", ")", "==", "n_nodes", "+", "1", "\n", "\n", "# max distance to the depot", "\n", "d_max", "=", "np", ".", "max", "(", "D", ".", "loc", "[", "1", ",", ":", "]", ")", "\n", "\n", "# minT is d_max*2 because we have to guarantee we can go back and forth from the largest possible distance", "\n", "minT", "=", "d_max", "*", "2", "\n", "\n", "# maxT needs to be larger than minT but not too large otherwise the problem is too easy", "\n", "maxT", "=", "u", ".", "tsp_tour_cost", "(", "nn_tour", ",", "D", ")", "\n", "# since a nn tour is unlikely to be tsp optimal we discount the cost by 0.5", "\n", "# this should not be too hard as the travel times are max travel times", "\n", "maxT", "=", "max", "(", "minT", "*", "2", ",", "math", ".", "ceil", "(", "maxT", "*", "0.5", ")", ")", "\n", "\n", "# finally selecting T to be between minT and maxT - we can be conservative and generate only on maxT", "\n", "T", "=", "np", ".", "random", ".", "randint", "(", "minT", ",", "maxT", ")", "\n", "# T = maxT", "\n", "\n", "T_", "=", "np", ".", "repeat", "(", "T", ",", "n_nodes", ")", "\n", "\n", "# generating prizes", "\n", "if", "prize", "==", "'constant'", ":", "\n", "            ", "p", "=", "np", ".", "ones", "(", "n_nodes", ")", "\n", "p", "[", "0", "]", "=", "0", "\n", "", "elif", "prize", "==", "'uniform'", ":", "\n", "            ", "p", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "101", ",", "n_nodes", ")", "\n", "p", "=", "p", "/", "100", "\n", "p", "[", "0", "]", "=", "0", "\n", "", "elif", "prize", "==", "'distance'", ":", "\n", "            ", "p", "=", "np", ".", "zeros", "(", "n_nodes", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "n_nodes", ")", ":", "\n", "                ", "p", "[", "j", "]", "=", "1", "+", "math", ".", "floor", "(", "99", "*", "D", ".", "loc", "[", "1", ",", "j", "+", "1", "]", "/", "d_max", ")", "\n", "", "p", "=", "p", "/", "100", "\n", "\n", "", "indices", "=", "np", ".", "arange", "(", "1", ",", "n_nodes", "+", "1", ")", "\n", "ins_twop", "=", "ins_tw", "\n", "ins_twop", "[", "'PRIZE'", "]", "=", "pd", ".", "Series", "(", "p", ",", "index", "=", "indices", ")", "\n", "ins_twop", "[", "'MAXTIME'", "]", "=", "pd", ".", "Series", "(", "T_", ",", "index", "=", "indices", ")", "\n", "\n", "return", "ins_twop", "\n", "", "", ""]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.__call__": [[13, 23], ["timewindows.TWGenerator.get_adjacency_matrix", "timewindows.TWGenerator.get_second_nearest_neighbor_tsp_tour", "timewindows.TWGenerator.tw_generator1", "print"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.get_adjacency_matrix", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.get_second_nearest_neighbor_tsp_tour", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.tw_generator1"], ["", "def", "__call__", "(", "self", ",", "inst_df", ",", "w", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "cities_coordinate", "=", "inst_df", "\n", "self", ".", "adjacency_matrix", "=", "self", ".", "get_adjacency_matrix", "(", ")", "\n", "if", "w", "is", "None", ":", "\n", "            ", "print", "(", "'no time window parameter w was given! Generating instances without time windows'", ")", "\n", "return", "self", ".", "cities_coordinate", "[", "[", "'XCOORD.'", ",", "'YCOORD.'", ",", "'TW_LOW'", ",", "'TW_HIGH'", "]", "]", ",", "self", ".", "adjacency_matrix", "\n", "\n", "", "self", ".", "second_nearest_neighbor", "=", "self", ".", "get_second_nearest_neighbor_tsp_tour", "(", ")", "\n", "return", "self", ".", "tw_generator1", "(", "w", "=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.tw_generator1": [[24, 59], ["pandas.DataFrame", "math.ceil", "pandas.DataFrame.insert", "timewindows.TWGenerator.second_nearest_neighbor[].max", "numpy.random.randint", "numpy.random.randint", "max", "max"], "methods", ["None"], ["", "def", "tw_generator1", "(", "self", ",", "w", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        This functin is based on the following work.\n\n        Y. Dumas, J. Desrosiers, E. Gelinas, and M. M. Solomon. An optimal algorithm for the traveling salesman problem with time windows. Operations Research, 43(2):367-371, 1995.\n\n        The time windows are generated around the times to begin service at each customer of a second nearest neighbor TSP tour. Each side of a time\n        is generated as a uniform random variable in the interval [0,w/2] where w = 20, 40, 60, 80 and 100.\n\n        :return this functions returns a dataframe with n rows and 4 columns. the columns are xcoordinate, ycoordinate, time-window-left and the\n        time-windows-right\n        \"\"\"", "\n", "\n", "time_windows", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'XCOORD'", ",", "'YCOORD'", ",", "'TW_LOW'", ",", "'TW_HIGH'", "]", ")", "\n", "# print('cities coord', self.cities_coordinate)", "\n", "# time_windows['CUSTNO.'] = self.cities_coordinate.index.values", "\n", "\n", "time_windows", "[", "'XCOORD'", "]", "=", "self", ".", "cities_coordinate", "[", "'XCOORD'", "]", "\n", "time_windows", "[", "'YCOORD'", "]", "=", "self", ".", "cities_coordinate", "[", "'YCOORD'", "]", "\n", "time_windows", ".", "loc", "[", "1", ",", "'TW_LOW'", "]", "=", "0", "\n", "time_windows", ".", "loc", "[", "1", ",", "'TW_HIGH'", "]", "=", "math", ".", "ceil", "(", "self", ".", "second_nearest_neighbor", "[", "'distance_so_far'", "]", ".", "max", "(", ")", "+", "w", ")", "\n", "for", "i", "in", "self", ".", "second_nearest_neighbor", ".", "index", ":", "\n", "            ", "target_city", "=", "self", ".", "second_nearest_neighbor", ".", "loc", "[", "i", ",", "'node'", "]", "\n", "if", "target_city", ">", "1", ":", "\n", "                ", "time_windows", ".", "loc", "[", "target_city", ",", "'TW_LOW'", "]", "=", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "max", "(", "0", ",", "self", ".", "second_nearest_neighbor", ".", "loc", "[", "i", ",", "'distance_so_far'", "]", "-", "(", "w", ")", ")", ",", "\n", "high", "=", "self", ".", "second_nearest_neighbor", ".", "loc", "[", "i", ",", "'distance_so_far'", "]", ")", "\n", "time_windows", ".", "loc", "[", "target_city", ",", "'TW_HIGH'", "]", "=", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "max", "(", "0", ",", "self", ".", "second_nearest_neighbor", ".", "loc", "[", "i", ",", "'distance_so_far'", "]", ")", ",", "\n", "high", "=", "self", ".", "second_nearest_neighbor", ".", "loc", "[", "i", ",", "'distance_so_far'", "]", "+", "(", "w", ")", ")", "\n", "\n", "", "", "time_windows", ".", "insert", "(", "0", ",", "'CUSTNO'", ",", "self", ".", "cities_coordinate", ".", "index", ".", "values", ")", "\n", "\n", "# print(time_windows)", "\n", "return", "time_windows", ",", "self", ".", "adjacency_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.get_second_nearest_neighbor_tsp_tour": [[60, 91], ["pandas.DataFrame", "pandas.Series", "timewindows.TWGenerator.adjacency_matrix.copy", "pandas.Series", "len", "pandas.Series", "dists.sort_values.sort_values.sort_values", "len", "pandas.Series", "timewindows.TWGenerator.drop", "timewindows.TWGenerator.drop", "numpy.arange", "timewindows.TWGenerator.loc[].copy", "len"], "methods", ["None"], ["", "def", "get_second_nearest_neighbor_tsp_tour", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function use the set of points in self.cities_coordination and calculate the distance matrix in the format of pandas.DataFrame\n        :return: a DataFrame where the number of rows is equal to the number of cities/nodes and its columns are ['node', 'distance_so_far']. Node is\n        the index of the city and distance_so_far is length of passed path.\n        \"\"\"", "\n", "tour", "=", "pd", ".", "DataFrame", "(", "index", "=", "np", ".", "arange", "(", "1", ",", "len", "(", "self", ".", "cities_coordinate", ".", "index", ")", ")", ",", "columns", "=", "[", "'node'", ",", "'distance_so_far'", "]", ")", "\n", "current_node", "=", "1", "\n", "tour", ".", "loc", "[", "1", ",", ":", "]", "=", "pd", ".", "Series", "(", "{", "'node'", ":", "1", ",", "'distance_so_far'", ":", "0", "}", ")", "\n", "distance_matrix", "=", "self", ".", "adjacency_matrix", ".", "copy", "(", ")", "\n", "i", "=", "2", "\n", "tour_length", "=", "0", "\n", "while", "len", "(", "distance_matrix", ".", "index", ")", ">", "1", ":", "\n", "            ", "dists", "=", "pd", ".", "Series", "(", "distance_matrix", ".", "loc", "[", ":", ",", "current_node", "]", ".", "copy", "(", ")", ")", "\n", "dists", "=", "dists", ".", "sort_values", "(", "ascending", "=", "True", ")", "\n", "remaining_nodes", "=", "len", "(", "dists", ".", "index", ")", "\n", "if", "remaining_nodes", ">", "2", ":", "\n", "                ", "selected_node", "=", "dists", ".", "index", "[", "2", "]", "\n", "", "elif", "remaining_nodes", ">", "1", ":", "\n", "                ", "selected_node", "=", "dists", ".", "index", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "selected_node", "=", "0", "\n", "", "tour_length", "+=", "distance_matrix", ".", "loc", "[", "selected_node", ",", "current_node", "]", "\n", "tour", ".", "loc", "[", "i", ",", ":", "]", "=", "pd", ".", "Series", "(", "{", "'node'", ":", "selected_node", ",", "'distance_so_far'", ":", "tour_length", "}", ")", "\n", "distance_matrix", ".", "drop", "(", "current_node", ",", "axis", "=", "0", ",", "inplace", "=", "True", ")", "\n", "distance_matrix", ".", "drop", "(", "current_node", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "i", "+=", "1", "\n", "current_node", "=", "selected_node", "\n", "", "tour", ".", "loc", "[", "i", ",", ":", "]", "=", "pd", ".", "Series", "(", "\n", "{", "'node'", ":", "1", ",", "'distance_so_far'", ":", "tour_length", "+", "self", ".", "adjacency_matrix", ".", "loc", "[", "current_node", ",", "1", "]", "}", ")", "\n", "return", "tour", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.timewindows.TWGenerator.get_adjacency_matrix": [[92, 103], ["pandas.DataFrame", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "len", "op_utils.op.dist_l2_closest_integer", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.dist_l2_closest_integer"], ["", "def", "get_adjacency_matrix", "(", "self", ")", ":", "\n", "        ", "adjacency_matrix", "=", "pd", ".", "DataFrame", "(", "index", "=", "np", ".", "arange", "(", "1", ",", "len", "(", "self", ".", "cities_coordinate", ".", "index", ")", "+", "1", ")", ",", "\n", "columns", "=", "np", ".", "arange", "(", "1", ",", "len", "(", "self", ".", "cities_coordinate", ".", "index", ")", "+", "1", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "len", "(", "self", ".", "cities_coordinate", ")", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "np", ".", "arange", "(", "1", ",", "len", "(", "self", ".", "cities_coordinate", ")", "+", "1", ")", ":", "\n", "                ", "x1", "=", "(", "self", ".", "cities_coordinate", ".", "loc", "[", "i", ",", "'XCOORD'", "]", ",", "self", ".", "cities_coordinate", ".", "loc", "[", "i", ",", "'YCOORD'", "]", ")", "\n", "x2", "=", "(", "self", ".", "cities_coordinate", ".", "loc", "[", "j", ",", "'XCOORD'", "]", ",", "self", ".", "cities_coordinate", ".", "loc", "[", "j", ",", "'YCOORD'", "]", ")", "\n", "\n", "adjacency_matrix", ".", "loc", "[", "i", ",", "j", "]", "=", "op", ".", "dist_l2_closest_integer", "(", "x1", ",", "x2", ")", "\n", "# print(adjacency_matrix)", "\n", "", "", "return", "adjacency_matrix", "\n", "", "", ""]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_surrogate.demo_surrogate.objective": [[14, 51], ["print", "env.check_solution", "range", "env.check_solution"], "function", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.check_solution", "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_rl.batch_env_rl.BatchEnvRL.check_solution"], ["", "def", "objective", "(", "x", ",", "env", ")", ":", "\n", "    ", "'''\n\n\n    Parameters\n    ----------\n    x : array\n        Vector of the form [1, x1, x2, ..., x_n].\n        The integers from 1 to n have to appear\n        in the part [x1,..., x_n], so the number\n        1 appears twice in total.\n    env : environment\n        Environment of the TSP-like problem.\n\n    Returns\n    -------\n    obj : float\n        Objective to be maximized.\n\n    '''", "\n", "\n", "print", "(", "'x'", ",", "x", ")", "\n", "obj_cost", ",", "rewards", ",", "pen", ",", "feas", "=", "env", ".", "check_solution", "(", "x", ")", "\n", "\n", "MonteCarlo", "=", "10000", "# Number of Monte Carlo samples. Higher number means less noise.", "\n", "obj", "=", "0", "# Objective averaged over Monte Carlo samples, to be maximized with surrogate optimization", "\n", "for", "_", "in", "range", "(", "MonteCarlo", ")", ":", "\n", "        ", "obj_cost", ",", "rewards", ",", "pen", ",", "feas", "=", "env", ".", "check_solution", "(", "x", ")", "\n", "# print('Time: ', obj_cost)", "\n", "# print('Rewards: ', rewards)", "\n", "# print('Penalty: ', pen)", "\n", "# print('Feasible: ', feas)", "\n", "# print('Objective: ', rewards+pen)", "\n", "obj", "=", "obj", "+", "(", "rewards", "+", "pen", ")", "# Maximize the rewards + penalties (penalties are negative)", "\n", "", "obj", "/=", "MonteCarlo", "\n", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_surrogate.demo_surrogate.check_surrogate_solution": [[53, 76], ["env.Env", "demo_surrogate.objective", "print"], "function", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.baseline_surrogate.demo_surrogate.objective"], ["", "def", "check_surrogate_solution", "(", "x", ")", ":", "\n", "    ", "'''\n\n\n    Parameters\n    ----------\n    x : array\n        Vector of the form [1, x1, x2, ..., x_n].\n        The integers from 1 to n have to appear\n        in the part [x1,..., x_n], so the number\n        1 appears twice in total.\n\n    Returns\n    -------\n    obj : float\n        Corresponding objective.\n\n    '''", "\n", "n_nodes", "=", "65", "\n", "env", "=", "Env", "(", "n_nodes", ",", "seed", "=", "6537855", ")", "# Generate instance with n_nodes nodes", "\n", "obj", "=", "objective", "(", "x", ",", "env", ")", "\n", "print", "(", "'Solution quality (higher is better): '", ",", "obj", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.dist_l2_closest_integer": [[5, 14], ["int", "math.sqrt"], "function", ["None"], ["def", "dist_l2_closest_integer", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"Compute the L2-norm (Euclidean) distance between two points.\n    The distance is rounded to the closest integer, for compatibility\n    with the TSPLIB convention.\n    The two points are located on coordinates (x1,y1) and (x2,y2),\n    sent as parameters\"\"\"", "\n", "x_diff", "=", "x2", "[", "0", "]", "-", "x1", "[", "0", "]", "\n", "y_diff", "=", "x2", "[", "1", "]", "-", "x1", "[", "1", "]", "\n", "return", "int", "(", "math", ".", "sqrt", "(", "x_diff", "*", "x_diff", "+", "y_diff", "*", "y_diff", ")", "+", ".5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.dist_l2": [[16, 23], ["round", "math.sqrt"], "function", ["None"], ["", "def", "dist_l2", "(", "x1", ",", "x2", ",", "rd", "=", "5", ")", ":", "\n", "    ", "\"\"\"Compute the L2-norm (Euclidean) distance between two points.\n    The two points are located on coordinates (x1,y1) and (x2,y2),\n    sent as parameters\"\"\"", "\n", "x_diff", "=", "x2", "[", "0", "]", "-", "x1", "[", "0", "]", "\n", "y_diff", "=", "x2", "[", "1", "]", "-", "x1", "[", "1", "]", "\n", "return", "round", "(", "math", ".", "sqrt", "(", "x_diff", "*", "x_diff", "+", "y_diff", "*", "y_diff", ")", ",", "rd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.make_dist_matrix": [[25, 46], ["len", "numpy.zeros", "range", "range", "dist_matrix.astype.astype", "dist"], "function", ["None"], ["", "def", "make_dist_matrix", "(", "points", ",", "dist", "=", "dist_l2_closest_integer", ",", "to_integer", "=", "True", ",", "rd", "=", "4", ")", ":", "\n", "    ", "\"\"\"Compute a distance matrix for a set of points.\n    Uses function 'dist' to calculate distance between\n    any two points.\n    \"\"\"", "\n", "n", "=", "len", "(", "points", ")", "\n", "dist_matrix", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "            ", "x1", "=", "points", "[", "i", "]", "\n", "x2", "=", "points", "[", "j", "]", "\n", "x1", "=", "x1", "*", "10", "**", "rd", "\n", "x2", "=", "x2", "*", "10", "**", "rd", "\n", "dist_matrix", "[", "i", ",", "j", "]", "=", "dist", "(", "x1", ",", "x2", ")", "\n", "dist_matrix", "[", "j", ",", "i", "]", "=", "dist_matrix", "[", "i", ",", "j", "]", "\n", "", "", "if", "to_integer", ":", "\n", "        ", "dist_matrix", "=", "dist_matrix", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "        ", "dist_matrix", "=", "dist_matrix", "/", "10", "**", "rd", "\n", "\n", "", "return", "dist_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.tsp_tour_cost": [[48, 57], ["range", "int", "int", "len"], "function", ["None"], ["", "def", "tsp_tour_cost", "(", "tour", ",", "cost_matrix", ")", ":", "\n", "    ", "cost", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "\n", "        ", "node", "=", "int", "(", "tour", "[", "i", "]", ")", "\n", "succ", "=", "int", "(", "tour", "[", "i", "+", "1", "]", ")", "\n", "cost", "+=", "cost_matrix", "[", "node", "]", "[", "succ", "]", "\n", "\n", "", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.op.tour_check": [[59, 107], ["range", "int", "int", "numpy.round", "Exception", "len", "numpy.random.randint"], "function", ["None"], ["", "def", "tour_check", "(", "tour", ",", "x", ",", "time_matrix", ",", "maxT_pen", ",", "tw_pen", ",", "n_nodes", ")", ":", "\n", "    ", "\"\"\"\n    Calculate a tour times and the penalties for constraint violation\n    \"\"\"", "\n", "tw_high", "=", "x", "[", ":", ",", "-", "3", "]", "\n", "tw_low", "=", "x", "[", ":", ",", "-", "4", "]", "\n", "prizes", "=", "x", "[", ":", ",", "-", "2", "]", "\n", "maxT", "=", "x", "[", "0", ",", "-", "1", "]", "\n", "\n", "feas", "=", "True", "\n", "return_to_depot", "=", "False", "\n", "tour_time", "=", "0", "\n", "rewards", "=", "0", "\n", "pen", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "tour", ")", "-", "1", ")", ":", "\n", "\n", "        ", "node", "=", "int", "(", "tour", "[", "i", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "assert", "node", "==", "1", ",", "'A tour must start from the depot - node: 1'", "\n", "\n", "", "succ", "=", "int", "(", "tour", "[", "i", "+", "1", "]", ")", "\n", "time", "=", "time_matrix", "[", "node", "-", "1", "]", "[", "succ", "-", "1", "]", "\n", "noise", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "101", ",", "size", "=", "1", ")", "[", "0", "]", "/", "100", "\n", "tour_time", "+=", "np", ".", "round", "(", "noise", "*", "time", ",", "2", ")", "\n", "if", "tour_time", ">", "tw_high", "[", "succ", "-", "1", "]", ":", "\n", "            ", "feas", "=", "False", "\n", "# penalty added for each missed tw", "\n", "pen", "+=", "tw_pen", "\n", "", "elif", "tour_time", "<", "tw_low", "[", "succ", "-", "1", "]", ":", "\n", "            ", "tour_time", "+=", "tw_low", "[", "succ", "-", "1", "]", "-", "tour_time", "\n", "rewards", "+=", "prizes", "[", "succ", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "rewards", "+=", "prizes", "[", "succ", "-", "1", "]", "\n", "\n", "", "if", "succ", "==", "1", ":", "\n", "            ", "return_to_depot", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "return_to_depot", ":", "\n", "        ", "raise", "Exception", "(", "'A tour must reconnect back to the depot - node: 1'", ")", "\n", "\n", "", "if", "tour_time", ">", "maxT", ":", "\n", "# penalty added for each", "\n", "        ", "pen", "+=", "maxT_pen", "*", "n_nodes", "\n", "feas", "=", "False", "\n", "\n", "", "return", "tour_time", ",", "rewards", ",", "pen", ",", "feas", "\n", "", ""]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.heuristics.nn_algo": [[4, 24], ["cost_matrix.copy.copy", "range", "range", "tour.append", "numpy.argmin", "tour.append"], "function", ["None"], ["def", "nn_algo", "(", "init_node", ",", "cost_matrix", ",", "n_nodes", ")", ":", "\n", "    ", "\"\"\"\n    Nearest Neighbour algorithm\n    \"\"\"", "\n", "cost_matrix", "=", "cost_matrix", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n_nodes", "+", "1", ")", ":", "\n", "        ", "cost_matrix", "[", "i", "]", "[", "i", "]", "=", "np", ".", "inf", "\n", "\n", "", "tour", "=", "[", "init_node", "]", "\n", "\n", "for", "_", "in", "range", "(", "n_nodes", "-", "1", ")", ":", "\n", "        ", "node", "=", "tour", "[", "-", "1", "]", "\n", "min_index", "=", "np", ".", "argmin", "(", "cost_matrix", "[", "node", "]", ")", "\n", "for", "t", "in", "tour", ":", "\n", "            ", "cost_matrix", "[", "min_index", "+", "1", "]", "[", "t", "]", "=", "np", ".", "inf", "\n", "cost_matrix", "[", "t", "]", "[", "min_index", "+", "1", "]", "=", "np", ".", "inf", "\n", "", "tour", ".", "append", "(", "min_index", "+", "1", ")", "\n", "", "tour", ".", "append", "(", "init_node", ")", "\n", "return", "tour", "\n", "", ""]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.instance.make_instance": [[7, 12], ["generator.op.instances.InstanceGenerator", "generator.op.instances.InstanceGenerator.generate_instance_files", "x_df.to_numpy", "adj_df.to_numpy"], "function", ["home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op.instances.InstanceGenerator.generate_instance_files"], ["def", "make_instance", "(", "n_nodes", ",", "seed", "=", "None", ",", "save", "=", "False", ")", ":", "\n", "    ", "generator", "=", "InstanceGenerator", "(", "1", ",", "n_nodes", ",", "seed", "=", "seed", ")", "\n", "x_df", ",", "adj_df", "=", "generator", ".", "generate_instance_files", "(", "save", ")", "\n", "x", ",", "adj", "=", "x_df", ".", "to_numpy", "(", ")", ",", "adj_df", ".", "to_numpy", "(", ")", "\n", "return", "x", ",", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.paulorocosta_ai-for-tsp-competition.op_utils.instance.read_instance": [[14, 21], ["pandas.read_csv", "pandas.read_csv", "pd.read_csv.to_numpy", "pd.read_csv.to_numpy", "pathlib.Path"], "function", ["None"], ["", "def", "read_instance", "(", "x_path", ",", "adj_path", ")", ":", "\n", "    ", "x_df", "=", "pd", ".", "read_csv", "(", "x_path", ",", "sep", "=", "','", ")", "\n", "adj_df", "=", "pd", ".", "read_csv", "(", "adj_path", ",", "sep", "=", "','", ")", "\n", "\n", "x", ",", "adj", "=", "x_df", ".", "to_numpy", "(", ")", ",", "adj_df", ".", "to_numpy", "(", ")", "\n", "\n", "return", "x", ",", "adj", ",", "Path", "(", "x_path", ")", ".", "stem", "\n", "", ""]]}