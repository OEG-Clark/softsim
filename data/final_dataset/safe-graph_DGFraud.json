{"home.repos.pwc.inspect_result.safe-graph_DGFraud.None.main.arg_parser": [[23, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'GAS'", ",", "\n", "help", "=", "\"['Player2Vec', 'FdGars','GEM','SemiGNN','GAS','GeniePath']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'example'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "int", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.001", ",", "help", "=", "'the ratio of training set in whole dataset.'", ")", "\n", "\n", "# GCN args", "\n", "parser", ".", "add_argument", "(", "'--hidden1'", ",", "default", "=", "16", ",", "help", "=", "'Number of units in GCN hidden layer 1.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden2'", ",", "default", "=", "16", ",", "help", "=", "'Number of units in GCN hidden layer 2.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_output'", ",", "default", "=", "4", ",", "help", "=", "'gcn output size.'", ")", "\n", "\n", "# GAS", "\n", "parser", ".", "add_argument", "(", "'--review_num sample'", ",", "default", "=", "7", ",", "help", "=", "'review number.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_dim'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'gcn layer size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding1'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding2'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding3'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding4'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "# SemiGNN", "\n", "parser", ".", "add_argument", "(", "'--init_emb_size'", ",", "default", "=", "4", ",", "help", "=", "'initial node embedding size'", ")", "\n", "parser", ".", "add_argument", "(", "'--semi_encoding1'", ",", "default", "=", "3", ",", "help", "=", "'the first view attention layer unit number'", ")", "\n", "parser", ".", "add_argument", "(", "'--semi_encoding2'", ",", "default", "=", "2", ",", "help", "=", "'the second view attention layer unit number'", ")", "\n", "parser", ".", "add_argument", "(", "'--semi_encoding3'", ",", "default", "=", "4", ",", "help", "=", "'one-layer perceptron units'", ")", "\n", "parser", ".", "add_argument", "(", "'--Ul'", ",", "default", "=", "8", ",", "help", "=", "'labeled users number'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "0.5", ",", "help", "=", "'loss alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--lamtha'", ",", "default", "=", "0.5", ",", "help", "=", "'loss lamtha'", ")", "\n", "\n", "# GEM", "\n", "parser", ".", "add_argument", "(", "'--hop'", ",", "default", "=", "1", ",", "help", "=", "'hop number'", ")", "\n", "parser", ".", "add_argument", "(", "'--k'", ",", "default", "=", "16", ",", "help", "=", "'gem layer unit'", ")", "\n", "\n", "# GeniePath", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--lstm_hidden'", ",", "default", "=", "128", ",", "help", "=", "'lstm_hidden unit'", ")", "\n", "parser", ".", "add_argument", "(", "'--heads'", ",", "default", "=", "1", ",", "help", "=", "'gat heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_num'", ",", "default", "=", "4", ",", "help", "=", "'geniePath layer num'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.None.main.set_env": [[71, 75], ["tensorflow.reset_default_graph", "np.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["", "def", "set_env", "(", "args", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.None.main.get_data": [[78, 85], ["None"], "function", ["None"], ["", "def", "get_data", "(", "ix", ",", "int_batch", ",", "train_size", ")", ":", "\n", "    ", "if", "ix", "+", "int_batch", ">=", "train_size", ":", "\n", "        ", "ix", "=", "train_size", "-", "int_batch", "\n", "end", "=", "train_size", "\n", "", "else", ":", "\n", "        ", "end", "=", "ix", "+", "int_batch", "\n", "", "return", "train_data", "[", "ix", ":", "end", "]", ",", "train_label", "[", "ix", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.None.main.load_data": [[87, 124], ["utils.data_loader.load_data_dblp", "len", "len", "utils.data_loader.load_data_gas", "len", "utils.data_loader.load_example_gem", "utils.data_loader.load_example_semi"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_gas", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_example_gem", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_example_semi"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_str", "==", "'dblp'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_data_dblp", "(", "\n", "'dataset/DBLP4057_GAT_with_idx_tra200_val_800.mat'", ")", "\n", "node_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "node_embedding", "=", "features", ".", "shape", "[", "1", "]", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "paras", "=", "[", "node_size", ",", "node_embedding", ",", "class_size", ",", "train_size", "]", "\n", "", "if", "args", ".", "dataset_str", "==", "'example'", "and", "args", ".", "model", "!=", "'GAS'", ":", "\n", "        ", "if", "args", ".", "model", "==", "'GEM'", ":", "\n", "            ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_example_gem", "(", ")", "\n", "", "if", "args", ".", "model", "==", "'SemiGNN'", ":", "\n", "            ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_example_semi", "(", ")", "\n", "", "node_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "node_embedding", "=", "features", ".", "shape", "[", "1", "]", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "paras", "=", "[", "node_size", ",", "node_embedding", ",", "class_size", ",", "train_size", "]", "\n", "", "if", "args", ".", "dataset_str", "==", "'example'", "and", "args", ".", "model", "==", "'GAS'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_data_gas", "(", ")", "\n", "node_embedding_r", "=", "features", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "node_embedding_u", "=", "features", "[", "1", "]", ".", "shape", "[", "1", "]", "\n", "node_embedding_i", "=", "features", "[", "2", "]", ".", "shape", "[", "1", "]", "\n", "node_size", "=", "features", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# node_embedding_i = node_embedding_r = node_size", "\n", "h_u_size", "=", "adj_list", "[", "0", "]", ".", "shape", "[", "1", "]", "*", "(", "node_embedding_r", "+", "node_embedding_u", ")", "\n", "h_i_size", "=", "adj_list", "[", "2", "]", ".", "shape", "[", "1", "]", "*", "(", "node_embedding_r", "+", "node_embedding_i", ")", "\n", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "\n", "paras", "=", "[", "node_size", ",", "node_embedding_r", ",", "node_embedding_u", ",", "node_embedding_i", ",", "class_size", ",", "train_size", ",", "h_u_size", ",", "\n", "h_i_size", "]", "\n", "\n", "", "return", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.None.main.train": [[126, 220], ["print", "tensorflow.Session", "sess.run", "time.clock", "range", "time.clock", "print", "print", "len", "algorithms.Player2Vec.Player2Vec.Player2Vec", "len", "algorithms.FdGars.FdGars.FdGars", "algorithms.GAS.GAS.GAS", "len", "algorithms.GEM.GEM.GEM", "algorithms.GeniePath.GeniePath.GeniePath", "len", "algorithms.SemiGNN.SemiGNN.SemiGNN", "zip", "np.concatenate", "np.concatenate", "tensorflow.global_variables_initializer", "range", "print", "algorithms.SemiGNN.SemiGNN.SemiGNN.test", "algorithms.SemiGNN.SemiGNN.SemiGNN.test", "utils.utils.normalize_adj", "utils.utils.normalize_adj", "utils.utils.matrix_to_adjlist", "utils.utils.random_walks", "utils.utils.pairs_to_matrix", "utils.utils.get_negative_sampling", "np.concatenate.append", "np.concatenate.append", "np.array", "np.array", "print", "range", "main.get_data", "algorithms.SemiGNN.SemiGNN.SemiGNN.train", "main.get_data", "algorithms.SemiGNN.SemiGNN.SemiGNN.train"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.normalize_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.normalize_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.matrix_to_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.random_walks", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pairs_to_matrix", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.get_negative_sampling", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "def", "train", "(", "args", ",", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "if", "args", ".", "model", "==", "'Player2Vec'", ":", "\n", "            ", "adj_data", "=", "[", "normalize_adj", "(", "adj", ")", "for", "adj", "in", "adj_list", "]", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "\n", "net", "=", "Player2Vec", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "gcn_output1", "=", "args", ".", "hidden1", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "embedding", "=", "paras", "[", "1", "]", ",", "encoding", "=", "args", ".", "gcn_output", ")", "\n", "", "if", "args", ".", "model", "==", "'FdGars'", ":", "\n", "            ", "adj_data", "=", "[", "normalize_adj", "(", "adj", ")", "for", "adj", "in", "adj_list", "]", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "# meta=1 in FdGars", "\n", "net", "=", "FdGars", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "gcn_output1", "=", "args", ".", "hidden1", ",", "gcn_output2", "=", "args", ".", "hidden2", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "embedding", "=", "paras", "[", "1", "]", ",", "encoding", "=", "args", ".", "gcn_output", ")", "\n", "", "if", "args", ".", "model", "==", "'GAS'", ":", "\n", "            ", "adj_data", "=", "adj_list", "\n", "net", "=", "GAS", "(", "session", "=", "sess", ",", "nodes", "=", "paras", "[", "0", "]", ",", "class_size", "=", "paras", "[", "4", "]", ",", "embedding_r", "=", "paras", "[", "1", "]", ",", "embedding_u", "=", "paras", "[", "2", "]", ",", "\n", "embedding_i", "=", "paras", "[", "3", "]", ",", "h_u_size", "=", "paras", "[", "6", "]", ",", "h_i_size", "=", "paras", "[", "7", "]", ",", "\n", "encoding1", "=", "args", ".", "encoding1", ",", "encoding2", "=", "args", ".", "encoding2", ",", "encoding3", "=", "args", ".", "encoding3", ",", "\n", "encoding4", "=", "args", ".", "encoding4", ",", "gcn_dim", "=", "args", ".", "gcn_dim", ")", "\n", "", "if", "args", ".", "model", "==", "'GEM'", ":", "\n", "            ", "adj_data", "=", "adj_list", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "# device num", "\n", "net", "=", "GEM", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "encoding", "=", "args", ".", "k", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "embedding", "=", "paras", "[", "1", "]", ",", "hop", "=", "args", ".", "hop", ")", "\n", "", "if", "args", ".", "model", "==", "'GeniePath'", ":", "\n", "            ", "adj_data", "=", "adj_list", "\n", "net", "=", "GeniePath", "(", "session", "=", "sess", ",", "out_dim", "=", "paras", "[", "2", "]", ",", "dim", "=", "args", ".", "dim", ",", "lstm_hidden", "=", "args", ".", "lstm_hidden", ",", "\n", "nodes", "=", "paras", "[", "0", "]", ",", "in_dim", "=", "paras", "[", "1", "]", ",", "heads", "=", "args", ".", "heads", ",", "layer_num", "=", "args", ".", "layer_num", ",", "\n", "class_size", "=", "paras", "[", "2", "]", ")", "\n", "", "if", "args", ".", "model", "==", "'SemiGNN'", ":", "\n", "            ", "adj_nodelists", "=", "[", "matrix_to_adjlist", "(", "adj", ",", "pad", "=", "False", ")", "for", "adj", "in", "adj_list", "]", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "\n", "pairs", "=", "[", "random_walks", "(", "adj_nodelists", "[", "i", "]", ",", "2", ",", "3", ")", "for", "i", "in", "range", "(", "meta_size", ")", "]", "\n", "net", "=", "SemiGNN", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "semi_encoding1", "=", "args", ".", "semi_encoding1", ",", "\n", "semi_encoding2", "=", "args", ".", "semi_encoding2", ",", "semi_encoding3", "=", "args", ".", "semi_encoding3", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "init_emb_size", "=", "args", ".", "init_emb_size", ",", "ul", "=", "args", ".", "batch_size", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "lamtha", "=", "args", ".", "lamtha", ")", "\n", "adj_data", "=", "[", "pairs_to_matrix", "(", "p", ",", "paras", "[", "0", "]", ")", "for", "p", "in", "pairs", "]", "\n", "u_i", "=", "[", "]", "\n", "u_j", "=", "[", "]", "\n", "for", "adj_nodelist", ",", "p", "in", "zip", "(", "adj_nodelists", ",", "pairs", ")", ":", "\n", "                ", "u_i_t", ",", "u_j_t", ",", "graph_label", "=", "get_negative_sampling", "(", "p", ",", "adj_nodelist", ")", "\n", "u_i", ".", "append", "(", "u_i_t", ")", "\n", "u_j", ".", "append", "(", "u_j_t", ")", "\n", "", "u_i", "=", "np", ".", "concatenate", "(", "np", ".", "array", "(", "u_i", ")", ")", "\n", "u_j", "=", "np", ".", "concatenate", "(", "np", ".", "array", "(", "u_j", ")", ")", "\n", "\n", "", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# net.load(sess)", "\n", "\n", "t_start", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "count", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "paras", "[", "3", "]", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "if", "args", ".", "model", "==", "'SemiGNN'", ":", "\n", "                    ", "batch_data", ",", "batch_sup_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "adj_data", ",", "u_i", ",", "u_j", ",", "graph_label", ",", "batch_data", ",", "\n", "batch_sup_label", ",", "\n", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "", "else", ":", "# model Player2Vec, GAS\uff0c GEM or FdGars", "\n", "                    ", "batch_data", ",", "batch_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "features", ",", "adj_data", ",", "batch_label", ",", "\n", "batch_data", ",", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "", "print", "(", "\"batch loss: {:.4f}, batch acc: {:.4f}\"", ".", "format", "(", "loss", ",", "acc", ")", ")", "\n", "# print(prob, pred)", "\n", "\n", "train_loss", "+=", "loss", "\n", "train_acc", "+=", "acc", "\n", "count", "+=", "1", "\n", "", "train_loss", "=", "train_loss", "/", "count", "\n", "train_acc", "=", "train_acc", "/", "count", "\n", "print", "(", "\"epoch{:d} : train_loss: {:.4f}, train_acc: {:.4f}\"", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_acc", ")", ")", "\n", "# net.save(sess)", "\n", "\n", "", "t_end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"train time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "t_end", "-", "t_start", ")", ")", "\n", "print", "(", "\"Train end!\"", ")", "\n", "\n", "if", "args", ".", "model", "==", "'SemiGNN'", ":", "\n", "            ", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "adj_data", ",", "u_i", ",", "u_j", ",", "\n", "graph_label", ",", "\n", "test_data", ",", "\n", "test_label", ",", "\n", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "", "else", ":", "\n", "            ", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "features", ",", "adj_data", ",", "test_label", ",", "\n", "test_data", ")", "\n", "\n", "", "", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.data_loader.unzip_file": [[13, 21], ["zipfile.is_zipfile", "zipfile.ZipFile", "zipfile.ZipFile.namelist", "print", "zipfile.ZipFile.extract"], "function", ["None"], ["def", "unzip_file", "(", "zip_src", ",", "dst_dir", ")", ":", "\n", "    ", "iz", "=", "zipfile", ".", "is_zipfile", "(", "zip_src", ")", "\n", "if", "iz", ":", "\n", "        ", "zf", "=", "zipfile", ".", "ZipFile", "(", "zip_src", ",", "'r'", ")", "\n", "for", "file", "in", "zf", ".", "namelist", "(", ")", ":", "\n", "            ", "zf", ".", "extract", "(", "file", ",", "dst_dir", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'Zip Error.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.data_loader.load_data_dblp": [[23, 35], ["scipy.loadmat", "range", "sklearn.model_selection.train_test_split", "data[].astype", "len", "numpy.eye"], "function", ["None"], ["", "", "def", "load_data_dblp", "(", "path", "=", "'../../dataset/DBLP4057_GAT_with_idx_tra200_val_800.mat'", ")", ":", "\n", "    ", "data", "=", "sio", ".", "loadmat", "(", "path", ")", "\n", "truelabels", ",", "features", "=", "data", "[", "'label'", "]", ",", "data", "[", "'features'", "]", ".", "astype", "(", "float", ")", "\n", "N", "=", "features", ".", "shape", "[", "0", "]", "\n", "rownetworks", "=", "[", "data", "[", "'net_APA'", "]", "-", "np", ".", "eye", "(", "N", ")", "]", "\n", "# rownetworks = [data['net_APA'] - np.eye(N), data['net_APCPA'] - np.eye(N), data['net_APTPA'] - np.eye(N)]", "\n", "y", "=", "truelabels", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "48", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "return", "rownetworks", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.data_loader.load_example_semi": [[37, 72], ["numpy.array", "numpy.array", "range", "sklearn.model_selection.train_test_split", "numpy.array", "numpy.array", "len"], "function", ["None"], ["", "def", "load_example_semi", "(", ")", ":", "\n", "# example data for SemiGNN", "\n", "    ", "features", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", ")", "\n", "N", "=", "features", ".", "shape", "[", "0", "]", "\n", "# Here we use binary matrix as adjacency matrix, weighted matrix is acceptable as well", "\n", "rownetworks", "=", "[", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "]", "\n", "y", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.2", ",", "random_state", "=", "48", ",", "\n", "shuffle", "=", "True", ")", "# test_size=0.25  batch\u2014\u2014size=2", "\n", "\n", "return", "rownetworks", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.data_loader.load_example_gem": [[74, 111], ["numpy.array", "numpy.array", "range", "sklearn.model_selection.train_test_split", "numpy.array", "numpy.array", "len"], "function", ["None"], ["", "def", "load_example_gem", "(", ")", ":", "\n", "# example data for GEM", "\n", "# node=8  p=7  D=2", "\n", "    ", "features", "=", "np", ".", "array", "(", "[", "[", "5", ",", "3", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "2", ",", "3", ",", "1", ",", "2", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "3", ",", "1", ",", "6", ",", "4", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "2", ",", "4", ",", "4", ",", "1", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "3", ",", "3", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", ",", "5", ",", "1", ",", "4", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "3", ",", "5", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "3", ",", "4", ",", "5", ",", "2", ",", "1", ",", "1", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "N", "=", "features", ".", "shape", "[", "0", "]", "\n", "rownetworks", "=", "[", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "]", ")", "]", "\n", "# y = np.array([-1, -1, -1, -1, 1, 1, 1, 1])", "\n", "y", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "y", "=", "y", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.2", ",", "random_state", "=", "8", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "return", "rownetworks", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.data_loader.load_data_gas": [[113, 165], ["utils.utils.pad_adjlist", "utils.utils.pad_adjlist", "utils.utils.pad_adjlist", "utils.utils.pad_adjlist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "sklearn.model_selection.train_test_split", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist"], ["", "def", "load_data_gas", "(", ")", ":", "\n", "# example data for GAS", "\n", "# construct U-E-I network", "\n", "    ", "user_review_adj", "=", "[", "[", "0", ",", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", ",", "[", "5", "]", ",", "[", "4", ",", "6", "]", "]", "\n", "user_review_adj", "=", "pad_adjlist", "(", "user_review_adj", ")", "\n", "user_item_adj", "=", "[", "[", "0", ",", "1", "]", ",", "[", "0", "]", ",", "[", "0", "]", ",", "[", "2", "]", ",", "[", "1", ",", "2", "]", "]", "\n", "user_item_adj", "=", "pad_adjlist", "(", "user_item_adj", ")", "\n", "item_review_adj", "=", "[", "[", "0", ",", "2", ",", "3", "]", ",", "[", "1", ",", "4", "]", ",", "[", "5", ",", "6", "]", "]", "\n", "item_review_adj", "=", "pad_adjlist", "(", "item_review_adj", ")", "\n", "item_user_adj", "=", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "0", ",", "4", "]", ",", "[", "3", ",", "4", "]", "]", "\n", "item_user_adj", "=", "pad_adjlist", "(", "item_user_adj", ")", "\n", "review_item_adj", "=", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "2", ",", "2", "]", "\n", "review_user_adj", "=", "[", "0", ",", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "4", "]", "\n", "\n", "# initialize review_vecs", "\n", "review_vecs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "\n", "# initialize user_vecs and item_vecs with user_review_adj and item_review_adj", "\n", "# for example, u0 has r1 and r0, then we get the first line of user_vecs: [1, 1, 0, 0, 0, 0, 0]", "\n", "user_vecs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", "]", ")", "\n", "item_vecs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "features", "=", "[", "review_vecs", ",", "user_vecs", ",", "item_vecs", "]", "\n", "\n", "# initialize the Comment Graph", "\n", "homo_adj", "=", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", "]", "\n", "\n", "adjs", "=", "[", "user_review_adj", ",", "user_item_adj", ",", "item_review_adj", ",", "item_user_adj", ",", "review_user_adj", ",", "review_item_adj", ",", "homo_adj", "]", "\n", "\n", "y", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "48", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "return", "adjs", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.AliasSampling.__init__": [[182, 200], ["len", "enumerate", "numpy.array", "len", "len", "range", "overfull.append", "overfull.pop", "underfull.pop", "overfull.append", "len", "underfull.append", "underfull.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "n", "=", "len", "(", "prob", ")", "\n", "self", ".", "U", "=", "np", ".", "array", "(", "prob", ")", "*", "self", ".", "n", "\n", "self", ".", "K", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "prob", ")", ")", "]", "\n", "overfull", ",", "underfull", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "U_i", "in", "enumerate", "(", "self", ".", "U", ")", ":", "\n", "            ", "if", "U_i", ">", "1", ":", "\n", "                ", "overfull", ".", "append", "(", "i", ")", "\n", "", "elif", "U_i", "<", "1", ":", "\n", "                ", "underfull", ".", "append", "(", "i", ")", "\n", "", "", "while", "len", "(", "overfull", ")", "and", "len", "(", "underfull", ")", ":", "\n", "            ", "i", ",", "j", "=", "overfull", ".", "pop", "(", ")", ",", "underfull", ".", "pop", "(", ")", "\n", "self", ".", "K", "[", "j", "]", "=", "i", "\n", "self", ".", "U", "[", "i", "]", "=", "self", ".", "U", "[", "i", "]", "-", "(", "1", "-", "self", ".", "U", "[", "j", "]", ")", "\n", "if", "self", ".", "U", "[", "i", "]", ">", "1", ":", "\n", "                ", "overfull", ".", "append", "(", "i", ")", "\n", "", "elif", "self", ".", "U", "[", "i", "]", "<", "1", ":", "\n", "                ", "underfull", ".", "append", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.AliasSampling.sampling": [[201, 211], ["numpy.random.rand", "numpy.floor", "i.astype.astype.astype", "range"], "methods", ["None"], ["", "", "", "def", "sampling", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "x", "=", "np", ".", "random", ".", "rand", "(", "n", ")", "\n", "i", "=", "np", ".", "floor", "(", "self", ".", "n", "*", "x", ")", "\n", "y", "=", "self", ".", "n", "*", "x", "-", "i", "\n", "i", "=", "i", ".", "astype", "(", "np", ".", "int32", ")", "\n", "res", "=", "[", "i", "[", "k", "]", "if", "y", "[", "k", "]", "<", "self", ".", "U", "[", "i", "[", "k", "]", "]", "else", "self", ".", "K", "[", "i", "[", "k", "]", "]", "for", "k", "in", "range", "(", "n", ")", "]", "\n", "if", "n", "==", "1", ":", "\n", "            ", "return", "res", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "res", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.normalize_adj": [[8, 16], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.eye", "sp.coo_matrix.sum", "sp.coo_matrix.dot().transpose().dot", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot"], ["def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.construct_feed_dict": [[19, 29], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["", "def", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'x'", "]", ":", "x", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'a'", "]", ":", "a", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'t'", "]", ":", "t", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "x", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.construct_feed_dict_semi": [[32, 44], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["", "def", "construct_feed_dict_semi", "(", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "learning_rate", ",", "momentum", ",", "\n", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'a'", "]", ":", "a", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'u_i'", "]", ":", "u_i", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'u_j'", "]", ":", "u_j", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'graph_label'", "]", ":", "batch_graph_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "batch_data", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'sup_label'", "]", ":", "batch_sup_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.construct_feed_dict_spam": [[47, 65], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["", "def", "construct_feed_dict_spam", "(", "h", ",", "adj_info", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_review_adj'", "]", ":", "adj_info", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_item_adj'", "]", ":", "adj_info", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_review_adj'", "]", ":", "adj_info", "[", "2", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_user_adj'", "]", ":", "adj_info", "[", "3", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_user_adj'", "]", ":", "adj_info", "[", "4", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_item_adj'", "]", ":", "adj_info", "[", "5", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'homo_adj'", "]", ":", "adj_info", "[", "6", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_vecs'", "]", ":", "h", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_vecs'", "]", ":", "h", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_vecs'", "]", ":", "h", "[", "2", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'t'", "]", ":", "t", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "h", "[", "0", "]", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.pad_adjlist": [[67, 80], ["numpy.array", "numpy.zeros", "range", "numpy.hstack", "numpy.arange", "numpy.random.choice", "len", "np.array.max", "range", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["", "def", "pad_adjlist", "(", "x_data", ")", ":", "\n", "# Get lengths of each row of data", "\n", "    ", "lens", "=", "np", ".", "array", "(", "[", "len", "(", "x_data", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "x_data", ")", ")", "]", ")", "\n", "\n", "# Mask of valid places in each row", "\n", "mask", "=", "np", ".", "arange", "(", "lens", ".", "max", "(", ")", ")", "<", "lens", "[", ":", ",", "None", "]", "\n", "\n", "# Setup output array and put elements from data into masked positions", "\n", "padded", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "padded", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "x_data", "[", "i", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", "\n", "", "padded", "[", "mask", "]", "=", "np", ".", "hstack", "(", "(", "x_data", "[", ":", "]", ")", ")", "\n", "return", "padded", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.matrix_to_adjlist": [[82, 93], ["range", "len", "range", "pad_adjlist.append", "utils.pad_adjlist", "len", "adjline.append"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist"], ["", "def", "matrix_to_adjlist", "(", "M", ",", "pad", "=", "True", ")", ":", "\n", "    ", "adjlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "M", ")", ")", ":", "\n", "        ", "adjline", "=", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "M", "[", "i", "]", ")", ")", ":", "\n", "            ", "if", "M", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "                ", "adjline", ".", "append", "(", "j", ")", "\n", "", "", "adjlist", ".", "append", "(", "adjline", ")", "\n", "", "if", "pad", ":", "\n", "        ", "adjlist", "=", "pad_adjlist", "(", "adjlist", ")", "\n", "", "return", "adjlist", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.adjlist_to_matrix": [[95, 102], ["len", "numpy.zeros", "range"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["", "def", "adjlist_to_matrix", "(", "adjlist", ")", ":", "\n", "    ", "nodes", "=", "len", "(", "adjlist", ")", "\n", "M", "=", "np", ".", "zeros", "(", "(", "nodes", ",", "nodes", ")", ")", "\n", "for", "i", "in", "range", "(", "nodes", ")", ":", "\n", "        ", "for", "j", "in", "adjlist", "[", "i", "]", ":", "\n", "            ", "M", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.pairs_to_matrix": [[104, 109], ["numpy.zeros"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["", "def", "pairs_to_matrix", "(", "pairs", ",", "nodes", ")", ":", "\n", "    ", "M", "=", "np", ".", "zeros", "(", "(", "nodes", ",", "nodes", ")", ")", "\n", "for", "i", ",", "j", "in", "pairs", ":", "\n", "        ", "M", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.generate_random_walk": [[112, 122], ["numpy.array", "numpy.random.choice", "numpy.append"], "function", ["None"], ["", "def", "generate_random_walk", "(", "adjlist", ",", "start", ",", "walklength", ")", ":", "\n", "    ", "t", "=", "1", "\n", "walk_path", "=", "np", ".", "array", "(", "[", "start", "]", ")", "\n", "while", "t", "<=", "walklength", ":", "\n", "        ", "neighbors", "=", "adjlist", "[", "start", "]", "\n", "current", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ")", "\n", "walk_path", "=", "np", ".", "append", "(", "walk_path", ",", "current", ")", "\n", "start", "=", "current", "\n", "t", "+=", "1", "\n", "", "return", "walk_path", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.random_walks": [[125, 137], ["range", "range", "range", "len", "len", "range", "pairs.append", "walks.append", "len", "utils.generate_random_walk"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.generate_random_walk"], ["", "def", "random_walks", "(", "adjlist", ",", "numerate", ",", "walklength", ")", ":", "\n", "    ", "nodes", "=", "range", "(", "0", ",", "len", "(", "adjlist", ")", ")", "# node index starts from zero", "\n", "walks", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "numerate", ")", ":", "\n", "        ", "for", "node", "in", "nodes", ":", "\n", "            ", "walks", ".", "append", "(", "generate_random_walk", "(", "adjlist", ",", "node", ",", "walklength", ")", ")", "\n", "", "", "pairs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "walks", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "walks", "[", "i", "]", ")", ")", ":", "\n", "            ", "pair", "=", "[", "walks", "[", "i", "]", "[", "0", "]", ",", "walks", "[", "i", "]", "[", "j", "]", "]", "\n", "", "pairs", ".", "append", "(", "pair", ")", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.negative_sampling": [[139, 145], ["numpy.power", "numpy.sum", "utils.AliasSampling", "len", "numpy.array"], "function", ["None"], ["", "def", "negative_sampling", "(", "adj_nodelist", ")", ":", "\n", "    ", "degree", "=", "[", "len", "(", "neighbors", ")", "for", "neighbors", "in", "adj_nodelist", "]", "\n", "node_negative_distribution", "=", "np", ".", "power", "(", "np", ".", "array", "(", "degree", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0.75", ")", "\n", "node_negative_distribution", "/=", "np", ".", "sum", "(", "node_negative_distribution", ")", "\n", "node_sampling", "=", "AliasSampling", "(", "prob", "=", "node_negative_distribution", ")", "\n", "return", "node_negative_distribution", ",", "node_sampling", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.utils.utils.get_negative_sampling": [[147, 177], ["len", "utils.negative_sampling", "range", "numpy.array", "graph_label.reshape.reshape", "u_i.append", "u_j.append", "graph_label.reshape.append", "range", "u_i.append", "u_j.append", "graph_label.reshape.append", "numpy.random.choice", "nodesampling.sampling", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.negative_sampling", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.AliasSampling.sampling"], ["", "def", "get_negative_sampling", "(", "pairs", ",", "adj_nodelist", ",", "Q", "=", "3", ",", "node_sampling", "=", "'atlas'", ")", ":", "\n", "    ", "num_of_nodes", "=", "len", "(", "adj_nodelist", ")", "\n", "u_i", "=", "[", "]", "\n", "u_j", "=", "[", "]", "\n", "graph_label", "=", "[", "]", "\n", "node_negative_distribution", ",", "nodesampling", "=", "negative_sampling", "(", "adj_nodelist", ")", "\n", "for", "index", "in", "range", "(", "0", ",", "num_of_nodes", ")", ":", "\n", "        ", "u_i", ".", "append", "(", "pairs", "[", "index", "]", "[", "0", "]", ")", "\n", "u_j", ".", "append", "(", "pairs", "[", "index", "]", "[", "1", "]", ")", "\n", "graph_label", ".", "append", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "Q", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "node_sampling", "==", "'numpy'", ":", "\n", "                    ", "negative_node", "=", "np", ".", "random", ".", "choice", "(", "num_of_nodes", ",", "node_negative_distribution", ")", "\n", "if", "negative_node", "not", "in", "adj_nodelist", "[", "pairs", "[", "index", "]", "[", "0", "]", "]", ":", "\n", "                        ", "break", "\n", "", "", "elif", "node_sampling", "==", "'atlas'", ":", "\n", "                    ", "negative_node", "=", "nodesampling", ".", "sampling", "(", ")", "\n", "if", "negative_node", "not", "in", "adj_nodelist", "[", "pairs", "[", "index", "]", "[", "0", "]", "]", ":", "\n", "                        ", "break", "\n", "", "", "elif", "node_sampling", "==", "'uniform'", ":", "\n", "                    ", "negative_node", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_of_nodes", ")", "\n", "if", "negative_node", "not", "in", "adj_nodelist", "[", "pairs", "[", "index", "]", "[", "0", "]", "]", ":", "\n", "                        ", "break", "\n", "", "", "", "u_i", ".", "append", "(", "pairs", "[", "index", "]", "[", "0", "]", ")", "\n", "u_j", ".", "append", "(", "negative_node", ")", "\n", "graph_label", ".", "append", "(", "-", "1", ")", "\n", "", "", "graph_label", "=", "np", ".", "array", "(", "graph_label", ")", "\n", "graph_label", "=", "graph_label", ".", "reshape", "(", "graph_label", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "return", "u_i", ",", "u_j", ",", "graph_label", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.algorithms.base_algorithm.Algorithm.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.algorithms.base_algorithm.Algorithm.forward_propagation": [[7, 9], ["None"], "methods", ["None"], ["", "def", "forward_propagation", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.algorithms.base_algorithm.Algorithm.save": [[10, 16], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.save"], ["", "def", "save", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp/%s.ckpt\"", "%", "'temp'", ")", "\n", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.algorithms.base_algorithm.Algorithm.load": [[17, 24], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "save_path", "=", "\"tmp/%s.ckpt\"", "%", "'temp'", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN.SemiGNN.__init__": [[29, 79], ["SemiGNN.SemiGNN.forward_propagation", "tensorflow.contrib.layers.apply_regularization", "print", "tensorflow.equal", "tensorflow.reduce_mean", "print", "tensorflow.train.AdamOptimizer", "SemiGNN.SemiGNN.optimizer.compute_gradients", "SemiGNN.SemiGNN.optimizer.apply_gradients", "tensorflow.global_variables_initializer", "print", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.trainable_variables", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.forward_propagation"], ["    ", "def", "__init__", "(", "self", ",", "\n", "session", ",", "\n", "nodes", ",", "\n", "class_size", ",", "\n", "semi_encoding1", ",", "\n", "semi_encoding2", ",", "\n", "semi_encoding3", ",", "\n", "init_emb_size", ",", "\n", "meta", ",", "\n", "ul", ",", "\n", "alpha", ",", "\n", "lamtha", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "class_size", "=", "class_size", "\n", "self", ".", "semi_encoding1", "=", "semi_encoding1", "\n", "self", ".", "semi_encoding2", "=", "semi_encoding2", "\n", "self", ".", "semi_encoding3", "=", "semi_encoding3", "\n", "self", ".", "init_emb_size", "=", "init_emb_size", "\n", "self", ".", "ul", "=", "ul", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "lamtha", "=", "lamtha", "\n", "self", ".", "placeholders", "=", "{", "'a'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "meta", ",", "self", ".", "nodes", ",", "self", ".", "nodes", "]", ",", "'adj'", ")", ",", "\n", "'u_i'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "]", ",", "'u_i'", ")", ",", "\n", "'u_j'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "]", ",", "'u_j'", ")", ",", "\n", "'batch_index'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'index'", ")", ",", "\n", "'sup_label'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "class_size", "]", ",", "'sup_label'", ")", ",", "\n", "'graph_label'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "1", "]", ",", "'graph_label'", ")", ",", "\n", "'lr'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'learning_rate'", ")", ",", "\n", "'mom'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'momentum'", ")", ",", "\n", "'num_features_nonzero'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "}", "\n", "\n", "loss", ",", "probabilities", ",", "pred", "=", "self", ".", "forward_propagation", "(", ")", "\n", "self", ".", "loss", ",", "self", ".", "probabilities", ",", "self", ".", "pred", "=", "loss", ",", "probabilities", ",", "pred", "\n", "self", ".", "l2", "=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.01", ")", ",", "\n", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "\n", "print", "(", "self", ".", "pred", ".", "shape", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "\n", "tf", ".", "argmax", "(", "self", ".", "placeholders", "[", "'sup_label'", "]", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "\"float\"", ")", ")", "\n", "print", "(", "'Forward propagation finished.'", ")", "\n", "\n", "self", ".", "sess", "=", "session", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "placeholders", "[", "'lr'", "]", ")", "\n", "gradients", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", "+", "self", ".", "lamtha", "*", "self", ".", "l2", ")", "\n", "capped_gradients", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.", ",", "5.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gradients", "if", "grad", "is", "not", "None", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gradients", ")", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "print", "(", "'Backward propagation finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN.SemiGNN.forward_propagation": [[80, 123], ["tensorflow.variable_scope", "range", "tensorflow.concat", "tensorflow.reshape", "print", "tensorflow.variable_scope", "base_models.layers.AttentionLayer.view_attention", "tensorflow.reshape", "print", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.one_hot", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.get_variable", "base_models.layers.AttentionLayer.node_attention", "tensorflow.reshape", "tensorflow.reshape.append", "tensorflow.one_hot", "tensorflow.argmax", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.log_sigmoid", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.log", "tensorflow.nn.softmax"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.view_attention", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.node_attention"], ["", "def", "forward_propagation", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'node_level_attention'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "h1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "meta", ")", ":", "\n", "                ", "emb", "=", "tf", ".", "get_variable", "(", "name", "=", "'init_embedding'", ",", "shape", "=", "[", "self", ".", "nodes", ",", "self", ".", "init_emb_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "h", "=", "AttentionLayer", ".", "node_attention", "(", "inputs", "=", "emb", ",", "adj", "=", "self", ".", "placeholders", "[", "'a'", "]", "[", "i", "]", ")", "\n", "h", "=", "tf", ".", "reshape", "(", "h", ",", "[", "self", ".", "nodes", ",", "emb", ".", "shape", "[", "1", "]", "]", ")", "\n", "h1", ".", "append", "(", "h", ")", "\n", "", "h1", "=", "tf", ".", "concat", "(", "h1", ",", "0", ")", "\n", "h1", "=", "tf", ".", "reshape", "(", "h1", ",", "[", "self", ".", "meta", ",", "self", ".", "nodes", ",", "self", ".", "init_emb_size", "]", ")", "\n", "print", "(", "'Node_level attention over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'view_level_attention'", ")", ":", "\n", "            ", "h2", "=", "AttentionLayer", ".", "view_attention", "(", "inputs", "=", "h1", ",", "layer_size", "=", "2", ",", "\n", "meta", "=", "self", ".", "meta", ",", "encoding1", "=", "self", ".", "semi_encoding1", ",", "\n", "encoding2", "=", "self", ".", "semi_encoding2", ")", "\n", "h2", "=", "tf", ".", "reshape", "(", "h2", ",", "[", "self", ".", "nodes", ",", "self", ".", "semi_encoding2", "*", "self", ".", "meta", "]", ")", "\n", "print", "(", "'View_level attention over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'MLP'", ")", ":", "\n", "            ", "a_u", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "h2", ",", "units", "=", "self", ".", "semi_encoding3", ",", "activation", "=", "None", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'loss'", ")", ":", "\n", "# for the labeled users, use softmax to get the classi\ufb01cation result.", "\n", "            ", "labeled_a_u", "=", "tf", ".", "matmul", "(", "tf", ".", "one_hot", "(", "self", ".", "placeholders", "[", "'batch_index'", "]", ",", "self", ".", "nodes", ")", ",", "a_u", ")", "\n", "theta", "=", "tf", ".", "get_variable", "(", "name", "=", "'theta'", ",", "shape", "=", "[", "self", ".", "semi_encoding3", ",", "self", ".", "class_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "logits", "=", "tf", ".", "matmul", "(", "labeled_a_u", ",", "theta", ")", "\n", "prob", "=", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "pred", "=", "tf", ".", "one_hot", "(", "tf", ".", "argmax", "(", "prob", ",", "1", ")", ",", "self", ".", "class_size", ")", "\n", "\n", "loss1", "=", "-", "(", "1", "/", "self", ".", "ul", ")", "*", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "placeholders", "[", "'sup_label'", "]", "*", "tf", ".", "log", "(", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", ")", ")", "\n", "\n", "u_i_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "a_u", ",", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'u_i'", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ")", "\n", "u_j_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "a_u", ",", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'u_j'", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ")", "\n", "inner_product", "=", "tf", ".", "reduce_sum", "(", "u_i_embedding", "*", "u_j_embedding", ",", "axis", "=", "1", ")", "\n", "loss2", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log_sigmoid", "(", "self", ".", "placeholders", "[", "'graph_label'", "]", "*", "inner_product", ")", ")", "\n", "\n", "loss", "=", "self", ".", "alpha", "*", "loss1", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "loss2", "\n", "", "return", "loss", ",", "prob", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN.SemiGNN.train": [[124, 136], ["utils.utils.utils.construct_feed_dict_semi", "SemiGNN.SemiGNN.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict_semi"], ["", "def", "train", "(", "self", ",", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict_semi", "(", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "\n", "learning_rate", ",", "momentum", ",", "\n", "self", ".", "placeholders", ")", "\n", "outs", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "train_op", ",", "self", ".", "loss", ",", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "outs", "[", "1", "]", "\n", "acc", "=", "outs", "[", "2", "]", "\n", "pred", "=", "outs", "[", "3", "]", "\n", "prob", "=", "outs", "[", "4", "]", "\n", "return", "loss", ",", "acc", ",", "pred", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN.SemiGNN.test": [[137, 145], ["utils.utils.utils.construct_feed_dict_semi", "SemiGNN.SemiGNN.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict_semi"], ["", "def", "test", "(", "self", ",", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict_semi", "(", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "\n", "learning_rate", ",", "momentum", ",", "\n", "self", ".", "placeholders", ")", "\n", "acc", ",", "pred", ",", "probabilities", ",", "tags", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", ",", "self", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "acc", ",", "pred", ",", "probabilities", ",", "tags", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN_main.arg_parser": [[20, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'example'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "int", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.001", ",", "help", "=", "'the ratio of training set in whole dataset.'", ")", "\n", "\n", "# SemiGNN", "\n", "parser", ".", "add_argument", "(", "'--init_emb_size'", ",", "default", "=", "4", ",", "help", "=", "'initial node embedding size'", ")", "\n", "parser", ".", "add_argument", "(", "'--semi_encoding1'", ",", "default", "=", "3", ",", "help", "=", "'the first view attention layer unit number'", ")", "\n", "parser", ".", "add_argument", "(", "'--semi_encoding2'", ",", "default", "=", "2", ",", "help", "=", "'the second view attention layer unit number'", ")", "\n", "parser", ".", "add_argument", "(", "'--semi_encoding3'", ",", "default", "=", "4", ",", "help", "=", "'one-layer perceptron units'", ")", "\n", "parser", ".", "add_argument", "(", "'--Ul'", ",", "default", "=", "8", ",", "help", "=", "'labeled users number'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "0.5", ",", "help", "=", "'loss alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--lamtha'", ",", "default", "=", "0.5", ",", "help", "=", "'loss lamtha'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN_main.set_env": [[42, 46], ["tensorflow.reset_default_graph", "np.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["", "def", "set_env", "(", "args", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN_main.get_data": [[49, 56], ["None"], "function", ["None"], ["", "def", "get_data", "(", "ix", ",", "int_batch", ",", "train_size", ")", ":", "\n", "    ", "if", "ix", "+", "int_batch", ">=", "train_size", ":", "\n", "        ", "ix", "=", "train_size", "-", "int_batch", "\n", "end", "=", "train_size", "\n", "", "else", ":", "\n", "        ", "end", "=", "ix", "+", "int_batch", "\n", "", "return", "train_data", "[", "ix", ":", "end", "]", ",", "train_label", "[", "ix", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN_main.load_data": [[58, 68], ["load_example_semi", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_example_semi"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_str", "==", "'example'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_example_semi", "(", ")", "\n", "node_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "node_embedding", "=", "features", ".", "shape", "[", "1", "]", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "paras", "=", "[", "node_size", ",", "node_embedding", ",", "class_size", ",", "train_size", "]", "\n", "\n", "", "return", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.SemiGNN.SemiGNN_main.train": [[70, 127], ["print", "tensorflow.Session", "len", "algorithms.SemiGNN.SemiGNN.SemiGNN", "zip", "np.concatenate", "np.concatenate", "sess.run", "time.clock", "range", "time.clock", "print", "print", "algorithms.SemiGNN.SemiGNN.SemiGNN.test", "matrix_to_adjlist", "random_walks", "pairs_to_matrix", "get_negative_sampling", "np.concatenate.append", "np.concatenate.append", "np.array", "np.array", "tensorflow.global_variables_initializer", "range", "print", "range", "SemiGNN_main.get_data", "algorithms.SemiGNN.SemiGNN.SemiGNN.train", "print"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.matrix_to_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.random_walks", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pairs_to_matrix", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.get_negative_sampling", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "def", "train", "(", "args", ",", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "adj_nodelists", "=", "[", "matrix_to_adjlist", "(", "adj", ",", "pad", "=", "False", ")", "for", "adj", "in", "adj_list", "]", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "\n", "pairs", "=", "[", "random_walks", "(", "adj_nodelists", "[", "i", "]", ",", "2", ",", "3", ")", "for", "i", "in", "range", "(", "meta_size", ")", "]", "\n", "net", "=", "SemiGNN", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "semi_encoding1", "=", "args", ".", "semi_encoding1", ",", "\n", "semi_encoding2", "=", "args", ".", "semi_encoding2", ",", "semi_encoding3", "=", "args", ".", "semi_encoding3", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "init_emb_size", "=", "args", ".", "init_emb_size", ",", "ul", "=", "args", ".", "batch_size", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "lamtha", "=", "args", ".", "lamtha", ")", "\n", "adj_data", "=", "[", "pairs_to_matrix", "(", "p", ",", "paras", "[", "0", "]", ")", "for", "p", "in", "pairs", "]", "\n", "u_i", "=", "[", "]", "\n", "u_j", "=", "[", "]", "\n", "for", "adj_nodelist", ",", "p", "in", "zip", "(", "adj_nodelists", ",", "pairs", ")", ":", "\n", "            ", "u_i_t", ",", "u_j_t", ",", "graph_label", "=", "get_negative_sampling", "(", "p", ",", "adj_nodelist", ")", "\n", "u_i", ".", "append", "(", "u_i_t", ")", "\n", "u_j", ".", "append", "(", "u_j_t", ")", "\n", "", "u_i", "=", "np", ".", "concatenate", "(", "np", ".", "array", "(", "u_i", ")", ")", "\n", "u_j", "=", "np", ".", "concatenate", "(", "np", ".", "array", "(", "u_j", ")", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# net.load(sess)", "\n", "\n", "t_start", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "count", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "paras", "[", "3", "]", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "batch_data", ",", "batch_sup_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "adj_data", ",", "u_i", ",", "u_j", ",", "graph_label", ",", "batch_data", ",", "\n", "batch_sup_label", ",", "\n", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "print", "(", "\"batch loss: {:.4f}, batch acc: {:.4f}\"", ".", "format", "(", "loss", ",", "acc", ")", ")", "\n", "# print(prob, pred)", "\n", "\n", "train_loss", "+=", "loss", "\n", "train_acc", "+=", "acc", "\n", "count", "+=", "1", "\n", "", "train_loss", "=", "train_loss", "/", "count", "\n", "train_acc", "=", "train_acc", "/", "count", "\n", "print", "(", "\"epoch{:d} : train_loss: {:.4f}, train_acc: {:.4f}\"", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_acc", ")", ")", "\n", "# net.save(sess)", "\n", "\n", "", "t_end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"train time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "t_end", "-", "t_start", ")", ")", "\n", "print", "(", "\"Train end!\"", ")", "\n", "\n", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "adj_data", ",", "u_i", ",", "u_j", ",", "\n", "graph_label", ",", "\n", "test_data", ",", "\n", "test_label", ",", "\n", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model.__init__": [[21, 46], ["kwargs.keys", "kwargs.get", "kwargs.get", "models.Model.__class__.__name__.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "activations", "=", "[", "]", "\n", "\n", "self", ".", "inputs", "=", "None", "\n", "self", ".", "outputs", "=", "None", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "opt_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model._build": [[47, 49], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model.build": [[50, 71], ["models.Model.activations.append", "tensorflow.get_collection", "models.Model._loss", "models.Model._accuracy", "models.Model.optimizer.minimize", "tensorflow.variable_scope", "models.Model._build", "layer", "models.Model.activations.append"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Build sequential layer model", "\n", "", "self", ".", "activations", ".", "append", "(", "self", ".", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "hidden", "=", "layer", "(", "self", ".", "activations", "[", "-", "1", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "hidden", ")", "\n", "", "self", ".", "outputs", "=", "self", ".", "activations", "[", "-", "1", "]", "\n", "\n", "# Store model variables for easy access", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n", "# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model.predict": [[72, 74], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model._loss": [[75, 77], ["None"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model._accuracy": [[78, 80], ["None"], "methods", ["None"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model.save": [[81, 87], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.save"], ["", "def", "save", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", ")", "\n", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Model.load": [[88, 95], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.MLP.__init__": [[99, 114], ["models.Model.__init__", "tensorflow.train.AdamOptimizer", "models.MLP.build"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "dims", ",", "categorical", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dims", "=", "dims", "\n", "self", ".", "input_dim", "=", "dims", "[", "0", "]", "\n", "self", ".", "output_dim", "=", "dims", "[", "-", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "categorical", "=", "categorical", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "labels", "=", "placeholders", "[", "'labels'", "]", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.MLP._loss": [[115, 128], ["models.MLP.layers[].vars.values", "graphsage.masked_softmax_cross_entropy", "graphsage.masked_softmax_cross_entropy", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.sqrt", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_softmax_cross_entropy", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "if", "self", ".", "categorical", ":", "\n", "            ", "self", ".", "loss", "+=", "metrics", ".", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "# L2", "\n", "", "else", ":", "\n", "            ", "diff", "=", "self", ".", "labels", "-", "self", ".", "outputs", "\n", "self", ".", "loss", "+=", "tf", ".", "reduce_sum", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "diff", "*", "diff", ",", "axis", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.MLP._accuracy": [[129, 133], ["graphsage.masked_accuracy", "graphsage.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_accuracy", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_accuracy"], ["", "", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "categorical", ":", "\n", "            ", "self", ".", "accuracy", "=", "metrics", ".", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.MLP._build": [[134, 147], ["models.MLP.layers.append", "models.MLP.layers.append", "graphsage.Dense", "graphsage.Dense", "graphsage.Dense", "graphsage.Dense"], "methods", ["None"], ["", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "layers", ".", "Dense", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "dims", "[", "1", "]", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "layers", ".", "Dense", "(", "input_dim", "=", "self", ".", "dims", "[", "1", "]", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.MLP.predict": [[148, 150], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.GeneralizedModel.__init__": [[159, 161], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GeneralizedModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.GeneralizedModel.build": [[163, 177], ["tensorflow.get_collection", "models.GeneralizedModel._loss", "models.GeneralizedModel._accuracy", "models.GeneralizedModel.optimizer.minimize", "tensorflow.variable_scope", "models.GeneralizedModel._build"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Store model variables for easy access", "\n", "", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n", "# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.SampleAndAggregate.__init__": [[192, 253], ["models.GeneralizedModel.__init__", "models.SampleAndAggregate.dims.extend", "tensorflow.train.AdamOptimizer", "models.SampleAndAggregate.build", "tensorflow.get_variable", "tensorflow.Variable", "Exception", "tensorflow.constant", "tensorflow.concat", "range", "adj.get_shape().as_list", "len", "Exception", "adj.get_shape"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "features", ",", "adj", ",", "degrees", ",", "\n", "layer_infos", ",", "concat", "=", "True", ",", "aggregator_type", "=", "\"mean\"", ",", "\n", "model_size", "=", "\"small\"", ",", "identity_dim", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            - placeholders: Stanford TensorFlow placeholder object.\n            - features: Numpy array with node features. \n                        NOTE: Pass a None object to train in featureless mode (identity features for nodes)!\n            - adj: Numpy array with adjacency lists (padded with random re-samples)\n            - degrees: Numpy array with node degrees. \n            - layer_infos: List of SAGEInfo namedtuples that describe the parameters of all \n                   the recursive layers. See SAGEInfo definition above.\n            - concat: whether to concatenate during recursive iterations\n            - aggregator_type: how to aggregate neighbor information\n            - model_size: one of \"small\" and \"big\"\n            - identity_dim: Set to positive int to use identity features (slow and cannot generalize, but better accuracy)\n        '''", "\n", "super", "(", "SampleAndAggregate", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "aggregator_type", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanAggregator", "\n", "", "elif", "aggregator_type", "==", "\"seq\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "SeqAggregator", "\n", "", "elif", "aggregator_type", "==", "\"maxpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MaxPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"meanpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"gcn\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "GCNAggregator", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown aggregator: \"", ",", "self", ".", "aggregator_cls", ")", "\n", "\n", "# get info from placeholders...", "\n", "", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch1\"", "]", "\n", "self", ".", "inputs2", "=", "placeholders", "[", "\"batch2\"", "]", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "adj_info", "=", "adj", "\n", "if", "identity_dim", ">", "0", ":", "\n", "           ", "self", ".", "embeds", "=", "tf", ".", "get_variable", "(", "\"node_embeddings\"", ",", "[", "adj", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "identity_dim", "]", ")", "\n", "", "else", ":", "\n", "           ", "self", ".", "embeds", "=", "None", "\n", "", "if", "features", "is", "None", ":", "\n", "            ", "if", "identity_dim", "==", "0", ":", "\n", "                ", "raise", "Exception", "(", "\"Must have a positive value for identity feature dimension if no input features given.\"", ")", "\n", "", "self", ".", "features", "=", "self", ".", "embeds", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "trainable", "=", "False", ")", "\n", "if", "not", "self", ".", "embeds", "is", "None", ":", "\n", "                ", "self", ".", "features", "=", "tf", ".", "concat", "(", "[", "self", ".", "embeds", ",", "self", ".", "features", "]", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "self", ".", "dims", "=", "[", "(", "0", "if", "features", "is", "None", "else", "features", ".", "shape", "[", "1", "]", ")", "+", "identity_dim", "]", "\n", "self", ".", "dims", ".", "extend", "(", "[", "layer_infos", "[", "i", "]", ".", "output_dim", "for", "i", "in", "range", "(", "len", "(", "layer_infos", ")", ")", "]", ")", "\n", "self", ".", "batch_size", "=", "placeholders", "[", "\"batch_size\"", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "layer_infos", "=", "layer_infos", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.SampleAndAggregate.sample": [[254, 276], ["range", "len", "sampler", "samples.append", "support_sizes.append", "tensorflow.reshape", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "inputs", ",", "layer_infos", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "\"\"\" Sample neighbors to be the supportive fields for multi-layer convolutions.\n\n        Args:\n            inputs: batch inputs\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        \"\"\"", "\n", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "samples", "=", "[", "inputs", "]", "\n", "# size of convolution support at each layer per node", "\n", "support_size", "=", "1", "\n", "support_sizes", "=", "[", "support_size", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "layer_infos", ")", ")", ":", "\n", "            ", "t", "=", "len", "(", "layer_infos", ")", "-", "k", "-", "1", "\n", "support_size", "*=", "layer_infos", "[", "t", "]", ".", "num_samples", "\n", "sampler", "=", "layer_infos", "[", "t", "]", ".", "neigh_sampler", "\n", "node", "=", "sampler", "(", "(", "samples", "[", "k", "]", ",", "layer_infos", "[", "t", "]", ".", "num_samples", ")", ")", "\n", "samples", ".", "append", "(", "tf", ".", "reshape", "(", "node", ",", "[", "support_size", "*", "batch_size", ",", "]", ")", ")", "\n", "support_sizes", ".", "append", "(", "support_size", ")", "\n", "", "return", "samples", ",", "support_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.SampleAndAggregate.aggregate": [[278, 331], ["range", "tensorflow.nn.embedding_lookup", "len", "range", "aggregators.append", "models.SampleAndAggregate.", "next_hidden.append", "models.SampleAndAggregate.aggregator_cls", "models.SampleAndAggregate.aggregator_cls", "len", "len", "tensorflow.reshape", "len"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "samples", ",", "input_features", ",", "dims", ",", "num_samples", ",", "support_sizes", ",", "batch_size", "=", "None", ",", "\n", "aggregators", "=", "None", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "model_size", "=", "\"small\"", ")", ":", "\n", "        ", "\"\"\" At each layer, aggregate hidden representations of neighbors to compute the hidden representations \n            at next layer.\n        Args:\n            samples: a list of samples of variable hops away for convolving at each layer of the\n                network. Length is the number of layers + 1. Each is a vector of node indices.\n            input_features: the input features for each sample of various hops away.\n            dims: a list of dimensions of the hidden representations from the input layer to the\n                final layer. Length is the number of layers + 1.\n            num_samples: list of number of samples for each layer.\n            support_sizes: the number of nodes to gather information from for each layer.\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        Returns:\n            The hidden representation at the final layer for all nodes in batch\n        \"\"\"", "\n", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "\n", "# length: number of layers + 1", "\n", "", "hidden", "=", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "input_features", ",", "node_samples", ")", "for", "node_samples", "in", "samples", "]", "\n", "new_agg", "=", "aggregators", "is", "None", "\n", "if", "new_agg", ":", "\n", "            ", "aggregators", "=", "[", "]", "\n", "", "for", "layer", "in", "range", "(", "len", "(", "num_samples", ")", ")", ":", "\n", "            ", "if", "new_agg", ":", "\n", "                ", "dim_mult", "=", "2", "if", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "# aggregator at current layer", "\n", "if", "layer", "==", "len", "(", "num_samples", ")", "-", "1", ":", "\n", "                    ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "dims", "[", "layer", "]", ",", "dims", "[", "layer", "+", "1", "]", ",", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "name", "=", "name", ",", "concat", "=", "concat", ",", "model_size", "=", "model_size", ")", "\n", "", "else", ":", "\n", "                    ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "dims", "[", "layer", "]", ",", "dims", "[", "layer", "+", "1", "]", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "name", "=", "name", ",", "concat", "=", "concat", ",", "model_size", "=", "model_size", ")", "\n", "", "aggregators", ".", "append", "(", "aggregator", ")", "\n", "", "else", ":", "\n", "                ", "aggregator", "=", "aggregators", "[", "layer", "]", "\n", "# hidden representation at current layer for all support nodes that are various hops away", "\n", "", "next_hidden", "=", "[", "]", "\n", "# as layer increases, the number of support nodes needed decreases", "\n", "for", "hop", "in", "range", "(", "len", "(", "num_samples", ")", "-", "layer", ")", ":", "\n", "                ", "dim_mult", "=", "2", "if", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "neigh_dims", "=", "[", "batch_size", "*", "support_sizes", "[", "hop", "]", ",", "\n", "num_samples", "[", "len", "(", "num_samples", ")", "-", "hop", "-", "1", "]", ",", "\n", "dim_mult", "*", "dims", "[", "layer", "]", "]", "\n", "h", "=", "aggregator", "(", "(", "hidden", "[", "hop", "]", ",", "\n", "tf", ".", "reshape", "(", "hidden", "[", "hop", "+", "1", "]", ",", "neigh_dims", ")", ")", ")", "\n", "next_hidden", ".", "append", "(", "h", ")", "\n", "", "hidden", "=", "next_hidden", "\n", "", "return", "hidden", "[", "0", "]", ",", "aggregators", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.SampleAndAggregate._build": [[332, 371], ["tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.aggregate", "models.SampleAndAggregate.aggregate", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.aggregate", "prediction.BipartiteEdgePredLayer", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.cast", "len", "models.SampleAndAggregate.degrees.tolist"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "labels", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'batch2'", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "neg_samples", ",", "_", ",", "_", "=", "(", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "labels", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "FLAGS", ".", "neg_sample_size", ",", "\n", "unique", "=", "False", ",", "\n", "range_max", "=", "len", "(", "self", ".", "degrees", ")", ",", "\n", "distortion", "=", "0.75", ",", "\n", "unigrams", "=", "self", ".", "degrees", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "\n", "# perform \"convolution\"", "\n", "samples1", ",", "support_sizes1", "=", "self", ".", "sample", "(", "self", ".", "inputs1", ",", "self", ".", "layer_infos", ")", "\n", "samples2", ",", "support_sizes2", "=", "self", ".", "sample", "(", "self", ".", "inputs2", ",", "self", ".", "layer_infos", ")", "\n", "num_samples", "=", "[", "layer_info", ".", "num_samples", "for", "layer_info", "in", "self", ".", "layer_infos", "]", "\n", "self", ".", "outputs1", ",", "self", ".", "aggregators", "=", "self", ".", "aggregate", "(", "samples1", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes1", ",", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "self", ".", "outputs2", ",", "_", "=", "self", ".", "aggregate", "(", "samples2", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes2", ",", "aggregators", "=", "self", ".", "aggregators", ",", "concat", "=", "self", ".", "concat", ",", "\n", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "neg_samples", ",", "neg_support_sizes", "=", "self", ".", "sample", "(", "self", ".", "neg_samples", ",", "self", ".", "layer_infos", ",", "\n", "FLAGS", ".", "neg_sample_size", ")", "\n", "self", ".", "neg_outputs", ",", "_", "=", "self", ".", "aggregate", "(", "neg_samples", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "neg_support_sizes", ",", "batch_size", "=", "FLAGS", ".", "neg_sample_size", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "dim_mult", "=", "2", "if", "self", ".", "concat", "else", "1", "\n", "self", ".", "link_pred_layer", "=", "BipartiteEdgePredLayer", "(", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "\n", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "placeholders", ",", "act", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "bilinear_weights", "=", "False", ",", "\n", "name", "=", "'edge_predict'", ")", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs1", ",", "1", ")", "\n", "self", ".", "outputs2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs2", ",", "1", ")", "\n", "self", ".", "neg_outputs", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "neg_outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.SampleAndAggregate.build": [[372, 384], ["models.SampleAndAggregate._build", "models.SampleAndAggregate._loss", "models.SampleAndAggregate._accuracy", "models.SampleAndAggregate.optimizer.compute_gradients", "models.SampleAndAggregate.optimizer.apply_gradients", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build", "(", ")", "\n", "\n", "# TF graph management", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "loss", "/", "tf", ".", "cast", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "clipped_grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.0", ",", "5.0", ")", "if", "grad", "is", "not", "None", "else", "None", ",", "var", ")", "\n", "for", "grad", ",", "var", "in", "grads_and_vars", "]", "\n", "self", ".", "grad", ",", "_", "=", "clipped_grads_and_vars", "[", "0", "]", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "clipped_grads_and_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.SampleAndAggregate._loss": [[385, 392], ["models.SampleAndAggregate.link_pred_layer.loss", "tensorflow.summary.scalar", "aggregator.vars.values", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.loss"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "for", "aggregator", "in", "self", ".", "aggregators", ":", "\n", "            ", "for", "var", "in", "aggregator", ".", "vars", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "link_pred_layer", ".", "loss", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ",", "self", ".", "neg_outputs", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.SampleAndAggregate._accuracy": [[393, 406], ["models.SampleAndAggregate.link_pred_layer.affinity", "models.SampleAndAggregate.link_pred_layer.neg_cost", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.div", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "# shape: [batch_size]", "\n", "        ", "aff", "=", "self", ".", "link_pred_layer", ".", "affinity", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", "\n", "# shape : [batch_size x num_neg_samples]", "\n", "self", ".", "neg_aff", "=", "self", ".", "link_pred_layer", ".", "neg_cost", "(", "self", ".", "outputs1", ",", "self", ".", "neg_outputs", ")", "\n", "self", ".", "neg_aff", "=", "tf", ".", "reshape", "(", "self", ".", "neg_aff", ",", "[", "self", ".", "batch_size", ",", "FLAGS", ".", "neg_sample_size", "]", ")", "\n", "_aff", "=", "tf", ".", "expand_dims", "(", "aff", ",", "axis", "=", "1", ")", "\n", "self", ".", "aff_all", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "neg_aff", ",", "_aff", "]", ")", "\n", "size", "=", "tf", ".", "shape", "(", "self", ".", "aff_all", ")", "[", "1", "]", "\n", "_", ",", "indices_of_ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "aff_all", ",", "k", "=", "size", ")", "\n", "_", ",", "self", ".", "ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "indices_of_ranks", ",", "k", "=", "size", ")", "\n", "self", ".", "mrr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "div", "(", "1.0", ",", "tf", ".", "cast", "(", "self", ".", "ranks", "[", ":", ",", "-", "1", "]", "+", "1", ",", "tf", ".", "float32", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mrr'", ",", "self", ".", "mrr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Node2VecModel.__init__": [[409, 445], ["models.GeneralizedModel.__init__", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.GradientDescentOptimizer", "models.Node2VecModel.build", "tensorflow.random_uniform", "tensorflow.truncated_normal", "tensorflow.zeros", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "placeholders", ",", "dict_size", ",", "degrees", ",", "name", "=", "None", ",", "\n", "nodevec_dim", "=", "50", ",", "lr", "=", "0.001", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Simple version of Node2Vec/DeepWalk algorithm.\n\n        Args:\n            dict_size: the total number of nodes.\n            degrees: numpy array of node degrees, ordered as in the data's id_map\n            nodevec_dim: dimension of the vector representation of node.\n            lr: learning rate of optimizer.\n        \"\"\"", "\n", "\n", "super", "(", "Node2VecModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch1\"", "]", "\n", "self", ".", "inputs2", "=", "placeholders", "[", "\"batch2\"", "]", "\n", "\n", "self", ".", "batch_size", "=", "placeholders", "[", "'batch_size'", "]", "\n", "self", ".", "hidden_dim", "=", "nodevec_dim", "\n", "\n", "# following the tensorflow word2vec tutorial", "\n", "self", ".", "target_embeds", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_uniform", "(", "[", "dict_size", ",", "nodevec_dim", "]", ",", "-", "1", ",", "1", ")", ",", "\n", "name", "=", "\"target_embeds\"", ")", "\n", "self", ".", "context_embeds", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "truncated_normal", "(", "[", "dict_size", ",", "nodevec_dim", "]", ",", "\n", "stddev", "=", "1.0", "/", "math", ".", "sqrt", "(", "nodevec_dim", ")", ")", ",", "\n", "name", "=", "\"context_embeds\"", ")", "\n", "self", ".", "context_bias", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "zeros", "(", "[", "dict_size", "]", ")", ",", "\n", "name", "=", "\"context_bias\"", ")", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Node2VecModel._build": [[446, 467], ["tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "prediction.BipartiteEdgePredLayer", "tensorflow.cast", "len", "models.Node2VecModel.degrees.tolist"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "labels", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'batch2'", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "neg_samples", ",", "_", ",", "_", "=", "(", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "labels", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "FLAGS", ".", "neg_sample_size", ",", "\n", "unique", "=", "True", ",", "\n", "range_max", "=", "len", "(", "self", ".", "degrees", ")", ",", "\n", "distortion", "=", "0.75", ",", "\n", "unigrams", "=", "self", ".", "degrees", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "target_embeds", ",", "self", ".", "inputs1", ")", "\n", "self", ".", "outputs2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_embeds", ",", "self", ".", "inputs2", ")", "\n", "self", ".", "outputs2_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_bias", ",", "self", ".", "inputs2", ")", "\n", "self", ".", "neg_outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_embeds", ",", "self", ".", "neg_samples", ")", "\n", "self", ".", "neg_outputs_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_bias", ",", "self", ".", "neg_samples", ")", "\n", "\n", "self", ".", "link_pred_layer", "=", "BipartiteEdgePredLayer", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "\n", "self", ".", "placeholders", ",", "bilinear_weights", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Node2VecModel.build": [[468, 474], ["models.Node2VecModel._build", "models.Node2VecModel._loss", "models.Node2VecModel._minimize", "models.Node2VecModel._accuracy"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._minimize", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build", "(", ")", "\n", "# TF graph management", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_minimize", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Node2VecModel._minimize": [[475, 477], ["models.Node2VecModel.optimizer.minimize"], "methods", ["None"], ["", "def", "_minimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Node2VecModel._loss": [[478, 488], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.summary.scalar", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.ones_like", "tensorflow.zeros_like"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "aff", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", ",", "1", ")", "+", "self", ".", "outputs2_bias", "\n", "neg_aff", "=", "tf", ".", "matmul", "(", "self", ".", "outputs1", ",", "tf", ".", "transpose", "(", "self", ".", "neg_outputs", ")", ")", "+", "self", ".", "neg_outputs_bias", "\n", "true_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "ones_like", "(", "aff", ")", ",", "logits", "=", "aff", ")", "\n", "negative_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "zeros_like", "(", "neg_aff", ")", ",", "logits", "=", "neg_aff", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "true_xent", ")", "+", "tf", ".", "reduce_sum", "(", "negative_xent", ")", "\n", "self", ".", "loss", "=", "loss", "/", "tf", ".", "cast", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.models.Node2VecModel._accuracy": [[489, 502], ["models.Node2VecModel.link_pred_layer.affinity", "models.Node2VecModel.link_pred_layer.neg_cost", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.div", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "# shape: [batch_size]", "\n", "        ", "aff", "=", "self", ".", "link_pred_layer", ".", "affinity", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", "\n", "# shape : [batch_size x num_neg_samples]", "\n", "self", ".", "neg_aff", "=", "self", ".", "link_pred_layer", ".", "neg_cost", "(", "self", ".", "outputs1", ",", "self", ".", "neg_outputs", ")", "\n", "self", ".", "neg_aff", "=", "tf", ".", "reshape", "(", "self", ".", "neg_aff", ",", "[", "self", ".", "batch_size", ",", "FLAGS", ".", "neg_sample_size", "]", ")", "\n", "_aff", "=", "tf", ".", "expand_dims", "(", "aff", ",", "axis", "=", "1", ")", "\n", "self", ".", "aff_all", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "neg_aff", ",", "_aff", "]", ")", "\n", "size", "=", "tf", ".", "shape", "(", "self", ".", "aff_all", ")", "[", "1", "]", "\n", "_", ",", "indices_of_ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "aff_all", ",", "k", "=", "size", ")", "\n", "_", ",", "self", ".", "ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "indices_of_ranks", ",", "k", "=", "size", ")", "\n", "self", ".", "mrr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "div", "(", "1.0", ",", "tf", ".", "cast", "(", "self", ".", "ranks", "[", ":", ",", "-", "1", "]", "+", "1", ",", "tf", ".", "float32", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mrr'", ",", "self", ".", "mrr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.metrics.masked_logit_cross_entropy": [[7, 15], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.constant"], "function", ["None"], ["def", "masked_logit_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Logit cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "loss", ",", "axis", "=", "1", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "mask", ")", ",", "tf", ".", "constant", "(", "[", "1.", "]", ")", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.metrics.masked_softmax_cross_entropy": [[16, 23], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.constant"], "function", ["None"], ["", "def", "masked_softmax_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "mask", ")", ",", "tf", ".", "constant", "(", "[", "1.", "]", ")", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.metrics.masked_l2": [[25, 32], ["tensorflow.nn.l2", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "masked_l2", "(", "preds", ",", "actuals", ",", "mask", ")", ":", "\n", "    ", "\"\"\"L2 loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "l2", "(", "preds", ",", "actuals", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.metrics.masked_accuracy": [[33, 41], ["tensorflow.equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax"], "function", ["None"], ["", "def", "masked_accuracy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "preds", ",", "1", ")", ",", "tf", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "accuracy_all", "=", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "accuracy_all", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "accuracy_all", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.MeanAggregator.__init__": [[11, 42], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.MeanAggregator._call": [[43, 65], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanAggregator.act", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "neigh_means", "=", "tf", ".", "reduce_mean", "(", "neigh_vecs", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_means", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.GCNAggregator.__init__": [[72, 100], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "aggregators.GCNAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.GCNAggregator._call": [[101, 117], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "aggregators.GCNAggregator.act", "tensorflow.concat", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "means", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "concat", "(", "[", "neigh_vecs", ",", "\n", "tf", ".", "expand_dims", "(", "self_vecs", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "output", "=", "tf", ".", "matmul", "(", "means", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.MaxPoolingAggregator.__init__": [[122, 167], ["layers.Layer.__init__", "aggregators.MaxPoolingAggregator.mlp_layers.append", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MaxPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MaxPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.MaxPoolingAggregator._call": [[168, 196], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MaxPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_max", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.MeanPoolingAggregator.__init__": [[200, 245], ["layers.Layer.__init__", "aggregators.MeanPoolingAggregator.mlp_layers.append", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.MeanPoolingAggregator._call": [[246, 274], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_mean", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.TwoMaxLayerPoolingAggregator.__init__": [[279, 333], ["layers.Layer.__init__", "aggregators.TwoMaxLayerPoolingAggregator.mlp_layers.append", "aggregators.TwoMaxLayerPoolingAggregator.mlp_layers.append", "layers.Dense", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.TwoMaxLayerPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TwoMaxLayerPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim_1", "=", "self", ".", "hidden_dim_1", "=", "512", "\n", "hidden_dim_2", "=", "self", ".", "hidden_dim_2", "=", "256", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim_1", "=", "self", ".", "hidden_dim_1", "=", "1024", "\n", "hidden_dim_2", "=", "self", ".", "hidden_dim_2", "=", "512", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim_1", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "hidden_dim_1", ",", "\n", "output_dim", "=", "hidden_dim_2", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim_2", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.TwoMaxLayerPoolingAggregator._call": [[334, 362], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "aggregators.TwoMaxLayerPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim_2", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_max", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.SeqAggregator.__init__": [[366, 404], ["layers.Layer.__init__", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.SeqAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeqAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "128", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "256", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "self", ".", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.aggregators.SeqAggregator._call": [[405, 450], ["tensorflow.shape", "aggregators.SeqAggregator.cell.zero_state", "tensorflow.sign", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.cast", "int", "tensorflow.reshape", "tensorflow.gather", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.add_n", "aggregators.SeqAggregator.act", "tensorflow.reduce_max", "tensorflow.constant", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.shape", "tensorflow.add_n", "tensorflow.concat", "tensorflow.abs", "tensorflow.nn.dynamic_rnn", "rnn_outputs.get_shape", "tensorflow.range", "scope.reuse_variables", "tensorflow.nn.dynamic_rnn"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_vecs", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "initial_state", "=", "self", ".", "cell", ".", "zero_state", "(", "batch_size", ",", "tf", ".", "float32", ")", "\n", "used", "=", "tf", ".", "sign", "(", "tf", ".", "reduce_max", "(", "tf", ".", "abs", "(", "neigh_vecs", ")", ",", "axis", "=", "2", ")", ")", "\n", "length", "=", "tf", ".", "reduce_sum", "(", "used", ",", "axis", "=", "1", ")", "\n", "length", "=", "tf", ".", "maximum", "(", "length", ",", "tf", ".", "constant", "(", "1.", ")", ")", "\n", "length", "=", "tf", ".", "cast", "(", "length", ",", "tf", ".", "int32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "try", ":", "\n", "                ", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "self", ".", "cell", ",", "neigh_vecs", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "tf", ".", "float32", ",", "time_major", "=", "False", ",", "\n", "sequence_length", "=", "length", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "self", ".", "cell", ",", "neigh_vecs", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "tf", ".", "float32", ",", "time_major", "=", "False", ",", "\n", "sequence_length", "=", "length", ")", "\n", "", "", "batch_size", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "0", "]", "\n", "max_len", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "1", "]", "\n", "out_size", "=", "int", "(", "rnn_outputs", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "index", "=", "tf", ".", "range", "(", "0", ",", "batch_size", ")", "*", "max_len", "+", "(", "length", "-", "1", ")", "\n", "flat", "=", "tf", ".", "reshape", "(", "rnn_outputs", ",", "[", "-", "1", ",", "out_size", "]", ")", "\n", "neigh_h", "=", "tf", ".", "gather", "(", "flat", ",", "index", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.neigh_samplers.UniformNeighborSampler.__init__": [[20, 23], ["graphsage.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__"], ["def", "__init__", "(", "self", ",", "adj_info", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UniformNeighborSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "adj_info", "=", "adj_info", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.neigh_samplers.UniformNeighborSampler._call": [[24, 30], ["tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.slice", "tensorflow.random_shuffle", "tensorflow.transpose"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "ids", ",", "num_samples", "=", "inputs", "\n", "adj_lists", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "adj_info", ",", "ids", ")", "\n", "adj_lists", "=", "tf", ".", "transpose", "(", "tf", ".", "random_shuffle", "(", "tf", ".", "transpose", "(", "adj_lists", ")", ")", ")", "\n", "adj_lists", "=", "tf", ".", "slice", "(", "adj_lists", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "return", "adj_lists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer.__init__": [[13, 67], ["graphsage.layers.Layer.__init__", "tensorflow.variable_scope", "prediction.BipartiteEdgePredLayer._log_vars", "tensorflow.get_variable", "graphsage.inits.zeros", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "input_dim1", ",", "input_dim2", ",", "placeholders", ",", "dropout", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "loss_fn", "=", "'xent'", ",", "neg_sample_weights", "=", "1.0", ",", "\n", "bias", "=", "False", ",", "bilinear_weights", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Basic class that applies skip-gram-like loss\n        (i.e., dot product of node+target and node and negative samples)\n        Args:\n            bilinear_weights: use a bilinear weight for affinity calculation: u^T A v. If set to\n                false, it is assumed that input dimensions are the same and the affinity will be \n                based on dot product.\n        \"\"\"", "\n", "super", "(", "BipartiteEdgePredLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "input_dim1", "=", "input_dim1", "\n", "self", ".", "input_dim2", "=", "input_dim2", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "eps", "=", "1e-7", "\n", "\n", "# Margin for hinge loss", "\n", "self", ".", "margin", "=", "0.1", "\n", "self", ".", "neg_sample_weights", "=", "neg_sample_weights", "\n", "\n", "self", ".", "bilinear_weights", "=", "bilinear_weights", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "# output a likelihood term", "\n", "", "self", ".", "output_dim", "=", "1", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "# bilinear form", "\n", "            ", "if", "bilinear_weights", ":", "\n", "#self.vars['weights'] = glorot([input_dim1, input_dim2],", "\n", "#                              name='pred_weights')", "\n", "                ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "\n", "'pred_weights'", ",", "\n", "shape", "=", "(", "input_dim1", ",", "input_dim2", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "loss_fn", "==", "'xent'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_xent_loss", "\n", "", "elif", "loss_fn", "==", "'skipgram'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_skipgram_loss", "\n", "", "elif", "loss_fn", "==", "'hinge'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_hinge_loss", "\n", "\n", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer.affinity": [[68, 81], ["tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.transpose"], "methods", ["None"], ["", "", "def", "affinity", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "\"\"\" Affinity score between batch of inputs1 and inputs2.\n        Args:\n            inputs1: tensor of shape [batch_size x feature_size].\n        \"\"\"", "\n", "# shape: [batch_size, input_dim1]", "\n", "if", "self", ".", "bilinear_weights", ":", "\n", "            ", "prod", "=", "tf", ".", "matmul", "(", "inputs2", ",", "tf", ".", "transpose", "(", "self", ".", "vars", "[", "'weights'", "]", ")", ")", "\n", "self", ".", "prod", "=", "prod", "\n", "result", "=", "tf", ".", "reduce_sum", "(", "inputs1", "*", "prod", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "tf", ".", "reduce_sum", "(", "inputs1", "*", "inputs2", ",", "axis", "=", "1", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer.neg_cost": [[82, 93], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["None"], ["", "def", "neg_cost", "(", "self", ",", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "\"\"\" For each input in batch, compute the sum of its affinity to negative samples.\n\n        Returns:\n            Tensor of shape [batch_size x num_neg_samples]. For each node, a list of affinities to\n                negative samples is computed.\n        \"\"\"", "\n", "if", "self", ".", "bilinear_weights", ":", "\n", "            ", "inputs1", "=", "tf", ".", "matmul", "(", "inputs1", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "", "neg_aff", "=", "tf", ".", "matmul", "(", "inputs1", ",", "tf", ".", "transpose", "(", "neg_samples", ")", ")", "\n", "return", "neg_aff", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer.loss": [[94, 101], ["prediction.BipartiteEdgePredLayer.loss_fn"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ")", ":", "\n", "        ", "\"\"\" negative sampling loss.\n        Args:\n            neg_samples: tensor of shape [num_neg_samples x input_dim2]. Negative samples for all\n            inputs in batch inputs1.\n        \"\"\"", "\n", "return", "self", ".", "loss_fn", "(", "inputs1", ",", "inputs2", ",", "neg_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer._xent_loss": [[102, 111], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_xent_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "true_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "ones_like", "(", "aff", ")", ",", "logits", "=", "aff", ")", "\n", "negative_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "zeros_like", "(", "neg_aff", ")", ",", "logits", "=", "neg_aff", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "true_xent", ")", "+", "self", ".", "neg_sample_weights", "*", "tf", ".", "reduce_sum", "(", "negative_xent", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer._skipgram_loss": [[112, 118], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_skipgram_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "neg_cost", "=", "tf", ".", "log", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "neg_aff", ")", ",", "axis", "=", "1", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "aff", "-", "neg_cost", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer._hinge_loss": [[119, 126], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.subtract", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_hinge_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "diff", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "subtract", "(", "neg_aff", ",", "tf", ".", "expand_dims", "(", "aff", ",", "1", ")", "-", "self", ".", "margin", ")", ",", "name", "=", "'diff'", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "diff", ")", "\n", "self", ".", "neg_shape", "=", "tf", ".", "shape", "(", "neg_aff", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.prediction.BipartiteEdgePredLayer.weights_norm": [[127, 129], ["tensorflow.nn.l2_norm"], "methods", ["None"], ["", "def", "weights_norm", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "l2_norm", "(", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.layers.Layer.__init__": [[42, 55], ["kwargs.keys", "kwargs.get", "kwargs.get", "layers.Layer.__class__.__name__.lower", "str", "layers.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.layers.Layer._call": [[56, 58], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.layers.Layer.__call__": [[59, 67], ["tensorflow.name_scope", "layers.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GEMLayer._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.layers.Layer._log_vars": [[68, 71], ["tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.layers.Dense.__init__": [[75, 103], ["layers.Layer.__init__", "tensorflow.variable_scope", "tensorflow.get_variable", "layers.Dense._log_vars", "graphsage.inits.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dropout", "=", "0.", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "placeholders", "=", "None", ",", "bias", "=", "True", ",", "featureless", "=", "False", ",", "\n", "sparse_inputs", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "if", "sparse_inputs", ":", "\n", "            ", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "FLAGS", ".", "weight_decay", ")", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.layers.Dense._call": [[104, 117], ["tensorflow.nn.dropout", "tensorflow.matmul", "layers.Dense.act"], "methods", ["None"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.layers.get_layer_uid": [[19, 27], ["None"], "function", ["None"], ["def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_models.SupervisedGraphsage.__init__": [[13, 76], ["graphsage.GeneralizedModel.__init__", "graphsage.GeneralizedModel.__init__", "supervised_models.SupervisedGraphsage.dims.extend", "tensorflow.train.AdamOptimizer", "supervised_models.SupervisedGraphsage.build", "tensorflow.get_variable", "tensorflow.Variable", "Exception", "tensorflow.constant", "tensorflow.concat", "range", "adj.get_shape().as_list", "len", "Exception", "adj.get_shape"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "\n", "placeholders", ",", "features", ",", "adj", ",", "degrees", ",", "\n", "layer_infos", ",", "concat", "=", "True", ",", "aggregator_type", "=", "\"mean\"", ",", "\n", "model_size", "=", "\"small\"", ",", "sigmoid_loss", "=", "False", ",", "identity_dim", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            - placeholders: Stanford TensorFlow placeholder object.\n            - features: Numpy array with node features.\n            - adj: Numpy array with adjacency lists (padded with random re-samples)\n            - degrees: Numpy array with node degrees. \n            - layer_infos: List of SAGEInfo namedtuples that describe the parameters of all \n                   the recursive layers. See SAGEInfo definition above.\n            - concat: whether to concatenate during recursive iterations\n            - aggregator_type: how to aggregate neighbor information\n            - model_size: one of \"small\" and \"big\"\n            - sigmoid_loss: Set to true if nodes can belong to multiple classes\n        '''", "\n", "\n", "models", ".", "GeneralizedModel", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "\n", "if", "aggregator_type", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanAggregator", "\n", "", "elif", "aggregator_type", "==", "\"seq\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "SeqAggregator", "\n", "", "elif", "aggregator_type", "==", "\"meanpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"maxpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MaxPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"gcn\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "GCNAggregator", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown aggregator: \"", ",", "self", ".", "aggregator_cls", ")", "\n", "\n", "# get info from placeholders...", "\n", "", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch\"", "]", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "adj_info", "=", "adj", "\n", "if", "identity_dim", ">", "0", ":", "\n", "           ", "self", ".", "embeds", "=", "tf", ".", "get_variable", "(", "\"node_embeddings\"", ",", "[", "adj", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "identity_dim", "]", ")", "\n", "", "else", ":", "\n", "           ", "self", ".", "embeds", "=", "None", "\n", "", "if", "features", "is", "None", ":", "\n", "            ", "if", "identity_dim", "==", "0", ":", "\n", "                ", "raise", "Exception", "(", "\"Must have a positive value for identity feature dimension if no input features given.\"", ")", "\n", "", "self", ".", "features", "=", "self", ".", "embeds", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "trainable", "=", "False", ")", "\n", "if", "not", "self", ".", "embeds", "is", "None", ":", "\n", "                ", "self", ".", "features", "=", "tf", ".", "concat", "(", "[", "self", ".", "embeds", ",", "self", ".", "features", "]", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "sigmoid_loss", "=", "sigmoid_loss", "\n", "self", ".", "dims", "=", "[", "(", "0", "if", "features", "is", "None", "else", "features", ".", "shape", "[", "1", "]", ")", "+", "identity_dim", "]", "\n", "self", ".", "dims", ".", "extend", "(", "[", "layer_infos", "[", "i", "]", ".", "output_dim", "for", "i", "in", "range", "(", "len", "(", "layer_infos", ")", ")", "]", ")", "\n", "self", ".", "batch_size", "=", "placeholders", "[", "\"batch_size\"", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "layer_infos", "=", "layer_infos", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_models.SupervisedGraphsage.build": [[78, 101], ["supervised_models.SupervisedGraphsage.sample", "supervised_models.SupervisedGraphsage.aggregate", "tensorflow.nn.l2_normalize", "graphsage.Dense", "graphsage.Dense", "supervised_models.SupervisedGraphsage.node_pred", "supervised_models.SupervisedGraphsage._loss", "supervised_models.SupervisedGraphsage.optimizer.compute_gradients", "supervised_models.SupervisedGraphsage.optimizer.apply_gradients", "supervised_models.SupervisedGraphsage.predict", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis.predict"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "samples1", ",", "support_sizes1", "=", "self", ".", "sample", "(", "self", ".", "inputs1", ",", "self", ".", "layer_infos", ")", "\n", "num_samples", "=", "[", "layer_info", ".", "num_samples", "for", "layer_info", "in", "self", ".", "layer_infos", "]", "\n", "self", ".", "outputs1", ",", "self", ".", "aggregators", "=", "self", ".", "aggregate", "(", "samples1", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes1", ",", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "dim_mult", "=", "2", "if", "self", ".", "concat", "else", "1", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs1", ",", "1", ")", "\n", "\n", "dim_mult", "=", "2", "if", "self", ".", "concat", "else", "1", "\n", "self", ".", "node_pred", "=", "layers", ".", "Dense", "(", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "num_classes", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "act", "=", "lambda", "x", ":", "x", ")", "\n", "# TF graph management", "\n", "self", ".", "node_preds", "=", "self", ".", "node_pred", "(", "self", ".", "outputs1", ")", "\n", "\n", "self", ".", "_loss", "(", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "clipped_grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.0", ",", "5.0", ")", "if", "grad", "is", "not", "None", "else", "None", ",", "var", ")", "\n", "for", "grad", ",", "var", "in", "grads_and_vars", "]", "\n", "self", ".", "grad", ",", "_", "=", "clipped_grads_and_vars", "[", "0", "]", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "clipped_grads_and_vars", ")", "\n", "self", ".", "preds", "=", "self", ".", "predict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_models.SupervisedGraphsage._loss": [[102, 121], ["supervised_models.SupervisedGraphsage.node_pred.vars.values", "tensorflow.summary.scalar", "aggregator.vars.values", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "aggregator", "in", "self", ".", "aggregators", ":", "\n", "            ", "for", "var", "in", "aggregator", ".", "vars", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "", "", "for", "var", "in", "self", ".", "node_pred", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# classification loss", "\n", "", "if", "self", ".", "sigmoid_loss", ":", "\n", "            ", "self", ".", "loss", "+=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "node_preds", ",", "\n", "labels", "=", "self", ".", "placeholders", "[", "'labels'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "+=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "node_preds", ",", "\n", "labels", "=", "self", ".", "placeholders", "[", "'labels'", "]", ")", ")", "\n", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_models.SupervisedGraphsage.predict": [[122, 127], ["tensorflow.nn.sigmoid", "tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sigmoid_loss", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "node_preds", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "node_preds", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.__init__": [[22, 55], ["G.nodes", "numpy.random.permutation", "minibatch.EdgeMinibatchIterator.construct_adj", "minibatch.EdgeMinibatchIterator.construct_test_adj", "numpy.random.permutation", "print", "print", "len", "G.nodes", "G.edges", "minibatch.EdgeMinibatchIterator._remove_isolated", "len", "len", "minibatch.EdgeMinibatchIterator._n2v_prune", "G.edges", "G.nodes", "G.nodes"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_test_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator._remove_isolated", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator._n2v_prune"], ["def", "__init__", "(", "self", ",", "G", ",", "id2idx", ",", "\n", "placeholders", ",", "context_pairs", "=", "None", ",", "batch_size", "=", "100", ",", "max_degree", "=", "25", ",", "\n", "n2v_retrain", "=", "False", ",", "fixed_n2v", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "G", "=", "G", "\n", "self", ".", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "self", ".", "id2idx", "=", "id2idx", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n", "self", ".", "nodes", "=", "np", ".", "random", ".", "permutation", "(", "G", ".", "nodes", "(", ")", ")", "\n", "self", ".", "adj", ",", "self", ".", "deg", "=", "self", ".", "construct_adj", "(", ")", "\n", "self", ".", "test_adj", "=", "self", ".", "construct_test_adj", "(", ")", "\n", "if", "context_pairs", "is", "None", ":", "\n", "            ", "edges", "=", "G", ".", "edges", "(", ")", "\n", "", "else", ":", "\n", "            ", "edges", "=", "context_pairs", "\n", "", "self", ".", "train_edges", "=", "self", ".", "edges", "=", "np", ".", "random", ".", "permutation", "(", "edges", ")", "\n", "if", "not", "n2v_retrain", ":", "\n", "            ", "self", ".", "train_edges", "=", "self", ".", "_remove_isolated", "(", "self", ".", "train_edges", ")", "\n", "self", ".", "val_edges", "=", "[", "e", "for", "e", "in", "G", ".", "edges", "(", ")", "if", "G", "[", "e", "[", "0", "]", "]", "[", "e", "[", "1", "]", "]", "[", "'train_removed'", "]", "]", "\n", "", "else", ":", "\n", "            ", "if", "fixed_n2v", ":", "\n", "                ", "self", ".", "train_edges", "=", "self", ".", "val_edges", "=", "self", ".", "_n2v_prune", "(", "self", ".", "edges", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_edges", "=", "self", ".", "val_edges", "=", "self", ".", "edges", "\n", "\n", "", "", "print", "(", "len", "(", "[", "n", "for", "n", "in", "G", ".", "nodes", "(", ")", "if", "not", "G", ".", "node", "[", "n", "]", "[", "'test'", "]", "and", "not", "G", ".", "node", "[", "n", "]", "[", "'val'", "]", "]", ")", ",", "'train nodes'", ")", "\n", "print", "(", "len", "(", "[", "n", "for", "n", "in", "G", ".", "nodes", "(", ")", "if", "G", ".", "node", "[", "n", "]", "[", "'test'", "]", "or", "G", ".", "node", "[", "n", "]", "[", "'val'", "]", "]", ")", ",", "'test nodes'", ")", "\n", "self", ".", "val_set_size", "=", "len", "(", "self", ".", "val_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator._n2v_prune": [[56, 59], ["is_val"], "methods", ["None"], ["", "def", "_n2v_prune", "(", "self", ",", "edges", ")", ":", "\n", "        ", "is_val", "=", "lambda", "n", ":", "self", ".", "G", ".", "node", "[", "n", "]", "[", "\"val\"", "]", "or", "self", ".", "G", ".", "node", "[", "n", "]", "[", "\"test\"", "]", "\n", "return", "[", "e", "for", "e", "in", "edges", "if", "not", "is_val", "(", "e", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator._remove_isolated": [[60, 75], ["print", "new_edge_list.append"], "methods", ["None"], ["", "def", "_remove_isolated", "(", "self", ",", "edge_list", ")", ":", "\n", "        ", "new_edge_list", "=", "[", "]", "\n", "missing", "=", "0", "\n", "for", "n1", ",", "n2", "in", "edge_list", ":", "\n", "            ", "if", "not", "n1", "in", "self", ".", "G", ".", "node", "or", "not", "n2", "in", "self", ".", "G", ".", "node", ":", "\n", "                ", "missing", "+=", "1", "\n", "continue", "\n", "", "if", "(", "self", ".", "deg", "[", "self", ".", "id2idx", "[", "n1", "]", "]", "==", "0", "or", "self", ".", "deg", "[", "self", ".", "id2idx", "[", "n2", "]", "]", "==", "0", ")", "and", "(", "not", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'val'", "]", ")", "and", "(", "not", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'val'", "]", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "new_edge_list", ".", "append", "(", "(", "n1", ",", "n2", ")", ")", "\n", "", "", "print", "(", "\"Unexpected missing:\"", ",", "missing", ")", "\n", "return", "new_edge_list", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.construct_adj": [[76, 95], ["numpy.zeros", "minibatch.EdgeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.EdgeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "id2idx", ")", ",", ")", ")", "\n", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "if", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'val'", "]", ":", "\n", "                ", "continue", "\n", "", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "\n", "if", "(", "not", "self", ".", "G", "[", "nodeid", "]", "[", "neighbor", "]", "[", "'train_removed'", "]", ")", "]", ")", "\n", "deg", "[", "self", ".", "id2idx", "[", "nodeid", "]", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.construct_test_adj": [[96, 109], ["minibatch.EdgeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.EdgeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_test_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "]", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.end": [[110, 112], ["len"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_num", "*", "self", ".", "batch_size", ">=", "len", "(", "self", ".", "train_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.batch_feed_dict": [[113, 126], ["dict", "dict.update", "dict.update", "dict.update", "batch1.append", "batch2.append", "len"], "methods", ["None"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_edges", ")", ":", "\n", "        ", "batch1", "=", "[", "]", "\n", "batch2", "=", "[", "]", "\n", "for", "node1", ",", "node2", "in", "batch_edges", ":", "\n", "            ", "batch1", ".", "append", "(", "self", ".", "id2idx", "[", "node1", "]", ")", "\n", "batch2", ".", "append", "(", "self", ".", "id2idx", "[", "node2", "]", ")", "\n", "\n", "", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_edges", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch1'", "]", ":", "batch1", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch2'", "]", ":", "batch2", "}", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.next_minibatch_feed_dict": [[127, 133], ["min", "minibatch.EdgeMinibatchIterator.batch_feed_dict", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "        ", "start_idx", "=", "self", ".", "batch_num", "*", "self", ".", "batch_size", "\n", "self", ".", "batch_num", "+=", "1", "\n", "end_idx", "=", "min", "(", "start_idx", "+", "self", ".", "batch_size", ",", "len", "(", "self", ".", "train_edges", ")", ")", "\n", "batch_edges", "=", "self", ".", "train_edges", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "batch_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.num_training_batches": [[134, 136], ["len"], "methods", ["None"], ["", "def", "num_training_batches", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_edges", ")", "//", "self", ".", "batch_size", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.val_feed_dict": [[137, 145], ["minibatch.EdgeMinibatchIterator.batch_feed_dict", "numpy.random.permutation", "minibatch.EdgeMinibatchIterator.batch_feed_dict", "len", "min", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "val_feed_dict", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "edge_list", "=", "self", ".", "val_edges", "\n", "if", "size", "is", "None", ":", "\n", "            ", "return", "self", ".", "batch_feed_dict", "(", "edge_list", ")", "\n", "", "else", ":", "\n", "            ", "ind", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "edge_list", ")", ")", "\n", "val_edges", "=", "[", "edge_list", "[", "i", "]", "for", "i", "in", "ind", "[", ":", "min", "(", "size", ",", "len", "(", "ind", ")", ")", "]", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.incremental_val_feed_dict": [[146, 151], ["minibatch.EdgeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "", "def", "incremental_val_feed_dict", "(", "self", ",", "size", ",", "iter_num", ")", ":", "\n", "        ", "edge_list", "=", "self", ".", "val_edges", "\n", "val_edges", "=", "edge_list", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "edge_list", ")", ")", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_edges", ")", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "self", ".", "val_edges", ")", ",", "val_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.incremental_embed_feed_dict": [[152, 158], ["minibatch.EdgeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "incremental_embed_feed_dict", "(", "self", ",", "size", ",", "iter_num", ")", ":", "\n", "        ", "node_list", "=", "self", ".", "nodes", "\n", "val_nodes", "=", "node_list", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "node_list", ")", ")", "]", "\n", "val_edges", "=", "[", "(", "n", ",", "n", ")", "for", "n", "in", "val_nodes", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_edges", ")", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "node_list", ")", ",", "val_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.label_val": [[159, 169], ["minibatch.EdgeMinibatchIterator.G.edges", "val_edges.append", "train_edges.append"], "methods", ["None"], ["", "def", "label_val", "(", "self", ")", ":", "\n", "        ", "train_edges", "=", "[", "]", "\n", "val_edges", "=", "[", "]", "\n", "for", "n1", ",", "n2", "in", "self", ".", "G", ".", "edges", "(", ")", ":", "\n", "            ", "if", "(", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'val'", "]", "or", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'test'", "]", "\n", "or", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'val'", "]", "or", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'test'", "]", ")", ":", "\n", "                ", "val_edges", ".", "append", "(", "(", "n1", ",", "n2", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_edges", ".", "append", "(", "(", "n1", ",", "n2", ")", ")", "\n", "", "", "return", "train_edges", ",", "val_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.EdgeMinibatchIterator.shuffle": [[170, 177], ["numpy.random.permutation", "numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_edges", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_edges", ")", "\n", "self", ".", "nodes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "nodes", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.__init__": [[191, 216], ["G.nodes", "minibatch.NodeMinibatchIterator.construct_adj", "minibatch.NodeMinibatchIterator.construct_test_adj", "set", "set().difference", "minibatch.NodeMinibatchIterator.G.nodes", "minibatch.NodeMinibatchIterator.G.nodes", "set", "G.nodes"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_test_adj"], ["def", "__init__", "(", "self", ",", "G", ",", "id2idx", ",", "\n", "placeholders", ",", "label_map", ",", "num_classes", ",", "\n", "batch_size", "=", "100", ",", "max_degree", "=", "25", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "G", "=", "G", "\n", "self", ".", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "self", ".", "id2idx", "=", "id2idx", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "batch_num", "=", "0", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "adj", ",", "self", ".", "deg", "=", "self", ".", "construct_adj", "(", ")", "\n", "self", ".", "test_adj", "=", "self", ".", "construct_test_adj", "(", ")", "\n", "\n", "self", ".", "val_nodes", "=", "[", "n", "for", "n", "in", "self", ".", "G", ".", "nodes", "(", ")", "if", "self", ".", "G", ".", "node", "[", "n", "]", "[", "'val'", "]", "]", "\n", "self", ".", "test_nodes", "=", "[", "n", "for", "n", "in", "self", ".", "G", ".", "nodes", "(", ")", "if", "self", ".", "G", ".", "node", "[", "n", "]", "[", "'test'", "]", "]", "\n", "\n", "self", ".", "no_train_nodes_set", "=", "set", "(", "self", ".", "val_nodes", "+", "self", ".", "test_nodes", ")", "\n", "self", ".", "train_nodes", "=", "set", "(", "G", ".", "nodes", "(", ")", ")", ".", "difference", "(", "self", ".", "no_train_nodes_set", ")", "\n", "# don't train on nodes that only have edges to test set", "\n", "self", ".", "train_nodes", "=", "[", "n", "for", "n", "in", "self", ".", "train_nodes", "if", "self", ".", "deg", "[", "id2idx", "[", "n", "]", "]", ">", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator._make_label_vec": [[217, 226], ["isinstance", "numpy.array", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["", "def", "_make_label_vec", "(", "self", ",", "node", ")", ":", "\n", "        ", "label", "=", "self", ".", "label_map", "[", "node", "]", "\n", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "            ", "label_vec", "=", "np", ".", "array", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "label_vec", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ")", ")", "\n", "class_ind", "=", "self", ".", "label_map", "[", "node", "]", "\n", "label_vec", "[", "class_ind", "]", "=", "1", "\n", "", "return", "label_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.construct_adj": [[227, 246], ["numpy.zeros", "minibatch.NodeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.NodeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "id2idx", ")", ",", ")", ")", "\n", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "if", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'val'", "]", ":", "\n", "                ", "continue", "\n", "", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "\n", "if", "(", "not", "self", ".", "G", "[", "nodeid", "]", "[", "neighbor", "]", "[", "'train_removed'", "]", ")", "]", ")", "\n", "deg", "[", "self", ".", "id2idx", "[", "nodeid", "]", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.construct_test_adj": [[247, 260], ["minibatch.NodeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.NodeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_test_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "]", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.end": [[261, 263], ["len"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_num", "*", "self", ".", "batch_size", ">=", "len", "(", "self", ".", "train_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.batch_feed_dict": [[264, 275], ["numpy.vstack", "dict", "dict.update", "dict.update", "dict.update", "minibatch.NodeMinibatchIterator._make_label_vec", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator._make_label_vec"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "val", "=", "False", ")", ":", "\n", "        ", "batch1id", "=", "batch_nodes", "\n", "batch1", "=", "[", "self", ".", "id2idx", "[", "n", "]", "for", "n", "in", "batch1id", "]", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "[", "self", ".", "_make_label_vec", "(", "node", ")", "for", "node", "in", "batch1id", "]", ")", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch1", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch1", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'labels'", "]", ":", "labels", "}", ")", "\n", "\n", "return", "feed_dict", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.node_val_feed_dict": [[276, 286], ["minibatch.NodeMinibatchIterator.batch_feed_dict", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "node_val_feed_dict", "(", "self", ",", "size", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "test", ":", "\n", "            ", "val_nodes", "=", "self", ".", "test_nodes", "\n", "", "else", ":", "\n", "            ", "val_nodes", "=", "self", ".", "val_nodes", "\n", "", "if", "not", "size", "is", "None", ":", "\n", "            ", "val_nodes", "=", "np", ".", "random", ".", "choice", "(", "val_nodes", ",", "size", ",", "replace", "=", "True", ")", "\n", "# add a dummy neighbor", "\n", "", "ret_val", "=", "self", ".", "batch_feed_dict", "(", "val_nodes", ")", "\n", "return", "ret_val", "[", "0", "]", ",", "ret_val", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.incremental_node_val_feed_dict": [[287, 298], ["minibatch.NodeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "incremental_node_val_feed_dict", "(", "self", ",", "size", ",", "iter_num", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "test", ":", "\n", "            ", "val_nodes", "=", "self", ".", "test_nodes", "\n", "", "else", ":", "\n", "            ", "val_nodes", "=", "self", ".", "val_nodes", "\n", "", "val_node_subset", "=", "val_nodes", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "val_nodes", ")", ")", "]", "\n", "\n", "# add a dummy neighbor", "\n", "ret_val", "=", "self", ".", "batch_feed_dict", "(", "val_node_subset", ")", "\n", "return", "ret_val", "[", "0", "]", ",", "ret_val", "[", "1", "]", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "val_nodes", ")", ",", "val_node_subset", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.num_training_batches": [[299, 301], ["len"], "methods", ["None"], ["", "def", "num_training_batches", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_nodes", ")", "//", "self", ".", "batch_size", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.next_minibatch_feed_dict": [[302, 308], ["min", "minibatch.NodeMinibatchIterator.batch_feed_dict", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "        ", "start_idx", "=", "self", ".", "batch_num", "*", "self", ".", "batch_size", "\n", "self", ".", "batch_num", "+=", "1", "\n", "end_idx", "=", "min", "(", "start_idx", "+", "self", ".", "batch_size", ",", "len", "(", "self", ".", "train_nodes", ")", ")", "\n", "batch_nodes", "=", "self", ".", "train_nodes", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "batch_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.incremental_embed_feed_dict": [[309, 314], ["minibatch.NodeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "incremental_embed_feed_dict", "(", "self", ",", "size", ",", "iter_num", ")", ":", "\n", "        ", "node_list", "=", "self", ".", "nodes", "\n", "val_nodes", "=", "node_list", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "node_list", ")", ")", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_nodes", ")", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "node_list", ")", ",", "val_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.minibatch.NodeMinibatchIterator.shuffle": [[315, 321], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_nodes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_nodes", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.calc_f1": [[63, 71], ["numpy.argmax", "numpy.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score"], "function", ["None"], ["def", "calc_f1", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "if", "not", "FLAGS", ".", "sigmoid", ":", "\n", "        ", "y_true", "=", "np", ".", "argmax", "(", "y_true", ",", "axis", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "y_pred", "[", "y_pred", ">", "0.5", "]", "=", "1", "\n", "y_pred", "[", "y_pred", "<=", "0.5", "]", "=", "0", "\n", "", "return", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"micro\"", ")", ",", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"macro\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.evaluate": [[73, 80], ["time.time", "minibatch_iter.node_val_feed_dict", "sess.run", "supervised_train.calc_f1", "time.time"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.node_val_feed_dict", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.calc_f1"], ["", "def", "evaluate", "(", "sess", ",", "model", ",", "minibatch_iter", ",", "size", "=", "None", ")", ":", "\n", "    ", "t_test", "=", "time", ".", "time", "(", ")", "\n", "feed_dict_val", ",", "labels", "=", "minibatch_iter", ".", "node_val_feed_dict", "(", "size", ")", "\n", "node_outs_val", "=", "sess", ".", "run", "(", "[", "model", ".", "preds", ",", "model", ".", "loss", "]", ",", "\n", "feed_dict", "=", "feed_dict_val", ")", "\n", "mic", ",", "mac", "=", "calc_f1", "(", "labels", ",", "node_outs_val", "[", "0", "]", ")", "\n", "return", "node_outs_val", "[", "1", "]", ",", "mic", ",", "mac", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.log_dir": [[81, 90], ["os.path.exists", "os.makedirs", "FLAGS.train_prefix.split"], "function", ["None"], ["", "def", "log_dir", "(", ")", ":", "\n", "    ", "log_dir", "=", "FLAGS", ".", "base_log_dir", "+", "\"/sup-\"", "+", "FLAGS", ".", "train_prefix", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "log_dir", "+=", "\"/{model:s}_{model_size:s}_{lr:0.4f}/\"", ".", "format", "(", "\n", "model", "=", "FLAGS", ".", "model", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "lr", "=", "FLAGS", ".", "learning_rate", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.incremental_evaluate": [[91, 111], ["time.time", "numpy.vstack", "numpy.vstack", "supervised_train.calc_f1", "minibatch_iter.incremental_node_val_feed_dict", "sess.run", "np.vstack.append", "np.vstack.append", "val_losses.append", "numpy.mean", "time.time"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.calc_f1", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.incremental_node_val_feed_dict"], ["", "def", "incremental_evaluate", "(", "sess", ",", "model", ",", "minibatch_iter", ",", "size", ",", "test", "=", "False", ")", ":", "\n", "    ", "t_test", "=", "time", ".", "time", "(", ")", "\n", "finished", "=", "False", "\n", "val_losses", "=", "[", "]", "\n", "val_preds", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "iter_num", "=", "0", "\n", "finished", "=", "False", "\n", "while", "not", "finished", ":", "\n", "        ", "feed_dict_val", ",", "batch_labels", ",", "finished", ",", "_", "=", "minibatch_iter", ".", "incremental_node_val_feed_dict", "(", "size", ",", "iter_num", ",", "test", "=", "test", ")", "\n", "node_outs_val", "=", "sess", ".", "run", "(", "[", "model", ".", "preds", ",", "model", ".", "loss", "]", ",", "\n", "feed_dict", "=", "feed_dict_val", ")", "\n", "val_preds", ".", "append", "(", "node_outs_val", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "batch_labels", ")", "\n", "val_losses", ".", "append", "(", "node_outs_val", "[", "1", "]", ")", "\n", "iter_num", "+=", "1", "\n", "", "val_preds", "=", "np", ".", "vstack", "(", "val_preds", ")", "\n", "labels", "=", "np", ".", "vstack", "(", "labels", ")", "\n", "f1_scores", "=", "calc_f1", "(", "labels", ",", "val_preds", ")", "\n", "return", "np", ".", "mean", "(", "val_losses", ")", ",", "f1_scores", "[", "0", "]", ",", "f1_scores", "[", "1", "]", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.construct_placeholders": [[112, 121], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder"], "function", ["None"], ["", "def", "construct_placeholders", "(", "num_classes", ")", ":", "\n", "# Define placeholders", "\n", "    ", "placeholders", "=", "{", "\n", "'labels'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "num_classes", ")", ",", "name", "=", "'labels'", ")", ",", "\n", "'batch'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'batch1'", ")", ",", "\n", "'dropout'", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ",", "name", "=", "'dropout'", ")", ",", "\n", "'batch_size'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'batch_size'", ")", ",", "\n", "}", "\n", "return", "placeholders", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.train": [[122, 331], ["isinstance", "supervised_train.construct_placeholders", "graphsage.minibatch.NodeMinibatchIterator", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tf.Session.run", "tensorflow.assign", "tensorflow.assign", "range", "print", "tf.Session.run", "supervised_train.incremental_evaluate", "print", "print", "supervised_train.incremental_evaluate", "len", "len", "numpy.vstack", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "supervised_train.log_dir", "tensorflow.global_variables_initializer", "graphsage.minibatch.NodeMinibatchIterator.shuffle", "print", "epoch_val_costs.append", "open", "fp.write", "open", "fp.write", "list", "set", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "graphsage.minibatch.NodeMinibatchIterator.end", "graphsage.minibatch.NodeMinibatchIterator.next_minibatch_feed_dict", "feed_dict.update", "time.time", "tf.Session.run", "class_map.values", "list", "class_map.values", "numpy.zeros", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "tf.Session.run", "tf.Session.run", "tf.summary.FileWriter.add_summary", "supervised_train.calc_f1", "print", "supervised_train.log_dir", "supervised_train.log_dir", "class_map.values", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "supervised_train.incremental_evaluate", "supervised_train.evaluate", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo", "graphsage.neigh_samplers.UniformNeighborSampler", "graphsage.supervised_models.SupervisedGraphsage", "Exception", "time.time", "graphsage.models.SAGEInfo", "graphsage.models.SAGEInfo"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.construct_placeholders", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.incremental_evaluate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.incremental_evaluate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.log_dir", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.shuffle", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.end", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.next_minibatch_feed_dict", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.calc_f1", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.log_dir", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.log_dir", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.incremental_evaluate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.evaluate"], ["", "def", "train", "(", "train_data", ",", "test_data", "=", "None", ")", ":", "\n", "\n", "    ", "G", "=", "train_data", "[", "0", "]", "\n", "features", "=", "train_data", "[", "1", "]", "\n", "id_map", "=", "train_data", "[", "2", "]", "\n", "class_map", "=", "train_data", "[", "4", "]", "\n", "if", "isinstance", "(", "list", "(", "class_map", ".", "values", "(", ")", ")", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "num_classes", "=", "len", "(", "list", "(", "class_map", ".", "values", "(", ")", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "len", "(", "set", "(", "class_map", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "if", "not", "features", "is", "None", ":", "\n", "# pad with dummy zero vector  ", "\n", "        ", "features", "=", "np", ".", "vstack", "(", "[", "features", ",", "np", ".", "zeros", "(", "(", "features", ".", "shape", "[", "1", "]", ",", ")", ")", "]", ")", "\n", "\n", "", "context_pairs", "=", "train_data", "[", "3", "]", "if", "FLAGS", ".", "random_context", "else", "None", "\n", "placeholders", "=", "construct_placeholders", "(", "num_classes", ")", "\n", "minibatch", "=", "NodeMinibatchIterator", "(", "G", ",", "\n", "id_map", ",", "\n", "placeholders", ",", "\n", "class_map", ",", "\n", "num_classes", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "max_degree", "=", "FLAGS", ".", "max_degree", ",", "\n", "context_pairs", "=", "context_pairs", ")", "\n", "adj_info_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "minibatch", ".", "adj", ".", "shape", ")", "\n", "adj_info", "=", "tf", ".", "Variable", "(", "adj_info_ph", ",", "trainable", "=", "False", ",", "name", "=", "\"adj_info\"", ")", "\n", "\n", "if", "FLAGS", ".", "model", "==", "'graphsage_mean'", ":", "\n", "# Create model", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "if", "FLAGS", ".", "samples_3", "!=", "0", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_3", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "", "elif", "FLAGS", ".", "samples_2", "!=", "0", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "", "else", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", "]", "\n", "\n", "", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "", "elif", "FLAGS", ".", "model", "==", "'gcn'", ":", "\n", "# Create model", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "2", "*", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "2", "*", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"gcn\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "concat", "=", "False", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_seq'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"seq\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_maxpool'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"maxpool\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_meanpool'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"meanpool\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Error: model name unrecognized.'", ")", "\n", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "#config.gpu_options.per_process_gpu_memory_fraction = GPU_MEM_FRACTION", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "\n", "# Initialize session", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", "(", ")", ",", "sess", ".", "graph", ")", "\n", "\n", "# Init variables", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "feed_dict", "=", "{", "adj_info_ph", ":", "minibatch", ".", "adj", "}", ")", "\n", "\n", "# Train model", "\n", "\n", "total_steps", "=", "0", "\n", "avg_time", "=", "0.0", "\n", "epoch_val_costs", "=", "[", "]", "\n", "\n", "train_adj_info", "=", "tf", ".", "assign", "(", "adj_info", ",", "minibatch", ".", "adj", ")", "\n", "val_adj_info", "=", "tf", ".", "assign", "(", "adj_info", ",", "minibatch", ".", "test_adj", ")", "\n", "for", "epoch", "in", "range", "(", "FLAGS", ".", "epochs", ")", ":", "\n", "        ", "minibatch", ".", "shuffle", "(", ")", "\n", "\n", "iter", "=", "0", "\n", "print", "(", "'Epoch: %04d'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "epoch_val_costs", ".", "append", "(", "0", ")", "\n", "while", "not", "minibatch", ".", "end", "(", ")", ":", "\n", "# Construct feed dictionary", "\n", "            ", "feed_dict", ",", "labels", "=", "minibatch", ".", "next_minibatch_feed_dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'dropout'", "]", ":", "FLAGS", ".", "dropout", "}", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "# Training step", "\n", "outs", "=", "sess", ".", "run", "(", "[", "merged", ",", "model", ".", "opt_op", ",", "model", ".", "loss", ",", "model", ".", "preds", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_cost", "=", "outs", "[", "2", "]", "\n", "\n", "if", "iter", "%", "FLAGS", ".", "validate_iter", "==", "0", ":", "\n", "# Validation", "\n", "                ", "sess", ".", "run", "(", "val_adj_info", ".", "op", ")", "\n", "if", "FLAGS", ".", "validate_batch_size", "==", "-", "1", ":", "\n", "                    ", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "incremental_evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "                    ", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "validate_batch_size", ")", "\n", "", "sess", ".", "run", "(", "train_adj_info", ".", "op", ")", "\n", "epoch_val_costs", "[", "-", "1", "]", "+=", "val_cost", "\n", "\n", "", "if", "total_steps", "%", "FLAGS", ".", "print_every", "==", "0", ":", "\n", "                ", "summary_writer", ".", "add_summary", "(", "outs", "[", "0", "]", ",", "total_steps", ")", "\n", "\n", "# Print results", "\n", "", "avg_time", "=", "(", "avg_time", "*", "total_steps", "+", "time", ".", "time", "(", ")", "-", "t", ")", "/", "(", "total_steps", "+", "1", ")", "\n", "\n", "if", "total_steps", "%", "FLAGS", ".", "print_every", "==", "0", ":", "\n", "                ", "train_f1_mic", ",", "train_f1_mac", "=", "calc_f1", "(", "labels", ",", "outs", "[", "-", "1", "]", ")", "\n", "print", "(", "\"Iter:\"", ",", "'%04d'", "%", "iter", ",", "\n", "\"train_loss=\"", ",", "\"{:.5f}\"", ".", "format", "(", "train_cost", ")", ",", "\n", "\"train_f1_mic=\"", ",", "\"{:.5f}\"", ".", "format", "(", "train_f1_mic", ")", ",", "\n", "\"train_f1_mac=\"", ",", "\"{:.5f}\"", ".", "format", "(", "train_f1_mac", ")", ",", "\n", "\"val_loss=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_cost", ")", ",", "\n", "\"val_f1_mic=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mic", ")", ",", "\n", "\"val_f1_mac=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mac", ")", ",", "\n", "\"time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "avg_time", ")", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "total_steps", "+=", "1", "\n", "\n", "if", "total_steps", ">", "FLAGS", ".", "max_total_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "total_steps", ">", "FLAGS", ".", "max_total_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "sess", ".", "run", "(", "val_adj_info", ".", "op", ")", "\n", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "incremental_evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "batch_size", ")", "\n", "print", "(", "\"Full validation stats:\"", ",", "\n", "\"loss=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_cost", ")", ",", "\n", "\"f1_micro=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mic", ")", ",", "\n", "\"f1_macro=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mac", ")", ",", "\n", "\"time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "duration", ")", ")", "\n", "with", "open", "(", "log_dir", "(", ")", "+", "\"val_stats.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "\"loss={:.5f} f1_micro={:.5f} f1_macro={:.5f} time={:.5f}\"", ".", "\n", "format", "(", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", ")", ")", "\n", "\n", "", "print", "(", "\"Writing test set stats to file (don't peak!)\"", ")", "\n", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "incremental_evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "batch_size", ",", "test", "=", "True", ")", "\n", "with", "open", "(", "log_dir", "(", ")", "+", "\"test_stats.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "\"loss={:.5f} f1_micro={:.5f} f1_macro={:.5f}\"", ".", "\n", "format", "(", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.supervised_train.main": [[332, 337], ["print", "graphsage.utils.load_data", "print", "supervised_train.train"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.load_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Loading training data..\"", ")", "\n", "train_data", "=", "load_data", "(", "FLAGS", ".", "train_prefix", ")", "\n", "print", "(", "\"Done loading training data..\"", ")", "\n", "train", "(", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.inits.uniform": [[9, 13], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.inits.glorot": [[15, 20], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.inits.zeros": [[22, 26], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.inits.ones": [[27, 31], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.utils.load_data_dblp": [[21, 37], ["scipy.loadmat", "features.todense.todense", "range", "int", "set", "set().difference", "data[].astype", "truelabels.tolist", "len", "numpy.random.choice", "len", "set"], "function", ["None"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'x'", "]", ":", "x", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'a'", "]", ":", "a", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'t'", "]", ":", "t", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "x", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "# Construct feed dictionary for SemiGNN", "\n", "", "def", "construct_feed_dict_semi", "(", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "learning_rate", ",", "momentum", ",", "\n", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'a'", "]", ":", "a", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'u_i'", "]", ":", "u_i", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'u_j'", "]", ":", "u_j", "}", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.utils.load_data": [[38, 78], ["utils.load_data_dblp", "G.nodes", "G.nodes", "print", "print", "G.edges", "networkx.to_networkx_graph", "int", "int", "numpy.array", "StandardScaler", "StandardScaler.fit", "StandardScaler.transform", "range", "range", "feats[].tolist", "G.remove_node", "open", "len", "len", "walks.append", "G.nodes", "map", "line.split"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'graph_label'", "]", ":", "batch_graph_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "batch_data", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'sup_label'", "]", ":", "batch_sup_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "# Construct feed dictionary for SemiGNN", "\n", "", "def", "construct_feed_dict_spam", "(", "h", ",", "adj_info", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_review_adj'", "]", ":", "adj_info", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_item_adj'", "]", ":", "adj_info", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_review_adj'", "]", ":", "adj_info", "[", "2", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_user_adj'", "]", ":", "adj_info", "[", "3", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_user_adj'", "]", ":", "adj_info", "[", "4", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_item_adj'", "]", ":", "adj_info", "[", "5", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'homo_adj'", "]", ":", "adj_info", "[", "6", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_vecs'", "]", ":", "h", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_vecs'", "]", ":", "h", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_vecs'", "]", ":", "h", "[", "2", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'t'", "]", ":", "t", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "h", "[", "0", "]", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "", "def", "pad_adjlist", "(", "x_data", ")", ":", "\n", "# Get lengths of each row of data", "\n", "    ", "lens", "=", "np", ".", "array", "(", "[", "len", "(", "x_data", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "x_data", ")", ")", "]", ")", "\n", "\n", "# Mask of valid places in each row", "\n", "mask", "=", "np", ".", "arange", "(", "lens", ".", "max", "(", ")", ")", "<", "lens", "[", ":", ",", "None", "]", "\n", "\n", "# Setup output array and put elements from data into masked positions", "\n", "padded", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "padded", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "x_data", "[", "i", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", "\n", "", "padded", "[", "mask", "]", "=", "np", ".", "hstack", "(", "(", "x_data", "[", ":", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.utils.load_data_ori": [[81, 138], ["json.load", "networkx.readwrite.json_graph.node_link_graph", "isinstance", "os.path.exists", "json.load", "json.load", "isinstance", "json_graph.node_link_graph.nodes", "print", "print", "json_graph.node_link_graph.edges", "open", "numpy.load", "print", "open", "conversion", "int", "open", "conversion", "lab_conversion", "numpy.array", "StandardScaler", "StandardScaler.fit", "StandardScaler.transform", "json_graph.node_link_graph.nodes", "int", "json.load.items", "list", "int", "json.load.items", "json_graph.node_link_graph.remove_node", "open", "json.load.values", "walks.append", "json_graph.node_link_graph.nodes", "map", "line.split"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.load", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.load", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.load", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.load"], ["\n", "", "def", "matrix_to_adjlist", "(", "M", ",", "pad", "=", "True", ")", ":", "\n", "    ", "adjlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "M", ")", ")", ":", "\n", "        ", "adjline", "=", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "M", "[", "i", "]", ")", ")", ":", "\n", "            ", "if", "M", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "                ", "adjline", ".", "append", "(", "j", ")", "\n", "", "", "adjlist", ".", "append", "(", "adjline", ")", "\n", "", "if", "pad", ":", "\n", "        ", "adjlist", "=", "pad_adjlist", "(", "adjlist", ")", "\n", "", "return", "adjlist", "\n", "\n", "\n", "", "def", "adjlist_to_matrix", "(", "adjlist", ")", ":", "\n", "    ", "nodes", "=", "len", "(", "adjlist", ")", "\n", "M", "=", "np", ".", "zeros", "(", "(", "nodes", ",", "nodes", ")", ")", "\n", "for", "i", "in", "range", "(", "nodes", ")", ":", "\n", "        ", "for", "j", "in", "adjlist", "[", "i", "]", ":", "\n", "            ", "M", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "", "return", "M", "\n", "\n", "\n", "", "def", "pairs_to_matrix", "(", "pairs", ",", "nodes", ")", ":", "\n", "    ", "M", "=", "np", ".", "zeros", "(", "(", "nodes", ",", "nodes", ")", ")", "\n", "for", "i", ",", "j", "in", "pairs", ":", "\n", "        ", "M", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "return", "M", "\n", "\n", "\n", "# Random walk on graph", "\n", "", "def", "generate_random_walk", "(", "adjlist", ",", "start", ",", "walklength", ")", ":", "\n", "    ", "t", "=", "1", "\n", "walk_path", "=", "np", ".", "array", "(", "[", "start", "]", ")", "\n", "while", "t", "<=", "walklength", ":", "\n", "        ", "neighbors", "=", "adjlist", "[", "start", "]", "\n", "current", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ")", "\n", "walk_path", "=", "np", ".", "append", "(", "walk_path", ",", "current", ")", "\n", "start", "=", "current", "\n", "t", "+=", "1", "\n", "", "return", "walk_path", "\n", "\n", "\n", "#  sample multiple times for each node", "\n", "", "def", "random_walks", "(", "adjlist", ",", "numerate", ",", "walklength", ")", ":", "\n", "    ", "nodes", "=", "range", "(", "0", ",", "len", "(", "adjlist", ")", ")", "# node index starts from zero", "\n", "walks", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "numerate", ")", ":", "\n", "        ", "for", "node", "in", "nodes", ":", "\n", "            ", "walks", ".", "append", "(", "generate_random_walk", "(", "adjlist", ",", "node", ",", "walklength", ")", ")", "\n", "", "", "pairs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "walks", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "walks", "[", "i", "]", ")", ")", ":", "\n", "            ", "pair", "=", "[", "walks", "[", "i", "]", "[", "0", "]", ",", "walks", "[", "i", "]", "[", "j", "]", "]", "\n", "", "pairs", ".", "append", "(", "pair", ")", "\n", "", "return", "pairs", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphSage.utils.run_random_walks": [[139, 155], ["enumerate", "range", "G.degree", "range", "print", "random.choice", "G.neighbors", "pairs.append"], "function", ["None"], ["", "def", "negative_sampling", "(", "adj_nodelist", ")", ":", "\n", "    ", "degree", "=", "[", "len", "(", "neighbors", ")", "for", "neighbors", "in", "adj_nodelist", "]", "\n", "node_negative_distribution", "=", "np", ".", "power", "(", "np", ".", "array", "(", "degree", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0.75", ")", "\n", "node_negative_distribution", "/=", "np", ".", "sum", "(", "node_negative_distribution", ")", "\n", "node_sampling", "=", "AliasSampling", "(", "prob", "=", "node_negative_distribution", ")", "\n", "return", "node_negative_distribution", ",", "node_sampling", "\n", "\n", "\n", "", "def", "get_negative_sampling", "(", "pairs", ",", "adj_nodelist", ",", "Q", "=", "3", ",", "node_sampling", "=", "'atlas'", ")", ":", "\n", "    ", "num_of_nodes", "=", "len", "(", "adj_nodelist", ")", "\n", "u_i", "=", "[", "]", "\n", "u_j", "=", "[", "]", "\n", "graph_label", "=", "[", "]", "\n", "node_negative_distribution", ",", "nodesampling", "=", "negative_sampling", "(", "adj_nodelist", ")", "\n", "for", "index", "in", "range", "(", "0", ",", "num_of_nodes", ")", ":", "\n", "        ", "u_i", ".", "append", "(", "pairs", "[", "index", "]", "[", "0", "]", ")", "\n", "u_j", ".", "append", "(", "pairs", "[", "index", "]", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model.__init__": [[21, 46], ["kwargs.keys", "kwargs.get", "kwargs.get", "models.Model.__class__.__name__.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "activations", "=", "[", "]", "\n", "\n", "self", ".", "inputs", "=", "None", "\n", "self", ".", "outputs", "=", "None", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "opt_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model._build": [[47, 49], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model.build": [[50, 71], ["models.Model.activations.append", "tensorflow.get_collection", "models.Model._loss", "models.Model._accuracy", "models.Model.optimizer.minimize", "tensorflow.variable_scope", "models.Model._build", "layer", "models.Model.activations.append"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Build sequential layer model", "\n", "", "self", ".", "activations", ".", "append", "(", "self", ".", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "hidden", "=", "layer", "(", "self", ".", "activations", "[", "-", "1", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "hidden", ")", "\n", "", "self", ".", "outputs", "=", "self", ".", "activations", "[", "-", "1", "]", "\n", "\n", "# Store model variables for easy access", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n", "# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model.predict": [[72, 74], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model._loss": [[75, 77], ["None"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model._accuracy": [[78, 80], ["None"], "methods", ["None"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model.save": [[81, 87], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.save"], ["", "def", "save", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", ")", "\n", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Model.load": [[88, 95], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.MLP.__init__": [[99, 114], ["models.Model.__init__", "tensorflow.train.AdamOptimizer", "models.MLP.build"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "dims", ",", "categorical", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dims", "=", "dims", "\n", "self", ".", "input_dim", "=", "dims", "[", "0", "]", "\n", "self", ".", "output_dim", "=", "dims", "[", "-", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "categorical", "=", "categorical", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "labels", "=", "placeholders", "[", "'labels'", "]", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.MLP._loss": [[115, 128], ["models.MLP.layers[].vars.values", "metrics.masked_softmax_cross_entropy", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.sqrt", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "if", "self", ".", "categorical", ":", "\n", "            ", "self", ".", "loss", "+=", "metrics", ".", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "# L2", "\n", "", "else", ":", "\n", "            ", "diff", "=", "self", ".", "labels", "-", "self", ".", "outputs", "\n", "self", ".", "loss", "+=", "tf", ".", "reduce_sum", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "diff", "*", "diff", ",", "axis", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.MLP._accuracy": [[129, 133], ["metrics.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_accuracy"], ["", "", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "categorical", ":", "\n", "            ", "self", ".", "accuracy", "=", "metrics", ".", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.MLP._build": [[134, 147], ["models.MLP.layers.append", "models.MLP.layers.append", "layers.Dense", "layers.Dense"], "methods", ["None"], ["", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "layers", ".", "Dense", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "dims", "[", "1", "]", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "layers", ".", "Dense", "(", "input_dim", "=", "self", ".", "dims", "[", "1", "]", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.MLP.predict": [[148, 150], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.GeneralizedModel.__init__": [[159, 161], ["models.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GeneralizedModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.GeneralizedModel.build": [[163, 177], ["tensorflow.get_collection", "models.GeneralizedModel._loss", "models.GeneralizedModel._accuracy", "models.GeneralizedModel.optimizer.minimize", "tensorflow.variable_scope", "models.GeneralizedModel._build"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Store model variables for easy access", "\n", "", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n", "# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.__init__": [[192, 245], ["models.GeneralizedModel.__init__", "models.SampleAndAggregate.dims.extend", "tensorflow.train.AdamOptimizer", "models.SampleAndAggregate.build", "Exception", "tensorflow.get_variable", "tensorflow.Variable", "Exception", "tensorflow.constant", "tensorflow.concat", "range", "adj.get_shape().as_list", "len", "adj.get_shape"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build"], ["def", "__init__", "(", "self", ",", "placeholders", ",", "features", ",", "adj", ",", "degrees", ",", "\n", "layer_infos", ",", "concat", "=", "True", ",", "aggregator_type", "=", "\"mean\"", ",", "\n", "model_size", "=", "\"small\"", ",", "identity_dim", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            - placeholders: Stanford TensorFlow placeholder object.\n            - features: Numpy array with node features. \n                        NOTE: Pass a None object to train in featureless mode (identity features for nodes)!\n            - adj: Numpy array with adjacency lists (padded with random re-samples)\n            - degrees: Numpy array with node degrees. \n            - layer_infos: List of SAGEInfo namedtuples that describe the parameters of all \n                   the recursive layers. See SAGEInfo definition above.\n            - concat: whether to concatenate during recursive iterations\n            - aggregator_type: how to aggregate neighbor information\n            - model_size: one of \"small\" and \"big\"\n            - identity_dim: Set to positive int to use identity features (slow and cannot generalize, but better accuracy)\n        '''", "\n", "super", "(", "SampleAndAggregate", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "aggregator_type", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanAggregator", "\n", "", "elif", "aggregator_type", "==", "\"seq\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "SeqAggregator", "\n", "", "elif", "aggregator_type", "==", "\"maxpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MaxPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"meanpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"gcn\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "GCNAggregator", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown aggregator: \"", ",", "self", ".", "aggregator_cls", ")", "\n", "\n", "# get info from placeholders...", "\n", "", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch1\"", "]", "\n", "self", ".", "inputs2", "=", "placeholders", "[", "\"batch2\"", "]", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "adj_info", "=", "adj", "\n", "if", "identity_dim", ">", "0", ":", "\n", "           ", "self", ".", "embeds", "=", "tf", ".", "get_variable", "(", "\"node_embeddings\"", ",", "[", "adj", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "identity_dim", "]", ")", "\n", "", "else", ":", "\n", "           ", "self", ".", "embeds", "=", "None", "\n", "", "if", "features", "is", "None", ":", "\n", "            ", "if", "identity_dim", "==", "0", ":", "\n", "                ", "raise", "Exception", "(", "\"Must have a positive value for identity feature dimension if no input features given.\"", ")", "\n", "", "self", ".", "features", "=", "self", ".", "embeds", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "trainable", "=", "False", ")", "\n", "if", "not", "self", ".", "embeds", "is", "None", ":", "\n", "                ", "self", ".", "features", "=", "tf", ".", "concat", "(", "[", "self", ".", "embeds", ",", "self", ".", "features", "]", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "self", ".", "dims", "=", "[", "(", "0", "if", "features", "is", "None", "else", "features", ".", "shape", "[", "1", "]", ")", "+", "identity_dim", "]", "\n", "self", ".", "dims", ".", "extend", "(", "[", "layer_infos", "[", "i", "]", ".", "output_dim", "for", "i", "in", "range", "(", "len", "(", "layer_infos", ")", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample": [[246, 270], ["range", "len", "sampler", "samples.append", "support_sizes.append", "tensorflow.reshape", "len"], "methods", ["None"], ["self", ".", "batch_size", "=", "placeholders", "[", "\"batch_size\"", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "layer_infos", "=", "layer_infos", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "inputs", ",", "layer_infos", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "\"\"\" Sample neighbors to be the supportive fields for multi-layer convolutions.\n\n        Args:\n            inputs: batch inputs\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        \"\"\"", "\n", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "samples", "=", "[", "inputs", "]", "\n", "# size of convolution support at each layer per node", "\n", "support_size", "=", "1", "\n", "support_sizes", "=", "[", "support_size", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "layer_infos", ")", ")", ":", "\n", "            ", "t", "=", "len", "(", "layer_infos", ")", "-", "k", "-", "1", "\n", "support_size", "*=", "layer_infos", "[", "t", "]", ".", "num_samples", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate": [[272, 325], ["range", "tensorflow.nn.embedding_lookup", "len", "range", "aggregators.append", "models.SampleAndAggregate.", "next_hidden.append", "models.SampleAndAggregate.aggregator_cls", "models.SampleAndAggregate.aggregator_cls", "len", "len", "tensorflow.reshape", "len"], "methods", ["None"], ["node", "=", "sampler", "(", "(", "samples", "[", "k", "]", ",", "layer_infos", "[", "t", "]", ".", "num_samples", ")", ")", "\n", "samples", ".", "append", "(", "tf", ".", "reshape", "(", "node", ",", "[", "support_size", "*", "batch_size", ",", "]", ")", ")", "\n", "support_sizes", ".", "append", "(", "support_size", ")", "\n", "", "return", "samples", ",", "support_sizes", "\n", "\n", "\n", "", "def", "aggregate", "(", "self", ",", "samples", ",", "input_features", ",", "dims", ",", "num_samples", ",", "support_sizes", ",", "batch_size", "=", "None", ",", "\n", "aggregators", "=", "None", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "model_size", "=", "\"small\"", ")", ":", "\n", "        ", "\"\"\" At each layer, aggregate hidden representations of neighbors to compute the hidden representations \n            at next layer.\n        Args:\n            samples: a list of samples of variable hops away for convolving at each layer of the\n                network. Length is the number of layers + 1. Each is a vector of node indices.\n            input_features: the input features for each sample of various hops away.\n            dims: a list of dimensions of the hidden representations from the input layer to the\n                final layer. Length is the number of layers + 1.\n            num_samples: list of number of samples for each layer.\n            support_sizes: the number of nodes to gather information from for each layer.\n            batch_size: the number of inputs (different for batch inputs and negative samples).\n        Returns:\n            The hidden representation at the final layer for all nodes in batch\n        \"\"\"", "\n", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "\n", "# length: number of layers + 1", "\n", "", "hidden", "=", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "input_features", ",", "node_samples", ")", "for", "node_samples", "in", "samples", "]", "\n", "new_agg", "=", "aggregators", "is", "None", "\n", "if", "new_agg", ":", "\n", "            ", "aggregators", "=", "[", "]", "\n", "", "for", "layer", "in", "range", "(", "len", "(", "num_samples", ")", ")", ":", "\n", "            ", "if", "new_agg", ":", "\n", "                ", "dim_mult", "=", "2", "if", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "# aggregator at current layer", "\n", "if", "layer", "==", "len", "(", "num_samples", ")", "-", "1", ":", "\n", "                    ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "dims", "[", "layer", "]", ",", "dims", "[", "layer", "+", "1", "]", ",", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "name", "=", "name", ",", "concat", "=", "concat", ",", "model_size", "=", "model_size", ")", "\n", "", "else", ":", "\n", "                    ", "aggregator", "=", "self", ".", "aggregator_cls", "(", "dim_mult", "*", "dims", "[", "layer", "]", ",", "dims", "[", "layer", "+", "1", "]", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "name", "=", "name", ",", "concat", "=", "concat", ",", "model_size", "=", "model_size", ")", "\n", "", "aggregators", ".", "append", "(", "aggregator", ")", "\n", "", "else", ":", "\n", "                ", "aggregator", "=", "aggregators", "[", "layer", "]", "\n", "# hidden representation at current layer for all support nodes that are various hops away", "\n", "", "next_hidden", "=", "[", "]", "\n", "# as layer increases, the number of support nodes needed decreases", "\n", "for", "hop", "in", "range", "(", "len", "(", "num_samples", ")", "-", "layer", ")", ":", "\n", "                ", "dim_mult", "=", "2", "if", "concat", "and", "(", "layer", "!=", "0", ")", "else", "1", "\n", "neigh_dims", "=", "[", "batch_size", "*", "support_sizes", "[", "hop", "]", ",", "\n", "num_samples", "[", "len", "(", "num_samples", ")", "-", "hop", "-", "1", "]", ",", "\n", "dim_mult", "*", "dims", "[", "layer", "]", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate._build": [[326, 365], ["tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.aggregate", "models.SampleAndAggregate.aggregate", "models.SampleAndAggregate.sample", "models.SampleAndAggregate.aggregate", "prediction.BipartiteEdgePredLayer", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.cast", "len", "models.SampleAndAggregate.degrees.tolist"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate"], ["h", "=", "aggregator", "(", "(", "hidden", "[", "hop", "]", ",", "\n", "tf", ".", "reshape", "(", "hidden", "[", "hop", "+", "1", "]", ",", "neigh_dims", ")", ")", ")", "\n", "next_hidden", ".", "append", "(", "h", ")", "\n", "", "hidden", "=", "next_hidden", "\n", "", "return", "hidden", "[", "0", "]", ",", "aggregators", "\n", "\n", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "labels", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'batch2'", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "neg_samples", ",", "_", ",", "_", "=", "(", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "labels", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "FLAGS", ".", "neg_sample_size", ",", "\n", "unique", "=", "False", ",", "\n", "range_max", "=", "len", "(", "self", ".", "degrees", ")", ",", "\n", "distortion", "=", "0.75", ",", "\n", "unigrams", "=", "self", ".", "degrees", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "\n", "# perform \"convolution\"", "\n", "samples1", ",", "support_sizes1", "=", "self", ".", "sample", "(", "self", ".", "inputs1", ",", "self", ".", "layer_infos", ")", "\n", "samples2", ",", "support_sizes2", "=", "self", ".", "sample", "(", "self", ".", "inputs2", ",", "self", ".", "layer_infos", ")", "\n", "num_samples", "=", "[", "layer_info", ".", "num_samples", "for", "layer_info", "in", "self", ".", "layer_infos", "]", "\n", "self", ".", "outputs1", ",", "self", ".", "aggregators", "=", "self", ".", "aggregate", "(", "samples1", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes1", ",", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "self", ".", "outputs2", ",", "_", "=", "self", ".", "aggregate", "(", "samples2", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes2", ",", "aggregators", "=", "self", ".", "aggregators", ",", "concat", "=", "self", ".", "concat", ",", "\n", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "neg_samples", ",", "neg_support_sizes", "=", "self", ".", "sample", "(", "self", ".", "neg_samples", ",", "self", ".", "layer_infos", ",", "\n", "FLAGS", ".", "neg_sample_size", ")", "\n", "self", ".", "neg_outputs", ",", "_", "=", "self", ".", "aggregate", "(", "neg_samples", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "neg_support_sizes", ",", "batch_size", "=", "FLAGS", ".", "neg_sample_size", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "\n", "dim_mult", "=", "2", "if", "self", ".", "concat", "else", "1", "\n", "self", ".", "link_pred_layer", "=", "BipartiteEdgePredLayer", "(", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "\n", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "placeholders", ",", "act", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "bilinear_weights", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.build": [[366, 378], ["models.SampleAndAggregate._build", "models.SampleAndAggregate._loss", "models.SampleAndAggregate._accuracy", "models.SampleAndAggregate.optimizer.compute_gradients", "models.SampleAndAggregate.optimizer.apply_gradients", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy"], ["name", "=", "'edge_predict'", ")", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs1", ",", "1", ")", "\n", "self", ".", "outputs2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs2", ",", "1", ")", "\n", "self", ".", "neg_outputs", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "neg_outputs", ",", "1", ")", "\n", "\n", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build", "(", ")", "\n", "\n", "# TF graph management", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "loss", "/", "tf", ".", "cast", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate._loss": [[379, 386], ["models.SampleAndAggregate.link_pred_layer.loss", "tensorflow.summary.scalar", "aggregator.vars.values", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.loss"], ["grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "clipped_grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.0", ",", "5.0", ")", "if", "grad", "is", "not", "None", "else", "None", ",", "var", ")", "\n", "for", "grad", ",", "var", "in", "grads_and_vars", "]", "\n", "self", ".", "grad", ",", "_", "=", "clipped_grads_and_vars", "[", "0", "]", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "clipped_grads_and_vars", ")", "\n", "\n", "", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "for", "aggregator", "in", "self", ".", "aggregators", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate._accuracy": [[387, 400], ["models.SampleAndAggregate.link_pred_layer.affinity", "models.SampleAndAggregate.link_pred_layer.neg_cost", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.div", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["            ", "for", "var", "in", "aggregator", ".", "vars", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "link_pred_layer", ".", "loss", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ",", "self", ".", "neg_outputs", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n", "", "def", "_accuracy", "(", "self", ")", ":", "\n", "# shape: [batch_size]", "\n", "        ", "aff", "=", "self", ".", "link_pred_layer", ".", "affinity", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", "\n", "# shape : [batch_size x num_neg_samples]", "\n", "self", ".", "neg_aff", "=", "self", ".", "link_pred_layer", ".", "neg_cost", "(", "self", ".", "outputs1", ",", "self", ".", "neg_outputs", ")", "\n", "self", ".", "neg_aff", "=", "tf", ".", "reshape", "(", "self", ".", "neg_aff", ",", "[", "self", ".", "batch_size", ",", "FLAGS", ".", "neg_sample_size", "]", ")", "\n", "_aff", "=", "tf", ".", "expand_dims", "(", "aff", ",", "axis", "=", "1", ")", "\n", "self", ".", "aff_all", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "neg_aff", ",", "_aff", "]", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel.__init__": [[403, 439], ["models.GeneralizedModel.__init__", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.GradientDescentOptimizer", "models.Node2VecModel.build", "tensorflow.random_uniform", "tensorflow.truncated_normal", "tensorflow.zeros", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["_", ",", "self", ".", "ranks", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "indices_of_ranks", ",", "k", "=", "size", ")", "\n", "self", ".", "mrr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "div", "(", "1.0", ",", "tf", ".", "cast", "(", "self", ".", "ranks", "[", ":", ",", "-", "1", "]", "+", "1", ",", "tf", ".", "float32", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mrr'", ",", "self", ".", "mrr", ")", "\n", "\n", "\n", "", "", "class", "Node2VecModel", "(", "GeneralizedModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "placeholders", ",", "dict_size", ",", "degrees", ",", "name", "=", "None", ",", "\n", "nodevec_dim", "=", "50", ",", "lr", "=", "0.001", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Simple version of Node2Vec/DeepWalk algorithm.\n\n        Args:\n            dict_size: the total number of nodes.\n            degrees: numpy array of node degrees, ordered as in the data's id_map\n            nodevec_dim: dimension of the vector representation of node.\n            lr: learning rate of optimizer.\n        \"\"\"", "\n", "\n", "super", "(", "Node2VecModel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch1\"", "]", "\n", "self", ".", "inputs2", "=", "placeholders", "[", "\"batch2\"", "]", "\n", "\n", "self", ".", "batch_size", "=", "placeholders", "[", "'batch_size'", "]", "\n", "self", ".", "hidden_dim", "=", "nodevec_dim", "\n", "\n", "# following the tensorflow word2vec tutorial", "\n", "self", ".", "target_embeds", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_uniform", "(", "[", "dict_size", ",", "nodevec_dim", "]", ",", "-", "1", ",", "1", ")", ",", "\n", "name", "=", "\"target_embeds\"", ")", "\n", "self", ".", "context_embeds", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "truncated_normal", "(", "[", "dict_size", ",", "nodevec_dim", "]", ",", "\n", "stddev", "=", "1.0", "/", "math", ".", "sqrt", "(", "nodevec_dim", ")", ")", ",", "\n", "name", "=", "\"context_embeds\"", ")", "\n", "self", ".", "context_bias", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "zeros", "(", "[", "dict_size", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._build": [[440, 461], ["tensorflow.reshape", "tensorflow.nn.fixed_unigram_candidate_sampler", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "prediction.BipartiteEdgePredLayer", "tensorflow.cast", "len", "models.Node2VecModel.degrees.tolist"], "methods", ["None"], ["name", "=", "\"context_bias\"", ")", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "labels", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "cast", "(", "self", ".", "placeholders", "[", "'batch2'", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "neg_samples", ",", "_", ",", "_", "=", "(", "tf", ".", "nn", ".", "fixed_unigram_candidate_sampler", "(", "\n", "true_classes", "=", "labels", ",", "\n", "num_true", "=", "1", ",", "\n", "num_sampled", "=", "FLAGS", ".", "neg_sample_size", ",", "\n", "unique", "=", "True", ",", "\n", "range_max", "=", "len", "(", "self", ".", "degrees", ")", ",", "\n", "distortion", "=", "0.75", ",", "\n", "unigrams", "=", "self", ".", "degrees", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "target_embeds", ",", "self", ".", "inputs1", ")", "\n", "self", ".", "outputs2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_embeds", ",", "self", ".", "inputs2", ")", "\n", "self", ".", "outputs2_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_bias", ",", "self", ".", "inputs2", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel.build": [[462, 468], ["models.Node2VecModel._build", "models.Node2VecModel._loss", "models.Node2VecModel._minimize", "models.Node2VecModel._accuracy"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._minimize", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy"], ["self", ".", "neg_outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_embeds", ",", "self", ".", "neg_samples", ")", "\n", "self", ".", "neg_outputs_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "context_bias", ",", "self", ".", "neg_samples", ")", "\n", "\n", "self", ".", "link_pred_layer", "=", "BipartiteEdgePredLayer", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "\n", "self", ".", "placeholders", ",", "bilinear_weights", "=", "False", ")", "\n", "\n", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._minimize": [[469, 471], ["models.Node2VecModel.optimizer.minimize"], "methods", ["None"], ["        ", "self", ".", "_build", "(", ")", "\n", "# TF graph management", "\n", "self", ".", "_loss", "(", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._loss": [[472, 482], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.summary.scalar", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.ones_like", "tensorflow.zeros_like"], "methods", ["None"], ["self", ".", "_minimize", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "", "def", "_minimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "aff", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", ",", "1", ")", "+", "self", ".", "outputs2_bias", "\n", "neg_aff", "=", "tf", ".", "matmul", "(", "self", ".", "outputs1", ",", "tf", ".", "transpose", "(", "self", ".", "neg_outputs", ")", ")", "+", "self", ".", "neg_outputs_bias", "\n", "true_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "ones_like", "(", "aff", ")", ",", "logits", "=", "aff", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.Node2VecModel._accuracy": [[483, 496], ["models.Node2VecModel.link_pred_layer.affinity", "models.Node2VecModel.link_pred_layer.neg_cost", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.div", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["negative_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "zeros_like", "(", "neg_aff", ")", ",", "logits", "=", "neg_aff", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "true_xent", ")", "+", "tf", ".", "reduce_sum", "(", "negative_xent", ")", "\n", "self", ".", "loss", "=", "loss", "/", "tf", ".", "cast", "(", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n", "", "def", "_accuracy", "(", "self", ")", ":", "\n", "# shape: [batch_size]", "\n", "        ", "aff", "=", "self", ".", "link_pred_layer", ".", "affinity", "(", "self", ".", "outputs1", ",", "self", ".", "outputs2", ")", "\n", "# shape : [batch_size x num_neg_samples]", "\n", "self", ".", "neg_aff", "=", "self", ".", "link_pred_layer", ".", "neg_cost", "(", "self", ".", "outputs1", ",", "self", ".", "neg_outputs", ")", "\n", "self", ".", "neg_aff", "=", "tf", ".", "reshape", "(", "self", ".", "neg_aff", ",", "[", "self", ".", "batch_size", ",", "FLAGS", ".", "neg_sample_size", "]", ")", "\n", "_aff", "=", "tf", ".", "expand_dims", "(", "aff", ",", "axis", "=", "1", ")", "\n", "self", ".", "aff_all", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "neg_aff", ",", "_aff", "]", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_logit_cross_entropy": [[7, 15], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.constant"], "function", ["None"], ["def", "masked_logit_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Logit cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "loss", ",", "axis", "=", "1", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "mask", ")", ",", "tf", ".", "constant", "(", "[", "1.", "]", ")", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_softmax_cross_entropy": [[16, 23], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.constant"], "function", ["None"], ["", "def", "masked_softmax_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "mask", ")", ",", "tf", ".", "constant", "(", "[", "1.", "]", ")", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_l2": [[25, 32], ["tensorflow.nn.l2", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "masked_l2", "(", "preds", ",", "actuals", ",", "mask", ")", ":", "\n", "    ", "\"\"\"L2 loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "l2", "(", "preds", ",", "actuals", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.metrics.masked_accuracy": [[33, 41], ["tensorflow.equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax"], "function", ["None"], ["", "def", "masked_accuracy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "preds", ",", "1", ")", ",", "tf", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "accuracy_all", "=", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "accuracy_all", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "accuracy_all", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.MeanAggregator.__init__": [[11, 42], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.MeanAggregator._call": [[43, 65], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanAggregator.act", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "neigh_means", "=", "tf", ".", "reduce_mean", "(", "neigh_vecs", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_means", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.HeteMeanAggregator.__init__": [[71, 102], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.HeteMeanAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["\n", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.HeteMeanAggregator._call": [[103, 125], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.HeteMeanAggregator.act", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "means", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "concat", "(", "[", "neigh_vecs", ",", "\n", "tf", ".", "expand_dims", "(", "self_vecs", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "output", "=", "tf", ".", "matmul", "(", "means", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n", "\n", "", "", "class", "MaxPoolingAggregator", "(", "Layer", ")", ":", "\n", "    ", "\"\"\" Aggregates via max-pooling over MLP functions.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MaxPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.GCNAggregator.__init__": [[133, 161], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "aggregators.GCNAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.GCNAggregator._call": [[162, 178], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "aggregators.GCNAggregator.act", "tensorflow.concat", "tensorflow.expand_dims"], "methods", ["None"], ["            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.MaxPoolingAggregator.__init__": [[183, 228], ["layers.Layer.__init__", "aggregators.MaxPoolingAggregator.mlp_layers.append", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MaxPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n", "", "", "class", "MeanPoolingAggregator", "(", "Layer", ")", ":", "\n", "    ", "\"\"\" Aggregates via mean-pooling over MLP functions.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "512", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "1024", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.MaxPoolingAggregator._call": [[229, 257], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MaxPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.MeanPoolingAggregator.__init__": [[261, 306], ["layers.Layer.__init__", "aggregators.MeanPoolingAggregator.mlp_layers.append", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.MeanPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n", "\n", "", "", "class", "TwoMaxLayerPoolingAggregator", "(", "Layer", ")", ":", "\n", "    ", "\"\"\" Aggregates via pooling over two MLP functions.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TwoMaxLayerPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim_1", "=", "self", ".", "hidden_dim_1", "=", "512", "\n", "hidden_dim_2", "=", "self", ".", "hidden_dim_2", "=", "256", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim_1", "=", "self", ".", "hidden_dim_1", "=", "1024", "\n", "hidden_dim_2", "=", "self", ".", "hidden_dim_2", "=", "512", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "\n", "output_dim", "=", "hidden_dim_1", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.MeanPoolingAggregator._call": [[307, 335], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "aggregators.MeanPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "hidden_dim_1", ",", "\n", "output_dim", "=", "hidden_dim_2", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim_2", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.TwoMaxLayerPoolingAggregator.__init__": [[340, 394], ["layers.Layer.__init__", "aggregators.TwoMaxLayerPoolingAggregator.mlp_layers.append", "aggregators.TwoMaxLayerPoolingAggregator.mlp_layers.append", "layers.Dense", "layers.Dense", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.TwoMaxLayerPoolingAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["num_neighbors", "=", "dims", "[", "1", "]", "\n", "# [nodes * sampled neighbors] x [hidden_dim]", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim_2", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_max", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n", "", "", "class", "SeqAggregator", "(", "Layer", ")", ":", "\n", "    ", "\"\"\" Aggregates via a standard LSTM.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeqAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "128", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "256", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.TwoMaxLayerPoolingAggregator._call": [[395, 423], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "aggregators.TwoMaxLayerPoolingAggregator.act", "l", "tensorflow.add_n", "tensorflow.concat"], "methods", ["None"], ["                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "self", ".", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "hidden_dim", ")", "\n", "\n", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_vecs", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "initial_state", "=", "self", ".", "cell", ".", "zero_state", "(", "batch_size", ",", "tf", ".", "float32", ")", "\n", "used", "=", "tf", ".", "sign", "(", "tf", ".", "reduce_max", "(", "tf", ".", "abs", "(", "neigh_vecs", ")", ",", "axis", "=", "2", ")", ")", "\n", "length", "=", "tf", ".", "reduce_sum", "(", "used", ",", "axis", "=", "1", ")", "\n", "length", "=", "tf", ".", "maximum", "(", "length", ",", "tf", ".", "constant", "(", "1.", ")", ")", "\n", "length", "=", "tf", ".", "cast", "(", "length", ",", "tf", ".", "int32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "try", ":", "\n", "                ", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "self", ".", "cell", ",", "neigh_vecs", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "tf", ".", "float32", ",", "time_major", "=", "False", ",", "\n", "sequence_length", "=", "length", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.SeqAggregator.__init__": [[427, 465], ["layers.Layer.__init__", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.variable_scope", "inits.glorot", "inits.glorot", "aggregators.SeqAggregator._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["sequence_length", "=", "length", ")", "\n", "", "", "batch_size", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "0", "]", "\n", "max_len", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "1", "]", "\n", "out_size", "=", "int", "(", "rnn_outputs", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "index", "=", "tf", ".", "range", "(", "0", ",", "batch_size", ")", "*", "max_len", "+", "(", "length", "-", "1", ")", "\n", "flat", "=", "tf", ".", "reshape", "(", "rnn_outputs", ",", "[", "-", "1", ",", "out_size", "]", ")", "\n", "neigh_h", "=", "tf", ".", "gather", "(", "flat", ",", "index", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.aggregators.SeqAggregator._call": [[466, 511], ["tensorflow.shape", "aggregators.SeqAggregator.cell.zero_state", "tensorflow.sign", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.cast", "int", "tensorflow.reshape", "tensorflow.gather", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.add_n", "aggregators.SeqAggregator.act", "tensorflow.reduce_max", "tensorflow.constant", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.shape", "tensorflow.add_n", "tensorflow.concat", "tensorflow.abs", "tensorflow.nn.dynamic_rnn", "rnn_outputs.get_shape", "tensorflow.range", "scope.reuse_variables", "tensorflow.nn.dynamic_rnn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.neigh_samplers.UniformNeighborSampler.__init__": [[25, 28], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__"], ["        ", "ids", ",", "num_samples", "=", "inputs", "\n", "adj_lists", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "adj_info", ",", "ids", ")", "\n", "adj_lists", "=", "tf", ".", "transpose", "(", "tf", ".", "random_shuffle", "(", "tf", ".", "transpose", "(", "adj_lists", ")", ")", ")", "\n", "adj_lists", "=", "tf", ".", "slice", "(", "adj_lists", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.neigh_samplers.UniformNeighborSampler._call": [[29, 35], ["tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.slice", "tensorflow.random_shuffle", "tensorflow.transpose"], "methods", ["None"], ["return", "adj_lists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.neigh_samplers.DistanceNeighborSampler.__init__": [[40, 44], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.neigh_samplers.DistanceNeighborSampler._call": [[45, 63], ["tensorflow.gather", "tensorflow.gather", "tensorflow.tile", "tensorflow.reshape", "tensorflow.gather", "tensorflow.sqrt", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.tile", "tensorflow.divide", "tensorflow.where", "tensorflow.random.categorical", "tensorflow.batch_gather", "tensorflow.shape", "tensorflow.reduce_sum", "tensorflow.math.log", "tensorflow.square"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.__init__": [[13, 67], ["layers.Layer.__init__", "tensorflow.variable_scope", "prediction.BipartiteEdgePredLayer._log_vars", "tensorflow.get_variable", "inits.zeros", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "input_dim1", ",", "input_dim2", ",", "placeholders", ",", "dropout", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "loss_fn", "=", "'xent'", ",", "neg_sample_weights", "=", "1.0", ",", "\n", "bias", "=", "False", ",", "bilinear_weights", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Basic class that applies skip-gram-like loss\n        (i.e., dot product of node+target and node and negative samples)\n        Args:\n            bilinear_weights: use a bilinear weight for affinity calculation: u^T A v. If set to\n                false, it is assumed that input dimensions are the same and the affinity will be \n                based on dot product.\n        \"\"\"", "\n", "super", "(", "BipartiteEdgePredLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "input_dim1", "=", "input_dim1", "\n", "self", ".", "input_dim2", "=", "input_dim2", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "eps", "=", "1e-7", "\n", "\n", "# Margin for hinge loss", "\n", "self", ".", "margin", "=", "0.1", "\n", "self", ".", "neg_sample_weights", "=", "neg_sample_weights", "\n", "\n", "self", ".", "bilinear_weights", "=", "bilinear_weights", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "# output a likelihood term", "\n", "", "self", ".", "output_dim", "=", "1", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "# bilinear form", "\n", "            ", "if", "bilinear_weights", ":", "\n", "#self.vars['weights'] = glorot([input_dim1, input_dim2],", "\n", "#                              name='pred_weights')", "\n", "                ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "\n", "'pred_weights'", ",", "\n", "shape", "=", "(", "input_dim1", ",", "input_dim2", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "loss_fn", "==", "'xent'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_xent_loss", "\n", "", "elif", "loss_fn", "==", "'skipgram'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_skipgram_loss", "\n", "", "elif", "loss_fn", "==", "'hinge'", ":", "\n", "            ", "self", ".", "loss_fn", "=", "self", ".", "_hinge_loss", "\n", "\n", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity": [[68, 81], ["tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.transpose"], "methods", ["None"], ["", "", "def", "affinity", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "\"\"\" Affinity score between batch of inputs1 and inputs2.\n        Args:\n            inputs1: tensor of shape [batch_size x feature_size].\n        \"\"\"", "\n", "# shape: [batch_size, input_dim1]", "\n", "if", "self", ".", "bilinear_weights", ":", "\n", "            ", "prod", "=", "tf", ".", "matmul", "(", "inputs2", ",", "tf", ".", "transpose", "(", "self", ".", "vars", "[", "'weights'", "]", ")", ")", "\n", "self", ".", "prod", "=", "prod", "\n", "result", "=", "tf", ".", "reduce_sum", "(", "inputs1", "*", "prod", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "tf", ".", "reduce_sum", "(", "inputs1", "*", "inputs2", ",", "axis", "=", "1", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost": [[82, 93], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["None"], ["", "def", "neg_cost", "(", "self", ",", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "\"\"\" For each input in batch, compute the sum of its affinity to negative samples.\n\n        Returns:\n            Tensor of shape [batch_size x num_neg_samples]. For each node, a list of affinities to\n                negative samples is computed.\n        \"\"\"", "\n", "if", "self", ".", "bilinear_weights", ":", "\n", "            ", "inputs1", "=", "tf", ".", "matmul", "(", "inputs1", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "", "neg_aff", "=", "tf", ".", "matmul", "(", "inputs1", ",", "tf", ".", "transpose", "(", "neg_samples", ")", ")", "\n", "return", "neg_aff", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.loss": [[94, 101], ["prediction.BipartiteEdgePredLayer.loss_fn"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ")", ":", "\n", "        ", "\"\"\" negative sampling loss.\n        Args:\n            neg_samples: tensor of shape [num_neg_samples x input_dim2]. Negative samples for all\n            inputs in batch inputs1.\n        \"\"\"", "\n", "return", "self", ".", "loss_fn", "(", "inputs1", ",", "inputs2", ",", "neg_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer._xent_loss": [[102, 111], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_xent_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "true_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "ones_like", "(", "aff", ")", ",", "logits", "=", "aff", ")", "\n", "negative_xent", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tf", ".", "zeros_like", "(", "neg_aff", ")", ",", "logits", "=", "neg_aff", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "true_xent", ")", "+", "self", ".", "neg_sample_weights", "*", "tf", ".", "reduce_sum", "(", "negative_xent", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer._skipgram_loss": [[112, 118], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_skipgram_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "neg_cost", "=", "tf", ".", "log", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "neg_aff", ")", ",", "axis", "=", "1", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "aff", "-", "neg_cost", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer._hinge_loss": [[119, 126], ["prediction.BipartiteEdgePredLayer.affinity", "prediction.BipartiteEdgePredLayer.neg_cost", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.subtract", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.affinity", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.neg_cost"], ["", "def", "_hinge_loss", "(", "self", ",", "inputs1", ",", "inputs2", ",", "neg_samples", ",", "hard_neg_samples", "=", "None", ")", ":", "\n", "        ", "aff", "=", "self", ".", "affinity", "(", "inputs1", ",", "inputs2", ")", "\n", "neg_aff", "=", "self", ".", "neg_cost", "(", "inputs1", ",", "neg_samples", ",", "hard_neg_samples", ")", "\n", "diff", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "subtract", "(", "neg_aff", ",", "tf", ".", "expand_dims", "(", "aff", ",", "1", ")", "-", "self", ".", "margin", ")", ",", "name", "=", "'diff'", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "diff", ")", "\n", "self", ".", "neg_shape", "=", "tf", ".", "shape", "(", "neg_aff", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.prediction.BipartiteEdgePredLayer.weights_norm": [[127, 129], ["tensorflow.nn.l2_norm"], "methods", ["None"], ["", "def", "weights_norm", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "l2_norm", "(", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.layers.Layer.__init__": [[42, 55], ["kwargs.keys", "kwargs.get", "kwargs.get", "layers.Layer.__class__.__name__.lower", "str", "layers.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.layers.Layer._call": [[56, 58], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.layers.Layer.__call__": [[59, 67], ["tensorflow.name_scope", "layers.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GEMLayer._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.layers.Layer._log_vars": [[68, 71], ["tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.layers.Dense.__init__": [[75, 103], ["layers.Layer.__init__", "tensorflow.variable_scope", "tensorflow.get_variable", "layers.Dense._log_vars", "inits.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dropout", "=", "0.", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "placeholders", "=", "None", ",", "bias", "=", "True", ",", "featureless", "=", "False", ",", "\n", "sparse_inputs", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "if", "sparse_inputs", ":", "\n", "            ", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "FLAGS", ".", "weight_decay", ")", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.layers.Dense._call": [[104, 117], ["tensorflow.nn.dropout", "tensorflow.matmul", "layers.Dense.act"], "methods", ["None"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.layers.get_layer_uid": [[19, 27], ["None"], "function", ["None"], ["def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis.__init__": [[19, 86], ["models.GeneralizedModel.__init__", "supervised_models.SupervisedGraphconsis.dims.extend", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "supervised_models.SupervisedGraphconsis.build", "tensorflow.get_variable", "tensorflow.Variable", "inits.glorot", "inits.glorot", "Exception", "tensorflow.constant", "tensorflow.concat", "range", "len", "Exception"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot"], ["\n", "\n", "models", ".", "GeneralizedModel", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "\n", "if", "aggregator_type", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanAggregator", "\n", "", "elif", "aggregator_type", "==", "\"seq\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "SeqAggregator", "\n", "", "elif", "aggregator_type", "==", "\"meanpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MeanPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"maxpool\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "MaxPoolingAggregator", "\n", "", "elif", "aggregator_type", "==", "\"gcn\"", ":", "\n", "            ", "self", ".", "aggregator_cls", "=", "GCNAggregator", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown aggregator: \"", ",", "self", ".", "aggregator_cls", ")", "\n", "\n", "# get info from placeholders...", "\n", "", "self", ".", "inputs1", "=", "placeholders", "[", "\"batch\"", "]", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "adj_info", "=", "adj", "\n", "if", "identity_dim", ">", "0", ":", "\n", "           ", "self", ".", "embeds", "=", "tf", ".", "get_variable", "(", "\"node_embeddings\"", ",", "[", "adj", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "identity_dim", "]", ")", "\n", "", "else", ":", "\n", "           ", "self", ".", "embeds", "=", "None", "\n", "", "if", "features", "is", "None", ":", "\n", "            ", "if", "identity_dim", "==", "0", ":", "\n", "                ", "raise", "Exception", "(", "\"Must have a positive value for identity feature dimension if no input features given.\"", ")", "\n", "", "self", ".", "features", "=", "self", ".", "embeds", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "trainable", "=", "False", ")", "\n", "if", "not", "self", ".", "embeds", "is", "None", ":", "\n", "                ", "self", ".", "features", "=", "tf", ".", "concat", "(", "[", "self", ".", "embeds", ",", "self", ".", "features", "]", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "sigmoid_loss", "=", "sigmoid_loss", "\n", "self", ".", "dims", "=", "[", "(", "0", "if", "features", "is", "None", "else", "features", ".", "shape", "[", "1", "]", ")", "+", "identity_dim", "]", "\n", "self", ".", "dims", ".", "extend", "(", "[", "layer_infos", "[", "i", "]", ".", "output_dim", "for", "i", "in", "range", "(", "len", "(", "layer_infos", ")", ")", "]", ")", "\n", "self", ".", "batch_size", "=", "placeholders", "[", "\"batch_size\"", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "layer_infos", "=", "layer_infos", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n", "\n", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "samples1", ",", "support_sizes1", "=", "self", ".", "sample", "(", "self", ".", "inputs1", ",", "self", ".", "layer_infos", ")", "\n", "num_samples", "=", "[", "layer_info", ".", "num_samples", "for", "layer_info", "in", "self", ".", "layer_infos", "]", "\n", "self", ".", "outputs1", ",", "self", ".", "aggregators", "=", "self", ".", "aggregate", "(", "samples1", ",", "[", "self", ".", "features", "]", ",", "self", ".", "dims", ",", "num_samples", ",", "\n", "support_sizes1", ",", "concat", "=", "self", ".", "concat", ",", "model_size", "=", "self", ".", "model_size", ")", "\n", "dim_mult", "=", "2", "if", "self", ".", "concat", "else", "1", "\n", "\n", "self", ".", "outputs1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "outputs1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis.build": [[88, 124], ["range", "range", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "layers.Dense", "supervised_models.SupervisedGraphconsis.node_pred", "supervised_models.SupervisedGraphconsis._loss", "supervised_models.SupervisedGraphconsis.optimizer.compute_gradients", "supervised_models.SupervisedGraphconsis.optimizer.apply_gradients", "supervised_models.SupervisedGraphconsis.predict", "supervised_models.SupervisedGraphconsis.sample", "samples1_list.append", "support_sizes1_list.append", "supervised_models.SupervisedGraphconsis.aggregate", "tensorflow.tile", "tensorflow.concat", "tensorflow.matmul", "tensorflow.tile", "tensorflow.multiply", "tensorflow.nn.embedding_lookup", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis.predict", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.sample", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.models.SampleAndAggregate.aggregate"], ["self", ".", "node_pred", "=", "layers", ".", "Dense", "(", "dim_mult", "*", "self", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "num_classes", ",", "\n", "dropout", "=", "self", ".", "placeholders", "[", "'dropout'", "]", ",", "\n", "act", "=", "lambda", "x", ":", "x", ")", "\n", "# TF graph management", "\n", "self", ".", "node_preds", "=", "self", ".", "node_pred", "(", "self", ".", "outputs1", ")", "\n", "\n", "self", ".", "_loss", "(", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "clipped_grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.0", ",", "5.0", ")", "if", "grad", "is", "not", "None", "else", "None", ",", "var", ")", "\n", "for", "grad", ",", "var", "in", "grads_and_vars", "]", "\n", "self", ".", "grad", ",", "_", "=", "clipped_grads_and_vars", "[", "0", "]", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "clipped_grads_and_vars", ")", "\n", "self", ".", "preds", "=", "self", ".", "predict", "(", ")", "\n", "\n", "", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "aggregator", "in", "self", ".", "aggregators", ":", "\n", "            ", "for", "var", "in", "aggregator", ".", "vars", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "", "", "for", "var", "in", "self", ".", "node_pred", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# classification loss", "\n", "", "if", "self", ".", "sigmoid_loss", ":", "\n", "            ", "self", ".", "loss", "+=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "node_preds", ",", "\n", "labels", "=", "self", ".", "placeholders", "[", "'labels'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "+=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "node_preds", ",", "\n", "labels", "=", "self", ".", "placeholders", "[", "'labels'", "]", ")", ")", "\n", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "\n", "", "def", "predict", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sigmoid_loss", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "node_preds", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis._loss": [[125, 144], ["supervised_models.SupervisedGraphconsis.node_pred.vars.values", "tensorflow.summary.scalar", "aggregator.vars.values", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "else", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "node_preds", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_models.SupervisedGraphconsis.predict": [[145, 150], ["tensorflow.nn.sigmoid", "tensorflow.nn.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.__init__": [[22, 55], ["G.nodes", "numpy.random.permutation", "minibatch.EdgeMinibatchIterator.construct_adj", "minibatch.EdgeMinibatchIterator.construct_test_adj", "numpy.random.permutation", "print", "print", "len", "G.nodes", "G.edges", "minibatch.EdgeMinibatchIterator._remove_isolated", "len", "len", "minibatch.EdgeMinibatchIterator._n2v_prune", "G.edges", "G.nodes", "G.nodes"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_test_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator._remove_isolated", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator._n2v_prune"], ["def", "__init__", "(", "self", ",", "G", ",", "id2idx", ",", "\n", "placeholders", ",", "context_pairs", "=", "None", ",", "batch_size", "=", "100", ",", "max_degree", "=", "25", ",", "\n", "n2v_retrain", "=", "False", ",", "fixed_n2v", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "G", "=", "G", "\n", "self", ".", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "self", ".", "id2idx", "=", "id2idx", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n", "self", ".", "nodes", "=", "np", ".", "random", ".", "permutation", "(", "G", ".", "nodes", "(", ")", ")", "\n", "self", ".", "adj", ",", "self", ".", "deg", "=", "self", ".", "construct_adj", "(", ")", "\n", "self", ".", "test_adj", "=", "self", ".", "construct_test_adj", "(", ")", "\n", "if", "context_pairs", "is", "None", ":", "\n", "            ", "edges", "=", "G", ".", "edges", "(", ")", "\n", "", "else", ":", "\n", "            ", "edges", "=", "context_pairs", "\n", "", "self", ".", "train_edges", "=", "self", ".", "edges", "=", "np", ".", "random", ".", "permutation", "(", "edges", ")", "\n", "if", "not", "n2v_retrain", ":", "\n", "            ", "self", ".", "train_edges", "=", "self", ".", "_remove_isolated", "(", "self", ".", "train_edges", ")", "\n", "self", ".", "val_edges", "=", "[", "e", "for", "e", "in", "G", ".", "edges", "(", ")", "if", "G", "[", "e", "[", "0", "]", "]", "[", "e", "[", "1", "]", "]", "[", "'train_removed'", "]", "]", "\n", "", "else", ":", "\n", "            ", "if", "fixed_n2v", ":", "\n", "                ", "self", ".", "train_edges", "=", "self", ".", "val_edges", "=", "self", ".", "_n2v_prune", "(", "self", ".", "edges", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_edges", "=", "self", ".", "val_edges", "=", "self", ".", "edges", "\n", "\n", "", "", "print", "(", "len", "(", "[", "n", "for", "n", "in", "G", ".", "nodes", "(", ")", "if", "not", "G", ".", "node", "[", "n", "]", "[", "'test'", "]", "and", "not", "G", ".", "node", "[", "n", "]", "[", "'val'", "]", "]", ")", ",", "'train nodes'", ")", "\n", "print", "(", "len", "(", "[", "n", "for", "n", "in", "G", ".", "nodes", "(", ")", "if", "G", ".", "node", "[", "n", "]", "[", "'test'", "]", "or", "G", ".", "node", "[", "n", "]", "[", "'val'", "]", "]", ")", ",", "'test nodes'", ")", "\n", "self", ".", "val_set_size", "=", "len", "(", "self", ".", "val_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator._n2v_prune": [[56, 59], ["is_val"], "methods", ["None"], ["", "def", "_n2v_prune", "(", "self", ",", "edges", ")", ":", "\n", "        ", "is_val", "=", "lambda", "n", ":", "self", ".", "G", ".", "node", "[", "n", "]", "[", "\"val\"", "]", "or", "self", ".", "G", ".", "node", "[", "n", "]", "[", "\"test\"", "]", "\n", "return", "[", "e", "for", "e", "in", "edges", "if", "not", "is_val", "(", "e", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator._remove_isolated": [[60, 75], ["print", "new_edge_list.append"], "methods", ["None"], ["", "def", "_remove_isolated", "(", "self", ",", "edge_list", ")", ":", "\n", "        ", "new_edge_list", "=", "[", "]", "\n", "missing", "=", "0", "\n", "for", "n1", ",", "n2", "in", "edge_list", ":", "\n", "            ", "if", "not", "n1", "in", "self", ".", "G", ".", "node", "or", "not", "n2", "in", "self", ".", "G", ".", "node", ":", "\n", "                ", "missing", "+=", "1", "\n", "continue", "\n", "", "if", "(", "self", ".", "deg", "[", "self", ".", "id2idx", "[", "n1", "]", "]", "==", "0", "or", "self", ".", "deg", "[", "self", ".", "id2idx", "[", "n2", "]", "]", "==", "0", ")", "and", "(", "not", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'val'", "]", ")", "and", "(", "not", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'val'", "]", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "new_edge_list", ".", "append", "(", "(", "n1", ",", "n2", ")", ")", "\n", "", "", "print", "(", "\"Unexpected missing:\"", ",", "missing", ")", "\n", "return", "new_edge_list", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.construct_adj": [[76, 95], ["numpy.zeros", "minibatch.EdgeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.EdgeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "id2idx", ")", ",", ")", ")", "\n", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "if", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'val'", "]", ":", "\n", "                ", "continue", "\n", "", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "\n", "if", "(", "not", "self", ".", "G", "[", "nodeid", "]", "[", "neighbor", "]", "[", "'train_removed'", "]", ")", "]", ")", "\n", "deg", "[", "self", ".", "id2idx", "[", "nodeid", "]", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.construct_test_adj": [[96, 109], ["minibatch.EdgeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.EdgeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_test_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "]", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.end": [[110, 112], ["len"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_num", "*", "self", ".", "batch_size", ">=", "len", "(", "self", ".", "train_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.batch_feed_dict": [[113, 126], ["dict", "dict.update", "dict.update", "dict.update", "batch1.append", "batch2.append", "len"], "methods", ["None"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_edges", ")", ":", "\n", "        ", "batch1", "=", "[", "]", "\n", "batch2", "=", "[", "]", "\n", "for", "node1", ",", "node2", "in", "batch_edges", ":", "\n", "            ", "batch1", ".", "append", "(", "self", ".", "id2idx", "[", "node1", "]", ")", "\n", "batch2", ".", "append", "(", "self", ".", "id2idx", "[", "node2", "]", ")", "\n", "\n", "", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch_edges", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch1'", "]", ":", "batch1", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch2'", "]", ":", "batch2", "}", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.next_minibatch_feed_dict": [[127, 133], ["min", "minibatch.EdgeMinibatchIterator.batch_feed_dict", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "        ", "start_idx", "=", "self", ".", "batch_num", "*", "self", ".", "batch_size", "\n", "self", ".", "batch_num", "+=", "1", "\n", "end_idx", "=", "min", "(", "start_idx", "+", "self", ".", "batch_size", ",", "len", "(", "self", ".", "train_edges", ")", ")", "\n", "batch_edges", "=", "self", ".", "train_edges", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "batch_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.num_training_batches": [[134, 136], ["len"], "methods", ["None"], ["", "def", "num_training_batches", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_edges", ")", "//", "self", ".", "batch_size", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.val_feed_dict": [[137, 145], ["minibatch.EdgeMinibatchIterator.batch_feed_dict", "numpy.random.permutation", "minibatch.EdgeMinibatchIterator.batch_feed_dict", "len", "min", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "val_feed_dict", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "edge_list", "=", "self", ".", "val_edges", "\n", "if", "size", "is", "None", ":", "\n", "            ", "return", "self", ".", "batch_feed_dict", "(", "edge_list", ")", "\n", "", "else", ":", "\n", "            ", "ind", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "edge_list", ")", ")", "\n", "val_edges", "=", "[", "edge_list", "[", "i", "]", "for", "i", "in", "ind", "[", ":", "min", "(", "size", ",", "len", "(", "ind", ")", ")", "]", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.incremental_val_feed_dict": [[146, 151], ["minibatch.EdgeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "", "def", "incremental_val_feed_dict", "(", "self", ",", "size", ",", "iter_num", ")", ":", "\n", "        ", "edge_list", "=", "self", ".", "val_edges", "\n", "val_edges", "=", "edge_list", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "edge_list", ")", ")", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_edges", ")", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "self", ".", "val_edges", ")", ",", "val_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.incremental_embed_feed_dict": [[152, 158], ["minibatch.EdgeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "incremental_embed_feed_dict", "(", "self", ",", "size", ",", "iter_num", ")", ":", "\n", "        ", "node_list", "=", "self", ".", "nodes", "\n", "val_nodes", "=", "node_list", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "node_list", ")", ")", "]", "\n", "val_edges", "=", "[", "(", "n", ",", "n", ")", "for", "n", "in", "val_nodes", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_edges", ")", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "node_list", ")", ",", "val_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.label_val": [[159, 169], ["minibatch.EdgeMinibatchIterator.G.edges", "val_edges.append", "train_edges.append"], "methods", ["None"], ["", "def", "label_val", "(", "self", ")", ":", "\n", "        ", "train_edges", "=", "[", "]", "\n", "val_edges", "=", "[", "]", "\n", "for", "n1", ",", "n2", "in", "self", ".", "G", ".", "edges", "(", ")", ":", "\n", "            ", "if", "(", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'val'", "]", "or", "self", ".", "G", ".", "node", "[", "n1", "]", "[", "'test'", "]", "\n", "or", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'val'", "]", "or", "self", ".", "G", ".", "node", "[", "n2", "]", "[", "'test'", "]", ")", ":", "\n", "                ", "val_edges", ".", "append", "(", "(", "n1", ",", "n2", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_edges", ".", "append", "(", "(", "n1", ",", "n2", ")", ")", "\n", "", "", "return", "train_edges", ",", "val_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.EdgeMinibatchIterator.shuffle": [[170, 177], ["numpy.random.permutation", "numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_edges", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_edges", ")", "\n", "self", ".", "nodes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "nodes", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.__init__": [[191, 216], ["G.nodes", "minibatch.NodeMinibatchIterator.construct_adj", "minibatch.NodeMinibatchIterator.construct_test_adj", "set", "set().difference", "minibatch.NodeMinibatchIterator.G.nodes", "minibatch.NodeMinibatchIterator.G.nodes", "set", "G.nodes"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_test_adj"], ["def", "__init__", "(", "self", ",", "G", ",", "id2idx", ",", "\n", "placeholders", ",", "label_map", ",", "num_classes", ",", "\n", "batch_size", "=", "100", ",", "max_degree", "=", "25", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "G", "=", "G", "\n", "self", ".", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "self", ".", "id2idx", "=", "id2idx", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "batch_num", "=", "0", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "adj", ",", "self", ".", "deg", "=", "self", ".", "construct_adj", "(", ")", "\n", "self", ".", "test_adj", "=", "self", ".", "construct_test_adj", "(", ")", "\n", "\n", "self", ".", "val_nodes", "=", "[", "n", "for", "n", "in", "self", ".", "G", ".", "nodes", "(", ")", "if", "self", ".", "G", ".", "node", "[", "n", "]", "[", "'val'", "]", "]", "\n", "self", ".", "test_nodes", "=", "[", "n", "for", "n", "in", "self", ".", "G", ".", "nodes", "(", ")", "if", "self", ".", "G", ".", "node", "[", "n", "]", "[", "'test'", "]", "]", "\n", "\n", "self", ".", "no_train_nodes_set", "=", "set", "(", "self", ".", "val_nodes", "+", "self", ".", "test_nodes", ")", "\n", "self", ".", "train_nodes", "=", "set", "(", "G", ".", "nodes", "(", ")", ")", ".", "difference", "(", "self", ".", "no_train_nodes_set", ")", "\n", "# don't train on nodes that only have edges to test set", "\n", "self", ".", "train_nodes", "=", "[", "n", "for", "n", "in", "self", ".", "train_nodes", "if", "self", ".", "deg", "[", "id2idx", "[", "n", "]", "]", ">", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator._make_label_vec": [[217, 226], ["isinstance", "numpy.array", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["", "def", "_make_label_vec", "(", "self", ",", "node", ")", ":", "\n", "        ", "label", "=", "self", ".", "label_map", "[", "node", "]", "\n", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "            ", "label_vec", "=", "np", ".", "array", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "label_vec", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ")", ")", "\n", "class_ind", "=", "self", ".", "label_map", "[", "node", "]", "\n", "label_vec", "[", "class_ind", "]", "=", "1", "\n", "", "return", "label_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_adj": [[227, 246], ["numpy.zeros", "minibatch.NodeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.NodeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "deg", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "id2idx", ")", ",", ")", ")", "\n", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "if", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'test'", "]", "or", "self", ".", "G", ".", "node", "[", "nodeid", "]", "[", "'val'", "]", ":", "\n", "                ", "continue", "\n", "", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "\n", "if", "(", "not", "self", ".", "G", "[", "nodeid", "]", "[", "neighbor", "]", "[", "'train_removed'", "]", ")", "]", ")", "\n", "deg", "[", "self", ".", "id2idx", "[", "nodeid", "]", "]", "=", "len", "(", "neighbors", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", ",", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.construct_test_adj": [[247, 260], ["minibatch.NodeMinibatchIterator.G.nodes", "len", "numpy.ones", "numpy.array", "len", "len", "numpy.random.choice", "len", "numpy.random.choice", "len", "minibatch.NodeMinibatchIterator.G.neighbors"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "construct_test_adj", "(", "self", ")", ":", "\n", "        ", "adj", "=", "len", "(", "self", ".", "id2idx", ")", "*", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "id2idx", ")", "+", "1", ",", "self", ".", "max_degree", ")", ")", "\n", "for", "nodeid", "in", "self", ".", "G", ".", "nodes", "(", ")", ":", "\n", "            ", "neighbors", "=", "np", ".", "array", "(", "[", "self", ".", "id2idx", "[", "neighbor", "]", "\n", "for", "neighbor", "in", "self", ".", "G", ".", "neighbors", "(", "nodeid", ")", "]", ")", "\n", "if", "len", "(", "neighbors", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "neighbors", ")", ">", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "False", ")", "\n", "", "elif", "len", "(", "neighbors", ")", "<", "self", ".", "max_degree", ":", "\n", "                ", "neighbors", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ",", "self", ".", "max_degree", ",", "replace", "=", "True", ")", "\n", "", "adj", "[", "self", ".", "id2idx", "[", "nodeid", "]", ",", ":", "]", "=", "neighbors", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.end": [[261, 263], ["len"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_num", "*", "self", ".", "batch_size", ">=", "len", "(", "self", ".", "train_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict": [[264, 275], ["numpy.vstack", "dict", "dict.update", "dict.update", "dict.update", "minibatch.NodeMinibatchIterator._make_label_vec", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator._make_label_vec"], ["", "def", "batch_feed_dict", "(", "self", ",", "batch_nodes", ",", "val", "=", "False", ")", ":", "\n", "        ", "batch1id", "=", "batch_nodes", "\n", "batch1", "=", "[", "self", ".", "id2idx", "[", "n", "]", "for", "n", "in", "batch1id", "]", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "[", "self", ".", "_make_label_vec", "(", "node", ")", "for", "node", "in", "batch1id", "]", ")", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch_size'", "]", ":", "len", "(", "batch1", ")", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'batch'", "]", ":", "batch1", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "placeholders", "[", "'labels'", "]", ":", "labels", "}", ")", "\n", "\n", "return", "feed_dict", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.node_val_feed_dict": [[276, 286], ["minibatch.NodeMinibatchIterator.batch_feed_dict", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "node_val_feed_dict", "(", "self", ",", "size", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "test", ":", "\n", "            ", "val_nodes", "=", "self", ".", "test_nodes", "\n", "", "else", ":", "\n", "            ", "val_nodes", "=", "self", ".", "val_nodes", "\n", "", "if", "not", "size", "is", "None", ":", "\n", "            ", "val_nodes", "=", "np", ".", "random", ".", "choice", "(", "val_nodes", ",", "size", ",", "replace", "=", "True", ")", "\n", "# add a dummy neighbor", "\n", "", "ret_val", "=", "self", ".", "batch_feed_dict", "(", "val_nodes", ")", "\n", "return", "ret_val", "[", "0", "]", ",", "ret_val", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.incremental_node_val_feed_dict": [[287, 298], ["minibatch.NodeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "incremental_node_val_feed_dict", "(", "self", ",", "size", ",", "iter_num", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "test", ":", "\n", "            ", "val_nodes", "=", "self", ".", "test_nodes", "\n", "", "else", ":", "\n", "            ", "val_nodes", "=", "self", ".", "val_nodes", "\n", "", "val_node_subset", "=", "val_nodes", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "val_nodes", ")", ")", "]", "\n", "\n", "# add a dummy neighbor", "\n", "ret_val", "=", "self", ".", "batch_feed_dict", "(", "val_node_subset", ")", "\n", "return", "ret_val", "[", "0", "]", ",", "ret_val", "[", "1", "]", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "val_nodes", ")", ",", "val_node_subset", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.num_training_batches": [[299, 301], ["len"], "methods", ["None"], ["", "def", "num_training_batches", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_nodes", ")", "//", "self", ".", "batch_size", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.next_minibatch_feed_dict": [[302, 308], ["min", "minibatch.NodeMinibatchIterator.batch_feed_dict", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "next_minibatch_feed_dict", "(", "self", ")", ":", "\n", "        ", "start_idx", "=", "self", ".", "batch_num", "*", "self", ".", "batch_size", "\n", "self", ".", "batch_num", "+=", "1", "\n", "end_idx", "=", "min", "(", "start_idx", "+", "self", ".", "batch_size", ",", "len", "(", "self", ".", "train_nodes", ")", ")", "\n", "batch_nodes", "=", "self", ".", "train_nodes", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "batch_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.incremental_embed_feed_dict": [[309, 314], ["minibatch.NodeMinibatchIterator.batch_feed_dict", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.batch_feed_dict"], ["", "def", "incremental_embed_feed_dict", "(", "self", ",", "size", ",", "iter_num", ")", ":", "\n", "        ", "node_list", "=", "self", ".", "nodes", "\n", "val_nodes", "=", "node_list", "[", "iter_num", "*", "size", ":", "min", "(", "(", "iter_num", "+", "1", ")", "*", "size", ",", "\n", "len", "(", "node_list", ")", ")", "]", "\n", "return", "self", ".", "batch_feed_dict", "(", "val_nodes", ")", ",", "(", "iter_num", "+", "1", ")", "*", "size", ">=", "len", "(", "node_list", ")", ",", "val_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.shuffle": [[315, 321], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Re-shuffle the training set.\n            Also reset the batch number.\n        \"\"\"", "\n", "self", ".", "train_nodes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_nodes", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.calc_f1": [[62, 70], ["numpy.argmax", "numpy.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score"], "function", ["None"], ["\n", "def", "calc_f1", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "if", "not", "FLAGS", ".", "sigmoid", ":", "\n", "        ", "y_true", "=", "np", ".", "argmax", "(", "y_true", ",", "axis", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "y_pred", "[", "y_pred", ">", "0.5", "]", "=", "1", "\n", "y_pred", "[", "y_pred", "<=", "0.5", "]", "=", "0", "\n", "", "return", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"micro\"", ")", ",", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"macro\"", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.calc_auc": [[71, 73], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["\n", "# Define model evaluation function", "\n", "", "def", "evaluate", "(", "sess", ",", "model", ",", "minibatch_iter", ",", "size", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.evaluate": [[75, 83], ["time.time", "minibatch_iter.node_val_feed_dict", "sess.run", "supervised_train.calc_f1", "supervised_train.calc_auc", "time.time"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.node_val_feed_dict", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.calc_f1", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.calc_auc"], ["feed_dict_val", ",", "labels", "=", "minibatch_iter", ".", "node_val_feed_dict", "(", "size", ")", "\n", "node_outs_val", "=", "sess", ".", "run", "(", "[", "model", ".", "preds", ",", "model", ".", "loss", "]", ",", "\n", "feed_dict", "=", "feed_dict_val", ")", "\n", "mic", ",", "mac", "=", "calc_f1", "(", "labels", ",", "node_outs_val", "[", "0", "]", ")", "\n", "return", "node_outs_val", "[", "1", "]", ",", "mic", ",", "mac", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", "\n", "\n", "", "def", "log_dir", "(", ")", ":", "\n", "    ", "log_dir", "=", "FLAGS", ".", "base_log_dir", "+", "\"/sup-\"", "+", "FLAGS", ".", "train_prefix", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "log_dir", "+=", "\"/{model:s}_{model_size:s}_{lr:0.4f}/\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.incremental_evaluate": [[94, 115], ["time.time", "numpy.vstack", "numpy.vstack", "supervised_train.calc_f1", "supervised_train.calc_auc", "minibatch_iter.incremental_node_val_feed_dict", "sess.run", "np.vstack.append", "np.vstack.append", "val_losses.append", "numpy.mean", "time.time"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.calc_f1", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.calc_auc", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.incremental_node_val_feed_dict"], ["val_losses", "=", "[", "]", "\n", "val_preds", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "iter_num", "=", "0", "\n", "finished", "=", "False", "\n", "while", "not", "finished", ":", "\n", "        ", "feed_dict_val", ",", "batch_labels", ",", "finished", ",", "_", "=", "minibatch_iter", ".", "incremental_node_val_feed_dict", "(", "size", ",", "iter_num", ",", "test", "=", "test", ")", "\n", "node_outs_val", "=", "sess", ".", "run", "(", "[", "model", ".", "preds", ",", "model", ".", "loss", "]", ",", "\n", "feed_dict", "=", "feed_dict_val", ")", "\n", "val_preds", ".", "append", "(", "node_outs_val", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "batch_labels", ")", "\n", "val_losses", ".", "append", "(", "node_outs_val", "[", "1", "]", ")", "\n", "iter_num", "+=", "1", "\n", "", "val_preds", "=", "np", ".", "vstack", "(", "val_preds", ")", "\n", "labels", "=", "np", ".", "vstack", "(", "labels", ")", "\n", "f1_scores", "=", "calc_f1", "(", "labels", ",", "val_preds", ")", "\n", "return", "np", ".", "mean", "(", "val_losses", ")", ",", "f1_scores", "[", "0", "]", ",", "f1_scores", "[", "1", "]", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", "\n", "\n", "", "def", "construct_placeholders", "(", "num_classes", ")", ":", "\n", "# Define placeholders", "\n", "    ", "placeholders", "=", "{", "\n", "'labels'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "num_classes", ")", ",", "name", "=", "'labels'", ")", ",", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.construct_placeholders": [[116, 125], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder"], "function", ["None"], ["'batch'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ",", "name", "=", "'batch1'", ")", ",", "\n", "'dropout'", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ",", "name", "=", "'dropout'", ")", ",", "\n", "'batch_size'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'batch_size'", ")", ",", "\n", "}", "\n", "return", "placeholders", "\n", "\n", "", "def", "train", "(", "train_data", ",", "test_data", "=", "None", ")", ":", "\n", "\n", "    ", "G", "=", "train_data", "[", "0", "]", "\n", "features", "=", "train_data", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.train": [[126, 368], ["len", "isinstance", "supervised_train.construct_placeholders", "minibatch.NodeMinibatchIterator", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.merge_all", "tf.Session.run", "range", "print", "supervised_train.incremental_evaluate", "print", "len", "len", "numpy.vstack", "minibatch.NodeMinibatchIterator", "tensorflow.placeholder", "tensorflow.Variable", "supervised_models.SupervisedGraphconsis", "tensorflow.global_variables_initializer", "minibatch.NodeMinibatchIterator.shuffle", "print", "epoch_val_costs.append", "list", "set", "range", "neigh_samplers.DistanceNeighborSampler", "supervised_models.SupervisedGraphconsis", "minibatch.NodeMinibatchIterator.end", "minibatch.NodeMinibatchIterator.next_minibatch_feed_dict", "feed_dict.update", "time.time", "tf.Session.run", "class_map.values", "list", "class_map.values", "numpy.zeros", "neigh_samplers.DistanceNeighborSampler", "supervised_models.SupervisedGraphconsis", "supervised_train.calc_f1", "print", "class_map.values", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "neigh_samplers.DistanceNeighborSampler", "supervised_models.SupervisedGraphconsis", "range", "supervised_train.incremental_evaluate", "supervised_train.evaluate", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "neigh_samplers.DistanceNeighborSampler", "supervised_models.SupervisedGraphconsis", "Exception", "time.time", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "neigh_samplers.DistanceNeighborSampler", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo", "models.SAGEInfo"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.construct_placeholders", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.incremental_evaluate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.shuffle", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.end", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.minibatch.NodeMinibatchIterator.next_minibatch_feed_dict", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.calc_f1", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.incremental_evaluate", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.evaluate"], ["id_map", "=", "train_data", "[", "2", "]", "\n", "class_map", "=", "train_data", "[", "4", "]", "\n", "if", "isinstance", "(", "list", "(", "class_map", ".", "values", "(", ")", ")", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "num_classes", "=", "len", "(", "list", "(", "class_map", ".", "values", "(", ")", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "len", "(", "set", "(", "class_map", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "if", "not", "features", "is", "None", ":", "\n", "# pad with dummy zero vector  ", "\n", "        ", "features", "=", "np", ".", "vstack", "(", "[", "features", ",", "np", ".", "zeros", "(", "(", "features", ".", "shape", "[", "1", "]", ",", ")", ")", "]", ")", "\n", "\n", "", "context_pairs", "=", "train_data", "[", "3", "]", "if", "FLAGS", ".", "random_context", "else", "None", "\n", "placeholders", "=", "construct_placeholders", "(", "num_classes", ")", "\n", "minibatch", "=", "NodeMinibatchIterator", "(", "G", ",", "\n", "id_map", ",", "\n", "placeholders", ",", "\n", "class_map", ",", "\n", "num_classes", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "max_degree", "=", "FLAGS", ".", "max_degree", ",", "\n", "context_pairs", "=", "context_pairs", ")", "\n", "adj_info_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "minibatch", ".", "adj", ".", "shape", ")", "\n", "adj_info", "=", "tf", ".", "Variable", "(", "adj_info_ph", ",", "trainable", "=", "False", ",", "name", "=", "\"adj_info\"", ")", "\n", "\n", "if", "FLAGS", ".", "model", "==", "'graphsage_mean'", ":", "\n", "# Create model", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "if", "FLAGS", ".", "samples_3", "!=", "0", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_3", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "", "elif", "FLAGS", ".", "samples_2", "!=", "0", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "", "else", ":", "\n", "            ", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", "]", "\n", "\n", "", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "", "elif", "FLAGS", ".", "model", "==", "'gcn'", ":", "\n", "# Create model", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "2", "*", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "2", "*", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"gcn\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "concat", "=", "False", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_seq'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"seq\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_maxpool'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"maxpool\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "elif", "FLAGS", ".", "model", "==", "'graphsage_meanpool'", ":", "\n", "        ", "sampler", "=", "UniformNeighborSampler", "(", "adj_info", ")", "\n", "layer_infos", "=", "[", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_1", ",", "FLAGS", ".", "dim_1", ")", ",", "\n", "SAGEInfo", "(", "\"node\"", ",", "sampler", ",", "FLAGS", ".", "samples_2", ",", "FLAGS", ".", "dim_2", ")", "]", "\n", "\n", "model", "=", "SupervisedGraphsage", "(", "num_classes", ",", "placeholders", ",", "\n", "features", ",", "\n", "adj_info", ",", "\n", "minibatch", ".", "deg", ",", "\n", "layer_infos", "=", "layer_infos", ",", "\n", "aggregator_type", "=", "\"meanpool\"", ",", "\n", "model_size", "=", "FLAGS", ".", "model_size", ",", "\n", "sigmoid_loss", "=", "FLAGS", ".", "sigmoid", ",", "\n", "identity_dim", "=", "FLAGS", ".", "identity_dim", ",", "\n", "logging", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Error: model name unrecognized.'", ")", "\n", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "#config.gpu_options.per_process_gpu_memory_fraction = GPU_MEM_FRACTION", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "\n", "# Initialize session", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", "(", ")", ",", "sess", ".", "graph", ")", "\n", "\n", "# Init variables", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "feed_dict", "=", "{", "adj_info_ph", ":", "minibatch", ".", "adj", "}", ")", "\n", "\n", "# Train model", "\n", "\n", "total_steps", "=", "0", "\n", "avg_time", "=", "0.0", "\n", "epoch_val_costs", "=", "[", "]", "\n", "\n", "train_adj_info", "=", "tf", ".", "assign", "(", "adj_info", ",", "minibatch", ".", "adj", ")", "\n", "val_adj_info", "=", "tf", ".", "assign", "(", "adj_info", ",", "minibatch", ".", "test_adj", ")", "\n", "for", "epoch", "in", "range", "(", "FLAGS", ".", "epochs", ")", ":", "\n", "        ", "minibatch", ".", "shuffle", "(", ")", "\n", "\n", "iter", "=", "0", "\n", "print", "(", "'Epoch: %04d'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "epoch_val_costs", ".", "append", "(", "0", ")", "\n", "while", "not", "minibatch", ".", "end", "(", ")", ":", "\n", "# Construct feed dictionary", "\n", "            ", "feed_dict", ",", "labels", "=", "minibatch", ".", "next_minibatch_feed_dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'dropout'", "]", ":", "FLAGS", ".", "dropout", "}", ")", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "# Training step", "\n", "outs", "=", "sess", ".", "run", "(", "[", "merged", ",", "model", ".", "opt_op", ",", "model", ".", "loss", ",", "model", ".", "preds", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_cost", "=", "outs", "[", "2", "]", "\n", "\n", "if", "iter", "%", "FLAGS", ".", "validate_iter", "==", "0", ":", "\n", "# Validation", "\n", "                ", "sess", ".", "run", "(", "val_adj_info", ".", "op", ")", "\n", "if", "FLAGS", ".", "validate_batch_size", "==", "-", "1", ":", "\n", "                    ", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "incremental_evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "                    ", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "validate_batch_size", ")", "\n", "", "sess", ".", "run", "(", "train_adj_info", ".", "op", ")", "\n", "epoch_val_costs", "[", "-", "1", "]", "+=", "val_cost", "\n", "\n", "", "if", "total_steps", "%", "FLAGS", ".", "print_every", "==", "0", ":", "\n", "                ", "summary_writer", ".", "add_summary", "(", "outs", "[", "0", "]", ",", "total_steps", ")", "\n", "\n", "# Print results", "\n", "", "avg_time", "=", "(", "avg_time", "*", "total_steps", "+", "time", ".", "time", "(", ")", "-", "t", ")", "/", "(", "total_steps", "+", "1", ")", "\n", "\n", "if", "total_steps", "%", "FLAGS", ".", "print_every", "==", "0", ":", "\n", "                ", "train_f1_mic", ",", "train_f1_mac", "=", "calc_f1", "(", "labels", ",", "outs", "[", "-", "1", "]", ")", "\n", "print", "(", "\"Iter:\"", ",", "'%04d'", "%", "iter", ",", "\n", "\"train_loss=\"", ",", "\"{:.5f}\"", ".", "format", "(", "train_cost", ")", ",", "\n", "\"train_f1_mic=\"", ",", "\"{:.5f}\"", ".", "format", "(", "train_f1_mic", ")", ",", "\n", "\"train_f1_mac=\"", ",", "\"{:.5f}\"", ".", "format", "(", "train_f1_mac", ")", ",", "\n", "\"val_loss=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_cost", ")", ",", "\n", "\"val_f1_mic=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mic", ")", ",", "\n", "\"val_f1_mac=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mac", ")", ",", "\n", "\"time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "avg_time", ")", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "total_steps", "+=", "1", "\n", "\n", "if", "total_steps", ">", "FLAGS", ".", "max_total_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "total_steps", ">", "FLAGS", ".", "max_total_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "sess", ".", "run", "(", "val_adj_info", ".", "op", ")", "\n", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "incremental_evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "batch_size", ")", "\n", "print", "(", "\"Full validation stats:\"", ",", "\n", "\"loss=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_cost", ")", ",", "\n", "\"f1_micro=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mic", ")", ",", "\n", "\"f1_macro=\"", ",", "\"{:.5f}\"", ".", "format", "(", "val_f1_mac", ")", ",", "\n", "\"time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "duration", ")", ")", "\n", "with", "open", "(", "log_dir", "(", ")", "+", "\"val_stats.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "\"loss={:.5f} f1_micro={:.5f} f1_macro={:.5f} time={:.5f}\"", ".", "\n", "format", "(", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", ")", ")", "\n", "\n", "", "print", "(", "\"Writing test set stats to file (don't peak!)\"", ")", "\n", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ",", "duration", "=", "incremental_evaluate", "(", "sess", ",", "model", ",", "minibatch", ",", "FLAGS", ".", "batch_size", ",", "test", "=", "True", ")", "\n", "with", "open", "(", "log_dir", "(", ")", "+", "\"test_stats.txt\"", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "\"loss={:.5f} f1_micro={:.5f} f1_macro={:.5f}\"", ".", "\n", "format", "(", "val_cost", ",", "val_f1_mic", ",", "val_f1_mac", ")", ")", "\n", "\n", "", "", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Loading training data..\"", ")", "\n", "train_data", "=", "load_data", "(", "FLAGS", ".", "train_prefix", ")", "\n", "print", "(", "\"Done loading training data..\"", ")", "\n", "train", "(", "train_data", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "tf", ".", "app", ".", "run", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.supervised_train.main": [[379, 388], ["print", "utils.load_data", "print", "supervised_train.train"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.load_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.inits.uniform": [[9, 13], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.inits.glorot": [[15, 20], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.inits.zeros": [[22, 26], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.inits.ones": [[27, 31], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.utils.load_mat_full": [[21, 35], ["scipy.loadmat", "features.todense.todense", "range", "int", "set", "set().difference", "int", "set", "data[].astype", "truelabels.tolist", "len", "numpy.random.choice", "len", "set", "len", "list"], "function", ["None"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'x'", "]", ":", "x", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'a'", "]", ":", "a", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'t'", "]", ":", "t", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "x", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "# Construct feed dictionary for SemiGNN", "\n", "", "def", "construct_feed_dict_semi", "(", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "learning_rate", ",", "momentum", ",", "\n", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'a'", "]", ":", "a", "}", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.utils.graph_process": [[36, 51], ["print", "graph.nodes", "graph.edges", "features[].tolist"], "function", ["None"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'u_i'", "]", ":", "u_i", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'u_j'", "]", ":", "u_j", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'graph_label'", "]", ":", "batch_graph_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "batch_data", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'sup_label'", "]", ":", "batch_sup_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "# Construct feed dictionary for SemiGNN", "\n", "", "def", "construct_feed_dict_spam", "(", "h", ",", "adj_info", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_review_adj'", "]", ":", "adj_info", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_item_adj'", "]", ":", "adj_info", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_review_adj'", "]", ":", "adj_info", "[", "2", "]", "}", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.utils.load_data": [[52, 74], ["utils.load_mat_full", "numpy.sum", "networkx.to_networkx_graph", "utils.graph_process", "networkx.to_networkx_graph", "int", "int", "utils.graph_process", "numpy.array", "StandardScaler", "StandardScaler.fit", "StandardScaler.transform", "range", "range", "open", "len", "len", "walks.append", "graph_process.nodes", "map", "line.split"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.utils.load_mat_full", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.utils.graph_process", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.utils.graph_process"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_user_adj'", "]", ":", "adj_info", "[", "3", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_user_adj'", "]", ":", "adj_info", "[", "4", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_item_adj'", "]", ":", "adj_info", "[", "5", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'homo_adj'", "]", ":", "adj_info", "[", "6", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_vecs'", "]", ":", "h", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_vecs'", "]", ":", "h", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_vecs'", "]", ":", "h", "[", "2", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'t'", "]", ":", "t", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "h", "[", "0", "]", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "", "def", "pad_adjlist", "(", "x_data", ")", ":", "\n", "# Get lengths of each row of data", "\n", "    ", "lens", "=", "np", ".", "array", "(", "[", "len", "(", "x_data", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "x_data", ")", ")", "]", ")", "\n", "\n", "# Mask of valid places in each row", "\n", "mask", "=", "np", ".", "arange", "(", "lens", ".", "max", "(", ")", ")", "<", "lens", "[", ":", ",", "None", "]", "\n", "\n", "# Setup output array and put elements from data into masked positions", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GraphConsis.utils.run_random_walks": [[75, 91], ["enumerate", "range", "G.degree", "range", "print", "random.choice", "G.neighbors", "pairs.append"], "function", ["None"], ["padded", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "padded", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "x_data", "[", "i", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", "\n", "", "padded", "[", "mask", "]", "=", "np", ".", "hstack", "(", "(", "x_data", "[", ":", "]", ")", ")", "\n", "return", "padded", "\n", "\n", "\n", "", "def", "matrix_to_adjlist", "(", "M", ",", "pad", "=", "True", ")", ":", "\n", "    ", "adjlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "M", ")", ")", ":", "\n", "        ", "adjline", "=", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "M", "[", "i", "]", ")", ")", ":", "\n", "            ", "if", "M", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "                ", "adjline", ".", "append", "(", "j", ")", "\n", "", "", "adjlist", ".", "append", "(", "adjline", ")", "\n", "", "if", "pad", ":", "\n", "        ", "adjlist", "=", "pad_adjlist", "(", "adjlist", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath.GeniePath.__init__": [[27, 72], ["GeniePath.GeniePath.forward_propagation", "tensorflow.contrib.layers.apply_regularization", "tensorflow.one_hot", "print", "tensorflow.equal", "tensorflow.reduce_mean", "print", "tensorflow.train.AdamOptimizer", "GeniePath.GeniePath.optimizer.compute_gradients", "GeniePath.GeniePath.optimizer.apply_gradients", "tensorflow.global_variables_initializer", "print", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.trainable_variables", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.forward_propagation"], ["    ", "def", "__init__", "(", "self", ",", "\n", "session", ",", "\n", "nodes", ",", "\n", "in_dim", ",", "\n", "out_dim", ",", "\n", "dim", ",", "\n", "lstm_hidden", ",", "\n", "heads", ",", "\n", "layer_num", ",", "\n", "class_size", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "lstm_hidden", "=", "lstm_hidden", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "layer_num", "=", "layer_num", "\n", "self", ".", "class_size", "=", "class_size", "\n", "\n", "self", ".", "placeholders", "=", "{", "'a'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "1", ",", "self", ".", "nodes", ",", "self", ".", "nodes", "]", ",", "'adj'", ")", ",", "\n", "'x'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "nodes", ",", "self", ".", "in_dim", "]", ",", "'nxf'", ")", ",", "\n", "'batch_index'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'index'", ")", ",", "\n", "'t'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "out_dim", "]", ",", "'labels'", ")", ",", "\n", "'lr'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'learning_rate'", ")", ",", "\n", "'mom'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'momentum'", ")", ",", "\n", "'num_features_nonzero'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "}", "\n", "\n", "loss", ",", "probabilities", "=", "self", ".", "forward_propagation", "(", ")", "\n", "self", ".", "loss", ",", "self", ".", "probabilities", "=", "loss", ",", "probabilities", "\n", "self", ".", "l2", "=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.01", ")", ",", "\n", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "\n", "self", ".", "pred", "=", "tf", ".", "one_hot", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "self", ".", "out_dim", ")", "\n", "print", "(", "self", ".", "pred", ".", "shape", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "placeholders", "[", "'t'", "]", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "\"float\"", ")", ")", "\n", "print", "(", "'Forward propagation finished.'", ")", "\n", "\n", "self", ".", "sess", "=", "session", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "placeholders", "[", "'lr'", "]", ")", "\n", "gradients", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", "+", "self", ".", "l2", ")", "\n", "capped_gradients", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.", ",", "5.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gradients", "if", "grad", "is", "not", "None", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gradients", ")", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "print", "(", "'Backward propagation finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath.GeniePath.forward_propagation": [[73, 100], ["tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "enumerate", "tensorflow.contrib.layers.fully_connected", "tensorflow.squeeze", "print", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.losses.sigmoid_cross_entropy", "tensorflow.nn.softmax", "base_models.layers.GeniePathLayer", "gplayers[].forward", "tensorflow.one_hot", "range"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.forward"], ["", "def", "forward_propagation", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'genie_path_forward'", ")", ":", "\n", "            ", "x", "=", "self", ".", "placeholders", "[", "'x'", "]", "\n", "x", "=", "x", "[", "None", ",", ":", "]", "\n", "x", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "x", ",", "self", ".", "dim", ",", "activation_fn", "=", "lambda", "x", ":", "x", ")", "\n", "\n", "gplayers", "=", "[", "GeniePathLayer", "(", "self", ".", "placeholders", ",", "self", ".", "nodes", ",", "self", ".", "in_dim", ",", "self", ".", "dim", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "gplayers", ")", ":", "\n", "                ", "x", ",", "(", "h", ",", "c", ")", "=", "gplayers", "[", "i", "]", ".", "forward", "(", "x", ",", "self", ".", "placeholders", "[", "'a'", "]", ",", "self", ".", "lstm_hidden", ",", "self", ".", "lstm_hidden", ")", "\n", "x", "=", "x", "[", "None", ",", ":", "]", "\n", "", "self", ".", "check", "=", "x", "\n", "x", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "x", ",", "self", ".", "out_dim", ",", "activation_fn", "=", "lambda", "x", ":", "x", ")", "\n", "x", "=", "tf", ".", "squeeze", "(", "x", ",", "0", ")", "\n", "print", "(", "'geniePath embedding over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'classification'", ")", ":", "\n", "            ", "batch_data", "=", "tf", ".", "matmul", "(", "tf", ".", "one_hot", "(", "self", ".", "placeholders", "[", "'batch_index'", "]", ",", "self", ".", "nodes", ")", ",", "x", ")", "\n", "# W = tf.get_variable(name='weights',", "\n", "#                     shape=[self.out_dim, self.class_size],", "\n", "#                     initializer=tf.contrib.layers.xavier_initializer())", "\n", "# b = tf.get_variable(name='bias', shape=[1, self.class_size], initializer=tf.zeros_initializer())", "\n", "# logits = tf.matmul(batch_data, W) + b", "\n", "logits", "=", "batch_data", "\n", "loss", "=", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "multi_class_labels", "=", "self", ".", "placeholders", "[", "'t'", "]", ",", "logits", "=", "logits", ")", "\n", "\n", "", "return", "loss", ",", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath.GeniePath.train": [[101, 111], ["utils.utils.utils.construct_feed_dict", "GeniePath.GeniePath.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "train", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "outs", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "train_op", ",", "self", ".", "loss", ",", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "outs", "[", "1", "]", "\n", "acc", "=", "outs", "[", "2", "]", "\n", "pred", "=", "outs", "[", "3", "]", "\n", "prob", "=", "outs", "[", "4", "]", "\n", "return", "loss", ",", "acc", ",", "pred", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath.GeniePath.test": [[112, 118], ["utils.utils.utils.construct_feed_dict", "GeniePath.GeniePath.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "test", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "acc", ",", "pred", ",", "probabilities", ",", "tags", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", ",", "self", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "acc", ",", "pred", ",", "probabilities", ",", "tags", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath_main.arg_parser": [[20, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'dblp'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "int", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.001", ",", "help", "=", "'the ratio of training set in whole dataset.'", ")", "\n", "\n", "# GeniePath", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--lstm_hidden'", ",", "default", "=", "128", ",", "help", "=", "'lstm_hidden unit'", ")", "\n", "parser", ".", "add_argument", "(", "'--heads'", ",", "default", "=", "1", ",", "help", "=", "'gat heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_num'", ",", "default", "=", "4", ",", "help", "=", "'geniePath layer num'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath_main.set_env": [[39, 43], ["tensorflow.reset_default_graph", "np.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["", "def", "set_env", "(", "args", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath_main.get_data": [[46, 53], ["None"], "function", ["None"], ["", "def", "get_data", "(", "ix", ",", "int_batch", ",", "train_size", ")", ":", "\n", "    ", "if", "ix", "+", "int_batch", ">=", "train_size", ":", "\n", "        ", "ix", "=", "train_size", "-", "int_batch", "\n", "end", "=", "train_size", "\n", "", "else", ":", "\n", "        ", "end", "=", "ix", "+", "int_batch", "\n", "", "return", "train_data", "[", "ix", ":", "end", "]", ",", "train_label", "[", "ix", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath_main.load_data": [[55, 65], ["load_data_dblp", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_str", "==", "'dblp'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_data_dblp", "(", ")", "\n", "node_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "node_embedding", "=", "features", ".", "shape", "[", "1", "]", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "paras", "=", "[", "node_size", ",", "node_embedding", ",", "class_size", ",", "train_size", "]", "\n", "\n", "", "return", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GeniePath.GeniePath_main.train": [[67, 107], ["print", "tensorflow.Session", "algorithms.GeniePath.GeniePath.GeniePath", "sess.run", "time.clock", "range", "time.clock", "print", "print", "algorithms.GeniePath.GeniePath.GeniePath.test", "tensorflow.global_variables_initializer", "range", "print", "GeniePath_main.get_data", "algorithms.GeniePath.GeniePath.GeniePath.train", "print"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "def", "train", "(", "args", ",", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "adj_data", "=", "adj_list", "\n", "net", "=", "GeniePath", "(", "session", "=", "sess", ",", "out_dim", "=", "paras", "[", "2", "]", ",", "dim", "=", "args", ".", "dim", ",", "lstm_hidden", "=", "args", ".", "lstm_hidden", ",", "\n", "nodes", "=", "paras", "[", "0", "]", ",", "in_dim", "=", "paras", "[", "1", "]", ",", "heads", "=", "args", ".", "heads", ",", "layer_num", "=", "args", ".", "layer_num", ",", "\n", "class_size", "=", "paras", "[", "2", "]", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# net.load(sess)", "\n", "\n", "t_start", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "count", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "paras", "[", "3", "]", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "batch_data", ",", "batch_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "features", ",", "adj_data", ",", "batch_label", ",", "\n", "batch_data", ",", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "print", "(", "\"batch loss: {:.4f}, batch acc: {:.4f}\"", ".", "format", "(", "loss", ",", "acc", ")", ")", "\n", "# print(prob, pred)", "\n", "\n", "train_loss", "+=", "loss", "\n", "train_acc", "+=", "acc", "\n", "count", "+=", "1", "\n", "", "train_loss", "=", "train_loss", "/", "count", "\n", "train_acc", "=", "train_acc", "/", "count", "\n", "print", "(", "\"epoch{:d} : train_loss: {:.4f}, train_acc: {:.4f}\"", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_acc", ")", ")", "\n", "# net.save(sess)", "\n", "\n", "", "t_end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"train time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "t_end", "-", "t_start", ")", ")", "\n", "print", "(", "\"Train end!\"", ")", "\n", "\n", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "features", ",", "adj_data", ",", "test_label", ",", "\n", "test_data", ")", "\n", "\n", "", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM.GEM.__init__": [[26, 70], ["GEM.GEM.forward_propagation", "tensorflow.contrib.layers.apply_regularization", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.where", "print", "tensorflow.equal", "tensorflow.reduce_mean", "print", "tensorflow.train.AdamOptimizer", "GEM.GEM.optimizer.compute_gradients", "GEM.GEM.optimizer.apply_gradients", "tensorflow.global_variables_initializer", "print", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.trainable_variables", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.forward_propagation"], ["    ", "def", "__init__", "(", "self", ",", "\n", "session", ",", "\n", "nodes", ",", "\n", "class_size", ",", "\n", "meta", ",", "\n", "embedding", ",", "\n", "encoding", ",", "\n", "hop", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "class_size", "=", "class_size", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "encoding", "=", "encoding", "\n", "self", ".", "hop", "=", "hop", "\n", "\n", "self", ".", "placeholders", "=", "{", "'a'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "meta", ",", "self", ".", "nodes", ",", "self", ".", "nodes", "]", ",", "'adj'", ")", ",", "\n", "'x'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "nodes", ",", "self", ".", "embedding", "]", ",", "'nxf'", ")", ",", "\n", "'batch_index'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'index'", ")", ",", "\n", "'t'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "class_size", "]", ",", "'labels'", ")", ",", "\n", "'lr'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'learning_rate'", ")", ",", "\n", "'mom'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'momentum'", ")", ",", "\n", "'num_features_nonzero'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "}", "\n", "\n", "loss", ",", "probabilities", "=", "self", ".", "forward_propagation", "(", ")", "\n", "self", ".", "loss", ",", "self", ".", "probabilities", "=", "loss", ",", "probabilities", "\n", "self", ".", "l2", "=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.01", ")", ",", "\n", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "\n", "x", "=", "tf", ".", "ones_like", "(", "self", ".", "probabilities", ")", "\n", "y", "=", "tf", ".", "zeros_like", "(", "self", ".", "probabilities", ")", "\n", "self", ".", "pred", "=", "tf", ".", "where", "(", "self", ".", "probabilities", ">", "0.5", ",", "x", "=", "x", ",", "y", "=", "y", ")", "\n", "\n", "print", "(", "self", ".", "pred", ".", "shape", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "self", ".", "pred", ",", "self", ".", "placeholders", "[", "'t'", "]", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "\"float\"", ")", ")", "\n", "print", "(", "'Forward propagation finished.'", ")", "\n", "\n", "self", ".", "sess", "=", "session", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "placeholders", "[", "'lr'", "]", ")", "\n", "gradients", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", "+", "self", ".", "l2", ")", "\n", "capped_gradients", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.", ",", "5.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gradients", "if", "grad", "is", "not", "None", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gradients", ")", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "print", "(", "'Backward propagation finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM.GEM.forward_propagation": [[71, 102], ["tensorflow.variable_scope", "tensorflow.get_variable", "range", "print", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.get_variable", "tensorflow.losses.sigmoid_cross_entropy", "tensorflow.nn.sigmoid", "base_models.models.GEMLayer", "base_models.models.GEMLayer.", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "forward_propagation", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'gem_embedding'", ")", ":", "\n", "            ", "h", "=", "tf", ".", "get_variable", "(", "name", "=", "'init_embedding'", ",", "shape", "=", "[", "self", ".", "nodes", ",", "self", ".", "encoding", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "hop", ")", ":", "\n", "                ", "f", "=", "GEMLayer", "(", "self", ".", "placeholders", ",", "self", ".", "nodes", ",", "self", ".", "meta", ",", "self", ".", "embedding", ",", "self", ".", "encoding", ")", "\n", "gem_out", "=", "f", "(", "inputs", "=", "h", ")", "\n", "h", "=", "tf", ".", "reshape", "(", "gem_out", ",", "[", "self", ".", "nodes", ",", "self", ".", "encoding", "]", ")", "\n", "", "print", "(", "'GEM embedding over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'classification'", ")", ":", "\n", "            ", "batch_data", "=", "tf", ".", "matmul", "(", "tf", ".", "one_hot", "(", "self", ".", "placeholders", "[", "'batch_index'", "]", ",", "self", ".", "nodes", ")", ",", "h", ")", "\n", "W", "=", "tf", ".", "get_variable", "(", "name", "=", "'weights'", ",", "\n", "shape", "=", "[", "self", ".", "encoding", ",", "self", ".", "class_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'bias'", ",", "shape", "=", "[", "1", ",", "self", ".", "class_size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "tf", ".", "transpose", "(", "batch_data", ",", "perm", "=", "[", "0", ",", "1", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "batch_data", ",", "W", ")", "+", "b", "\n", "\n", "u", "=", "tf", ".", "get_variable", "(", "name", "=", "'u'", ",", "\n", "shape", "=", "[", "1", ",", "self", ".", "encoding", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n", "loss", "=", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "multi_class_labels", "=", "self", ".", "placeholders", "[", "'t'", "]", ",", "logits", "=", "logits", ")", "\n", "\n", "# TODO", "\n", "# loss = -tf.reduce_sum(", "\n", "#     tf.log_sigmoid(self.placeholders['t'] * tf.matmul(u, tf.transpose(batch_data, perm=[1, 0]))))", "\n", "\n", "# return loss, logits", "\n", "", "return", "loss", ",", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM.GEM.train": [[103, 113], ["utils.utils.utils.construct_feed_dict", "GEM.GEM.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "train", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "outs", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "train_op", ",", "self", ".", "loss", ",", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "outs", "[", "1", "]", "\n", "acc", "=", "outs", "[", "2", "]", "\n", "pred", "=", "outs", "[", "3", "]", "\n", "prob", "=", "outs", "[", "4", "]", "\n", "return", "loss", ",", "acc", ",", "pred", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM.GEM.test": [[114, 120], ["utils.utils.utils.construct_feed_dict", "GEM.GEM.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "test", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "acc", ",", "pred", ",", "probabilities", ",", "tags", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", ",", "self", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "acc", ",", "pred", ",", "probabilities", ",", "tags", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM_main.arg_parser": [[20, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'dblp'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "int", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.001", ",", "help", "=", "'the ratio of training set in whole dataset.'", ")", "\n", "\n", "# GEM", "\n", "parser", ".", "add_argument", "(", "'--hop'", ",", "default", "=", "1", ",", "help", "=", "'hop number'", ")", "\n", "parser", ".", "add_argument", "(", "'--k'", ",", "default", "=", "16", ",", "help", "=", "'gem layer unit'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM_main.set_env": [[37, 41], ["tensorflow.reset_default_graph", "np.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["", "def", "set_env", "(", "args", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM_main.get_data": [[44, 51], ["None"], "function", ["None"], ["", "def", "get_data", "(", "ix", ",", "int_batch", ",", "train_size", ")", ":", "\n", "    ", "if", "ix", "+", "int_batch", ">=", "train_size", ":", "\n", "        ", "ix", "=", "train_size", "-", "int_batch", "\n", "end", "=", "train_size", "\n", "", "else", ":", "\n", "        ", "end", "=", "ix", "+", "int_batch", "\n", "", "return", "train_data", "[", "ix", ":", "end", "]", ",", "train_label", "[", "ix", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM_main.load_data": [[53, 65], ["len", "load_data_dblp", "load_example_gem"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_example_gem"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_str", "==", "'dblp'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_data_dblp", "(", ")", "\n", "", "if", "args", ".", "dataset_str", "==", "'example'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_example_gem", "(", ")", "\n", "", "node_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "node_embedding", "=", "features", ".", "shape", "[", "1", "]", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "paras", "=", "[", "node_size", ",", "node_embedding", ",", "class_size", ",", "train_size", "]", "\n", "\n", "return", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GEM.GEM_main.train": [[67, 108], ["print", "tensorflow.Session", "len", "algorithms.GEM.GEM.GEM", "sess.run", "time.clock", "range", "time.clock", "print", "print", "algorithms.GEM.GEM.GEM.test", "tensorflow.global_variables_initializer", "range", "print", "GEM_main.get_data", "algorithms.GEM.GEM.GEM.train", "print"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "def", "train", "(", "args", ",", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "\n", "        ", "adj_data", "=", "adj_list", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "# device num", "\n", "net", "=", "GEM", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "encoding", "=", "args", ".", "k", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "embedding", "=", "paras", "[", "1", "]", ",", "hop", "=", "args", ".", "hop", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# net.load(sess)", "\n", "\n", "t_start", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "count", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "paras", "[", "3", "]", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "batch_data", ",", "batch_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "features", ",", "adj_data", ",", "batch_label", ",", "\n", "batch_data", ",", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "print", "(", "\"batch loss: {:.4f}, batch acc: {:.4f}\"", ".", "format", "(", "loss", ",", "acc", ")", ")", "\n", "# print(prob, pred)", "\n", "\n", "train_loss", "+=", "loss", "\n", "train_acc", "+=", "acc", "\n", "count", "+=", "1", "\n", "", "train_loss", "=", "train_loss", "/", "count", "\n", "train_acc", "=", "train_acc", "/", "count", "\n", "print", "(", "\"epoch{:d} : train_loss: {:.4f}, train_acc: {:.4f}\"", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_acc", ")", ")", "\n", "# net.save(sess)", "\n", "\n", "", "t_end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"train time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "t_end", "-", "t_start", ")", ")", "\n", "print", "(", "\"Train end!\"", ")", "\n", "\n", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "features", ",", "adj_data", ",", "test_label", ",", "\n", "test_data", ")", "\n", "\n", "", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars_main.arg_parser": [[21, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'dblp'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "int", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.001", ",", "help", "=", "'the ratio of training set in whole dataset.'", ")", "\n", "\n", "# GCN args", "\n", "parser", ".", "add_argument", "(", "'--hidden1'", ",", "default", "=", "16", ",", "help", "=", "'Number of units in GCN hidden layer 1.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden2'", ",", "default", "=", "16", ",", "help", "=", "'Number of units in GCN hidden layer 2.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_output'", ",", "default", "=", "4", ",", "help", "=", "'gcn output size.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars_main.set_env": [[39, 43], ["tensorflow.reset_default_graph", "np.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["", "def", "set_env", "(", "args", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars_main.get_data": [[46, 53], ["None"], "function", ["None"], ["", "def", "get_data", "(", "ix", ",", "int_batch", ",", "train_size", ")", ":", "\n", "    ", "if", "ix", "+", "int_batch", ">=", "train_size", ":", "\n", "        ", "ix", "=", "train_size", "-", "int_batch", "\n", "end", "=", "train_size", "\n", "", "else", ":", "\n", "        ", "end", "=", "ix", "+", "int_batch", "\n", "", "return", "train_data", "[", "ix", ":", "end", "]", ",", "train_label", "[", "ix", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars_main.load_data": [[55, 65], ["load_data_dblp", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_str", "==", "'dblp'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_data_dblp", "(", ")", "\n", "node_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "node_embedding", "=", "features", ".", "shape", "[", "1", "]", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "paras", "=", "[", "node_size", ",", "node_embedding", ",", "class_size", ",", "train_size", "]", "\n", "\n", "", "return", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars_main.train": [[67, 108], ["print", "tensorflow.Session", "len", "algorithms.FdGars.FdGars.FdGars", "sess.run", "time.clock", "range", "time.clock", "print", "print", "algorithms.FdGars.FdGars.FdGars.test", "normalize_adj", "tensorflow.global_variables_initializer", "range", "print", "FdGars_main.get_data", "algorithms.FdGars.FdGars.FdGars.train", "print"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.normalize_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "def", "train", "(", "args", ",", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "adj_data", "=", "[", "normalize_adj", "(", "adj", ")", "for", "adj", "in", "adj_list", "]", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "# meta=1 in FdGars", "\n", "net", "=", "FdGars", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "gcn_output1", "=", "args", ".", "hidden1", ",", "gcn_output2", "=", "args", ".", "hidden2", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "embedding", "=", "paras", "[", "1", "]", ",", "encoding", "=", "args", ".", "gcn_output", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# net.load(sess)", "\n", "\n", "t_start", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "count", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "paras", "[", "3", "]", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "batch_data", ",", "batch_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "features", ",", "adj_data", ",", "batch_label", ",", "\n", "batch_data", ",", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "print", "(", "\"batch loss: {:.4f}, batch acc: {:.4f}\"", ".", "format", "(", "loss", ",", "acc", ")", ")", "\n", "# print(prob, pred)", "\n", "\n", "train_loss", "+=", "loss", "\n", "train_acc", "+=", "acc", "\n", "count", "+=", "1", "\n", "", "train_loss", "=", "train_loss", "/", "count", "\n", "train_acc", "=", "train_acc", "/", "count", "\n", "print", "(", "\"epoch{:d} : train_loss: {:.4f}, train_acc: {:.4f}\"", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_acc", ")", ")", "\n", "\n", "# net.save(sess)", "\n", "\n", "", "t_end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"train time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "t_end", "-", "t_start", ")", ")", "\n", "print", "(", "\"Train end!\"", ")", "\n", "\n", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "features", ",", "adj_data", ",", "test_label", ",", "\n", "test_data", ")", "\n", "\n", "", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars.FdGars.__init__": [[26, 68], ["FdGars.FdGars.forward_propagation", "tensorflow.contrib.layers.apply_regularization", "tensorflow.one_hot", "print", "tensorflow.equal", "tensorflow.reduce_mean", "print", "tensorflow.train.AdamOptimizer", "FdGars.FdGars.optimizer.compute_gradients", "FdGars.FdGars.optimizer.apply_gradients", "tensorflow.global_variables_initializer", "print", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.trainable_variables", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.forward_propagation"], ["    ", "def", "__init__", "(", "self", ",", "\n", "session", ",", "\n", "nodes", ",", "\n", "class_size", ",", "\n", "gcn_output1", ",", "\n", "gcn_output2", ",", "\n", "meta", ",", "\n", "embedding", ",", "\n", "encoding", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "class_size", "=", "class_size", "\n", "self", ".", "gcn_output1", "=", "gcn_output1", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "encoding", "=", "encoding", "\n", "\n", "self", ".", "placeholders", "=", "{", "'a'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "meta", ",", "self", ".", "nodes", ",", "self", ".", "nodes", "]", ",", "'adj'", ")", ",", "\n", "'x'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "nodes", ",", "self", ".", "embedding", "]", ",", "'nxf'", ")", ",", "\n", "'batch_index'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'index'", ")", ",", "\n", "'t'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "class_size", "]", ",", "'labels'", ")", ",", "\n", "'lr'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'learning_rate'", ")", ",", "\n", "'mom'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'momentum'", ")", ",", "\n", "'num_features_nonzero'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "}", "\n", "\n", "loss", ",", "probabilities", "=", "self", ".", "forward_propagation", "(", ")", "\n", "self", ".", "loss", ",", "self", ".", "probabilities", "=", "loss", ",", "probabilities", "\n", "self", ".", "l2", "=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.01", ")", ",", "\n", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "\n", "self", ".", "pred", "=", "tf", ".", "one_hot", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "class_size", ")", "\n", "print", "(", "self", ".", "pred", ".", "shape", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "placeholders", "[", "'t'", "]", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "\"float\"", ")", ")", "\n", "print", "(", "'Forward propagation finished.'", ")", "\n", "\n", "self", ".", "sess", "=", "session", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "placeholders", "[", "'lr'", "]", ")", "\n", "gradients", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", "+", "self", ".", "l2", ")", "\n", "capped_gradients", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.", ",", "5.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gradients", "if", "grad", "is", "not", "None", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gradients", ")", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "print", "(", "'Backward propagation finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars.FdGars.forward_propagation": [[69, 86], ["tensorflow.variable_scope", "range", "tensorflow.concat", "tensorflow.reshape", "print", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.losses.sigmoid_cross_entropy", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape.append", "tensorflow.one_hot", "base_models.models.GCN().embedding", "base_models.models.GCN"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN.embedding"], ["", "def", "forward_propagation", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'gcn'", ")", ":", "\n", "            ", "gcn_emb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "meta", ")", ":", "\n", "                ", "gcn_out", "=", "tf", ".", "reshape", "(", "GCN", "(", "self", ".", "placeholders", ",", "self", ".", "gcn_output1", ",", "self", ".", "embedding", ",", "\n", "self", ".", "encoding", ",", "index", "=", "i", ")", ".", "embedding", "(", ")", ",", "[", "1", ",", "self", ".", "nodes", "*", "self", ".", "encoding", "]", ")", "\n", "gcn_emb", ".", "append", "(", "gcn_out", ")", "\n", "", "gcn_emb", "=", "tf", ".", "concat", "(", "gcn_emb", ",", "0", ")", "\n", "gcn_emb", "=", "tf", ".", "reshape", "(", "gcn_emb", ",", "[", "self", ".", "nodes", ",", "self", ".", "encoding", "]", ")", "\n", "print", "(", "'GCN embedding over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'classification'", ")", ":", "\n", "            ", "batch_data", "=", "tf", ".", "matmul", "(", "tf", ".", "one_hot", "(", "self", ".", "placeholders", "[", "'batch_index'", "]", ",", "self", ".", "nodes", ")", ",", "gcn_emb", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "softmax", "(", "batch_data", ")", "\n", "loss", "=", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "multi_class_labels", "=", "self", ".", "placeholders", "[", "'t'", "]", ",", "logits", "=", "logits", ")", "\n", "\n", "", "return", "loss", ",", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars.FdGars.train": [[87, 97], ["utils.utils.utils.construct_feed_dict", "FdGars.FdGars.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "train", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "outs", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "train_op", ",", "self", ".", "loss", ",", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "outs", "[", "1", "]", "\n", "acc", "=", "outs", "[", "2", "]", "\n", "pred", "=", "outs", "[", "3", "]", "\n", "prob", "=", "outs", "[", "4", "]", "\n", "return", "loss", ",", "acc", ",", "pred", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.FdGars.FdGars.FdGars.test": [[98, 104], ["utils.utils.utils.construct_feed_dict", "FdGars.FdGars.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "test", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "acc", ",", "pred", ",", "probabilities", ",", "tags", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", ",", "self", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "acc", ",", "pred", ",", "probabilities", ",", "tags", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.calc_f1": [[19, 25], ["numpy.argmax", "numpy.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score"], "function", ["None"], ["\n", "# os.environ['CUDA_VISIBLE_DEVICES'] = '0,1'", "\n", "\n", "# init the common args, expect the model specific args", "\n", "def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.main.cal_acc": [[26, 31], ["numpy.argmax", "numpy.argmax", "sklearn.metrics.accuracy_score"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'GAS'", ",", "\n", "help", "=", "\"['Player2Vec', 'FdGars','GEM','SemiGNN','GAS','GeniePath']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'example'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.unzip_file": [[15, 23], ["zipfile.is_zipfile", "zipfile.ZipFile", "zipfile.ZipFile.namelist", "print", "zipfile.ZipFile.extract"], "function", ["None"], ["if", "iz", ":", "\n", "        ", "zf", "=", "zipfile", ".", "ZipFile", "(", "zip_src", ",", "'r'", ")", "\n", "for", "file", "in", "zf", ".", "namelist", "(", ")", ":", "\n", "            ", "zf", ".", "extract", "(", "file", ",", "dst_dir", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'Zip Error.'", ")", "\n", "\n", "\n", "", "", "def", "load_data_dblp", "(", "path", "=", "'../../dataset/DBLP4057_GAT_with_idx_tra200_val_800.mat'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp": [[25, 42], ["scipy.loadmat", "rownetworks.append", "rownetworks.append", "rownetworks.append", "range", "sklearn.model_selection.train_test_split", "data[].astype", "len", "numpy.eye", "numpy.eye", "numpy.eye"], "function", ["None"], ["truelabels", ",", "features", "=", "data", "[", "'label'", "]", ",", "data", "[", "'features'", "]", ".", "astype", "(", "float", ")", "\n", "N", "=", "features", ".", "shape", "[", "0", "]", "\n", "rownetworks", "=", "[", "data", "[", "'net_APA'", "]", "-", "np", ".", "eye", "(", "N", ")", "]", "\n", "# rownetworks = [data['net_APA'] - np.eye(N), data['net_APCPA'] - np.eye(N), data['net_APTPA'] - np.eye(N)]", "\n", "y", "=", "truelabels", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "48", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "return", "rownetworks", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n", "\n", "", "def", "load_example_semi", "(", ")", ":", "\n", "# example data for SemiGNN", "\n", "    ", "features", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_example_semi": [[44, 78], ["numpy.array", "numpy.array", "range", "sklearn.model_selection.train_test_split", "numpy.array", "numpy.array", "len"], "function", ["None"], ["[", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "]", ")", "\n", "N", "=", "features", ".", "shape", "[", "0", "]", "\n", "# Here we use binary matrix as adjacency matrix, weighted matrix is acceptable as well", "\n", "rownetworks", "=", "[", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "]", "\n", "y", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.2", ",", "random_state", "=", "48", ",", "\n", "shuffle", "=", "True", ")", "# test_size=0.25  batch\u2014\u2014size=2", "\n", "\n", "return", "rownetworks", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n", "\n", "", "def", "load_example_gem", "(", ")", ":", "\n", "# example data for GEM", "\n", "# node=8  p=7  D=2", "\n", "    ", "features", "=", "np", ".", "array", "(", "[", "[", "5", ",", "3", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "2", ",", "3", ",", "1", ",", "2", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_example_gem": [[80, 117], ["numpy.array", "numpy.array", "range", "sklearn.model_selection.train_test_split", "numpy.array", "numpy.array", "len"], "function", ["None"], ["[", "0", ",", "0", ",", "2", ",", "4", ",", "4", ",", "1", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "3", ",", "3", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "2", ",", "5", ",", "1", ",", "4", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "3", ",", "5", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "3", ",", "4", ",", "5", ",", "2", ",", "1", ",", "1", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "N", "=", "features", ".", "shape", "[", "0", "]", "\n", "rownetworks", "=", "[", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "]", ")", "]", "\n", "# y = np.array([-1, -1, -1, -1, 1, 1, 1, 1])", "\n", "y", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "y", "=", "y", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.2", ",", "random_state", "=", "8", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "return", "rownetworks", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n", "\n", "", "def", "load_data_gas", "(", ")", ":", "\n", "# example data for GAS", "\n", "# construct U-E-I network", "\n", "    ", "user_review_adj", "=", "[", "[", "0", ",", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", ",", "[", "5", "]", ",", "[", "4", ",", "6", "]", "]", "\n", "user_review_adj", "=", "pad_adjlist", "(", "user_review_adj", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_gas": [[119, 171], ["utils.pad_adjlist", "utils.pad_adjlist", "utils.pad_adjlist", "utils.pad_adjlist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "sklearn.model_selection.train_test_split", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist"], ["user_item_adj", "=", "pad_adjlist", "(", "user_item_adj", ")", "\n", "item_review_adj", "=", "[", "[", "0", ",", "2", ",", "3", "]", ",", "[", "1", ",", "4", "]", ",", "[", "5", ",", "6", "]", "]", "\n", "item_review_adj", "=", "pad_adjlist", "(", "item_review_adj", ")", "\n", "item_user_adj", "=", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "0", ",", "4", "]", ",", "[", "3", ",", "4", "]", "]", "\n", "item_user_adj", "=", "pad_adjlist", "(", "item_user_adj", ")", "\n", "review_item_adj", "=", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "2", ",", "2", "]", "\n", "review_user_adj", "=", "[", "0", ",", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "4", "]", "\n", "\n", "# initialize review_vecs", "\n", "review_vecs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "\n", "# initialize user_vecs and item_vecs with user_review_adj and item_review_adj", "\n", "# for example, u0 has r1 and r0, then we get the first line of user_vecs: [1, 1, 0, 0, 0, 0, 0]", "\n", "user_vecs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", "]", ")", "\n", "item_vecs", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "features", "=", "[", "review_vecs", ",", "user_vecs", ",", "item_vecs", "]", "\n", "\n", "# initialize the Comment Graph", "\n", "homo_adj", "=", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", "]", "\n", "\n", "adjs", "=", "[", "user_review_adj", ",", "user_item_adj", ",", "item_review_adj", ",", "item_user_adj", ",", "review_user_adj", ",", "review_item_adj", ",", "homo_adj", "]", "\n", "\n", "y", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "index", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "index", ",", "y", ",", "stratify", "=", "y", ",", "test_size", "=", "0.4", ",", "random_state", "=", "48", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "return", "adjs", ",", "features", ",", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.__init__": [[14, 46], ["data_loader.load_data_dblp", "len", "len", "len", "len", "range", "get_data.Data.print_statistics", "range", "adj.append", "u_index.append", "v_index.append", "get_data.Data.n_int.append", "scipy.dok_matrix", "get_data.Data.R.append", "len", "numpy.where", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.print_statistics"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "save_path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "save_path", "=", "save_path", "\n", "\n", "self", ".", "rownetworks", ",", "self", ".", "features", ",", "self", ".", "X_train", ",", "self", ".", "y_train", ",", "self", ".", "X_test", ",", "self", ".", "y_test", "=", "load_data_dblp", "(", "path", ")", "\n", "self", ".", "n_nodes", "=", "0", "\n", "self", ".", "n_train", ",", "self", ".", "n_test", "=", "0", ",", "0", "\n", "\n", "self", ".", "n_nodes", "=", "len", "(", "self", ".", "features", ")", "\n", "self", ".", "n_train", "=", "len", "(", "self", ".", "X_train", ")", "\n", "self", ".", "n_test", "=", "len", "(", "self", ".", "X_test", ")", "\n", "\n", "self", ".", "n_metapath", "=", "len", "(", "self", ".", "rownetworks", ")", "\n", "adj", "=", "[", "]", "\n", "u_index", "=", "[", "]", "\n", "v_index", "=", "[", "]", "\n", "self", ".", "n_int", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "            ", "z", "=", "self", ".", "rownetworks", "[", "i", "]", "\n", "adj", ".", "append", "(", "z", ")", "\n", "u_index", ".", "append", "(", "np", ".", "where", "(", "z", ")", "[", "0", "]", ")", "\n", "v_index", ".", "append", "(", "np", ".", "where", "(", "z", ")", "[", "1", "]", ")", "\n", "self", ".", "n_int", ".", "append", "(", "len", "(", "np", ".", "where", "(", "z", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "print_statistics", "(", ")", "\n", "\n", "self", ".", "R", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "            ", "R", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_nodes", ",", "self", ".", "n_nodes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "R", "[", "u_index", "[", "i", "]", ",", "v_index", "[", "i", "]", "]", "=", "1", "\n", "self", ".", "R", ".", "append", "(", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.get_adj_mat": [[48, 75], ["time.time.time", "range", "print", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "adj_mat.append", "norm_adj_mat.append", "mean_adj_mat.append", "get_data.Data.create_adj_mat", "range", "time.time.time", "scipy.save_npz", "scipy.save_npz", "scipy.save_npz"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.create_adj_mat"], ["", "", "def", "get_adj_mat", "(", "self", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "[", "]", "\n", "norm_adj_mat", "=", "[", "]", "\n", "mean_adj_mat", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "                ", "adj", "=", "sp", ".", "load_npz", "(", "self", ".", "save_path", "+", "'/s_adj_%d_mat.npz'", "%", "i", ")", "\n", "norm", "=", "sp", ".", "load_npz", "(", "self", ".", "save_path", "+", "'/s_norm_adj_%d_mat.npz'", "%", "i", ")", "\n", "mean", "=", "sp", ".", "load_npz", "(", "self", ".", "save_path", "+", "'/s_mean_adj_%d_mat.npz'", "%", "i", ")", "\n", "\n", "adj_mat", ".", "append", "(", "adj", ")", "\n", "norm_adj_mat", ".", "append", "(", "norm", ")", "\n", "mean_adj_mat", ".", "append", "(", "mean", ")", "\n", "\n", "", "print", "(", "'already load adj matrix'", ",", "adj_mat", "[", "0", "]", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", "=", "self", ".", "create_adj_mat", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "                ", "sp", ".", "save_npz", "(", "self", ".", "save_path", "+", "'/s_adj_%d_mat.npz'", "%", "i", ",", "adj_mat", "[", "i", "]", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "save_path", "+", "'/s_norm_adj_%d_mat.npz'", "%", "i", ",", "norm_adj_mat", "[", "i", "]", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "save_path", "+", "'/s_mean_adj_%d_mat.npz'", "%", "i", ",", "mean_adj_mat", "[", "i", "]", ")", "\n", "\n", "", "", "return", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.create_adj_mat": [[76, 123], ["range", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.tocoo", "numpy.array", "numpy.sum", "numpy.dot", "print", "print", "time.time.time", "scipy.dok_matrix", "adj_mat.todok.todok.tolil", "get_data.Data.R[].tolil", "adj_mat.todok.todok.todok", "print", "time.time.time", "get_data.Data.create_adj_mat.normalized_adj_single"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot"], ["", "def", "create_adj_mat", "(", "self", ")", ":", "\n", "\n", "        ", "def", "normalized_adj_single", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "# norm_adj = adj.dot(d_mat_inv)", "\n", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "check_adj_if_equal", "(", "adj", ")", ":", "\n", "            ", "dense_A", "=", "np", ".", "array", "(", "adj", ".", "todense", "(", ")", ")", "\n", "degree", "=", "np", ".", "sum", "(", "dense_A", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "\n", "temp", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "np", ".", "power", "(", "degree", ",", "-", "1", ")", ")", ",", "dense_A", ")", "\n", "print", "(", "'check normalized adjacency matrix whether equal to this laplacian matrix.'", ")", "\n", "return", "temp", "\n", "\n", "", "_adj", "=", "[", "]", "\n", "norm_adj", "=", "[", "]", "\n", "mean_adj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "            ", "print", "(", "'metapath'", ",", "i", ")", "\n", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_nodes", ",", "self", ".", "n_nodes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adj_mat", "=", "adj_mat", ".", "tolil", "(", ")", "\n", "R", "=", "self", ".", "R", "[", "i", "]", ".", "tolil", "(", ")", "\n", "\n", "adj_mat", "[", ":", "self", ".", "n_nodes", ",", ":", "self", ".", "n_nodes", "]", "=", "R", "\n", "adj_mat", "=", "adj_mat", ".", "todok", "(", ")", "\n", "print", "(", "'already create adjacency matrix'", ",", "adj_mat", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "t2", "=", "time", "(", ")", "\n", "\n", "norm_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", "+", "sp", ".", "eye", "(", "adj_mat", ".", "shape", "[", "0", "]", ")", ")", "\n", "mean_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", ")", "\n", "\n", "print", "(", "'already normalize adjacency matrix'", ",", "time", "(", ")", "-", "t2", ")", "\n", "\n", "_adj", ".", "append", "(", "adj_mat", ".", "tocsr", "(", ")", ")", "\n", "norm_adj", ".", "append", "(", "norm_adj_mat", ".", "tocsr", "(", ")", ")", "\n", "mean_adj", ".", "append", "(", "mean_adj_mat", ".", "tocsr", "(", ")", ")", "\n", "", "return", "_adj", ",", "norm_adj", ",", "mean_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.print_statistics": [[128, 134], ["print", "print", "print", "print", "print", "numpy.array"], "methods", ["None"], ["", "def", "print_statistics", "(", "self", ")", ":", "\n", "        ", "print", "(", "'n_metapaths=%d'", "%", "(", "self", ".", "n_metapath", ")", ")", "\n", "print", "(", "'n_metapahts=%d'", "%", "(", "self", ".", "n_metapath", ")", ")", "\n", "print", "(", "'n_nodes=%d'", "%", "(", "self", ".", "n_nodes", ")", ")", "\n", "print", "(", "'n_interactions=%s'", "%", "(", "self", ".", "n_int", ")", ")", "\n", "print", "(", "'n_train=%d, n_test=%d, sparsity=%s'", "%", "(", "self", ".", "n_train", ",", "self", ".", "n_test", ",", "(", "np", ".", "array", "(", "self", ".", "n_int", ")", "/", "(", "self", ".", "n_nodes", "*", "self", ".", "n_nodes", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.get_sparsity_split": [[136, 158], ["open().readlines", "enumerate", "print", "get_data.Data.create_sparsity_split", "open", "range", "print", "open", "split_state.append", "print", "split_uids.append", "len", "open.write", "open.write", "line.strip", "line.strip", "int", "line.strip().split", "str", "line.strip"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.create_sparsity_split"], ["", "def", "get_sparsity_split", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "[", "]", ",", "[", "]", "\n", "lines", "=", "open", "(", "self", ".", "save_path", "+", "'/sparsity.split'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "if", "idx", "%", "2", "==", "0", ":", "\n", "                    ", "split_state", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "print", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "split_uids", ".", "append", "(", "[", "int", "(", "uid", ")", "for", "uid", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "print", "(", "'get sparsity split.'", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "self", ".", "create_sparsity_split", "(", ")", "\n", "f", "=", "open", "(", "self", ".", "save_path", "+", "'/sparsity.split'", ",", "'w'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "split_state", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "split_state", "[", "idx", "]", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "str", "(", "uid", ")", "for", "uid", "in", "split_uids", "[", "idx", "]", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'create sparsity split.'", ")", "\n", "\n", "", "return", "split_uids", ",", "split_state", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.get_data.Data.create_sparsity_split": [[161, 210], ["list", "dict", "list", "enumerate", "get_data.Data.test_set.keys", "sorted", "len", "len", "dict.keys", "user_n_iid[].append", "len", "len", "list.append", "split_state.append", "print", "list.append", "split_state.append", "print", "len", "len", "len", "dict.keys"], "methods", ["None"], ["", "def", "create_sparsity_split", "(", "self", ")", ":", "\n", "        ", "all_users_to_test", "=", "list", "(", "self", ".", "test_set", ".", "keys", "(", ")", ")", "\n", "user_n_iid", "=", "dict", "(", ")", "\n", "\n", "# generate a dictionary to store (key=n_iids, value=a list of uid).", "\n", "for", "uid", "in", "all_users_to_test", ":", "\n", "            ", "train_iids", "=", "self", ".", "train_items", "[", "uid", "]", "\n", "test_iids", "=", "self", ".", "test_set", "[", "uid", "]", "\n", "\n", "n_iids", "=", "len", "(", "train_iids", ")", "+", "len", "(", "test_iids", ")", "\n", "\n", "if", "n_iids", "not", "in", "user_n_iid", ".", "keys", "(", ")", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", "=", "[", "uid", "]", "\n", "", "else", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", ".", "append", "(", "uid", ")", "\n", "", "", "split_uids", "=", "list", "(", ")", "\n", "\n", "# split the whole user set into four subset.", "\n", "temp", "=", "[", "]", "\n", "count", "=", "1", "\n", "fold", "=", "4", "\n", "n_count", "=", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "\n", "n_rates", "=", "0", "\n", "\n", "split_state", "=", "[", "]", "\n", "for", "idx", ",", "n_iids", "in", "enumerate", "(", "sorted", "(", "user_n_iid", ")", ")", ":", "\n", "            ", "temp", "+=", "user_n_iid", "[", "n_iids", "]", "\n", "n_rates", "+=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "n_count", "-=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "\n", "if", "n_rates", ">=", "count", "*", "0.25", "*", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "n_rates", "=", "0", "\n", "fold", "-=", "1", "\n", "\n", "", "if", "idx", "==", "len", "(", "user_n_iid", ".", "keys", "(", ")", ")", "-", "1", "or", "n_count", "==", "0", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "", "", "return", "split_uids", ",", "split_state", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args": [[8, 62], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run HACUD.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weights_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Store model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'../Data/'", ",", "\n", "help", "=", "'Input data path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--proj_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Project path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'dblp'", ",", "\n", "help", "=", "'Choose a dataset from {dblp, yelp}'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: No pretrain, -1: Pretrain with the learned embeddings, 1:Pretrain with stored models.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'Number of epoch.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--embed_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_fold'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'number of fold.'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_fc'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of fully-connected layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--fc'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[32,16,8,4]'", ",", "\n", "help", "=", "'Output sizes of every layer'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--reg'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'Regularization ratio.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'ngcf'", ",", "\n", "help", "=", "'Specify the name of model (ngcf).'", ")", "\n", "parser", ".", "add_argument", "(", "'--adj_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'norm'", ",", "\n", "help", "=", "'Specify the type of the adjacency (laplacian) matrix from {plain, norm, mean}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alg_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'ngcf'", ",", "\n", "help", "=", "'Specify the type of the graph convolutional layer from {ngcf, gcn, gcmc}.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_flag'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable model saver, 1: Activate model saver'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--test_flag'", ",", "nargs", "=", "'?'", ",", "default", "=", "'part'", ",", "\n", "help", "=", "'Specify the test type from {part, full}, indicating whether the reference is done in mini-batch'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "nargs", "=", "'?'", ",", "default", "=", "'0'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--early_stop'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--report'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable performance report w.r.t. sparsity levels, 1: Show performance report w.r.t. sparsity levels'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.__init__": [[14, 70], ["model.Model.eval"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.eval"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "'hacud'", "\n", "self", ".", "adj_type", "=", "args", ".", "adj_type", "\n", "self", ".", "early_stop", "=", "args", ".", "early_stop", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu", "\n", "self", ".", "n_nodes", "=", "data_config", "[", "'n_nodes'", "]", "\n", "self", ".", "n_metapath", "=", "data_config", "[", "'n_metapath'", "]", "\n", "self", ".", "n_class", "=", "data_config", "[", "'n_class'", "]", "\n", "\n", "self", ".", "n_fold", "=", "args", ".", "n_fold", "\n", "self", ".", "n_fc", "=", "args", ".", "n_fc", "\n", "self", ".", "fc", "=", "eval", "(", "args", ".", "fc", ")", "\n", "self", ".", "reg", "=", "args", ".", "reg", "\n", "\n", "\n", "self", ".", "norm_adj", "=", "data_config", "[", "'norm_adj'", "]", "\n", "\n", "self", ".", "features", "=", "data_config", "[", "'features'", "]", "\n", "self", ".", "f_dim", "=", "self", ".", "features", ".", "shape", "[", "1", "]", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n", "'''\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "# placeholder definition", "\n", "self", ".", "nodes", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "'''\n        Create Model Parameters (i.e., Initialize Weights).\n        '''", "\n", "# initialization of model parameters", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "'''\n        Compute Graph-based Representations of all nodes\n        '''", "\n", "self", ".", "n_embeddings", "=", "self", ".", "_create_embedding", "(", ")", "\n", "\n", "'''\n        Establish the representations of nodes in a batch.\n        '''", "\n", "self", ".", "batch_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "n_embeddings", ",", "self", ".", "nodes", ")", "\n", "\n", "self", ".", "label", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "n_class", ")", ")", "\n", "\n", "self", ".", "pred_label", "=", "self", ".", "pred", "(", "self", ".", "batch_embeddings", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_loss", "(", "self", ".", "pred_label", ",", "self", ".", "label", ")", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model._init_weights": [[71, 129], ["dict", "tensorflow.contrib.layers.xavier_initializer", "print", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "range", "range", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "\n", "self", ".", "fc", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "fc", "\n", "\n", "all_weights", "[", "'W'", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "f_dim", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'W'", ")", "\n", "all_weights", "[", "'b'", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'b'", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'W'", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'b'", "]", ")", "\n", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_fc", ")", ":", "\n", "            ", "all_weights", "[", "'W_%d'", "%", "n", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "fc", "[", "n", "]", ",", "self", ".", "fc", "[", "n", "+", "1", "]", "]", ")", ",", "name", "=", "'W_%d'", "%", "n", ")", "\n", "all_weights", "[", "'b_%d'", "%", "n", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "fc", "[", "n", "+", "1", "]", "]", ")", ",", "name", "=", "'b_%d'", "%", "n", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'W_%d'", "%", "n", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'b_%d'", "%", "n", "]", ")", "\n", "\n", "", "for", "n", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "            ", "all_weights", "[", "'W_rho_%d'", "%", "n", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "f_dim", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'W_rho_%d'", "%", "n", ")", "\n", "all_weights", "[", "'b_rho_%d'", "%", "n", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'b_rho_%d'", "%", "n", ")", "\n", "all_weights", "[", "'W_f_%d'", "%", "n", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "2", "*", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'W_f_%d'", "%", "n", ")", "\n", "all_weights", "[", "'b_f_%d'", "%", "n", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'b_f_%d'", "%", "n", ")", "\n", "all_weights", "[", "'z_%d'", "%", "n", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "emb_dim", "*", "self", ".", "n_metapath", "]", ")", ",", "name", "=", "'z_%d'", "%", "n", ")", "\n", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'W_rho_%d'", "%", "n", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'b_rho_%d'", "%", "n", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'W_f_%d'", "%", "n", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'b_f_%d'", "%", "n", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'z_%d'", "%", "n", "]", ")", "\n", "\n", "", "all_weights", "[", "'W_f1'", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "2", "*", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'W_f1'", ")", "\n", "all_weights", "[", "'b_f1'", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'b_f1'", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'W_f1'", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'b_f1'", "]", ")", "\n", "\n", "all_weights", "[", "'W_f2'", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'W_f2'", ")", "\n", "all_weights", "[", "'b_f2'", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'b_f2'", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'W_f2'", "]", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "WEIGHTS", ",", "all_weights", "[", "'b_f2'", "]", ")", "\n", "\n", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model._split_A_hat": [[130, 143], ["range", "A_fold_hat.append", "model.Model._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_nodes", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_nodes", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model._create_embedding": [[144, 211], ["range", "embeddings.astype.astype.astype", "range", "range", "tensorflow.concat", "range", "tensorflow.nn.softmax", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.reduce_sum", "model.Model._split_A_hat", "tensorflow.matmul", "range", "tensorflow.concat", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.softmax", "tensorflow.multiply", "tensorflow.concat.append", "tensorflow.expand_dims", "embed_u[].append", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.concat", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model._split_A_hat"], ["", "def", "_create_embedding", "(", "self", ")", ":", "\n", "\n", "        ", "A_fold_hat", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "            ", "A_fold_hat", "[", "'%d'", "%", "n", "]", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", "[", "n", "]", ")", "\n", "\n", "", "embeddings", "=", "self", ".", "features", "\n", "embeddings", "=", "embeddings", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "h", "=", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W'", "]", ")", "+", "self", ".", "weights", "[", "'b'", "]", "\n", "\n", "embed_u", "=", "{", "}", "\n", "h_u", "=", "{", "}", "\n", "f_u", "=", "{", "}", "\n", "v_u", "=", "{", "}", "\n", "alp_u", "=", "{", "}", "\n", "alp_hat", "=", "{", "}", "\n", "f_tilde", "=", "{", "}", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "\n", "            ", "''' Graph Convolution '''", "\n", "embed_u", "[", "'%d'", "%", "n", "]", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "embed_u", "[", "'%d'", "%", "n", "]", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "'%d'", "%", "n", "]", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embed_u", "[", "'%d'", "%", "n", "]", "=", "tf", ".", "concat", "(", "embed_u", "[", "'%d'", "%", "n", "]", ",", "0", ")", "\n", "\n", "''' Feature Fusion '''", "\n", "h_u", "[", "'%d'", "%", "n", "]", "=", "tf", ".", "matmul", "(", "embed_u", "[", "'%d'", "%", "n", "]", ",", "self", ".", "weights", "[", "'W_rho_%d'", "%", "n", "]", ")", "+", "self", ".", "weights", "[", "'b_rho_%d'", "%", "n", "]", "\n", "f_u", "[", "'%d'", "%", "n", "]", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "h", ",", "h_u", "[", "'%d'", "%", "n", "]", "]", ",", "1", ")", ",", "self", ".", "weights", "[", "'W_f_%d'", "%", "n", "]", ")", "\n", "+", "self", ".", "weights", "[", "'b_f_%d'", "%", "n", "]", ")", "\n", "''' Feature Attention '''", "\n", "v_u", "[", "'%d'", "%", "n", "]", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "h", ",", "f_u", "[", "'%d'", "%", "n", "]", "]", ",", "1", ")", ",", "self", ".", "weights", "[", "'W_f1'", "]", ")", "\n", "+", "self", ".", "weights", "[", "'b_f1'", "]", ")", "\n", "alp_u", "[", "'%d'", "%", "n", "]", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "v_u", "[", "'%d'", "%", "n", "]", ",", "self", ".", "weights", "[", "'W_f2'", "]", ")", "\n", "+", "self", ".", "weights", "[", "'b_f2'", "]", ")", "\n", "\n", "alp_hat", "[", "'%d'", "%", "n", "]", "=", "tf", ".", "nn", ".", "softmax", "(", "alp_u", "[", "'%d'", "%", "n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "f_tilde", "[", "'%d'", "%", "n", "]", "=", "tf", ".", "multiply", "(", "alp_hat", "[", "'%d'", "%", "n", "]", ",", "f_u", "[", "'%d'", "%", "n", "]", ")", "\n", "\n", "", "''' Path Attention '''", "\n", "\n", "f_c", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "            ", "f_c", ".", "append", "(", "f_tilde", "[", "'%d'", "%", "n", "]", ")", "\n", "", "f_c", "=", "tf", ".", "concat", "(", "f_c", ",", "1", ")", "\n", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_metapath", ")", ":", "\n", "            ", "if", "n", "==", "0", ":", "\n", "                ", "beta", "=", "tf", ".", "matmul", "(", "f_c", ",", "tf", ".", "transpose", "(", "self", ".", "weights", "[", "'z_%d'", "%", "n", "]", ")", ")", "\n", "f", "=", "f_tilde", "[", "'%d'", "%", "n", "]", "\n", "f", "=", "tf", ".", "expand_dims", "(", "f", ",", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "                ", "beta", "=", "tf", ".", "concat", "(", "[", "beta", ",", "tf", ".", "matmul", "(", "f_c", ",", "tf", ".", "transpose", "(", "self", ".", "weights", "[", "'z_%d'", "%", "n", "]", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "f", "=", "tf", ".", "concat", "(", "[", "f", ",", "tf", ".", "expand_dims", "(", "f_tilde", "[", "'%d'", "%", "n", "]", ",", "-", "1", ")", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "beta_u", "=", "tf", ".", "nn", ".", "softmax", "(", "beta", ",", "axis", "=", "1", ")", "\n", "beta_u", "=", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "beta_u", ",", "0", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "e_u", "=", "tf", ".", "multiply", "(", "beta_u", ",", "f", ")", "\n", "e_u", "=", "tf", ".", "reduce_sum", "(", "e_u", ",", "axis", "=", "2", ")", "\n", "\n", "return", "e_u", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.pred": [[212, 220], ["range", "tensorflow.nn.relu", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "pred", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "self", ".", "n_fc", ")", ":", "\n", "            ", "if", "n", "==", "self", ".", "n_fc", "-", "1", ":", "\n", "                ", "x", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weights", "[", "'W_%d'", "%", "n", "]", ")", "+", "self", ".", "weights", "[", "'b_%d'", "%", "n", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weights", "[", "'W_%d'", "%", "n", "]", ")", "+", "\n", "self", ".", "weights", "[", "'b_%d'", "%", "n", "]", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.create_ce_loss": [[221, 226], ["tensorflow.reduce_sum", "tensorflow.nn.softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "create_ce_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "ce_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "x", ",", "labels", "=", "y", ")", ",", "0", ")", "\n", "\n", "return", "ce_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.create_reg_loss": [[227, 236], ["tensorflow.add_n", "tensorflow.nn.l2_loss", "tensorflow.cast", "tensorflow.trainable_variables"], "methods", ["None"], ["", "def", "create_reg_loss", "(", "self", ")", ":", "\n", "\n", "# for key in self.weights.keys(): ", "\n", "#     reg_loss += tf.contrib.layers.l2_regularizer(0.5)(self.weights[key])", "\n", "# regularizer = tf.contrib.layers.l2_regularizer(0.5)", "\n", "# reg_loss += tf.contrib.layers.apply_regularization(regularizer)", "\n", "        ", "reg_loss", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "cast", "(", "v", ",", "tf", ".", "float32", ")", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "\n", "return", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.create_loss": [[237, 244], ["model.Model.create_ce_loss", "model.Model.create_reg_loss"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.create_ce_loss", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.create_reg_loss"], ["", "def", "create_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "ce_loss", "=", "self", ".", "create_ce_loss", "(", "x", ",", "y", ")", "\n", "self", ".", "reg_loss", "=", "self", ".", "create_reg_loss", "(", ")", "\n", "\n", "loss", "=", "self", ".", "ce_loss", "+", "self", ".", "reg", "*", "self", ".", "reg_loss", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model._convert_sp_mat_to_sp_tensor": [[245, 249], ["X.tocoo().astype", "numpy.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.train": [[250, 254], ["sess.run"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "sess", ",", "nodes", ",", "labels", ")", ":", "\n", "        ", "_", ",", "batch_loss", ",", "batch_ce_loss", ",", "reg_loss", "=", "sess", ".", "run", "(", "[", "self", ".", "opt", ",", "self", ".", "loss", ",", "self", ".", "ce_loss", ",", "self", ".", "reg_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "nodes", ":", "nodes", ",", "self", ".", "label", ":", "labels", "}", ")", "\n", "return", "batch_loss", ",", "batch_ce_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.model.Model.eval": [[255, 259], ["sess.run"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "sess", ",", "nodes", ",", "labels", ")", ":", "\n", "        ", "loss", ",", "ce_loss", ",", "reg_loss", ",", "pred_label", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "ce_loss", ",", "self", ".", "reg_loss", ",", "self", ".", "pred_label", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "nodes", ":", "nodes", ",", "self", ".", "label", ":", "labels", "}", ")", "\n", "return", "loss", ",", "ce_loss", ",", "reg_loss", ",", "pred_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.AliasSampling.__init__": [[187, 205], ["len", "enumerate", "numpy.array", "len", "len", "range", "overfull.append", "overfull.pop", "underfull.pop", "overfull.append", "len", "underfull.append", "underfull.append"], "methods", ["None"], ["for", "i", ",", "U_i", "in", "enumerate", "(", "self", ".", "U", ")", ":", "\n", "            ", "if", "U_i", ">", "1", ":", "\n", "                ", "overfull", ".", "append", "(", "i", ")", "\n", "", "elif", "U_i", "<", "1", ":", "\n", "                ", "underfull", ".", "append", "(", "i", ")", "\n", "", "", "while", "len", "(", "overfull", ")", "and", "len", "(", "underfull", ")", ":", "\n", "            ", "i", ",", "j", "=", "overfull", ".", "pop", "(", ")", ",", "underfull", ".", "pop", "(", ")", "\n", "self", ".", "K", "[", "j", "]", "=", "i", "\n", "self", ".", "U", "[", "i", "]", "=", "self", ".", "U", "[", "i", "]", "-", "(", "1", "-", "self", ".", "U", "[", "j", "]", ")", "\n", "if", "self", ".", "U", "[", "i", "]", ">", "1", ":", "\n", "                ", "overfull", ".", "append", "(", "i", ")", "\n", "", "elif", "self", ".", "U", "[", "i", "]", "<", "1", ":", "\n", "                ", "underfull", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "def", "sampling", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "x", "=", "np", ".", "random", ".", "rand", "(", "n", ")", "\n", "i", "=", "np", ".", "floor", "(", "self", ".", "n", "*", "x", ")", "\n", "y", "=", "self", ".", "n", "*", "x", "-", "i", "\n", "i", "=", "i", ".", "astype", "(", "np", ".", "int32", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.AliasSampling.sampling": [[206, 216], ["numpy.random.rand", "numpy.floor", "i.astype.astype.astype", "range"], "methods", ["None"], ["res", "=", "[", "i", "[", "k", "]", "if", "y", "[", "k", "]", "<", "self", ".", "U", "[", "i", "[", "k", "]", "]", "else", "self", ".", "K", "[", "i", "[", "k", "]", "]", "for", "k", "in", "range", "(", "n", ")", "]", "\n", "if", "n", "==", "1", ":", "\n", "            ", "return", "res", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "res", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.normalize_adj": [[13, 21], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.eye", "sp.coo_matrix.sum", "sp.coo_matrix.dot().transpose().dot", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot"], ["d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "A", "\n", "\n", "\n", "# Construct feed dictionary", "\n", "", "def", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'x'", "]", ":", "x", "}", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict": [[24, 34], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "x", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "# Construct feed dictionary for SemiGNN", "\n", "", "def", "construct_feed_dict_semi", "(", "a", ",", "u_i", ",", "u_j", ",", "batch_graph_label", ",", "batch_data", ",", "batch_sup_label", ",", "learning_rate", ",", "momentum", ",", "\n", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict_semi": [[37, 49], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'u_j'", "]", ":", "u_j", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'graph_label'", "]", ":", "batch_graph_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "batch_data", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'sup_label'", "]", ":", "batch_sup_label", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "# Construct feed dictionary for SemiGNN", "\n", "", "def", "construct_feed_dict_spam", "(", "h", ",", "adj_info", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "placeholders", ")", ":", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_review_adj'", "]", ":", "adj_info", "[", "0", "]", "}", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict_spam": [[52, 70], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_user_adj'", "]", ":", "adj_info", "[", "3", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_user_adj'", "]", ":", "adj_info", "[", "4", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_item_adj'", "]", ":", "adj_info", "[", "5", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'homo_adj'", "]", ":", "adj_info", "[", "6", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'review_vecs'", "]", ":", "h", "[", "0", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'user_vecs'", "]", ":", "h", "[", "1", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'item_vecs'", "]", ":", "h", "[", "2", "]", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'t'", "]", ":", "t", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'batch_index'", "]", ":", "b", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'lr'", "]", ":", "learning_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'mom'", "]", ":", "momentum", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "h", "[", "0", "]", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n", "\n", "", "def", "pad_adjlist", "(", "x_data", ")", ":", "\n", "# Get lengths of each row of data", "\n", "    ", "lens", "=", "np", ".", "array", "(", "[", "len", "(", "x_data", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "x_data", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist": [[72, 85], ["numpy.array", "numpy.zeros", "range", "numpy.hstack", "numpy.arange", "numpy.random.choice", "len", "np.array.max", "range", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["mask", "=", "np", ".", "arange", "(", "lens", ".", "max", "(", ")", ")", "<", "lens", "[", ":", ",", "None", "]", "\n", "\n", "# Setup output array and put elements from data into masked positions", "\n", "padded", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "padded", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "x_data", "[", "i", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", "\n", "", "padded", "[", "mask", "]", "=", "np", ".", "hstack", "(", "(", "x_data", "[", ":", "]", ")", ")", "\n", "return", "padded", "\n", "\n", "\n", "", "def", "matrix_to_adjlist", "(", "M", ",", "pad", "=", "True", ")", ":", "\n", "    ", "adjlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "M", ")", ")", ":", "\n", "        ", "adjline", "=", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.matrix_to_adjlist": [[87, 98], ["range", "len", "range", "pad_adjlist.append", "utils.pad_adjlist", "len", "adjline.append"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pad_adjlist"], ["            ", "if", "M", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "                ", "adjline", ".", "append", "(", "j", ")", "\n", "", "", "adjlist", ".", "append", "(", "adjline", ")", "\n", "", "if", "pad", ":", "\n", "        ", "adjlist", "=", "pad_adjlist", "(", "adjlist", ")", "\n", "", "return", "adjlist", "\n", "\n", "\n", "", "def", "adjlist_to_matrix", "(", "adjlist", ")", ":", "\n", "    ", "nodes", "=", "len", "(", "adjlist", ")", "\n", "M", "=", "np", ".", "zeros", "(", "(", "nodes", ",", "nodes", ")", ")", "\n", "for", "i", "in", "range", "(", "nodes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.adjlist_to_matrix": [[100, 107], ["len", "numpy.zeros", "range"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["            ", "M", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "", "return", "M", "\n", "\n", "\n", "", "def", "pairs_to_matrix", "(", "pairs", ",", "nodes", ")", ":", "\n", "    ", "M", "=", "np", ".", "zeros", "(", "(", "nodes", ",", "nodes", ")", ")", "\n", "for", "i", ",", "j", "in", "pairs", ":", "\n", "        ", "M", "[", "i", "]", "[", "j", "]", "=", "1", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.pairs_to_matrix": [[109, 114], ["numpy.zeros"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["\n", "\n", "# Random walk on graph", "\n", "", "def", "generate_random_walk", "(", "adjlist", ",", "start", ",", "walklength", ")", ":", "\n", "    ", "t", "=", "1", "\n", "walk_path", "=", "np", ".", "array", "(", "[", "start", "]", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.generate_random_walk": [[117, 127], ["numpy.array", "numpy.random.choice", "numpy.append"], "function", ["None"], ["current", "=", "np", ".", "random", ".", "choice", "(", "neighbors", ")", "\n", "walk_path", "=", "np", ".", "append", "(", "walk_path", ",", "current", ")", "\n", "start", "=", "current", "\n", "t", "+=", "1", "\n", "", "return", "walk_path", "\n", "\n", "\n", "#  sample multiple times for each node", "\n", "", "def", "random_walks", "(", "adjlist", ",", "numerate", ",", "walklength", ")", ":", "\n", "    ", "nodes", "=", "range", "(", "0", ",", "len", "(", "adjlist", ")", ")", "# node index starts from zero", "\n", "walks", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.random_walks": [[130, 142], ["range", "range", "range", "len", "len", "range", "pairs.append", "walks.append", "len", "utils.generate_random_walk"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.generate_random_walk"], ["            ", "walks", ".", "append", "(", "generate_random_walk", "(", "adjlist", ",", "node", ",", "walklength", ")", ")", "\n", "", "", "pairs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "walks", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "walks", "[", "i", "]", ")", ")", ":", "\n", "            ", "pair", "=", "[", "walks", "[", "i", "]", "[", "0", "]", ",", "walks", "[", "i", "]", "[", "j", "]", "]", "\n", "", "pairs", ".", "append", "(", "pair", ")", "\n", "", "return", "pairs", "\n", "\n", "\n", "", "def", "negative_sampling", "(", "adj_nodelist", ")", ":", "\n", "    ", "degree", "=", "[", "len", "(", "neighbors", ")", "for", "neighbors", "in", "adj_nodelist", "]", "\n", "node_negative_distribution", "=", "np", ".", "power", "(", "np", ".", "array", "(", "degree", ",", "dtype", "=", "np", ".", "float32", ")", ",", "0.75", ")", "\n", "node_negative_distribution", "/=", "np", ".", "sum", "(", "node_negative_distribution", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.negative_sampling": [[144, 150], ["numpy.power", "numpy.sum", "utils.AliasSampling", "len", "numpy.array"], "function", ["None"], ["return", "node_negative_distribution", ",", "node_sampling", "\n", "\n", "\n", "", "def", "get_negative_sampling", "(", "pairs", ",", "adj_nodelist", ",", "Q", "=", "3", ",", "node_sampling", "=", "'atlas'", ")", ":", "\n", "    ", "num_of_nodes", "=", "len", "(", "adj_nodelist", ")", "\n", "u_i", "=", "[", "]", "\n", "u_j", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.get_negative_sampling": [[152, 182], ["len", "utils.negative_sampling", "range", "numpy.array", "graph_label.reshape.reshape", "u_i.append", "u_j.append", "graph_label.reshape.append", "range", "u_i.append", "u_j.append", "graph_label.reshape.append", "numpy.random.choice", "nodesampling.sampling", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.negative_sampling", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.AliasSampling.sampling"], ["node_negative_distribution", ",", "nodesampling", "=", "negative_sampling", "(", "adj_nodelist", ")", "\n", "for", "index", "in", "range", "(", "0", ",", "num_of_nodes", ")", ":", "\n", "        ", "u_i", ".", "append", "(", "pairs", "[", "index", "]", "[", "0", "]", ")", "\n", "u_j", ".", "append", "(", "pairs", "[", "index", "]", "[", "1", "]", ")", "\n", "graph_label", ".", "append", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "Q", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "node_sampling", "==", "'numpy'", ":", "\n", "                    ", "negative_node", "=", "np", ".", "random", ".", "choice", "(", "num_of_nodes", ",", "node_negative_distribution", ")", "\n", "if", "negative_node", "not", "in", "adj_nodelist", "[", "pairs", "[", "index", "]", "[", "0", "]", "]", ":", "\n", "                        ", "break", "\n", "", "", "elif", "node_sampling", "==", "'atlas'", ":", "\n", "                    ", "negative_node", "=", "nodesampling", ".", "sampling", "(", ")", "\n", "if", "negative_node", "not", "in", "adj_nodelist", "[", "pairs", "[", "index", "]", "[", "0", "]", "]", ":", "\n", "                        ", "break", "\n", "", "", "elif", "node_sampling", "==", "'uniform'", ":", "\n", "                    ", "negative_node", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_of_nodes", ")", "\n", "if", "negative_node", "not", "in", "adj_nodelist", "[", "pairs", "[", "index", "]", "[", "0", "]", "]", ":", "\n", "                        ", "break", "\n", "", "", "", "u_i", ".", "append", "(", "pairs", "[", "index", "]", "[", "0", "]", ")", "\n", "u_j", ".", "append", "(", "negative_node", ")", "\n", "graph_label", ".", "append", "(", "-", "1", ")", "\n", "", "", "graph_label", "=", "np", ".", "array", "(", "graph_label", ")", "\n", "graph_label", "=", "graph_label", ".", "reshape", "(", "graph_label", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "return", "u_i", ",", "u_j", ",", "graph_label", "\n", "\n", "\n", "# Reference: https://en.wikipedia.org/wiki/Alias_method", "\n", "", "class", "AliasSampling", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS_main.arg_parser": [[20, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'example'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "int", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.001", ",", "help", "=", "'the ratio of training set in whole dataset.'", ")", "\n", "\n", "# GAS", "\n", "parser", ".", "add_argument", "(", "'--review_num sample'", ",", "default", "=", "7", ",", "help", "=", "'review number.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_dim'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'gcn layer size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding1'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding2'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding3'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--encoding4'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS_main.set_env": [[41, 45], ["tensorflow.reset_default_graph", "np.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["", "def", "set_env", "(", "args", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS_main.get_data": [[48, 55], ["None"], "function", ["None"], ["", "def", "get_data", "(", "ix", ",", "int_batch", ",", "train_size", ")", ":", "\n", "    ", "if", "ix", "+", "int_batch", ">=", "train_size", ":", "\n", "        ", "ix", "=", "train_size", "-", "int_batch", "\n", "end", "=", "train_size", "\n", "", "else", ":", "\n", "        ", "end", "=", "ix", "+", "int_batch", "\n", "", "return", "train_data", "[", "ix", ":", "end", "]", ",", "train_label", "[", "ix", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS_main.load_data": [[57, 76], ["load_data_gas", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_gas"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_str", "==", "'example'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_data_gas", "(", ")", "\n", "node_embedding_r", "=", "features", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "node_embedding_u", "=", "features", "[", "1", "]", ".", "shape", "[", "1", "]", "\n", "node_embedding_i", "=", "features", "[", "2", "]", ".", "shape", "[", "1", "]", "\n", "node_size", "=", "features", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# node_embedding_i = node_embedding_r = node_size", "\n", "h_u_size", "=", "adj_list", "[", "0", "]", ".", "shape", "[", "1", "]", "*", "(", "node_embedding_r", "+", "node_embedding_u", ")", "\n", "h_i_size", "=", "adj_list", "[", "2", "]", ".", "shape", "[", "1", "]", "*", "(", "node_embedding_r", "+", "node_embedding_i", ")", "\n", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "\n", "paras", "=", "[", "node_size", ",", "node_embedding_r", ",", "node_embedding_u", ",", "node_embedding_i", ",", "class_size", ",", "train_size", ",", "h_u_size", ",", "\n", "h_i_size", "]", "\n", "\n", "", "return", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS_main.train": [[78, 119], ["print", "tensorflow.Session", "algorithms.GAS.GAS.GAS", "sess.run", "time.clock", "range", "time.clock", "print", "print", "algorithms.GAS.GAS.GAS.test", "tensorflow.global_variables_initializer", "range", "print", "GAS_main.get_data", "algorithms.GAS.GAS.GAS.train", "print"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "def", "train", "(", "args", ",", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "adj_data", "=", "adj_list", "\n", "net", "=", "GAS", "(", "session", "=", "sess", ",", "nodes", "=", "paras", "[", "0", "]", ",", "class_size", "=", "paras", "[", "4", "]", ",", "embedding_r", "=", "paras", "[", "1", "]", ",", "embedding_u", "=", "paras", "[", "2", "]", ",", "\n", "embedding_i", "=", "paras", "[", "3", "]", ",", "h_u_size", "=", "paras", "[", "6", "]", ",", "h_i_size", "=", "paras", "[", "7", "]", ",", "\n", "encoding1", "=", "args", ".", "encoding1", ",", "encoding2", "=", "args", ".", "encoding2", ",", "encoding3", "=", "args", ".", "encoding3", ",", "\n", "encoding4", "=", "args", ".", "encoding4", ",", "gcn_dim", "=", "args", ".", "gcn_dim", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# net.load(sess)", "\n", "\n", "t_start", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "count", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "paras", "[", "3", "]", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "batch_data", ",", "batch_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "features", ",", "adj_data", ",", "batch_label", ",", "\n", "batch_data", ",", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "print", "(", "\"batch loss: {:.4f}, batch acc: {:.4f}\"", ".", "format", "(", "loss", ",", "acc", ")", ")", "\n", "# print(prob, pred)", "\n", "\n", "train_loss", "+=", "loss", "\n", "train_acc", "+=", "acc", "\n", "count", "+=", "1", "\n", "", "train_loss", "=", "train_loss", "/", "count", "\n", "train_acc", "=", "train_acc", "/", "count", "\n", "print", "(", "\"epoch{:d} : train_loss: {:.4f}, train_acc: {:.4f}\"", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_acc", ")", ")", "\n", "# net.save(sess)", "\n", "\n", "", "t_end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"train time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "t_end", "-", "t_start", ")", ")", "\n", "print", "(", "\"Train end!\"", ")", "\n", "\n", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "features", ",", "adj_data", ",", "test_label", ",", "\n", "test_data", ")", "\n", "\n", "", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS.GAS.__init__": [[25, 62], ["algorithms.base_algorithm.Algorithm.__init__", "GAS.GAS.build_placeholders", "GAS.GAS.forward_propagation", "tensorflow.contrib.layers.apply_regularization", "tensorflow.one_hot", "print", "tensorflow.equal", "tensorflow.reduce_mean", "print", "tensorflow.train.AdamOptimizer", "GAS.GAS.optimizer.compute_gradients", "GAS.GAS.optimizer.apply_gradients", "tensorflow.global_variables_initializer", "print", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.trainable_variables", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS.GAS.build_placeholders", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.forward_propagation"], ["    ", "def", "__init__", "(", "self", ",", "session", ",", "nodes", ",", "class_size", ",", "embedding_i", ",", "embedding_u", ",", "embedding_r", ",", "h_u_size", ",", "h_i_size", ",", "\n", "encoding1", ",", "encoding2", ",", "encoding3", ",", "encoding4", ",", "gcn_dim", ",", "meta", "=", "1", ",", "concat", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "class_size", "=", "class_size", "\n", "self", ".", "embedding_i", "=", "embedding_i", "\n", "self", ".", "embedding_u", "=", "embedding_u", "\n", "self", ".", "embedding_r", "=", "embedding_r", "\n", "self", ".", "encoding1", "=", "encoding1", "\n", "self", ".", "encoding2", "=", "encoding2", "\n", "self", ".", "encoding3", "=", "encoding3", "\n", "self", ".", "encoding4", "=", "encoding4", "\n", "self", ".", "gcn_dim", "=", "gcn_dim", "\n", "self", ".", "h_i_size", "=", "h_i_size", "\n", "self", ".", "h_u_size", "=", "h_u_size", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "build_placeholders", "(", ")", "\n", "\n", "loss", ",", "probabilities", "=", "self", ".", "forward_propagation", "(", ")", "\n", "self", ".", "loss", ",", "self", ".", "probabilities", "=", "loss", ",", "probabilities", "\n", "self", ".", "l2", "=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.01", ")", ",", "\n", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "\n", "self", ".", "pred", "=", "tf", ".", "one_hot", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "class_size", ")", "\n", "print", "(", "self", ".", "pred", ".", "shape", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "t", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "\"float\"", ")", ")", "\n", "print", "(", "'Forward propagation finished.'", ")", "\n", "\n", "self", ".", "sess", "=", "session", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "gradients", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", "+", "self", ".", "l2", ")", "\n", "capped_gradients", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.", ",", "5.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gradients", "if", "grad", "is", "not", "None", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gradients", ")", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "print", "(", "'Backward propagation finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS.GAS.build_placeholders": [[63, 78], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "build_placeholders", "(", "self", ")", ":", "\n", "        ", "self", ".", "user_review_adj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "'adjlist1'", ")", "\n", "self", ".", "user_item_adj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "'adjlist2'", ")", "\n", "self", ".", "item_review_adj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "'adjlist3'", ")", "\n", "self", ".", "item_user_adj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "'adjlist4'", ")", "\n", "self", ".", "review_user_adj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "'adjlist5'", ")", "\n", "self", ".", "review_item_adj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "'adjlist6'", ")", "\n", "self", ".", "homo_adj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "nodes", ",", "self", ".", "nodes", "]", ",", "'comment_adj'", ")", "\n", "self", ".", "review_vecs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "'init_embedding1'", ")", "\n", "self", ".", "user_vecs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "'init_embedding2'", ")", "\n", "self", ".", "item_vecs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "'init_embedding3'", ")", "\n", "self", ".", "batch_index", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'index'", ")", "\n", "self", ".", "t", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "class_size", "]", ",", "'labels'", ")", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'learning_rate'", ")", "\n", "self", ".", "mom", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'momentum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS.GAS.forward_propagation": [[79, 121], ["print", "tensorflow.variable_scope", "base_models.layers.ConcatenationAggregator", "base_models.layers.ConcatenationAggregator.", "base_models.layers.AttentionAggregator", "base_models.layers.AttentionAggregator.", "print", "tensorflow.variable_scope", "tensorflow.variable_scope", "base_models.layers.GASConcatenation", "base_models.layers.GASConcatenation.", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.losses.sigmoid_cross_entropy", "tensorflow.nn.sigmoid", "tensorflow.one_hot", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer"], "methods", ["None"], ["", "def", "forward_propagation", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'hete_gcn'", ")", ":", "\n", "            ", "r_aggregator", "=", "ConcatenationAggregator", "(", "input_dim", "=", "self", ".", "embedding_r", "+", "self", ".", "embedding_u", "+", "self", ".", "embedding_i", ",", "\n", "output_dim", "=", "self", ".", "encoding1", ",", "\n", "review_item_adj", "=", "self", ".", "review_item_adj", ",", "\n", "review_user_adj", "=", "self", ".", "review_user_adj", ",", "\n", "review_vecs", "=", "self", ".", "review_vecs", ",", "user_vecs", "=", "self", ".", "user_vecs", ",", "\n", "item_vecs", "=", "self", ".", "item_vecs", ")", "\n", "h_r", "=", "r_aggregator", "(", "inputs", "=", "None", ")", "\n", "\n", "iu_aggregator", "=", "AttentionAggregator", "(", "input_dim1", "=", "self", ".", "h_u_size", ",", "input_dim2", "=", "self", ".", "h_i_size", ",", "\n", "output_dim", "=", "self", ".", "encoding3", ",", "hid_dim", "=", "self", ".", "encoding2", ",", "user_review_adj", "=", "self", ".", "user_review_adj", ",", "\n", "user_item_adj", "=", "self", ".", "user_item_adj", ",", "\n", "item_review_adj", "=", "self", ".", "item_review_adj", ",", "item_user_adj", "=", "self", ".", "item_user_adj", ",", "\n", "review_vecs", "=", "self", ".", "review_vecs", ",", "user_vecs", "=", "self", ".", "user_vecs", ",", "\n", "item_vecs", "=", "self", ".", "item_vecs", ",", "concat", "=", "True", ")", "\n", "h_u", ",", "h_i", "=", "iu_aggregator", "(", "inputs", "=", "None", ")", "\n", "print", "(", "'Nodes embedding over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'homo_gcn'", ")", ":", "\n", "            ", "x", "=", "self", ".", "review_vecs", "\n", "# gcn_out = GCN(x, self.homo_adj, self.gcn_dim, self.embedding_r,", "\n", "#               self.encoding4).embedding()", "\n", "", "print", "(", "'Comment graph embedding over!'", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'classification'", ")", ":", "\n", "            ", "concatenator", "=", "GASConcatenation", "(", "review_user_adj", "=", "self", ".", "review_user_adj", ",", "review_item_adj", "=", "self", ".", "review_item_adj", ",", "\n", "review_vecs", "=", "h_r", ",", "homo_vecs", "=", "self", ".", "homo_adj", ",", "\n", "user_vecs", "=", "h_u", ",", "item_vecs", "=", "h_i", ")", "\n", "concated_hr", "=", "concatenator", "(", "inputs", "=", "None", ")", "\n", "\n", "batch_data", "=", "tf", ".", "matmul", "(", "tf", ".", "one_hot", "(", "self", ".", "batch_index", ",", "self", ".", "nodes", ")", ",", "concated_hr", ")", "\n", "W", "=", "tf", ".", "get_variable", "(", "name", "=", "'weights'", ",", "\n", "shape", "=", "[", "self", ".", "encoding1", "+", "2", "*", "self", ".", "encoding2", "+", "2", "*", "self", ".", "nodes", "+", "self", ".", "nodes", ",", "\n", "self", ".", "class_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'bias'", ",", "shape", "=", "[", "1", ",", "self", ".", "class_size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "tf", ".", "transpose", "(", "batch_data", ",", "perm", "=", "[", "0", ",", "1", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "batch_data", ",", "W", ")", "+", "b", "\n", "loss", "=", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "multi_class_labels", "=", "self", ".", "t", ",", "logits", "=", "logits", ")", "\n", "\n", "", "return", "loss", ",", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS.GAS.train": [[122, 147], ["GAS.GAS.sess.run"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "h", ",", "adj_info", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "self", ".", "user_review_adj", ":", "adj_info", "[", "0", "]", ",", "\n", "self", ".", "user_item_adj", ":", "adj_info", "[", "1", "]", ",", "\n", "self", ".", "item_review_adj", ":", "adj_info", "[", "2", "]", ",", "\n", "self", ".", "item_user_adj", ":", "adj_info", "[", "3", "]", ",", "\n", "self", ".", "review_user_adj", ":", "adj_info", "[", "4", "]", ",", "\n", "self", ".", "review_item_adj", ":", "adj_info", "[", "5", "]", ",", "\n", "self", ".", "homo_adj", ":", "adj_info", "[", "6", "]", ",", "\n", "self", ".", "review_vecs", ":", "h", "[", "0", "]", ",", "\n", "self", ".", "user_vecs", ":", "h", "[", "1", "]", ",", "\n", "self", ".", "item_vecs", ":", "h", "[", "2", "]", ",", "\n", "self", ".", "t", ":", "t", ",", "\n", "self", ".", "batch_index", ":", "b", ",", "\n", "self", ".", "lr", ":", "learning_rate", ",", "\n", "self", ".", "mom", ":", "momentum", "\n", "}", "\n", "outs", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "train_op", ",", "self", ".", "loss", ",", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "outs", "[", "1", "]", "\n", "acc", "=", "outs", "[", "2", "]", "\n", "pred", "=", "outs", "[", "3", "]", "\n", "prob", "=", "outs", "[", "4", "]", "\n", "return", "loss", ",", "acc", ",", "pred", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.GAS.GAS.GAS.test": [[148, 167], ["GAS.GAS.sess.run"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "h", ",", "adj_info", ",", "t", ",", "b", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "self", ".", "user_review_adj", ":", "adj_info", "[", "0", "]", ",", "\n", "self", ".", "user_item_adj", ":", "adj_info", "[", "1", "]", ",", "\n", "self", ".", "item_review_adj", ":", "adj_info", "[", "2", "]", ",", "\n", "self", ".", "item_user_adj", ":", "adj_info", "[", "3", "]", ",", "\n", "self", ".", "review_user_adj", ":", "adj_info", "[", "4", "]", ",", "\n", "self", ".", "review_item_adj", ":", "adj_info", "[", "5", "]", ",", "\n", "self", ".", "homo_adj", ":", "adj_info", "[", "6", "]", ",", "\n", "self", ".", "review_vecs", ":", "h", "[", "0", "]", ",", "\n", "self", ".", "user_vecs", ":", "h", "[", "1", "]", ",", "\n", "self", ".", "item_vecs", ":", "h", "[", "2", "]", ",", "\n", "self", ".", "t", ":", "t", ",", "\n", "self", ".", "batch_index", ":", "b", "\n", "}", "\n", "acc", ",", "pred", ",", "probabilities", ",", "tags", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", ",", "self", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "acc", ",", "pred", ",", "probabilities", ",", "tags", "", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.arg_parser": [[20, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.parse.parse_args"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_str'", ",", "type", "=", "str", ",", "default", "=", "'dblp'", ",", "help", "=", "\"['dblp','example']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_num'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "int", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.001", ",", "help", "=", "'the ratio of training set in whole dataset.'", ")", "\n", "\n", "# GCN args", "\n", "parser", ".", "add_argument", "(", "'--hidden1'", ",", "default", "=", "16", ",", "help", "=", "'Number of units in GCN hidden layer 1.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden2'", ",", "default", "=", "16", ",", "help", "=", "'Number of units in GCN hidden layer 2.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_output'", ",", "default", "=", "4", ",", "help", "=", "'gcn output size.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.set_env": [[38, 42], ["tensorflow.reset_default_graph", "np.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["", "def", "set_env", "(", "args", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data": [[45, 52], ["None"], "function", ["None"], ["", "def", "get_data", "(", "ix", ",", "int_batch", ",", "train_size", ")", ":", "\n", "    ", "if", "ix", "+", "int_batch", ">=", "train_size", ":", "\n", "        ", "ix", "=", "train_size", "-", "int_batch", "\n", "end", "=", "train_size", "\n", "", "else", ":", "\n", "        ", "end", "=", "ix", "+", "int_batch", "\n", "", "return", "train_data", "[", "ix", ":", "end", "]", ",", "train_label", "[", "ix", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.load_data": [[54, 64], ["load_data_dblp", "len"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.data_loader.load_data_dblp"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_str", "==", "'dblp'", ":", "\n", "        ", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", "=", "load_data_dblp", "(", ")", "\n", "node_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "node_embedding", "=", "features", ".", "shape", "[", "1", "]", "\n", "class_size", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "train_size", "=", "len", "(", "train_data", ")", "\n", "paras", "=", "[", "node_size", ",", "node_embedding", ",", "class_size", ",", "train_size", "]", "\n", "\n", "", "return", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.train": [[66, 106], ["print", "tensorflow.Session", "len", "algorithms.Player2Vec.Player2Vec.Player2Vec", "sess.run", "time.clock", "range", "time.clock", "print", "print", "algorithms.Player2Vec.Player2Vec.Player2Vec.test", "normalize_adj", "tensorflow.global_variables_initializer", "range", "print", "Player2Vec_main.get_data", "algorithms.Player2Vec.Player2Vec.Player2Vec.train", "print"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test", "home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.normalize_adj", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec_main.get_data", "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train"], ["", "def", "train", "(", "args", ",", "adj_list", ",", "features", ",", "train_data", ",", "train_label", ",", "test_data", ",", "test_label", ",", "paras", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "adj_data", "=", "[", "normalize_adj", "(", "adj", ")", "for", "adj", "in", "adj_list", "]", "\n", "meta_size", "=", "len", "(", "adj_list", ")", "\n", "net", "=", "Player2Vec", "(", "session", "=", "sess", ",", "class_size", "=", "paras", "[", "2", "]", ",", "gcn_output1", "=", "args", ".", "hidden1", ",", "\n", "meta", "=", "meta_size", ",", "nodes", "=", "paras", "[", "0", "]", ",", "embedding", "=", "paras", "[", "1", "]", ",", "encoding", "=", "args", ".", "gcn_output", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# net.load(sess)", "\n", "\n", "t_start", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_num", ")", ":", "\n", "            ", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "count", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "paras", "[", "3", "]", ",", "args", ".", "batch_size", ")", ":", "\n", "                ", "batch_data", ",", "batch_label", "=", "get_data", "(", "index", ",", "args", ".", "batch_size", ",", "paras", "[", "3", "]", ")", "\n", "loss", ",", "acc", ",", "pred", ",", "prob", "=", "net", ".", "train", "(", "features", ",", "adj_data", ",", "batch_label", ",", "\n", "batch_data", ",", "args", ".", "learning_rate", ",", "\n", "args", ".", "momentum", ")", "\n", "\n", "print", "(", "\"batch loss: {:.4f}, batch acc: {:.4f}\"", ".", "format", "(", "loss", ",", "acc", ")", ")", "\n", "# print(prob, pred)", "\n", "\n", "train_loss", "+=", "loss", "\n", "train_acc", "+=", "acc", "\n", "count", "+=", "1", "\n", "", "train_loss", "=", "train_loss", "/", "count", "\n", "train_acc", "=", "train_acc", "/", "count", "\n", "print", "(", "\"epoch{:d} : train_loss: {:.4f}, train_acc: {:.4f}\"", ".", "format", "(", "epoch", ",", "train_loss", ",", "train_acc", ")", ")", "\n", "# net.save(sess)", "\n", "\n", "", "t_end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"train time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "t_end", "-", "t_start", ")", ")", "\n", "print", "(", "\"Train end!\"", ")", "\n", "\n", "test_acc", ",", "test_pred", ",", "test_probabilities", ",", "test_tags", "=", "net", ".", "test", "(", "features", ",", "adj_data", ",", "test_label", ",", "\n", "test_data", ")", "\n", "\n", "", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.__init__": [[29, 69], ["Player2Vec.Player2Vec.forward_propagation", "tensorflow.contrib.layers.apply_regularization", "tensorflow.one_hot", "print", "tensorflow.equal", "tensorflow.reduce_mean", "print", "tensorflow.train.AdamOptimizer", "Player2Vec.Player2Vec.optimizer.compute_gradients", "Player2Vec.Player2Vec.optimizer.apply_gradients", "tensorflow.global_variables_initializer", "print", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.trainable_variables", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.forward_propagation"], ["    ", "def", "__init__", "(", "self", ",", "\n", "session", ",", "\n", "meta", ",", "\n", "nodes", ",", "\n", "class_size", ",", "\n", "gcn_output1", ",", "\n", "embedding", ",", "\n", "encoding", ")", ":", "\n", "        ", "self", ".", "meta", "=", "meta", "\n", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "class_size", "=", "class_size", "\n", "self", ".", "gcn_output1", "=", "gcn_output1", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "encoding", "=", "encoding", "\n", "self", ".", "placeholders", "=", "{", "'a'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "meta", ",", "self", ".", "nodes", ",", "self", ".", "nodes", "]", ",", "'adj'", ")", ",", "\n", "'x'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "nodes", ",", "self", ".", "embedding", "]", ",", "'nxf'", ")", ",", "\n", "'batch_index'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'index'", ")", ",", "\n", "'t'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "class_size", "]", ",", "'labels'", ")", ",", "\n", "'lr'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'learning_rate'", ")", ",", "\n", "'mom'", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'momentum'", ")", ",", "\n", "'num_features_nonzero'", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "}", "\n", "\n", "loss", ",", "probabilities", "=", "self", ".", "forward_propagation", "(", ")", "\n", "self", ".", "loss", ",", "self", ".", "probabilities", "=", "loss", ",", "probabilities", "\n", "self", ".", "l2", "=", "tf", ".", "contrib", ".", "layers", ".", "apply_regularization", "(", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.01", ")", ",", "\n", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "\n", "self", ".", "pred", "=", "tf", ".", "one_hot", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "class_size", ")", "\n", "print", "(", "self", ".", "pred", ".", "shape", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "probabilities", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "placeholders", "[", "'t'", "]", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "\"float\"", ")", ")", "\n", "print", "(", "'Forward propagation finished.'", ")", "\n", "\n", "self", ".", "sess", "=", "session", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "placeholders", "[", "'lr'", "]", ")", "\n", "gradients", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", "+", "self", ".", "l2", ")", "\n", "capped_gradients", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "5.", ",", "5.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gradients", "if", "grad", "is", "not", "None", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gradients", ")", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "print", "(", "'Backward propagation finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.forward_propagation": [[70, 98], ["tensorflow.variable_scope", "range", "tensorflow.concat", "print", "tensorflow.variable_scope", "base_models.layers.AttentionLayer.attention", "tensorflow.reshape", "print", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.losses.sigmoid_cross_entropy", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.concat.append", "tensorflow.one_hot", "tensorflow.matmul", "base_models.models.GCN().embedding", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer", "base_models.models.GCN"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.attention", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN.embedding"], ["", "def", "forward_propagation", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'gcn'", ")", ":", "\n", "# x = self.x", "\n", "# A = tf.reshape(self.a, [self.meta, self.nodes, self.nodes])", "\n", "            ", "gcn_emb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "meta", ")", ":", "\n", "                ", "gcn_out", "=", "tf", ".", "reshape", "(", "GCN", "(", "self", ".", "placeholders", ",", "self", ".", "gcn_output1", ",", "self", ".", "embedding", ",", "\n", "self", ".", "encoding", ",", "index", "=", "i", ")", ".", "embedding", "(", ")", ",", "[", "1", ",", "self", ".", "nodes", "*", "self", ".", "encoding", "]", ")", "\n", "gcn_emb", ".", "append", "(", "gcn_out", ")", "\n", "", "gcn_emb", "=", "tf", ".", "concat", "(", "gcn_emb", ",", "0", ")", "\n", "assert", "gcn_emb", ".", "shape", "==", "[", "self", ".", "meta", ",", "self", ".", "nodes", "*", "self", ".", "encoding", "]", "\n", "print", "(", "'GCN embedding over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'attention'", ")", ":", "\n", "            ", "gat_out", "=", "AttentionLayer", ".", "attention", "(", "inputs", "=", "gcn_emb", ",", "attention_size", "=", "1", ",", "v_type", "=", "'tanh'", ")", "\n", "gat_out", "=", "tf", ".", "reshape", "(", "gat_out", ",", "[", "self", ".", "nodes", ",", "self", ".", "encoding", "]", ")", "\n", "print", "(", "'Embedding with attention over!'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'classification'", ")", ":", "\n", "            ", "batch_data", "=", "tf", ".", "matmul", "(", "tf", ".", "one_hot", "(", "self", ".", "placeholders", "[", "'batch_index'", "]", ",", "self", ".", "nodes", ")", ",", "gat_out", ")", "\n", "W", "=", "tf", ".", "get_variable", "(", "name", "=", "'weights'", ",", "shape", "=", "[", "self", ".", "encoding", ",", "self", ".", "class_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "'bias'", ",", "shape", "=", "[", "1", ",", "self", ".", "class_size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "tf", ".", "transpose", "(", "batch_data", ",", "perm", "=", "[", "0", ",", "1", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "batch_data", ",", "W", ")", "+", "b", "\n", "loss", "=", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "multi_class_labels", "=", "self", ".", "placeholders", "[", "'t'", "]", ",", "logits", "=", "logits", ")", "\n", "\n", "", "return", "loss", ",", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.train": [[99, 110], ["utils.utils.utils.construct_feed_dict", "Player2Vec.Player2Vec.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "train", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "\n", "outs", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "train_op", ",", "self", ".", "loss", ",", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "outs", "[", "1", "]", "\n", "acc", "=", "outs", "[", "2", "]", "\n", "pred", "=", "outs", "[", "3", "]", "\n", "prob", "=", "outs", "[", "4", "]", "\n", "return", "loss", ",", "acc", ",", "pred", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.Player2Vec.Player2Vec.Player2Vec.test": [[111, 117], ["utils.utils.utils.construct_feed_dict", "Player2Vec.Player2Vec.sess.run"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.HACUD.utils.construct_feed_dict"], ["", "def", "test", "(", "self", ",", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", "=", "1e-2", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "feed_dict", "=", "utils", ".", "construct_feed_dict", "(", "x", ",", "a", ",", "t", ",", "b", ",", "learning_rate", ",", "momentum", ",", "self", ".", "placeholders", ")", "\n", "acc", ",", "pred", ",", "probabilities", ",", "tags", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "accuracy", ",", "self", ".", "pred", ",", "self", ".", "probabilities", ",", "self", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "acc", ",", "pred", ",", "probabilities", ",", "tags", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.__init__": [[15, 36], ["kwargs.keys", "kwargs.get", "kwargs.get", "models.Model.__class__.__name__.lower"], "methods", ["None"], ["# DISCLAIMER:", "\n", "# Boilerplate parts of this code file were originally forked from", "\n", "# https://github.com/tkipf/gcn", "\n", "# which itself was very inspired by the keras package", "\n", "\n", "class", "Model", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model._build": [[37, 39], ["None"], "methods", ["None"], ["self", ".", "activations", "=", "[", "]", "\n", "\n", "self", ".", "inputs", "=", "None", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build": [[40, 55], ["models.Model.activations.append", "tensorflow.get_collection", "tensorflow.variable_scope", "models.Model._build", "layer", "models.Model.activations.append"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build"], ["self", ".", "outputs", "=", "None", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "opt_op", "=", "None", "\n", "\n", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Build sequential layer model", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.embedding": [[56, 58], ["None"], "methods", ["None"], ["", "self", ".", "activations", ".", "append", "(", "self", ".", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "hidden", "=", "layer", "(", "self", ".", "activations", "[", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.save": [[59, 65], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.save"], ["self", ".", "activations", ".", "append", "(", "hidden", ")", "\n", "", "self", ".", "outputs", "=", "self", ".", "activations", "[", "-", "1", "]", "\n", "\n", "# Store model variables for easy access", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.load": [[66, 73], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["None"], ["# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN.__init__": [[76, 86], ["models.Model.__init__", "models.GCN.build"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.Model.build"], ["        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "save", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", ")", "\n", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN._build": [[87, 106], ["models.GCN.layers.append", "models.GCN.layers.append", "GraphConvolution", "GraphConvolution"], "methods", ["None"], ["\n", "", "def", "load", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n", "\n", "", "", "class", "MLP", "(", "Model", ")", ":", "\n", "    ", "\"\"\" A standard multi-layer perceptron \"\"\"", "\n", "def", "__init__", "(", "self", ",", "placeholders", ",", "dims", ",", "categorical", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dims", "=", "dims", "\n", "self", ".", "input_dim", "=", "dims", "[", "0", "]", "\n", "self", ".", "output_dim", "=", "dims", "[", "-", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "categorical", "=", "categorical", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.models.GCN.embedding": [[107, 109], ["None"], "methods", ["None"], ["\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "labels", "=", "placeholders", "[", "'labels'", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer.__init__": [[61, 74], ["kwargs.keys", "kwargs.get", "kwargs.get", "layers.Layer.__class__.__name__.lower", "str", "layers.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.get_layer_uid"], ["            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n", "", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n", "\n", "", "", "", "class", "Dense", "(", "Layer", ")", ":", "\n", "    ", "\"\"\"Dense layer.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._call": [[78, 80], ["None"], "methods", ["None"], ["        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer.__call__": [[81, 89], ["tensorflow.name_scope", "layers.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GEMLayer._call"], ["\n", "self", ".", "act", "=", "act", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars": [[90, 93], ["tensorflow.summary.histogram"], "methods", ["None"], ["if", "sparse_inputs", ":", "\n", "            ", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GraphConvolution.__init__": [[98, 124], ["layers.Layer.__init__", "tensorflow.variable_scope", "range", "layers.GraphConvolution._log_vars", "glorot", "zeros", "str", "str"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GraphConvolution._call": [[125, 159], ["list", "range", "tensorflow.add_n", "list", "tensorflow.nn.moments", "tensorflow.nn.batch_normalization", "layers.GraphConvolution.act", "layers.sparse_dropout", "tensorflow.nn.dropout", "layers.dot", "list.append", "range", "tensorflow.nn.l2_normalize", "layers.dot", "layers.GraphConvolution.act", "len", "tensorflow.nn.batch_normalization.get_shape", "str", "str"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.sparse_dropout", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.attention": [[167, 199], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.tensordot", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.name_scope", "tensorflow.tensordot", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.tanh", "tensorflow.nn.relu", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.node_attention": [[200, 223], ["tensorflow.Variable", "tensorflow.constant", "tensorflow.not_equal", "tensorflow.where", "tensorflow.gather_nd", "tensorflow.SparseTensor", "tensorflow.sparse_softmax", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.random_normal", "tensorflow.name_scope", "tensorflow.squeeze", "tensorflow.tensordot"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.view_attention": [[225, 246], ["range", "tensorflow.concat", "tensorflow.reshape", "tensorflow.Variable", "tensorflow.nn.softmax", "tensorflow.reshape", "range", "tensorflow.random_normal", "tensorflow.layers.dense", "v.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.scaled_dot_product_attention": [[247, 258], ["tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.math.sqrt", "tensorflow.shape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.ConcatenationAggregator.__init__": [[265, 294], ["layers.Layer.__init__", "tensorflow.variable_scope", "glorot", "layers.ConcatenationAggregator._log_vars"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.ConcatenationAggregator._call": [[295, 314], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.concat", "tensorflow.matmul", "layers.ConcatenationAggregator.act", "tensorflow.cast", "tensorflow.random_shuffle", "tensorflow.cast", "tensorflow.random_shuffle", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionAggregator.__init__": [[321, 363], ["layers.Layer.__init__", "tensorflow.variable_scope", "glorot", "glorot", "glorot", "glorot", "layers.AttentionAggregator._log_vars", "zeros"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionAggregator._call": [[364, 427], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "layers.AttentionLayer.scaled_dot_product_attention", "layers.AttentionLayer.scaled_dot_product_attention", "tensorflow.matmul", "tensorflow.matmul", "layers.AttentionAggregator.act", "layers.AttentionAggregator.act", "tensorflow.cast", "tensorflow.random_shuffle", "tensorflow.cast", "tensorflow.random_shuffle", "tensorflow.cast", "tensorflow.random_shuffle", "tensorflow.cast", "tensorflow.random_shuffle", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.scaled_dot_product_attention", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.AttentionLayer.scaled_dot_product_attention"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GASConcatenation.__init__": [[434, 452], ["layers.Layer.__init__", "layers.GASConcatenation._log_vars"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GASConcatenation._call": [[453, 465], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GEMLayer.__init__": [[472, 492], ["layers.Layer.__init__", "tensorflow.variable_scope", "glorot", "glorot", "glorot", "layers.GEMLayer._log_vars"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GEMLayer._call": [[493, 506], ["tensorflow.matmul", "range", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.reshape.append", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GAT.__init__": [[512, 528], ["layers.Layer.__init__", "layers.GAT._log_vars"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GAT.attn_head": [[529, 559], ["tensorflow.name_scope", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.contrib.layers.bias_add", "activation", "tensorflow.nn.dropout", "tensorflow.transpose", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.leaky_relu", "conv1d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GAT.inference": [[560, 568], ["range", "out.append", "tensorflow.add_n", "layers.GAT.attn_head"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GAT.attn_head"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__": [[576, 592], ["layers.Layer.__init__", "layers.GeniePathLayer._log_vars"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.__init__", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.Layer._log_vars"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.depth_forward": [[593, 598], ["tensorflow.variable_scope", "tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.dynamic_rnn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.breadth_forward": [[599, 602], ["tensorflow.tanh", "layers.GAT.inference", "layers.GAT"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GAT.inference"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.forward": [[603, 608], ["layers.GeniePathLayer.breadth_forward", "layers.GeniePathLayer.depth_forward"], "methods", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.breadth_forward", "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.GeniePathLayer.depth_forward"], []], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.get_layer_uid": [[18, 26], ["None"], "function", ["None"], ["\n", "def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.sparse_dropout": [[28, 35], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor"], "function", ["None"], ["", "", "class", "Layer", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.layers.dot": [[37, 44], ["tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "function", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.uniform": [[7, 11], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["# which is under an identical MIT license as GraphSAGE", "\n", "\n", "def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.glorot": [[13, 18], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["\n", "\n", "", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros": [[20, 24], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.zeros"], ["\n", "\n", "", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones": [[26, 30], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.safe-graph_DGFraud.base_models.inits.ones"], ["\n", "", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n"]]}