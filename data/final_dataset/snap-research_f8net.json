{"home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.timing": [[41, 54], ["functools.wraps", "myutils.distributed.is_master", "time.time", "f", "time.time", "myutils.distributed.master_only_print", "f"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.is_master", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print"], ["def", "timing", "(", "f", ")", ":", "\n", "    ", "@", "wraps", "(", "f", ")", "\n", "def", "wrap", "(", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "if", "is_master", "(", ")", ":", "\n", "            ", "ts", "=", "time", ".", "time", "(", ")", "\n", "result", "=", "f", "(", "*", "args", ",", "**", "kw", ")", "\n", "te", "=", "time", ".", "time", "(", ")", "\n", "mprint", "(", "'func:{!r} took: {:2.4f} sec'", ".", "format", "(", "f", ".", "__name__", ",", "te", "-", "ts", ")", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "f", "(", "*", "args", ",", "**", "kw", ")", "\n", "", "return", "result", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.ptcv_load": [[56, 135], ["pytorchcv.model_provider.get_model.to", "getattr", "ptcv_get_model().to.named_modules", "model.named_modules", "str", "torch.load", "torch.load", "list", "torch.load.items", "ptcv_get_model().to.load_state_dict", "isinstance", "isinstance", "isinstance", "len", "myutils.config.FLAGS.model.split", "getattr", "pytorchcv.model_provider.get_model", "next", "getattr", "ptcv_get_model().to.state_dict().keys", "name_weight_bias_list.append", "isinstance", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "model.parameters", "list.remove", "name_weight_bias_list.append", "len", "ptcv_get_model().to.state_dict"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_model", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print"], ["", "def", "ptcv_load", "(", "model", ")", ":", "\n", "    ", "model_name_dict", "=", "{", "\n", "'fix_resnet18'", ":", "'resnet18'", ",", "\n", "'fix_resnet50'", ":", "'resnet50b'", ",", "\n", "'fix_mobilenet_v1'", ":", "'mobilenet_w1'", ",", "\n", "'fix_mobilenet_v2'", ":", "'mobilenetv2b_w1'", "\n", "}", "\n", "model_name", "=", "FLAGS", ".", "model", ".", "split", "(", "'.'", ")", "[", "1", "]", "+", "str", "(", "getattr", "(", "FLAGS", ",", "'depth'", ",", "''", ")", ")", "\n", "ptcv_model_name", "=", "model_name_dict", "[", "model_name", "]", "\n", "net", "=", "ptcv_get_model", "(", "ptcv_model_name", ",", "\n", "pretrained", "=", "True", ")", ".", "to", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'hawq_pretrained'", ",", "False", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "getattr", "(", "FLAGS", ",", "'hawq_pretrained_file'", ",", "''", ")", ")", "\n", "model_key_list", "=", "list", "(", "net", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "model_key_list", ":", "\n", "            ", "if", "'num_batches_tracked'", "in", "key", ":", "model_key_list", ".", "remove", "(", "key", ")", "\n", "", "i", "=", "0", "\n", "modified_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "checkpoint", ".", "items", "(", ")", ":", "\n", "            ", "if", "'scaling_factor'", "in", "key", ":", "continue", "\n", "if", "'num_batches_tracked'", "in", "key", ":", "continue", "\n", "if", "'weight_integer'", "in", "key", ":", "continue", "\n", "if", "'min'", "in", "key", "or", "'max'", "in", "key", ":", "continue", "\n", "modified_key", "=", "model_key_list", "[", "i", "]", "\n", "modified_dict", "[", "modified_key", "]", "=", "value", "\n", "i", "+=", "1", "\n", "", "net", ".", "load_state_dict", "(", "modified_dict", ",", "strict", "=", "False", ")", "\n", "", "name_weight_bias_list", "=", "[", "]", "\n", "for", "n", ",", "m", "in", "net", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "name_weight_bias_tuple", "=", "(", "n", ",", "m", ".", "weight", ",", "m", ".", "bias", ")", "\n", "name_weight_bias_list", ".", "append", "(", "name_weight_bias_tuple", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "name_weight_bias_tuple", "=", "(", "n", ",", "m", ".", "weight", ",", "m", ".", "bias", ",", "m", ".", "running_mean", ",", "\n", "m", ".", "running_var", ")", "\n", "name_weight_bias_list", ".", "append", "(", "name_weight_bias_tuple", ")", "\n", "", "", "idx", "=", "0", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ReLUClipFXQConvBN", ")", ":", "\n", "            ", "conv_name", ",", "conv_weight", ",", "conv_bias", "=", "name_weight_bias_list", "[", "idx", "]", "\n", "bn_name", ",", "bn_weight", ",", "bn_bias", ",", "bn_running_mean", ",", "bn_running_var", "=", "name_weight_bias_list", "[", "\n", "idx", "+", "1", "]", "\n", "mprint", "(", "'model layer name: '", ",", "n", ")", "\n", "mprint", "(", "'ptcv model conv name: '", ",", "conv_name", ")", "\n", "mprint", "(", "'ptcv model bn name: '", ",", "bn_name", ")", "\n", "assert", "m", ".", "conv", ".", "weight", ".", "shape", "==", "conv_weight", ".", "shape", "\n", "assert", "m", ".", "conv", ".", "bias", "is", "None", "==", "conv_bias", "is", "None", "\n", "if", "m", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "                ", "assert", "m", ".", "conv", ".", "bias", ".", "shape", "==", "conv_bias", ".", "shape", "\n", "", "assert", "m", ".", "bn", ".", "weight", ".", "shape", "==", "bn_weight", ".", "shape", "\n", "assert", "m", ".", "bn", ".", "bias", ".", "shape", "==", "bn_bias", ".", "shape", "\n", "assert", "m", ".", "bn", ".", "running_mean", ".", "shape", "==", "bn_running_mean", ".", "shape", "\n", "assert", "m", ".", "bn", ".", "running_var", ".", "shape", "==", "bn_running_var", ".", "shape", "\n", "m", ".", "conv", ".", "weight", ".", "data", "=", "conv_weight", ".", "data", "\n", "if", "m", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "conv", ".", "bias", ".", "data", "=", "conv_bias", ".", "data", "\n", "", "m", ".", "bn", ".", "weight", ".", "data", "=", "bn_weight", ".", "data", "\n", "m", ".", "bn", ".", "bias", ".", "data", "=", "bn_bias", ".", "data", "\n", "m", ".", "bn", ".", "running_mean", ".", "data", "=", "bn_running_mean", ".", "data", "\n", "m", ".", "bn", ".", "running_var", ".", "data", "=", "bn_running_var", ".", "data", "\n", "idx", "+=", "2", "\n", "", "if", "isinstance", "(", "m", ",", "ReLUClipFXQLinear", ")", ":", "\n", "            ", "fc_name", ",", "fc_weight", ",", "fc_bias", "=", "name_weight_bias_list", "[", "idx", "]", "\n", "mprint", "(", "'model layer name: '", ",", "n", ")", "\n", "mprint", "(", "'ptcv model fc name: '", ",", "fc_name", ")", "\n", "if", "len", "(", "fc_weight", ".", "shape", ")", "==", "4", ":", "\n", "                ", "assert", "fc_weight", ".", "shape", "[", "-", "1", "]", "==", "1", "\n", "assert", "fc_weight", ".", "shape", "[", "-", "2", "]", "==", "1", "\n", "fc_weight", "=", "fc_weight", "[", "...", ",", "0", ",", "0", "]", "\n", "", "assert", "m", ".", "weight", ".", "shape", "==", "fc_weight", ".", "shape", "\n", "m", ".", "weight", ".", "data", "=", "fc_weight", ".", "data", "\n", "if", "m", ".", "bias", "is", "None", ":", "\n", "                ", "assert", "fc_bias", "is", "None", "\n", "", "else", ":", "\n", "                ", "assert", "m", ".", "bias", ".", "shape", "==", "fc_bias", ".", "shape", "\n", "m", ".", "bias", ".", "data", "=", "fc_bias", ".", "data", "\n", "", "idx", "+=", "1", "\n", "", "", "assert", "idx", "==", "len", "(", "name_weight_bias_list", ")", "\n", "del", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.nvidia_load": [[137, 256], ["torch.load", "torch.load", "torch.load.items", "model.named_modules", "getattr", "isinstance", "isinstance", "len", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "conv_weight.data.to", "bn_weight.data.to", "bn_bias.data.to", "bn_running_mean.data.to", "bn_running_var.data.to", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "fc_weight.data.to", "k.replace", "name_weight_bias_list.append", "conv_bias.data.to", "len", "fc_bias.data.to", "k.replace", "tuple.append", "tuple.append", "int", "tuple.append", "myutils.distributed.master_only_print", "tuple.append", "k.split", "k.replace", "name_weight_bias_list.append", "k.replace", "tuple.append", "tuple.append", "tuple.append", "k.replace", "tuple.append", "tuple.append", "tuple.append", "tuple", "name_weight_bias_list.append", "tuple", "name_weight_bias_list.append", "tuple.append", "tuple.append", "tuple.append", "tuple", "name_weight_bias_list.append"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print"], ["", "def", "nvidia_load", "(", "model", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "getattr", "(", "FLAGS", ",", "'nvidia_pretrained_file'", ",", "''", ")", ")", "\n", "name_weight_bias_list", "=", "[", "]", "\n", "name_weight_bias_tuple", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "ckpt", ".", "items", "(", ")", ":", "\n", "        ", "if", "'conv'", "in", "k", ":", "\n", "            ", "if", "'weight'", "in", "k", ":", "\n", "                ", "n", "=", "k", ".", "replace", "(", "'.weight'", ",", "''", ")", "\n", "name_weight_bias_tuple", "=", "(", "n", ",", "v", ",", "None", ")", "\n", "name_weight_bias_list", ".", "append", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_tuple", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "elif", "'bn'", "in", "k", ":", "\n", "            ", "if", "'weight'", "in", "k", ":", "\n", "                ", "n", "=", "k", ".", "replace", "(", "'.weight'", ",", "''", ")", "\n", "name_weight_bias_tuple", ".", "append", "(", "n", ")", "\n", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'bias'", "in", "k", ":", "\n", "                ", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'running_mean'", "in", "k", ":", "\n", "                ", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'running_var'", "in", "k", ":", "\n", "                ", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'num_batches_tracked'", "in", "k", ":", "\n", "                ", "name_weight_bias_tuple", "=", "tuple", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_list", ".", "append", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_tuple", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "elif", "'downsample'", "in", "k", ":", "\n", "            ", "layer_idx", "=", "int", "(", "k", ".", "split", "(", "'.'", ")", "[", "-", "2", "]", ")", "\n", "if", "layer_idx", "==", "0", ":", "\n", "                ", "if", "'weight'", "in", "k", ":", "\n", "                    ", "n", "=", "k", ".", "replace", "(", "'.weight'", ",", "''", ")", "\n", "name_weight_bias_tuple", "=", "(", "n", ",", "v", ",", "None", ")", "\n", "name_weight_bias_list", ".", "append", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_tuple", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "elif", "layer_idx", "==", "1", ":", "\n", "                ", "if", "'weight'", "in", "k", ":", "\n", "                    ", "n", "=", "k", ".", "replace", "(", "'.weight'", ",", "''", ")", "\n", "name_weight_bias_tuple", ".", "append", "(", "n", ")", "\n", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'bias'", "in", "k", ":", "\n", "                    ", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'running_mean'", "in", "k", ":", "\n", "                    ", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'running_var'", "in", "k", ":", "\n", "                    ", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'num_batches_tracked'", "in", "k", ":", "\n", "                    ", "name_weight_bias_tuple", "=", "tuple", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_list", ".", "append", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_tuple", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "elif", "'fc'", "in", "k", ":", "\n", "            ", "if", "'weight'", "in", "k", ":", "\n", "                ", "n", "=", "k", ".", "replace", "(", "'.weight'", ",", "''", ")", "\n", "name_weight_bias_tuple", ".", "append", "(", "n", ")", "\n", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "", "elif", "'bias'", "in", "k", ":", "\n", "                ", "name_weight_bias_tuple", ".", "append", "(", "v", ")", "\n", "name_weight_bias_tuple", "=", "tuple", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_list", ".", "append", "(", "name_weight_bias_tuple", ")", "\n", "name_weight_bias_tuple", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "mprint", "(", "'k: '", ",", "k", ")", "\n", "raise", "NotImplementedError", "\n", "", "", "idx", "=", "0", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ReLUClipFXQConvBN", ")", ":", "\n", "            ", "conv_name", ",", "conv_weight", ",", "conv_bias", "=", "name_weight_bias_list", "[", "idx", "]", "\n", "bn_name", ",", "bn_weight", ",", "bn_bias", ",", "bn_running_mean", ",", "bn_running_var", "=", "name_weight_bias_list", "[", "\n", "idx", "+", "1", "]", "\n", "mprint", "(", "'model layer name: '", ",", "n", ")", "\n", "mprint", "(", "'nvidia model conv name: '", ",", "conv_name", ")", "\n", "mprint", "(", "'nvidia model bn name: '", ",", "bn_name", ")", "\n", "assert", "m", ".", "conv", ".", "weight", ".", "shape", "==", "conv_weight", ".", "shape", "\n", "assert", "m", ".", "conv", ".", "bias", "is", "None", "==", "conv_bias", "is", "None", "\n", "if", "m", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "                ", "assert", "m", ".", "conv", ".", "bias", ".", "shape", "==", "conv_weight", ".", "shape", "\n", "", "assert", "m", ".", "bn", ".", "weight", ".", "shape", "==", "bn_weight", ".", "shape", "\n", "assert", "m", ".", "bn", ".", "bias", ".", "shape", "==", "bn_bias", ".", "shape", "\n", "assert", "m", ".", "bn", ".", "running_mean", ".", "shape", "==", "bn_running_mean", ".", "shape", "\n", "assert", "m", ".", "bn", ".", "running_var", ".", "shape", "==", "bn_running_var", ".", "shape", "\n", "m", ".", "conv", ".", "weight", ".", "data", "=", "conv_weight", ".", "data", ".", "to", "(", "m", ".", "conv", ".", "weight", ".", "device", ")", "\n", "if", "m", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "conv", ".", "bias", ".", "data", "=", "conv_bias", ".", "data", ".", "to", "(", "m", ".", "conv", ".", "bias", ".", "device", ")", "\n", "", "m", ".", "bn", ".", "weight", ".", "data", "=", "bn_weight", ".", "data", ".", "to", "(", "m", ".", "bn", ".", "weight", ".", "device", ")", "\n", "m", ".", "bn", ".", "bias", ".", "data", "=", "bn_bias", ".", "data", ".", "to", "(", "m", ".", "bn", ".", "bias", ".", "device", ")", "\n", "m", ".", "bn", ".", "running_mean", ".", "data", "=", "bn_running_mean", ".", "data", ".", "to", "(", "\n", "m", ".", "bn", ".", "running_mean", ".", "device", ")", "\n", "m", ".", "bn", ".", "running_var", ".", "data", "=", "bn_running_var", ".", "data", ".", "to", "(", "\n", "m", ".", "bn", ".", "running_var", ".", "device", ")", "\n", "idx", "+=", "2", "\n", "", "if", "isinstance", "(", "m", ",", "ReLUClipFXQLinear", ")", ":", "\n", "            ", "fc_name", ",", "fc_weight", ",", "fc_bias", "=", "name_weight_bias_list", "[", "idx", "]", "\n", "mprint", "(", "'model layer name: '", ",", "n", ")", "\n", "mprint", "(", "'nvidia fc name: '", ",", "fc_name", ")", "\n", "if", "len", "(", "fc_weight", ".", "shape", ")", "==", "4", ":", "\n", "                ", "assert", "fc_weight", ".", "shape", "[", "-", "1", "]", "==", "1", "\n", "assert", "fc_weight", ".", "shape", "[", "-", "2", "]", "==", "1", "\n", "fc_weight", "=", "fc_weight", "[", "...", ",", "0", ",", "0", "]", "\n", "", "assert", "m", ".", "weight", ".", "shape", "==", "fc_weight", ".", "shape", "\n", "m", ".", "weight", ".", "data", "=", "fc_weight", ".", "data", ".", "to", "(", "m", ".", "weight", ".", "device", ")", "\n", "if", "m", ".", "bias", "is", "None", ":", "\n", "                ", "assert", "fc_bias", "is", "None", "\n", "", "else", ":", "\n", "                ", "assert", "m", ".", "bias", ".", "shape", "==", "fc_bias", ".", "shape", "\n", "m", ".", "bias", ".", "data", "=", "fc_bias", ".", "data", ".", "to", "(", "m", ".", "bias", ".", "device", ")", "\n", "", "idx", "+=", "1", "\n", "", "", "assert", "idx", "==", "len", "(", "name_weight_bias_list", ")", "\n", "del", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_model": [[258, 297], ["importlib.import_module", "importlib.import_module.Model", "getattr", "model_lib.Model.modules", "getattr", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "isinstance", "isinstance", "isinstance", "myutils.distributed.AllReduceDistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "m.set_weight_format", "m.set_input_format", "getattr", "m.set_alpha", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "m.set_metric_func", "m.register_input_format", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "model_lib.Model.cuda", "model_lib.Model.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "getattr"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_metric_func", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.register_input_format"], ["", "def", "get_model", "(", "gpu_id", "=", "None", ")", ":", "\n", "    ", "\"\"\"get model\"\"\"", "\n", "model_lib", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "model", ")", "\n", "model", "=", "model_lib", ".", "Model", "(", "FLAGS", ".", "num_classes", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'distributed'", ",", "False", ")", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'distributed_all_reduce'", ",", "False", ")", ":", "\n", "            ", "model_wrapper", "=", "AllReduceDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "model_wrapper", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "[", "gpu_id", "]", ",", "gpu_id", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "", "else", ":", "\n", "        ", "model_wrapper", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "ReLUClipFXQConvBN", ",", "ReLUClipFXQLinear", ")", ")", ":", "\n", "            ", "m", ".", "set_weight_format", "(", "FLAGS", ".", "weight_format", ")", "\n", "m", ".", "set_input_format", "(", "FLAGS", ".", "input_format", ")", "\n", "m", ".", "rescale_type", "=", "getattr", "(", "FLAGS", ",", "'rescale_type'", ",", "'constant'", ")", "\n", "m", ".", "set_alpha", "(", ")", "\n", "m", ".", "floating", "=", "getattr", "(", "FLAGS", ",", "'floating_model'", ",", "False", ")", "\n", "m", ".", "floating_wo_clip", "=", "getattr", "(", "FLAGS", ",", "'floating_wo_clip'", ",", "False", ")", "\n", "m", ".", "format_type", "=", "getattr", "(", "FLAGS", ",", "'format_type'", ",", "None", ")", "\n", "m", ".", "format_from_metric", "=", "getattr", "(", "FLAGS", ",", "'format_from_metric'", ",", "False", ")", "\n", "m", ".", "metric", "=", "getattr", "(", "FLAGS", ",", "'metric'", ",", "None", ")", "\n", "m", ".", "format_grid_search", "=", "getattr", "(", "FLAGS", ",", "'format_grid_search'", ",", "False", ")", "\n", "m", ".", "set_metric_func", "(", ")", "\n", "m", ".", "register_input_format", "(", "FLAGS", ".", "input_format", ",", "\n", "momentum", "=", "getattr", "(", "FLAGS", ",", "\n", "'momentum_for_metric'", ",", "\n", "0.1", ")", ")", "\n", "m", ".", "no_clipping", "=", "getattr", "(", "FLAGS", ",", "'no_clipping'", ",", "False", ")", "\n", "m", ".", "input_fraclen_sharing", "=", "getattr", "(", "FLAGS", ",", "'input_fraclen_sharing'", ",", "\n", "False", ")", "\n", "m", ".", "quant_bias", "=", "getattr", "(", "FLAGS", ",", "'quant_bias'", ",", "False", ")", "\n", "m", ".", "int_infer", "=", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "\n", "", "if", "isinstance", "(", "m", ",", "ReLUClipFXQConvBN", ")", ":", "\n", "            ", "m", ".", "rescale_forward", "=", "getattr", "(", "FLAGS", ",", "'rescale_forward_conv'", ",", "False", ")", "\n", "", "if", "isinstance", "(", "m", ",", "ReLUClipFXQLinear", ")", ":", "\n", "            ", "m", ".", "rescale_forward", "=", "getattr", "(", "FLAGS", ",", "'rescale_forward'", ",", "True", ")", "\n", "", "", "return", "model", ",", "model_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.data_transforms": [[299, 330], ["getattr", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "importlib.import_module", "importlib.import_module.data_transforms", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.data_transforms"], ["", "def", "data_transforms", "(", ")", ":", "\n", "    ", "\"\"\"get transform of dataset\"\"\"", "\n", "if", "FLAGS", ".", "data_transforms", "in", "[", "'imagenet1k'", "]", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ":", "\n", "            ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "else", ":", "\n", "            ", "mean", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "std", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", "\n", "", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "val_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "test_transforms", "=", "val_transforms", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "transforms_lib", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "data_transforms", ")", "\n", "return", "transforms_lib", ".", "data_transforms", "(", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Data transform {} is not yet implemented.'", ".", "format", "(", "\n", "FLAGS", ".", "data_transforms", ")", ")", "\n", "", "", "return", "train_transforms", ",", "val_transforms", ",", "test_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.dataset": [[332, 353], ["torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "os.path.join", "importlib.import_module", "importlib.import_module.dataset", "os.path.join", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.dataset"], ["", "def", "dataset", "(", "train_transforms", ",", "val_transforms", ",", "test_transforms", ")", ":", "\n", "    ", "\"\"\"get dataset for classification\"\"\"", "\n", "if", "FLAGS", ".", "dataset", "==", "'imagenet1k'", ":", "\n", "        ", "if", "not", "FLAGS", ".", "test_only", ":", "\n", "            ", "train_set", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "\n", "FLAGS", ".", "dataset_dir", ",", "'train'", ")", ",", "\n", "transform", "=", "train_transforms", ")", "\n", "", "else", ":", "\n", "            ", "train_set", "=", "None", "\n", "", "val_set", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "dataset_dir", ",", "'val'", ")", ",", "\n", "transform", "=", "val_transforms", ")", "\n", "test_set", "=", "None", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "dataset_lib", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "dataset", ")", "\n", "return", "dataset_lib", ".", "dataset", "(", "train_transforms", ",", "val_transforms", ",", "\n", "test_transforms", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Dataset {} is not yet implemented.'", ".", "format", "(", "FLAGS", ".", "dataset", ")", ")", "\n", "", "", "return", "train_set", ",", "val_set", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.data_loader": [[355, 416], ["getattr", "int", "getattr", "getattr", "getattr", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "len", "ValueError", "myutils.distributed.get_world_size", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "importlib.import_module", "importlib.import_module.data_loader", "torch.utils.data.distributed.DistributedSampler", "getattr", "NotImplementedError", "getattr"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_world_size", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.data_loader"], ["", "def", "data_loader", "(", "train_set", ",", "val_set", ",", "test_set", ")", ":", "\n", "    ", "\"\"\"get data loader\"\"\"", "\n", "train_loader", "=", "None", "\n", "val_loader", "=", "None", "\n", "test_loader", "=", "None", "\n", "if", "getattr", "(", "FLAGS", ",", "'batch_size'", ",", "False", ")", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'batch_size_per_gpu'", ",", "False", ")", ":", "\n", "            ", "assert", "FLAGS", ".", "batch_size", "==", "(", "FLAGS", ".", "batch_size_per_gpu", "*", "\n", "FLAGS", ".", "num_gpus_per_job", ")", "\n", "", "else", ":", "\n", "            ", "assert", "FLAGS", ".", "batch_size", "%", "FLAGS", ".", "num_gpus_per_job", "==", "0", "\n", "FLAGS", ".", "batch_size_per_gpu", "=", "(", "FLAGS", ".", "batch_size", "//", "\n", "FLAGS", ".", "num_gpus_per_job", ")", "\n", "", "", "elif", "getattr", "(", "FLAGS", ",", "'batch_size_per_gpu'", ",", "False", ")", ":", "\n", "        ", "FLAGS", ".", "batch_size", "=", "FLAGS", ".", "batch_size_per_gpu", "*", "FLAGS", ".", "num_gpus_per_job", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'batch size (per gpu) is not defined'", ")", "\n", "", "batch_size", "=", "int", "(", "FLAGS", ".", "batch_size", "/", "get_world_size", "(", ")", ")", "\n", "if", "FLAGS", ".", "data_loader", "in", "[", "'imagenet1k'", "]", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'distributed'", ",", "False", ")", ":", "\n", "            ", "if", "FLAGS", ".", "test_only", ":", "\n", "                ", "train_sampler", "=", "None", "\n", "", "else", ":", "\n", "                ", "train_sampler", "=", "DistributedSampler", "(", "train_set", ")", "\n", "", "val_sampler", "=", "DistributedSampler", "(", "val_set", ")", "\n", "", "else", ":", "\n", "            ", "train_sampler", "=", "None", "\n", "val_sampler", "=", "None", "\n", "", "if", "not", "FLAGS", ".", "test_only", ":", "\n", "            ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "FLAGS", ".", "data_loader_workers", ",", "\n", "drop_last", "=", "getattr", "(", "FLAGS", ",", "'drop_last'", ",", "False", ")", ")", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "FLAGS", ".", "data_loader_workers", ",", "\n", "drop_last", "=", "getattr", "(", "FLAGS", ",", "'drop_last'", ",", "False", ")", ")", "\n", "test_loader", "=", "val_loader", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "data_loader_lib", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "data_loader", ")", "\n", "return", "data_loader_lib", ".", "data_loader", "(", "train_set", ",", "val_set", ",", "test_set", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Data loader {} is not yet implemented.'", ".", "format", "(", "\n", "FLAGS", ".", "data_loader", ")", ")", "\n", "", "", "if", "train_loader", "is", "not", "None", ":", "\n", "        ", "FLAGS", ".", "data_size_train", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "", "if", "val_loader", "is", "not", "None", ":", "\n", "        ", "FLAGS", ".", "data_size_val", "=", "len", "(", "val_loader", ".", "dataset", ")", "\n", "", "if", "test_loader", "is", "not", "None", ":", "\n", "        ", "FLAGS", ".", "data_size_test", "=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.lr_func": [[418, 423], ["math.exp", "math.cos"], "function", ["None"], ["", "def", "lr_func", "(", "x", ",", "fun", "=", "'cos'", ")", ":", "\n", "    ", "if", "fun", "==", "'cos'", ":", "\n", "        ", "return", "math", ".", "cos", "(", "x", "*", "math", ".", "pi", ")", "/", "2", "+", "0.5", "\n", "", "if", "fun", "==", "'exp'", ":", "\n", "        ", "return", "math", ".", "exp", "(", "-", "x", "*", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_lr_scheduler": [[425, 517], ["range", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "range", "range", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "bisect.bisect_right", "range", "range", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "fix_train.lr_func", "range", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "getattr", "range", "range", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "importlib.import_module", "importlib.import_module.get_lr_scheduler", "math.cos", "NotImplementedError", "math.cos"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.lr_func", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_lr_scheduler"], ["", "", "def", "get_lr_scheduler", "(", "optimizer", ",", "nBatch", "=", "None", ")", ":", "\n", "    ", "\"\"\"get learning rate\"\"\"", "\n", "if", "FLAGS", ".", "lr_scheduler", "==", "'constant'", ":", "\n", "        ", "lr_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", "+", "1", ")", ":", "\n", "            ", "lr_dict", "[", "i", "]", "=", "1.", "\n", "", "lr_lambda", "=", "lambda", "epoch", ":", "lr_dict", "[", "epoch", "]", "# noqa: E731", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lr_lambda", ")", "\n", "", "elif", "FLAGS", ".", "lr_scheduler", "==", "'multistep'", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "\n", "milestones", "=", "FLAGS", ".", "multistep_lr_milestones", ",", "\n", "gamma", "=", "FLAGS", ".", "multistep_lr_gamma", ")", "\n", "", "elif", "FLAGS", ".", "lr_scheduler", "==", "'multistep_iter'", ":", "\n", "        ", "FLAGS", ".", "num_iters", "=", "FLAGS", ".", "num_epochs", "*", "nBatch", "\n", "FLAGS", ".", "warmup_iters", "=", "FLAGS", ".", "warmup_epochs", "*", "nBatch", "\n", "lr_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "warmup_iters", ")", ":", "\n", "            ", "bs_ratio", "=", "256", "/", "FLAGS", ".", "batch_size", "\n", "lr_dict", "[", "i", "]", "=", "(", "1", "-", "bs_ratio", ")", "/", "FLAGS", ".", "warmup_iters", "*", "i", "+", "bs_ratio", "\n", "", "for", "i", "in", "range", "(", "FLAGS", ".", "warmup_iters", ",", "FLAGS", ".", "num_iters", "+", "1", ")", ":", "\n", "            ", "lr_dict", "[", "i", "]", "=", "FLAGS", ".", "multistep_lr_gamma", "**", "bisect_right", "(", "\n", "FLAGS", ".", "multistep_lr_milestones", ",", "i", "//", "nBatch", ")", "\n", "", "lr_lambda", "=", "lambda", "itr", ":", "lr_dict", "[", "itr", "]", "# noqa: E731", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lr_lambda", ")", "\n", "", "elif", "FLAGS", ".", "lr_scheduler", "==", "'exp_decaying'", ":", "\n", "        ", "lr_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", "+", "1", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "lr_dict", "[", "i", "]", "=", "1", "\n", "", "elif", "i", "%", "getattr", "(", "FLAGS", ",", "'exp_decaying_period'", ",", "1", ")", "==", "0", ":", "\n", "                ", "lr_dict", "[", "i", "]", "=", "lr_dict", "[", "i", "-", "1", "]", "*", "FLAGS", ".", "exp_decaying_lr_gamma", "\n", "", "else", ":", "\n", "                ", "lr_dict", "[", "i", "]", "=", "lr_dict", "[", "i", "-", "1", "]", "\n", "", "", "lr_lambda", "=", "lambda", "epoch", ":", "lr_dict", "[", "epoch", "]", "# noqa: E731", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lr_lambda", ")", "\n", "", "elif", "FLAGS", ".", "lr_scheduler", "==", "'exp_decaying_iter'", ":", "\n", "        ", "FLAGS", ".", "num_iters", "=", "FLAGS", ".", "num_epochs", "*", "nBatch", "\n", "FLAGS", ".", "warmup_iters", "=", "FLAGS", ".", "warmup_epochs", "*", "nBatch", "\n", "lr_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "warmup_iters", ")", ":", "\n", "            ", "bs_ratio", "=", "256", "/", "FLAGS", ".", "batch_size", "\n", "lr_dict", "[", "i", "]", "=", "(", "1", "-", "bs_ratio", ")", "/", "FLAGS", ".", "warmup_iters", "*", "i", "+", "bs_ratio", "\n", "", "for", "i", "in", "range", "(", "FLAGS", ".", "warmup_iters", ",", "FLAGS", ".", "num_iters", "+", "1", ")", ":", "\n", "            ", "lr_dict", "[", "i", "]", "=", "lr_func", "(", "(", "i", "-", "FLAGS", ".", "warmup_iters", ")", "/", "\n", "(", "FLAGS", ".", "num_iters", "-", "FLAGS", ".", "warmup_iters", ")", ",", "'exp'", ")", "\n", "", "lr_lambda", "=", "lambda", "itr", ":", "lr_dict", "[", "itr", "]", "# noqa: E731", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lr_lambda", ")", "\n", "", "elif", "FLAGS", ".", "lr_scheduler", "==", "'linear_decaying'", ":", "\n", "        ", "num_epochs", "=", "FLAGS", ".", "num_epochs", "-", "FLAGS", ".", "warmup_epochs", "\n", "lr_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", "+", "1", ")", ":", "\n", "            ", "lr_dict", "[", "i", "]", "=", "1.", "-", "(", "i", "-", "FLAGS", ".", "warmup_epochs", ")", "/", "FLAGS", ".", "num_epochs", "\n", "", "lr_lambda", "=", "lambda", "epoch", ":", "lr_dict", "[", "epoch", "]", "# noqa: E731", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lr_lambda", ")", "\n", "", "elif", "FLAGS", ".", "lr_scheduler", "==", "'cos_annealing'", ":", "\n", "        ", "num_epochs", "=", "FLAGS", ".", "num_epochs", "-", "FLAGS", ".", "warmup_epochs", "\n", "lr_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", "+", "1", ")", ":", "\n", "            ", "lr_dict", "[", "i", "]", "=", "(", "1.0", "+", "math", ".", "cos", "(", "\n", "(", "i", "-", "FLAGS", ".", "warmup_epochs", ")", "*", "math", ".", "pi", "/", "num_epochs", ")", ")", "/", "2", "\n", "", "lr_lambda", "=", "lambda", "epoch", ":", "lr_dict", "[", "epoch", "]", "# noqa: E731", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lr_lambda", ")", "\n", "", "elif", "FLAGS", ".", "lr_scheduler", "==", "'cos_annealing_iter'", ":", "\n", "        ", "FLAGS", ".", "num_iters", "=", "FLAGS", ".", "num_epochs", "*", "nBatch", "\n", "FLAGS", ".", "warmup_iters", "=", "FLAGS", ".", "warmup_epochs", "*", "nBatch", "\n", "lr_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "warmup_iters", ")", ":", "\n", "            ", "bs_ratio", "=", "256", "/", "FLAGS", ".", "batch_size", "\n", "lr_dict", "[", "i", "]", "=", "(", "1", "-", "bs_ratio", ")", "/", "FLAGS", ".", "warmup_iters", "*", "i", "+", "bs_ratio", "\n", "", "for", "i", "in", "range", "(", "FLAGS", ".", "warmup_iters", ",", "FLAGS", ".", "num_iters", "+", "1", ")", ":", "\n", "            ", "lr_dict", "[", "i", "]", "=", "(", "1.0", "+", "math", ".", "cos", "(", "\n", "(", "i", "-", "FLAGS", ".", "warmup_iters", ")", "*", "math", ".", "pi", "/", "\n", "(", "FLAGS", ".", "num_iters", "-", "FLAGS", ".", "warmup_iters", ")", ")", ")", "/", "2", "\n", "", "lr_lambda", "=", "lambda", "itr", ":", "lr_dict", "[", "itr", "]", "# noqa: E731", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "\n", "lr_lambda", "=", "lr_lambda", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "lr_scheduler_lib", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "lr_scheduler", ")", "\n", "return", "lr_scheduler_lib", ".", "get_lr_scheduler", "(", "optimizer", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Learning rate scheduler {} is not yet implemented.'", ".", "format", "(", "\n", "FLAGS", ".", "lr_scheduler", ")", ")", "\n", "", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_optimizer": [[519, 573], ["model.named_parameters", "torch.optim.SGD", "torch.optim.SGD", "list", "getattr", "model_params.append", "importlib.import_module", "importlib.import_module.get_optimizer", "params.size", "NotImplementedError", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_optimizer"], ["", "def", "get_optimizer", "(", "model", ")", ":", "\n", "    ", "\"\"\"get optimizer\"\"\"", "\n", "if", "FLAGS", ".", "optimizer", "==", "'sgd'", ":", "\n", "        ", "model_params", "=", "[", "]", "\n", "for", "name", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "ps", "=", "list", "(", "params", ".", "size", "(", ")", ")", "\n", "weight_decay_scheme", "=", "getattr", "(", "FLAGS", ",", "'weight_decay_scheme'", ",", "'all'", ")", "\n", "if", "weight_decay_scheme", "==", "'all'", ":", "\n", "                ", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "", "elif", "weight_decay_scheme", "==", "'only_no_depthwise'", ":", "\n", "# all depthwise convolution (N, 1, x, x) has no weight decay", "\n", "# weight decay only on normal conv, bn and fc", "\n", "                ", "if", "len", "(", "ps", ")", "==", "4", "and", "ps", "[", "1", "]", "!=", "1", ":", "\n", "                    ", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "", "elif", "len", "(", "ps", ")", "in", "[", "1", ",", "2", "]", ":", "\n", "                    ", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "", "else", ":", "\n", "                    ", "weight_decay", "=", "0", "\n", "", "", "elif", "weight_decay_scheme", "==", "'only_no_bn'", ":", "\n", "## only no weight decay on bn", "\n", "                ", "if", "len", "(", "ps", ")", "==", "4", ":", "\n", "                    ", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "", "elif", "len", "(", "ps", ")", "==", "2", ":", "\n", "                    ", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "", "else", ":", "\n", "                    ", "weight_decay", "=", "0", "\n", "", "", "elif", "weight_decay_scheme", "==", "'no_depthwise_no_bn'", ":", "\n", "## no weight decay on bn and no weight decay on depthwise conv", "\n", "                ", "if", "len", "(", "ps", ")", "==", "4", "and", "ps", "[", "1", "]", "!=", "1", ":", "\n", "                    ", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "", "elif", "len", "(", "ps", ")", "==", "2", ":", "\n", "                    ", "weight_decay", "=", "FLAGS", ".", "weight_decay", "\n", "", "else", ":", "\n", "                    ", "weight_decay", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "lr", "=", "FLAGS", ".", "lr", "\n", "item", "=", "{", "\n", "'params'", ":", "params", ",", "\n", "'weight_decay'", ":", "weight_decay", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'momentum'", ":", "FLAGS", ".", "momentum", ",", "\n", "'nesterov'", ":", "FLAGS", ".", "nesterov", "\n", "}", "\n", "model_params", ".", "append", "(", "item", ")", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model_params", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "optimizer_lib", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "optimizer", ")", "\n", "return", "optimizer_lib", ".", "get_optimizer", "(", "model", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Optimizer {} is not yet implemented.'", ".", "format", "(", "FLAGS", ".", "optimizer", ")", ")", "\n", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.set_random_seed": [[575, 585], ["myutils.distributed.master_only_print", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "getattr"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print"], ["", "def", "set_random_seed", "(", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"set random seed\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "getattr", "(", "FLAGS", ",", "'random_seed'", ",", "0", ")", "\n", "", "mprint", "(", "'seed for random sampling: {}'", ".", "format", "(", "seed", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_meters": [[587, 606], ["myutils.meters.ScalarMeter", "fix_train.get_meters.get_single_meter"], "function", ["None"], ["", "@", "master_only", "\n", "def", "get_meters", "(", "phase", ",", "single_sample", "=", "False", ")", ":", "\n", "    ", "\"\"\"util function for meters\"\"\"", "\n", "def", "get_single_meter", "(", "phase", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "meters", "=", "{", "}", "\n", "meters", "[", "'loss'", "]", "=", "ScalarMeter", "(", "'{}_loss/{}'", ".", "format", "(", "phase", ",", "suffix", ")", ")", "\n", "for", "k", "in", "FLAGS", ".", "topk", ":", "\n", "            ", "meters", "[", "'top{}_error'", ".", "format", "(", "k", ")", "]", "=", "ScalarMeter", "(", "\n", "'{}_top{}_error/{}'", ".", "format", "(", "phase", ",", "k", ",", "suffix", ")", ")", "\n", "", "return", "meters", "\n", "\n", "", "assert", "phase", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'calib'", "]", ",", "'Invalid phase.'", "\n", "if", "single_sample", ":", "\n", "        ", "meters", "=", "get_single_meter", "(", "phase", ")", "\n", "", "else", ":", "\n", "        ", "meters", "=", "get_single_meter", "(", "phase", ")", "\n", "", "if", "phase", "==", "'val'", ":", "\n", "        ", "meters", "[", "'best_val'", "]", "=", "ScalarMeter", "(", "'best_val'", ")", "\n", "", "return", "meters", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_experiment_setting": [[608, 674], ["os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "getattr", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join.append", "os.path.join", "myutils.distributed.master_only_print", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "float"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print"], ["", "def", "get_experiment_setting", "(", ")", ":", "\n", "    ", "experiment_setting", "=", "[", "]", "\n", "experiment_setting", ".", "append", "(", "'ptcv_pretrained_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'ptcv_pretrained'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'nvidia_pretrained_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'nvidia_pretrained'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'hawq_pretrained_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'hawq_pretrained'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'finetune_iters_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'finetune_iters'", ",", "float", "(", "'inf'", ")", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'bn_calib_before_test_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'bn_calib_before_test'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'bn_calib_batch_num_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'bn_calib_batch_num'", ",", "-", "1", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'quant_avgpool_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'pool_fusing_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'pool_fusing'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "\n", "f'weight_format_wl_{FLAGS.weight_format[0]}_fl_{FLAGS.weight_format[1]}'", "\n", ")", "\n", "experiment_setting", ".", "append", "(", "\n", "f'input_format_wl_{FLAGS.input_format[0]}_fl_{FLAGS.input_format[1]}'", ")", "\n", "experiment_setting", ".", "append", "(", "'rescale_forward_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'rescale_forward'", ",", "True", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'rescale_forward_conv_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'rescale_forward_conv'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'rescale_type_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'rescale_type'", ",", "'constant'", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'input_fraclen_sharing_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'input_fraclen_sharing'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'floating_model_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'floating_model'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'floating_wo_clip_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'floating_wo_clip'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'no_clipping_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'no_clipping'", ",", "False", ")", ")", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'fp_pretrained_file'", ",", "''", ")", ":", "\n", "        ", "fp_pretrained", "=", "True", "\n", "", "else", ":", "\n", "        ", "fp_pretrained", "=", "False", "\n", "", "experiment_setting", ".", "append", "(", "f'fp_pretrained_{fp_pretrained}'", ")", "\n", "experiment_setting", ".", "append", "(", "'format_type_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'format_type'", ",", "None", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'format_from_metric_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'format_from_metric'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'momentum_for_metric_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'momentum_for_metric'", ",", "0.1", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'metric_{}'", ".", "format", "(", "getattr", "(", "\n", "FLAGS", ",", "'metric'", ",", "None", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'format_grid_search_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'format_grid_search'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'bn_momentum_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'bn_momentum'", ",", "0.1", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'bn_eps_{}'", ".", "format", "(", "getattr", "(", "FLAGS", ",", "'bn_eps'", ",", "\n", "0.1", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'lr_{}'", ".", "format", "(", "FLAGS", ".", "lr", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'weight_decay_scheme_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'weight_decay_scheme'", ",", "'all'", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'normalize_{}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'warmup_epochs_{}'", ".", "format", "(", "FLAGS", ".", "warmup_epochs", ")", ")", "\n", "experiment_setting", ".", "append", "(", "'weight_decay_{}'", ".", "format", "(", "FLAGS", ".", "weight_decay", ")", ")", "\n", "experiment_setting", "=", "os", ".", "path", ".", "join", "(", "*", "experiment_setting", ")", "\n", "mprint", "(", "'Experiment settings: {}'", ".", "format", "(", "experiment_setting", ")", ")", "\n", "return", "experiment_setting", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.forward_loss": [[676, 719], ["getattr", "model", "torch.mean", "torch.mean", "model.topk", "pred.t.t", "pred.t.eq", "torch.cat", "torch.cat", "myutils.distributed.dist_all_reduce_tensor.cpu().detach().numpy", "enumerate", "getattr", "torch.all", "torch.all", "getattr", "criterion", "max", "target.view().expand_as", "correct_k.append", "getattr", "getattr", "myutils.distributed.dist_all_reduce_tensor", "len", "list", "getattr", "meter[].cache", "getattr", "getattr", "getattr", "setattr", "setattr", "correct[].float().sum", "myutils.distributed.dist_all_reduce_tensor.cpu().detach", "meter[].cache_list", "myutils.distributed.master_only_print", "input_fraclen.item", "target.view", "torch.mean.view", "correct[].float", "myutils.distributed.dist_all_reduce_tensor.cpu", "models.fix_quant_ops.fix_quant", "sum", "len"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.dist_all_reduce_tensor", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.cache", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.cache_list", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "forward_loss", "(", "model", ",", "criterion", ",", "input", ",", "target", ",", "meter", ",", "train", "=", "False", ")", ":", "\n", "    ", "\"\"\"forward model and return loss\"\"\"", "\n", "if", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ":", "\n", "        ", "assert", "getattr", "(", "FLAGS", ",", "'ptcv_pretrained'", ",", "False", ")", "or", "getattr", "(", "\n", "FLAGS", ",", "'nvidia_pretrained'", ",", "False", ")", "or", "getattr", "(", "\n", "FLAGS", ",", "'hawq_pretrained'", ",", "False", ")", "\n", "if", "getattr", "(", "model", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "input_fraclen", "=", "model", ".", "head", "[", "0", "]", ".", "input_fraclen", "\n", "input_symmetric", "=", "model", ".", "head", "[", "0", "]", ".", "input_symmetric", "\n", "input", "=", "(", "fix_quant", "(", "input", ",", "8", ",", "input_fraclen", "*", "1.0", ",", "1", ",", "\n", "input_symmetric", ")", "[", "0", "]", "*", "(", "2", "**", "input_fraclen", ")", ")", ".", "int", "(", ")", "\n", "setattr", "(", "input", ",", "'output_fraclen'", ",", "input_fraclen", ".", "item", "(", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "torch", ".", "all", "(", "input", ">=", "0", ")", "\n", "if", "getattr", "(", "model", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "input", "=", "(", "255", "*", "input", ")", ".", "round_", "(", ")", ".", "int", "(", ")", "\n", "setattr", "(", "input", ",", "'output_fraclen'", ",", "8", ")", "\n", "", "else", ":", "\n", "            ", "input", "=", "(", "255", "*", "input", ")", ".", "round_", "(", ")", "/", "256", "\n", "", "", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "criterion", "(", "output", ",", "target", ")", ")", "\n", "# topk", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "max", "(", "FLAGS", ".", "topk", ")", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "correct_k", "=", "[", "]", "\n", "for", "k", "in", "FLAGS", ".", "topk", ":", "\n", "        ", "correct_k", ".", "append", "(", "correct", "[", ":", "k", "]", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "[", "loss", ".", "view", "(", "1", ")", "]", "+", "correct_k", ",", "dim", "=", "0", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'distributed'", ",", "False", ")", "and", "getattr", "(", "\n", "FLAGS", ",", "'distributed_all_reduce'", ",", "False", ")", ":", "\n", "        ", "res", "=", "dist_all_reduce_tensor", "(", "res", ")", "\n", "", "res", "=", "res", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "bs", "=", "(", "res", ".", "size", "-", "1", ")", "//", "len", "(", "FLAGS", ".", "topk", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "FLAGS", ".", "topk", ")", ":", "\n", "        ", "error_list", "=", "list", "(", "1.", "-", "res", "[", "1", "+", "i", "*", "bs", ":", "1", "+", "(", "i", "+", "1", ")", "*", "bs", "]", ")", "\n", "if", "meter", "is", "not", "None", ":", "\n", "            ", "meter", "[", "'top{}_error'", ".", "format", "(", "k", ")", "]", ".", "cache_list", "(", "error_list", ")", "\n", "", "if", "getattr", "(", "FLAGS", ",", "'print_each_iter'", ",", "False", ")", ":", "\n", "            ", "mprint", "(", "f'top{k} err: {sum(error_list) / len(error_list)}.'", ")", "\n", "", "", "if", "meter", "is", "not", "None", ":", "\n", "        ", "meter", "[", "'loss'", "]", ".", "cache", "(", "res", "[", "0", "]", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.run_one_epoch": [[721, 795], ["time.time", "getattr", "enumerate", "model.train", "model.eval", "loader.sampler.set_epoch", "myutils.distributed.is_master", "myutils.meters.flush_scalar_meters", "myutils.distributed.master_only_print", "model.apply", "getattr", "target.cuda.cuda", "optimizer.zero_grad", "fix_train.forward_loss", "forward_loss.backward", "optimizer.step", "fix_train.forward_loss", "getattr", "getattr", "getattr", "getattr", "getattr", "myutils.distributed.allreduce_grads", "scheduler.step", "float", "float", "len", "time.time", "myutils.meters.flush_scalar_meters.items"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.is_master", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.flush_scalar_meters", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.forward_loss", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.q_k.backward", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.forward_loss", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.allreduce_grads"], ["", "@", "timing", "\n", "def", "run_one_epoch", "(", "epoch", ",", "\n", "loader", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "meters", ",", "\n", "phase", "=", "'train'", ",", "\n", "scheduler", "=", "None", ")", ":", "\n", "    ", "\"\"\"run one epoch for train/val/test/calib\"\"\"", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "assert", "phase", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "\n", "'calib'", "]", ",", "\"phase not be in train/val/test/calib.\"", "\n", "train", "=", "phase", "==", "'train'", "\n", "if", "train", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "if", "phase", "==", "'calib'", ":", "\n", "            ", "model", ".", "apply", "(", "bn_calib", ")", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'distributed'", ",", "False", ")", ":", "\n", "        ", "loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "skip_print", "=", "False", "\n", "for", "batch_idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "if", "phase", "==", "'calib'", ":", "\n", "            ", "if", "batch_idx", "==", "getattr", "(", "FLAGS", ",", "'bn_calib_batch_num'", ",", "-", "1", ")", ":", "\n", "                ", "break", "\n", "", "", "if", "train", "and", "(", "batch_idx", ">=", "getattr", "(", "FLAGS", ",", "'finetune_iters'", ",", "\n", "float", "(", "'inf'", ")", ")", ")", ":", "\n", "            ", "if", "getattr", "(", "FLAGS", ",", "'finetune_iters'", ",", "float", "(", "'inf'", ")", ")", "==", "0", ":", "\n", "                ", "skip_print", "=", "True", "\n", "", "break", "\n", "", "if", "not", "getattr", "(", "FLAGS", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "if", "train", ":", "\n", "            ", "if", "FLAGS", ".", "lr_scheduler", "==", "'linear_decaying'", ":", "\n", "                ", "linear_decaying_per_step", "=", "(", "FLAGS", ".", "lr", "/", "FLAGS", ".", "num_epochs", "/", "\n", "len", "(", "loader", ".", "dataset", ")", "*", "\n", "FLAGS", ".", "batch_size", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "-=", "linear_decaying_per_step", "\n", "# For PyTorch 1.1+, comment the following two line", "\n", "#if FLAGS.lr_scheduler in ['exp_decaying_iter', 'gaussian_iter', 'cos_annealing_iter', 'butterworth_iter', 'mixed_iter', 'multistep_iter']:", "\n", "#    scheduler.step()", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "forward_loss", "(", "model", ",", "\n", "criterion", ",", "\n", "input", ",", "\n", "target", ",", "\n", "meters", ",", "\n", "train", "=", "True", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'distributed'", ",", "False", ")", "and", "getattr", "(", "\n", "FLAGS", ",", "'distributed_all_reduce'", ",", "False", ")", ":", "\n", "                ", "allreduce_grads", "(", "model", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "# For PyTorch 1.0 or earlier, comment the following two lines", "\n", "if", "FLAGS", ".", "lr_scheduler", "in", "[", "\n", "'exp_decaying_iter'", ",", "'cos_annealing_iter'", ",", "'multistep_iter'", "\n", "]", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "", "else", ":", "#not train", "\n", "            ", "forward_loss", "(", "model", ",", "criterion", ",", "input", ",", "target", ",", "meters", ")", "\n", "\n", "", "", "val_top1", "=", "None", "\n", "if", "is_master", "(", ")", "and", "meters", "is", "not", "None", "and", "not", "skip_print", ":", "\n", "        ", "results", "=", "flush_scalar_meters", "(", "meters", ")", "\n", "mprint", "(", "'{:.1f}s\\t{}\\t{}/{}: '", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t_start", ",", "phase", ",", "\n", "epoch", ",", "FLAGS", ".", "num_epochs", ")", "+", "\n", "', '", ".", "join", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ")", ")", "\n", "val_top1", "=", "results", "[", "'top1_error'", "]", "\n", "", "return", "val_top1", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.train_val_test": [[797, 1158], ["getattr", "fix_train.get_experiment_setting", "pytorchcv.model_provider.get_model", "getattr", "fix_train.data_transforms", "fix_train.dataset", "fix_train.data_loader", "os.path.join", "getattr", "getattr", "fix_train.get_optimizer", "getattr", "getattr", "os.path.exists", "getattr", "myutils.distributed.master_only_print", "getattr", "myutils.distributed.master_only_print", "range", "myutils.distributed.is_master", "myutils.distributed.init_dist", "getattr", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "fix_train.set_random_seed", "fix_train.set_random_seed", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.load", "torch.load", "getattr", "torch.nn.parallel.DistributedDataParallel.state_dict", "list", "model_wrapper.state_dict.update", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "myutils.distributed.master_only_print", "getattr", "getattr", "fix_train.ptcv_load", "getattr", "getattr", "fix_train.nvidia_load", "myutils.distributed.master_only_print", "torch.load", "torch.load", "getattr", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "myutils.distributed.master_only_print", "model.int_model().cpu.int_model().to", "getattr", "getattr", "model.int_model().cpu.apply", "model.int_model().cpu.int_model().cpu", "model.int_model().cpu.apply", "getattr", "myutils.distributed.master_only_print", "fix_train.get_meters", "myutils.distributed.is_master", "os.path.join", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "get_optimizer.load_state_dict", "myutils.distributed.master_only_print", "fix_train.get_meters", "fix_train.get_meters", "myutils.distributed.master_only_print", "getattr", "fix_train.get_meters", "myutils.distributed.master_only_print", "fix_train.run_one_epoch", "myutils.distributed.master_only_print", "myutils.distributed.is_master", "myutils.distributed.master_only_print", "fix_train.run_one_epoch", "myutils.distributed.master_only_print", "myutils.distributed.is_master", "model.int_model().cpu.named_modules", "getattr", "torch.distributed.is_initialized", "myutils.distributed.master_only_print", "time.sleep", "list", "list", "zip", "torch.load.keys", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "list", "list", "zip", "getattr", "getattr", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "os.makedirs", "os.makedirs", "os.path.join", "torch.save", "torch.save", "os.path.join", "myutils.export.onnx_export", "myutils.distributed.master_only_print", "getattr", "os.makedirs", "os.makedirs", "os.path.join", "torch.save", "torch.save", "os.path.join", "myutils.export.onnx_export", "myutils.distributed.master_only_print", "torch.no_grad", "torch.no_grad", "fix_train.run_one_epoch", "model.int_model().cpu.named_modules", "os.path.join", "fix_train.get_lr_scheduler", "fix_train.get_lr_scheduler", "fix_train.get_lr_scheduler", "fix_train.get_lr_scheduler", "os.makedirs", "val_meters[].cache", "torch.no_grad", "torch.no_grad", "fix_train.run_one_epoch", "val_meters[].cache", "torch.no_grad", "torch.no_grad", "fix_train.run_one_epoch", "torch.save", "torch.save", "get_lr_scheduler.step", "isinstance", "getattr", "getattr", "myutils.distributed.get_rank", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "type", "torch.nn.parallel.DistributedDataParallel.state_dict().keys", "torch.load.keys", "myutils.distributed.master_only_print", "model_wrapper.state_dict.keys", "myutils.distributed.master_only_print", "torch.load.pop", "type", "torch.nn.parallel.DistributedDataParallel.state_dict().keys", "torch.load.keys", "myutils.distributed.master_only_print", "model.int_model().cpu.int_model", "next", "myutils.distributed.AllReduceDistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "os.path.join", "os.path.join", "setattr", "model.int_model().cpu.int_model", "setattr", "os.path.join", "os.path.join", "isinstance", "len", "len", "len", "len", "torch.save", "torch.save", "myutils.distributed.master_only_print", "torch.save", "torch.save", "myutils.distributed.master_only_print", "os.path.join", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "isinstance", "getattr", "myutils.distributed.get_rank", "model.int_model().cpu.parameters", "model.int_model().cpu.cuda", "model.int_model().cpu.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "next", "next", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "isinstance", "os.path.join", "os.path.join", "torch.nn.parallel.DistributedDataParallel.state_dict", "get_optimizer.state_dict", "m.get_master_layer", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.nn.parallel.DistributedDataParallel.state_dict", "model.int_model().cpu.parameters", "model.int_model().cpu.parameters", "m.get_master_layer", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "myutils.distributed.master_only_print", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.nn.parallel.DistributedDataParallel.state_dict", "m.get_alpha", "m.get_weight_format", "m.get_input_format", "m.get_alpha", "m.get_weight_format", "m.get_input_format", "m.get_master_layer().get_alpha", "m.get_master_layer", "m.get_input_fraclen", "m.get_weight_fraclen", "m.get_master_layer().get_alpha", "m.get_master_layer", "m.get_input_fraclen", "m.get_weight_fraclen", "m.get_following_layer", "m.get_following_layer", "m.get_master_layer", "m.get_master_layer"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_experiment_setting", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_model", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.data_transforms", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.dataset", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.data_loader", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_optimizer", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.is_master", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.init_dist", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.set_random_seed", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.set_random_seed", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.ptcv_load", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.nvidia_load", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_meters", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.is_master", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_meters", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_meters", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_meters", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.run_one_epoch", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.is_master", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.run_one_epoch", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.is_master", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.export.onnx_export", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.export.onnx_export", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.run_one_epoch", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_lr_scheduler", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_lr_scheduler", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_lr_scheduler", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_lr_scheduler", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.cache", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.run_one_epoch", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.cache", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.run_one_epoch", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_rank", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.int_model", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.int_model", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_rank", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], ["", "@", "timing", "\n", "def", "train_val_test", "(", ")", ":", "\n", "    ", "\"\"\"train and val\"\"\"", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# init distributed", "\n", "if", "getattr", "(", "FLAGS", ",", "'distributed'", ",", "False", ")", ":", "\n", "        ", "gpu_id", "=", "init_dist", "(", "init_method", "=", "getattr", "(", "FLAGS", ",", "'dist_url'", ",", "None", ")", ")", "\n", "", "else", ":", "\n", "        ", "gpu_id", "=", "None", "\n", "# seed", "\n", "", "if", "getattr", "(", "FLAGS", ",", "'use_diff_seed'", ",", "\n", "False", ")", "and", "not", "getattr", "(", "FLAGS", ",", "'stoch_valid'", ",", "False", ")", ":", "\n", "        ", "mprint", "(", "'use diff seed is True'", ")", "\n", "while", "not", "is_initialized", "(", ")", ":", "\n", "            ", "mprint", "(", "'Waiting for initialization ...'", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "", "mprint", "(", "'Expected seed: {}'", ".", "format", "(", "\n", "getattr", "(", "FLAGS", ",", "'random_seed'", ",", "0", ")", "+", "get_rank", "(", ")", ")", ")", "\n", "set_random_seed", "(", "getattr", "(", "FLAGS", ",", "'random_seed'", ",", "0", ")", "+", "get_rank", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "set_random_seed", "(", ")", "\n", "\n", "# experiment setting", "\n", "", "experiment_setting", "=", "get_experiment_setting", "(", ")", "\n", "\n", "# model", "\n", "model", ",", "model_wrapper", "=", "get_model", "(", "gpu_id", "=", "gpu_id", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", ".", "cuda", "(", ")", "\n", "\n", "# data", "\n", "", "train_transforms", ",", "val_transforms", ",", "test_transforms", "=", "data_transforms", "(", ")", "\n", "train_set", ",", "val_set", ",", "test_set", "=", "dataset", "(", "train_transforms", ",", "val_transforms", ",", "\n", "test_transforms", ")", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "data_loader", "(", "\n", "train_set", ",", "val_set", ",", "test_set", ")", "\n", "\n", "log_dir", "=", "FLAGS", ".", "log_dir", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "experiment_setting", ")", "\n", "\n", "# full precision pretrained", "\n", "if", "getattr", "(", "FLAGS", ",", "'fp_pretrained_file'", ",", "''", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "FLAGS", ".", "fp_pretrained_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# update keys from external models", "\n", "if", "type", "(", "checkpoint", ")", "==", "dict", "and", "'model'", "in", "checkpoint", ":", "\n", "            ", "checkpoint", "=", "checkpoint", "[", "'model'", "]", "\n", "", "if", "getattr", "(", "FLAGS", ",", "'pretrained_model_remap_keys'", ",", "False", ")", ":", "\n", "            ", "new_checkpoint", "=", "{", "}", "\n", "new_keys", "=", "list", "(", "model_wrapper", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "old_keys", "=", "list", "(", "checkpoint", ".", "keys", "(", ")", ")", "\n", "for", "key_new", ",", "key_old", "in", "zip", "(", "new_keys", ",", "old_keys", ")", ":", "\n", "                ", "new_checkpoint", "[", "key_new", "]", "=", "checkpoint", "[", "key_old", "]", "\n", "mprint", "(", "'remap {} to {}'", ".", "format", "(", "key_new", ",", "key_old", ")", ")", "\n", "", "checkpoint", "=", "new_checkpoint", "\n", "", "model_dict", "=", "model_wrapper", ".", "state_dict", "(", ")", "\n", "for", "k", "in", "list", "(", "checkpoint", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "                ", "mprint", "(", "f'Pop out key {k} from checkpoint keys.'", ")", "\n", "checkpoint", ".", "pop", "(", "k", ")", "\n", "", "", "model_dict", ".", "update", "(", "checkpoint", ")", "\n", "model_wrapper", ".", "load_state_dict", "(", "model_dict", ")", "\n", "mprint", "(", "'Loaded full precision model {}.'", ".", "format", "(", "\n", "FLAGS", ".", "fp_pretrained_file", ")", ")", "\n", "\n", "", "if", "getattr", "(", "FLAGS", ",", "'ptcv_pretrained'", ",", "False", ")", "or", "getattr", "(", "\n", "FLAGS", ",", "'hawq_pretrained'", ",", "False", ")", ":", "\n", "        ", "ptcv_load", "(", "model", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'ptcv_pretrained'", ",", "False", ")", ":", "\n", "            ", "mprint", "(", "'Loaded ptcv pretrained model.'", ")", "\n", "", "if", "getattr", "(", "FLAGS", ",", "'hawq_pretrained'", ",", "False", ")", ":", "\n", "            ", "mprint", "(", "'Loaded hawq pretrained model.'", ")", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'nvidia_pretrained'", ",", "False", ")", ":", "\n", "        ", "nvidia_load", "(", "model", ")", "\n", "mprint", "(", "'Loaded nvidia pretrained model.'", ")", "\n", "\n", "# check pretrained", "\n", "", "if", "FLAGS", ".", "pretrained_file", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "FLAGS", ".", "pretrained_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# update keys from external models", "\n", "if", "type", "(", "checkpoint", ")", "==", "dict", "and", "'model'", "in", "checkpoint", ":", "\n", "            ", "checkpoint", "=", "checkpoint", "[", "'model'", "]", "\n", "", "if", "getattr", "(", "FLAGS", ",", "'pretrained_model_remap_keys'", ",", "False", ")", ":", "\n", "            ", "new_checkpoint", "=", "{", "}", "\n", "new_keys", "=", "list", "(", "model_wrapper", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "old_keys", "=", "list", "(", "checkpoint", ".", "keys", "(", ")", ")", "\n", "for", "key_new", ",", "key_old", "in", "zip", "(", "new_keys", ",", "old_keys", ")", ":", "\n", "                ", "new_checkpoint", "[", "key_new", "]", "=", "checkpoint", "[", "key_old", "]", "\n", "mprint", "(", "'remap {} to {}'", ".", "format", "(", "key_new", ",", "key_old", ")", ")", "\n", "", "checkpoint", "=", "new_checkpoint", "\n", "", "model_wrapper", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "mprint", "(", "'Loaded model {}.'", ".", "format", "(", "FLAGS", ".", "pretrained_file", ")", ")", "\n", "", "optimizer", "=", "get_optimizer", "(", "model_wrapper", ")", "\n", "\n", "if", "getattr", "(", "FLAGS", ",", "'integize'", ",", "False", ")", ":", "\n", "        ", "assert", "not", "getattr", "(", "FLAGS", ",", "'int_op_only'", ",", "False", ")", "\n", "model", "=", "model", ".", "int_model", "(", ")", ".", "to", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'distributed'", ",", "False", ")", ":", "\n", "            ", "if", "getattr", "(", "FLAGS", ",", "'distributed_all_reduce'", ",", "False", ")", ":", "\n", "                ", "model_wrapper", "=", "AllReduceDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "model_wrapper", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "[", "gpu_id", "]", ",", "\n", "gpu_id", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "model_wrapper", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "", "integize_file_path", "=", "getattr", "(", "FLAGS", ",", "'integize_file_path'", ",", "''", ")", "\n", "if", "integize_file_path", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "integize_file_path", ",", "'checkpoints'", ")", ",", "\n", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "integize_file_path", ",", "'onnx_files'", ")", ",", "\n", "exist_ok", "=", "True", ")", "\n", "", "if", "integize_file_path", ":", "\n", "            ", "integize_checkpoint", "=", "os", ".", "path", ".", "join", "(", "integize_file_path", ",", "\n", "'checkpoints'", ",", "\n", "'integized_model.pt'", ")", "\n", "torch", ".", "save", "(", "{", "'model'", ":", "model_wrapper", ".", "state_dict", "}", ",", "\n", "integize_checkpoint", ")", "\n", "integize_onnx_file", "=", "os", ".", "path", ".", "join", "(", "integize_file_path", ",", "'onnx_files'", ",", "\n", "'integized_model.onnx'", ")", "\n", "data_shape", "=", "[", "1", ",", "3", ",", "FLAGS", ".", "image_size", ",", "FLAGS", ".", "image_size", "]", "\n", "data_dtype", "=", "torch", ".", "float", "\n", "onnx_export", "(", "model", ",", "data_shape", ",", "data_dtype", ",", "\n", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ",", "integize_onnx_file", ")", "\n", "mprint", "(", "\n", "f'Integized model checkpoint and onnx file saved to {integize_file_path}.'", "\n", ")", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "        ", "assert", "not", "getattr", "(", "FLAGS", ",", "'integize'", ",", "False", ")", "\n", "model", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'int_op_only'", ",", "True", ")", ")", "\n", "model", "=", "model", ".", "int_model", "(", ")", ".", "cpu", "(", ")", "\n", "model", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'int_op_only'", ",", "True", ")", ")", "\n", "model_wrapper", "=", "model", "\n", "int_op_only_file_path", "=", "getattr", "(", "FLAGS", ",", "'int_op_only_file_path'", ",", "''", ")", "\n", "if", "int_op_only_file_path", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "int_op_only_file_path", ",", "'checkpoints'", ")", ",", "\n", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "int_op_only_file_path", ",", "'onnx_files'", ")", ",", "\n", "exist_ok", "=", "True", ")", "\n", "", "if", "int_op_only_file_path", ":", "\n", "            ", "int_op_only_checkpoint", "=", "os", ".", "path", ".", "join", "(", "int_op_only_file_path", ",", "\n", "'checkpoints'", ",", "\n", "'int_op_only_model.pt'", ")", "\n", "torch", ".", "save", "(", "{", "'model'", ":", "model_wrapper", ".", "state_dict", "}", ",", "\n", "int_op_only_checkpoint", ")", "\n", "int_op_only_onnx_file", "=", "os", ".", "path", ".", "join", "(", "int_op_only_file_path", ",", "\n", "'onnx_files'", ",", "\n", "'int_op_only_model.onnx'", ")", "\n", "data_shape", "=", "[", "1", ",", "3", ",", "FLAGS", ".", "image_size", ",", "FLAGS", ".", "image_size", "]", "\n", "data_dtype", "=", "torch", ".", "int", "\n", "onnx_export", "(", "model", ",", "data_shape", ",", "data_dtype", ",", "\n", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ",", "int_op_only_onnx_file", ")", "\n", "mprint", "(", "\n", "f'Integer operation only model checkpoint and onnx file saved to {int_op_only_file_path}.'", "\n", ")", "\n", "\n", "", "", "if", "FLAGS", ".", "test_only", "and", "(", "test_loader", "is", "not", "None", ")", ":", "\n", "        ", "mprint", "(", "'Start testing.'", ")", "\n", "test_meters", "=", "get_meters", "(", "'test'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "run_one_epoch", "(", "-", "1", ",", "\n", "test_loader", ",", "\n", "model_wrapper", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "test_meters", ",", "\n", "phase", "=", "'test'", ")", "\n", "", "if", "is_master", "(", ")", ":", "\n", "            ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "(", "ReLUClipFXQConvBN", ",", "ReLUClipFXQLinear", ")", ")", ":", "\n", "                    ", "mprint", "(", "f'layer name: {n}.'", ")", "\n", "mprint", "(", "f'alpha: {m.alpha}.'", ")", "\n", "if", "m", ".", "get_master_layer", "(", ")", "is", "not", "None", ":", "\n", "                        ", "mprint", "(", "\n", "f'master layer alpha: {m.get_master_layer().get_alpha()}.'", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "mprint", "(", "f'master layer: {m.get_master_layer()}.'", ")", "\n", "", "mprint", "(", "f'alpha in use: {m.get_alpha()}.'", ")", "\n", "mprint", "(", "f'weight format: {m.get_weight_format()}.'", ")", "\n", "mprint", "(", "f'input format: {m.get_input_format()}.'", ")", "\n", "mprint", "(", "f'fix scaling: {m.fix_scaling}.'", ")", "\n", "if", "isinstance", "(", "m", ",", "(", "ReLUClipFXQConvBN", ",", ")", ")", ":", "\n", "                        ", "mprint", "(", "\n", "f'following layer fix scaling: {m.get_following_layer().fix_scaling}.'", "\n", ")", "\n", "", "if", "m", ".", "format_from_metric", "or", "m", ".", "format_grid_search", ":", "\n", "                        ", "mprint", "(", "f'input_fraclen: {m.get_input_fraclen()}.'", ")", "\n", "mprint", "(", "f'weight_fraclen: {m.get_weight_fraclen()}.'", ")", "\n", "", "", "", "", "return", "\n", "\n", "# check resume training", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'latest_checkpoint.pt'", ")", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'latest_checkpoint.pt'", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model_wrapper", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "last_epoch", "=", "checkpoint", "[", "'last_epoch'", "]", "\n", "if", "FLAGS", ".", "lr_scheduler", "in", "[", "\n", "'exp_decaying_iter'", ",", "'cos_annealing_iter'", ",", "'multistep_iter'", "\n", "]", ":", "\n", "            ", "lr_scheduler", "=", "get_lr_scheduler", "(", "optimizer", ",", "len", "(", "train_loader", ")", ")", "\n", "lr_scheduler", ".", "last_epoch", "=", "last_epoch", "*", "len", "(", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "lr_scheduler", "=", "get_lr_scheduler", "(", "optimizer", ")", "\n", "lr_scheduler", ".", "last_epoch", "=", "last_epoch", "\n", "", "best_val", "=", "checkpoint", "[", "'best_val'", "]", "\n", "train_meters", ",", "val_meters", "=", "checkpoint", "[", "'meters'", "]", "\n", "mprint", "(", "'Loaded checkpoint {} at epoch {}.'", ".", "format", "(", "log_dir", ",", "last_epoch", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "FLAGS", ".", "lr_scheduler", "in", "[", "\n", "'exp_decaying_iter'", ",", "'cos_annealing_iter'", ",", "'multistep_iter'", "\n", "]", ":", "\n", "            ", "lr_scheduler", "=", "get_lr_scheduler", "(", "optimizer", ",", "len", "(", "train_loader", ")", ")", "\n", "", "else", ":", "\n", "            ", "lr_scheduler", "=", "get_lr_scheduler", "(", "optimizer", ")", "\n", "", "last_epoch", "=", "lr_scheduler", ".", "last_epoch", "\n", "best_val", "=", "1.", "\n", "train_meters", "=", "get_meters", "(", "'train'", ")", "\n", "val_meters", "=", "get_meters", "(", "'val'", ")", "\n", "# if start from scratch, print model", "\n", "mprint", "(", "model_wrapper", ")", "\n", "\n", "", "if", "getattr", "(", "FLAGS", ",", "'start_epoch'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "if", "FLAGS", ".", "lr_scheduler", "in", "[", "\n", "'exp_decaying_iter'", ",", "'cos_annealing_iter'", ",", "'multistep_iter'", "\n", "]", ":", "\n", "            ", "last_epoch", "=", "FLAGS", ".", "start_epoch", "\n", "lr_scheduler", ".", "last_epoch", "=", "FLAGS", ".", "start_epoch", "*", "len", "(", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "last_epoch", "=", "FLAGS", ".", "start_epoch", "\n", "lr_scheduler", ".", "last_epoch", "=", "FLAGS", ".", "start_epoch", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'log_dir'", ",", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "mprint", "(", "'log dir: '", ",", "log_dir", ")", "\n", "\n", "if", "getattr", "(", "FLAGS", ",", "'bn_calib_before_test'", ",", "False", ")", ":", "\n", "        ", "calib_meters", "=", "get_meters", "(", "'calib'", ")", "\n", "mprint", "(", "'Start calibration.'", ")", "\n", "run_one_epoch", "(", "-", "1", ",", "\n", "train_loader", ",", "\n", "model_wrapper", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "calib_meters", ",", "\n", "phase", "=", "'calib'", ")", "\n", "mprint", "(", "'Start validation after calibration.'", ")", "\n", "if", "val_meters", "is", "not", "None", ":", "\n", "            ", "val_meters", "[", "'best_val'", "]", ".", "cache", "(", "best_val", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "top1_error", "=", "run_one_epoch", "(", "-", "1", ",", "\n", "val_loader", ",", "\n", "model_wrapper", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "val_meters", ",", "\n", "phase", "=", "'val'", ")", "\n", "", "if", "is_master", "(", ")", ":", "\n", "            ", "if", "top1_error", "<", "best_val", ":", "\n", "                ", "best_val_cal", "=", "top1_error", "\n", "torch", ".", "save", "(", "{", "\n", "'model'", ":", "model_wrapper", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'best_model_bn_calibrated.pt'", ")", ")", "\n", "mprint", "(", "\n", "'New best validation top1 error after bn calibration: {:.3f}'", "\n", ".", "format", "(", "best_val_cal", ")", ")", "\n", "", "", "return", "\n", "\n", "", "mprint", "(", "'Start training.'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "last_epoch", ",", "FLAGS", ".", "num_epochs", ")", ":", "\n", "        ", "if", "FLAGS", ".", "lr_scheduler", "in", "[", "\n", "'exp_decaying_iter'", ",", "'cos_annealing_iter'", ",", "'multistep_iter'", "\n", "]", ":", "\n", "            ", "lr_sched", "=", "lr_scheduler", "\n", "", "else", ":", "\n", "            ", "lr_sched", "=", "None", "\n", "# For PyTorch 1.1+, comment the following line", "\n", "#lr_scheduler.step()", "\n", "# train", "\n", "", "mprint", "(", "' train '", ".", "center", "(", "40", ",", "'*'", ")", ")", "\n", "run_one_epoch", "(", "epoch", ",", "\n", "train_loader", ",", "\n", "model_wrapper", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "train_meters", ",", "\n", "phase", "=", "'train'", ",", "\n", "scheduler", "=", "lr_sched", ")", "\n", "\n", "# val", "\n", "mprint", "(", "' validation '", ".", "center", "(", "40", ",", "'~'", ")", ")", "\n", "if", "val_meters", "is", "not", "None", ":", "\n", "            ", "val_meters", "[", "'best_val'", "]", ".", "cache", "(", "best_val", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "top1_error", "=", "run_one_epoch", "(", "epoch", ",", "\n", "val_loader", ",", "\n", "model_wrapper", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "val_meters", ",", "\n", "phase", "=", "'val'", ")", "\n", "", "if", "is_master", "(", ")", ":", "\n", "            ", "if", "top1_error", "<", "best_val", ":", "\n", "                ", "best_val", "=", "top1_error", "\n", "torch", ".", "save", "(", "{", "\n", "'model'", ":", "model_wrapper", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'best_model.pt'", ")", ")", "\n", "mprint", "(", "\n", "'New best validation top1 error: {:.3f}'", ".", "format", "(", "best_val", ")", ")", "\n", "\n", "# save latest checkpoint", "\n", "", "torch", ".", "save", "(", "\n", "{", "\n", "'model'", ":", "model_wrapper", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'last_epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_val'", ":", "best_val", ",", "\n", "'meters'", ":", "(", "train_meters", ",", "val_meters", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'latest_checkpoint.pt'", ")", ")", "\n", "\n", "# For PyTorch 1.0 or earlier, comment the following two lines", "\n", "", "if", "FLAGS", ".", "lr_scheduler", "not", "in", "[", "\n", "'exp_decaying_iter'", ",", "'cos_annealing_iter'", ",", "'multistep_iter'", "\n", "]", "and", "epoch", "<", "FLAGS", ".", "num_epochs", "-", "1", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "if", "is_master", "(", ")", ":", "\n", "        ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "ReLUClipFXQConvBN", ",", "ReLUClipFXQLinear", ")", ")", ":", "\n", "                ", "mprint", "(", "f'layer name: {n}.'", ")", "\n", "mprint", "(", "f'alpha: {m.alpha}.'", ")", "\n", "if", "m", ".", "get_master_layer", "(", ")", "is", "not", "None", ":", "\n", "                    ", "mprint", "(", "\n", "f'master layer alpha: {m.get_master_layer().get_alpha()}.'", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "mprint", "(", "f'master layer: {m.get_master_layer()}.'", ")", "\n", "", "mprint", "(", "f'alpha in use: {m.get_alpha()}.'", ")", "\n", "mprint", "(", "f'weight format: {m.get_weight_format()}.'", ")", "\n", "mprint", "(", "f'input format: {m.get_input_format()}.'", ")", "\n", "mprint", "(", "f'fix scaling: {m.fix_scaling}.'", ")", "\n", "if", "isinstance", "(", "m", ",", "(", "ReLUClipFXQConvBN", ",", ")", ")", ":", "\n", "                    ", "mprint", "(", "\n", "f'following layer fix scaling: {m.get_following_layer().fix_scaling}.'", "\n", ")", "\n", "", "if", "m", ".", "format_from_metric", "or", "m", ".", "format_grid_search", ":", "\n", "                    ", "mprint", "(", "f'input_fraclen: {m.get_input_fraclen()}.'", ")", "\n", "mprint", "(", "f'weight_fraclen: {m.get_weight_fraclen()}.'", ")", "\n", "", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.init_multiprocessing": [[1160, 1165], ["torch.multiprocessing.set_start_method"], "function", ["None"], ["", "def", "init_multiprocessing", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "multiprocessing", ".", "set_start_method", "(", "'fork'", ")", "\n", "", "except", "RuntimeError", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.main": [[1167, 1171], ["fix_train.init_multiprocessing", "fix_train.train_val_test"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.init_multiprocessing", "home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.train_val_test"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"train and eval model\"\"\"", "\n", "init_multiprocessing", "(", ")", "\n", "train_val_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.error_analysis.fixed_quant_analysis.fix_quant": [[8, 27], ["res.round_", "res.div_", "type", "type", "res.clamp_", "res.clamp_"], "function", ["None"], ["def", "fix_quant", "(", "input", ",", "wl", "=", "8", ",", "fl", "=", "0", ",", "signed", "=", "True", ")", ":", "\n", "    ", "assert", "wl", ">=", "0", "\n", "assert", "fl", ">=", "0", "\n", "if", "signed", ":", "\n", "        ", "assert", "fl", "<=", "wl", "-", "1", "\n", "", "else", ":", "\n", "        ", "assert", "fl", "<=", "wl", "\n", "", "assert", "type", "(", "wl", ")", "==", "int", "\n", "assert", "type", "(", "fl", ")", "==", "int", "\n", "res", "=", "input", "*", "(", "2", "**", "fl", ")", "\n", "res", ".", "round_", "(", ")", "\n", "if", "signed", ":", "\n", "        ", "bound", "=", "2", "**", "(", "wl", "-", "1", ")", "-", "1", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "-", "bound", ")", "\n", "", "else", ":", "\n", "        ", "bound", "=", "2", "**", "wl", "-", "1", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "0", ")", "\n", "", "res", ".", "div_", "(", "2", "**", "fl", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.error_analysis.fixed_quant_analysis.main": [[29, 344], ["numpy.logspace", "list", "numpy.array", "numpy.array", "max", "matplotlib.figure", "enumerate", "matplotlib.gca().annotate", "matplotlib.gca().annotate", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.setp", "matplotlib.setp", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "matplotlib.figure", "matplotlib.semilogy", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.setp", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "matplotlib.subplots", "ax1.semilogx", "matplotlib.patches.Ellipse", "matplotlib.patches.FancyArrowPatch", "ax1.set_xlabel", "ax1.set_ylabel", "ax1.yaxis.label.set_color", "ax1.tick_params", "matplotlib.setp", "matplotlib.setp", "ax1.twinx", "ax1.twinx.semilogx", "matplotlib.patches.Ellipse", "matplotlib.patches.FancyArrowPatch", "ax1.twinx.set_ylabel", "ax1.twinx.yaxis.label.set_color", "ax1.twinx.tick_params", "matplotlib.setp", "matplotlib.setp", "ax1.legend", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "numpy.stack", "numpy.savetxt", "numpy.array", "matplotlib.figure", "matplotlib.scatter", "numpy.around", "matplotlib.plot", "matplotlib.text", "matplotlib.text", "matplotlib.gca().set_yscale", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.setp", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "range", "numpy.argmin", "np.array.append", "opt_err.append", "np.array.append", "matplotlib.semilogx", "numpy.argmin", "opt_sigma.append", "matplotlib.scatter", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "ax1.get_xticklabels", "ax1.get_yticklabels", "ax1.twinx.get_xticklabels", "ax1.twinx.get_yticklabels", "l.get_label", "sigma_th_list.append", "numpy.mean", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "torch.randn", "torch.relu", "fixed_quant_analysis.fix_quant", "w_quant_err_fl.append", "numpy.nonzero", "matplotlib.gca", "dict", "matplotlib.gca", "dict", "numpy.array", "numpy.array", "numpy.array", "matplotlib.gca", "int", "numpy.mean", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "numpy.nonzero", "numpy.array", "numpy.log2", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "max", "matplotlib.ylim", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "main", "(", ")", ":", "\n", "    ", "fl_cmap", "=", "{", "\n", "0", ":", "[", "0.2", ",", "0.2", ",", "0.2", "]", ",", "\n", "1", ":", "[", "155", "/", "255", ",", "221", "/", "255", ",", "239", "/", "255", "]", ",", "\n", "2", ":", "[", "255", "/", "255", ",", "102", "/", "255", ",", "153", "/", "255", "]", ",", "\n", "3", ":", "[", "189", "/", "255", ",", "146", "/", "255", ",", "222", "/", "255", "]", ",", "\n", "4", ":", "[", "75", "/", "255", ",", "148", "/", "255", ",", "255", "/", "255", "]", ",", "\n", "5", ":", "[", "199", "/", "255", ",", "225", "/", "255", ",", "181", "/", "255", "]", ",", "\n", "6", ":", "[", "241", "/", "255", ",", "245", "/", "255", ",", "161", "/", "255", "]", ",", "\n", "7", ":", "[", "255", "/", "255", ",", "133", "/", "255", ",", "133", "/", "255", "]", ",", "\n", "8", ":", "[", "40", "/", "255", ",", "240", "/", "255", ",", "128", "/", "255", "]", "\n", "}", "\n", "\n", "wl", "=", "8", "\n", "N", "=", "10000", "\n", "signed", "=", "True", "\n", "normalize", "=", "True", "\n", "\n", "fig_size", "=", "(", "6", ",", "4", ")", "\n", "axes_label_size", "=", "16", "\n", "text_size", "=", "12", "\n", "equation_text_size", "=", "20", "\n", "title_size", "=", "16", "\n", "legend_size", "=", "8", "\n", "font_weight", "=", "'normal'", "\n", "\n", "sigma_list", "=", "np", ".", "logspace", "(", "-", "3", ",", "3", ",", "1000", ")", "\n", "title_dict", "=", "{", "0", ":", "'Unsigned (Rectified Gaussian)'", ",", "1", ":", "'Signed (Gaussian)'", "}", "\n", "for", "wl", "in", "[", "8", "]", ":", "\n", "        ", "for", "signed", "in", "[", "True", ",", "False", "]", ":", "\n", "            ", "fl_list", "=", "list", "(", "range", "(", "wl", "+", "1", "-", "int", "(", "signed", ")", ")", ")", "\n", "w_quant_err_sigma", "=", "[", "]", "\n", "opt_fl", "=", "[", "]", "\n", "opt_err", "=", "[", "]", "\n", "for", "sigma", "in", "sigma_list", ":", "\n", "                ", "w_quant_err_fl", "=", "[", "]", "\n", "w_rand", "=", "torch", ".", "randn", "(", "N", ")", "*", "sigma", "\n", "if", "not", "signed", ":", "\n", "                    ", "w_rand", "=", "torch", ".", "relu", "(", "w_rand", ")", "\n", "", "for", "fl", "in", "fl_list", ":", "\n", "                    ", "w_quant", "=", "fix_quant", "(", "w_rand", ",", "wl", ",", "fl", ",", "signed", ")", "\n", "error", "=", "np", ".", "mean", "(", "(", "w_rand", "-", "w_quant", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "**", "2", ")", "**", "0.5", "\n", "if", "normalize", ":", "\n", "                        ", "error", "=", "error", "/", "sigma", "\n", "", "w_quant_err_fl", ".", "append", "(", "error", ")", "\n", "", "err_min_idx", "=", "np", ".", "argmin", "(", "w_quant_err_fl", ")", "\n", "opt_fl", ".", "append", "(", "fl_list", "[", "err_min_idx", "]", ")", "\n", "opt_err", ".", "append", "(", "w_quant_err_fl", "[", "err_min_idx", "]", ")", "\n", "w_quant_err_sigma", ".", "append", "(", "w_quant_err_fl", ")", "\n", "", "w_quant_err_sigma", "=", "np", ".", "array", "(", "w_quant_err_sigma", ")", "\n", "\n", "## replace the first zeros by the max", "\n", "opt_fl", "=", "np", ".", "array", "(", "opt_fl", ")", "\n", "idx_last_max", "=", "np", ".", "nonzero", "(", "opt_fl", "==", "max", "(", "fl_list", ")", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "mask_to_change", "=", "opt_fl", "[", ":", "idx_last_max", "]", "==", "0", "\n", "opt_fl", "[", ":", "idx_last_max", "]", "[", "mask_to_change", "]", "=", "max", "(", "fl_list", ")", "\n", "\n", "## sigma", "\n", "opt_sigma", "=", "[", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "for", "idx", ",", "fl", "in", "enumerate", "(", "fl_list", ")", ":", "\n", "                ", "plt", ".", "semilogx", "(", "sigma_list", ",", "\n", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ",", "\n", "label", "=", "f'FL={fl}'", ",", "\n", "c", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "lw", "=", "2", ")", "\n", "local_min", "=", "np", ".", "argmin", "(", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ")", "\n", "opt_sigma", ".", "append", "(", "sigma_list", "[", "local_min", "]", ")", "\n", "plt", ".", "scatter", "(", "sigma_list", "[", "local_min", "]", ",", "\n", "w_quant_err_sigma", "[", "local_min", ",", "idx", "]", ",", "\n", "color", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "marker", "=", "'*'", ",", "\n", "s", "=", "60", ")", "\n", "", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Overflow'", ",", "\n", "fontsize", "=", "text_size", ",", "\n", "fontweight", "=", "font_weight", ",", "\n", "xy", "=", "(", "0.55", ",", "0.87", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.65", ",", "0.86", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Underflow'", ",", "\n", "fontsize", "=", "text_size", ",", "\n", "fontweight", "=", "font_weight", ",", "\n", "xy", "=", "(", "0.55", ",", "0.87", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.32", ",", "0.86", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "legend", "(", "ncol", "=", "1", ",", "\n", "loc", "=", "'lower right'", ",", "\n", "prop", "=", "{", "\n", "'size'", ":", "legend_size", ",", "\n", "'weight'", ":", "font_weight", "\n", "}", ")", "\n", "plt", ".", "xlabel", "(", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylabel", "(", "'Relative Error'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylim", "(", "top", "=", "plt", ".", "ylim", "(", ")", "[", "1", "]", "*", "1.02", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ",", "top", "=", "0.9", ",", "left", "=", "0.15", ",", "right", "=", "0.95", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./std_fix_quant_error_analysis_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "semilogy", "(", "fl_list", ",", "\n", "opt_sigma", ",", "\n", "color", "=", "'b'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "marker", "=", "'o'", ",", "\n", "markersize", "=", "8", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length (FL)'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylabel", "(", "'Optimal '", "+", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ",", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ",", "top", "=", "0.9", ",", "left", "=", "0.15", ",", "right", "=", "0.95", ")", "\n", "plt", ".", "savefig", "(", "f'./std_opt_sigma_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "ax1_color", "=", "'b'", "\n", "ax2_color", "=", "'r'", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "fig_size", ")", "\n", "lns1", "=", "ax1", ".", "semilogx", "(", "sigma_list", ",", "\n", "opt_fl", ",", "\n", "color", "=", "ax1_color", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'-'", ",", "\n", "label", "=", "'Opt. Frac. Len.'", ")", "\n", "if", "signed", ":", "\n", "                ", "ell1_x", "=", "0.84", "\n", "", "else", ":", "\n", "                ", "ell1_x", "=", "0.88", "\n", "", "ellipse1", "=", "Ellipse", "(", "xy", "=", "(", "ell1_x", ",", "0.5", ")", ",", "\n", "width", "=", "0.04", ",", "\n", "height", "=", "0.12", ",", "\n", "edgecolor", "=", "ax1_color", ",", "\n", "fc", "=", "'None'", ",", "\n", "lw", "=", "2", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "arrow_connectionstyle", "=", "\"arc3,rad=.2\"", "\n", "arrow_style", "=", "\"Simple, tail_width=0.5, head_width=4, head_length=8\"", "\n", "arr1", "=", "FancyArrowPatch", "(", "(", "ell1_x", ",", "0.5", "-", "0.058", ")", ",", "\n", "(", "ell1_x", "+", "0.04", "*", "2.5", ",", "0.5", "-", "0.06", "*", "1.8", ")", ",", "\n", "connectionstyle", "=", "arrow_connectionstyle", ",", "\n", "arrowstyle", "=", "arrow_style", ",", "\n", "color", "=", "ax1_color", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "ax1", ".", "set_xlabel", "(", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Opt. Frac. Len. ('", "+", "r'$\\mathrm{FL}^*$'", "+", "')'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "ax1", ".", "yaxis", ".", "label", ".", "set_color", "(", "ax1_color", ")", "\n", "ax1", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "ax1_color", ")", "\n", "plt", ".", "setp", "(", "ax1", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "ax1", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "lns2", "=", "ax2", ".", "semilogx", "(", "sigma_list", ",", "\n", "opt_err", ",", "\n", "color", "=", "ax2_color", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'-'", ",", "\n", "label", "=", "'Min. Rel. Err.'", ")", "\n", "if", "signed", ":", "\n", "                ", "ell2_x", "=", "0.3", "\n", "", "else", ":", "\n", "                ", "ell2_x", "=", "0.3", "\n", "", "ellipse2", "=", "Ellipse", "(", "xy", "=", "(", "ell2_x", ",", "0.93", ")", ",", "\n", "width", "=", "0.04", ",", "\n", "height", "=", "0.12", ",", "\n", "edgecolor", "=", "ax2_color", ",", "\n", "fc", "=", "'None'", ",", "\n", "lw", "=", "2", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "arrow_connectionstyle", "=", "\"arc3,rad=-.2\"", "\n", "arrow_style", "=", "\"Simple, tail_width=0.5, head_width=4, head_length=8\"", "\n", "arr2", "=", "FancyArrowPatch", "(", "(", "ell2_x", ",", "0.93", "-", "0.058", ")", ",", "\n", "(", "ell2_x", "-", "0.04", "*", "2.5", ",", "0.93", "-", "0.06", "*", "1.8", ")", ",", "\n", "connectionstyle", "=", "arrow_connectionstyle", ",", "\n", "arrowstyle", "=", "arrow_style", ",", "\n", "color", "=", "ax2_color", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Minimum Relative Error'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "ax2", ".", "yaxis", ".", "label", ".", "set_color", "(", "ax2_color", ")", "\n", "ax2", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "ax2_color", ")", "\n", "plt", ".", "setp", "(", "ax2", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "ax2", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "leg", "=", "lns1", "+", "lns2", "\n", "labs", "=", "[", "l", ".", "get_label", "(", ")", "for", "l", "in", "leg", "]", "\n", "ax1", ".", "legend", "(", "leg", ",", "\n", "labs", ",", "\n", "ncol", "=", "2", ",", "\n", "loc", "=", "'upper center'", ",", "\n", "prop", "=", "{", "'size'", ":", "axes_label_size", "*", "0.75", "}", ",", "\n", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.25", ")", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ",", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.27", ",", "top", "=", "0.9", ",", "left", "=", "0.1", ",", "right", "=", "0.87", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./std_opt_fl_and_err_vs_sigma_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "all_result", "=", "np", ".", "stack", "(", "\n", "[", "np", ".", "array", "(", "sigma_list", ")", ",", "\n", "np", ".", "array", "(", "opt_err", ")", ",", "\n", "np", ".", "array", "(", "opt_fl", ")", "]", ",", "\n", "axis", "=", "1", ")", "\n", "np", ".", "savetxt", "(", "\n", "f'./all_results_{wl}bit_signed_{signed}.txt'", ",", "\n", "all_result", ",", "\n", "header", "=", "f'signed={signed}\\nsigma\\tmae\\trms\\topt err\\t opt fl'", ")", "\n", "\n", "## threshold plot", "\n", "fl_list", "=", "np", ".", "array", "(", "fl_list", ")", "\n", "sigma_th_list", "=", "[", "]", "\n", "for", "fl", "in", "fl_list", "[", "1", ":", "]", ":", "\n", "                ", "threshold_idx", "=", "np", ".", "nonzero", "(", "opt_fl", "==", "fl", "-", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "sigma_th_list", ".", "append", "(", "sigma_list", "[", "threshold_idx", "]", ")", "\n", "## sigma", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "scatter", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "sigma_th_list", ",", "\n", "color", "=", "'b'", ",", "\n", "marker", "=", "'o'", ",", "\n", "s", "=", "24", ",", "\n", "label", "=", "'Empirical'", ")", "\n", "coeff", "=", "2", "**", "np", ".", "mean", "(", "np", ".", "array", "(", "fl_list", "[", "1", ":", "]", ")", "+", "np", ".", "log2", "(", "sigma_th_list", ")", ")", "\n", "coeff", "=", "np", ".", "around", "(", "coeff", ",", "2", ")", "\n", "plt", ".", "plot", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "coeff", "/", "2", "**", "fl_list", "[", "1", ":", "]", ",", "\n", "color", "=", "'r'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "label", "=", "'Linear Fitting'", ")", "\n", "plt", ".", "text", "(", "0.2", ",", "\n", "0.3", ",", "\n", "r'$\\sigma=$'", ".", "format", "(", "coeff", ",", "'fl'", ")", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ",", "\n", "fontsize", "=", "equation_text_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "text", "(", "0.31", ",", "\n", "0.3", ",", "\n", "r'$\\frac{{{}}}{{2^\\mathrm{{{}}}}}$'", ".", "format", "(", "coeff", ",", "'FL'", ")", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ",", "\n", "fontsize", "=", "equation_text_size", "*", "1.2", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "legend", "(", "ncol", "=", "2", ",", "\n", "loc", "=", "'upper center'", ",", "\n", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.25", ")", ",", "\n", "prop", "=", "{", "\n", "'weight'", ":", "font_weight", ",", "\n", "'size'", ":", "legend_size", "*", "1.5", "\n", "}", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length (FL)'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylabel", "(", "'Threshold '", "+", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ",", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.27", ",", "top", "=", "0.9", ",", "left", "=", "0.15", ",", "right", "=", "0.95", ")", "\n", "plt", ".", "savefig", "(", "f'./sigma_threshold_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.error_analysis.fixed_quant_analysis_all_metrics.fix_quant": [[8, 27], ["res.round_", "res.div_", "type", "type", "res.clamp_", "res.clamp_"], "function", ["None"], ["def", "fix_quant", "(", "input", ",", "wl", "=", "8", ",", "fl", "=", "0", ",", "signed", "=", "True", ")", ":", "\n", "    ", "assert", "wl", ">=", "0", "\n", "assert", "fl", ">=", "0", "\n", "if", "signed", ":", "\n", "        ", "assert", "fl", "<=", "wl", "-", "1", "\n", "", "else", ":", "\n", "        ", "assert", "fl", "<=", "wl", "\n", "", "assert", "type", "(", "wl", ")", "==", "int", "\n", "assert", "type", "(", "fl", ")", "==", "int", "\n", "res", "=", "input", "*", "(", "2", "**", "fl", ")", "\n", "res", ".", "round_", "(", ")", "\n", "if", "signed", ":", "\n", "        ", "bound", "=", "2", "**", "(", "wl", "-", "1", ")", "-", "1", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "-", "bound", ")", "\n", "", "else", ":", "\n", "        ", "bound", "=", "2", "**", "wl", "-", "1", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "0", ")", "\n", "", "res", ".", "div_", "(", "2", "**", "fl", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.error_analysis.fixed_quant_analysis_all_metrics.main": [[29, 570], ["numpy.logspace", "list", "numpy.array", "numpy.array", "max", "matplotlib.figure", "enumerate", "matplotlib.gca().annotate", "matplotlib.gca().annotate", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.setp", "matplotlib.setp", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "matplotlib.figure", "matplotlib.semilogy", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.setp", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "matplotlib.subplots", "ax1.semilogx", "matplotlib.patches.Ellipse", "matplotlib.patches.FancyArrowPatch", "ax1.set_xlabel", "ax1.set_ylabel", "ax1.yaxis.label.set_color", "ax1.tick_params", "matplotlib.setp", "matplotlib.setp", "ax1.twinx", "ax1.twinx.semilogx", "matplotlib.patches.Ellipse", "matplotlib.patches.FancyArrowPatch", "ax1.twinx.set_ylabel", "ax1.twinx.yaxis.label.set_color", "ax1.twinx.tick_params", "matplotlib.setp", "matplotlib.setp", "ax1.legend", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "matplotlib.figure", "enumerate", "matplotlib.gca().annotate", "matplotlib.gca().annotate", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "matplotlib.figure", "matplotlib.semilogy", "matplotlib.xlabel", "matplotlib.ylabel", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "matplotlib.subplots", "ax1.semilogx", "ax1.set_xlabel", "ax1.set_ylabel", "ax1.tick_params", "ax1.twinx", "ax1.twinx.semilogx", "ax1.twinx.set_ylabel", "ax1.twinx.tick_params", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "matplotlib.figure", "enumerate", "matplotlib.gca().annotate", "matplotlib.gca().annotate", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "matplotlib.figure", "matplotlib.semilogy", "matplotlib.xlabel", "matplotlib.ylabel", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "matplotlib.subplots", "ax1.semilogx", "ax1.set_xlabel", "ax1.set_ylabel", "ax1.tick_params", "ax1.twinx", "ax1.twinx.semilogx", "ax1.twinx.set_ylabel", "ax1.twinx.tick_params", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "numpy.stack", "numpy.savetxt", "numpy.array", "matplotlib.figure", "matplotlib.scatter", "numpy.around", "matplotlib.plot", "matplotlib.text", "matplotlib.text", "matplotlib.gca().set_yscale", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.setp", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.subplots_adjust", "matplotlib.savefig", "matplotlib.figure", "matplotlib.scatter", "numpy.around", "matplotlib.plot", "matplotlib.text", "matplotlib.gca().set_yscale", "matplotlib.xlabel", "matplotlib.ylabel", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "matplotlib.figure", "matplotlib.scatter", "numpy.around", "matplotlib.plot", "matplotlib.text", "matplotlib.gca().set_yscale", "matplotlib.xlabel", "matplotlib.ylabel", "title_dict[].split", "title_dict[].split.insert", "matplotlib.title", "matplotlib.savefig", "range", "torch.mean", "mae_list.append", "rms_list.append", "numpy.argmin", "np.array.append", "opt_err.append", "np.array.append", "matplotlib.semilogx", "numpy.argmin", "opt_sigma.append", "matplotlib.scatter", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "ax1.get_xticklabels", "ax1.get_yticklabels", "ax1.twinx.get_xticklabels", "ax1.twinx.get_yticklabels", "l.get_label", "matplotlib.semilogx", "numpy.argmin", "opt_mae.append", "matplotlib.scatter", "matplotlib.semilogx", "numpy.argmin", "opt_rms.append", "matplotlib.scatter", "sigma_th_list.append", "mae_th_list.append", "rms_th_list.append", "numpy.mean", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "numpy.mean", "numpy.mean", "torch.randn", "torch.relu", "torch.abs", "torch.mean", "fixed_quant_analysis_all_metrics.fix_quant", "w_quant_err_fl.append", "numpy.nonzero", "matplotlib.gca", "dict", "matplotlib.gca", "dict", "matplotlib.gca", "dict", "matplotlib.gca", "dict", "matplotlib.gca", "dict", "matplotlib.gca", "dict", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "int", "numpy.mean", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "numpy.nonzero", "numpy.array", "numpy.log2", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "numpy.array", "numpy.log2", "matplotlib.gca", "numpy.array", "numpy.log2", "matplotlib.gca", "max", "matplotlib.ylim", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "main", "(", ")", ":", "\n", "    ", "fl_cmap", "=", "{", "\n", "0", ":", "[", "0.2", ",", "0.2", ",", "0.2", "]", ",", "\n", "1", ":", "[", "155", "/", "255", ",", "221", "/", "255", ",", "239", "/", "255", "]", ",", "\n", "2", ":", "[", "255", "/", "255", ",", "102", "/", "255", ",", "153", "/", "255", "]", ",", "\n", "3", ":", "[", "189", "/", "255", ",", "146", "/", "255", ",", "222", "/", "255", "]", ",", "\n", "4", ":", "[", "75", "/", "255", ",", "148", "/", "255", ",", "255", "/", "255", "]", ",", "\n", "5", ":", "[", "199", "/", "255", ",", "225", "/", "255", ",", "181", "/", "255", "]", ",", "\n", "6", ":", "[", "241", "/", "255", ",", "245", "/", "255", ",", "161", "/", "255", "]", ",", "\n", "7", ":", "[", "255", "/", "255", ",", "133", "/", "255", ",", "133", "/", "255", "]", ",", "\n", "8", ":", "[", "40", "/", "255", ",", "240", "/", "255", ",", "128", "/", "255", "]", "\n", "}", "\n", "\n", "wl", "=", "8", "\n", "N", "=", "10000", "\n", "signed", "=", "True", "\n", "normalize", "=", "True", "\n", "\n", "fig_size", "=", "(", "6", ",", "4", ")", "\n", "axes_label_size", "=", "16", "\n", "text_size", "=", "12", "\n", "equation_text_size", "=", "20", "\n", "title_size", "=", "16", "\n", "legend_size", "=", "8", "\n", "font_weight", "=", "'normal'", "\n", "\n", "sigma_list", "=", "np", ".", "logspace", "(", "-", "3", ",", "3", ",", "1000", ")", "\n", "title_dict", "=", "{", "0", ":", "'Unsigned (Rectified Gaussian)'", ",", "1", ":", "'Signed (Gaussian)'", "}", "\n", "for", "wl", "in", "[", "8", "]", ":", "\n", "        ", "for", "signed", "in", "[", "True", ",", "False", "]", ":", "\n", "            ", "fl_list", "=", "list", "(", "range", "(", "wl", "+", "1", "-", "int", "(", "signed", ")", ")", ")", "\n", "w_quant_err_sigma", "=", "[", "]", "\n", "opt_fl", "=", "[", "]", "\n", "opt_err", "=", "[", "]", "\n", "mae_list", "=", "[", "]", "\n", "rms_list", "=", "[", "]", "\n", "for", "sigma", "in", "sigma_list", ":", "\n", "                ", "w_quant_err_fl", "=", "[", "]", "\n", "std_ratio_list", "=", "[", "]", "\n", "rms_ratio_list", "=", "[", "]", "\n", "w_rand", "=", "torch", ".", "randn", "(", "N", ")", "*", "sigma", "\n", "if", "not", "signed", ":", "\n", "                    ", "w_rand", "=", "torch", ".", "relu", "(", "w_rand", ")", "\n", "", "mae", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "w_rand", ")", ")", "\n", "rms", "=", "torch", ".", "mean", "(", "w_rand", "**", "2", ")", "**", "0.5", "\n", "mae_list", ".", "append", "(", "mae", ")", "\n", "rms_list", ".", "append", "(", "rms", ")", "\n", "for", "fl", "in", "fl_list", ":", "\n", "                    ", "w_quant", "=", "fix_quant", "(", "w_rand", ",", "wl", ",", "fl", ",", "signed", ")", "\n", "error", "=", "np", ".", "mean", "(", "(", "w_rand", "-", "w_quant", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "**", "2", ")", "**", "0.5", "\n", "if", "normalize", ":", "\n", "                        ", "error", "=", "error", "/", "sigma", "\n", "", "w_quant_err_fl", ".", "append", "(", "error", ")", "\n", "", "err_min_idx", "=", "np", ".", "argmin", "(", "w_quant_err_fl", ")", "\n", "opt_fl", ".", "append", "(", "fl_list", "[", "err_min_idx", "]", ")", "\n", "opt_err", ".", "append", "(", "w_quant_err_fl", "[", "err_min_idx", "]", ")", "\n", "w_quant_err_sigma", ".", "append", "(", "w_quant_err_fl", ")", "\n", "", "w_quant_err_sigma", "=", "np", ".", "array", "(", "w_quant_err_sigma", ")", "\n", "\n", "## replace the first zeros by the max", "\n", "opt_fl", "=", "np", ".", "array", "(", "opt_fl", ")", "\n", "idx_last_max", "=", "np", ".", "nonzero", "(", "opt_fl", "==", "max", "(", "fl_list", ")", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "mask_to_change", "=", "opt_fl", "[", ":", "idx_last_max", "]", "==", "0", "\n", "opt_fl", "[", ":", "idx_last_max", "]", "[", "mask_to_change", "]", "=", "max", "(", "fl_list", ")", "\n", "\n", "## sigma", "\n", "opt_sigma", "=", "[", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "for", "idx", ",", "fl", "in", "enumerate", "(", "fl_list", ")", ":", "\n", "                ", "plt", ".", "semilogx", "(", "sigma_list", ",", "\n", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ",", "\n", "label", "=", "f'FL={fl}'", ",", "\n", "c", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "lw", "=", "2", ")", "\n", "local_min", "=", "np", ".", "argmin", "(", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ")", "\n", "opt_sigma", ".", "append", "(", "sigma_list", "[", "local_min", "]", ")", "\n", "plt", ".", "scatter", "(", "sigma_list", "[", "local_min", "]", ",", "\n", "w_quant_err_sigma", "[", "local_min", ",", "idx", "]", ",", "\n", "color", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "marker", "=", "'*'", ",", "\n", "s", "=", "60", ")", "\n", "", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Overflow'", ",", "\n", "fontsize", "=", "text_size", ",", "\n", "fontweight", "=", "font_weight", ",", "\n", "xy", "=", "(", "0.55", ",", "0.87", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.65", ",", "0.86", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Underflow'", ",", "\n", "fontsize", "=", "text_size", ",", "\n", "fontweight", "=", "font_weight", ",", "\n", "xy", "=", "(", "0.55", ",", "0.87", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.32", ",", "0.86", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "legend", "(", "ncol", "=", "1", ",", "\n", "loc", "=", "'lower right'", ",", "\n", "prop", "=", "{", "\n", "'size'", ":", "legend_size", ",", "\n", "'weight'", ":", "font_weight", "\n", "}", ")", "\n", "plt", ".", "xlabel", "(", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylabel", "(", "'Relative Error'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylim", "(", "top", "=", "plt", ".", "ylim", "(", ")", "[", "1", "]", "*", "1.02", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ",", "top", "=", "0.9", ",", "left", "=", "0.15", ",", "right", "=", "0.95", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./std_fix_quant_error_analysis_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "semilogy", "(", "fl_list", ",", "\n", "opt_sigma", ",", "\n", "color", "=", "'b'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "marker", "=", "'o'", ",", "\n", "markersize", "=", "8", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length (FL)'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylabel", "(", "'Optimal '", "+", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ",", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ",", "top", "=", "0.9", ",", "left", "=", "0.15", ",", "right", "=", "0.95", ")", "\n", "plt", ".", "savefig", "(", "f'./std_opt_sigma_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "ax1_color", "=", "'b'", "\n", "ax2_color", "=", "'r'", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "fig_size", ")", "\n", "lns1", "=", "ax1", ".", "semilogx", "(", "sigma_list", ",", "\n", "opt_fl", ",", "\n", "color", "=", "ax1_color", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'-'", ",", "\n", "label", "=", "'Opt. Frac. Len.'", ")", "\n", "if", "signed", ":", "\n", "                ", "ell1_x", "=", "0.84", "\n", "", "else", ":", "\n", "                ", "ell1_x", "=", "0.88", "\n", "", "ellipse1", "=", "Ellipse", "(", "xy", "=", "(", "ell1_x", ",", "0.5", ")", ",", "\n", "width", "=", "0.04", ",", "\n", "height", "=", "0.12", ",", "\n", "edgecolor", "=", "ax1_color", ",", "\n", "fc", "=", "'None'", ",", "\n", "lw", "=", "2", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "arrow_connectionstyle", "=", "\"arc3,rad=.2\"", "\n", "arrow_style", "=", "\"Simple, tail_width=0.5, head_width=4, head_length=8\"", "\n", "arr1", "=", "FancyArrowPatch", "(", "(", "ell1_x", ",", "0.5", "-", "0.058", ")", ",", "\n", "(", "ell1_x", "+", "0.04", "*", "2.5", ",", "0.5", "-", "0.06", "*", "1.8", ")", ",", "\n", "connectionstyle", "=", "arrow_connectionstyle", ",", "\n", "arrowstyle", "=", "arrow_style", ",", "\n", "color", "=", "ax1_color", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "ax1", ".", "set_xlabel", "(", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Opt. Frac. Len. ('", "+", "r'$\\mathrm{FL}^*$'", "+", "')'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "ax1", ".", "yaxis", ".", "label", ".", "set_color", "(", "ax1_color", ")", "\n", "ax1", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "ax1_color", ")", "\n", "plt", ".", "setp", "(", "ax1", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "ax1", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "lns2", "=", "ax2", ".", "semilogx", "(", "sigma_list", ",", "\n", "opt_err", ",", "\n", "color", "=", "ax2_color", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'-'", ",", "\n", "label", "=", "'Min. Rel. Err.'", ")", "\n", "if", "signed", ":", "\n", "                ", "ell2_x", "=", "0.3", "\n", "", "else", ":", "\n", "                ", "ell2_x", "=", "0.3", "\n", "", "ellipse2", "=", "Ellipse", "(", "xy", "=", "(", "ell2_x", ",", "0.93", ")", ",", "\n", "width", "=", "0.04", ",", "\n", "height", "=", "0.12", ",", "\n", "edgecolor", "=", "ax2_color", ",", "\n", "fc", "=", "'None'", ",", "\n", "lw", "=", "2", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "arrow_connectionstyle", "=", "\"arc3,rad=-.2\"", "\n", "arrow_style", "=", "\"Simple, tail_width=0.5, head_width=4, head_length=8\"", "\n", "arr2", "=", "FancyArrowPatch", "(", "(", "ell2_x", ",", "0.93", "-", "0.058", ")", ",", "\n", "(", "ell2_x", "-", "0.04", "*", "2.5", ",", "0.93", "-", "0.06", "*", "1.8", ")", ",", "\n", "connectionstyle", "=", "arrow_connectionstyle", ",", "\n", "arrowstyle", "=", "arrow_style", ",", "\n", "color", "=", "ax2_color", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Minimum Relative Error'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "ax2", ".", "yaxis", ".", "label", ".", "set_color", "(", "ax2_color", ")", "\n", "ax2", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "ax2_color", ")", "\n", "plt", ".", "setp", "(", "ax2", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "ax2", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "leg", "=", "lns1", "+", "lns2", "\n", "labs", "=", "[", "l", ".", "get_label", "(", ")", "for", "l", "in", "leg", "]", "\n", "ax1", ".", "legend", "(", "leg", ",", "\n", "labs", ",", "\n", "ncol", "=", "2", ",", "\n", "loc", "=", "'upper center'", ",", "\n", "prop", "=", "{", "'size'", ":", "axes_label_size", "*", "0.75", "}", ",", "\n", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.25", ")", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ",", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.27", ",", "top", "=", "0.9", ",", "left", "=", "0.1", ",", "right", "=", "0.87", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./std_opt_fl_and_err_vs_sigma_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "## mae", "\n", "opt_mae", "=", "[", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "for", "idx", ",", "fl", "in", "enumerate", "(", "fl_list", ")", ":", "\n", "                ", "plt", ".", "semilogx", "(", "mae_list", ",", "\n", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ",", "\n", "label", "=", "f'fl={fl}'", ",", "\n", "c", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "lw", "=", "2", ")", "\n", "local_min", "=", "np", ".", "argmin", "(", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ")", "\n", "opt_mae", ".", "append", "(", "mae_list", "[", "local_min", "]", ")", "\n", "plt", ".", "scatter", "(", "mae_list", "[", "local_min", "]", ",", "\n", "w_quant_err_sigma", "[", "local_min", ",", "idx", "]", ",", "\n", "color", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "marker", "=", "'*'", ",", "\n", "s", "=", "60", ")", "\n", "", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Overflow'", ",", "\n", "xy", "=", "(", "0.5", ",", "0.85", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.6", ",", "0.84", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Underflow'", ",", "\n", "xy", "=", "(", "0.5", ",", "0.85", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.27", ",", "0.84", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "legend", "(", "ncol", "=", "1", ",", "loc", "=", "'lower left'", ")", "\n", "plt", ".", "xlabel", "(", "r'$\\delta$'", ")", "\n", "plt", ".", "ylabel", "(", "'Relative Error'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./mae_fix_quant_error_analysis_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "plt", ".", "semilogy", "(", "fl_list", ",", "\n", "opt_mae", ",", "\n", "color", "=", "'b'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "marker", "=", "'o'", ",", "\n", "markersize", "=", "8", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length'", ")", "\n", "plt", ".", "ylabel", "(", "'Optimal '", "+", "r'$\\delta$'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "f'./mae_opt_delta_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "ax1", ".", "semilogx", "(", "mae_list", ",", "opt_fl", ",", "color", "=", "'b'", ",", "lw", "=", "2", ",", "ls", "=", "'-'", ")", "\n", "ax1", ".", "set_xlabel", "(", "r'$\\delta$'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Optimal Fractional Length'", ")", "\n", "ax1", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "'b'", ")", "\n", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "ax2", ".", "semilogx", "(", "mae_list", ",", "opt_err", ",", "color", "=", "'r'", ",", "lw", "=", "2", ",", "ls", "=", "'-'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Minimum Relative Error'", ")", "\n", "ax2", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "'r'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./mae_opt_fl_and_err_vs_mae_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "## rms", "\n", "opt_rms", "=", "[", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "for", "idx", ",", "fl", "in", "enumerate", "(", "fl_list", ")", ":", "\n", "                ", "plt", ".", "semilogx", "(", "rms_list", ",", "\n", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ",", "\n", "label", "=", "f'fl={fl}'", ",", "\n", "c", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "lw", "=", "2", ")", "\n", "local_min", "=", "np", ".", "argmin", "(", "w_quant_err_sigma", "[", ":", ",", "idx", "]", ")", "\n", "opt_rms", ".", "append", "(", "rms_list", "[", "local_min", "]", ")", "\n", "plt", ".", "scatter", "(", "rms_list", "[", "local_min", "]", ",", "\n", "w_quant_err_sigma", "[", "local_min", ",", "idx", "]", ",", "\n", "color", "=", "fl_cmap", "[", "fl", "]", ",", "\n", "marker", "=", "'*'", ",", "\n", "s", "=", "60", ")", "\n", "", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Overflow'", ",", "\n", "xy", "=", "(", "0.5", ",", "0.85", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.6", ",", "0.84", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "gca", "(", ")", ".", "annotate", "(", "'Underflow'", ",", "\n", "xy", "=", "(", "0.5", ",", "0.85", ")", ",", "\n", "xycoords", "=", "'figure fraction'", ",", "\n", "xytext", "=", "(", "0.27", ",", "0.84", ")", ",", "\n", "textcoords", "=", "'figure fraction'", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"<-\"", ",", "\n", "connectionstyle", "=", "\"arc3\"", ")", ")", "\n", "plt", ".", "legend", "(", "ncol", "=", "1", ",", "loc", "=", "'lower left'", ")", "\n", "plt", ".", "xlabel", "(", "'RMS'", ")", "\n", "plt", ".", "ylabel", "(", "'Relative Error'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./rms_fix_quant_error_analysis_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "plt", ".", "semilogy", "(", "fl_list", ",", "\n", "opt_rms", ",", "\n", "color", "=", "'b'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "marker", "=", "'o'", ",", "\n", "markersize", "=", "8", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length'", ")", "\n", "plt", ".", "ylabel", "(", "'Optimal '", "+", "'RMS'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "f'./rms_opt_rms_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "ax1", ".", "semilogx", "(", "rms_list", ",", "opt_fl", ",", "color", "=", "'b'", ",", "lw", "=", "2", ",", "ls", "=", "'-'", ")", "\n", "ax1", ".", "set_xlabel", "(", "'RMS'", ")", "\n", "ax1", ".", "set_ylabel", "(", "'Optimal Fractional Length'", ")", "\n", "ax1", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "'b'", ")", "\n", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "ax2", ".", "semilogx", "(", "rms_list", ",", "opt_err", ",", "color", "=", "'r'", ",", "lw", "=", "2", ",", "ls", "=", "'-'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Minimum Relative Error'", ")", "\n", "ax2", ".", "tick_params", "(", "axis", "=", "'y'", ",", "labelcolor", "=", "'r'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "\n", "f'./rms_opt_fl_and_err_vs_rms_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n", "## save results as numpy array", "\n", "all_result", "=", "np", ".", "stack", "(", "[", "\n", "np", ".", "array", "(", "sigma_list", ")", ",", "\n", "np", ".", "array", "(", "mae_list", ")", ",", "\n", "np", ".", "array", "(", "rms_list", ")", ",", "\n", "np", ".", "array", "(", "opt_err", ")", ",", "\n", "np", ".", "array", "(", "opt_fl", ")", "\n", "]", ",", "\n", "axis", "=", "1", ")", "\n", "np", ".", "savetxt", "(", "\n", "f'./all_results_{wl}bit_signed_{signed}.txt'", ",", "\n", "all_result", ",", "\n", "header", "=", "f'signed={signed}\\nsigma\\tmae\\trms\\topt err\\t opt fl'", ")", "\n", "\n", "## threshold plot", "\n", "fl_list", "=", "np", ".", "array", "(", "fl_list", ")", "\n", "sigma_th_list", "=", "[", "]", "\n", "mae_th_list", "=", "[", "]", "\n", "rms_th_list", "=", "[", "]", "\n", "for", "fl", "in", "fl_list", "[", "1", ":", "]", ":", "\n", "                ", "threshold_idx", "=", "np", ".", "nonzero", "(", "opt_fl", "==", "fl", "-", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "sigma_th_list", ".", "append", "(", "sigma_list", "[", "threshold_idx", "]", ")", "\n", "mae_th_list", ".", "append", "(", "mae_list", "[", "threshold_idx", "]", ")", "\n", "rms_th_list", ".", "append", "(", "rms_list", "[", "threshold_idx", "]", ")", "\n", "## sigma", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "scatter", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "sigma_th_list", ",", "\n", "color", "=", "'b'", ",", "\n", "marker", "=", "'o'", ",", "\n", "s", "=", "24", ",", "\n", "label", "=", "'Empirical'", ")", "\n", "coeff", "=", "2", "**", "np", ".", "mean", "(", "np", ".", "array", "(", "fl_list", "[", "1", ":", "]", ")", "+", "np", ".", "log2", "(", "sigma_th_list", ")", ")", "\n", "coeff", "=", "np", ".", "around", "(", "coeff", ",", "2", ")", "\n", "plt", ".", "plot", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "coeff", "/", "2", "**", "fl_list", "[", "1", ":", "]", ",", "\n", "color", "=", "'r'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "label", "=", "'Linear Fitting'", ")", "\n", "plt", ".", "text", "(", "0.2", ",", "\n", "0.3", ",", "\n", "r'$\\sigma=$'", ".", "format", "(", "coeff", ",", "'fl'", ")", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ",", "\n", "fontsize", "=", "equation_text_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "text", "(", "0.31", ",", "\n", "0.3", ",", "\n", "r'$\\frac{{{}}}{{2^\\mathrm{{{}}}}}$'", ".", "format", "(", "coeff", ",", "'FL'", ")", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ",", "\n", "fontsize", "=", "equation_text_size", "*", "1.2", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "legend", "(", "ncol", "=", "2", ",", "\n", "loc", "=", "'upper center'", ",", "\n", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.25", ")", ",", "\n", "prop", "=", "{", "\n", "'weight'", ":", "font_weight", ",", "\n", "'size'", ":", "legend_size", "*", "1.5", "\n", "}", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length (FL)'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "ylabel", "(", "'Threshold '", "+", "r'$\\sigma$'", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}-bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "title_size", ",", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.27", ",", "top", "=", "0.9", ",", "left", "=", "0.15", ",", "right", "=", "0.95", ")", "\n", "plt", ".", "savefig", "(", "f'./sigma_threshold_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "## mae", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "plt", ".", "scatter", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "mae_th_list", ",", "\n", "color", "=", "'b'", ",", "\n", "marker", "=", "'o'", ",", "\n", "s", "=", "16", ",", "\n", "label", "=", "'Empirical'", ")", "\n", "coeff", "=", "2", "**", "np", ".", "mean", "(", "np", ".", "array", "(", "fl_list", "[", "1", ":", "]", ")", "+", "np", ".", "log2", "(", "mae_th_list", ")", ")", "\n", "coeff", "=", "np", ".", "around", "(", "coeff", ",", "2", ")", "\n", "plt", ".", "plot", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "coeff", "/", "2", "**", "fl_list", "[", "1", ":", "]", ",", "\n", "color", "=", "'r'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "label", "=", "'Theory'", ")", "\n", "plt", ".", "text", "(", "0.8", ",", "\n", "0.8", ",", "\n", "r'$y=\\frac{{{}}}{{2^x}}$'", ".", "format", "(", "coeff", ")", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length'", ")", "\n", "plt", ".", "ylabel", "(", "'Threshold '", "+", "r'$\\delta$'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "f'./mae_threshold_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "## rms", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "4", ")", ")", "\n", "plt", ".", "scatter", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "rms_th_list", ",", "\n", "color", "=", "'b'", ",", "\n", "marker", "=", "'o'", ",", "\n", "s", "=", "16", ",", "\n", "label", "=", "'Empirical'", ")", "\n", "coeff", "=", "2", "**", "np", ".", "mean", "(", "np", ".", "array", "(", "fl_list", "[", "1", ":", "]", ")", "+", "np", ".", "log2", "(", "rms_th_list", ")", ")", "\n", "coeff", "=", "np", ".", "around", "(", "coeff", ",", "2", ")", "\n", "plt", ".", "plot", "(", "fl_list", "[", "1", ":", "]", ",", "\n", "coeff", "/", "2", "**", "fl_list", "[", "1", ":", "]", ",", "\n", "color", "=", "'r'", ",", "\n", "lw", "=", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "label", "=", "'Theory'", ")", "\n", "plt", ".", "text", "(", "0.8", ",", "\n", "0.8", ",", "\n", "r'$y=\\frac{{{}}}{{2^x}}$'", ".", "format", "(", "coeff", ")", ",", "\n", "transform", "=", "plt", ".", "gca", "(", ")", ".", "transAxes", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yscale", "(", "'log'", ")", "\n", "plt", ".", "xlabel", "(", "'Fractional Length'", ")", "\n", "plt", ".", "ylabel", "(", "'Threshold '", "+", "'RMS'", ")", "\n", "title", "=", "title_dict", "[", "int", "(", "signed", ")", "]", ".", "split", "(", "' '", ")", "\n", "title", ".", "insert", "(", "1", ",", "f'{wl}bit'", ")", "\n", "title", "=", "' '", ".", "join", "(", "title", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "f'./rms_threshold_vs_fl_{wl}bit_signed_{signed}.pdf'", ",", "\n", "dpi", "=", "800", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.LoaderMeta.__new__": [[13, 19], ["type.__new__", "super().__new__.add_constructor"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.LoaderMeta.__new__"], ["def", "__new__", "(", "mcs", ",", "__name__", ",", "__bases__", ",", "__dict__", ")", ":", "\n", "        ", "\"\"\"Add include constructer to class.\"\"\"", "\n", "# register the include constructor on the class", "\n", "cls", "=", "super", "(", ")", ".", "__new__", "(", "mcs", ",", "__name__", ",", "__bases__", ",", "__dict__", ")", "\n", "cls", ".", "add_constructor", "(", "'!include'", ",", "cls", ".", "construct_include", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.Loader.__init__": [[24, 30], ["yaml.Loader.__init__", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "_root", "=", "os", ".", "path", ".", "split", "(", "stream", ".", "name", ")", "[", "0", "]", "\n", "", "except", "AttributeError", ":", "\n", "            ", "self", ".", "_root", "=", "os", ".", "path", ".", "curdir", "\n", "", "super", "(", ")", ".", "__init__", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.Loader.construct_include": [[31, 41], ["os.path.abspath", "[].lstrip", "os.path.join", "open", "config.Loader.construct_scalar", "yaml.load", "os.path.splitext", "f.readlines"], "methods", ["None"], ["", "def", "construct_include", "(", "self", ",", "node", ")", ":", "\n", "        ", "\"\"\"Include file referenced at node.\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "self", ".", "construct_scalar", "(", "node", ")", ")", ")", "\n", "extension", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "1", "]", ".", "lstrip", "(", "'.'", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "if", "extension", "in", "(", "'yaml'", ",", "'yml'", ")", ":", "\n", "                ", "return", "yaml", ".", "load", "(", "f", ",", "Loader", ")", "\n", "", "else", ":", "\n", "                ", "return", "''", ".", "join", "(", "f", ".", "readlines", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.AttrDict.__init__": [[47, 59], ["dict.__init__", "isinstance", "config.AttrDict", "isinstance", "isinstance", "config.AttrDict"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "value", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "AttrDict", "(", "value", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", "[", "0", "]", ",", "dict", ")", ":", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "[", "AttrDict", "(", "item", ")", "for", "item", "in", "value", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.AttrDict.yaml": [[60, 80], ["isinstance", "value.yaml", "isinstance", "isinstance", "new_l.append", "item.yaml"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.AttrDict.yaml", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.AttrDict.yaml"], ["", "", "", "", "def", "yaml", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert object to yaml dict and return.\n\n        \"\"\"", "\n", "yaml_dict", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "value", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "AttrDict", ")", ":", "\n", "                ", "yaml_dict", "[", "key", "]", "=", "value", ".", "yaml", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", "[", "0", "]", ",", "AttrDict", ")", ":", "\n", "                    ", "new_l", "=", "[", "]", "\n", "for", "item", "in", "value", ":", "\n", "                        ", "new_l", ".", "append", "(", "item", ".", "yaml", "(", ")", ")", "\n", "", "yaml_dict", "[", "key", "]", "=", "new_l", "\n", "", "else", ":", "\n", "                    ", "yaml_dict", "[", "key", "]", "=", "value", "\n", "", "", "else", ":", "\n", "                ", "yaml_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "yaml_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.AttrDict.__repr__": [[81, 106], ["isinstance", "ret_str.append", "value.__repr__().split", "isinstance", "ret_str.append", "isinstance", "ret_str.append", "value.__repr__", "ret_str.append", "ret_str.append", "item.__repr__().split", "ret_str.append", "item.__repr__"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.__repr__", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Print all variables.\n\n        \"\"\"", "\n", "ret_str", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "value", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "AttrDict", ")", ":", "\n", "                ", "ret_str", ".", "append", "(", "'{}:'", ".", "format", "(", "key", ")", ")", "\n", "child_ret_str", "=", "value", ".", "__repr__", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "item", "in", "child_ret_str", ":", "\n", "                    ", "ret_str", ".", "append", "(", "'    '", "+", "item", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", "[", "0", "]", ",", "AttrDict", ")", ":", "\n", "                    ", "ret_str", ".", "append", "(", "'{}:'", ".", "format", "(", "key", ")", ")", "\n", "for", "item", "in", "value", ":", "\n", "# treat as AttrDict above", "\n", "                        ", "child_ret_str", "=", "item", ".", "__repr__", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "item", "in", "child_ret_str", ":", "\n", "                            ", "ret_str", ".", "append", "(", "'    '", "+", "item", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "ret_str", ".", "append", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "ret_str", ".", "append", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "", "return", "'\\n'", ".", "join", "(", "ret_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.Config.__init__": [[138, 150], ["os.path.exists", "config.AttrDict.__init__", "print", "print", "print", "open", "yaml.load", "print", "config.Config.__repr__"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.__repr__"], ["def", "__init__", "(", "self", ",", "filename", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'File {} not exist.'", ".", "format", "(", "filename", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "cfg_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", ")", "\n", "", "", "except", "EnvironmentError", ":", "\n", "            ", "print", "(", "'Please check the file with name of \"%s\"'", ",", "filename", ")", "\n", "", "super", "(", "Config", ",", "self", ")", ".", "__init__", "(", "cfg_dict", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "' pi.cfg '", ".", "center", "(", "80", ",", "'-'", ")", ")", "\n", "print", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "print", "(", "''", ".", "center", "(", "80", ",", "'-'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.config.app": [[152, 176], ["config.Config", "arg.startswith", "arg.startswith", "sys.stdin.readline", "getattr", "int"], "function", ["None"], ["", "", "", "def", "app", "(", ")", ":", "\n", "    ", "\"\"\"Load app via stdin from subprocess\"\"\"", "\n", "global", "FLAGS", "\n", "if", "FLAGS", "is", "None", ":", "\n", "        ", "job_yaml_file", "=", "None", "\n", "batch_size", "=", "None", "\n", "for", "arg", "in", "sys", ".", "argv", ":", "\n", "            ", "if", "arg", ".", "startswith", "(", "'app:'", ")", ":", "\n", "                ", "job_yaml_file", "=", "arg", "[", "4", ":", "]", "\n", "", "if", "arg", ".", "startswith", "(", "'bs:'", ")", ":", "\n", "                ", "batch_size", "=", "int", "(", "arg", "[", "3", ":", "]", ")", "\n", "", "", "if", "job_yaml_file", "is", "None", ":", "\n", "            ", "job_yaml_file", "=", "sys", ".", "stdin", ".", "readline", "(", ")", "\n", "", "FLAGS", "=", "Config", "(", "job_yaml_file", ")", "\n", "if", "batch_size", "is", "not", "None", ":", "\n", "            ", "FLAGS", ".", "batch_size", "=", "batch_size", "\n", "", "if", "FLAGS", ".", "batch_size", ">", "256", ":", "\n", "            ", "FLAGS", ".", "warmup_epochs", "=", "getattr", "(", "FLAGS", ",", "'warmup_epochs'", ",", "5", ")", "\n", "FLAGS", ".", "lr", "=", "FLAGS", ".", "lr", "*", "FLAGS", ".", "batch_size", "/", "256", "\n", "", "else", ":", "\n", "            ", "FLAGS", ".", "warmup_epochs", "=", "0", "\n", "", "return", "FLAGS", "\n", "", "else", ":", "\n", "        ", "return", "FLAGS", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.__init__": [[126, 138], ["torch.Module.__init__", "distributed.AllReduceDistributedDataParallel._sync_params"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel._sync_params"], ["    ", "def", "__init__", "(", "self", ",", "\n", "module", ",", "\n", "dim", "=", "0", ",", "\n", "broadcast_buffers", "=", "True", ",", "\n", "bucket_cap_mb", "=", "25", ")", ":", "\n", "        ", "super", "(", "AllReduceDistributedDataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "broadcast_buffers", "=", "broadcast_buffers", "\n", "\n", "self", ".", "broadcast_bucket_size", "=", "bucket_cap_mb", "*", "1024", "*", "1024", "\n", "self", ".", "_sync_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel._dist_broadcast_coalesced": [[139, 146], ["torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "zip", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "methods", ["None"], ["", "def", "_dist_broadcast_coalesced", "(", "self", ",", "tensors", ",", "buffer_size", ")", ":", "\n", "        ", "for", "tensors", "in", "_take_tensors", "(", "tensors", ",", "buffer_size", ")", ":", "\n", "            ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "tensors", ")", "\n", "dist", ".", "broadcast", "(", "flat_tensors", ",", "0", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "tensors", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "tensors", ")", ")", ":", "\n", "                ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel._sync_params": [[147, 157], ["list", "distributed.AllReduceDistributedDataParallel.module.state_dict().values", "len", "distributed.AllReduceDistributedDataParallel._dist_broadcast_coalesced", "len", "distributed.AllReduceDistributedDataParallel._dist_broadcast_coalesced", "distributed.AllReduceDistributedDataParallel.module.state_dict", "distributed.AllReduceDistributedDataParallel.module.buffers"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel._dist_broadcast_coalesced", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel._dist_broadcast_coalesced"], ["", "", "", "def", "_sync_params", "(", "self", ")", ":", "\n", "        ", "module_states", "=", "list", "(", "self", ".", "module", ".", "state_dict", "(", ")", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "module_states", ")", ">", "0", ":", "\n", "            ", "self", ".", "_dist_broadcast_coalesced", "(", "module_states", ",", "\n", "self", ".", "broadcast_bucket_size", ")", "\n", "", "if", "self", ".", "broadcast_buffers", ":", "\n", "            ", "buffers", "=", "[", "b", ".", "data", "for", "b", "in", "self", ".", "module", ".", "buffers", "(", ")", "]", "\n", "if", "len", "(", "buffers", ")", ">", "0", ":", "\n", "                ", "self", ".", "_dist_broadcast_coalesced", "(", "buffers", ",", "\n", "self", ".", "broadcast_bucket_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter": [[158, 160], ["torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.scatter_gather.scatter_kwargs"], "methods", ["None"], ["", "", "", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.forward": [[161, 165], ["distributed.AllReduceDistributedDataParallel.scatter", "distributed.AllReduceDistributedDataParallel.module", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.AllReduceDistributedDataParallel.scatter"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.init_dist": [[16, 27], ["torch.is_initialized", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.get_start_method", "torch.set_start_method"], "function", ["None"], ["def", "init_dist", "(", "launcher", "=", "'pytorch'", ",", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "gpu_id", "=", "rank", "%", "num_gpus", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "return", "gpu_id", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_rank": [[29, 35], ["torch.is_initialized", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "", "return", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_world_size": [[37, 43], ["torch.is_initialized", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "world_size", "=", "1", "\n", "", "return", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only": [[45, 54], ["functools.wraps", "distributed.get_rank", "func"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_rank"], ["", "def", "master_only", "(", "func", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.is_master": [[56, 59], ["distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_rank"], ["", "def", "is_master", "(", ")", ":", "\n", "    ", "\"\"\"check if current process is the master\"\"\"", "\n", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.master_only_print": [[61, 65], ["print"], "function", ["None"], ["", "@", "master_only", "\n", "def", "master_only_print", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"master-only print\"\"\"", "\n", "print", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.dist_reduce_tensor": [[67, 77], ["distributed.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.reduce", "distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_world_size", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_rank"], ["", "def", "dist_reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "\"\"\" Reduce to rank 0 \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "tensor", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dist", ".", "reduce", "(", "tensor", ",", "dst", "=", "0", ")", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "tensor", "/=", "world_size", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.dist_all_reduce_tensor": [[79, 88], ["distributed.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_world_size"], ["", "def", "dist_all_reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "\"\"\" Reduce to all ranks \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "tensor", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "tensor", ")", "\n", "tensor", ".", "div_", "(", "world_size", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed._allreduce_coalesced": [[90, 110], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["", "def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.allreduce_grads": [[112, 123], ["torch.get_world_size", "distributed._allreduce_coalesced", "model.parameters", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed.get_world_size", "home.repos.pwc.inspect_result.snap-research_f8net.myutils.distributed._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "model", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "model", ".", "parameters", "(", ")", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.export.onnx_export": [[4, 32], ["print", "torch.randn().to", "torch.onnx.export", "model.to.to", "print", "model.to.cpu", "torch.randn().to.cpu", "torch.randn"], "function", ["None"], ["def", "onnx_export", "(", "model", ",", "data_shape", ",", "data_dtype", ",", "device", ",", "output_file", ")", ":", "\n", "    ", "print", "(", "\"\\nExporting...\\n\"", ")", "\n", "batch_size", "=", "1", "\n", "_", ",", "data_channel", ",", "data_height", ",", "data_width", "=", "data_shape", "\n", "rand_input", "=", "torch", ".", "randn", "(", "batch_size", ",", "\n", "data_channel", ",", "\n", "data_height", ",", "\n", "data_width", ",", "\n", "requires_grad", "=", "True", ")", ".", "to", "(", "dtype", "=", "data_dtype", ",", "\n", "device", "=", "device", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "model", ".", "cpu", "(", ")", ",", "\n", "rand_input", ".", "cpu", "(", ")", ",", "\n", "output_file", ",", "\n", "export_params", "=", "True", ",", "\n", "opset_version", "=", "11", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "input_names", "=", "[", "'input'", "]", ",", "\n", "output_names", "=", "[", "'output'", "]", ",", "\n", "dynamic_axes", "=", "{", "\n", "'input'", ":", "{", "\n", "0", ":", "'batch_size'", "\n", "}", ",", "\n", "'output'", ":", "{", "\n", "0", ":", "'batch_size'", "\n", "}", "\n", "}", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "\"\\nModel exported!\\n\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.__init__": [[10, 14], ["meters.Meter.reset"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.reset"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.__repr__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}: {!r}'", ".", "format", "(", "self", ".", "__class__", ",", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.reset": [[18, 20], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.cache": [[21, 24], ["meters.Meter.values.append"], "methods", ["None"], ["", "def", "cache", "(", "self", ",", "value", ",", "pstep", "=", "1", ")", ":", "\n", "        ", "self", ".", "steps", "+=", "pstep", "\n", "self", ".", "values", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.cache_list": [[25, 28], ["None"], "methods", ["None"], ["", "def", "cache_list", "(", "self", ",", "value_list", ",", "pstep", "=", "1", ")", ":", "\n", "        ", "self", ".", "steps", "+=", "pstep", "\n", "self", ".", "values", "+=", "value_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.flush": [[29, 31], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ",", "value", ",", "reset", "=", "True", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.ScalarMeter.__init__": [[37, 39], ["meters.Meter.__init__"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "super", "(", "ScalarMeter", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.ScalarMeter.flush": [[40, 43], ["meters.ScalarMeter.reset"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.Meter.reset"], ["", "def", "flush", "(", "self", ",", "value", ",", "step", "=", "-", "1", ",", "reset", "=", "True", ")", ":", "\n", "        ", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.flush_scalar_meters": [[45, 67], ["isinstance", "meters.items", "float", "meter.flush", "isinstance", "format", "sum", "len", "sum", "max", "min", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.myutils.meters.ScalarMeter.flush"], ["", "", "", "def", "flush_scalar_meters", "(", "meters", ",", "method", "=", "'avg'", ")", ":", "\n", "    ", "\"\"\"Docstring for flush_scalar_meters\"\"\"", "\n", "results", "=", "{", "}", "\n", "assert", "isinstance", "(", "meters", ",", "dict", ")", ",", "\"meters should be a dict.\"", "\n", "for", "name", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "meter", ",", "ScalarMeter", ")", ":", "\n", "            ", "results", "[", "name", "]", "=", "meter", "\n", "continue", "\n", "", "if", "method", "==", "'avg'", ":", "\n", "            ", "value", "=", "sum", "(", "meter", ".", "values", ")", "/", "len", "(", "meter", ".", "values", ")", "\n", "", "elif", "method", "==", "'sum'", ":", "\n", "            ", "value", "=", "sum", "(", "meter", ".", "values", ")", "\n", "", "elif", "method", "==", "'max'", ":", "\n", "            ", "value", "=", "max", "(", "meter", ".", "values", ")", "\n", "", "elif", "method", "==", "'min'", ":", "\n", "            ", "value", "=", "min", "(", "meter", ".", "values", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'flush method: {} is not yet implemented.'", ".", "format", "(", "method", ")", ")", "\n", "", "results", "[", "name", "]", "=", "float", "(", "format", "(", "value", ",", "'.3f'", ")", ")", "\n", "meter", ".", "flush", "(", "value", ")", "\n", "", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.snap-research_f8net.fraclen_visual.fraclen_visualizing_res50.main": [[16, 219], ["log_file_name_dict.keys", "print", "range", "open", "f.read().splitlines", "int", "int", "matplotlib.figure", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().tick_params", "numpy.arange", "matplotlib.bar", "matplotlib.bar", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.arrow", "matplotlib.Rectangle", "matplotlib.Rectangle", "matplotlib.gca().add_patch", "matplotlib.gca().add_patch", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.setp", "matplotlib.gca().xaxis.set_label_coords", "matplotlib.gca().yaxis.set_label_coords", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.savefig", "matplotlib.title", "matplotlib.savefig", "os.path.join", "len", "torch.round().item", "numpy.around", "len", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "matplotlib.text", "matplotlib.text", "numpy.arange", "numpy.abs", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "f.read", "len", "eval", "layer_fraclen_dict.values", "layer_fraclen_dict.values", "layer_fraclen_dict.values", "matplotlib.gca", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "matplotlib.gca", "matplotlib.gca", "numpy.arange", "l.startswith", "torch.round", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "len", "eval", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "work_dir", "=", "'./'", "\n", "log_file_name_dict", "=", "{", "\n", "'ptcv'", ":", "\n", "'res50_fix_quant_ptcv_pretrained.out'", ",", "\n", "'nvidia'", ":", "\n", "'res50_fix_quant_nvidia_pretrained.out'", "\n", "}", "\n", "for", "pretrained_method", "in", "log_file_name_dict", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "f'pretrained with {pretrained_method}'", ")", "\n", "log_file_name", "=", "log_file_name_dict", "[", "pretrained_method", "]", "\n", "\n", "depthwise_layer", "=", "[", "]", "\n", "\n", "layer_fraclen_dict", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "log_file_name", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "lines", "=", "[", "\n", "l", "for", "l", "in", "lines", "\n", "if", "'fraclen'", "in", "l", "or", "l", ".", "startswith", "(", "'layer name'", ")", "\n", "]", "\n", "lines", "=", "[", "\n", "l", "for", "l", "in", "lines", "\n", "if", "'setting'", "not", "in", "l", "and", "'model'", "not", "in", "l", "and", "'log'", "not", "in", "l", "\n", "]", "\n", "lines", "=", "[", "l", "[", ":", "-", "1", "]", "for", "l", "in", "lines", "]", "\n", "assert", "len", "(", "lines", ")", "%", "3", "==", "0", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "lines", ")", "//", "3", ")", ":", "\n", "            ", "assert", "'layer name'", "in", "lines", "[", "idx", "*", "3", "]", "\n", "assert", "'input_fraclen'", "in", "lines", "[", "idx", "*", "3", "+", "1", "]", "\n", "assert", "'weight_fraclen'", "in", "lines", "[", "idx", "*", "3", "+", "2", "]", "\n", "layer_name", "=", "lines", "[", "idx", "*", "3", "]", "[", "12", ":", "]", "\n", "if", "'shortcut'", "in", "layer_name", ":", "\n", "                ", "shortcut", "=", "True", "\n", "", "else", ":", "\n", "                ", "shortcut", "=", "False", "\n", "", "if", "'classifier'", "in", "layer_name", ":", "\n", "                ", "fc", "=", "True", "\n", "", "else", ":", "\n", "                ", "fc", "=", "False", "\n", "", "input_fraclen", "=", "int", "(", "\n", "torch", ".", "round", "(", "eval", "(", "'torch.'", "+", "lines", "[", "idx", "*", "3", "+", "1", "]", "[", "15", ":", "]", ")", ")", ".", "item", "(", ")", ")", "\n", "weight_fraclen", "=", "int", "(", "np", ".", "around", "(", "eval", "(", "lines", "[", "idx", "*", "3", "+", "2", "]", "[", "16", ":", "]", ")", ")", ")", "\n", "layer_fraclen_dict", "[", "layer_name", "]", "=", "(", "weight_fraclen", ",", "input_fraclen", ",", "\n", "shortcut", ",", "fc", ")", "\n", "\n", "", "cm", "=", "{", "'b'", ":", "[", "80", "/", "255", ",", "156", "/", "255", ",", "1.0", "]", ",", "'m'", ":", "[", "250", "/", "255", ",", "0", ",", "101", "/", "255", "]", "}", "\n", "model_name", "=", "{", "'resnet50'", ":", "'ResNet50'", "}", "\n", "bit_cmap", "=", "{", "\n", "0", ":", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "1", ":", "[", "155", "/", "255", ",", "221", "/", "255", ",", "239", "/", "255", "]", ",", "\n", "2", ":", "[", "255", "/", "255", ",", "102", "/", "255", ",", "153", "/", "255", "]", ",", "\n", "3", ":", "[", "189", "/", "255", ",", "146", "/", "255", ",", "222", "/", "255", "]", ",", "\n", "4", ":", "[", "75", "/", "255", ",", "148", "/", "255", ",", "255", "/", "255", "]", ",", "\n", "5", ":", "[", "199", "/", "255", ",", "225", "/", "255", ",", "181", "/", "255", "]", ",", "\n", "6", ":", "[", "241", "/", "255", ",", "245", "/", "255", ",", "161", "/", "255", "]", ",", "\n", "7", ":", "[", "255", "/", "255", ",", "133", "/", "255", ",", "133", "/", "255", "]", ",", "\n", "8", ":", "[", "40", "/", "255", ",", "240", "/", "255", ",", "128", "/", "255", "]", "\n", "}", "\n", "fig_size", "=", "(", "6", ",", "4", ")", "\n", "axes_label_size", "=", "16", "\n", "text_size", "=", "12", "\n", "title_size", "=", "16", "\n", "legend_size", "=", "8", "\n", "font_weight", "=", "'normal'", "\n", "for", "model", "in", "[", "'resnet50'", "]", ":", "\n", "            ", "barwidth", "=", "1", "\n", "patch_width", "=", "1.0", "\n", "arrow_extension", "=", "2.0", "\n", "\n", "weight_fraclen_list", "=", "[", "v", "[", "0", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "input_fraclen_list", "=", "[", "-", "v", "[", "1", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "## The first layer does not quantize input", "\n", "input_fraclen_list", "[", "0", "]", "=", "-", "8", "\n", "fc_list", "=", "[", "v", "[", "3", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'both'", ",", "length", "=", "0", ")", "\n", "ids", "=", "np", ".", "arange", "(", "len", "(", "weight_fraclen_list", ")", ")", "\n", "color_w", "=", "[", "cm", "[", "'b'", "]", "for", "idx", "in", "ids", "]", "\n", "color_a", "=", "[", "cm", "[", "'m'", "]", "for", "idx", "in", "ids", "]", "\n", "plt", ".", "bar", "(", "ids", "*", "barwidth", ",", "\n", "weight_fraclen_list", ",", "\n", "bottom", "=", "0.01", ",", "\n", "width", "=", "barwidth", "*", "0.8", ",", "\n", "color", "=", "color_w", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "linewidth", "=", "0.3", ")", "\n", "plt", ".", "bar", "(", "ids", "*", "barwidth", ",", "\n", "input_fraclen_list", ",", "\n", "bottom", "=", "-", "0.01", ",", "\n", "width", "=", "barwidth", "*", "0.8", ",", "\n", "color", "=", "color_a", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "linewidth", "=", "0.3", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "4", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "6", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "8", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "8", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "6", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "4", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "arrow", "(", "-", "barwidth", "/", "2", ",", "\n", "0", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", "+", "\n", "barwidth", "*", "arrow_extension", ",", "\n", "0", ",", "\n", "ls", "=", "'-'", ",", "\n", "color", "=", "'k'", ",", "\n", "width", "=", ".005", ",", "\n", "head_width", "=", "0.15", ",", "\n", "head_length", "=", "0.1", "*", "arrow_extension", ")", "\n", "rect_w_pw", "=", "patches", ".", "Rectangle", "(", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "0", ",", "-", "10", ")", ",", "\n", "2.2", "*", "patch_width", ",", "\n", "1.2", "*", "patch_width", ",", "\n", "linewidth", "=", ".5", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "facecolor", "=", "cm", "[", "'b'", "]", ")", "\n", "rect_a_pw", "=", "patches", ".", "Rectangle", "(", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "1.0", ",", "-", "10", ")", ",", "\n", "2.2", "*", "patch_width", ",", "\n", "1.2", "*", "patch_width", ",", "\n", "linewidth", "=", ".5", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "facecolor", "=", "cm", "[", "'m'", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect_w_pw", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect_a_pw", ")", "\n", "if", "model", "in", "[", "'resnet50'", "]", ":", "\n", "                ", "plt", ".", "text", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "0", "+", "patch_width", "*", "2.6", ",", "\n", "-", "9.75", ",", "\n", "'#Weight FL'", ",", "\n", "fontsize", "=", "text_size", ")", "\n", "plt", ".", "text", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "1", "+", "patch_width", "*", "2.6", ",", "\n", "-", "9.75", ",", "\n", "'#Activation FL'", ",", "\n", "fontsize", "=", "text_size", ")", "\n", "", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "-", "8", ",", "9", ",", "2", ")", ",", "np", ".", "abs", "(", "np", ".", "arange", "(", "-", "8", ",", "9", ",", "2", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Layer'", ",", "fontsize", "=", "axes_label_size", ")", "\n", "plt", ".", "ylabel", "(", "'Fractional Length'", ",", "fontsize", "=", "axes_label_size", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_label_coords", "(", "1.02", ",", "0.52", ")", "\n", "plt", ".", "gca", "(", ")", ".", "yaxis", ".", "set_label_coords", "(", "-", "0.05", ",", "0.58", ")", "\n", "plt", ".", "xlim", "(", "-", "0.6", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "1.2", "*", "barwidth", "*", "arrow_extension", ")", "\n", "plt", ".", "ylim", "(", "-", "10", ",", "8.5", ")", "\n", "plt", ".", "savefig", "(", "f'./{model}_{pretrained_method}_8bit_fraclens_wo_title.pdf'", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "title", "(", "\n", "f'Fractional Length vs Layer (8-bit {model_name[model]})'", ",", "\n", "fontsize", "=", "title_size", ")", "\n", "plt", ".", "savefig", "(", "f'./{model}_{pretrained_method}_8bit_fraclens.pdf'", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.fraclen_visual.fraclen_visualizing_mbv2.main": [[16, 271], ["range", "open", "f.read().splitlines", "int", "int", "matplotlib.figure", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().spines[].set_visible", "matplotlib.gca().tick_params", "numpy.arange", "matplotlib.bar", "matplotlib.bar", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.arrow", "matplotlib.Rectangle", "matplotlib.Rectangle", "matplotlib.Rectangle", "matplotlib.Rectangle", "matplotlib.gca().add_patch", "matplotlib.gca().add_patch", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.setp", "matplotlib.gca().xaxis.set_label_coords", "matplotlib.gca().yaxis.set_label_coords", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.savefig", "matplotlib.title", "matplotlib.savefig", "os.path.join", "len", "torch.round().item", "numpy.around", "len", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "matplotlib.gca().add_patch", "matplotlib.gca().add_patch", "matplotlib.text", "matplotlib.text", "matplotlib.text", "matplotlib.text", "numpy.arange", "numpy.abs", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "f.read", "len", "eval", "layer_fraclen_dict.values", "layer_fraclen_dict.values", "layer_fraclen_dict.values", "layer_fraclen_dict.values", "layer_fraclen_dict.values", "matplotlib.gca", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "matplotlib.gca", "matplotlib.gca", "numpy.arange", "torch.round", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "len", "eval", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "work_dir", "=", "'./'", "\n", "log_file_name", "=", "'mbv2_fix_quant.out'", "\n", "\n", "depthwise_layer", "=", "[", "\n", "'stage_0_layer_0.body.0'", ",", "'stage_1_layer_0.body.1'", ",", "\n", "'stage_1_layer_1.body.1'", ",", "'stage_2_layer_0.body.1'", ",", "\n", "'stage_2_layer_1.body.1'", ",", "'stage_2_layer_2.body.1'", ",", "\n", "'stage_3_layer_0.body.1'", ",", "'stage_3_layer_1.body.1'", ",", "\n", "'stage_3_layer_2.body.1'", ",", "'stage_3_layer_3.body.1'", ",", "\n", "'stage_4_layer_0.body.1'", ",", "'stage_4_layer_1.body.1'", ",", "\n", "'stage_4_layer_2.body.1'", ",", "'stage_5_layer_0.body.1'", ",", "\n", "'stage_5_layer_1.body.1'", ",", "'stage_5_layer_2.body.1'", ",", "\n", "'stage_6_layer_0.body.1'", "\n", "]", "\n", "\n", "layer_fraclen_dict", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "log_file_name", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "lines", "=", "[", "l", "for", "l", "in", "lines", "if", "'fraclen'", "in", "l", "or", "'name'", "in", "l", "]", "\n", "lines", "=", "[", "\n", "l", "for", "l", "in", "lines", "\n", "if", "'setting'", "not", "in", "l", "and", "'model'", "not", "in", "l", "and", "'log'", "not", "in", "l", "\n", "]", "\n", "lines", "=", "[", "l", "[", ":", "-", "1", "]", "for", "l", "in", "lines", "]", "\n", "assert", "len", "(", "lines", ")", "%", "3", "==", "0", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "lines", ")", "//", "3", ")", ":", "\n", "        ", "assert", "'layer name'", "in", "lines", "[", "idx", "*", "3", "]", "\n", "assert", "'input_fraclen'", "in", "lines", "[", "idx", "*", "3", "+", "1", "]", "\n", "assert", "'weight_fraclen'", "in", "lines", "[", "idx", "*", "3", "+", "2", "]", "\n", "layer_name", "=", "lines", "[", "idx", "*", "3", "]", "[", "12", ":", "]", "\n", "if", "layer_name", "in", "depthwise_layer", ":", "\n", "            ", "depthwise", "=", "True", "\n", "", "else", ":", "\n", "            ", "depthwise", "=", "False", "\n", "", "if", "'shortcut'", "in", "layer_name", ":", "\n", "            ", "shortcut", "=", "True", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "False", "\n", "", "if", "'classifier'", "in", "layer_name", ":", "\n", "            ", "fc", "=", "True", "\n", "", "else", ":", "\n", "            ", "fc", "=", "False", "\n", "", "if", "'body.0'", "in", "layer_name", "and", "'stage_0'", "not", "in", "layer_name", ":", "\n", "            ", "double_side", "=", "True", "\n", "", "elif", "'tail'", "in", "layer_name", ":", "\n", "            ", "double_side", "=", "True", "\n", "", "else", ":", "\n", "            ", "double_side", "=", "False", "\n", "", "input_fraclen", "=", "int", "(", "\n", "torch", ".", "round", "(", "eval", "(", "'torch.'", "+", "lines", "[", "idx", "*", "3", "+", "1", "]", "[", "15", ":", "]", ")", ")", ".", "item", "(", ")", ")", "\n", "weight_fraclen", "=", "int", "(", "np", ".", "around", "(", "eval", "(", "lines", "[", "idx", "*", "3", "+", "2", "]", "[", "16", ":", "]", ")", ")", ")", "\n", "layer_fraclen_dict", "[", "layer_name", "]", "=", "(", "weight_fraclen", ",", "input_fraclen", ",", "\n", "depthwise", ",", "shortcut", ",", "fc", ",", "double_side", ")", "\n", "\n", "", "cm", "=", "{", "'b'", ":", "[", "80", "/", "255", ",", "156", "/", "255", ",", "1.0", "]", ",", "'m'", ":", "[", "250", "/", "255", ",", "0", ",", "101", "/", "255", "]", "}", "\n", "model_name", "=", "{", "'mobilenetv2'", ":", "'MobileNet V2'", "}", "\n", "delta", "=", "{", "'mobilenetv2'", ":", "6", "}", "\n", "bit_cmap", "=", "{", "\n", "0", ":", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "1", ":", "[", "155", "/", "255", ",", "221", "/", "255", ",", "239", "/", "255", "]", ",", "\n", "2", ":", "[", "255", "/", "255", ",", "102", "/", "255", ",", "153", "/", "255", "]", ",", "\n", "3", ":", "[", "189", "/", "255", ",", "146", "/", "255", ",", "222", "/", "255", "]", ",", "\n", "4", ":", "[", "75", "/", "255", ",", "148", "/", "255", ",", "255", "/", "255", "]", ",", "\n", "5", ":", "[", "199", "/", "255", ",", "225", "/", "255", ",", "181", "/", "255", "]", ",", "\n", "6", ":", "[", "241", "/", "255", ",", "245", "/", "255", ",", "161", "/", "255", "]", ",", "\n", "7", ":", "[", "255", "/", "255", ",", "133", "/", "255", ",", "133", "/", "255", "]", ",", "\n", "8", ":", "[", "40", "/", "255", ",", "240", "/", "255", ",", "128", "/", "255", "]", "\n", "}", "\n", "fig_size", "=", "(", "6", ",", "4", ")", "\n", "axes_label_size", "=", "16", "\n", "text_size", "=", "12", "\n", "title_size", "=", "16", "\n", "legend_size", "=", "8", "\n", "font_weight", "=", "'normal'", "\n", "for", "model", "in", "[", "'mobilenetv2'", "]", ":", "\n", "        ", "if", "model", "in", "[", "'mobilenetv2'", "]", ":", "\n", "            ", "barwidth", "=", "1", "\n", "patch_width", "=", "2", "\n", "arrow_extension", "=", "3", "\n", "", "else", ":", "\n", "            ", "barwidth", "=", "1", "\n", "if", "shortcut", ":", "\n", "                ", "patch_width", "=", "1", "\n", "", "else", ":", "\n", "                ", "patch_width", "=", ".75", "\n", "", "arrow_extension", "=", ".75", "\n", "\n", "", "weight_fraclen_list", "=", "[", "v", "[", "0", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "input_fraclen_list", "=", "[", "-", "v", "[", "1", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "## The first layer does not quantize input", "\n", "input_fraclen_list", "[", "0", "]", "=", "-", "8", "\n", "depthwise_list", "=", "[", "v", "[", "2", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "fc_list", "=", "[", "v", "[", "4", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "double_side_list", "=", "[", "v", "[", "5", "]", "for", "v", "in", "layer_fraclen_dict", ".", "values", "(", ")", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "gca", "(", ")", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'both'", ",", "length", "=", "0", ")", "\n", "ids", "=", "np", ".", "arange", "(", "len", "(", "weight_fraclen_list", ")", ")", "\n", "alpha", "=", "0.5", "\n", "if", "model", "in", "[", "'mobilenetv2'", "]", ":", "\n", "            ", "color_w", "=", "[", "\n", "cm", "[", "'b'", "]", "+", "[", "alpha", "]", "if", "depthwise_list", "[", "idx", "]", "else", "cm", "[", "'b'", "]", "\n", "for", "idx", "in", "ids", "\n", "]", "\n", "color_a", "=", "[", "\n", "cm", "[", "'m'", "]", "+", "[", "alpha", "]", "if", "depthwise_list", "[", "idx", "]", "else", "cm", "[", "'m'", "]", "\n", "for", "idx", "in", "ids", "\n", "]", "\n", "", "else", ":", "\n", "            ", "color_w", "=", "[", "cm", "[", "'b'", "]", "for", "idx", "in", "ids", "]", "\n", "color_a", "=", "[", "cm", "[", "'m'", "]", "for", "idx", "in", "ids", "]", "\n", "", "plt", ".", "bar", "(", "ids", "*", "barwidth", ",", "\n", "weight_fraclen_list", ",", "\n", "bottom", "=", "0.01", ",", "\n", "width", "=", "barwidth", "*", "0.8", ",", "\n", "color", "=", "color_w", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "linewidth", "=", "0.3", ")", "\n", "plt", ".", "bar", "(", "ids", "*", "barwidth", ",", "\n", "input_fraclen_list", ",", "\n", "bottom", "=", "-", "0.01", ",", "\n", "width", "=", "barwidth", "*", "0.8", ",", "\n", "color", "=", "color_a", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "linewidth", "=", "0.3", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "4", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "6", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "8", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "8", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "6", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "4", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "arange", "(", "-", "barwidth", "/", "2", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", ",", "barwidth", ")", ",", "\n", "-", "np", ".", "ones", "(", "len", "(", "ids", ")", "+", "1", ")", "*", "2", ",", "\n", "ls", "=", "'--'", ",", "\n", "lw", "=", "0.5", ",", "\n", "c", "=", "'k'", ")", "\n", "plt", ".", "arrow", "(", "-", "barwidth", "/", "2", ",", "\n", "0", ",", "\n", "barwidth", "*", "len", "(", "ids", ")", "+", "barwidth", "/", "2", "+", "\n", "barwidth", "*", "arrow_extension", ",", "\n", "0", ",", "\n", "ls", "=", "'-'", ",", "\n", "color", "=", "'k'", ",", "\n", "width", "=", ".005", ",", "\n", "head_width", "=", "0.15", ",", "\n", "head_length", "=", "0.1", "*", "arrow_extension", ")", "\n", "rect_w_pw", "=", "patches", ".", "Rectangle", "(", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "0", ",", "-", "10", ")", ",", "\n", "1.2", "*", "patch_width", ",", "\n", "1.2", ",", "\n", "linewidth", "=", ".5", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "facecolor", "=", "cm", "[", "'b'", "]", ")", "\n", "rect_w_dw", "=", "patches", ".", "Rectangle", "(", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "0", ",", "-", "12", ")", ",", "\n", "1.2", "*", "patch_width", ",", "\n", "1.2", ",", "\n", "linewidth", "=", ".5", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "facecolor", "=", "cm", "[", "'b'", "]", "+", "[", "alpha", "]", ")", "\n", "rect_a_pw", "=", "patches", ".", "Rectangle", "(", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "1.1", ",", "-", "10", ")", ",", "\n", "1.2", "*", "patch_width", ",", "\n", "1.2", ",", "\n", "linewidth", "=", ".5", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "facecolor", "=", "cm", "[", "'m'", "]", ")", "\n", "rect_a_dw", "=", "patches", ".", "Rectangle", "(", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "1.1", ",", "-", "12", ")", ",", "\n", "1.2", "*", "patch_width", ",", "\n", "1.2", ",", "\n", "linewidth", "=", ".5", ",", "\n", "edgecolor", "=", "'k'", ",", "\n", "facecolor", "=", "cm", "[", "'m'", "]", "+", "[", "alpha", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect_w_pw", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect_a_pw", ")", "\n", "if", "model", "in", "[", "'mobilenetv2'", "]", ":", "\n", "            ", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect_w_dw", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect_a_dw", ")", "\n", "", "if", "model", "in", "[", "'mobilenetv2'", "]", ":", "\n", "            ", "plt", ".", "text", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "0", "+", "patch_width", "*", "1.6", ",", "\n", "-", "9.65", ",", "\n", "'#Weight FL (pointwise)'", ",", "\n", "fontsize", "=", "text_size", ")", "\n", "plt", ".", "text", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "1.1", "+", "patch_width", "*", "1.6", ",", "\n", "-", "9.65", ",", "\n", "'#Activation FL (pointwise)'", ",", "\n", "fontsize", "=", "text_size", ")", "\n", "plt", ".", "text", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "0", "+", "patch_width", "*", "1.6", ",", "\n", "-", "11.65", ",", "\n", "'#Weight FL (depthwise)'", ",", "\n", "fontsize", "=", "text_size", ")", "\n", "plt", ".", "text", "(", "barwidth", "*", "len", "(", "ids", ")", "/", "2", "*", "1.1", "+", "patch_width", "*", "1.6", ",", "\n", "-", "11.65", ",", "\n", "'#Activation FL (depthwise)'", ",", "\n", "fontsize", "=", "text_size", ")", "\n", "", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "-", "8", ",", "9", ",", "2", ")", ",", "np", ".", "abs", "(", "np", ".", "arange", "(", "-", "8", ",", "9", ",", "2", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Layer'", ",", "fontsize", "=", "axes_label_size", ")", "\n", "plt", ".", "ylabel", "(", "'Fractional Length'", ",", "fontsize", "=", "axes_label_size", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_label_coords", "(", "1.0", ",", "0.56", ")", "\n", "plt", ".", "gca", "(", ")", ".", "yaxis", ".", "set_label_coords", "(", "-", "0.05", ",", "0.58", ")", "\n", "plt", ".", "xlim", "(", "-", "0.6", ",", "barwidth", "*", "len", "(", "ids", ")", "+", "1.2", "*", "barwidth", "*", "arrow_extension", ")", "\n", "plt", ".", "ylim", "(", "-", "12", ",", "8.5", ")", "\n", "plt", ".", "savefig", "(", "f'./{model}_8bit_fraclens_wo_title.pdf'", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "title", "(", "f'Fractional Length vs Layer (8-bit {model_name[model]})'", ",", "\n", "fontsize", "=", "title_size", ")", "\n", "plt", ".", "savefig", "(", "f'./{model}_8bit_fraclens.pdf'", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.weight_boxplot.weight_boxplot.main": [[12, 74], ["pytorchcv.model_provider.get_model.named_modules", "matplotlib.figure", "matplotlib.boxplot", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.setp", "matplotlib.savefig", "matplotlib.title", "matplotlib.savefig", "torchvision.mobilenetv2.mobilenet_v2", "isinstance", "matplotlib.gca().get_xticklabels", "matplotlib.gca().get_yticklabels", "pytorchcv.model_provider.get_model", "isinstance", "eff_weight_list.append", "isinstance", "matplotlib.gca", "matplotlib.gca", "eff_weight.detach().cpu().flatten().numpy", "eff_weight_list.append", "eff_weight.detach().cpu().flatten().numpy", "torch.sqrt", "torch.sqrt", "eff_weight.detach().cpu().flatten", "eff_weight.detach().cpu().flatten", "eff_weight.detach().cpu", "eff_weight.detach().cpu", "eff_weight.detach", "eff_weight.detach"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.None.fix_train.get_model"], ["def", "main", "(", ")", ":", "\n", "    ", "fig_size", "=", "(", "6", ",", "4", ")", "\n", "axes_label_size", "=", "16", "\n", "text_size", "=", "12", "\n", "title_size", "=", "16", "\n", "legend_size", "=", "8", "\n", "font_weight", "=", "'normal'", "\n", "for", "ckpt", "in", "[", "'torchvision'", ",", "'pytorchcv'", "]", ":", "\n", "        ", "if", "ckpt", "==", "'torchvision'", ":", "\n", "            ", "net", "=", "tv_models", ".", "mobilenetv2", ".", "mobilenet_v2", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "ckpt", "==", "'pytorchcv'", ":", "\n", "            ", "net", "=", "ptcv_get_model", "(", "'mobilenetv2b_w1'", ",", "pretrained", "=", "True", ")", "\n", "", "eff_weight_list", "=", "[", "]", "\n", "conv_weight", "=", "None", "\n", "fc_weight", "=", "None", "\n", "for", "n", ",", "m", "in", "net", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv_weight", "=", "m", ".", "weight", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "bn_weight", "=", "m", ".", "weight", "\n", "bn_var", "=", "m", ".", "running_var", "\n", "bn_eps", "=", "m", ".", "eps", "\n", "eff_weight", "=", "conv_weight", "*", "(", "\n", "bn_weight", "/", "torch", ".", "sqrt", "(", "bn_var", "+", "bn_eps", ")", ")", "[", ":", ",", "None", ",", "None", ",", "\n", "None", "]", "\n", "eff_weight_list", ".", "append", "(", "\n", "eff_weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", ")", "\n", "conv_weight", "=", "None", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "eff_weight", "=", "m", ".", "weight", "\n", "eff_weight_list", ".", "append", "(", "\n", "eff_weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", ")", "\n", "conv_weight", "=", "None", "\n", "", "else", ":", "\n", "                ", "conv_weight", "=", "None", "\n", "", "", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "box_edge_color", "=", "'k'", "\n", "box_bar_color", "=", "'r'", "\n", "plt", ".", "boxplot", "(", "eff_weight_list", ",", "\n", "showfliers", "=", "False", ",", "\n", "boxprops", "=", "{", "'color'", ":", "box_edge_color", "}", ",", "\n", "capprops", "=", "{", "'color'", ":", "box_edge_color", "}", ",", "\n", "whiskerprops", "=", "{", "'color'", ":", "box_edge_color", "}", ",", "\n", "flierprops", "=", "{", "'markeredgecolor'", ":", "box_edge_color", "}", ",", "\n", "medianprops", "=", "{", "'color'", ":", "box_bar_color", "}", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "xlabel", "(", "'Layer'", ",", "fontsize", "=", "axes_label_size", ")", "\n", "plt", ".", "ylabel", "(", "'Effective Weight'", ",", "fontsize", "=", "axes_label_size", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_xticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "gca", "(", ")", ".", "get_yticklabels", "(", ")", ",", "\n", "fontsize", "=", "axes_label_size", ",", "\n", "fontweight", "=", "font_weight", ")", "\n", "plt", ".", "savefig", "(", "f'./mobilenetv2_{ckpt}_eff_weight_wo_title.pdf'", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "title", "(", "'Effective Weight Range (FP MobileNet V2)'", ",", "\n", "fontsize", "=", "title_size", ")", "\n", "plt", ".", "savefig", "(", "f'./mobilenetv2_{ckpt}_eff_weight.pdf'", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.IntBlock.__init__": [[12, 17], ["torch.Module.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "body", ",", "residual_connection", ")", ":", "\n", "        ", "super", "(", "IntBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "body", "\n", "self", ".", "residual_connection", "=", "residual_connection", "\n", "self", ".", "int_op_only", "=", "getattr", "(", "body", ",", "'int_op_only'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.IntBlock.forward": [[18, 73], ["getattr", "getattr", "setattr", "isinstance", "isinstance", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "setattr", "fix_quant_ops.int_op_only_fix_quant", "layer_", "setattr", "layer_", "layer_.clamp_", "setattr", "layer_.clamp_", "setattr", "layer_", "layer_.div_", "layer_", "layer_.input_fraclen.item", "fix_quant_ops.fix_quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "\n", "if", "getattr", "(", "self", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "res", "=", "x", "\n", "for", "layer_", "in", "self", ".", "body", ":", "\n", "                ", "if", "isinstance", "(", "layer_", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "res", "=", "int_op_only_fix_quant", "(", "res", ",", "8", ",", "\n", "layer_", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "res", ".", "output_fraclen", ",", "\n", "layer_", ".", "input_symmetric", ")", "\n", "res", "=", "layer_", "(", "res", ")", "\n", "output_fraclen", "=", "(", "layer_", ".", "weight_fraclen", "+", "\n", "layer_", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "layer_", "(", "res", ")", "\n", "", "", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "if", "res_fraclen", ">=", "x_fraclen", ":", "\n", "                    ", "x", "=", "x", "<<", "(", "res_fraclen", "-", "x_fraclen", ")", "\n", "res", "+=", "x", "\n", "res", ".", "clamp_", "(", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "output_fraclen", "=", "res_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "res", "<<", "(", "x_fraclen", "-", "res_fraclen", ")", "\n", "res", "+=", "x", "\n", "res", ".", "clamp_", "(", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "output_fraclen", "=", "x_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "", "", "else", ":", "\n", "            ", "res", "=", "x", "\n", "for", "layer_", "in", "self", ".", "body", ":", "\n", "                ", "if", "isinstance", "(", "layer_", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "res", "=", "(", "fix_quant", "(", "res", ",", "8", ",", "layer_", ".", "input_fraclen", ",", "1", ",", "\n", "layer_", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "layer_", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "res", "=", "layer_", "(", "res", ")", "\n", "res", ".", "div_", "(", "2", "**", "(", "layer_", ".", "weight_fraclen", "+", "layer_", ".", "input_fraclen", ")", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "layer_", "(", "res", ")", "\n", "", "", "setattr", "(", "res", ",", "'output_fraclen'", ",", "\n", "self", ".", "body", "[", "-", "1", "]", ".", "weight_fraclen", "+", "self", ".", "body", "[", "-", "1", "]", ".", "input_fraclen", ")", "\n", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.__init__": [[76, 132], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "fix_mobilenet_v2.InvertedResidual.set_master_layer", "fix_mobilenet_v2.InvertedResidual.set_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inp", ",", "\n", "outp", ",", "\n", "stride", ",", "\n", "expand_ratio", ",", "\n", "double_side", "=", "False", ",", "\n", "master_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "expand_inp", "=", "inp", "*", "expand_ratio", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# expand", "\n", "            ", "l0", "=", "ReLUClipFXQConvBN", "(", "inp", ",", "\n", "expand_inp", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "double_side", "=", "double_side", ",", "\n", "master_layer", "=", "master_layer", ")", "\n", "# depthwise + project back", "\n", "l1", "=", "ReLUClipFXQConvBN", "(", "expand_inp", ",", "\n", "expand_inp", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "groups", "=", "expand_inp", ")", "\n", "l2", "=", "ReLUClipFXQConvBN", "(", "expand_inp", ",", "outp", ",", "1", ",", "1", ",", "0", ")", "\n", "layers", "=", "[", "\n", "l0", ",", "\n", "l1", ",", "\n", "l2", ",", "\n", "]", "\n", "", "else", ":", "\n", "# depthwise + project back", "\n", "            ", "l1", "=", "ReLUClipFXQConvBN", "(", "expand_inp", ",", "\n", "expand_inp", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "groups", "=", "expand_inp", ",", "\n", "double_side", "=", "double_side", ",", "\n", "master_layer", "=", "master_layer", ")", "\n", "l2", "=", "ReLUClipFXQConvBN", "(", "expand_inp", ",", "outp", ",", "1", ",", "1", ",", "0", ")", "\n", "layers", "=", "[", "\n", "l1", ",", "\n", "l2", ",", "\n", "]", "\n", "", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "layer_dict", "=", "{", "}", "\n", "\n", "self", ".", "residual_connection", "=", "stride", "==", "1", "and", "inp", "==", "outp", "\n", "if", "self", ".", "residual_connection", ":", "\n", "            ", "self", ".", "set_master_layer", "(", "self", ".", "body", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_master_layer", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.forward": [[133, 149], ["fix_mobilenet_v2.InvertedResidual.body", "getattr", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "setattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "if", "self", ".", "residual_connection", ":", "\n", "            ", "if", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "and", "not", "self", ".", "training", ":", "\n", "                ", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "                ", "res", "+=", "x", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.set_master_layer": [[150, 152], ["None"], "methods", ["None"], ["", "def", "set_master_layer", "(", "self", ",", "master_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'master'", "]", "=", "master_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.get_master_layer": [[153, 155], ["None"], "methods", ["None"], ["", "def", "get_master_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'master'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.set_following_layer": [[156, 161], ["range", "fix_mobilenet_v2.InvertedResidual.body[].set_following_layer", "fix_mobilenet_v2.InvertedResidual.body[].set_following_layer", "len"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer"], ["", "def", "set_following_layer", "(", "self", ",", "following_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'following'", "]", "=", "following_layer", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "body", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "body", "[", "idx", "]", ".", "set_following_layer", "(", "self", ".", "body", "[", "idx", "+", "1", "]", ")", "\n", "", "self", ".", "body", "[", "-", "1", "]", ".", "set_following_layer", "(", "following_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.get_following_layer": [[162, 164], ["None"], "methods", ["None"], ["", "def", "get_following_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'following'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.master_child": [[165, 167], ["None"], "methods", ["None"], ["", "def", "master_child", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "body", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.InvertedResidual.int_block": [[168, 177], ["layers.append", "torch.Sequential", "torch.Sequential", "fix_mobilenet_v2.IntBlock", "fix_mobilenet_v2.InvertedResidual.body[].int_conv", "layers.append", "layers.append", "torch.ReLU", "torch.ReLU", "layer_.int_conv"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv"], ["", "def", "int_block", "(", "self", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "self", ".", "body", "[", "0", "]", ".", "int_conv", "(", ")", ")", "\n", "for", "layer_", "in", "self", ".", "body", "[", "1", ":", "]", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "layer_", ".", "int_conv", "(", ")", ")", "\n", "", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "residual_connection", "=", "self", ".", "residual_connection", "\n", "return", "IntBlock", "(", "body", ",", "residual_connection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.IntModel.__init__": [[180, 206], ["torch.Module.__init__", "enumerate", "getattr", "getattr", "range", "fix_quant_ops.FXQAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "setattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "head", ",", "body", ",", "tail", ",", "classifier", ",", "block_setting", ")", ":", "\n", "        ", "super", "(", "IntModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_setting", "=", "block_setting", "\n", "\n", "# head", "\n", "self", ".", "head", "=", "head", "\n", "\n", "# body", "\n", "for", "idx", ",", "[", "t", ",", "c", ",", "n", ",", "s", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ",", "\n", "body", "[", "f'stage_{idx}_layer_{i}'", "]", ")", "\n", "\n", "# tail", "\n", "", "", "self", ".", "tail", "=", "tail", "\n", "\n", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# classifier", "\n", "", "self", ".", "classifier", "=", "classifier", "\n", "\n", "self", ".", "int_op_only", "=", "getattr", "(", "head", ",", "'int_op_only'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.IntModel.forward": [[207, 275], ["getattr", "getattr", "fix_mobilenet_v2.IntModel.head", "setattr", "enumerate", "fix_quant_ops.int_op_only_fix_quant", "fix_mobilenet_v2.IntModel.tail", "setattr", "getattr", "fix_mobilenet_v2.IntModel.classifier().float", "getattr", "getattr.div_", "enumerate", "fix_mobilenet_v2.IntModel.tail", "getattr.div_", "fix_mobilenet_v2.IntModel.avgpool", "getattr.view", "fix_mobilenet_v2.IntModel.classifier", "range", "fix_mobilenet_v2.IntModel.tail[].input_fraclen.item", "fix_mobilenet_v2.IntModel.avgpool", "getattr.view", "setattr", "fix_quant_ops.int_op_only_fix_quant", "fix_mobilenet_v2.IntModel.avgpool", "getattr.view", "getattr.div_", "hasattr", "setattr", "range", "getattr.size", "getattr", "getattr.", "getattr.size", "fix_mobilenet_v2.IntModel.classifier[].input_fraclen.item", "getattr.float", "getattr.size", "fix_mobilenet_v2.IntModel.classifier", "layer_", "layer_", "getattr", "getattr.", "fix_quant_ops.fix_quant", "fix_mobilenet_v2.IntModel.classifier[].input_fraclen.float", "fix_mobilenet_v2.IntModel.classifier[].input_fraclen.float", "fix_quant_ops.fix_quant", "fix_quant_ops.fix_quant", "fix_quant_ops.fix_quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "\n", "if", "getattr", "(", "self", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "output_fraclen", "=", "(", "self", ".", "head", "[", "0", "]", ".", "weight_fraclen", "+", "\n", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "for", "idx", ",", "[", "_", ",", "_", ",", "n", ",", "_", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "blk", "=", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "", "", "x", "=", "int_op_only_fix_quant", "(", "x", ",", "8", ",", "self", ".", "tail", "[", "0", "]", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "x", ".", "output_fraclen", ",", "\n", "self", ".", "tail", "[", "0", "]", ".", "input_symmetric", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "output_fraclen", "=", "(", "self", ".", "tail", "[", "0", "]", ".", "weight_fraclen", "+", "\n", "self", ".", "tail", "[", "0", "]", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "                ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "x", "=", "int_op_only_fix_quant", "(", "\n", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "x", ".", "output_fraclen", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "\n", "", "else", ":", "\n", "                ", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ".", "float", "(", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", ".", "div_", "(", "2", "**", "output_fraclen", ")", "\n", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "float", "(", ")", ",", "\n", "1", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "float", "(", ")", ")", ")", ".", "int", "(", ")", "\n", "", "x", "=", "self", ".", "classifier", "(", "x", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ":", "\n", "                ", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "head", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "(", "x", "*", "(", "2", "**", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "", "for", "layer_", "in", "self", ".", "head", ":", "\n", "                ", "if", "hasattr", "(", "x", ",", "'output_fraclen'", ")", ":", "\n", "                    ", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "layer_", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "layer_", "(", "x", ")", "\n", "output_fraclen", "=", "layer_", ".", "weight_fraclen", "+", "layer_", ".", "input_fraclen", "\n", "", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "x", ".", "div_", "(", "2", "**", "x", ".", "output_fraclen", ")", "\n", "for", "idx", ",", "[", "_", ",", "_", ",", "n", ",", "_", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "blk", "=", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "", "", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "tail", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "tail", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "tail", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "x", ".", "div_", "(", "2", "**", "(", "self", ".", "tail", "[", "0", "]", ".", "input_fraclen", "+", "\n", "self", ".", "tail", "[", "0", "]", ".", "weight_fraclen", ")", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.Model.__init__": [[278, 374], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "enumerate", "torch.Sequential", "torch.Sequential", "prev_layer.set_following_layer", "getattr", "torch.Sequential", "torch.Sequential", "prev_layer.set_following_layer", "fix_quant_ops.ReLUClipFXQConvBN", "torch.ReLU", "torch.ReLU", "range", "fix_quant_ops.ReLUClipFXQConvBN", "torch.ReLU", "torch.ReLU", "fix_quant_ops.FXQAvgPool2d", "getattr", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "fix_quant_ops.ReLUClipFXQLinear", "fix_mobilenet_v2.Model.reset_parameters", "setattr", "fix_mobilenet_v2.InvertedResidual.get_master_layer", "prev_layer.set_following_layer", "getattr", "fix_mobilenet_v2.InvertedResidual", "fix_mobilenet_v2.InvertedResidual", "fix_mobilenet_v2.InvertedResidual.master_child", "len", "getattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.reset_parameters", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.master_child"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# setting of inverted residual blocks", "\n", "self", ".", "block_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# head", "\n", "channels", "=", "32", "\n", "first_stride", "=", "2", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQConvBN", "(", "\n", "3", ",", "\n", "channels", ",", "\n", "3", ",", "\n", "first_stride", ",", "\n", "1", ",", "\n", "bitw_min", "=", "None", ",", "\n", "bita_min", "=", "8", ",", "\n", "weight_only", "=", "not", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ",", "\n", "double_side", "=", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "prev_layer", "=", "self", ".", "head", "[", "0", "]", "\n", "\n", "double_side", "=", "True", "\n", "# body", "\n", "master_layer", "=", "None", "\n", "for", "idx", ",", "[", "t", ",", "c", ",", "n", ",", "s", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "outp", "=", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "layer", "=", "InvertedResidual", "(", "\n", "channels", ",", "\n", "outp", ",", "\n", "s", ",", "\n", "t", ",", "\n", "double_side", "=", "double_side", "if", "idx", "!=", "0", "else", "False", ",", "\n", "master_layer", "=", "master_layer", ")", "\n", "", "else", ":", "\n", "                    ", "layer", "=", "InvertedResidual", "(", "channels", ",", "\n", "outp", ",", "\n", "1", ",", "\n", "t", ",", "\n", "double_side", "=", "double_side", ",", "\n", "master_layer", "=", "master_layer", ")", "\n", "", "setattr", "(", "self", ",", "'stage_{}_layer_{}'", ".", "format", "(", "idx", ",", "i", ")", ",", "layer", ")", "\n", "channels", "=", "outp", "\n", "master_layer", "=", "layer", ".", "get_master_layer", "(", ")", "\n", "prev_layer", ".", "set_following_layer", "(", "layer", ".", "master_child", "(", ")", ")", "\n", "prev_layer", "=", "layer", "\n", "\n", "# tail", "\n", "", "", "outp", "=", "1280", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQConvBN", "(", "channels", ",", "\n", "outp", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "double_side", "=", "double_side", ",", "\n", "master_layer", "=", "master_layer", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "prev_layer", ".", "set_following_layer", "(", "self", ".", "tail", "[", "0", "]", ")", "\n", "prev_layer", "=", "self", ".", "tail", "[", "0", "]", "\n", "\n", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'pool_fusing'", ",", "False", ")", ":", "\n", "                ", "stage_idx", "=", "len", "(", "self", ".", "block_setting", ")", "-", "1", "\n", "layer_idx", "=", "self", ".", "block_setting", "[", "-", "1", "]", "[", "1", "]", "-", "1", "\n", "last_conv_layer", "=", "self", ".", "tail", "[", "0", "]", "\n", "last_conv_layer", ".", "avgpool_scale", "=", "self", ".", "avgpool", ".", "scale", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# classifier", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQLinear", "(", "\n", "outp", ",", "\n", "num_classes", ",", "\n", "bitw_min", "=", "None", ",", "\n", "bias", "=", "True", ")", ")", "\n", "prev_layer", ".", "set_following_layer", "(", "self", ".", "classifier", "[", "0", "]", ")", "\n", "\n", "if", "FLAGS", ".", "reset_parameters", ":", "\n", "            ", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.Model.forward": [[375, 385], ["fix_mobilenet_v2.Model.head", "enumerate", "fix_mobilenet_v2.Model.tail", "fix_mobilenet_v2.Model.avgpool", "fix_mobilenet_v2.Model.view", "fix_mobilenet_v2.Model.classifier", "range", "fix_mobilenet_v2.Model.size", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "for", "idx", ",", "[", "_", ",", "_", ",", "n", ",", "_", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ",", "'stage_{}_layer_{}'", ".", "format", "(", "idx", ",", "i", ")", ")", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.Model.reset_parameters": [[386, 404], ["fix_mobilenet_v2.Model.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "\n", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v2.Model.int_model": [[405, 424], ["getattr", "head[].int_conv", "tail[].int_conv", "classifier[].int_fc", "fix_mobilenet_v2.IntModel", "fix_quant_ops.FXQAvgPool2d", "getattr().int_block", "enumerate", "range", "getattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.int_fc", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.int_block"], ["", "", "", "", "def", "int_model", "(", "self", ")", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "avgpool_scale", "=", "avgpool", ".", "scale", "\n", "", "else", ":", "\n", "            ", "avgpool_scale", "=", "1.0", "\n", "", "head", "=", "self", ".", "head", "\n", "head", "[", "0", "]", "=", "head", "[", "0", "]", ".", "int_conv", "(", ")", "\n", "body", "=", "{", "\n", "f'stage_{idx}_layer_{i}'", ":", "\n", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", ".", "int_block", "(", ")", "\n", "for", "idx", ",", "[", "t", ",", "c", ",", "n", ",", "s", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", "\n", "for", "i", "in", "range", "(", "n", ")", "\n", "}", "\n", "tail", "=", "self", ".", "tail", "\n", "tail", "[", "0", "]", "=", "tail", "[", "0", "]", ".", "int_conv", "(", "avgpool_scale", "=", "avgpool_scale", ")", "\n", "classifier", "=", "self", ".", "classifier", "\n", "classifier", "[", "0", "]", "=", "classifier", "[", "0", "]", ".", "int_fc", "(", ")", "\n", "return", "IntModel", "(", "head", ",", "body", ",", "tail", ",", "classifier", ",", "self", ".", "block_setting", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.IntBlock.__init__": [[18, 22], ["torch.Module.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "body", ")", ":", "\n", "        ", "super", "(", "IntBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "body", "\n", "self", ".", "int_op_only", "=", "getattr", "(", "body", ",", "'int_op_only'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.IntBlock.forward": [[23, 51], ["getattr", "getattr", "isinstance", "isinstance", "fix_quant_ops.int_op_only_fix_quant", "layer_", "setattr", "layer_", "layer_", "layer_.div_", "layer_", "layer_.input_fraclen.item", "fix_quant_ops.fix_quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "\n", "if", "getattr", "(", "self", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "res", "=", "x", "\n", "for", "layer_", "in", "self", ".", "body", ":", "\n", "                ", "if", "isinstance", "(", "layer_", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "res", "=", "int_op_only_fix_quant", "(", "res", ",", "8", ",", "\n", "layer_", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "res", ".", "output_fraclen", ",", "\n", "layer_", ".", "input_symmetric", ")", "\n", "res", "=", "layer_", "(", "res", ")", "\n", "output_fraclen", "=", "(", "layer_", ".", "weight_fraclen", "+", "\n", "layer_", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "layer_", "(", "res", ")", "\n", "", "", "", "else", ":", "\n", "            ", "res", "=", "x", "\n", "for", "layer_", "in", "self", ".", "body", ":", "\n", "                ", "if", "isinstance", "(", "layer_", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "res", "=", "(", "fix_quant", "(", "res", ",", "8", ",", "layer_", ".", "input_fraclen", ",", "1", ",", "\n", "layer_", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "layer_", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "res", "=", "layer_", "(", "res", ")", "\n", "res", ".", "div_", "(", "2", "**", "(", "layer_", ".", "weight_fraclen", "+", "layer_", ".", "input_fraclen", ")", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "layer_", "(", "res", ")", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.DepthwiseSeparableConv.__init__": [[54, 67], ["torch.Module.__init__", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "outp", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DepthwiseSeparableConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "l1", "=", "ReLUClipFXQConvBN", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ")", "\n", "l2", "=", "ReLUClipFXQConvBN", "(", "inp", ",", "outp", ",", "1", ",", "1", ",", "0", ")", "\n", "layers", "=", "[", "\n", "l1", ",", "\n", "l2", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "layer_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.DepthwiseSeparableConv.forward": [[68, 70], ["fix_mobilenet_v1.DepthwiseSeparableConv.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "body", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.DepthwiseSeparableConv.set_following_layer": [[71, 75], ["fix_mobilenet_v1.DepthwiseSeparableConv.body[].set_following_layer", "fix_mobilenet_v1.DepthwiseSeparableConv.body[].set_following_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer"], ["", "def", "set_following_layer", "(", "self", ",", "following_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'following'", "]", "=", "following_layer", "\n", "self", ".", "body", "[", "0", "]", ".", "set_following_layer", "(", "self", ".", "body", "[", "1", "]", ")", "\n", "self", ".", "body", "[", "1", "]", ".", "set_following_layer", "(", "following_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.DepthwiseSeparableConv.get_following_layer": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_following_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'following'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.DepthwiseSeparableConv.master_child": [[79, 81], ["None"], "methods", ["None"], ["", "def", "master_child", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "body", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.DepthwiseSeparableConv.int_block": [[82, 93], ["fix_mobilenet_v1.DepthwiseSeparableConv.body[].int_conv", "fix_mobilenet_v1.DepthwiseSeparableConv.body[].int_conv", "torch.Sequential", "torch.Sequential", "fix_mobilenet_v1.IntBlock", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv"], ["", "def", "int_block", "(", "self", ",", "avgpool_scale", "=", "1.0", ")", ":", "\n", "        ", "l1", "=", "self", ".", "body", "[", "0", "]", ".", "int_conv", "(", ")", "\n", "l2", "=", "self", ".", "body", "[", "1", "]", ".", "int_conv", "(", "avgpool_scale", "=", "avgpool_scale", ")", "\n", "layers", "=", "[", "\n", "l1", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "l2", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "return", "IntBlock", "(", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.IntModel.__init__": [[96, 119], ["torch.Module.__init__", "enumerate", "getattr", "getattr", "range", "fix_quant_ops.FXQAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "setattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "head", ",", "body", ",", "classifier", ",", "block_setting", ")", ":", "\n", "        ", "super", "(", "IntModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_setting", "=", "block_setting", "\n", "\n", "# head", "\n", "self", ".", "head", "=", "head", "\n", "\n", "# body", "\n", "for", "idx", ",", "[", "c", ",", "n", ",", "s", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ",", "\n", "body", "[", "f'stage_{idx}_layer_{i}'", "]", ")", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# classifier", "\n", "", "self", ".", "classifier", "=", "classifier", "\n", "\n", "self", ".", "int_op_only", "=", "getattr", "(", "head", ",", "'int_op_only'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.IntModel.forward": [[120, 169], ["getattr", "getattr", "fix_mobilenet_v1.IntModel.head", "setattr", "enumerate", "getattr", "fix_mobilenet_v1.IntModel.classifier().float", "getattr", "fix_mobilenet_v1.IntModel.head", "getattr.div_", "enumerate", "fix_mobilenet_v1.IntModel.avgpool", "getattr.view", "fix_mobilenet_v1.IntModel.classifier", "range", "fix_mobilenet_v1.IntModel.avgpool", "getattr.view", "setattr", "fix_quant_ops.int_op_only_fix_quant", "fix_mobilenet_v1.IntModel.avgpool", "getattr.view", "getattr.div_", "range", "getattr.size", "getattr", "getattr.", "getattr.size", "fix_mobilenet_v1.IntModel.classifier[].input_fraclen.item", "getattr.float", "getattr.size", "fix_mobilenet_v1.IntModel.classifier", "getattr", "getattr.", "fix_quant_ops.fix_quant", "fix_mobilenet_v1.IntModel.classifier[].input_fraclen.float", "fix_mobilenet_v1.IntModel.classifier[].input_fraclen.float", "fix_quant_ops.fix_quant", "fix_quant_ops.fix_quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "\n", "if", "getattr", "(", "self", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "output_fraclen", "=", "(", "self", ".", "head", "[", "0", "]", ".", "weight_fraclen", "+", "\n", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "for", "idx", ",", "[", "_", ",", "n", ",", "_", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "blk", "=", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "                ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "x", "=", "int_op_only_fix_quant", "(", "\n", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "x", ".", "output_fraclen", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "\n", "", "else", ":", "\n", "                ", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ".", "float", "(", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", ".", "div_", "(", "2", "**", "output_fraclen", ")", "\n", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "float", "(", ")", ",", "\n", "1", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "float", "(", ")", ")", ")", ".", "int", "(", ")", "\n", "", "x", "=", "self", ".", "classifier", "(", "x", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ":", "\n", "                ", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "head", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "(", "x", "*", "(", "2", "**", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", ".", "div_", "(", "2", "**", "(", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", "+", "\n", "self", ".", "head", "[", "0", "]", ".", "weight_fraclen", ")", ")", "\n", "for", "idx", ",", "[", "_", ",", "n", ",", "_", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "blk", "=", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.Model.__init__": [[172, 234], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "enumerate", "getattr", "torch.Sequential", "torch.Sequential", "prev_layer.set_following_layer", "fix_quant_ops.ReLUClipFXQConvBN", "torch.ReLU", "torch.ReLU", "range", "fix_quant_ops.FXQAvgPool2d", "getattr", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "fix_quant_ops.ReLUClipFXQLinear", "fix_mobilenet_v1.Model.reset_parameters", "setattr", "prev_layer.set_following_layer", "getattr", "getattr", "fix_mobilenet_v1.DepthwiseSeparableConv", "fix_mobilenet_v1.DepthwiseSeparableConv", "fix_mobilenet_v1.DepthwiseSeparableConv.master_child", "len", "getattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.reset_parameters", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.master_child"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# setting of inverted residual blocks", "\n", "self", ".", "block_setting", "=", "[", "\n", "# c, n, s", "\n", "[", "64", ",", "1", ",", "1", "]", ",", "\n", "[", "128", ",", "2", ",", "2", "]", ",", "\n", "[", "256", ",", "2", ",", "2", "]", ",", "\n", "[", "512", ",", "6", ",", "2", "]", ",", "\n", "[", "1024", ",", "2", ",", "2", "]", ",", "\n", "]", "\n", "\n", "# head", "\n", "channels", "=", "32", "\n", "first_stride", "=", "2", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQConvBN", "(", "\n", "3", ",", "\n", "channels", ",", "\n", "3", ",", "\n", "first_stride", ",", "\n", "1", ",", "\n", "bitw_min", "=", "None", ",", "\n", "bita_min", "=", "8", ",", "\n", "weight_only", "=", "not", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ",", "\n", "double_side", "=", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "prev_layer", "=", "self", ".", "head", "[", "0", "]", "\n", "\n", "# body", "\n", "for", "idx", ",", "[", "c", ",", "n", ",", "s", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "outp", "=", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "layer", "=", "DepthwiseSeparableConv", "(", "channels", ",", "outp", ",", "s", ")", "\n", "", "else", ":", "\n", "                    ", "layer", "=", "DepthwiseSeparableConv", "(", "channels", ",", "outp", ",", "1", ")", "\n", "", "setattr", "(", "self", ",", "'stage_{}_layer_{}'", ".", "format", "(", "idx", ",", "i", ")", ",", "layer", ")", "\n", "channels", "=", "outp", "\n", "prev_layer", ".", "set_following_layer", "(", "layer", ".", "master_child", "(", ")", ")", "\n", "prev_layer", "=", "layer", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'pool_fusing'", ",", "False", ")", ":", "\n", "                ", "stage_idx", "=", "len", "(", "self", ".", "block_setting", ")", "-", "1", "\n", "layer_idx", "=", "self", ".", "block_setting", "[", "-", "1", "]", "[", "1", "]", "-", "1", "\n", "last_conv_layer", "=", "getattr", "(", "\n", "self", ",", "f'stage_{stage_idx}_layer_{layer_idx}'", ")", "\n", "last_conv_layer", ".", "avgpool_scale", "=", "self", ".", "avgpool", ".", "scale", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# classifier", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQLinear", "(", "outp", ",", "num_classes", ",", "bitw_min", "=", "None", ")", ")", "\n", "prev_layer", ".", "set_following_layer", "(", "self", ".", "classifier", "[", "0", "]", ")", "\n", "\n", "if", "FLAGS", ".", "reset_parameters", ":", "\n", "            ", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.Model.forward": [[235, 244], ["fix_mobilenet_v1.Model.head", "enumerate", "fix_mobilenet_v1.Model.avgpool", "fix_mobilenet_v1.Model.view", "fix_mobilenet_v1.Model.classifier", "range", "fix_mobilenet_v1.Model.size", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "for", "idx", ",", "[", "_", ",", "n", ",", "_", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ",", "'stage_{}_layer_{}'", ".", "format", "(", "idx", ",", "i", ")", ")", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.Model.reset_parameters": [[245, 261], ["fix_mobilenet_v1.Model.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_mobilenet_v1.Model.int_model": [[262, 282], ["getattr", "head[].int_conv", "classifier[].int_fc", "fix_mobilenet_v1.IntModel", "fix_quant_ops.FXQAvgPool2d", "getattr().int_block", "enumerate", "range", "getattr", "len"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.int_fc", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.int_block"], ["", "", "", "def", "int_model", "(", "self", ")", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "avgpool_scale", "=", "avgpool", ".", "scale", "\n", "", "else", ":", "\n", "            ", "avgpool_scale", "=", "1.0", "\n", "", "head", "=", "self", ".", "head", "\n", "head", "[", "0", "]", "=", "head", "[", "0", "]", ".", "int_conv", "(", ")", "\n", "body", "=", "{", "\n", "f'stage_{idx}_layer_{i}'", ":", "\n", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", ".", "int_block", "(", "\n", "avgpool_scale", "=", "avgpool_scale", "if", "(", "\n", "idx", "==", "len", "(", "self", ".", "block_setting", ")", "-", "1", "and", "i", "==", "n", "-", "\n", "1", ")", "else", "1.0", ")", "\n", "for", "idx", ",", "[", "c", ",", "n", ",", "s", "]", "in", "enumerate", "(", "self", ".", "block_setting", ")", "\n", "for", "i", "in", "range", "(", "n", ")", "\n", "}", "\n", "classifier", "=", "self", ".", "classifier", "\n", "classifier", "[", "0", "]", "=", "classifier", "[", "0", "]", ".", "int_fc", "(", ")", "\n", "return", "IntModel", "(", "head", ",", "body", ",", "classifier", ",", "self", ".", "block_setting", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.IntBlock.__init__": [[14, 23], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "getattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "body", ",", "shortcut", "=", "None", ")", ":", "\n", "        ", "super", "(", "IntBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "body", "\n", "\n", "self", ".", "residual_connection", "=", "shortcut", "is", "None", "\n", "if", "not", "self", ".", "residual_connection", ":", "\n", "            ", "self", ".", "shortcut", "=", "shortcut", "\n", "", "self", ".", "post_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "int_op_only", "=", "getattr", "(", "body", ",", "'int_op_only'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.IntBlock.forward": [[24, 120], ["getattr", "getattr", "fix_resnet.IntBlock.post_relu", "setattr", "fix_resnet.IntBlock.post_relu", "setattr", "isinstance", "fix_quant_ops.int_op_only_fix_quant", "fix_resnet.IntBlock.shortcut", "setattr", "isinstance", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_resnet.IntBlock.shortcut", "setattr", "fix_resnet.IntBlock.div_", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.int_op_only_fix_quant", "layer_", "setattr", "layer_", "layer_.clamp_", "setattr", "layer_.clamp_", "setattr", "fix_resnet.IntBlock.shortcut[].input_fraclen.item", "layer_.clamp_", "setattr", "layer_.clamp_", "setattr", "layer_", "layer_.div_", "layer_", "layer_.input_fraclen.item", "fix_quant_ops.fix_quant", "fix_quant_ops.fix_quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "\n", "if", "getattr", "(", "self", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "res", "=", "x", "\n", "for", "layer_", "in", "self", ".", "body", ":", "\n", "                ", "if", "isinstance", "(", "layer_", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "res", "=", "int_op_only_fix_quant", "(", "res", ",", "8", ",", "\n", "layer_", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "res", ".", "output_fraclen", ",", "\n", "layer_", ".", "input_symmetric", ")", "\n", "res", "=", "layer_", "(", "res", ")", "\n", "output_fraclen", "=", "(", "layer_", ".", "weight_fraclen", "+", "\n", "layer_", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "layer_", "(", "res", ")", "\n", "", "", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "if", "res_fraclen", ">", "x_fraclen", ":", "\n", "                    ", "x", "=", "x", "<<", "(", "res_fraclen", "-", "x_fraclen", ")", "\n", "res", "+=", "x", "\n", "res", ".", "clamp_", "(", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "output_fraclen", "=", "res_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "res", "<<", "(", "x_fraclen", "-", "res_fraclen", ")", "\n", "res", "+=", "x", "\n", "res", ".", "clamp_", "(", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "output_fraclen", "=", "x_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "", "else", ":", "\n", "                ", "x", "=", "int_op_only_fix_quant", "(", "\n", "x", ",", "8", ",", "self", ".", "shortcut", "[", "0", "]", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "x", ".", "output_fraclen", ",", "self", ".", "shortcut", "[", "0", "]", ".", "input_symmetric", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "output_fraclen", "=", "(", "self", ".", "shortcut", "[", "-", "1", "]", ".", "weight_fraclen", "+", "\n", "self", ".", "shortcut", "[", "-", "1", "]", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "if", "res_fraclen", ">", "x_fraclen", ":", "\n", "                    ", "x", "=", "x", "<<", "(", "res_fraclen", "-", "x_fraclen", ")", "\n", "res", "+=", "x", "\n", "res", ".", "clamp_", "(", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "output_fraclen", "=", "res_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "res", "<<", "(", "x_fraclen", "-", "res_fraclen", ")", "\n", "res", "+=", "x", "\n", "res", ".", "clamp_", "(", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "output_fraclen", "=", "x_fraclen", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "", "res", "=", "self", ".", "post_relu", "(", "res", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "x", "\n", "for", "layer_", "in", "self", ".", "body", ":", "\n", "                ", "if", "isinstance", "(", "layer_", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "res", "=", "(", "fix_quant", "(", "res", ",", "8", ",", "layer_", ".", "input_fraclen", ",", "1", ",", "\n", "layer_", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "layer_", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "res", "=", "layer_", "(", "res", ")", "\n", "res", ".", "div_", "(", "2", "**", "(", "layer_", ".", "weight_fraclen", "+", "layer_", ".", "input_fraclen", ")", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "layer_", "(", "res", ")", "\n", "", "", "setattr", "(", "res", ",", "'output_fraclen'", ",", "\n", "self", ".", "body", "[", "-", "1", "]", ".", "weight_fraclen", "+", "self", ".", "body", "[", "-", "1", "]", ".", "input_fraclen", ")", "\n", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "", "else", ":", "\n", "                ", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "shortcut", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "shortcut", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "shortcut", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "setattr", "(", "\n", "x", ",", "'output_fraclen'", ",", "self", ".", "shortcut", "[", "-", "1", "]", ".", "weight_fraclen", "+", "\n", "self", ".", "shortcut", "[", "-", "1", "]", ".", "input_fraclen", ")", "\n", "x", ".", "div_", "(", "2", "**", "x", ".", "output_fraclen", ")", "\n", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "", "res", "=", "self", ".", "post_relu", "(", "res", ")", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.__init__": [[125, 155], ["torch.Module.__init__", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "fix_resnet.BasicBlock.set_master_layer", "fix_resnet.BasicBlock.set_master_layer", "fix_quant_ops.ReLUClipFXQConvBN"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer"], ["def", "__init__", "(", "self", ",", "inp", ",", "outp", ",", "stride", ",", "master_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "l1", "=", "ReLUClipFXQConvBN", "(", "inp", ",", "\n", "outp", ",", "\n", "3", ",", "\n", "stride", ",", "\n", "1", ",", "\n", "master_layer", "=", "master_layer", ")", "\n", "l2", "=", "ReLUClipFXQConvBN", "(", "outp", ",", "outp", ",", "3", ",", "1", ",", "1", ")", "\n", "layers", "=", "[", "\n", "l1", ",", "\n", "l2", ",", "\n", "]", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "layer_dict", "=", "{", "}", "\n", "\n", "self", ".", "residual_connection", "=", "stride", "==", "1", "and", "inp", "==", "outp", "\n", "if", "not", "self", ".", "residual_connection", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQConvBN", "(", "inp", ",", "\n", "outp", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "master_layer", "=", "master_layer", ")", ")", "\n", "self", ".", "set_master_layer", "(", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_master_layer", "(", "self", ".", "body", "[", "0", "]", ")", "\n", "", "self", ".", "post_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.forward": [[156, 187], ["fix_resnet.BasicBlock.body", "fix_resnet.BasicBlock.post_relu", "getattr", "getattr", "setattr", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_resnet.BasicBlock.shortcut", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_resnet.BasicBlock.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "and", "not", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res", "+=", "x", "\n", "", "else", ":", "\n", "                ", "res", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "", "res", "=", "self", ".", "post_relu", "(", "res", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "and", "not", "self", ".", "training", ":", "\n", "            ", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.set_master_layer": [[188, 190], ["None"], "methods", ["None"], ["", "def", "set_master_layer", "(", "self", ",", "master_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'master'", "]", "=", "master_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.get_master_layer": [[191, 193], ["None"], "methods", ["None"], ["", "def", "get_master_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'master'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.set_following_layer": [[194, 200], ["fix_resnet.BasicBlock.body[].set_following_layer", "fix_resnet.BasicBlock.body[].set_following_layer", "fix_resnet.BasicBlock.shortcut[].set_following_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer"], ["", "def", "set_following_layer", "(", "self", ",", "following_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'following'", "]", "=", "following_layer", "\n", "self", ".", "body", "[", "0", "]", ".", "set_following_layer", "(", "self", ".", "body", "[", "1", "]", ")", "\n", "self", ".", "body", "[", "1", "]", ".", "set_following_layer", "(", "following_layer", ")", "\n", "if", "not", "self", ".", "residual_connection", ":", "\n", "            ", "self", ".", "shortcut", "[", "0", "]", ".", "set_following_layer", "(", "following_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.get_following_layer": [[201, 203], ["None"], "methods", ["None"], ["", "", "def", "get_following_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'following'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.master_child": [[204, 206], ["None"], "methods", ["None"], ["", "def", "master_child", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "body", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.BasicBlock.int_block": [[207, 222], ["fix_resnet.BasicBlock.body[].int_conv", "fix_resnet.BasicBlock.body[].int_conv", "torch.Sequential", "torch.Sequential", "fix_resnet.IntBlock", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "fix_resnet.BasicBlock.shortcut[].int_conv"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv"], ["", "def", "int_block", "(", "self", ",", "avgpool_scale", "=", "1.0", ")", ":", "\n", "        ", "l1", "=", "self", ".", "body", "[", "0", "]", ".", "int_conv", "(", ")", "\n", "l2", "=", "self", ".", "body", "[", "1", "]", ".", "int_conv", "(", "avgpool_scale", "=", "avgpool_scale", ")", "\n", "layers", "=", "[", "\n", "l1", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "l2", ",", "\n", "]", "\n", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "if", "not", "self", ".", "residual_connection", ":", "\n", "            ", "shortcut", "=", "nn", ".", "Sequential", "(", "self", ".", "shortcut", "[", "0", "]", ".", "int_conv", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "None", "\n", "", "return", "IntBlock", "(", "body", ",", "shortcut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.__init__": [[227, 255], ["torch.Module.__init__", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "fix_quant_ops.ReLUClipFXQConvBN", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "fix_resnet.Bottleneck.set_master_layer", "fix_resnet.Bottleneck.set_master_layer", "fix_quant_ops.ReLUClipFXQConvBN"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer"], ["def", "__init__", "(", "self", ",", "inp", ",", "outp", ",", "stride", ",", "master_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "midp", "=", "outp", "//", "4", "\n", "l1", "=", "ReLUClipFXQConvBN", "(", "inp", ",", "midp", ",", "1", ",", "1", ",", "0", ",", "master_layer", "=", "master_layer", ")", "\n", "l2", "=", "ReLUClipFXQConvBN", "(", "midp", ",", "midp", ",", "3", ",", "stride", ",", "1", ")", "\n", "l3", "=", "ReLUClipFXQConvBN", "(", "midp", ",", "outp", ",", "1", ",", "1", ",", "0", ")", "\n", "layers", "=", "[", "\n", "l1", ",", "\n", "l2", ",", "\n", "l3", ",", "\n", "]", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "layer_dict", "=", "{", "}", "\n", "\n", "self", ".", "residual_connection", "=", "stride", "==", "1", "and", "inp", "==", "outp", "\n", "if", "not", "self", ".", "residual_connection", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQConvBN", "(", "inp", ",", "\n", "outp", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "master_layer", "=", "master_layer", ")", ")", "\n", "self", ".", "set_master_layer", "(", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_master_layer", "(", "self", ".", "body", "[", "0", "]", ")", "\n", "", "self", ".", "post_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.forward": [[256, 287], ["fix_resnet.Bottleneck.body", "fix_resnet.Bottleneck.post_relu", "getattr", "getattr", "setattr", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_resnet.Bottleneck.shortcut", "max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_resnet.Bottleneck.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "and", "not", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "res_fraclen", "=", "res", ".", "output_fraclen", "\n", "x_fraclen", "=", "x", ".", "output_fraclen", "\n", "output_fraclen", "=", "max", "(", "res_fraclen", ",", "x_fraclen", ")", "\n", "res", "=", "res", "*", "2", "**", "output_fraclen", "\n", "x", "=", "x", "*", "2", "**", "output_fraclen", "\n", "res", "+=", "x", "\n", "res", "=", "torch", ".", "clamp", "(", "res", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "res", "=", "res", "/", "2", "**", "output_fraclen", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "residual_connection", ":", "\n", "                ", "res", "+=", "x", "\n", "", "else", ":", "\n", "                ", "res", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "", "res", "=", "self", ".", "post_relu", "(", "res", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "and", "not", "self", ".", "training", ":", "\n", "            ", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.set_master_layer": [[288, 290], ["None"], "methods", ["None"], ["", "def", "set_master_layer", "(", "self", ",", "master_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'master'", "]", "=", "master_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.get_master_layer": [[291, 293], ["None"], "methods", ["None"], ["", "def", "get_master_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'master'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.set_following_layer": [[294, 301], ["fix_resnet.Bottleneck.body[].set_following_layer", "fix_resnet.Bottleneck.body[].set_following_layer", "fix_resnet.Bottleneck.body[].set_following_layer", "fix_resnet.Bottleneck.shortcut[].set_following_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer"], ["", "def", "set_following_layer", "(", "self", ",", "following_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'following'", "]", "=", "following_layer", "\n", "self", ".", "body", "[", "0", "]", ".", "set_following_layer", "(", "self", ".", "body", "[", "1", "]", ")", "\n", "self", ".", "body", "[", "1", "]", ".", "set_following_layer", "(", "self", ".", "body", "[", "2", "]", ")", "\n", "self", ".", "body", "[", "2", "]", ".", "set_following_layer", "(", "following_layer", ")", "\n", "if", "not", "self", ".", "residual_connection", ":", "\n", "            ", "self", ".", "shortcut", "[", "0", "]", ".", "set_following_layer", "(", "following_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.get_following_layer": [[302, 304], ["None"], "methods", ["None"], ["", "", "def", "get_following_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'following'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.master_child": [[305, 307], ["None"], "methods", ["None"], ["", "def", "master_child", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "body", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.int_block": [[308, 320], ["fix_resnet.Bottleneck.body[].int_conv", "fix_resnet.Bottleneck.body[].int_conv", "fix_resnet.Bottleneck.body[].int_conv", "torch.Sequential", "torch.Sequential", "fix_resnet.IntBlock", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "fix_resnet.Bottleneck.shortcut[].int_conv"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv"], ["", "def", "int_block", "(", "self", ",", "avgpool_scale", "=", "1.0", ")", ":", "\n", "        ", "l1", "=", "self", ".", "body", "[", "0", "]", ".", "int_conv", "(", ")", "\n", "l2", "=", "self", ".", "body", "[", "1", "]", ".", "int_conv", "(", ")", "\n", "l3", "=", "self", ".", "body", "[", "2", "]", ".", "int_conv", "(", "avgpool_scale", "=", "avgpool_scale", ")", "\n", "layers", "=", "[", "l1", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "l2", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "l3", "]", "\n", "body", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "if", "not", "self", ".", "residual_connection", ":", "\n", "            ", "shortcut", "=", "nn", ".", "Sequential", "(", "self", ".", "shortcut", "[", "0", "]", ".", "int_conv", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "None", "\n", "", "return", "IntBlock", "(", "body", ",", "shortcut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.IntModel.__init__": [[323, 351], ["torch.Module.__init__", "getattr", "enumerate", "getattr", "getattr", "fix_quant_ops.FXQMaxPool2d", "range", "fix_quant_ops.FXQAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "setattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "head", ",", "body", ",", "classifier", ",", "block_setting", ")", ":", "\n", "        ", "super", "(", "IntModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_setting", "=", "block_setting", "\n", "\n", "# head", "\n", "self", ".", "head", "=", "head", "\n", "\n", "if", "getattr", "(", "FLAGS", ",", "'quant_maxpool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "head", "[", "-", "1", "]", "=", "FXQMaxPool2d", "(", "self", ".", "head", "[", "-", "1", "]", ".", "kernel_size", ",", "\n", "self", ".", "head", "[", "-", "1", "]", ".", "stride", ",", "\n", "self", ".", "head", "[", "-", "1", "]", ".", "padding", ")", "\n", "\n", "# body", "\n", "", "for", "idx", ",", "n", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ",", "\n", "body", "[", "f'stage_{idx}_layer_{i}'", "]", ")", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# classifier", "\n", "", "self", ".", "classifier", "=", "classifier", "\n", "\n", "self", ".", "int_op_only", "=", "getattr", "(", "head", ",", "'int_op_only'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.IntModel.forward": [[352, 411], ["getattr", "getattr", "getattr", "setattr", "enumerate", "getattr", "fix_resnet.IntModel.classifier().float", "getattr", "getattr.div_", "enumerate", "fix_resnet.IntModel.avgpool", "getattr.view", "fix_resnet.IntModel.classifier", "fix_resnet.IntModel.head", "range", "fix_resnet.IntModel.avgpool", "getattr.view", "setattr", "fix_quant_ops.int_op_only_fix_quant", "fix_resnet.IntModel.avgpool", "getattr.view", "getattr.div_", "hasattr", "setattr", "range", "getattr.size", "getattr", "getattr.", "getattr.size", "fix_resnet.IntModel.classifier[].input_fraclen.item", "getattr.float", "getattr.size", "fix_resnet.IntModel.classifier", "layer_", "layer_", "getattr", "getattr.", "getattr.float", "fix_quant_ops.fix_quant", "fix_resnet.IntModel.classifier[].input_fraclen.float", "fix_resnet.IntModel.classifier[].input_fraclen.float", "fix_quant_ops.fix_quant", "fix_quant_ops.fix_quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "\n", "if", "getattr", "(", "self", ",", "'int_op_only'", ",", "False", ")", ":", "\n", "            ", "if", "getattr", "(", "FLAGS", ",", "'quant_maxpool'", ",", "False", ")", ":", "\n", "                ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "head", "[", ":", "-", "1", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "[", "-", "1", "]", "(", "x", ".", "float", "(", ")", ")", ".", "int", "(", ")", "\n", "", "output_fraclen", "=", "(", "self", ".", "head", "[", "0", "]", ".", "weight_fraclen", "+", "\n", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ".", "item", "(", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "blk", "=", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "                ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "x", "=", "int_op_only_fix_quant", "(", "\n", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "item", "(", ")", ",", "\n", "x", ".", "output_fraclen", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "\n", "", "else", ":", "\n", "                ", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ".", "float", "(", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", ".", "div_", "(", "2", "**", "output_fraclen", ")", "\n", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "float", "(", ")", ",", "\n", "1", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ".", "float", "(", ")", ")", ")", ".", "int", "(", ")", "\n", "", "x", "=", "self", ".", "classifier", "(", "x", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ":", "\n", "                ", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "head", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "(", "x", "*", "(", "2", "**", "self", ".", "head", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "", "for", "layer_", "in", "self", ".", "head", ":", "\n", "                ", "if", "hasattr", "(", "x", ",", "'output_fraclen'", ")", ":", "\n", "                    ", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "layer_", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "layer_", "(", "x", ")", "\n", "output_fraclen", "=", "layer_", ".", "weight_fraclen", "+", "layer_", ".", "input_fraclen", "\n", "", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "x", ".", "div_", "(", "2", "**", "x", ".", "output_fraclen", ")", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "blk", "=", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "(", "fix_quant", "(", "x", ",", "8", ",", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ",", "1", ",", "\n", "self", ".", "classifier", "[", "0", "]", ".", "input_symmetric", ")", "[", "0", "]", "*", "\n", "(", "2", "**", "self", ".", "classifier", "[", "0", "]", ".", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.__init__": [[414, 488], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "enumerate", "getattr", "torch.Sequential", "torch.Sequential", "prev_layer.set_following_layer", "fix_quant_ops.ReLUClipFXQConvBN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "range", "fix_quant_ops.FXQAvgPool2d", "getattr", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "fix_quant_ops.ReLUClipFXQLinear", "fix_resnet.Model.reset_parameters", "setattr", "block.get_master_layer", "prev_layer.set_following_layer", "getattr", "getattr", "block", "block", "block.master_child", "len", "getattr"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.reset_parameters", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.master_child"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_type_dict", "=", "{", "\n", "18", ":", "BasicBlock", ",", "\n", "34", ":", "BasicBlock", ",", "\n", "50", ":", "Bottleneck", ",", "\n", "101", ":", "Bottleneck", ",", "\n", "152", ":", "Bottleneck", "\n", "}", "\n", "block", "=", "block_type_dict", "[", "FLAGS", ".", "depth", "]", "\n", "\n", "# head", "\n", "channels", "=", "64", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQConvBN", "(", "\n", "3", ",", "\n", "channels", ",", "\n", "7", ",", "\n", "2", ",", "\n", "3", ",", "\n", "bitw_min", "=", "None", ",", "\n", "bita_min", "=", "8", ",", "\n", "weight_only", "=", "not", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ",", "\n", "double_side", "=", "getattr", "(", "FLAGS", ",", "'normalize'", ",", "False", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ")", ")", "\n", "prev_layer", "=", "self", ".", "head", "[", "0", "]", "\n", "\n", "# setting of inverted residual blocks", "\n", "self", ".", "block_setting_dict", "=", "{", "\n", "# : [stage1, stage2, stage3, stage4]", "\n", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "34", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "152", ":", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "}", "\n", "self", ".", "block_setting", "=", "self", ".", "block_setting_dict", "[", "FLAGS", ".", "depth", "]", "\n", "\n", "feats", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n", "# body", "\n", "master_layer", "=", "None", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "outp", "=", "feats", "[", "idx", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "idx", "!=", "0", ":", "\n", "                    ", "layer", "=", "block", "(", "channels", ",", "outp", ",", "2", ",", "master_layer", "=", "master_layer", ")", "\n", "", "else", ":", "\n", "                    ", "layer", "=", "block", "(", "channels", ",", "outp", ",", "1", ",", "master_layer", "=", "master_layer", ")", "\n", "", "setattr", "(", "self", ",", "'stage_{}_layer_{}'", ".", "format", "(", "idx", ",", "i", ")", ",", "layer", ")", "\n", "channels", "=", "outp", "\n", "master_layer", "=", "layer", ".", "get_master_layer", "(", ")", "\n", "prev_layer", ".", "set_following_layer", "(", "layer", ".", "master_child", "(", ")", ")", "\n", "prev_layer", "=", "layer", "\n", "\n", "", "", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "self", ".", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "if", "getattr", "(", "FLAGS", ",", "'pool_fusing'", ",", "False", ")", ":", "\n", "                ", "stage_idx", "=", "len", "(", "self", ".", "block_setting", ")", "-", "1", "\n", "layer_idx", "=", "self", ".", "block_setting", "[", "-", "1", "]", "-", "1", "\n", "last_conv_layer", "=", "getattr", "(", "\n", "self", ",", "f'stage_{stage_idx}_layer_{layer_idx}'", ")", "\n", "last_conv_layer", ".", "avgpool_scale", "=", "self", ".", "avgpool", ".", "scale", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# classifier", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "ReLUClipFXQLinear", "(", "outp", ",", "num_classes", ",", "bitw_min", "=", "None", ")", ")", "\n", "prev_layer", ".", "set_following_layer", "(", "self", ".", "classifier", "[", "0", "]", ")", "\n", "\n", "if", "FLAGS", ".", "reset_parameters", ":", "\n", "            ", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.forward": [[489, 508], ["enumerate", "fix_resnet.Model.avgpool", "layer_.view", "fix_resnet.Model.classifier", "getattr", "fix_resnet.Model.head", "range", "layer_.size", "hasattr", "setattr", "layer_", "layer_", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'int_infer'", ",", "False", ")", "and", "not", "self", ".", "training", ":", "\n", "            ", "for", "layer_", "in", "self", ".", "head", ":", "\n", "                ", "if", "hasattr", "(", "x", ",", "'output_fraclen'", ")", ":", "\n", "                    ", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "x", "=", "layer_", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "layer_", "(", "x", ")", "\n", "output_fraclen", "=", "x", ".", "output_fraclen", "\n", "", "setattr", "(", "x", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "", "for", "idx", ",", "n", "in", "enumerate", "(", "self", ".", "block_setting", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ",", "'stage_{}_layer_{}'", ".", "format", "(", "idx", ",", "i", ")", ")", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.reset_parameters": [[509, 525], ["fix_resnet.Model.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Model.int_model": [[526, 545], ["getattr", "head[].int_conv", "classifier[].int_fc", "fix_resnet.IntModel", "fix_quant_ops.FXQAvgPool2d", "getattr().int_block", "enumerate", "range", "getattr", "len"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.int_fc", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_resnet.Bottleneck.int_block"], ["", "", "", "def", "int_model", "(", "self", ")", ":", "\n", "        ", "if", "getattr", "(", "FLAGS", ",", "'quant_avgpool'", ",", "False", ")", ":", "\n", "            ", "avgpool", "=", "FXQAvgPool2d", "(", "7", ")", "\n", "avgpool_scale", "=", "avgpool", ".", "scale", "\n", "", "else", ":", "\n", "            ", "avgpool_scale", "=", "1.0", "\n", "", "head", "=", "self", ".", "head", "\n", "head", "[", "0", "]", "=", "head", "[", "0", "]", ".", "int_conv", "(", ")", "\n", "body", "=", "{", "\n", "f'stage_{idx}_layer_{i}'", ":", "\n", "getattr", "(", "self", ",", "f'stage_{idx}_layer_{i}'", ")", ".", "int_block", "(", "\n", "avgpool_scale", "=", "avgpool_scale", "if", "(", "\n", "idx", "==", "len", "(", "self", ".", "block_setting", ")", "-", "1", "and", "i", "==", "n", "-", "\n", "1", ")", "else", "1.0", ")", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "self", ".", "block_setting", ")", "for", "i", "in", "range", "(", "n", ")", "\n", "}", "\n", "classifier", "=", "self", ".", "classifier", "\n", "classifier", "[", "0", "]", "=", "classifier", "[", "0", "]", ".", "int_fc", "(", ")", "\n", "return", "IntModel", "(", "head", ",", "body", ",", "classifier", ",", "self", ".", "block_setting", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.q_k.forward": [[46, 57], ["fix_quant_ops.fix_quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "wl", "=", "8", ",", "\n", "fl", "=", "0", ",", "\n", "align_dim", "=", "0", ",", "\n", "signed", "=", "True", ",", "\n", "floating", "=", "False", ")", ":", "\n", "        ", "res", ",", "grad_flag", "=", "fix_quant", "(", "input", ",", "wl", ",", "fl", ",", "align_dim", ",", "signed", ",", "floating", ")", "\n", "ctx", ".", "grad_scale", "=", "grad_flag", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.q_k.backward": [[58, 62], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_output", "*", "ctx", ".", "grad_scale", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.FXQAvgPool2d.__init__": [[118, 125], ["torch.AvgPool2d.__init__", "torch.round().int().item", "torch.round().int().item", "torch.round().int().item", "torch.round().int().item", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round().int", "torch.round", "torch.round", "torch.round", "torch.round", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "FXQAvgPool2d", ",", "self", ")", ".", "__init__", "(", "kernel_size", "=", "kernel_size", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "shiftnum", "=", "torch", ".", "round", "(", "\n", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "self", ".", "kernel_size", "**", "2", ")", ")", ")", ".", "int", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "scale", "=", "2", "**", "self", ".", "shiftnum", "/", "(", "self", ".", "kernel_size", "**", "2", ")", "\n", "self", ".", "int_op_only", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.FXQAvgPool2d.forward": [[126, 139], ["x.sum().sum", "torch.all", "torch.all", "torch.all", "torch.all", "x.sum().sum.int", "setattr", "x.sum().sum", "x.sum().sum.div_", "x.sum", "x.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "int_op_only", ":", "\n", "            ", "output_fraclen", "=", "x", ".", "output_fraclen", "+", "self", ".", "shiftnum", "\n", "assert", "output_fraclen", "<=", "32", "\n", "res", "=", "x", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "\n", "-", "1", ")", "## will automatically convert int32 to int64", "\n", "assert", "torch", ".", "all", "(", "res", "<=", "(", "1", "<<", "32", ")", "-", "1", ")", "\n", "res", "=", "res", ".", "int", "(", ")", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "x", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "res", ".", "div_", "(", "2", "**", "self", ".", "shiftnum", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.FXQMaxPool2d.__init__": [[142, 149], ["torch.MaxPool2d.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", "=", "None", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "FXQMaxPool2d", ",", "self", ")", ".", "__init__", "(", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.FXQMaxPool2d.forward": [[150, 158], ["getattr", "torch.functional.pad", "torch.functional.pad", "setattr", "[].max", "torch.functional.pad.unfold().unfold().max", "torch.functional.pad.unfold().unfold", "torch.functional.pad.unfold"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output_fraclen", "=", "getattr", "(", "x", ",", "'output_fraclen'", ",", "None", ")", "\n", "res", "=", "nn", ".", "functional", ".", "pad", "(", "x", ",", "(", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "1", "]", ",", "\n", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "padding", "[", "0", "]", ")", ")", "\n", "res", "=", "res", ".", "unfold", "(", "2", ",", "self", ".", "kernel_size", "[", "0", "]", ",", "self", ".", "stride", "[", "0", "]", ")", ".", "unfold", "(", "\n", "3", ",", "self", ".", "kernel_size", "[", "1", "]", ",", "self", ".", "stride", "[", "1", "]", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "setattr", "(", "res", ",", "'output_fraclen'", ",", "output_fraclen", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.__init__": [[161, 217], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "bn_layer", "fix_quant_ops.ReLUClipFXQConvBN.set_onnx_export", "fix_quant_ops.ReLUClipFXQConvBN.set_quant", "fix_quant_ops.ReLUClipFXQConvBN.set_alpha", "fix_quant_ops.ReLUClipFXQConvBN.set_master_layer", "fix_quant_ops.ReLUClipFXQConvBN.set_following_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_onnx_export", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bitw_min", "=", "None", ",", "\n", "bita_min", "=", "None", ",", "\n", "weight_only", "=", "False", ",", "\n", "double_side", "=", "False", ",", "\n", "rescale_forward", "=", "False", ",", "\n", "rescale_type", "=", "'constant'", ",", "\n", "onnx_export", "=", "False", ",", "\n", "master_layer", "=", "None", ",", "\n", "format_type", "=", "None", ",", "\n", "bn_momentum", "=", "0.1", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "bn_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "ReLUClipFXQConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "bn_layer", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ",", "eps", "=", "bn_eps", ")", "\n", "self", ".", "bitw_min", "=", "bitw_min", "\n", "self", ".", "bita_min", "=", "bita_min", "\n", "self", ".", "weight_only", "=", "weight_only", "\n", "self", ".", "double_side", "=", "double_side", "\n", "self", ".", "rescale_forward", "=", "rescale_forward", "\n", "self", ".", "rescale_type", "=", "rescale_type", "\n", "self", ".", "set_onnx_export", "(", "onnx_export", ")", "\n", "self", ".", "set_quant", "(", ")", "\n", "self", ".", "set_alpha", "(", ")", "\n", "self", ".", "weight_format", "=", "None", "\n", "self", ".", "input_format", "=", "None", "\n", "self", ".", "layer_dict", "=", "{", "}", "\n", "self", ".", "set_master_layer", "(", "master_layer", ")", "\n", "self", ".", "set_following_layer", "(", "None", ")", "\n", "self", ".", "floating", "=", "False", "\n", "self", ".", "floating_wo_clip", "=", "False", "\n", "self", ".", "format_type", "=", "format_type", "\n", "self", ".", "format_from_metric", "=", "False", "\n", "self", ".", "metric", "=", "None", "\n", "self", ".", "no_clipping", "=", "False", "\n", "self", ".", "input_fraclen_sharing", "=", "False", "\n", "self", ".", "format_grid_search", "=", "False", "\n", "self", ".", "quant_bias", "=", "False", "\n", "self", ".", "int_infer", "=", "False", "\n", "self", ".", "int_op_only", "=", "False", "\n", "self", ".", "avgpool_scale", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.forward": [[218, 441], ["getattr", "torch.std", "torch.std", "torch.std", "torch.std", "fix_quant_ops.ReLUClipFXQConvBN.bn", "torch.functional.conv2d.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.functional.conv2d", "torch.functional.conv2d", "fix_quant_ops.ReLUClipFXQConvBN.get_weight_format", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "fix_quant_ops.ReLUClipFXQConvBN.get_input_format", "torch.std", "torch.std", "torch.std", "torch.std", "fix_quant_ops.ReLUClipFXQConvBN.detach", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.fix_quant", "fix_quant_ops.ReLUClipFXQConvBN.int_weight.float", "fix_quant_ops.ReLUClipFXQConvBN.int_bias.float", "torch.functional.conv2d", "torch.functional.conv2d", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "setattr", "torch.functional.conv2d", "torch.functional.conv2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fix_quant_ops.ReLUClipFXQConvBN.conv.weight.detach", "torch.functional.conv2d.var", "print", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fix_quant_ops.fraclen_gridsearch", "fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.weight_metric_func", "fix_quant_ops.metric2fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.fraclen_gridsearch", "fix_quant_ops.ReLUClipFXQConvBN.update_input_fraclen", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.input_metric_func", "fix_quant_ops.metric2fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.ReLUClipFXQConvBN.update_input_fraclen", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant", "int", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "int", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.update_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.update_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "## Input", "\n", "        ", "if", "self", ".", "weight_only", ":", "\n", "            ", "if", "self", ".", "double_side", ":", "\n", "                ", "input_val", "=", "input", "*", "1.0", "\n", "", "else", ":", "\n", "                ", "input_val", "=", "torch", ".", "relu", "(", "input", ")", "\n", "", "if", "(", "self", ".", "int_infer", "or", "self", ".", "quant_bias", ")", "and", "not", "self", ".", "training", ":", "\n", "                ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ":", "\n", "                ", "if", "self", ".", "double_side", ":", "\n", "                    ", "input_val", "=", "input", "*", "1.0", "\n", "", "else", ":", "\n", "                    ", "input_val", "=", "torch", ".", "relu", "(", "input", ")", "\n", "", "", "else", ":", "\n", "                ", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "if", "self", ".", "floating", ":", "\n", "                    ", "input_fraclen", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "input", ".", "device", ")", "*", "x_fl", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                        ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                        ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "elif", "self", ".", "format_grid_search", ":", "\n", "                    ", "if", "self", ".", "training", ":", "\n", "                        ", "input_fraclen", "=", "fraclen_gridsearch", "(", "\n", "input", ",", "x_wl", ",", "1", ",", "self", ".", "double_side", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "new_input_fraclen", "=", "self", ".", "momentum", "*", "input_fraclen", "+", "(", "\n", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "get_input_fraclen", "(", ")", "\n", "self", ".", "update_input_fraclen", "(", "new_input_fraclen", ")", "\n", "", "else", ":", "\n", "                        ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "\n", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "", "elif", "self", ".", "format_from_metric", ":", "\n", "                    ", "assert", "x_wl", "==", "8", ",", "'Word length other than 8bit has not been implemented'", "\n", "if", "self", ".", "training", ":", "\n", "                        ", "input_metric", "=", "self", ".", "input_metric_func", "(", "input", ")", "\n", "input_fraclen", "=", "metric2fraclen", "(", "input_metric", ",", "\n", "self", ".", "metric", ",", "1", ",", "\n", "self", ".", "double_side", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "\n", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "new_input_fraclen", "=", "self", ".", "momentum", "*", "input_fraclen", "+", "(", "\n", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "get_input_fraclen", "(", ")", "\n", "self", ".", "update_input_fraclen", "(", "new_input_fraclen", ")", "\n", "", "else", ":", "\n", "                        ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "\n", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "## Weight", "\n", "", "", "", "weight", "=", "self", ".", "conv", ".", "weight", "\n", "if", "self", ".", "rescale_forward", ":", "\n", "            ", "if", "self", ".", "rescale_type", "==", "'stddev'", ":", "\n", "                ", "weight_scale", "=", "torch", ".", "std", "(", "self", ".", "conv", ".", "weight", ".", "detach", "(", ")", ")", "\n", "", "elif", "self", ".", "rescale_type", "==", "'constant'", ":", "\n", "                ", "weight_scale", "=", "1.0", "/", "(", "self", ".", "out_channels", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "weight_scale", "/=", "torch", ".", "std", "(", "weight", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight_scale", "=", "1.0", "\n", "", "weight", "=", "weight", "*", "weight_scale", "\n", "avgpool_scale", "=", "getattr", "(", "self", ",", "'avgpool_scale'", ",", "1.0", ")", "\n", "weight", "=", "weight", "*", "avgpool_scale", "\n", "if", "self", ".", "training", ":", "\n", "## estimate running stats", "\n", "            ", "if", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ":", "\n", "                ", "y0", "=", "nn", ".", "functional", ".", "conv2d", "(", "input_val", ",", "\n", "weight", ",", "\n", "bias", "=", "self", ".", "conv", ".", "bias", ",", "\n", "stride", "=", "self", ".", "conv", ".", "stride", ",", "\n", "padding", "=", "self", ".", "conv", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "conv", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "conv", ".", "groups", ")", "\n", "", "else", ":", "\n", "                ", "y0", "=", "nn", ".", "functional", ".", "conv2d", "(", "\n", "self", ".", "fix_scaling", "[", "(", "...", ",", ")", "+", "(", "None", ",", "None", ")", "]", "*", "input_val", ",", "\n", "weight", ",", "\n", "bias", "=", "self", ".", "conv", ".", "bias", ",", "\n", "stride", "=", "self", ".", "conv", ".", "stride", ",", "\n", "padding", "=", "self", ".", "conv", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "conv", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "conv", ".", "groups", ")", "\n", "", "self", ".", "bn", "(", "y0", ")", "\n", "bn_mean", "=", "y0", ".", "mean", "(", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "bn_std", "=", "torch", ".", "sqrt", "(", "\n", "y0", ".", "var", "(", "[", "0", ",", "2", ",", "3", "]", ",", "unbiased", "=", "False", ")", "+", "self", ".", "bn", ".", "eps", ")", "\n", "", "else", ":", "\n", "            ", "bn_mean", "=", "self", ".", "bn", ".", "running_mean", "\n", "bn_std", "=", "torch", ".", "sqrt", "(", "self", ".", "bn", ".", "running_var", "+", "self", ".", "bn", ".", "eps", ")", "\n", "", "if", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ":", "\n", "            ", "weight", "=", "(", "self", ".", "bn", ".", "weight", "/", "bn_std", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "weight", "\n", "bias", "=", "self", ".", "bn", ".", "bias", "-", "self", ".", "bn", ".", "weight", "/", "bn_std", "*", "bn_mean", "\n", "\n", "## Conv", "\n", "y", "=", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input_val", ",", "\n", "weight", "=", "weight", ",", "\n", "bias", "=", "bias", ",", "\n", "stride", "=", "self", ".", "conv", ".", "stride", ",", "\n", "padding", "=", "self", ".", "conv", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "conv", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "conv", ".", "groups", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "conv", ".", "groups", "==", "1", ":", "\n", "                ", "weight", "=", "(", "\n", "self", ".", "bn", ".", "weight", "/", "\n", "bn_std", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "weight", "*", "self", ".", "fix_scaling", "[", "\n", "(", "...", ",", ")", "+", "\n", "(", "None", ",", "None", ")", "]", "/", "self", ".", "get_following_layer", "(", ")", ".", "fix_scaling", "[", "\n", "(", "...", ",", ")", "+", "(", "None", ",", "None", ",", "None", ")", "]", "\n", "", "elif", "self", ".", "conv", ".", "groups", "==", "self", ".", "conv", ".", "in_channels", ":", "\n", "                ", "weight", "=", "(", "self", ".", "bn", ".", "weight", "/", "bn_std", "\n", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "weight", "*", "self", ".", "fix_scaling", "[", "\n", "(", "...", ",", ")", "+", "\n", "(", "None", ",", "None", ",", "None", ")", "]", "/", "self", ".", "get_following_layer", "(", "\n", ")", ".", "fix_scaling", "[", "(", "...", ",", ")", "+", "(", "None", ",", "None", ",", "None", ")", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "\n", "'Group-wise conv with groups != in_channels is not supported'", "\n", ")", "\n", "raise", "NotImplementedError", "\n", "", "w_wl", ",", "w_fl", "=", "self", ".", "get_weight_format", "(", ")", "\n", "if", "self", ".", "floating", ":", "\n", "                ", "weight_fraclen", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "weight", ".", "device", ")", "*", "w_fl", "\n", "", "elif", "self", ".", "format_grid_search", ":", "\n", "                ", "weight_fraclen", "=", "fraclen_gridsearch", "(", "weight", ",", "w_wl", ",", "0", ",", "True", ")", "\n", "", "elif", "self", ".", "format_from_metric", ":", "\n", "                ", "assert", "w_wl", "==", "8", ",", "'Word length other than 8bit has not been implemented'", "\n", "weight_metric", "=", "self", ".", "weight_metric_func", "(", "weight", ")", "\n", "weight_fraclen", "=", "metric2fraclen", "(", "weight_metric", ",", "self", ".", "metric", ",", "1", ",", "\n", "True", ")", "\n", "weight_fraclen", "=", "torch", ".", "clamp", "(", "weight_fraclen", ",", "\n", "max", "=", "w_wl", "-", "1", ",", "\n", "min", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "if", "self", ".", "onnx_export", ":", "\n", "                ", "weight", ",", "_", "=", "self", ".", "quant", "(", "weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "\n", "True", ",", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                ", "weight", "=", "self", ".", "quant", "(", "weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "True", ",", "\n", "self", ".", "floating", ")", "\n", "", "bias", "=", "(", "self", ".", "bn", ".", "bias", "-", "self", ".", "bn", ".", "weight", "/", "bn_std", "*", "\n", "bn_mean", ")", "/", "self", ".", "get_following_layer", "(", ")", ".", "fix_scaling", "\n", "if", "not", "self", ".", "training", "and", "self", ".", "quant_bias", ":", "\n", "                ", "bias", ",", "_", "=", "fix_quant", "(", "bias", ",", "32", ",", "input_fraclen", "+", "weight_fraclen", ")", "\n", "\n", "## Conv", "\n", "", "if", "self", ".", "int_infer", "and", "not", "self", ".", "training", ":", "\n", "                ", "int_weight", "=", "self", ".", "int_weight", ".", "float", "(", ")", "\n", "int_input", "=", "(", "input_val", "*", "(", "2", "**", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "int_bias", "=", "self", ".", "int_bias", ".", "float", "(", ")", "\n", "y", "=", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "int_input", ",", "\n", "weight", "=", "int_weight", ",", "\n", "bias", "=", "int_bias", ",", "\n", "stride", "=", "self", ".", "conv", ".", "stride", ",", "\n", "padding", "=", "self", ".", "conv", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "conv", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "conv", ".", "groups", ")", "\n", "y", "=", "torch", ".", "clamp", "(", "y", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "y", "=", "y", "/", "(", "2", "**", "(", "weight_fraclen", "+", "input_fraclen", ")", ")", "\n", "setattr", "(", "y", ",", "'output_fraclen'", ",", "weight_fraclen", "+", "input_fraclen", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input_val", ",", "\n", "weight", "=", "weight", ",", "\n", "bias", "=", "bias", ",", "\n", "stride", "=", "self", ".", "conv", ".", "stride", ",", "\n", "padding", "=", "self", ".", "conv", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "conv", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "conv", ".", "groups", ")", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_weight_format": [[442, 448], ["max"], "methods", ["None"], ["", "def", "set_weight_format", "(", "self", ",", "weight_format", ")", ":", "\n", "        ", "w_wl", ",", "w_fl", "=", "weight_format", "\n", "if", "self", ".", "bitw_min", "is", "not", "None", ":", "\n", "            ", "w_wl", "=", "max", "(", "w_wl", ",", "self", ".", "bitw_min", ")", "\n", "", "assert", "w_fl", "<=", "w_wl", "\n", "self", ".", "weight_format", "=", "(", "w_wl", ",", "w_fl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_weight_format": [[449, 451], ["None"], "methods", ["None"], ["", "def", "get_weight_format", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weight_format", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_input_format": [[452, 458], ["max"], "methods", ["None"], ["", "def", "set_input_format", "(", "self", ",", "input_format", ")", ":", "\n", "        ", "x_wl", ",", "x_fl", "=", "input_format", "\n", "if", "self", ".", "bita_min", "is", "not", "None", ":", "\n", "            ", "x_wl", "=", "max", "(", "x_wl", ",", "self", ".", "bita_min", ")", "\n", "", "assert", "x_fl", "<=", "x_wl", "\n", "self", ".", "input_format", "=", "(", "x_wl", ",", "x_fl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_input_format": [[459, 464], ["fix_quant_ops.ReLUClipFXQConvBN.get_master_layer", "fix_quant_ops.ReLUClipFXQConvBN.get_master_layer().get_input_format", "fix_quant_ops.ReLUClipFXQConvBN.get_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], ["", "def", "get_input_format", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_master_layer", "(", ")", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "get_master_layer", "(", ")", ".", "get_input_format", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "input_format", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_onnx_export": [[465, 467], ["None"], "methods", ["None"], ["", "", "def", "set_onnx_export", "(", "self", ",", "onnx_export", ")", ":", "\n", "        ", "self", ".", "onnx_export", "=", "onnx_export", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_quant": [[468, 473], ["None"], "methods", ["None"], ["", "def", "set_quant", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "onnx_export", ":", "\n", "            ", "self", ".", "quant", "=", "fix_quant", "\n", "", "else", ":", "\n", "            ", "self", ".", "quant", "=", "q_k", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_alpha": [[474, 477], ["torch.Parameter", "torch.Parameter", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "set_alpha", "(", "self", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "8.0", ")", ".", "to", "(", "self", ".", "conv", ".", "weight", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_alpha": [[478, 485], ["fix_quant_ops.ReLUClipFXQConvBN.get_master_layer", "fix_quant_ops.ReLUClipFXQConvBN.get_master_layer().get_alpha", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fix_quant_ops.ReLUClipFXQConvBN.get_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], ["", "def", "get_alpha", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_master_layer", "(", ")", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "get_master_layer", "(", ")", ".", "get_alpha", "(", ")", "\n", "", "elif", "self", ".", "weight_only", ":", "\n", "            ", "return", "torch", ".", "ones_like", "(", "self", ".", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen": [[486, 497], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fix_quant_ops.ReLUClipFXQConvBN.get_master_layer().get_input_fraclen", "fix_quant_ops.ReLUClipFXQConvBN.get_master_layer", "fix_quant_ops.ReLUClipFXQConvBN.get_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], ["", "", "def", "get_input_fraclen", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight_only", ":", "\n", "            ", "return", "torch", ".", "ones_like", "(", "self", ".", "input_fraclen", ")", "*", "8", "\n", "", "elif", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", ":", "\n", "            ", "if", "self", ".", "get_master_layer", "(", "\n", ")", "is", "not", "None", "and", "self", ".", "input_fraclen_sharing", ":", "\n", "                ", "return", "self", ".", "get_master_layer", "(", ")", ".", "get_input_fraclen", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "input_fraclen", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.update_input_fraclen": [[498, 500], ["fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen"], ["", "", "def", "update_input_fraclen", "(", "self", ",", "input_fraclen", ")", ":", "\n", "        ", "self", ".", "get_input_fraclen", "(", ")", ".", "data", "=", "input_fraclen", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.fix_scaling": [[501, 520], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "fix_quant_ops.ReLUClipFXQConvBN.get_input_format", "fix_quant_ops.ReLUClipFXQConvBN.get_alpha", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen"], ["", "@", "property", "\n", "def", "fix_scaling", "(", "self", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "abs", "(", "self", ".", "get_alpha", "(", ")", ")", "\n", "if", "self", ".", "no_clipping", ":", "\n", "            ", "return", "torch", ".", "ones_like", "(", "alpha", ")", "\n", "", "if", "self", ".", "weight_only", ":", "\n", "            ", "return", "alpha", "\n", "", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "if", "self", ".", "floating", "and", "not", "self", ".", "floating_wo_clip", ":", "\n", "            ", "return", "2", "**", "x_fl", "*", "alpha", "/", "(", "2", "**", "(", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ")", "-", "1", ")", "\n", "", "if", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", ":", "\n", "## Note that this is a little different from the input_fraclen used in forward method, especially during training", "\n", "            ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "return", "2", "**", "input_fraclen", "*", "alpha", "/", "(", "\n", "2", "**", "(", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_master_layer": [[521, 523], ["None"], "methods", ["None"], ["", "", "def", "set_master_layer", "(", "self", ",", "master_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'master'", "]", "=", "master_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_master_layer": [[524, 526], ["None"], "methods", ["None"], ["", "def", "get_master_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'master'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_following_layer": [[527, 529], ["None"], "methods", ["None"], ["", "def", "set_following_layer", "(", "self", ",", "following_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'following'", "]", "=", "following_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer": [[530, 532], ["None"], "methods", ["None"], ["", "def", "get_following_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'following'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.float_weight": [[533, 571], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "weight.detach", "fix_quant_ops.ReLUClipFXQConvBN.conv.weight.detach", "print", "fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "fix_quant_ops.ReLUClipFXQConvBN.get_following_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer"], ["", "@", "property", "\n", "def", "float_weight", "(", "self", ")", ":", "\n", "        ", "weight", "=", "self", ".", "conv", ".", "weight", "\n", "if", "self", ".", "rescale_forward", ":", "\n", "            ", "if", "self", ".", "rescale_type", "==", "'stddev'", ":", "\n", "                ", "weight_scale", "=", "torch", ".", "std", "(", "self", ".", "conv", ".", "weight", ".", "detach", "(", ")", ")", "\n", "", "elif", "self", ".", "rescale_type", "==", "'constant'", ":", "\n", "                ", "weight_scale", "=", "1.0", "/", "(", "self", ".", "out_channels", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "weight_scale", "/=", "torch", ".", "std", "(", "weight", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight_scale", "=", "1.0", "\n", "", "weight", "=", "weight", "*", "weight_scale", "\n", "bn_mean", "=", "self", ".", "bn", ".", "running_mean", "\n", "bn_std", "=", "torch", ".", "sqrt", "(", "self", ".", "bn", ".", "running_var", "+", "self", ".", "bn", ".", "eps", ")", "\n", "if", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ":", "\n", "            ", "weight", "=", "(", "self", ".", "bn", ".", "weight", "/", "bn_std", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "weight", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "conv", ".", "groups", "==", "1", ":", "\n", "                ", "weight", "=", "(", "\n", "self", ".", "bn", ".", "weight", "/", "\n", "bn_std", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "weight", "*", "self", ".", "fix_scaling", "[", "\n", "(", "...", ",", ")", "+", "\n", "(", "None", ",", "None", ")", "]", "/", "self", ".", "get_following_layer", "(", ")", ".", "fix_scaling", "[", "\n", "(", "...", ",", ")", "+", "(", "None", ",", "None", ",", "None", ")", "]", "\n", "", "elif", "self", ".", "conv", ".", "groups", "==", "self", ".", "conv", ".", "in_channels", ":", "\n", "                ", "weight", "=", "(", "self", ".", "bn", ".", "weight", "/", "bn_std", "\n", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "weight", "*", "self", ".", "fix_scaling", "[", "\n", "(", "...", ",", ")", "+", "\n", "(", "None", ",", "None", ",", "None", ")", "]", "/", "self", ".", "get_following_layer", "(", "\n", ")", ".", "fix_scaling", "[", "(", "...", ",", ")", "+", "(", "None", ",", "None", ",", "None", ")", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "\n", "'Group-wise conv with groups != in_channels is not supported'", "\n", ")", "\n", "raise", "NotImplementedError", "\n", "", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.float_bias": [[572, 582], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "fix_quant_ops.ReLUClipFXQConvBN.get_following_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_following_layer"], ["", "@", "property", "\n", "def", "float_bias", "(", "self", ")", ":", "\n", "        ", "bn_mean", "=", "self", ".", "bn", ".", "running_mean", "\n", "bn_std", "=", "torch", ".", "sqrt", "(", "self", ".", "bn", ".", "running_var", "+", "self", ".", "bn", ".", "eps", ")", "\n", "if", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ":", "\n", "            ", "bias", "=", "self", ".", "bn", ".", "bias", "-", "self", ".", "bn", ".", "weight", "/", "bn_std", "*", "bn_mean", "\n", "", "else", ":", "\n", "            ", "bias", "=", "(", "self", ".", "bn", ".", "bias", "-", "self", ".", "bn", ".", "weight", "/", "bn_std", "*", "\n", "bn_mean", ")", "/", "self", ".", "get_following_layer", "(", ")", ".", "fix_scaling", "\n", "", "return", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_weight": [[583, 598], ["getattr", "fix_quant_ops.ReLUClipFXQConvBN.get_weight_fraclen", "fix_quant_ops.ReLUClipFXQConvBN.get_weight_format", "fix_quant_ops.ReLUClipFXQConvBN.quant", "fix_quant_ops.ReLUClipFXQConvBN.quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format"], ["", "@", "property", "\n", "def", "int_weight", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "floating", "\n", "assert", "not", "self", ".", "floating_wo_clip", "\n", "avgpool_scale", "=", "getattr", "(", "self", ",", "'avgpool_scale'", ",", "1.0", ")", "\n", "weight_fraclen", "=", "self", ".", "get_weight_fraclen", "(", ")", "\n", "w_wl", ",", "w_fl", "=", "self", ".", "get_weight_format", "(", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "            ", "weight", ",", "_", "=", "self", ".", "quant", "(", "self", ".", "float_weight", "*", "avgpool_scale", ",", "w_wl", ",", "\n", "weight_fraclen", ",", "0", ",", "True", ",", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "quant", "(", "self", ".", "float_weight", "*", "avgpool_scale", ",", "w_wl", ",", "\n", "weight_fraclen", ",", "0", ",", "True", ",", "self", ".", "floating", ")", "\n", "", "int_weight", "=", "(", "weight", "*", "(", "2", "**", "weight_fraclen", ")", ")", ".", "int", "(", ")", "\n", "return", "int_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_bias": [[599, 616], ["getattr", "fix_quant_ops.ReLUClipFXQConvBN.get_weight_fraclen", "fix_quant_ops.ReLUClipFXQConvBN.get_input_format", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.fix_quant", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "@", "property", "\n", "def", "int_bias", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "floating", "\n", "assert", "not", "self", ".", "floating_wo_clip", "\n", "assert", "self", ".", "quant_bias", "\n", "avgpool_scale", "=", "getattr", "(", "self", ",", "'avgpool_scale'", ",", "1.0", ")", "\n", "weight_fraclen", "=", "self", ".", "get_weight_fraclen", "(", ")", "\n", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "bias", ",", "_", "=", "fix_quant", "(", "self", ".", "float_bias", "*", "avgpool_scale", ",", "32", ",", "\n", "input_fraclen", "+", "weight_fraclen", ")", "\n", "int_bias", "=", "(", "bias", "*", "(", "2", "**", "(", "input_fraclen", "+", "weight_fraclen", ")", ")", ")", ".", "int", "(", ")", "\n", "return", "int_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.set_metric_func": [[617, 644], ["torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "set_metric_func", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "format_from_metric", ":", "\n", "            ", "if", "self", ".", "format_type", "==", "'per_layer'", ":", "\n", "                ", "weight_along_axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", "\n", "input_along_axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", "\n", "", "elif", "self", ".", "format_type", "==", "'per_channel'", ":", "\n", "                ", "weight_along_axis", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "input_along_axis", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "if", "self", ".", "metric", "==", "'std'", ":", "\n", "                ", "self", ".", "weight_metric_func", "=", "lambda", "x", ":", "torch", ".", "std", "(", "\n", "x", ",", "axis", "=", "weight_along_axis", ")", "\n", "self", ".", "input_metric_func", "=", "lambda", "x", ":", "torch", ".", "std", "(", "\n", "x", ",", "axis", "=", "input_along_axis", ")", "\n", "", "elif", "self", ".", "metric", "==", "'mae'", ":", "\n", "                ", "self", ".", "weight_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "x", ")", ",", "axis", "=", "weight_along_axis", ")", "\n", "self", ".", "input_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "x", ")", ",", "axis", "=", "input_along_axis", ")", "\n", "", "elif", "self", ".", "metric", "==", "'rms'", ":", "\n", "                ", "self", ".", "weight_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "x", "**", "2", ",", "axis", "=", "weight_along_axis", ")", "**", "0.5", "\n", "self", ".", "input_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "x", "**", "2", ",", "axis", "=", "input_along_axis", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.register_input_format": [[645, 660], ["fix_quant_ops.ReLUClipFXQConvBN.register_buffer", "fix_quant_ops.ReLUClipFXQConvBN.register_buffer", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "", "def", "register_input_format", "(", "self", ",", "input_format", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "x_wl", ",", "x_fl", "=", "input_format", "\n", "if", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", ":", "\n", "            ", "if", "self", ".", "format_type", "==", "'per_layer'", ":", "\n", "                ", "self", ".", "register_buffer", "(", "\n", "'input_fraclen'", ",", "\n", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "self", ".", "conv", ".", "weight", ".", "device", ")", "*", "x_fl", ")", "\n", "", "elif", "self", ".", "format_type", "==", "'per_channel'", ":", "\n", "                ", "self", ".", "register_buffer", "(", "\n", "'input_fraclen'", ",", "\n", "torch", ".", "ones", "(", "self", ".", "conv", ".", "in_channels", ")", ".", "to", "(", "\n", "self", ".", "conv", ".", "weight", ".", "device", ")", "*", "x_fl", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "self", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.get_weight_fraclen": [[661, 679], ["getattr", "fix_quant_ops.ReLUClipFXQConvBN.get_weight_format", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fix_quant_ops.fraclen_gridsearch", "fix_quant_ops.ReLUClipFXQConvBN.weight_metric_func", "fix_quant_ops.metric2fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen"], ["", "", "def", "get_weight_fraclen", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", "\n", "avgpool_scale", "=", "getattr", "(", "self", ",", "'avgpool_scale'", ",", "1.0", ")", "\n", "weight", "=", "self", ".", "float_weight", "*", "avgpool_scale", "\n", "w_wl", ",", "w_fl", "=", "self", ".", "get_weight_format", "(", ")", "\n", "if", "self", ".", "floating", ":", "\n", "            ", "weight_fraclen", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "weight", ".", "device", ")", "*", "w_fl", "\n", "", "elif", "self", ".", "format_grid_search", ":", "\n", "            ", "weight_fraclen", "=", "fraclen_gridsearch", "(", "weight", ",", "w_wl", ",", "0", ",", "True", ")", "\n", "", "elif", "self", ".", "format_from_metric", ":", "\n", "            ", "assert", "w_wl", "==", "8", ",", "'Word length other than 8bit has not been implemented'", "\n", "weight_metric", "=", "self", ".", "weight_metric_func", "(", "weight", ")", "\n", "weight_fraclen", "=", "metric2fraclen", "(", "weight_metric", ",", "self", ".", "metric", ",", "1", ",", "\n", "True", ")", "\n", "weight_fraclen", "=", "torch", ".", "clamp", "(", "weight_fraclen", ",", "max", "=", "w_wl", "-", "1", ",", "min", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "weight_fraclen", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQConvBN.int_conv": [[680, 715], ["torch.Conv2d", "torch.Conv2d", "fix_quant_ops.ReLUClipFXQConvBN.get_weight_fraclen().int", "fix_quant_ops.ReLUClipFXQConvBN.get_input_format", "fix_quant_ops.ReLUClipFXQConvBN.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp().int", "torch.clamp().int", "torch.clamp().int", "torch.clamp().int", "setattr", "torch.Conv2d.register_buffer", "torch.Conv2d.register_buffer", "int_weight.float.float.float", "int_bias.float.float.float", "weight_fraclen.float.float.float", "input_fraclen.float.float.float", "fix_quant_ops.ReLUClipFXQConvBN.get_weight_fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen"], ["", "def", "int_conv", "(", "self", ",", "avgpool_scale", "=", "1.0", ")", ":", "\n", "        ", "int_conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "conv", ".", "in_channels", ",", "\n", "self", ".", "conv", ".", "out_channels", ",", "\n", "self", ".", "conv", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "conv", ".", "stride", ",", "\n", "padding", "=", "self", ".", "conv", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "conv", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "conv", ".", "groups", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "avgpool_scale", "=", "avgpool_scale", "\n", "int_weight", "=", "self", ".", "int_weight", "\n", "int_bias", "=", "self", ".", "int_bias", "\n", "double_side", "=", "self", ".", "double_side", "\n", "weight_fraclen", "=", "self", ".", "get_weight_fraclen", "(", ")", ".", "int", "(", ")", "\n", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", ".", "int", "(", ")", "\n", "if", "not", "self", ".", "int_op_only", ":", "\n", "            ", "int_weight", "=", "int_weight", ".", "float", "(", ")", "\n", "int_bias", "=", "int_bias", ".", "float", "(", ")", "\n", "weight_fraclen", "=", "weight_fraclen", ".", "float", "(", ")", "\n", "input_fraclen", "=", "input_fraclen", ".", "float", "(", ")", "\n", "", "int_conv", ".", "weight", ".", "data", "=", "int_weight", "\n", "int_conv", ".", "bias", ".", "data", "=", "int_bias", "\n", "if", "self", ".", "int_op_only", ":", "\n", "            ", "int_conv", ".", "weight", ".", "requires_grad", "=", "False", "\n", "int_conv", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "setattr", "(", "int_conv", ",", "'input_symmetric'", ",", "double_side", ")", "\n", "int_conv", ".", "register_buffer", "(", "'weight_fraclen'", ",", "weight_fraclen", ")", "\n", "int_conv", ".", "register_buffer", "(", "'input_fraclen'", ",", "input_fraclen", ")", "\n", "int_conv", ".", "int_op_only", "=", "self", ".", "int_op_only", "\n", "return", "int_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__": [[718, 758], ["torch.Linear.__init__", "fix_quant_ops.ReLUClipFXQLinear.set_onnx_export", "fix_quant_ops.ReLUClipFXQLinear.set_quant", "fix_quant_ops.ReLUClipFXQLinear.set_alpha", "fix_quant_ops.ReLUClipFXQLinear.set_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.__init__", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_onnx_export", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "True", ",", "\n", "bitw_min", "=", "None", ",", "\n", "bita_min", "=", "None", ",", "\n", "weight_only", "=", "False", ",", "\n", "double_side", "=", "False", ",", "\n", "rescale_forward", "=", "False", ",", "\n", "rescale_type", "=", "'constant'", ",", "\n", "onnx_export", "=", "False", ",", "\n", "master_layer", "=", "None", ",", "\n", "format_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "ReLUClipFXQLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "bitw_min", "=", "bitw_min", "\n", "self", ".", "bita_min", "=", "bita_min", "\n", "self", ".", "weight_only", "=", "weight_only", "\n", "self", ".", "double_side", "=", "double_side", "\n", "self", ".", "rescale_forward", "=", "rescale_forward", "\n", "self", ".", "rescale_type", "=", "rescale_type", "\n", "self", ".", "set_onnx_export", "(", "onnx_export", ")", "\n", "self", ".", "set_quant", "(", ")", "\n", "self", ".", "set_alpha", "(", ")", "\n", "self", ".", "weight_format", "=", "None", "\n", "self", ".", "input_format", "=", "None", "\n", "self", ".", "layer_dict", "=", "{", "}", "\n", "self", ".", "set_master_layer", "(", "master_layer", ")", "\n", "self", ".", "floating", "=", "False", "\n", "self", ".", "floating_wo_clip", "=", "False", "\n", "self", ".", "format_type", "=", "format_type", "\n", "self", ".", "format_from_metric", "=", "False", "\n", "self", ".", "metric", "=", "None", "\n", "self", ".", "no_clipping", "=", "False", "\n", "self", ".", "input_fraclen_sharing", "=", "False", "\n", "self", ".", "format_grid_search", "=", "False", "\n", "self", ".", "quant_bias", "=", "False", "\n", "self", ".", "int_infer", "=", "False", "\n", "self", ".", "int_op_only", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.forward": [[759, 933], ["fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "torch.std", "torch.std", "torch.std", "torch.std", "torch.functional.linear", "torch.functional.linear", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "fix_quant_ops.ReLUClipFXQLinear.get_input_format", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "torch.std", "torch.std", "torch.std", "torch.std", "fix_quant_ops.ReLUClipFXQLinear.detach", "fix_quant_ops.ReLUClipFXQLinear.mul_", "fix_quant_ops.ReLUClipFXQLinear.int_weight.float", "torch.functional.linear", "torch.functional.linear", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.functional.linear", "torch.functional.linear", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fix_quant_ops.fraclen_gridsearch", "fix_quant_ops.ReLUClipFXQLinear.weight.detach", "fix_quant_ops.ReLUClipFXQLinear.int_bias.float", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.weight_metric_func", "fix_quant_ops.metric2fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.fix_quant", "fix_quant_ops.fraclen_gridsearch", "fix_quant_ops.ReLUClipFXQLinear.update_input_fraclen", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.input_metric_func", "fix_quant_ops.metric2fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.ReLUClipFXQLinear.update_input_fraclen", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "int", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "int", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.update_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.update_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "## Input", "\n", "        ", "if", "self", ".", "weight_only", ":", "\n", "            ", "if", "self", ".", "double_side", ":", "\n", "                ", "input_val", "=", "input", "*", "1.0", "\n", "", "else", ":", "\n", "                ", "input_val", "=", "torch", ".", "relu", "(", "input", ")", "\n", "", "if", "(", "self", ".", "int_infer", "or", "self", ".", "quant_bias", ")", "and", "not", "self", ".", "training", ":", "\n", "                ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ":", "\n", "                ", "if", "self", ".", "double_side", ":", "\n", "                    ", "input_val", "=", "input", "*", "1.0", "\n", "", "else", ":", "\n", "                    ", "input_val", "=", "torch", ".", "relu", "(", "input", ")", "\n", "", "", "else", ":", "\n", "                ", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "if", "self", ".", "floating", ":", "\n", "                    ", "input_fraclen", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "input", ".", "device", ")", "*", "x_fl", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                        ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                        ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "elif", "self", ".", "format_grid_search", ":", "\n", "                    ", "if", "self", ".", "training", ":", "\n", "                        ", "input_fraclen", "=", "fraclen_gridsearch", "(", "\n", "input", ",", "x_wl", ",", "1", ",", "self", ".", "double_side", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "new_input_fraclen", "=", "self", ".", "momentum", "*", "input_fraclen", "+", "(", "\n", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "get_input_fraclen", "(", ")", "\n", "self", ".", "update_input_fraclen", "(", "new_input_fraclen", ")", "\n", "", "else", ":", "\n", "                        ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "\n", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "", "elif", "self", ".", "format_from_metric", ":", "\n", "                    ", "assert", "x_wl", "==", "8", ",", "'Word length other than 8bit has not been implemented'", "\n", "if", "self", ".", "training", ":", "\n", "                        ", "input_metric", "=", "self", ".", "input_metric_func", "(", "input", ")", "\n", "input_fraclen", "=", "metric2fraclen", "(", "input_metric", ",", "\n", "self", ".", "metric", ",", "1", ",", "\n", "self", ".", "double_side", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "\n", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "new_input_fraclen", "=", "self", ".", "momentum", "*", "input_fraclen", "+", "(", "\n", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "get_input_fraclen", "(", ")", "\n", "self", ".", "update_input_fraclen", "(", "new_input_fraclen", ")", "\n", "", "else", ":", "\n", "                        ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "\n", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "                            ", "input_val", ",", "_", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "\n", "input_fraclen", ",", "1", ",", "\n", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                            ", "input_val", "=", "self", ".", "quant", "(", "input", ",", "x_wl", ",", "input_fraclen", ",", "\n", "1", ",", "self", ".", "double_side", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "## Weight", "\n", "", "", "", "weight", "=", "self", ".", "weight", "*", "1.0", "\n", "if", "not", "(", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ")", ":", "\n", "            ", "w_wl", ",", "w_fl", "=", "self", ".", "get_weight_format", "(", ")", "\n", "if", "self", ".", "floating", ":", "\n", "                ", "weight_fraclen", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "weight", ".", "device", ")", "*", "w_fl", "\n", "", "elif", "self", ".", "format_grid_search", ":", "\n", "                ", "weight_fraclen", "=", "fraclen_gridsearch", "(", "weight", ",", "w_wl", ",", "0", ",", "True", ")", "\n", "", "elif", "self", ".", "format_from_metric", ":", "\n", "                ", "assert", "w_wl", "==", "8", ",", "'Word length other than 8bit has not been implemented'", "\n", "weight_metric", "=", "self", ".", "weight_metric_func", "(", "weight", ")", "\n", "weight_fraclen", "=", "metric2fraclen", "(", "weight_metric", ",", "self", ".", "metric", ",", "1", ",", "\n", "True", ")", "\n", "weight_fraclen", "=", "torch", ".", "clamp", "(", "weight_fraclen", ",", "\n", "max", "=", "w_wl", "-", "1", ",", "\n", "min", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "if", "self", ".", "onnx_export", ":", "\n", "                ", "weight", ",", "_", "=", "self", ".", "quant", "(", "weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "\n", "True", ",", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                ", "weight", "=", "self", ".", "quant", "(", "weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "True", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "if", "self", ".", "rescale_forward", ":", "\n", "            ", "if", "self", ".", "rescale_type", "==", "'stddev'", ":", "\n", "                ", "weight_scale", "=", "torch", ".", "std", "(", "self", ".", "weight", ".", "detach", "(", ")", ")", "\n", "", "elif", "self", ".", "rescale_type", "==", "'constant'", ":", "\n", "                ", "weight_scale", "=", "1.0", "/", "(", "self", ".", "out_features", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "weight_scale", "/=", "torch", ".", "std", "(", "weight", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight_scale", "=", "1.0", "\n", "\n", "", "if", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ":", "\n", "            ", "weight", "=", "weight", "*", "weight_scale", "\n", "bias", "=", "self", ".", "bias", "\n", "\n", "## FC", "\n", "y", "=", "nn", ".", "functional", ".", "linear", "(", "input", "=", "input_val", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "weight", "=", "weight", "*", "weight_scale", "\n", "input_val", ".", "mul_", "(", "self", ".", "fix_scaling", ")", "\n", "bias", "=", "self", ".", "bias", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "bias", "=", "self", ".", "bias", "/", "self", ".", "fix_scaling", "/", "weight_scale", "\n", "if", "self", ".", "quant_bias", ":", "\n", "                        ", "bias", ",", "_", "=", "fix_quant", "(", "bias", ",", "32", ",", "\n", "input_fraclen", "+", "weight_fraclen", ")", "\n", "", "", "else", ":", "\n", "                    ", "bias", "=", "self", ".", "bias", "\n", "\n", "## FC", "\n", "", "", "if", "self", ".", "int_infer", "and", "not", "self", ".", "training", ":", "\n", "                ", "int_weight", "=", "self", ".", "int_weight", ".", "float", "(", ")", "\n", "int_input", "=", "(", "input_val", "*", "(", "2", "**", "input_fraclen", ")", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                    ", "int_bias", "=", "self", ".", "int_bias", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                    ", "int_bias", "=", "bias", "\n", "", "y", "=", "nn", ".", "functional", ".", "linear", "(", "input", "=", "int_input", ",", "\n", "weight", "=", "int_weight", ",", "\n", "bias", "=", "int_bias", ")", "\n", "y", "=", "torch", ".", "clamp", "(", "y", ",", "max", "=", "(", "1", "<<", "31", ")", "-", "1", ",", "min", "=", "-", "(", "1", "<<", "31", ")", "+", "1", ")", "\n", "y", "=", "y", "/", "(", "2", "**", "(", "weight_fraclen", "+", "input_fraclen", ")", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "nn", ".", "functional", ".", "linear", "(", "input", "=", "input_val", ",", "\n", "weight", "=", "weight", ",", "\n", "bias", "=", "bias", ")", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_weight_format": [[934, 940], ["max"], "methods", ["None"], ["", "def", "set_weight_format", "(", "self", ",", "weight_format", ")", ":", "\n", "        ", "w_wl", ",", "w_fl", "=", "weight_format", "\n", "if", "self", ".", "bitw_min", "is", "not", "None", ":", "\n", "            ", "w_wl", "=", "max", "(", "w_wl", ",", "self", ".", "bitw_min", ")", "\n", "", "assert", "w_fl", "<=", "w_wl", "\n", "self", ".", "weight_format", "=", "(", "w_wl", ",", "w_fl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format": [[941, 943], ["None"], "methods", ["None"], ["", "def", "get_weight_format", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weight_format", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_input_format": [[944, 950], ["max"], "methods", ["None"], ["", "def", "set_input_format", "(", "self", ",", "input_format", ")", ":", "\n", "        ", "x_wl", ",", "x_fl", "=", "input_format", "\n", "if", "self", ".", "bita_min", "is", "not", "None", ":", "\n", "            ", "x_wl", "=", "max", "(", "x_wl", ",", "self", ".", "bita_min", ")", "\n", "", "assert", "x_fl", "<=", "x_wl", "\n", "self", ".", "input_format", "=", "(", "x_wl", ",", "x_fl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format": [[951, 956], ["fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "fix_quant_ops.ReLUClipFXQLinear.get_master_layer().get_input_format", "fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], ["", "def", "get_input_format", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_master_layer", "(", ")", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "get_master_layer", "(", ")", ".", "get_input_format", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "input_format", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_onnx_export": [[957, 959], ["None"], "methods", ["None"], ["", "", "def", "set_onnx_export", "(", "self", ",", "onnx_export", ")", ":", "\n", "        ", "self", ".", "onnx_export", "=", "onnx_export", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_quant": [[960, 965], ["None"], "methods", ["None"], ["", "def", "set_quant", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "onnx_export", ":", "\n", "            ", "self", ".", "quant", "=", "fix_quant", "\n", "", "else", ":", "\n", "            ", "self", ".", "quant", "=", "q_k", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_alpha": [[966, 968], ["torch.Parameter", "torch.Parameter", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "set_alpha", "(", "self", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "8.0", ")", ".", "to", "(", "self", ".", "weight", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha": [[969, 976], ["fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "fix_quant_ops.ReLUClipFXQLinear.get_master_layer().get_alpha", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], ["", "def", "get_alpha", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_master_layer", "(", ")", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "get_master_layer", "(", ")", ".", "get_alpha", "(", ")", "\n", "", "elif", "self", ".", "weight_only", ":", "\n", "            ", "return", "torch", ".", "ones_like", "(", "self", ".", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen": [[977, 988], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fix_quant_ops.ReLUClipFXQLinear.get_master_layer().get_input_fraclen", "fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer"], ["", "", "def", "get_input_fraclen", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight_only", ":", "\n", "            ", "return", "torch", ".", "ones_like", "(", "self", ".", "input_fraclen", ")", "*", "8", "\n", "", "elif", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", ":", "\n", "            ", "if", "self", ".", "get_master_layer", "(", "\n", ")", "is", "not", "None", "and", "self", ".", "input_fraclen_sharing", ":", "\n", "                ", "return", "self", ".", "get_master_layer", "(", ")", ".", "get_input_fraclen", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "input_fraclen", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.update_input_fraclen": [[989, 991], ["fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen"], ["", "", "def", "update_input_fraclen", "(", "self", ",", "input_fraclen", ")", ":", "\n", "        ", "self", ".", "get_input_fraclen", "(", ")", ".", "data", "=", "input_fraclen", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.fix_scaling": [[992, 1011], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "fix_quant_ops.ReLUClipFXQLinear.get_input_format", "fix_quant_ops.ReLUClipFXQLinear.get_alpha", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_alpha", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen"], ["", "@", "property", "\n", "def", "fix_scaling", "(", "self", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "abs", "(", "self", ".", "get_alpha", "(", ")", ")", "\n", "if", "self", ".", "no_clipping", ":", "\n", "            ", "return", "torch", ".", "ones_like", "(", "alpha", ")", "\n", "", "if", "self", ".", "weight_only", ":", "\n", "            ", "return", "alpha", "\n", "", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "if", "self", ".", "floating", "and", "not", "self", ".", "floating_wo_clip", ":", "\n", "            ", "return", "2", "**", "x_fl", "*", "alpha", "/", "(", "2", "**", "(", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ")", "-", "1", ")", "\n", "", "if", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", ":", "\n", "## Note that this is a little different from the input_fraclen used in forward method, especially during training or when self.input_adaptive = True", "\n", "            ", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "return", "2", "**", "input_fraclen", "*", "alpha", "/", "(", "\n", "2", "**", "(", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_master_layer": [[1012, 1014], ["None"], "methods", ["None"], ["", "", "def", "set_master_layer", "(", "self", ",", "master_layer", ")", ":", "\n", "        ", "self", ".", "layer_dict", "[", "'master'", "]", "=", "master_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_master_layer": [[1015, 1017], ["None"], "methods", ["None"], ["", "def", "get_master_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "layer_dict", "[", "'master'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.float_weight": [[1018, 1021], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "float_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.float_bias": [[1022, 1062], ["fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "torch.std", "torch.std", "torch.std", "torch.std", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant", "torch.std", "torch.std", "torch.std", "torch.std", "fix_quant_ops.ReLUClipFXQLinear.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fix_quant_ops.fraclen_gridsearch", "fix_quant_ops.ReLUClipFXQLinear.weight.detach", "fix_quant_ops.ReLUClipFXQLinear.weight_metric_func", "fix_quant_ops.metric2fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen"], ["", "@", "property", "\n", "def", "float_bias", "(", "self", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "*", "1.0", "\n", "if", "not", "(", "self", ".", "floating", "and", "self", ".", "floating_wo_clip", ")", ":", "\n", "            ", "w_wl", ",", "w_fl", "=", "self", ".", "get_weight_format", "(", ")", "\n", "if", "self", ".", "floating", ":", "\n", "                ", "weight_fraclen", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "weight", ".", "device", ")", "*", "w_fl", "\n", "", "elif", "self", ".", "format_grid_search", ":", "\n", "                ", "weight_fraclen", "=", "fraclen_gridsearch", "(", "weight", ",", "w_wl", ",", "0", ",", "True", ")", "\n", "", "elif", "self", ".", "format_from_metric", ":", "\n", "                ", "assert", "w_wl", "==", "8", ",", "'Word length other than 8bit has not been implemented'", "\n", "weight_metric", "=", "self", ".", "weight_metric_func", "(", "weight", ")", "\n", "weight_fraclen", "=", "metric2fraclen", "(", "weight_metric", ",", "self", ".", "metric", ",", "1", ",", "\n", "True", ")", "\n", "weight_fraclen", "=", "torch", ".", "clamp", "(", "weight_fraclen", ",", "\n", "max", "=", "w_wl", "-", "1", ",", "\n", "min", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "if", "self", ".", "onnx_export", ":", "\n", "                ", "weight", ",", "_", "=", "self", ".", "quant", "(", "weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "\n", "True", ",", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "                ", "weight", "=", "self", ".", "quant", "(", "weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "True", ",", "\n", "self", ".", "floating", ")", "\n", "", "", "if", "self", ".", "rescale_forward", ":", "\n", "            ", "if", "self", ".", "rescale_type", "==", "'stddev'", ":", "\n", "                ", "weight_scale", "=", "torch", ".", "std", "(", "self", ".", "weight", ".", "detach", "(", ")", ")", "\n", "", "elif", "self", ".", "rescale_type", "==", "'constant'", ":", "\n", "                ", "weight_scale", "=", "1.0", "/", "(", "self", ".", "out_features", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "weight_scale", "/=", "torch", ".", "std", "(", "weight", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight_scale", "=", "1.0", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "/", "self", ".", "fix_scaling", "/", "weight_scale", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "\n", "", "return", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.int_weight": [[1063, 1077], ["fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "fix_quant_ops.ReLUClipFXQLinear.quant", "fix_quant_ops.ReLUClipFXQLinear.quant"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format"], ["", "@", "property", "\n", "def", "int_weight", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "floating", "\n", "assert", "not", "self", ".", "floating_wo_clip", "\n", "weight_fraclen", "=", "self", ".", "get_weight_fraclen", "(", ")", "\n", "w_wl", ",", "w_fl", "=", "self", ".", "get_weight_format", "(", ")", "\n", "if", "self", ".", "onnx_export", ":", "\n", "            ", "weight", ",", "_", "=", "self", ".", "quant", "(", "self", ".", "float_weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "\n", "True", ",", "self", ".", "floating", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "quant", "(", "self", ".", "float_weight", ",", "w_wl", ",", "weight_fraclen", ",", "0", ",", "\n", "True", ",", "self", ".", "floating", ")", "\n", "", "int_weight", "=", "(", "weight", "*", "(", "2", "**", "weight_fraclen", ")", ")", ".", "int", "(", ")", "\n", "return", "int_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.int_bias": [[1078, 1097], ["fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "fix_quant_ops.ReLUClipFXQLinear.get_input_format", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fix_quant_ops.fix_quant", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "@", "property", "\n", "def", "int_bias", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "assert", "not", "self", ".", "floating", "\n", "assert", "not", "self", ".", "floating_wo_clip", "\n", "assert", "self", ".", "quant_bias", "\n", "weight_fraclen", "=", "self", ".", "get_weight_fraclen", "(", ")", "\n", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", "\n", "bias", ",", "_", "=", "fix_quant", "(", "self", ".", "float_bias", ",", "32", ",", "\n", "input_fraclen", "+", "weight_fraclen", ")", "\n", "int_bias", "=", "(", "bias", "*", "(", "2", "**", "(", "input_fraclen", "+", "weight_fraclen", ")", ")", ")", ".", "int", "(", ")", "\n", "", "else", ":", "\n", "            ", "int_bias", "=", "self", ".", "bias", "\n", "", "return", "int_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.set_metric_func": [[1098, 1128], ["print", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "set_metric_func", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "format_from_metric", ":", "\n", "            ", "if", "self", ".", "format_type", "==", "'per_layer'", ":", "\n", "                ", "weight_along_axis", "=", "(", "0", ",", "1", ")", "\n", "input_along_axis", "=", "(", "0", ",", "1", ")", "\n", "", "elif", "self", ".", "format_type", "==", "'per_channel'", ":", "\n", "                ", "weight_along_axis", "=", "(", "1", ",", ")", "\n", "input_along_axis", "=", "(", "0", ",", "1", ")", "\n", "print", "(", "\n", "'WARNING: Per channel for input quantization format is not supported for linear layers.'", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "if", "self", ".", "metric", "==", "'std'", ":", "\n", "                ", "self", ".", "weight_metric_func", "=", "lambda", "x", ":", "torch", ".", "std", "(", "\n", "x", ",", "axis", "=", "weight_along_axis", ")", "\n", "self", ".", "input_metric_func", "=", "lambda", "x", ":", "torch", ".", "std", "(", "\n", "x", ",", "axis", "=", "input_along_axis", ")", "\n", "", "elif", "self", ".", "metric", "==", "'mae'", ":", "\n", "                ", "self", ".", "weight_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "x", ")", ",", "axis", "=", "weight_along_axis", ")", "\n", "self", ".", "input_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "x", ")", ",", "axis", "=", "input_along_axis", ")", "\n", "", "elif", "self", ".", "metric", "==", "'rms'", ":", "\n", "                ", "self", ".", "weight_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "x", "**", "2", ",", "axis", "=", "weight_along_axis", ")", "**", "0.5", "\n", "self", ".", "input_metric_func", "=", "lambda", "x", ":", "torch", ".", "mean", "(", "\n", "x", "**", "2", ",", "axis", "=", "input_along_axis", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.register_input_format": [[1129, 1146], ["fix_quant_ops.ReLUClipFXQLinear.register_buffer", "fix_quant_ops.ReLUClipFXQLinear.register_buffer", "print", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "", "def", "register_input_format", "(", "self", ",", "input_format", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "x_wl", ",", "x_fl", "=", "input_format", "\n", "if", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", ":", "\n", "            ", "if", "self", ".", "format_type", "==", "'per_layer'", ":", "\n", "                ", "self", ".", "register_buffer", "(", "\n", "'input_fraclen'", ",", "\n", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "self", ".", "weight", ".", "device", ")", "*", "x_fl", ")", "\n", "", "elif", "self", ".", "format_type", "==", "'per_channel'", ":", "\n", "                ", "self", ".", "register_buffer", "(", "\n", "'input_fraclen'", ",", "\n", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "self", ".", "weight", ".", "device", ")", "*", "x_fl", ")", "\n", "print", "(", "\n", "'WARNING: Per channel for input quantization format is not supported for linear layers.'", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "self", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen": [[1147, 1164], ["fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "fix_quant_ops.fraclen_gridsearch", "fix_quant_ops.ReLUClipFXQLinear.weight_metric_func", "fix_quant_ops.metric2fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen"], ["", "", "def", "get_weight_fraclen", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "format_from_metric", "or", "self", ".", "format_grid_search", "\n", "weight", "=", "self", ".", "float_weight", "\n", "w_wl", ",", "w_fl", "=", "self", ".", "get_weight_format", "(", ")", "\n", "if", "self", ".", "floating", ":", "\n", "            ", "weight_fraclen", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "weight", ".", "device", ")", "*", "w_fl", "\n", "", "elif", "self", ".", "format_grid_search", ":", "\n", "            ", "weight_fraclen", "=", "fraclen_gridsearch", "(", "weight", ",", "w_wl", ",", "1", ",", "True", ")", "\n", "", "elif", "self", ".", "format_from_metric", ":", "\n", "            ", "assert", "w_wl", "==", "8", ",", "'Word length other than 8bit has not been implemented'", "\n", "weight_metric", "=", "self", ".", "weight_metric_func", "(", "weight", ")", "\n", "weight_fraclen", "=", "metric2fraclen", "(", "weight_metric", ",", "self", ".", "metric", ",", "1", ",", "\n", "True", ")", "\n", "weight_fraclen", "=", "torch", ".", "clamp", "(", "weight_fraclen", ",", "max", "=", "w_wl", "-", "1", ",", "min", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "weight_fraclen", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.int_fc": [[1165, 1196], ["torch.Linear", "torch.Linear", "fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen().int", "fix_quant_ops.ReLUClipFXQLinear.get_input_format", "fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp().int", "torch.clamp().int", "torch.clamp().int", "torch.clamp().int", "setattr", "torch.Linear.register_buffer", "torch.Linear.register_buffer", "int_weight.float.float.float", "weight_fraclen.float.float.float", "input_fraclen.float.float.float", "fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "int_bias.float.float.float", "int"], "methods", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_format", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_input_fraclen", "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.ReLUClipFXQLinear.get_weight_fraclen"], ["", "def", "int_fc", "(", "self", ")", ":", "\n", "        ", "int_fc", "=", "nn", ".", "Linear", "(", "self", ".", "in_features", ",", "\n", "self", ".", "out_features", ",", "\n", "bias", "=", "self", ".", "bias", "is", "not", "None", ")", "\n", "int_weight", "=", "self", ".", "int_weight", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "int_bias", "=", "self", ".", "int_bias", "\n", "", "double_side", "=", "self", ".", "double_side", "\n", "weight_fraclen", "=", "self", ".", "get_weight_fraclen", "(", ")", ".", "int", "(", ")", "\n", "x_wl", ",", "x_fl", "=", "self", ".", "get_input_format", "(", ")", "\n", "input_fraclen", "=", "self", ".", "get_input_fraclen", "(", ")", "\n", "input_fraclen", "=", "torch", ".", "round", "(", "input_fraclen", ")", "\n", "input_fraclen", "=", "torch", ".", "clamp", "(", "input_fraclen", ",", "\n", "max", "=", "x_wl", "-", "int", "(", "self", ".", "double_side", ")", ",", "\n", "min", "=", "0", ")", ".", "int", "(", ")", "\n", "if", "not", "self", ".", "int_op_only", ":", "\n", "            ", "int_weight", "=", "int_weight", ".", "float", "(", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "int_bias", "=", "int_bias", ".", "float", "(", ")", "\n", "", "weight_fraclen", "=", "weight_fraclen", ".", "float", "(", ")", "\n", "input_fraclen", "=", "input_fraclen", ".", "float", "(", ")", "\n", "", "int_fc", ".", "weight", ".", "data", "=", "int_weight", "\n", "int_fc", ".", "bias", ".", "data", "=", "int_bias", "\n", "if", "self", ".", "int_op_only", ":", "\n", "            ", "int_fc", ".", "weight", ".", "requires_grad", "=", "False", "\n", "int_fc", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "setattr", "(", "int_fc", ",", "'input_symmetric'", ",", "double_side", ")", "\n", "int_fc", ".", "register_buffer", "(", "'weight_fraclen'", ",", "weight_fraclen", ")", "\n", "int_fc", ".", "register_buffer", "(", "'input_fraclen'", ",", "input_fraclen", ")", "\n", "int_fc", ".", "int_op_only", "=", "self", ".", "int_op_only", "\n", "return", "int_fc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.bn_calib": [[8, 15], ["isinstance", "getattr", "m.reset_running_stats"], "function", ["None"], ["def", "bn_calib", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "(", "ReLUClipFXQConvBN", ",", "ReLUClipFXQConvTransposeBN", ")", ")", ":", "\n", "        ", "m", ".", "training", "=", "True", "\n", "", "if", "getattr", "(", "m", ",", "'track_running_stats'", ",", "False", ")", ":", "\n", "        ", "m", ".", "reset_running_stats", "(", ")", "\n", "m", ".", "training", "=", "True", "\n", "m", ".", "momentum", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fraclen_gridsearch": [[17, 28], ["range", "fix_quant_ops.fix_quant", "err_list.append", "torch.argmin().to", "torch.argmin().to", "int", "torch.mean", "torch.mean", "torch.argmin", "torch.argmin", "torch.ones().to", "torch.ones().to", "torch.tensor", "torch.tensor", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant"], ["", "", "def", "fraclen_gridsearch", "(", "input", ",", "wl", ",", "align_dim", ",", "signed", ")", ":", "\n", "    ", "err_list", "=", "[", "]", "\n", "for", "fl", "in", "range", "(", "wl", "+", "1", "-", "int", "(", "signed", ")", ")", ":", "\n", "        ", "res", ",", "_", "=", "fix_quant", "(", "\n", "input", ",", "wl", ",", "\n", "torch", ".", "ones", "(", "input", ".", "shape", "[", "align_dim", "]", ")", ".", "to", "(", "input", ".", "device", ")", "*", "fl", "*", "1.0", ",", "\n", "align_dim", ",", "signed", ")", "\n", "err", "=", "torch", ".", "mean", "(", "(", "input", "-", "res", ")", "**", "2", ")", "**", "0.5", "\n", "err_list", ".", "append", "(", "err", ")", "\n", "", "opt_fl", "=", "torch", ".", "argmin", "(", "torch", ".", "tensor", "(", "err_list", ")", ")", ".", "to", "(", "input", ".", "device", ")", "*", "1.0", "\n", "return", "opt_fl", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.metric2fraclen": [[30, 38], ["torch.floor", "torch.floor", "torch.floor.clamp_", "torch.log2", "torch.log2", "int"], "function", ["None"], ["", "def", "metric2fraclen", "(", "metric_tensor", ",", "metric", "=", "'std'", ",", "N", "=", "1", ",", "signed", "=", "True", ")", ":", "\n", "    ", "if", "signed", ":", "\n", "        ", "coeff", "=", "{", "'std'", ":", "40", ",", "'mae'", ":", "30", ",", "'rms'", ":", "40", "}", "[", "metric", "]", "\n", "", "else", ":", "\n", "        ", "coeff", "=", "{", "'std'", ":", "70", ",", "'mae'", ":", "30", ",", "'rms'", ":", "50", "}", "[", "metric", "]", "\n", "", "fl", "=", "torch", ".", "floor", "(", "torch", ".", "log2", "(", "coeff", "*", "N", "/", "metric_tensor", ")", ")", "\n", "fl", ".", "clamp_", "(", "max", "=", "8", "-", "int", "(", "signed", ")", ",", "min", "=", "0", ")", "\n", "return", "fl", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.fix_quant": [[64, 88], ["torch.all", "torch.all", "torch.all", "torch.all", "res.div_", "torch.all", "torch.all", "torch.all", "torch.all", "type", "res.round_", "res.clamp_", "res.clamp_", "torch.round", "torch.round", "input.dim", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "fix_quant", "(", "input", ",", "wl", "=", "8", ",", "fl", "=", "0", ",", "align_dim", "=", "0", ",", "signed", "=", "True", ",", "floating", "=", "False", ")", ":", "\n", "    ", "assert", "wl", ">=", "0", "\n", "assert", "torch", ".", "all", "(", "fl", ">=", "0", ")", "\n", "if", "signed", ":", "\n", "        ", "assert", "torch", ".", "all", "(", "fl", "<=", "wl", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "assert", "torch", ".", "all", "(", "fl", "<=", "wl", ")", "\n", "", "assert", "type", "(", "wl", ")", "==", "int", "\n", "assert", "torch", ".", "all", "(", "torch", ".", "round", "(", "fl", ")", "==", "fl", ")", "\n", "expand_dim", "=", "input", ".", "dim", "(", ")", "-", "align_dim", "-", "1", "\n", "fl", "=", "fl", "[", "(", "...", ",", ")", "+", "(", "None", ",", ")", "*", "expand_dim", "]", "\n", "res", "=", "input", "*", "(", "2", "**", "fl", ")", "\n", "if", "not", "floating", ":", "\n", "        ", "res", ".", "round_", "(", ")", "\n", "", "if", "signed", ":", "\n", "        ", "bound", "=", "2", "**", "(", "wl", "-", "1", ")", "-", "1", "\n", "grad_scale", "=", "torch", ".", "abs", "(", "res", ")", "<", "bound", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "-", "bound", ")", "\n", "", "else", ":", "\n", "        ", "bound", "=", "2", "**", "wl", "-", "1", "\n", "grad_scale", "=", "(", "res", ">", "0", ")", "*", "(", "res", "<", "bound", ")", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "0", ")", "\n", "", "res", ".", "div_", "(", "2", "**", "fl", ")", "\n", "return", "res", ",", "grad_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.snap-research_f8net.models.fix_quant_ops.int_op_only_fix_quant": [[90, 115], ["setattr", "type", "type", "torch.where", "torch.where", "torch.where.clamp_", "torch.where.clamp_"], "function", ["None"], ["", "def", "int_op_only_fix_quant", "(", "input", ",", "wl", "=", "8", ",", "fl", "=", "0", ",", "input_fl", "=", "0", ",", "signed", "=", "True", ")", ":", "\n", "    ", "assert", "wl", ">=", "0", "\n", "assert", "fl", ">=", "0", "\n", "if", "signed", ":", "\n", "        ", "assert", "fl", "<=", "wl", "-", "1", "\n", "", "else", ":", "\n", "        ", "assert", "fl", "<=", "wl", "\n", "", "assert", "type", "(", "wl", ")", "==", "int", "\n", "assert", "type", "(", "fl", ")", "==", "int", "\n", "net_fl", "=", "input_fl", "-", "fl", "\n", "if", "net_fl", ">", "0", ":", "\n", "## round half to even", "\n", "        ", "res", "=", "input", "+", "(", "1", "<<", "(", "net_fl", "-", "1", ")", ")", "\n", "res", "=", "torch", ".", "where", "(", "(", "input", "%", "(", "1", "<<", "net_fl", ")", ")", "==", "(", "1", "<<", "(", "net_fl", "-", "1", ")", ")", ",", "\n", "(", "res", ">>", "(", "net_fl", "+", "1", ")", ")", "<<", "1", ",", "res", ">>", "net_fl", ")", "\n", "", "else", ":", "\n", "        ", "res", "=", "input", "<<", "(", "-", "net_fl", ")", "\n", "", "if", "signed", ":", "\n", "        ", "bound", "=", "(", "1", "<<", "(", "wl", "-", "1", ")", ")", "-", "1", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "-", "bound", ")", "\n", "", "else", ":", "\n", "        ", "bound", "=", "(", "1", "<<", "wl", ")", "-", "1", "\n", "res", ".", "clamp_", "(", "max", "=", "bound", ",", "min", "=", "0", ")", "\n", "", "setattr", "(", "res", ",", "'output_fraclen'", ",", "fl", ")", "\n", "return", "res", "\n", "\n"]]}