{"home.repos.pwc.inspect_result.deepmind_spriteworld.None.example_run_loop.RandomAgent.__init__": [[49, 52], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "    ", "\"\"\"Construct random agent.\"\"\"", "\n", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.None.example_run_loop.RandomAgent.step": [[53, 60], ["example_run_loop.RandomAgent._env.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "def", "step", "(", "self", ",", "timestep", ")", ":", "\n", "# observation is a dictionary with renderer outputs to be used for training", "\n", "    ", "observation", "=", "timestep", ".", "observation", "\n", "del", "observation", "\n", "del", "timestep", "\n", "action", "=", "self", ".", "_env", ".", "action_space", ".", "sample", "(", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.None.example_run_loop.main": [[62, 81], ["importlib.import_module", "config.get_config.get_config", "spriteworld.renderers.Success", "spriteworld.environment.Environment", "example_run_loop.RandomAgent", "six.moves.range", "environment.Environment.reset", "absl.logging.info", "env.step.last", "example_run_loop.RandomAgent.step", "environment.Environment.step", "rewards.append", "numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.examples.goal_finding_embodied.get_config", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "\n", "\n", "config", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "config", ")", "\n", "config", "=", "config", ".", "get_config", "(", "FLAGS", ".", "mode", ")", "\n", "config", "[", "'renderers'", "]", "[", "'success'", "]", "=", "renderers", ".", "Success", "(", ")", "# Used for logging", "\n", "env", "=", "environment", ".", "Environment", "(", "**", "config", ")", "\n", "agent", "=", "RandomAgent", "(", "env", ")", "\n", "\n", "# Loop over episodes, logging success and mean reward per episode", "\n", "for", "episode", "in", "range", "(", "FLAGS", ".", "num_episodes", ")", ":", "\n", "    ", "timestep", "=", "env", ".", "reset", "(", ")", "\n", "rewards", "=", "[", "]", "\n", "while", "not", "timestep", ".", "last", "(", ")", ":", "\n", "      ", "action", "=", "agent", ".", "step", "(", "timestep", ")", "\n", "timestep", "=", "env", ".", "step", "(", "action", ")", "\n", "rewards", ".", "append", "(", "timestep", ".", "reward", ")", "\n", "", "logging", ".", "info", "(", "'Episode %d: Success = %r, Reward = %s.'", ",", "episode", ",", "\n", "timestep", ".", "observation", "[", "'success'", "]", ",", "np", ".", "nanmean", "(", "rewards", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.None.run_demo.main": [[48, 53], ["importlib.import_module", "config.get_config.get_config", "spriteworld.demo_ui.setup_run_ui"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.examples.goal_finding_embodied.get_config", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.setup_run_ui"], ["def", "main", "(", "_", ")", ":", "\n", "  ", "config", "=", "importlib", ".", "import_module", "(", "FLAGS", ".", "config", ")", "\n", "config", "=", "config", ".", "get_config", "(", "FLAGS", ".", "mode", ")", "\n", "demo_ui", ".", "setup_run_ui", "(", "config", ",", "FLAGS", ".", "render_size", ",", "FLAGS", ".", "task_hsv_colors", ",", "\n", "FLAGS", ".", "anti_aliasing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes._polar2cartesian": [[30, 32], ["numpy.array", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "_polar2cartesian", "(", "r", ",", "theta", ")", ":", "\n", "  ", "return", "r", "*", "np", ".", "array", "(", "[", "np", ".", "cos", "(", "theta", ")", ",", "np", ".", "sin", "(", "theta", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.polygon": [[34, 50], ["numpy.array", "numpy.cos", "numpy.array", "numpy.sqrt", "shapes._polar2cartesian", "numpy.sin", "six.moves.range"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes._polar2cartesian"], ["", "def", "polygon", "(", "num_sides", ",", "theta_0", "=", "0.", ")", ":", "\n", "  ", "\"\"\"Generate the vertices of a regular polygon.\n\n  Args:\n    num_sides: Int. Number of sides of the polygon.\n    theta_0: Float. Initial angle to start the vertices from.\n\n  Returns:\n    path: Array of vertices of the polygon, normalized so it has area 1.\n  \"\"\"", "\n", "theta", "=", "2", "*", "np", ".", "pi", "/", "num_sides", "\n", "path", "=", "np", ".", "array", "(", "\n", "[", "_polar2cartesian", "(", "1", ",", "i", "*", "theta", "+", "theta_0", ")", "for", "i", "in", "range", "(", "num_sides", ")", "]", ")", "\n", "area", "=", "num_sides", "*", "np", ".", "sin", "(", "theta", "/", "2", ")", "*", "np", ".", "cos", "(", "theta", "/", "2", ")", "\n", "path", "=", "np", ".", "array", "(", "path", ")", "/", "np", ".", "sqrt", "(", "area", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.star": [[52, 75], ["numpy.empty", "six.moves.range", "shapes._polar2cartesian", "shapes._polar2cartesian", "numpy.sin", "numpy.array", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes._polar2cartesian", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes._polar2cartesian"], ["", "def", "star", "(", "num_sides", ",", "point_height", "=", "1", ",", "theta_0", "=", "0.", ")", ":", "\n", "  ", "\"\"\"Generate the vertices of a regular star shape.\n\n  Args:\n    num_sides: Int. Number of sides (i.e. number of points) in the star.\n    point_height: Scalar. Height of each point of the star, relative to the\n      radius of the star's inscribed circle.\n    theta_0: Float. Initial angle to start the vertices from.\n\n  Returns:\n    path: Array of vertices of the star, normalized so the star has area 1.\n  \"\"\"", "\n", "point_to_center", "=", "1", "+", "point_height", "\n", "theta", "=", "2", "*", "np", ".", "pi", "/", "num_sides", "\n", "path", "=", "np", ".", "empty", "(", "[", "2", "*", "num_sides", ",", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "num_sides", ")", ":", "\n", "    ", "path", "[", "2", "*", "i", "]", "=", "_polar2cartesian", "(", "1", ",", "i", "*", "theta", "+", "theta_0", ")", "\n", "path", "[", "2", "*", "i", "+", "1", "]", "=", "_polar2cartesian", "(", "point_to_center", ",", "\n", "(", "i", "+", "0.5", ")", "*", "theta", "+", "theta_0", ")", "\n", "\n", "", "area", "=", "point_to_center", "*", "num_sides", "*", "np", ".", "sin", "(", "theta", "/", "2", ")", "\n", "path", "=", "np", ".", "array", "(", "path", ")", "/", "np", ".", "sqrt", "(", "area", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.spokes": [[77, 117], ["numpy.empty", "shapes._polar2cartesian", "six.moves.range", "shapes._polar2cartesian", "shapes._polar2cartesian", "numpy.array", "numpy.sqrt", "numpy.sin", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes._polar2cartesian", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes._polar2cartesian", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes._polar2cartesian"], ["", "def", "spokes", "(", "num_sides", ",", "spoke_height", "=", "1", ",", "theta_0", "=", "0.", ")", ":", "\n", "  ", "\"\"\"Generate the vertices of a regular rectangular spoke shape.\n\n  This is like a star, except the points are rectangular. For example, if\n  num_sides = 4, it will look like this:\n\n                            O       O\n                          O   O   O   O\n                        O       O       O\n                          O           O\n                            O       O\n                          O           O\n                        O       O       O\n                          O   O   O   O\n                            O       O\n\n  Args:\n    num_sides: Int. Number of sides (i.e. number of points) in the star.\n    spoke_height: Scalar. Height of each spoke, relative to the radius of the\n      spoke shape's inscribed circle.\n    theta_0: Float. Initial angle to start the vertices from.\n\n  Returns:\n    path: Array of vertices of the spoke shape, normalized so the spoke shape\n      has area 1.\n  \"\"\"", "\n", "theta", "=", "2", "*", "np", ".", "pi", "/", "num_sides", "\n", "path", "=", "np", ".", "empty", "(", "[", "3", "*", "num_sides", ",", "2", "]", ")", "\n", "spoke", "=", "_polar2cartesian", "(", "spoke_height", ",", "-", "0.5", "*", "theta", "+", "theta_0", ")", "\n", "for", "i", "in", "range", "(", "num_sides", ")", ":", "\n", "    ", "vertex", "=", "_polar2cartesian", "(", "1", ",", "i", "*", "theta", "+", "theta_0", ")", "\n", "path", "[", "3", "*", "i", "]", "=", "spoke", "+", "vertex", "\n", "path", "[", "3", "*", "i", "+", "1", "]", "=", "vertex", "\n", "spoke", "=", "_polar2cartesian", "(", "spoke_height", ",", "(", "i", "+", "0.5", ")", "*", "theta", "+", "theta_0", ")", "\n", "path", "[", "3", "*", "i", "+", "2", "]", "=", "spoke", "+", "vertex", "\n", "\n", "", "area", "=", "num_sides", "*", "np", ".", "sin", "(", "theta", "/", "2", ")", "*", "(", "2", "+", "np", ".", "cos", "(", "theta", "/", "2", ")", ")", "\n", "\n", "path", "=", "np", ".", "array", "(", "path", ")", "/", "np", ".", "sqrt", "(", "area", ")", "\n", "return", "path", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.AbstractTask.reward": [[39, 56], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "reward", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Compute reward for the given configuration of sprites.\n\n    This reward is evaluated per-step by the Spriteworld environment. See\n    Environment.step() in environment.py for usage. Hence if this is a smooth\n    function the agent will have shaped reward. Sparse rewards awarded only at\n    the end of an episode can be implemented by returning non-zero reward only\n    for a desired goal configuration of sprites (see sub-classes below for\n    examples).\n\n    Args:\n      sprites: Iterable of sprite instances.\n\n    Returns:\n      Float reward for the given configuration of sprites.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.AbstractTask.success": [[57, 68], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "success", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Compute whether the task has been successfully solved.\n\n    Args:\n      sprites: Iterable of sprite instances.\n\n    Returns:\n      Boolean. Whether or not the given configuration of sprites successfully\n        solves the task.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.NoReward.__init__": [[73, 75], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.NoReward.reward": [[76, 79], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "unused_sprites", ")", ":", "\n", "    ", "\"\"\"Calculate reward from sprites.\"\"\"", "\n", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.NoReward.success": [[80, 82], ["None"], "methods", ["None"], ["", "def", "success", "(", "self", ",", "unused_sprites", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition.__init__": [[87, 125], ["numpy.asarray", "numpy.asarray"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "filter_distrib", "=", "None", ",", "\n", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "\n", "terminate_distance", "=", "0.05", ",", "\n", "terminate_bonus", "=", "0.0", ",", "\n", "weights_dimensions", "=", "(", "1", ",", "1", ")", ",", "\n", "sparse_reward", "=", "False", ",", "\n", "raw_reward_multiplier", "=", "50", ")", ":", "\n", "    ", "\"\"\"Construct goal-finding task.\n\n    This task rewards the agent for bringing all sprites with factors contained\n    in a filter distribution to a goal position. Rewards are offset to be\n    negative, except for a termination bonus when the goal is reached.\n\n    Args:\n      filter_distrib: None or instance of\n        factor_distributions.AbstractDistribution. If None, all sprites must be\n        brought to the goal position. If not None, only sprites with factors\n        contained in this distribution must be brought to the goal position.\n      goal_position: Position of the goal.\n      terminate_distance: Distance from goal position at which to clip reward.\n        If all sprites are within this distance, terminate episode.\n      terminate_bonus: Extra bonus for getting all sprites within\n        terminate_distance.\n      weights_dimensions: Weights modifying the contributions of the (x,\n        y)-dimensions to the distance to goal computation.\n      sparse_reward: Boolean (default False), whether to provide dense rewards\n        or only reward at the end of an episode.\n      raw_reward_multiplier: Multiplier for the reward to be applied before\n        terminate_bonus. Empirically, 50 seems to be a good value.\n    \"\"\"", "\n", "self", ".", "_filter_distrib", "=", "filter_distrib", "\n", "self", ".", "_goal_position", "=", "np", ".", "asarray", "(", "goal_position", ")", "\n", "self", ".", "_terminate_bonus", "=", "terminate_bonus", "\n", "self", ".", "_terminate_distance", "=", "terminate_distance", "\n", "self", ".", "_sparse_reward", "=", "sparse_reward", "\n", "self", ".", "_weights_dimensions", "=", "np", ".", "asarray", "(", "weights_dimensions", ")", "\n", "self", ".", "_raw_reward_multiplier", "=", "raw_reward_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition._single_sprite_reward": [[126, 131], ["numpy.sum"], "methods", ["None"], ["", "def", "_single_sprite_reward", "(", "self", ",", "sprite", ")", ":", "\n", "    ", "goal_distance", "=", "np", ".", "sum", "(", "self", ".", "_weights_dimensions", "*", "\n", "(", "sprite", ".", "position", "-", "self", ".", "_goal_position", ")", "**", "2.", ")", "**", "0.5", "\n", "raw_reward", "=", "self", ".", "_terminate_distance", "-", "goal_distance", "\n", "return", "self", ".", "_raw_reward_multiplier", "*", "raw_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition._filtered_sprites_rewards": [[132, 139], ["tasks.FindGoalPosition._single_sprite_reward", "tasks.FindGoalPosition._filter_distrib.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition._single_sprite_reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "def", "_filtered_sprites_rewards", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Returns list of rewards for the filtered sprites.\"\"\"", "\n", "rewards", "=", "[", "\n", "self", ".", "_single_sprite_reward", "(", "s", ")", "for", "s", "in", "sprites", "if", "\n", "self", ".", "_filter_distrib", "is", "None", "or", "self", ".", "_filter_distrib", ".", "contains", "(", "s", ".", "factors", ")", "\n", "]", "\n", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition.reward": [[140, 156], ["tasks.FindGoalPosition._filtered_sprites_rewards", "numpy.sum", "all", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition._filtered_sprites_rewards"], ["", "def", "reward", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Calculate total reward summed over filtered sprites.\"\"\"", "\n", "reward", "=", "0.", "\n", "\n", "rewards", "=", "self", ".", "_filtered_sprites_rewards", "(", "sprites", ")", "\n", "if", "not", "rewards", ":", "# No sprites get through the filter, so make reward NaN", "\n", "      ", "return", "np", ".", "nan", "\n", "", "dense_reward", "=", "np", ".", "sum", "(", "rewards", ")", "\n", "\n", "if", "all", "(", "np", ".", "array", "(", "rewards", ")", ">=", "0", ")", ":", "# task succeeded", "\n", "      ", "reward", "+=", "self", ".", "_terminate_bonus", "\n", "reward", "+=", "dense_reward", "\n", "", "elif", "not", "self", ".", "_sparse_reward", ":", "\n", "      ", "reward", "+=", "dense_reward", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition.success": [[157, 159], ["all", "numpy.array", "tasks.FindGoalPosition._filtered_sprites_rewards"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.FindGoalPosition._filtered_sprites_rewards"], ["", "def", "success", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "return", "all", "(", "np", ".", "array", "(", "self", ".", "_filtered_sprites_rewards", "(", "sprites", ")", ")", ">=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering.__init__": [[164, 195], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "cluster_distribs", ",", "\n", "termination_threshold", "=", "2.5", ",", "\n", "terminate_bonus", "=", "0.0", ",", "\n", "sparse_reward", "=", "False", ",", "\n", "reward_range", "=", "10", ")", ":", "\n", "    ", "\"\"\"Reward depends on clustering sprites based on color/shape.\n\n    We indicate what feature matters for the clustering with the list of\n    cluster distribs. We can then compute intra-extra pairwise distances and use\n    the Davies-Bouldin clustering metric.\n\n    See https://en.wikipedia.org/wiki/Cluster_analysis#Internal_evaluation for\n    some discussion about different metrics.\n\n    Args:\n      cluster_distribs: list of factor distributions defining the clusters.\n      termination_threshold: Threshold that the metric should pass to terminate\n        an episode. Default of 2.5 seems to work well for 2 or 3 clusters.\n      terminate_bonus: Extra bonus upon task success.\n      sparse_reward: Boolean (default True), whether to provide dense shaping\n        rewards or just the sparse ones at the end of an episode.\n      reward_range: Scalar, specifies range [-reward_range, 0] we remap the\n        rewards to whenever possible.\n    \"\"\"", "\n", "self", ".", "_cluster_distribs", "=", "cluster_distribs", "\n", "self", ".", "_num_clusters", "=", "len", "(", "cluster_distribs", ")", "\n", "self", ".", "_termination_threshold", "=", "termination_threshold", "\n", "self", ".", "_terminate_bonus", "=", "terminate_bonus", "\n", "self", ".", "_sparse_reward", "=", "sparse_reward", "\n", "self", ".", "_reward_range", "=", "reward_range", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering._cluster_assignments": [[196, 206], ["enumerate", "numpy.ones", "enumerate", "len", "distrib.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "def", "_cluster_assignments", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Return index of cluster for all sprites.\"\"\"", "\n", "clusters", "=", "-", "np", ".", "ones", "(", "len", "(", "sprites", ")", ",", "dtype", "=", "'int'", ")", "\n", "for", "i", ",", "sprite", "in", "enumerate", "(", "sprites", ")", ":", "\n", "      ", "for", "c_i", ",", "distrib", "in", "enumerate", "(", "self", ".", "_cluster_distribs", ")", ":", "\n", "        ", "if", "distrib", ".", "contains", "(", "sprite", ".", "factors", ")", ":", "\n", "          ", "clusters", "[", "i", "]", "=", "c_i", "\n", "break", "\n", "\n", "", "", "", "return", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering._compute_clustering_metric": [[207, 216], ["tasks.Clustering._cluster_assignments", "numpy.array", "sklearn.metrics.davies_bouldin_score"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering._cluster_assignments"], ["", "def", "_compute_clustering_metric", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Compute the different clustering metrics, higher should be better.\"\"\"", "\n", "# Get positions of sprites, and their cluster assignments", "\n", "cluster_assignments", "=", "self", ".", "_cluster_assignments", "(", "sprites", ")", "\n", "positions", "=", "np", ".", "array", "(", "[", "sprite", ".", "position", "for", "sprite", "in", "sprites", "]", ")", "\n", "# Ignore objects unassigned to any cluster", "\n", "positions", "=", "positions", "[", "cluster_assignments", ">=", "0", "]", "\n", "cluster_assignments", "=", "cluster_assignments", "[", "cluster_assignments", ">=", "0", "]", "\n", "return", "1.", "/", "metrics", ".", "davies_bouldin_score", "(", "positions", ",", "cluster_assignments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering.reward": [[217, 242], ["tasks.Clustering._compute_clustering_metric"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering._compute_clustering_metric"], ["", "def", "reward", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Calculate reward from sprites.\n\n    Recommendation: Use Davies-Bouldin, with termination_threshold left to auto.\n\n    Args:\n      sprites: list of Sprites.\n\n    Returns:\n      Reward, high when clustering is good.\n    \"\"\"", "\n", "reward", "=", "0.", "\n", "metric", "=", "self", ".", "_compute_clustering_metric", "(", "sprites", ")", "\n", "\n", "# Low DB index is better clustering", "\n", "dense_reward", "=", "(", "metric", "-", "\n", "self", ".", "_termination_threshold", ")", "*", "self", ".", "_reward_range", "/", "2.", "\n", "\n", "if", "metric", ">=", "self", ".", "_termination_threshold", ":", "# task succeeded", "\n", "      ", "reward", "+=", "self", ".", "_terminate_bonus", "\n", "reward", "+=", "dense_reward", "\n", "", "elif", "not", "self", ".", "_sparse_reward", ":", "\n", "      ", "reward", "+=", "dense_reward", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering.success": [[243, 246], ["tasks.Clustering._compute_clustering_metric"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.Clustering._compute_clustering_metric"], ["", "def", "success", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "metric", "=", "self", ".", "_compute_clustering_metric", "(", "sprites", ")", "\n", "return", "metric", ">=", "self", ".", "_termination_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.__init__": [[258, 287], ["ValueError", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "subtasks", ",", "\n", "reward_aggregator", "=", "'sum'", ",", "\n", "termination_criterion", "=", "'all'", ",", "\n", "terminate_bonus", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"MetaTasks which combines rewards between several subtasks.\n\n    Args:\n      subtasks: Iterable of Tasks.\n      reward_aggregator: (string) how to combine rewards together. One of\n        ('sum', 'max', 'min', 'mean').\n      termination_criterion: (string) how to decide when to terminate, given\n        subtasks' termination signals. One of ('all', 'any')\n      terminate_bonus: Extra bonus for solving all subtasks, combined with\n        termination_criterion.\n    \"\"\"", "\n", "if", "reward_aggregator", "not", "in", "MetaAggregated", ".", "REWARD_AGGREGATOR", ":", "\n", "      ", "raise", "ValueError", "(", "'Unknown reward_aggregator. {} not in {}'", ".", "format", "(", "\n", "reward_aggregator", ",", "MetaAggregated", ".", "REWARD_AGGREGATOR", ")", ")", "\n", "", "if", "termination_criterion", "not", "in", "MetaAggregated", ".", "TERMINATION_CRITERION", ":", "\n", "      ", "raise", "ValueError", "(", "'Unknown termination_criterion. {} not in {}'", ".", "format", "(", "\n", "termination_criterion", ",", "MetaAggregated", ".", "TERMINATION_CRITERION", ")", ")", "\n", "\n", "", "self", ".", "_subtasks", "=", "subtasks", "\n", "self", ".", "_reward_aggregator", "=", "MetaAggregated", ".", "REWARD_AGGREGATOR", "[", "\n", "reward_aggregator", "]", "\n", "self", ".", "_termination_criterion", "=", "MetaAggregated", ".", "TERMINATION_CRITERION", "[", "\n", "termination_criterion", "]", "\n", "self", ".", "_terminate_bonus", "=", "terminate_bonus", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward": [[288, 293], ["tasks.MetaAggregated._reward_aggregator", "tasks.MetaAggregated.success", "task.reward"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "def", "reward", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "rewards", "=", "self", ".", "_reward_aggregator", "(", "\n", "[", "task", ".", "reward", "(", "sprites", ")", "for", "task", "in", "self", ".", "_subtasks", "]", ")", "\n", "rewards", "+=", "self", ".", "_terminate_bonus", "*", "self", ".", "success", "(", "sprites", ")", "\n", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.success": [[294, 297], ["tasks.MetaAggregated._termination_criterion", "task.success"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "def", "success", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "return", "self", ".", "_termination_criterion", "(", "\n", "[", "task", ".", "success", "(", "sprites", ")", "for", "task", "in", "self", ".", "_subtasks", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution.sample": [[52, 60], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sample a spec from this distribution. Returns a dictionary.\n\n    Args:\n      rng: Random number generator. Fed into self._get_rng(), if None defaults\n        to np.random.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution.contains": [[61, 64], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "\"\"\"Return whether distribution contains spec dictionary.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution.to_str": [[65, 68], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "\"\"\"Recursive string description of this distribution.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution.__str__": [[69, 71], ["factor_distributions.AbstractDistribution.to_str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "to_str", "(", "indent", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng": [[72, 75], ["None"], "methods", ["None"], ["", "def", "_get_rng", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get random number generator, defaulting to np.random.\"\"\"", "\n", "return", "np", ".", "random", "if", "rng", "is", "None", "else", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution.keys": [[76, 79], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractproperty", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "\"\"\"The set of keys in specs sampled from this distribution.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Continuous.__init__": [[84, 97], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "key", ",", "minval", ",", "maxval", ",", "dtype", "=", "'float32'", ")", ":", "\n", "    ", "\"\"\"Construct continuous 1-dimensional uniform distribution.\n\n    Args:\n      key: String factor name. self.sample() returns {key: _}.\n      minval: Scalar minimum value.\n      maxval: Scalar maximum value.\n      dtype: String numpy dtype.\n    \"\"\"", "\n", "self", ".", "key", "=", "key", "\n", "self", ".", "minval", "=", "minval", "\n", "self", ".", "maxval", "=", "maxval", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Continuous.sample": [[98, 104], ["factor_distributions.Continuous._get_rng", "factor_distributions.Continuous.uniform"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng"], ["", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sample value in [self.minval, self.maxval) and return dict.\"\"\"", "\n", "rng", "=", "self", ".", "_get_rng", "(", "rng", ")", "\n", "out", "=", "rng", ".", "uniform", "(", "low", "=", "self", ".", "minval", ",", "high", "=", "self", ".", "maxval", ")", "\n", "out", "=", "np", ".", "cast", "[", "self", ".", "dtype", "]", "(", "out", ")", "\n", "return", "{", "self", ".", "key", ":", "out", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Continuous.contains": [[105, 112], ["KeyError"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "\"\"\"Check if spec[self.key] is in [self.minval, self.maxval).\"\"\"", "\n", "if", "self", ".", "key", "not", "in", "spec", ":", "\n", "      ", "raise", "KeyError", "(", "'key {} is not in spec {}, but must be to evaluate '", "\n", "'containment.'", ".", "format", "(", "self", ".", "key", ",", "spec", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "spec", "[", "self", ".", "key", "]", ">=", "self", ".", "minval", "and", "spec", "[", "self", ".", "key", "]", "<", "self", ".", "maxval", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Continuous.to_str": [[113, 117], ["None"], "methods", ["None"], ["", "", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "s", "=", "'<Continuous: key={}, mival={}, maxval={}, dtype={}>'", ".", "format", "(", "\n", "self", ".", "key", ",", "self", ".", "minval", ",", "self", ".", "maxval", ",", "self", ".", "dtype", ")", "\n", "return", "indent", "*", "'  '", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Continuous.keys": [[118, 121], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "return", "set", "(", "[", "self", ".", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Discrete.__init__": [[126, 138], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "key", ",", "candidates", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Construct discrete distribution.\n\n    Args:\n      key: String. Factor name.\n      candidates: Iterable. Discrete values to sample from.\n      probs: None or iterable of floats summing to 1. Candidate sampling\n        probabilities. If None, candidates are sampled uniformly.\n    \"\"\"", "\n", "self", ".", "candidates", "=", "candidates", "\n", "self", ".", "key", "=", "key", "\n", "self", ".", "probs", "=", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Discrete.sample": [[139, 143], ["factor_distributions.Discrete._get_rng", "factor_distributions.Discrete.choice", "len"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng"], ["", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "rng", "=", "self", ".", "_get_rng", "(", "rng", ")", "\n", "out", "=", "self", ".", "candidates", "[", "rng", ".", "choice", "(", "len", "(", "self", ".", "candidates", ")", ",", "p", "=", "self", ".", "probs", ")", "]", "\n", "return", "{", "self", ".", "key", ":", "out", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Discrete.contains": [[144, 150], ["KeyError"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "if", "self", ".", "key", "not", "in", "spec", ":", "\n", "      ", "raise", "KeyError", "(", "'key {} is not in spec {}, but must be to evaluate '", "\n", "'containment.'", ".", "format", "(", "self", ".", "key", ",", "spec", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "spec", "[", "self", ".", "key", "]", "in", "self", ".", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Discrete.to_str": [[151, 155], ["None"], "methods", ["None"], ["", "", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "s", "=", "'<Discrete: key={}, candidates={}, probs={}>'", ".", "format", "(", "\n", "self", ".", "key", ",", "self", ".", "candidates", ",", "self", ".", "probs", ")", "\n", "return", "indent", "*", "'  '", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Discrete.keys": [[156, 159], ["set"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "return", "set", "(", "[", "self", ".", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Mixture.__init__": [[164, 188], ["numpy.array", "numpy.ones", "len", "ValueError", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "components", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Construct mixture of distributions.\n\n    This is a mixture distribution, not a union, so if the components overlap,\n    their overlap will be sampled more than the non-overlapping regions.\n\n    Args:\n      components: Iterable of component distributions. Must all have the same\n        key sets.\n      probs: None or iterable of floats summing to 1. Sampling probabilities for\n        the components.\n    \"\"\"", "\n", "self", ".", "components", "=", "components", "\n", "if", "probs", "is", "None", ":", "\n", "      ", "self", ".", "probs", "=", "np", ".", "ones", "(", "len", "(", "components", ")", ")", "/", "len", "(", "components", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "\n", "", "self", ".", "_keys", "=", "components", "[", "0", "]", ".", "keys", "\n", "for", "c", "in", "components", "[", "1", ":", "]", ":", "\n", "      ", "if", "c", ".", "keys", "!=", "self", ".", "_keys", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'All components must have the same key sets. However detected key '", "\n", "'sets {} and {}'", ".", "format", "(", "self", ".", "_keys", ",", "c", ".", "keys", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Mixture.sample": [[189, 194], ["factor_distributions.Mixture._get_rng", "factor_distributions.Mixture.choice", "factor_distributions.Mixture.components[].sample", "len"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "", "", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "rng", "=", "self", ".", "_get_rng", "(", "rng", ")", "\n", "sample_index", "=", "rng", ".", "choice", "(", "len", "(", "self", ".", "components", ")", ",", "p", "=", "self", ".", "probs", ")", "\n", "sample", "=", "self", ".", "components", "[", "sample_index", "]", ".", "sample", "(", "rng", "=", "rng", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Mixture.contains": [[195, 197], ["any", "c.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "return", "any", "(", "c", ".", "contains", "(", "spec", ")", "for", "c", "in", "self", ".", "components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Mixture.to_str": [[198, 206], ["x.to_str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str"], ["", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "components_strings", "=", "[", "x", ".", "to_str", "(", "indent", "+", "2", ")", "for", "x", "in", "self", ".", "components", "]", "\n", "s", "=", "(", "indent", "*", "'  '", "+", "'<Mixture:\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'components=[\\n{},\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'],\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'probs={}>'", ")", ".", "format", "(", "\n", "',\\n'", ".", "join", "(", "components_strings", ")", ",", "self", ".", "probs", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Mixture.keys": [[207, 210], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Intersection.__init__": [[215, 239], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "components", ",", "index_for_sampling", "=", "0", ")", ":", "\n", "    ", "\"\"\"Construct intersection of component distributions.\n\n    Samples are generated by sampling from one of the components and then doing\n    rejection with the others, so if the component being sampled has some\n    non-uniformity (e.g. a mixture with non-uniform probs), that non-uniformity\n    will be inherited by the intersection.\n\n    Args:\n     components: Iterable of distributions.\n     index_for_sampling: Int. Index of the component to use for sampling. All\n       other components will be used to reject its samples. For efficiency, the\n       user should ensure index_for_sampling corresponds to the smallest\n       component distribution.\n    \"\"\"", "\n", "self", ".", "components", "=", "components", "\n", "self", ".", "index_for_sampling", "=", "index_for_sampling", "\n", "\n", "self", ".", "_keys", "=", "components", "[", "0", "]", ".", "keys", "\n", "for", "c", "in", "components", "[", "1", ":", "]", ":", "\n", "      ", "if", "c", ".", "keys", "!=", "self", ".", "_keys", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'All components must have the same key sets. However detected key '", "\n", "'sets {} and {}'", ".", "format", "(", "self", ".", "_keys", ",", "c", ".", "keys", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Intersection.sample": [[240, 250], ["factor_distributions.Intersection._get_rng", "ValueError", "factor_distributions.Intersection.components[].sample", "all", "str", "c.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "", "", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "rng", "=", "self", ".", "_get_rng", "(", "rng", ")", "\n", "tries", "=", "0", "\n", "while", "tries", "<", "_MAX_TRIES", ":", "\n", "      ", "tries", "+=", "1", "\n", "sample", "=", "self", ".", "components", "[", "self", ".", "index_for_sampling", "]", ".", "sample", "(", "rng", "=", "rng", ")", "\n", "if", "all", "(", "c", ".", "contains", "(", "sample", ")", "for", "c", "in", "self", ".", "components", ")", ":", "\n", "        ", "return", "sample", "\n", "", "", "raise", "ValueError", "(", "'Maximum number of tried exceeded when trying to sample '", "\n", "'from {}.'", ".", "format", "(", "str", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Intersection.contains": [[251, 253], ["all", "c.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "return", "all", "(", "c", ".", "contains", "(", "spec", ")", "for", "c", "in", "self", ".", "components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Intersection.to_str": [[254, 262], ["x.to_str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str"], ["", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "components_strings", "=", "[", "x", ".", "to_str", "(", "indent", "+", "2", ")", "for", "x", "in", "self", ".", "components", "]", "\n", "s", "=", "(", "indent", "*", "'  '", "+", "'<Intersection:\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'components=[\\n{},\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'],\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'index_for_sampling={}>'", ")", ".", "format", "(", "\n", "',\\n'", ".", "join", "(", "components_strings", ")", ",", "self", ".", "index_for_sampling", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Intersection.keys": [[263, 266], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Product.__init__": [[271, 289], ["functools.reduce", "sum", "len", "ValueError", "set", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "components", ")", ":", "\n", "    ", "\"\"\"Construct product distribution.\n\n    This is used to create distributions over larger numbers of factors by\n    taking the product of components. The components must have disjoint key\n    sets.\n\n    Args:\n      components: Iterable of distributions.\n    \"\"\"", "\n", "self", ".", "components", "=", "components", "\n", "\n", "self", ".", "_keys", "=", "functools", ".", "reduce", "(", "set", ".", "union", ",", "[", "set", "(", "c", ".", "keys", ")", "for", "c", "in", "components", "]", ")", "\n", "num_keys", "=", "sum", "(", "len", "(", "c", ".", "keys", ")", "for", "c", "in", "components", ")", "\n", "if", "len", "(", "self", ".", "_keys", ")", "<", "num_keys", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'All components must have different keys, yet there are {} '", "\n", "'overlapping keys.'", ".", "format", "(", "num_keys", "-", "len", "(", "self", ".", "_keys", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Product.sample": [[290, 296], ["factor_distributions.Product._get_rng", "sample.update", "c.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.update", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "rng", "=", "self", ".", "_get_rng", "(", "rng", ")", "\n", "sample", "=", "{", "}", "\n", "for", "c", "in", "self", ".", "components", ":", "\n", "      ", "sample", ".", "update", "(", "c", ".", "sample", "(", "rng", "=", "rng", ")", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Product.contains": [[297, 299], ["all", "c.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "return", "all", "(", "c", ".", "contains", "(", "spec", ")", "for", "c", "in", "self", ".", "components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Product.to_str": [[300, 307], ["x.to_str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str"], ["", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "components_strings", "=", "[", "x", ".", "to_str", "(", "indent", "+", "2", ")", "for", "x", "in", "self", ".", "components", "]", "\n", "s", "=", "(", "indent", "*", "'  '", "+", "'<Product:\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'components=[\\n{},\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "']>'", ")", ".", "format", "(", "\n", "',\\n'", ".", "join", "(", "components_strings", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Product.keys": [[308, 311], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.SetMinus.__init__": [[316, 334], ["hold_out.keys.issubset", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base", ",", "hold_out", ")", ":", "\n", "    ", "\"\"\"Construct setminus of distributions..\n\n    This uses rejection sampling to take the difference of two distributions.\n\n    Args:\n      base: Distribution from which candidate samples are drawn.\n      hold_out: Distribution used to reject samples from base.\n    \"\"\"", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "hold_out", "=", "hold_out", "\n", "\n", "self", ".", "_keys", "=", "base", ".", "keys", "\n", "if", "not", "hold_out", ".", "keys", ".", "issubset", "(", "self", ".", "_keys", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Keys {} of hold_out is not a subset of keys {} of SetMinus base '", "\n", "'distribution.'", "\n", ".", "format", "(", "hold_out", ".", "keys", ",", "base", ".", "keys", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.SetMinus.sample": [[335, 345], ["factor_distributions.SetMinus._get_rng", "ValueError", "factor_distributions.SetMinus.base.sample", "factor_distributions.SetMinus.hold_out.contains", "str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "rng", "=", "self", ".", "_get_rng", "(", "rng", ")", "\n", "tries", "=", "0", "\n", "while", "tries", "<", "_MAX_TRIES", ":", "\n", "      ", "tries", "+=", "1", "\n", "sample", "=", "self", ".", "base", ".", "sample", "(", "rng", "=", "rng", ")", "\n", "if", "not", "self", ".", "hold_out", ".", "contains", "(", "sample", ")", ":", "\n", "        ", "return", "sample", "\n", "", "", "raise", "ValueError", "(", "'Maximum number of tried exceeded when trying to sample '", "\n", "'from {}.'", ".", "format", "(", "str", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.SetMinus.contains": [[346, 348], ["factor_distributions.SetMinus.base.contains", "factor_distributions.SetMinus.hold_out.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "return", "self", ".", "base", ".", "contains", "(", "spec", ")", "and", "not", "self", ".", "hold_out", ".", "contains", "(", "spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.SetMinus.to_str": [[349, 355], ["factor_distributions.SetMinus.base.to_str", "factor_distributions.SetMinus.hold_out.to_str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str"], ["", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "s", "=", "(", "indent", "*", "'  '", "+", "'<SetMinus:\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'base=\\n{},\\n'", "+", "\n", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'hold_out=\\n{}>'", ")", ".", "format", "(", "\n", "self", ".", "base", ".", "to_str", "(", "indent", "+", "2", ")", ",", "self", ".", "hold_out", ".", "to_str", "(", "indent", "+", "2", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.SetMinus.keys": [[356, 359], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.__init__": [[364, 387], ["filtering.keys.issubset", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base", ",", "filtering", ")", ":", "\n", "    ", "\"\"\"Construct selection of a base distribution given a filter.\n\n    Given a base Distribution and a filter Distribution, returns samples of\n    the base which are compatible with the filter.\n\n    This is related to Intersection, but does not expect the base and filters\n    to have the same keys. Instead, the filters should be subsets of the base.\n    This is the same as SetMinus, except the filter accepts instead of rejects\n    samples.\n\n    Args:\n      base: Distribution from which candidate samples are drawn.\n      filtering: Distribution used to select samples from base.\n    \"\"\"", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "filtering", "=", "filtering", "\n", "\n", "self", ".", "_keys", "=", "base", ".", "keys", "\n", "if", "not", "filtering", ".", "keys", ".", "issubset", "(", "self", ".", "_keys", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Keys {} of filtering is not a subset of keys {} of Selection base '", "\n", "'distribution.'", ".", "format", "(", "filtering", ".", "keys", ",", "base", ".", "keys", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.sample": [[388, 399], ["factor_distributions.Selection._get_rng", "ValueError", "factor_distributions.Selection.base.sample", "factor_distributions.Selection.filtering.contains", "str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.AbstractDistribution._get_rng", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "", "def", "sample", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "    ", "rng", "=", "self", ".", "_get_rng", "(", "rng", ")", "\n", "tries", "=", "0", "\n", "while", "tries", "<", "_MAX_TRIES", ":", "\n", "      ", "tries", "+=", "1", "\n", "sample", "=", "self", ".", "base", ".", "sample", "(", "rng", "=", "rng", ")", "\n", "if", "self", ".", "filtering", ".", "contains", "(", "sample", ")", ":", "\n", "        ", "return", "sample", "\n", "", "", "raise", "ValueError", "(", "\n", "'Maximum number of tried exceeded when trying to sample from {}.'", "\n", ".", "format", "(", "str", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains": [[400, 402], ["factor_distributions.Selection.base.contains", "factor_distributions.Selection.filtering.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["", "def", "contains", "(", "self", ",", "spec", ")", ":", "\n", "    ", "return", "self", ".", "base", ".", "contains", "(", "spec", ")", "and", "self", ".", "filtering", ".", "contains", "(", "spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str": [[403, 408], ["factor_distributions.Selection.base.to_str", "factor_distributions.Selection.filtering.to_str"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.to_str"], ["", "def", "to_str", "(", "self", ",", "indent", ")", ":", "\n", "    ", "s", "=", "(", "indent", "*", "'  '", "+", "'<Selection:\\n'", "+", "(", "indent", "+", "1", ")", "*", "'  '", "+", "\n", "'base=\\n{},\\n'", "+", "(", "indent", "+", "1", ")", "*", "'  '", "+", "'filtering=\\n{}>'", ")", ".", "format", "(", "\n", "self", ".", "base", ".", "to_str", "(", "indent", "+", "2", ")", ",", "self", ".", "filtering", ".", "to_str", "(", "indent", "+", "2", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.keys": [[409, 412], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_keys", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.__init__": [[49, 64], ["dm_env.specs.BoundedArray"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "1.0", ",", "motion_cost", "=", "0.0", ",", "noise_scale", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructor.\n\n    Args:\n      scale: Multiplier by which the motion is scaled down. Should be in [0.0,\n        1.0].\n      motion_cost: Factor by which motion incurs cost.\n      noise_scale: Optional stddev of the noise. If scalar, applied to all\n        action space components. If vector, must have same shape as action.\n    \"\"\"", "\n", "self", ".", "_scale", "=", "scale", "\n", "self", ".", "_motion_cost", "=", "motion_cost", "\n", "self", ".", "_noise_scale", "=", "noise_scale", "\n", "self", ".", "_action_spec", "=", "specs", ".", "BoundedArray", "(", "\n", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ",", "minimum", "=", "0.0", ",", "maximum", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.get_motion": [[65, 68], ["None"], "methods", ["None"], ["", "def", "get_motion", "(", "self", ",", "action", ")", ":", "\n", "    ", "delta_pos", "=", "(", "action", "[", "2", ":", "]", "-", "0.5", ")", "*", "self", ".", "_scale", "\n", "return", "delta_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.apply_noise_to_action": [[69, 76], ["numpy.random.normal"], "methods", ["None"], ["", "def", "apply_noise_to_action", "(", "self", ",", "action", ")", ":", "\n", "    ", "if", "self", ".", "_noise_scale", ":", "\n", "      ", "noise", "=", "np", ".", "random", ".", "normal", "(", "\n", "loc", "=", "0.0", ",", "scale", "=", "self", ".", "_noise_scale", ",", "size", "=", "action", ".", "shape", ")", "\n", "return", "action", "+", "noise", "\n", "", "else", ":", "\n", "      ", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.get_sprite_from_position": [[77, 82], ["sprite.contains_point"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.contains_point"], ["", "", "def", "get_sprite_from_position", "(", "self", ",", "position", ",", "sprites", ")", ":", "\n", "    ", "for", "sprite", "in", "sprites", "[", ":", ":", "-", "1", "]", ":", "\n", "      ", "if", "sprite", ".", "contains_point", "(", "position", ")", ":", "\n", "        ", "return", "sprite", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.step": [[83, 105], ["action_spaces.SelectMove.apply_noise_to_action", "action_spaces.SelectMove.get_motion", "action_spaces.SelectMove.get_sprite_from_position", "action_spaces.SelectMove.move", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.apply_noise_to_action", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.DragAndDrop.get_motion", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.get_sprite_from_position", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.move"], ["", "def", "step", "(", "self", ",", "action", ",", "sprites", ",", "keep_in_frame", ")", ":", "\n", "    ", "\"\"\"Take an action and move the sprites.\n\n    Args:\n      action: Numpy array of shape (4,) in [0, 1]. First two components are the\n        position selection, second two are the motion selection.\n      sprites: Iterable of sprite.Sprite() instances. If a sprite is moved by\n        the action, its position is updated.\n      keep_in_frame: Bool. Whether to force sprites to stay in the frame by\n        clipping their centers of mass to be in [0, 1].\n\n    Returns:\n      Scalar cost of taking this action.\n    \"\"\"", "\n", "noised_action", "=", "self", ".", "apply_noise_to_action", "(", "action", ")", "\n", "position", "=", "noised_action", "[", ":", "2", "]", "\n", "motion", "=", "self", ".", "get_motion", "(", "noised_action", ")", "\n", "clicked_sprite", "=", "self", ".", "get_sprite_from_position", "(", "position", ",", "sprites", ")", "\n", "if", "clicked_sprite", "is", "not", "None", ":", "\n", "      ", "clicked_sprite", ".", "move", "(", "motion", ",", "keep_in_frame", "=", "keep_in_frame", ")", "\n", "\n", "", "return", "-", "self", ".", "_motion_cost", "*", "np", ".", "linalg", ".", "norm", "(", "motion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.sample": [[106, 109], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "    ", "\"\"\"Sample an action uniformly randomly.\"\"\"", "\n", "return", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1.", ",", "size", "=", "(", "4", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.action_spec": [[110, 112], ["None"], "methods", ["None"], ["", "def", "action_spec", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_action_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.DragAndDrop.get_motion": [[133, 138], ["None"], "methods", ["None"], ["def", "get_motion", "(", "self", ",", "action", ")", ":", "\n", "    ", "pos", "=", "action", "[", ":", "2", "]", "\n", "target", "=", "action", "[", "2", ":", "]", "\n", "delta_pos", "=", "(", "target", "-", "pos", ")", "*", "self", ".", "_scale", "\n", "return", "delta_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.__init__": [[152, 170], ["dm_env.specs.DiscreteArray", "dm_env.specs.DiscreteArray", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "step_size", "=", "0.05", ",", "motion_cost", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Constructor.\n\n    Args:\n      step_size: Fraction of the arena width the sprite moves for each step.\n      motion_cost: Each step incurs cost motion_cost * step_size.\n    \"\"\"", "\n", "self", ".", "_step_size", "=", "step_size", "\n", "self", ".", "_motion_cost", "=", "motion_cost", "\n", "self", ".", "_action_spec", "=", "[", "\n", "specs", ".", "DiscreteArray", "(", "num_values", "=", "2", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "specs", ".", "DiscreteArray", "(", "num_values", "=", "4", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "]", "\n", "self", ".", "action_to_motion", "=", "{", "\n", "0", ":", "np", ".", "array", "(", "[", "0", ",", "self", ".", "_step_size", "]", ")", ",", "# Up", "\n", "1", ":", "np", ".", "array", "(", "[", "-", "self", ".", "_step_size", ",", "0", "]", ")", ",", "# Left", "\n", "2", ":", "np", ".", "array", "(", "[", "0", ",", "-", "self", ".", "_step_size", "]", ")", ",", "# Down", "\n", "3", ":", "np", ".", "array", "(", "[", "self", ".", "_step_size", ",", "0", "]", ")", ",", "# Right", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.get_body_sprite": [[172, 175], ["None"], "methods", ["None"], ["", "def", "get_body_sprite", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Return the sprite representing the agent's body.\"\"\"", "\n", "return", "sprites", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.get_non_body_sprites": [[176, 179], ["None"], "methods", ["None"], ["", "def", "get_non_body_sprites", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "\"\"\"Return all sprites except that representing the agent's body.\"\"\"", "\n", "return", "sprites", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.get_carried_sprite": [[180, 186], ["action_spaces.Embodied.get_body_sprite", "action_spaces.Embodied.get_non_body_sprites", "sprite.contains_point"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.get_body_sprite", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.get_non_body_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.contains_point"], ["", "def", "get_carried_sprite", "(", "self", ",", "sprites", ")", ":", "\n", "    ", "body_position", "=", "self", ".", "get_body_sprite", "(", "sprites", ")", ".", "position", "\n", "for", "sprite", "in", "self", ".", "get_non_body_sprites", "(", "sprites", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "      ", "if", "sprite", ".", "contains_point", "(", "body_position", ")", ":", "\n", "        ", "return", "sprite", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.step": [[187, 215], ["action_spaces.Embodied.get_body_sprite().move", "action_spaces.Embodied.get_carried_sprite", "action_spaces.Embodied.move", "action_spaces.Embodied.get_body_sprite"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.move", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.get_carried_sprite", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.move", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.get_body_sprite"], ["", "def", "step", "(", "self", ",", "action", ",", "sprites", ",", "keep_in_frame", ")", ":", "\n", "    ", "\"\"\"Take an action and move the sprites.\n\n    Args:\n      action: Iterable of length 2. First component must be in [0, 1] and second\n        component must be in [0, 1, 2, 3].\n      sprites: Iterable of sprite.Sprite() instances. sprites[-1] is the agent's\n        body.\n      keep_in_frame: Bool. Whether to force sprites to stay in the frame by\n        clipping their centers of mass to be in [0, 1].\n\n    Returns:\n      Scalar cost of taking this action.\n    \"\"\"", "\n", "\n", "carry", "=", "action", "[", "0", "]", "\n", "motion", "=", "self", ".", "action_to_motion", "[", "action", "[", "1", "]", "]", "\n", "\n", "# Move carried sprite if necessary", "\n", "if", "carry", ":", "\n", "      ", "carried_sprite", "=", "self", ".", "get_carried_sprite", "(", "sprites", ")", "\n", "if", "carried_sprite", "is", "not", "None", ":", "\n", "        ", "carried_sprite", ".", "move", "(", "motion", ",", "keep_in_frame", "=", "keep_in_frame", ")", "\n", "\n", "# Move agent body", "\n", "", "", "self", ".", "get_body_sprite", "(", "sprites", ")", ".", "move", "(", "motion", ",", "keep_in_frame", "=", "keep_in_frame", ")", "\n", "\n", "return", "-", "self", ".", "_motion_cost", "*", "self", ".", "_step_size", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample": [[216, 219], ["numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "    ", "\"\"\"Sample an action uniformly randomly.\"\"\"", "\n", "return", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.action_spec": [[220, 222], ["None"], "methods", ["None"], ["", "def", "action_spec", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_action_spec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.__init__": [[56, 95], ["numpy.array", "sprite.Sprite._reset_centered_path"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite._reset_centered_path"], ["def", "__init__", "(", "self", ",", "\n", "x", "=", "0.5", ",", "\n", "y", "=", "0.5", ",", "\n", "shape", "=", "'square'", ",", "\n", "angle", "=", "0", ",", "\n", "scale", "=", "0.1", ",", "\n", "c0", "=", "0", ",", "\n", "c1", "=", "0", ",", "\n", "c2", "=", "0", ",", "\n", "x_vel", "=", "0.0", ",", "\n", "y_vel", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"Construct sprite.\n\n    This class is agnostic to the color scheme, namely (c1, c2, c3) could be in\n    RGB coordinates or HSV, HSL, etc. without this class knowing. The color\n    scheme conversion for rendering must be done in the renderer.\n\n    Args:\n      x: Float in [0, 1]. x-position.\n      y: Float in [0, 1]. y-position.\n      shape: String. Shape of the sprite. Must be a key of constants.SHAPES.\n      angle: Int. Angle in degrees.\n      scale: Float in [0, 1]. Scale of the sprite, from a point to the area of\n        the entire frame. This scales linearly with respect to sprite width,\n        hence with power 1/2 with respect to sprite area.\n      c0: Scalar. First coordinate of color.\n      c1: Scalar. Second coordinate of color.\n      c2: Scalar. Third coordinate of color.\n      x_vel: Float. x-velocity.\n      y_vel: Float. y-velocity.\n    \"\"\"", "\n", "self", ".", "_position", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "self", ".", "_shape", "=", "shape", "\n", "self", ".", "_angle", "=", "angle", "\n", "self", ".", "_scale", "=", "scale", "\n", "self", ".", "_color", "=", "(", "c0", ",", "c1", ",", "c2", ")", "\n", "self", ".", "_velocity", "=", "(", "x_vel", ",", "y_vel", ")", "\n", "\n", "self", ".", "_reset_centered_path", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite._reset_centered_path": [[96, 102], ["matplotlib.path.Path", "scale_rotate.transform_path", "matplotlib.transforms.Affine2D().scale", "matplotlib.transforms.Affine2D().rotate_deg", "matplotlib.transforms.Affine2D", "matplotlib.transforms.Affine2D"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.scale"], ["", "def", "_reset_centered_path", "(", "self", ")", ":", "\n", "    ", "path", "=", "mpl_path", ".", "Path", "(", "constants", ".", "SHAPES", "[", "self", ".", "_shape", "]", ")", "\n", "scale_rotate", "=", "(", "\n", "mpl_transforms", ".", "Affine2D", "(", ")", ".", "scale", "(", "self", ".", "_scale", ")", "+", "\n", "mpl_transforms", ".", "Affine2D", "(", ")", ".", "rotate_deg", "(", "self", ".", "_angle", ")", ")", "\n", "self", ".", "_centered_path", "=", "scale_rotate", ".", "transform_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.move": [[103, 108], ["numpy.clip"], "methods", ["None"], ["", "def", "move", "(", "self", ",", "motion", ",", "keep_in_frame", "=", "False", ")", ":", "\n", "    ", "\"\"\"Move the sprite, optionally keeping its centerpoint within the frame.\"\"\"", "\n", "self", ".", "_position", "+=", "motion", "\n", "if", "keep_in_frame", ":", "\n", "      ", "self", ".", "_position", "=", "np", ".", "clip", "(", "self", ".", "_position", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.update_position": [[109, 112], ["sprite.Sprite.move"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.move"], ["", "", "def", "update_position", "(", "self", ",", "keep_in_frame", "=", "False", ")", ":", "\n", "    ", "\"\"\"Update position based on velocity.\"\"\"", "\n", "self", ".", "move", "(", "self", ".", "velocity", ",", "keep_in_frame", "=", "keep_in_frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.contains_point": [[113, 116], ["sprite.Sprite._centered_path.contains_point"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.contains_point"], ["", "def", "contains_point", "(", "self", ",", "point", ")", ":", "\n", "    ", "\"\"\"Check if the point is contained in the Sprite.\"\"\"", "\n", "return", "self", ".", "_centered_path", ".", "contains_point", "(", "point", "-", "self", ".", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.sample_contained_position": [[117, 126], ["numpy.min", "numpy.max", "range", "ValueError", "sprite.Sprite.contains_point", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.contains_point"], ["", "def", "sample_contained_position", "(", "self", ")", ":", "\n", "    ", "\"\"\"Sample random position uniformly within sprite.\"\"\"", "\n", "low", "=", "np", ".", "min", "(", "self", ".", "_centered_path", ".", "vertices", ",", "axis", "=", "0", ")", "\n", "high", "=", "np", ".", "max", "(", "self", ".", "_centered_path", ".", "vertices", ",", "axis", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "_MAX_TRIES", ")", ":", "\n", "      ", "sample", "=", "self", ".", "_position", "+", "np", ".", "random", ".", "uniform", "(", "low", ",", "high", ")", "\n", "if", "self", ".", "contains_point", "(", "sample", ")", ":", "\n", "        ", "return", "sample", "\n", "", "", "raise", "ValueError", "(", "'max_tries exceeded. There is almost surely an error in '", "\n", "'the SpriteWorld library code.'", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.vertices": [[128, 134], ["matplotlib.transforms.Affine2D().translate", "matplotlib.transforms.Affine2D().translate.transform_path", "matplotlib.transforms.Affine2D"], "methods", ["None"], ["", "@", "property", "\n", "def", "vertices", "(", "self", ")", ":", "\n", "    ", "\"\"\"Numpy array of vertices of the shape.\"\"\"", "\n", "transform", "=", "mpl_transforms", ".", "Affine2D", "(", ")", ".", "translate", "(", "*", "self", ".", "_position", ")", "\n", "path", "=", "transform", ".", "transform_path", "(", "self", ".", "_centered_path", ")", "\n", "return", "path", ".", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.out_of_frame": [[135, 139], ["numpy.all", "numpy.all"], "methods", ["None"], ["", "@", "property", "\n", "def", "out_of_frame", "(", "self", ")", ":", "\n", "    ", "return", "not", "(", "np", ".", "all", "(", "self", ".", "_position", ">=", "[", "0.", ",", "0.", "]", ")", "and", "\n", "np", ".", "all", "(", "self", ".", "_position", "<=", "[", "1.", ",", "1.", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.x": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_position", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.y": [[144, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_position", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.shape": [[152, 156], ["sprite.Sprite._reset_centered_path"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite._reset_centered_path"], ["", "@", "shape", ".", "setter", "\n", "def", "shape", "(", "self", ",", "s", ")", ":", "\n", "    ", "self", ".", "_shape", "=", "s", "\n", "self", ".", "_reset_centered_path", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.angle": [[161, 166], ["matplotlib.transforms.Affine2D().rotate_deg", "matplotlib.transforms.Affine2D().rotate_deg.transform_path", "matplotlib.transforms.Affine2D"], "methods", ["None"], ["", "@", "angle", ".", "setter", "\n", "def", "angle", "(", "self", ",", "a", ")", ":", "\n", "    ", "rotate", "=", "mpl_transforms", ".", "Affine2D", "(", ")", ".", "rotate_deg", "(", "a", "-", "self", ".", "_angle", ")", "\n", "self", ".", "_centered_path", "=", "rotate", ".", "transform_path", "(", "self", ".", "_centered_path", ")", "\n", "self", ".", "_angle", "=", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.scale": [[171, 176], ["matplotlib.transforms.Affine2D().scale", "matplotlib.transforms.Affine2D().scale.transform_path", "matplotlib.transforms.Affine2D"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.scale"], ["", "@", "scale", ".", "setter", "\n", "def", "scale", "(", "self", ",", "s", ")", ":", "\n", "    ", "rescale", "=", "mpl_transforms", ".", "Affine2D", "(", ")", ".", "scale", "(", "s", "-", "self", ".", "_scale", ")", "\n", "self", ".", "_centered_path", "=", "rescale", ".", "transform_path", "(", "self", ".", "_centered_path", ")", "\n", "self", ".", "_scale", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.c0": [[177, 180], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "c0", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_color", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.c1": [[181, 184], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "c1", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_color", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.c2": [[185, 188], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "c2", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_color", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.x_vel": [[189, 192], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x_vel", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_velocity", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.y_vel": [[193, 196], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y_vel", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_velocity", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.color": [[197, 200], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "color", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_color", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.position": [[201, 204], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "position", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_position", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.velocity": [[205, 208], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "velocity", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_velocity", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.factors": [[209, 215], ["collections.OrderedDict", "getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "factors", "(", "self", ")", ":", "\n", "    ", "factors", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "factor_name", "in", "FACTOR_NAMES", ":", "\n", "      ", "factors", "[", "factor_name", "]", "=", "getattr", "(", "self", ",", "factor_name", ")", "\n", "", "return", "factors", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.__init__": [[51, 59], ["gym_wrapper.GymWrapper._env.reset"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "    ", "self", ".", "_env", "=", "env", "\n", "self", ".", "_last_render", "=", "None", "\n", "self", ".", "_action_space", "=", "None", "\n", "self", ".", "_observation_space", "=", "None", "\n", "\n", "# Reset Spriteworld to setup the observation_specs correctly", "\n", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.__getattr__": [[60, 62], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "    ", "return", "getattr", "(", "self", ".", "_env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.observation_space": [[63, 72], ["gym_wrapper.GymWrapper._env.observation_spec().items", "gym.spaces.Dict", "gym.spaces.Box", "gym_wrapper.GymWrapper._env.observation_spec"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_observation_space", "is", "None", ":", "\n", "      ", "components", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "self", ".", "_env", ".", "observation_spec", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "components", "[", "key", "]", "=", "spaces", ".", "Box", "(", "\n", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "value", ".", "shape", ",", "dtype", "=", "value", ".", "dtype", ")", "\n", "", "self", ".", "_observation_space", "=", "spaces", ".", "Dict", "(", "components", ")", "\n", "", "return", "self", ".", "_observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.action_space": [[73, 78], ["gym_wrapper._spec_to_space", "gym_wrapper.GymWrapper._env.action_spec"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper._spec_to_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.action_spec"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_action_space", "is", "None", ":", "\n", "      ", "self", ".", "_action_space", "=", "_spec_to_space", "(", "self", ".", "_env", ".", "action_spec", "(", ")", ")", "\n", "", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper._process_obs": [[79, 90], ["obs.items", "numpy.asarray", "obs[].astype"], "methods", ["None"], ["", "def", "_process_obs", "(", "self", ",", "obs", ")", ":", "\n", "    ", "\"\"\"Convert and processes observations.\"\"\"", "\n", "for", "k", ",", "v", "in", "obs", ".", "items", "(", ")", ":", "\n", "      ", "obs", "[", "k", "]", "=", "np", ".", "asarray", "(", "v", ")", "\n", "if", "obs", "[", "k", "]", ".", "dtype", "==", "np", ".", "bool", ":", "\n", "# Convert boolean 'success' into an float32 to predict it.", "\n", "        ", "obs", "[", "k", "]", "=", "obs", "[", "k", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "k", "==", "'image'", ":", "\n", "        ", "self", ".", "_last_render", "=", "obs", "[", "k", "]", "\n", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.step": [[91, 110], ["gym_wrapper.GymWrapper._env.step", "gym_wrapper.GymWrapper._process_obs", "gym_wrapper.GymWrapper.last"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper._process_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "    ", "\"\"\"Main step function for the environment.\n\n    Args:\n      action: Array R^4\n\n    Returns:\n      obs: dict of observations. Follows from the 'renderers' configuration\n        provided as parameters to Spriteworld.\n      reward: scalar reward.\n      done: True if terminal state.\n      info: dict with extra information (e.g. discount factor).\n    \"\"\"", "\n", "time_step", "=", "self", ".", "_env", ".", "step", "(", "action", ")", "\n", "obs", "=", "self", ".", "_process_obs", "(", "time_step", ".", "observation", ")", "\n", "reward", "=", "time_step", ".", "reward", "or", "0", "\n", "done", "=", "time_step", ".", "last", "(", ")", "\n", "info", "=", "{", "'discount'", ":", "time_step", ".", "discount", "}", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.reset": [[111, 120], ["gym_wrapper.GymWrapper._env.reset", "gym_wrapper.GymWrapper._process_obs"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper._process_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "\"\"\"Reset environment.\n\n    Returns:\n      obs: dict of observations. Follows from the 'renderers' configuration\n        provided as parameters to Spriteworld.\n    \"\"\"", "\n", "time_step", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "return", "self", ".", "_process_obs", "(", "time_step", ".", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.render": [[121, 132], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'rgb_array'", ")", ":", "\n", "    ", "\"\"\"Render function, noop for compatibility.\n\n    Args:\n      mode: unused, always returns an RGB array.\n\n    Returns:\n      Last RGB observation (cached from last observation with key 'image')\n    \"\"\"", "\n", "del", "mode", "\n", "return", "self", ".", "_last_render", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.close": [[133, 136], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "\"\"\"Unused.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper._spec_to_space": [[26, 40], ["isinstance", "gym.spaces.Tuple", "isinstance", "gym.spaces.Discrete", "isinstance", "gym_wrapper._spec_to_space", "gym.spaces.Box", "ValueError", "numpy.asscalar", "numpy.asscalar"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper._spec_to_space"], ["def", "_spec_to_space", "(", "spec", ")", ":", "\n", "  ", "\"\"\"Convert dm_env.specs to gym.Spaces.\"\"\"", "\n", "if", "isinstance", "(", "spec", ",", "list", ")", ":", "\n", "    ", "return", "spaces", ".", "Tuple", "(", "[", "_spec_to_space", "(", "s", ")", "for", "s", "in", "spec", "]", ")", "\n", "", "elif", "isinstance", "(", "spec", ",", "specs", ".", "DiscreteArray", ")", ":", "\n", "    ", "return", "spaces", ".", "Discrete", "(", "spec", ".", "num_values", ")", "\n", "", "elif", "isinstance", "(", "spec", ",", "specs", ".", "BoundedArray", ")", ":", "\n", "    ", "return", "spaces", ".", "Box", "(", "\n", "np", ".", "asscalar", "(", "spec", ".", "minimum", ")", ",", "\n", "np", ".", "asscalar", "(", "spec", ".", "maximum", ")", ",", "\n", "shape", "=", "spec", ".", "shape", ",", "\n", "dtype", "=", "spec", ".", "dtype", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Unknown type for specs: {}'", ".", "format", "(", "spec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.__init__": [[41, 59], ["matplotlib.ion", "matplotlib.figure", "matplotlib.gridspec.GridSpec", "matplotlib.subplot", "demo_ui.MatplotlibUI._ax_image.axis", "matplotlib.subplot", "demo_ui.MatplotlibUI._ax_scalar.spines[].set_visible", "demo_ui.MatplotlibUI._ax_scalar.spines[].set_visible", "demo_ui.MatplotlibUI._ax_scalar.xaxis.set_ticks_position", "demo_ui.MatplotlibUI._ax_scalar.yaxis.set_ticks_position", "demo_ui.MatplotlibUI._setup_callbacks"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI._setup_callbacks"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "rewards", "=", "10", "*", "[", "np", ".", "nan", "]", "\n", "self", ".", "rewards_bounds", "=", "[", "-", "10", ",", "10", "]", "\n", "self", ".", "last_success", "=", "None", "\n", "\n", "plt", ".", "ion", "(", ")", "\n", "self", ".", "_fig", "=", "plt", ".", "figure", "(", "\n", "figsize", "=", "(", "9", ",", "12", ")", ",", "num", "=", "'Spriteworld'", ",", "facecolor", "=", "'white'", ")", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "2", ",", "1", ",", "height_ratios", "=", "[", "3", ",", "1", "]", ")", "\n", "self", ".", "_ax_image", "=", "plt", ".", "subplot", "(", "gs", "[", "0", "]", ")", "\n", "self", ".", "_ax_image", ".", "axis", "(", "'off'", ")", "\n", "\n", "self", ".", "_ax_scalar", "=", "plt", ".", "subplot", "(", "gs", "[", "1", "]", ")", "\n", "self", ".", "_ax_scalar", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "self", ".", "_ax_scalar", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "self", ".", "_ax_scalar", ".", "xaxis", ".", "set_ticks_position", "(", "'bottom'", ")", "\n", "self", ".", "_ax_scalar", ".", "yaxis", ".", "set_ticks_position", "(", "'left'", ")", "\n", "self", ".", "_setup_callbacks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.ax_image": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ax_image", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_ax_image", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI._setup_callbacks": [[64, 86], ["demo_ui.MatplotlibUI._fig.canvas.mpl_connect", "logging.getLogger().setLevel", "absl.logging.getLogger().setLevel", "logging.info", "absl.logging.info", "absl.logging.info", "matplotlib.close", "sys.exit", "logging.getLogger", "absl.logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.gym_wrapper.GymWrapper.close"], ["", "def", "_setup_callbacks", "(", "self", ")", ":", "\n", "    ", "\"\"\"Default callbacks for the UI.\"\"\"", "\n", "\n", "# Pressing escape should stop the UI", "\n", "def", "_onkeypress", "(", "event", ")", ":", "\n", "      ", "if", "event", ".", "key", "==", "'escape'", ":", "\n", "# Stop UI", "\n", "        ", "logging", ".", "info", "(", "'Pressed escape, stopping UI.'", ")", "\n", "plt", ".", "close", "(", "self", ".", "_fig", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "self", ".", "_fig", ".", "canvas", ".", "mpl_connect", "(", "'key_release_event'", ",", "_onkeypress", ")", "\n", "\n", "# Disable default keyboard shortcuts", "\n", "for", "key", "in", "(", "'keymap.fullscreen'", ",", "'keymap.home'", ",", "'keymap.back'", ",", "\n", "'keymap.forward'", ",", "'keymap.pan'", ",", "'keymap.zoom'", ",", "'keymap.save'", ",", "\n", "'keymap.quit'", ",", "'keymap.grid'", ",", "'keymap.yscale'", ",", "'keymap.xscale'", ",", "\n", "'keymap.all_axes'", ")", ":", "\n", "      ", "plt", ".", "rcParams", "[", "key", "]", "=", "''", "\n", "\n", "# Disable logging of some matplotlib events", "\n", "", "log", ".", "getLogger", "(", "'matplotlib'", ")", ".", "setLevel", "(", "'WARNING'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI._draw_observation": [[87, 115], ["demo_ui.MatplotlibUI._ax_image.clear", "demo_ui.MatplotlibUI._ax_image.imshow", "demo_ui.MatplotlibUI._ax_image.set_xticks", "demo_ui.MatplotlibUI._ax_image.set_yticks", "numpy.isnan", "demo_ui.MatplotlibUI._ax_image.spines.values", "demo_ui.MatplotlibUI._ax_image.annotate", "sp.set_color", "sp.set_linewidth"], "methods", ["None"], ["", "def", "_draw_observation", "(", "self", ",", "image", ",", "action", ")", ":", "\n", "    ", "\"\"\"Draw the latest observation.\"\"\"", "\n", "self", ".", "_ax_image", ".", "clear", "(", ")", "\n", "self", ".", "_ax_image", ".", "imshow", "(", "image", ",", "interpolation", "=", "'none'", ")", "\n", "self", ".", "_ax_image", ".", "set_xticks", "(", "[", "]", ")", "\n", "self", ".", "_ax_image", ".", "set_yticks", "(", "[", "]", ")", "\n", "if", "action", "is", "not", "None", ":", "\n", "      ", "self", ".", "_ax_image", ".", "annotate", "(", "\n", "''", ",", "\n", "xycoords", "=", "'axes fraction'", ",", "\n", "xy", "=", "action", "[", ":", "2", "]", ",", "# Start of arrow", "\n", "xytext", "=", "action", "[", "2", ":", "]", ",", "# End of arrow", "\n", "arrowprops", "=", "{", "\n", "'arrowstyle'", ":", "'<|-'", ",", "\n", "'color'", ":", "'red'", ",", "\n", "'lw'", ":", "4", ",", "\n", "}", ")", "\n", "\n", "# Indicate success", "\n", "", "linewidth", "=", "1", "\n", "color", "=", "'black'", "\n", "if", "np", ".", "isnan", "(", "self", ".", "rewards", "[", "-", "1", "]", ")", ":", "\n", "      ", "linewidth", "=", "8", "\n", "color", "=", "'green'", "if", "self", ".", "last_success", "else", "'red'", "\n", "\n", "", "for", "sp", "in", "self", ".", "_ax_image", ".", "spines", ".", "values", "(", ")", ":", "\n", "      ", "sp", ".", "set_color", "(", "color", ")", "\n", "sp", ".", "set_linewidth", "(", "linewidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI._draw_rewards": [[116, 129], ["demo_ui.MatplotlibUI._ax_scalar.clear", "demo_ui.MatplotlibUI._ax_scalar.set_ylabel", "demo_ui.MatplotlibUI._ax_scalar.set_xlabel", "numpy.arange", "demo_ui.MatplotlibUI._ax_scalar.set_xticks", "demo_ui.MatplotlibUI._ax_scalar.axhline", "demo_ui.MatplotlibUI._ax_scalar.stem", "demo_ui.MatplotlibUI._ax_scalar.set_xlim", "demo_ui.MatplotlibUI._ax_scalar.set_ylim", "len"], "methods", ["None"], ["", "", "def", "_draw_rewards", "(", "self", ")", ":", "\n", "    ", "\"\"\"Draw the past rewards plot.\"\"\"", "\n", "self", ".", "_ax_scalar", ".", "clear", "(", ")", "\n", "self", ".", "_ax_scalar", ".", "set_ylabel", "(", "'Rewards'", ")", "\n", "self", ".", "_ax_scalar", ".", "set_xlabel", "(", "'Timestep'", ")", "\n", "xs", "=", "np", ".", "arange", "(", "-", "len", "(", "self", ".", "rewards", ")", ",", "0", ")", "\n", "self", ".", "_ax_scalar", ".", "set_xticks", "(", "xs", ")", "\n", "self", ".", "_ax_scalar", ".", "axhline", "(", "y", "=", "0.0", ",", "color", "=", "'lightgrey'", ",", "linestyle", "=", "'--'", ")", "\n", "self", ".", "_ax_scalar", ".", "stem", "(", "xs", ",", "self", ".", "rewards", ",", "basefmt", "=", "' '", ")", "\n", "\n", "self", ".", "_ax_scalar", ".", "set_xlim", "(", "(", "xs", "[", "0", "]", "-", "1.0", ",", "xs", "[", "-", "1", "]", "+", "1.0", ")", ")", "\n", "self", ".", "_ax_scalar", ".", "set_ylim", "(", "\n", "(", "self", ".", "rewards_bounds", "[", "0", "]", "-", "1.0", ",", "self", ".", "rewards_bounds", "[", "1", "]", "+", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.register_callback": [[130, 133], ["demo_ui.MatplotlibUI._fig.canvas.mpl_connect"], "methods", ["None"], ["", "def", "register_callback", "(", "self", ",", "event_name", ",", "callback", ")", ":", "\n", "    ", "\"\"\"Register a callback for the given event.\"\"\"", "\n", "self", ".", "_fig", ".", "canvas", ".", "mpl_connect", "(", "event_name", ",", "callback", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.update": [[134, 149], ["numpy.nanmin", "numpy.nanmax", "demo_ui.MatplotlibUI._draw_observation", "demo_ui.MatplotlibUI._draw_rewards", "matplotlib.show", "numpy.nanmin", "numpy.nanmax"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI._draw_observation", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI._draw_rewards"], ["", "def", "update", "(", "self", ",", "timestep", ",", "action", ")", ":", "\n", "    ", "\"\"\"Update the visualisation with the latest timestep and action.\"\"\"", "\n", "reward", "=", "timestep", ".", "reward", "\n", "if", "reward", "is", "None", ":", "\n", "      ", "reward", "=", "np", ".", "nan", "\n", "", "self", ".", "rewards", "=", "self", ".", "rewards", "[", "1", ":", "]", "+", "[", "reward", "]", "\n", "self", ".", "rewards_bounds", "[", "0", "]", "=", "np", ".", "nanmin", "(", "\n", "[", "np", ".", "nanmin", "(", "self", ".", "rewards", ")", ",", "self", ".", "rewards_bounds", "[", "0", "]", "]", ")", "\n", "self", ".", "rewards_bounds", "[", "1", "]", "=", "np", ".", "nanmax", "(", "\n", "[", "np", ".", "nanmax", "(", "self", ".", "rewards", ")", ",", "self", ".", "rewards_bounds", "[", "1", "]", "]", ")", "\n", "self", ".", "_draw_observation", "(", "timestep", ".", "observation", "[", "'image'", "]", ",", "action", ")", "\n", "self", ".", "_draw_rewards", "(", ")", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "\n", "self", ".", "last_success", "=", "timestep", ".", "observation", "[", "'success'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanDragAndDropAgent.__init__": [[154, 158], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "action_space", ",", "timeout", "=", "600", ")", ":", "\n", "    ", "self", ".", "_action_space", "=", "action_space", "\n", "self", ".", "_click", "=", "None", "\n", "self", ".", "_timeout", "=", "timeout", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanDragAndDropAgent.help": [[159, 161], ["logging.info", "absl.logging.info", "absl.logging.info"], "methods", ["None"], ["", "def", "help", "(", "self", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'Click to select an object, then click again to select where '", "\n", "'to move it.'", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanDragAndDropAgent.register_callbacks": [[163, 176], ["ui.register_callback", "event.inaxes.transAxes.inverted().transform", "event.inaxes.transAxes.inverted"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.register_callback"], ["", "def", "register_callbacks", "(", "self", ",", "ui", ")", ":", "\n", "    ", "\"\"\"Register the matplotlib callbacks required by the agent.\"\"\"", "\n", "\n", "def", "_onclick", "(", "event", ")", ":", "\n", "      ", "if", "event", ".", "inaxes", "and", "event", ".", "inaxes", "==", "ui", ".", "ax_image", ":", "\n", "# Map the click into axis-fraction positions (origin at bottom-left).", "\n", "        ", "self", ".", "_click", "=", "event", ".", "inaxes", ".", "transAxes", ".", "inverted", "(", ")", ".", "transform", "(", "\n", "(", "event", ".", "x", ",", "event", ".", "y", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_click", "=", "None", "\n", "", "return", "\n", "\n", "", "ui", ".", "register_callback", "(", "'button_press_event'", ",", "_onclick", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanDragAndDropAgent.begin_episode": [[177, 179], ["logging.info", "absl.logging.info", "absl.logging.info"], "methods", ["None"], ["", "def", "begin_episode", "(", "self", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'Starting episode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanDragAndDropAgent.step": [[180, 218], ["demo_ui.HumanDragAndDropAgent.step._get_action"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "timestep", ")", ":", "\n", "    ", "\"\"\"Take a step.\"\"\"", "\n", "del", "timestep", "# Unused", "\n", "\n", "def", "_get_click", "(", ")", ":", "\n", "      ", "\"\"\"Get mouse click.\"\"\"", "\n", "click", "=", "None", "\n", "while", "click", "is", "None", ":", "\n", "        ", "x", "=", "plt", ".", "waitforbuttonpress", "(", "timeout", "=", "self", ".", "_timeout", ")", "\n", "if", "x", "is", "None", ":", "\n", "          ", "logging", ".", "info", "(", "'Timed out. You took longer than %d seconds to click.'", ",", "\n", "self", ".", "_timeout", ")", "\n", "", "elif", "x", ":", "\n", "          ", "logging", ".", "info", "(", "'You pressed a key, but were supposed to click with the '", "\n", "'mouse.'", ")", "\n", "self", ".", "help", "(", ")", "\n", "", "else", ":", "\n", "          ", "click", "=", "self", ".", "_click", "\n", "", "", "return", "click", "\n", "\n", "", "def", "_get_action", "(", ")", ":", "\n", "      ", "\"\"\"Get action from user.\"\"\"", "\n", "logging", ".", "info", "(", "'Select sprite'", ")", "\n", "click_from", "=", "_get_click", "(", ")", "\n", "logging", ".", "info", "(", "'Select target'", ")", "\n", "click_to", "=", "_get_click", "(", ")", "\n", "try", ":", "\n", "        ", "action", "=", "np", ".", "concatenate", "(", "(", "click_from", ",", "click_to", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "any", "(", "np", ".", "isnan", "(", "action", ")", ")", ":", "\n", "          ", "raise", "ValueError", "\n", "", "self", ".", "_action_space", ".", "action_spec", "(", ")", ".", "validate", "(", "action", ")", "\n", "return", "action", "\n", "", "except", "(", "ValueError", ",", "TypeError", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Select a valid action'", ")", "\n", "return", "_get_action", "(", ")", "\n", "\n", "", "", "action", "=", "_get_action", "(", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanEmbodiedAgent.__init__": [[234, 240], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "action_space", ",", "timeout", "=", "600", ")", ":", "\n", "    ", "self", ".", "_action_space", "=", "action_space", "\n", "self", ".", "_key_press", "=", "None", "\n", "self", ".", "_carry", "=", "False", "\n", "self", ".", "_movement", "=", "None", "\n", "self", ".", "_timeout", "=", "timeout", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanEmbodiedAgent.help": [[241, 243], ["logging.info", "absl.logging.info", "absl.logging.info"], "methods", ["None"], ["", "def", "help", "(", "self", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'Use WASD/arrow keys to move, hold Space to carry.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanEmbodiedAgent.register_callbacks": [[244, 264], ["ui.register_callback", "ui.register_callback", "demo_ui.HumanEmbodiedAgent.help"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.register_callback", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.register_callback", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanEmbodiedAgent.help"], ["", "def", "register_callbacks", "(", "self", ",", "ui", ")", ":", "\n", "    ", "\"\"\"Register the matplotlib callbacks required by the agent.\"\"\"", "\n", "\n", "def", "_onkeypress", "(", "event", ")", ":", "\n", "      ", "if", "event", ".", "key", "in", "HumanEmbodiedAgent", ".", "MOTION_KEY_TO_ACTION", ":", "\n", "        ", "self", ".", "_movement", "=", "HumanEmbodiedAgent", ".", "MOTION_KEY_TO_ACTION", "[", "event", ".", "key", "]", "\n", "", "elif", "event", ".", "key", "==", "' '", ":", "\n", "        ", "self", ".", "_carry", "=", "True", "\n", "", "else", ":", "\n", "        ", "self", ".", "help", "(", ")", "\n", "\n", "", "", "ui", ".", "register_callback", "(", "'key_press_event'", ",", "_onkeypress", ")", "\n", "\n", "def", "_onkeyrelease", "(", "event", ")", ":", "\n", "      ", "if", "event", ".", "key", "==", "' '", ":", "\n", "        ", "self", ".", "_carry", "=", "False", "\n", "", "elif", "event", ".", "key", "in", "HumanEmbodiedAgent", ".", "MOTION_KEY_TO_ACTION", ":", "\n", "        ", "self", ".", "_movement", "=", "None", "\n", "\n", "", "", "ui", ".", "register_callback", "(", "'key_release_event'", ",", "_onkeyrelease", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanEmbodiedAgent.begin_episode": [[265, 267], ["logging.info", "absl.logging.info", "absl.logging.info"], "methods", ["None"], ["", "def", "begin_episode", "(", "self", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'Starting episode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanEmbodiedAgent.step": [[268, 296], ["demo_ui.HumanEmbodiedAgent.step._get_action"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "timestep", ")", ":", "\n", "    ", "\"\"\"Take a step.\"\"\"", "\n", "del", "timestep", "# Unused", "\n", "\n", "def", "_wait_for_movement_key_press", "(", ")", ":", "\n", "      ", "\"\"\"Get key press.\"\"\"", "\n", "ready", "=", "False", "\n", "while", "not", "ready", ":", "\n", "        ", "x", "=", "plt", ".", "waitforbuttonpress", "(", "timeout", "=", "self", ".", "_timeout", ")", "\n", "if", "x", "is", "None", ":", "\n", "          ", "logging", ".", "info", "(", "'Timed out. You took longer than %d seconds to click.'", ",", "\n", "self", ".", "_timeout", ")", "\n", "", "elif", "not", "x", ":", "\n", "          ", "logging", ".", "info", "(", "'You clicked, but you are supposed to use the Keyboard.'", ")", "\n", "self", ".", "help", "(", ")", "\n", "", "elif", "self", ".", "_movement", "is", "not", "None", ":", "\n", "          ", "ready", "=", "True", "\n", "\n", "", "", "", "def", "_get_action", "(", ")", ":", "\n", "      ", "\"\"\"Get action from user.\"\"\"", "\n", "_wait_for_movement_key_press", "(", ")", "\n", "\n", "action", "=", "(", "int", "(", "self", ".", "_carry", ")", ",", "self", ".", "_movement", ")", "\n", "for", "spec", ",", "a", "in", "zip", "(", "self", ".", "_action_space", ".", "action_spec", "(", ")", ",", "action", ")", ":", "\n", "        ", "spec", ".", "validate", "(", "a", ")", "\n", "", "return", "action", "\n", "\n", "", "return", "_get_action", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.setup_run_ui": [[298, 335], ["isinstance", "spriteworld.environment.Environment", "demo_ui.MatplotlibUI", "demo_ui.HumanEmbodiedAgent.register_callbacks", "environment.Environment.reset", "demo_ui.MatplotlibUI.update", "spriteworld.action_spaces.DragAndDrop", "demo_ui.HumanDragAndDropAgent", "isinstance", "spriteworld.renderers.PILRenderer", "spriteworld.renderers.Success", "demo_ui.HumanEmbodiedAgent.step", "environment.Environment.step", "isinstance", "demo_ui.HumanEmbodiedAgent", "ValueError", "demo_ui.MatplotlibUI.update", "demo_ui.MatplotlibUI.update"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.HumanEmbodiedAgent.register_callbacks", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.update", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.update", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.demo_ui.MatplotlibUI.update"], ["", "", "def", "setup_run_ui", "(", "env_config", ",", "render_size", ",", "task_hsv_colors", ",", "anti_aliasing", ")", ":", "\n", "  ", "\"\"\"Start a Demo UI given an env_config.\"\"\"", "\n", "if", "isinstance", "(", "env_config", "[", "'action_space'", "]", ",", "action_spaces", ".", "SelectMove", ")", ":", "\n", "# DragAndDrop is a bit easier to demo than the SelectMove action space", "\n", "    ", "env_config", "[", "'action_space'", "]", "=", "action_spaces", ".", "DragAndDrop", "(", "scale", "=", "0.5", ")", "\n", "agent", "=", "HumanDragAndDropAgent", "(", "env_config", "[", "'action_space'", "]", ")", "\n", "", "elif", "isinstance", "(", "env_config", "[", "'action_space'", "]", ",", "action_spaces", ".", "Embodied", ")", ":", "\n", "    ", "agent", "=", "HumanEmbodiedAgent", "(", "env_config", "[", "'action_space'", "]", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Demo is not configured to run with action space {}.'", ".", "format", "(", "\n", "env_config", "[", "'action_space'", "]", ")", ")", "\n", "", "env_config", "[", "'renderers'", "]", "=", "{", "\n", "'image'", ":", "\n", "renderers", ".", "PILRenderer", "(", "\n", "image_size", "=", "(", "render_size", ",", "render_size", ")", ",", "\n", "color_to_rgb", "=", "renderers", ".", "color_maps", ".", "hsv_to_rgb", "\n", "if", "task_hsv_colors", "else", "None", ",", "\n", "anti_aliasing", "=", "anti_aliasing", ")", ",", "\n", "'success'", ":", "\n", "renderers", ".", "Success", "(", ")", "\n", "}", "\n", "env", "=", "environment", ".", "Environment", "(", "**", "env_config", ")", "\n", "ui", "=", "MatplotlibUI", "(", ")", "\n", "agent", ".", "register_callbacks", "(", "ui", ")", "\n", "\n", "# Start RL loop", "\n", "timestep", "=", "env", ".", "reset", "(", ")", "\n", "ui", ".", "update", "(", "timestep", ",", "action", "=", "None", ")", "\n", "\n", "while", "True", ":", "\n", "    ", "action", "=", "agent", ".", "step", "(", "timestep", ")", "\n", "timestep", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "isinstance", "(", "env_config", "[", "'action_space'", "]", ",", "action_spaces", ".", "DragAndDrop", ")", ":", "\n", "      ", "ui", ".", "update", "(", "timestep", ",", "action", ")", "\n", "", "else", ":", "\n", "      ", "ui", ".", "update", "(", "timestep", ",", "None", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites": [[27, 46], ["callable", "num_sprites", "spriteworld.sprite.Sprite", "range", "factor_dist.sample"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["def", "generate_sprites", "(", "factor_dist", ",", "num_sprites", "=", "1", ")", ":", "\n", "  ", "\"\"\"Create callable that samples sprites from a factor distribution.\n\n  Args:\n    factor_dist: The factor distribution from which to sample. Should be an\n      instance of factor_distributions.AbstractDistribution.\n    num_sprites: Int or callable returning int. Number of sprites to generate\n      per call.\n\n  Returns:\n    _generate: Callable that returns a list of Sprites.\n  \"\"\"", "\n", "\n", "def", "_generate", "(", ")", ":", "\n", "    ", "n", "=", "num_sprites", "(", ")", "if", "callable", "(", "num_sprites", ")", "else", "num_sprites", "\n", "sprites", "=", "[", "sprite", ".", "Sprite", "(", "**", "factor_dist", ".", "sample", "(", ")", ")", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "return", "sprites", "\n", "\n", "", "return", "_generate", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators": [[48, 71], ["list", "itertools.chain", "generator"], "function", ["None"], ["", "def", "chain_generators", "(", "*", "sprite_generators", ")", ":", "\n", "  ", "\"\"\"Chain generators by concatenating output sprite sequences.\n\n  Essentially an 'AND' operation over sprite generators. This is useful when one\n  wants to control the number of samples from the modes of a multimodal sprite\n  distribution.\n\n  Note that factor_distributions.Mixture provides weighted mixture\n  distributions, so chain_generators() is typically only used when one wants to\n  forces the different modes to each have a non-zero number of sprites.\n\n  Args:\n    *sprite_generators: Callable sprite generators.\n\n  Returns:\n    _generate: Callable returning a list of sprites.\n  \"\"\"", "\n", "\n", "def", "_generate", "(", ")", ":", "\n", "    ", "return", "list", "(", "\n", "itertools", ".", "chain", "(", "*", "[", "generator", "(", ")", "for", "generator", "in", "sprite_generators", "]", ")", ")", "\n", "\n", "", "return", "_generate", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.sample_generator": [[73, 99], ["numpy.random.choice", "sampled_generator", "len"], "function", ["None"], ["", "def", "sample_generator", "(", "sprite_generators", ",", "p", "=", "None", ")", ":", "\n", "  ", "\"\"\"Sample one element from a set of sprite generators.\n\n  Essential an 'OR' operation over sprite generators. This returns a callable\n  that samples a generator from sprite_generators and calls it.\n\n  Note that if sprite_generators each return 1 sprite, this functionality can be\n  achieved with factor_distributions.Mixture, so sample_generator is typically\n  used when sprite_generators each return multiple sprites. Effectively it\n  allows dependant sampling from a multimodal factor distribution.\n\n  Args:\n    sprite_generators: Iterable of callable sprite generators.\n    p: Probabilities associated with each generator. If None, assumes uniform\n      distribution.\n\n  Returns:\n    _generate: Callable sprite generator.\n  \"\"\"", "\n", "\n", "def", "_generate", "(", ")", ":", "\n", "    ", "sample_index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "sprite_generators", ")", ",", "p", "=", "p", ")", "\n", "sampled_generator", "=", "sprite_generators", "[", "sample_index", "]", "\n", "return", "sampled_generator", "(", ")", "\n", "\n", "", "return", "_generate", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle": [[101, 129], ["sprite_generator", "numpy.arange", "numpy.random.shuffle", "len"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle"], ["", "def", "shuffle", "(", "sprite_generator", ")", ":", "\n", "  ", "\"\"\"Randomize the order of sprites sample from sprite_generator.\n\n  This is useful because sprites are z-layered with occlusion according to their\n  order, so is sprite_generator is the output of chain_generators(), then\n  sprites from some component distributions will always be behind sprites from\n  others.\n\n  An alternate design would be to let the environment handle sprite ordering,\n  but this design is preferable because the order can be controlled more finely.\n  For example, this allows the user to specify one sprite (e.g. the agent's\n  body) to always be in the foreground while all the others are randomly\n  ordered.\n\n  Args:\n    sprite_generator: Callable return a list of sprites.\n\n  Returns:\n    _generate: Callable sprite generator.\n  \"\"\"", "\n", "\n", "def", "_generate", "(", ")", ":", "\n", "    ", "sprites", "=", "sprite_generator", "(", ")", "\n", "order", "=", "np", ".", "arange", "(", "len", "(", "sprites", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "order", ")", "\n", "return", "[", "sprites", "[", "i", "]", "for", "i", "in", "order", "]", "\n", "\n", "", "return", "_generate", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.__init__": [[34, 73], ["environment.Environment._init_sprites"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "task", ",", "\n", "action_space", ",", "\n", "renderers", ",", "\n", "init_sprites", ",", "\n", "keep_in_frame", "=", "True", ",", "\n", "max_episode_length", "=", "1000", ",", "\n", "metadata", "=", "None", ")", ":", "\n", "    ", "\"\"\"Construct Spriteworld environment.\n\n    Args:\n      task: Object with methods:\n          - reward: sprites -> float.\n          - success: sprites -> bool.\n      action_space: Action space with methods:\n          - step: action, sprites, keep_in_frame -> reward.\n          - action_spec: Callable returning ArraySpec or list/dict of such.\n      renderers: Dict where values are renderers and keys are names, reflected\n        in the keys of the observation.\n      init_sprites: Callable returning iterable of sprites, called upon\n        environment reset.\n      keep_in_frame: Bool. Whether to keep sprites in frame when they move. This\n        prevents episodes from terminating frequently when an agent moves a\n        sprite out of frame.\n      max_episode_length: Maximum number of steps beyond which episode will be\n        terminated.\n      metadata: Optional object to be added to the global_state.\n    \"\"\"", "\n", "self", ".", "_task", "=", "task", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "self", ".", "_renderers", "=", "renderers", "\n", "self", ".", "_init_sprites", "=", "init_sprites", "\n", "self", ".", "_keep_in_frame", "=", "keep_in_frame", "\n", "self", ".", "_max_episode_length", "=", "max_episode_length", "\n", "self", ".", "_sprites", "=", "self", ".", "_init_sprites", "(", ")", "\n", "self", ".", "_step_count", "=", "0", "\n", "self", ".", "_reset_next_step", "=", "True", "\n", "self", ".", "_renderers_initialized", "=", "False", "\n", "self", ".", "_metadata", "=", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset": [[74, 79], ["environment.Environment._init_sprites", "dm_env.restart", "environment.Environment.observation"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.observation"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "_sprites", "=", "self", ".", "_init_sprites", "(", ")", "\n", "self", ".", "_step_count", "=", "0", "\n", "self", ".", "_reset_next_step", "=", "False", "\n", "return", "dm_env", ".", "restart", "(", "self", ".", "observation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success": [[80, 82], ["environment.Environment._task.success"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "def", "success", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_task", ".", "success", "(", "self", ".", "_sprites", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.should_terminate": [[83, 87], ["any", "environment.Environment.success"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "def", "should_terminate", "(", "self", ")", ":", "\n", "    ", "timeout", "=", "self", ".", "_step_count", ">=", "self", ".", "_max_episode_length", "\n", "out_of_frame", "=", "any", "(", "[", "sprite", ".", "out_of_frame", "for", "sprite", "in", "self", ".", "_sprites", "]", ")", "\n", "return", "self", ".", "success", "(", ")", "or", "out_of_frame", "or", "timeout", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step": [[88, 109], ["environment.Environment._action_space.step", "environment.Environment._task.reward", "environment.Environment.observation", "environment.Environment.should_terminate", "environment.Environment.reset", "sprite.update_position", "dm_env.termination", "dm_env.transition"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.observation", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.should_terminate", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.update_position"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "    ", "\"\"\"Step the environment with an action.\"\"\"", "\n", "if", "self", ".", "_reset_next_step", ":", "\n", "      ", "return", "self", ".", "reset", "(", ")", "\n", "\n", "", "self", ".", "_step_count", "+=", "1", "\n", "reward", "=", "self", ".", "_action_space", ".", "step", "(", "\n", "action", ",", "self", ".", "_sprites", ",", "keep_in_frame", "=", "self", ".", "_keep_in_frame", ")", "\n", "\n", "# Update sprite positions from their velocities", "\n", "for", "sprite", "in", "self", ".", "_sprites", ":", "\n", "      ", "sprite", ".", "update_position", "(", "keep_in_frame", "=", "self", ".", "_keep_in_frame", ")", "\n", "\n", "", "reward", "+=", "self", ".", "_task", ".", "reward", "(", "self", ".", "_sprites", ")", "\n", "observation", "=", "self", ".", "observation", "(", ")", "\n", "\n", "if", "self", ".", "should_terminate", "(", ")", ":", "\n", "      ", "self", ".", "_reset_next_step", "=", "True", "\n", "return", "dm_env", ".", "termination", "(", "reward", "=", "reward", ",", "observation", "=", "observation", ")", "\n", "", "else", ":", "\n", "      ", "return", "dm_env", ".", "transition", "(", "reward", "=", "reward", ",", "observation", "=", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.sample_contained_position": [[110, 127], ["sprite.sample_contained_position", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.sample_contained_position"], ["", "", "def", "sample_contained_position", "(", "self", ")", ":", "\n", "    ", "\"\"\"Sample a random position contained in a sprite.\n\n    This is useful for hand-crafted random agents.\n\n    Note that this function does not uniformly sample with respect to sprite\n    areas. Instead, it randomly selects a sprite, then selects a random position\n    within that sprite. Consequently, small sprites are represented equally to\n    large sprites, and in the case of occlusion forground sprites may be\n    overrepresented relative to background sprites.\n\n    Returns:\n      Float numpy array of shape (2,) in [0, 1]. Position contained in one of\n          the sprites.\n    \"\"\"", "\n", "sprite", "=", "self", ".", "_sprites", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "_sprites", ")", ")", "]", "\n", "return", "sprite", ".", "sample_contained_position", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.state": [[128, 135], ["environment.Environment.success"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "def", "state", "(", "self", ")", ":", "\n", "    ", "global_state", "=", "{", "\n", "'success'", ":", "self", ".", "success", "(", ")", ",", "\n", "}", "\n", "if", "self", ".", "_metadata", ":", "\n", "      ", "global_state", "[", "'metadata'", "]", "=", "self", ".", "_metadata", "\n", "", "return", "{", "'sprites'", ":", "self", ".", "_sprites", ",", "'global_state'", ":", "global_state", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.observation": [[136, 143], ["environment.Environment.state", "renderer.render", "six.iteritems"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.state", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["", "def", "observation", "(", "self", ")", ":", "\n", "    ", "state", "=", "self", ".", "state", "(", ")", "\n", "observation", "=", "{", "\n", "name", ":", "renderer", ".", "render", "(", "**", "state", ")", "\n", "for", "name", ",", "renderer", "in", "six", ".", "iteritems", "(", "self", ".", "_renderers", ")", "\n", "}", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.observation_spec": [[144, 155], ["environment.Environment.observation", "renderer.observation_spec", "six.iteritems"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.observation", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec"], ["", "def", "observation_spec", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "_renderers_initialized", ":", "\n", "# Force a rendering so that the sizes of observeration_specs are correct.", "\n", "      ", "self", ".", "observation", "(", ")", "\n", "self", ".", "_renderers_initialized", "=", "True", "\n", "\n", "", "renderer_spec", "=", "{", "\n", "name", ":", "renderer", ".", "observation_spec", "(", ")", "\n", "for", "name", ",", "renderer", "in", "six", ".", "iteritems", "(", "self", ".", "_renderers", ")", "\n", "}", "\n", "return", "renderer_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.action_spec": [[156, 158], ["environment.Environment._action_space.action_spec"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.action_spec"], ["", "def", "action_spec", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_action_space", ".", "action_spec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.action_space": [[159, 162], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_action_space", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.SpriteFactors.__init__": [[32, 49], ["set().issubset", "ValueError", "dm_env.specs.Array", "set", "set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "factors", "=", "sprite_lib", ".", "FACTOR_NAMES", ")", ":", "\n", "    ", "\"\"\"Constructor.\n\n    Outputs a list of dicts: [{object 1 factors} {object 2 factors} ...]\n\n    Args:\n      factors: Iterable of strings. Factors to record. Must be a subset of\n        sprite.FACTOR_NAMES.\n    \"\"\"", "\n", "if", "not", "set", "(", "factors", ")", ".", "issubset", "(", "set", "(", "sprite_lib", ".", "FACTOR_NAMES", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'Factors have to belong to {}.'", ".", "format", "(", "\n", "sprite_lib", ".", "FACTOR_NAMES", ")", ")", "\n", "", "self", ".", "_num_sprites", "=", "None", "\n", "self", ".", "_factors", "=", "factors", "\n", "\n", "self", ".", "_per_object_spec", "=", "{", "\n", "factor", ":", "specs", ".", "Array", "(", "shape", "=", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "factor", "in", "factors", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.SpriteFactors.render": [[51, 80], ["len", "numpy.array", "float", "handcrafted.SpriteFactors.render._process_factor"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "sprites", "=", "(", ")", ",", "global_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Renders a list of sprites into a list of sprite factors.\n\n    Args:\n      sprites: a list of sprites with a method `get_sprite`. This method\n        receives a single argument `upscale_factor`, and returns a pygame\n        sprite.\n      global_state: Unused global state.\n\n    Returns:\n      A list of dictionaries of factor -> values mappings.\n    \"\"\"", "\n", "del", "global_state", "\n", "\n", "# Set number of sprites so that observation_spec is callable", "\n", "self", ".", "_num_sprites", "=", "len", "(", "sprites", ")", "\n", "\n", "def", "_process_factor", "(", "name", ",", "value", ")", ":", "\n", "      ", "if", "name", "==", "'shape'", ":", "\n", "        ", "value", "=", "constants", ".", "ShapeType", "[", "value", "]", ".", "value", "\n", "", "return", "float", "(", "value", ")", "\n", "\n", "", "def", "_sprite_to_factors", "(", "sprite", ")", ":", "\n", "      ", "return", "{", "\n", "factor", ":", "_process_factor", "(", "factor", ",", "getattr", "(", "sprite", ",", "factor", ")", ")", "\n", "for", "factor", "in", "self", ".", "_factors", "\n", "}", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "_sprite_to_factors", "(", "sprite", ")", "for", "sprite", "in", "sprites", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.SpriteFactors.observation_spec": [[81, 83], ["range"], "methods", ["None"], ["", "def", "observation_spec", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "_per_object_spec", "for", "_", "in", "range", "(", "self", ".", "_num_sprites", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.SpritePassthrough.__init__": [[88, 91], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "\"\"\"Constructor.\"\"\"", "\n", "self", ".", "_num_sprites", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.SpritePassthrough.render": [[92, 110], ["len"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "sprites", "=", "(", ")", ",", "global_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sends the sprites (e.g. list of Sprites) directly through.\n\n    Args:\n      sprites: a list of sprites with a method `get_sprite`. This method\n        receives a single argument `upscale_factor`, and returns a pygame\n        sprite.\n      global_state: Unused global state.\n\n    Returns:\n      A numpy array containing the concatenation of all desired attributes of\n        all sprites.\n    \"\"\"", "\n", "del", "global_state", "\n", "\n", "self", ".", "_num_sprites", "=", "len", "(", "sprites", ")", "\n", "\n", "return", "sprites", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.SpritePassthrough.observation_spec": [[111, 113], ["dm_env.specs.Array"], "methods", ["None"], ["", "def", "observation_spec", "(", "self", ")", ":", "\n", "    ", "return", "specs", ".", "Array", "(", "shape", "=", "(", "self", ".", "_num_sprites", ",", ")", ",", "dtype", "=", "np", ".", "object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.Success.render": [[118, 129], ["None"], "methods", ["None"], ["def", "render", "(", "self", ",", "sprites", "=", "(", ")", ",", "global_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns task success.\n\n    Args:\n      sprites: Unused iterable of sprites.\n      global_state: Must be a dictionary with key 'success'.\n\n    Returns:\n      Boolean indicating success.\n    \"\"\"", "\n", "return", "global_state", "[", "'success'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted.Success.observation_spec": [[130, 132], ["dm_env.specs.Array"], "methods", ["None"], ["", "def", "observation_spec", "(", "self", ")", ":", "\n", "    ", "return", "specs", ".", "Array", "(", "shape", "=", "(", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer.PILRenderer.__init__": [[32, 66], ["PIL.Image.new", "dm_env.specs.Array", "PIL.Image.new", "PIL.ImageDraw.Draw"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "image_size", "=", "(", "64", ",", "64", ")", ",", "\n", "anti_aliasing", "=", "1", ",", "\n", "bg_color", "=", "None", ",", "\n", "color_to_rgb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Construct PIL renderer.\n\n    Args:\n      image_size: Int tuple (height, width). Size of output of .render().\n      anti_aliasing: Int. Anti-aliasing factor. Linearly scales the size of the\n        internal canvas.\n      bg_color: None or 3-tuple of ints in [0, 255]. Background color. If None,\n        background is (0, 0, 0).\n      color_to_rgb: Callable converting a tuple (c1, c2, c3) to a uint8 tuple\n        (r, g, b) in [0, 255].\n    \"\"\"", "\n", "self", ".", "_image_size", "=", "image_size", "\n", "self", ".", "_anti_aliasing", "=", "anti_aliasing", "\n", "self", ".", "_canvas_size", "=", "(", "anti_aliasing", "*", "image_size", "[", "0", "]", ",", "\n", "anti_aliasing", "*", "image_size", "[", "1", "]", ")", "\n", "\n", "if", "color_to_rgb", "is", "None", ":", "\n", "      ", "color_to_rgb", "=", "lambda", "x", ":", "x", "\n", "", "self", ".", "_color_to_rgb", "=", "color_to_rgb", "\n", "\n", "if", "bg_color", "is", "None", ":", "\n", "      ", "bg_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "", "self", ".", "_canvas_bg", "=", "Image", ".", "new", "(", "'RGB'", ",", "self", ".", "_canvas_size", ",", "bg_color", ")", "\n", "\n", "self", ".", "_observation_spec", "=", "specs", ".", "Array", "(", "\n", "shape", "=", "self", ".", "_image_size", "+", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "self", ".", "_canvas", "=", "Image", ".", "new", "(", "'RGB'", ",", "self", ".", "_canvas_size", ")", "\n", "self", ".", "_draw", "=", "ImageDraw", ".", "Draw", "(", "self", ".", "_canvas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer.PILRenderer.render": [[67, 92], ["pil_renderer.PILRenderer._canvas.paste", "pil_renderer.PILRenderer._canvas.resize", "numpy.flipud", "pil_renderer.PILRenderer._color_to_rgb", "pil_renderer.PILRenderer._draw.polygon", "numpy.array", "tuple"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.polygon"], ["", "def", "render", "(", "self", ",", "sprites", "=", "(", ")", ",", "global_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Render sprites.\n\n    Sprites are ordered from background to foreground.\n\n    Args:\n      sprites: Iterable of sprite.Sprite instances.\n      global_state: Unused global state.\n\n    Returns:\n      Numpy uint8 RGB array of size self._image_size + (3,).\n    \"\"\"", "\n", "self", ".", "_canvas", ".", "paste", "(", "self", ".", "_canvas_bg", ")", "\n", "for", "obj", "in", "sprites", ":", "\n", "      ", "vertices", "=", "self", ".", "_canvas_size", "*", "obj", ".", "vertices", "\n", "color", "=", "self", ".", "_color_to_rgb", "(", "obj", ".", "color", ")", "\n", "self", ".", "_draw", ".", "polygon", "(", "[", "tuple", "(", "v", ")", "for", "v", "in", "vertices", "]", ",", "fill", "=", "color", ")", "\n", "", "image", "=", "self", ".", "_canvas", ".", "resize", "(", "self", ".", "_image_size", ",", "resample", "=", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "# PIL uses a coordinate system with the origin (0, 0) at the upper-left, but", "\n", "# our environment uses an origin at the bottom-left (i.e. mathematical", "\n", "# convention). Hence we need to flip the render vertically to correct for", "\n", "# that.", "\n", "image", "=", "np", ".", "flipud", "(", "np", ".", "array", "(", "image", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer.PILRenderer.observation_spec": [[93, 95], ["None"], "methods", ["None"], ["", "def", "observation_spec", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_observation_spec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.color_maps.hsv_to_rgb": [[26, 29], ["tuple", "numpy.array", "colorsys.hsv_to_rgb"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.color_maps.hsv_to_rgb"], ["def", "hsv_to_rgb", "(", "c", ")", ":", "\n", "  ", "\"\"\"Convert HSV tuple to RGB tuple.\"\"\"", "\n", "return", "tuple", "(", "(", "255", "*", "np", ".", "array", "(", "colorsys", ".", "hsv_to_rgb", "(", "*", "c", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render": [[30, 39], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "render", "(", "self", ",", "sprites", "=", "(", ")", ",", "global_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Renderer the sprites and global_state.\n\n    Args:\n      sprites: Iterable of sprites to be rendered.\n      global_state: May contain extra information for rendering (e.g.\n        background, symbolic/linguistic data, etc.).\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec": [[40, 48], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "observation_spec", "(", "self", ")", ":", "\n", "    ", "\"\"\"Get observation spec for the output.\n\n    Returns:\n      ArraySpec or nested structure of such. Must agree with the output of\n        self.update().\n    \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testWrongFactors": [[34, 40], ["spriteworld.renderers.handcrafted.SpriteFactors", "handcrafted_test.SpriteFactorsTest.assertRaises", "spriteworld.renderers.handcrafted.SpriteFactors", "handcrafted_test.SpriteFactorsTest.assertRaises", "spriteworld.renderers.handcrafted.SpriteFactors"], "methods", ["None"], ["  ", "def", "testWrongFactors", "(", "self", ")", ":", "\n", "    ", "handcrafted", ".", "SpriteFactors", "(", "factors", "=", "(", "'x'", ",", "'y'", ",", "'scale'", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "handcrafted", ".", "SpriteFactors", "(", "factors", "=", "(", "'position'", ",", "'scale'", ")", ")", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "handcrafted", ".", "SpriteFactors", "(", "factors", "=", "(", "'x'", ",", "'y'", ",", "'size'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testSingleton": [[41, 47], ["spriteworld.sprite.Sprite", "spriteworld.renderers.handcrafted.SpriteFactors", "spriteworld.renderers.handcrafted.SpriteFactors.render"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["", "", "def", "testSingleton", "(", "self", ")", ":", "\n", "    ", "sprite", "=", "sprite_lib", ".", "Sprite", "(", "\n", "x", "=", "0.1", ",", "y", "=", "0.3", ",", "shape", "=", "'square'", ",", "scale", "=", "0.5", ",", "c0", "=", "0", ",", "c1", "=", "0", ",", "c2", "=", "255", ")", "\n", "\n", "renderer", "=", "handcrafted", ".", "SpriteFactors", "(", ")", "\n", "renderer", ".", "render", "(", "sprites", "=", "[", "sprite", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testSequence": [[48, 55], ["spriteworld.renderers.handcrafted.SpriteFactors", "spriteworld.renderers.handcrafted.SpriteFactors.render", "spriteworld.sprite.Sprite", "six.moves.range", "numpy.random.rand", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["", "def", "testSequence", "(", "self", ")", ":", "\n", "    ", "sprites", "=", "[", "\n", "sprite_lib", ".", "Sprite", "(", "x", "=", "np", ".", "random", ".", "rand", "(", ")", ",", "y", "=", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "for", "_", "in", "range", "(", "5", ")", "\n", "]", "\n", "renderer", "=", "handcrafted", ".", "SpriteFactors", "(", ")", "\n", "renderer", ".", "render", "(", "sprites", "=", "sprites", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testOutputLength": [[56, 62], ["absl.testing.parameterized.parameters", "spriteworld.renderers.handcrafted.SpriteFactors", "spriteworld.renderers.handcrafted.SpriteFactors.render", "handcrafted_test.SpriteFactorsTest.assertLen", "spriteworld.sprite.Sprite", "six.moves.range"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["", "@", "parameterized", ".", "parameters", "(", "1", ",", "2", ",", "5", ")", "\n", "def", "testOutputLength", "(", "self", ",", "num_sprites", ")", ":", "\n", "    ", "sprites", "=", "[", "sprite_lib", ".", "Sprite", "(", ")", "for", "_", "in", "range", "(", "num_sprites", ")", "]", "\n", "renderer", "=", "handcrafted", ".", "SpriteFactors", "(", ")", "\n", "outputs", "=", "renderer", ".", "render", "(", "sprites", "=", "sprites", ")", "\n", "self", ".", "assertLen", "(", "outputs", ",", "num_sprites", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testFactorSubset": [[63, 74], ["absl.testing.parameterized.parameters", "spriteworld.renderers.handcrafted.SpriteFactors", "spriteworld.renderers.handcrafted.SpriteFactors.render", "handcrafted_test.SpriteFactorsTest.assertSequenceEqual", "spriteworld.sprite.Sprite", "set", "six.moves.range", "set"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["", "@", "parameterized", ".", "parameters", "(", "(", "1", ",", "(", "'x'", ",", "'y'", ",", "'scale'", ",", "'c0'", ",", "'c1'", ",", "'c2'", ",", "'shape'", ",", "\n", "'angle'", ",", "'x_vel'", ",", "'y_vel'", ")", ")", ",", "\n", "(", "1", ",", "(", "'x'", ",", "'y'", ",", "'scale'", ",", "'c0'", ",", "'c1'", ",", "'c2'", ",", "'shape'", ")", ")", ",", "\n", "(", "2", ",", "(", "'x'", ",", "'y'", ",", "'scale'", ",", "'c0'", ",", "'c1'", ",", "'c2'", ",", "'shape'", ")", ")", ",", "\n", "(", "5", ",", "(", "'x'", ",", "'y'", ",", "'angle'", ",", "'x_vel'", ",", "'y_vel'", ")", ")", ")", "\n", "def", "testFactorSubset", "(", "self", ",", "num_sprites", ",", "factors", ")", ":", "\n", "    ", "sprites", "=", "[", "sprite_lib", ".", "Sprite", "(", ")", "for", "_", "in", "range", "(", "num_sprites", ")", "]", "\n", "renderer", "=", "handcrafted", ".", "SpriteFactors", "(", "factors", "=", "factors", ")", "\n", "outputs", "=", "renderer", ".", "render", "(", "sprites", "=", "sprites", ")", "\n", "output_keys", "=", "[", "set", "(", "x", ")", "for", "x", "in", "outputs", "]", "\n", "self", ".", "assertSequenceEqual", "(", "output_keys", ",", "num_sprites", "*", "[", "set", "(", "factors", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testObservationSpec": [[75, 91], ["absl.testing.parameterized.parameters", "spriteworld.renderers.handcrafted.SpriteFactors", "spriteworld.renderers.handcrafted.SpriteFactors.render", "spriteworld.renderers.handcrafted.SpriteFactors.observation_spec", "obs_spec[].values", "handcrafted_test.SpriteFactorsTest.assertSequenceEqual", "spriteworld.sprite.Sprite", "handcrafted_test.SpriteFactorsTest.assertEqual", "set", "six.moves.range", "set"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec"], ["", "@", "parameterized", ".", "parameters", "(", "(", "1", ",", "(", "'x'", ",", "'y'", ",", "'scale'", ",", "'c0'", ",", "'c1'", ",", "'c2'", ",", "'shape'", ",", "\n", "'angle'", ",", "'x_vel'", ",", "'y_vel'", ")", ")", ",", "\n", "(", "1", ",", "(", "'x'", ",", "'y'", ",", "'scale'", ",", "'c0'", ",", "'c1'", ",", "'c2'", ",", "'shape'", ")", ")", ",", "\n", "(", "2", ",", "(", "'x'", ",", "'y'", ",", "'scale'", ",", "'c0'", ",", "'c1'", ",", "'c2'", ",", "'shape'", ")", ")", ",", "\n", "(", "5", ",", "(", "'x'", ",", "'y'", ",", "'angle'", ",", "'x_vel'", ",", "'y_vel'", ")", ")", ")", "\n", "def", "testObservationSpec", "(", "self", ",", "num_sprites", ",", "factors", ")", ":", "\n", "    ", "sprites", "=", "[", "sprite_lib", ".", "Sprite", "(", ")", "for", "_", "in", "range", "(", "num_sprites", ")", "]", "\n", "renderer", "=", "handcrafted", ".", "SpriteFactors", "(", "factors", "=", "factors", ")", "\n", "renderer", ".", "render", "(", "sprites", "=", "sprites", ")", "\n", "obs_spec", "=", "renderer", ".", "observation_spec", "(", ")", "\n", "\n", "for", "v", "in", "obs_spec", "[", "0", "]", ".", "values", "(", ")", ":", "\n", "      ", "self", ".", "assertEqual", "(", "v", ".", "shape", ",", "(", ")", ")", "\n", "\n", "", "obs_spec_keys", "=", "[", "set", "(", "x", ")", "for", "x", "in", "obs_spec", "]", "\n", "self", ".", "assertSequenceEqual", "(", "obs_spec_keys", ",", "num_sprites", "*", "[", "set", "(", "factors", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testAttributesSingleton": [[92, 108], ["absl.testing.parameterized.parameters", "spriteworld.sprite.Sprite", "spriteworld.renderers.handcrafted.SpriteFactors", "handcrafted_test.SpriteFactorsTest.assertEqual", "spriteworld.renderers.handcrafted.SpriteFactors.render", "handcrafted_test.SpriteFactorsTest.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "0.5", ",", "0.5", ",", "'square'", ",", "0", ",", "0", ",", "255", ",", "0.5", ",", "0", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "'square'", ",", "255", ",", "0", ",", "0", ",", "0.5", ",", "0", ")", ",", "\n", "(", "0.5", ",", "0.8", ",", "'octagon'", ",", "0.4", ",", "0.8", ",", "0.5", ",", "0.6", ",", "90", ")", ",", "\n", "(", "0.5", ",", "0.3", ",", "'star_5'", ",", "180", ",", "180", ",", "0", ",", "0.2", ",", "240", ")", ",", "\n", ")", "\n", "def", "testAttributesSingleton", "(", "self", ",", "x", ",", "y", ",", "shape", ",", "c0", ",", "c1", ",", "c2", ",", "scale", ",", "angle", ")", ":", "\n", "    ", "sprite", "=", "sprite_lib", ".", "Sprite", "(", "\n", "x", "=", "x", ",", "y", "=", "y", ",", "shape", "=", "shape", ",", "c0", "=", "c0", ",", "c1", "=", "c1", ",", "c2", "=", "c2", ",", "scale", "=", "scale", ",", "angle", "=", "angle", ")", "\n", "renderer", "=", "handcrafted", ".", "SpriteFactors", "(", ")", "\n", "outputs", "=", "renderer", ".", "render", "(", "sprites", "=", "[", "sprite", "]", ")", "[", "0", "]", "\n", "\n", "self", ".", "assertEqual", "(", "outputs", "[", "'shape'", "]", ",", "const", ".", "ShapeType", "[", "shape", "]", ".", "value", ")", "\n", "for", "(", "name", ",", "value", ")", "in", "(", "(", "'x'", ",", "x", ")", ",", "(", "'y'", ",", "y", ")", ",", "(", "'c0'", ",", "c0", ")", ",", "(", "'c1'", ",", "c1", ")", ",", "\n", "(", "'c2'", ",", "c2", ")", ",", "(", "'scale'", ",", "scale", ")", ",", "(", "'angle'", ",", "angle", ")", ")", ":", "\n", "      ", "self", ".", "assertAlmostEqual", "(", "outputs", "[", "name", "]", ",", "value", ",", "delta", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpriteFactorsTest.testAttributesTwoSprites": [[109, 145], ["six.moves.range", "spriteworld.renderers.handcrafted.SpriteFactors", "spriteworld.renderers.handcrafted.SpriteFactors.render", "six.moves.range", "sprites.append", "handcrafted_test.SpriteFactorsTest.assertEqual", "spriteworld.sprite.Sprite", "handcrafted_test.SpriteFactorsTest.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["", "", "def", "testAttributesTwoSprites", "(", "self", ")", ":", "\n", "    ", "x", "=", "[", "0.5", ",", "0.3", "]", "\n", "y", "=", "[", "0.4", ",", "0.8", "]", "\n", "shape", "=", "[", "'square'", ",", "'spoke_4'", "]", "\n", "c0", "=", "[", "0", ",", "200", "]", "\n", "c1", "=", "[", "255", ",", "100", "]", "\n", "c2", "=", "[", "0", ",", "200", "]", "\n", "scale", "=", "[", "0.2", ",", "0.3", "]", "\n", "angle", "=", "[", "0", ",", "120", "]", "\n", "x_vel", "=", "[", "0.0", ",", "0.1", "]", "\n", "y_vel", "=", "[", "-", "0.2", ",", "0.05", "]", "\n", "\n", "sprites", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "      ", "sprites", ".", "append", "(", "\n", "sprite_lib", ".", "Sprite", "(", "\n", "x", "=", "x", "[", "i", "]", ",", "\n", "y", "=", "y", "[", "i", "]", ",", "\n", "shape", "=", "shape", "[", "i", "]", ",", "\n", "c0", "=", "c0", "[", "i", "]", ",", "\n", "c1", "=", "c1", "[", "i", "]", ",", "\n", "c2", "=", "c2", "[", "i", "]", ",", "\n", "scale", "=", "scale", "[", "i", "]", ",", "\n", "angle", "=", "angle", "[", "i", "]", ",", "\n", "x_vel", "=", "x_vel", "[", "i", "]", ",", "\n", "y_vel", "=", "y_vel", "[", "i", "]", ")", ")", "\n", "\n", "", "renderer", "=", "handcrafted", ".", "SpriteFactors", "(", ")", "\n", "outputs", "=", "renderer", ".", "render", "(", "sprites", "=", "sprites", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "      ", "self", ".", "assertEqual", "(", "outputs", "[", "i", "]", "[", "'shape'", "]", ",", "const", ".", "ShapeType", "[", "shape", "[", "i", "]", "]", ".", "value", ")", "\n", "for", "(", "name", ",", "value", ")", "in", "(", "(", "'x'", ",", "x", ")", ",", "(", "'y'", ",", "y", ")", ",", "(", "'c0'", ",", "c0", ")", ",", "(", "'c1'", ",", "c1", ")", ",", "\n", "(", "'c2'", ",", "c2", ")", ",", "(", "'scale'", ",", "scale", ")", ",", "(", "'angle'", ",", "angle", ")", ",", "\n", "(", "'x_vel'", ",", "x_vel", ")", ",", "(", "'y_vel'", ",", "y_vel", ")", ")", ":", "\n", "        ", "self", ".", "assertAlmostEqual", "(", "outputs", "[", "i", "]", "[", "name", "]", ",", "value", "[", "i", "]", ",", "delta", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpritePassthroughTest.testRenderOne": [[149, 156], ["spriteworld.sprite.Sprite", "spriteworld.renderers.handcrafted.SpritePassthrough", "spriteworld.renderers.handcrafted.SpritePassthrough.render", "handcrafted_test.SpritePassthroughTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["  ", "def", "testRenderOne", "(", "self", ")", ":", "\n", "    ", "sprite", "=", "sprite_lib", ".", "Sprite", "(", "\n", "x", "=", "0.1", ",", "y", "=", "0.3", ",", "shape", "=", "'square'", ",", "scale", "=", "0.5", ",", "c0", "=", "0", ",", "c1", "=", "0", ",", "c2", "=", "255", ")", "\n", "\n", "renderer", "=", "handcrafted", ".", "SpritePassthrough", "(", ")", "\n", "observation", "=", "renderer", ".", "render", "(", "sprites", "=", "[", "sprite", "]", ")", "\n", "self", ".", "assertEqual", "(", "observation", ",", "[", "sprite", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SpritePassthroughTest.testKSprites": [[157, 170], ["absl.testing.parameterized.parameters", "spriteworld.renderers.handcrafted.SpritePassthrough", "spriteworld.renderers.handcrafted.SpritePassthrough.render", "handcrafted_test.SpritePassthroughTest.assertSequenceEqual", "spriteworld.renderers.handcrafted.SpritePassthrough.observation_spec", "handcrafted_test.SpritePassthroughTest.assertTrue", "spriteworld.sprite.Sprite", "six.moves.range", "numpy.random.rand", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec"], ["", "@", "parameterized", ".", "parameters", "(", "(", "3", ",", ")", ",", "(", "5", ",", ")", ",", "(", "10", ",", ")", ")", "\n", "def", "testKSprites", "(", "self", ",", "num_sprites", ")", ":", "\n", "    ", "sprites", "=", "[", "\n", "sprite_lib", ".", "Sprite", "(", "x", "=", "np", ".", "random", ".", "rand", "(", ")", ",", "y", "=", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "for", "_", "in", "range", "(", "num_sprites", ")", "\n", "]", "\n", "\n", "renderer", "=", "handcrafted", ".", "SpritePassthrough", "(", ")", "\n", "observation", "=", "renderer", ".", "render", "(", "sprites", "=", "sprites", ")", "\n", "self", ".", "assertSequenceEqual", "(", "observation", ",", "sprites", ")", "\n", "\n", "obs_spec", "=", "renderer", ".", "observation_spec", "(", ")", "\n", "self", ".", "assertTrue", "(", "obs_spec", ".", "shape", ",", "(", "num_sprites", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.handcrafted_test.SuccessTest.testRender": [[174, 180], ["spriteworld.renderers.handcrafted.Success", "handcrafted_test.SuccessTest.assertTrue", "handcrafted_test.SuccessTest.assertFalse", "spriteworld.renderers.handcrafted.Success.render", "spriteworld.renderers.handcrafted.Success.render", "handcrafted_test.SuccessTest.assertRaises", "spriteworld.renderers.handcrafted.Success.render"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render"], ["  ", "def", "testRender", "(", "self", ")", ":", "\n", "    ", "renderer", "=", "handcrafted", ".", "Success", "(", ")", "\n", "self", ".", "assertTrue", "(", "renderer", ".", "render", "(", "global_state", "=", "{", "'success'", ":", "True", "}", ")", ")", "\n", "self", ".", "assertFalse", "(", "renderer", ".", "render", "(", "global_state", "=", "{", "'success'", ":", "False", "}", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "      ", "renderer", ".", "render", "(", "global_state", "=", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest._get_sprites": [[31, 44], ["spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite"], "methods", ["None"], ["  ", "def", "_get_sprites", "(", "self", ")", ":", "\n", "    ", "\"\"\"Get list of sprites.\"\"\"", "\n", "sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "\n", "x", "=", "0.75", ",", "y", "=", "0.95", ",", "shape", "=", "'spoke_6'", ",", "scale", "=", "0.2", ",", "c0", "=", "20", ",", "c1", "=", "50", ",", "c2", "=", "80", ")", ",", "\n", "sprite", ".", "Sprite", "(", "\n", "x", "=", "0.2", ",", "y", "=", "0.3", ",", "shape", "=", "'triangle'", ",", "scale", "=", "0.1", ",", "c0", "=", "150", ",", "c1", "=", "255", ",", "c2", "=", "100", ")", ",", "\n", "sprite", ".", "Sprite", "(", "\n", "x", "=", "0.7", ",", "y", "=", "0.5", ",", "shape", "=", "'square'", ",", "scale", "=", "0.3", ",", "c0", "=", "0", ",", "c1", "=", "255", ",", "c2", "=", "0", ")", ",", "\n", "sprite", ".", "Sprite", "(", "\n", "x", "=", "0.5", ",", "y", "=", "0.5", ",", "shape", "=", "'square'", ",", "scale", "=", "0.3", ",", "c0", "=", "255", ",", "c1", "=", "0", ",", "c2", "=", "0", ")", ",", "\n", "]", "\n", "return", "sprites", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest.testBasicFunctionality": [[45, 48], ["spriteworld.renderers.pil_renderer.PILRenderer", "spriteworld.renderers.pil_renderer.PILRenderer.render", "pil_renderer_test.PilRendererTest._get_sprites"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest._get_sprites"], ["", "def", "testBasicFunctionality", "(", "self", ")", ":", "\n", "    ", "renderer", "=", "pil_renderer", ".", "PILRenderer", "(", "image_size", "=", "(", "64", ",", "64", ")", ")", "\n", "renderer", ".", "render", "(", "self", ".", "_get_sprites", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest.testBackground": [[49, 54], ["spriteworld.renderers.pil_renderer.PILRenderer", "spriteworld.renderers.pil_renderer.PILRenderer.render", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest._get_sprites", "list"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest._get_sprites"], ["", "def", "testBackground", "(", "self", ")", ":", "\n", "    ", "bg_color", "=", "(", "5", ",", "6", ",", "7", ")", "\n", "renderer", "=", "pil_renderer", ".", "PILRenderer", "(", "image_size", "=", "(", "64", ",", "64", ")", ",", "bg_color", "=", "bg_color", ")", "\n", "image", "=", "renderer", ".", "render", "(", "self", ".", "_get_sprites", "(", ")", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "5", ",", "5", "]", ")", ",", "bg_color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest.testOcclusion": [[55, 60], ["spriteworld.renderers.pil_renderer.PILRenderer", "spriteworld.renderers.pil_renderer.PILRenderer.render", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest._get_sprites", "list", "list"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest._get_sprites"], ["", "def", "testOcclusion", "(", "self", ")", ":", "\n", "    ", "renderer", "=", "pil_renderer", ".", "PILRenderer", "(", "image_size", "=", "(", "64", ",", "64", ")", ")", "\n", "image", "=", "renderer", ".", "render", "(", "self", ".", "_get_sprites", "(", ")", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "32", ",", "32", "]", ")", ",", "[", "255", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "32", ",", "50", "]", ")", ",", "[", "0", ",", "255", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest.testAntiAliasing": [[61, 79], ["spriteworld.renderers.pil_renderer.PILRenderer", "spriteworld.renderers.pil_renderer.PILRenderer.render", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest.assertTrue", "pil_renderer_test.PilRendererTest.assertTrue", "pil_renderer_test.PilRendererTest.assertTrue", "pil_renderer_test.PilRendererTest.assertTrue", "spriteworld.renderers.pil_renderer.PILRenderer", "spriteworld.renderers.pil_renderer.PILRenderer.render", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "pil_renderer_test.PilRendererTest._get_sprites", "list", "list", "all", "all", "all", "all", "pil_renderer_test.PilRendererTest._get_sprites", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest._get_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest._get_sprites"], ["", "def", "testAntiAliasing", "(", "self", ")", ":", "\n", "    ", "renderer", "=", "pil_renderer", ".", "PILRenderer", "(", "image_size", "=", "(", "16", ",", "16", ")", ",", "anti_aliasing", "=", "5", ")", "\n", "image", "=", "renderer", ".", "render", "(", "self", ".", "_get_sprites", "(", ")", ")", "\n", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "4", ",", "6", "]", ")", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "6", ",", "6", "]", ")", ",", "[", "255", ",", "0", ",", "0", "]", ")", "\n", "# Python2 and Python3 give slightly different anti-aliasing, so we specify", "\n", "# bounds for border values:", "\n", "self", ".", "assertTrue", "(", "all", "(", "image", "[", "5", ",", "6", "]", ">=", "[", "50", ",", "0", ",", "0", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "image", "[", "5", ",", "6", "]", "<=", "[", "120", ",", "30", ",", "0", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "image", "[", "7", ",", "6", "]", ">=", "[", "200", ",", "0", ",", "0", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "image", "[", "7", ",", "6", "]", "<=", "[", "255", ",", "50", ",", "0", "]", ")", ")", "\n", "\n", "renderer", "=", "pil_renderer", ".", "PILRenderer", "(", "image_size", "=", "(", "16", ",", "16", ")", ",", "anti_aliasing", "=", "1", ")", "\n", "image", "=", "renderer", ".", "render", "(", "self", ".", "_get_sprites", "(", ")", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "4", ",", "6", "]", ")", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "6", ",", "6", "]", ")", ",", "[", "255", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "7", ",", "6", "]", ")", ",", "[", "255", ",", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.pil_renderer_test.PilRendererTest.testColorToRGB": [[80, 89], ["spriteworld.sprite.Sprite", "spriteworld.renderers.pil_renderer.PILRenderer", "spriteworld.renderers.pil_renderer.PILRenderer.render", "pil_renderer_test.PilRendererTest.assertSequenceEqual", "tuple", "list", "numpy.array", "colorsys.hsv_to_rgb"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.render", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.color_maps.hsv_to_rgb"], ["", "def", "testColorToRGB", "(", "self", ")", ":", "\n", "    ", "s", "=", "sprite", ".", "Sprite", "(", "x", "=", "0.5", ",", "y", "=", "0.5", ",", "shape", "=", "'square'", ",", "c0", "=", "0.2", ",", "c1", "=", "0.5", ",", "c2", "=", "0.5", ")", "\n", "def", "_color_to_rgb", "(", "c", ")", ":", "\n", "      ", "return", "tuple", "(", "(", "255", "*", "np", ".", "array", "(", "colorsys", ".", "hsv_to_rgb", "(", "*", "c", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "", "renderer", "=", "pil_renderer", ".", "PILRenderer", "(", "\n", "image_size", "=", "(", "64", ",", "64", ")", ",", "color_to_rgb", "=", "_color_to_rgb", ")", "\n", "image", "=", "renderer", ".", "render", "(", "[", "s", "]", ")", "\n", "self", ".", "assertSequenceEqual", "(", "list", "(", "image", "[", "32", ",", "32", "]", ")", ",", "[", "114", ",", "127", ",", "63", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.configs.configs_test.ConfigsTest.testConfig": [[33, 59], ["absl.testing.parameterized.parameters", "print", "six.moves.range", "task_module.get_config", "spriteworld.environment.Environment", "spriteworld.environment.Environment.observation_spec", "spriteworld.environment.Environment.action_space.sample", "spriteworld.environment.Environment.reset", "environment.Environment.step.first", "spriteworld.environment.Environment.step"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.examples.goal_finding_embodied.get_config", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["  ", "@", "parameterized", ".", "parameters", "(", "\n", "(", "cobra", ".", "exploration", ",", ")", ",", "\n", "(", "cobra", ".", "goal_finding_more_distractors", ",", ")", ",", "\n", "(", "cobra", ".", "goal_finding_more_targets", ",", ")", ",", "\n", "(", "cobra", ".", "goal_finding_new_position", ",", ")", ",", "\n", "(", "cobra", ".", "goal_finding_new_shape", ",", ")", ",", "\n", "(", "cobra", ".", "clustering", ",", ")", ",", "\n", "(", "cobra", ".", "sorting", ",", ")", ",", "\n", "(", "examples", ".", "goal_finding_embodied", ",", ")", ",", "\n", ")", "\n", "def", "testConfig", "(", "self", ",", "task_module", ",", "modes", "=", "(", "'train'", ",", "'test'", ")", ",", "replicas", "=", "3", ")", ":", "\n", "    ", "for", "mode", "in", "modes", ":", "\n", "      ", "print", "(", "mode", ")", "\n", "for", "_", "in", "range", "(", "replicas", ")", ":", "\n", "        ", "config", "=", "task_module", ".", "get_config", "(", "mode", "=", "mode", ")", "\n", "config", "[", "'renderers'", "]", "=", "{", "}", "\n", "env", "=", "environment", ".", "Environment", "(", "**", "config", ")", "\n", "env", ".", "observation_spec", "(", ")", "\n", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n", "num_episodes", "=", "0", "\n", "step", "=", "env", ".", "reset", "(", ")", "\n", "while", "num_episodes", "<", "5", ":", "\n", "          ", "if", "step", ".", "first", "(", ")", ":", "\n", "            ", "num_episodes", "+=", "1", "\n", "", "step", "=", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.sorting.get_config": [[70, 138], ["list", "spriteworld.sprite_generators.shuffle", "spriteworld.tasks.MetaAggregated", "subtasks.append", "spriteworld.factor_distributions.Product", "sprite_gen_per_subtask.append", "itertools.combinations", "spriteworld.sprite_generators.sample_generator", "spriteworld.configs.cobra.common.action_space", "spriteworld.configs.cobra.common.renderers", "spriteworld.tasks.FindGoalPosition", "spriteworld.sprite_generators.generate_sprites", "numpy.arange", "spriteworld.sprite_generators.chain_generators", "ValueError", "os.path.basename", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "len", "spriteworld.sprite_generators.chain_generators"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.sample_generator", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators"], ["def", "get_config", "(", "mode", "=", "'train'", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: 'train' or 'test'.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "\n", "# Create the subtasks and their corresponding sprite generators", "\n", "subtasks", "=", "[", "]", "\n", "sprite_gen_per_subtask", "=", "[", "]", "\n", "for", "subtask", "in", "SUBTASKS", ":", "\n", "    ", "subtasks", ".", "append", "(", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "subtask", "[", "'distrib'", "]", ",", "\n", "goal_position", "=", "subtask", "[", "'goal_position'", "]", ",", "\n", "terminate_distance", "=", "TERMINATE_DISTANCE", ",", "\n", "raw_reward_multiplier", "=", "RAW_REWARD_MULTIPLIER", ")", ")", "\n", "factors", "=", "distribs", ".", "Product", "(", "(", "\n", "subtask", "[", "'distrib'", "]", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'square'", ",", "'triangle'", ",", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", ")", ")", "\n", "sprite_gen_per_subtask", ".", "append", "(", "\n", "sprite_generators", ".", "generate_sprites", "(", "factors", ",", "num_sprites", "=", "1", ")", ")", "\n", "\n", "# Consider all combinations of subtasks", "\n", "", "subtask_combos", "=", "list", "(", "\n", "itertools", ".", "combinations", "(", "np", ".", "arange", "(", "len", "(", "SUBTASKS", ")", ")", ",", "NUM_TARGETS", ")", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "# Randomly sample a combination of subtasks, holding one combination out", "\n", "    ", "sprite_gen", "=", "sprite_generators", ".", "sample_generator", "(", "[", "\n", "sprite_generators", ".", "chain_generators", "(", "\n", "*", "[", "sprite_gen_per_subtask", "[", "i", "]", "for", "i", "in", "c", "]", ")", "for", "c", "in", "subtask_combos", "[", "1", ":", "]", "\n", "]", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "# Use the held-out subtask combination for testing", "\n", "    ", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "\n", "*", "[", "sprite_gen_per_subtask", "[", "i", "]", "for", "i", "in", "subtask_combos", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Invalide mode {}.'", ".", "format", "(", "mode", ")", ")", "\n", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "task", "=", "tasks", ".", "MetaAggregated", "(", "\n", "subtasks", ",", "reward_aggregator", "=", "'sum'", ",", "termination_criterion", "=", "'all'", ")", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "common", ".", "action_space", "(", ")", ",", "\n", "'renderers'", ":", "common", ".", "renderers", "(", ")", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "MAX_EPISODE_LENGTH", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "'mode'", ":", "mode", "\n", "}", "\n", "}", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.goal_finding_new_shape.get_config": [[41, 80], ["spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.shuffle", "spriteworld.tasks.FindGoalPosition", "spriteworld.configs.cobra.common.action_space", "spriteworld.configs.cobra.common.renderers", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers"], ["def", "get_config", "(", "mode", "=", "'train'", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: 'train' or 'test'.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "\n", "factors", "=", "distribs", ".", "Product", "(", "[", "\n", "MODES_SHAPES", "[", "mode", "]", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.", ",", "0.4", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", "]", ")", "\n", "sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "factors", ",", "num_sprites", "=", "NUM_TARGETS", ")", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "terminate_distance", "=", "TERMINATE_DISTANCE", ")", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "common", ".", "action_space", "(", ")", ",", "\n", "'renderers'", ":", "common", ".", "renderers", "(", ")", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "20", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "'mode'", ":", "mode", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.goal_finding_more_targets.get_config": [[43, 97], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.chain_generators", "spriteworld.sprite_generators.shuffle", "spriteworld.tasks.FindGoalPosition", "spriteworld.configs.cobra.common.action_space", "spriteworld.configs.cobra.common.renderers", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers"], ["def", "get_config", "(", "mode", "=", "'train'", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: 'train' or 'test'.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "\n", "shared_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'square'", ",", "'triangle'", ",", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", "]", ")", "\n", "target_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.", ",", "0.4", ")", "\n", "distractor_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.5", ",", "0.9", ")", "\n", "target_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "target_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "distractor_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distractor_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "\n", "target_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "target_factors", ",", "num_sprites", "=", "MODES_NUM_TARGETS", "[", "mode", "]", ")", "\n", "distractor_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "distractor_factors", ",", "num_sprites", "=", "NUM_DISTRACTORS", ")", "\n", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "target_sprite_gen", ",", "\n", "distractor_sprite_gen", ")", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "target_hue", ",", "terminate_distance", "=", "TERMINATE_DISTANCE", ")", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "common", ".", "action_space", "(", ")", ",", "\n", "'renderers'", ":", "common", ".", "renderers", "(", ")", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "20", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "'mode'", ":", "mode", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space": [[26, 28], ["spriteworld.action_spaces.SelectMove"], "function", ["None"], ["def", "action_space", "(", ")", ":", "\n", "  ", "return", "action_spaces", ".", "SelectMove", "(", "scale", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers": [[30, 37], ["spriteworld.renderers.PILRenderer"], "function", ["None"], ["", "def", "renderers", "(", ")", ":", "\n", "  ", "return", "{", "\n", "'image'", ":", "\n", "spriteworld_renderers", ".", "PILRenderer", "(", "\n", "image_size", "=", "(", "64", ",", "64", ")", ",", "\n", "anti_aliasing", "=", "5", ",", "\n", "color_to_rgb", "=", "spriteworld_renderers", ".", "color_maps", ".", "hsv_to_rgb", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.clustering.get_config": [[55, 111], ["print", "spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.chain_generators", "spriteworld.sprite_generators.shuffle", "spriteworld.tasks.Clustering", "spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.configs.cobra.common.action_space", "spriteworld.configs.cobra.common.renderers", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers"], ["def", "get_config", "(", "mode", "=", "'train'", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: 'train' or 'test'.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "\n", "# Select clusters to use, and their c0 factor distribution.", "\n", "c0_clusters", "=", "[", "CLUSTERS_DISTS", "[", "cluster", "]", "for", "cluster", "in", "MODES", "[", "mode", "]", "]", "\n", "print", "(", "'Clustering task: {}, #sprites: {}'", ".", "format", "(", "MODES", "[", "mode", "]", ",", "\n", "NUM_SPRITES_PER_CLUSTER", ")", ")", "\n", "\n", "other_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'square'", ",", "'triangle'", ",", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", "]", ")", "\n", "\n", "# Generate the sprites to be used in this task, by combining Hue with the", "\n", "# other factors.", "\n", "sprite_factors", "=", "[", "\n", "distribs", ".", "Product", "(", "(", "other_factors", ",", "c0", ")", ")", "for", "c0", "in", "c0_clusters", "\n", "]", "\n", "# Convert to sprites, generating the appropriate number per cluster.", "\n", "sprite_gen_per_cluster", "=", "[", "\n", "sprite_generators", ".", "generate_sprites", "(", "\n", "factors", ",", "num_sprites", "=", "NUM_SPRITES_PER_CLUSTER", ")", "\n", "for", "factors", "in", "sprite_factors", "\n", "]", "\n", "# Concat clusters into single scene to generate.", "\n", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "*", "sprite_gen_per_cluster", ")", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "# Clustering task will define rewards", "\n", "task", "=", "tasks", ".", "Clustering", "(", "c0_clusters", ",", "terminate_bonus", "=", "0.", ",", "reward_range", "=", "10.", ")", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "common", ".", "action_space", "(", ")", ",", "\n", "'renderers'", ":", "common", ".", "renderers", "(", ")", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "MAX_EPISODE_LENGTH", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "'mode'", ":", "mode", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.goal_finding_more_distractors.get_config": [[43, 97], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.chain_generators", "spriteworld.sprite_generators.shuffle", "spriteworld.tasks.FindGoalPosition", "spriteworld.configs.cobra.common.action_space", "spriteworld.configs.cobra.common.renderers", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers"], ["def", "get_config", "(", "mode", "=", "'train'", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: 'train' or 'test'.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "\n", "shared_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'square'", ",", "'triangle'", ",", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", "]", ")", "\n", "target_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.", ",", "0.4", ")", "\n", "distractor_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.5", ",", "0.9", ")", "\n", "target_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "target_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "distractor_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distractor_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "\n", "target_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "target_factors", ",", "num_sprites", "=", "NUM_TARGETS", ")", "\n", "distractor_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "distractor_factors", ",", "num_sprites", "=", "MODES_NUM_DISTRACTORS", "[", "mode", "]", ")", "\n", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "target_sprite_gen", ",", "\n", "distractor_sprite_gen", ")", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "target_hue", ",", "terminate_distance", "=", "TERMINATE_DISTANCE", ")", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "common", ".", "action_space", "(", ")", ",", "\n", "'renderers'", ":", "common", ".", "renderers", "(", ")", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "20", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "'mode'", ":", "mode", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.goal_finding_new_position.get_config": [[60, 115], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.chain_generators", "spriteworld.sprite_generators.shuffle", "spriteworld.tasks.FindGoalPosition", "spriteworld.configs.cobra.common.action_space", "spriteworld.configs.cobra.common.renderers", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers"], ["def", "get_config", "(", "mode", "=", "'train'", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: 'train' or 'test'.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "\n", "shared_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'square'", ",", "'triangle'", ",", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", "]", ")", "\n", "target_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.", ",", "0.4", ")", "\n", "distractor_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.5", ",", "0.9", ")", "\n", "target_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "MODES_TARGET_POSITIONS", "[", "mode", "]", ",", "\n", "target_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "distractor_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distractor_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "\n", "target_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "target_factors", ",", "num_sprites", "=", "NUM_TARGETS", ")", "\n", "distractor_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "distractor_factors", ",", "num_sprites", "=", "NUM_DISTRACTORS", ")", "\n", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "target_sprite_gen", ",", "\n", "distractor_sprite_gen", ")", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "target_hue", ",", "terminate_distance", "=", "TERMINATE_DISTANCE", ")", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "common", ".", "action_space", "(", ")", ",", "\n", "'renderers'", ":", "common", ".", "renderers", "(", ")", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "20", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "'mode'", ":", "mode", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.exploration.get_config": [[37, 74], ["spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.tasks.NoReward", "numpy.random.randint", "spriteworld.configs.cobra.common.action_space", "spriteworld.configs.cobra.common.renderers", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.action_space", "home.repos.pwc.inspect_result.deepmind_spriteworld.cobra.common.renderers"], ["def", "get_config", "(", "mode", "=", "None", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: Unused.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "del", "mode", "# No train/test split for pure exploration", "\n", "\n", "factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'square'", ",", "'triangle'", ",", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", "]", ")", "\n", "num_sprites", "=", "lambda", ":", "np", ".", "random", ".", "randint", "(", "1", ",", "7", ")", "\n", "sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "factors", ",", "num_sprites", "=", "num_sprites", ")", "\n", "task", "=", "tasks", ".", "NoReward", "(", ")", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "common", ".", "action_space", "(", ")", ",", "\n", "'renderers'", ":", "common", ".", "renderers", "(", ")", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "10", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.examples.goal_finding_clustering.get_config": [[57, 189], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Product", "sprite_gen_list.append", "spriteworld.sprite_generators.chain_generators", "spriteworld.sprite_generators.shuffle", "task_list.append", "zip", "spriteworld.tasks.MetaAggregated", "spriteworld.factor_distributions.SetMinus", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Product", "sprite_gen_list.append", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "sprite_gen_list.append", "spriteworld.sprite_generators.generate_sprites", "spriteworld.tasks.Clustering", "spriteworld.tasks.FindGoalPosition", "task_list.append", "spriteworld.renderers.PILRenderer", "spriteworld.action_spaces.SelectMove", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Product", "ValueError", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Product", "os.path.basename", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "numpy.random.randint", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites"], ["def", "get_config", "(", "mode", "=", "'train'", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: Unused task mode.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "\n", "# Factor distributions common to all objects.", "\n", "common_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'angle'", ",", "0", ",", "360", ",", "dtype", "=", "'int32'", ")", ",", "\n", "]", ")", "\n", "\n", "# train/test split for goal-finding object scales and clustering object colors", "\n", "goal_finding_scale_test", "=", "distribs", ".", "Continuous", "(", "'scale'", ",", "0.08", ",", "0.12", ")", "\n", "green_blue_colors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "64", ",", "256", ",", "dtype", "=", "'int32'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "64", ",", "256", ",", "dtype", "=", "'int32'", ")", ",", "\n", "]", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "    ", "goal_finding_scale", "=", "distribs", ".", "SetMinus", "(", "\n", "distribs", ".", "Continuous", "(", "'scale'", ",", "0.05", ",", "0.15", ")", ",", "\n", "goal_finding_scale_test", ",", "\n", ")", "\n", "cluster_colors", "=", "distribs", ".", "Product", "(", "\n", "[", "distribs", ".", "Continuous", "(", "'c0'", ",", "128", ",", "256", ",", "dtype", "=", "'int32'", ")", ",", "green_blue_colors", "]", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "    ", "goal_finding_scale", "=", "goal_finding_scale_test", "\n", "cluster_colors", "=", "distribs", ".", "Product", "(", "\n", "[", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "128", ",", "dtype", "=", "'int32'", ")", ",", "green_blue_colors", "]", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Invalid mode {}. Mode must be \"train\" or \"test\".'", ".", "format", "(", "mode", ")", ")", "\n", "\n", "# Create clustering sprite generators", "\n", "", "sprite_gen_list", "=", "[", "]", "\n", "cluster_shapes", "=", "[", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "s", "]", ")", "\n", "for", "s", "in", "[", "'triangle'", ",", "'square'", ",", "'pentagon'", "]", "\n", "]", "\n", "for", "shape", "in", "cluster_shapes", ":", "\n", "    ", "factors", "=", "distribs", ".", "Product", "(", "[", "\n", "common_factors", ",", "\n", "cluster_colors", ",", "\n", "shape", ",", "\n", "distribs", ".", "Continuous", "(", "'scale'", ",", "0.08", ",", "0.12", ")", ",", "\n", "]", ")", "\n", "sprite_gen_list", ".", "append", "(", "\n", "sprite_generators", ".", "generate_sprites", "(", "factors", ",", "num_sprites", "=", "2", ")", ")", "\n", "\n", "# Create goal-finding sprite generators", "\n", "", "goal_finding_colors", "=", "[", "\n", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "192", ",", "256", ",", "dtype", "=", "'int32'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0", ",", "128", ",", "dtype", "=", "'int32'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "64", ",", "128", ",", "dtype", "=", "'int32'", ")", ",", "\n", "]", ")", ",", "\n", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "128", ",", "dtype", "=", "'int32'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "192", ",", "256", ",", "dtype", "=", "'int32'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "64", ",", "128", ",", "dtype", "=", "'int32'", ")", ",", "\n", "]", ")", "\n", "]", "\n", "# Goal positions corresponding to the colors in goal_finding_colors", "\n", "goal_finding_positions", "=", "[", "(", "0.", ",", "0.5", ")", ",", "(", "1.", ",", "0.5", ")", "]", "\n", "goal_finding_shapes", "=", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'spoke_4'", ",", "'star_4'", "]", ")", "\n", "for", "colors", "in", "goal_finding_colors", ":", "\n", "    ", "factors", "=", "distribs", ".", "Product", "(", "[", "\n", "common_factors", ",", "\n", "goal_finding_scale", ",", "\n", "goal_finding_shapes", ",", "\n", "colors", ",", "\n", "]", ")", "\n", "sprite_gen_list", ".", "append", "(", "\n", "sprite_generators", ".", "generate_sprites", "(", "\n", "factors", ",", "num_sprites", "=", "lambda", ":", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", ")", ")", "\n", "\n", "# Create distractor sprite generator", "\n", "", "distractor_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "common_factors", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "64", ",", "256", ",", "dtype", "=", "'uint8'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "64", ",", "256", ",", "dtype", "=", "'uint8'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "64", ",", "256", ",", "dtype", "=", "'uint8'", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'scale'", ",", "0.08", ",", "0.12", ")", ",", "\n", "]", ")", "\n", "sprite_gen_list", ".", "append", "(", "sprite_generators", ".", "generate_sprites", "(", "\n", "distractor_factors", ",", "num_sprites", "=", "lambda", ":", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ")", ")", ")", "\n", "\n", "# Concat clusters into single scene to generate", "\n", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "*", "sprite_gen_list", ")", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "# Create the combined task of goal-finding and clustering", "\n", "task_list", "=", "[", "]", "\n", "task_list", ".", "append", "(", "\n", "tasks", ".", "Clustering", "(", "cluster_shapes", ",", "terminate_bonus", "=", "0.", ",", "reward_range", "=", "10.", ")", ")", "\n", "for", "colors", ",", "goal_pos", "in", "zip", "(", "goal_finding_colors", ",", "goal_finding_positions", ")", ":", "\n", "    ", "goal_finding_task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "distribs", ".", "Product", "(", "[", "colors", ",", "goal_finding_shapes", "]", ")", ",", "\n", "goal_position", "=", "goal_pos", ",", "\n", "weights_dimensions", "=", "(", "1", ",", "0", ")", ",", "\n", "terminate_distance", "=", "0.15", ",", "\n", "raw_reward_multiplier", "=", "30", ")", "\n", "task_list", ".", "append", "(", "goal_finding_task", ")", "\n", "", "task", "=", "tasks", ".", "MetaAggregated", "(", "\n", "task_list", ",", "reward_aggregator", "=", "'sum'", ",", "termination_criterion", "=", "'all'", ")", "\n", "\n", "renderers", "=", "{", "\n", "'image'", ":", "\n", "spriteworld_renderers", ".", "PILRenderer", "(", "\n", "image_size", "=", "(", "64", ",", "64", ")", ",", "anti_aliasing", "=", "5", ")", "\n", "}", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "action_spaces", ".", "SelectMove", "(", "scale", "=", "0.5", ")", ",", "\n", "'renderers'", ":", "renderers", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "50", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "'mode'", ":", "mode", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.examples.goal_finding_embodied.get_config": [[41, 117], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.chain_generators", "spriteworld.sprite_generators.shuffle", "spriteworld.factor_distributions.Product", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.chain_generators", "spriteworld.tasks.FindGoalPosition", "spriteworld.renderers.PILRenderer", "spriteworld.action_spaces.Embodied", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators"], ["def", "get_config", "(", "mode", "=", "None", ")", ":", "\n", "  ", "\"\"\"Generate environment config.\n\n  Args:\n    mode: Unused task mode.\n\n  Returns:\n    config: Dictionary defining task/environment configuration. Can be fed as\n      kwargs to environment.Environment.\n  \"\"\"", "\n", "del", "mode", "\n", "\n", "shared_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'square'", ",", "'triangle'", ",", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.13", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c1'", ",", "0.3", ",", "1.", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c2'", ",", "0.9", ",", "1.", ")", ",", "\n", "]", ")", "\n", "target_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.", ",", "0.4", ")", "\n", "distractor_hue", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0.5", ",", "0.9", ")", "\n", "target_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "target_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "distractor_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distractor_hue", ",", "\n", "shared_factors", ",", "\n", "]", ")", "\n", "\n", "target_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "target_factors", ",", "num_sprites", "=", "NUM_TARGETS", ")", "\n", "distractor_sprite_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "distractor_factors", ",", "num_sprites", "=", "NUM_DISTRACTORS", ")", "\n", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "target_sprite_gen", ",", "\n", "distractor_sprite_gen", ")", "\n", "# Randomize sprite ordering to eliminate any task information from occlusions", "\n", "sprite_gen", "=", "sprite_generators", ".", "shuffle", "(", "sprite_gen", ")", "\n", "\n", "# Create the agent body", "\n", "agent_body_factors", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.1", ",", "0.9", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'shape'", ",", "[", "'circle'", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'scale'", ",", "[", "0.07", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'c0'", ",", "[", "1.", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'c1'", ",", "[", "0.", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'c2'", ",", "[", "1.", "]", ")", ",", "\n", "]", ")", "\n", "agent_body_gen", "=", "sprite_generators", ".", "generate_sprites", "(", "\n", "agent_body_factors", ",", "num_sprites", "=", "1", ")", "\n", "sprite_gen", "=", "sprite_generators", ".", "chain_generators", "(", "sprite_gen", ",", "agent_body_gen", ")", "\n", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "target_hue", ",", "terminate_distance", "=", "TERMINATE_DISTANCE", ")", "\n", "\n", "renderers", "=", "{", "\n", "'image'", ":", "\n", "spriteworld_renderers", ".", "PILRenderer", "(", "\n", "image_size", "=", "(", "64", ",", "64", ")", ",", "\n", "anti_aliasing", "=", "5", ",", "\n", "color_to_rgb", "=", "spriteworld_renderers", ".", "color_maps", ".", "hsv_to_rgb", ")", "\n", "}", "\n", "\n", "config", "=", "{", "\n", "'task'", ":", "task", ",", "\n", "'action_space'", ":", "action_spaces", ".", "Embodied", "(", "step_size", "=", "0.05", ")", ",", "\n", "'renderers'", ":", "renderers", ",", "\n", "'init_sprites'", ":", "sprite_gen", ",", "\n", "'max_episode_length'", ":", "50", ",", "\n", "'metadata'", ":", "{", "\n", "'name'", ":", "os", ".", "path", ".", "basename", "(", "__file__", ")", ",", "\n", "}", "\n", "}", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_test.SpriteTest.testBasicInitialization": [[31, 43], ["spriteworld.sprite.Sprite"], "methods", ["None"], ["  ", "def", "testBasicInitialization", "(", "self", ")", ":", "\n", "    ", "sprite", ".", "Sprite", "(", "\n", "x", "=", "0.2", ",", "\n", "y", "=", "0.8", ",", "\n", "shape", "=", "'triangle'", ",", "\n", "angle", "=", "45", ",", "\n", "scale", "=", "0.3", ",", "\n", "c0", "=", "200", ",", "\n", "c1", "=", "150", ",", "\n", "c2", "=", "100", ",", "\n", "x_vel", "=", "-", "0.2", ",", "\n", "y_vel", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_test.SpriteTest.testMove": [[44, 52], ["absl.testing.parameterized.parameters", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite.move", "sprite_test.SpriteTest.assertSequenceAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.move"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "0.5", ",", "0.5", ",", "(", "-", "0.3", ",", "0.2", ")", ",", "(", "0.2", ",", "0.7", ")", ",", "False", ")", ",", "\n", "(", "0.1", ",", "0.1", ",", "(", "-", "0.3", ",", "0.2", ")", ",", "(", "-", "0.2", ",", "0.3", ")", ",", "False", ")", ",", "\n", "(", "0.1", ",", "0.1", ",", "(", "-", "0.3", ",", "0.2", ")", ",", "(", "0.0", ",", "0.3", ")", ",", "True", ")", ")", "\n", "def", "testMove", "(", "self", ",", "x", ",", "y", ",", "motion", ",", "final_position", ",", "keep_in_frame", ")", ":", "\n", "    ", "s", "=", "sprite", ".", "Sprite", "(", "x", "=", "x", ",", "y", "=", "y", ")", "\n", "s", ".", "move", "(", "motion", ",", "keep_in_frame", "=", "keep_in_frame", ")", "\n", "self", ".", "assertSequenceAlmostEqual", "(", "s", ".", "position", ",", "final_position", ",", "delta", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_test.SpriteTest.testContainsPoint": [[53, 126], ["absl.testing.parameterized.parameters", "numpy.flipud", "numpy.linspace", "numpy.stack", "spriteworld.sprite.Sprite", "numpy.array", "sprite_test.SpriteTest.assertTrue", "dict", "dict", "dict", "dict", "dict", "numpy.meshgrid", "numpy.allclose", "spriteworld.sprite.Sprite.contains_point"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.contains_point"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "dict", "(", "\n", "x", "=", "0.5", ",", "\n", "y", "=", "0.5", ",", "\n", "shape", "=", "'square'", ",", "\n", "angle", "=", "0", ",", "\n", "scale", "=", "0.5", ",", "\n", "containment", "=", "[", "\n", "[", "False", ",", "False", ",", "False", ",", "False", "]", ",", "\n", "[", "False", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "[", "False", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "[", "False", ",", "False", ",", "False", ",", "False", "]", ",", "\n", "]", ")", ",", "\n", "dict", "(", "\n", "x", "=", "0.5", ",", "\n", "y", "=", "0.5", ",", "\n", "shape", "=", "'square'", ",", "\n", "angle", "=", "45", ",", "\n", "scale", "=", "1", ",", "\n", "containment", "=", "[", "\n", "[", "False", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "[", "True", ",", "True", ",", "True", ",", "True", "]", ",", "\n", "[", "True", ",", "True", ",", "True", ",", "True", "]", ",", "\n", "[", "False", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "]", ")", ",", "\n", "dict", "(", "\n", "x", "=", "0.75", ",", "\n", "y", "=", "0.75", ",", "\n", "shape", "=", "'square'", ",", "\n", "angle", "=", "0", ",", "\n", "scale", "=", "0.5", ",", "\n", "containment", "=", "[", "\n", "[", "False", ",", "False", ",", "True", ",", "True", "]", ",", "\n", "[", "False", ",", "False", ",", "True", ",", "True", "]", ",", "\n", "[", "False", ",", "False", ",", "False", ",", "False", "]", ",", "\n", "[", "False", ",", "False", ",", "False", ",", "False", "]", ",", "\n", "]", ")", ",", "\n", "dict", "(", "\n", "x", "=", "0.65", ",", "\n", "y", "=", "0.55", ",", "\n", "shape", "=", "'triangle'", ",", "\n", "angle", "=", "0", ",", "\n", "scale", "=", "0.5", ",", "\n", "containment", "=", "[", "\n", "[", "False", ",", "False", ",", "True", ",", "False", "]", ",", "\n", "[", "False", ",", "False", ",", "True", ",", "False", "]", ",", "\n", "[", "False", ",", "True", ",", "True", ",", "True", "]", ",", "\n", "[", "False", ",", "False", ",", "False", ",", "False", "]", ",", "\n", "]", ")", ",", "\n", "dict", "(", "\n", "x", "=", "0.37", ",", "\n", "y", "=", "0.55", ",", "\n", "shape", "=", "'star_5'", ",", "\n", "angle", "=", "0", ",", "\n", "scale", "=", "0.6", ",", "\n", "containment", "=", "[", "\n", "[", "False", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "[", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "[", "False", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "[", "False", ",", "False", ",", "False", ",", "False", "]", ",", "\n", "]", ")", ",", "\n", ")", "\n", "def", "testContainsPoint", "(", "self", ",", "x", ",", "y", ",", "shape", ",", "angle", ",", "scale", ",", "containment", ")", ":", "\n", "# As we use plots to prepare these tests, it's easier to write the matrix", "\n", "# \"in the wrong orientation\" (i.e. with origin='lower') and flip it.", "\n", "    ", "containment", "=", "np", ".", "flipud", "(", "containment", ")", "\n", "linspace", "=", "np", ".", "linspace", "(", "0.1", ",", "0.9", ",", "4", ")", "\n", "grid", "=", "np", ".", "stack", "(", "np", ".", "meshgrid", "(", "linspace", ",", "linspace", ")", ",", "axis", "=", "-", "1", ")", "\n", "s", "=", "sprite", ".", "Sprite", "(", "x", "=", "x", ",", "y", "=", "y", ",", "shape", "=", "shape", ",", "angle", "=", "angle", ",", "scale", "=", "scale", ")", "\n", "\n", "eval_containment", "=", "np", ".", "array", "(", "\n", "[", "[", "s", ".", "contains_point", "(", "p", ")", "for", "p", "in", "row", "]", "for", "row", "in", "grid", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "eval_containment", ",", "containment", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_test.SpriteTest.testSampleContainedPosition": [[127, 137], ["absl.testing.parameterized.parameters", "spriteworld.sprite.Sprite", "six.moves.range", "spriteworld.sprite.Sprite.sample_contained_position", "sprite_test.SpriteTest.assertTrue", "spriteworld.sprite.Sprite.contains_point"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.sample_contained_position", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite.Sprite.contains_point"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "0.5", ",", "0.5", ",", "'square'", ",", "0", ",", "0.25", ")", ",", "\n", "(", "0.1", ",", "0.8", ",", "'square'", ",", "0", ",", "0.25", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "'triangle'", ",", "0", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "'triangle'", ",", "30", ",", "0.5", ")", ")", "\n", "def", "testSampleContainedPosition", "(", "self", ",", "x", ",", "y", ",", "shape", ",", "angle", ",", "scale", ")", ":", "\n", "    ", "s", "=", "sprite", ".", "Sprite", "(", "x", "=", "x", ",", "y", "=", "y", ",", "shape", "=", "shape", ",", "angle", "=", "angle", ",", "scale", "=", "scale", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "      ", "p", "=", "s", ".", "sample_contained_position", "(", ")", "\n", "self", ".", "assertTrue", "(", "s", ".", "contains_point", "(", "p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_test.SpriteTest.testResetShape": [[138, 150], ["spriteworld.sprite.Sprite", "sprite_test.SpriteTest.assertSequenceAlmostEqual", "sprite_test.SpriteTest.assertSequenceAlmostEqual", "numpy.ravel", "numpy.ravel", "numpy.ravel", "numpy.ravel"], "methods", ["None"], ["", "", "def", "testResetShape", "(", "self", ")", ":", "\n", "    ", "s", "=", "sprite", ".", "Sprite", "(", "scale", "=", "0.25", ",", "shape", "=", "'square'", ")", "\n", "square_vertices", "=", "[", "[", "0.625", ",", "0.625", "]", ",", "[", "0.375", ",", "0.625", "]", ",", "[", "0.375", ",", "0.375", "]", ",", "\n", "[", "0.625", ",", "0.375", "]", "]", "\n", "self", ".", "assertSequenceAlmostEqual", "(", "\n", "np", ".", "ravel", "(", "s", ".", "vertices", ")", ",", "np", ".", "ravel", "(", "square_vertices", ")", ",", "delta", "=", "1e-3", ")", "\n", "\n", "s", ".", "shape", "=", "'triangle'", "\n", "triangle_vertices", "=", "[", "[", "0.5", ",", "0.72", "]", ",", "[", "0.31", ",", "0.39", "]", ",", "[", "0.69", ",", "0.39", "]", "]", "\n", "\n", "self", ".", "assertSequenceAlmostEqual", "(", "\n", "np", ".", "ravel", "(", "s", ".", "vertices", ")", ",", "np", ".", "ravel", "(", "triangle_vertices", ")", ",", "delta", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_test.SpriteTest.testResetAngle": [[151, 162], ["spriteworld.sprite.Sprite", "sprite_test.SpriteTest.assertSequenceAlmostEqual", "sprite_test.SpriteTest.assertSequenceAlmostEqual", "numpy.ravel", "numpy.ravel", "numpy.ravel", "numpy.ravel"], "methods", ["None"], ["", "def", "testResetAngle", "(", "self", ")", ":", "\n", "    ", "init_vertices", "=", "[", "[", "0.625", ",", "0.625", "]", ",", "[", "0.375", ",", "0.625", "]", ",", "[", "0.375", ",", "0.375", "]", ",", "\n", "[", "0.625", ",", "0.375", "]", "]", "\n", "s", "=", "sprite", ".", "Sprite", "(", "angle", "=", "0", ",", "scale", "=", "0.25", ",", "shape", "=", "'square'", ")", "\n", "self", ".", "assertSequenceAlmostEqual", "(", "\n", "np", ".", "ravel", "(", "s", ".", "vertices", ")", ",", "np", ".", "ravel", "(", "init_vertices", ")", ",", "delta", "=", "1e-3", ")", "\n", "\n", "s", ".", "angle", "=", "-", "45", "\n", "rotated_vertices", "=", "[", "[", "0.677", ",", "0.5", "]", ",", "[", "0.5", ",", "0.677", "]", ",", "[", "0.323", ",", "0.5", "]", ",", "[", "0.5", ",", "0.323", "]", "]", "\n", "self", ".", "assertSequenceAlmostEqual", "(", "\n", "np", ".", "ravel", "(", "s", ".", "vertices", ")", ",", "np", ".", "ravel", "(", "rotated_vertices", ")", ",", "delta", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_test.SpriteTest.testResetScale": [[163, 175], ["spriteworld.sprite.Sprite", "sprite_test.SpriteTest.assertSequenceAlmostEqual", "sprite_test.SpriteTest.assertSequenceAlmostEqual", "numpy.ravel", "numpy.ravel", "numpy.ravel", "numpy.ravel"], "methods", ["None"], ["", "def", "testResetScale", "(", "self", ")", ":", "\n", "    ", "s", "=", "sprite", ".", "Sprite", "(", "scale", "=", "0.25", ",", "shape", "=", "'square'", ")", "\n", "init_vertices", "=", "[", "[", "0.625", ",", "0.625", "]", ",", "[", "0.375", ",", "0.625", "]", ",", "[", "0.375", ",", "0.375", "]", ",", "\n", "[", "0.625", ",", "0.375", "]", "]", "\n", "self", ".", "assertSequenceAlmostEqual", "(", "\n", "np", ".", "ravel", "(", "s", ".", "vertices", ")", ",", "np", ".", "ravel", "(", "init_vertices", ")", ",", "delta", "=", "1e-3", ")", "\n", "\n", "s", ".", "scale", "=", "0.5", "\n", "scaled_vertices", "=", "[", "[", "0.531", ",", "0.531", "]", ",", "[", "0.469", ",", "0.531", "]", ",", "[", "0.469", ",", "0.469", "]", ",", "\n", "[", "0.531", ",", "0.469", "]", "]", "\n", "self", ".", "assertSequenceAlmostEqual", "(", "\n", "np", ".", "ravel", "(", "s", ".", "vertices", ")", ",", "np", ".", "ravel", "(", "scaled_vertices", ")", ",", "delta", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.ContinuousTest.testSamplingContainmentContinuous": [[49, 59], ["absl.testing.parameterized.parameters", "spriteworld.factor_distributions.Continuous", "six.moves.range", "factor_distributions_test.ContinuousTest.assertTrue", "factor_distributions_test.ContinuousTest.assertFalse", "spriteworld.factor_distributions.Continuous.contains", "spriteworld.factor_distributions.Continuous.contains", "spriteworld.factor_distributions.Continuous.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["@", "parameterized", ".", "parameters", "(", "\n", "(", "0.0", ",", "1.0", ",", "(", "-", "0.5", ",", "2.0", ")", ")", ",", "\n", "(", "-", "1.0", ",", "-", "0.1", ",", "(", "-", "1.4", ",", "0.5", ")", ")", ",", "\n", ")", "\n", "def", "testSamplingContainmentContinuous", "(", "self", ",", "minval", ",", "maxval", ",", "not_contained", ")", ":", "\n", "    ", "d", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "minval", ",", "maxval", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "      ", "self", ".", "assertTrue", "(", "d", ".", "contains", "(", "d", ".", "sample", "(", ")", ")", ")", "\n", "", "for", "not_contained_value", "in", "not_contained", ":", "\n", "      ", "self", ".", "assertFalse", "(", "d", ".", "contains", "(", "{", "'x'", ":", "not_contained_value", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.ContinuousTest.testDType": [[60, 69], ["spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "factor_distributions_test.ContinuousTest.assertTrue", "factor_distributions_test.ContinuousTest.assertTrue", "factor_distributions_test.ContinuousTest.assertFalse", "factor_distributions_test.ContinuousTest.assertFalse", "six.moves.range", "spriteworld.factor_distributions.Continuous.contains", "spriteworld.factor_distributions.Continuous.contains", "spriteworld.factor_distributions.Continuous.contains", "spriteworld.factor_distributions.Continuous.contains", "factor_distributions_test.ContinuousTest.assertEqual", "spriteworld.factor_distributions.Continuous.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "", "def", "testDType", "(", "self", ")", ":", "\n", "    ", "d_int", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ",", "dtype", "=", "'int32'", ")", "\n", "d_float", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "assertTrue", "(", "d_int", ".", "contains", "(", "{", "'x'", ":", "0", "}", ")", ")", "\n", "self", ".", "assertTrue", "(", "d_float", ".", "contains", "(", "{", "'x'", ":", "0", "}", ")", ")", "\n", "self", ".", "assertFalse", "(", "d_int", ".", "contains", "(", "{", "'x'", ":", "1", "}", ")", ")", "\n", "self", ".", "assertFalse", "(", "d_float", ".", "contains", "(", "{", "'x'", ":", "1", "}", ")", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "      ", "self", ".", "assertEqual", "(", "d_int", ".", "sample", "(", ")", ",", "{", "'x'", ":", "0", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.DiscreteTest.testSamplingContainmentDiscrete": [[74, 84], ["absl.testing.parameterized.parameters", "spriteworld.factor_distributions.Discrete", "factor_distributions_test.test_sampling_and_containment"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "1", ",", "2", ",", "3", "]", ",", "[", "1", ",", "2", ",", "3", "]", ",", "[", "0", ",", "4", "]", ")", ",", "\n", "(", "[", "'a'", ",", "'b'", ",", "'c'", "]", ",", "[", "'a'", ",", "'b'", ",", "'c'", "]", ",", "[", "'d'", ",", "0", "]", ")", ",", "\n", ")", "\n", "def", "testSamplingContainmentDiscrete", "(", "self", ",", "candidates", ",", "contained", ",", "\n", "not_contained", ")", ":", "\n", "    ", "d", "=", "distribs", ".", "Discrete", "(", "'x'", ",", "candidates", ")", "\n", "cont", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "contained", "]", "\n", "not_cont", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "not_contained", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "cont", ",", "not_cont", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.MixtureTest.testSamplingContainmentMixtureTwo": [[89, 107], ["absl.testing.parameterized.named_parameters", "spriteworld.factor_distributions.Mixture", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'DisjointContinuous'", ",", "distribs", ".", "Continuous", "(", "\n", "'x'", ",", "0", ",", "1", ")", ",", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "3", ")", ",", "[", "0.5", ",", "2.5", "]", ",", "[", "1.5", ",", "3.5", "]", ")", ",", "\n", "(", "'OverlappingContinuous'", ",", "distribs", ".", "Continuous", "(", "\n", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Continuous", "(", "'x'", ",", "1", ",", "3", ")", ",", "[", "0.5", ",", "2.5", "]", ",", "[", "-", "0.5", ",", "3.5", "]", ")", ",", "\n", "(", "'DisjointDiscrete'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "0", ",", "1", "]", ")", ",", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "2", ",", "3", "]", ")", ",", "[", "1", ",", "2", "]", ",", "[", "-", "1", ",", "4", "]", ")", ",", "\n", "(", "'OverlappingDiscrete'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "0", ",", "1", "]", ")", ",", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2", "]", ")", ",", "[", "0", ",", "1", ",", "2", "]", ",", "[", "-", "1", ",", "3", "]", ")", ",", "\n", "(", "'ContinuousDiscrete'", ",", "distribs", ".", "Continuous", "(", "\n", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "3", "]", ")", ",", "[", "0.5", ",", "3", "]", ",", "[", "2.5", "]", ")", ",", "\n", ")", "\n", "def", "testSamplingContainmentMixtureTwo", "(", "self", ",", "c_0", ",", "c_1", ",", "contained", ",", "\n", "not_contained", ")", ":", "\n", "    ", "d", "=", "distribs", ".", "Mixture", "(", "(", "c_0", ",", "c_1", ")", ")", "\n", "contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "contained", "]", "\n", "not_contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "not_contained", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.MixtureTest.testSamplingContainmentMixtureMultiple": [[108, 122], ["spriteworld.factor_distributions.Mixture", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["", "def", "testSamplingContainmentMixtureMultiple", "(", "self", ")", ":", "\n", "    ", "dists", "=", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "1", ",", "5", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "9", ",", "12", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "7", ",", "10", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "14", "]", ")", ",", "\n", "]", "\n", "contained", "=", "[", "0.5", ",", "4", ",", "11", ",", "7", ",", "14", "]", "\n", "not_contained", "=", "[", "5.5", ",", "6", ",", "8", ",", "13", "]", "\n", "d", "=", "distribs", ".", "Mixture", "(", "dists", ")", "\n", "contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "contained", "]", "\n", "not_contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "not_contained", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.MixtureTest.testRaisesError": [[123, 128], ["spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "factor_distributions_test.MixtureTest.assertRaises", "spriteworld.factor_distributions.Mixture"], "methods", ["None"], ["", "def", "testRaisesError", "(", "self", ")", ":", "\n", "    ", "c_0", "=", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "0", "]", ")", "\n", "c_1", "=", "distribs", ".", "Discrete", "(", "'y'", ",", "[", "1", "]", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "distribs", ".", "Mixture", "(", "(", "c_0", ",", "c_1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.MixtureTest.testProbs": [[129, 138], ["spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Mixture", "spriteworld.factor_distributions.Mixture", "six.moves.range", "six.moves.range", "factor_distributions_test.MixtureTest.assertTrue", "factor_distributions_test.MixtureTest.assertEqual", "spriteworld.factor_distributions.Mixture.contains", "spriteworld.factor_distributions.Mixture.sample", "spriteworld.factor_distributions.Mixture.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "", "def", "testProbs", "(", "self", ")", ":", "\n", "    ", "c_0", "=", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "0", "]", ")", "\n", "c_1", "=", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", "]", ")", "\n", "d_0", "=", "distribs", ".", "Mixture", "(", "[", "c_0", ",", "c_1", "]", ",", "probs", "=", "(", "0.3", ",", "0.7", ")", ")", "\n", "d_1", "=", "distribs", ".", "Mixture", "(", "[", "c_0", ",", "c_1", "]", ",", "probs", "=", "(", "0.0", ",", "1.0", ")", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "      ", "self", ".", "assertTrue", "(", "d_0", ".", "contains", "(", "d_0", ".", "sample", "(", ")", ")", ")", "\n", "", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "      ", "self", ".", "assertEqual", "(", "d_1", ".", "sample", "(", ")", ",", "{", "'x'", ":", "1", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.IntersectionTest.testSamplingContainmentIntersectionTwo": [[143, 157], ["absl.testing.parameterized.named_parameters", "spriteworld.factor_distributions.Intersection", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'ContinuousContinuous'", ",", "distribs", ".", "Continuous", "(", "\n", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Continuous", "(", "'x'", ",", "1", ",", "3", ")", ",", "[", "1.5", "]", ",", "[", "0.5", ",", "2.5", "]", ")", ",", "\n", "(", "'DiscreteDiscrete'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "0", ",", "1", "]", ")", ",", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2", "]", ")", ",", "[", "1", "]", ",", "[", "0", ",", "2", "]", ")", ",", "\n", "(", "'DiscreteContinuous'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "1", ",", "3", "]", ")", ",", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", ",", "[", "1", "]", ",", "[", "0.5", ",", "1.5", ",", "3", "]", ")", ",", "\n", ")", "\n", "def", "testSamplingContainmentIntersectionTwo", "(", "self", ",", "d_0", ",", "d_1", ",", "contained", ",", "\n", "not_contained", ")", ":", "\n", "    ", "d", "=", "distribs", ".", "Intersection", "(", "(", "d_0", ",", "d_1", ")", ")", "\n", "contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "contained", "]", "\n", "not_contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "not_contained", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.IntersectionTest.testSamplingContainmentIntersectionMultiple": [[158, 171], ["spriteworld.factor_distributions.Intersection", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["", "def", "testSamplingContainmentIntersectionMultiple", "(", "self", ")", ":", "\n", "    ", "dists", "=", "[", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2.5", ",", "3", ",", "4", ",", "6", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2.5", ",", "3", ",", "12", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "5", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "10", ")", ",", "\n", "]", "\n", "contained", "=", "[", "2.5", ",", "3", "]", "\n", "not_contained", "=", "[", "1", ",", "4", ",", "8", "]", "\n", "d", "=", "distribs", ".", "Intersection", "(", "dists", ")", "\n", "contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "contained", "]", "\n", "not_contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "not_contained", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.IntersectionTest.testRaisesError": [[172, 178], ["spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Intersection", "factor_distributions_test.IntersectionTest.assertRaises", "spriteworld.factor_distributions.Intersection.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "def", "testRaisesError", "(", "self", ")", ":", "\n", "    ", "d_0", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ")", "\n", "d_1", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "3", ")", "\n", "d", "=", "distribs", ".", "Intersection", "(", "(", "d_0", ",", "d_1", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "d", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.IntersectionTest.testIndexForSampling": [[179, 187], ["spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Intersection", "spriteworld.factor_distributions.Intersection.sample", "factor_distributions_test.IntersectionTest.assertRaises", "spriteworld.factor_distributions.Intersection", "spriteworld.factor_distributions.Intersection.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "", "def", "testIndexForSampling", "(", "self", ")", ":", "\n", "    ", "d_0", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", "\n", "d_1", "=", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "3", "]", ")", "\n", "d", "=", "distribs", ".", "Intersection", "(", "(", "d_0", ",", "d_1", ")", ",", "index_for_sampling", "=", "1", ")", "\n", "d", ".", "sample", "(", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "d", "=", "distribs", ".", "Intersection", "(", "(", "d_0", ",", "d_1", ")", ",", "index_for_sampling", "=", "0", ")", "\n", "d", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.IntersectionTest.testKeys": [[188, 198], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Intersection", "factor_distributions_test.IntersectionTest.assertRaises", "spriteworld.factor_distributions.Intersection", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous"], "methods", ["None"], ["", "", "def", "testKeys", "(", "self", ")", ":", "\n", "    ", "d_0", "=", "distribs", ".", "Product", "(", "\n", "(", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "1", ")", ")", ")", "\n", "d_1", "=", "distribs", ".", "Product", "(", "\n", "(", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ")", ",", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "0.5", ")", ")", ")", "\n", "d_2", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0.4", ",", "0.6", ")", "\n", "\n", "distribs", ".", "Intersection", "(", "(", "d_0", ",", "d_1", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "distribs", ".", "Intersection", "(", "(", "d_0", ",", "d_2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.SelectionTest.testSamplingContainmentSelection": [[203, 254], ["absl.testing.parameterized.named_parameters", "spriteworld.factor_distributions.Selection", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["@", "parameterized", ".", "named_parameters", "(", "\n", "(", "\n", "'Continuous'", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "1", ",", "3", ")", ",", "\n", "[", "{", "\n", "'x'", ":", "1.5", "\n", "}", "]", ",", "\n", "[", "{", "\n", "'x'", ":", "0.5", "\n", "}", ",", "{", "\n", "'x'", ":", "2.5", "\n", "}", "]", ",", "\n", ")", ",", "\n", "(", "\n", "'Discrete'", ",", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "0", ",", "1", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2", "]", ")", ",", "\n", "[", "{", "\n", "'x'", ":", "1", "\n", "}", "]", ",", "\n", "[", "{", "\n", "'x'", ":", "0", "\n", "}", ",", "{", "\n", "'x'", ":", "2", "\n", "}", "]", ",", "\n", ")", ",", "\n", "(", "\n", "'MultiDimensional'", ",", "\n", "distribs", ".", "Product", "(", "\n", "(", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2", "]", ")", ",", "distribs", ".", "Discrete", "(", "'y'", ",", "[", "3", ",", "4", "]", ")", ")", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "2", "]", ")", ",", "\n", "[", "{", "\n", "'x'", ":", "2", ",", "\n", "'y'", ":", "3", "\n", "}", "]", ",", "\n", "[", "{", "\n", "'x'", ":", "1", ",", "\n", "'y'", ":", "3", "\n", "}", ",", "{", "\n", "'x'", ":", "2", "\n", "}", ",", "{", "\n", "'x'", ":", "2", ",", "\n", "'y'", ":", "5", "\n", "}", "]", ",", "\n", ")", ",", "\n", ")", "\n", "def", "testSamplingContainmentSelection", "(", "self", ",", "d_base", ",", "d_filter", ",", "contained", ",", "\n", "not_contained", ")", ":", "\n", "    ", "d", "=", "distribs", ".", "Selection", "(", "d_base", ",", "d_filter", ")", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.SelectionTest.testRaisesErrorFailedSampling": [[255, 261], ["spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Selection", "factor_distributions_test.SelectionTest.assertRaises", "spriteworld.factor_distributions.Selection.sample"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["", "def", "testRaisesErrorFailedSampling", "(", "self", ")", ":", "\n", "    ", "d_base", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ")", "\n", "d_filter", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "3", ")", "\n", "d", "=", "distribs", ".", "Selection", "(", "d_base", ",", "d_filter", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "d", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.SelectionTest.testKeys": [[262, 270], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Selection", "factor_distributions_test.SelectionTest.assertRaises", "spriteworld.factor_distributions.Selection", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous"], "methods", ["None"], ["", "", "def", "testKeys", "(", "self", ")", ":", "\n", "    ", "d_base", "=", "distribs", ".", "Product", "(", "\n", "(", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "1", ")", ")", ")", "\n", "d_filter_1", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ")", "\n", "d_filter_2", "=", "distribs", ".", "Continuous", "(", "'z'", ",", "0.4", ",", "0.6", ")", "\n", "distribs", ".", "Selection", "(", "d_base", ",", "d_filter_1", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "distribs", ".", "Selection", "(", "d_base", ",", "d_filter_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.ProductTest.testSamplingContainmentProductTwo": [[275, 323], ["absl.testing.parameterized.named_parameters", "spriteworld.factor_distributions.Product", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'ContinuousContinuous'", ",", "distribs", ".", "Continuous", "(", "\n", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Continuous", "(", "'y'", ",", "1", ",", "3", ")", ",", "[", "{", "\n", "'x'", ":", "0.5", ",", "\n", "'y'", ":", "2.5", "\n", "}", ",", "{", "\n", "'x'", ":", "1.5", ",", "\n", "'y'", ":", "1.5", "\n", "}", "]", ",", "[", "{", "\n", "'x'", ":", "0.5", ",", "\n", "'y'", ":", "0.5", "\n", "}", ",", "{", "\n", "'x'", ":", "2.5", ",", "\n", "'y'", ":", "1.5", "\n", "}", "]", ")", ",", "\n", "(", "'DiscreteDiscrete'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "0", ",", "1", "]", ")", ",", "distribs", ".", "Discrete", "(", "'y'", ",", "[", "1", ",", "2", "]", ")", ",", "[", "{", "\n", "'x'", ":", "0", ",", "\n", "'y'", ":", "2", "\n", "}", ",", "{", "\n", "'x'", ":", "1", ",", "\n", "'y'", ":", "1", "\n", "}", "]", ",", "[", "{", "\n", "'x'", ":", "1", ",", "\n", "'y'", ":", "0", "\n", "}", ",", "{", "\n", "'x'", ":", "2", ",", "\n", "'y'", ":", "2", "\n", "}", "]", ")", ",", "\n", "(", "'DiscreteContinuous'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "1", ",", "3", "]", ")", ",", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "2", ")", ",", "[", "{", "\n", "'x'", ":", "1", ",", "\n", "'y'", ":", "1", "\n", "}", ",", "{", "\n", "'x'", ":", "3", ",", "\n", "'y'", ":", "0.5", "\n", "}", "]", ",", "[", "{", "\n", "'x'", ":", "2", ",", "\n", "'y'", ":", "1", "\n", "}", ",", "{", "\n", "'x'", ":", "3", ",", "\n", "'y'", ":", "3", "\n", "}", "]", ")", ",", "\n", ")", "\n", "def", "testSamplingContainmentProductTwo", "(", "self", ",", "d_0", ",", "d_1", ",", "contained", ",", "\n", "not_contained", ")", ":", "\n", "    ", "d", "=", "distribs", ".", "Product", "(", "(", "d_0", ",", "d_1", ")", ")", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.ProductTest.testSamplingContainmentProductMultiple": [[324, 338], ["spriteworld.factor_distributions.Product", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["", "def", "testSamplingContainmentProductMultiple", "(", "self", ")", ":", "\n", "    ", "dists", "=", "[", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2.5", ",", "3", ",", "4", ",", "6", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'y'", ",", "[", "1", ",", "2.5", ",", "3", ",", "12", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'z'", ",", "0", ",", "5", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'w'", ",", "2", ",", "10", ")", ",", "\n", "]", "\n", "contained", "=", "[", "{", "'x'", ":", "2.5", ",", "'y'", ":", "12", ",", "'z'", ":", "3.5", ",", "'w'", ":", "9", "}", "]", "\n", "not_contained", "=", "[", "\n", "{", "'x'", ":", "2.5", ",", "'y'", ":", "12", ",", "'z'", ":", "3.5", ",", "'w'", ":", "1", "}", ",", "\n", "{", "'x'", ":", "3.5", ",", "'y'", ":", "12", ",", "'z'", ":", "3.5", ",", "'w'", ":", "9", "}", ",", "\n", "]", "\n", "d", "=", "distribs", ".", "Product", "(", "dists", ")", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.ProductTest.testRaisesError": [[339, 344], ["spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "factor_distributions_test.ProductTest.assertRaises", "spriteworld.factor_distributions.Product"], "methods", ["None"], ["", "def", "testRaisesError", "(", "self", ")", ":", "\n", "    ", "d_0", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ")", "\n", "d_1", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "3", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "distribs", ".", "Product", "(", "(", "d_0", ",", "d_1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.ProductTest.testkeys": [[345, 353], ["spriteworld.factor_distributions.Product", "factor_distributions_test.ProductTest.assertEqual", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "set"], "methods", ["None"], ["", "", "def", "testkeys", "(", "self", ")", ":", "\n", "    ", "dists", "=", "[", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2.5", ",", "3", ",", "12", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "5", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'z'", ",", "2", ",", "10", ")", ",", "\n", "]", "\n", "d", "=", "distribs", ".", "Product", "(", "dists", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "keys", ",", "set", "(", "(", "'x'", ",", "'y'", ",", "'z'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.SetMinusTest.testSamplingContainmentSetMinusTwo": [[358, 374], ["absl.testing.parameterized.named_parameters", "spriteworld.factor_distributions.SetMinus", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Discrete"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'ContinuousContinuous'", ",", "distribs", ".", "Continuous", "(", "\n", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Continuous", "(", "'x'", ",", "1", ",", "3", ")", ",", "[", "0.5", "]", ",", "[", "1.5", "]", ")", ",", "\n", "(", "'DiscreteDiscrete'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "0", ",", "1", "]", ")", ",", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "2", "]", ")", ",", "[", "0", "]", ",", "[", "1", "]", ")", ",", "\n", "(", "'DiscreteContinuous'", ",", "distribs", ".", "Discrete", "(", "\n", "'x'", ",", "[", "1", ",", "3", "]", ")", ",", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", ",", "[", "3", "]", ",", "[", "1", "]", ")", ",", "\n", "(", "'ContinuousDiscrete'", ",", "distribs", ".", "Continuous", "(", "\n", "'x'", ",", "0", ",", "2", ")", ",", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "3", "]", ")", ",", "[", "0.5", ",", "1.5", "]", ",", "[", "1", "]", ")", ",", "\n", ")", "\n", "def", "testSamplingContainmentSetMinusTwo", "(", "self", ",", "d_0", ",", "d_1", ",", "contained", ",", "\n", "not_contained", ")", ":", "\n", "    ", "d", "=", "distribs", ".", "SetMinus", "(", "d_0", ",", "d_1", ")", "\n", "contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "contained", "]", "\n", "not_contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "not_contained", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.SetMinusTest.testSamplingContainmentSetMinusMultiple": [[375, 386], ["spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Mixture", "spriteworld.factor_distributions.SetMinus", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Discrete", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["", "def", "testSamplingContainmentSetMinusMultiple", "(", "self", ")", ":", "\n", "    ", "base", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "10", ")", "\n", "hold_out", "=", "distribs", ".", "Mixture", "(", "[", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "1", ",", "4", ",", "6", "]", ")", ",", "\n", "distribs", ".", "Discrete", "(", "'x'", ",", "[", "3", ",", "8", ",", "9", ",", "12", "]", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "3", ",", "5", ")", ",", "\n", "]", ")", "\n", "contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "[", "2.5", ",", "5.5", ",", "7", ",", "9.5", "]", "]", "\n", "not_contained", "=", "[", "{", "'x'", ":", "value", "}", "for", "value", "in", "[", "4", ",", "6", ",", "9", ",", "11", "]", "]", "\n", "d", "=", "distribs", ".", "SetMinus", "(", "base", ",", "hold_out", ")", "\n", "test_sampling_and_containment", "(", "self", ",", "d", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.SetMinusTest.testRaisesError": [[387, 392], ["spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "factor_distributions_test.SetMinusTest.assertRaises", "spriteworld.factor_distributions.SetMinus"], "methods", ["None"], ["", "def", "testRaisesError", "(", "self", ")", ":", "\n", "    ", "d_0", "=", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "2", ")", "\n", "d_1", "=", "distribs", ".", "Continuous", "(", "'y'", ",", "1", ",", "3", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "      ", "distribs", ".", "SetMinus", "(", "d_0", ",", "d_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.CompositionTest.testCornerUnion": [[397, 434], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.SetMinus", "spriteworld.factor_distributions.SetMinus", "spriteworld.factor_distributions.Mixture", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["def", "testCornerUnion", "(", "self", ")", ":", "\n", "    ", "square_0", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "3", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "3", ")", ",", "\n", "]", ")", "\n", "hold_out_0", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "1", ",", "3", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "2", ")", ",", "\n", "]", ")", "\n", "square_1", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "5", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "3", ")", ",", "\n", "]", ")", "\n", "hold_out_1", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "2", ",", "4", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "1", ",", "3", ")", ",", "\n", "]", ")", "\n", "corner_0", "=", "distribs", ".", "SetMinus", "(", "square_0", ",", "hold_out_0", ")", "\n", "corner_1", "=", "distribs", ".", "SetMinus", "(", "square_1", ",", "hold_out_1", ")", "\n", "corner_union", "=", "distribs", ".", "Mixture", "(", "[", "corner_0", ",", "corner_1", "]", ")", "\n", "\n", "contained", "=", "[", "\n", "{", "'x'", ":", "0.5", ",", "'y'", ":", "0.5", "}", ",", "\n", "{", "'x'", ":", "0.5", ",", "'y'", ":", "2.5", "}", ",", "\n", "{", "'x'", ":", "2.5", ",", "'y'", ":", "2.5", "}", ",", "\n", "{", "'x'", ":", "2.5", ",", "'y'", ":", "0.5", "}", ",", "\n", "{", "'x'", ":", "4.5", ",", "'y'", ":", "0.5", "}", ",", "\n", "{", "'x'", ":", "4.5", ",", "'y'", ":", "2.5", "}", ",", "\n", "]", "\n", "not_contained", "=", "[", "\n", "{", "'x'", ":", "1.5", ",", "'y'", ":", "0.5", "}", ",", "\n", "{", "'x'", ":", "1.5", ",", "'y'", ":", "1.5", "}", ",", "\n", "{", "'x'", ":", "2.5", ",", "'y'", ":", "1.5", "}", ",", "\n", "{", "'x'", ":", "3.5", ",", "'y'", ":", "1.5", "}", ",", "\n", "{", "'x'", ":", "3.5", ",", "'y'", ":", "2.5", "}", ",", "\n", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "corner_union", ",", "contained", ",", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.CompositionTest.testCubeWithTunnel": [[435, 458], ["spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.Product", "spriteworld.factor_distributions.SetMinus", "factor_distributions_test.test_sampling_and_containment", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment"], ["", "def", "testCubeWithTunnel", "(", "self", ")", ":", "\n", "    ", "cube", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0", ",", "1", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0", ",", "1", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'z'", ",", "0", ",", "1", ")", ",", "\n", "]", ")", "\n", "tunnel", "=", "distribs", ".", "Product", "(", "[", "\n", "distribs", ".", "Continuous", "(", "'x'", ",", "0.25", ",", "0.75", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'y'", ",", "0.25", ",", "0.75", ")", ",", "\n", "]", ")", "\n", "cube_with_tunnel", "=", "distribs", ".", "SetMinus", "(", "cube", ",", "tunnel", ")", "\n", "\n", "contained", "=", "[", "\n", "{", "'x'", ":", "0.2", ",", "'y'", ":", "0.2", ",", "'z'", ":", "0.2", "}", ",", "\n", "{", "'x'", ":", "0.2", ",", "'y'", ":", "0.2", ",", "'z'", ":", "0.5", "}", ",", "\n", "{", "'x'", ":", "0.2", ",", "'y'", ":", "0.5", ",", "'z'", ":", "0.5", "}", "\n", "]", "\n", "not_contained", "=", "[", "\n", "{", "'x'", ":", "0.5", ",", "'y'", ":", "0.5", ",", "'z'", ":", "0.5", "}", ",", "\n", "{", "'x'", ":", "0.5", ",", "'y'", ":", "0.5", ",", "'z'", ":", "0.2", "}", ",", "\n", "]", "\n", "test_sampling_and_containment", "(", "self", ",", "cube_with_tunnel", ",", "contained", ",", "\n", "not_contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.factor_distributions_test.test_sampling_and_containment": [[28, 44], ["six.moves.range", "test_object.assertTrue", "test_object.assertTrue", "test_object.assertFalse", "d.contains", "d.contains", "d.contains", "d.sample"], "function", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample"], ["def", "test_sampling_and_containment", "(", "test_object", ",", "d", ",", "contained", ",", "not_contained", ")", ":", "\n", "  ", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "    ", "test_object", ".", "assertTrue", "(", "d", ".", "contains", "(", "d", ".", "sample", "(", ")", ")", ")", "\n", "", "for", "contained_spec", "in", "contained", ":", "\n", "    ", "try", ":", "\n", "      ", "contained", "=", "d", ".", "contains", "(", "contained_spec", ")", "\n", "", "except", "KeyError", ":", "\n", "# Having the wrong keys also indicate it is not contained.", "\n", "      ", "contained", "=", "False", "\n", "", "test_object", ".", "assertTrue", "(", "contained", ")", "\n", "", "for", "not_contained_spec", "in", "not_contained", ":", "\n", "    ", "try", ":", "\n", "      ", "contained", "=", "d", ".", "contains", "(", "not_contained_spec", ")", "\n", "", "except", "KeyError", ":", "\n", "      ", "contained", "=", "False", "\n", "", "test_object", ".", "assertFalse", "(", "contained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.shapes_test.ShapesTest._test_area": [[32, 41], ["PIL.Image.new", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.polygon", "numpy.sum", "shapes_test.ShapesTest.assertAlmostEqual", "tuple", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.polygon"], ["  ", "def", "_test_area", "(", "self", ",", "path", ")", ":", "\n", "    ", "im_size", "=", "1000", "\n", "path", "=", "im_size", "*", "path", "/", "2", "+", "im_size", "/", "2", "\n", "im", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "im_size", ",", "im_size", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "im", ")", "\n", "draw", ".", "polygon", "(", "[", "tuple", "(", "p", ")", "for", "p", "in", "path", "]", ",", "fill", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "desired_area", "=", "0.25", "*", "im_size", "*", "im_size", "*", "3", "\n", "true_area", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "im", ")", ">", "0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "desired_area", "/", "true_area", ",", "1", ",", "delta", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.shapes_test.ShapesTest.testPolygon": [[42, 46], ["absl.testing.parameterized.parameters", "spriteworld.shapes.polygon", "shapes_test.ShapesTest._test_area"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.polygon", "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.shapes_test.ShapesTest._test_area"], ["", "@", "parameterized", ".", "parameters", "(", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ")", "\n", "def", "testPolygon", "(", "self", ",", "num_sides", ")", ":", "\n", "    ", "path", "=", "shapes", ".", "polygon", "(", "num_sides", ")", "\n", "self", ".", "_test_area", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.shapes_test.ShapesTest.testStar": [[47, 52], ["absl.testing.parameterized.parameters", "spriteworld.shapes.star", "shapes_test.ShapesTest._test_area"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.star", "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.shapes_test.ShapesTest._test_area"], ["", "@", "parameterized", ".", "parameters", "(", "(", "3", ",", "0.5", ")", ",", "(", "3", ",", "1.5", ")", ",", "(", "5", ",", "0.6", ")", ",", "(", "5", ",", "2.0", ")", ",", "(", "8", ",", "0.2", ")", ",", "\n", "(", "8", ",", "3.0", ")", ",", "(", "11", ",", "1.2", ")", ")", "\n", "def", "testStar", "(", "self", ",", "num_sides", ",", "point_height", ")", ":", "\n", "    ", "path", "=", "shapes", ".", "star", "(", "num_sides", ",", "point_height", ")", "\n", "self", ".", "_test_area", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.shapes_test.ShapesTest.testSpokes": [[53, 58], ["absl.testing.parameterized.parameters", "spriteworld.shapes.star", "shapes_test.ShapesTest._test_area"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.shapes.star", "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.shapes_test.ShapesTest._test_area"], ["", "@", "parameterized", ".", "parameters", "(", "(", "3", ",", "0.5", ")", ",", "(", "3", ",", "1.5", ")", ",", "(", "5", ",", "0.6", ")", ",", "(", "5", ",", "2.0", ")", ",", "(", "8", ",", "0.2", ")", ",", "\n", "(", "8", ",", "3.0", ")", ",", "(", "11", ",", "1.2", ")", ")", "\n", "def", "testSpokes", "(", "self", ",", "num_sides", ",", "spoke_height", ")", ":", "\n", "    ", "path", "=", "shapes", ".", "star", "(", "num_sides", ",", "spoke_height", ")", "\n", "self", ".", "_test_area", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.gym_wrapper_test.GymWrapperTest.testContinuousActions": [[38, 74], ["spriteworld.environment.Environment", "spriteworld.gym_wrapper.GymWrapper", "gym_wrapper_test.GymWrapperTest.assertEqual", "gym_wrapper_test.GymWrapperTest.assertEqual", "six.moves.range", "spriteworld.renderers.PILRenderer", "spriteworld.tasks.NoReward", "spriteworld.action_spaces.SelectMove", "gym.spaces.Dict", "gym.spaces.Box", "spriteworld.gym_wrapper.GymWrapper.reset", "six.moves.range", "spriteworld.gym_wrapper.GymWrapper.action_space.sample", "spriteworld.gym_wrapper.GymWrapper.step", "gym_wrapper_test.GymWrapperTest.assertTrue", "spriteworld.gym_wrapper.GymWrapper.step", "gym_wrapper_test.GymWrapperTest.assertFalse", "spriteworld.sprite.Sprite", "spriteworld.gym_wrapper.GymWrapper.action_space.sample", "spriteworld.gym_wrapper.GymWrapper.step", "gym_wrapper_test.GymWrapperTest.assertEqual", "gym_wrapper_test.GymWrapperTest.assertFalse", "gym_wrapper_test.GymWrapperTest.assertEqual", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["  ", "def", "testContinuousActions", "(", "self", ")", ":", "\n", "    ", "renderers", "=", "{", "\n", "'image'", ":", "spriteworld_renderers", ".", "PILRenderer", "(", "image_size", "=", "(", "64", ",", "64", ")", ",", ")", "\n", "}", "\n", "init_sprites", "=", "lambda", ":", "[", "sprite", ".", "Sprite", "(", "c0", "=", "255", ")", "]", "\n", "max_episode_length", "=", "5", "\n", "spriteworld_env", "=", "environment", ".", "Environment", "(", "\n", "tasks", ".", "NoReward", "(", ")", ",", "\n", "action_spaces", ".", "SelectMove", "(", ")", ",", "\n", "renderers", ",", "\n", "init_sprites", ",", "\n", "max_episode_length", "=", "max_episode_length", ")", "\n", "env", "=", "gym_wrapper", ".", "GymWrapper", "(", "spriteworld_env", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "env", ".", "observation_space", ",", "\n", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "\n", "spaces", ".", "Box", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "shape", "=", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "}", ")", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "action_space", ",", "\n", "spaces", ".", "Box", "(", "0.", ",", "1.", ",", "shape", "=", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "      ", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "max_episode_length", "-", "1", ")", ":", "\n", "        ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertEqual", "(", "obs", "[", "'image'", "]", ".", "dtype", ",", "np", ".", "uint8", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "self", ".", "assertEqual", "(", "reward", ",", "0.", ")", "\n", "", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.gym_wrapper_test.GymWrapperTest.testEmbodiedActions": [[75, 112], ["spriteworld.environment.Environment", "spriteworld.gym_wrapper.GymWrapper", "gym_wrapper_test.GymWrapperTest.assertEqual", "gym_wrapper_test.GymWrapperTest.assertEqual", "six.moves.range", "spriteworld.renderers.PILRenderer", "spriteworld.tasks.NoReward", "spriteworld.action_spaces.Embodied", "gym.spaces.Dict", "gym.spaces.Tuple", "spriteworld.gym_wrapper.GymWrapper.reset", "six.moves.range", "spriteworld.gym_wrapper.GymWrapper.action_space.sample", "spriteworld.gym_wrapper.GymWrapper.step", "gym_wrapper_test.GymWrapperTest.assertTrue", "spriteworld.gym_wrapper.GymWrapper.step", "gym_wrapper_test.GymWrapperTest.assertFalse", "spriteworld.sprite.Sprite", "spriteworld.gym_wrapper.GymWrapper.action_space.sample", "spriteworld.gym_wrapper.GymWrapper.step", "gym_wrapper_test.GymWrapperTest.assertEqual", "gym_wrapper_test.GymWrapperTest.assertFalse", "gym_wrapper_test.GymWrapperTest.assertEqual", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.reset", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.Embodied.sample", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "", "def", "testEmbodiedActions", "(", "self", ")", ":", "\n", "    ", "renderers", "=", "{", "\n", "'image'", ":", "spriteworld_renderers", ".", "PILRenderer", "(", "image_size", "=", "(", "64", ",", "64", ")", ",", ")", "\n", "}", "\n", "init_sprites", "=", "lambda", ":", "[", "sprite", ".", "Sprite", "(", "c0", "=", "255", ")", "]", "\n", "max_episode_length", "=", "5", "\n", "spriteworld_env", "=", "environment", ".", "Environment", "(", "\n", "tasks", ".", "NoReward", "(", ")", ",", "\n", "action_spaces", ".", "Embodied", "(", ")", ",", "\n", "renderers", ",", "\n", "init_sprites", ",", "\n", "max_episode_length", "=", "max_episode_length", ")", "\n", "env", "=", "gym_wrapper", ".", "GymWrapper", "(", "spriteworld_env", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "env", ".", "observation_space", ",", "\n", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "\n", "spaces", ".", "Box", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "shape", "=", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "}", ")", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "action_space", ",", "\n", "spaces", ".", "Tuple", "(", "[", "spaces", ".", "Discrete", "(", "2", ")", ",", "\n", "spaces", ".", "Discrete", "(", "4", ")", "]", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "      ", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "max_episode_length", "-", "1", ")", ":", "\n", "        ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertEqual", "(", "obs", "[", "'image'", "]", ".", "dtype", ",", "np", ".", "uint8", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "self", ".", "assertEqual", "(", "reward", ",", "0.", ")", "\n", "", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest._mock_sprites": [[34, 41], ["mock.Mock", "sprites.append"], "methods", ["None"], ["  ", "def", "_mock_sprites", "(", "self", ",", "sprite_positions", ")", ":", "\n", "    ", "sprites", "=", "[", "]", "\n", "for", "sprite_pos", "in", "sprite_positions", ":", "\n", "      ", "mocksprite", "=", "mock", ".", "Mock", "(", "spec", "=", "sprite", ".", "Sprite", ")", "\n", "mocksprite", ".", "position", "=", "sprite_pos", "\n", "sprites", ".", "append", "(", "mocksprite", ")", "\n", "", "return", "sprites", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testBasicReward": [[42, 54], ["absl.testing.parameterized.parameters", "tasks_test.GoalPositionTest._mock_sprites", "spriteworld.tasks.FindGoalPosition", "tasks_test.GoalPositionTest.assertAlmostEqual", "tasks_test.GoalPositionTest.assertEqual", "spriteworld.tasks.FindGoalPosition.reward", "spriteworld.tasks.FindGoalPosition.success", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest._mock_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "np", ".", "array", "(", "[", "0.", ",", "0.", "]", ")", "]", ",", "(", "0.5", ",", "0.5", ")", ",", "-", "30.4", ",", "False", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.4", ",", "0.6", "]", ")", "]", ",", "(", "0.5", ",", "0.5", ")", ",", "-", "2.1", ",", "False", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.56", "]", ")", "]", ",", "(", "0.5", ",", "0.5", ")", ",", "0.4", ",", "True", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.48", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.4", ",", "0.6", "]", ")", "]", ",", "(", "0.5", ",", "0.5", ")", ",", "1.5", ",", "False", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.48", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", "]", ")", "]", ",", "(", "0.5", ",", "0.5", ")", ",", "8.6", ",", "True", ")", ")", "\n", "def", "testBasicReward", "(", "self", ",", "sprite_positions", ",", "goal_position", ",", "reward", ",", "success", ")", ":", "\n", "    ", "sprites", "=", "self", ".", "_mock_sprites", "(", "sprite_positions", ")", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "goal_position", "=", "goal_position", ",", "terminate_distance", "=", "0.1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "task", ".", "success", "(", "sprites", ")", ",", "success", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testTerminateDistance": [[55, 69], ["absl.testing.parameterized.parameters", "tasks_test.GoalPositionTest._mock_sprites", "spriteworld.tasks.FindGoalPosition", "tasks_test.GoalPositionTest.assertAlmostEqual", "tasks_test.GoalPositionTest.assertEqual", "spriteworld.tasks.FindGoalPosition.reward", "spriteworld.tasks.FindGoalPosition.success", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest._mock_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "np", ".", "array", "(", "[", "0.4", ",", "0.6", "]", ")", "]", ",", "0.15", ",", "0.4", ",", "True", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.36", ",", "0.5", "]", ")", "]", ",", "0.15", ",", "0.5", ",", "True", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.34", ",", "0.5", "]", ")", "]", ",", "0.15", ",", "-", "0.5", ",", "False", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.34", ",", "0.5", "]", ")", "]", ",", "0.2", ",", "2.", ",", "True", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.34", ",", "0.39", "]", ")", "]", ",", "0.2", ",", "0.2", ",", "True", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.34", ",", "0.37", "]", ")", "]", ",", "0.2", ",", "-", "0.3", ",", "False", ")", ")", "\n", "def", "testTerminateDistance", "(", "self", ",", "sprite_positions", ",", "terminate_distance", ",", "reward", ",", "\n", "success", ")", ":", "\n", "    ", "sprites", "=", "self", ".", "_mock_sprites", "(", "sprite_positions", ")", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "terminate_distance", "=", "terminate_distance", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "task", ".", "success", "(", "sprites", ")", ",", "success", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testTerminateBonus": [[70, 83], ["absl.testing.parameterized.parameters", "tasks_test.GoalPositionTest._mock_sprites", "spriteworld.tasks.FindGoalPosition", "tasks_test.GoalPositionTest.assertAlmostEqual", "spriteworld.tasks.FindGoalPosition.reward", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest._mock_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "np", ".", "array", "(", "[", "0.4", ",", "0.52", "]", ")", "]", ",", "3.", ",", "-", "0.1", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "3.", ",", "4.4", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "1.", ",", "2.4", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.4", ",", "0.52", "]", ")", "]", ",", "3.", ",", "1.3", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "3.", ",", "5.7", ")", ")", "\n", "def", "testTerminateBonus", "(", "self", ",", "sprite_positions", ",", "terminate_bonus", ",", "reward", ")", ":", "\n", "    ", "sprites", "=", "self", ".", "_mock_sprites", "(", "sprite_positions", ")", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "\n", "terminate_distance", "=", "0.1", ",", "\n", "terminate_bonus", "=", "terminate_bonus", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testWeightsDimensions": [[84, 100], ["absl.testing.parameterized.parameters", "tasks_test.GoalPositionTest._mock_sprites", "spriteworld.tasks.FindGoalPosition", "tasks_test.GoalPositionTest.assertAlmostEqual", "tasks_test.GoalPositionTest.assertEqual", "spriteworld.tasks.FindGoalPosition.reward", "spriteworld.tasks.FindGoalPosition.success", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest._mock_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "(", "1", ",", "1", ")", ",", "1.4", ",", "True", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "(", "3", ",", "1", ")", ",", "-", "1.1", ",", "False", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.3", ",", "0.52", "]", ")", "]", ",", "(", "7", ",", "2", ")", ",", "-", "21.5", ",", "False", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.3", ",", "0.52", "]", ")", "]", ",", "(", "0.1", ",", "0.2", ")", ",", "1.8", ",", "True", ")", ",", "\n", ")", "\n", "def", "testWeightsDimensions", "(", "self", ",", "sprite_positions", ",", "weights_dimensions", ",", "reward", ",", "\n", "success", ")", ":", "\n", "    ", "sprites", "=", "self", ".", "_mock_sprites", "(", "sprite_positions", ")", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "\n", "terminate_distance", "=", "0.1", ",", "\n", "weights_dimensions", "=", "weights_dimensions", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "task", ".", "success", "(", "sprites", ")", ",", "success", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testRewardMultiplier": [[101, 116], ["absl.testing.parameterized.parameters", "tasks_test.GoalPositionTest._mock_sprites", "spriteworld.tasks.FindGoalPosition", "tasks_test.GoalPositionTest.assertAlmostEqual", "spriteworld.tasks.FindGoalPosition.reward", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest._mock_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "np", ".", "array", "(", "[", "0.35", ",", "0.52", "]", ")", "]", ",", "0.", ",", "50.0", ",", "-", "2.6", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.35", ",", "0.52", "]", ")", "]", ",", "0.", ",", "10.0", ",", "-", "0.5", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "1.", ",", "10.0", ",", "1.3", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.4", ",", "0.52", "]", ")", "]", ",", "0.", ",", "50.0", ",", "1.3", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "0.", ",", "10.0", ",", "0.5", ")", ")", "\n", "def", "testRewardMultiplier", "(", "self", ",", "sprite_positions", ",", "terminate_bonus", ",", "\n", "reward_multiplier", ",", "reward", ")", ":", "\n", "    ", "sprites", "=", "self", ".", "_mock_sprites", "(", "sprite_positions", ")", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "\n", "terminate_distance", "=", "0.1", ",", "\n", "terminate_bonus", "=", "terminate_bonus", ",", "\n", "raw_reward_multiplier", "=", "reward_multiplier", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testSparseReward": [[117, 132], ["absl.testing.parameterized.parameters", "tasks_test.GoalPositionTest._mock_sprites", "spriteworld.tasks.FindGoalPosition", "tasks_test.GoalPositionTest.assertAlmostEqual", "spriteworld.tasks.FindGoalPosition.reward", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest._mock_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "np", ".", "array", "(", "[", "0.35", ",", "0.52", "]", ")", "]", ",", "1.", ",", "0.", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "1.", ",", "2.4", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "3.", ",", "4.4", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.4", ",", "0.55", "]", ")", "]", ",", "1.", ",", "0.", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "1.", ",", "3.7", ")", ",", "\n", "(", "[", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", ",", "np", ".", "array", "(", "[", "0.43", ",", "0.52", "]", ")", "]", ",", "3.", ",", "5.7", ")", ")", "\n", "def", "testSparseReward", "(", "self", ",", "sprite_positions", ",", "terminate_bonus", ",", "reward", ")", ":", "\n", "    ", "sprites", "=", "self", ".", "_mock_sprites", "(", "sprite_positions", ")", "\n", "task", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "\n", "terminate_distance", "=", "0.1", ",", "\n", "sparse_reward", "=", "True", ",", "\n", "terminate_bonus", "=", "terminate_bonus", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testFilterDistrib": [[133, 160], ["zip", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.tasks.FindGoalPosition", "tasks_test.GoalPositionTest.assertAlmostEqual", "tasks_test.GoalPositionTest.assertEqual", "t.reward", "t.success"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "def", "testFilterDistrib", "(", "self", ")", ":", "\n", "    ", "sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.45", ",", "y", "=", "0.45", ",", "c0", "=", "64", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.45", ",", "y", "=", "0.55", ",", "c0", "=", "128", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.55", ",", "y", "=", "0.45", ",", "c0", "=", "192", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.4", ",", "y", "=", "0.4", ",", "c0", "=", "255", ")", ",", "\n", "]", "\n", "\n", "filter_distribs", "=", "[", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "65", ")", ",", "# selects sprites[:1]", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "129", ")", ",", "# selects sprites[:2]", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "193", ")", ",", "# selects sprites[:3]", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "256", ")", ",", "# selects sprites[:4]", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "65", ",", "256", ")", ",", "# selects sprites[1:4]", "\n", "]", "\n", "\n", "task_list", "=", "[", "\n", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "x", ",", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "terminate_distance", "=", "0.1", ")", "\n", "for", "x", "in", "filter_distribs", "\n", "]", "\n", "\n", "rewards", "=", "[", "1.5", ",", "2.9", ",", "4.4", ",", "2.3", ",", "0.9", "]", "\n", "successes", "=", "[", "True", ",", "True", ",", "True", ",", "False", ",", "False", "]", "\n", "for", "t", ",", "r", ",", "s", "in", "zip", "(", "task_list", ",", "rewards", ",", "successes", ")", ":", "\n", "      ", "self", ".", "assertAlmostEqual", "(", "t", ".", "reward", "(", "sprites", ")", ",", "r", ",", "delta", "=", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "t", ".", "success", "(", "sprites", ")", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.GoalPositionTest.testNoFilteredSprites": [[161, 169], ["spriteworld.factor_distributions.Continuous", "spriteworld.tasks.FindGoalPosition().reward", "tasks_test.GoalPositionTest.assertTrue", "spriteworld.sprite.Sprite", "numpy.isnan", "spriteworld.tasks.FindGoalPosition"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "", "def", "testNoFilteredSprites", "(", "self", ")", ":", "\n", "    ", "sprites", "=", "[", "sprite", ".", "Sprite", "(", "x", "=", "0.45", ",", "y", "=", "0.45", ",", "c0", "=", "255", ")", "]", "\n", "filter_distrib", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "254", ")", "\n", "r", "=", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "filter_distrib", ",", "\n", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ",", "\n", "terminate_distance", "=", "0.1", ")", ".", "reward", "(", "sprites", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "isnan", "(", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.setUp": [[173, 184], ["super().setUp", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "ClusteringTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.2", ",", "y", "=", "0.2", ",", "c0", "=", "64", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.3", ",", "y", "=", "0.3", ",", "c0", "=", "128", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.8", ",", "y", "=", "0.9", ",", "c0", "=", "192", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.9", ",", "y", "=", "0.8", ",", "c0", "=", "255", ")", ",", "\n", "]", "\n", "self", ".", "cluster_distribs", "=", "[", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "129", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "190", ",", "256", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.test4Sprites": [[186, 209], ["absl.testing.parameterized.parameters", "spriteworld.tasks.Clustering", "tasks_test.ClusteringTest.assertAlmostEqual", "tasks_test.ClusteringTest.assertEqual", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.tasks.Clustering.reward", "spriteworld.tasks.Clustering.success"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.21", ",", "0.21", "]", ",", "[", "0.8", ",", "0.8", "]", ",", "[", "0.81", ",", "0.81", "]", "]", ",", "287.5", "\n", ",", "True", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.25", ",", "0.25", "]", ",", "[", "0.8", ",", "0.8", "]", ",", "[", "0.81", ",", "0.81", "]", "]", ",", "84.2", ",", "True", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.53", ",", "0.53", "]", ",", "[", "0.8", ",", "0.8", "]", ",", "[", "0.81", ",", "0.81", "]", "]", ",", "0.4", ",", "True", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.53", "]", ",", "[", "0.53", ",", "0.2", "]", ",", "[", "0.8", ",", "0.8", "]", ",", "[", "0.81", ",", "0.81", "]", "]", ",", "0.4", ",", "True", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.53", ",", "0.53", "]", ",", "[", "0.8", ",", "0.8", "]", ",", "[", "0.9", ",", "0.9", "]", "]", ",", "-", "1.2", ",", "False", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.53", ",", "0.53", "]", ",", "[", "0.8", ",", "0.9", "]", ",", "[", "0.9", ",", "0.8", "]", "]", ",", "-", "1.2", ",", "False", ")", ",", "\n", ")", "\n", "def", "test4Sprites", "(", "self", ",", "positions", ",", "reward", ",", "success", ")", ":", "\n", "    ", "sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "x", "=", "positions", "[", "0", "]", "[", "0", "]", ",", "y", "=", "positions", "[", "0", "]", "[", "1", "]", ",", "c0", "=", "64", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "positions", "[", "1", "]", "[", "0", "]", ",", "y", "=", "positions", "[", "1", "]", "[", "1", "]", ",", "c0", "=", "128", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "positions", "[", "2", "]", "[", "0", "]", ",", "y", "=", "positions", "[", "2", "]", "[", "1", "]", ",", "c0", "=", "192", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "positions", "[", "3", "]", "[", "0", "]", ",", "y", "=", "positions", "[", "3", "]", "[", "1", "]", ",", "c0", "=", "255", ")", ",", "\n", "]", "\n", "cluster_distribs", "=", "[", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "129", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "190", ",", "256", ")", ",", "\n", "]", "\n", "task", "=", "tasks", ".", "Clustering", "(", "cluster_distribs", "=", "cluster_distribs", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "task", ".", "success", "(", "sprites", ")", ",", "success", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.testMoreSprites": [[210, 227], ["absl.testing.parameterized.parameters", "sprites.extend", "spriteworld.tasks.Clustering", "tasks_test.ClusteringTest.assertAlmostEqual", "spriteworld.sprite.Sprite", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.tasks.Clustering.reward", "spriteworld.sprite.Sprite"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.3", ",", "0.3", "]", "]", ",", "[", "[", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.9", "]", ",", "[", "0.9", ",", "0.9", "]", "]", ",", "18.7", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.3", ",", "0.3", "]", "]", ",", "[", "[", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.9", "]", ",", "[", "0.9", ",", "0.2", "]", "]", ",", "-", "2.9", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.3", ",", "0.3", "]", ",", "[", "0.25", ",", "0.3", "]", "]", ",", "[", "[", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.9", "]", ",", "\n", "[", "0.9", ",", "0.9", "]", "]", ",", "21.2", ")", ",", "\n", "(", "[", "[", "0.2", ",", "0.2", "]", ",", "[", "0.3", ",", "0.3", "]", ",", "[", "0.4", ",", "0.8", "]", "]", ",", "[", "[", "0.8", ",", "0.8", "]", ",", "[", "0.8", ",", "0.9", "]", ",", "\n", "[", "0.9", ",", "0.9", "]", "]", ",", "-", "1.8", ")", ",", "\n", ")", "\n", "def", "testMoreSprites", "(", "self", ",", "positions_0", ",", "positions_1", ",", "reward", ")", ":", "\n", "    ", "sprites", "=", "[", "sprite", ".", "Sprite", "(", "x", "=", "p", "[", "0", "]", ",", "y", "=", "p", "[", "1", "]", ",", "c0", "=", "75", ")", "for", "p", "in", "positions_0", "]", "\n", "sprites", ".", "extend", "(", "[", "sprite", ".", "Sprite", "(", "x", "=", "p", "[", "0", "]", ",", "y", "=", "p", "[", "1", "]", ",", "c0", "=", "225", ")", "for", "p", "in", "positions_1", "]", ")", "\n", "cluster_distribs", "=", "[", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "50", ",", "100", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "200", ",", "250", ")", ",", "\n", "]", "\n", "task", "=", "tasks", ".", "Clustering", "(", "cluster_distribs", "=", "cluster_distribs", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.test3Clusters": [[228, 244], ["spriteworld.tasks.Clustering", "tasks_test.ClusteringTest.assertAlmostEqual", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.factor_distributions.Continuous", "spriteworld.tasks.Clustering.reward"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "def", "test3Clusters", "(", "self", ")", ":", "\n", "    ", "sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.2", ",", "y", "=", "0.2", ",", "c0", "=", "64", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.3", ",", "y", "=", "0.3", ",", "c0", "=", "64", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.8", ",", "y", "=", "0.9", ",", "c0", "=", "128", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.9", ",", "y", "=", "0.8", ",", "c0", "=", "128", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.8", ",", "y", "=", "0.9", ",", "c0", "=", "255", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.9", ",", "y", "=", "0.8", ",", "c0", "=", "255", ")", ",", "\n", "]", "\n", "cluster_distribs", "=", "[", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "100", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "100", ",", "150", ")", ",", "\n", "distribs", ".", "Continuous", "(", "'c0'", ",", "200", ",", "256", ")", ",", "\n", "]", "\n", "task", "=", "tasks", ".", "Clustering", "(", "cluster_distribs", "=", "cluster_distribs", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "17.5", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.testTerminationThreshold": [[245, 255], ["absl.testing.parameterized.parameters", "spriteworld.tasks.Clustering", "tasks_test.ClusteringTest.assertAlmostEqual", "spriteworld.tasks.Clustering.reward"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "2.5", ",", "17.5", ")", ",", "\n", "(", "5.", ",", "5.", ")", ",", "\n", "(", "10.", ",", "-", "20.", ")", ",", "\n", ")", "\n", "def", "testTerminationThreshold", "(", "self", ",", "termination_threshold", ",", "reward", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "Clustering", "(", "\n", "cluster_distribs", "=", "self", ".", "cluster_distribs", ",", "\n", "termination_threshold", "=", "termination_threshold", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "self", ".", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.testTerminateBonus": [[256, 268], ["absl.testing.parameterized.parameters", "spriteworld.tasks.Clustering", "tasks_test.ClusteringTest.assertAlmostEqual", "spriteworld.tasks.Clustering.reward"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "2.5", ",", "0.", ",", "17.5", ")", ",", "\n", "(", "2.5", ",", "5.", ",", "22.5", ")", ",", "\n", "(", "5.", ",", "3.", ",", "8.", ")", ",", "\n", "(", "10.", ",", "7.", ",", "-", "20.", ")", ",", "\n", ")", "\n", "def", "testTerminateBonus", "(", "self", ",", "termination_threshold", ",", "terminate_bonus", ",", "reward", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "Clustering", "(", "\n", "cluster_distribs", "=", "self", ".", "cluster_distribs", ",", "\n", "terminate_bonus", "=", "terminate_bonus", ",", "\n", "termination_threshold", "=", "termination_threshold", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "self", ".", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.testRewardRange": [[269, 281], ["absl.testing.parameterized.parameters", "spriteworld.tasks.Clustering", "tasks_test.ClusteringTest.assertAlmostEqual", "spriteworld.tasks.Clustering.reward"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "2.5", ",", "10.", ",", "17.5", ")", ",", "\n", "(", "2.5", ",", "5.", ",", "8.8", ")", ",", "\n", "(", "5.", ",", "3.", ",", "1.5", ")", ",", "\n", "(", "10.", ",", "7.", ",", "-", "14.", ")", ",", "\n", ")", "\n", "def", "testRewardRange", "(", "self", ",", "termination_threshold", ",", "reward_range", ",", "reward", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "Clustering", "(", "\n", "cluster_distribs", "=", "self", ".", "cluster_distribs", ",", "\n", "reward_range", "=", "reward_range", ",", "\n", "termination_threshold", "=", "termination_threshold", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "self", ".", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.ClusteringTest.testSparseReward": [[282, 295], ["absl.testing.parameterized.parameters", "spriteworld.tasks.Clustering", "tasks_test.ClusteringTest.assertAlmostEqual", "spriteworld.tasks.Clustering.reward"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "2.5", ",", "0.", ",", "17.5", ")", ",", "\n", "(", "7.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "10.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "5.", ",", "5.", ",", "10.", ")", ",", "\n", ")", "\n", "def", "testSparseReward", "(", "self", ",", "termination_threshold", ",", "terminate_bonus", ",", "reward", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "Clustering", "(", "\n", "cluster_distribs", "=", "self", ".", "cluster_distribs", ",", "\n", "sparse_reward", "=", "True", ",", "\n", "terminate_bonus", "=", "terminate_bonus", ",", "\n", "termination_threshold", "=", "termination_threshold", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "self", ".", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.setUp": [[299, 329], ["super().setUp", "spriteworld.tasks.FindGoalPosition", "spriteworld.tasks.FindGoalPosition", "spriteworld.tasks.FindGoalPosition", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "spriteworld.factor_distributions.Continuous", "numpy.array", "spriteworld.factor_distributions.Continuous", "numpy.array", "spriteworld.factor_distributions.Continuous", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.setUp"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "super", "(", "MetaAggregatedTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "subtasks", "=", "[", "\n", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "0", ",", "100", ")", ",", "\n", "goal_position", "=", "np", ".", "array", "(", "[", "0.2", ",", "0.2", "]", ")", ",", "\n", "terminate_distance", "=", "0.1", ")", ",", "\n", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "100", ",", "200", ")", ",", "\n", "goal_position", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", "]", ")", ",", "\n", "terminate_distance", "=", "0.1", ",", "\n", "terminate_bonus", "=", "5.0", ")", ",", "\n", "tasks", ".", "FindGoalPosition", "(", "\n", "filter_distrib", "=", "distribs", ".", "Continuous", "(", "'c0'", ",", "200", ",", "256", ")", ",", "\n", "goal_position", "=", "np", ".", "array", "(", "[", "0.8", ",", "0.8", "]", ")", ",", "\n", "terminate_distance", "=", "0.1", ",", "\n", "terminate_bonus", "=", "10.0", ")", ",", "\n", "]", "\n", "self", ".", "success_sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.2", ",", "y", "=", "0.2", ",", "c0", "=", "50", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.5", ",", "y", "=", "0.45", ",", "c0", "=", "150", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.85", ",", "y", "=", "0.75", ",", "c0", "=", "250", ")", ",", "\n", "]", "\n", "self", ".", "success_rewards", "=", "[", "5.", ",", "7.5", ",", "11.5", "]", "\n", "self", ".", "failure_sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.2", ",", "y", "=", "0.8", ",", "c0", "=", "50", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.3", ",", "y", "=", "0.45", ",", "c0", "=", "150", ")", ",", "\n", "sprite", ".", "Sprite", "(", "x", "=", "0.9", ",", "y", "=", "0.75", ",", "c0", "=", "250", ")", ",", "\n", "]", "\n", "self", ".", "failure_rewards", "=", "[", "-", "25.", ",", "-", "5.3", ",", "-", "0.6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest._get_sprites_and_reward_list": [[330, 338], ["sprites.extend", "reward_list.extend", "numpy.nonzero", "numpy.nonzero", "numpy.logical_not"], "methods", ["None"], ["", "def", "_get_sprites_and_reward_list", "(", "self", ",", "successes", ")", ":", "\n", "    ", "success_inds", "=", "np", ".", "nonzero", "(", "successes", ")", "[", "0", "]", "\n", "failure_inds", "=", "np", ".", "nonzero", "(", "np", ".", "logical_not", "(", "successes", ")", ")", "[", "0", "]", "\n", "sprites", "=", "[", "self", ".", "success_sprites", "[", "i", "]", "for", "i", "in", "success_inds", "]", "\n", "sprites", ".", "extend", "(", "[", "self", ".", "failure_sprites", "[", "i", "]", "for", "i", "in", "failure_inds", "]", ")", "\n", "reward_list", "=", "[", "self", ".", "success_rewards", "[", "i", "]", "for", "i", "in", "success_inds", "]", "\n", "reward_list", ".", "extend", "(", "[", "self", ".", "failure_rewards", "[", "i", "]", "for", "i", "in", "failure_inds", "]", ")", "\n", "return", "sprites", ",", "reward_list", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.testSum": [[339, 357], ["absl.testing.parameterized.parameters", "spriteworld.tasks.MetaAggregated", "tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "tasks_test.MetaAggregatedTest.assertAlmostEqual", "tasks_test.MetaAggregatedTest.assertEqual", "spriteworld.tasks.MetaAggregated.reward", "sum", "spriteworld.tasks.MetaAggregated.success"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.success"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "'all'", ",", "(", "True", ",", "True", ",", "True", ")", ",", "True", ")", ",", "\n", "(", "'all'", ",", "(", "True", ",", "True", ",", "False", ")", ",", "False", ")", ",", "\n", "(", "'all'", ",", "(", "True", ",", "False", ",", "False", ")", ",", "False", ")", ",", "\n", "(", "'all'", ",", "(", "False", ",", "False", ",", "False", ")", ",", "False", ")", ",", "\n", "(", "'any'", ",", "(", "True", ",", "True", ",", "True", ")", ",", "True", ")", ",", "\n", "(", "'any'", ",", "(", "True", ",", "True", ",", "False", ")", ",", "True", ")", ",", "\n", "(", "'any'", ",", "(", "True", ",", "False", ",", "False", ")", ",", "True", ")", ",", "\n", "(", "'any'", ",", "(", "False", ",", "False", ",", "False", ")", ",", "False", ")", ",", "\n", ")", "\n", "def", "testSum", "(", "self", ",", "termination_criterion", ",", "successes", ",", "success", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "MetaAggregated", "(", "\n", "self", ".", "subtasks", ",", "\n", "reward_aggregator", "=", "'sum'", ",", "\n", "termination_criterion", "=", "termination_criterion", ")", "\n", "sprites", ",", "reward_list", "=", "self", ".", "_get_sprites_and_reward_list", "(", "successes", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "sum", "(", "reward_list", ")", ",", "delta", "=", "0.1", ")", "\n", "self", ".", "assertEqual", "(", "task", ".", "success", "(", "sprites", ")", ",", "success", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.testMax": [[358, 370], ["absl.testing.parameterized.parameters", "spriteworld.tasks.MetaAggregated", "tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "tasks_test.MetaAggregatedTest.assertAlmostEqual", "spriteworld.tasks.MetaAggregated.reward", "max"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "(", "True", ",", "True", ",", "True", ")", ",", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "False", ")", ",", ")", ",", "\n", "(", "(", "True", ",", "False", ",", "False", ")", ",", ")", ",", "\n", "(", "(", "False", ",", "False", ",", "False", ")", ",", ")", ",", "\n", ")", "\n", "def", "testMax", "(", "self", ",", "successes", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "MetaAggregated", "(", "\n", "self", ".", "subtasks", ",", "\n", "reward_aggregator", "=", "'max'", ")", "\n", "sprites", ",", "reward_list", "=", "self", ".", "_get_sprites_and_reward_list", "(", "successes", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "max", "(", "reward_list", ")", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.testMin": [[371, 381], ["absl.testing.parameterized.parameters", "spriteworld.tasks.MetaAggregated", "tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "tasks_test.MetaAggregatedTest.assertAlmostEqual", "spriteworld.tasks.MetaAggregated.reward", "min"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "(", "True", ",", "True", ",", "True", ")", ",", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "False", ")", ",", ")", ",", "\n", "(", "(", "True", ",", "False", ",", "False", ")", ",", ")", ",", "\n", "(", "(", "False", ",", "False", ",", "False", ")", ",", ")", ",", "\n", ")", "\n", "def", "testMin", "(", "self", ",", "successes", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "MetaAggregated", "(", "self", ".", "subtasks", ",", "reward_aggregator", "=", "'min'", ")", "\n", "sprites", ",", "reward_list", "=", "self", ".", "_get_sprites_and_reward_list", "(", "successes", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "min", "(", "reward_list", ")", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.testMean": [[382, 393], ["absl.testing.parameterized.parameters", "spriteworld.tasks.MetaAggregated", "tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "tasks_test.MetaAggregatedTest.assertAlmostEqual", "spriteworld.tasks.MetaAggregated.reward", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "(", "True", ",", "True", ",", "True", ")", ",", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "False", ")", ",", ")", ",", "\n", "(", "(", "True", ",", "False", ",", "False", ")", ",", ")", ",", "\n", "(", "(", "False", ",", "False", ",", "False", ")", ",", ")", ",", "\n", ")", "\n", "def", "testMean", "(", "self", ",", "successes", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "MetaAggregated", "(", "self", ".", "subtasks", ",", "reward_aggregator", "=", "'mean'", ")", "\n", "sprites", ",", "reward_list", "=", "self", ".", "_get_sprites_and_reward_list", "(", "successes", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "task", ".", "reward", "(", "sprites", ")", ",", "np", ".", "mean", "(", "reward_list", ")", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest.testTerminateBonus": [[394, 410], ["absl.testing.parameterized.parameters", "spriteworld.tasks.MetaAggregated", "tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "tasks_test.MetaAggregatedTest.assertAlmostEqual", "spriteworld.tasks.MetaAggregated.reward"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.tasks_test.MetaAggregatedTest._get_sprites_and_reward_list", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.tasks.MetaAggregated.reward"], ["", "@", "parameterized", ".", "parameters", "(", "\n", "(", "(", "True", ",", "True", ",", "True", ")", ",", "'sum'", ",", "0.", ",", "24.", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "True", ")", ",", "'sum'", ",", "5.", ",", "29.", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "False", ")", ",", "'sum'", ",", "5.", ",", "11.9", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "True", ")", ",", "'min'", ",", "0.", ",", "5.", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "True", ")", ",", "'min'", ",", "5.", ",", "10.", ")", ",", "\n", "(", "(", "True", ",", "True", ",", "False", ")", ",", "'min'", ",", "5.", ",", "-", "0.6", ")", ",", "\n", ")", "\n", "def", "testTerminateBonus", "(", "self", ",", "successes", ",", "reward_aggregator", ",", "terminate_bonus", ",", "\n", "reward", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "MetaAggregated", "(", "\n", "self", ".", "subtasks", ",", "\n", "reward_aggregator", "=", "reward_aggregator", ",", "\n", "terminate_bonus", "=", "terminate_bonus", ")", "\n", "sprites", ",", "_", "=", "self", ".", "_get_sprites_and_reward_list", "(", "successes", ")", "\n", "self", ".", "assertAlmostEqual", "(", "task", ".", "reward", "(", "sprites", ")", ",", "reward", ",", "delta", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.SelectMoveTest.testGetMotion": [[31, 40], ["absl.testing.parameterized.named_parameters", "spriteworld.action_spaces.SelectMove", "spriteworld.action_spaces.SelectMove.get_motion", "action_spaces_test.SelectMoveTest.assertTrue", "numpy.allclose", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.DragAndDrop.get_motion"], ["  ", "@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'Motion'", ",", "1", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "(", "-", "0.3", ",", "0.25", ")", ")", ",", "\n", "(", "'SameMotion'", ",", "1", ",", "np", ".", "array", "(", "[", "0.2", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "(", "-", "0.3", ",", "0.25", ")", ")", ",", "\n", "(", "'SmallerScale'", ",", "0.5", ",", "np", ".", "array", "(", "[", "0.2", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "(", "-", "0.15", ",", "0.125", ")", ")", ",", "\n", ")", "\n", "def", "testGetMotion", "(", "self", ",", "scale", ",", "action", ",", "true_motion", ")", ":", "\n", "    ", "action_space", "=", "action_spaces", ".", "SelectMove", "(", "scale", "=", "scale", ")", "\n", "motion", "=", "action_space", ".", "get_motion", "(", "action", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "motion", ",", "true_motion", ",", "atol", "=", "1e-4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.SelectMoveTest.testMotionCost": [[41, 52], ["absl.testing.parameterized.named_parameters", "spriteworld.action_spaces.SelectMove", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertAlmostEqual", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'NoCost'", ",", "1", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "0.", ",", "0.", ")", ",", "\n", "(", "'Cost'", ",", "1", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "1.", ",", "-", "0.39", ")", ",", "\n", "(", "'SameCost'", ",", "1", ",", "np", ".", "array", "(", "[", "0.2", ",", "0.3", ",", "0.2", ",", "0.75", "]", ")", ",", "1.", ",", "-", "0.39", ")", ",", "\n", "(", "'LowerCost'", ",", "0.5", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "1.", ",", "-", "0.195", ")", ",", "\n", ")", "\n", "def", "testMotionCost", "(", "self", ",", "scale", ",", "action", ",", "motion_cost", ",", "true_cost", ")", ":", "\n", "    ", "action_space", "=", "action_spaces", ".", "SelectMove", "(", "\n", "scale", "=", "scale", ",", "motion_cost", "=", "motion_cost", ")", "\n", "cost", "=", "action_space", ".", "step", "(", "action", ",", "sprites", "=", "[", "]", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertAlmostEqual", "(", "cost", ",", "true_cost", ",", "delta", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.SelectMoveTest.testMoveSprites": [[53, 99], ["spriteworld.action_spaces.SelectMove", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertTrue", "action_spaces_test.SelectMoveTest.assertTrue", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertTrue", "action_spaces_test.SelectMoveTest.assertTrue", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertTrue", "action_spaces_test.SelectMoveTest.assertTrue", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertTrue", "action_spaces_test.SelectMoveTest.assertTrue", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertTrue", "action_spaces_test.SelectMoveTest.assertTrue", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertTrue", "action_spaces_test.SelectMoveTest.assertTrue", "spriteworld.action_spaces.SelectMove.step", "action_spaces_test.SelectMoveTest.assertTrue", "action_spaces_test.SelectMoveTest.assertTrue", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "def", "testMoveSprites", "(", "self", ")", ":", "\n", "    ", "\"\"\"Take a series of actions and repeatedly check sprite motions.\"\"\"", "\n", "action_space", "=", "action_spaces", ".", "SelectMove", "(", "scale", "=", "0.5", ")", "\n", "sprites", "=", "[", "sprite", ".", "Sprite", "(", "x", "=", "0.55", ",", "y", "=", "0.5", ")", ",", "sprite", ".", "Sprite", "(", "x", "=", "0.5", ",", "y", "=", "0.5", ")", "]", "\n", "\n", "# Move second (top) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.52", ",", "0.52", ",", "0.5", ",", "0.48", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.55", ",", "0.5", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.5", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.58", ",", "0.5", ",", "0.9", ",", "0.9", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.75", ",", "0.7", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.5", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move neither sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.58", ",", "0.5", ",", "0.9", ",", "0.9", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.75", ",", "0.7", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.5", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move second (top) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.5", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.75", ",", "0.7", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.78", ",", "0.74", ",", "0.9", ",", "0.9", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.95", ",", "0.9", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.92", ",", "0.9", ",", "0.9", ",", "0.5", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "1.", ",", "0.9", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.98", ",", "0.9", ",", "0.7", ",", "0.9", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "1.1", ",", "1.1", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.SelectMoveTest.testNoiseScale": [[100, 108], ["absl.testing.parameterized.named_parameters", "spriteworld.action_spaces.SelectMove", "spriteworld.action_spaces.SelectMove.apply_noise_to_action", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.SelectMove.apply_noise_to_action"], ["", "@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'NoNoise'", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "0.", ")", ",", "\n", "(", "'Noise'", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "0.2", ")", ",", "\n", "(", "'NoiseOutOfBounds'", ",", "np", ".", "array", "(", "[", "0.2", ",", "0.3", ",", "0.9", ",", "0.05", "]", ")", ",", "0.2", ")", ",", "\n", "(", "'HighNoise'", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.75", "]", ")", ",", "0.5", ")", ")", "\n", "def", "testNoiseScale", "(", "self", ",", "action", ",", "noise_scale", ")", ":", "\n", "    ", "action_space", "=", "action_spaces", ".", "SelectMove", "(", "scale", "=", "0.1", ",", "noise_scale", "=", "noise_scale", ")", "\n", "action_space", ".", "apply_noise_to_action", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.DragAndDropTest.testGetMotion": [[112, 122], ["absl.testing.parameterized.named_parameters", "spriteworld.action_spaces.DragAndDrop", "spriteworld.action_spaces.DragAndDrop.get_motion", "action_spaces_test.DragAndDropTest.assertTrue", "numpy.allclose", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.action_spaces.DragAndDrop.get_motion"], ["  ", "@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'MoveUpRight'", ",", "1", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.75", ",", "0.75", "]", ")", ",", "(", "0.25", ",", "0.25", ")", ")", ",", "\n", "(", "'MoveDownLeft'", ",", "1", ",", "np", ".", "array", "(", "[", "0.2", ",", "0.5", ",", "-", "0.2", ",", "-", "0.75", "]", ")", ",", "(", "-", "0.4", ",", "-", "1.25", ")", ")", ",", "\n", "(", "'ScaledMove'", ",", "0.5", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.8", ",", "0.8", "]", ")", ",", "(", "0.15", ",", "0.15", ")", ")", ",", "\n", "(", "'MoveEdge'", ",", "0.5", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "-", "0.2", ",", "-", "0.4", "]", ")", ",", "(", "-", "0.1", ",", "-", "0.2", ")", ")", ",", "\n", ")", "\n", "def", "testGetMotion", "(", "self", ",", "scale", ",", "action", ",", "true_motion", ")", ":", "\n", "    ", "action_space", "=", "action_spaces", ".", "DragAndDrop", "(", "scale", "=", "scale", ")", "\n", "motion", "=", "action_space", ".", "get_motion", "(", "action", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "motion", ",", "true_motion", ",", "atol", "=", "1e-4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.DragAndDropTest.testMoveSprites": [[123, 169], ["spriteworld.action_spaces.DragAndDrop", "spriteworld.action_spaces.DragAndDrop.step", "action_spaces_test.DragAndDropTest.assertTrue", "action_spaces_test.DragAndDropTest.assertTrue", "spriteworld.action_spaces.DragAndDrop.step", "action_spaces_test.DragAndDropTest.assertTrue", "action_spaces_test.DragAndDropTest.assertTrue", "spriteworld.action_spaces.DragAndDrop.step", "action_spaces_test.DragAndDropTest.assertTrue", "action_spaces_test.DragAndDropTest.assertTrue", "spriteworld.action_spaces.DragAndDrop.step", "action_spaces_test.DragAndDropTest.assertTrue", "action_spaces_test.DragAndDropTest.assertTrue", "spriteworld.action_spaces.DragAndDrop.step", "action_spaces_test.DragAndDropTest.assertTrue", "action_spaces_test.DragAndDropTest.assertTrue", "spriteworld.action_spaces.DragAndDrop.step", "action_spaces_test.DragAndDropTest.assertTrue", "action_spaces_test.DragAndDropTest.assertTrue", "spriteworld.action_spaces.DragAndDrop.step", "action_spaces_test.DragAndDropTest.assertTrue", "action_spaces_test.DragAndDropTest.assertTrue", "spriteworld.sprite.Sprite", "spriteworld.sprite.Sprite", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.allclose", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "def", "testMoveSprites", "(", "self", ")", ":", "\n", "    ", "\"\"\"Take a series of actions and repeatedly check sprite motions.\"\"\"", "\n", "action_space", "=", "action_spaces", ".", "DragAndDrop", "(", "scale", "=", "0.5", ")", "\n", "sprites", "=", "[", "sprite", ".", "Sprite", "(", "x", "=", "0.55", ",", "y", "=", "0.5", ")", ",", "sprite", ".", "Sprite", "(", "x", "=", "0.5", ",", "y", "=", "0.5", ")", "]", "\n", "\n", "# Move second (top) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.52", ",", "0.52", ",", "0.52", ",", "0.5", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.55", ",", "0.5", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.5", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.58", ",", "0.5", ",", "0.98", ",", "0.9", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.75", ",", "0.7", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.5", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move neither sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.58", ",", "0.5", ",", "0.9", ",", "0.9", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.75", ",", "0.7", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.5", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move second (top) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.2", ",", "0.5", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.75", ",", "0.7", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.78", ",", "0.74", ",", "0.98", ",", "0.94", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "0.85", ",", "0.8", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.82", ",", "0.8", ",", "1.3", ",", "1.0", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "1.", ",", "0.9", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n", "# Move first (bottom) sprite", "\n", "action_space", ".", "step", "(", "\n", "np", ".", "array", "(", "[", "0.99", ",", "0.9", ",", "1.19", ",", "1.3", "]", ")", ",", "sprites", ",", "keep_in_frame", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "0", "]", ".", "position", ",", "[", "1.1", ",", "1.1", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "sprites", "[", "1", "]", ".", "position", ",", "[", "0.35", ",", "0.49", "]", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.EmbodiedTest.testGetMotion": [[173, 184], ["absl.testing.parameterized.named_parameters", "spriteworld.action_spaces.Embodied", "action_spaces_test.EmbodiedTest.assertTrue", "numpy.allclose"], "methods", ["None"], ["  ", "@", "parameterized", ".", "named_parameters", "(", "\n", "(", "'Up'", ",", "0", ",", "0.1", ",", "(", "0.", ",", "0.1", ")", ")", ",", "\n", "(", "'Down'", ",", "2", ",", "0.1", ",", "(", "0.", ",", "-", "0.1", ")", ")", ",", "\n", "(", "'Left'", ",", "1", ",", "0.1", ",", "(", "-", "0.1", ",", "0.", ")", ")", ",", "\n", "(", "'Right'", ",", "3", ",", "0.1", ",", "(", "0.1", ",", "0.", ")", ")", ",", "\n", "(", "'MoreRight'", ",", "3", ",", "0.5", ",", "(", "0.5", ",", "0.", ")", ")", ",", "\n", ")", "\n", "def", "testGetMotion", "(", "self", ",", "motion_action", ",", "step_size", ",", "true_motion", ")", ":", "\n", "    ", "action_space", "=", "action_spaces", ".", "Embodied", "(", "step_size", "=", "step_size", ")", "\n", "motion", "=", "action_space", ".", "action_to_motion", "[", "motion_action", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "motion", ",", "true_motion", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.action_spaces_test.EmbodiedTest.testMoveSprites": [[185, 242], ["absl.testing.parameterized.named_parameters", "spriteworld.action_spaces.Embodied", "spriteworld.action_spaces.Embodied.step", "zip", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "spriteworld.sprite.Sprite", "action_spaces_test.EmbodiedTest.assertTrue", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "@", "parameterized", ".", "named_parameters", "(", "\n", "dict", "(", "\n", "testcase_name", "=", "'Up'", ",", "\n", "init_positions", "=", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.2", ",", "0.8", "]", "]", ",", "\n", "action", "=", "(", "0", ",", "0", ")", ",", "\n", "final_positions", "=", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.2", ",", "0.9", "]", "]", ")", ",", "\n", "dict", "(", "\n", "testcase_name", "=", "'UpCarry'", ",", "\n", "init_positions", "=", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.2", ",", "0.8", "]", "]", ",", "\n", "action", "=", "(", "1", ",", "0", ")", ",", "\n", "final_positions", "=", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.2", ",", "0.9", "]", "]", ")", ",", "\n", "dict", "(", "\n", "testcase_name", "=", "'RightCarry'", ",", "\n", "init_positions", "=", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.45", ",", "0.55", "]", "]", ",", "\n", "action", "=", "(", "1", ",", "3", ")", ",", "\n", "final_positions", "=", "[", "[", "0.6", ",", "0.5", "]", ",", "[", "0.55", ",", "0.55", "]", "]", ")", ",", "\n", "dict", "(", "\n", "testcase_name", "=", "'LeftCarry'", ",", "\n", "init_positions", "=", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.45", ",", "0.55", "]", "]", ",", "\n", "action", "=", "(", "1", ",", "1", ")", ",", "\n", "final_positions", "=", "[", "[", "0.4", ",", "0.5", "]", ",", "[", "0.35", ",", "0.55", "]", "]", ")", ",", "\n", "dict", "(", "\n", "testcase_name", "=", "'DownCarry'", ",", "\n", "init_positions", "=", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.45", ",", "0.55", "]", "]", ",", "\n", "action", "=", "(", "1", ",", "2", ")", ",", "\n", "final_positions", "=", "[", "[", "0.5", ",", "0.4", "]", ",", "[", "0.45", ",", "0.45", "]", "]", ")", ",", "\n", "dict", "(", "\n", "testcase_name", "=", "'StayInBounds'", ",", "\n", "init_positions", "=", "[", "[", "0.95", ",", "0.02", "]", ",", "[", "0.95", ",", "0.05", "]", "]", ",", "\n", "action", "=", "(", "1", ",", "3", ")", ",", "\n", "final_positions", "=", "[", "[", "1.", ",", "0.02", "]", ",", "[", "1.", ",", "0.05", "]", "]", ")", ",", "\n", "dict", "(", "\n", "testcase_name", "=", "'GoOutOfBound'", ",", "\n", "init_positions", "=", "[", "[", "0.95", ",", "0.02", "]", ",", "[", "0.95", ",", "0.05", "]", "]", ",", "\n", "action", "=", "(", "1", ",", "3", ")", ",", "\n", "final_positions", "=", "[", "[", "1.05", ",", "0.02", "]", ",", "[", "1.05", ",", "0.05", "]", "]", ",", "\n", "keep_in_frame", "=", "False", ")", ",", "\n", "dict", "(", "\n", "testcase_name", "=", "'MoveCorrectEmbodied'", ",", "\n", "init_positions", "=", "[", "[", "0.45", ",", "0.55", "]", ",", "[", "0.5", ",", "0.5", "]", ",", "[", "0.45", ",", "0.55", "]", "]", ",", "\n", "action", "=", "(", "1", ",", "3", ")", ",", "\n", "final_positions", "=", "[", "[", "0.45", ",", "0.55", "]", ",", "[", "0.6", ",", "0.5", "]", ",", "[", "0.55", ",", "0.55", "]", "]", ")", ",", "\n", ")", "\n", "def", "testMoveSprites", "(", "self", ",", "\n", "init_positions", ",", "\n", "action", ",", "\n", "final_positions", ",", "\n", "keep_in_frame", "=", "True", ")", ":", "\n", "    ", "\"\"\"Take a series of actions and repeatedly check sprite motions.\"\"\"", "\n", "action_space", "=", "action_spaces", ".", "Embodied", "(", "step_size", "=", "0.1", ")", "\n", "sprites", "=", "[", "\n", "sprite", ".", "Sprite", "(", "x", "=", "pos", "[", "0", "]", ",", "y", "=", "pos", "[", "1", "]", ",", "shape", "=", "'square'", ",", "scale", "=", "0.15", ")", "\n", "for", "pos", "in", "init_positions", "\n", "]", "\n", "action_space", ".", "step", "(", "action", ",", "sprites", ",", "keep_in_frame", "=", "keep_in_frame", ")", "\n", "for", "s", ",", "p", "in", "zip", "(", "sprites", ",", "final_positions", ")", ":", "\n", "      ", "self", ".", "assertTrue", "(", "np", ".", "allclose", "(", "s", ".", "position", ",", "p", ",", "atol", "=", "1e-5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentTest.assertValidObservation": [[36, 42], ["environment_test.EnvironmentTest.environment.observation_spec", "observation.items", "environment_test.EnvironmentTest.assertConformsToSpec"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec"], ["  ", "def", "assertValidObservation", "(", "self", ",", "observation", ")", ":", "\n", "# Override this method from test_utils.EnvironmentTestMixin to make it", "\n", "# support a dict of specs as observation.", "\n", "    ", "observation_spec", "=", "self", ".", "environment", ".", "observation_spec", "(", ")", "\n", "for", "k", ",", "v", "in", "observation", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "assertConformsToSpec", "(", "v", ",", "observation_spec", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentTest.make_object_under_test": [[43, 52], ["spriteworld.environment.Environment", "spriteworld.tasks.NoReward", "spriteworld.action_spaces.SelectMove", "spriteworld.sprite.Sprite"], "methods", ["None"], ["", "", "def", "make_object_under_test", "(", "self", ")", ":", "\n", "    ", "\"\"\"Environment creator used by test_utils.EnvironmentTestMixin.\"\"\"", "\n", "env", "=", "environment", ".", "Environment", "(", "\n", "task", "=", "tasks", ".", "NoReward", "(", ")", ",", "\n", "action_space", "=", "action_spaces", ".", "SelectMove", "(", ")", ",", "\n", "renderers", "=", "{", "}", ",", "\n", "init_sprites", "=", "lambda", ":", "[", "sprite", ".", "Sprite", "(", "c0", "=", "255", ")", "]", ",", "\n", "max_episode_length", "=", "7", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentTest.testMaxEpisodeLength": [[53, 66], ["environment_test.EnvironmentTest.make_object_under_test", "numpy.array", "environment_test.EnvironmentTest.step", "six.moves.range", "six.moves.range", "environment_test.EnvironmentTest.step", "environment_test.EnvironmentTest.assertTrue", "environment_test.EnvironmentTest.step", "environment_test.EnvironmentTest.assertTrue", "environment_test.EnvironmentTest.step", "environment_test.EnvironmentTest.assertTrue", "environment_test.EnvironmentTest.step.last", "environment_test.EnvironmentTest.step.first", "environment_test.EnvironmentTest.step.mid"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentRenderersTest.make_object_under_test", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "def", "testMaxEpisodeLength", "(", "self", ")", ":", "\n", "    ", "env", "=", "self", ".", "make_object_under_test", "(", ")", "\n", "action", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "env", ".", "step", "(", "action", ")", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "_", "in", "range", "(", "6", ")", ":", "\n", "        ", "timestep", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertTrue", "(", "timestep", ".", "mid", "(", ")", ")", "\n", "", "timestep", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertTrue", "(", "timestep", ".", "last", "(", ")", ")", "\n", "timestep", "=", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "assertTrue", "(", "timestep", ".", "first", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentTest.testTaskTermination": [[67, 89], ["spriteworld.tasks.FindGoalPosition", "spriteworld.action_spaces.SelectMove", "spriteworld.environment.Environment", "numpy.array", "numpy.array", "spriteworld.environment.Environment.step", "environment_test.EnvironmentTest.assertTrue", "spriteworld.environment.Environment.step", "environment_test.EnvironmentTest.assertTrue", "spriteworld.environment.Environment.step", "environment_test.EnvironmentTest.assertTrue", "spriteworld.environment.Environment.step", "environment_test.EnvironmentTest.assertTrue", "environment.Environment.step.first", "environment.Environment.step.mid", "environment.Environment.step.last", "environment.Environment.step.first", "spriteworld.sprite.Sprite"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "", "def", "testTaskTermination", "(", "self", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "FindGoalPosition", "(", "goal_position", "=", "(", "0.5", ",", "0.5", ")", ")", "\n", "action_space", "=", "action_spaces", ".", "SelectMove", "(", ")", "\n", "env_renderers", "=", "{", "}", "\n", "init_sprites", "=", "lambda", ":", "[", "sprite", ".", "Sprite", "(", "x", "=", "0.25", ",", "y", "=", "0.25", ",", "c0", "=", "255", ")", "]", "\n", "\n", "env", "=", "environment", ".", "Environment", "(", "task", ",", "action_space", ",", "env_renderers", ",", "\n", "init_sprites", ")", "\n", "donothing_action", "=", "np", ".", "array", "(", "[", "0.25", ",", "0.25", ",", "0.5", ",", "0.5", "]", ")", "\n", "success_action", "=", "np", ".", "array", "(", "[", "0.25", ",", "0.25", ",", "0.75", ",", "0.75", "]", ")", "\n", "\n", "timestep", "=", "env", ".", "step", "(", "donothing_action", ")", "\n", "self", ".", "assertTrue", "(", "timestep", ".", "first", "(", ")", ")", "\n", "\n", "timestep", "=", "env", ".", "step", "(", "donothing_action", ")", "\n", "self", ".", "assertTrue", "(", "timestep", ".", "mid", "(", ")", ")", "\n", "\n", "timestep", "=", "env", ".", "step", "(", "success_action", ")", "\n", "self", ".", "assertTrue", "(", "timestep", ".", "last", "(", ")", ")", "\n", "\n", "timestep", "=", "env", ".", "step", "(", "success_action", ")", "\n", "self", ".", "assertTrue", "(", "timestep", ".", "first", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentRenderersTest.make_object_under_test": [[93, 100], ["spriteworld.environment.Environment", "spriteworld.tasks.NoReward", "spriteworld.action_spaces.SelectMove", "spriteworld.sprite.Sprite"], "methods", ["None"], ["  ", "def", "make_object_under_test", "(", "self", ",", "renderer", ")", ":", "\n", "    ", "self", ".", "environment", "=", "environment", ".", "Environment", "(", "\n", "task", "=", "tasks", ".", "NoReward", "(", ")", ",", "\n", "action_space", "=", "action_spaces", ".", "SelectMove", "(", ")", ",", "\n", "renderers", "=", "{", "'obs'", ":", "renderer", "}", ",", "\n", "init_sprites", "=", "lambda", ":", "[", "sprite", ".", "Sprite", "(", "c0", "=", "255", ")", "]", ",", "\n", "max_episode_length", "=", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentRenderersTest.testSpriteFactors": [[101, 106], ["environment_test.EnvironmentRenderersTest.make_object_under_test", "environment_test.EnvironmentRenderersTest.environment.observation_spec", "numpy.array", "environment_test.EnvironmentRenderersTest.environment.step", "spriteworld.renderers.SpriteFactors"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.tests.environment_test.EnvironmentRenderersTest.make_object_under_test", "home.repos.pwc.inspect_result.deepmind_spriteworld.renderers.abstract_renderer.AbstractRenderer.observation_spec", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.environment.Environment.step"], ["", "def", "testSpriteFactors", "(", "self", ")", ":", "\n", "    ", "self", ".", "make_object_under_test", "(", "renderer", "=", "renderers", ".", "SpriteFactors", "(", ")", ")", "\n", "self", ".", "environment", ".", "observation_spec", "(", ")", "\n", "action", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "self", ".", "environment", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_generators_test.SpriteGeneratorTest.testGenerateSpritesLengthType": [[50, 57], ["absl.testing.parameterized.parameters", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites.", "sprite_generators_test.SpriteGeneratorTest.assertIsInstance", "sprite_generators_test.SpriteGeneratorTest.assertLen", "sprite_generators_test.SpriteGeneratorTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites"], ["  ", "@", "parameterized", ".", "parameters", "(", "1", ",", "2", ",", "5", ")", "\n", "def", "testGenerateSpritesLengthType", "(", "self", ",", "num_sprites", ")", ":", "\n", "    ", "g", "=", "sprite_generators", ".", "generate_sprites", "(", "_distrib_0", ",", "num_sprites", "=", "num_sprites", ")", "\n", "sprite_list", "=", "g", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "sprite_list", ",", "list", ")", "\n", "self", ".", "assertLen", "(", "sprite_list", ",", "num_sprites", ")", "\n", "self", ".", "assertIsInstance", "(", "sprite_list", "[", "0", "]", ",", "sprite", ".", "Sprite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_generators_test.SpriteGeneratorTest.testGenerateSpritesCallableNum": [[58, 66], ["numpy.random.randint", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites.", "sprite_generators_test.SpriteGeneratorTest.assertGreaterEqual", "sprite_generators_test.SpriteGeneratorTest.assertLess", "len", "len"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites"], ["", "def", "testGenerateSpritesCallableNum", "(", "self", ")", ":", "\n", "    ", "minval", "=", "3", "\n", "maxval", "=", "6", "\n", "num_sprites", "=", "np", ".", "random", ".", "randint", "(", "minval", ",", "maxval", ")", "\n", "g", "=", "sprite_generators", ".", "generate_sprites", "(", "_distrib_0", ",", "num_sprites", "=", "num_sprites", ")", "\n", "sprite_list", "=", "g", "(", ")", "\n", "self", ".", "assertGreaterEqual", "(", "len", "(", "sprite_list", ")", ",", "minval", ")", "\n", "self", ".", "assertLess", "(", "len", "(", "sprite_list", ")", ",", "maxval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_generators_test.ChainGeneratorsTest.testOutput": [[70, 80], ["spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.chain_generators", "spriteworld.sprite_generators.chain_generators.", "sprite_generators_test.ChainGeneratorsTest.assertIsInstance", "sprite_generators_test.ChainGeneratorsTest.assertLen", "sprite_generators_test.ChainGeneratorsTest.assertTrue", "sprite_generators_test.ChainGeneratorsTest.assertTrue", "sprite_generators_test.ChainGeneratorsTest.assertTrue", "_distrib_0.contains", "_distrib_1.contains", "_distrib_1.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.chain_generators", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["  ", "def", "testOutput", "(", "self", ")", ":", "\n", "    ", "g_0", "=", "sprite_generators", ".", "generate_sprites", "(", "_distrib_0", ",", "num_sprites", "=", "1", ")", "\n", "g_1", "=", "sprite_generators", ".", "generate_sprites", "(", "_distrib_1", ",", "num_sprites", "=", "2", ")", "\n", "g_chain", "=", "sprite_generators", ".", "chain_generators", "(", "g_0", ",", "g_1", ")", "\n", "sprite_list", "=", "g_chain", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "sprite_list", ",", "list", ")", "\n", "self", ".", "assertLen", "(", "sprite_list", ",", "3", ")", "\n", "self", ".", "assertTrue", "(", "_distrib_0", ".", "contains", "(", "sprite_list", "[", "0", "]", ".", "factors", ")", ")", "\n", "self", ".", "assertTrue", "(", "_distrib_1", ".", "contains", "(", "sprite_list", "[", "1", "]", ".", "factors", ")", ")", "\n", "self", ".", "assertTrue", "(", "_distrib_1", ".", "contains", "(", "sprite_list", "[", "2", "]", ".", "factors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_generators_test.SampleGeneratorTest.testOutput": [[84, 94], ["spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.sample_generator", "spriteworld.sprite_generators.sample_generator.", "sprite_generators_test.SampleGeneratorTest.assertIsInstance", "sprite_generators_test.SampleGeneratorTest.assertLen", "sprite_generators_test.SampleGeneratorTest.assertNotEqual", "_distrib_0.contains", "_distrib_1.contains"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.sample_generator", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.factor_distributions.Selection.contains"], ["  ", "def", "testOutput", "(", "self", ")", ":", "\n", "    ", "g_0", "=", "sprite_generators", ".", "generate_sprites", "(", "_distrib_0", ",", "num_sprites", "=", "1", ")", "\n", "g_1", "=", "sprite_generators", ".", "generate_sprites", "(", "_distrib_1", ",", "num_sprites", "=", "1", ")", "\n", "g_chain", "=", "sprite_generators", ".", "sample_generator", "(", "(", "g_0", ",", "g_1", ")", ")", "\n", "sprite_list", "=", "g_chain", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "sprite_list", ",", "list", ")", "\n", "self", ".", "assertLen", "(", "sprite_list", ",", "1", ")", "\n", "self", ".", "assertNotEqual", "(", "\n", "_distrib_0", ".", "contains", "(", "sprite_list", "[", "0", "]", ".", "factors", ")", ",", "\n", "_distrib_1", ".", "contains", "(", "sprite_list", "[", "0", "]", ".", "factors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_spriteworld.tests.sprite_generators_test.ShuffleTest.testOutput": [[98, 104], ["spriteworld.sprite_generators.generate_sprites", "spriteworld.sprite_generators.shuffle", "spriteworld.sprite_generators.shuffle.", "sprite_generators_test.ShuffleTest.assertIsInstance", "sprite_generators_test.ShuffleTest.assertLen"], "methods", ["home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.generate_sprites", "home.repos.pwc.inspect_result.deepmind_spriteworld.spriteworld.sprite_generators.shuffle"], ["  ", "def", "testOutput", "(", "self", ")", ":", "\n", "    ", "g", "=", "sprite_generators", ".", "generate_sprites", "(", "_distrib_0", ",", "num_sprites", "=", "5", ")", "\n", "g_shuffle", "=", "sprite_generators", ".", "shuffle", "(", "g", ")", "\n", "sprite_list", "=", "g_shuffle", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "sprite_list", ",", "list", ")", "\n", "self", ".", "assertLen", "(", "sprite_list", ",", "5", ")", "\n", "\n"]]}