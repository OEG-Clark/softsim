{"home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.ReLUConvBN.__init__": [[27, 33], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.ReLUConvBN.forward": [[35, 37], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.DilConv.__init__": [[41, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.DilConv.forward": [[51, 53], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.SepConv.__init__": [[57, 71], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_mid", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_mid", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_mid", ",", "affine", "=", "affine", ")", ",", "\n", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_mid", ",", "C_mid", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_mid", ",", "bias", "=", "False", ")", ",", "\n", "# (CIN, 1, 5, 5)", "\n", "nn", ".", "Conv2d", "(", "C_mid", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "# (COUT, CIN, 1, 1)", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.SepConv.forward": [[73, 75], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.Identity.__init__": [[79, 81], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.Identity.forward": [[82, 84], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.Zero.__init__": [[88, 91], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.Zero.forward": [[92, 96], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.FactorizedReduce.__init__": [[100, 107], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.operations.FactorizedReduce.forward": [[108, 115], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.get_args": [[37, 89], ["sub_parser.add_argument", "sub_parser.add_argument", "sub_parser.add_argument", "sub_parser.add_argument", "sub_parser.add_argument", "sub_parser.set_defaults", "sub_parser.add_argument", "sub_parser.set_defaults", "sub_parser.add_argument", "sub_parser.set_defaults", "sub_parser.add_argument", "sub_parser.set_defaults"], "function", ["None"], ["def", "get_args", "(", "sub_parser", ":", "_SubParsersAction", ")", ":", "\n", "# print(\"\\n---------------------------------\")", "\n", "# print(\"AdaS Train Args\")", "\n", "# print(\"---------------------------------\\n\")", "\n", "# sub_parser.add_argument(", "\n", "#     '-vv', '--very-verbose', action='store_true',", "\n", "#     dest='very_verbose',", "\n", "#     help=\"Set flask debug mode\")", "\n", "# sub_parser.add_argument(", "\n", "#     '-v', '--verbose', action='store_true',", "\n", "#     dest='verbose',", "\n", "#     help=\"Set flask debug mode\")", "\n", "# sub_parser.set_defaults(verbose=False)", "\n", "# sub_parser.set_defaults(very_verbose=False)", "\n", "    ", "sub_parser", ".", "add_argument", "(", "\n", "'--config'", ",", "dest", "=", "'config'", ",", "\n", "default", "=", "'config.yaml'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Set configuration file path: Default = 'config.yaml'\"", ")", "\n", "sub_parser", ".", "add_argument", "(", "\n", "'--data'", ",", "dest", "=", "'data'", ",", "\n", "default", "=", "'.adas-data'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Set data directory path: Default = '.adas-data'\"", ")", "\n", "sub_parser", ".", "add_argument", "(", "\n", "'--output'", ",", "dest", "=", "'output'", ",", "\n", "default", "=", "'adas_search'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Set output directory path: Default = '.adas-output'\"", ")", "\n", "sub_parser", ".", "add_argument", "(", "\n", "'--checkpoint'", ",", "dest", "=", "'checkpoint'", ",", "\n", "default", "=", "'.adas-checkpoint'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Set checkpoint directory path: Default = '.adas-checkpoint\"", ")", "\n", "sub_parser", ".", "add_argument", "(", "\n", "'--root'", ",", "dest", "=", "'root'", ",", "\n", "default", "=", "'.'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Set root path of project that parents all others: Default = '.'\"", ")", "\n", "sub_parser", ".", "set_defaults", "(", "resume", "=", "False", ")", "\n", "sub_parser", ".", "add_argument", "(", "\n", "'--cpu'", ",", "action", "=", "'store_true'", ",", "\n", "dest", "=", "'cpu'", ",", "\n", "help", "=", "\"Flag: CPU bound training\"", ")", "\n", "sub_parser", ".", "set_defaults", "(", "cpu", "=", "False", ")", "\n", "sub_parser", ".", "add_argument", "(", "\n", "'--resume-search'", ",", "action", "=", "'store_true'", ",", "\n", "dest", "=", "'resume_search'", ",", "\n", "help", "=", "\"Flag: Resume searching from latest trial\"", "\n", ")", "\n", "sub_parser", ".", "set_defaults", "(", "resume_search", "=", "False", ")", "\n", "sub_parser", ".", "add_argument", "(", "\n", "'--train-num'", ",", "type", "=", "int", ",", "\n", "dest", "=", "'train_num'", ",", "\n", "help", "=", "\"Number of times to run full train\"", "\n", ")", "\n", "sub_parser", ".", "set_defaults", "(", "train_num", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.build_paths": [[91, 121], ["pathlib.Path().expanduser", "pathlib.Path().expanduser", "pathlib.Path().expanduser", "pathlib.Path().expanduser", "pathlib.Path().expanduser", "Path().expanduser.exists", "print", "print", "ValueError", "data_path.exists", "print", "data_path.mkdir", "output_path.exists", "print", "output_path.mkdir", "global_vars.CHECKPOINT_PATH.exists", "global_vars.CHECKPOINT_PATH.mkdir", "Path().expanduser.open", "utils.parse_config", "pathlib.Path", "pathlib.Path", "os.getcwd", "ValueError", "yaml.load", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.parse_config"], ["", "def", "build_paths", "(", "args", ":", "APNamespace", ")", ":", "\n", "\n", "    ", "root_path", "=", "Path", "(", "args", ".", "root", ")", ".", "expanduser", "(", ")", "\n", "config_path", "=", "Path", "(", "args", ".", "config", ")", ".", "expanduser", "(", ")", "\n", "data_path", "=", "root_path", "/", "Path", "(", "args", ".", "data", ")", ".", "expanduser", "(", ")", "\n", "output_path", "=", "root_path", "/", "Path", "(", "args", ".", "output", ")", ".", "expanduser", "(", ")", "\n", "# global checkpoint_path, config", "\n", "GLOBALS", ".", "CHECKPOINT_PATH", "=", "root_path", "/", "Path", "(", "args", ".", "checkpoint", ")", ".", "expanduser", "(", ")", "\n", "#checks", "\n", "if", "not", "config_path", ".", "exists", "(", ")", ":", "\n", "# logging.critical(f\"AdaS: Config path {config_path} does not exist\")", "\n", "        ", "print", "(", "os", ".", "getcwd", "(", ")", ")", "\n", "print", "(", "config_path", ")", "\n", "raise", "ValueError", "(", "f\"AdaS: Config path {config_path} does not exist\"", ")", "\n", "", "if", "not", "data_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f\"AdaS: Data dir {data_path} does not exist, building\"", ")", "\n", "data_path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "", "if", "not", "output_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f\"AdaS: Output dir {output_path} does not exist, building\"", ")", "\n", "output_path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "", "if", "not", "GLOBALS", ".", "CHECKPOINT_PATH", ".", "exists", "(", ")", ":", "\n", "        ", "if", "args", ".", "resume", ":", "\n", "            ", "raise", "ValueError", "(", "f\"AdaS: Cannot resume from checkpoint without \"", "+", "\n", "\"specifying checkpoint dir\"", ")", "\n", "", "GLOBALS", ".", "CHECKPOINT_PATH", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "", "with", "config_path", ".", "open", "(", ")", "as", "f", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "=", "parse_config", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.initialize": [[122, 259], ["pathlib.Path().expanduser", "pathlib.Path().expanduser", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "global_vars.CONFIG.items", "print", "numpy.less", "data.get_data", "metrics.Metrics", "new_network.to", "train_help.initialize.get_loss"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.data.get_data"], ["", "def", "initialize", "(", "args", ":", "APNamespace", ",", "new_network", ",", "beta", "=", "None", ",", "new_threshold", "=", "None", ",", "new_threshold_kernel", "=", "None", ",", "scheduler", "=", "None", ",", "init_lr", "=", "None", ",", "load_config", "=", "True", ",", "trial", "=", "-", "1", ")", ":", "\n", "    ", "def", "get_loss", "(", "loss", ":", "str", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "if", "loss", "==", "'cross_entropy'", "else", "None", "\n", "\n", "", "root_path", "=", "Path", "(", "args", ".", "root", ")", ".", "expanduser", "(", ")", "\n", "data_path", "=", "root_path", "/", "Path", "(", "args", ".", "data", ")", ".", "expanduser", "(", ")", "\n", "config_path", "=", "Path", "(", "args", ".", "config", ")", ".", "expanduser", "(", ")", "\n", "#parse from yaml", "\n", "\n", "if", "load_config", ":", "\n", "        ", "with", "config_path", ".", "open", "(", ")", "as", "f", ":", "\n", "            ", "GLOBALS", ".", "CONFIG", "=", "parse_config", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "if", "scheduler", "!=", "None", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler'", "]", "=", "'StepLR'", "\n", "\n", "", "if", "init_lr", "!=", "None", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'init_lr'", "]", "=", "init_lr", "\n", "\n", "", "print", "(", "'~~~GLOBALS.CONFIG:~~~'", ")", "\n", "print", "(", "GLOBALS", ".", "CONFIG", ")", "\n", "print", "(", "\"Adas: Argument Parser Options\"", ")", "\n", "print", "(", "\"-\"", "*", "45", ")", "\n", "print", "(", "f\"    {'config':<20}: {args.config:<40}\"", ")", "\n", "print", "(", "f\"    {'data':<20}: {str(Path(args.root) / args.data):<40}\"", ")", "\n", "print", "(", "f\"    {'output':<20}: {str(Path(args.root) / args.output):<40}\"", ")", "\n", "#print(f\"    {'checkpoint':<20}: \" + No checkpoints used", "\n", "#      f\"{str(Path(args.root) / args.checkpoint):<40}\")", "\n", "print", "(", "f\"    {'root':<20}: {args.root:<40}\"", ")", "\n", "#print(f\"    {'resume':<20}: {'True' if args.resume else 'False':<20}\") No checkpoints / resumes used", "\n", "\n", "print", "(", "\"\\nAdas: Train: Config\"", ")", "\n", "print", "(", "f\"    {'Key':<20} {'Value':<20}\"", ")", "\n", "print", "(", "\"-\"", "*", "45", ")", "\n", "\n", "for", "k", ",", "v", "in", "GLOBALS", ".", "CONFIG", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "            ", "print", "(", "f\"    {k:<20} {v}\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"    {k:<20} {v:<20}\"", ")", "\n", "\n", "", "", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "print", "(", "f\"AdaS: Pytorch device is set to {device}\"", ")", "\n", "# global best_acc", "\n", "GLOBALS", ".", "BEST_ACC", "=", "0", "# best test accuracy - needs to be set to 0 every trial / full train", "\n", "\n", "'''\n    Early stopping stuff\n    '''", "\n", "if", "np", ".", "less", "(", "float", "(", "GLOBALS", ".", "CONFIG", "[", "'early_stop_threshold'", "]", ")", ",", "0", ")", ":", "\n", "        ", "print", "(", "\n", "\"AdaS: Notice: early stop will not be used as it was set to \"", "+", "\n", "f\"{GLOBALS.CONFIG['early_stop_threshold']}, training till \"", "+", "\n", "\"completion\"", ")", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'optim_method'", "]", "!=", "'SGD'", "and", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler'", "]", "!=", "'AdaS'", ":", "\n", "        ", "print", "(", "\n", "\"AdaS: Notice: early stop will not be used as it is not SGD with\"", "+", "\n", "\" AdaS, training till completion\"", ")", "\n", "GLOBALS", ".", "CONFIG", "[", "'early_stop_threshold'", "]", "=", "-", "1", "\n", "\n", "", "train_loader", ",", "test_loader", "=", "get_data", "(", "\n", "root", "=", "data_path", ",", "\n", "dataset", "=", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", ",", "\n", "mini_batch_size", "=", "GLOBALS", ".", "CONFIG", "[", "'mini_batch_size'", "]", ",", "\n", "cutout", "=", "GLOBALS", ".", "CONFIG", "[", "'cutout'", "]", ",", "\n", "cutout_length", "=", "GLOBALS", ".", "CONFIG", "[", "'cutout_length'", "]", ")", "\n", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "=", "{", "}", "\n", "#Gets initial conv size list (string) from config yaml file and converts into int list", "\n", "init_conv", "=", "[", "int", "(", "conv_size", ")", "for", "conv_size", "in", "GLOBALS", ".", "CONFIG", "[", "'init_conv_setting'", "]", ".", "split", "(", "','", ")", "]", "\n", "\n", "'''if GLOBALS.CONFIG['blocks_per_superblock']==2:\n        GLOBALS.super1_idx = [64,64,64,64,64]\n        GLOBALS.super2_idx = [64,64,64,64]\n        GLOBALS.super3_idx = [64,64,64,64]\n        GLOBALS.super4_idx = [64,64,64,64]\n    else:\n        GLOBALS.super1_idx = [64,64,64,64,64,64,64]\n        GLOBALS.super2_idx = [64,64,64,64,64,64]\n        GLOBALS.super3_idx = [64,64,64,64,64,64]\n        GLOBALS.super4_idx = [64,64,64,64,64,64]'''", "\n", "\n", "GLOBALS", ".", "index_used", "=", "GLOBALS", ".", "super1_idx", "+", "GLOBALS", ".", "super2_idx", "+", "GLOBALS", ".", "super3_idx", "+", "GLOBALS", ".", "super4_idx", "\n", "\n", "\"\"\"\n    if GLOBALS.FIRST_INIT == True and new_network == 0:\n        print('FIRST_INIT==True, GETTING NET FROM CONFIG')\n        GLOBALS.NET = get_net(\n                    GLOBALS.CONFIG['network'], num_classes=10 if\n                    GLOBALS.CONFIG['dataset'] == 'CIFAR10' else 100 if\n                    GLOBALS.CONFIG['dataset'] == 'CIFAR100'\n                    else 1000, init_adapt_conv_size=init_conv)\n        GLOBALS.FIRST_INIT = False\n    else:\n        print('GLOBALS.FIRST_INIT IS FALSE LOADING IN NETWORK FROM UPDATE (Fresh weights)')\n        GLOBALS.NET = new_network\n    \"\"\"", "\n", "\n", "GLOBALS", ".", "METRICS", "=", "Metrics", "(", "list", "(", "new_network", ".", "parameters", "(", ")", ")", ",", "p", "=", "GLOBALS", ".", "CONFIG", "[", "'p'", "]", ")", "\n", "# print(\"Memory before sending model to cuda:\", torch.cuda.memory_allocated(0))", "\n", "model", "=", "new_network", ".", "to", "(", "device", ")", "\n", "# print(\"Memory after sending model to cuda:\", torch.cuda.memory_allocated(0))", "\n", "GLOBALS", ".", "CRITERION", "=", "get_loss", "(", "GLOBALS", ".", "CONFIG", "[", "'loss'", "]", ")", "\n", "GLOBALS", ".", "CRITERION_SMOOTH", "=", "CrossEntropyLabelSmooth", "(", "1000", ",", "GLOBALS", ".", "CONFIG", "[", "'label_smooth'", "]", ")", "\n", "\n", "if", "beta", "!=", "None", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'beta'", "]", "=", "beta", "\n", "\n", "", "if", "new_threshold", "!=", "None", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold'", "]", "=", "new_threshold", "\n", "\n", "", "if", "new_threshold_kernel", "!=", "None", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold_kernel'", "]", "=", "new_threshold_kernel", "\n", "\n", "", "if", "args", ".", "train_num", ">", "0", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'train_num'", "]", "=", "args", ".", "train_num", "\n", "\n", "", "optimizer", ",", "scheduler", "=", "get_optimizer_scheduler", "(", "\n", "net_parameters", "=", "model", ".", "parameters", "(", ")", ",", "\n", "listed_params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "\n", "# init_lr=learning_rate,", "\n", "# optim_method=GLOBALS.CONFIG['optim_method'],", "\n", "# lr_scheduler=GLOBALS.CONFIG['lr_scheduler'],", "\n", "train_loader_len", "=", "len", "(", "train_loader", ")", ",", "\n", "config", "=", "GLOBALS", ".", "CONFIG", ")", "\n", "\n", "GLOBALS", ".", "EARLY_STOP", "=", "EarlyStop", "(", "\n", "patience", "=", "int", "(", "GLOBALS", ".", "CONFIG", "[", "'early_stop_patience'", "]", ")", ",", "\n", "threshold", "=", "float", "(", "GLOBALS", ".", "CONFIG", "[", "'early_stop_threshold'", "]", ")", ")", "\n", "\n", "#GLOBALS.OPTIMIZER = optimizer", "\n", "if", "device", "==", "'cuda'", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "return", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.free_cuda_memory": [[260, 265], ["gc.collect", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.ipc_collect", "torch.cuda.ipc_collect", "torch.cuda.ipc_collect"], "function", ["None"], ["", "def", "free_cuda_memory", "(", ")", ":", "\n", "\n", "    ", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "torch", ".", "cuda", ".", "ipc_collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.get_latest_completed_trial": [[266, 289], ["os.listdir", "print", "file.startswith", "file.endswith", "int", "max", "os.path.join", "pandas.read_excel", "re.findall", "len", "min", "len"], "function", ["None"], ["", "def", "get_latest_completed_trial", "(", "trial_dir", ")", ":", "\n", "    ", "file_list", "=", "os", ".", "listdir", "(", "trial_dir", ")", "\n", "interrupted_trial", "=", "None", "\n", "latest_trial", "=", "0", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "if", "file", ".", "startswith", "(", "\"AdaS_adapt_trial=\"", ")", "and", "file", ".", "endswith", "(", "'.xlsx'", ")", ":", "\n", "#Check if this is the latest trial!", "\n", "            ", "current_trial", "=", "int", "(", "re", ".", "findall", "(", "r\"\\d+\"", ",", "file", ")", "[", "0", "]", ")", "\n", "latest_trial", "=", "max", "(", "latest_trial", ",", "current_trial", ")", "\n", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "file", ")", "\n", "df_trial", "=", "pd", ".", "read_excel", "(", "file_path", ",", "index_col", "=", "0", ")", "\n", "check", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", "==", "\"test_acc_epoch_{}\"", ".", "format", "(", "GLOBALS", ".", "CONFIG", "[", "'epochs_per_trial'", "]", "-", "1", ")", "]", "\n", "if", "len", "(", "check", ")", "==", "0", "and", "interrupted_trial", "==", "None", ":", "\n", "                ", "interrupted_trial", "=", "current_trial", "\n", "", "elif", "len", "(", "check", ")", "==", "0", "and", "interrupted_trial", "!=", "None", ":", "\n", "                ", "interrupted_trial", "=", "min", "(", "interrupted_trial", ",", "current_trial", ")", "\n", "\n", "", "", "", "if", "interrupted_trial", "==", "None", ":", "\n", "        ", "interrupted_trial", "=", "latest_trial", "+", "1", "\n", "\n", "", "print", "(", "\"Interrupted Trial found:\"", ",", "interrupted_trial", ")", "\n", "return", "interrupted_trial", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.run_epochs": [[370, 483], ["print", "print", "time.time", "train_help.epoch_iteration", "time.time", "time.time", "print", "pandas.DataFrame", "pd.DataFrame.to_excel", "global_vars.EARLY_STOP", "str", "scheduler.step", "print", "print", "sys.exit", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.epoch_iteration", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step"], ["def", "run_epochs", "(", "trial", ",", "model", ",", "epochs", ",", "train_loader", ",", "test_loader", ",", "\n", "device", ",", "optimizer", ",", "scheduler", ",", "output_path", ")", ":", "\n", "    ", "if", "platform", ".", "system", "==", "'Windows'", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "", "print", "(", "'------------------------------'", "+", "slash", ")", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler'", "]", "==", "'AdaS'", ":", "\n", "        ", "if", "GLOBALS", ".", "FULL_TRAIN", "==", "False", ":", "\n", "            ", "xlsx_name", "=", "slash", "+", "f\"AdaS_adapt_trial={trial}_\"", "+", "f\"net={GLOBALS.CONFIG['network']}_\"", "+", "f\"{GLOBALS.CONFIG['init_lr']}_dataset=\"", "+", "f\"{GLOBALS.CONFIG['dataset']}.xlsx\"", "\n", "", "else", ":", "\n", "            ", "if", "GLOBALS", ".", "FULL_TRAIN_MODE", "==", "'last_trial'", ":", "\n", "                ", "xlsx_name", "=", "slash", "+", "f\"AdaS_last_iter_fulltrain_trial={trial}_\"", "+", "f\"net={GLOBALS.CONFIG['network']}_\"", "+", "f\"dataset=\"", "+", "f\"{GLOBALS.CONFIG['dataset']}.xlsx\"", "\n", "", "elif", "GLOBALS", ".", "FULL_TRAIN_MODE", "==", "'fresh'", ":", "\n", "                ", "xlsx_name", "=", "slash", "+", "f\"AdaS_fresh_fulltrain_trial={trial}_\"", "+", "f\"net={GLOBALS.CONFIG['network']}_\"", "+", "f\"beta={GLOBALS.CONFIG['beta']}_\"", "+", "f\"dataset=\"", "+", "f\"{GLOBALS.CONFIG['dataset']}.xlsx\"", "\n", "", "else", ":", "\n", "                ", "print", "(", "'ERROR: INVALID FULL_TRAIN_MODE | Check that the correct full_train_mode strings have been initialized in main file | Should be either fresh, or last_trial'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "GLOBALS", ".", "FULL_TRAIN", "==", "False", ":", "\n", "            ", "xlsx_name", "=", "slash", "+", "f\"StepLR_adapt_trial={trial}_\"", "+", "f\"net={GLOBALS.CONFIG['network']}_\"", "+", "f\"{GLOBALS.CONFIG['init_lr']}_dataset=\"", "+", "f\"{GLOBALS.CONFIG['dataset']}.xlsx\"", "\n", "", "else", ":", "\n", "            ", "if", "GLOBALS", ".", "FULL_TRAIN_MODE", "==", "'last_trial'", ":", "\n", "                ", "xlsx_name", "=", "slash", "+", "f\"StepLR_last_iter_fulltrain_trial={trial}_\"", "+", "f\"net={GLOBALS.CONFIG['network']}_\"", "+", "f\"dataset=\"", "+", "f\"{GLOBALS.CONFIG['dataset']}.xlsx\"", "\n", "", "elif", "GLOBALS", ".", "FULL_TRAIN_MODE", "==", "'fresh'", ":", "\n", "                ", "xlsx_name", "=", "slash", "+", "f\"StepLR_fresh_fulltrain_trial={trial}_\"", "+", "f\"net={GLOBALS.CONFIG['network']}_\"", "+", "f\"dataset=\"", "+", "f\"{GLOBALS.CONFIG['dataset']}.xlsx\"", "\n", "", "else", ":", "\n", "                ", "print", "(", "'ERROR: INVALID FULL_TRAIN_MODE | Check that the correct full_train_mode strings have been initialized in main file | Should be either fresh, or last_trial'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "", "", "if", "platform", ".", "system", "==", "'Windows'", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "", "xlsx_path", "=", "str", "(", "output_path", ")", "+", "slash", "+", "xlsx_name", "\n", "\n", "if", "GLOBALS", ".", "FULL_TRAIN", "==", "False", ":", "\n", "        ", "filename", "=", "slash", "+", "f\"stats_net={GLOBALS.CONFIG['network']}_AdaS_trial={trial}_\"", "+", "f\"beta={GLOBALS.CONFIG['beta']}_initlr={GLOBALS.CONFIG['init_lr']}_\"", "+", "f\"dataset={GLOBALS.CONFIG['dataset']}.csv\"", "\n", "", "else", ":", "\n", "        ", "if", "GLOBALS", ".", "FULL_TRAIN_MODE", "==", "'last_trial'", ":", "\n", "            ", "filename", "=", "slash", "+", "f\"stats_last_iter_net={GLOBALS.CONFIG['network']}_StepLR_trial={trial}_\"", "+", "f\"beta={GLOBALS.CONFIG['beta']}_\"", "+", "f\"dataset={GLOBALS.CONFIG['dataset']}.csv\"", "\n", "", "elif", "GLOBALS", ".", "FULL_TRAIN_MODE", "==", "'fresh'", ":", "\n", "            ", "filename", "=", "slash", "+", "f\"stats_fresh_net={GLOBALS.CONFIG['network']}_StepLR_trial={trial}_\"", "+", "f\"beta={GLOBALS.CONFIG['beta']}_\"", "+", "f\"dataset={GLOBALS.CONFIG['dataset']}.csv\"", "\n", "", "", "GLOBALS", ".", "EXCEL_PATH", "=", "xlsx_path", "\n", "print", "(", "GLOBALS", ".", "EXCEL_PATH", ",", "'SET GLOBALS EXCEL PATH'", ")", "\n", "\n", "for", "epoch", "in", "epochs", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# print(f\"AdaS: Epoch {epoch}/{epochs[-1]} Started.\")", "\n", "\n", "# New - Drop Path", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'drop_path'", "]", ":", "\n", "            ", "model", ".", "drop_path_prob", "=", "GLOBALS", ".", "CONFIG", "[", "'drop_path_prob'", "]", "*", "epoch", "/", "GLOBALS", ".", "CONFIG", "[", "'max_epoch'", "]", "\n", "\n", "", "train_loss", ",", "train_accuracy", ",", "test_loss", ",", "test_accuracy", "=", "epoch_iteration", "(", "trial", ",", "model", ",", "train_loader", ",", "test_loader", ",", "epoch", ",", "device", ",", "optimizer", ",", "scheduler", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler'", "]", "==", "'StepLR'", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "f\"AdaS: Trial {trial}/{GLOBALS.total_trials - 1} | \"", "+", "\n", "f\"Epoch {epoch}/{epochs[-1]} Ended | \"", "+", "\n", "\"Total Time: {:.3f}s | \"", ".", "format", "(", "total_time", "-", "start_time", ")", "+", "\n", "\"Epoch Time: {:.3f}s | \"", ".", "format", "(", "end_time", "-", "start_time", ")", "+", "\n", "\"~Time Left: {:.3f}s | \"", ".", "format", "(", "\n", "(", "total_time", "-", "start_time", ")", "*", "(", "epochs", "[", "-", "1", "]", "-", "epoch", ")", ")", ",", "\n", "\"Train Loss: {:.4f}% | Train Acc. {:.4f}% | \"", ".", "format", "(", "\n", "train_loss", ",", "\n", "train_accuracy", ")", "+", "\n", "\"Test Loss: {:.4f}% | Test Acc. {:.4f}%\"", ".", "format", "(", "test_loss", ",", "\n", "test_accuracy", ")", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "GLOBALS", ".", "PERFORMANCE_STATISTICS", ")", "\n", "\n", "df", ".", "to_excel", "(", "xlsx_path", ")", "\n", "if", "GLOBALS", ".", "EARLY_STOP", "(", "train_loss", ")", ":", "\n", "            ", "print", "(", "\"AdaS: Early stop activated.\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.epoch_iteration": [[485, 624], ["model.train", "test.AverageMeter", "test.AverageMeter", "enumerate", "float", "float", "global_vars.METRICS.evaluate", "isinstance", "test.test_main", "optimizer.zero_grad", "isinstance", "GLOBALS.CRITERION.item", "test.accuracy", "test.AverageMeter.update", "test.AverageMeter.update", "test.AverageMeter.avg.cpu().item", "test.AverageMeter.avg.cpu().item", "scheduler.step", "inputs.to", "targets.to", "scheduler.step", "optimizer.step", "isinstance", "inputs.size", "inputs.size", "scheduler.step", "isinstance", "isinstance", "model", "global_vars.CRITERION", "model", "GLOBALS.CRITERION.backward", "model", "global_vars.CRITERION", "GLOBALS.CRITERION.backward", "optimizer.step", "isinstance", "test.AverageMeter.avg.cpu", "test.AverageMeter.avg.cpu", "global_vars.CRITERION_SMOOTH", "global_vars.CRITERION", "torch.utils.clip_grad_norm", "optimizer.step", "optimizer.step", "len", "global_vars.CRITERION_SMOOTH", "global_vars.CRITERION", "model.parameters"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.metrics.Metrics.evaluate", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.test_main", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.accuracy", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step"], ["", "", "", "def", "epoch_iteration", "(", "trial", ",", "model", ",", "train_loader", ",", "test_loader", ",", "epoch", ":", "int", ",", "\n", "device", ",", "optimizer", ",", "scheduler", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "# logging.info(f\"Adas: Train: Epoch: {epoch}\")", "\n", "# global net, performance_statistics, metrics, adas, config", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "\"\"\"train CNN architecture\"\"\"", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler'", "]", "==", "'CosineAnnealingWarmRestarts'", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", "+", "batch_idx", "/", "len", "(", "train_loader", ")", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "# if GLOBALS.CONFIG['optim_method'] == 'SLS':", "\n", "if", "isinstance", "(", "optimizer", ",", "SLS", ")", ":", "\n", "            ", "def", "closure", "(", ")", ":", "\n", "                ", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "GLOBALS", ".", "CRITERION", "(", "outputs", ",", "targets", ")", "\n", "return", "loss", ",", "outputs", "\n", "", "loss", ",", "outputs", "=", "optimizer", ".", "step", "(", "closure", "=", "closure", ")", "\n", "", "else", ":", "\n", "\n", "#TODO: Revert this if statement when creating separate files", "\n", "            ", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTS'", "or", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTSPlus'", ":", "\n", "                ", "outputs", ",", "outputs_aux", "=", "model", "(", "inputs", ")", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'ImageNet'", ":", "\n", "                    ", "loss", "=", "GLOBALS", ".", "CRITERION_SMOOTH", "(", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "GLOBALS", ".", "CRITERION", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "if", "GLOBALS", ".", "CONFIG", "[", "'auxiliary'", "]", ":", "\n", "                    ", "if", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'ImageNet'", ":", "\n", "                        ", "loss_aux", "=", "GLOBALS", ".", "CRITERION_SMOOTH", "(", "outputs_aux", ",", "targets", ")", "\n", "", "else", ":", "\n", "                        ", "loss_aux", "=", "GLOBALS", ".", "CRITERION", "(", "outputs_aux", ",", "targets", ")", "\n", "", "loss", "=", "loss", "+", "GLOBALS", ".", "CONFIG", "[", "'auxiliary_weight'", "]", "*", "loss_aux", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'grad_clip'", "]", ":", "\n", "                    ", "nn", ".", "utils", ".", "clip_grad_norm", "(", "model", ".", "parameters", "(", ")", ",", "GLOBALS", ".", "CONFIG", "[", "'grad_clip_threshold'", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "GLOBALS", ".", "CRITERION", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# if GLOBALS.ADAS is not None:", "\n", "#     optimizer.step(GLOBALS.METRICS.layers_index_todo,", "\n", "#                    GLOBALS.ADAS.lr_vector)", "\n", "", "if", "isinstance", "(", "scheduler", ",", "AdaS", ")", ":", "\n", "                ", "optimizer", ".", "step", "(", "GLOBALS", ".", "METRICS", ".", "layers_index_todo", ",", "\n", "scheduler", ".", "lr_vector", ")", "\n", "# elif GLOBALS.CONFIG['optim_method'] == 'SPS':", "\n", "", "elif", "isinstance", "(", "optimizer", ",", "SPS", ")", ":", "\n", "                ", "optimizer", ".", "step", "(", "loss", "=", "loss", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# _, predicted = outputs.max(1)", "\n", "# total += targets.size(0)", "\n", "# correct += predicted.eq(targets).sum().item()", "\n", "\n", "acc1_temp", ",", "acc5_temp", "=", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1_temp", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5_temp", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "GLOBALS", ".", "TRAIN_LOSS", "=", "train_loss", "\n", "GLOBALS", ".", "TRAIN_CORRECT", "=", "correct", "\n", "GLOBALS", ".", "TRAIN_TOTAL", "=", "total", "\n", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler'", "]", "==", "'OneCycleLR'", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "#Update optimizer", "\n", "#GLOBALS.OPTIMIZER = optimizer", "\n", "\n", "# progress_bar(batch_idx, len(train_loader),", "\n", "#              'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#              % (train_loss / (batch_idx + 1),", "\n", "#                  100. * correct / total, correct, total))", "\n", "\n", "", "", "acc", "=", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "100", "\n", "acc5", "=", "top5", ".", "avg", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "100", "\n", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'train_acc_epoch_{epoch}'", "]", "=", "float", "(", "acc", ")", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'train_acc5_epoch_{epoch}'", "]", "=", "float", "(", "acc5", ")", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'train_loss_epoch_{epoch}'", "]", "=", "train_loss", "/", "(", "batch_idx", "+", "1", ")", "\n", "\n", "io_metrics", "=", "GLOBALS", ".", "METRICS", ".", "evaluate", "(", "epoch", ")", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'in_S_epoch_{epoch}'", "]", "=", "io_metrics", ".", "input_channel_S", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'out_S_epoch_{epoch}'", "]", "=", "io_metrics", ".", "output_channel_S", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'mode12_S_epoch_{epoch}'", "]", "=", "io_metrics", ".", "mode_12_channel_S", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'fc_S_epoch_{epoch}'", "]", "=", "io_metrics", ".", "fc_S", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'in_rank_epoch_{epoch}'", "]", "=", "io_metrics", ".", "input_channel_rank", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'out_rank_epoch_{epoch}'", "]", "=", "io_metrics", ".", "output_channel_rank", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'mode12_rank_epoch_{epoch}'", "]", "=", "io_metrics", ".", "mode_12_channel_rank", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'fc_rank_epoch_{epoch}'", "]", "=", "io_metrics", ".", "fc_rank", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'in_condition_epoch_{epoch}'", "]", "=", "io_metrics", ".", "input_channel_condition", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'out_condition_epoch_{epoch}'", "]", "=", "io_metrics", ".", "output_channel_condition", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'mode12_condition_epoch_{epoch}'", "]", "=", "io_metrics", ".", "mode_12_channel_condition", "\n", "# if GLOBALS.ADAS is not None:", "\n", "\n", "if", "isinstance", "(", "scheduler", ",", "AdaS", ")", ":", "\n", "        ", "lrmetrics", "=", "scheduler", ".", "step", "(", "epoch", ",", "GLOBALS", ".", "METRICS", ")", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'rank_velocity_epoch_{epoch}'", "]", "=", "lrmetrics", ".", "rank_velocity", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'learning_rate_epoch_{epoch}'", "]", "=", "lrmetrics", ".", "r_conv", "\n", "", "else", ":", "\n", "# if GLOBALS.CONFIG['optim_method'] == 'SLS' or \\", "\n", "#         GLOBALS.CONFIG['optim_method'] == 'SPS':", "\n", "        ", "if", "isinstance", "(", "optimizer", ",", "SLS", ")", "or", "isinstance", "(", "optimizer", ",", "SPS", ")", ":", "\n", "            ", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'learning_rate_epoch_{epoch}'", "]", "=", "optimizer", ".", "state", "[", "'step_size'", "]", "\n", "", "else", ":", "\n", "            ", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'learning_rate_epoch_{epoch}'", "]", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "", "", "test_loss", ",", "test_accuracy", ",", "test_acc5", "=", "test_main", "(", "model", ",", "test_loader", ",", "epoch", ",", "device", ",", "optimizer", ")", "\n", "\n", "return", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "acc", ",", "\n", "test_loss", ",", "100", "*", "test_accuracy", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_ResNet.update_network": [[22, 36], ["models.own_network.DASNet34", "models.own_network.DASNet50"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet34", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet50"], ["def", "update_network", "(", "new_channel_sizes", ",", "new_kernel_sizes", ")", ":", "\n", "    ", "new_network", "=", "None", "\n", "\n", "class_num", "=", "0", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR10'", ":", "\n", "        ", "class_num", "=", "10", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR100'", ":", "\n", "        ", "class_num", "=", "100", "\n", "\n", "", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DASNet34'", ":", "\n", "        ", "new_network", "=", "DASNet34", "(", "num_classes_input", "=", "class_num", ",", "new_output_sizes", "=", "new_channel_sizes", ",", "new_kernel_sizes", "=", "new_kernel_sizes", ")", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DASNet50'", ":", "\n", "        ", "new_network", "=", "DASNet50", "(", "num_classes_input", "=", "class_num", ",", "new_output_sizes", "=", "new_channel_sizes", ",", "new_kernel_sizes", "=", "new_kernel_sizes", ")", "\n", "", "return", "new_network", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_ResNet.create_train_output_file": [[37, 92], ["pandas.ExcelWriter", "pandas.ExcelWriter", "pandas.read_excel", "len", "list", "range", "pandas.DataFrame", "pd.DataFrame.to_excel", "wb_per.save", "pandas.DataFrame", "pd.DataFrame.to_excel", "wb_aux.save", "platform.system", "ptflops.get_model_complexity_info", "int", "int", "range", "int", "int", "pd.read_excel.columns[].index", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "create_train_output_file", "(", "new_network", ",", "full_fresh_file", ",", "output_path_string_full_train", ",", "debug", "=", "False", ")", ":", "\n", "    ", "output_file", "=", "'default.xlsx'", "\n", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", ":", "\n", "        ", "performance_output_file", "=", "output_path_string_full_train", "+", "'\\\\'", "+", "'performance.xlsx'", "\n", "auxilary_output_file", "=", "output_path_string_full_train", "+", "'\\\\'", "+", "'auxilary.xlsx'", "\n", "", "else", ":", "\n", "        ", "performance_output_file", "=", "output_path_string_full_train", "+", "'/'", "+", "'performance.xlsx'", "\n", "auxilary_output_file", "=", "output_path_string_full_train", "+", "'/'", "+", "'auxilary.xlsx'", "\n", "", "writer_performance", "=", "pd", ".", "ExcelWriter", "(", "performance_output_file", ",", "engine", "=", "'openpyxl'", ")", "\n", "wb_per", "=", "writer_performance", ".", "book", "\n", "writer_auxilary", "=", "pd", ".", "ExcelWriter", "(", "auxilary_output_file", ",", "engine", "=", "'openpyxl'", ")", "\n", "wb_aux", "=", "writer_auxilary", ".", "book", "\n", "\n", "full_fresh_dfs", "=", "pd", ".", "read_excel", "(", "full_fresh_file", ")", "\n", "final_epoch_fresh", "=", "full_fresh_dfs", ".", "columns", "[", "-", "1", "]", "[", "(", "full_fresh_dfs", ".", "columns", "[", "-", "1", "]", ".", "index", "(", "'epoch_'", ")", "+", "6", ")", ":", "]", "\n", "performance_data", "=", "{", "}", "\n", "auxilary_data", "=", "{", "}", "\n", "if", "debug", "==", "True", ":", "\n", "        ", "macs", "=", "0", "\n", "params", "=", "0", "\n", "", "else", ":", "\n", "        ", "macs", ",", "params", "=", "get_model_complexity_info", "(", "new_network", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "False", ",", "print_per_layer_stat", "=", "False", ")", "\n", "", "performance_data", "[", "'Gmac'", "]", "=", "int", "(", "macs", ")", "/", "1000000000", "\n", "performance_data", "[", "'GFlop'", "]", "=", "2", "*", "int", "(", "macs", ")", "/", "1000000000", "\n", "performance_data", "[", "'parameter count (M)'", "]", "=", "int", "(", "params", ")", "/", "1000000", "\n", "\n", "num_layer", "=", "len", "(", "full_fresh_dfs", "[", "'train_acc_epoch_'", "+", "str", "(", "0", ")", "]", ")", "\n", "layer_list", "=", "list", "(", "range", "(", "0", ",", "num_layer", ")", ")", "\n", "auxilary_data", "[", "'layer_index'", "]", "=", "layer_list", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "final_epoch_fresh", ")", "+", "1", ")", ":", "\n", "        ", "performance_data", "[", "'train_acc_epoch_'", "+", "str", "(", "i", ")", "+", "\" (%)\"", "]", "=", "[", "full_fresh_dfs", "[", "'train_acc_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "*", "100", "]", "\n", "performance_data", "[", "'train_loss_epoch_'", "+", "str", "(", "i", ")", "]", "=", "[", "full_fresh_dfs", "[", "'train_loss_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "]", "\n", "performance_data", "[", "'test_acc_epoch_'", "+", "str", "(", "i", ")", "+", "\" (%)\"", "]", "=", "[", "full_fresh_dfs", "[", "'test_acc_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "*", "100", "]", "\n", "performance_data", "[", "'test_loss_epoch_'", "+", "str", "(", "i", ")", "]", "=", "[", "full_fresh_dfs", "[", "'test_loss_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "]", "\n", "\n", "auxilary_data", "[", "'in_KG_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'in_S_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'out_KG_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'out_S_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'in_rank_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'in_rank_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'out_rank_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'out_rank_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'in_condition_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'in_condition_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'out_condition_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'out_condition_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "\n", "", "df_per", "=", "pd", ".", "DataFrame", "(", "performance_data", ")", "\n", "df_per", ".", "to_excel", "(", "writer_performance", ",", "index", "=", "False", ")", "\n", "wb_per", ".", "save", "(", "performance_output_file", ")", "\n", "\n", "df_aux", "=", "pd", ".", "DataFrame", "(", "auxilary_data", ")", "\n", "df_aux", ".", "to_excel", "(", "writer_auxilary", ",", "index", "=", "False", ")", "\n", "wb_aux", ".", "save", "(", "auxilary_output_file", ")", "\n", "\n", "if", "platform", ".", "system", "==", "'Windows'", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_ResNet.run_fresh_full_train": [[96, 140], ["argparse.ArgumentParser", "train_help.get_args", "argparse.ArgumentParser.parse_args", "train_help.initialize", "model.state_dict", "train_help.run_epochs", "models.own_network.DASNet34", "param_tensor.find", "print", "models.own_network.DASNet50", "[].size", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.get_args", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.initialize", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.run_epochs", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet34", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet50", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict"], ["", "", "def", "run_fresh_full_train", "(", "output_sizes", ",", "kernel_sizes", ",", "epochs", ",", "output_path_fulltrain", ")", ":", "\n", "    ", "\"\"\"\n    Perform model evaluation for ResNet\n    \"\"\"", "\n", "class_num", "=", "0", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR10'", ":", "\n", "        ", "class_num", "=", "10", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR100'", ":", "\n", "        ", "class_num", "=", "100", "\n", "\n", "", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DASNet34'", ":", "\n", "        ", "new_network", "=", "DASNet34", "(", "num_classes_input", "=", "class_num", ",", "new_output_sizes", "=", "output_sizes", ",", "new_kernel_sizes", "=", "kernel_sizes", ")", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DASNet50'", ":", "\n", "        ", "new_network", "=", "DASNet50", "(", "num_classes_input", "=", "class_num", ",", "new_output_sizes", "=", "output_sizes", ",", "new_kernel_sizes", "=", "kernel_sizes", ")", "\n", "\n", "", "GLOBALS", ".", "FIRST_INIT", "=", "False", "\n", "\n", "#optimizer,scheduler=network_initialize(new_network,train_loader)", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "#free_cuda_memory()", "\n", "GLOBALS", ".", "CONFIG", "[", "'mini_batch_size'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'mini_batch_size_full'", "]", "\n", "GLOBALS", ".", "CONFIG", "[", "'weight_decay'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'weight_decay_full'", "]", "\n", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "model", "=", "initialize", "(", "args", ",", "new_network", ",", "beta", "=", "GLOBALS", ".", "CONFIG", "[", "'beta_full'", "]", ",", "\n", "scheduler", "=", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler_full'", "]", ",", "init_lr", "=", "GLOBALS", ".", "CONFIG", "[", "'init_lr_full'", "]", ",", "\n", "load_config", "=", "False", ")", "\n", "\n", "GLOBALS", ".", "FULL_TRAIN", "=", "True", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "=", "{", "}", "\n", "GLOBALS", ".", "FULL_TRAIN_MODE", "=", "'fresh'", "\n", "GLOBALS", ".", "EXCEL_PATH", "=", "''", "\n", "\n", "for", "param_tensor", "in", "model", ".", "state_dict", "(", ")", ":", "\n", "        ", "val", "=", "param_tensor", ".", "find", "(", "'bn'", ")", "\n", "if", "val", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "print", "(", "param_tensor", ",", "\"\\t\"", ",", "model", ".", "state_dict", "(", ")", "[", "param_tensor", "]", ".", "size", "(", ")", ",", "'FRESH'", ")", "\n", "#print(param_tensor, \"\\t\", GLOBALS.NET.state_dict()[param_tensor], 'FRESH')", "\n", "break", "\n", "\n", "", "run_epochs", "(", "0", ",", "model", ",", "epochs", ",", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "output_path_fulltrain", ")", "\n", "# print(\"Memory allocated full train:\", torch.cuda.memory_allocated(0))", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_ResNet.create_graphs": [[142, 193], ["adaptive_graph.create_adaptive_graphs", "matplotlib.clf", "adaptive_graph.stacked_bar_plot", "matplotlib.clf", "adaptive_graph.adapted_info_graph", "matplotlib.clf", "adaptive_graph.trial_info_graph", "matplotlib.clf", "adaptive_graph.trial_info_graph", "matplotlib.clf", "adaptive_graph.trial_info_graph", "matplotlib.clf", "adaptive_graph.trial_info_graph", "matplotlib.clf", "matplotlib.clf", "adaptive_graph.adapted_info_graph", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.create_adaptive_graphs", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.stacked_bar_plot.stacked_bar_plot", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.adapted_info_graph", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.trial_info_graph", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.trial_info_graph", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.trial_info_graph", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.trial_info_graph", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.adapted_info_graph"], ["", "def", "create_graphs", "(", "trial_info_file_name", ",", "adapted_kernel_file_name", ",", "adapted_conv_file_name", ",", "rank_final_file_name", ",", "\n", "rank_stable_file_name", ",", "out_folder", ")", ":", "\n", "    ", "if", "platform", ".", "system", "==", "\"Windows\"", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "", "create_adaptive_graphs", "(", "trial_info_file_name", ",", "GLOBALS", ".", "CONFIG", "[", "'epochs_per_trial'", "]", ",", "GLOBALS", ".", "total_trials", ",", "out_folder", ")", "\n", "kernel_path", "=", "out_folder", "+", "slash", "+", "'dynamic_kernel_Size_Plot.png'", "\n", "conv_path", "=", "out_folder", "+", "slash", "+", "'dynamic_layer_Size_Plot.png'", "\n", "rank_final_path", "=", "out_folder", "+", "slash", "+", "'dynamic_rank_final.png'", "\n", "rank_stable_path", "=", "out_folder", "+", "slash", "+", "'dynamic_rank_stable.png'", "\n", "output_condition_path", "=", "out_folder", "+", "slash", "+", "'dynamic_output_condition.png'", "\n", "input_condition_path", "=", "out_folder", "+", "slash", "+", "'dynamic_input_condition.png'", "\n", "network_visualize_path", "=", "out_folder", "+", "slash", "+", "'dynamic_network_Size_Plot.png'", "\n", "'''create_layer_plot(conv_data_file_name,GLOBALS.CONFIG['adapt_trials'],conv_path, 'Layer Size')\n    #create_layer_plot(rank_final_file_name,GLOBALS.CONFIG['adapt_trials'],rank_final_path, 'Final Rank')\n    #create_layer_plot(rank_stable_file_name,GLOBALS.CONFIG['adapt_trials'],rank_stable_path, 'Stable Rank')'''", "\n", "\n", "last_epoch", "=", "GLOBALS", ".", "CONFIG", "[", "'epochs_per_trial'", "]", "-", "1", "\n", "stable_epoch", "=", "GLOBALS", ".", "CONFIG", "[", "'stable_epoch'", "]", "\n", "\n", "shortcut_indexes", "=", "[", "]", "\n", "old_conv_size_list", "=", "[", "GLOBALS", ".", "super1_idx", ",", "GLOBALS", ".", "super2_idx", ",", "GLOBALS", ".", "super3_idx", ",", "GLOBALS", ".", "super4_idx", "]", "\n", "counter", "=", "-", "1", "\n", "for", "j", "in", "old_conv_size_list", ":", "\n", "        ", "if", "len", "(", "shortcut_indexes", ")", "==", "len", "(", "old_conv_size_list", ")", "-", "1", ":", "\n", "            ", "break", "\n", "", "counter", "+=", "len", "(", "j", ")", "+", "1", "\n", "shortcut_indexes", "+=", "[", "counter", "]", "\n", "", "plt", ".", "clf", "(", ")", "\n", "stacked_bar_plot", "(", "adapted_conv_file_name", ",", "network_visualize_path", ")", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'kernel_adapt'", "]", "!=", "0", ":", "\n", "        ", "plt", ".", "clf", "(", ")", "\n", "adapted_info_graph", "(", "adapted_kernel_file_name", ",", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials_kernel'", "]", ",", "kernel_path", ",", "'Kernel Size'", ",", "\n", "last_epoch", ")", "\n", "", "plt", ".", "clf", "(", ")", "\n", "adapted_info_graph", "(", "adapted_conv_file_name", ",", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials'", "]", ",", "conv_path", ",", "'Layer Size'", ",", "last_epoch", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "trial_info_graph", "(", "trial_info_file_name", ",", "GLOBALS", ".", "total_trials", ",", "len", "(", "GLOBALS", ".", "index_used", ")", "+", "3", ",", "rank_final_path", ",", "\n", "'Final Rank'", ",", "'out_rank_epoch_'", ",", "shortcut_indexes", ",", "last_epoch", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "trial_info_graph", "(", "trial_info_file_name", ",", "GLOBALS", ".", "total_trials", ",", "len", "(", "GLOBALS", ".", "index_used", ")", "+", "3", ",", "rank_stable_path", ",", "\n", "'Stable Rank'", ",", "'out_rank_epoch_'", ",", "shortcut_indexes", ",", "stable_epoch", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "trial_info_graph", "(", "trial_info_file_name", ",", "GLOBALS", ".", "total_trials", ",", "len", "(", "GLOBALS", ".", "index_used", ")", "+", "3", ",", "output_condition_path", ",", "\n", "'Output Condition'", ",", "'out_condition_epoch_'", ",", "shortcut_indexes", ",", "last_epoch", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "trial_info_graph", "(", "trial_info_file_name", ",", "GLOBALS", ".", "total_trials", ",", "len", "(", "GLOBALS", ".", "index_used", ")", "+", "3", ",", "input_condition_path", ",", "\n", "'Input Condition'", ",", "'in_condition_epoch_'", ",", "shortcut_indexes", ",", "last_epoch", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_ResNet.run_trials": [[195, 383], ["os.path.join", "print", "train_ResNet.run_trials.initialize_dataframes_and_lists"], "function", ["None"], ["", "def", "run_trials", "(", "epochs", ",", "output_path_train", ",", "new_threshold", "=", "None", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Perform Channel Search for ResNet\n    \"\"\"", "\n", "last_operation", ",", "factor_scale", ",", "delta_percentage", ",", "last_operation_kernel", ",", "factor_scale_kernel", ",", "delta_percentage_kernel", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "parameter_type", "=", "GLOBALS", ".", "CONFIG", "[", "'parameter_type'", "]", "\n", "trial_dir", "=", "os", ".", "path", ".", "join", "(", "GLOBALS", ".", "OUTPUT_PATH_STRING", ",", "'Trials'", ")", "\n", "print", "(", "trial_dir", ")", "\n", "\n", "kernel_begin_trial", "=", "0", "\n", "\n", "def", "check_last_operation", "(", "last_operation", ",", "last_operation_kernel", ",", "kernel_begin_trial", ")", ":", "\n", "        ", "all_channels_stopped", "=", "True", "\n", "for", "blah", "in", "last_operation", ":", "\n", "            ", "for", "inner", "in", "blah", ":", "\n", "                ", "if", "inner", "!=", "0", ":", "\n", "                    ", "all_channels_stopped", "=", "False", "\n", "", "", "", "all_kernels_stopped", "=", "True", "\n", "# if kernel_begin_trial!=0:", "\n", "for", "blah", "in", "last_operation_kernel", ":", "\n", "            ", "for", "inner", "in", "blah", ":", "\n", "                ", "if", "inner", "!=", "0", ":", "\n", "                    ", "all_kernels_stopped", "=", "False", "\n", "", "", "", "return", "all_channels_stopped", ",", "all_kernels_stopped", "\n", "\n", "", "def", "get_shortcut_indexes", "(", "conv_size_list", ")", ":", "\n", "        ", "shortcut_indexes", "=", "[", "]", "\n", "counter", "=", "-", "1", "\n", "for", "j", "in", "conv_size_list", ":", "\n", "            ", "if", "len", "(", "shortcut_indexes", ")", "==", "len", "(", "conv_size_list", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "counter", "+=", "len", "(", "j", ")", "+", "1", "\n", "shortcut_indexes", "+=", "[", "counter", "]", "\n", "", "return", "shortcut_indexes", "\n", "\n", "", "def", "initialize_dataframes_and_lists", "(", ")", ":", "\n", "        ", "conv_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'superblock1'", ",", "'superblock2'", ",", "'superblock3'", ",", "'superblock4'", "]", ")", "\n", "kernel_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'superblock1'", ",", "'superblock2'", ",", "'superblock3'", ",", "'superblock4'", "]", ")", "\n", "rank_final_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'superblock1'", ",", "'superblock2'", ",", "'superblock3'", ",", "'superblock4'", "]", ")", "\n", "rank_stable_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'superblock1'", ",", "'superblock2'", ",", "'superblock3'", ",", "'superblock4'", "]", ")", "\n", "conv_size_list", "=", "[", "GLOBALS", ".", "super1_idx", ",", "GLOBALS", ".", "super2_idx", ",", "GLOBALS", ".", "super3_idx", ",", "GLOBALS", ".", "super4_idx", "]", "\n", "kernel_size_list", "=", "[", "GLOBALS", ".", "super1_kernel_idx", ",", "GLOBALS", ".", "super2_kernel_idx", ",", "GLOBALS", ".", "super3_kernel_idx", ",", "\n", "GLOBALS", ".", "super4_kernel_idx", "]", "\n", "\n", "conv_data", ".", "loc", "[", "0", "]", "=", "conv_size_list", "\n", "kernel_data", ".", "loc", "[", "0", "]", "=", "kernel_size_list", "\n", "delta_info", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'delta_percentage'", ",", "'factor_scale'", ",", "'last_operation'", "]", ")", "\n", "delta_info_kernel", "=", "pd", ".", "DataFrame", "(", "\n", "columns", "=", "[", "'delta_percentage_kernel'", ",", "'factor_scale_kernel'", ",", "'last_operation_kernel'", "]", ")", "\n", "return", "conv_data", ",", "kernel_data", ",", "rank_final_data", ",", "rank_stable_data", ",", "delta_info", ",", "delta_info_kernel", ",", "conv_size_list", ",", "kernel_size_list", "\n", "\n", "", "def", "should_break", "(", "i", ",", "all_channels_stopped", ",", "all_kernels_stopped", ",", "kernel_begin_trial", ",", "parameter_type", ")", ":", "\n", "        ", "break_loop", "=", "False", "\n", "if", "(", "all_channels_stopped", "==", "True", "and", "kernel_begin_trial", "==", "0", ")", "or", "i", "==", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials'", "]", ":", "\n", "            ", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials'", "]", "=", "i", "\n", "parameter_type", "=", "'kernel'", "\n", "kernel_begin_trial", "=", "i", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials_kernel'", "]", "==", "0", "or", "GLOBALS", ".", "CONFIG", "[", "'kernel_adapt'", "]", "==", "0", ":", "\n", "                ", "print", "(", "'ACTIVATED IF STATEMENT 1 FOR SOME STUPID REASON'", ")", "\n", "break_loop", "=", "True", "\n", "\n", "", "", "if", "(", "all_kernels_stopped", "==", "True", "or", "i", "==", "kernel_begin_trial", "+", "GLOBALS", ".", "CONFIG", "[", "\n", "'adapt_trials_kernel'", "]", ")", "and", "kernel_begin_trial", "!=", "0", ":", "# and kernel_begin_trial!=0:", "\n", "            ", "print", "(", "'ACTIVATED IF STATEMENT 2 FOR SOME EVEN STUPIDER REASON'", ")", "\n", "break_loop", "=", "True", "\n", "", "return", "kernel_begin_trial", ",", "parameter_type", ",", "break_loop", "\n", "\n", "#####################################################################################################################################", "\n", "", "conv_data", ",", "kernel_data", ",", "rank_final_data", ",", "rank_stable_data", ",", "delta_info", ",", "delta_info_kernel", ",", "conv_size_list", ",", "kernel_size_list", "=", "initialize_dataframes_and_lists", "(", ")", "\n", "shortcut_indexes", "=", "get_shortcut_indexes", "(", "conv_size_list", ")", "\n", "# print(\"Memory before allocation:\", torch.cuda.memory_allocated(0))", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR10'", ":", "\n", "        ", "class_num", "=", "10", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR100'", ":", "\n", "        ", "class_num", "=", "100", "\n", "", "new_network", "=", "DASNet34", "(", "num_classes_input", "=", "class_num", ")", "\n", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "model", "=", "initialize", "(", "args", ",", "new_network", ")", "\n", "\n", "interrupted_trial", "=", "0", "# Determines at which trial we will resume!", "\n", "if", "args", ".", "resume_search", "is", "False", ":", "\n", "        ", "run_epochs", "(", "0", ",", "model", ",", "epochs", ",", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "output_path_train", ")", "\n", "# print(\"Memory after first trial:\", torch.cuda.memory_allocated(0))", "\n", "", "else", ":", "\n", "        ", "interrupted_trial", "=", "get_latest_completed_trial", "(", "trial_dir", ")", "\n", "\n", "", "del", "model", "\n", "del", "train_loader", "\n", "del", "test_loader", "\n", "del", "optimizer", "\n", "del", "scheduler", "\n", "\n", "free_cuda_memory", "(", ")", "\n", "\n", "print", "(", "'~~~First run_epochs done.~~~'", ")", "\n", "\n", "if", "(", "GLOBALS", ".", "CONFIG", "[", "'kernel_adapt'", "]", "==", "0", ")", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials_kernel'", "]", "=", "0", "\n", "\n", "", "GLOBALS", ".", "total_trials", "=", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials'", "]", "+", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials_kernel'", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "GLOBALS", ".", "total_trials", ")", ":", "\n", "        ", "\"\"\"\n        if (GLOBALS.CONFIG['kernel_adapt'] == 0):\n            GLOBALS.CONFIG['adapt_trials_kernel'] = 0\n        if kernel_begin_trial != 0:\n            if (i > (GLOBALS.total_trials // 2 - kernel_begin_trial)) and all_channels_stopped == True:\n                GLOBALS.min_kernel_size_1 = GLOBALS.CONFIG['min_kernel_size']\n                GLOBALS.CONFIG['min_kernel_size'] = GLOBALS.CONFIG['min_kernel_size_2']\n                \n        \"\"\"", "\n", "'------------------------------------------------------------------------------------------------------------------------------------------------'", "\n", "\"\"\"\n        last_operation, last_operation_kernel, factor_scale, factor_scale_kernel, new_channel_sizes, new_kernel_sizes, delta_percentage, delta_percentage_kernel, rank_averages_final, rank_averages_stable = delta_scaling(\n            conv_size_list, kernel_size_list, shortcut_indexes, last_operation, factor_scale, delta_percentage,\n            last_operation_kernel, factor_scale_kernel, delta_percentage_kernel, parameter_type=parameter_type)\n        \"\"\"", "\n", "\n", "new_channel_sizes", ",", "delta_percentage", ",", "last_operation", ",", "factor_scale", ",", "cell_list_rank", "=", "delta_scaling", "(", "conv_size_list", ",", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'factor_scale'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'min_scale_limit'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'mapping_condition_threshold'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'min_conv_size'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'max_conv_size'", "]", ",", "\n", "trial_dir", ",", "i", "-", "1", ",", "last_operation", ",", "factor_scale", ")", "\n", "'------------------------------------------------------------------------------------------------------------------------------------------------'", "\n", "\n", "print", "(", "last_operation_kernel", ",", "'LAST OPERATION KERNEL FOR TRIAL '", "+", "str", "(", "i", ")", ")", "\n", "\n", "\"\"\"\n        all_channels_stopped, all_kernels_stopped = check_last_operation(last_operation, last_operation_kernel,\n                                                                         kernel_begin_trial)\n        print(all_channels_stopped, all_kernels_stopped, 'BREAK VALUES!')\n        kernel_begin_trial, parameter_type, break_loop = should_break(i, all_channels_stopped, all_kernels_stopped,\n                                                                      kernel_begin_trial, parameter_type)\n        if break_loop == True:\n            GLOBALS.total_trials = i\n            break\n        \"\"\"", "\n", "\n", "last_operation_copy", ",", "factor_scale_copy", ",", "delta_percentage_copy", "=", "copy", ".", "deepcopy", "(", "\n", "last_operation", ")", ",", "copy", ".", "deepcopy", "(", "factor_scale", ")", ",", "copy", ".", "deepcopy", "(", "delta_percentage", ")", "\n", "# last_operation_kernel_copy, factor_scale_kernel_copy, delta_percentage_kernel_copy = copy.deepcopy(", "\n", "#     last_operation_kernel), copy.deepcopy(factor_scale_kernel), copy.deepcopy(delta_percentage_kernel)", "\n", "conv_size_list", "=", "copy", ".", "deepcopy", "(", "new_channel_sizes", ")", "\n", "# old_kernel_size_list = copy.deepcopy(kernel_size_list)", "\n", "# kernel_size_list = copy.deepcopy(new_kernel_sizes)", "\n", "\n", "print", "(", "'~~~Writing to Dataframe~~~'", ")", "\n", "if", "parameter_type", "==", "'channel'", ":", "\n", "            ", "conv_data", ".", "loc", "[", "i", "]", "=", "new_channel_sizes", "\n", "delta_info", ".", "loc", "[", "i", "]", "=", "[", "delta_percentage_copy", ",", "factor_scale_copy", ",", "last_operation_copy", "]", "\n", "\n", "# rank_final_data.loc[i] = rank_averages_final_copy", "\n", "# rank_stable_data.loc[i] = rank_averages_stable_copy", "\n", "\n", "", "print", "(", "'~~~Starting Conv parameter_typements~~~'", ")", "\n", "\n", "new_network", "=", "update_network", "(", "new_channel_sizes", ",", "None", ")", "\n", "\n", "print", "(", "'~~~Initializing the new model~~~'", ")", "\n", "\n", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "model", "=", "initialize", "(", "args", ",", "new_network", ",", "\n", "new_threshold_kernel", "=", "new_threshold", ")", "\n", "#print(\"Memory allocated before trial:\", torch.cuda.memory_allocated(0))", "\n", "epochs", "=", "range", "(", "0", ",", "GLOBALS", ".", "CONFIG", "[", "'epochs_per_trial'", "]", ")", "\n", "\n", "if", "i", "<", "interrupted_trial", ":", "\n", "            ", "print", "(", "'~~~Using previous training data~~~'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'~~~Training with new model~~~'", ")", "\n", "run_epochs", "(", "i", ",", "model", ",", "epochs", ",", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "output_path_train", ")", "\n", "# print(\"Memory allocated after trial:\", torch.cuda.memory_allocated(0))", "\n", "\n", "", "del", "model", "\n", "del", "train_loader", "\n", "del", "test_loader", "\n", "del", "optimizer", "\n", "del", "scheduler", "\n", "\n", "free_cuda_memory", "(", ")", "\n", "\n", "#Use default", "\n", "new_kernel_sizes", "=", "[", "GLOBALS", ".", "super1_kernel_idx", ",", "GLOBALS", ".", "super2_kernel_idx", ",", "GLOBALS", ".", "super3_kernel_idx", ",", "GLOBALS", ".", "super4_kernel_idx", "]", "\n", "\n", "", "return", "kernel_data", ",", "conv_data", ",", "rank_final_data", ",", "rank_stable_data", ",", "new_channel_sizes", ",", "new_kernel_sizes", ",", "delta_info", ",", "delta_info_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_ResNet.create_trial_data_file": [[385, 408], ["delta_info_kernel.to_excel", "delta_info.to_excel", "conv_data.to_excel", "print", "print"], "function", ["None"], ["", "def", "create_trial_data_file", "(", "kernel_data", ",", "conv_data", ",", "delta_info_kernel", ",", "delta_info", ",", "rank_final_data", ",", "rank_stable_data", ",", "\n", "output_path_string_trials", ",", "output_path_string_graph_files", ",", "output_path_string_modelweights", ")", ":", "\n", "# parameter_data.to_excel(output_path_string_trials+'\\\\'+'adapted_parameters.xlsx')", "\n", "    ", "if", "platform", ".", "system", "==", "'Windows'", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "", "try", ":", "\n", "        ", "delta_info_kernel", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'adapted_delta_info_kernel.xlsx'", ")", "\n", "delta_info", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'adapted_delta_info.xlsx'", ")", "\n", "# kernel_data.to_excel(output_path_string_trials + slash + 'adapted_kernels.xlsx')", "\n", "conv_data", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'adapted_architectures.xlsx'", ")", "\n", "# rank_final_data.to_excel(output_path_string_trials + slash + 'adapted_rank_final.xlsx')", "\n", "# rank_stable_data.to_excel(output_path_string_trials + slash + 'adapted_rank_stable.xlsx')", "\n", "\"\"\"\n        create_graphs(GLOBALS.EXCEL_PATH, output_path_string_trials + slash + 'adapted_kernels.xlsx',\n                      output_path_string_trials + slash + 'adapted_architectures.xlsx',\n                      output_path_string_trials + slash + 'adapted_rank_final.xlsx',\n                      output_path_string_trials + slash + 'adapted_rank_stable.xlsx', output_path_string_graph_files)\n        \"\"\"", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "        ", "print", "(", "'COULD NOT CREATE GRAPHS'", ")", "\n", "print", "(", "ex", ")", "\n", "# torch.save(GLOBALS.NET.state_dict(), output_path_string_modelweights+'\\\\'+'model_state_dict')", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.AdaS.AdaS.__init__": [[35, 70], ["metrics.Metrics.Metrics", "numpy.repeat", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "parameters", ":", "List", "[", "Any", "]", ",", "\n", "beta", ":", "float", "=", "0.8", ",", "zeta", ":", "float", "=", "1.", ",", "\n", "p", ":", "int", "=", "1", ",", "init_lr", ":", "float", "=", "3e-2", ",", "\n", "min_lr", ":", "float", "=", "1e-20", ")", "->", "None", ":", "\n", "        ", "'''\n        parameters: list of torch.nn.Module.parameters()\n        beta: float: AdaS gain factor [0, 1)\n        eta: knowledge gain hyper-paramters [0, 1)\n        init_lr: initial learning rate > 0\n        min_lr: minimum possible learning rate > 0\n        '''", "\n", "if", "beta", "<", "0", "or", "beta", ">=", "1", ":", "\n", "            ", "raise", "ValueError", "\n", "# if zeta < 0 or zeta > 1:", "\n", "#     raise ValueError", "\n", "", "if", "init_lr", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "\n", "", "if", "min_lr", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "self", ".", "metrics", "=", "metrics", "=", "Metrics", "(", "parameters", "=", "parameters", ",", "p", "=", "p", ")", "\n", "self", ".", "init_lr", "=", "init_lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "zeta", "=", "zeta", "\n", "\n", "init_lr_vector", "=", "np", ".", "repeat", "(", "a", "=", "init_lr", ",", "\n", "repeats", "=", "len", "(", "metrics", ".", "layers_info", ")", ")", "\n", "self", ".", "lr_vector", "=", "init_lr_vector", "\n", "self", ".", "velocity_moment_conv", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_conv", ")", "\n", "self", ".", "acceleration_moment_conv", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_conv", ")", "\n", "self", ".", "R_conv", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_conv", ")", "\n", "self", ".", "velocity_moment_fc", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_fc", ")", "[", "0", "]", "\n", "self", ".", "acceleration_moment_fc", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_fc", ")", "[", "0", "]", "\n", "self", ".", "R_fc", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_fc", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.AdaS.AdaS.step": [[71, 144], ["numpy.maximum", "numpy.maximum", "numpy.concatenate", "range", "numpy.concatenate", "range", "components.LRMetrics", "numpy.tile", "numpy.tile", "numpy.tile", "range", "numpy.linspace", "numpy.ones", "min", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.polyfit", "len", "len", "velocity_conv_rank.tolist", "AdaS.AdaS.R_conv.tolist", "len", "numpy.ones", "numpy.polyfit", "len", "len", "numpy.tile", "numpy.tile", "numpy.tile"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", ":", "int", ",", "metrics", ":", "Metrics", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "epoch", "==", "0", ":", "\n", "            ", "velocity_conv_rank", "=", "self", ".", "init_lr", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metrics", ".", "conv_indices", ")", ")", "\n", "velocity_fc_rank", "=", "self", ".", "init_lr", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metrics", ".", "fc_indices", ")", ")", "[", "0", "]", "\n", "# NOTE unused (below)", "\n", "# acceleration_conv_rank = np.zeros(len(conv_indices))", "\n", "# acceleration_fc_rank = np.zeros(len(fc_indices))[0]", "\n", "# preserving_acceleration_conv = alpha", "\n", "", "else", ":", "\n", "            ", "n_replica", "=", "AdaS", ".", "n_buffer", "-", "min", "(", "epoch", "+", "1", ",", "AdaS", ".", "n_buffer", ")", "\n", "input_channel_replica", "=", "np", ".", "tile", "(", "\n", "A", "=", "metrics", ".", "historical_metrics", "[", "0", "]", ".", "input_channel_S", ",", "\n", "reps", "=", "(", "n_replica", ",", "1", ")", ")", "\n", "output_channel_replica", "=", "np", ".", "tile", "(", "\n", "A", "=", "metrics", ".", "historical_metrics", "[", "0", "]", ".", "output_channel_S", ",", "\n", "reps", "=", "(", "n_replica", ",", "1", ")", ")", "\n", "fc_channel_replica", "=", "np", ".", "tile", "(", "\n", "A", "=", "metrics", ".", "historical_metrics", "[", "0", "]", ".", "fc_S", ",", "reps", "=", "(", "n_replica", ",", "1", ")", ")", "\n", "for", "iteration", "in", "range", "(", "AdaS", ".", "n_buffer", "-", "n_replica", ")", ":", "\n", "                ", "epoch_identifier", "=", "(", "epoch", "-", "AdaS", ".", "n_buffer", "+", "\n", "n_replica", "+", "iteration", "+", "1", ")", "\n", "metric", "=", "metrics", ".", "historical_metrics", "[", "epoch_identifier", "]", "\n", "input_channel_replica", "=", "np", ".", "concatenate", "(", "(", "\n", "input_channel_replica", ",", "\n", "np", ".", "tile", "(", "\n", "A", "=", "metric", ".", "input_channel_S", ",", "\n", "reps", "=", "(", "1", ",", "1", ")", ")", ")", ")", "\n", "output_channel_replica", "=", "np", ".", "concatenate", "(", "\n", "(", "output_channel_replica", ",", "np", ".", "tile", "(", "\n", "A", "=", "metric", ".", "output_channel_S", ",", "\n", "reps", "=", "(", "1", ",", "1", ")", ")", ")", ")", "\n", "fc_channel_replica", "=", "np", ".", "concatenate", "(", "\n", "(", "fc_channel_replica", ",", "np", ".", "tile", "(", "\n", "A", "=", "metric", ".", "fc_S", ",", "\n", "reps", "=", "(", "1", ",", "1", ")", ")", ")", ")", "\n", "", "x_regression", "=", "np", ".", "linspace", "(", "start", "=", "0", ",", "stop", "=", "AdaS", ".", "n_buffer", "-", "1", ",", "\n", "num", "=", "AdaS", ".", "n_buffer", ")", "\n", "\n", "channel_replica", "=", "(", "input_channel_replica", "+", "\n", "output_channel_replica", ")", "/", "2", "\n", "# channel_replica = output_channel_replica", "\n", "\n", "\"\"\"Calculate Rank Velocity\"\"\"", "\n", "velocity_conv_rank", "=", "np", ".", "polyfit", "(", "\n", "x", "=", "x_regression", ",", "y", "=", "channel_replica", ",", "deg", "=", "1", ")", "[", "0", "]", "\n", "velocity_fc_rank", "=", "np", ".", "polyfit", "(", "\n", "x", "=", "x_regression", ",", "y", "=", "fc_channel_replica", ",", "deg", "=", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "self", ".", "R_conv", "=", "self", ".", "beta", "*", "self", ".", "R_conv", "+", "self", ".", "zeta", "*", "velocity_conv_rank", "\n", "self", ".", "R_fc", "=", "self", ".", "beta", "*", "self", ".", "R_fc", "+", "self", ".", "zeta", "*", "velocity_fc_rank", "\n", "\n", "self", ".", "R_conv", "=", "np", ".", "maximum", "(", "self", ".", "R_conv", ",", "self", ".", "min_lr", ")", "\n", "self", ".", "R_fc", "=", "np", ".", "maximum", "(", "self", ".", "R_fc", ",", "self", ".", "min_lr", ")", "\n", "\n", "call_indices_conv", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "metrics", ".", "conv_indices", ",", "[", "self", ".", "metrics", ".", "fc_indices", "[", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "for", "iteration_conv", "in", "range", "(", "len", "(", "call_indices_conv", ")", "-", "1", ")", ":", "\n", "            ", "index_start", "=", "call_indices_conv", "[", "iteration_conv", "]", "\n", "index_end", "=", "call_indices_conv", "[", "iteration_conv", "+", "1", "]", "\n", "self", ".", "lr_vector", "[", "index_start", ":", "index_end", "]", "=", "self", ".", "R_conv", "[", "iteration_conv", "]", "\n", "\n", "", "call_indices_fc", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "metrics", ".", "fc_indices", ",", "\n", "[", "len", "(", "self", ".", "metrics", ".", "layers_info", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "for", "iteration_fc", "in", "range", "(", "len", "(", "call_indices_fc", ")", "-", "1", ")", ":", "\n", "            ", "index_start", "=", "call_indices_fc", "[", "iteration_fc", "]", "\n", "index_end", "=", "call_indices_fc", "[", "iteration_fc", "+", "1", "]", "\n", "self", ".", "lr_vector", "[", "index_start", ":", "index_end", "]", "=", "self", ".", "R_fc", "\n", "", "return", "LRMetrics", "(", "rank_velocity", "=", "velocity_conv_rank", ".", "tolist", "(", ")", ",", "\n", "r_conv", "=", "self", ".", "R_conv", ".", "tolist", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.early_stop.EarlyStop.__init__": [[31, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "patience", ":", "int", "=", "10", ",", "threshold", ":", "float", "=", "1e-2", ")", "->", "None", ":", "\n", "# self.queue = collections.deque([0] * patience, maxlen=patience)", "\n", "        ", "self", ".", "patience", "=", "patience", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "best_loss", "=", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.early_stop.EarlyStop.__call__": [[38, 58], ["numpy.less", "numpy.less"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "train_loss", ":", "float", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        @monitor: value to monitor for early stopping\n                  (e.g. train_loss, test_loss, ...)\n        @mode: specify whether you want to maximize or minimize\n               relative to @monitor\n        \"\"\"", "\n", "if", "np", ".", "less", "(", "self", ".", "threshold", ",", "0", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "train_loss", "is", "None", ":", "\n", "            ", "return", "False", "\n", "# self.queue.append(train_loss)", "\n", "", "if", "np", ".", "less", "(", "train_loss", "-", "self", ".", "best_loss", ",", "-", "self", ".", "threshold", ")", ":", "\n", "            ", "self", ".", "best_loss", "=", "train_loss", "\n", "self", ".", "wait", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "wait", "+=", "1", "\n", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.metrics.Metrics.__init__": [[34, 66], ["numpy.ones", "list", "list", "range", "numpy.ones", "len", "len", "len", "numpy.concatenate", "range", "range", "range", "len", "numpy.concatenate", "numpy.concatenate", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ":", "List", "[", "Any", "]", ",", "p", ":", "int", ")", "->", "None", ":", "\n", "        ", "'''\n        parameters: list of torch.nn.Module.parameters()\n        '''", "\n", "self", ".", "net_blocks", "=", "net_blocks", "=", "parameters", "\n", "self", ".", "layers_index_todo", "=", "np", ".", "ones", "(", "shape", "=", "len", "(", "net_blocks", ")", ",", "dtype", "=", "'bool'", ")", "\n", "self", ".", "layers_info", "=", "list", "(", ")", "\n", "self", ".", "number_of_conv", "=", "0", "\n", "self", ".", "number_of_fc", "=", "0", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "historical_metrics", "=", "list", "(", ")", "\n", "for", "iteration_block", "in", "range", "(", "len", "(", "net_blocks", ")", ")", ":", "\n", "            ", "block_shape", "=", "net_blocks", "[", "iteration_block", "]", ".", "shape", "\n", "if", "len", "(", "block_shape", ")", "==", "4", ":", "\n", "                ", "self", ".", "layers_info", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "layers_info", ",", "[", "LayerType", ".", "CONV", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "number_of_conv", "+=", "1", "\n", "", "elif", "len", "(", "block_shape", ")", "==", "2", ":", "\n", "                ", "self", ".", "layers_info", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "layers_info", ",", "[", "LayerType", ".", "FC", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "number_of_fc", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "layers_info", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "layers_info", ",", "[", "LayerType", ".", "NON_CONV", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "", "self", ".", "final_decision_index", "=", "np", ".", "ones", "(", "\n", "shape", "=", "self", ".", "number_of_conv", ",", "dtype", "=", "'bool'", ")", "\n", "self", ".", "conv_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers_info", ")", ")", "if", "\n", "self", ".", "layers_info", "[", "i", "]", "==", "LayerType", ".", "CONV", "]", "\n", "self", ".", "fc_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers_info", ")", ")", "if", "\n", "self", ".", "layers_info", "[", "i", "]", "==", "LayerType", ".", "FC", "]", "\n", "self", ".", "non_conv_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers_info", ")", ")", "if", "\n", "self", ".", "layers_info", "[", "i", "]", "==", "LayerType", ".", "NON_CONV", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.metrics.Metrics.evaluate": [[67, 278], ["list", "list", "list", "list", "list", "list", "list", "list", "list", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "components.IOMetrics", "components.IOMetrics.Metrics.historical_metrics.append", "len", "len", "len", "len", "layer_tensor.permute().cpu", "torch.reshape", "layer_tensor.permute().cpu", "torch.reshape", "layer_tensor.cpu", "torch.reshape", "VBMF.EVBMF", "list.append", "torch.diag().data.cpu().numpy", "numpy.sqrt", "list.append", "VBMF.EVBMF", "list.append", "torch.diag().data.cpu().numpy", "list.append", "VBMF.EVBMF", "list.append", "torch.diag().data.cpu().numpy", "list.append", "range", "range", "range", "layer_tensor.permute", "layer_tensor.permute", "torch.matmul", "len", "list.append", "numpy.sum", "list.append", "torch.zeros", "torch.zeros", "torch.zeros", "len", "list.append", "numpy.sum", "list.append", "torch.zeros", "torch.zeros", "torch.zeros", "len", "list.append", "numpy.sum", "list.append", "torch.zeros", "len", "len", "len", "torch.t", "torch.diag().data.cpu", "max", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.diag().data.cpu", "max", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.diag().data.cpu", "max", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.diag", "torch.diag", "torch.diag"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.EVBMF", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.EVBMF", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.EVBMF"], ["", "def", "evaluate", "(", "self", ",", "epoch", ":", "int", ")", "->", "IOMetrics", ":", "\n", "        ", "'''\n        Computes the knowledge gain (S) and mapping condition (condition)\n        '''", "\n", "input_channel_rank", "=", "list", "(", ")", "\n", "output_channel_rank", "=", "list", "(", ")", "\n", "mode_12_channel_rank", "=", "list", "(", ")", "\n", "input_channel_S", "=", "list", "(", ")", "\n", "output_channel_S", "=", "list", "(", ")", "\n", "mode_12_channel_S", "=", "list", "(", ")", "\n", "input_channel_condition", "=", "list", "(", ")", "\n", "output_channel_condition", "=", "list", "(", ")", "\n", "mode_12_channel_condition", "=", "list", "(", ")", "\n", "\n", "factorized_index_12", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "conv_indices", ")", ",", "dtype", "=", "bool", ")", "\n", "factorized_index_3", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "conv_indices", ")", ",", "dtype", "=", "bool", ")", "\n", "factorized_index_4", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "conv_indices", ")", ",", "dtype", "=", "bool", ")", "\n", "for", "block_index", "in", "range", "(", "len", "(", "self", ".", "conv_indices", ")", ")", ":", "\n", "            ", "layer_tensor", "=", "self", ".", "net_blocks", "[", "self", ".", "conv_indices", "[", "block_index", "]", "]", ".", "data", "\n", "\n", "tensor_size", "=", "layer_tensor", ".", "shape", "\n", "mode_12_unfold", "=", "layer_tensor", ".", "permute", "(", "3", ",", "2", ",", "1", ",", "0", ")", ".", "cpu", "(", ")", "\n", "mode_12_unfold", "=", "torch", ".", "reshape", "(", "\n", "mode_12_unfold", ",", "[", "tensor_size", "[", "3", "]", "*", "tensor_size", "[", "2", "]", ",", "\n", "tensor_size", "[", "1", "]", "*", "tensor_size", "[", "0", "]", "]", ")", "\n", "\n", "mode_3_unfold", "=", "layer_tensor", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "cpu", "(", ")", "\n", "mode_3_unfold", "=", "torch", ".", "reshape", "(", "\n", "mode_3_unfold", ",", "[", "tensor_size", "[", "1", "]", ",", "tensor_size", "[", "0", "]", "*", "\n", "tensor_size", "[", "2", "]", "*", "tensor_size", "[", "3", "]", "]", ")", "\n", "mode_4_unfold", "=", "layer_tensor", ".", "cpu", "(", ")", "\n", "mode_4_unfold", "=", "torch", ".", "reshape", "(", "\n", "mode_4_unfold", ",", "[", "tensor_size", "[", "0", "]", ",", "tensor_size", "[", "1", "]", "*", "\n", "tensor_size", "[", "2", "]", "*", "tensor_size", "[", "3", "]", "]", ")", "\n", "\n", "try", ":", "\n", "#Size of input to EVBMF is (tensor_size[2]*tensor_size[3]) x (tensor_size[2]*tensor_size[3])", "\n", "                ", "U_approx", ",", "S_approx", ",", "V_approx", "=", "EVBMF", "(", "torch", ".", "matmul", "(", "mode_12_unfold", ",", "torch", ".", "t", "(", "mode_12_unfold", ")", ")", ")", "\n", "mode_12_channel_rank", ".", "append", "(", "\n", "S_approx", ".", "shape", "[", "0", "]", "/", "(", "tensor_size", "[", "2", "]", "*", "tensor_size", "[", "3", "]", ")", ")", "\n", "low_rank_eigen", "=", "torch", ".", "diag", "(", "S_approx", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "low_rank_eigen", "=", "np", ".", "sqrt", "(", "low_rank_eigen", ")", "\n", "low_rank_eigen", "=", "low_rank_eigen", "**", "self", ".", "p", "\n", "if", "len", "(", "low_rank_eigen", ")", "!=", "0", ":", "\n", "                    ", "mode_12_channel_condition", ".", "append", "(", "\n", "low_rank_eigen", "[", "0", "]", "/", "low_rank_eigen", "[", "-", "1", "]", ")", "\n", "sum_low_rank_eigen", "=", "low_rank_eigen", "/", "max", "(", "low_rank_eigen", ")", "\n", "sum_low_rank_eigen", "=", "np", ".", "sum", "(", "sum_low_rank_eigen", ")", "\n", "", "else", ":", "\n", "                    ", "mode_12_channel_condition", ".", "append", "(", "0", ")", "\n", "sum_low_rank_eigen", "=", "0", "\n", "", "factorized_index_12", "[", "block_index", "]", "=", "True", "\n", "mode_12_channel_S", ".", "append", "(", "sum_low_rank_eigen", "/", "(", "tensor_size", "[", "2", "]", "*", "tensor_size", "[", "3", "]", ")", ")", "\n", "# NOTE never used (below)", "\n", "# mode_12_unfold_approx = torch.matmul(", "\n", "#     U_approx, torch.matmul(S_approx, torch.t(V_approx)))", "\n", "", "except", "Exception", ":", "\n", "                ", "U_approx", "=", "torch", ".", "zeros", "(", "mode_12_unfold", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "S_approx", "=", "torch", ".", "zeros", "(", "0", ",", "0", ")", "\n", "V_approx", "=", "torch", ".", "zeros", "(", "mode_12_unfold", ".", "shape", "[", "1", "]", ",", "0", ")", "\n", "if", "epoch", ">", "0", ":", "\n", "# mode_12_channel_rank.append(", "\n", "#     variables_performance['mode_12_rank_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "# mode_12_channel_S.append(", "\n", "#     variables_performance['mode_12_S_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "# mode_12_channel_condition.append(", "\n", "#     variables_performance['mode_12_condition_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "                    ", "mode_12_channel_rank", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "mode_12_channel_rank", "[", "block_index", "]", ")", "\n", "mode_12_channel_S", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "mode_12_channel_S", "[", "block_index", "]", ")", "\n", "mode_12_channel_condition", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "mode_12_channel_condition", "[", "block_index", "]", ")", "\n", "", "else", ":", "\n", "                    ", "mode_12_channel_rank", ".", "append", "(", "0", ")", "\n", "mode_12_channel_S", ".", "append", "(", "0", ")", "\n", "mode_12_channel_condition", ".", "append", "(", "0", ")", "\n", "\n", "", "", "try", ":", "\n", "                ", "U_approx", ",", "S_approx", ",", "V_approx", "=", "EVBMF", "(", "mode_3_unfold", ")", "\n", "input_channel_rank", ".", "append", "(", "\n", "S_approx", ".", "shape", "[", "0", "]", "/", "tensor_size", "[", "1", "]", ")", "\n", "low_rank_eigen", "=", "torch", ".", "diag", "(", "S_approx", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "low_rank_eigen", "=", "low_rank_eigen", "**", "self", ".", "p", "\n", "if", "len", "(", "low_rank_eigen", ")", "!=", "0", ":", "\n", "                    ", "input_channel_condition", ".", "append", "(", "\n", "low_rank_eigen", "[", "0", "]", "/", "low_rank_eigen", "[", "-", "1", "]", ")", "\n", "sum_low_rank_eigen", "=", "low_rank_eigen", "/", "max", "(", "low_rank_eigen", ")", "\n", "sum_low_rank_eigen", "=", "np", ".", "sum", "(", "sum_low_rank_eigen", ")", "\n", "", "else", ":", "\n", "                    ", "input_channel_condition", ".", "append", "(", "0", ")", "\n", "sum_low_rank_eigen", "=", "0", "\n", "", "factorized_index_3", "[", "block_index", "]", "=", "True", "\n", "input_channel_S", ".", "append", "(", "sum_low_rank_eigen", "/", "tensor_size", "[", "1", "]", ")", "\n", "# NOTE never used (below)", "\n", "# mode_3_unfold_approx = torch.matmul(", "\n", "#     U_approx, torch.matmul(S_approx, torch.t(V_approx)))", "\n", "", "except", "Exception", ":", "\n", "                ", "U_approx", "=", "torch", ".", "zeros", "(", "mode_3_unfold", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "S_approx", "=", "torch", ".", "zeros", "(", "0", ",", "0", ")", "\n", "V_approx", "=", "torch", ".", "zeros", "(", "mode_3_unfold", ".", "shape", "[", "1", "]", ",", "0", ")", "\n", "if", "epoch", ">", "0", ":", "\n", "# input_channel_rank.append(", "\n", "#     variables_performance['in_rank_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "# input_channel_S.append(", "\n", "#     variables_performance['in_S_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "# input_channel_condition.append(", "\n", "#     variables_performance['in_condition_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "                    ", "input_channel_rank", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "input_channel_rank", "[", "block_index", "]", ")", "\n", "input_channel_S", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "input_channel_S", "[", "block_index", "]", ")", "\n", "input_channel_condition", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "input_channel_condition", "[", "block_index", "]", ")", "\n", "", "else", ":", "\n", "                    ", "input_channel_rank", ".", "append", "(", "0", ")", "\n", "input_channel_S", ".", "append", "(", "0", ")", "\n", "input_channel_condition", ".", "append", "(", "0", ")", "\n", "\n", "", "", "try", ":", "\n", "                ", "U_approx", ",", "S_approx", ",", "V_approx", "=", "EVBMF", "(", "mode_4_unfold", ")", "\n", "output_channel_rank", ".", "append", "(", "\n", "S_approx", ".", "shape", "[", "0", "]", "/", "tensor_size", "[", "0", "]", ")", "\n", "low_rank_eigen", "=", "torch", ".", "diag", "(", "S_approx", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "low_rank_eigen", "=", "low_rank_eigen", "**", "self", ".", "p", "\n", "if", "len", "(", "low_rank_eigen", ")", "!=", "0", ":", "\n", "                    ", "output_channel_condition", ".", "append", "(", "\n", "low_rank_eigen", "[", "0", "]", "/", "low_rank_eigen", "[", "-", "1", "]", ")", "\n", "sum_low_rank_eigen", "=", "low_rank_eigen", "/", "max", "(", "low_rank_eigen", ")", "\n", "sum_low_rank_eigen", "=", "np", ".", "sum", "(", "sum_low_rank_eigen", ")", "\n", "", "else", ":", "\n", "                    ", "output_channel_condition", ".", "append", "(", "0", ")", "\n", "sum_low_rank_eigen", "=", "0", "\n", "", "output_channel_S", ".", "append", "(", "\n", "sum_low_rank_eigen", "/", "tensor_size", "[", "0", "]", ")", "\n", "# NOTE never used (below)", "\n", "factorized_index_4", "[", "block_index", "]", "=", "True", "\n", "# mode_4_unfold_approx = torch.matmul(", "\n", "#     U_approx, torch.matmul(S_approx, torch.t(V_approx)))", "\n", "", "except", "Exception", ":", "\n", "# NOTE never used (below)", "\n", "# U_approx = torch.zeros(mode_3_unfold.shape[0], 0)", "\n", "                ", "S_approx", "=", "torch", ".", "zeros", "(", "0", ",", "0", ")", "\n", "# NOTE never used (below)", "\n", "# V_approx = torch.zeros(mode_3_unfold.shape[1], 0)", "\n", "if", "epoch", ">", "0", ":", "\n", "# output_channel_rank.append(", "\n", "#     variables_performance['out_rank_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "# output_channel_S.append(", "\n", "#     variables_performance['out_S_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "# output_channel_condition.append(", "\n", "#     variables_performance['out_condition_epoch_' +", "\n", "#                           str(epoch - 1)][block_index])", "\n", "                    ", "output_channel_rank", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "output_channel_rank", "[", "block_index", "]", ")", "\n", "output_channel_S", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "output_channel_S", "[", "block_index", "]", ")", "\n", "output_channel_condition", ".", "append", "(", "\n", "self", ".", "historical_metrics", "[", "-", "1", "]", ".", "output_channel_condition", "[", "block_index", "]", ")", "\n", "", "else", ":", "\n", "                    ", "output_channel_rank", ".", "append", "(", "0", ")", "\n", "output_channel_S", ".", "append", "(", "0", ")", "\n", "output_channel_condition", ".", "append", "(", "0", ")", "\n", "", "", "", "false_indices_12", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "factorized_index_12", ")", ")", "\n", "if", "factorized_index_12", "[", "i", "]", "is", "False", "]", "\n", "false_indices_3", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "factorized_index_3", ")", ")", "\n", "if", "factorized_index_3", "[", "i", "]", "is", "False", "]", "\n", "false_indices_4", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "factorized_index_4", ")", ")", "\n", "if", "factorized_index_4", "[", "i", "]", "is", "False", "]", "\n", "for", "false_index", "in", "false_indices_12", ":", "\n", "            ", "mode_12_channel_S", "[", "false_index", "]", "=", "mode_12_channel_S", "[", "false_index", "-", "1", "]", "\n", "mode_12_channel_rank", "[", "false_index", "]", "=", "mode_12_channel_rank", "[", "false_index", "-", "1", "]", "\n", "mode_12_channel_condition", "[", "false_index", "]", "=", "mode_12_channel_condition", "[", "false_index", "-", "1", "]", "\n", "", "for", "false_index", "in", "false_indices_3", ":", "\n", "            ", "input_channel_S", "[", "false_index", "]", "=", "input_channel_S", "[", "false_index", "-", "1", "]", "\n", "input_channel_rank", "[", "false_index", "]", "=", "input_channel_rank", "[", "false_index", "-", "1", "]", "\n", "input_channel_condition", "[", "false_index", "]", "=", "input_channel_condition", "[", "false_index", "-", "1", "]", "\n", "", "for", "false_index", "in", "false_indices_4", ":", "\n", "            ", "output_channel_S", "[", "false_index", "]", "=", "output_channel_S", "[", "false_index", "-", "1", "]", "\n", "output_channel_rank", "[", "false_index", "]", "=", "output_channel_rank", "[", "false_index", "-", "1", "]", "\n", "output_channel_condition", "[", "false_index", "]", "=", "output_channel_condition", "[", "false_index", "-", "1", "]", "\n", "", "metrics", "=", "IOMetrics", "(", "input_channel_rank", "=", "input_channel_rank", ",", "\n", "input_channel_S", "=", "input_channel_S", ",", "\n", "input_channel_condition", "=", "input_channel_condition", ",", "\n", "output_channel_rank", "=", "output_channel_rank", ",", "\n", "output_channel_S", "=", "output_channel_S", ",", "\n", "output_channel_condition", "=", "output_channel_condition", ",", "\n", "mode_12_channel_rank", "=", "mode_12_channel_rank", ",", "\n", "mode_12_channel_S", "=", "mode_12_channel_S", ",", "\n", "mode_12_channel_condition", "=", "mode_12_channel_condition", ",", "\n", "fc_S", "=", "output_channel_S", "[", "-", "1", "]", ",", "\n", "fc_rank", "=", "output_channel_rank", "[", "-", "1", "]", ")", "\n", "self", ".", "historical_metrics", ".", "append", "(", "metrics", ")", "\n", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.find_cell_first_conv_idx": [[74, 99], ["enumerate", "copy.deepcopy", "cells_first_layer_idx.append", "len", "len"], "function", ["None"], ["def", "find_cell_first_conv_idx", "(", "cell_list", ")", ":", "\n", "    ", "normal_cell_layers", "=", "24", "\n", "reduction_cell_layers", "=", "2", "\n", "red_normal_cell_layers", "=", "25", "\n", "cur_layer_count", "=", "0", "\n", "reduction_cell_idx", "=", "[", "(", "len", "(", "cell_list", ")", "-", "1", ")", "//", "3", "+", "1", ",", "(", "len", "(", "cell_list", ")", "-", "1", ")", "*", "2", "//", "3", "+", "1", "]", "# 3,5 for 7 cells+1 stem", "\n", "#print(\"reduction cell idx: \",reduction_cell_idx)", "\n", "prev_cell_is_reduction", "=", "False", "\n", "cells_first_layer_idx", "=", "[", "]", "\n", "for", "cur_cell_idx", ",", "cur_cell", "in", "enumerate", "(", "cell_list", ")", ":", "\n", "        ", "if", "cur_cell_idx", "==", "0", ":", "\n", "            ", "cur_layer_count", "=", "0", "\n", "", "elif", "cur_cell_idx", "==", "1", ":", "\n", "            ", "cur_layer_count", "=", "1", "\n", "", "elif", "cur_cell_idx", "-", "1", "in", "reduction_cell_idx", ":", "\n", "            ", "prev_cell_is_reduction", "=", "True", "\n", "cur_layer_count", "+=", "reduction_cell_layers", "\n", "", "elif", "prev_cell_is_reduction", ":", "\n", "            ", "cur_layer_count", "+=", "red_normal_cell_layers", "\n", "prev_cell_is_reduction", "=", "False", "\n", "", "else", ":", "\n", "            ", "cur_layer_count", "+=", "normal_cell_layers", "\n", "\n", "", "cells_first_layer_idx", ".", "append", "(", "cur_layer_count", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "cells_first_layer_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.get_cells_type": [[102, 117], ["enumerate", "copy.deepcopy", "cells_type.append", "len", "len"], "function", ["None"], ["", "def", "get_cells_type", "(", "cell_list", ")", ":", "\n", "    ", "cells_type", "=", "[", "]", "\n", "reduction_cell_idx", "=", "[", "(", "len", "(", "cell_list", ")", "-", "1", ")", "//", "3", "+", "1", ",", "(", "len", "(", "cell_list", ")", "-", "1", ")", "*", "2", "//", "3", "+", "1", "]", "\n", "cur_cell_type", "=", "'stem'", "\n", "for", "cur_cell_idx", ",", "cur_cell", "in", "enumerate", "(", "cell_list", ")", ":", "\n", "        ", "if", "cur_cell_idx", "==", "0", ":", "\n", "            ", "cur_cell_type", "=", "'stem'", "\n", "", "elif", "cur_cell_idx", "in", "reduction_cell_idx", ":", "\n", "            ", "cur_cell_type", "=", "'red_cell'", "\n", "", "elif", "cur_cell_idx", "-", "1", "in", "reduction_cell_idx", ":", "\n", "            ", "cur_cell_type", "=", "'norm_red_cell'", "\n", "", "else", ":", "\n", "            ", "cur_cell_type", "=", "'norm_cell'", "\n", "", "cells_type", ".", "append", "(", "cur_cell_type", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "cells_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.get_layer_conv_ranks": [[120, 145], ["os.listdir", "list", "list", "numpy.array().transpose", "numpy.array().transpose", "str", "copy.deepcopy", "copy.deepcopy", "file.startswith", "file.endswith", "os.path.join", "pandas.read_excel", "numpy.array", "numpy.array", "pd.read_excel.loc[].tolist", "np.array().transpose.append", "pd.read_excel.loc[].tolist", "np.array().transpose.append", "col.startswith", "copy.deepcopy", "col.startswith", "copy.deepcopy", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_layer_conv_ranks", "(", "trial_dir", ",", "cur_trial", ")", ":", "\n", "    ", "cur_trial", "=", "'AdaS_adapt_trial=%s'", "%", "str", "(", "cur_trial", ")", "\n", "file_list", "=", "os", ".", "listdir", "(", "trial_dir", ")", "\n", "in_rank", "=", "list", "(", ")", "\n", "out_rank", "=", "list", "(", ")", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "if", "file", ".", "startswith", "(", "cur_trial", ")", "and", "file", ".", "endswith", "(", "'.xlsx'", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "file", ")", "\n", "df_trial", "=", "pd", ".", "read_excel", "(", "file_path", ",", "index_col", "=", "0", ")", "\n", "# find all in_rank at each layer for all epochs", "\n", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'in_rank'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "in_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "# find all out_rank at each layer for all epochs", "\n", "", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'out_rank'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "out_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "", "break", "\n", "", "", "in_rank", "=", "np", ".", "array", "(", "in_rank", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "# [epoch,layer] -> [layer,epoch]", "\n", "out_rank", "=", "np", ".", "array", "(", "out_rank", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "copy", ".", "deepcopy", "(", "in_rank", ")", ",", "copy", ".", "deepcopy", "(", "out_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.get_layer_mapping": [[147, 172], ["os.listdir", "list", "list", "str", "copy.deepcopy", "copy.deepcopy", "file.startswith", "file.endswith", "os.path.join", "pandas.read_excel", "pd.read_excel.loc[].tolist", "list.append", "pd.read_excel.loc[].tolist", "list.append", "col.startswith", "copy.deepcopy", "col.startswith", "copy.deepcopy", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_layer_mapping", "(", "trial_dir", ",", "cur_trial", ")", ":", "\n", "    ", "cur_trial", "=", "'AdaS_adapt_trial=%s'", "%", "str", "(", "cur_trial", ")", "\n", "file_list", "=", "os", ".", "listdir", "(", "trial_dir", ")", "\n", "in_cond", "=", "list", "(", ")", "\n", "out_cond", "=", "list", "(", ")", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "if", "file", ".", "startswith", "(", "cur_trial", ")", "and", "file", ".", "endswith", "(", "'.xlsx'", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "file", ")", "\n", "df_trial", "=", "pd", ".", "read_excel", "(", "file_path", ",", "index_col", "=", "0", ")", "\n", "# find all in_rank at each layer for all epochs", "\n", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'in_condition'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "in_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "# find all out_rank at each layer for all epochs", "\n", "", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'out_condition'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "out_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "", "break", "\n", "# in_cond = np.array(in_cond).transpose((1,0)) # [epoch,layer] -> [layer,epoch]", "\n", "# out_cond = np.array(out_cond).transpose((1,0))", "\n", "", "", "return", "copy", ".", "deepcopy", "(", "in_cond", "[", "-", "1", "]", ")", ",", "copy", ".", "deepcopy", "(", "out_cond", "[", "-", "1", "]", ")", "# only return last epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.get_cell_list_ranks_by_dependency": [[177, 243], ["list", "enumerate", "copy.deepcopy", "list", "enumerate", "list.append", "numpy.zeros", "enumerate", "list.append", "copy.deepcopy", "int", "copy.deepcopy", "numpy.array", "int", "encoding.split", "encoding.split", "encoding.split", "encoding.split"], "function", ["None"], ["", "def", "get_cell_list_ranks_by_dependency", "(", "in_rank", ",", "out_rank", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_rank-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "    ", "chan_size_dependency_mapping", "=", "{", "\n", "'stem'", ":", "[", "[", "'out_rank-0'", "]", "]", ",", "\n", "'norm_cell'", ":", "[", "[", "'out_rank-0'", ",", "'in_rank-3'", ",", "'in_rank-11'", ",", "'out_rank-21'", ",", "'out_rank-23'", "]", ",", "\n", "[", "'out_rank-1'", ",", "'in_rank-7'", ",", "'in_rank-15'", ",", "'in_rank-19'", "]", ",", "\n", "[", "'out_rank-5'", ",", "'out_rank-9'", ",", "'in_rank-23'", "]", ",", "\n", "[", "'out_rank-17'", ",", "'out_rank-13'", "]", "\n", "]", ",", "\n", "'red_cell'", ":", "[", "[", "'out_rank-0'", ",", "'out_rank-1'", "]", "]", ",", "\n", "'norm_red_cell'", ":", "[", "[", "'out_rank-0'", ",", "'out_rank-1'", ",", "'in_rank-4'", ",", "'in_rank-12'", ",", "'out_rank-22'", ",", "'out_rank-24'", "]", ",", "\n", "[", "'out_rank-2'", ",", "'in_rank-8'", ",", "'in_rank-16'", ",", "'in_rank-20'", "]", ",", "\n", "[", "'out_rank-6'", ",", "'out_rank-10'", ",", "'in_rank-24'", "]", ",", "\n", "[", "'out_rank-18'", ",", "'out_rank-14'", "]", "\n", "]", "\n", "}", "\n", "total_epoch", "=", "in_rank", ".", "shape", "[", "1", "]", "\n", "channel_size_avg_ranks", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_cell_avg_ranks", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "dependency_mapping", "=", "chan_size_dependency_mapping", "[", "cur_cell_type", "]", "\n", "# for each cell, check the dependency for each conv size", "\n", "for", "j", ",", "chan_dependencies", "in", "enumerate", "(", "dependency_mapping", ")", ":", "\n", "            ", "avg_rank", "=", "np", ".", "zeros", "(", "total_epoch", ")", "# initialize avg rank for current channel size", "\n", "# for each dependency mapping of a conv size, calculate the avg rank", "\n", "# if it's reduction cell, need to first calculate the avg of the first 2 dependency due to concatenation", "\n", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                ", "red_dependencies", "=", "chan_dependencies", "[", ":", "2", "]", "# will only avg the first 2", "\n", "for", "encoding", "in", "red_dependencies", ":", "\n", "                    ", "rank_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                        ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                        ", "rank_list", "=", "out_rank", "\n", "", "avg_rank", "+=", "rank_list", "[", "conv_layer_idx", "]", "\n", "# print(encoding, conv_layer_idx)", "\n", "# print('rank list: ', rank_list[conv_layer_idx])", "\n", "# print(avg_rank)", "\n", "", "avg_rank", "/=", "2", "\n", "# print(avg_rank)", "\n", "chan_dependencies", "=", "chan_dependencies", "[", "2", ":", "]", "# will continue after the first 2", "\n", "# find avg rank of the dependent layers", "\n", "", "for", "i", ",", "encoding", "in", "enumerate", "(", "chan_dependencies", ")", ":", "\n", "                ", "rank_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                    ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                    ", "rank_list", "=", "out_rank", "\n", "", "avg_rank", "+=", "rank_list", "[", "conv_layer_idx", "]", "\n", "# if cur_cell_type == 'norm_red_cell' and j == 0:", "\n", "#     print(i,encoding,conv_layer_idx)", "\n", "#     print('rank list: ',rank_list[conv_layer_idx])", "\n", "#     print(avg_rank)", "\n", "", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                ", "i", "+=", "1", "# consider the first pair as 1 value", "\n", "", "avg_rank", "/=", "(", "i", "+", "1", ")", "# calculate avg of dependent ranks", "\n", "cur_cell_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "avg_rank", ")", ")", "\n", "", "channel_size_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_avg_ranks", ")", ")", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "channel_size_avg_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.get_sep_conv_list_ranks_by_dependency": [[248, 293], ["list", "enumerate", "copy.deepcopy", "list", "list.append", "numpy.zeros", "enumerate", "list.append", "copy.deepcopy", "int", "copy.deepcopy", "numpy.array", "encoding.split", "encoding.split"], "function", ["None"], ["", "def", "get_sep_conv_list_ranks_by_dependency", "(", "in_rank", ",", "out_rank", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_rank-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "# sep conv channel size dependency mapping:", "\n", "    ", "norm_cell_sep_conv_mapping", "=", "[", "[", "'out_rank-3'", ",", "'in_rank-5'", "]", ",", "\n", "[", "'out_rank-7'", ",", "'in_rank-9'", "]", ",", "\n", "[", "'out_rank-11'", ",", "'in_rank-13'", "]", ",", "\n", "[", "'out_rank-15'", ",", "'in_rank-17'", "]", ",", "\n", "[", "'out_rank-19'", ",", "'in_rank-21'", "]", "\n", "]", "\n", "norm_red_cell_sep_conv_mapping", "=", "[", "[", "'out_rank-4'", ",", "'in_rank-6'", "]", ",", "\n", "[", "'out_rank-8'", ",", "'in_rank-10'", "]", ",", "\n", "[", "'out_rank-12'", ",", "'in_rank-14'", "]", ",", "\n", "[", "'out_rank-16'", ",", "'in_rank-18'", "]", ",", "\n", "[", "'out_rank-20'", ",", "'in_rank-22'", "]", "\n", "]", "\n", "\n", "total_epoch", "=", "in_rank", ".", "shape", "[", "1", "]", "\n", "sep_conv_avg_rank", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_sep_conv_avg_ranks", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "if", "cur_cell_type", "==", "'norm_cell'", ":", "\n", "            ", "mapping", "=", "norm_cell_sep_conv_mapping", "\n", "", "elif", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "mapping", "=", "norm_red_cell_sep_conv_mapping", "\n", "# for each sep_conv group, find avg rank", "\n", "", "if", "cur_cell_type", "==", "'norm_cell'", "or", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "for", "sep_conv_dependencies", "in", "mapping", ":", "\n", "                ", "avg_rank", "=", "np", ".", "zeros", "(", "total_epoch", ")", "# initialize avg rank for current channel size", "\n", "for", "i", ",", "encoding", "in", "enumerate", "(", "sep_conv_dependencies", ")", ":", "\n", "                    ", "rank_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                        ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                        ", "rank_list", "=", "out_rank", "\n", "", "avg_rank", "+=", "rank_list", "[", "conv_layer_idx", "]", "\n", "", "avg_rank", "/=", "(", "i", "+", "1", ")", "\n", "cur_sep_conv_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "avg_rank", ")", ")", "\n", "", "sep_conv_avg_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_sep_conv_avg_ranks", ")", ")", ")", "\n", "# print(sep_conv_avg_rank[2])", "\n", "", "", "return", "copy", ".", "deepcopy", "(", "sep_conv_avg_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.find_rank_avg_slope": [[295, 314], ["list", "enumerate", "copy.deepcopy", "list", "list.append", "numpy.argmax", "list.append", "copy.deepcopy", "numpy.array"], "function", ["None"], ["", "def", "find_rank_avg_slope", "(", "cell_avg_ranks", ")", ":", "\n", "    ", "cell_rank_slopes", "=", "list", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "cell_avg_ranks", ")", ":", "\n", "        ", "cur_cell_rank_slopes", "=", "list", "(", ")", "\n", "for", "avg_rank", "in", "cell", ":", "\n", "            ", "max_rank_epoch", "=", "np", ".", "argmax", "(", "avg_rank", ")", "# find the index (epoch#) where the max avg rank is", "\n", "rank_delta", "=", "avg_rank", "[", "max_rank_epoch", "]", "-", "avg_rank", "[", "0", "]", "\n", "epoch_delta", "=", "max_rank_epoch", "-", "0", "\n", "rank_slope", "=", "rank_delta", "/", "(", "epoch_delta", "+", "0.0001", ")", "\n", "\n", "# if i == 1:", "\n", "#     print(max_rank_epoch)", "\n", "#     print(avg_rank[max_rank_epoch])", "\n", "#     print(rank_slope)", "\n", "cur_cell_rank_slopes", ".", "append", "(", "rank_slope", ")", "\n", "", "cell_rank_slopes", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_rank_slopes", ")", ")", ")", "\n", "# print(cell_avg_ranks[1])", "\n", "# print(cell_rank_slopes[1])", "\n", "", "return", "copy", ".", "deepcopy", "(", "cell_rank_slopes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.get_cell_list_mapping_condition": [[315, 381], ["list", "enumerate", "copy.deepcopy", "list", "enumerate", "list.append", "enumerate", "list.append", "copy.deepcopy", "int", "copy.deepcopy", "numpy.array", "int", "encoding.split", "encoding.split", "encoding.split", "encoding.split"], "function", ["None"], ["", "def", "get_cell_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_rank-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "    ", "chan_size_dependency_mapping", "=", "{", "\n", "'stem'", ":", "[", "[", "'out_cond-0'", "]", "]", ",", "\n", "'norm_cell'", ":", "[", "[", "'out_cond-0'", ",", "'in_cond-3'", ",", "'in_cond-11'", ",", "'out_cond-21'", ",", "'out_cond-23'", "]", ",", "\n", "[", "'out_cond-1'", ",", "'in_cond-7'", ",", "'in_cond-15'", ",", "'in_cond-19'", "]", ",", "\n", "[", "'out_cond-5'", ",", "'out_cond-9'", ",", "'in_cond-23'", "]", ",", "\n", "[", "'out_cond-17'", ",", "'out_cond-13'", "]", "\n", "]", ",", "\n", "'red_cell'", ":", "[", "[", "'out_cond-0'", ",", "'out_cond-1'", "]", "]", ",", "\n", "'norm_red_cell'", ":", "[", "[", "'out_cond-0'", ",", "'out_cond-1'", ",", "'in_cond-4'", ",", "'in_cond-12'", ",", "'out_cond-22'", ",", "'out_cond-24'", "]", ",", "\n", "[", "'out_cond-2'", ",", "'in_cond-8'", ",", "'in_cond-16'", ",", "'in_cond-20'", "]", ",", "\n", "[", "'out_cond-6'", ",", "'out_cond-10'", ",", "'in_cond-24'", "]", ",", "\n", "[", "'out_cond-18'", ",", "'out_cond-14'", "]", "\n", "]", "\n", "}", "\n", "cell_cond", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_cell_cond", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "dependency_mapping", "=", "chan_size_dependency_mapping", "[", "cur_cell_type", "]", "\n", "# for each cell, check the dependency for each conv size", "\n", "for", "j", ",", "chan_dependencies", "in", "enumerate", "(", "dependency_mapping", ")", ":", "\n", "            ", "avg_cond", "=", "0", "# initialize avg rank for current channel size", "\n", "# for each dependency mapping of a conv size, calculate the avg cond", "\n", "# if it's reduction cell, need to first calculate the avg of the first 2 dependency due to concatenation", "\n", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                ", "red_dependencies", "=", "chan_dependencies", "[", ":", "2", "]", "# will only avg the first 2", "\n", "for", "encoding", "in", "red_dependencies", ":", "\n", "                    ", "cond_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                        ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                        ", "cond_list", "=", "out_cond", "\n", "", "avg_cond", "+=", "cond_list", "[", "conv_layer_idx", "]", "\n", "# print(encoding, conv_layer_idx)", "\n", "# print('rank list: ', rank_list[conv_layer_idx])", "\n", "# print(avg_rank)", "\n", "", "avg_cond", "/=", "2", "\n", "# print(avg_rank)", "\n", "chan_dependencies", "=", "chan_dependencies", "[", "2", ":", "]", "# will continue after the first 2", "\n", "# find avg rank of the dependent layers", "\n", "", "for", "i", ",", "encoding", "in", "enumerate", "(", "chan_dependencies", ")", ":", "\n", "                ", "cond_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                    ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                    ", "cond_list", "=", "out_cond", "\n", "", "avg_cond", "+=", "cond_list", "[", "conv_layer_idx", "]", "\n", "# if cur_cell_type == 'norm_red_cell' and j == 0:", "\n", "#     print(i,encoding,conv_layer_idx)", "\n", "#     print('rank list: ',rank_list[conv_layer_idx])", "\n", "#     print(avg_rank)", "\n", "", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                ", "i", "+=", "1", "# consider the first pair as 1 value", "\n", "", "avg_cond", "/=", "(", "i", "+", "1", ")", "# calculate avg of dependent ranks", "\n", "cur_cell_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "avg_cond", ")", ")", "\n", "", "cell_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_cond", ")", ")", ")", "\n", "# print(channel_size_avg_ranks[0])", "\n", "", "return", "copy", ".", "deepcopy", "(", "cell_cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.get_sep_conv_list_mapping_condition": [[382, 426], ["list", "enumerate", "copy.deepcopy", "list", "list.append", "enumerate", "list.append", "copy.deepcopy", "int", "numpy.array", "encoding.split", "encoding.split"], "function", ["None"], ["", "def", "get_sep_conv_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_cond-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "# sep conv channel size dependency mapping:", "\n", "    ", "norm_cell_sep_conv_mapping", "=", "[", "[", "'out_cond-3'", ",", "'in_cond-5'", "]", ",", "\n", "[", "'out_cond-7'", ",", "'in_cond-9'", "]", ",", "\n", "[", "'out_cond-11'", ",", "'in_cond-13'", "]", ",", "\n", "[", "'out_cond-15'", ",", "'in_cond-17'", "]", ",", "\n", "[", "'out_cond-19'", ",", "'in_cond-21'", "]", "\n", "]", "\n", "norm_red_cell_sep_conv_mapping", "=", "[", "[", "'out_cond-4'", ",", "'in_cond-6'", "]", ",", "\n", "[", "'out_cond-8'", ",", "'in_cond-10'", "]", ",", "\n", "[", "'out_cond-12'", ",", "'in_cond-14'", "]", ",", "\n", "[", "'out_cond-16'", ",", "'in_cond-18'", "]", ",", "\n", "[", "'out_cond-20'", ",", "'in_cond-22'", "]", "\n", "]", "\n", "\n", "sep_conv_avg_cond", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_sep_conv_avg_conds", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "if", "cur_cell_type", "==", "'norm_cell'", ":", "\n", "            ", "mapping", "=", "norm_cell_sep_conv_mapping", "\n", "", "elif", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "mapping", "=", "norm_red_cell_sep_conv_mapping", "\n", "# for each sep_conv group, find avg cond", "\n", "", "if", "cur_cell_type", "==", "'norm_cell'", "or", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "for", "sep_conv_dependencies", "in", "mapping", ":", "\n", "                ", "avg_cond", "=", "0", "# initialize avg cond for current channel size", "\n", "for", "i", ",", "encoding", "in", "enumerate", "(", "sep_conv_dependencies", ")", ":", "\n", "                    ", "cond_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                        ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                        ", "cond_list", "=", "out_cond", "\n", "", "avg_cond", "+=", "cond_list", "[", "conv_layer_idx", "]", "\n", "", "avg_cond", "/=", "(", "i", "+", "1", ")", "\n", "cur_sep_conv_avg_conds", ".", "append", "(", "avg_cond", ")", "\n", "", "sep_conv_avg_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_sep_conv_avg_conds", ")", ")", ")", "\n", "# print(sep_conv_avg_cond[2])", "\n", "", "", "return", "copy", ".", "deepcopy", "(", "sep_conv_avg_cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.round_even": [[428, 430], ["int", "round"], "function", ["None"], ["", "def", "round_even", "(", "number", ")", ":", "\n", "    ", "return", "int", "(", "round", "(", "number", "/", "2", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.initialize_algorithm": [[433, 443], ["list", "list", "len", "numpy.zeros", "numpy.full", "list.append", "list.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "function", ["None"], ["", "def", "initialize_algorithm", "(", "conv_list", ",", "factor_scale", ")", ":", "\n", "    ", "prev_op_list", "=", "list", "(", ")", "\n", "factor_list", "=", "list", "(", ")", "\n", "for", "cell", "in", "conv_list", ":", "\n", "        ", "cell_adjustable_convs", "=", "len", "(", "cell", ")", "\n", "cell_op", "=", "np", ".", "zeros", "(", "cell_adjustable_convs", ",", "dtype", "=", "int", ")", "\n", "cell_factor", "=", "np", ".", "full", "(", "cell_adjustable_convs", ",", "factor_scale", ")", "\n", "prev_op_list", ".", "append", "(", "copy", ".", "deepcopy", "(", "cell_op", ")", ")", "\n", "factor_list", ".", "append", "(", "(", "copy", ".", "deepcopy", "(", "cell_factor", ")", ")", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "prev_op_list", ")", ",", "copy", ".", "deepcopy", "(", "factor_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.darts_scaling_algorithms.channel_size_adjust_algorithm": [[446, 521], ["darts_scaling_algorithms.find_cell_first_conv_idx", "darts_scaling_algorithms.get_cells_type", "darts_scaling_algorithms.get_layer_conv_ranks", "darts_scaling_algorithms.get_cell_list_ranks_by_dependency", "darts_scaling_algorithms.get_sep_conv_list_ranks_by_dependency", "darts_scaling_algorithms.find_rank_avg_slope", "darts_scaling_algorithms.find_rank_avg_slope", "darts_scaling_algorithms.get_layer_mapping", "darts_scaling_algorithms.get_cell_list_mapping_condition", "darts_scaling_algorithms.get_sep_conv_list_mapping_condition", "enumerate", "enumerate", "darts_scaling_algorithms.initialize_algorithm", "darts_scaling_algorithms.initialize_algorithm", "enumerate", "enumerate", "len", "darts_scaling_algorithms.round_even", "darts_scaling_algorithms.round_even"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_cell_first_conv_idx", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cells_type", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_layer_conv_ranks", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cell_list_ranks_by_dependency", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_sep_conv_list_ranks_by_dependency", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_rank_avg_slope", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_rank_avg_slope", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_layer_mapping", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cell_list_mapping_condition", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_sep_conv_list_mapping_condition", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.initialize_algorithm", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.initialize_algorithm", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.round_even", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.round_even"], ["", "def", "channel_size_adjust_algorithm", "(", "cell_list", ",", "sep_conv_list", ",", "delta_threshold", ",", "factor_scale", ",", "min_scale_limit", ",", "map_cond_threshold", ",", "\n", "min_conv_size", ",", "max_conv_size", ",", "trial_dir", ",", "cur_trial", ",", "cell_list_prev_ops", "=", "None", ",", "\n", "cell_list_factor", "=", "None", ",", "sep_conv_list_prev_ops", "=", "None", ",", "sep_conv_list_factor", "=", "None", ")", ":", "\n", "    ", "first_trial", "=", "False", "\n", "if", "len", "(", "cell_list_prev_ops", ")", "==", "0", "or", "cell_list_prev_ops", "==", "None", ":", "\n", "        ", "first_trial", "=", "True", "\n", "cell_list_prev_ops", ",", "cell_list_factor", "=", "initialize_algorithm", "(", "cell_list", ",", "factor_scale", ")", "\n", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", "=", "initialize_algorithm", "(", "sep_conv_list", ",", "factor_scale", ")", "\n", "# assert len(sep_conv_list_prev_ops) != 0 and sep_conv_list_prev_ops != None", "\n", "\n", "# get the avg rank slope of each adjustable channel sizes", "\n", "", "cell_first_layer_idx", "=", "find_cell_first_conv_idx", "(", "cell_list", ")", "\n", "cells_type", "=", "get_cells_type", "(", "cell_list", ")", "\n", "layers_in_rank", ",", "layers_out_rank", "=", "get_layer_conv_ranks", "(", "trial_dir", ",", "cur_trial", ")", "\n", "cell_list_avg_ranks", "=", "get_cell_list_ranks_by_dependency", "(", "layers_in_rank", ",", "layers_out_rank", ",", "cell_first_layer_idx", ",", "\n", "cells_type", ")", "\n", "sep_conv_list_avg_ranks", "=", "get_sep_conv_list_ranks_by_dependency", "(", "layers_in_rank", ",", "layers_out_rank", ",", "\n", "cell_first_layer_idx", ",", "cells_type", ")", "\n", "cell_list_rank_slopes", "=", "find_rank_avg_slope", "(", "cell_list_avg_ranks", ")", "\n", "sep_conv_list_rank_slopes", "=", "find_rank_avg_slope", "(", "sep_conv_list_avg_ranks", ")", "\n", "\n", "# get the avg mapping condition for each adjustable channel sizes", "\n", "in_cond", ",", "out_cond", "=", "get_layer_mapping", "(", "trial_dir", ",", "cur_trial", ")", "\n", "cell_list_cond", "=", "get_cell_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", "\n", "sep_conv_list_cond", "=", "get_sep_conv_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", "\n", "\n", "# algorithm: operation = expand:1/shrink:-1/stop:0", "\n", "for", "cell_idx", ",", "cell", "in", "enumerate", "(", "cell_list_rank_slopes", ")", ":", "\n", "        ", "for", "chan_idx", ",", "avg_rank_slope", "in", "enumerate", "(", "cell", ")", ":", "\n", "            ", "map_cond", "=", "cell_list_cond", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_size", "=", "cell_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "prev_op", "=", "cell_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_scale", "=", "cell_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "if", "not", "first_trial", "and", "prev_op", "==", "0", ":", "\n", "                ", "continue", "# if threshold already satisfied, skip this conv", "\n", "", "cur_op", "=", "1", "# initialize operation to expand first.", "\n", "if", "(", "(", "avg_rank_slope", "<", "delta_threshold", "or", "map_cond", ">=", "map_cond_threshold", ")", "and", "chan_size", ">", "min_conv_size", ")", "or", "(", "chan_size", ">", "max_conv_size", ")", ":", "\n", "                ", "cur_op", "=", "-", "1", "\n", "", "if", "prev_op", "!=", "cur_op", "and", "not", "first_trial", ":", "\n", "                ", "if", "chan_scale", "<", "min_scale_limit", ":", "\n", "                    ", "cur_op", "=", "0", "\n", "", "cell_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "chan_scale", "/", "2", "\n", "", "cell_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "cur_op", "\n", "new_cell_size", "=", "round_even", "(", "chan_size", "*", "(", "1", "+", "cell_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "*", "cur_op", ")", ")", "\n", "if", "new_cell_size", ">", "max_conv_size", ":", "\n", "                ", "new_cell_size", "=", "max_conv_size", "\n", "", "elif", "new_cell_size", "<", "min_conv_size", ":", "\n", "                ", "new_cell_size", "=", "min_conv_size", "\n", "", "cell_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "new_cell_size", "\n", "\n", "# do same thing for sep_conv_list", "\n", "", "", "for", "cell_idx", ",", "cell", "in", "enumerate", "(", "sep_conv_list_rank_slopes", ")", ":", "\n", "        ", "for", "chan_idx", ",", "avg_rank_slope", "in", "enumerate", "(", "cell", ")", ":", "\n", "            ", "map_cond", "=", "sep_conv_list_cond", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_size", "=", "sep_conv_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "prev_op", "=", "sep_conv_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_scale", "=", "sep_conv_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "if", "not", "first_trial", "and", "prev_op", "==", "0", ":", "\n", "                ", "continue", "# if already really close to threshold, skip this conv", "\n", "", "cur_op", "=", "1", "# initialize operation to expand first.", "\n", "if", "(", "(", "avg_rank_slope", "<", "delta_threshold", "or", "map_cond", ">=", "map_cond_threshold", ")", "and", "chan_size", ">", "min_conv_size", ")", "or", "(", "chan_size", ">", "max_conv_size", ")", ":", "\n", "                ", "cur_op", "=", "-", "1", "\n", "", "if", "prev_op", "!=", "cur_op", "and", "not", "first_trial", ":", "\n", "                ", "if", "chan_scale", "<", "min_scale_limit", ":", "\n", "                    ", "cur_op", "=", "0", "\n", "", "sep_conv_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "chan_scale", "/", "2", "\n", "", "sep_conv_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "cur_op", "\n", "new_sep_size", "=", "round_even", "(", "chan_size", "*", "(", "1", "+", "sep_conv_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "*", "cur_op", ")", ")", "\n", "if", "new_sep_size", ">", "max_conv_size", ":", "\n", "                ", "new_sep_size", "=", "max_conv_size", "\n", "", "elif", "new_sep_size", "<", "min_conv_size", ":", "\n", "                ", "new_sep_size", "=", "min_conv_size", "\n", "", "sep_conv_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "new_sep_size", "\n", "\n", "", "", "return", "cell_list", ",", "sep_conv_list", ",", "cell_list_rank_slopes", ",", "cell_list_prev_ops", ",", "cell_list_factor", ",", "sep_conv_list_rank_slopes", ",", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", ",", "cell_list_avg_ranks", ",", "sep_conv_list_avg_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.data.get_data": [[35, 160], ["torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "print", "transforms.Compose.transforms.append", "print", "torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize", "str", "str", "print", "transforms.Compose.transforms.append", "print", "torchvision.Compose", "torchvision.Compose", "datasets.ImageNet", "torch.utils.data.DataLoader", "datasets.ImageNet", "torch.utils.data.DataLoader", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize", "str", "str", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "str", "str"], "function", ["None"], ["def", "get_data", "(", "root", ":", "Path", ",", "dataset", ":", "str", ",", "mini_batch_size", ":", "int", ",", "cutout", "=", "False", ",", "cutout_length", "=", "16", ")", ":", "\n", "    ", "train_loader", "=", "None", "\n", "test_loader", "=", "None", "\n", "if", "dataset", "==", "'CIFAR100'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "std", "=", "[", "\n", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", ",", "\n", "]", ")", "\n", "if", "cutout", ":", "\n", "            ", "print", "(", "\"Using cutout!\"", ")", "\n", "transform_train", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Not using cutout!\"", ")", "\n", "\n", "", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "std", "=", "[", "\n", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", ",", "\n", "]", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "str", "(", "root", ")", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset", ",", "batch_size", "=", "mini_batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "str", "(", "root", ")", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "testset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'CIFAR10'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "\n", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "if", "cutout", ":", "\n", "            ", "print", "(", "\"Using cutout!\"", ")", "\n", "transform_train", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Not using cutout!\"", ")", "\n", "\n", "", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "\n", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "str", "(", "root", ")", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset", ",", "batch_size", "=", "mini_batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "str", "(", "root", ")", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "testset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'ImageNet'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "# New ImageNet", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", "hue", "=", "0.2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "\n", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "# New", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "# New  ImageNet", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "\n", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "\"\"\"\n        trainset = torchvision.datasets.ImageNet(\n            root=str(root), train=True, download=False,\n            transform=transform_train)\n        train_loader = torch.utils.data.DataLoader(\n            trainset, batch_size=mini_batch_size, shuffle=True, num_workers=4,\n            pin_memory=True)\n        testset = torchvision.datasets.ImageNet(\n            root=str(root), train=False, download=False,\n            transform=transform_test)\n        test_loader = torch.utils.data.DataLoader(\n            testset, batch_size=32, shuffle=False,\n            num_workers=4, pin_memory=True)\n        \"\"\"", "\n", "\n", "trainset", "=", "ImageNet", "(", "\n", "root", "=", "str", "(", "root", ")", ",", "split", "=", "'train'", ",", "download", "=", "None", ",", "\n", "transform", "=", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset", ",", "batch_size", "=", "mini_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "testset", "=", "ImageNet", "(", "\n", "root", "=", "str", "(", "root", ")", ",", "split", "=", "'val'", ",", "download", "=", "None", ",", "\n", "transform", "=", "transform_test", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "testset", ",", "batch_size", "=", "mini_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'COCO'", ":", "\n", "        ", "...", "\n", "", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.find_cell_first_conv_idx": [[33, 58], ["enumerate", "copy.deepcopy", "cells_first_layer_idx.append", "len", "len"], "function", ["None"], ["def", "find_cell_first_conv_idx", "(", "cell_list", ")", ":", "\n", "    ", "normal_cell_layers", "=", "26", "\n", "reduction_cell_layers", "=", "8", "\n", "red_normal_cell_layers", "=", "27", "\n", "cur_layer_count", "=", "0", "\n", "reduction_cell_idx", "=", "[", "(", "len", "(", "cell_list", ")", "-", "1", ")", "//", "3", "+", "1", ",", "(", "len", "(", "cell_list", ")", "-", "1", ")", "*", "2", "//", "3", "+", "1", "]", "# 3,5 for 7 cells+1 stem", "\n", "#print(\"reduction cell idx: \",reduction_cell_idx)", "\n", "prev_cell_is_reduction", "=", "False", "\n", "cells_first_layer_idx", "=", "[", "]", "\n", "for", "cur_cell_idx", ",", "cur_cell", "in", "enumerate", "(", "cell_list", ")", ":", "\n", "        ", "if", "cur_cell_idx", "==", "0", ":", "\n", "            ", "cur_layer_count", "=", "0", "\n", "", "elif", "cur_cell_idx", "==", "1", ":", "\n", "            ", "cur_layer_count", "=", "1", "\n", "", "elif", "cur_cell_idx", "-", "1", "in", "reduction_cell_idx", ":", "\n", "            ", "prev_cell_is_reduction", "=", "True", "\n", "cur_layer_count", "+=", "reduction_cell_layers", "\n", "", "elif", "prev_cell_is_reduction", ":", "\n", "            ", "cur_layer_count", "+=", "red_normal_cell_layers", "\n", "prev_cell_is_reduction", "=", "False", "\n", "", "else", ":", "\n", "            ", "cur_layer_count", "+=", "normal_cell_layers", "\n", "\n", "", "cells_first_layer_idx", ".", "append", "(", "cur_layer_count", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "cells_first_layer_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cells_type": [[61, 76], ["enumerate", "copy.deepcopy", "cells_type.append", "len", "len"], "function", ["None"], ["", "def", "get_cells_type", "(", "cell_list", ")", ":", "\n", "    ", "cells_type", "=", "[", "]", "\n", "reduction_cell_idx", "=", "[", "(", "len", "(", "cell_list", ")", "-", "1", ")", "//", "3", "+", "1", ",", "(", "len", "(", "cell_list", ")", "-", "1", ")", "*", "2", "//", "3", "+", "1", "]", "\n", "cur_cell_type", "=", "'stem'", "\n", "for", "cur_cell_idx", ",", "cur_cell", "in", "enumerate", "(", "cell_list", ")", ":", "\n", "        ", "if", "cur_cell_idx", "==", "0", ":", "\n", "            ", "cur_cell_type", "=", "'stem'", "\n", "", "elif", "cur_cell_idx", "in", "reduction_cell_idx", ":", "\n", "            ", "cur_cell_type", "=", "'red_cell'", "\n", "", "elif", "cur_cell_idx", "-", "1", "in", "reduction_cell_idx", ":", "\n", "            ", "cur_cell_type", "=", "'norm_red_cell'", "\n", "", "else", ":", "\n", "            ", "cur_cell_type", "=", "'norm_cell'", "\n", "", "cells_type", ".", "append", "(", "cur_cell_type", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "cells_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_layer_conv_ranks": [[79, 104], ["os.listdir", "list", "list", "numpy.array().transpose", "numpy.array().transpose", "str", "copy.deepcopy", "copy.deepcopy", "file.startswith", "file.endswith", "os.path.join", "pandas.read_excel", "numpy.array", "numpy.array", "pd.read_excel.loc[].tolist", "np.array().transpose.append", "pd.read_excel.loc[].tolist", "np.array().transpose.append", "col.startswith", "copy.deepcopy", "col.startswith", "copy.deepcopy", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_layer_conv_ranks", "(", "trial_dir", ",", "cur_trial", ")", ":", "\n", "    ", "cur_trial", "=", "'AdaS_adapt_trial=%s'", "%", "str", "(", "cur_trial", ")", "\n", "file_list", "=", "os", ".", "listdir", "(", "trial_dir", ")", "\n", "in_rank", "=", "list", "(", ")", "\n", "out_rank", "=", "list", "(", ")", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "if", "file", ".", "startswith", "(", "cur_trial", ")", "and", "file", ".", "endswith", "(", "'.xlsx'", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "file", ")", "\n", "df_trial", "=", "pd", ".", "read_excel", "(", "file_path", ",", "index_col", "=", "0", ")", "\n", "# find all in_rank at each layer for all epochs", "\n", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'in_rank'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "in_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "# find all out_rank at each layer for all epochs", "\n", "", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'out_rank'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "out_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "", "break", "\n", "", "", "in_rank", "=", "np", ".", "array", "(", "in_rank", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "# [epoch,layer] -> [layer,epoch]", "\n", "out_rank", "=", "np", ".", "array", "(", "out_rank", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "copy", ".", "deepcopy", "(", "in_rank", ")", ",", "copy", ".", "deepcopy", "(", "out_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_layer_mapping": [[106, 131], ["os.listdir", "list", "list", "str", "copy.deepcopy", "copy.deepcopy", "file.startswith", "file.endswith", "os.path.join", "pandas.read_excel", "pd.read_excel.loc[].tolist", "list.append", "pd.read_excel.loc[].tolist", "list.append", "col.startswith", "copy.deepcopy", "col.startswith", "copy.deepcopy", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_layer_mapping", "(", "trial_dir", ",", "cur_trial", ")", ":", "\n", "    ", "cur_trial", "=", "'AdaS_adapt_trial=%s'", "%", "str", "(", "cur_trial", ")", "\n", "file_list", "=", "os", ".", "listdir", "(", "trial_dir", ")", "\n", "in_cond", "=", "list", "(", ")", "\n", "out_cond", "=", "list", "(", ")", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "if", "file", ".", "startswith", "(", "cur_trial", ")", "and", "file", ".", "endswith", "(", "'.xlsx'", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "file", ")", "\n", "df_trial", "=", "pd", ".", "read_excel", "(", "file_path", ",", "index_col", "=", "0", ")", "\n", "# find all in_rank at each layer for all epochs", "\n", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'in_condition'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "in_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "# find all out_rank at each layer for all epochs", "\n", "", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'out_condition'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "out_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "", "break", "\n", "# in_cond = np.array(in_cond).transpose((1,0)) # [epoch,layer] -> [layer,epoch]", "\n", "# out_cond = np.array(out_cond).transpose((1,0))", "\n", "", "", "return", "copy", ".", "deepcopy", "(", "in_cond", "[", "-", "1", "]", ")", ",", "copy", ".", "deepcopy", "(", "out_cond", "[", "-", "1", "]", ")", "# only return last epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cell_list_ranks_by_dependency": [[136, 235], ["list", "enumerate", "copy.deepcopy", "list", "enumerate", "list.append", "numpy.zeros", "list.append", "copy.deepcopy", "range", "enumerate", "copy.deepcopy", "numpy.array", "int", "int", "len", "int", "int", "chan_dependencies[].split", "int", "encoding.split", "chan_dependencies[].split", "chan_dependencies[].split", "encoding.split", "encoding.split", "chan_dependencies[].split", "chan_dependencies[].split", "encoding.split"], "function", ["None"], ["", "def", "get_cell_list_ranks_by_dependency", "(", "in_rank", ",", "out_rank", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_rank-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "    ", "chan_size_dependency_mapping", "=", "{", "\n", "'stem'", ":", "[", "[", "'out_rank-0'", "]", "]", ",", "\n", "'norm_cell'", ":", "[", "[", "'out_rank-0'", ",", "'out_rank-5'", ",", "'in_rank-7'", ",", "'out_rank-9'", ",", "'in_rank-15'", ",", "'in_rank-19'", "]", ",", "# C0", "\n", "[", "'out_rank-1'", ",", "'in_rank-3'", ",", "'in_rank-11'", "]", ",", "# C1", "\n", "[", "'out_rank-13'", ",", "'out_rank-17'", ",", "'in_rank-23'", "]", ",", "# C2", "\n", "[", "'out_rank-21'", ",", "'out_rank-25'", "]", "# C3", "\n", "]", ",", "\n", "'red_cell'", ":", "[", "[", "'out_rank-0'", ",", "'out_rank-2'", ",", "'out_rank-3'", ",", "'in_rank-5'", ",", "'out_rank-5'", ",", "'in_rank-7'", ",", "'out_rank-7'", "]", ",", "\n", "[", "'out_rank-1'", ",", "'in_rank-2'", ",", "'in_rank-3'", "]", "]", ",", "\n", "'norm_red_cell'", ":", "[", "[", "'out_rank-0'", ",", "'out_rank-1'", ",", "'out_rank-6'", ",", "'in_rank-8'", ",", "'out_rank-10'", ",", "'in_rank-16'", ",", "'in_rank-20'", "]", ",", "\n", "[", "'out_rank-2'", ",", "'in_rank-4'", ",", "'in_rank-12'", "]", ",", "\n", "[", "'out_rank-14'", ",", "'out_rank-18'", ",", "'in_rank-24'", "]", ",", "\n", "[", "'out_rank-22'", ",", "'out_rank-26'", "]", "\n", "]", "\n", "}", "\n", "total_epoch", "=", "in_rank", ".", "shape", "[", "1", "]", "\n", "channel_size_avg_ranks", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_cell_avg_ranks", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "dependency_mapping", "=", "chan_size_dependency_mapping", "[", "cur_cell_type", "]", "\n", "# for each cell, check the dependency for each conv size", "\n", "for", "j", ",", "chan_dependencies", "in", "enumerate", "(", "dependency_mapping", ")", ":", "\n", "            ", "avg_rank", "=", "np", ".", "zeros", "(", "total_epoch", ")", "# initialize avg rank for current channel size", "\n", "# for each dependency mapping of a conv size, calculate the avg rank", "\n", "# if reduction cell, need to handle differently", "\n", "if", "cur_cell_type", "==", "'red_cell'", ":", "\n", "                ", "i", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "chan_dependencies", ")", "-", "1", ")", ":", "\n", "# need to consider the concat of conv2 and conv3 as a single conv", "\n", "                    ", "if", "i", "==", "1", ":", "\n", "                        ", "rank_type", "=", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset_1", "=", "int", "(", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx_1", "=", "first_conv_idx", "+", "conv_layer_offset_1", "\n", "conv_layer_offset_2", "=", "int", "(", "chan_dependencies", "[", "i", "+", "1", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx_2", "=", "first_conv_idx", "+", "conv_layer_offset_2", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                            ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                            ", "rank_list", "=", "out_rank", "\n", "", "temp", "=", "(", "rank_list", "[", "conv_layer_idx_1", "]", "+", "rank_list", "[", "conv_layer_idx_2", "]", ")", "/", "2", "\n", "avg_rank", "+=", "temp", "\n", "i", "+=", "2", "\n", "continue", "\n", "", "rank_type", "=", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                        ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                        ", "rank_list", "=", "out_rank", "\n", "", "avg_rank", "+=", "rank_list", "[", "conv_layer_idx", "]", "\n", "i", "+=", "1", "\n", "", "i", "-=", "2", "# need to consider 2 concat conv layer as 1, minus 2 since we have plus 1 in averaging", "\n", "# print(i)", "\n", "# print(avg_rank)", "\n", "", "else", ":", "\n", "# if it's reduction cell, need to first calculate the avg of the first 2 dependency due to concatenation", "\n", "                ", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                    ", "red_dependencies", "=", "chan_dependencies", "[", ":", "2", "]", "# will only avg the first 2", "\n", "for", "encoding", "in", "red_dependencies", ":", "\n", "                        ", "rank_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                            ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                            ", "rank_list", "=", "out_rank", "\n", "", "avg_rank", "+=", "rank_list", "[", "conv_layer_idx", "]", "\n", "# print(encoding, conv_layer_idx)", "\n", "# print('rank list: ', rank_list[conv_layer_idx])", "\n", "# print(avg_rank)", "\n", "", "avg_rank", "/=", "2", "\n", "# print(avg_rank)", "\n", "chan_dependencies", "=", "chan_dependencies", "[", "2", ":", "]", "# will continue after the first 2", "\n", "# find avg rank of the dependent layers", "\n", "", "for", "i", ",", "encoding", "in", "enumerate", "(", "chan_dependencies", ")", ":", "\n", "                    ", "rank_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                        ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                        ", "rank_list", "=", "out_rank", "\n", "", "avg_rank", "+=", "rank_list", "[", "conv_layer_idx", "]", "\n", "# if cur_cell_type == 'norm_red_cell' and j == 0:", "\n", "#     print(i,encoding,conv_layer_idx)", "\n", "#     print('rank list: ',rank_list[conv_layer_idx])", "\n", "#     print(avg_rank)", "\n", "", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                    ", "i", "+=", "1", "# consider the first pair as 1 value", "\n", "", "", "avg_rank", "/=", "(", "i", "+", "1", ")", "# calculate avg of dependent ranks", "\n", "cur_cell_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "avg_rank", ")", ")", "\n", "", "channel_size_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_avg_ranks", ")", ")", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "channel_size_avg_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_sep_conv_list_ranks_by_dependency": [[240, 287], ["list", "enumerate", "copy.deepcopy", "list", "list.append", "numpy.zeros", "enumerate", "list.append", "copy.deepcopy", "int", "copy.deepcopy", "numpy.array", "encoding.split", "encoding.split"], "function", ["None"], ["", "def", "get_sep_conv_list_ranks_by_dependency", "(", "in_rank", ",", "out_rank", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_rank-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "# sep conv channel size dependency mapping:", "\n", "    ", "norm_cell_sep_conv_mapping", "=", "[", "[", "'out_rank-3'", ",", "'in_rank-5'", "]", ",", "\n", "[", "'out_rank-7'", ",", "'in_rank-9'", "]", ",", "\n", "[", "'out_rank-11'", ",", "'in_rank-13'", "]", ",", "\n", "[", "'out_rank-15'", ",", "'in_rank-17'", "]", ",", "\n", "[", "'out_rank-19'", ",", "'in_rank-21'", "]", ",", "\n", "[", "'out_rank-23'", ",", "'in_rank-25'", "]", "\n", "]", "\n", "norm_red_cell_sep_conv_mapping", "=", "[", "[", "'out_rank-4'", ",", "'in_rank-6'", "]", ",", "\n", "[", "'out_rank-8'", ",", "'in_rank-10'", "]", ",", "\n", "[", "'out_rank-12'", ",", "'in_rank-14'", "]", ",", "\n", "[", "'out_rank-16'", ",", "'in_rank-18'", "]", ",", "\n", "[", "'out_rank-20'", ",", "'in_rank-22'", "]", ",", "\n", "[", "'out_rank-24'", ",", "'in_rank-26'", "]", "\n", "]", "\n", "\n", "total_epoch", "=", "in_rank", ".", "shape", "[", "1", "]", "\n", "sep_conv_avg_rank", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_sep_conv_avg_ranks", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "if", "cur_cell_type", "==", "'norm_cell'", ":", "\n", "            ", "mapping", "=", "norm_cell_sep_conv_mapping", "\n", "", "elif", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "mapping", "=", "norm_red_cell_sep_conv_mapping", "\n", "# for each sep_conv group, find avg rank", "\n", "", "if", "cur_cell_type", "==", "'norm_cell'", "or", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "for", "sep_conv_dependencies", "in", "mapping", ":", "\n", "                ", "avg_rank", "=", "np", ".", "zeros", "(", "total_epoch", ")", "# initialize avg rank for current channel size", "\n", "for", "i", ",", "encoding", "in", "enumerate", "(", "sep_conv_dependencies", ")", ":", "\n", "                    ", "rank_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "rank_type", "==", "'in_rank'", ":", "\n", "                        ", "rank_list", "=", "in_rank", "\n", "", "else", ":", "\n", "                        ", "rank_list", "=", "out_rank", "\n", "", "avg_rank", "+=", "rank_list", "[", "conv_layer_idx", "]", "\n", "", "avg_rank", "/=", "(", "i", "+", "1", ")", "\n", "cur_sep_conv_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "avg_rank", ")", ")", "\n", "", "sep_conv_avg_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_sep_conv_avg_ranks", ")", ")", ")", "\n", "# print(sep_conv_avg_rank[2])", "\n", "", "", "return", "copy", ".", "deepcopy", "(", "sep_conv_avg_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.find_rank_avg_slope": [[289, 308], ["list", "enumerate", "copy.deepcopy", "list", "list.append", "numpy.argmax", "list.append", "copy.deepcopy", "numpy.array"], "function", ["None"], ["", "def", "find_rank_avg_slope", "(", "cell_avg_ranks", ")", ":", "\n", "    ", "cell_rank_slopes", "=", "list", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "cell_avg_ranks", ")", ":", "\n", "        ", "cur_cell_rank_slopes", "=", "list", "(", ")", "\n", "for", "avg_rank", "in", "cell", ":", "\n", "            ", "max_rank_epoch", "=", "np", ".", "argmax", "(", "avg_rank", ")", "# find the index (epoch#) where the max avg rank is", "\n", "rank_delta", "=", "avg_rank", "[", "max_rank_epoch", "]", "-", "avg_rank", "[", "0", "]", "\n", "epoch_delta", "=", "max_rank_epoch", "-", "0", "\n", "rank_slope", "=", "rank_delta", "/", "(", "epoch_delta", "+", "0.0001", ")", "\n", "\n", "# if i == 1:", "\n", "#     print(max_rank_epoch)", "\n", "#     print(avg_rank[max_rank_epoch])", "\n", "#     print(rank_slope)", "\n", "cur_cell_rank_slopes", ".", "append", "(", "rank_slope", ")", "\n", "", "cell_rank_slopes", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_rank_slopes", ")", ")", ")", "\n", "# print(cell_avg_ranks[1])", "\n", "# print(cell_rank_slopes[1])", "\n", "", "return", "copy", ".", "deepcopy", "(", "cell_rank_slopes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cell_list_mapping_condition": [[309, 407], ["list", "enumerate", "copy.deepcopy", "list", "enumerate", "list.append", "list.append", "copy.deepcopy", "range", "enumerate", "numpy.array", "int", "int", "len", "int", "int", "chan_dependencies[].split", "int", "encoding.split", "chan_dependencies[].split", "chan_dependencies[].split", "encoding.split", "encoding.split", "chan_dependencies[].split", "chan_dependencies[].split", "encoding.split"], "function", ["None"], ["", "def", "get_cell_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_rank-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "    ", "chan_size_dependency_mapping", "=", "{", "\n", "'stem'", ":", "[", "[", "'out_cond-0'", "]", "]", ",", "\n", "'norm_cell'", ":", "[", "[", "'out_cond-0'", ",", "'out_cond-5'", ",", "'in_cond-7'", ",", "'out_cond-9'", ",", "'in_cond-15'", ",", "'in_cond-19'", "]", ",", "# C0", "\n", "[", "'out_cond-1'", ",", "'in_cond-3'", ",", "'in_cond-11'", "]", ",", "# C1", "\n", "[", "'out_cond-13'", ",", "'out_cond-17'", ",", "'in_cond-23'", "]", ",", "# C2", "\n", "[", "'out_cond-21'", ",", "'out_cond-25'", "]", "# C3", "\n", "]", ",", "\n", "'red_cell'", ":", "[", "[", "'out_cond-0'", ",", "'out_cond-2'", ",", "'out_cond-3'", ",", "'in_cond-5'", ",", "'out_cond-5'", ",", "'in_cond-7'", ",", "'out_cond-7'", "]", ",", "\n", "[", "'out_cond-1'", ",", "'in_cond-2'", ",", "'in_cond-3'", "]", "]", ",", "\n", "'norm_red_cell'", ":", "[", "[", "'out_cond-0'", ",", "'out_cond-1'", ",", "'out_cond-6'", ",", "'in_cond-8'", ",", "'out_cond-10'", ",", "'in_cond-16'", ",", "'in_cond-20'", "]", ",", "\n", "[", "'out_cond-2'", ",", "'in_cond-4'", ",", "'in_cond-12'", "]", ",", "\n", "[", "'out_cond-14'", ",", "'out_cond-18'", ",", "'in_cond-24'", "]", ",", "\n", "[", "'out_cond-22'", ",", "'out_cond-26'", "]", "\n", "]", "\n", "}", "\n", "cell_cond", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_cell_avg_conds", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "dependency_mapping", "=", "chan_size_dependency_mapping", "[", "cur_cell_type", "]", "\n", "# for each cell, check the dependency for each conv size", "\n", "for", "j", ",", "chan_dependencies", "in", "enumerate", "(", "dependency_mapping", ")", ":", "\n", "            ", "avg_cond", "=", "0", "# initialize avg rank for current channel size", "\n", "# for each dependency mapping of a conv size, calculate the avg rank", "\n", "# if reduction cell, need to handle differently", "\n", "if", "cur_cell_type", "==", "'red_cell'", ":", "\n", "                ", "i", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "chan_dependencies", ")", "-", "1", ")", ":", "\n", "# need to consider the concat of conv2 and conv3 as a single conv", "\n", "                    ", "if", "i", "==", "1", ":", "\n", "                        ", "cond_type", "=", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset_1", "=", "int", "(", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx_1", "=", "first_conv_idx", "+", "conv_layer_offset_1", "\n", "conv_layer_offset_2", "=", "int", "(", "chan_dependencies", "[", "i", "+", "1", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx_2", "=", "first_conv_idx", "+", "conv_layer_offset_2", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                            ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                            ", "cond_list", "=", "out_cond", "\n", "", "temp", "=", "(", "cond_list", "[", "conv_layer_idx_1", "]", "+", "cond_list", "[", "conv_layer_idx_2", "]", ")", "/", "2", "\n", "avg_cond", "+=", "temp", "\n", "i", "+=", "2", "\n", "continue", "\n", "", "cond_type", "=", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "chan_dependencies", "[", "i", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                        ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                        ", "cond_list", "=", "out_cond", "\n", "", "avg_cond", "+=", "cond_list", "[", "conv_layer_idx", "]", "\n", "i", "+=", "1", "\n", "", "i", "-=", "2", "# need to consider 2 concat conv layer as 1, minus 2 since we have plus 1 in averaging", "\n", "# print(i)", "\n", "# print(avg_cond)", "\n", "", "else", ":", "\n", "# if it's reduction cell, need to first calculate the avg of the first 2 dependency due to concatenation", "\n", "                ", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                    ", "red_dependencies", "=", "chan_dependencies", "[", ":", "2", "]", "# will only avg the first 2", "\n", "for", "encoding", "in", "red_dependencies", ":", "\n", "                        ", "cond_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                            ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                            ", "cond_list", "=", "out_cond", "\n", "", "avg_cond", "+=", "cond_list", "[", "conv_layer_idx", "]", "\n", "# print(encoding, conv_layer_idx)", "\n", "# print('rank list: ', cond_list[conv_layer_idx])", "\n", "# print(avg_cond)", "\n", "", "avg_cond", "/=", "2", "\n", "# print(avg_cond)", "\n", "chan_dependencies", "=", "chan_dependencies", "[", "2", ":", "]", "# will continue after the first 2", "\n", "# find avg rank of the dependent layers", "\n", "", "for", "i", ",", "encoding", "in", "enumerate", "(", "chan_dependencies", ")", ":", "\n", "                    ", "cond_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                        ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                        ", "cond_list", "=", "out_cond", "\n", "", "avg_cond", "+=", "cond_list", "[", "conv_layer_idx", "]", "\n", "# if cur_cell_type == 'norm_red_cell' and j == 0:", "\n", "#     print(i,encoding,conv_layer_idx)", "\n", "#     print('rank list: ',cond_list[conv_layer_idx])", "\n", "#     print(avg_cond)", "\n", "", "if", "cur_cell_type", "==", "'norm_red_cell'", "and", "j", "==", "0", ":", "\n", "                    ", "i", "+=", "1", "# consider the first pair as 1 value", "\n", "", "", "avg_cond", "/=", "(", "i", "+", "1", ")", "# calculate avg of dependent ranks", "\n", "cur_cell_avg_conds", ".", "append", "(", "avg_cond", ")", "\n", "", "cell_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_avg_conds", ")", ")", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "cell_cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_sep_conv_list_mapping_condition": [[408, 454], ["list", "enumerate", "copy.deepcopy", "list", "list.append", "enumerate", "list.append", "copy.deepcopy", "int", "numpy.array", "encoding.split", "encoding.split"], "function", ["None"], ["", "def", "get_sep_conv_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", ":", "\n", "# cell types: stem, norm_cell, red_cell, norm_red_cell", "\n", "# encoding is '{in/out}_cond-{conv_layer_offset}'. NOTE: conv_layer_idx = cell_first_conv_idx + conv_layer_offset", "\n", "# sep conv channel size dependency mapping:", "\n", "    ", "norm_cell_sep_conv_mapping", "=", "[", "[", "'out_cond-3'", ",", "'in_cond-5'", "]", ",", "\n", "[", "'out_cond-7'", ",", "'in_cond-9'", "]", ",", "\n", "[", "'out_cond-11'", ",", "'in_cond-13'", "]", ",", "\n", "[", "'out_cond-15'", ",", "'in_cond-17'", "]", ",", "\n", "[", "'out_cond-19'", ",", "'in_cond-21'", "]", ",", "\n", "[", "'out_cond-23'", ",", "'in_cond-25'", "]", "\n", "]", "\n", "norm_red_cell_sep_conv_mapping", "=", "[", "[", "'out_cond-4'", ",", "'in_cond-6'", "]", ",", "\n", "[", "'out_cond-8'", ",", "'in_cond-10'", "]", ",", "\n", "[", "'out_cond-12'", ",", "'in_cond-14'", "]", ",", "\n", "[", "'out_cond-16'", ",", "'in_cond-18'", "]", ",", "\n", "[", "'out_cond-20'", ",", "'in_cond-22'", "]", ",", "\n", "[", "'out_cond-24'", ",", "'in_cond-26'", "]", "\n", "]", "\n", "\n", "sep_conv_avg_cond", "=", "list", "(", ")", "\n", "# explore each cells we have", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_sep_conv_avg_conds", "=", "list", "(", ")", "\n", "cur_cell_type", "=", "cells_type", "[", "cur_cell_idx", "]", "\n", "if", "cur_cell_type", "==", "'norm_cell'", ":", "\n", "            ", "mapping", "=", "norm_cell_sep_conv_mapping", "\n", "", "elif", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "mapping", "=", "norm_red_cell_sep_conv_mapping", "\n", "# for each sep_conv group, find avg cond", "\n", "", "if", "cur_cell_type", "==", "'norm_cell'", "or", "cur_cell_type", "==", "'norm_red_cell'", ":", "\n", "            ", "for", "sep_conv_dependencies", "in", "mapping", ":", "\n", "                ", "avg_cond", "=", "0", "# initialize avg cond for current channel size", "\n", "for", "i", ",", "encoding", "in", "enumerate", "(", "sep_conv_dependencies", ")", ":", "\n", "                    ", "cond_type", "=", "encoding", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "conv_layer_offset", "=", "int", "(", "encoding", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "conv_layer_idx", "=", "first_conv_idx", "+", "conv_layer_offset", "\n", "if", "cond_type", "==", "'in_cond'", ":", "\n", "                        ", "cond_list", "=", "in_cond", "\n", "", "else", ":", "\n", "                        ", "cond_list", "=", "out_cond", "\n", "", "avg_cond", "+=", "cond_list", "[", "conv_layer_idx", "]", "\n", "", "avg_cond", "/=", "(", "i", "+", "1", ")", "\n", "cur_sep_conv_avg_conds", ".", "append", "(", "avg_cond", ")", "\n", "", "sep_conv_avg_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_sep_conv_avg_conds", ")", ")", ")", "\n", "# print(sep_conv_avg_cond[2])", "\n", "", "", "return", "copy", ".", "deepcopy", "(", "sep_conv_avg_cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.round_even": [[456, 458], ["int", "round"], "function", ["None"], ["", "def", "round_even", "(", "number", ")", ":", "\n", "    ", "return", "int", "(", "round", "(", "number", "/", "2", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.initialize_algorithm": [[461, 471], ["list", "list", "len", "numpy.zeros", "numpy.full", "list.append", "list.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "function", ["None"], ["", "def", "initialize_algorithm", "(", "conv_list", ",", "factor_scale", ")", ":", "\n", "    ", "prev_op_list", "=", "list", "(", ")", "\n", "factor_list", "=", "list", "(", ")", "\n", "for", "cell", "in", "conv_list", ":", "\n", "        ", "cell_adjustable_convs", "=", "len", "(", "cell", ")", "\n", "cell_op", "=", "np", ".", "zeros", "(", "cell_adjustable_convs", ",", "dtype", "=", "int", ")", "\n", "cell_factor", "=", "np", ".", "full", "(", "cell_adjustable_convs", ",", "factor_scale", ")", "\n", "prev_op_list", ".", "append", "(", "copy", ".", "deepcopy", "(", "cell_op", ")", ")", "\n", "factor_list", ".", "append", "(", "(", "copy", ".", "deepcopy", "(", "cell_factor", ")", ")", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "prev_op_list", ")", ",", "copy", ".", "deepcopy", "(", "factor_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.channel_size_adjust_algorithm": [[474, 549], ["dartsplus_scaling_algorithms.find_cell_first_conv_idx", "dartsplus_scaling_algorithms.get_cells_type", "dartsplus_scaling_algorithms.get_layer_conv_ranks", "dartsplus_scaling_algorithms.get_cell_list_ranks_by_dependency", "dartsplus_scaling_algorithms.get_sep_conv_list_ranks_by_dependency", "dartsplus_scaling_algorithms.find_rank_avg_slope", "dartsplus_scaling_algorithms.find_rank_avg_slope", "dartsplus_scaling_algorithms.get_layer_mapping", "dartsplus_scaling_algorithms.get_cell_list_mapping_condition", "dartsplus_scaling_algorithms.get_sep_conv_list_mapping_condition", "enumerate", "enumerate", "dartsplus_scaling_algorithms.initialize_algorithm", "dartsplus_scaling_algorithms.initialize_algorithm", "enumerate", "enumerate", "len", "dartsplus_scaling_algorithms.round_even", "dartsplus_scaling_algorithms.round_even"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_cell_first_conv_idx", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cells_type", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_layer_conv_ranks", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cell_list_ranks_by_dependency", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_sep_conv_list_ranks_by_dependency", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_rank_avg_slope", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_rank_avg_slope", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_layer_mapping", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_cell_list_mapping_condition", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.dartsplus_scaling_algorithms.get_sep_conv_list_mapping_condition", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.initialize_algorithm", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.initialize_algorithm", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.round_even", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.round_even"], ["", "def", "channel_size_adjust_algorithm", "(", "cell_list", ",", "sep_conv_list", ",", "delta_threshold", ",", "factor_scale", ",", "min_scale_limit", ",", "map_cond_threshold", ",", "\n", "min_conv_size", ",", "max_conv_size", ",", "trial_dir", ",", "cur_trial", ",", "cell_list_prev_ops", "=", "None", ",", "\n", "cell_list_factor", "=", "None", ",", "sep_conv_list_prev_ops", "=", "None", ",", "sep_conv_list_factor", "=", "None", ")", ":", "\n", "    ", "first_trial", "=", "False", "\n", "if", "len", "(", "cell_list_prev_ops", ")", "==", "0", "or", "cell_list_prev_ops", "==", "None", ":", "\n", "        ", "first_trial", "=", "True", "\n", "cell_list_prev_ops", ",", "cell_list_factor", "=", "initialize_algorithm", "(", "cell_list", ",", "factor_scale", ")", "\n", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", "=", "initialize_algorithm", "(", "sep_conv_list", ",", "factor_scale", ")", "\n", "# assert len(sep_conv_list_prev_ops) != 0 and sep_conv_list_prev_ops != None", "\n", "\n", "# get the avg rank slope of each adjustable channel sizes", "\n", "", "cell_first_layer_idx", "=", "find_cell_first_conv_idx", "(", "cell_list", ")", "\n", "cells_type", "=", "get_cells_type", "(", "cell_list", ")", "\n", "layers_in_rank", ",", "layers_out_rank", "=", "get_layer_conv_ranks", "(", "trial_dir", ",", "cur_trial", ")", "\n", "cell_list_avg_ranks", "=", "get_cell_list_ranks_by_dependency", "(", "layers_in_rank", ",", "layers_out_rank", ",", "cell_first_layer_idx", ",", "\n", "cells_type", ")", "\n", "sep_conv_list_avg_ranks", "=", "get_sep_conv_list_ranks_by_dependency", "(", "layers_in_rank", ",", "layers_out_rank", ",", "\n", "cell_first_layer_idx", ",", "cells_type", ")", "\n", "cell_list_rank_slopes", "=", "find_rank_avg_slope", "(", "cell_list_avg_ranks", ")", "\n", "sep_conv_list_rank_slopes", "=", "find_rank_avg_slope", "(", "sep_conv_list_avg_ranks", ")", "\n", "\n", "# get the avg mapping condition for each adjustable channel sizes", "\n", "in_cond", ",", "out_cond", "=", "get_layer_mapping", "(", "trial_dir", ",", "cur_trial", ")", "\n", "cell_list_cond", "=", "get_cell_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", "\n", "sep_conv_list_cond", "=", "get_sep_conv_list_mapping_condition", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ",", "cells_type", ")", "\n", "\n", "# algorithm: operation = expand:1/shrink:-1/stop:0", "\n", "for", "cell_idx", ",", "cell", "in", "enumerate", "(", "cell_list_rank_slopes", ")", ":", "\n", "        ", "for", "chan_idx", ",", "avg_rank_slope", "in", "enumerate", "(", "cell", ")", ":", "\n", "            ", "map_cond", "=", "cell_list_cond", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_size", "=", "cell_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "prev_op", "=", "cell_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_scale", "=", "cell_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "if", "not", "first_trial", "and", "prev_op", "==", "0", ":", "\n", "                ", "continue", "# if threshold already satisfied, skip this conv", "\n", "", "cur_op", "=", "1", "# initialize operation to expand first.", "\n", "if", "(", "(", "avg_rank_slope", "<", "delta_threshold", "or", "map_cond", ">=", "map_cond_threshold", ")", "and", "chan_size", ">", "min_conv_size", ")", "or", "(", "chan_size", ">", "max_conv_size", ")", ":", "\n", "                ", "cur_op", "=", "-", "1", "\n", "", "if", "prev_op", "!=", "cur_op", "and", "not", "first_trial", ":", "\n", "                ", "if", "chan_scale", "<", "min_scale_limit", ":", "\n", "                    ", "cur_op", "=", "0", "\n", "", "cell_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "chan_scale", "/", "2", "\n", "", "cell_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "cur_op", "\n", "new_cell_size", "=", "round_even", "(", "chan_size", "*", "(", "1", "+", "cell_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "*", "cur_op", ")", ")", "\n", "if", "new_cell_size", ">", "max_conv_size", ":", "\n", "                ", "new_cell_size", "=", "max_conv_size", "\n", "", "elif", "new_cell_size", "<", "min_conv_size", ":", "\n", "                ", "new_cell_size", "=", "min_conv_size", "\n", "", "cell_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "new_cell_size", "\n", "\n", "# do same thing for sep_conv_list", "\n", "", "", "for", "cell_idx", ",", "cell", "in", "enumerate", "(", "sep_conv_list_rank_slopes", ")", ":", "\n", "        ", "for", "chan_idx", ",", "avg_rank_slope", "in", "enumerate", "(", "cell", ")", ":", "\n", "            ", "map_cond", "=", "sep_conv_list_cond", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_size", "=", "sep_conv_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "prev_op", "=", "sep_conv_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_scale", "=", "sep_conv_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "if", "not", "first_trial", "and", "prev_op", "==", "0", ":", "\n", "                ", "continue", "# if already really close to threshold, skip this conv", "\n", "", "cur_op", "=", "1", "# initialize operation to expand first.", "\n", "if", "(", "(", "avg_rank_slope", "<", "delta_threshold", "or", "map_cond", ">=", "map_cond_threshold", ")", "and", "chan_size", ">", "min_conv_size", ")", "or", "(", "chan_size", ">", "max_conv_size", ")", ":", "\n", "                ", "cur_op", "=", "-", "1", "\n", "", "if", "prev_op", "!=", "cur_op", "and", "not", "first_trial", ":", "\n", "                ", "if", "chan_scale", "<", "min_scale_limit", ":", "\n", "                    ", "cur_op", "=", "0", "\n", "", "sep_conv_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "chan_scale", "/", "2", "\n", "", "sep_conv_list_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "cur_op", "\n", "new_sep_size", "=", "round_even", "(", "chan_size", "*", "(", "1", "+", "sep_conv_list_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "*", "cur_op", ")", ")", "\n", "if", "new_sep_size", ">", "max_conv_size", ":", "\n", "                ", "new_sep_size", "=", "max_conv_size", "\n", "", "elif", "new_sep_size", "<", "min_conv_size", ":", "\n", "                ", "new_sep_size", "=", "min_conv_size", "\n", "", "sep_conv_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "new_sep_size", "\n", "\n", "", "", "return", "cell_list", ",", "sep_conv_list", ",", "cell_list_rank_slopes", ",", "cell_list_prev_ops", ",", "cell_list_factor", ",", "sep_conv_list_rank_slopes", ",", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", ",", "cell_list_avg_ranks", ",", "sep_conv_list_avg_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_cell_first_conv_idx": [[32, 41], ["len", "len", "len"], "function", ["None"], ["def", "find_cell_first_conv_idx", "(", "conv_size_list", ")", ":", "\n", "    ", "cells_first_layer_idx", "=", "[", "0", "]", "\n", "counter", "=", "-", "1", "\n", "for", "j", "in", "conv_size_list", ":", "\n", "        ", "if", "len", "(", "cells_first_layer_idx", ")", "==", "len", "(", "conv_size_list", ")", ":", "\n", "            ", "break", "\n", "", "counter", "+=", "len", "(", "j", ")", "+", "1", "\n", "cells_first_layer_idx", "+=", "[", "counter", "]", "\n", "", "return", "cells_first_layer_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_layer_conv_ranks": [[44, 69], ["os.listdir", "list", "list", "numpy.array().transpose", "numpy.array().transpose", "str", "file.startswith", "file.endswith", "os.path.join", "pandas.read_excel", "numpy.array", "numpy.array", "pd.read_excel.loc[].tolist", "np.array().transpose.append", "pd.read_excel.loc[].tolist", "np.array().transpose.append", "col.startswith", "copy.deepcopy", "col.startswith", "copy.deepcopy", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_layer_conv_ranks", "(", "trial_dir", ",", "cur_trial", ")", ":", "\n", "    ", "cur_trial", "=", "'AdaS_adapt_trial=%s'", "%", "str", "(", "cur_trial", ")", "\n", "file_list", "=", "os", ".", "listdir", "(", "trial_dir", ")", "\n", "in_rank", "=", "list", "(", ")", "\n", "out_rank", "=", "list", "(", ")", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "if", "file", ".", "startswith", "(", "cur_trial", ")", "and", "file", ".", "endswith", "(", "'.xlsx'", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "file", ")", "\n", "df_trial", "=", "pd", ".", "read_excel", "(", "file_path", ",", "index_col", "=", "0", ")", "\n", "# find all in_rank at each layer for all epochs", "\n", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'in_rank'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "in_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "# find all out_rank at each layer for all epochs", "\n", "", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'out_rank'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "out_rank", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "", "break", "\n", "", "", "in_rank", "=", "np", ".", "array", "(", "in_rank", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "# [epoch,layer] -> [layer,epoch]", "\n", "out_rank", "=", "np", ".", "array", "(", "out_rank", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "in_rank", ",", "out_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_ranks_avg": [[71, 94], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "get_cell_ranks_avg", "(", "in_rank", ",", "out_rank", ",", "first_conv_idx", ",", "last_conv_idx", ",", "total_epoch", ")", ":", "\n", "    ", "cell_avg", "=", "np", ".", "zeros", "(", "total_epoch", ")", "\n", "in_rank_true", "=", "True", "# flips from true to false and back to true", "\n", "shortcut_layer", "=", "first_conv_idx", "+", "2", "\n", "count", "=", "0", "\n", "# skip layer 0 (gate layer)", "\n", "if", "first_conv_idx", "==", "0", ":", "\n", "        ", "first_conv_idx", "=", "1", "\n", "", "for", "layer_idx", "in", "range", "(", "first_conv_idx", ",", "last_conv_idx", "+", "1", ")", ":", "\n", "# skip the shortcut layer", "\n", "        ", "if", "layer_idx", "==", "shortcut_layer", "and", "first_conv_idx", "!=", "1", ":", "\n", "            ", "continue", "\n", "", "if", "in_rank_true", ":", "\n", "            ", "rank", "=", "in_rank", "[", "layer_idx", "]", "\n", "in_rank_true", "=", "False", "\n", "# print(\"in layer \",layer_idx)", "\n", "", "else", ":", "\n", "            ", "rank", "=", "out_rank", "[", "layer_idx", "]", "\n", "in_rank_true", "=", "True", "\n", "# print(\"out layer \", layer_idx)", "\n", "", "cell_avg", "+=", "rank", "\n", "count", "+=", "1", "\n", "", "return", "cell_avg", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_layer_ranks_by_dependency": [[97, 140], ["list", "enumerate", "list", "resnet_scaling_algorithm.get_cell_ranks_avg", "range", "list.append", "list.append", "list.append", "copy.deepcopy", "len", "copy.deepcopy", "list.append", "copy.deepcopy", "numpy.array", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_ranks_avg"], ["", "def", "get_cell_layer_ranks_by_dependency", "(", "in_rank", ",", "out_rank", ",", "cell_first_layer_idx", ")", ":", "\n", "    ", "total_epoch", "=", "in_rank", ".", "shape", "[", "1", "]", "\n", "total_layer", "=", "in_rank", ".", "shape", "[", "0", "]", "\n", "channel_size_avg_ranks", "=", "list", "(", ")", "\n", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_cell_avg_ranks", "=", "list", "(", ")", "\n", "if", "cur_cell_idx", "==", "len", "(", "cell_first_layer_idx", ")", "-", "1", ":", "\n", "            ", "last_conv_idx", "=", "total_layer", "-", "1", "\n", "", "else", ":", "\n", "            ", "last_conv_idx", "=", "cell_first_layer_idx", "[", "cur_cell_idx", "+", "1", "]", "-", "1", "\n", "#print(first_conv_idx, last_conv_idx)", "\n", "", "shortcut_layer_idx", "=", "first_conv_idx", "+", "2", "\n", "# average of the entire cell ranks, used for C0 (as noted in paper)", "\n", "cell_avg", "=", "get_cell_ranks_avg", "(", "in_rank", ",", "out_rank", ",", "first_conv_idx", ",", "last_conv_idx", ",", "total_epoch", ")", "\n", "\n", "# first cell starts with a gate layer and the conv size is C0", "\n", "if", "cur_cell_idx", "==", "0", ":", "\n", "            ", "cur_cell_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "cell_avg", ")", ")", "\n", "first_conv_idx", "=", "1", "\n", "", "is_C0", "=", "False", "# alternates between False and True", "\n", "for", "layer_idx", "in", "range", "(", "first_conv_idx", ",", "last_conv_idx", "+", "1", ")", ":", "\n", "# skip shortcut layers", "\n", "            ", "if", "layer_idx", "==", "shortcut_layer_idx", "and", "cur_cell_idx", "!=", "0", ":", "\n", "#print(\"is shortcut\")", "\n", "                ", "continue", "\n", "# if the channel size is C0, use the entire cell rank avg", "\n", "", "if", "is_C0", ":", "\n", "                ", "cur_cell_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "cell_avg", ")", ")", "\n", "is_C0", "=", "False", "\n", "#print(\"is C0\")", "\n", "continue", "\n", "# if its pair is shortcut layer, skip it (shouldn't be invoked?)", "\n", "", "if", "layer_idx", "+", "1", "==", "shortcut_layer_idx", "and", "cur_cell_idx", "!=", "0", ":", "\n", "                ", "pair_next", "=", "layer_idx", "+", "2", "\n", "", "else", ":", "\n", "                ", "pair_next", "=", "layer_idx", "+", "1", "\n", "", "pair_avg", "=", "(", "out_rank", "[", "layer_idx", "]", "+", "in_rank", "[", "pair_next", "]", ")", "/", "2", "\n", "cur_cell_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "pair_avg", ")", ")", "\n", "#print(\"out \", layer_idx, \",in \", pair_next)", "\n", "is_C0", "=", "True", "\n", "", "channel_size_avg_ranks", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_avg_ranks", ")", ")", ")", "\n", "", "return", "channel_size_avg_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_rank_avg_slope": [[142, 160], ["list", "enumerate", "list", "list.append", "numpy.argmax", "list.append", "copy.deepcopy", "numpy.array"], "function", ["None"], ["", "def", "find_rank_avg_slope", "(", "cell_avg_ranks", ")", ":", "\n", "    ", "cell_rank_slopes", "=", "list", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "cell_avg_ranks", ")", ":", "\n", "        ", "cur_cell_rank_slopes", "=", "list", "(", ")", "\n", "for", "avg_rank", "in", "cell", ":", "\n", "            ", "max_rank_epoch", "=", "np", ".", "argmax", "(", "avg_rank", ")", "# find the index (epoch#) where the max avg rank is", "\n", "rank_delta", "=", "avg_rank", "[", "max_rank_epoch", "]", "-", "avg_rank", "[", "0", "]", "\n", "epoch_delta", "=", "max_rank_epoch", "-", "0", "\n", "rank_slope", "=", "rank_delta", "/", "(", "epoch_delta", "+", "0.0001", ")", "\n", "cur_cell_rank_slopes", ".", "append", "(", "rank_slope", ")", "\n", "# if i == 0:", "\n", "#     print(\"max rank epoch: \",max_rank_epoch)", "\n", "#     print(\"max rank: \", avg_rank[max_rank_epoch])", "\n", "#     print(\"initial rank: \", avg_rank[0])", "\n", "", "cell_rank_slopes", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_rank_slopes", ")", ")", ")", "\n", "# print(cell_avg_ranks[1])", "\n", "# print(cell_rank_slopes[1])", "\n", "", "return", "cell_rank_slopes", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_layer_cond": [[162, 186], ["os.listdir", "list", "list", "str", "copy.deepcopy", "copy.deepcopy", "file.startswith", "file.endswith", "os.path.join", "pandas.read_excel", "pd.read_excel.loc[].tolist", "list.append", "pd.read_excel.loc[].tolist", "list.append", "col.startswith", "copy.deepcopy", "col.startswith", "copy.deepcopy", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_layer_cond", "(", "trial_dir", ",", "cur_trial", ")", ":", "\n", "    ", "cur_trial", "=", "'AdaS_adapt_trial=%s'", "%", "str", "(", "cur_trial", ")", "\n", "file_list", "=", "os", ".", "listdir", "(", "trial_dir", ")", "\n", "in_cond", "=", "list", "(", ")", "\n", "out_cond", "=", "list", "(", ")", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "if", "file", ".", "startswith", "(", "cur_trial", ")", "and", "file", ".", "endswith", "(", "'.xlsx'", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "file", ")", "\n", "df_trial", "=", "pd", ".", "read_excel", "(", "file_path", ",", "index_col", "=", "0", ")", "\n", "# find all in_rank at each layer for all epochs", "\n", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'in_condition'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "in_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "\n", "# find all out_rank at each layer for all epochs", "\n", "", "cols", "=", "[", "col", "for", "col", "in", "df_trial", "if", "col", ".", "startswith", "(", "'out_condition'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "temp", "=", "df_trial", ".", "loc", "[", ":", ",", "col", "]", ".", "tolist", "(", ")", "\n", "out_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "temp", ")", ")", ")", "\n", "", "break", "\n", "# in_cond = np.array(in_cond).transpose((1,0)) # [epoch,layer] -> [layer,epoch]", "\n", "# out_cond = np.array(out_cond).transpose((1,0))", "\n", "", "", "return", "copy", ".", "deepcopy", "(", "in_cond", "[", "-", "1", "]", ")", ",", "copy", ".", "deepcopy", "(", "out_cond", "[", "-", "1", "]", ")", "# only return last epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_cond_avg": [[188, 211], ["range"], "function", ["None"], ["", "def", "get_cell_cond_avg", "(", "in_cond", ",", "out_cond", ",", "first_conv_idx", ",", "last_conv_idx", ",", "total_epoch", ")", ":", "\n", "    ", "cell_avg", "=", "0", "\n", "in_cond_true", "=", "True", "# flips from true to false and back to true", "\n", "shortcut_layer", "=", "first_conv_idx", "+", "2", "\n", "count", "=", "0", "\n", "# skip layer 0 (gate layer)", "\n", "if", "first_conv_idx", "==", "0", ":", "\n", "        ", "first_conv_idx", "=", "1", "\n", "", "for", "layer_idx", "in", "range", "(", "first_conv_idx", ",", "last_conv_idx", "+", "1", ")", ":", "\n", "# skip the shortcut layer", "\n", "        ", "if", "layer_idx", "==", "shortcut_layer", "and", "first_conv_idx", "!=", "1", ":", "\n", "            ", "continue", "\n", "", "if", "in_cond_true", ":", "\n", "            ", "cond", "=", "in_cond", "[", "layer_idx", "]", "\n", "in_cond_true", "=", "False", "\n", "# print(\"in layer \",layer_idx)", "\n", "", "else", ":", "\n", "            ", "cond", "=", "out_cond", "[", "layer_idx", "]", "\n", "in_cond_true", "=", "True", "\n", "# print(\"out layer \", layer_idx)", "\n", "", "cell_avg", "+=", "cond", "\n", "count", "+=", "1", "\n", "", "return", "cell_avg", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_layer_cond_by_dependency": [[213, 256], ["list", "enumerate", "list", "resnet_scaling_algorithm.get_cell_cond_avg", "range", "list.append", "list.append", "list.append", "copy.deepcopy", "len", "copy.deepcopy", "list.append", "numpy.array", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_cond_avg"], ["", "def", "get_cell_layer_cond_by_dependency", "(", "in_cond", ",", "out_cond", ",", "cell_first_layer_idx", ")", ":", "\n", "    ", "total_epoch", "=", "0", "#in_cond and out_cond only has the values for the LAST layer", "\n", "total_layer", "=", "in_cond", ".", "shape", "[", "0", "]", "\n", "channel_size_avg_cond", "=", "list", "(", ")", "\n", "\n", "for", "cur_cell_idx", ",", "first_conv_idx", "in", "enumerate", "(", "cell_first_layer_idx", ")", ":", "\n", "        ", "cur_cell_avg_cond", "=", "list", "(", ")", "\n", "if", "cur_cell_idx", "==", "len", "(", "cell_first_layer_idx", ")", "-", "1", ":", "\n", "            ", "last_conv_idx", "=", "total_layer", "-", "1", "\n", "", "else", ":", "\n", "            ", "last_conv_idx", "=", "cell_first_layer_idx", "[", "cur_cell_idx", "+", "1", "]", "-", "1", "\n", "#print(first_conv_idx, last_conv_idx)", "\n", "", "shortcut_layer_idx", "=", "first_conv_idx", "+", "2", "\n", "# average of the entire cell ranks, used for C0 (as noted in paper)", "\n", "cell_avg", "=", "get_cell_cond_avg", "(", "in_cond", ",", "out_cond", ",", "first_conv_idx", ",", "last_conv_idx", ",", "total_epoch", ")", "\n", "\n", "# first cell starts with a gate layer and the conv size is C0", "\n", "if", "cur_cell_idx", "==", "0", ":", "\n", "            ", "cur_cell_avg_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "cell_avg", ")", ")", "\n", "first_conv_idx", "=", "1", "\n", "", "is_C0", "=", "False", "# alternates between False and True", "\n", "for", "layer_idx", "in", "range", "(", "first_conv_idx", ",", "last_conv_idx", "+", "1", ")", ":", "\n", "# skip shortcut layers", "\n", "            ", "if", "layer_idx", "==", "shortcut_layer_idx", "and", "cur_cell_idx", "!=", "0", ":", "\n", "#print(\"is shortcut\")", "\n", "                ", "continue", "\n", "# if the channel size is C0, use the entire cell rank avg", "\n", "", "if", "is_C0", ":", "\n", "                ", "cur_cell_avg_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "cell_avg", ")", ")", "\n", "is_C0", "=", "False", "\n", "#print(\"is C0\")", "\n", "continue", "\n", "# if its pair is shortcut layer, skip it (shouldn't be invoked?)", "\n", "", "if", "layer_idx", "+", "1", "==", "shortcut_layer_idx", "and", "cur_cell_idx", "!=", "0", ":", "\n", "                ", "pair_next", "=", "layer_idx", "+", "2", "\n", "", "else", ":", "\n", "                ", "pair_next", "=", "layer_idx", "+", "1", "\n", "", "pair_avg", "=", "(", "out_cond", "[", "layer_idx", "]", "+", "in_cond", "[", "pair_next", "]", ")", "/", "2", "\n", "cur_cell_avg_cond", ".", "append", "(", "pair_avg", ")", "\n", "#print(\"out \", layer_idx, \",in \", pair_next)", "\n", "is_C0", "=", "True", "\n", "", "channel_size_avg_cond", ".", "append", "(", "copy", ".", "deepcopy", "(", "np", ".", "array", "(", "cur_cell_avg_cond", ")", ")", ")", "\n", "", "return", "channel_size_avg_cond", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.initialize_algorithm": [[259, 269], ["list", "list", "len", "numpy.zeros", "numpy.full", "list.append", "list.append", "copy.deepcopy", "copy.deepcopy"], "function", ["None"], ["", "def", "initialize_algorithm", "(", "conv_list", ")", ":", "\n", "    ", "prev_op_list", "=", "list", "(", ")", "\n", "factor_list", "=", "list", "(", ")", "\n", "for", "cell", "in", "conv_list", ":", "\n", "        ", "cell_adjustable_convs", "=", "len", "(", "cell", ")", "\n", "cell_op", "=", "np", ".", "zeros", "(", "cell_adjustable_convs", ",", "dtype", "=", "int", ")", "\n", "cell_factor", "=", "np", ".", "full", "(", "cell_adjustable_convs", ",", "factor_scale", ")", "\n", "prev_op_list", ".", "append", "(", "copy", ".", "deepcopy", "(", "cell_op", ")", ")", "\n", "factor_list", ".", "append", "(", "(", "copy", ".", "deepcopy", "(", "cell_factor", ")", ")", ")", "\n", "", "return", "prev_op_list", ",", "factor_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.round_even": [[271, 273], ["int", "round"], "function", ["None"], ["", "def", "round_even", "(", "number", ")", ":", "\n", "    ", "return", "int", "(", "round", "(", "number", "/", "2", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.channel_size_adjust_algorithm": [[276, 319], ["resnet_scaling_algorithm.find_cell_first_conv_idx", "resnet_scaling_algorithm.get_layer_conv_ranks", "resnet_scaling_algorithm.get_cell_layer_ranks_by_dependency", "resnet_scaling_algorithm.find_rank_avg_slope", "resnet_scaling_algorithm.get_layer_cond", "resnet_scaling_algorithm.get_cell_layer_cond_by_dependency", "enumerate", "resnet_scaling_algorithm.initialize_algorithm", "enumerate", "len", "resnet_scaling_algorithm.round_even"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_cell_first_conv_idx", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_layer_conv_ranks", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_layer_ranks_by_dependency", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.find_rank_avg_slope", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_layer_cond", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.get_cell_layer_cond_by_dependency", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.initialize_algorithm", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.resnet_scaling_algorithm.round_even"], ["", "def", "channel_size_adjust_algorithm", "(", "conv_size_list", ",", "delta_threshold", ",", "factor_scale", ",", "min_scale_limit", ",", "map_cond_threshold", ",", "min_conv_size", ",", "max_conv_size", ",", "\n", "trial_dir", ",", "cur_trial", ",", "cell_layer_prev_ops", ",", "cell_layer_factor", ")", ":", "\n", "    ", "first_trial", "=", "False", "\n", "if", "len", "(", "cell_layer_prev_ops", ")", "==", "0", "or", "cell_layer_prev_ops", "==", "None", ":", "\n", "        ", "first_trial", "=", "True", "\n", "cell_layer_prev_ops", ",", "cell_layer_factor", "=", "initialize_algorithm", "(", "conv_size_list", ",", "factor_scale", ")", "\n", "\n", "# get the avg rank slope of each adjustable channel sizes", "\n", "", "cells_first_layer_idx", "=", "find_cell_first_conv_idx", "(", "conv_size_list", ")", "\n", "in_rank", ",", "out_rank", "=", "get_layer_conv_ranks", "(", "trial_dir", ",", "cur_trial", ")", "\n", "cell_layer_avg_ranks", "=", "get_cell_layer_ranks_by_dependency", "(", "in_rank", ",", "out_rank", ",", "cells_first_layer_idx", ")", "\n", "cell_layer_rank_slopes", "=", "find_rank_avg_slope", "(", "cell_layer_avg_ranks", ")", "\n", "\n", "# get the avg mapping condition for each adjustable channel sizes", "\n", "in_cond", ",", "out_cond", "=", "get_layer_cond", "(", "trial_dir", ",", "cur_trial", ")", "\n", "cell_layer_cond", "=", "get_cell_layer_cond_by_dependency", "(", "in_cond", ",", "out_cond", ",", "cells_first_layer_idx", ")", "\n", "\n", "# algorithm: operation = expand:1/shrink:-1/stop:0", "\n", "for", "cell_idx", ",", "cell", "in", "enumerate", "(", "cell_layer_rank_slopes", ")", ":", "\n", "        ", "for", "chan_idx", ",", "avg_rank_slope", "in", "enumerate", "(", "cell", ")", ":", "\n", "            ", "map_cond", "=", "cell_layer_cond", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_size", "=", "conv_size_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "prev_op", "=", "cell_layer_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "chan_scale", "=", "cell_layer_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "\n", "if", "not", "first_trial", "and", "prev_op", "==", "0", ":", "\n", "                ", "continue", "# if threshold already satisfied, skip this conv", "\n", "", "cur_op", "=", "1", "# initialize operation to expand first.", "\n", "if", "(", "(", "avg_rank_slope", "<", "delta_threshold", "or", "map_cond", ">=", "map_cond_threshold", ")", "and", "chan_size", ">", "min_conv_size", ")", "or", "(", "\n", "chan_size", ">", "max_conv_size", ")", ":", "\n", "                ", "cur_op", "=", "-", "1", "\n", "", "if", "prev_op", "!=", "cur_op", "and", "not", "first_trial", ":", "\n", "                ", "if", "chan_scale", "<", "min_scale_limit", ":", "\n", "                    ", "cur_op", "=", "0", "\n", "", "cell_layer_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "chan_scale", "/", "2", "\n", "", "cell_layer_prev_ops", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "cur_op", "\n", "new_cell_size", "=", "round_even", "(", "chan_size", "*", "(", "1", "+", "cell_layer_factor", "[", "cell_idx", "]", "[", "chan_idx", "]", "*", "cur_op", ")", ")", "\n", "if", "new_cell_size", ">", "max_conv_size", ":", "\n", "                ", "new_cell_size", "=", "max_conv_size", "\n", "", "elif", "new_cell_size", "<", "min_conv_size", ":", "\n", "                ", "new_cell_size", "=", "min_conv_size", "\n", "", "conv_size_list", "[", "cell_idx", "]", "[", "chan_idx", "]", "=", "new_cell_size", "\n", "\n", "", "", "return", "conv_size_list", ",", "cell_layer_rank_slopes", ",", "cell_layer_prev_ops", ",", "cell_layer_factor", ",", "cell_layer_avg_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.update_network_DARTS": [[29, 91], ["eval", "print", "print", "model.NetworkCIFAR", "model.NetworkImageNet"], "function", ["None"], ["def", "update_network_DARTS", "(", "new_cell_list", "=", "None", ",", "new_sep_conv_list", "=", "None", ")", ":", "\n", "\n", "    ", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTS'", ":", "\n", "        ", "arch", "=", "\"DARTS\"", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTSPlus'", ":", "\n", "        ", "arch", "=", "\"DARTS_PLUS_CIFAR100\"", "\n", "", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "arch", ")", "\n", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "\"dataset\"", "]", "==", "'CIFAR10'", ":", "\n", "        ", "fc_dim", "=", "10", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "\"dataset\"", "]", "==", "'CIFAR100'", ":", "\n", "        ", "fc_dim", "=", "100", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "\"dataset\"", "]", "==", "'ImageNet'", ":", "\n", "        ", "fc_dim", "=", "1000", "\n", "\n", "", "assert", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "7", "or", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "14", "or", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "20", "\n", "\n", "\n", "if", "new_cell_list", "==", "None", ":", "\n", "        ", "if", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "20", ":", "\n", "            ", "if", "arch", "==", "\"DARTS\"", ":", "\n", "                ", "new_cell_list", "=", "GLOBALS", ".", "DARTS_cell_list_20", "\n", "", "else", ":", "\n", "                ", "new_cell_list", "=", "GLOBALS", ".", "DARTSPlus_cell_list_20", "\n", "\n", "", "", "elif", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "14", ":", "\n", "            ", "if", "arch", "==", "\"DARTS\"", ":", "\n", "                ", "new_cell_list", "=", "GLOBALS", ".", "DARTS_cell_list_14", "\n", "", "else", ":", "\n", "                ", "new_cell_list", "=", "GLOBALS", ".", "DARTSPlus_cell_list_14", "\n", "", "", "else", ":", "\n", "            ", "if", "arch", "==", "\"DARTS\"", ":", "\n", "                ", "new_cell_list", "=", "GLOBALS", ".", "DARTS_cell_list_7", "\n", "", "else", ":", "\n", "                ", "new_cell_list", "=", "GLOBALS", ".", "DARTSPlus_cell_list_7", "\n", "", "", "", "if", "new_sep_conv_list", "==", "None", ":", "\n", "        ", "if", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "20", ":", "\n", "            ", "if", "arch", "==", "\"DARTS\"", ":", "\n", "                ", "new_sep_conv_list", "=", "GLOBALS", ".", "DARTS_sep_conv_list_20", "\n", "", "else", ":", "\n", "                ", "new_sep_conv_list", "=", "GLOBALS", ".", "DARTSPlus_sep_conv_list_20", "\n", "", "", "elif", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "14", ":", "\n", "            ", "if", "arch", "==", "\"DARTS\"", ":", "\n", "                ", "new_sep_conv_list", "=", "GLOBALS", ".", "DARTS_sep_conv_list_14", "\n", "", "else", ":", "\n", "                ", "new_sep_conv_list", "=", "GLOBALS", ".", "DARTSPlus_sep_conv_list_14", "\n", "", "", "else", ":", "\n", "            ", "if", "arch", "==", "\"DARTS\"", ":", "\n", "                ", "new_sep_conv_list", "=", "GLOBALS", ".", "DARTS_sep_conv_list_7", "\n", "", "else", ":", "\n", "                ", "new_sep_conv_list", "=", "GLOBALS", ".", "DARTSPlus_sep_conv_list_7", "\n", "\n", "#The 10 is the number of classes in CIFAR10", "\n", "", "", "", "if", "GLOBALS", ".", "CONFIG", "[", "\"dataset\"", "]", "==", "'CIFAR10'", "or", "GLOBALS", ".", "CONFIG", "[", "\"dataset\"", "]", "==", "'CIFAR100'", ":", "\n", "        ", "new_network", "=", "Network", "(", "new_cell_list", ",", "new_sep_conv_list", ",", "fc_dim", ",", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'auxiliary'", "]", ",", "genotype", ",", "arch", ")", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "\"dataset\"", "]", "==", "'ImageNet'", ":", "\n", "        ", "new_network", "=", "Network_ImageNet", "(", "new_cell_list", ",", "new_sep_conv_list", ",", "fc_dim", ",", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", ",", "\n", "GLOBALS", ".", "CONFIG", "[", "'auxiliary'", "]", ",", "genotype", ",", "arch", ")", "\n", "", "print", "(", "\"Cell List:\"", ",", "new_cell_list", ")", "\n", "print", "(", "\"Sep Conv List:\"", ",", "new_sep_conv_list", ")", "\n", "new_network", ".", "drop_path_prob", "=", "0", "# Need to update this", "\n", "return", "new_network", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.find_best_acc_epoch": [[92, 99], ["list", "numpy.array().argmax", "list.append", "col.startswith", "float", "numpy.array"], "function", ["None"], ["", "def", "find_best_acc_epoch", "(", "df", ")", ":", "\n", "    ", "test_accs", "=", "list", "(", ")", "\n", "cols", "=", "[", "col", "for", "col", "in", "df", "if", "col", ".", "startswith", "(", "'test_acc_epoch'", ")", "]", "\n", "for", "col", "in", "cols", ":", "\n", "        ", "temp", "=", "float", "(", "df", "[", "col", "]", "[", "0", "]", ")", "*", "100", "\n", "test_accs", ".", "append", "(", "temp", ")", "\n", "", "return", "np", ".", "array", "(", "test_accs", ")", ".", "argmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.create_full_data_file_DARTS": [[100, 185], ["pandas.DataFrame", "pandas.read_excel", "train_DARTS.find_best_acc_epoch", "pandas.ExcelWriter", "pandas.ExcelWriter", "len", "list", "range", "pandas.DataFrame", "pd.DataFrame.to_excel", "wb_per.save", "pandas.DataFrame", "pd.DataFrame.to_excel", "wb_aux.save", "ptflops.get_model_complexity_info", "platform.system", "pd.DataFrame.to_excel", "pd.DataFrame.to_excel", "platform.system", "int", "int", "range", "ptflops.get_model_complexity_info", "int", "int", "len", "int", "int", "pd.read_excel.columns[].index", "int", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.find_best_acc_epoch"], ["", "def", "create_full_data_file_DARTS", "(", "new_network", ",", "full_fresh_file", ",", "output_path_string_full_train", ")", ":", "\n", "    ", "parameter_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'Accuracy (%)'", ",", "'Training Loss'", ",", "'GMacs'", ",", "'GFlops'", ",", "'Parameter Count (M)'", "]", ")", "\n", "\n", "#full_save_dfs=pd.read_excel(full_save_file)", "\n", "full_fresh_dfs", "=", "pd", ".", "read_excel", "(", "full_fresh_file", ")", "\n", "\n", "#final_epoch_save=full_save_dfs.columns[-1][(full_save_dfs.columns[-1].index('epoch_')+6):]", "\n", "final_epoch_fresh", "=", "full_fresh_dfs", ".", "columns", "[", "-", "1", "]", "[", "(", "full_fresh_dfs", ".", "columns", "[", "-", "1", "]", ".", "index", "(", "'epoch_'", ")", "+", "6", ")", ":", "]", "\n", "#best acc", "\n", "best_epoch_fresh", "=", "find_best_acc_epoch", "(", "full_fresh_dfs", ")", "\n", "\n", "#full_save_accuracy = full_save_dfs['test_acc_epoch_'+str(final_epoch_save)][0]*100", "\n", "full_fresh_accuracy", "=", "full_fresh_dfs", "[", "'test_acc_epoch_'", "+", "str", "(", "best_epoch_fresh", ")", "]", "[", "0", "]", "*", "100", "\n", "#full_save_loss = full_save_dfs['train_loss_epoch_'+str(final_epoch_save)][0]", "\n", "full_fresh_loss", "=", "full_fresh_dfs", "[", "'train_loss_epoch_'", "+", "str", "(", "best_epoch_fresh", ")", "]", "[", "0", "]", "\n", "\n", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR10'", "or", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'CIFAR100'", ":", "\n", "        ", "macs", ",", "params", "=", "get_model_complexity_info", "(", "new_network", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "False", ",", "print_per_layer_stat", "=", "False", ")", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'dataset'", "]", "==", "'ImageNet'", ":", "\n", "        ", "macs", ",", "params", "=", "get_model_complexity_info", "(", "new_network", ",", "(", "3", ",", "224", ",", "224", ")", ",", "as_strings", "=", "False", ",", "\n", "print_per_layer_stat", "=", "False", ")", "\n", "\n", "#save_parameter_size_list = [full_save_accuracy,full_save_loss,int(macs)/1000000000,2*int(macs)/1000000000,int(params)/1000000]", "\n", "", "fresh_parameter_size_list", "=", "[", "full_fresh_accuracy", ",", "full_fresh_loss", ",", "int", "(", "macs", ")", "/", "1000000000", ",", "2", "*", "int", "(", "macs", ")", "/", "1000000000", ",", "int", "(", "params", ")", "/", "1000000", "]", "\n", "#parameter_data.loc[len(parameter_data)] = save_parameter_size_list", "\n", "parameter_data", ".", "loc", "[", "len", "(", "parameter_data", ")", "]", "=", "fresh_parameter_size_list", "\n", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", ":", "\n", "        ", "parameter_data", ".", "to_excel", "(", "output_path_string_full_train", "+", "'\\\\'", "+", "'adapted_parameters.xlsx'", ")", "\n", "", "else", ":", "\n", "        ", "parameter_data", ".", "to_excel", "(", "output_path_string_full_train", "+", "'/'", "+", "'adapted_parameters.xlsx'", ")", "\n", "\n", "# Copied from master", "\n", "", "output_file", "=", "'default.xlsx'", "\n", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", ":", "\n", "        ", "performance_output_file", "=", "output_path_string_full_train", "+", "'\\\\'", "+", "'performance.xlsx'", "\n", "auxilary_output_file", "=", "output_path_string_full_train", "+", "'\\\\'", "+", "'auxilary.xlsx'", "\n", "", "else", ":", "\n", "        ", "performance_output_file", "=", "output_path_string_full_train", "+", "'/'", "+", "'performance.xlsx'", "\n", "auxilary_output_file", "=", "output_path_string_full_train", "+", "'/'", "+", "'auxilary.xlsx'", "\n", "", "writer_performance", "=", "pd", ".", "ExcelWriter", "(", "performance_output_file", ",", "engine", "=", "'openpyxl'", ")", "\n", "wb_per", "=", "writer_performance", ".", "book", "\n", "writer_auxilary", "=", "pd", ".", "ExcelWriter", "(", "auxilary_output_file", ",", "engine", "=", "'openpyxl'", ")", "\n", "wb_aux", "=", "writer_auxilary", ".", "book", "\n", "\n", "performance_data", "=", "{", "}", "\n", "auxilary_data", "=", "{", "}", "\n", "performance_data", "[", "'Gmac'", "]", "=", "int", "(", "macs", ")", "/", "1000000000", "\n", "performance_data", "[", "'GFlop'", "]", "=", "2", "*", "int", "(", "macs", ")", "/", "1000000000", "\n", "performance_data", "[", "'parameter count (M)'", "]", "=", "int", "(", "params", ")", "/", "1000000", "\n", "\n", "num_layer", "=", "len", "(", "full_fresh_dfs", "[", "'train_acc_epoch_'", "+", "str", "(", "0", ")", "]", ")", "\n", "layer_list", "=", "list", "(", "range", "(", "0", ",", "num_layer", ")", ")", "\n", "auxilary_data", "[", "'layer_index'", "]", "=", "layer_list", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "final_epoch_fresh", ")", "+", "1", ")", ":", "\n", "        ", "performance_data", "[", "'train_acc_epoch_'", "+", "str", "(", "i", ")", "+", "\" (%)\"", "]", "=", "[", "full_fresh_dfs", "[", "'train_acc_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "*", "100", "]", "\n", "performance_data", "[", "'train_loss_epoch_'", "+", "str", "(", "i", ")", "]", "=", "[", "full_fresh_dfs", "[", "'train_loss_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "]", "\n", "performance_data", "[", "'test_acc_epoch_'", "+", "str", "(", "i", ")", "+", "\" (%)\"", "]", "=", "[", "full_fresh_dfs", "[", "'test_acc_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "*", "100", "]", "\n", "performance_data", "[", "'test_loss_epoch_'", "+", "str", "(", "i", ")", "]", "=", "[", "full_fresh_dfs", "[", "'test_loss_epoch_'", "+", "str", "(", "i", ")", "]", "[", "0", "]", "]", "\n", "\n", "auxilary_data", "[", "'in_KG_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'in_S_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'out_KG_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'out_S_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'in_rank_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'in_rank_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'out_rank_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'out_rank_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'in_condition_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'in_condition_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "auxilary_data", "[", "'out_condition_epcho'", "+", "str", "(", "i", ")", "]", "=", "full_fresh_dfs", "[", "'out_condition_epoch_'", "+", "str", "(", "i", ")", "]", "\n", "\n", "", "df_per", "=", "pd", ".", "DataFrame", "(", "performance_data", ")", "\n", "df_per", ".", "to_excel", "(", "writer_performance", ",", "index", "=", "False", ")", "\n", "wb_per", ".", "save", "(", "performance_output_file", ")", "\n", "\n", "df_aux", "=", "pd", ".", "DataFrame", "(", "auxilary_data", ")", "\n", "df_aux", ".", "to_excel", "(", "writer_auxilary", ",", "index", "=", "False", ")", "\n", "wb_aux", ".", "save", "(", "auxilary_output_file", ")", "\n", "\n", "if", "platform", ".", "system", "==", "'Windows'", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "\n", "#Hard coded path, copy into adas search folder", "\n", "# copyfile(GLOBALS.OUTPUT_PATH_STRING +slash+'..'+slash+'..'+slash+'.adas-checkpoint'+slash+'ckpt.pth', output_path_string_full_train + slash + 'ckpt.pth')", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.run_fresh_full_train_DARTS": [[186, 247], ["argparse.ArgumentParser", "train_help.get_args", "argparse.ArgumentParser.parse_args", "train_DARTS.update_network_DARTS", "train_help.initialize", "train_help.run_epochs", "print", "train_DARTS.update_network_DARTS"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.get_args", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.update_network_DARTS", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.initialize", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_help.run_epochs", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.update_network_DARTS"], ["", "def", "run_fresh_full_train_DARTS", "(", "epochs", ",", "output_path_fulltrain", ",", "cell_list", "=", "None", ",", "sep_conv_list", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Perform model evaluation for DARTS/DARTS+\n    \"\"\"", "\n", "\n", "GLOBALS", ".", "FIRST_INIT", "=", "False", "\n", "\n", "#optimizer,scheduler=network_initialize(new_network,train_loader)", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "#Just to build directories. Settings get overwritten below", "\n", "\n", "\"\"\"\n    if cell_list != None:\n        print (\"Full Train Cell Architecture:\", cell_list)\n    else:\n        if GLOBALS.CONFIG[\"num_cells\"] == 20:\n            print (\"Full Train Cell Architecture:\", GLOBALS.cell_list_20)\n        else:\n            print (\"Full Train Cell Architecture:\", GLOBALS.cell_list_7)\n\n\n    if sep_conv_list != None:\n        print (\"Full Train Sep Conv Architecture:\", sep_conv_list)\n    else:\n        if GLOBALS.CONFIG[\"num_cells\"] == 20:\n            print(\"Full Train Cell Architecture:\", GLOBALS.sep_conv_list_20)\n        else:\n            print(\"Full Train Cell Architecture:\", GLOBALS.sep_conv_list_7)\n            \n    \"\"\"", "\n", "\n", "#Set all DARTS Hyperparamter to true for full train", "\n", "GLOBALS", ".", "CONFIG", "[", "'drop_path'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'drop_path_full'", "]", "\n", "GLOBALS", ".", "CONFIG", "[", "'auxiliary'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'auxiliary_full'", "]", "\n", "GLOBALS", ".", "CONFIG", "[", "'cutout'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'cutout_full'", "]", "\n", "GLOBALS", ".", "CONFIG", "[", "'grad_clip'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'grad_clip_full'", "]", "\n", "GLOBALS", ".", "CONFIG", "[", "'mini_batch_size'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'mini_batch_size_full'", "]", "\n", "GLOBALS", ".", "CONFIG", "[", "'weight_decay'", "]", "=", "GLOBALS", ".", "CONFIG", "[", "'weight_decay_full'", "]", "\n", "\n", "new_network", "=", "update_network_DARTS", "(", "cell_list", ",", "sep_conv_list", ")", "\n", "\n", "\n", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "model", "=", "initialize", "(", "args", ",", "new_network", ",", "beta", "=", "GLOBALS", ".", "CONFIG", "[", "'beta_full'", "]", ",", "scheduler", "=", "GLOBALS", ".", "CONFIG", "[", "'lr_scheduler_full'", "]", ",", "load_config", "=", "False", ")", "\n", "\n", "GLOBALS", ".", "FULL_TRAIN", "=", "True", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "=", "{", "}", "\n", "GLOBALS", ".", "FULL_TRAIN_MODE", "=", "'fresh'", "#", "\n", "GLOBALS", ".", "EXCEL_PATH", "=", "''", "\n", "\n", "\n", "run_epochs", "(", "0", ",", "model", ",", "epochs", ",", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "output_path_fulltrain", ")", "\n", "\n", "#Initializing again to remove auxiliary head so it does not get added in param / GMAC count.", "\n", "print", "(", "\"Running initialize again to remove auxiliary head for param / gmac count\"", ")", "\n", "GLOBALS", ".", "CONFIG", "[", "'auxiliary'", "]", "=", "False", "\n", "#initialize(args_true,beta= GLOBALS.CONFIG['beta_full'],new_cell_list=cell_list, new_sep_conv_list=sep_conv_list, scheduler=\"StepLR\", load_config=False)", "\n", "new_network", "=", "update_network_DARTS", "(", "cell_list", ",", "sep_conv_list", ")", "\n", "\n", "return", "new_network", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.run_trials_DARTS": [[248, 432], ["os.path.join", "print", "train_DARTS.run_trials_DARTS.initialize_dataframes_and_lists"], "function", ["None"], ["", "def", "run_trials_DARTS", "(", "epochs", ",", "output_path_train", ")", ":", "\n", "    ", "\"\"\"\n    Perform Channel Search for DARTS/DARTS+\n    \"\"\"", "\n", "\n", "cell_list_average_slope", ",", "cell_list_prev_ops", ",", "cell_list_factor", ",", "sep_conv_list_average_slope", ",", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", ",", "cell_list_rank", ",", "sep_conv_list_rank", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "trial_dir", "=", "os", ".", "path", ".", "join", "(", "GLOBALS", ".", "OUTPUT_PATH_STRING", ",", "'Trials'", ")", "\n", "print", "(", "trial_dir", ")", "\n", "\n", "parameter_type", "=", "GLOBALS", ".", "CONFIG", "[", "'parameter_type'", "]", "\n", "\n", "def", "initialize_dataframes_and_lists", "(", ")", ":", "\n", "\n", "#[C0, C1, C2, C3] Sizes", "\n", "\n", "#Default 7 cells", "\n", "        ", "if", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "7", ":", "\n", "            ", "cell_list_columns", "=", "[", "'STEM'", ",", "'cell0'", ",", "'cell1'", ",", "'cell2'", ",", "'cell3'", ",", "'cell4'", ",", "'cell5'", ",", "'cell6'", "]", "\n", "sep_conv_list_columns", "=", "[", "'cell0'", ",", "'cell1'", ",", "'cell3'", ",", "'cell5'", ",", "'cell6'", "]", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTS'", ":", "\n", "                ", "initial_cell_list", "=", "GLOBALS", ".", "DARTS_cell_list_7", "\n", "initial_sep_conv_list", "=", "GLOBALS", ".", "DARTS_sep_conv_list_7", "\n", "", "else", ":", "\n", "                ", "initial_cell_list", "=", "GLOBALS", ".", "DARTSPlus_cell_list_7", "\n", "initial_sep_conv_list", "=", "GLOBALS", ".", "DARTSPlus_sep_conv_list_7", "\n", "\n", "", "", "elif", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "14", ":", "\n", "            ", "cell_list_columns", "=", "[", "'STEM'", ",", "'cell0'", ",", "'cell1'", ",", "'cell2'", ",", "'cell3'", ",", "'cell4'", ",", "'cell5'", ",", "'cell6'", ",", "'cell7'", ",", "'cell8'", ",", "'cell9'", ",", "'cell10'", ",", "'cell11'", ",", "'cell12'", ",", "'cell13'", "]", "\n", "sep_conv_list_columns", "=", "[", "'cell0'", ",", "'cell1'", ",", "'cell2'", ",", "'cell3'", ",", "'cell5'", ",", "'cell6'", ",", "'cell7'", ",", "'cell8'", ",", "'cell10'", ",", "'cell11'", ",", "'cell12'", ",", "'cell13'", "]", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTS'", ":", "\n", "                ", "initial_cell_list", "=", "GLOBALS", ".", "DARTS_cell_list_14", "\n", "initial_sep_conv_list", "=", "GLOBALS", ".", "DARTS_sep_conv_list_14", "\n", "", "else", ":", "\n", "                ", "initial_cell_list", "=", "GLOBALS", ".", "DARTSPlus_cell_list_14", "\n", "initial_sep_conv_list", "=", "GLOBALS", ".", "DARTSPlus_sep_conv_list_14", "\n", "\n", "#Config for 20 cells", "\n", "", "", "elif", "GLOBALS", ".", "CONFIG", "[", "\"num_cells\"", "]", "==", "20", ":", "\n", "            ", "cell_list_columns", "=", "[", "'STEM'", ",", "'cell0'", ",", "'cell1'", ",", "'cell2'", ",", "'cell3'", ",", "'cell4'", ",", "'cell5'", ",", "'cell6'", ",", "'cell7'", ",", "'cell8'", ",", "'cell9'", ",", "'cell10'", ",", "'cell11'", ",", "'cell12'", ",", "'cell13'", ",", "'cell14'", ",", "'cell15'", ",", "'cell16'", ",", "'cell17'", ",", "'cell18'", ",", "'cell19'", "]", "\n", "sep_conv_list_columns", "=", "[", "'cell0'", ",", "'cell1'", ",", "'cell2'", ",", "'cell3'", ",", "'cell4'", ",", "'cell5'", ",", "'cell7'", ",", "'cell8'", ",", "'cell9'", ",", "'cell10'", ",", "'cell11'", ",", "'cell12'", ",", "'cell14'", ",", "'cell15'", ",", "'cell16'", ",", "'cell17'", ",", "'cell18'", ",", "'cell19'", "]", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTS'", ":", "\n", "                ", "initial_cell_list", "=", "GLOBALS", ".", "DARTS_cell_list_20", "\n", "initial_sep_conv_list", "=", "GLOBALS", ".", "DARTS_sep_conv_list_20", "\n", "", "else", ":", "\n", "                ", "initial_cell_list", "=", "GLOBALS", ".", "DARTSPlus_cell_list_20", "\n", "initial_sep_conv_list", "=", "GLOBALS", ".", "DARTSPlus_sep_conv_list_20", "\n", "\n", "\n", "", "", "cell_list_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "cell_list_columns", ")", "\n", "sep_conv_list_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "sep_conv_list_columns", ")", "\n", "\n", "\n", "#Final ranks used to calculate [C0, C1, C2, C3] Sizes for all 20 cells", "\n", "cell_rank_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "cell_list_columns", ")", "\n", "\n", "# Final ranks used to calculate intermediate sep conv sizes", "\n", "sep_conv_rank_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "sep_conv_list_columns", ")", "\n", "\n", "\n", "cell_list_data", ".", "loc", "[", "0", "]", "=", "initial_cell_list", "\n", "sep_conv_list_data", ".", "loc", "[", "0", "]", "=", "initial_sep_conv_list", "\n", "\n", "cell_delta_info", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'delta_percentage'", ",", "'last_operation'", ",", "'factor_scale'", "]", ")", "\n", "sep_conv_delta_info", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'delta_percentage'", ",", "'last_operation'", ",", "'factor_scale'", "]", ")", "\n", "\n", "return", "cell_list_data", ",", "sep_conv_list_data", ",", "cell_rank_data", ",", "sep_conv_rank_data", ",", "cell_delta_info", ",", "sep_conv_delta_info", ",", "initial_cell_list", ",", "initial_sep_conv_list", "\n", "\n", "\n", "# Train for 1 trial first to collect data", "\n", "", "cell_list_data", ",", "sep_conv_list_data", ",", "cell_rank_data", ",", "sep_conv_rank_data", ",", "cell_delta_info", ",", "sep_conv_delta_info", ",", "initial_cell_list", ",", "initial_sep_conv_list", "=", "initialize_dataframes_and_lists", "(", ")", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "current_cell_list", "=", "copy", ".", "deepcopy", "(", "initial_cell_list", ")", "\n", "current_sep_conv_list", "=", "copy", ".", "deepcopy", "(", "initial_sep_conv_list", ")", "\n", "\n", "new_network", "=", "update_network_DARTS", "(", ")", "\n", "\n", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "model", "=", "initialize", "(", "args", ",", "new_network", ")", "\n", "interrupted_trial", "=", "0", "# Determines at which trial we will resume!", "\n", "if", "args", ".", "resume_search", "is", "False", ":", "\n", "        ", "run_epochs", "(", "0", ",", "model", ",", "epochs", ",", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "output_path_train", ")", "\n", "# print(\"Memory after first trial:\", torch.cuda.memory_allocated(0))", "\n", "", "else", ":", "\n", "        ", "interrupted_trial", "=", "get_latest_completed_trial", "(", "trial_dir", ")", "\n", "", "print", "(", "'~~~First run_epochs done.~~~'", ")", "\n", "del", "model", "\n", "del", "train_loader", "\n", "del", "test_loader", "\n", "del", "optimizer", "\n", "del", "scheduler", "\n", "\n", "free_cuda_memory", "(", ")", "\n", "\n", "if", "(", "GLOBALS", ".", "CONFIG", "[", "'kernel_adapt'", "]", "==", "0", ")", ":", "\n", "        ", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials_kernel'", "]", "=", "0", "\n", "\n", "", "GLOBALS", ".", "total_trials", "=", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials'", "]", "+", "GLOBALS", ".", "CONFIG", "[", "'adapt_trials_kernel'", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "GLOBALS", ".", "total_trials", ")", ":", "\n", "\n", "# Apply CONet Algorithm and get new channel sizes", "\n", "\n", "        ", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTS'", ":", "\n", "            ", "new_cell_list", ",", "new_sep_conv_list", ",", "cell_list_average_slope", ",", "cell_list_prev_ops", ",", "cell_list_factor", ",", "sep_conv_list_average_slope", ",", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", ",", "cell_list_rank", ",", "sep_conv_list_rank", "=", "DARTS_algorithm", "(", "current_cell_list", ",", "current_sep_conv_list", ",", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'factor_scale'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'min_scale_limit'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'mapping_condition_threshold'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'min_conv_size'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'max_conv_size'", "]", ",", "\n", "trial_dir", ",", "i", "-", "1", ",", "cell_list_prev_ops", ",", "cell_list_factor", ",", "\n", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", ")", "\n", "", "elif", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTSPlus'", ":", "\n", "            ", "new_cell_list", ",", "new_sep_conv_list", ",", "cell_list_average_slope", ",", "cell_list_prev_ops", ",", "cell_list_factor", ",", "sep_conv_list_average_slope", ",", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", ",", "cell_list_rank", ",", "sep_conv_list_rank", "=", "DARTSPlus_algorithm", "(", "current_cell_list", ",", "current_sep_conv_list", ",", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'factor_scale'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'min_scale_limit'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'mapping_condition_threshold'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'min_conv_size'", "]", ",", "GLOBALS", ".", "CONFIG", "[", "'max_conv_size'", "]", ",", "\n", "trial_dir", ",", "i", "-", "1", ",", "cell_list_prev_ops", ",", "cell_list_factor", ",", "\n", "sep_conv_list_prev_ops", ",", "sep_conv_list_factor", ")", "\n", "#Need to do trial - 1 for trial num because we need the results from the previous trial", "\n", "\n", "", "current_cell_list", "=", "copy", ".", "deepcopy", "(", "new_cell_list", ")", "\n", "current_sep_conv_list", "=", "copy", ".", "deepcopy", "(", "new_sep_conv_list", ")", "\n", "\n", "cell_list_average_slope_copy", "=", "copy", ".", "deepcopy", "(", "cell_list_average_slope", ")", "\n", "cell_list_prev_ops_copy", "=", "copy", ".", "deepcopy", "(", "cell_list_prev_ops", ")", "\n", "cell_list_factor_copy", "=", "copy", ".", "deepcopy", "(", "cell_list_factor", ")", "\n", "\n", "sep_conv_list_average_slope_copy", "=", "copy", ".", "deepcopy", "(", "sep_conv_list_average_slope", ")", "\n", "sep_conv_list_prev_ops_copy", "=", "copy", ".", "deepcopy", "(", "sep_conv_list_prev_ops", ")", "\n", "sep_conv_list_factor_copy", "=", "copy", ".", "deepcopy", "(", "sep_conv_list_factor", ")", "\n", "\n", "cell_list_rank_copy", "=", "copy", ".", "deepcopy", "(", "cell_list_rank", ")", "\n", "sep_conv_list_rank_copy", "=", "copy", ".", "deepcopy", "(", "sep_conv_list_rank", ")", "\n", "\n", "\n", "print", "(", "\"Cell List:\"", ",", "current_cell_list", ")", "\n", "print", "(", "\"Conv_sep_list\"", ",", "current_sep_conv_list", ")", "\n", "#print (sep_conv_list_factor)", "\n", "#print (sep_conv_list_prev_ops)", "\n", "\n", "print", "(", "'~~~Writing to Dataframe~~~'", ")", "\n", "if", "parameter_type", "==", "'channel'", ":", "\n", "            ", "cell_list_data", ".", "loc", "[", "i", "]", "=", "current_cell_list", "\n", "sep_conv_list_data", ".", "loc", "[", "i", "]", "=", "current_sep_conv_list", "\n", "cell_delta_info", ".", "loc", "[", "i", "]", "=", "[", "cell_list_average_slope_copy", ",", "cell_list_prev_ops_copy", ",", "cell_list_factor_copy", "]", "\n", "sep_conv_delta_info", ".", "loc", "[", "i", "]", "=", "[", "sep_conv_list_average_slope_copy", ",", "sep_conv_list_prev_ops_copy", ",", "sep_conv_list_factor_copy", "]", "\n", "\n", "cell_rank_data", ".", "loc", "[", "i", "]", "=", "cell_list_rank_copy", "\n", "sep_conv_rank_data", ".", "loc", "[", "i", "]", "=", "sep_conv_list_rank_copy", "\n", "\n", "\n", "", "print", "(", "'~~~Starting Conv parameter_typements~~~'", ")", "\n", "print", "(", "'~~~Initializing the new model~~~'", ")", "\n", "\n", "# Apply new channel sizes to model", "\n", "new_network", "=", "update_network_DARTS", "(", "current_cell_list", ",", "current_sep_conv_list", ")", "\n", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "model", "=", "initialize", "(", "args", ",", "new_network", ")", "\n", "epochs", "=", "range", "(", "0", ",", "GLOBALS", ".", "CONFIG", "[", "'epochs_per_trial'", "]", ")", "\n", "\n", "if", "i", "<", "interrupted_trial", ":", "\n", "            ", "print", "(", "'~~~Using previous training data~~~'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'~~~Training with new model~~~'", ")", "\n", "run_epochs", "(", "i", ",", "model", ",", "epochs", ",", "train_loader", ",", "test_loader", ",", "device", ",", "optimizer", ",", "scheduler", ",", "output_path_train", ")", "\n", "", "del", "model", "\n", "del", "train_loader", "\n", "del", "test_loader", "\n", "del", "optimizer", "\n", "del", "scheduler", "\n", "\n", "free_cuda_memory", "(", ")", "\n", "\n", "", "return", "current_cell_list", ",", "current_sep_conv_list", ",", "cell_list_data", ",", "sep_conv_list_data", ",", "cell_delta_info", ",", "sep_conv_delta_info", ",", "cell_rank_data", ",", "sep_conv_rank_data", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.train_DARTS.create_trial_data_file_DARTS": [[433, 446], ["cell_data.to_excel", "cell_delta_info.to_excel", "cell_rank_data.to_excel", "sep_conv_data.to_excel", "sep_conv_delta_info.to_excel", "sep_conv_rank_data.to_excel"], "function", ["None"], ["", "def", "create_trial_data_file_DARTS", "(", "cell_data", ",", "sep_conv_data", ",", "cell_delta_info", ",", "sep_conv_delta_info", ",", "cell_rank_data", ",", "sep_conv_rank_data", ",", "output_path_string_trials", ")", ":", "\n", "    ", "if", "platform", ".", "system", "==", "'Windows'", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "#try:", "\n", "", "cell_data", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'cell_architectures.xlsx'", ")", "\n", "cell_delta_info", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'cell_delta_info.xlsx'", ")", "\n", "cell_rank_data", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'cell_average_rank.xlsx'", ")", "\n", "\n", "sep_conv_data", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'sep_conv_architectures.xlsx'", ")", "\n", "sep_conv_delta_info", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'sep_conv_delta_info.xlsx'", ")", "\n", "sep_conv_rank_data", ".", "to_excel", "(", "output_path_string_trials", "+", "slash", "+", "'sep_conv_average_rank.xlsx'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.gpu.GPU.__init__": [[37, 56], ["gpu.GPU.update", "print", "print"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update"], ["    ", "def", "__init__", "(", "self", ",", "ID", ":", "int", ")", "->", "None", ":", "\n", "        ", "self", ".", "id", "=", "ID", "\n", "self", ".", "uuid", "=", "None", "\n", "self", ".", "load", "=", "0.", "\n", "self", ".", "mem_total", "=", "0.", "\n", "self", ".", "mem_used", "=", "0.", "\n", "self", ".", "mem_util", "=", "0.", "\n", "self", ".", "memoryFree", "=", "0.", "\n", "self", ".", "driver", "=", "None", "\n", "self", ".", "name", "=", "None", "\n", "self", ".", "serial", "=", "None", "\n", "self", ".", "display_mode", "=", "None", "\n", "self", ".", "display_active", "=", "None", "\n", "self", ".", "temperature", "=", "0.", "\n", "ret", ",", "ids", "=", "self", ".", "update", "(", ")", "\n", "if", "not", "ret", ":", "\n", "            ", "print", "(", "f\"AdaS: GPU ID {ID} was not found\"", ")", "\n", "print", "(", "f\"AdaS: Valid GPU IDs are {ids}\"", ")", "\n", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.gpu.GPU.update": [[57, 127], ["stdout.decode", "stdout.decode.split", "list", "range", "platform.system", "distutils.spawn.find_executable", "subprocess.Popen", "subprocess.Popen.communicate", "len", "line.split", "range", "int", "list.append", "float", "float", "utils.safe_float_cast", "utils.safe_float_cast", "utils.safe_float_cast", "utils.safe_float_cast", "utils.safe_float_cast"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.safe_float_cast", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.safe_float_cast", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.safe_float_cast", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.safe_float_cast", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.safe_float_cast"], ["", "", "def", "update", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ":", "\n", "# If the platform is Windows and nvidia-smi", "\n", "# could not be found from the environment path,", "\n", "# try to find it from system drive with default installation path", "\n", "            ", "nvidia_smi", "=", "spawn", ".", "find_executable", "(", "'nvidia-smi'", ")", "\n", "if", "nvidia_smi", "is", "None", ":", "\n", "                ", "nvidia_smi", "=", "f\"{os.environ['systemdrive']}\\\\Program Files\\\\NVIDIA \"", "+", "\"Corporation\\\\NVSMI\\\\nvidia-smi.exe\"", "\n", "", "", "else", ":", "\n", "            ", "nvidia_smi", "=", "\"nvidia-smi\"", "\n", "\n", "# Get ID, processing and memory utilization for all GPUs", "\n", "", "try", ":", "\n", "            ", "p", "=", "Popen", "(", "[", "nvidia_smi", ",", "\"--query-gpu=index,uuid,utilization.gpu,\"", "+", "\n", "\"memory.total,memory.used,memory.free,driver_version,\"", "+", "\n", "\"name,gpu_serial,display_active,display_mode,\"", "+", "\n", "\"temperature.gpu\"", ",", "\n", "\"--format=csv,noheader,nounits\"", "]", ",", "stdout", "=", "PIPE", ")", "\n", "stdout", ",", "stderror", "=", "p", ".", "communicate", "(", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "[", "]", "\n", "", "output", "=", "stdout", ".", "decode", "(", "'UTF-8'", ")", "\n", "lines", "=", "output", ".", "split", "(", "os", ".", "linesep", ")", "\n", "num_devices", "=", "len", "(", "lines", ")", "-", "1", "\n", "ids", "=", "list", "(", ")", "\n", "for", "g", "in", "range", "(", "num_devices", ")", ":", "\n", "            ", "line", "=", "lines", "[", "g", "]", "\n", "vals", "=", "line", ".", "split", "(", "', '", ")", "\n", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "                ", "if", "(", "i", "==", "0", ")", ":", "\n", "                    ", "device_id", "=", "int", "(", "vals", "[", "i", "]", ")", "\n", "ids", ".", "append", "(", "device_id", ")", "\n", "", "elif", "(", "i", "==", "1", ")", ":", "\n", "                    ", "uuid", "=", "vals", "[", "i", "]", "\n", "", "elif", "(", "i", "==", "2", ")", ":", "\n", "                    ", "gpu_util", "=", "safe_float_cast", "(", "vals", "[", "i", "]", ")", "/", "100", "\n", "", "elif", "(", "i", "==", "3", ")", ":", "\n", "                    ", "mem_total", "=", "safe_float_cast", "(", "vals", "[", "i", "]", ")", "\n", "", "elif", "(", "i", "==", "4", ")", ":", "\n", "                    ", "mem_used", "=", "safe_float_cast", "(", "vals", "[", "i", "]", ")", "\n", "", "elif", "(", "i", "==", "5", ")", ":", "\n", "                    ", "mem_free", "=", "safe_float_cast", "(", "vals", "[", "i", "]", ")", "\n", "", "elif", "(", "i", "==", "6", ")", ":", "\n", "                    ", "driver", "=", "vals", "[", "i", "]", "\n", "", "elif", "(", "i", "==", "7", ")", ":", "\n", "                    ", "gpu_name", "=", "vals", "[", "i", "]", "\n", "", "elif", "(", "i", "==", "8", ")", ":", "\n", "                    ", "serial", "=", "vals", "[", "i", "]", "\n", "", "elif", "(", "i", "==", "9", ")", ":", "\n", "                    ", "display_active", "=", "vals", "[", "i", "]", "\n", "", "elif", "(", "i", "==", "10", ")", ":", "\n", "                    ", "display_mode", "=", "vals", "[", "i", "]", "\n", "", "elif", "(", "i", "==", "11", ")", ":", "\n", "                    ", "temp_gpu", "=", "safe_float_cast", "(", "vals", "[", "i", "]", ")", "\n", "", "", "if", "device_id", "==", "self", ".", "id", ":", "\n", "                ", "self", ".", "uuid", "=", "uuid", "\n", "self", ".", "load", "=", "gpu_util", "\n", "self", ".", "mem_util", "=", "float", "(", "mem_used", ")", "/", "float", "(", "mem_total", ")", "\n", "self", ".", "mem_total", "=", "mem_total", "\n", "self", ".", "mem_used", "=", "mem_used", "\n", "self", ".", "mem_free", "=", "mem_free", "\n", "self", ".", "driver", "=", "driver", "\n", "self", ".", "name", "=", "gpu_name", "\n", "self", ".", "serial", "=", "serial", "\n", "self", ".", "display_mode", "=", "display_mode", "\n", "self", ".", "display_active", "=", "display_active", "\n", "self", ".", "temperature", "=", "temp_gpu", "\n", "return", "(", "True", ",", "None", ")", "\n", "", "", "return", "(", "False", ",", "ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.VBMF": [[33, 144], ["numpy.linalg.svd", "numpy.sqrt", "numpy.sum", "numpy.multiply", "numpy.zeros", "numpy.zeros", "numpy.sqrt", "numpy.sqrt", "numpy.divide", "numpy.divide", "numpy.sum", "scipy.optimize.minimize_scalar", "numpy.ones", "numpy.ones", "numpy.multiply", "numpy.divide", "numpy.multiply", "numpy.diag", "numpy.multiply", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.sum", "numpy.multiply", "numpy.multiply", "numpy.log", "numpy.log", "numpy.multiply"], "function", ["None"], ["def", "VBMF", "(", "Y", ",", "cacb", ",", "sigma2", "=", "None", ",", "H", "=", "None", ")", ":", "\n", "    ", "\"\"\"Implementation of the analytical solution to Variational Bayes Matrix Factorization.\n\n    This function can be used to calculate the analytical solution to VBMF. \n    This is based on the paper and MatLab code by Nakajima et al.:\n    \"Global analytic solution of fully-observed variational Bayesian matrix factorization.\"\n\n    Notes\n    -----\n        If sigma2 is unspecified, it is estimated by minimizing the free energy.\n        If H is unspecified, it is set to the smallest of the sides of the input Y.\n        To estimate cacb, use the function EVBMF().\n\n    Attributes\n    ----------\n    Y : numpy-array\n        Input matrix that is to be factorized. Y has shape (L,M), where L<=M.\n\n    cacb : int\n        Product of the prior variances of the matrices that factorize the input.\n\n    sigma2 : int or None (default=None)\n        Variance of the noise on Y.\n\n    H : int or None (default = None)\n        Maximum rank of the factorized matrices.\n\n    Returns\n    -------\n    U : numpy-array\n        Left-singular vectors. \n\n    S : numpy-array\n        Diagonal matrix of singular values.\n\n    V : numpy-array\n        Right-singular vectors.\n\n    post : dictionary\n        Dictionary containing the computed posterior values.\n\n\n\n    \"\"\"", "\n", "\n", "L", ",", "M", "=", "Y", ".", "shape", "# has to be L<=M", "\n", "\n", "if", "H", "is", "None", ":", "\n", "        ", "H", "=", "L", "\n", "\n", "# SVD of the input matrix, max rank of H", "\n", "", "U", ",", "s", ",", "V", "=", "np", ".", "linalg", ".", "svd", "(", "Y", ")", "\n", "U", "=", "U", "[", ":", ",", ":", "H", "]", "\n", "s", "=", "s", "[", ":", "H", "]", "\n", "V", "=", "V", "[", ":", "H", "]", ".", "T", "\n", "\n", "# Calculate residual", "\n", "residual", "=", "0.", "\n", "if", "H", "<", "L", ":", "\n", "        ", "residual", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "Y", "**", "2", ")", "-", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "\n", "\n", "# Estimation of the variance when sigma2 is unspecified", "\n", "", "if", "sigma2", "is", "None", ":", "\n", "        ", "upper_bound", "=", "(", "np", ".", "sum", "(", "s", "**", "2", ")", "+", "residual", ")", "/", "(", "L", "+", "M", ")", "\n", "\n", "if", "L", "==", "H", ":", "\n", "            ", "lower_bound", "=", "s", "[", "-", "1", "]", "**", "2", "/", "M", "\n", "", "else", ":", "\n", "            ", "lower_bound", "=", "residual", "/", "(", "(", "L", "-", "H", ")", "*", "M", ")", "\n", "\n", "", "sigma2_opt", "=", "minimize_scalar", "(", "VBsigma2", ",", "args", "=", "(", "L", ",", "M", ",", "cacb", ",", "s", ",", "residual", ")", ",", "bounds", "=", "[", "\n", "lower_bound", ",", "upper_bound", "]", ",", "method", "=", "'Bounded'", ")", "\n", "sigma2", "=", "sigma2_opt", ".", "x", "\n", "#print(\"Estimated sigma2: \", sigma2)", "\n", "\n", "# Threshold gamma term", "\n", "# Formula above (21) from [1]", "\n", "", "thresh_term", "=", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "/", "2", "\n", "threshold", "=", "np", ".", "sqrt", "(", "sigma2", "*", "(", "thresh_term", "+", "np", ".", "sqrt", "(", "thresh_term", "**", "2", "-", "L", "*", "M", ")", ")", ")", "\n", "\n", "# Number of singular values where gamma>threshold", "\n", "pos", "=", "np", ".", "sum", "(", "s", ">", "threshold", ")", "\n", "\n", "# Formula (10) from [2]", "\n", "d", "=", "np", ".", "multiply", "(", "s", "[", ":", "pos", "]", ",", "\n", "1", "-", "np", ".", "multiply", "(", "sigma2", "/", "(", "2", "*", "s", "[", ":", "pos", "]", "**", "2", ")", ",", "\n", "L", "+", "M", "+", "np", ".", "sqrt", "(", "(", "M", "-", "L", ")", "**", "2", "+", "4", "*", "s", "[", ":", "pos", "]", "**", "2", "/", "cacb", "**", "2", ")", ")", ")", "\n", "\n", "# Computation of the posterior", "\n", "post", "=", "{", "}", "\n", "zeta", "=", "sigma2", "/", "(", "2", "*", "L", "*", "M", ")", "*", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", "-", "\n", "np", ".", "sqrt", "(", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "**", "2", "-", "4", "*", "L", "*", "M", ")", ")", "\n", "post", "[", "'ma'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'mb'", "]", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post", "[", "'sa2'", "]", "=", "cacb", "*", "(", "1", "-", "L", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "post", "[", "'sb2'", "]", "=", "cacb", "*", "(", "1", "-", "M", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "\n", "delta", "=", "cacb", "/", "sigma2", "*", "(", "s", "[", ":", "pos", "]", "-", "d", "-", "L", "*", "sigma2", "/", "s", "[", ":", "pos", "]", ")", "\n", "post", "[", "'ma'", "]", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "multiply", "(", "d", ",", "delta", ")", ")", "\n", "post", "[", "'mb'", "]", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "divide", "(", "d", ",", "delta", ")", ")", "\n", "post", "[", "'sa2'", "]", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", "*", "delta", ",", "s", "[", ":", "pos", "]", ")", "\n", "post", "[", "'sb2'", "]", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", ",", "np", ".", "multiply", "(", "delta", ",", "s", "[", ":", "pos", "]", ")", ")", "\n", "post", "[", "'sigma2'", "]", "=", "sigma2", "\n", "post", "[", "'F'", "]", "=", "0.5", "*", "(", "L", "*", "M", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "sigma2", ")", "+", "(", "residual", "+", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "/", "sigma2", "-", "(", "L", "+", "M", ")", "*", "H", "\n", "+", "np", ".", "sum", "(", "M", "*", "np", ".", "log", "(", "cacb", "/", "post", "[", "'sa2'", "]", ")", "+", "L", "*", "np", ".", "log", "(", "cacb", "/", "post", "[", "'sb2'", "]", ")", "\n", "+", "(", "post", "[", "'ma'", "]", "**", "2", "+", "M", "*", "post", "[", "'sa2'", "]", ")", "/", "cacb", "+", "\n", "(", "post", "[", "'mb'", "]", "**", "2", "+", "L", "*", "post", "[", "'sb2'", "]", ")", "/", "cacb", "\n", "+", "(", "-", "2", "*", "np", ".", "multiply", "(", "np", ".", "multiply", "(", "post", "[", "'ma'", "]", ",", "post", "[", "'mb'", "]", ")", ",", "s", ")", "\n", "+", "np", ".", "multiply", "(", "post", "[", "'ma'", "]", "**", "2", "+", "M", "*", "post", "[", "'sa2'", "]", ",", "post", "[", "'mb'", "]", "**", "2", "+", "L", "*", "post", "[", "'sb2'", "]", ")", ")", "/", "sigma2", ")", ")", "\n", "\n", "return", "U", "[", ":", ",", ":", "pos", "]", ",", "np", ".", "diag", "(", "d", ")", ",", "V", "[", ":", ",", ":", "pos", "]", ",", "post", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.VBsigma2": [[146, 177], ["len", "numpy.sqrt", "numpy.sum", "numpy.multiply", "numpy.zeros", "numpy.zeros", "numpy.sqrt", "numpy.sqrt", "numpy.divide", "numpy.divide", "numpy.ones", "numpy.ones", "numpy.multiply", "numpy.divide", "numpy.multiply", "numpy.multiply", "numpy.sqrt", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.sum", "numpy.multiply", "numpy.multiply", "numpy.log", "numpy.log", "numpy.multiply"], "function", ["None"], ["", "def", "VBsigma2", "(", "sigma2", ",", "L", ",", "M", ",", "cacb", ",", "s", ",", "residual", ")", ":", "\n", "    ", "H", "=", "len", "(", "s", ")", "\n", "\n", "thresh_term", "=", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "/", "2", "\n", "threshold", "=", "np", ".", "sqrt", "(", "sigma2", "*", "(", "thresh_term", "+", "np", ".", "sqrt", "(", "thresh_term", "**", "2", "-", "L", "*", "M", ")", ")", ")", "\n", "pos", "=", "np", ".", "sum", "(", "s", ">", "threshold", ")", "\n", "\n", "d", "=", "np", ".", "multiply", "(", "s", "[", ":", "pos", "]", ",", "\n", "1", "-", "np", ".", "multiply", "(", "sigma2", "/", "(", "2", "*", "s", "[", ":", "pos", "]", "**", "2", ")", ",", "\n", "L", "+", "M", "+", "np", ".", "sqrt", "(", "(", "M", "-", "L", ")", "**", "2", "+", "4", "*", "s", "[", ":", "pos", "]", "**", "2", "/", "cacb", "**", "2", ")", ")", ")", "\n", "\n", "zeta", "=", "sigma2", "/", "(", "2", "*", "L", "*", "M", ")", "*", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", "-", "\n", "np", ".", "sqrt", "(", "(", "L", "+", "M", "+", "sigma2", "/", "cacb", "**", "2", ")", "**", "2", "-", "4", "*", "L", "*", "M", ")", ")", "\n", "post_ma", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post_mb", "=", "np", ".", "zeros", "(", "H", ")", "\n", "post_sa2", "=", "cacb", "*", "(", "1", "-", "L", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "post_sb2", "=", "cacb", "*", "(", "1", "-", "M", "*", "zeta", "/", "sigma2", ")", "*", "np", ".", "ones", "(", "H", ")", "\n", "\n", "delta", "=", "cacb", "/", "sigma2", "*", "(", "s", "[", ":", "pos", "]", "-", "d", "-", "L", "*", "sigma2", "/", "s", "[", ":", "pos", "]", ")", "\n", "post_ma", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "multiply", "(", "d", ",", "delta", ")", ")", "\n", "post_mb", "[", ":", "pos", "]", "=", "np", ".", "sqrt", "(", "np", ".", "divide", "(", "d", ",", "delta", ")", ")", "\n", "post_sa2", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", "*", "delta", ",", "s", "[", ":", "pos", "]", ")", "\n", "post_sb2", "[", ":", "pos", "]", "=", "np", ".", "divide", "(", "sigma2", ",", "np", ".", "multiply", "(", "delta", ",", "s", "[", ":", "pos", "]", ")", ")", "\n", "\n", "F", "=", "0.5", "*", "(", "L", "*", "M", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "sigma2", ")", "+", "(", "residual", "+", "np", ".", "sum", "(", "s", "**", "2", ")", ")", "/", "sigma2", "-", "(", "L", "+", "M", ")", "*", "H", "\n", "+", "np", ".", "sum", "(", "M", "*", "np", ".", "log", "(", "cacb", "/", "post_sa2", ")", "+", "L", "*", "np", ".", "log", "(", "cacb", "/", "post_sb2", ")", "\n", "+", "(", "post_ma", "**", "2", "+", "M", "*", "post_sa2", ")", "/", "cacb", "+", "\n", "(", "post_mb", "**", "2", "+", "L", "*", "post_sb2", ")", "/", "cacb", "\n", "+", "(", "-", "2", "*", "np", ".", "multiply", "(", "np", ".", "multiply", "(", "post_ma", ",", "post_mb", ")", ",", "s", ")", "\n", "+", "np", ".", "multiply", "(", "post_ma", "**", "2", "+", "M", "*", "post_sa2", ",", "post_mb", "**", "2", "+", "L", "*", "post_sb2", ")", ")", "/", "sigma2", ")", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.EVBMF": [[179, 266], ["torch.svd", "numpy.sqrt", "torch.sum", "numpy.sqrt", "torch.sum", "torch.max", "scipy.optimize.minimize_scalar", "torch.diag", "int", "torch.stack", "numpy.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "numpy.min", "torch.sum", "s.cpu().numpy", "torch.max.cpu().numpy", "upper_bound.cpu().numpy", "torch.mean", "numpy.ceil", "s.cpu", "torch.max.cpu", "upper_bound.cpu"], "function", ["None"], ["", "def", "EVBMF", "(", "Y", ",", "sigma2", "=", "None", ",", "H", "=", "None", ")", ":", "\n", "    ", "\"\"\"Implementation of the analytical solution to Empirical Variational Bayes Matrix Factorization.\n\n    This function can be used to calculate the analytical solution to empirical VBMF. \n    This is based on the paper and MatLab code by Nakajima et al.:\n    \"Global analytic solution of fully-observed variational Bayesian matrix factorization.\"\n\n    Notes\n    -----\n        If sigma2 is unspecified, it is estimated by minimizing the free energy.\n        If H is unspecified, it is set to the smallest of the sides of the input Y.\n\n    Attributes\n    ----------\n    Y : numpy-array\n        Input matrix that is to be factorized. Y has shape (L,M), where L<=M.\n\n    sigma2 : int or None (default=None)\n        Variance of the noise on Y.\n\n    H : int or None (default = None)\n        Maximum rank of the factorized matrices.\n\n    Returns\n    -------\n    U : numpy-array\n        Left-singular vectors. \n\n    S : numpy-array\n        Diagonal matrix of singular values.\n\n    V : numpy-array\n        Right-singular vectors.\n\n    post : dictionary\n        Dictionary containing the computed posterior values.\n\n\n    \"\"\"", "\n", "L", ",", "M", "=", "Y", ".", "shape", "# has to be L<=M", "\n", "\n", "if", "H", "is", "None", ":", "\n", "        ", "H", "=", "L", "\n", "\n", "", "alpha", "=", "L", "/", "M", "\n", "tauubar", "=", "2.5129", "*", "np", ".", "sqrt", "(", "alpha", ")", "\n", "\n", "# SVD of the input matrix, max rank of H", "\n", "U", ",", "s", ",", "V", "=", "torch", ".", "svd", "(", "Y", ")", "\n", "U", "=", "U", "[", ":", ",", ":", "H", "]", "\n", "s", "=", "s", "[", ":", "H", "]", "\n", "V", "=", "V", "[", ":", ",", ":", "H", "]", "\n", "\n", "# Calculate residual", "\n", "residual", "=", "0.", "\n", "if", "H", "<", "L", ":", "\n", "        ", "residual", "=", "torch", ".", "sum", "(", "torch", ".", "sum", "(", "Y", "**", "2", ")", "-", "torch", ".", "sum", "(", "s", "**", "2", ")", ")", "\n", "\n", "# Estimation of the variance when sigma2 is unspecified", "\n", "", "if", "sigma2", "is", "None", ":", "\n", "        ", "xubar", "=", "(", "1", "+", "tauubar", ")", "*", "(", "1", "+", "alpha", "/", "tauubar", ")", "\n", "eH_ub", "=", "int", "(", "np", ".", "min", "(", "[", "np", ".", "ceil", "(", "L", "/", "(", "1", "+", "alpha", ")", ")", "-", "1", ",", "H", "]", ")", ")", "-", "1", "\n", "upper_bound", "=", "(", "torch", ".", "sum", "(", "s", "**", "2", ")", "+", "residual", ")", "/", "(", "L", "*", "M", ")", "\n", "lower_bound", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "\n", "[", "s", "[", "eH_ub", "+", "1", "]", "**", "2", "/", "(", "M", "*", "xubar", ")", ",", "torch", ".", "mean", "(", "s", "[", "eH_ub", "+", "1", ":", "]", "**", "2", ")", "/", "M", "]", ",", "dim", "=", "0", ")", ")", "\n", "\n", "scale", "=", "1.", "# /lower_bound", "\n", "s", "=", "s", "*", "np", ".", "sqrt", "(", "scale", ")", "\n", "residual", "=", "residual", "*", "scale", "\n", "lower_bound", "=", "lower_bound", "*", "scale", "\n", "upper_bound", "=", "upper_bound", "*", "scale", "\n", "\n", "sigma2_opt", "=", "minimize_scalar", "(", "EVBsigma2", ",", "args", "=", "(", "L", ",", "M", ",", "s", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "residual", ",", "xubar", ")", ",", "bounds", "=", "[", "\n", "lower_bound", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "upper_bound", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "method", "=", "'Bounded'", ")", "\n", "sigma2", "=", "sigma2_opt", ".", "x", "\n", "\n", "# print(sigma2)", "\n", "\n", "# Threshold gamma term", "\n", "", "threshold", "=", "np", ".", "sqrt", "(", "M", "*", "sigma2", "*", "(", "1", "+", "tauubar", ")", "*", "(", "1", "+", "alpha", "/", "tauubar", ")", ")", "\n", "pos", "=", "torch", ".", "sum", "(", "s", ">", "threshold", ")", "\n", "\n", "# Formula (15) from [2]", "\n", "d", "=", "(", "s", "[", ":", "pos", "]", "/", "2", ")", "*", "(", "1", "-", "(", "L", "+", "M", ")", "*", "sigma2", "/", "s", "[", ":", "pos", "]", "**", "2", "+", "torch", ".", "sqrt", "(", "(", "1", "-", "\n", "(", "L", "+", "M", ")", "*", "sigma2", "/", "s", "[", ":", "pos", "]", "**", "2", ")", "**", "2", "-", "4", "*", "L", "*", "M", "*", "sigma2", "**", "2", "/", "s", "[", ":", "pos", "]", "**", "4", ")", ")", "\n", "\n", "return", "U", "[", ":", ",", ":", "pos", "]", ",", "torch", ".", "diag", "(", "d", ")", ",", "V", "[", ":", ",", ":", "pos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.EVBsigma2": [[268, 286], ["len", "VBMF.tau", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.log", "numpy.sum", "numpy.log", "numpy.divide", "numpy.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.tau"], ["", "def", "EVBsigma2", "(", "sigma2", ",", "L", ",", "M", ",", "s", ",", "residual", ",", "xubar", ")", ":", "\n", "    ", "H", "=", "len", "(", "s", ")", "\n", "\n", "alpha", "=", "L", "/", "M", "\n", "x", "=", "s", "**", "2", "/", "(", "M", "*", "sigma2", ")", "\n", "\n", "z1", "=", "x", "[", "x", ">", "xubar", "]", "\n", "z2", "=", "x", "[", "x", "<=", "xubar", "]", "\n", "tau_z1", "=", "tau", "(", "z1", ",", "alpha", ")", "\n", "\n", "term1", "=", "np", ".", "sum", "(", "z2", "-", "np", ".", "log", "(", "z2", ")", ")", "\n", "term2", "=", "np", ".", "sum", "(", "z1", "-", "tau_z1", ")", "\n", "term3", "=", "np", ".", "sum", "(", "np", ".", "log", "(", "np", ".", "divide", "(", "tau_z1", "+", "1", ",", "z1", ")", ")", ")", "\n", "term4", "=", "alpha", "*", "np", ".", "sum", "(", "np", ".", "log", "(", "tau_z1", "/", "alpha", "+", "1", ")", ")", "\n", "\n", "obj", "=", "term1", "+", "term2", "+", "term3", "+", "term4", "+", "residual", "/", "(", "M", "*", "sigma2", ")", "+", "(", "L", "-", "H", ")", "*", "np", ".", "log", "(", "sigma2", ")", "\n", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.phi0": [[288, 290], ["numpy.log"], "function", ["None"], ["", "def", "phi0", "(", "x", ")", ":", "\n", "    ", "return", "x", "-", "np", ".", "log", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.phi1": [[292, 294], ["VBMF.tau", "numpy.log", "numpy.log", "VBMF.tau", "VBMF.tau"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.tau", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.tau", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.tau"], ["", "def", "phi1", "(", "x", ",", "alpha", ")", ":", "\n", "    ", "return", "np", ".", "log", "(", "tau", "(", "x", ",", "alpha", ")", "+", "1", ")", "+", "alpha", "*", "np", ".", "log", "(", "tau", "(", "x", ",", "alpha", ")", "/", "alpha", "+", "1", ")", "-", "tau", "(", "x", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.VBMF.tau": [[296, 298], ["numpy.sqrt"], "function", ["None"], ["", "def", "tau", "(", "x", ",", "alpha", ")", ":", "\n", "    ", "return", "0.5", "*", "(", "x", "-", "(", "1", "+", "alpha", ")", "+", "np", ".", "sqrt", "(", "(", "x", "-", "(", "1", "+", "alpha", ")", ")", "**", "2", "-", "4", "*", "alpha", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.__init__": [[90, 92], ["test.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.reset": [[93, 98], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update": [[99, 104], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.test_main": [[9, 70], ["model.eval", "test.AverageMeter", "test.AverageMeter", "AverageMeter.avg.cpu().item", "AverageMeter.avg.cpu().item", "torch.no_grad", "enumerate", "torch.save", "global_vars.CRITERION", "GLOBALS.CRITERION.item", "test.accuracy", "test.AverageMeter.update", "test.AverageMeter.update", "AverageMeter.avg.cpu", "AverageMeter.avg.cpu", "model.state_dict", "optimizer.state_dict", "str", "inputs.to", "targets.to", "model", "model", "inputs.size", "inputs.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.accuracy", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict"], ["def", "test_main", "(", "model", ",", "test_loader", ",", "epoch", ":", "int", ",", "device", ",", "optimizer", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "# global best_acc, performance_statistics, net, criterion, checkpoint_path", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "if", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTS'", "or", "GLOBALS", ".", "CONFIG", "[", "'network'", "]", "==", "'DARTSPlus'", ":", "\n", "                ", "outputs", ",", "_", "=", "model", "(", "inputs", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "model", "(", "inputs", ")", "\n", "", "loss", "=", "GLOBALS", ".", "CRITERION", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "#_, predicted = outputs.max(1)", "\n", "#total += targets.size(0)", "\n", "#correct += predicted.eq(targets).sum().item()", "\n", "\n", "acc1_temp", ",", "acc5_temp", "=", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1_temp", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5_temp", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# progress_bar(", "\n", "#     batch_idx, len(test_loader),", "\n", "#     'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#     % (test_loss / (batch_idx + 1), 100. * correct / total,", "\n", "#        correct, total))", "\n", "\n", "# Save checkpoint.", "\n", "", "", "acc", "=", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "acc5", "=", "top5", ".", "avg", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "if", "acc", ">", "GLOBALS", ".", "BEST_ACC", ":", "\n", "# print('Adas: Saving checkpoint...')", "\n", "        ", "state", "=", "{", "\n", "'net'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'train_loss'", ":", "GLOBALS", ".", "TRAIN_LOSS", "\n", "}", "\n", "if", "GLOBALS", ".", "ADAS", "is", "not", "None", ":", "\n", "            ", "state", "[", "'historical_io_metrics'", "]", "=", "GLOBALS", ".", "METRICS", ".", "historical_metrics", "\n", "", "torch", ".", "save", "(", "state", ",", "str", "(", "GLOBALS", ".", "CHECKPOINT_PATH", "/", "'ckpt.pth'", ")", ")", "\n", "# if checkpoint_path.is_dir():", "\n", "#     torch.save(state, str(checkpoint_path / 'ckpt.pth'))", "\n", "# else:", "\n", "#     torch.save(state, str(checkpoint_path))", "\n", "GLOBALS", ".", "BEST_ACC", "=", "acc", "\n", "", "acc", "=", "acc", "/", "100", "\n", "acc5", "=", "acc5", "/", "100", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'test_acc_epoch_{epoch}'", "]", "=", "acc", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'test_acc5_epoch_{epoch}'", "]", "=", "acc5", "\n", "GLOBALS", ".", "PERFORMANCE_STATISTICS", "[", "f'test_loss_epoch_{epoch}'", "]", "=", "test_loss", "/", "(", "batch_idx", "+", "1", ")", "\n", "return", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "acc", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.accuracy": [[71, 85], ["torch.no_grad", "max", "targets.size", "outputs.topk", "pred.t.t", "pred.t.eq", "targets.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "targets.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "def", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "targets", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "outputs", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "targets", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.Cell.__init__": [[10, 51], ["torch.Module.__init__", "model.Cell._compile_DARTS_PLUS", "operations.FactorizedReduce", "operations.ReLUConvBN", "operations.ReLUConvBN", "operations.ReLUConvBN", "zip", "zip", "model.Cell._compile_DARTS", "operations.FactorizedReduce", "operations.ReLUConvBN", "operations.ReLUConvBN", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.Cell._compile_DARTS_PLUS", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.Cell._compile_DARTS"], ["    ", "def", "__init__", "(", "self", ",", "arch", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_set", ",", "sep_conv_set", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(C_prev_prev, C_prev, C)", "\n", "\n", "if", "arch", "==", "\"DARTS_PLUS_CIFAR100\"", ":", "\n", "            ", "if", "reduction_prev", ":", "\n", "                ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C_set", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C_set", "[", "0", "]", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "", "if", "reduction", ":", "\n", "                ", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C_set", "[", "1", "]", ",", "1", ",", "1", ",", "0", ")", "#This is kinda redundant now", "\n", "", "else", ":", "\n", "                ", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C_set", "[", "1", "]", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "", "if", "reduction", ":", "\n", "                ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "                ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile_DARTS_PLUS", "(", "C_set", ",", "sep_conv_set", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n", "", "elif", "arch", "==", "\"DARTS\"", ":", "\n", "            ", "if", "reduction_prev", ":", "\n", "                ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C_set", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C_set", "[", "0", "]", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "", "if", "reduction", ":", "\n", "                ", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C_set", "[", "0", "]", ",", "1", ",", "1", ",", "0", ")", "# This is kinda redundant now", "\n", "", "else", ":", "\n", "                ", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C_set", "[", "1", "]", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "", "if", "reduction", ":", "\n", "                ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "                ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile_DARTS", "(", "C_set", ",", "sep_conv_set", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.Cell._compile_DARTS": [[52, 100], ["len", "torch.ModuleList", "torch.ModuleList", "len", "len", "len", "zip", "zip"], "methods", ["None"], ["", "", "def", "_compile_DARTS", "(", "self", ",", "C_set", ",", "sep_conv_set", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "# This is the final feature map size after concatenation from all intermediate nodes", "\n", "# Please be cautious of this in the future", "\n", "if", "reduction", ":", "\n", "            ", "self", ".", "concat_size", "=", "4", "*", "C_set", "[", "0", "]", "# Final concat size is 4x C0 channel size", "\n", "", "else", ":", "\n", "            ", "self", ".", "concat_size", "=", "C_set", "[", "0", "]", "+", "C_set", "[", "0", "]", "+", "C_set", "[", "2", "]", "+", "C_set", "[", "3", "]", "# This need to be determined analytically! Draw the genotype on a piece of paper", "\n", "\n", "", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "                ", "stride", "=", "2", "if", "index", "<", "2", "else", "1", "\n", "# reduction cell only has 1 channel value", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C_set", "[", "0", "]", ",", "C_set", "[", "0", "]", ",", "stride", ",", "True", ")", "\n", "# print(name, index)", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "", "else", ":", "\n", "\n", "            ", "node_index", "=", "0", "\n", "sep_conv_set_index", "=", "0", "\n", "edge_count", "=", "0", "\n", "\n", "# These are the required output channel for each node", "\n", "node_to_input_size", "=", "[", "C_set", "[", "2", "]", ",", "C_set", "[", "3", "]", ",", "C_set", "[", "0", "]", ",", "C_set", "[", "0", "]", "]", "\n", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "\n", "                ", "if", "\"sep_conv\"", "in", "name", ":", "\n", "                    ", "op", "=", "OPS", "[", "name", "]", "(", "C_set", "[", "index", "]", ",", "sep_conv_set", "[", "sep_conv_set_index", "]", ",", "node_to_input_size", "[", "node_index", "]", ",", "1", ",", "\n", "True", ")", "\n", "sep_conv_set_index", "=", "sep_conv_set_index", "+", "1", "\n", "", "else", ":", "\n", "                    ", "op", "=", "OPS", "[", "name", "]", "(", "C_set", "[", "index", "]", ",", "node_to_input_size", "[", "node_index", "]", ",", "1", ",", "True", ")", "\n", "", "edge_count", "=", "edge_count", "+", "1", "\n", "# Every node has 2 input edges", "\n", "if", "edge_count", "==", "2", ":", "\n", "                    ", "node_index", "=", "node_index", "+", "1", "\n", "edge_count", "=", "0", "\n", "# print(name, index)", "\n", "", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "\n", "", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.Cell._compile_DARTS_PLUS": [[101, 156], ["len", "torch.ModuleList", "torch.ModuleList", "len", "len", "len", "zip", "zip"], "methods", ["None"], ["", "def", "_compile_DARTS_PLUS", "(", "self", ",", "C_set", ",", "sep_conv_set", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "# This is the final feature map size after concatenation from all intermediate nodes", "\n", "# Please be cautious of this in the future", "\n", "if", "reduction", ":", "\n", "            ", "self", ".", "concat_size", "=", "4", "*", "C_set", "[", "0", "]", "# Final concat size is 4x C0 channel size", "\n", "", "else", ":", "\n", "            ", "self", ".", "concat_size", "=", "C_set", "[", "0", "]", "+", "C_set", "[", "0", "]", "+", "C_set", "[", "2", "]", "+", "C_set", "[", "3", "]", "# This need to be determined analytically! Draw the genotype on a piece of paper", "\n", "\n", "", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "                ", "stride", "=", "2", "if", "index", "<", "2", "else", "1", "\n", "# reduction cell only has 2 channel values now! update!!", "\n", "if", "index", "==", "1", "and", "name", "==", "'skip_connect'", ":", "\n", "# This becomes a factorized reduce!", "\n", "                    ", "op", "=", "OPS", "[", "name", "]", "(", "C_set", "[", "1", "]", ",", "C_set", "[", "0", "]", ",", "stride", ",", "True", ")", "\n", "", "else", ":", "\n", "                    ", "op", "=", "OPS", "[", "name", "]", "(", "C_set", "[", "0", "]", ",", "C_set", "[", "0", "]", ",", "stride", ",", "True", ")", "\n", "# print(name, index)", "\n", "", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "", "else", ":", "\n", "\n", "            ", "node_index", "=", "0", "\n", "sep_conv_set_index", "=", "0", "\n", "edge_count", "=", "0", "\n", "\n", "# These are the required output channel for each node", "\n", "node_to_input_size", "=", "[", "C_set", "[", "0", "]", ",", "C_set", "[", "0", "]", ",", "C_set", "[", "2", "]", ",", "C_set", "[", "3", "]", "]", "\n", "\n", "# These are the required input channel size for each edge", "\n", "edge_to_input_size", "=", "[", "C_set", "[", "0", "]", ",", "C_set", "[", "1", "]", ",", "C_set", "[", "0", "]", ",", "C_set", "[", "0", "]", ",", "C_set", "[", "1", "]", ",", "C_set", "[", "0", "]", ",", "C_set", "[", "0", "]", ",", "C_set", "[", "2", "]", "]", "\n", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "\n", "                ", "if", "\"sep_conv\"", "in", "name", ":", "\n", "                    ", "op", "=", "OPS", "[", "name", "]", "(", "edge_to_input_size", "[", "edge_count", "]", ",", "sep_conv_set", "[", "sep_conv_set_index", "]", ",", "\n", "node_to_input_size", "[", "node_index", "]", ",", "1", ",", "True", ")", "\n", "sep_conv_set_index", "=", "sep_conv_set_index", "+", "1", "\n", "", "else", ":", "\n", "                    ", "op", "=", "OPS", "[", "name", "]", "(", "edge_to_input_size", "[", "edge_count", "]", ",", "node_to_input_size", "[", "node_index", "]", ",", "1", ",", "True", ")", "\n", "", "edge_count", "=", "edge_count", "+", "1", "\n", "# Every node has 2 input edges", "\n", "if", "edge_count", "%", "2", "==", "0", ":", "\n", "                    ", "node_index", "=", "node_index", "+", "1", "\n", "# edge_count = 0", "\n", "# print(name, index)", "\n", "", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "\n", "", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.Cell.forward": [[157, 177], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "utils.drop_path", "isinstance", "utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.drop_path", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.AuxiliaryHeadImageNet.__init__": [[182, 200], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "# Need to adjust dimension at this point based on number of extra layers", "\n", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.AuxiliaryHeadImageNet.forward": [[201, 205], ["model.AuxiliaryHeadImageNet.features", "model.AuxiliaryHeadImageNet.classifier", "model.AuxiliaryHeadImageNet.view", "model.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.AuxiliaryHeadCIFAR.__init__": [[208, 222], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.AuxiliaryHeadCIFAR.forward": [[223, 227], ["model.AuxiliaryHeadCIFAR.features", "model.AuxiliaryHeadCIFAR.classifier", "model.AuxiliaryHeadCIFAR.view", "model.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.NetworkCIFAR.__init__": [[231, 272], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_list", ",", "sep_conv_list", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "arch", ")", ":", "\n", "        ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "# stem_multiplier = 3", "\n", "C_curr", "=", "C_list", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "# C_prev_prev, C_prev, C_curr = C_curr, C_curr, C", "\n", "C_prev_prev", ",", "C_prev", "=", "C_curr", ",", "C_curr", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "\n", "# Only increment this for normal cells. Reduction cells do not have sep convs", "\n", "sep_conv_list_index", "=", "0", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "# C_curr *= 2", "\n", "                ", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "\n", "", "cell", "=", "Cell", "(", "arch", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_list", "[", "i", "+", "1", "]", ",", "sep_conv_list", "[", "sep_conv_list_index", "]", ",", "reduction", ",", "\n", "reduction_prev", ")", "\n", "if", "not", "reduction", ":", "\n", "                ", "sep_conv_list_index", "=", "sep_conv_list_index", "+", "1", "\n", "\n", "", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "concat_size", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.NetworkCIFAR.forward": [[273, 284], ["model.NetworkCIFAR.stem", "enumerate", "model.NetworkCIFAR.global_pooling", "model.NetworkCIFAR.classifier", "model.NetworkCIFAR.view", "cell", "model.NetworkCIFAR.size", "model.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.NetworkImageNet.__init__": [[287, 343], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_list", ",", "sep_conv_list", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "arch", ")", ":", "\n", "    ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "# ImageNet DARTS actually uses 2 stems, compared to CIFAR which only had 1", "\n", "# Use the 1 stem value from CIFAR for both stems for now", "\n", "C", "=", "C_list", "[", "0", "]", "[", "0", "]", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "#C_prev_prev, C_prev, C_curr = C, C, C", "\n", "C_prev_prev", ",", "C_prev", "=", "C", ",", "C", "\n", "\n", "sep_conv_list_index", "=", "0", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "#C_curr *= 2", "\n", "        ", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "arch", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_list", "[", "i", "+", "1", "]", ",", "sep_conv_list", "[", "sep_conv_list_index", "]", ",", "reduction", ",", "\n", "reduction_prev", ")", "\n", "\n", "if", "not", "reduction", ":", "\n", "        ", "sep_conv_list_index", "=", "sep_conv_list_index", "+", "1", "\n", "\n", "", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "concat_size", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "\n", "#Update from 7 -> 2. Final feature map 2x2", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.model.NetworkImageNet.forward": [[344, 356], ["model.NetworkImageNet.stem0", "model.NetworkImageNet.stem1", "enumerate", "model.NetworkImageNet.global_pooling", "model.NetworkImageNet.classifier", "model.NetworkImageNet.view", "cell", "model.NetworkImageNet.size", "model.NetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.calculate_correct_output_sizes": [[34, 112], ["range", "range", "copy.deepcopy", "copy.deepcopy", "range", "len", "range", "numpy.average", "len", "range", "len", "len", "len", "numpy.array", "len", "adaptive_graph.even_round", "numpy.average", "numpy.average", "numpy.array", "numpy.array", "int", "int"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.even_round"], ["def", "calculate_correct_output_sizes", "(", "input_ranks", ",", "output_ranks", ",", "conv_size_list", ",", "shortcut_indexes", ",", "threshold", ",", "final", "=", "True", ")", ":", "\n", "#Note that input_ranks/output_ranks may have a different size than conv_size_list", "\n", "#threshold=GLOBALS.CONFIG['adapt_rank_threshold']", "\n", "    ", "'''\n    input_ranks_layer_1, output_ranks_layer_1 = input_ranks[0], output_ranks[0]\n\n    input_ranks_superblock_1, output_ranks_superblock_1 = input_ranks[1:shortcut_indexes[0]], output_ranks[1:shortcut_indexes[0]]\n    input_ranks_superblock_2, output_ranks_superblock_2 = input_ranks[shortcut_indexes[0]+1:shortcut_indexes[1]], output_ranks[shortcut_indexes[0]+1:shortcut_indexes[1]]\n    input_ranks_superblock_3, output_ranks_superblock_3 = input_ranks[shortcut_indexes[1]+1:shortcut_indexes[2]], output_ranks[shortcut_indexes[1]+1:shortcut_indexes[2]]\n    input_ranks_superblock_4, output_ranks_superblock_4 = input_ranks[shortcut_indexes[2]+1:shortcut_indexes[3]], output_ranks[shortcut_indexes[2]+1:shortcut_indexes[3]]\n    input_ranks_superblock_5, output_ranks_superblock_5 = input_ranks[shortcut_indexes[3]+1:], output_ranks[shortcut_indexes[2]+1:shortcut_indexes[3]]'''", "\n", "\n", "temp_shortcut_indexes", "=", "[", "0", "]", "+", "shortcut_indexes", "+", "[", "len", "(", "input_ranks", ")", "]", "\n", "new_input_ranks", "=", "[", "]", "\n", "new_output_ranks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "temp_shortcut_indexes", ")", "-", "1", ",", "1", ")", ":", "\n", "        ", "new_input_ranks", "+=", "[", "input_ranks", "[", "temp_shortcut_indexes", "[", "i", "]", "+", "1", ":", "temp_shortcut_indexes", "[", "i", "+", "1", "]", "]", "]", "\n", "new_output_ranks", "+=", "[", "output_ranks", "[", "temp_shortcut_indexes", "[", "i", "]", "+", "1", ":", "temp_shortcut_indexes", "[", "i", "+", "1", "]", "]", "]", "\n", "\n", "#new_input_ranks = [input_ranks_superblock_1] + [input_ranks_superblock_2] + [input_ranks_superblock_3] + [input_ranks_superblock_4] + [input_ranks_superblock_5]", "\n", "#new_output_ranks = [output_ranks_superblock_1] + [output_ranks_superblock_2] + [output_ranks_superblock_3] + [output_ranks_superblock_4] + [output_ranks_superblock_5]", "\n", "\n", "#print(new_input_ranks,'INPUT RANKS WITHOUT SHORTCUTS')", "\n", "#print(new_output_ranks,'OUTPUT RANKS WITHOUT SHORTCUTS')", "\n", "\n", "", "block_averages", "=", "[", "]", "\n", "block_averages_input", "=", "[", "]", "\n", "block_averages_output", "=", "[", "]", "\n", "grey_list_input", "=", "[", "]", "\n", "grey_list_output", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "new_input_ranks", ")", ",", "1", ")", ":", "\n", "        ", "block_averages", "+=", "[", "[", "]", "]", "\n", "block_averages_input", "+=", "[", "[", "]", "]", "\n", "block_averages_output", "+=", "[", "[", "]", "]", "\n", "grey_list_input", "+=", "[", "[", "]", "]", "\n", "grey_list_output", "+=", "[", "[", "]", "]", "\n", "temp_counter", "=", "0", "\n", "for", "j", "in", "range", "(", "1", ",", "len", "(", "new_input_ranks", "[", "i", "]", ")", ",", "2", ")", ":", "\n", "            ", "block_averages_input", "[", "i", "]", "=", "block_averages_input", "[", "i", "]", "+", "[", "new_input_ranks", "[", "i", "]", "[", "j", "]", "]", "\n", "block_averages_output", "[", "i", "]", "=", "block_averages_output", "[", "i", "]", "+", "[", "new_output_ranks", "[", "i", "]", "[", "j", "-", "1", "]", "]", "\n", "\n", "grey_list_input", "[", "i", "]", "=", "grey_list_input", "[", "i", "]", "+", "[", "new_input_ranks", "[", "i", "]", "[", "j", "-", "1", "]", "]", "\n", "grey_list_output", "[", "i", "]", "=", "grey_list_output", "[", "i", "]", "+", "[", "new_output_ranks", "[", "i", "]", "[", "j", "]", "]", "\n", "\n", "", "block_averages_input", "[", "i", "]", "=", "block_averages_input", "[", "i", "]", "+", "[", "np", ".", "average", "(", "np", ".", "array", "(", "grey_list_input", "[", "i", "]", ")", ")", "]", "\n", "block_averages_output", "[", "i", "]", "=", "block_averages_output", "[", "i", "]", "+", "[", "np", ".", "average", "(", "np", ".", "array", "(", "grey_list_output", "[", "i", "]", ")", ")", "]", "\n", "block_averages", "[", "i", "]", "=", "np", ".", "average", "(", "np", ".", "array", "(", "[", "block_averages_input", "[", "i", "]", ",", "block_averages_output", "[", "i", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#print(conv_size_list,'CONV SIZE LIST')", "\n", "", "output_conv_size_list", "=", "copy", ".", "deepcopy", "(", "conv_size_list", ")", "\n", "rank_averages", "=", "copy", ".", "deepcopy", "(", "conv_size_list", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "block_averages", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "len", "(", "conv_size_list", "[", "i", "]", ")", ")", ":", "\n", "            ", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "if", "(", "j", "%", "2", "==", "0", ")", ":", "\n", "                    ", "scaling_factor", "=", "block_averages", "[", "i", "]", "[", "-", "1", "]", "-", "threshold", "\n", "", "else", ":", "\n", "                    ", "scaling_factor", "=", "block_averages", "[", "i", "]", "[", "int", "(", "(", "j", "-", "1", ")", "/", "2", ")", "]", "-", "threshold", "\n", "", "", "else", ":", "\n", "                ", "if", "(", "j", "%", "2", "==", "1", ")", ":", "\n", "                    ", "scaling_factor", "=", "block_averages", "[", "i", "]", "[", "-", "1", "]", "-", "threshold", "\n", "", "else", ":", "\n", "                    ", "scaling_factor", "=", "block_averages", "[", "i", "]", "[", "int", "(", "j", "/", "2", ")", "]", "-", "threshold", "\n", "", "", "output_conv_size_list", "[", "i", "]", "[", "j", "]", "=", "even_round", "(", "output_conv_size_list", "[", "i", "]", "[", "j", "]", "*", "(", "1", "+", "scaling_factor", ")", ")", "\n", "rank_averages", "[", "i", "]", "[", "j", "]", "=", "scaling_factor", "+", "threshold", "\n", "\n", "", "", "if", "final", "==", "True", ":", "\n", "        ", "GLOBALS", ".", "super1_idx", "=", "output_conv_size_list", "[", "0", "]", "\n", "GLOBALS", ".", "super2_idx", "=", "output_conv_size_list", "[", "1", "]", "\n", "GLOBALS", ".", "super3_idx", "=", "output_conv_size_list", "[", "2", "]", "\n", "GLOBALS", ".", "super4_idx", "=", "output_conv_size_list", "[", "3", "]", "\n", "GLOBALS", ".", "super5_idx", "=", "output_conv_size_list", "[", "4", "]", "\n", "GLOBALS", ".", "index", "=", "output_conv_size_list", "[", "0", "]", "+", "output_conv_size_list", "[", "1", "]", "+", "output_conv_size_list", "[", "2", "]", "+", "output_conv_size_list", "[", "3", "]", "+", "output_conv_size_list", "[", "4", "]", "\n", "\n", "#print(output_conv_size_list,'OUTPUT CONV SIZE LIST')", "\n", "", "return", "output_conv_size_list", ",", "rank_averages", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.get_ranks": [[113, 132], ["pandas.read_excel", "last_rank_col_in.tolist.tolist", "last_rank_col_out.tolist.tolist", "col.startswith", "col.startswith"], "function", ["None"], ["", "def", "get_ranks", "(", "path", "=", "GLOBALS", ".", "EXCEL_PATH", ",", "epoch_number", "=", "-", "1", ")", ":", "\n", "    ", "'''\n    - Read from .adas-output excel file\n    - Get Final epoch ranks\n    '''", "\n", "sheet", "=", "pd", ".", "read_excel", "(", "path", ",", "index_col", "=", "0", ")", "\n", "out_rank_col", "=", "[", "col", "for", "col", "in", "sheet", "if", "col", ".", "startswith", "(", "'out_rank'", ")", "]", "\n", "in_rank_col", "=", "[", "col", "for", "col", "in", "sheet", "if", "col", ".", "startswith", "(", "'in_rank'", ")", "]", "\n", "\n", "out_ranks", "=", "sheet", "[", "out_rank_col", "]", "\n", "in_ranks", "=", "sheet", "[", "in_rank_col", "]", "\n", "\n", "last_rank_col_out", "=", "out_ranks", ".", "iloc", "[", ":", ",", "epoch_number", "]", "\n", "last_rank_col_in", "=", "in_ranks", ".", "iloc", "[", ":", ",", "epoch_number", "]", "\n", "\n", "last_rank_col_in", "=", "last_rank_col_in", ".", "tolist", "(", ")", "\n", "last_rank_col_out", "=", "last_rank_col_out", ".", "tolist", "(", ")", "\n", "\n", "return", "last_rank_col_in", ",", "last_rank_col_out", "\n", "", "def", "compile_adaptive_files", "(", "file_name", ",", "num_trials", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.compile_adaptive_files": [[132, 146], ["range", "file_name.find", "int", "adaptive_set.append", "str"], "function", ["None"], ["", "def", "compile_adaptive_files", "(", "file_name", ",", "num_trials", ")", ":", "\n", "#CHANGE THIS VALUE FOR NUMBER OF TRIALS", "\n", "    ", "num_trials", "=", "num_trials", "\n", "adaptive_set", "=", "[", "]", "\n", "manipulate_index", "=", "file_name", ".", "find", "(", "'trial'", ")", "+", "6", "\n", "try", ":", "\n", "        ", "blah", "=", "int", "(", "file_name", "[", "manipulate_index", "+", "1", "]", ")", "\n", "shift", "=", "2", "\n", "", "except", ":", "\n", "        ", "shift", "=", "1", "\n", "", "for", "trial_num", "in", "range", "(", "0", ",", "num_trials", ")", ":", "\n", "        ", "adaptive_set", ".", "append", "(", "file_name", "[", "0", ":", "manipulate_index", "]", "+", "str", "(", "trial_num", ")", "+", "file_name", "[", "manipulate_index", "+", "shift", ":", "]", ")", "\n", "\n", "", "return", "adaptive_set", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.create_adaptive_graphs": [[149, 180], ["adaptive_graph.compile_adaptive_files", "matplotlib.plot", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "pandas.read_excel", "range", "numpy.arange", "epoch_num.append", "accuracies.append", "min", "max", "str", "str"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.compile_adaptive_files"], ["", "def", "create_adaptive_graphs", "(", "file_name", ",", "num_epochs", ",", "num_trials", ",", "out_folder", ")", ":", "\n", "#CHANGE THIS VALUE FOR NUMBER OF EPOCHS PER TRIAL", "\n", "    ", "total_num_epochs", "=", "num_epochs", "\n", "accuracies", "=", "[", "]", "\n", "epoch_num", "=", "[", "]", "\n", "count", "=", "0", "\n", "\n", "adaptive_set", "=", "compile_adaptive_files", "(", "file_name", ",", "num_trials", ")", "\n", "#print(adaptive_set,'adaptive_set')", "\n", "for", "trial", "in", "adaptive_set", ":", "\n", "        ", "dfs", "=", "pd", ".", "read_excel", "(", "trial", ")", "\n", "#print(dfs)", "\n", "for", "epoch", "in", "range", "(", "0", ",", "total_num_epochs", ")", ":", "\n", "            ", "epoch_num", ".", "append", "(", "epoch", "+", "count", ")", "\n", "accuracies", ".", "append", "(", "dfs", "[", "'test_acc_epoch_'", "+", "str", "(", "epoch", ")", "]", "[", "0", "]", "*", "100", ")", "\n", "new_trial_indic", "=", "''", "\n", "", "count", "+=", "total_num_epochs", "\n", "#    print(epoch_num)", "\n", "#    print(accuracies)", "\n", "", "if", "platform", ".", "system", "==", "'Windows'", ":", "\n", "        ", "slash", "=", "'\\\\'", "\n", "", "else", ":", "\n", "        ", "slash", "=", "'/'", "\n", "", "fig", "=", "plt", ".", "plot", "(", "epoch_num", ",", "accuracies", ",", "label", "=", "'accuracy vs epoch'", ",", "marker", "=", "'o'", ",", "color", "=", "'r'", ")", "\n", "#figure=plt.gcf()", "\n", "#figure.set_size_inches(16, 9)", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "min", "(", "epoch_num", ")", ",", "max", "(", "epoch_num", ")", "+", "1", ",", "total_num_epochs", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'Test Accuracy (%)'", ")", "\n", "plt", ".", "title", "(", "'Dynamic DASNet: Test Accuracy vs Epoch (init_conv_size='", "+", "GLOBALS", ".", "CONFIG", "[", "'init_conv_setting'", "]", "+", "' delta_thresh='", "+", "str", "(", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold'", "]", ")", "+", "')'", ")", "\n", "plt", ".", "savefig", "(", "out_folder", "+", "slash", "+", "'dynamic_accuracy_plot.png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "#plt.show()", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.remove_brackets": [[184, 202], ["range", "len", "len"], "function", ["None"], ["", "def", "remove_brackets", "(", "value", ")", ":", "\n", "    ", "check", "=", "']'", "\n", "val", "=", "''", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "value", ")", ",", "1", ")", ":", "\n", "        ", "if", "i", "==", "len", "(", "value", ")", "-", "1", ":", "\n", "            ", "val", "+=", "']'", "\n", "break", "\n", "", "if", "value", "[", "i", "]", "==", "check", ":", "\n", "            ", "if", "check", "==", "']'", ":", "\n", "                ", "check", "=", "'['", "\n", "if", "value", "[", "i", "+", "1", "]", "==", "check", ":", "\n", "                    ", "val", "+=", "', '", "\n", "i", "+=", "2", "\n", "", "", "else", ":", "\n", "                ", "check", "=", "']'", "\n", "", "", "else", ":", "\n", "            ", "val", "+=", "value", "[", "i", "]", "\n", "", "", "return", "val", "\n", "", "def", "get_trial_info", "(", "file_name", ",", "num_trials", ",", "num_layers", ",", "specified_epoch", ",", "skip_connections", ",", "info", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.get_trial_info": [[202, 215], ["adaptive_graph.compile_adaptive_files", "range", "range", "final_output.append", "pandas.read_excel", "range", "final_output[].append", "str"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.compile_adaptive_files"], ["", "def", "get_trial_info", "(", "file_name", ",", "num_trials", ",", "num_layers", ",", "specified_epoch", ",", "skip_connections", ",", "info", ")", ":", "\n", "    ", "adaptive_set", "=", "compile_adaptive_files", "(", "file_name", ",", "num_trials", ")", "\n", "final_output", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_trials", ",", "1", ")", ":", "\n", "        ", "final_output", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "num_trials", ")", ":", "\n", "        ", "dfs", "=", "pd", ".", "read_excel", "(", "adaptive_set", "[", "i", "]", ")", "\n", "#print(dfs)", "\n", "for", "j", "in", "range", "(", "0", ",", "num_layers", ")", ":", "\n", "            ", "if", "(", "j", "in", "skip_connections", ")", ":", "\n", "                ", "continue", "\n", "", "final_output", "[", "i", "]", ".", "append", "(", "dfs", "[", "info", "+", "str", "(", "specified_epoch", ")", "]", "[", "j", "]", ")", "\n", "", "", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.create_plot": [[279, 327], ["range", "range", "range", "matplotlib.figure", "range", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.gcf", "matplotlib.savefig", "len", "len", "len", "matplotlib.bar", "matplotlib.xticks", "matplotlib.xticks", "plt.gcf.set_size_inches", "plt.gcf.set_size_inches", "len", "str", "str", "str", "str", "range", "range", "range", "range", "str", "len", "len", "len", "len"], "function", ["None"], ["def", "create_plot", "(", "layers_size_list", ",", "num_trials", ",", "path", ",", "evo_type", ",", "specified_epoch", ",", "trial_increment", "=", "1", ")", ":", "\n", "    ", "layers_list", "=", "[", "[", "]", "]", "\n", "if", "num_trials", "<=", "10", ":", "\n", "        ", "mult_val", ",", "temp_val", "=", "6", ",", "5", "\n", "", "else", ":", "\n", "        ", "mult_val", ",", "temp_val", "=", "(", "45", "/", "22", ")", "*", "num_trials", ",", "10", "\n", "\n", "", "barWidth", "=", "(", "0.5", "/", "6", ")", "*", "mult_val", "\n", "if", "num_trials", "<=", "10", ":", "\n", "        ", "trueWidth", "=", "barWidth", "\n", "", "else", ":", "\n", "        ", "trueWidth", "=", "(", "1.2", "/", "15", ")", "*", "num_trials", "\n", "\n", "", "true_temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "layers_size_list", ")", ",", "1", ")", ":", "\n", "        ", "if", "i", "%", "trial_increment", "==", "0", ":", "\n", "            ", "true_temp", "+=", "[", "layers_size_list", "[", "i", "]", "]", "\n", "", "", "layers_size_list", "=", "true_temp", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layers_size_list", "[", "0", "]", ")", "+", "1", ",", "1", ")", ":", "\n", "        ", "layers_list", "[", "0", "]", "+=", "[", "mult_val", "*", "i", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layers_size_list", ")", ",", "1", ")", ":", "\n", "        ", "temp", "=", "[", "x", "+", "trueWidth", "for", "x", "in", "layers_list", "[", "i", "-", "1", "]", "]", "\n", "layers_list", "+=", "[", "temp", "]", "\n", "\n", "", "colors", "=", "[", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", "]", "\n", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "layers_size_list", ")", ",", "1", ")", ":", "\n", "        ", "plt", ".", "bar", "(", "layers_list", "[", "i", "]", ",", "layers_size_list", "[", "i", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "width", "=", "trueWidth", ",", "edgecolor", "=", "'white'", ",", "label", "=", "str", "(", "'Trial '", "+", "str", "(", "trial_increment", "*", "i", "+", "1", ")", ")", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "'SuperBlock'", ",", "fontweight", "=", "'bold'", ")", "\n", "plt", ".", "ylabel", "(", "'Layer Size'", ",", "fontweight", "=", "'bold'", ")", "\n", "plt", ".", "title", "(", "'DASNet:'", "+", "evo_type", "+", "' Evolution w.r.t. Trial (init_conv_size='", "+", "GLOBALS", ".", "CONFIG", "[", "'init_conv_setting'", "]", "+", "' delta_thresh='", "+", "str", "(", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold'", "]", ")", "+", "')'", ")", "\n", "if", "num_trials", "<=", "20", ":", "\n", "        ", "plt", ".", "xticks", "(", "[", "mult_val", "*", "r", "+", "temp_val", "*", "barWidth", "+", "3", "+", "num_trials", "*", "0.3", "for", "r", "in", "range", "(", "len", "(", "temp", ")", ")", "]", ",", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "xticks", "(", "[", "mult_val", "*", "r", "+", "num_trials", "*", "0.3", "+", "3", "*", "num_trials", "for", "r", "in", "range", "(", "len", "(", "temp", ")", ")", "]", ",", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", "]", ")", "\n", "\n", "", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "figure", "=", "plt", ".", "gcf", "(", ")", "\n", "if", "num_trials", "<=", "20", ":", "\n", "        ", "figure", ".", "set_size_inches", "(", "15.4", ",", "5.34", ")", "\n", "", "else", ":", "\n", "        ", "figure", ".", "set_size_inches", "(", "45.4", ",", "5.34", ")", "\n", "#addition=str(GLOBALS.CONFIG['adapt_rank_threshold'])+'_conv_size='+GLOBALS.CONFIG['init_conv_setting']+'_epochpertrial='+str(GLOBALS.CONFIG['epochs_per_trial'])+'_beta='+str(GLOBALS.CONFIG['beta'])", "\n", "", "plt", ".", "savefig", "(", "path", ",", "bbox_inches", "=", "'tight'", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.adapted_info_graph": [[328, 341], ["pandas.read_excel", "range", "adaptive_graph.create_plot", "len", "pd.read_excel.iloc[].to_numpy", "ast.literal_eval", "pd.read_excel.iloc[].to_numpy", "adaptive_graph.remove_brackets"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.create_plot", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.stacked_bar_plot.remove_brackets"], ["", "def", "adapted_info_graph", "(", "adapted_file_name", ",", "num_trials", ",", "path", ",", "evo_type", ",", "specified_epoch", ")", ":", "\n", "    ", "layers_info", "=", "pd", ".", "read_excel", "(", "adapted_file_name", ")", "#This file_name is an adapted_blah file_name", "\n", "layers_size_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "layers_info", ".", "iloc", "[", ":", ",", "0", "]", ".", "to_numpy", "(", ")", ")", ")", ":", "\n", "        ", "temp", "=", "''", "\n", "main", "=", "layers_info", ".", "iloc", "[", "i", ",", "1", ":", "]", ".", "to_numpy", "(", ")", "\n", "for", "j", "in", "main", ":", "\n", "            ", "temp", "+=", "j", "[", ":", "]", "\n", "", "temp", "=", "ast", ".", "literal_eval", "(", "remove_brackets", "(", "temp", ")", ")", "\n", "layers_size_list", "+=", "[", "temp", "]", "\n", "\n", "", "create_plot", "(", "layers_size_list", ",", "num_trials", ",", "path", ",", "evo_type", ",", "specified_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.trial_info_graph": [[342, 345], ["adaptive_graph.get_trial_info", "adaptive_graph.create_plot"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.get_trial_info", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.create_plot"], ["", "def", "trial_info_graph", "(", "trial_file_name", ",", "num_trials", ",", "num_layers", ",", "path", ",", "evo_type", ",", "info", ",", "shortcut_indexes", ",", "specified_epoch", ")", ":", "\n", "    ", "layers_size_list", "=", "get_trial_info", "(", "trial_file_name", ",", "num_trials", ",", "num_layers", ",", "specified_epoch", ",", "shortcut_indexes", ",", "info", ")", "\n", "create_plot", "(", "layers_size_list", ",", "num_trials", ",", "path", ",", "evo_type", ",", "specified_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.even_round": [[346, 348], ["int", "round"], "function", ["None"], ["", "def", "even_round", "(", "number", ")", ":", "\n", "    ", "return", "int", "(", "round", "(", "number", "/", "2", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.adaptive_stop": [[349, 368], ["range", "range", "len", "len"], "function", ["None"], ["", "def", "adaptive_stop", "(", "x_data", ",", "y_data", ",", "threshold_min", ",", "epoch_wait", ")", ":", "\n", "    ", "'''From the wth epoch, If there is an increase of x in any of the next y epochs, keep going.\n    If not, make the value at the wth epoch the max'''", "\n", "ranks", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "condition", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x_data", ")", "-", "epoch_wait", ",", "1", ")", ":", "\n", "        ", "condition", "=", "False", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "epoch_wait", "+", "i", "+", "1", ",", "1", ")", ":", "\n", "            ", "if", "(", "(", "y_data", "[", "j", "]", "-", "y_data", "[", "i", "]", ")", ">", "threshold_min", ")", ":", "\n", "                ", "condition", "=", "True", "\n", "break", "\n", "", "", "if", "condition", "==", "False", ":", "\n", "            ", "return", "i", "\n", "", "'''if condition==True:\n            #final_vals=[(i,y_data[i]) for i in x_data[-epoch_wait:]]\n            #final_vals=final_vals.sort(key=lambda tup: tup[1])\n            #return final_vals[-1][0]\n            return len(x_data)-1'''", "\n", "", "return", "len", "(", "x_data", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.slope": [[370, 372], ["int"], "function", ["None"], ["", "def", "slope", "(", "y_data", ",", "breakpoint", ")", ":", "\n", "    ", "return", "(", "y_data", "[", "int", "(", "breakpoint", ")", "]", "-", "y_data", "[", "GLOBALS", ".", "CONFIG", "[", "'stable_epoch'", "]", "]", ")", "/", "(", "breakpoint", "-", "GLOBALS", ".", "CONFIG", "[", "'stable_epoch'", "]", "+", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.slope_clone": [[373, 375], ["int"], "function", ["None"], ["", "def", "slope_clone", "(", "y_data", ",", "breakpoint", ")", ":", "\n", "    ", "return", "(", "y_data", "[", "int", "(", "breakpoint", ")", "]", "-", "y_data", "[", "0", "]", ")", "/", "(", "breakpoint", "+", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.calculate_slopes": [[378, 402], ["time.time", "range", "time.time", "print", "slope_averages.append", "len", "range", "range", "len", "range", "adaptive_graph.adaptive_stop", "adaptive_graph.slope", "len", "adaptive_graph.get_ranks", "adaptive_graph.calculate_correct_output_sizes"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.adaptive_stop", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.slope", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.get_ranks", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.calculate_correct_output_sizes"], ["", "def", "calculate_slopes", "(", "conv_size_list", ",", "shortcut_indexes", ",", "path", "=", "GLOBALS", ".", "EXCEL_PATH", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "slope_averages", "=", "[", "]", "\n", "for", "i", "in", "conv_size_list", ":", "\n", "        ", "slope_averages", ".", "append", "(", "[", "0.1", "]", "*", "len", "(", "i", ")", ")", "\n", "\n", "", "epoch_num", "=", "[", "i", "for", "i", "in", "range", "(", "GLOBALS", ".", "CONFIG", "[", "'epochs_per_trial'", "]", ")", "]", "\n", "for", "superblock", "in", "range", "(", "0", ",", "len", "(", "conv_size_list", ")", ",", "1", ")", ":", "\n", "        ", "for", "layer_num", "in", "range", "(", "0", ",", "len", "(", "conv_size_list", "[", "superblock", "]", ")", ",", "1", ")", ":", "\n", "            ", "yaxis", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "GLOBALS", ".", "CONFIG", "[", "'epochs_per_trial'", "]", ")", ":", "\n", "                ", "input_ranks", ",", "output_ranks", "=", "get_ranks", "(", "path", "=", "path", ",", "epoch_number", "=", "k", ")", "\n", "rank_averages", "=", "calculate_correct_output_sizes", "(", "input_ranks", ",", "output_ranks", ",", "conv_size_list", ",", "shortcut_indexes", ",", "0.1", ",", "final", "=", "False", ")", "[", "1", "]", "\n", "yaxis", "+=", "[", "rank_averages", "[", "superblock", "]", "[", "layer_num", "]", "]", "\n", "\n", "#print(yaxis,'yaxis')", "\n", "", "break_point", "=", "adaptive_stop", "(", "epoch_num", ",", "yaxis", ",", "0.005", ",", "4", ")", "\n", "#print(break_point,'breakpoint')", "\n", "\n", "slope_averages", "[", "superblock", "]", "[", "layer_num", "]", "=", "slope", "(", "yaxis", ",", "break_point", ")", "\n", "#print(slope_averages,'SLOPE AVERAGES')", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "end", "-", "start", ",", "'TIME ELAPSED FOR CSL'", ")", "\n", "return", "slope_averages", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.stacked_bar_plot": [[403, 453], ["pandas.read_excel", "range", "numpy.transpose().tolist", "numpy.arange", "range", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.title", "matplotlib.gcf", "plt.gcf.set_size_inches", "matplotlib.savefig", "len", "pd.read_excel.iloc[].to_numpy", "ast.literal_eval", "range", "len", "len", "str", "pd.read_excel.iloc[].to_numpy", "adaptive_graph.remove_brackets", "len", "numpy.transpose", "matplotlib.bar", "matplotlib.bar", "numpy.add().tolist", "range", "str", "len", "str", "numpy.add", "str"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.stacked_bar_plot.remove_brackets"], ["", "def", "stacked_bar_plot", "(", "adapted_file_name", ",", "path", ",", "trial_increment", "=", "2", ")", ":", "\n", "    ", "'''\n    sizes_with_trials is a list of lists as follows:\n    sizes_with_trials=[sizes for trial1, sizes for 2, ... sizes for trial N]\n    '''", "\n", "layers_info", "=", "pd", ".", "read_excel", "(", "adapted_file_name", ")", "#This file_name is an adapted_blah file_name", "\n", "layers_size_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "layers_info", ".", "iloc", "[", ":", ",", "0", "]", ".", "to_numpy", "(", ")", ")", ")", ":", "\n", "        ", "temp", "=", "''", "\n", "main", "=", "layers_info", ".", "iloc", "[", "i", ",", "1", ":", "]", ".", "to_numpy", "(", ")", "\n", "for", "j", "in", "main", ":", "\n", "            ", "temp", "+=", "j", "[", ":", "]", "\n", "", "temp", "=", "ast", ".", "literal_eval", "(", "remove_brackets", "(", "temp", ")", ")", "\n", "layers_size_list", "+=", "[", "temp", "]", "\n", "", "temp", "=", "[", "]", "\n", "alternate", "=", "False", "\n", "sizes_with_trials", "=", "[", "]", "\n", "if", "trial_increment", "!=", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "layers_size_list", ")", ",", "1", ")", ":", "\n", "            ", "if", "i", "%", "trial_increment", "==", "0", ":", "\n", "                ", "temp", "+=", "[", "layers_size_list", "[", "i", "]", "]", "\n", "", "", "layers_size_list", "=", "temp", "\n", "", "sizes_with_trials", "=", "np", ".", "transpose", "(", "layers_size_list", ")", ".", "tolist", "(", ")", "\n", "\n", "x_values", "=", "np", ".", "arange", "(", "len", "(", "sizes_with_trials", "[", "0", "]", ")", ")", "\n", "temp", "=", "[", "0", "for", "i", "in", "x_values", "]", "\n", "colors", "=", "[", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#B6D094'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "\n", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "\n", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "\n", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "\n", "'#fcb045'", ",", "'#B6D094'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#B6D094'", "]", "\n", "barWidth", "=", "0.5", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sizes_with_trials", ")", ",", "1", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "plt", ".", "bar", "(", "x_values", ",", "sizes_with_trials", "[", "i", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "width", "=", "barWidth", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "bar", "(", "x_values", ",", "sizes_with_trials", "[", "i", "]", ",", "bottom", "=", "temp", ",", "color", "=", "str", "(", "colors", "[", "i", "]", ")", ",", "width", "=", "barWidth", ")", "\n", "temp", "=", "np", ".", "add", "(", "temp", ",", "sizes_with_trials", "[", "i", "]", ")", ".", "tolist", "(", ")", "\n", "", "", "names", "=", "[", "str", "(", "trial_increment", "*", "i", ")", "for", "i", "in", "range", "(", "len", "(", "x_values", ")", ")", "]", "\n", "names", "[", "0", "]", "=", "'Baseline'", "\n", "plt", ".", "xticks", "(", "x_values", ",", "names", ",", "fontweight", "=", "'bold'", ")", "\n", "plt", ".", "xlabel", "(", "'Trial Number'", ")", "\n", "plt", ".", "ylabel", "(", "'Cumulative Channel Size'", ")", "\n", "\n", "plt", ".", "title", "(", "'ResNet-like Architecture w/Channel Size ='", "+", "GLOBALS", ".", "CONFIG", "[", "'init_conv_setting'", "]", "[", ":", "2", "]", "+", "', Threshold='", "+", "str", "(", "GLOBALS", ".", "CONFIG", "[", "'delta_threshold'", "]", ")", "+", "', MC Threshold='", "+", "str", "(", "GLOBALS", ".", "CONFIG", "[", "'mapping_condition_threshold'", "]", ")", ")", "\n", "plt", ".", "title", "(", "'ResNet-like Architecture w/Channel Size =443, Threshold=, MC Threshold='", ")", "\n", "figure", "=", "plt", ".", "gcf", "(", ")", "\n", "figure", ".", "set_size_inches", "(", "11.4", ",", "5.34", ")", "\n", "plt", ".", "savefig", "(", "path", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.create_rank_graph": [[454, 496], ["range", "adaptive_graph.adaptive_stop", "matplotlib.plot", "matplotlib.axvline", "matplotlib.ylim", "print", "round", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "adaptive_graph.get_ranks", "adaptive_graph.slope_clone", "range", "adaptive_graph.calculate_correct_output_sizes"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.adaptive_stop", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.get_ranks", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.slope_clone", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.adaptive_graph.calculate_correct_output_sizes"], ["", "def", "create_rank_graph", "(", "file_name", ",", "shortcut_indexes", ",", "conv_size_list", ")", ":", "\n", "#superblock=4", "\n", "    ", "layer", "=", "15", "\n", "num_epochs", "=", "15", "\n", "epoch_num", "=", "[", "i", "for", "i", "in", "range", "(", "num_epochs", ")", "]", "\n", "yaxis", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "#data=get_trial_info(file_name,1,36,k, shortcut_indexes,'mode_rank_epoch_')[0]", "\n", "#print(len(data),'DATA')", "\n", "\n", "#data=[1,2,3,4,5,6,7,8,9,10,11,....,numlayers]", "\n", "\n", "        ", "input_ranks", ",", "output_ranks", "=", "get_ranks", "(", "path", "=", "file_name", ",", "epoch_number", "=", "k", ")", "\n", "rank_averages", "=", "calculate_correct_output_sizes", "(", "input_ranks", ",", "output_ranks", ",", "conv_size_list", ",", "shortcut_indexes", ",", "0.1", ",", "final", "=", "False", ")", "[", "1", "]", "\n", "yaxis", "+=", "[", "rank_averages", "[", "superblock", "]", "[", "layer", "]", "]", "\n", "#yaxis+=[data[layer]]", "\n", "\n", "\n", "#print(yaxis,'YAXIS VALUES')", "\n", "", "break_point", "=", "adaptive_stop", "(", "epoch_num", ",", "yaxis", ",", "0.005", ",", "4", ")", "\n", "\n", "fig", "=", "plt", ".", "plot", "(", "epoch_num", ",", "yaxis", ",", "marker", "=", "'o'", ",", "color", "=", "'r'", ",", "label", "=", "'_nolegend_'", ")", "\n", "fig", "=", "plt", ".", "axvline", "(", "x", "=", "break_point", ")", "\n", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "0.35", "]", ")", "\n", "#x_smooth,y_smooth=our_fit(np.asarray(epoch_num),np.asarray(yaxis))", "\n", "#fig=plt.plot(x_smooth,y_smooth,label='smooth curve', color='b')", "\n", "print", "(", "slope_clone", "(", "yaxis", ",", "break_point", ")", ",", "'--------------------------SLOPE OF GRAPH--------------------------'", ")", "\n", "\n", "x1", ",", "y1", "=", "epoch_num", "[", "0", "]", ",", "yaxis", "[", "0", "]", "\n", "x2", ",", "y2", "=", "break_point", ",", "yaxis", "[", "break_point", "]", "\n", "m", "=", "round", "(", "(", "y2", "-", "y1", ")", "/", "(", "x2", "-", "x1", ")", ",", "3", ")", "\n", "x_val", "=", "[", "x1", ",", "x2", "]", "\n", "y_val", "=", "[", "y1", ",", "y2", "]", "\n", "plt", ".", "plot", "(", "x_val", ",", "y_val", ",", "label", "=", "'Slope {}'", ".", "format", "(", "m", ")", ",", "color", "=", "'g'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "'Channel Size {}'", ".", "format", "(", "conv", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'Rank'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.Cutout.__init__": [[273, 275], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.Cutout.__call__": [[276, 292], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.CrossEntropyLabelSmooth.__init__": [[296, 301], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.CrossEntropyLabelSmooth.forward": [[302, 308], ["utils.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "    ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.get_mean_and_std": [[36, 50], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.init_params": [[52, 66], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.progress_bar": [[77, 119], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.format_time", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.format_time": [[121, 152], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.safe_float_cast": [[153, 159], ["float", "float"], "function", ["None"], ["", "def", "safe_float_cast", "(", "str_number", ":", "str", ")", "->", "float", ":", "\n", "    ", "try", ":", "\n", "        ", "number", "=", "float", "(", "str_number", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "number", "=", "float", "(", "'nan'", ")", "\n", "", "return", "number", "\n", "", "def", "smart_string_to_float", "(", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_float": [[159, 167], ["float", "ValueError"], "function", ["None"], ["", "def", "smart_string_to_float", "(", "\n", "string", ":", "str", ",", "\n", "e", ":", "str", "=", "'could not convert string to float'", ")", "->", "float", ":", "\n", "    ", "try", ":", "\n", "        ", "ret", "=", "float", "(", "string", ")", "\n", "return", "ret", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "ValueError", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_int": [[169, 178], ["float", "int", "ValueError"], "function", ["None"], ["", "", "def", "smart_string_to_int", "(", "\n", "string", ":", "str", ",", "\n", "e", ":", "str", "=", "'could not convert string to int'", ")", "->", "int", ":", "\n", "    ", "try", ":", "\n", "        ", "ret", "=", "int", "(", "string", ")", "\n", "return", "ret", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "ValueError", "(", "e", ")", "\n", "", "return", "float", "(", "'inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.pstats_to_dict": [[179, 197], ["list", "line.rstrip().split", "dict", "stats.split", "stats.split", "len", "stat[].split", "list.append", "line.rstrip", "name[].split"], "function", ["None"], ["", "def", "pstats_to_dict", "(", "stats", ":", "pstats", ".", "Stats", ")", "->", "List", "[", "Dict", "[", "str", ",", "Union", "[", "str", ",", "float", "]", "]", "]", ":", "\n", "    ", "formatted_stats", "=", "list", "(", ")", "\n", "stats", "=", "'ncalls'", "+", "stats", ".", "split", "(", "'ncalls'", ")", "[", "-", "1", "]", "\n", "stats", "=", "[", "line", ".", "rstrip", "(", ")", ".", "split", "(", "None", ",", "5", ")", "for", "line", "in", "\n", "stats", ".", "split", "(", "'\\n'", ")", "]", "\n", "for", "stat", "in", "stats", "[", "1", ":", "]", ":", "\n", "        ", "stats_dict", "=", "dict", "(", ")", "\n", "if", "len", "(", "stat", ")", ">=", "5", ":", "\n", "            ", "stats_dict", "[", "'n_calls'", "]", "=", "stat", "[", "0", "]", "\n", "stats_dict", "[", "'tot_time'", "]", "=", "stat", "[", "1", "]", "\n", "stats_dict", "[", "'per_call1'", "]", "=", "stat", "[", "2", "]", "\n", "stats_dict", "[", "'cum_time'", "]", "=", "stat", "[", "3", "]", "\n", "stats_dict", "[", "'per_call2'", "]", "=", "stat", "[", "4", "]", "\n", "name", "=", "stat", "[", "5", "]", ".", "split", "(", "':'", ")", "\n", "stats_dict", "[", "'name'", "]", "=", "f\"{name[0].split('/')[-1]}_line(function)_{name[1]}\"", "\n", "formatted_stats", ".", "append", "(", "stats_dict", ")", "\n", "", "", "return", "formatted_stats", "\n", "", "def", "parse_config", "(", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.parse_config": [[197, 263], ["utils.smart_string_to_float", "utils.smart_string_to_int", "utils.smart_string_to_float", "utils.smart_string_to_int", "utils.smart_string_to_int", "utils.smart_string_to_float", "utils.smart_string_to_float", "utils.smart_string_to_int", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "ValueError", "enumerate", "utils.smart_string_to_float", "ValueError", "utils.smart_string_to_float"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_float", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_int", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_float", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_int", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_int", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_float", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_float", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_int", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_float", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.smart_string_to_float"], ["", "def", "parse_config", "(", "\n", "config", ":", "Dict", "[", "str", ",", "Union", "[", "str", ",", "float", ",", "int", "]", "]", ")", "->", "Dict", "[", "\n", "str", ",", "Union", "[", "str", ",", "float", ",", "int", "]", "]", ":", "\n", "    ", "valid_dataset", "=", "[", "'CIFAR10'", ",", "'CIFAR100'", ",", "'ImageNet'", "]", "\n", "if", "config", "[", "'dataset'", "]", "not", "in", "valid_dataset", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"config.yaml: unknown dataset {config['dataset']}. \"", "+", "\n", "f\"Must be one of {valid_dataset}\"", ")", "\n", "", "valid_models", "=", "[", "\n", "'VGG16'", ",", "'ResNet34'", ",", "'PreActResNet18'", ",", "\n", "'GoogLeNet'", ",", "'densenet_cifar'", ",", "'ResNeXt29_2x64d'", ",", "'MobileNet'", ",", "\n", "'MobileNetV2'", ",", "'DPN92'", ",", "'ShuffleNetG2'", ",", "'SENet18'", ",", "'ShuffleNetV2'", ",", "\n", "'EfficientNetB0'", ",", "'DASNet34'", ",", "'DASNet50'", ",", "'DARTS'", ",", "'DARTSPlus'", "]", "\n", "if", "config", "[", "'network'", "]", "not", "in", "valid_models", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"config.yaml: unknown model {config['network']}.\"", "+", "\n", "f\"Must be one of {valid_models}\"", ")", "\n", "\n", "", "if", "config", "[", "'lr_scheduler'", "]", "==", "'AdaS'", "and", "config", "[", "'optim_method'", "]", "!=", "'SGD'", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'config.yaml: AdaS can only be used with SGD'", ")", "\n", "\n", "\n", "", "config", "[", "'beta'", "]", "=", "smart_string_to_float", "(", "\n", "config", "[", "'beta'", "]", ",", "\n", "e", "=", "'config.yaml: beta must be a float'", ")", "\n", "e", "=", "'config.yaml: init_lr must be a float or list of floats'", "\n", "if", "not", "isinstance", "(", "config", "[", "'init_lr'", "]", ",", "str", ")", ":", "\n", "        ", "if", "isinstance", "(", "config", "[", "'init_lr'", "]", ",", "list", ")", ":", "\n", "            ", "for", "i", ",", "lr", "in", "enumerate", "(", "config", "[", "'init_lr'", "]", ")", ":", "\n", "                ", "config", "[", "'init_lr'", "]", "[", "i", "]", "=", "smart_string_to_float", "(", "lr", ",", "e", "=", "e", ")", "\n", "", "", "else", ":", "\n", "            ", "config", "[", "'init_lr'", "]", "=", "smart_string_to_float", "(", "config", "[", "'init_lr'", "]", ",", "e", "=", "e", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "config", "[", "'init_lr'", "]", "!=", "'auto'", ":", "\n", "            ", "raise", "ValueError", "(", "e", ")", "\n", "", "", "config", "[", "'max_epoch'", "]", "=", "smart_string_to_int", "(", "\n", "config", "[", "'max_epoch'", "]", ",", "\n", "e", "=", "'config.yaml: max_epoch must be an int'", ")", "\n", "config", "[", "'early_stop_threshold'", "]", "=", "smart_string_to_float", "(", "\n", "config", "[", "'early_stop_threshold'", "]", ",", "\n", "e", "=", "'config.yaml: early_stop_threshold must be a float'", ")", "\n", "config", "[", "'early_stop_patience'", "]", "=", "smart_string_to_int", "(", "\n", "config", "[", "'early_stop_patience'", "]", ",", "\n", "e", "=", "'config.yaml: early_stop_patience must be an int'", ")", "\n", "config", "[", "'mini_batch_size'", "]", "=", "smart_string_to_int", "(", "\n", "config", "[", "'mini_batch_size'", "]", ",", "\n", "e", "=", "'config.yaml: mini_batch_size must be an int'", ")", "\n", "config", "[", "'min_lr'", "]", "=", "smart_string_to_float", "(", "\n", "config", "[", "'min_lr'", "]", ",", "\n", "e", "=", "'config.yaml: min_lr must be a float'", ")", "\n", "config", "[", "'zeta'", "]", "=", "smart_string_to_float", "(", "\n", "config", "[", "'zeta'", "]", ",", "\n", "e", "=", "'config.yaml: zeta must be a float'", ")", "\n", "config", "[", "'p'", "]", "=", "smart_string_to_int", "(", "\n", "config", "[", "'p'", "]", ",", "\n", "e", "=", "'config.yaml: p must be an int'", ")", "\n", "'''\n        NOT WORKING WITH NUM_WORKERS in this version of search code\n        config['num_workers'] = smart_string_to_int(\n        config['num_workers'],\n        e='config.yaml: num_works must be an int')\n    '''", "\n", "if", "config", "[", "'loss'", "]", "!=", "'cross_entropy'", ":", "\n", "        ", "raise", "ValueError", "(", "'config.yaml: loss must be cross_entropy'", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.utils.drop_path": [[264, 271], ["Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet.__init__": [[65, 84], ["os.path.expanduser", "torchvision.datasets.utils.verify_str_arg", "datasets.TinyImageNet.parse_archives", "datasets.TinyImageNet.load_meta_file", "torchvision.datasets.folder.ImageFolder.__init__", "ValueError", "enumerate"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.ImageNet.parse_archives", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.load_meta_file", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "download", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "split", "=", "verify_str_arg", "(", "split", ",", "\"split\"", ",", "(", "\"train\"", ",", "\"val\"", ")", ")", "\n", "self", ".", "root", "=", "root", "\n", "if", "download", ":", "\n", "# self.download()", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Downloading of TinyImageNet is not supported. \"", "+", "\n", "\"You must manually download the 'tiny-imagenet-200.zip' from\"", "+", "\n", "f\" {self.url} and extract the 'tiny-imagenet-200' folder \"", "+", "\n", "\"into the folder specified by 'root'. That is, once the\"", "+", "\n", "\"'tiny-imagenet-200' folder is extracted, specify the data \"", "+", "\n", "\"directory for this program as the path for to that folder\"", ")", "\n", "", "self", ".", "parse_archives", "(", ")", "\n", "self", ".", "classes", "=", "self", ".", "load_meta_file", "(", ")", "\n", "self", ".", "class_to_idx", "=", "{", "cls", ":", "idx", "\n", "for", "idx", ",", "clss", "in", "enumerate", "(", "self", ".", "classes", ")", "\n", "for", "cls", "in", "clss", "}", "\n", "super", "(", "TinyImageNet", ",", "self", ")", ".", "__init__", "(", "self", ".", "split_folder", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet._check_integrity": [[85, 92], ["pathlib.Path().iterdir", "pathlib.Path", "pathlib.Path"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "dirs", "=", "[", "d", ".", "name", "for", "d", "in", "Path", "(", "self", ".", "root", ")", ".", "iterdir", "(", ")", "]", "\n", "if", "'train'", "not", "in", "dirs", "or", "'test'", "not", "in", "dirs", "or", "'val'", "not", "in", "dirs", ":", "\n", "            ", "return", "False", "\n", "", "if", "not", "(", "Path", "(", "self", ".", "root", ")", "/", "'wnids.txt'", ")", ".", "exists", "(", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet.download": [[93, 99], ["datasets.TinyImageNet._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "print"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "\"Files already downloaded and verified\"", ")", "\n", "", "download_and_extract_archive", "(", "\n", "self", ".", "url", ",", "self", ".", "root", ",", "\n", "filename", "=", "self", ".", "filename", ",", "md5", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet.load_meta_file": [[100, 105], ["datasets.TinyImageNet._check_integrity", "line.strip", "f.readlines", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet._check_integrity"], ["", "def", "load_meta_file", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "with", "(", "Path", "(", "self", ".", "root", ")", "/", "self", ".", "meta_file", ")", ".", "open", "(", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet.parse_archives": [[106, 125], ["datasets.TinyImageNet._check_integrity", "pathlib.Path", "name.iterdir", "pathlib.Path", "shutil.rmtree", "os.remove", "os.remove", "shutil.rmtree", "f.readlines", "str", "str", "shutil.move", "str", "line.replace().strip().split.replace().strip().split.replace().strip().split", "shutil.move", "str", "str", "str", "line.replace().strip().split.replace().strip().split.replace().strip", "line.replace().strip().split.replace().strip().split.replace"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet._check_integrity"], ["", "def", "parse_archives", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "name", "=", "(", "Path", "(", "self", ".", "root", ")", "/", "'train'", ")", "\n", "if", "(", "name", "/", "'images'", ")", ".", "exists", "(", ")", ":", "\n", "                ", "for", "c", "in", "name", ".", "iterdir", "(", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "str", "(", "c", "/", "f'{c.name}_boxes.txt'", ")", ")", "\n", "for", "f", "in", "(", "c", "/", "'images'", ")", ".", "iterdir", "(", ")", ":", "\n", "                        ", "shutil", ".", "move", "(", "str", "(", "f", ")", ",", "c", ")", "\n", "", "shutil", ".", "rmtree", "(", "str", "(", "c", "/", "'images'", ")", ")", "\n", "", "", "name", "=", "(", "Path", "(", "self", ".", "root", ")", "/", "'val'", ")", "\n", "if", "(", "name", "/", "'images'", ")", ".", "exists", "(", ")", ":", "\n", "                ", "with", "(", "name", "/", "'val_annotations.txt'", ")", ".", "open", "(", "'r'", ")", "as", "f", ":", "\n", "                    ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                        ", "line", "=", "line", ".", "replace", "(", "'\\t'", ",", "' '", ")", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "(", "name", "/", "line", "[", "1", "]", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "shutil", ".", "move", "(", "str", "(", "name", "/", "'images'", "/", "line", "[", "0", "]", ")", ",", "\n", "str", "(", "name", "/", "line", "[", "1", "]", ")", ")", "\n", "", "", "shutil", ".", "rmtree", "(", "str", "(", "name", "/", "'images'", ")", ")", "\n", "os", ".", "remove", "(", "name", "/", "'val_annotations.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet.split_folder": [[126, 129], ["os.path.join"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "split_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.TinyImageNet.extra_repr": [[130, 132], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Split: {split}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.ImageNet.__init__": [[166, 192], ["os.path.expanduser", "torchvision.datasets.utils.verify_str_arg", "datasets.ImageNet.parse_archives", "torchvision.datasets.folder.ImageFolder.__init__", "RuntimeError", "datasets.load_meta_file", "warnings.warn", "enumerate"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.ImageNet.parse_archives", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.load_meta_file"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "download", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "download", "is", "True", ":", "\n", "            ", "msg", "=", "(", "\"The dataset is no longer publicly accessible. You need to \"", "\n", "\"download the archives externally and place them in the \"", "\n", "\"root directory.\"", ")", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "", "elif", "download", "is", "False", ":", "\n", "            ", "msg", "=", "(", "\"The use of the download flag is deprecated, since the \"", "\n", "\"dataset is no longer publicly accessible.\"", ")", "\n", "warnings", ".", "warn", "(", "msg", ",", "RuntimeWarning", ")", "\n", "\n", "", "root", "=", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "split", "=", "verify_str_arg", "(", "split", ",", "\"split\"", ",", "(", "\"train\"", ",", "\"val\"", ")", ")", "\n", "\n", "self", ".", "parse_archives", "(", ")", "\n", "wnid_to_classes", "=", "load_meta_file", "(", "self", ".", "root", ")", "[", "0", "]", "\n", "\n", "super", "(", "ImageNet", ",", "self", ")", ".", "__init__", "(", "self", ".", "split_folder", ",", "**", "kwargs", ")", "\n", "self", ".", "root", "=", "root", "\n", "\n", "self", ".", "wnids", "=", "self", ".", "classes", "\n", "self", ".", "wnid_to_idx", "=", "self", ".", "class_to_idx", "\n", "self", ".", "classes", "=", "[", "wnid_to_classes", "[", "wnid", "]", "for", "wnid", "in", "self", ".", "wnids", "]", "\n", "self", ".", "class_to_idx", "=", "{", "cls", ":", "idx", "\n", "for", "idx", ",", "clss", "in", "enumerate", "(", "self", ".", "classes", ")", "\n", "for", "cls", "in", "clss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.ImageNet.parse_archives": [[193, 202], ["torchvision.datasets.utils.check_integrity", "datasets.parse_devkit_archive", "os.path.isdir", "os.path.join", "datasets.parse_train_archive", "datasets.parse_val_archive"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.parse_devkit_archive", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.parse_train_archive", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.parse_val_archive"], ["", "def", "parse_archives", "(", "self", ")", ":", "\n", "        ", "if", "not", "check_integrity", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "meta_file", ")", ")", ":", "\n", "            ", "parse_devkit_archive", "(", "self", ".", "root", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "split_folder", ")", ":", "\n", "            ", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "parse_train_archive", "(", "self", ".", "root", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "                ", "parse_val_archive", "(", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.ImageNet.split_folder": [[203, 206], ["os.path.join"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "split_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.ImageNet.extra_repr": [[207, 209], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Split: {split}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.load_meta_file": [[211, 224], ["os.path.join", "torchvision.datasets.utils.check_integrity", "torch.load", "RuntimeError", "msg.format"], "function", ["None"], ["", "", "def", "load_meta_file", "(", "root", ",", "file", "=", "None", ")", ":", "\n", "\n", "    ", "if", "file", "is", "None", ":", "\n", "        ", "file", "=", "ImageNet", ".", "meta_file", "\n", "", "file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", "\n", "\n", "if", "check_integrity", "(", "file", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "file", ")", "\n", "", "else", ":", "\n", "        ", "msg", "=", "(", "\"The meta file {} is not present in the root directory or is \"", "\n", "\"corrupted. This file is automatically created by the\"", "\n", "\" ImageNet dataset.\"", ")", "\n", "raise", "RuntimeError", "(", "msg", ".", "format", "(", "file", ",", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets._verify_archive": [[226, 232], ["torchvision.datasets.utils.check_integrity", "RuntimeError", "os.path.join", "msg.format"], "function", ["None"], ["", "", "def", "_verify_archive", "(", "root", ",", "file", ",", "md5", ")", ":", "\n", "    ", "if", "not", "check_integrity", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ",", "md5", ")", ":", "\n", "        ", "msg", "=", "(", "\"The archive {} is not present in the root directory or is\"", "\n", "\"corrupted. You need to download it externally and place it\"", "\n", "\" in {}.\"", ")", "\n", "raise", "RuntimeError", "(", "msg", ".", "format", "(", "file", ",", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.parse_devkit_archive": [[234, 288], ["datasets._verify_archive", "os.path.join", "os.path.join", "tempfile.mkdtemp", "datasets.parse_devkit_archive.get_tmp_dir"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets._verify_archive"], ["", "", "def", "parse_devkit_archive", "(", "root", ",", "file", "=", "None", ")", ":", "\n", "    ", "\"\"\"Parse the devkit archive of the ImageNet2012 classification dataset and save\n    the meta information in a binary file.\n    Args:\n        root (str): Root directory containing the devkit archive\n        file (str, optional): Name of devkit archive. Defaults to\n            'ILSVRC2012_devkit_t12.tar.gz'\n    \"\"\"", "\n", "import", "scipy", ".", "io", "as", "sio", "\n", "\n", "def", "parse_meta_mat", "(", "devkit_root", ")", ":", "\n", "        ", "metafile", "=", "os", ".", "path", ".", "join", "(", "devkit_root", ",", "\"data\"", ",", "\"meta.mat\"", ")", "\n", "meta", "=", "sio", ".", "loadmat", "(", "metafile", ",", "squeeze_me", "=", "True", ")", "[", "'synsets'", "]", "\n", "nums_children", "=", "list", "(", "zip", "(", "*", "meta", ")", ")", "[", "4", "]", "\n", "meta", "=", "[", "meta", "[", "idx", "]", "for", "idx", ",", "num_children", "in", "enumerate", "(", "nums_children", ")", "\n", "if", "num_children", "==", "0", "]", "\n", "idcs", ",", "wnids", ",", "classes", "=", "list", "(", "zip", "(", "*", "meta", ")", ")", "[", ":", "3", "]", "\n", "classes", "=", "[", "tuple", "(", "clss", ".", "split", "(", "', '", ")", ")", "for", "clss", "in", "classes", "]", "\n", "idx_to_wnid", "=", "{", "idx", ":", "wnid", "for", "idx", ",", "wnid", "in", "zip", "(", "idcs", ",", "wnids", ")", "}", "\n", "wnid_to_classes", "=", "{", "wnid", ":", "clss", "for", "wnid", ",", "clss", "in", "zip", "(", "wnids", ",", "classes", ")", "}", "\n", "return", "idx_to_wnid", ",", "wnid_to_classes", "\n", "\n", "", "def", "parse_val_groundtruth_txt", "(", "devkit_root", ")", ":", "\n", "        ", "file", "=", "os", ".", "path", ".", "join", "(", "devkit_root", ",", "\"data\"", ",", "\n", "\"ILSVRC2012_validation_ground_truth.txt\"", ")", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "txtfh", ":", "\n", "            ", "val_idcs", "=", "txtfh", ".", "readlines", "(", ")", "\n", "", "return", "[", "int", "(", "val_idx", ")", "for", "val_idx", "in", "val_idcs", "]", "\n", "\n", "", "@", "contextmanager", "\n", "def", "get_tmp_dir", "(", ")", ":", "\n", "        ", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "try", ":", "\n", "            ", "yield", "tmp_dir", "\n", "", "finally", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "\n", "", "", "archive_meta", "=", "ImageNet", ".", "archive_meta", "[", "\"devkit\"", "]", "\n", "if", "file", "is", "None", ":", "\n", "        ", "file", "=", "archive_meta", "[", "0", "]", "\n", "", "md5", "=", "archive_meta", "[", "1", "]", "\n", "\n", "_verify_archive", "(", "root", ",", "file", ",", "md5", ")", "\n", "\n", "with", "get_tmp_dir", "(", ")", "as", "tmp_dir", ":", "\n", "        ", "extract_archive", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ",", "tmp_dir", ")", "\n", "\n", "devkit_root", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "\"ILSVRC2012_devkit_t12\"", ")", "\n", "idx_to_wnid", ",", "wnid_to_classes", "=", "parse_meta_mat", "(", "devkit_root", ")", "\n", "val_idcs", "=", "parse_val_groundtruth_txt", "(", "devkit_root", ")", "\n", "val_wnids", "=", "[", "idx_to_wnid", "[", "idx", "]", "for", "idx", "in", "val_idcs", "]", "\n", "\n", "torch", ".", "save", "(", "(", "wnid_to_classes", ",", "val_wnids", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "ImageNet", ".", "meta_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.parse_train_archive": [[290, 315], ["datasets._verify_archive", "os.path.join", "torchvision.datasets.utils.extract_archive", "os.path.join", "os.path.join", "torchvision.datasets.utils.extract_archive", "os.listdir", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets._verify_archive"], ["", "", "def", "parse_train_archive", "(", "root", ",", "file", "=", "None", ",", "folder", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"Parse the train images archive of the ImageNet2012 classification\n        dataset and prepare it for usage with the ImageNet dataset.\n    Args:\n        root (str): Root directory containing the train images archive\n        file (str, optional): Name of train images archive. Defaults to\n            'ILSVRC2012_img_train.tar'\n        folder (str, optional): Optional name for train images folder.\n            Defaults to 'train'\n    \"\"\"", "\n", "archive_meta", "=", "ImageNet", ".", "archive_meta", "[", "\"train\"", "]", "\n", "if", "file", "is", "None", ":", "\n", "        ", "file", "=", "archive_meta", "[", "0", "]", "\n", "", "md5", "=", "archive_meta", "[", "1", "]", "\n", "\n", "_verify_archive", "(", "root", ",", "file", ",", "md5", ")", "\n", "\n", "train_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "folder", ")", "\n", "extract_archive", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ",", "train_root", ")", "\n", "\n", "archives", "=", "[", "os", ".", "path", ".", "join", "(", "train_root", ",", "archive", ")", "\n", "for", "archive", "in", "os", ".", "listdir", "(", "train_root", ")", "]", "\n", "for", "archive", "in", "archives", ":", "\n", "        ", "extract_archive", "(", "archive", ",", "os", ".", "path", ".", "splitext", "(", "\n", "archive", ")", "[", "0", "]", ",", "remove_finished", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.parse_val_archive": [[317, 352], ["datasets._verify_archive", "os.path.join", "torchvision.datasets.utils.extract_archive", "sorted", "set", "zip", "os.path.join", "os.mkdir", "shutil.move", "datasets.load_meta_file", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets._verify_archive", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.datasets.load_meta_file"], ["", "", "def", "parse_val_archive", "(", "root", ",", "file", "=", "None", ",", "wnids", "=", "None", ",", "folder", "=", "\"val\"", ")", ":", "\n", "    ", "\"\"\"Parse the validation images archive of the ImageNet2012 classification\n        dataset\n    and prepare it for usage with the ImageNet dataset.\n    Args:\n        root (str): Root directory containing the validation images archive\n        file (str, optional): Name of validation images archive. Defaults to\n            'ILSVRC2012_img_val.tar'\n        wnids (list, optional): List of WordNet IDs of the validation images.\n            If None is given, the IDs are loaded from the meta file in the root\n            directory\n        folder (str, optional): Optional name for validation images folder.\n            Defaults to 'val'\n    \"\"\"", "\n", "archive_meta", "=", "ImageNet", ".", "archive_meta", "[", "\"val\"", "]", "\n", "if", "file", "is", "None", ":", "\n", "        ", "file", "=", "archive_meta", "[", "0", "]", "\n", "", "md5", "=", "archive_meta", "[", "1", "]", "\n", "if", "wnids", "is", "None", ":", "\n", "        ", "wnids", "=", "load_meta_file", "(", "root", ")", "[", "1", "]", "\n", "\n", "", "_verify_archive", "(", "root", ",", "file", ",", "md5", ")", "\n", "\n", "val_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "folder", ")", "\n", "extract_archive", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ",", "val_root", ")", "\n", "\n", "images", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "val_root", ",", "image", ")", "\n", "for", "image", "in", "os", ".", "listdir", "(", "val_root", ")", "]", ")", "\n", "\n", "for", "wnid", "in", "set", "(", "wnids", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "val_root", ",", "wnid", ")", ")", "\n", "\n", "", "for", "wnid", ",", "img_file", "in", "zip", "(", "wnids", ",", "images", ")", ":", "\n", "        ", "shutil", ".", "move", "(", "img_file", ",", "os", ".", "path", ".", "join", "(", "\n", "val_root", ",", "wnid", ",", "os", ".", "path", ".", "basename", "(", "img_file", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.adabound.AdaBound.__init__": [[26, 48], ["dict", "torch.optim.Optimizer.__init__", "list", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "map"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "final_lr", "=", "0.1", ",", "gamma", "=", "1e-3", ",", "\n", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "amsbound", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "final_lr", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid final learning rate: {}\"", ".", "format", "(", "final_lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "gamma", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid gamma parameter: {}\"", ".", "format", "(", "gamma", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "final_lr", "=", "final_lr", ",", "gamma", "=", "gamma", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsbound", "=", "amsbound", ")", "\n", "super", "(", "AdaBound", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'lr'", "]", ",", "self", ".", "param_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.adabound.AdaBound.__setstate__": [[49, 53], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdaBound", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsbound'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.adabound.AdaBound.step": [[54, 127], ["zip", "closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "torch.full_like", "torch.full_like.div_().clamp_().mul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "grad.add.add.add", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "torch.full_like.div_().clamp_", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.full_like.div_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", ",", "base_lr", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "base_lrs", ")", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsbound", "=", "group", "[", "'amsbound'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsbound", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "# Applies bounds on actual learning rate", "\n", "# lr_scheduler cannot affect final_lr, this is a workaround to apply lr decay", "\n", "final_lr", "=", "group", "[", "'final_lr'", "]", "*", "group", "[", "'lr'", "]", "/", "base_lr", "\n", "lower_bound", "=", "final_lr", "*", "(", "1", "-", "1", "/", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", "+", "1", ")", ")", "\n", "upper_bound", "=", "final_lr", "*", "(", "1", "+", "1", "/", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", ")", ")", "\n", "step_size", "=", "torch", ".", "full_like", "(", "denom", ",", "step_size", ")", "\n", "step_size", ".", "div_", "(", "denom", ")", ".", "clamp_", "(", "\n", "lower_bound", ",", "upper_bound", ")", ".", "mul_", "(", "exp_avg", ")", "\n", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sls.SLS.__init__": [[38, 67], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "n_batches_per_epoch", "=", "500", ",", "\n", "init_step_size", "=", "1", ",", "\n", "c", "=", "0.1", ",", "\n", "beta_b", "=", "0.9", ",", "\n", "gamma", "=", "2.0", ",", "\n", "beta_f", "=", "2.0", ",", "\n", "reset_option", "=", "1", ",", "\n", "eta_max", "=", "10", ",", "\n", "bound_step_size", "=", "True", ",", "\n", "line_search_fn", "=", "\"armijo\"", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "n_batches_per_epoch", "=", "n_batches_per_epoch", ",", "\n", "init_step_size", "=", "init_step_size", ",", "\n", "c", "=", "c", ",", "\n", "beta_b", "=", "beta_b", ",", "\n", "gamma", "=", "gamma", ",", "\n", "beta_f", "=", "beta_f", ",", "\n", "reset_option", "=", "reset_option", ",", "\n", "eta_max", "=", "eta_max", ",", "\n", "bound_step_size", "=", "bound_step_size", ",", "\n", "line_search_fn", "=", "line_search_fn", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "state", "[", "'step'", "]", "=", "0", "\n", "self", ".", "state", "[", "'step_size'", "]", "=", "init_step_size", "\n", "\n", "self", ".", "state", "[", "'n_forwards'", "]", "=", "0", "\n", "self", ".", "state", "[", "'n_backwards'", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sls.SLS.step": [[68, 159], ["time.time", "sls.SLS.step.closure_deterministic"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", ")", ":", "\n", "# deterministic closure", "\n", "        ", "seed", "=", "time", ".", "time", "(", ")", "\n", "\n", "def", "closure_deterministic", "(", ")", ":", "\n", "            ", "with", "utils", ".", "random_seed_torch", "(", "int", "(", "seed", ")", ")", ":", "\n", "                ", "return", "closure", "(", ")", "\n", "\n", "", "", "batch_step_size", "=", "self", ".", "state", "[", "'step_size'", "]", "\n", "\n", "# get loss and compute gradients", "\n", "loss", ",", "outputs", "=", "closure_deterministic", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# increment # forward-backward calls", "\n", "self", ".", "state", "[", "'n_forwards'", "]", "+=", "1", "\n", "self", ".", "state", "[", "'n_backwards'", "]", "+=", "1", "\n", "\n", "# loop over parameter groups", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "params", "=", "group", "[", "\"params\"", "]", "\n", "\n", "# save the current parameters:", "\n", "params_current", "=", "copy", ".", "deepcopy", "(", "params", ")", "\n", "grad_current", "=", "utils", ".", "get_grad_list", "(", "params", ")", "\n", "\n", "grad_norm", "=", "utils", ".", "compute_grad_norm", "(", "grad_current", ")", "\n", "\n", "step_size", "=", "utils", ".", "reset_step", "(", "step_size", "=", "batch_step_size", ",", "\n", "n_batches_per_epoch", "=", "group", "[", "'n_batches_per_epoch'", "]", ",", "\n", "gamma", "=", "group", "[", "'gamma'", "]", ",", "\n", "reset_option", "=", "group", "[", "'reset_option'", "]", ",", "\n", "init_step_size", "=", "group", "[", "'init_step_size'", "]", ")", "\n", "\n", "# only do the check if the gradient norm is big enough", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "grad_norm", ">=", "1e-8", ":", "\n", "# check if condition is satisfied", "\n", "                    ", "found", "=", "0", "\n", "step_size_old", "=", "step_size", "\n", "\n", "for", "e", "in", "range", "(", "100", ")", ":", "\n", "# try a prospective step", "\n", "                        ", "utils", ".", "try_sgd_update", "(", "\n", "params", ",", "step_size", ",", "params_current", ",", "grad_current", ")", "\n", "\n", "# compute the loss at the next step; no need to compute gradients.", "\n", "loss_next", ",", "outputs", "=", "closure_deterministic", "(", ")", "\n", "self", ".", "state", "[", "'n_forwards'", "]", "+=", "1", "\n", "\n", "# =================================================", "\n", "# Line search", "\n", "if", "group", "[", "'line_search_fn'", "]", "==", "\"armijo\"", ":", "\n", "                            ", "armijo_results", "=", "utils", ".", "check_armijo_conditions", "(", "step_size", "=", "step_size", ",", "\n", "step_size_old", "=", "step_size_old", ",", "\n", "loss", "=", "loss", ",", "\n", "grad_norm", "=", "grad_norm", ",", "\n", "loss_next", "=", "loss_next", ",", "\n", "c", "=", "group", "[", "'c'", "]", ",", "\n", "beta_b", "=", "group", "[", "'beta_b'", "]", ")", "\n", "found", ",", "step_size", ",", "step_size_old", "=", "armijo_results", "\n", "if", "found", "==", "1", ":", "\n", "                                ", "break", "\n", "\n", "", "", "elif", "group", "[", "'line_search_fn'", "]", "==", "\"goldstein\"", ":", "\n", "                            ", "goldstein_results", "=", "utils", ".", "check_goldstein_conditions", "(", "step_size", "=", "step_size", ",", "\n", "loss", "=", "loss", ",", "\n", "grad_norm", "=", "grad_norm", ",", "\n", "loss_next", "=", "loss_next", ",", "\n", "c", "=", "group", "[", "'c'", "]", ",", "\n", "beta_b", "=", "group", "[", "'beta_b'", "]", ",", "\n", "beta_f", "=", "group", "[", "'beta_f'", "]", ",", "\n", "bound_step_size", "=", "group", "[", "'bound_step_size'", "]", ",", "\n", "eta_max", "=", "group", "[", "'eta_max'", "]", ")", "\n", "\n", "found", "=", "goldstein_results", "[", "\"found\"", "]", "\n", "step_size", "=", "goldstein_results", "[", "\"step_size\"", "]", "\n", "\n", "if", "found", "==", "3", ":", "\n", "                                ", "break", "\n", "\n", "# if line search exceeds max_epochs", "\n", "", "", "", "if", "found", "==", "0", ":", "\n", "                        ", "utils", ".", "try_sgd_update", "(", "\n", "params", ",", "1e-6", ",", "params_current", ",", "grad_current", ")", "\n", "\n", "# save the new step-size", "\n", "", "", "", "self", ".", "state", "[", "'step_size'", "]", "=", "step_size", "\n", "self", ".", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "", "return", "loss", ",", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.AdaS.AdaS.__init__": [[34, 69], ["metrics.Metrics.Metrics", "numpy.repeat", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "parameters", ":", "List", "[", "Any", "]", ",", "\n", "beta", ":", "float", "=", "0.8", ",", "zeta", ":", "float", "=", "1.", ",", "\n", "p", ":", "int", "=", "1", ",", "init_lr", ":", "float", "=", "3e-2", ",", "\n", "min_lr", ":", "float", "=", "1e-20", ")", "->", "None", ":", "\n", "        ", "'''\n        parameters: list of torch.nn.Module.parameters()\n        beta: float: AdaS gain factor [0, 1)\n        eta: knowledge gain hyper-paramters [0, 1)\n        init_lr: initial learning rate > 0\n        min_lr: minimum possible learning rate > 0\n        '''", "\n", "if", "beta", "<", "0", "or", "beta", ">=", "1", ":", "\n", "            ", "raise", "ValueError", "\n", "# if zeta < 0 or zeta > 1:", "\n", "#     raise ValueError", "\n", "", "if", "init_lr", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "\n", "", "if", "min_lr", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "self", ".", "metrics", "=", "metrics", "=", "Metrics", "(", "parameters", "=", "parameters", ",", "p", "=", "p", ")", "\n", "self", ".", "init_lr", "=", "init_lr", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "zeta", "=", "zeta", "\n", "\n", "init_lr_vector", "=", "np", ".", "repeat", "(", "a", "=", "init_lr", ",", "\n", "repeats", "=", "len", "(", "metrics", ".", "layers_info", ")", ")", "\n", "self", ".", "lr_vector", "=", "init_lr_vector", "\n", "self", ".", "velocity_moment_conv", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_conv", ")", "\n", "self", ".", "acceleration_moment_conv", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_conv", ")", "\n", "self", ".", "R_conv", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_conv", ")", "\n", "self", ".", "velocity_moment_fc", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_fc", ")", "[", "0", "]", "\n", "self", ".", "acceleration_moment_fc", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_fc", ")", "[", "0", "]", "\n", "self", ".", "R_fc", "=", "np", ".", "zeros", "(", "metrics", ".", "number_of_fc", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.AdaS.AdaS.step": [[70, 143], ["numpy.maximum", "numpy.maximum", "numpy.concatenate", "range", "numpy.concatenate", "range", "components.LRMetrics", "numpy.tile", "numpy.tile", "numpy.tile", "range", "numpy.linspace", "numpy.ones", "min", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.polyfit", "len", "len", "velocity_conv_rank.tolist", "AdaS.AdaS.R_conv.tolist", "len", "numpy.ones", "numpy.polyfit", "len", "len", "numpy.tile", "numpy.tile", "numpy.tile"], "methods", ["None"], ["\n", "", "def", "step", "(", "self", ",", "epoch", ":", "int", ",", "metrics", ":", "Metrics", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "epoch", "==", "0", ":", "\n", "            ", "velocity_conv_rank", "=", "self", ".", "init_lr", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metrics", ".", "conv_indices", ")", ")", "\n", "velocity_fc_rank", "=", "self", ".", "init_lr", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metrics", ".", "fc_indices", ")", ")", "[", "0", "]", "\n", "# NOTE unused (below)", "\n", "# acceleration_conv_rank = np.zeros(len(conv_indices))", "\n", "# acceleration_fc_rank = np.zeros(len(fc_indices))[0]", "\n", "# preserving_acceleration_conv = alpha", "\n", "", "else", ":", "\n", "            ", "n_replica", "=", "AdaS", ".", "n_buffer", "-", "min", "(", "epoch", "+", "1", ",", "AdaS", ".", "n_buffer", ")", "\n", "input_channel_replica", "=", "np", ".", "tile", "(", "\n", "A", "=", "metrics", ".", "historical_metrics", "[", "0", "]", ".", "input_channel_S", ",", "\n", "reps", "=", "(", "n_replica", ",", "1", ")", ")", "\n", "output_channel_replica", "=", "np", ".", "tile", "(", "\n", "A", "=", "metrics", ".", "historical_metrics", "[", "0", "]", ".", "output_channel_S", ",", "\n", "reps", "=", "(", "n_replica", ",", "1", ")", ")", "\n", "fc_channel_replica", "=", "np", ".", "tile", "(", "\n", "A", "=", "metrics", ".", "historical_metrics", "[", "0", "]", ".", "fc_S", ",", "reps", "=", "(", "n_replica", ",", "1", ")", ")", "\n", "for", "iteration", "in", "range", "(", "AdaS", ".", "n_buffer", "-", "n_replica", ")", ":", "\n", "                ", "epoch_identifier", "=", "(", "epoch", "-", "AdaS", ".", "n_buffer", "+", "\n", "n_replica", "+", "iteration", "+", "1", ")", "\n", "metric", "=", "metrics", ".", "historical_metrics", "[", "epoch_identifier", "]", "\n", "input_channel_replica", "=", "np", ".", "concatenate", "(", "(", "\n", "input_channel_replica", ",", "\n", "np", ".", "tile", "(", "\n", "A", "=", "metric", ".", "input_channel_S", ",", "\n", "reps", "=", "(", "1", ",", "1", ")", ")", ")", ")", "\n", "output_channel_replica", "=", "np", ".", "concatenate", "(", "\n", "(", "output_channel_replica", ",", "np", ".", "tile", "(", "\n", "A", "=", "metric", ".", "output_channel_S", ",", "\n", "reps", "=", "(", "1", ",", "1", ")", ")", ")", ")", "\n", "fc_channel_replica", "=", "np", ".", "concatenate", "(", "\n", "(", "fc_channel_replica", ",", "np", ".", "tile", "(", "\n", "A", "=", "metric", ".", "fc_S", ",", "\n", "reps", "=", "(", "1", ",", "1", ")", ")", ")", ")", "\n", "", "x_regression", "=", "np", ".", "linspace", "(", "start", "=", "0", ",", "stop", "=", "AdaS", ".", "n_buffer", "-", "1", ",", "\n", "num", "=", "AdaS", ".", "n_buffer", ")", "\n", "\n", "channel_replica", "=", "(", "input_channel_replica", "+", "\n", "output_channel_replica", ")", "/", "2", "\n", "# channel_replica = output_channel_replica", "\n", "\n", "\"\"\"Calculate Rank Velocity\"\"\"", "\n", "velocity_conv_rank", "=", "np", ".", "polyfit", "(", "\n", "x", "=", "x_regression", ",", "y", "=", "channel_replica", ",", "deg", "=", "1", ")", "[", "0", "]", "\n", "velocity_fc_rank", "=", "np", ".", "polyfit", "(", "\n", "x", "=", "x_regression", ",", "y", "=", "fc_channel_replica", ",", "deg", "=", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "self", ".", "R_conv", "=", "self", ".", "beta", "*", "self", ".", "R_conv", "+", "self", ".", "zeta", "*", "velocity_conv_rank", "\n", "self", ".", "R_fc", "=", "self", ".", "beta", "*", "self", ".", "R_fc", "+", "self", ".", "zeta", "*", "velocity_fc_rank", "\n", "\n", "self", ".", "R_conv", "=", "np", ".", "maximum", "(", "self", ".", "R_conv", ",", "self", ".", "min_lr", ")", "\n", "self", ".", "R_fc", "=", "np", ".", "maximum", "(", "self", ".", "R_fc", ",", "self", ".", "min_lr", ")", "\n", "\n", "call_indices_conv", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "metrics", ".", "conv_indices", ",", "[", "self", ".", "metrics", ".", "fc_indices", "[", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "for", "iteration_conv", "in", "range", "(", "len", "(", "call_indices_conv", ")", "-", "1", ")", ":", "\n", "            ", "index_start", "=", "call_indices_conv", "[", "iteration_conv", "]", "\n", "index_end", "=", "call_indices_conv", "[", "iteration_conv", "+", "1", "]", "\n", "self", ".", "lr_vector", "[", "index_start", ":", "index_end", "]", "=", "self", ".", "R_conv", "[", "iteration_conv", "]", "\n", "\n", "", "call_indices_fc", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "metrics", ".", "fc_indices", ",", "\n", "[", "len", "(", "self", ".", "metrics", ".", "layers_info", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "for", "iteration_fc", "in", "range", "(", "len", "(", "call_indices_fc", ")", "-", "1", ")", ":", "\n", "            ", "index_start", "=", "call_indices_fc", "[", "iteration_fc", "]", "\n", "index_end", "=", "call_indices_fc", "[", "iteration_fc", "+", "1", "]", "\n", "self", ".", "lr_vector", "[", "index_start", ":", "index_end", "]", "=", "self", ".", "R_fc", "\n", "", "return", "LRMetrics", "(", "rank_velocity", "=", "velocity_conv_rank", ".", "tolist", "(", ")", ",", "\n", "r_conv", "=", "self", ".", "R_conv", ".", "tolist", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler._LRScheduler.__init__": [[88, 141], ["list", "lr_scheduler._LRScheduler.__init__.with_counter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "# Attach optimizer", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "# Initialize epoch and base learning rates", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "'initial_lr'", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "\"param 'initial_lr' is not specified \"", "\n", "\"in param_groups[{}] when resuming an optimizer\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "last_epoch", "=", "last_epoch", "\n", "\n", "# Following https://github.com/pytorch/pytorch/issues/20124", "\n", "# We would like to ensure that `lr_scheduler.step()` is called after", "\n", "# `optimizer.step()`", "\n", "def", "with_counter", "(", "method", ")", ":", "\n", "            ", "if", "getattr", "(", "method", ",", "'_with_counter'", ",", "False", ")", ":", "\n", "# `optimizer.step()` has already been replaced, return.", "\n", "                ", "return", "method", "\n", "\n", "# Keep a weak reference to the optimizer instance to prevent", "\n", "# cyclic references.", "\n", "", "instance_ref", "=", "weakref", ".", "ref", "(", "method", ".", "__self__", ")", "\n", "# Get the unbound method for the same purpose.", "\n", "func", "=", "method", ".", "__func__", "\n", "cls", "=", "instance_ref", "(", ")", ".", "__class__", "\n", "del", "method", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "instance", "=", "instance_ref", "(", ")", "\n", "instance", ".", "_step_count", "+=", "1", "\n", "wrapped", "=", "func", ".", "__get__", "(", "instance", ",", "cls", ")", "\n", "return", "wrapped", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Note that the returned function here is no longer a bound method,", "\n", "# so attributes like `__func__` and `__self__` no longer exist.", "\n", "", "wrapper", ".", "_with_counter", "=", "True", "\n", "return", "wrapper", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "=", "with_counter", "(", "self", ".", "optimizer", ".", "step", ")", "\n", "self", ".", "optimizer", ".", "_step_count", "=", "0", "\n", "self", ".", "_step_count", "=", "0", "\n", "\n", "self", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler._LRScheduler.state_dict": [[142, 148], ["lr_scheduler._LRScheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        \"\"\"", "\n", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler._LRScheduler.load_state_dict": [[149, 156], ["lr_scheduler._LRScheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler._LRScheduler.get_last_lr": [[157, 161], ["None"], "methods", ["None"], ["", "def", "get_last_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return last computed learning rate by current scheduler.\n        \"\"\"", "\n", "return", "self", ".", "_last_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler._LRScheduler.get_lr": [[162, 165], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "# Compute learning rate using chainable form of the scheduler", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler._LRScheduler.step": [[166, 214], ["zip", "_enable_get_lr_call", "hasattr", "warnings.warn", "lr_scheduler._LRScheduler.get_lr", "warnings.warn", "hasattr", "warnings.warn", "lr_scheduler._LRScheduler._get_closed_form_lr", "lr_scheduler._LRScheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR.get_lr", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CosineAnnealingLR._get_closed_form_lr", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "# Raise a warning if old pattern is detected", "\n", "# https://github.com/pytorch/pytorch/issues/20124", "\n", "        ", "if", "self", ".", "_step_count", "==", "1", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ".", "optimizer", ".", "step", ",", "\"_with_counter\"", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Seems like `optimizer.step()` has been overridden after learning rate scheduler \"", "\n", "\"initialization. Please, make sure to call `optimizer.step()` before \"", "\n", "\"`lr_scheduler.step()`. See more details at \"", "\n", "\"https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate\"", ",", "UserWarning", ")", "\n", "\n", "# Just check if there were two first lr_scheduler.step() calls before optimizer.step()", "\n", "", "elif", "self", ".", "optimizer", ".", "_step_count", "<", "1", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Detected call of `lr_scheduler.step()` before `optimizer.step()`. \"", "\n", "\"In PyTorch 1.1.0 and later, you should call them in the opposite order: \"", "\n", "\"`optimizer.step()` before `lr_scheduler.step()`.  Failure to do this \"", "\n", "\"will result in PyTorch skipping the first value of the learning rate schedule. \"", "\n", "\"See more details at \"", "\n", "\"https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate\"", ",", "UserWarning", ")", "\n", "", "", "self", ".", "_step_count", "+=", "1", "\n", "\n", "class", "_enable_get_lr_call", ":", "\n", "\n", "            ", "def", "__init__", "(", "self", ",", "o", ")", ":", "\n", "                ", "self", ".", "o", "=", "o", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "                ", "self", ".", "o", ".", "_get_lr_called_within_step", "=", "True", "\n", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "                ", "self", ".", "o", ".", "_get_lr_called_within_step", "=", "False", "\n", "\n", "", "", "with", "_enable_get_lr_call", "(", "self", ")", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "last_epoch", "+=", "1", "\n", "values", "=", "self", ".", "get_lr", "(", ")", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "EPOCH_DEPRECATION_WARNING", ",", "UserWarning", ")", "\n", "self", ".", "last_epoch", "=", "epoch", "\n", "if", "hasattr", "(", "self", ",", "\"_get_closed_form_lr\"", ")", ":", "\n", "                    ", "values", "=", "self", ".", "_get_closed_form_lr", "(", ")", "\n", "", "else", ":", "\n", "                    ", "values", "=", "self", ".", "get_lr", "(", ")", "\n", "\n", "", "", "", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "values", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "self", ".", "_last_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.LambdaLR.__init__": [[236, 248], ["lr_scheduler._LRScheduler.__init__", "list", "isinstance", "isinstance", "len", "len", "len", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "if", "not", "isinstance", "(", "lr_lambda", ",", "list", ")", "and", "not", "isinstance", "(", "lr_lambda", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "lr_lambdas", "=", "[", "lr_lambda", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "lr_lambda", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected {} lr_lambdas, but got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "lr_lambda", ")", ")", ")", "\n", "", "self", ".", "lr_lambdas", "=", "list", "(", "lr_lambda", ")", "\n", "", "self", ".", "last_epoch", "=", "last_epoch", "\n", "super", "(", "LambdaLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.LambdaLR.state_dict": [[249, 266], ["warnings.warn", "enumerate", "len", "lr_scheduler.LambdaLR.__dict__.items", "isinstance", "fn.__dict__.copy"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        The learning rate lambda functions will only be saved if they are callable objects\n        and not if they are functions or lambdas.\n        \"\"\"", "\n", "\n", "warnings", ".", "warn", "(", "SAVE_STATE_WARNING", ",", "UserWarning", ")", "\n", "state_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "not", "in", "(", "'optimizer'", ",", "'lr_lambdas'", ")", "}", "\n", "state_dict", "[", "'lr_lambdas'", "]", "=", "[", "None", "]", "*", "len", "(", "self", ".", "lr_lambdas", ")", "\n", "\n", "for", "idx", ",", "fn", "in", "enumerate", "(", "self", ".", "lr_lambdas", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "fn", ",", "types", ".", "FunctionType", ")", ":", "\n", "                ", "state_dict", "[", "'lr_lambdas'", "]", "[", "idx", "]", "=", "fn", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.LambdaLR.load_state_dict": [[267, 284], ["warnings.warn", "state_dict.pop", "lr_scheduler.LambdaLR.__dict__.update", "enumerate", "lr_scheduler.LambdaLR.lr_lambdas[].__dict__.update"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "\n", "warnings", ".", "warn", "(", "SAVE_STATE_WARNING", ",", "UserWarning", ")", "\n", "lr_lambdas", "=", "state_dict", ".", "pop", "(", "'lr_lambdas'", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "# Restore state_dict keys in order to prevent side effects", "\n", "# https://github.com/pytorch/pytorch/issues/32756", "\n", "state_dict", "[", "'lr_lambdas'", "]", "=", "lr_lambdas", "\n", "\n", "for", "idx", ",", "fn", "in", "enumerate", "(", "lr_lambdas", ")", ":", "\n", "            ", "if", "fn", "is", "not", "None", ":", "\n", "                ", "self", ".", "lr_lambdas", "[", "idx", "]", ".", "__dict__", ".", "update", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.LambdaLR.get_lr": [[285, 292], ["warnings.warn", "lmbda", "zip"], "methods", ["None"], ["", "", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ")", "\n", "\n", "", "return", "[", "base_lr", "*", "lmbda", "(", "self", ".", "last_epoch", ")", "\n", "for", "lmbda", ",", "base_lr", "in", "zip", "(", "self", ".", "lr_lambdas", ",", "self", ".", "base_lrs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.MultiplicativeLR.__init__": [[312, 324], ["lr_scheduler._LRScheduler.__init__", "list", "isinstance", "isinstance", "len", "len", "len", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "if", "not", "isinstance", "(", "lr_lambda", ",", "list", ")", "and", "not", "isinstance", "(", "lr_lambda", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "lr_lambdas", "=", "[", "lr_lambda", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "lr_lambda", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected {} lr_lambdas, but got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "lr_lambda", ")", ")", ")", "\n", "", "self", ".", "lr_lambdas", "=", "list", "(", "lr_lambda", ")", "\n", "", "self", ".", "last_epoch", "=", "last_epoch", "\n", "super", "(", "MultiplicativeLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.MultiplicativeLR.state_dict": [[325, 340], ["enumerate", "len", "lr_scheduler.MultiplicativeLR.__dict__.items", "isinstance", "fn.__dict__.copy"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        The learning rate lambda functions will only be saved if they are callable objects\n        and not if they are functions or lambdas.\n        \"\"\"", "\n", "state_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "not", "in", "(", "'optimizer'", ",", "'lr_lambdas'", ")", "}", "\n", "state_dict", "[", "'lr_lambdas'", "]", "=", "[", "None", "]", "*", "len", "(", "self", ".", "lr_lambdas", ")", "\n", "\n", "for", "idx", ",", "fn", "in", "enumerate", "(", "self", ".", "lr_lambdas", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "fn", ",", "types", ".", "FunctionType", ")", ":", "\n", "                ", "state_dict", "[", "'lr_lambdas'", "]", "[", "idx", "]", "=", "fn", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.MultiplicativeLR.load_state_dict": [[341, 356], ["state_dict.pop", "lr_scheduler.MultiplicativeLR.__dict__.update", "enumerate", "lr_scheduler.MultiplicativeLR.lr_lambdas[].__dict__.update"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update", "home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "lr_lambdas", "=", "state_dict", ".", "pop", "(", "'lr_lambdas'", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "# Restore state_dict keys in order to prevent side effects", "\n", "# https://github.com/pytorch/pytorch/issues/32756", "\n", "state_dict", "[", "'lr_lambdas'", "]", "=", "lr_lambdas", "\n", "\n", "for", "idx", ",", "fn", "in", "enumerate", "(", "lr_lambdas", ")", ":", "\n", "            ", "if", "fn", "is", "not", "None", ":", "\n", "                ", "self", ".", "lr_lambdas", "[", "idx", "]", ".", "__dict__", ".", "update", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.MultiplicativeLR.get_lr": [[357, 367], ["warnings.warn", "list", "lmbda", "zip"], "methods", ["None"], ["", "", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "if", "self", ".", "last_epoch", ">", "0", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "*", "lmbda", "(", "self", ".", "last_epoch", ")", "\n", "for", "lmbda", ",", "group", "in", "zip", "(", "self", ".", "lr_lambdas", ",", "self", ".", "optimizer", ".", "param_groups", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "list", "(", "self", ".", "base_lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.StepLR.__init__": [[393, 397], ["lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "step_size", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "StepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.StepLR.get_lr": [[398, 407], ["warnings.warn"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "if", "(", "self", ".", "last_epoch", "==", "0", ")", "or", "(", "self", ".", "last_epoch", "%", "self", ".", "step_size", "!=", "0", ")", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "return", "[", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.StepLR._get_closed_form_lr": [[408, 411], ["None"], "methods", ["None"], ["", "def", "_get_closed_form_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "base_lr", "*", "self", ".", "gamma", "**", "(", "self", ".", "last_epoch", "//", "self", ".", "step_size", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.MultiStepLR.__init__": [[436, 440], ["collections.Counter", "lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "milestones", "=", "Counter", "(", "milestones", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "MultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.MultiStepLR.get_lr": [[441, 450], ["warnings.warn"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "if", "self", ".", "last_epoch", "not", "in", "self", ".", "milestones", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "return", "[", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "**", "self", ".", "milestones", "[", "self", ".", "last_epoch", "]", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.MultiStepLR._get_closed_form_lr": [[451, 455], ["list", "sorted", "lr_scheduler.MultiStepLR.milestones.elements", "bisect.bisect_right"], "methods", ["None"], ["", "def", "_get_closed_form_lr", "(", "self", ")", ":", "\n", "        ", "milestones", "=", "list", "(", "sorted", "(", "self", ".", "milestones", ".", "elements", "(", ")", ")", ")", "\n", "return", "[", "base_lr", "*", "self", ".", "gamma", "**", "bisect_right", "(", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ExponentialLR.__init__": [[466, 469], ["lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "gamma", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "ExponentialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ExponentialLR.get_lr": [[470, 479], ["warnings.warn"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "return", "[", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ExponentialLR._get_closed_form_lr": [[480, 483], ["None"], "methods", ["None"], ["", "def", "_get_closed_form_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "base_lr", "*", "self", ".", "gamma", "**", "self", ".", "last_epoch", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CosineAnnealingLR.__init__": [[517, 521], ["lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CosineAnnealingLR.get_lr": [[522, 538], ["warnings.warn", "zip", "math.cos", "math.cos", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "elif", "(", "self", ".", "last_epoch", "-", "1", "-", "self", ".", "T_max", ")", "%", "(", "2", "*", "self", ".", "T_max", ")", "==", "0", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "for", "base_lr", ",", "group", "in", "\n", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "]", "\n", "", "return", "[", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "1", ")", "/", "self", ".", "T_max", ")", ")", "*", "\n", "(", "group", "[", "'lr'", "]", "-", "self", ".", "eta_min", ")", "+", "self", ".", "eta_min", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CosineAnnealingLR._get_closed_form_lr": [[539, 543], ["math.cos"], "methods", ["None"], ["", "def", "_get_closed_form_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.__init__": [[592, 629], ["lr_scheduler.ReduceLROnPlateau._init_is_better", "lr_scheduler.ReduceLROnPlateau._reset", "ValueError", "isinstance", "TypeError", "isinstance", "isinstance", "list", "len", "len", "ValueError", "len", "type", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau._init_is_better", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau._reset"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.1", ",", "patience", "=", "10", ",", "\n", "verbose", "=", "False", ",", "threshold", "=", "1e-4", ",", "threshold_mode", "=", "'rel'", ",", "\n", "cooldown", "=", "0", ",", "min_lr", "=", "0", ",", "eps", "=", "1e-8", ")", ":", "\n", "\n", "        ", "if", "factor", ">=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "'Factor should be < 1.0.'", ")", "\n", "", "self", ".", "factor", "=", "factor", "\n", "\n", "# Attach optimizer", "\n", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "if", "isinstance", "(", "min_lr", ",", "list", ")", "or", "isinstance", "(", "min_lr", ",", "tuple", ")", ":", "\n", "            ", "if", "len", "(", "min_lr", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} min_lrs, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "min_lr", ")", ")", ")", "\n", "", "self", ".", "min_lrs", "=", "list", "(", "min_lr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_lrs", "=", "[", "min_lr", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n", "", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "cooldown", "=", "cooldown", "\n", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "threshold_mode", "=", "threshold_mode", "\n", "self", ".", "best", "=", "None", "\n", "self", ".", "num_bad_epochs", "=", "None", "\n", "self", ".", "mode_worse", "=", "None", "# the worse value for the chosen mode", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "last_epoch", "=", "0", "\n", "self", ".", "_init_is_better", "(", "mode", "=", "mode", ",", "threshold", "=", "threshold", ",", "\n", "threshold_mode", "=", "threshold_mode", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau._reset": [[630, 635], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets num_bad_epochs counter and cooldown counter.\"\"\"", "\n", "self", ".", "best", "=", "self", ".", "mode_worse", "\n", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.step": [[636, 661], ["float", "lr_scheduler.ReduceLROnPlateau.is_better", "warnings.warn", "lr_scheduler.ReduceLROnPlateau._reduce_lr"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.is_better", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau._reduce_lr"], ["", "def", "step", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "# convert `metrics` to float, in case it's a zero-dim Tensor", "\n", "        ", "current", "=", "float", "(", "metrics", ")", "\n", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "EPOCH_DEPRECATION_WARNING", ",", "UserWarning", ")", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "\n", "if", "self", ".", "is_better", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_bad_epochs", "+=", "1", "\n", "\n", "", "if", "self", ".", "in_cooldown", ":", "\n", "            ", "self", ".", "cooldown_counter", "-=", "1", "\n", "self", ".", "num_bad_epochs", "=", "0", "# ignore any bad epochs in cooldown", "\n", "\n", "", "if", "self", ".", "num_bad_epochs", ">", "self", ".", "patience", ":", "\n", "            ", "self", ".", "_reduce_lr", "(", "epoch", ")", "\n", "self", ".", "cooldown_counter", "=", "self", ".", "cooldown", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "\n", "", "self", ".", "_last_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau._reduce_lr": [[662, 671], ["enumerate", "float", "max", "print"], "methods", ["None"], ["", "def", "_reduce_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "old_lr", "=", "float", "(", "param_group", "[", "'lr'", "]", ")", "\n", "new_lr", "=", "max", "(", "old_lr", "*", "self", ".", "factor", ",", "self", ".", "min_lrs", "[", "i", "]", ")", "\n", "if", "old_lr", "-", "new_lr", ">", "self", ".", "eps", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'Epoch {:5d}: reducing learning rate'", "\n", "' of group {} to {:.4e}.'", ".", "format", "(", "epoch", ",", "i", ",", "new_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.in_cooldown": [[672, 675], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "in_cooldown", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cooldown_counter", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.is_better": [[676, 690], ["None"], "methods", ["None"], ["", "def", "is_better", "(", "self", ",", "a", ",", "best", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'min'", "and", "self", ".", "threshold_mode", "==", "'rel'", ":", "\n", "            ", "rel_epsilon", "=", "1.", "-", "self", ".", "threshold", "\n", "return", "a", "<", "best", "*", "rel_epsilon", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'min'", "and", "self", ".", "threshold_mode", "==", "'abs'", ":", "\n", "            ", "return", "a", "<", "best", "-", "self", ".", "threshold", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'max'", "and", "self", ".", "threshold_mode", "==", "'rel'", ":", "\n", "            ", "rel_epsilon", "=", "self", ".", "threshold", "+", "1.", "\n", "return", "a", ">", "best", "*", "rel_epsilon", "\n", "\n", "", "else", ":", "# mode == 'max' and epsilon_mode == 'abs':", "\n", "            ", "return", "a", ">", "best", "+", "self", ".", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau._init_is_better": [[691, 705], ["ValueError", "ValueError"], "methods", ["None"], ["", "", "def", "_init_is_better", "(", "self", ",", "mode", ",", "threshold", ",", "threshold_mode", ")", ":", "\n", "        ", "if", "mode", "not", "in", "{", "'min'", ",", "'max'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'mode '", "+", "mode", "+", "' is unknown!'", ")", "\n", "", "if", "threshold_mode", "not", "in", "{", "'rel'", ",", "'abs'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'threshold mode '", "+", "threshold_mode", "+", "' is unknown!'", ")", "\n", "\n", "", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "mode_worse", "=", "inf", "\n", "", "else", ":", "# mode == 'max':", "\n", "            ", "self", ".", "mode_worse", "=", "-", "inf", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "threshold_mode", "=", "threshold_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict": [[706, 708], ["lr_scheduler.ReduceLROnPlateau.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.load_state_dict": [[709, 712], ["lr_scheduler.ReduceLROnPlateau.__dict__.update", "lr_scheduler.ReduceLROnPlateau._init_is_better"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.CONet.test.AverageMeter.update", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau._init_is_better"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "self", ".", "_init_is_better", "(", "mode", "=", "self", ".", "mode", ",", "threshold", "=", "self", ".", "threshold", ",", "threshold_mode", "=", "self", ".", "threshold_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CyclicLR.__init__": [[798, 866], ["lr_scheduler.CyclicLR._format_param", "lr_scheduler.CyclicLR._format_param", "float", "lr_scheduler._LRScheduler.__init__", "isinstance", "TypeError", "zip", "float", "ValueError", "lr_scheduler.CyclicLR._format_param", "list", "lr_scheduler.CyclicLR._format_param", "ValueError", "zip", "map", "type"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "base_lr", ",", "\n", "max_lr", ",", "\n", "step_size_up", "=", "2000", ",", "\n", "step_size_down", "=", "None", ",", "\n", "mode", "=", "'triangular'", ",", "\n", "gamma", "=", "1.", ",", "\n", "scale_fn", "=", "None", ",", "\n", "scale_mode", "=", "'cycle'", ",", "\n", "cycle_momentum", "=", "True", ",", "\n", "base_momentum", "=", "0.8", ",", "\n", "max_momentum", "=", "0.9", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "# Attach optimizer", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "base_lrs", "=", "self", ".", "_format_param", "(", "'base_lr'", ",", "optimizer", ",", "base_lr", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "            ", "for", "lr", ",", "group", "in", "zip", "(", "base_lrs", ",", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "", "self", ".", "max_lrs", "=", "self", ".", "_format_param", "(", "'max_lr'", ",", "optimizer", ",", "max_lr", ")", "\n", "\n", "step_size_up", "=", "float", "(", "step_size_up", ")", "\n", "step_size_down", "=", "float", "(", "step_size_down", ")", "if", "step_size_down", "is", "not", "None", "else", "step_size_up", "\n", "self", ".", "total_size", "=", "step_size_up", "+", "step_size_down", "\n", "self", ".", "step_ratio", "=", "step_size_up", "/", "self", ".", "total_size", "\n", "\n", "if", "mode", "not", "in", "[", "'triangular'", ",", "'triangular2'", ",", "'exp_range'", "]", "and", "scale_fn", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'mode is invalid and scale_fn is None'", ")", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "if", "scale_fn", "is", "None", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'triangular'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_triangular_scale_fn", "\n", "self", ".", "scale_mode", "=", "'cycle'", "\n", "", "elif", "self", ".", "mode", "==", "'triangular2'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_triangular2_scale_fn", "\n", "self", ".", "scale_mode", "=", "'cycle'", "\n", "", "elif", "self", ".", "mode", "==", "'exp_range'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_exp_range_scale_fn", "\n", "self", ".", "scale_mode", "=", "'iterations'", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "scale_fn", "=", "scale_fn", "\n", "self", ".", "scale_mode", "=", "scale_mode", "\n", "\n", "", "self", ".", "cycle_momentum", "=", "cycle_momentum", "\n", "if", "cycle_momentum", ":", "\n", "            ", "if", "'momentum'", "not", "in", "optimizer", ".", "defaults", ":", "\n", "                ", "raise", "ValueError", "(", "'optimizer must support momentum with `cycle_momentum` option enabled'", ")", "\n", "\n", "", "base_momentums", "=", "self", ".", "_format_param", "(", "'base_momentum'", ",", "optimizer", ",", "base_momentum", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "                ", "for", "momentum", ",", "group", "in", "zip", "(", "base_momentums", ",", "optimizer", ".", "param_groups", ")", ":", "\n", "                    ", "group", "[", "'momentum'", "]", "=", "momentum", "\n", "", "", "self", ".", "base_momentums", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'momentum'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "max_momentums", "=", "self", ".", "_format_param", "(", "'max_momentum'", ",", "optimizer", ",", "max_momentum", ")", "\n", "\n", "", "super", "(", "CyclicLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "self", ".", "base_lrs", "=", "base_lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CyclicLR._format_param": [[867, 876], ["isinstance", "len", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_format_param", "(", "self", ",", "name", ",", "optimizer", ",", "param", ")", ":", "\n", "        ", "\"\"\"Return correctly formatted lr/momentum for each param group.\"\"\"", "\n", "if", "isinstance", "(", "param", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} values for {}, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "name", ",", "len", "(", "param", ")", ")", ")", "\n", "", "return", "param", "\n", "", "else", ":", "\n", "            ", "return", "[", "param", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CyclicLR._triangular_scale_fn": [[877, 879], ["None"], "methods", ["None"], ["", "", "def", "_triangular_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CyclicLR._triangular2_scale_fn": [[880, 882], ["None"], "methods", ["None"], ["", "def", "_triangular2_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1", "/", "(", "2.", "**", "(", "x", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CyclicLR._exp_range_scale_fn": [[883, 885], ["None"], "methods", ["None"], ["", "def", "_exp_range_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "gamma", "**", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CyclicLR.get_lr": [[886, 926], ["math.floor", "zip", "warnings.warn", "lrs.append", "zip", "zip", "momentums.append", "lr_scheduler.CyclicLR.scale_fn", "lr_scheduler.CyclicLR.scale_fn", "lr_scheduler.CyclicLR.scale_fn", "lr_scheduler.CyclicLR.scale_fn"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculates the learning rate at batch index. This function treats\n        `self.last_epoch` as the last batch index.\n        If `self.cycle_momentum` is ``True``, this function has a side effect of\n        updating the optimizer's momentum.\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "cycle", "=", "math", ".", "floor", "(", "1", "+", "self", ".", "last_epoch", "/", "self", ".", "total_size", ")", "\n", "x", "=", "1.", "+", "self", ".", "last_epoch", "/", "self", ".", "total_size", "-", "cycle", "\n", "if", "x", "<=", "self", ".", "step_ratio", ":", "\n", "            ", "scale_factor", "=", "x", "/", "self", ".", "step_ratio", "\n", "", "else", ":", "\n", "            ", "scale_factor", "=", "(", "x", "-", "1", ")", "/", "(", "self", ".", "step_ratio", "-", "1", ")", "\n", "\n", "", "lrs", "=", "[", "]", "\n", "for", "base_lr", ",", "max_lr", "in", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "max_lrs", ")", ":", "\n", "            ", "base_height", "=", "(", "max_lr", "-", "base_lr", ")", "*", "scale_factor", "\n", "if", "self", ".", "scale_mode", "==", "'cycle'", ":", "\n", "                ", "lr", "=", "base_lr", "+", "base_height", "*", "self", ".", "scale_fn", "(", "cycle", ")", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "+", "base_height", "*", "self", ".", "scale_fn", "(", "self", ".", "last_epoch", ")", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "\n", "", "if", "self", ".", "cycle_momentum", ":", "\n", "            ", "momentums", "=", "[", "]", "\n", "for", "base_momentum", ",", "max_momentum", "in", "zip", "(", "self", ".", "base_momentums", ",", "self", ".", "max_momentums", ")", ":", "\n", "                ", "base_height", "=", "(", "max_momentum", "-", "base_momentum", ")", "*", "scale_factor", "\n", "if", "self", ".", "scale_mode", "==", "'cycle'", ":", "\n", "                    ", "momentum", "=", "max_momentum", "-", "base_height", "*", "self", ".", "scale_fn", "(", "cycle", ")", "\n", "", "else", ":", "\n", "                    ", "momentum", "=", "max_momentum", "-", "base_height", "*", "self", ".", "scale_fn", "(", "self", ".", "last_epoch", ")", "\n", "", "momentums", ".", "append", "(", "momentum", ")", "\n", "", "for", "param_group", ",", "momentum", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "momentums", ")", ":", "\n", "                ", "param_group", "[", "'momentum'", "]", "=", "momentum", "\n", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CosineAnnealingWarmRestarts.__init__": [[950, 963], ["lr_scheduler._LRScheduler.__init__", "ValueError", "ValueError", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "T_0", ",", "T_mult", "=", "1", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "T_0", "<=", "0", "or", "not", "isinstance", "(", "T_0", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected positive integer T_0, but got {}\"", ".", "format", "(", "T_0", ")", ")", "\n", "", "if", "T_mult", "<", "1", "or", "not", "isinstance", "(", "T_mult", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected integer T_mult >= 1, but got {}\"", ".", "format", "(", "T_mult", ")", ")", "\n", "", "self", ".", "T_0", "=", "T_0", "\n", "self", ".", "T_i", "=", "T_0", "\n", "self", ".", "T_mult", "=", "T_mult", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "\n", "super", "(", "CosineAnnealingWarmRestarts", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n", "self", ".", "T_cur", "=", "self", ".", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CosineAnnealingWarmRestarts.get_lr": [[964, 971], ["warnings.warn", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "T_cur", "/", "self", ".", "T_i", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.CosineAnnealingWarmRestarts.step": [[972, 1037], ["math.floor", "_enable_get_lr_call", "zip", "ValueError", "lr_scheduler.CosineAnnealingWarmRestarts.get_lr", "int", "math.log"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "\"\"\"Step could be called after every batch update\n        Example:\n            >>> scheduler = CosineAnnealingWarmRestarts(optimizer, T_0, T_mult)\n            >>> iters = len(dataloader)\n            >>> for epoch in range(20):\n            >>>     for i, sample in enumerate(dataloader):\n            >>>         inputs, labels = sample['inputs'], sample['labels']\n            >>>         optimizer.zero_grad()\n            >>>         outputs = net(inputs)\n            >>>         loss = criterion(outputs, labels)\n            >>>         loss.backward()\n            >>>         optimizer.step()\n            >>>         scheduler.step(epoch + i / iters)\n        This function can be called in an interleaved way.\n        Example:\n            >>> scheduler = CosineAnnealingWarmRestarts(optimizer, T_0, T_mult)\n            >>> for epoch in range(20):\n            >>>     scheduler.step()\n            >>> scheduler.step(26)\n            >>> scheduler.step() # scheduler.step(27), instead of scheduler(20)\n        \"\"\"", "\n", "\n", "if", "epoch", "is", "None", "and", "self", ".", "last_epoch", "<", "0", ":", "\n", "            ", "epoch", "=", "0", "\n", "\n", "", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "self", ".", "T_cur", "=", "self", ".", "T_cur", "+", "1", "\n", "if", "self", ".", "T_cur", ">=", "self", ".", "T_i", ":", "\n", "                ", "self", ".", "T_cur", "=", "self", ".", "T_cur", "-", "self", ".", "T_i", "\n", "self", ".", "T_i", "=", "self", ".", "T_i", "*", "self", ".", "T_mult", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected non-negative epoch, but got {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "", "if", "epoch", ">=", "self", ".", "T_0", ":", "\n", "                ", "if", "self", ".", "T_mult", "==", "1", ":", "\n", "                    ", "self", ".", "T_cur", "=", "epoch", "%", "self", ".", "T_0", "\n", "", "else", ":", "\n", "                    ", "n", "=", "int", "(", "math", ".", "log", "(", "(", "epoch", "/", "self", ".", "T_0", "*", "(", "self", ".", "T_mult", "-", "1", ")", "+", "1", ")", ",", "self", ".", "T_mult", ")", ")", "\n", "self", ".", "T_cur", "=", "epoch", "-", "self", ".", "T_0", "*", "(", "self", ".", "T_mult", "**", "n", "-", "1", ")", "/", "(", "self", ".", "T_mult", "-", "1", ")", "\n", "self", ".", "T_i", "=", "self", ".", "T_0", "*", "self", ".", "T_mult", "**", "(", "n", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "T_i", "=", "self", ".", "T_0", "\n", "self", ".", "T_cur", "=", "epoch", "\n", "", "", "self", ".", "last_epoch", "=", "math", ".", "floor", "(", "epoch", ")", "\n", "\n", "class", "_enable_get_lr_call", ":", "\n", "\n", "            ", "def", "__init__", "(", "self", ",", "o", ")", ":", "\n", "                ", "self", ".", "o", "=", "o", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "                ", "self", ".", "o", ".", "_get_lr_called_within_step", "=", "True", "\n", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "                ", "self", ".", "o", ".", "_get_lr_called_within_step", "=", "False", "\n", "return", "self", "\n", "\n", "", "", "with", "_enable_get_lr_call", "(", "self", ")", ":", "\n", "            ", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "", "self", ".", "_last_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR.__init__": [[1120, 1196], ["lr_scheduler.OneCycleLR._format_param", "lr_scheduler._LRScheduler.__init__", "isinstance", "TypeError", "ValueError", "float", "float", "ValueError", "ValueError", "enumerate", "lr_scheduler.OneCycleLR._format_param", "lr_scheduler.OneCycleLR._format_param", "isinstance", "ValueError", "zip", "ValueError", "ValueError", "ValueError", "type", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "max_lr", ",", "\n", "total_steps", "=", "None", ",", "\n", "epochs", "=", "None", ",", "\n", "steps_per_epoch", "=", "None", ",", "\n", "pct_start", "=", "0.3", ",", "\n", "anneal_strategy", "=", "'cos'", ",", "\n", "cycle_momentum", "=", "True", ",", "\n", "base_momentum", "=", "0.85", ",", "\n", "max_momentum", "=", "0.95", ",", "\n", "div_factor", "=", "25.", ",", "\n", "final_div_factor", "=", "1e4", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "# Validate optimizer", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "# Validate total_steps", "\n", "if", "total_steps", "is", "None", "and", "epochs", "is", "None", "and", "steps_per_epoch", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You must define either total_steps OR (epochs AND steps_per_epoch)\"", ")", "\n", "", "elif", "total_steps", "is", "not", "None", ":", "\n", "            ", "if", "total_steps", "<=", "0", "or", "not", "isinstance", "(", "total_steps", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected non-negative integer total_steps, but got {}\"", ".", "format", "(", "total_steps", ")", ")", "\n", "", "self", ".", "total_steps", "=", "total_steps", "\n", "", "else", ":", "\n", "            ", "if", "epochs", "<=", "0", "or", "not", "isinstance", "(", "epochs", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected non-negative integer epochs, but got {}\"", ".", "format", "(", "epochs", ")", ")", "\n", "", "if", "steps_per_epoch", "<=", "0", "or", "not", "isinstance", "(", "steps_per_epoch", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected non-negative integer steps_per_epoch, but got {}\"", ".", "format", "(", "steps_per_epoch", ")", ")", "\n", "", "self", ".", "total_steps", "=", "epochs", "*", "steps_per_epoch", "\n", "", "self", ".", "step_size_up", "=", "float", "(", "pct_start", "*", "self", ".", "total_steps", ")", "-", "1", "\n", "self", ".", "step_size_down", "=", "float", "(", "self", ".", "total_steps", "-", "self", ".", "step_size_up", ")", "-", "1", "\n", "\n", "# Validate pct_start", "\n", "if", "pct_start", "<", "0", "or", "pct_start", ">", "1", "or", "not", "isinstance", "(", "pct_start", ",", "float", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected float between 0 and 1 pct_start, but got {}\"", ".", "format", "(", "pct_start", ")", ")", "\n", "\n", "# Validate anneal_strategy", "\n", "", "if", "anneal_strategy", "not", "in", "[", "'cos'", ",", "'linear'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"anneal_strategy must by one of 'cos' or 'linear', instead got {}\"", ".", "format", "(", "anneal_strategy", ")", ")", "\n", "", "elif", "anneal_strategy", "==", "'cos'", ":", "\n", "            ", "self", ".", "anneal_func", "=", "self", ".", "_annealing_cos", "\n", "", "elif", "anneal_strategy", "==", "'linear'", ":", "\n", "            ", "self", ".", "anneal_func", "=", "self", ".", "_annealing_linear", "\n", "\n", "# Initialize learning rate variables", "\n", "", "max_lrs", "=", "self", ".", "_format_param", "(", "'max_lr'", ",", "self", ".", "optimizer", ",", "max_lr", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "            ", "for", "idx", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "group", "[", "'initial_lr'", "]", "=", "max_lrs", "[", "idx", "]", "/", "div_factor", "\n", "group", "[", "'max_lr'", "]", "=", "max_lrs", "[", "idx", "]", "\n", "group", "[", "'min_lr'", "]", "=", "group", "[", "'initial_lr'", "]", "/", "final_div_factor", "\n", "\n", "# Initialize momentum variables", "\n", "", "", "self", ".", "cycle_momentum", "=", "cycle_momentum", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "            ", "if", "'momentum'", "not", "in", "self", ".", "optimizer", ".", "defaults", "and", "'betas'", "not", "in", "self", ".", "optimizer", ".", "defaults", ":", "\n", "                ", "raise", "ValueError", "(", "'optimizer must support momentum with `cycle_momentum` option enabled'", ")", "\n", "", "self", ".", "use_beta1", "=", "'betas'", "in", "self", ".", "optimizer", ".", "defaults", "\n", "max_momentums", "=", "self", ".", "_format_param", "(", "'max_momentum'", ",", "optimizer", ",", "max_momentum", ")", "\n", "base_momentums", "=", "self", ".", "_format_param", "(", "'base_momentum'", ",", "optimizer", ",", "base_momentum", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "                ", "for", "m_momentum", ",", "b_momentum", ",", "group", "in", "zip", "(", "max_momentums", ",", "base_momentums", ",", "optimizer", ".", "param_groups", ")", ":", "\n", "                    ", "if", "self", ".", "use_beta1", ":", "\n", "                        ", "_", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "group", "[", "'betas'", "]", "=", "(", "m_momentum", ",", "beta2", ")", "\n", "", "else", ":", "\n", "                        ", "group", "[", "'momentum'", "]", "=", "m_momentum", "\n", "", "group", "[", "'max_momentum'", "]", "=", "m_momentum", "\n", "group", "[", "'base_momentum'", "]", "=", "b_momentum", "\n", "\n", "", "", "", "super", "(", "OneCycleLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._format_param": [[1197, 1206], ["isinstance", "len", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_format_param", "(", "self", ",", "name", ",", "optimizer", ",", "param", ")", ":", "\n", "        ", "\"\"\"Return correctly formatted lr/momentum for each param group.\"\"\"", "\n", "if", "isinstance", "(", "param", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} values for {}, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "name", ",", "len", "(", "param", ")", ")", ")", "\n", "", "return", "param", "\n", "", "else", ":", "\n", "            ", "return", "[", "param", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._annealing_cos": [[1207, 1211], ["math.cos"], "methods", ["None"], ["", "", "def", "_annealing_cos", "(", "self", ",", "start", ",", "end", ",", "pct", ")", ":", "\n", "        ", "\"Cosine anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "cos_out", "=", "math", ".", "cos", "(", "math", ".", "pi", "*", "pct", ")", "+", "1", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2.0", "*", "cos_out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR._annealing_linear": [[1212, 1215], ["None"], "methods", ["None"], ["", "def", "_annealing_linear", "(", "self", ",", "start", ",", "end", ",", "pct", ")", ":", "\n", "        ", "\"Linearly anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "return", "(", "end", "-", "start", ")", "*", "pct", "+", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.OneCycleLR.get_lr": [[1216, 1250], ["warnings.warn", "ValueError", "lrs.append", "lr_scheduler.OneCycleLR.anneal_func", "lr_scheduler.OneCycleLR.anneal_func", "lr_scheduler.OneCycleLR.anneal_func", "lr_scheduler.OneCycleLR.anneal_func"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "\n", "", "lrs", "=", "[", "]", "\n", "step_num", "=", "self", ".", "last_epoch", "\n", "\n", "if", "step_num", ">", "self", ".", "total_steps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Tried to step {} times. The specified number of total steps is {}\"", "\n", ".", "format", "(", "step_num", "+", "1", ",", "self", ".", "total_steps", ")", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "step_num", "<=", "self", ".", "step_size_up", ":", "\n", "                ", "computed_lr", "=", "self", ".", "anneal_func", "(", "group", "[", "'initial_lr'", "]", ",", "group", "[", "'max_lr'", "]", ",", "step_num", "/", "self", ".", "step_size_up", ")", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "                    ", "computed_momentum", "=", "self", ".", "anneal_func", "(", "group", "[", "'max_momentum'", "]", ",", "group", "[", "'base_momentum'", "]", ",", "\n", "step_num", "/", "self", ".", "step_size_up", ")", "\n", "", "", "else", ":", "\n", "                ", "down_step_num", "=", "step_num", "-", "self", ".", "step_size_up", "\n", "computed_lr", "=", "self", ".", "anneal_func", "(", "group", "[", "'max_lr'", "]", ",", "group", "[", "'min_lr'", "]", ",", "down_step_num", "/", "self", ".", "step_size_down", ")", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "                    ", "computed_momentum", "=", "self", ".", "anneal_func", "(", "group", "[", "'base_momentum'", "]", ",", "group", "[", "'max_momentum'", "]", ",", "\n", "down_step_num", "/", "self", ".", "step_size_down", ")", "\n", "\n", "", "", "lrs", ".", "append", "(", "computed_lr", ")", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "                ", "if", "self", ".", "use_beta1", ":", "\n", "                    ", "_", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "group", "[", "'betas'", "]", "=", "(", "computed_momentum", ",", "beta2", ")", "\n", "", "else", ":", "\n", "                    ", "group", "[", "'momentum'", "]", "=", "computed_momentum", "\n", "\n", "", "", "", "return", "lrs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.__init__.get_optimizer_scheduler": [[32, 139], ["float", "print", "print", "print", "print", "print", "torch.optim.lr_scheduler.StepLR", "optim.sgd.SGDVec", "optim.sgd.SGD", "optim.sgd.SGD", "CosineAnnealingWarmRestarts", "Adam", "OneCycleLR", "Adagrad", "AdaS.AdaS", "RMSprop", "print", "Adadelta", "optim.adabound.AdaBound", "optim.adabound.AdaBound", "Adamax", "AdaMod", "AdaShift", "NAdam", "NosAdam", "NovoGrad", "PAdam", "RAdam", "SPS", "SLS", "LaProp", "LRD", "print"], "function", ["None"], ["def", "get_optimizer_scheduler", "(", "\n", "net_parameters", ":", "Any", ",", "\n", "listed_params", ":", "List", "[", "Any", "]", ",", "\n", "train_loader_len", ":", "int", ",", "\n", "config", ":", "Dict", "[", "str", ",", "Union", "[", "float", ",", "str", ",", "int", "]", "]", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "# init_lr: float, optim_method: str,", "\n", "# lr_scheduler: str,", "\n", "# train_loader_len: int,", "\n", "# max_epochs: int) -> torch.nn.Module:", "\n", "    ", "optim_method", "=", "config", "[", "'optim_method'", "]", "\n", "lr_scheduler", "=", "config", "[", "'lr_scheduler'", "]", "\n", "init_lr", "=", "config", "[", "'init_lr'", "]", "\n", "min_lr", "=", "config", "[", "'min_lr'", "]", "\n", "max_epochs", "=", "config", "[", "'max_epoch'", "]", "\n", "adas_p", "=", "config", "[", "'p'", "]", "\n", "beta", "=", "config", "[", "'beta'", "]", "\n", "zeta", "=", "config", "[", "'zeta'", "]", "\n", "weight_decay", "=", "float", "(", "config", "[", "'weight_decay'", "]", ")", "\n", "\n", "step_size", "=", "config", "[", "'step_size'", "]", "\n", "gamma", "=", "config", "[", "'gamma'", "]", "\n", "\n", "print", "(", "'~~~ BETA USED IN get_optimizer_scheduler: {} ~~~'", ".", "format", "(", "beta", ")", ")", "\n", "print", "(", "'~~~ lr_scheduler USED IN get_optimizer_scheduler: {} ~~~'", ".", "format", "(", "lr_scheduler", ")", ")", "\n", "print", "(", "'~~~ Weight Decay: {} ~~~'", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "if", "lr_scheduler", "==", "'StepLR'", ":", "\n", "        ", "print", "(", "'~~~ LR Step Size: {} ~~~'", ".", "format", "(", "step_size", ")", ")", "\n", "print", "(", "'~~~ LR Gamma: {} ~~~'", ".", "format", "(", "gamma", ")", ")", "\n", "", "optimizer", "=", "None", "\n", "scheduler", "=", "None", "\n", "if", "optim_method", "==", "'SGD'", ":", "\n", "        ", "if", "lr_scheduler", "==", "'AdaS'", ":", "\n", "            ", "optimizer", "=", "SGDVec", "(", "\n", "net_parameters", ",", "lr", "=", "init_lr", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "SGD", "(", "\n", "net_parameters", ",", "lr", "=", "init_lr", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "", "elif", "optim_method", "==", "'NAG'", ":", "\n", "        ", "optimizer", "=", "SGD", "(", "\n", "net_parameters", ",", "lr", "=", "init_lr", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ",", "\n", "nesterov", "=", "True", ")", "\n", "", "elif", "optim_method", "==", "'AdaM'", ":", "\n", "        ", "optimizer", "=", "Adam", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'AdaGrad'", ":", "\n", "        ", "optimizer", "=", "Adagrad", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'RMSProp'", ":", "\n", "        ", "optimizer", "=", "RMSprop", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'AdaDelta'", ":", "\n", "        ", "optimizer", "=", "Adadelta", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'AdaBound'", ":", "\n", "        ", "optimizer", "=", "AdaBound", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'AMSBound'", ":", "\n", "        ", "optimizer", "=", "AdaBound", "(", "net_parameters", ",", "lr", "=", "init_lr", ",", "amsbound", "=", "True", ")", "\n", "# below = untested", "\n", "", "elif", "optim_method", "==", "'AdaMax'", ":", "\n", "        ", "optimizer", "=", "Adamax", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'AdaMod'", ":", "\n", "        ", "optimizer", "=", "AdaMod", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'AdaShift'", ":", "\n", "        ", "optimizer", "=", "AdaShift", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'NAdam'", ":", "\n", "        ", "optimizer", "=", "NAdam", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'NosAdam'", ":", "\n", "        ", "optimizer", "=", "NosAdam", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'NovoGrad'", ":", "\n", "        ", "optimizer", "=", "NovoGrad", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'PAdam'", ":", "\n", "        ", "optimizer", "=", "PAdam", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'RAdam'", ":", "\n", "        ", "optimizer", "=", "RAdam", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'SPS'", ":", "\n", "        ", "optimizer", "=", "SPS", "(", "net_parameters", ",", "init_step_size", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'SLS'", ":", "\n", "        ", "optimizer", "=", "SLS", "(", "net_parameters", ",", "init_step_size", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'LaProp'", ":", "\n", "        ", "optimizer", "=", "LaProp", "(", "net_parameters", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optim_method", "==", "'LearningRateDropout'", ":", "\n", "        ", "optimizer", "=", "LRD", "(", "net_parameters", ",", "lr", "=", "init_lr", ",", "\n", "lr_dropout_rate", "=", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Adas: Warning: Unknown optimizer {optim_method}\"", ")", "\n", "", "if", "lr_scheduler", "==", "'StepLR'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "step_size", ",", "gamma", "=", "gamma", ")", "\n", "", "elif", "lr_scheduler", "==", "'CosineAnnealingWarmRestarts'", ":", "\n", "        ", "first_restart_epochs", "=", "25", "\n", "increasing_factor", "=", "1", "\n", "scheduler", "=", "CosineAnnealingWarmRestarts", "(", "\n", "optimizer", ",", "T_0", "=", "first_restart_epochs", ",", "T_mult", "=", "increasing_factor", ")", "\n", "", "elif", "lr_scheduler", "==", "'OneCycleLR'", ":", "\n", "        ", "scheduler", "=", "OneCycleLR", "(", "\n", "optimizer", ",", "max_lr", "=", "init_lr", ",", "\n", "steps_per_epoch", "=", "train_loader_len", ",", "epochs", "=", "max_epochs", ")", "\n", "", "elif", "lr_scheduler", "==", "'AdaS'", ":", "\n", "        ", "scheduler", "=", "AdaS", "(", "parameters", "=", "listed_params", ",", "\n", "beta", "=", "beta", ",", "\n", "zeta", "=", "zeta", ",", "\n", "init_lr", "=", "init_lr", ",", "\n", "min_lr", "=", "min_lr", ",", "\n", "p", "=", "adas_p", ")", "\n", "", "elif", "lr_scheduler", "not", "in", "[", "'None'", ",", "''", "]", ":", "\n", "        ", "print", "(", "f\"Adas: Warning: Unknown LR scheduler {lr_scheduler}\"", ")", "\n", "", "return", "(", "optimizer", ",", "scheduler", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.check_armijo_conditions": [[18, 34], ["None"], "function", ["None"], ["\n", "import", "os", "\n", "import", "sys", "\n", "import", "time", "\n", "import", "math", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "nn", ".", "init", "as", "init", "\n", "from", "typing", "import", "Dict", ",", "Union", ",", "List", "\n", "import", "pstats", "\n", "import", "torch", "\n", "import", "numpy", "as", "np", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.check_goldstein_conditions": [[35, 62], ["ValueError", "min", "max"], "function", ["None"], ["\n", "def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n", "\n", "", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.reset_step": [[64, 76], ["None"], "function", ["None"], ["if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "#_, term_width = os.popen('stty size', 'r').read().split()", "\n", "", "", "", "", "term_width", "=", "80", "\n", "term_width", "=", "int", "(", "term_width", ")", "\n", "\n", "TOTAL_BAR_LENGTH", "=", "65.", "\n", "last_time", "=", "time", ".", "time", "(", ")", "\n", "begin_time", "=", "last_time", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.try_sgd_update": [[77, 82], ["zip"], "function", ["None"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.compute_grad_norm": [[83, 91], ["torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.mul", "torch.mul"], "function", ["None"], ["rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.get_grad_list": [[93, 95], ["None"], "function", ["None"], ["cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.random_seed": [[96, 104], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.set_state"], "function", ["None"], ["tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.utils.random_seed_torch": [[105, 119], ["torch.get_rng_state", "torch.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.set_rng_state", "torch.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state"], "function", ["None"], ["sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.SPS.__init__": [[12, 48], ["list", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "n_batches_per_epoch", "=", "500", ",", "\n", "init_step_size", "=", "1", ",", "\n", "c", "=", "0.5", ",", "\n", "gamma", "=", "2.0", ",", "\n", "eta_max", "=", "None", ",", "\n", "adapt_flag", "=", "'smooth_iter'", ",", "\n", "fstar_flag", "=", "None", ",", "\n", "eps", "=", "1e-8", ",", "\n", "centralize_grad_norm", "=", "False", ",", "\n", "centralize_grad", "=", "False", ")", ":", "\n", "        ", "params", "=", "list", "(", "params", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "{", "}", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "centralize_grad_norm", "=", "centralize_grad_norm", "\n", "self", ".", "centralize_grad", "=", "centralize_grad", "\n", "\n", "if", "centralize_grad", ":", "\n", "            ", "assert", "self", ".", "centralize_grad_norm", "is", "False", "\n", "\n", "", "self", ".", "eta_max", "=", "eta_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "init_step_size", "=", "init_step_size", "\n", "self", ".", "adapt_flag", "=", "adapt_flag", "\n", "self", ".", "state", "[", "'step'", "]", "=", "0", "\n", "\n", "self", ".", "state", "[", "'step_size'", "]", "=", "init_step_size", "\n", "self", ".", "step_size_max", "=", "0.", "\n", "self", ".", "n_batches_per_epoch", "=", "n_batches_per_epoch", "\n", "\n", "self", ".", "state", "[", "'n_forwards'", "]", "=", "0", "\n", "self", ".", "state", "[", "'n_backwards'", "]", "=", "0", "\n", "self", ".", "fstar_flag", "=", "fstar_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.SPS.step": [[49, 117], ["sps.get_grad_list", "sps.compute_grad_norm", "compute_grad_norm.item", "float", "ValueError", "float", "closure", "sps.sgd_update", "torch.isnan().sum", "ValueError", "isinstance", "torch.tensor", "[].mean", "min", "ValueError", "torch.isnan", "min.item", "min", "min.item", "min.item"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.get_grad_list", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.compute_grad_norm", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.sgd_update"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ",", "loss", "=", "None", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "loss", "is", "None", "and", "closure", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'please specify either closure or loss'", ")", "\n", "\n", "", "if", "loss", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "loss", "=", "torch", ".", "tensor", "(", "loss", ")", "\n", "\n", "# increment step", "\n", "", "", "self", ".", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# get fstar", "\n", "if", "self", ".", "fstar_flag", ":", "\n", "            ", "fstar", "=", "float", "(", "batch", "[", "'meta'", "]", "[", "'fstar'", "]", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "fstar", "=", "0.", "\n", "\n", "# get loss and compute gradients", "\n", "", "if", "loss", "is", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "closure", "is", "None", ",", "'if loss is provided then closure should beNone'", "\n", "\n", "# save the current parameters:", "\n", "", "grad_current", "=", "get_grad_list", "(", "\n", "self", ".", "params", ",", "centralize_grad", "=", "self", ".", "centralize_grad", ")", "\n", "grad_norm", "=", "compute_grad_norm", "(", "\n", "grad_current", ",", "centralize_grad_norm", "=", "self", ".", "centralize_grad_norm", ")", "\n", "\n", "if", "grad_norm", "<", "1e-8", ":", "\n", "            ", "step_size", "=", "0.", "\n", "", "else", ":", "\n", "# adapt the step size", "\n", "            ", "if", "self", ".", "adapt_flag", "in", "[", "'constant'", "]", ":", "\n", "# adjust the step size based on an upper bound and fstar", "\n", "                ", "step_size", "=", "(", "loss", "-", "fstar", ")", "/", "(", "self", ".", "c", "*", "(", "grad_norm", ")", "**", "2", "+", "self", ".", "eps", ")", "\n", "if", "loss", "<", "fstar", ":", "\n", "                    ", "step_size", "=", "0.", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "eta_max", "is", "None", ":", "\n", "                        ", "step_size", "=", "step_size", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "min", "(", "self", ".", "eta_max", ",", "step_size", ".", "item", "(", ")", ")", "\n", "\n", "", "", "", "elif", "self", ".", "adapt_flag", "in", "[", "'smooth_iter'", "]", ":", "\n", "# smoothly adjust the step size", "\n", "                ", "step_size", "=", "loss", "/", "(", "self", ".", "c", "*", "(", "grad_norm", ")", "**", "2", "+", "self", ".", "eps", ")", "\n", "coeff", "=", "self", ".", "gamma", "**", "(", "1.", "/", "self", ".", "n_batches_per_epoch", ")", "\n", "step_size", "=", "min", "(", "coeff", "*", "self", ".", "state", "[", "'step_size'", "]", ",", "\n", "step_size", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'adapt_flag: %s not supported'", "%", "\n", "self", ".", "adapt_flag", ")", "\n", "\n", "# update with step size", "\n", "", "sgd_update", "(", "self", ".", "params", ",", "step_size", ",", "grad_current", ")", "\n", "\n", "# update state with metrics", "\n", "", "self", ".", "state", "[", "'n_forwards'", "]", "+=", "1", "\n", "self", ".", "state", "[", "'n_backwards'", "]", "+=", "1", "\n", "self", ".", "state", "[", "'step_size'", "]", "=", "step_size", "\n", "self", ".", "state", "[", "'grad_norm'", "]", "=", "grad_norm", ".", "item", "(", ")", "\n", "\n", "if", "torch", ".", "isnan", "(", "self", ".", "params", "[", "0", "]", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Got NaNs'", ")", "\n", "\n", "", "return", "float", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.compute_grad_norm": [[122, 135], ["torch.sqrt", "torch.sum", "g.add_", "torch.mul", "isinstance", "g.dim", "g.mean", "tuple", "range", "g.dim"], "function", ["None"], ["", "", "def", "compute_grad_norm", "(", "grad_list", ",", "centralize_grad_norm", "=", "False", ")", ":", "\n", "    ", "grad_norm", "=", "0.", "\n", "for", "g", "in", "grad_list", ":", "\n", "        ", "if", "g", "is", "None", "or", "(", "isinstance", "(", "g", ",", "float", ")", "and", "g", "==", "0.", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "g", ".", "dim", "(", ")", ">", "1", "and", "centralize_grad_norm", ":", "\n", "# centralize grads", "\n", "            ", "g", ".", "add_", "(", "-", "g", ".", "mean", "(", "dim", "=", "tuple", "(", "range", "(", "1", ",", "g", ".", "dim", "(", ")", ")", ")", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "", "grad_norm", "+=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "g", ",", "g", ")", ")", "\n", "", "grad_norm", "=", "torch", ".", "sqrt", "(", "grad_norm", ")", "\n", "return", "grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.get_grad_list": [[137, 153], ["g.add_", "len", "list", "g.mean", "g.size", "tuple", "range", "len", "list", "g.size"], "function", ["None"], ["", "def", "get_grad_list", "(", "params", ",", "centralize_grad", "=", "False", ")", ":", "\n", "    ", "grad_list", "=", "[", "]", "\n", "for", "p", "in", "params", ":", "\n", "        ", "g", "=", "p", ".", "grad", "\n", "if", "g", "is", "None", ":", "\n", "            ", "g", "=", "0.", "\n", "", "else", ":", "\n", "            ", "g", "=", "p", ".", "grad", ".", "data", "\n", "if", "len", "(", "list", "(", "g", ".", "size", "(", ")", ")", ")", ">", "1", "and", "centralize_grad", ":", "\n", "# centralize grads", "\n", "                ", "g", ".", "add_", "(", "-", "g", ".", "mean", "(", "dim", "=", "tuple", "(", "range", "(", "1", ",", "len", "(", "list", "(", "g", ".", "size", "(", ")", ")", ")", ")", ")", ",", "\n", "keepdim", "=", "True", ")", ")", "\n", "\n", "", "", "grad_list", "+=", "[", "g", "]", "\n", "\n", "", "return", "grad_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sps.sgd_update": [[155, 160], ["zip", "p.data.add_", "isinstance"], "function", ["None"], ["", "def", "sgd_update", "(", "params", ",", "step_size", ",", "grad_current", ")", ":", "\n", "    ", "for", "p", ",", "g", "in", "zip", "(", "params", ",", "grad_current", ")", ":", "\n", "        ", "if", "isinstance", "(", "g", ",", "float", ")", "and", "g", "==", "0.", ":", "\n", "            ", "continue", "\n", "", "p", ".", "data", ".", "add_", "(", "-", "step_size", ",", "g", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGD.__init__": [[116, 130], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGD.__setstate__": [[131, 135], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGD.step": [[136, 175], ["torch.no_grad", "torch.enable_grad", "closure", "p.add_", "d_p.add.add.add", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone().detach.mul_"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", "=", "d_p", ".", "add", "(", "p", ",", "alpha", "=", "weight_decay", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "d_p", ",", "alpha", "=", "1", "-", "dampening", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "momentum", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "add_", "(", "d_p", ",", "alpha", "=", "-", "group", "[", "'lr'", "]", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.__init__": [[223, 239], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "SGDVec", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.__setstate__": [[240, 244], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "SGDVec", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.sgd.SGDVec.step": [[245, 290], ["closure", "p.data.add_", "d_p.add.add.add_", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone().detach.mul_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "layers_index_todo", ",", "lr_vector", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "iteration_group", "=", "0", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "iteration_group", "+=", "1", "\n", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "iteration_p", "=", "0", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", "or", "~", "layers_index_todo", "[", "iteration_p", "]", ":", "\n", "                    ", "iteration_p", "+=", "1", "\n", "continue", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "\n", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "# p.data.add_(-group['lr'], d_p)", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "lr_vector", "[", "iteration_p", "]", ",", "d_p", ")", "\n", "iteration_p", "+=", "1", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.BasicBlock.__init__": [[34, 49], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.BasicBlock.forward": [[51, 57], ["resnet_print.BasicBlock.relu", "resnet_print.BasicBlock.bn2", "resnet_print.BasicBlock.shortcut", "resnet_print.BasicBlock.relu", "resnet_print.BasicBlock.bn1", "resnet_print.BasicBlock.conv2", "resnet_print.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.Bottleneck.__init__": [[62, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.Bottleneck.forward": [[81, 88], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_print.Bottleneck.bn3", "resnet_print.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_print.Bottleneck.bn1", "resnet_print.Bottleneck.bn2", "resnet_print.Bottleneck.conv3", "resnet_print.Bottleneck.conv1", "resnet_print.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet.__init__": [[91, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_print.ResNet._make_layer", "resnet_print.ResNet._make_layer", "resnet_print.ResNet._make_layer", "resnet_print.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#######################  O% ########################", "\n", "#self.index=[64,128,256,512]", "\n", "####################### 20% #######################", "\n", "#self.index=[54,106,210,414]", "\n", "####################### 40% #######################", "\n", "#self.index=[44,84,164,316]", "\n", "####################### 60% #######################", "\n", "#self.index=[32,62,120,220]", "\n", "####################### 80% #######################", "\n", "#self.index=[32,40,74,122]", "\n", "####################### 100% #######################", "\n", "self", ".", "index", "=", "[", "32", ",", "18", ",", "28", ",", "24", "]", "\n", "\n", "self", ".", "in_planes", "=", "self", ".", "index", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "in_planes", ",", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet._make_layer": [[120, 127], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet.forward": [[128, 143], ["resnet_print.ResNet.relu", "resnet_print.ResNet.maxpool", "print", "resnet_print.ResNet.layer1", "print", "resnet_print.ResNet.layer2", "print", "resnet_print.ResNet.layer3", "print", "resnet_print.ResNet.layer4", "resnet_print.ResNet.avgpool", "resnet_print.ResNet.view", "resnet_print.ResNet.linear", "resnet_print.ResNet.bn1", "resnet_print.ResNet.size", "resnet_print.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST MAXPOOLING'", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST SUPERBLOCK 1'", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST SUPERBLOCK 2'", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST SUPERBLOCK 3'", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet18": [[145, 147], ["resnet_print.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet34": [[149, 151], ["resnet_print.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet50": [[153, 155], ["resnet_print.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet101": [[157, 159], ["resnet_print.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.ResNet152": [[161, 163], ["resnet_print.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_print.test": [[171, 183], ["resnet_print.ResNet34", "torch.randn", "torch.randn", "torch.randn", "ResNet34.", "print", "sum", "print", "net.size", "p.numel", "ResNet34.parameters"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet34"], ["def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet34", "(", ")", "\n", "##print(net)", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "#g=make_dot(y)", "\n", "#g.view()", "\n", "#print('true')", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "#Baseline: 21282122, 20%: 14112820, 40%: 8413430, 60%: 4270146, 80%: 1507574, 100%: 199714.", "\n", "print", "(", "pytorch_total_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenet.Block.__init__": [[37, 45], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenet.Block.forward": [[46, 50], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenet.MobileNet.__init__": [[57, 64], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenet.MobileNet._make_layers": [[65, 73], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenet.MobileNet.forward": [[74, 81], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenet.test": [[83, 88], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.BasicBlock.__init__": [[53, 95], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "intermediate_planes", ",", "out_planes", ",", "kernel_size_1", "=", "3", ",", "kernel_size_2", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "        ", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "intermediate_planes", "=", "intermediate_planes", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "\n", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''if in_planes!=intermediate_planes:\n            #print('shortcut_needed')\n            stride=2\n        else:\n            stride=stride'''", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "intermediate_planes", ",", "\n", "kernel_size", "=", "kernel_size_1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "int", "(", "(", "kernel_size_1", "-", "1", ")", "/", "2", ")", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "intermediate_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "intermediate_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size_2", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "int", "(", "(", "kernel_size_2", "-", "1", ")", "/", "2", ")", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "out_planes", ":", "\n", "#print('shortcut_made')", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "#nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.BasicBlock.forward": [[98, 115], ["own_network.BasicBlock.conv1", "own_network.BasicBlock.bn1", "own_network.BasicBlock.relu", "own_network.BasicBlock.bn2", "own_network.BasicBlock.shortcut", "own_network.BasicBlock.relu", "own_network.BasicBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "y", ")", "\n", "#print(x.shape,'post conv1 block')", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "#print(x.shape,'post conv2 block')", "\n", "#if self.shortcut!=nn.Sequential():", "\n", "#print('shortcut_made')", "\n", "#print(self.shortcut)", "\n", "#print(x.shape)", "\n", "#print(y.shape)", "\n", "#print(self.shortcut(y).shape)", "\n", "x", "+=", "self", ".", "shortcut", "(", "y", ")", "\n", "#print(x.shape,'post conv3 block')", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.Bottleneck.__init__": [[119, 138], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "inter1_planes", ",", "inter2_planes", ",", "out_planes", ",", "\n", "kernel_size_1", "=", "1", ",", "kernel_size_2", "=", "3", ",", "kernel_size_3", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "inter1_planes", ",", "kernel_size", "=", "kernel_size_1", ",", "padding", "=", "int", "(", "(", "kernel_size_1", "-", "1", ")", "/", "2", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inter1_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inter1_planes", ",", "inter2_planes", ",", "kernel_size", "=", "kernel_size_2", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "int", "(", "(", "kernel_size_2", "-", "1", ")", "/", "2", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "inter2_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "inter2_planes", ",", "\n", "out_planes", ",", "kernel_size", "=", "kernel_size_3", ",", "padding", "=", "int", "(", "(", "kernel_size_3", "-", "1", ")", "/", "2", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.Bottleneck.forward": [[140, 147], ["own_network.Bottleneck.relu", "own_network.Bottleneck.relu", "own_network.Bottleneck.bn3", "own_network.Bottleneck.shortcut", "own_network.Bottleneck.relu", "own_network.Bottleneck.bn1", "own_network.Bottleneck.bn2", "own_network.Bottleneck.conv3", "own_network.Bottleneck.conv1", "own_network.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.Network.__init__": [[150, 200], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "own_network.Network._create_network", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "print", "len", "len", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet._create_network"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "image_channels", "=", "3", ",", "new_output_sizes", "=", "None", ",", "new_kernel_sizes", "=", "None", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "superblock1_indexes", "=", "GLOBALS", ".", "super1_idx", "\n", "self", ".", "superblock2_indexes", "=", "GLOBALS", ".", "super2_idx", "\n", "self", ".", "superblock3_indexes", "=", "GLOBALS", ".", "super3_idx", "\n", "self", ".", "superblock4_indexes", "=", "GLOBALS", ".", "super4_idx", "\n", "\n", "self", ".", "superblock1_kernels", "=", "GLOBALS", ".", "super1_kernel_idx", "\n", "self", ".", "superblock2_kernels", "=", "GLOBALS", ".", "super2_kernel_idx", "\n", "self", ".", "superblock3_kernels", "=", "GLOBALS", ".", "super3_kernel_idx", "\n", "self", ".", "superblock4_kernels", "=", "GLOBALS", ".", "super4_kernel_idx", "\n", "\n", "if", "new_output_sizes", "!=", "None", ":", "\n", "            ", "self", ".", "superblock1_indexes", "=", "new_output_sizes", "[", "0", "]", "\n", "self", ".", "superblock2_indexes", "=", "new_output_sizes", "[", "1", "]", "\n", "self", ".", "superblock3_indexes", "=", "new_output_sizes", "[", "2", "]", "\n", "self", ".", "superblock4_indexes", "=", "new_output_sizes", "[", "3", "]", "\n", "", "if", "new_kernel_sizes", "!=", "None", ":", "\n", "            ", "self", ".", "superblock1_kernels", "=", "new_kernel_sizes", "[", "0", "]", "\n", "self", ".", "superblock2_kernels", "=", "new_kernel_sizes", "[", "1", "]", "\n", "self", ".", "superblock3_kernels", "=", "new_kernel_sizes", "[", "2", "]", "\n", "self", ".", "superblock4_kernels", "=", "new_kernel_sizes", "[", "3", "]", "\n", "print", "(", "new_kernel_sizes", ",", "'VALUES PROVIDED FOR KERNEL SIZES'", ")", "\n", "\n", "", "shortcut_indexes", "=", "[", "]", "\n", "counter", "=", "-", "1", "\n", "conv_size_list", "=", "[", "self", ".", "superblock1_indexes", ",", "self", ".", "superblock2_indexes", ",", "self", ".", "superblock3_indexes", ",", "self", ".", "superblock4_indexes", "]", "\n", "print", "(", "conv_size_list", ",", "'NETWORK ARCHITECTURE'", ")", "\n", "for", "j", "in", "conv_size_list", ":", "\n", "            ", "if", "len", "(", "shortcut_indexes", ")", "==", "len", "(", "conv_size_list", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "counter", "+=", "len", "(", "j", ")", "+", "1", "\n", "shortcut_indexes", "+=", "[", "counter", "]", "\n", "#print(shortcut_indexes)", "\n", "", "self", ".", "shortcut_1_index", "=", "shortcut_indexes", "[", "0", "]", "\n", "self", ".", "shortcut_2_index", "=", "shortcut_indexes", "[", "1", "]", "\n", "self", ".", "shortcut_3_index", "=", "shortcut_indexes", "[", "2", "]", "\n", "\n", "self", ".", "index", "=", "self", ".", "superblock1_indexes", "+", "self", ".", "superblock2_indexes", "+", "self", ".", "superblock3_indexes", "+", "self", ".", "superblock4_indexes", "\n", "self", ".", "kernel_sizes", "=", "self", ".", "superblock1_kernels", "+", "self", ".", "superblock2_kernels", "+", "self", ".", "superblock3_kernels", "+", "self", ".", "superblock4_kernels", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "image_channels", ",", "self", ".", "index", "[", "0", "]", ",", "kernel_size", "=", "self", ".", "kernel_sizes", "[", "0", "]", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "self", ".", "kernel_sizes", "[", "0", "]", "-", "1", ")", "/", "2", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "index", "[", "0", "]", ")", "\n", "self", ".", "network", "=", "self", ".", "_create_network", "(", "block", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "1", "]", ",", "num_classes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.Network._create_network": [[201, 222], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "range", "block", "layers.append", "layers.append", "range", "len", "block", "block", "layers.append", "len", "block"], "methods", ["None"], ["", "def", "_create_network", "(", "self", ",", "block", ")", ":", "\n", "\n", "        ", "layers", "=", "[", "]", "\n", "if", "block", "==", "BasicBlock", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "0", "]", ",", "self", ".", "index", "[", "1", "]", ",", "self", ".", "index", "[", "2", "]", ",", "kernel_size_1", "=", "self", ".", "kernel_sizes", "[", "1", "]", ",", "kernel_size_2", "=", "self", ".", "kernel_sizes", "[", "2", "]", ",", "stride", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "self", ".", "index", ")", "-", "2", ",", "2", ")", ":", "\n", "                ", "if", "(", "i", "+", "1", "==", "self", ".", "shortcut_1_index", "or", "i", "+", "2", "==", "self", ".", "shortcut_2_index", "or", "i", "+", "3", "==", "self", ".", "shortcut_3_index", ")", ":", "\n", "                    ", "stride", "=", "2", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "1", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "kernel_size_1", "=", "self", ".", "kernel_sizes", "[", "i", "+", "1", "]", ",", "kernel_size_2", "=", "self", ".", "kernel_sizes", "[", "i", "+", "2", "]", ",", "stride", "=", "stride", ")", ")", "\n", "", "", "elif", "block", "==", "Bottleneck", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "0", "]", ",", "self", ".", "index", "[", "1", "]", ",", "self", ".", "index", "[", "2", "]", ",", "self", ".", "index", "[", "3", "]", ",", "kernel_size_1", "=", "self", ".", "kernel_sizes", "[", "1", "]", ",", "kernel_size_2", "=", "self", ".", "kernel_sizes", "[", "2", "]", ",", "kernel_size_3", "=", "self", ".", "kernel_sizes", "[", "3", "]", ",", "stride", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ",", "len", "(", "self", ".", "index", ")", "-", "3", ",", "3", ")", ":", "\n", "                ", "if", "(", "i", "+", "1", "==", "self", ".", "shortcut_1_index", "or", "i", "+", "2", "==", "self", ".", "shortcut_2_index", "or", "i", "+", "3", "==", "self", ".", "shortcut_3_index", ")", ":", "\n", "                    ", "stride", "=", "2", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "1", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "self", ".", "index", "[", "i", "+", "3", "]", ",", "kernel_size_1", "=", "self", ".", "kernel_sizes", "[", "i", "+", "1", "]", ",", "kernel_size_2", "=", "self", ".", "kernel_sizes", "[", "i", "+", "2", "]", ",", "kernel_size_3", "=", "self", ".", "kernel_sizes", "[", "i", "+", "3", "]", ",", "stride", "=", "stride", ")", ")", "\n", "#print(len(self.index),'len index')", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.Network.forward": [[223, 242], ["own_network.Network.conv1", "own_network.Network.bn1", "own_network.Network.relu", "own_network.Network.network", "own_network.Network.avgpool", "own_network.Network.view", "own_network.Network.linear", "own_network.Network.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "#print(self.index )", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "y", ")", "\n", "#print(x.shape, 'conv1')", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "#print(x.shape, 'bn1')", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#print(x.shape, 'relu')", "\n", "#x = self.maxpool(x)", "\n", "##print(x.shape, 'max pool')", "\n", "x", "=", "self", ".", "network", "(", "x", ")", "\n", "#print(x.shape, 'post bunch of blocks')", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "#print(x.shape, 'post avgpool')", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#print(x.shape, 'post reshaping')", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "#print(x.shape, 'post fc')", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet34": [[244, 248], ["print", "own_network.Network"], "function", ["None"], ["", "", "def", "DASNet34", "(", "num_classes_input", "=", "10", ",", "new_output_sizes", "=", "None", ",", "new_kernel_sizes", "=", "None", ")", ":", "\n", "    ", "GLOBALS", ".", "BLOCK_TYPE", "=", "'BasicBlock'", "\n", "print", "(", "'SETTING BLOCK_TYPE TO BasicBlock'", ")", "\n", "return", "Network", "(", "BasicBlock", ",", "3", ",", "num_classes", "=", "num_classes_input", ",", "new_output_sizes", "=", "new_output_sizes", ",", "new_kernel_sizes", "=", "new_kernel_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet50": [[249, 253], ["print", "own_network.Network"], "function", ["None"], ["", "def", "DASNet50", "(", "num_classes_input", "=", "10", ",", "new_output_sizes", "=", "None", ",", "new_kernel_sizes", "=", "None", ")", ":", "\n", "    ", "GLOBALS", ".", "BLOCK_TYPE", "=", "'Bottleneck'", "\n", "print", "(", "'SETTING BLOCK_TYPE TO Bottleneck'", ")", "\n", "return", "Network", "(", "Bottleneck", ",", "3", ",", "num_classes", "=", "num_classes_input", ",", "new_output_sizes", "=", "new_output_sizes", ",", "new_kernel_sizes", "=", "new_kernel_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.test": [[254, 273], ["own_network.DASNet34", "DASNet34.", "print", "ptflops.get_model_complexity_info", "print", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet34"], ["", "def", "test", "(", ")", ":", "\n", "#writer = SummaryWriter('runs/resnet34_1')", "\n", "    ", "net", "=", "DASNet34", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "'''\n    #print(net)\n    g=make_dot(y)\n    g.view()\n    #g.view()\n    torch.save(net.state_dict(),'temp_resnet.onnx')\n    dummy_input = Variable(torch.randn(4, 3, 32, 32))\n    torch.onnx.export(net, dummy_input, \"model.onnx\")\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.BasicBlock.__init__": [[17, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.BasicBlock.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "new_resnet.BasicBlock.bn2", "new_resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "new_resnet.BasicBlock.bn1", "new_resnet.BasicBlock.conv2", "new_resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.Bottleneck.__init__": [[45, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.Bottleneck.forward": [[64, 71], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "new_resnet.Bottleneck.bn3", "new_resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "new_resnet.Bottleneck.bn1", "new_resnet.Bottleneck.bn2", "new_resnet.Bottleneck.conv3", "new_resnet.Bottleneck.conv1", "new_resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet.__init__": [[74, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "new_resnet.ResNet._make_layer", "new_resnet.ResNet._make_layer", "new_resnet.ResNet._make_layer", "new_resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet._make_layer": [[87, 94], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet.forward": [[95, 105], ["torch.relu", "torch.relu", "torch.relu", "new_resnet.ResNet.layer1", "new_resnet.ResNet.layer2", "new_resnet.ResNet.layer3", "new_resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "new_resnet.ResNet.view", "new_resnet.ResNet.linear", "new_resnet.ResNet.bn1", "new_resnet.ResNet.size", "new_resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet18": [[107, 109], ["new_resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet34": [[111, 113], ["new_resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet50": [[115, 117], ["new_resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet101": [[119, 121], ["new_resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.ResNet152": [[123, 125], ["new_resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.new_resnet.test": [[126, 147], ["new_resnet.ResNet34", "ResNet34.", "print", "get_model_complexity_info", "print", "print", "make_dot", "make_dot.view", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet34"], ["", "def", "test", "(", ")", ":", "\n", "#writer = SummaryWriter('runs/resnet34_1')", "\n", "    ", "net", "=", "ResNet34", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "\n", "#print(net)", "\n", "g", "=", "make_dot", "(", "y", ")", "\n", "g", ".", "view", "(", ")", "\n", "'''\n\n    #g.view()\n    torch.save(net.state_dict(),'temp_resnet.onnx')\n    dummy_input = Variable(torch.randn(4, 3, 32, 32))\n    torch.onnx.export(net, dummy_input, \"model.onnx\")\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.vgg.VGG.__init__": [[41, 45], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.vgg.VGG.forward": [[46, 51], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.vgg.VGG._make_layers": [[52, 65], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.vgg.test": [[67, 74], ["vgg.VGG", "sum", "print", "torch.randn", "torch.randn", "VGG.", "print", "net.size", "p.numel", "VGG.parameters"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'VGG16'", ")", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", "\n", "print", "(", "pytorch_total_params", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.Block.__init__": [[36, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "out_planes", "//", "16", ",", "out_planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.Block.forward": [[63, 74], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "efficientnet.Block.bn3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "efficientnet.Block.fc2().sigmoid", "efficientnet.Block.bn1", "efficientnet.Block.bn2", "efficientnet.Block.conv3", "efficientnet.Block.shortcut", "efficientnet.Block.size", "efficientnet.Block.fc1", "efficientnet.Block.conv1", "efficientnet.Block.conv2", "efficientnet.Block.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "# Squeeze-Excitation", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "self", ".", "fc2", "(", "w", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "out", "*", "w", "+", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.EfficientNet.__init__": [[77, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.EfficientNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", "[", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.EfficientNet._make_layers": [[86, 94], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "efficientnet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.EfficientNet.forward": [[95, 101], ["torch.relu", "torch.relu", "torch.relu", "efficientnet.EfficientNet.layers", "efficientnet.EfficientNet.view", "efficientnet.EfficientNet.linear", "efficientnet.EfficientNet.bn1", "efficientnet.EfficientNet.size", "efficientnet.EfficientNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.EfficientNetB0": [[103, 113], ["efficientnet.EfficientNet"], "function", ["None"], ["", "", "def", "EfficientNetB0", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "# (expansion, out_planes, num_blocks, stride)", "\n", "    ", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "2", ")", ",", "\n", "(", "6", ",", "24", ",", "2", ",", "1", ")", ",", "\n", "(", "6", ",", "40", ",", "2", ",", "2", ")", ",", "\n", "(", "6", ",", "80", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "112", ",", "3", ",", "1", ")", ",", "\n", "(", "6", ",", "192", ",", "4", ",", "2", ")", ",", "\n", "(", "6", ",", "320", ",", "1", ",", "2", ")", "]", "\n", "return", "EfficientNet", "(", "cfg", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.test": [[115, 125], ["efficientnet.EfficientNetB0", "ptflops.get_model_complexity_info", "print", "print", "torch.randn", "torch.randn", "torch.randn", "EfficientNetB0.", "print"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.EfficientNetB0"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "EfficientNetB0", "(", ")", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2.Block.__init__": [[51, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes_1", ",", "out_planes_2", ",", "out_planes", ",", "stride", ",", "shortcut", "=", "False", ")", ":", "\n", "        ", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "shortcut", "=", "shortcut", "\n", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes_1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes_1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes_1", ",", "out_planes_2", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "out_planes_2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes_2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "out_planes_2", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", "and", "shortcut", "!=", "False", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2.Block.forward": [[72, 85], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y", ")", ")", ")", "\n", "#print(x.shape, 'post conv1')", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "#print(x.shape, 'post conv2')", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "#print(x.shape, 'post conv3')", "\n", "#if self.shortcut!=nn.Sequential():", "\n", "#print(x.shape, 'out')", "\n", "#print(y.shape, 'in')", "\n", "#print(self.shortcut(y).shape, 'shortcut_in')", "\n", "x", "=", "x", "+", "self", ".", "shortcut", "(", "y", ")", "if", "(", "self", ".", "stride", "==", "1", ")", "else", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2.MobileNetV2.__init__": [[97, 134], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._create_network", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet._create_network"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "#self.index=[32, 32, 32, (16,'shortcut'), 16, 96, 96, (24,'shortcut'), 24, 144, 144, 24, 144, 144, 32, 192, 192, 32, 192, 192, 32, 192, 192, 64, 384, 384, 64, 384, 384, 64, 384, 384, 64, 384, 384, (96,'shortcut'), 96, 576, 576, 96, 576, 576, 96, 576, 576, 160, 960, 960, 160, 960, 960, 160, 960, 960, (320,'shortcut'), 320, 1280]", "\n", "#self.strides_and_short=[(1,True),(1,True),(1,False),(2,False),(1,False),(1,False),(2,False),(1,False),(1,False),(1,False),(1,True),(1,False),(1,False),(2,False),(1,False),(1,False),(1,True)]", "\n", "########################################StepLR Choices#####################################", "\n", "######################################## 0% #############################################", "\n", "#self.index=[32, 32, 32, (16,'shortcut'), 16, 96, 96, (24,'shortcut'), 24, 144, 144, 24, 144, 144, 32, 192, 192, 32, 192, 192, 32, 192, 192, 64, 384, 384, 64, 384, 384, 64, 384, 384, 64, 384, 384, (96,'shortcut'), 96, 576, 576, 96, 576, 576, 96, 576, 576, 160, 960, 960, 160, 960, 960, 160, 960, 960, (320,'shortcut'), 320, 1280]", "\n", "#self.strides_and_short=[(1,True),(1,True),(1,False),(2,False),(1,False),(1,False),(2,False),(1,False),(1,False),(1,False),(1,True),(1,False),(1,False),(2,False),(1,False),(1,False),(1,True)]", "\n", "######################################## 20% ############################################", "\n", "#self.index=[32, 28, 28, (14,'shortcut'), 14, 78, 78, (22,'shortcut'), 20, 118, 118, 20, 118, 118, 30, 158, 158, 30, 158, 158, 30, 158, 158, 58, 314, 314, 58, 316, 316, 58, 314, 314, 58, 316, 316, (88,'shortcut'), 82, 470, 470, 82, 472, 472, 82, 474, 474, 140, 778, 778, 140, 784, 784, 140, 786, 786, (260,'shortcut'), 260, 1026]", "\n", "#self.strides_and_short=[(1,True),(1,True),(1,False),(2,False),(1,False),(1,False),(2,False),(1,False),(1,False),(1,False),(1,True),(1,False),(1,False),(2,False),(1,False),(1,False),(1,True)]", "\n", "######################################## 40% ############################################", "\n", "#self.index=[32, 24, 24, (12,'shortcut'), 14, 62, 62, (20,'shortcut'), 20, 94, 94, 20, 92, 92, 28, 124, 124, 28, 124, 124, 28, 124, 124, 54, 244, 244, 54, 246, 246, 54, 246, 246, 54, 248, 248, (80,'shortcut'), 68, 366, 366, 68, 366, 366, 68, 372, 372, 122, 596, 596, 122, 608, 608, 122, 612, 612, (200,'shortcut'), 200, 774]", "\n", "#self.strides_and_short=[(1,True),(1,True),(1,False),(2,False),(1,False),(1,False),(2,False),(1,False),(1,False),(1,False),(1,True),(1,False),(1,False),(2,False),(1,False),(1,False),(1,True)]", "\n", "######################################## 60% ############################################", "\n", "#self.index=[32, 20, 20, (10,'shortcut'), 12, 44, 44, (18,'shortcut'), 18, 68, 68, 18, 68, 68, 24, 90, 90, 24, 90, 90, 24, 90, 90, 48, 172, 172, 48, 178, 178, 48, 176, 176, 48, 182, 182, (70,'shortcut'), 56, 260, 260, 56, 262, 262, 56, 268, 268, 102, 414, 414, 102, 432, 432, 102, 438, 438, (142,'shortcut'), 138, 520]", "\n", "#self.strides_and_short=[(1,True),(1,True),(1,False),(2,False),(1,False),(1,False),(2,False),(1,False),(1,False),(1,False),(1,True),(1,False),(1,False),(2,False),(1,False),(1,False),(1,True)]", "\n", "######################################## 80% ############################################", "\n", "#self.index=[32, 16, 16, (10,'shortcut'), 10, 28, 28, (16,'shortcut'), 16, 42, 42, 16, 42, 42, 22, 56, 56, 22, 56, 56, 22, 56, 56, 42, 102, 102, 42, 110, 110, 42, 106, 106, 42, 114, 114, (62,'shortcut'), 42, 156, 156, 42, 158, 158, 42, 166, 166, 84, 232, 232, 84, 256, 256, 84, 264, 264, (82,'shortcut'), 78, 268]", "\n", "#self.strides_and_short=[(1,True),(1,True),(1,False),(2,False),(1,False),(1,False),(2,False),(1,False),(1,False),(1,False),(1,True),(1,False),(1,False),(2,False),(1,False),(1,False),(1,True)]", "\n", "######################################## 100% ###########################################", "\n", "        ", "self", ".", "index", "=", "[", "32", ",", "14", ",", "14", ",", "(", "8", ",", "'shortcut'", ")", ",", "8", ",", "10", ",", "10", ",", "(", "16", ",", "'shortcut'", ")", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "20", ",", "22", ",", "22", ",", "20", ",", "22", ",", "22", ",", "20", ",", "22", ",", "22", ",", "38", ",", "32", ",", "32", ",", "38", ",", "40", ",", "40", ",", "38", ",", "38", ",", "38", ",", "38", ",", "46", ",", "46", ",", "(", "54", ",", "'shortcut'", ")", ",", "28", ",", "50", ",", "50", ",", "28", ",", "52", ",", "52", ",", "28", ",", "64", ",", "64", ",", "64", ",", "50", ",", "50", ",", "64", ",", "80", ",", "80", ",", "64", ",", "90", ",", "90", ",", "(", "22", ",", "'shortcut'", ")", ",", "18", ",", "14", "]", "\n", "self", ".", "strides_and_short", "=", "[", "(", "1", ",", "True", ")", ",", "(", "1", ",", "True", ")", ",", "(", "1", ",", "False", ")", ",", "(", "2", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "2", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "1", ",", "True", ")", ",", "(", "1", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "2", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "1", ",", "False", ")", ",", "(", "1", ",", "True", ")", "]", "\n", "#########################################################################################", "\n", "\n", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "index", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "index", "[", "0", "]", ")", "\n", "\n", "#self.layers = self._make_layers(in_planes=32)", "\n", "self", ".", "layers", "=", "self", ".", "_create_network", "(", "Block", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "2", "]", ",", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "1", "]", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "1", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2.MobileNetV2._create_network": [[135, 157], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "isinstance", "isinstance", "layers.append", "layers.append", "block", "block"], "methods", ["None"], ["", "def", "_create_network", "(", "self", ",", "block", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "input_res", "=", "32", "\n", "i", "=", "0", "\n", "stride_i", "=", "0", "\n", "while", "i", "<", "len", "(", "self", ".", "index", ")", "-", "4", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "index", "[", "i", "]", ",", "int", ")", "!=", "True", ":", "\n", "                ", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "index", "[", "i", "+", "3", "]", ",", "tuple", ")", "==", "True", ":", "\n", "                    ", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "self", ".", "index", "[", "i", "+", "4", "]", ",", "1", ",", "shortcut", "=", "True", ")", ")", "\n", "i", "+=", "4", "\n", "stride_i", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "input_res", "=", "input_res", "/", "2", "\n", "stride", "=", "self", ".", "strides_and_short", "[", "stride_i", "]", "[", "0", "]", "#if input_res>2 else 1", "\n", "#print(stride, stride_i, 'stride choice')", "\n", "#shortcut=self.strides_and_short[other_i][1]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "self", ".", "index", "[", "i", "+", "3", "]", ",", "stride", ")", ")", "\n", "i", "+=", "3", "\n", "stride_i", "+=", "1", "\n", "", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2.MobileNetV2.forward": [[157, 166], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2.test": [[177, 191], ["mobilenetv2.MobileNetV2", "ptflops.get_model_complexity_info", "print", "print", "sum", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "MobileNetV2.", "print", "net.size", "p.numel", "MobileNetV2.parameters"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "#Baseline: 2296922, 20%: 1613814, 40%:", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", "\n", "print", "(", "pytorch_total_params", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.BasicBlock.__init__": [[52, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "intermediate_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "intermediate_planes", "=", "intermediate_planes", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "\n", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''if in_planes!=intermediate_planes:\n            #print('shortcut_needed')\n            stride=2\n        else:\n            stride=stride'''", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "intermediate_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "intermediate_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "intermediate_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "out_planes", ":", "\n", "#print('shortcut_made')", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "#nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.BasicBlock.forward": [[97, 114], ["resnet_new.BasicBlock.conv1", "resnet_new.BasicBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_new.BasicBlock.bn2", "resnet_new.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_new.BasicBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "y", ")", "\n", "#print(x.shape,'post conv1 block')", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "#print(x.shape,'post conv2 block')", "\n", "#if self.shortcut!=nn.Sequential():", "\n", "#print('shortcut_made')", "\n", "#print(self.shortcut)", "\n", "#print(x.shape)", "\n", "#print(y.shape)", "\n", "#print(self.shortcut(y).shape)", "\n", "x", "+=", "self", ".", "shortcut", "(", "y", ")", "\n", "#print(x.shape,'post conv3 block')", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet.__init__": [[139, 187], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_new.ResNet._create_network", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet._create_network"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "image_channels", "=", "3", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "################################################################################## AdaS ##################################################################################", "\n", "self", ".", "shortcut_1_index", "=", "7", "#Number on excel corresponding to shortcut 1", "\n", "self", ".", "shortcut_2_index", "=", "16", "#Number on excel corresponding to shortcut 2", "\n", "self", ".", "shortcut_3_index", "=", "29", "#Number on excel corresponding to shortcut 2", "\n", "####################### O% ########################", "\n", "'''self.superblock1_indexes=[64, 64, 64, 64, 64, 64, 64]\n        self.superblock2_indexes=[128, 128, 128, 128, 128, 128, 128, 128]\n        self.superblock3_indexes=[256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256]\n        self.superblock4_indexes=[512, 512, 512, 512, 512, 512]'''", "\n", "####################### 20% #######################", "\n", "'''self.superblock1_indexes=[58, 58, 58, 58, 58, 60, 58]\n        self.superblock2_indexes=[110, 114, 114, 114, 118, 114, 118, 114]\n        self.superblock3_indexes=[218, 226, 226, 226, 228, 226, 228, 226, 228, 226, 228, 226]\n        self.superblock4_indexes=[432, 424, 424, 424, 418, 424]'''", "\n", "####################### 40% #######################", "\n", "'''self.superblock1_indexes=[54, 54, 54, 52, 54, 54, 54]\n        self.superblock2_indexes=[92, 98, 102, 98, 106, 98, 108, 98]\n        self.superblock3_indexes=[180, 194, 196, 194, 202, 194, 202, 194, 200, 194, 198, 194]\n        self.superblock4_indexes=[354, 336, 336, 336, 324, 336]'''", "\n", "####################### 60% #######################", "\n", "'''self.superblock1_indexes=[48, 48, 48, 46, 48, 50, 48]\n        self.superblock2_indexes=[74, 84, 88, 84, 96, 84, 98, 84]\n        self.superblock3_indexes=[142, 164, 168, 164, 174, 164, 174, 164, 172, 164, 170, 164]\n        self.superblock4_indexes=[274, 246, 250, 246, 230, 246]'''", "\n", "####################### 80% #######################", "\n", "'''self.superblock1_indexes=[44, 44, 44, 42, 44, 46, 44]\n        self.superblock2_indexes=[54, 70, 76, 70, 84, 70, 88, 70]\n        self.superblock3_indexes=[104, 132, 138, 132, 148, 132, 148, 132, 144, 132, 140, 132]\n        self.superblock4_indexes=[196, 158, 162, 158, 136, 158]'''", "\n", "####################### 100% #######################", "\n", "self", ".", "superblock1_indexes", "=", "[", "38", ",", "38", ",", "38", ",", "36", ",", "38", ",", "40", ",", "38", "]", "\n", "self", ".", "superblock2_indexes", "=", "[", "36", ",", "54", ",", "62", ",", "54", ",", "74", ",", "54", ",", "76", ",", "54", "]", "\n", "self", ".", "superblock3_indexes", "=", "[", "66", ",", "102", ",", "108", ",", "102", ",", "120", ",", "102", ",", "120", ",", "102", ",", "116", ",", "102", ",", "112", ",", "102", "]", "\n", "self", ".", "superblock4_indexes", "=", "[", "116", ",", "70", ",", "74", ",", "70", ",", "42", ",", "70", "]", "\n", "\n", "self", ".", "index", "=", "self", ".", "superblock1_indexes", "+", "self", ".", "superblock2_indexes", "+", "self", ".", "superblock3_indexes", "+", "self", ".", "superblock4_indexes", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "image_channels", ",", "self", ".", "index", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "index", "[", "0", "]", ")", "\n", "self", ".", "network", "=", "self", ".", "_create_network", "(", "block", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "1", "]", ",", "num_classes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet._create_network": [[188, 206], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "len", "int", "block"], "methods", ["None"], ["", "def", "_create_network", "(", "self", ",", "block", ")", ":", "\n", "        ", "output_size", "=", "56", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "0", "]", ",", "self", ".", "index", "[", "1", "]", ",", "self", ".", "index", "[", "2", "]", ",", "stride", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "self", ".", "index", ")", "-", "2", ",", "2", ")", ":", "\n", "#print(self.index [i],self.index [i+1],self.index [i+2],'for loop ',i)", "\n", "#if (self.index[i]!=self.index[i+2] or self.index[i]!=self.index[i+1]) and output_size>4:", "\n", "            ", "if", "(", "self", ".", "index", "[", "i", "]", "!=", "self", ".", "index", "[", "i", "+", "2", "]", ")", ":", "\n", "                ", "stride", "=", "2", "\n", "output_size", "=", "int", "(", "output_size", "/", "2", ")", "\n", "", "else", ":", "\n", "                ", "stride", "=", "1", "\n", "#    if i==len(self.index)-4:", "\n", "#    self.linear=nn.Linear(self.index[len(self.index)-2],self.num_classes)", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "stride", "=", "stride", ")", ")", "\n", "#    #print(i, 'i')", "\n", "#print(len(self.index),'len index')", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet.forward": [[222, 241], ["resnet_new.ResNet.conv1", "resnet_new.ResNet.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_new.ResNet.network", "resnet_new.ResNet.avgpool", "resnet_new.ResNet.view", "resnet_new.ResNet.linear", "resnet_new.ResNet.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "y", ")", ":", "\n", "#print(self.index )", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "y", ")", "\n", "#print(x.shape, 'conv1')", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "#print(x.shape, 'bn1')", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "#print(x.shape, 'relu')", "\n", "#x = self.maxpool(x)", "\n", "##print(x.shape, 'max pool')", "\n", "x", "=", "self", ".", "network", "(", "x", ")", "\n", "#print(x.shape, 'post bunch of blocks')", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "#print(x.shape, 'post avgpool')", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#print(x.shape, 'post reshaping')", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "#print(x.shape, 'post fc')", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet18": [[243, 245], ["resnet_new.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet34": [[247, 249], ["resnet_new.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "3", ",", "num_classes", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet50": [[251, 253], ["resnet_new.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet101": [[255, 257], ["resnet_new.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.ResNet152": [[259, 261], ["resnet_new.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_new.test": [[262, 274], ["resnet_new.ResNet34", "print", "ResNet34.", "print", "torchviz.make_dot", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.autograd.Variable", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "net.size", "ResNet34.state_dict", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet34", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict"], ["", "def", "test", "(", ")", ":", "\n", "#writer = SummaryWriter('runs/resnet34_1')", "\n", "    ", "net", "=", "ResNet34", "(", ")", "\n", "print", "(", "net", ")", "\n", "#print(net)", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "g", "=", "make_dot", "(", "y", ")", "\n", "#g.view()", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'temp_resnet.onnx'", ")", "\n", "dummy_input", "=", "Variable", "(", "torch", ".", "randn", "(", "4", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "net", ",", "dummy_input", ",", "\"model.onnx\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.SepConv.__init__": [[36, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.SepConv.forward": [[44, 46], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.CellA.__init__": [[49, 58], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.CellA.forward": [[59, 65], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.CellB.__init__": [[68, 87], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.CellB.forward": [[88, 102], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNet.__init__": [[105, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ",", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNet._make_layer": [[122, 128], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNet._downsample": [[129, 133], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNet.forward": [[134, 144], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNetA": [[146, 148], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNetB": [[150, 152], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.test": [[154, 159], ["pnasnet.PNASNetB", "torch.randn", "torch.randn", "torch.randn", "PNASNetB.", "print"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.BasicBlock.__init__": [[34, 49], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.BasicBlock.forward": [[51, 57], ["torch.relu", "torch.relu", "torch.relu", "own_network_orig.BasicBlock.bn2", "own_network_orig.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "own_network_orig.BasicBlock.bn1", "own_network_orig.BasicBlock.conv2", "own_network_orig.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.Bottleneck.__init__": [[62, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.Bottleneck.forward": [[81, 88], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "own_network_orig.Bottleneck.bn3", "own_network_orig.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "own_network_orig.Bottleneck.bn1", "own_network_orig.Bottleneck.bn2", "own_network_orig.Bottleneck.conv3", "own_network_orig.Bottleneck.conv1", "own_network_orig.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.Network.__init__": [[91, 124], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "own_network_orig.Network._make_layer", "own_network_orig.Network._make_layer", "own_network_orig.Network._make_layer", "own_network_orig.Network._make_layer", "own_network_orig.Network._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "new_output_sizes", "=", "None", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#######################  O% ########################", "\n", "#self.index=[64,128,256,512]", "\n", "####################### 20% #######################", "\n", "#self.index=[54,106,210,414]", "\n", "####################### 40% #######################", "\n", "#self.index=[44,84,164,316]", "\n", "####################### 60% #######################", "\n", "#self.index=[32,62,120,220]", "\n", "####################### 80% #######################", "\n", "#self.index=[32,40,74,122]", "\n", "####################### 100% #######################", "\n", "#self.index=[32,18,28,24]", "\n", "\n", "####################### OUR OWN #######################", "\n", "self", ".", "index", "=", "[", "64", ",", "64", ",", "64", ",", "64", ",", "64", "]", "\n", "\n", "if", "new_output_sizes", "!=", "None", ":", "\n", "            ", "self", ".", "index", "=", "new_output_sizes", "\n", "\n", "", "self", ".", "in_planes", "=", "self", ".", "index", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "in_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "4", "]", ",", "num_blocks", "[", "4", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "4", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.Network._make_layer": [[125, 132], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.Network.forward": [[133, 144], ["torch.relu", "torch.relu", "torch.relu", "own_network_orig.Network.layer1", "own_network_orig.Network.layer2", "own_network_orig.Network.layer3", "own_network_orig.Network.layer4", "own_network_orig.Network.layer5", "own_network_orig.Network.avgpool", "own_network_orig.Network.view", "own_network_orig.Network.linear", "own_network_orig.Network.bn1", "own_network_orig.Network.size", "own_network_orig.Network.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.AdaptiveNet": [[145, 150], ["own_network_orig.Network", "own_network_orig.Network"], "function", ["None"], ["", "", "def", "AdaptiveNet", "(", "num_classes", ":", "int", "=", "10", ",", "new_output_sizes", "=", "None", ")", ":", "\n", "    ", "if", "new_output_sizes", "==", "None", ":", "\n", "        ", "return", "Network", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "return", "Network", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "new_output_sizes", "=", "new_output_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.test": [[152, 162], ["own_network_orig.AdaptiveNet", "torch.randn", "torch.randn", "torch.randn", "AdaptiveNet.", "AdaptiveNet.state_dict", "print", "param_tensor.find", "[].size", "AdaptiveNet.state_dict"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network_orig.AdaptiveNet", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict", "home.repos.pwc.inspect_result.mahdihosseini_conet.optim.lr_scheduler.ReduceLROnPlateau.state_dict"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "AdaptiveNet", "(", ")", "\n", "##print(net)", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "#print(y.shape)", "\n", "for", "param_tensor", "in", "net", ".", "state_dict", "(", ")", ":", "\n", "        ", "if", "param_tensor", ".", "find", "(", "'conv'", ")", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "print", "(", "param_tensor", ",", "\"\\t\"", ",", "net", ".", "state_dict", "(", ")", "[", "param_tensor", "]", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.SqueezeNet.fire.__init__": [[10, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "SqueezeNet.fire.modules", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "squeeze_planes", ",", "expand_planes", ")", ":", "\n", "        ", "super", "(", "fire", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "squeeze_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "squeeze_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "squeeze_planes", ",", "expand_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "squeeze_planes", ",", "expand_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# using MSR initilization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.SqueezeNet.fire.forward": [[27, 38], ["SqueezeNet.fire.conv1", "SqueezeNet.fire.bn1", "SqueezeNet.fire.relu1", "SqueezeNet.fire.conv2", "SqueezeNet.fire.bn2", "SqueezeNet.fire.conv3", "SqueezeNet.fire.bn3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SqueezeNet.fire.relu2"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "out1", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out1", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "conv3", "(", "x", ")", "\n", "out2", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.SqueezeNet.SqueezeNet.__init__": [[41, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "SqueezeNet.fire", "SqueezeNet.fire", "SqueezeNet.fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "SqueezeNet.fire", "SqueezeNet.fire", "SqueezeNet.fire", "SqueezeNet.fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "SqueezeNet.fire", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "SqueezeNet.SqueezeNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 16", "\n", "self", ".", "fire2", "=", "fire", "(", "96", ",", "16", ",", "64", ")", "\n", "self", ".", "fire3", "=", "fire", "(", "128", ",", "16", ",", "64", ")", "\n", "self", ".", "fire4", "=", "fire", "(", "128", ",", "32", ",", "128", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 8", "\n", "self", ".", "fire5", "=", "fire", "(", "256", ",", "32", ",", "128", ")", "\n", "self", ".", "fire6", "=", "fire", "(", "256", ",", "48", ",", "192", ")", "\n", "self", ".", "fire7", "=", "fire", "(", "384", ",", "48", ",", "192", ")", "\n", "self", ".", "fire8", "=", "fire", "(", "384", ",", "64", ",", "256", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 4", "\n", "self", ".", "fire9", "=", "fire", "(", "512", ",", "64", ",", "256", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "#self.classifier=nn.Linear(,num_classes)", "\n", "self", ".", "softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.SqueezeNet.SqueezeNet.forward": [[71, 91], ["SqueezeNet.SqueezeNet.conv1", "SqueezeNet.SqueezeNet.bn1", "SqueezeNet.SqueezeNet.relu", "SqueezeNet.SqueezeNet.maxpool1", "SqueezeNet.SqueezeNet.fire2", "SqueezeNet.SqueezeNet.fire3", "SqueezeNet.SqueezeNet.fire4", "SqueezeNet.SqueezeNet.maxpool2", "SqueezeNet.SqueezeNet.fire5", "SqueezeNet.SqueezeNet.fire6", "SqueezeNet.SqueezeNet.fire7", "SqueezeNet.SqueezeNet.fire8", "SqueezeNet.SqueezeNet.maxpool3", "SqueezeNet.SqueezeNet.fire9", "SqueezeNet.SqueezeNet.conv2", "SqueezeNet.SqueezeNet.avg_pool", "SqueezeNet.SqueezeNet.classifier", "SqueezeNet.SqueezeNet.softmax"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "fire2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire4", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire5", "(", "x", ")", "\n", "x", "=", "self", ".", "fire6", "(", "x", ")", "\n", "x", "=", "self", ".", "fire7", "(", "x", ")", "\n", "x", "=", "self", ".", "fire8", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire9", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "self", ".", "softmax", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.SqueezeNet.fire_layer": [[92, 95], ["SqueezeNet.fire"], "function", ["None"], ["", "", "def", "fire_layer", "(", "inp", ",", "s", ",", "e", ")", ":", "\n", "    ", "f", "=", "fire", "(", "inp", ",", "s", ",", "e", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.SqueezeNet.squeezenet": [[96, 102], ["SqueezeNet.SqueezeNet", "torch.autograd.Variable", "SqueezeNet.forward", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "net.forward.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.forward"], ["", "def", "squeezenet", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "SqueezeNet", "(", ")", "\n", "inp", "=", "Variable", "(", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "out", "=", "net", ".", "forward", "(", "inp", ")", "\n", "print", "(", "out", ".", "size", "(", ")", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.lenet.LeNet.__init__": [[30, 37], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.lenet.LeNet.forward": [[38, 48], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.BasicBlock.__init__": [[41, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "intermediate_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "intermediate_planes", "=", "intermediate_planes", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "\n", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''if in_planes!=intermediate_planes:\n            print('shortcut_needed')\n            stride=2\n        else:\n            stride=stride'''", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "intermediate_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "intermediate_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "intermediate_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "out_planes", ":", "\n", "            ", "print", "(", "'shortcut_made'", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.BasicBlock.forward": [[87, 122], ["resnet-arsh.BasicBlock.conv1", "print", "resnet-arsh.BasicBlock.bn1", "resnet-arsh.BasicBlock.relu", "resnet-arsh.BasicBlock.bn2", "print", "print", "resnet-arsh.BasicBlock.shortcut", "print", "resnet-arsh.BasicBlock.relu", "resnet-arsh.BasicBlock.conv2", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "'''if x.shape[2]<=4:\n            self.conv1=nn.Conv2d(\n                    self.in_planes,\n                    self.intermediate_planes,\n                    kernel_size=3,\n                    stride=1,\n                    padding=1,\n                    bias=False\n            )\n            self.shortcut=nn.Sequential(\n                nn.Conv2d(\n                        self.in_planes,\n                        self.out_planes,\n                        kernel_size=3,\n                        stride=1,\n                        padding=1,\n                        bias=False\n                ),\n                nn.BatchNorm2d(self.out_planes),\n                nn.ReLU()\n            )'''", "\n", "x", "=", "self", ".", "conv1", "(", "y", ")", "\n", "print", "(", "x", ".", "shape", ",", "'post conv1 block'", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "print", "(", "x", ".", "shape", ",", "'post conv2 block'", ")", "\n", "if", "self", ".", "shortcut", "!=", "nn", ".", "Sequential", "(", ")", ":", "\n", "            ", "print", "(", "'shortcut_made'", ")", "\n", "", "print", "(", "self", ".", "shortcut", ")", "\n", "x", "+=", "self", ".", "shortcut", "(", "y", ")", "\n", "print", "(", "x", ".", "shape", ",", "'post conv3 block'", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet.__init__": [[126, 154], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet-arsh.ResNet._create_network", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet._create_network"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "image_channels", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#Proposed", "\n", "self", ".", "index", "=", "[", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "#Original", "\n", "self", ".", "temp", "=", "[", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "#self.index  = [64, 64, 96, 96, 108, 108, 128, 128, 140, 140, 150, 150, 128, 128, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 512, 512, 512, 512, 512, 512]", "\n", "#self.index = [32, 32, 34, 34, 34, 34, 34, 64, 66, 56, 66, 64, 66, 62, 64, 62, 122, 128, 110, 126, 120, 126, 118, 124, 118, 122, 118, 124, 114, 234, 232, 220, 226, 210, 216, 210]", "\n", "#self.index = [32, 22, 24, 22, 22, 22, 24, 42, 46, 32, 44, 42, 46, 42, 44, 40, 78, 84, 60, 82, 76, 84, 72, 80, 72, 78, 72, 78, 66, 142, 140, 122, 132, 110, 118, 108]", "\n", "\n", "print", "(", "self", ".", "index", ")", "\n", "#self.index_temp=self.index", "\n", "#self.index_temp=[64, 64, 64, 64, 64, 64, 128, 128, 128, 128, 128, 128, 128, 128, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 512, 512, 512, 512, 512, 512]", "\n", "#self.index =self.index_temp", "\n", "'''if len(self.index)%2==0:\n            print(self.index)\n            length=len(self.index)-1\n            self.index+=[self.index[length]]'''", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "#self.in_planes = 64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "image_channels", ",", "self", ".", "index", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "index", "[", "0", "]", ")", "\n", "#self.block1=self._make_block(block,self.index [0],self.index [1],self.index [2],stride=1)", "\n", "self", ".", "network", "=", "self", ".", "_create_network", "(", "block", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "1", "]", ",", "num_classes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet._create_network": [[155, 172], ["layers.append", "range", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "print", "layers.append", "len", "len", "int", "block"], "methods", ["None"], ["", "def", "_create_network", "(", "self", ",", "block", ")", ":", "\n", "        ", "output_size", "=", "56", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "0", "]", ",", "self", ".", "index", "[", "1", "]", ",", "self", ".", "index", "[", "2", "]", ",", "stride", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "self", ".", "index", ")", "-", "2", ",", "2", ")", ":", "\n", "            ", "print", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "'for loop '", ",", "i", ")", "\n", "if", "(", "self", ".", "index", "[", "i", "]", "!=", "self", ".", "index", "[", "i", "+", "2", "]", "or", "self", ".", "index", "[", "i", "]", "!=", "self", ".", "index", "[", "i", "+", "1", "]", ")", "and", "output_size", ">", "4", ":", "\n", "                ", "stride", "=", "2", "\n", "output_size", "=", "int", "(", "output_size", "/", "2", ")", "\n", "", "else", ":", "\n", "                ", "stride", "=", "1", "\n", "#    if i==len(self.index)-4:", "\n", "#    self.linear=nn.Linear(self.index[len(self.index)-2],self.num_classes)", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "stride", "=", "stride", ")", ")", "\n", "#    print(i, 'i')", "\n", "", "print", "(", "len", "(", "self", ".", "index", ")", ",", "'len index'", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet.forward": [[188, 207], ["print", "resnet-arsh.ResNet.conv1", "print", "resnet-arsh.ResNet.bn1", "print", "resnet-arsh.ResNet.relu", "print", "resnet-arsh.ResNet.maxpool", "print", "resnet-arsh.ResNet.network", "print", "resnet-arsh.ResNet.avgpool", "print", "resnet-arsh.ResNet.view", "print", "resnet-arsh.ResNet.linear", "print", "resnet-arsh.ResNet.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "print", "(", "self", ".", "index", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ",", "'conv1'", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ",", "'bn1'", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ",", "'relu'", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ",", "'max pool'", ")", "\n", "x", "=", "self", ".", "network", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ",", "'post bunch of blocks'", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ",", "'post avgpool'", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "print", "(", "x", ".", "shape", ",", "'post reshaping'", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ",", "'post fc'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet18": [[209, 211], ["resnet-arsh.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet34": [[213, 215], ["resnet-arsh.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "3", ",", "num_classes", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet50": [[217, 219], ["resnet-arsh.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet101": [[221, 223], ["resnet-arsh.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.ResNet152": [[225, 227], ["resnet-arsh.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet-arsh.test": [[229, 234], ["resnet-arsh.ResNet34", "print", "ResNet34.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet34"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet34", "(", ")", "\n", "print", "(", "net", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.Bottleneck.__init__": [[32, 53], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "\n", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.Bottleneck.forward": [[55, 65], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "\n", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.DPN.__init__": [[68, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "\n", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.DPN._make_layer": [[88, 96], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "\n", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.DPN.forward": [[97, 107], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.DPN26": [[109, 117], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.DPN92": [[119, 127], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.test": [[129, 138], ["dpn.DPN92", "ptflops.get_model_complexity_info", "print", "print", "torch.randn", "torch.randn", "torch.randn", "DPN92.", "print"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleBlock.__init__": [[34, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleBlock.forward": [[38, 43], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.Bottleneck.__init__": [[46, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "\n", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.Bottleneck.forward": [[67, 76], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", "\n", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleNet.__init__": [[79, 92], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleNet._make_layer": [[93, 102], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "\n", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleNet.forward": [[103, 112], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleNetG2": [[114, 121], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleNetG3": [[123, 130], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.test": [[132, 137], ["shufflenet.ShuffleNetG2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetG2.", "print"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet_new.PreActBlock.__init__": [[35, 53], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet_new.PreActBlock.forward": [[54, 83], ["print", "torch.relu", "torch.relu", "torch.relu", "hasattr", "senet_new.PreActBlock.conv1", "print", "senet_new.PreActBlock.conv2", "print", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "print", "torch.relu", "torch.relu", "torch.relu", "print", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "print", "print", "print", "print", "senet_new.PreActBlock.bn1", "senet_new.PreActBlock.shortcut", "print", "print", "print", "torch.relu", "torch.relu", "torch.relu", "senet_new.PreActBlock.size", "senet_new.PreActBlock.fc1", "senet_new.PreActBlock.fc2", "senet_new.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "print", "(", "'~~~~~~~~~~~NEW BLOCK~~~~~~~~~~~~~~'", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", ":", "\n", "            ", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "print", "(", "shortcut", ".", "shape", ",", "'habsjfn'", ")", "\n", "print", "(", "'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "print", "(", "shortcut", ".", "shape", ",", "'SHORTCUT REG SHAPE'", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST CONV1'", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST CONV2'", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "print", "(", "w", ".", "shape", ",", "'W POST AVG'", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "print", "(", "w", ".", "shape", ",", "'W POST FC1'", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "print", "(", "w", ".", "shape", ",", "'W POST FC2'", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "print", "(", "out", ".", "shape", ",", "'POST OUT*W MULT'", ")", "\n", "out", "+=", "shortcut", "\n", "print", "(", "out", ".", "shape", ",", "'POST SHORTCUT'", ")", "\n", "print", "(", "'~~~~~~~~~~~END BLOCK~~~~~~~~~~~~~~'", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet_new.SENet.__init__": [[86, 98], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet_new.SENet._make_layer", "senet_new.SENet._make_layer", "senet_new.SENet._make_layer", "senet_new.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet_new.SENet._make_layer": [[99, 106], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet_new.SENet.forward": [[107, 119], ["torch.relu", "torch.relu", "torch.relu", "print", "senet_new.SENet.layer1", "senet_new.SENet.layer2", "senet_new.SENet.layer3", "senet_new.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "print", "senet_new.SENet.view", "senet_new.SENet.linear", "senet_new.SENet.bn1", "senet_new.SENet.size", "senet_new.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST TRUE CONV1'", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "print", "(", "out", ".", "shape", ",", "'POST FINAL AVG POOL'", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet_new.SENet18": [[121, 123], ["senet_new.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet_new.test": [[125, 137], ["senet_new.SENet18", "torch.randn", "torch.randn", "torch.randn", "ptflops.get_model_complexity_info", "print", "print", "SENet18.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "\n", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.ShuffleBlock.__init__": [[34, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", "=", "2", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.ShuffleBlock.forward": [[38, 43], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.SplitBlock.__init__": [[46, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "SplitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.SplitBlock.forward": [[50, 53], ["int", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "int", "(", "x", ".", "size", "(", "1", ")", "*", "self", ".", "ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.BasicBlock.__init__": [[56, 70], ["torch.Module.__init__", "shufflenetv2.SplitBlock", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "split_ratio", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "SplitBlock", "(", "split_ratio", ")", "\n", "in_channels", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.BasicBlock.forward": [[71, 79], ["shufflenetv2.BasicBlock.split", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.BasicBlock.shuffle", "shufflenetv2.BasicBlock.bn1", "shufflenetv2.BasicBlock.conv2", "shufflenetv2.BasicBlock.bn3", "shufflenetv2.BasicBlock.conv1", "shufflenetv2.BasicBlock.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "self", ".", "split", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x2", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "out", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.DownBlock.__init__": [[82, 104], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "2", "\n", "# left", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "# right", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "mid_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.DownBlock.forward": [[105, 117], ["shufflenetv2.DownBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.DownBlock.bn4", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.DownBlock.shuffle", "shufflenetv2.DownBlock.conv1", "shufflenetv2.DownBlock.bn2", "shufflenetv2.DownBlock.bn3", "shufflenetv2.DownBlock.conv4", "shufflenetv2.DownBlock.bn5", "shufflenetv2.DownBlock.conv2", "shufflenetv2.DownBlock.conv3", "shufflenetv2.DownBlock.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# left", "\n", "        ", "out1", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "\n", "# right", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "out2", "=", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out2", ")", ")", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out2", ")", ")", ")", "\n", "# concat", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.ShuffleNetV2.__init__": [[120, 136], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "net_size", ",", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "configs", "[", "net_size", "]", "[", "'out_channels'", "]", "\n", "num_blocks", "=", "configs", "[", "net_size", "]", "[", "'num_blocks'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_channels", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "[", "3", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.ShuffleNetV2._make_layer": [[137, 143], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.DownBlock", "layers.append", "shufflenetv2.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "DownBlock", "(", "self", ".", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "out_channels", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.ShuffleNetV2.forward": [[144, 155], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv2.ShuffleNetV2.layer1", "shufflenetv2.ShuffleNetV2.layer2", "shufflenetv2.ShuffleNetV2.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.linear", "shufflenetv2.ShuffleNetV2.bn1", "shufflenetv2.ShuffleNetV2.bn2", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = F.max_pool2d(out, 3, stride=2, padding=1)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenetv2.test": [[178, 183], ["shufflenetv2.ShuffleNetV2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetV2.", "print"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetV2", "(", "net_size", "=", "0.5", ")", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.BasicBlock.__init__": [[53, 95], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "intermediate_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "intermediate_planes", "=", "intermediate_planes", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "\n", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''if in_planes!=intermediate_planes:\n            #print('shortcut_needed')\n            stride=2\n        else:\n            stride=stride'''", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "intermediate_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "intermediate_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "intermediate_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "out_planes", ":", "\n", "#print('shortcut_made')", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "#nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.BasicBlock.forward": [[98, 115], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "y", ")", "\n", "#print(x.shape,'post conv1 block')", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "#print(x.shape,'post conv2 block')", "\n", "#if self.shortcut!=nn.Sequential():", "\n", "#print('shortcut_made')", "\n", "#print(self.shortcut)", "\n", "#print(x.shape)", "\n", "#print(y.shape)", "\n", "#print(self.shortcut(y).shape)", "\n", "x", "+=", "self", ".", "shortcut", "(", "y", ")", "\n", "#print(x.shape,'post conv3 block')", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet.__init__": [[118, 172], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._create_network", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet._create_network"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "image_channels", "=", "3", ",", "index", "=", "None", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "################################################################################## AdaS ##################################################################################", "\n", "self", ".", "shortcut_1_index", "=", "7", "#Number on excel corresponding to shortcut 1", "\n", "self", ".", "shortcut_2_index", "=", "16", "#Number on excel corresponding to shortcut 2", "\n", "self", ".", "shortcut_3_index", "=", "29", "#Number on excel corresponding to shortcut 2", "\n", "####################### O% ########################", "\n", "self", ".", "superblock1_indexes", "=", "[", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "64", ",", "64", "]", "\n", "self", ".", "superblock2_indexes", "=", "[", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", "]", "\n", "self", ".", "superblock3_indexes", "=", "[", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", ",", "256", "]", "\n", "self", ".", "superblock4_indexes", "=", "[", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "####################### 20% #######################", "\n", "'''self.superblock1_indexes=[58, 58, 58, 58, 58, 60, 58]\n        self.superblock2_indexes=[110, 114, 114, 114, 118, 114, 118, 114]\n        self.superblock3_indexes=[218, 226, 226, 226, 228, 226, 228, 226, 228, 226, 228, 226]\n        self.superblock4_indexes=[432, 424, 424, 424, 418, 424]'''", "\n", "####################### 40% #######################", "\n", "'''self.superblock1_indexes=[54, 54, 54, 52, 54, 54, 54]\n        self.superblock2_indexes=[92, 98, 102, 98, 106, 98, 108, 98]\n        self.superblock3_indexes=[180, 194, 196, 194, 202, 194, 202, 194, 200, 194, 198, 194]\n        self.superblock4_indexes=[354, 336, 336, 336, 324, 336]'''", "\n", "####################### 60% #######################", "\n", "'''self.superblock1_indexes=[48, 48, 48, 46, 48, 50, 48]\n        self.superblock2_indexes=[74, 84, 88, 84, 96, 84, 98, 84]\n        self.superblock3_indexes=[142, 164, 168, 164, 174, 164, 174, 164, 172, 164, 170, 164]\n        self.superblock4_indexes=[274, 246, 250, 246, 230, 246]'''", "\n", "####################### 80% #######################", "\n", "'''self.superblock1_indexes=[44, 44, 44, 42, 44, 46, 44]\n        self.superblock2_indexes=[54, 70, 76, 70, 84, 70, 88, 70]\n        self.superblock3_indexes=[104, 132, 138, 132, 148, 132, 148, 132, 144, 132, 140, 132]\n        self.superblock4_indexes=[196, 158, 162, 158, 136, 158]'''", "\n", "####################### 100% #######################", "\n", "'''self.superblock1_indexes=[38, 38, 38, 36, 38, 40, 38]\n        self.superblock2_indexes=[36, 54, 62, 54, 74, 54, 76, 54]\n        self.superblock3_indexes=[66, 102, 108, 102, 120, 102, 120, 102, 116, 102, 112, 102]\n        self.superblock4_indexes=[116, 70, 74, 70, 42, 70]'''", "\n", "\n", "if", "index", "!=", "None", ":", "\n", "            ", "self", ".", "superblock1_indexes", "=", "index", "[", "0", "]", "\n", "self", ".", "superblock2_indexes", "=", "index", "[", "1", "]", "\n", "self", ".", "superblock3_indexes", "=", "index", "[", "2", "]", "\n", "self", ".", "superblock4_indexes", "=", "index", "[", "3", "]", "\n", "\n", "", "self", ".", "index", "=", "self", ".", "superblock1_indexes", "+", "self", ".", "superblock2_indexes", "+", "self", ".", "superblock3_indexes", "+", "self", ".", "superblock4_indexes", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "image_channels", ",", "self", ".", "index", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "index", "[", "0", "]", ")", "\n", "self", ".", "network", "=", "self", ".", "_create_network", "(", "block", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "len", "(", "self", ".", "index", ")", "-", "1", "]", ",", "num_classes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet._create_network": [[173, 191], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "len", "int", "block"], "methods", ["None"], ["", "def", "_create_network", "(", "self", ",", "block", ")", ":", "\n", "        ", "output_size", "=", "56", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "0", "]", ",", "self", ".", "index", "[", "1", "]", ",", "self", ".", "index", "[", "2", "]", ",", "stride", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "self", ".", "index", ")", "-", "2", ",", "2", ")", ":", "\n", "#print(self.index [i],self.index [i+1],self.index [i+2],'for loop ',i)", "\n", "#if (self.index[i]!=self.index[i+2] or self.index[i]!=self.index[i+1]) and output_size>4:", "\n", "            ", "if", "(", "self", ".", "index", "[", "i", "]", "!=", "self", ".", "index", "[", "i", "+", "2", "]", ")", ":", "\n", "                ", "stride", "=", "2", "\n", "output_size", "=", "int", "(", "output_size", "/", "2", ")", "\n", "", "else", ":", "\n", "                ", "stride", "=", "1", "\n", "#    if i==len(self.index)-4:", "\n", "#    self.linear=nn.Linear(self.index[len(self.index)-2],self.num_classes)", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "index", "[", "i", "]", ",", "self", ".", "index", "[", "i", "+", "1", "]", ",", "self", ".", "index", "[", "i", "+", "2", "]", ",", "stride", "=", "stride", ")", ")", "\n", "#    #print(i, 'i')", "\n", "#print(len(self.index),'len index')", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet.forward": [[192, 211], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.network", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ")", ":", "\n", "#print(self.index )", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "y", ")", "\n", "#print(x.shape, 'conv1')", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "#print(x.shape, 'bn1')", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#print(x.shape, 'relu')", "\n", "#x = self.maxpool(x)", "\n", "##print(x.shape, 'max pool')", "\n", "x", "=", "self", ".", "network", "(", "x", ")", "\n", "#print(x.shape, 'post bunch of blocks')", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "#print(x.shape, 'post avgpool')", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#print(x.shape, 'post reshaping')", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "#print(x.shape, 'post fc')", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet18": [[213, 215], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet34": [[217, 219], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "3", ",", "num_classes", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet50": [[221, 223], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet101": [[225, 227], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.ResNet152": [[229, 231], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet.test": [[232, 253], ["resnet.ResNet34", "ResNet34.", "print", "ptflops.get_model_complexity_info", "print", "print", "torchviz.make_dot", "torchviz.make_dot.view", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet34"], ["", "def", "test", "(", ")", ":", "\n", "#writer = SummaryWriter('runs/resnet34_1')", "\n", "    ", "net", "=", "ResNet34", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "\n", "#print(net)", "\n", "g", "=", "make_dot", "(", "y", ")", "\n", "g", ".", "view", "(", ")", "\n", "'''\n\n    #g.view()\n    torch.save(net.state_dict(),'temp_resnet.onnx')\n    dummy_input = Variable(torch.randn(4, 3, 32, 32))\n    torch.onnx.export(net, dummy_input, \"model.onnx\")\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.BasicBlock.__init__": [[35, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "# Use nn.Conv2d instead of nn.Linear", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.BasicBlock.forward": [[57, 71], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.PreActBlock.__init__": [[74, 92], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.PreActBlock.forward": [[93, 108], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.SENet.__init__": [[111, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "#######################  O% ########################", "\n", "#self.index=[64,128,256,512]", "\n", "####################### 20% #######################", "\n", "#self.index=[58,110,218,422]", "\n", "####################### 40% #######################", "\n", "#self.index=[50,94,180,332]", "\n", "####################### 60% #######################", "\n", "#self.index=[44,76,142,242]", "\n", "####################### 80% #######################", "\n", "self", ".", "index", "=", "[", "38", ",", "60", ",", "104", ",", "152", "]", "\n", "####################### 100% #######################", "\n", "#self.index=[32,42,66,62]", "\n", "\n", "self", ".", "in_planes", "=", "self", ".", "index", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "index", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "index", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "index", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "index", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.SENet._make_layer": [[138, 145], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.SENet.forward": [[146, 156], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.SENet18": [[158, 160], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.test": [[162, 175], ["senet.SENet18", "torch.randn", "torch.randn", "torch.randn", "ptflops.get_model_complexity_info", "print", "print", "SENet18.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "#SENET: Baseline: 11.26M, 0.56, 20%: 7.83M, 0.42, 40%: 5.04M, 0.29, 60%: 2.87M, 0.19, 80%: 1.32M, 0.12 ,100%: 393k, 0.07", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "\n", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.Block.__init__": [[14, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.Block.forward": [[33, 39], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2-old.Block.bn3", "mobilenetv2-old.Block.bn1", "mobilenetv2-old.Block.bn2", "mobilenetv2-old.Block.conv3", "mobilenetv2-old.Block.conv1", "mobilenetv2-old.Block.conv2", "mobilenetv2-old.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.MobileNetV2.__init__": [[50, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2-old.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.MobileNetV2._make_layers": [[60, 68], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2-old.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.MobileNetV2.forward": [[69, 78], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2-old.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2-old.MobileNetV2.view", "mobilenetv2-old.MobileNetV2.linear", "mobilenetv2-old.MobileNetV2.bn1", "mobilenetv2-old.MobileNetV2.bn2", "mobilenetv2-old.MobileNetV2.size", "mobilenetv2-old.MobileNetV2.conv1", "mobilenetv2-old.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.mobilenetv2-old.test": [[80, 88], ["mobilenetv2-old.MobileNetV2", "print", "torch.randn", "torch.randn", "torch.randn", "MobileNetV2.", "torchviz.make_dot", "torchviz.make_dot.view", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "g", "=", "make_dot", "(", "y", ")", "\n", "g", ".", "view", "(", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.Bottleneck.__init__": [[33, 41], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.Bottleneck.forward": [[42, 47], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.Transition.__init__": [[50, 54], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.Transition.forward": [[55, 59], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet.__init__": [[62, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet._make_dense_layers": [[94, 100], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet.forward": [[101, 111], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet121": [[113, 115], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet169": [[117, 119], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet201": [[121, 123], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.DenseNet161": [[125, 127], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.densenet_cifar": [[129, 131], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.test": [[133, 138], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.densenet_cifar"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.BasicBlock.__init__": [[43, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "global", "convCount", "\n", "global", "convList", "\n", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "convList", "[", "convCount", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "convList", "[", "convCount", "]", ")", "\n", "print", "(", "convCount", ",", "convList", "[", "convCount", "]", ")", "\n", "convCount", "+=", "1", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "convList", "[", "convCount", "]", ",", "convList", "[", "convCount", "]", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "convList", "[", "convCount", "]", ")", "\n", "print", "(", "convCount", ",", "convList", "[", "convCount", "]", ")", "\n", "convCount", "+=", "1", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "convList", "[", "convCount", "]", ":", "\n", "#print('case',in_planes)", "\n", "#print('case',convList[convCount])", "\n", "            ", "print", "(", "'shortcut'", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "convList", "[", "convCount", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "convList", "[", "convCount", "]", ")", "\n", ")", "\n", "print", "(", "convCount", ",", "convList", "[", "convCount", "]", ")", "\n", "convCount", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.BasicBlock.forward": [[73, 79], ["torch.relu", "torch.relu", "torch.relu", "resnet_old.BasicBlock.bn2", "resnet_old.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_old.BasicBlock.bn1", "resnet_old.BasicBlock.conv2", "resnet_old.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.Bottleneck.__init__": [[84, 101], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.Bottleneck.forward": [[103, 110], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_old.Bottleneck.bn3", "resnet_old.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_old.Bottleneck.bn1", "resnet_old.Bottleneck.bn2", "resnet_old.Bottleneck.conv3", "resnet_old.Bottleneck.conv1", "resnet_old.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet.__init__": [[113, 135], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "print", "resnet_old.ResNet._make_layer", "resnet_old.ResNet._make_layer", "resnet_old.ResNet._make_layer", "resnet_old.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "global", "convCount", "\n", "global", "convList", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "index_info_conv", "=", "[", "]", "\n", "\n", "self", ".", "in_planes", "=", "convList", "[", "convCount", "]", "\n", "print", "(", "'self.in_planes:'", ",", "self", ".", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "convList", "[", "convCount", "]", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "convList", "[", "convCount", "]", ")", "\n", "\n", "print", "(", "convCount", ",", "convList", "[", "convCount", "]", ")", "\n", "convCount", "+=", "1", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "convList", "[", "convCount", "]", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "convList", "[", "convCount", "]", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "convList", "[", "convCount", "]", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "convList", "[", "convCount", "]", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "412", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet._make_layer": [[136, 145], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "global", "convList", "\n", "global", "convCount", "\n", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "convList", "[", "convCount", "]", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet.forward": [[146, 157], ["torch.relu", "torch.relu", "torch.relu", "resnet_old.ResNet.layer1", "resnet_old.ResNet.layer2", "resnet_old.ResNet.layer3", "resnet_old.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_old.ResNet.view", "resnet_old.ResNet.linear", "resnet_old.ResNet.bn1", "resnet_old.ResNet.size", "resnet_old.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "#out.shape=(52,whatever,whatever)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet18": [[159, 161], ["resnet_old.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet34": [[163, 165], ["resnet_old.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet50": [[167, 169], ["resnet_old.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet101": [[171, 173], ["resnet_old.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet152": [[175, 177], ["resnet_old.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.test": [[179, 183], ["resnet_old.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.Block.__init__": [[37, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.Block.forward": [[58, 65], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt.__init__": [[68, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt._make_layer": [[82, 92], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "\n", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt.forward": [[93, 103], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt29_2x64d": [[105, 107], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt29_4x64d": [[109, 111], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt29_8x64d": [[113, 115], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt29_32x4d": [[117, 119], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.test_resnext": [[121, 130], ["resnext.ResNeXt29_2x64d", "ptflops.get_model_complexity_info", "print", "print", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "net", ",", "(", "3", ",", "32", ",", "32", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "True", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "print", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.__init__.get_net": [[44, 62], ["models.vgg.VGG", "models.resnet.ResNet34", "models.preact_resnet.PreActResNet18", "models.googlenet.GoogLeNet", "models.densenet.densenet_cifar", "models.resnext.ResNeXt29_2x64d", "models.mobilenet.MobileNet", "models.mobilenetv2.MobileNetV2", "models.dpn.DPN92", "models.shufflenet.ShuffleNetG2", "models.senet.SENet18", "models.shufflenetv2.ShuffleNetV2", "models.SqueezeNet.SqueezeNet", "models.efficientnet.EfficientNetB0", "models.own_network.DASNet34", "models.own_network.DASNet50"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnet_old.ResNet34", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet18", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.densenet.densenet_cifar", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.resnext.ResNeXt29_2x64d", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.dpn.DPN92", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.shufflenet.ShuffleNetG2", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.senet.SENet18", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.efficientnet.EfficientNetB0", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet34", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.own_network.DASNet50"], ["min_lr", "=", "config", "[", "'min_lr'", "]", "\n", "max_epochs", "=", "config", "[", "'max_epoch'", "]", "\n", "adas_p", "=", "config", "[", "'p'", "]", "\n", "beta", "=", "config", "[", "'beta'", "]", "\n", "zeta", "=", "config", "[", "'zeta'", "]", "\n", "weight_decay", "=", "float", "(", "config", "[", "'weight_decay'", "]", ")", "\n", "\n", "step_size", "=", "config", "[", "'step_size'", "]", "\n", "gamma", "=", "config", "[", "'gamma'", "]", "\n", "\n", "print", "(", "'~~~ BETA USED IN get_optimizer_scheduler: {} ~~~'", ".", "format", "(", "beta", ")", ")", "\n", "print", "(", "'~~~ lr_scheduler USED IN get_optimizer_scheduler: {} ~~~'", ".", "format", "(", "lr_scheduler", ")", ")", "\n", "print", "(", "'~~~ Weight Decay: {} ~~~'", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "if", "lr_scheduler", "==", "'StepLR'", ":", "\n", "        ", "print", "(", "'~~~ LR Step Size: {} ~~~'", ".", "format", "(", "step_size", ")", ")", "\n", "print", "(", "'~~~ LR Gamma: {} ~~~'", ".", "format", "(", "gamma", ")", ")", "\n", "", "optimizer", "=", "None", "\n", "scheduler", "=", "None", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.googlenet.Inception.__init__": [[31, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.googlenet.Inception.forward": [[71, 77], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.googlenet.GoogLeNet.__init__": [[80, 104], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.googlenet.GoogLeNet.forward": [[105, 122], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.googlenet.test": [[124, 129], ["googlenet.GoogLeNet", "torch.randn", "torch.randn", "torch.randn", "GoogLeNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "GoogLeNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActBlock.__init__": [[39, 52], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActBlock.forward": [[54, 61], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActBottleneck.__init__": [[67, 82], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActBottleneck.forward": [[84, 92], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__": [[95, 106], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet._make_layer": [[107, 114], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet.forward": [[115, 125], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet18": [[127, 129], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet34": [[131, 133], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet50": [[135, 137], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet101": [[139, 141], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet152": [[143, 145], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", "num_classes", ":", "int", "=", "10", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.test": [[147, 151], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.stacked_bar_plot.remove_brackets": [[7, 25], ["range", "len", "len"], "function", ["None"], ["def", "remove_brackets", "(", "value", ")", ":", "\n", "    ", "check", "=", "']'", "\n", "val", "=", "''", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "value", ")", ",", "1", ")", ":", "\n", "        ", "if", "i", "==", "len", "(", "value", ")", "-", "1", ":", "\n", "            ", "val", "+=", "']'", "\n", "break", "\n", "", "if", "value", "[", "i", "]", "==", "check", ":", "\n", "            ", "if", "check", "==", "']'", ":", "\n", "                ", "check", "=", "'['", "\n", "if", "value", "[", "i", "+", "1", "]", "==", "check", ":", "\n", "                    ", "val", "+=", "', '", "\n", "i", "+=", "2", "\n", "", "", "else", ":", "\n", "                ", "check", "=", "']'", "\n", "", "", "else", ":", "\n", "            ", "val", "+=", "value", "[", "i", "]", "\n", "", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mahdihosseini_conet.models.stacked_bar_plot.stacked_bar_plot": [[26, 71], ["pandas.read_excel", "range", "numpy.transpose().tolist", "numpy.arange", "range", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.gcf", "plt.gcf.set_size_inches", "matplotlib.savefig", "len", "pd.read_excel.iloc[].to_numpy", "ast.literal_eval", "range", "len", "len", "numpy.add().tolist", "str", "pd.read_excel.iloc[].to_numpy", "stacked_bar_plot.remove_brackets", "len", "numpy.transpose", "matplotlib.bar", "matplotlib.bar", "range", "numpy.add", "len", "str"], "function", ["home.repos.pwc.inspect_result.mahdihosseini_conet.models.stacked_bar_plot.remove_brackets"], ["", "def", "stacked_bar_plot", "(", "adapted_file_name", ",", "trial_increment", "=", "2", ")", ":", "\n", "    ", "'''\n    sizes_with_trials is a list of lists as follows:\n    sizes_with_trials=[sizes for trial1, sizes for 2, ... sizes for trial N]\n    '''", "\n", "layers_info", "=", "pd", ".", "read_excel", "(", "adapted_file_name", ")", "#This file_name is an adapted_blah file_name", "\n", "layers_size_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "layers_info", ".", "iloc", "[", ":", ",", "0", "]", ".", "to_numpy", "(", ")", ")", ")", ":", "\n", "        ", "temp", "=", "''", "\n", "main", "=", "layers_info", ".", "iloc", "[", "i", ",", "1", ":", "]", ".", "to_numpy", "(", ")", "\n", "for", "j", "in", "main", ":", "\n", "            ", "temp", "+=", "j", "[", ":", "]", "\n", "", "temp", "=", "ast", ".", "literal_eval", "(", "remove_brackets", "(", "temp", ")", ")", "\n", "layers_size_list", "+=", "[", "temp", "]", "\n", "", "temp", "=", "[", "]", "\n", "alternate", "=", "False", "\n", "sizes_with_trials", "=", "[", "]", "\n", "if", "trial_increment", "!=", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "layers_size_list", ")", ",", "1", ")", ":", "\n", "            ", "if", "i", "%", "trial_increment", "==", "0", ":", "\n", "                ", "temp", "+=", "[", "layers_size_list", "[", "i", "]", "]", "\n", "", "", "layers_size_list", "=", "temp", "\n", "", "sizes_with_trials", "=", "np", ".", "transpose", "(", "layers_size_list", ")", ".", "tolist", "(", ")", "\n", "\n", "x_values", "=", "np", ".", "arange", "(", "len", "(", "sizes_with_trials", "[", "0", "]", ")", ")", "\n", "temp", "=", "[", "0", "for", "i", "in", "x_values", "]", "\n", "colors", "=", "[", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#B6D094'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", ",", "'#4d4d4e'", ",", "'#b51b1b'", ",", "'#1f639b'", ",", "'#1bb5b5'", ",", "'#fcb045'", "]", "\n", "barWidth", "=", "0.5", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sizes_with_trials", ")", ",", "1", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "plt", ".", "bar", "(", "x_values", ",", "sizes_with_trials", "[", "i", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "width", "=", "barWidth", ")", "\n", "", "else", ":", "\n", "#Just for safety", "\n", "            ", "plt", ".", "bar", "(", "x_values", ",", "sizes_with_trials", "[", "i", "]", ",", "bottom", "=", "temp", ",", "color", "=", "str", "(", "colors", "[", "i", "]", ")", ",", "width", "=", "barWidth", ")", "\n", "", "temp", "=", "np", ".", "add", "(", "temp", ",", "sizes_with_trials", "[", "i", "]", ")", ".", "tolist", "(", ")", "\n", "", "names", "=", "[", "str", "(", "trial_increment", "*", "i", ")", "for", "i", "in", "range", "(", "len", "(", "x_values", ")", ")", "]", "\n", "names", "[", "0", "]", "=", "'Baseline'", "\n", "plt", ".", "xticks", "(", "x_values", ",", "names", ",", "fontweight", "=", "'bold'", ")", "\n", "plt", ".", "xlabel", "(", "'Trial Number'", ")", "\n", "plt", ".", "ylabel", "(", "'Cumulative Channel Size'", ")", "\n", "plt", ".", "title", "(", "'ResNet-like Architecture w/Channel Size = 32, Threshold=0.01, MC Threshold=8'", ")", "\n", "figure", "=", "plt", ".", "gcf", "(", ")", "\n", "figure", ".", "set_size_inches", "(", "11.4", ",", "5.34", ")", "\n", "plt", ".", "savefig", "(", "'temp.png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]]}