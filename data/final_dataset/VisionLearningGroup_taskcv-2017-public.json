{"home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.fast_hist": [[7, 10], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.per_class_iu": [[12, 14], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.save_colorful_images": [[16, 19], ["PIL.Image.fromarray", "Image.fromarray.save", "prediction.squeeze"], "function", ["None"], ["", "def", "save_colorful_images", "(", "prediction", ",", "filename", ",", "palette", ",", "postfix", "=", "'_color.png'", ")", ":", "\n", "    ", "im", "=", "Image", ".", "fromarray", "(", "palette", "[", "prediction", ".", "squeeze", "(", ")", "]", ")", "\n", "im", ".", "save", "(", "filename", "[", ":", "-", "4", "]", "+", "postfix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.label_mapping": [[21, 26], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.compute_mIoU": [[28, 67], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "range", "eval.per_class_iu", "range", "print", "open", "json.load", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "sorted", "sorted", "len", "numpy.array", "numpy.array", "eval.label_mapping", "eval.fast_hist", "print", "os.path.join", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "str", "open().read", "open().read", "label_mapping.flatten", "np.array.flatten", "str", "round", "x.split", "open().read", "open().read", "len", "len", "len", "round", "open", "open", "label_mapping.flatten", "np.array.flatten", "numpy.mean", "numpy.nanmean", "open", "open", "eval.per_class_iu"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.per_class_iu", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.label_mapping", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.fast_hist", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "''", ",", "dset", "=", "'cityscapes'", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'data/cityscapes/info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "'Num classes'", ",", "num_classes", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "palette", "=", "np", ".", "array", "(", "info", "[", "'palette'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "if", "dset", "==", "'cityscapes'", ":", "\n", "        ", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'data'", ",", "dset", ",", "'image.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'data'", ",", "dset", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "", "else", ":", "\n", "        ", "gt_imgs", "=", "sorted", "(", "open", "(", "gt_dir", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "pred_imgs", "=", "sorted", "(", "open", "(", "pred_dir", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "\n", "", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.main": [[69, 71], ["eval.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.segmentation.eval.compute_mIoU"], ["", "def", "main", "(", "args", ")", ":", "\n", "   ", "compute_mIoU", "(", "args", ".", "gt_dir", ",", "args", ".", "pred_dir", ",", "args", ".", "devkit_dir", ",", "args", ".", "dset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.classification.exp_eval.Categories.__init__": [[22, 39], ["len", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "exp_eval.Categories.acceptable_predictionss.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "names", ")", ":", "\n", "        ", "self", ".", "names", "=", "names", "\n", "self", ".", "num_cat", "=", "len", "(", "names", ")", "\n", "self", ".", "acceptable_predictionss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "names", ")", ")", ":", "\n", "            ", "self", ".", "acceptable_predictionss", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "truth", "=", "np", ".", "zeros", "(", "self", ".", "num_cat", ")", "\n", "self", ".", "predictions", "=", "np", ".", "zeros", "(", "self", ".", "num_cat", ")", "\n", "self", ".", "predictions_accuracy", "=", "np", ".", "zeros", "(", "self", ".", "num_cat", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_cat", ")", ":", "\n", "            ", "self", ".", "truth", "[", "i", "]", "=", "0", "\n", "self", ".", "predictions", "[", "i", "]", "=", "0", "\n", "self", ".", "predictions_accuracy", "[", "i", "]", "=", "0", "\n", "\n", "", "self", ".", "mean_predictions_accuracy", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.classification.exp_eval.classification_evaluation": [[50, 97], ["exp_eval.Categories", "f.close", "f.close", "enumerate", "range", "float", "f.close", "open", "open", "len", "print", "len", "len", "print", "int", "int", "numpy.mean", "open", "f.write", "range", "x.strip", "x.strip", "print", "len", "f.write", "f.readlines", "f.readlines", "float", "str", "str"], "function", ["None"], ["", "", "def", "classification_evaluation", "(", "ground_truth_fn", ",", "predictions_fn", ")", ":", "\n", "    ", "category_names", "=", "[", "'aeroplane'", ",", "'bicycle'", ",", "'bus'", ",", "'car'", ",", "'horse'", ",", "'knife'", ",", "\n", "'motorcycle'", ",", "'person'", ",", "'plant'", ",", "'skateboard'", ",", "'train'", ",", "'truck'", "]", "\n", "categs", "=", "Categories", "(", "category_names", ")", "\n", "\n", "with", "open", "(", "ground_truth_fn", ")", "as", "f", ":", "\n", "        ", "truth", "=", "[", "x", ".", "strip", "(", "'\\n'", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "predictions_fn", ")", "as", "f", ":", "\n", "        ", "predictions", "=", "[", "x", ".", "strip", "(", "'\\n'", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "if", "len", "(", "predictions", ")", "==", "0", ":", "\n", "        ", "print", "(", "'Error: predictions file is empty.'", ")", "\n", "return", "\n", "\n", "", "if", "len", "(", "truth", ")", "!=", "len", "(", "predictions", ")", ":", "\n", "        ", "print", "(", "'Error: predictions file does not contain the same number '", "\n", "'of elements as truth file.'", ")", "\n", "return", "\n", "\n", "", "for", "idx", ",", "category", "in", "enumerate", "(", "truth", ")", ":", "\n", "        ", "truth_category", "=", "int", "(", "category", ")", "\n", "categs", ".", "truth", "[", "truth_category", "]", "+=", "1", "\n", "predictions_category", "=", "int", "(", "predictions", "[", "idx", "]", ")", "\n", "\n", "if", "predictions_category", "not", "in", "categs", ".", "acceptable_predictionss", ":", "\n", "            ", "print", "(", "'Error: predictions file contains invalid entry. Please '", "\n", "'check that all category labels are valid and that the '", "\n", "'file adheres to the specified format for evaluation.'", ")", "\n", "return", "\n", "\n", "", "if", "predictions_category", "==", "truth_category", ":", "\n", "            ", "categs", ".", "predictions", "[", "truth_category", "]", "+=", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "categs", ".", "num_cat", ")", ":", "\n", "        ", "if", "categs", ".", "truth", "[", "i", "]", "!=", "0", ":", "\n", "            ", "categs", ".", "predictions_accuracy", "[", "i", "]", "=", "100", "*", "float", "(", "categs", ".", "predictions", "[", "i", "]", "/", "categs", ".", "truth", "[", "i", "]", ")", "\n", "\n", "", "", "categs", ".", "mean_predictions_accuracy", "=", "float", "(", "np", ".", "mean", "(", "categs", ".", "predictions_accuracy", ")", ")", "\n", "\n", "with", "open", "(", "'scores.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'mean accuracy: '", "+", "str", "(", "categs", ".", "mean_predictions_accuracy", ")", "+", "'\\n\\n'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "categs", ".", "predictions_accuracy", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "categs", ".", "names", "[", "i", "]", "+", "': '", "+", "str", "(", "categs", ".", "predictions_accuracy", "[", "i", "]", ")", "+", "'\\n\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_classification.format_array": [[14, 16], ["None"], "function", ["None"], ["def", "format_array", "(", "arr", ")", ":", "\n", "    ", "return", "'  '", ".", "join", "(", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "arr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_classification.main": [[18, 78], ["click.command", "click.argument", "click.argument", "click.argument", "click.argument", "click.argument", "click.argument", "click.option", "adda.util.config_logging", "logging.info", "open", "adda.data.get_dataset", "getattr", "adda.models.get_model_fn", "getattr.tf_ops", "adda.models.preprocessing", "tensorflow.train.batch", "adda.models.get_model_fn.", "tensorflow.argmax", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "tf.Session.run", "adda.util.collect_vars", "tensorflow.train.Saver", "os.path.isdir", "logging.info", "tf.train.Saver.restore", "numpy.zeros", "numpy.zeros", "tqdm.tqdm", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "open.write", "open.close", "tf.train.Coordinator.request_stop", "tf.train.Coordinator.join", "tf.Session.close", "logging.info", "tensorflow.global_variables_initializer", "tensorflow.train.latest_checkpoint", "range", "tf.Session.run", "predictions_list.append", "int", "len", "eval_classification.format_array", "str", "map", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.config_logging", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.get_dataset", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.get_model_fn", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.tf_ops", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.preprocessing", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_classification.format_array"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'data_root'", ")", "\n", "@", "click", ".", "argument", "(", "'dataset'", ")", "\n", "@", "click", ".", "argument", "(", "'split'", ")", "\n", "@", "click", ".", "argument", "(", "'model'", ")", "\n", "@", "click", ".", "argument", "(", "'weights'", ")", "\n", "@", "click", ".", "argument", "(", "'output_file'", ")", "\n", "@", "click", ".", "option", "(", "'--gpu'", ",", "default", "=", "'0'", ")", "\n", "def", "main", "(", "data_root", ",", "dataset", ",", "split", ",", "model", ",", "weights", ",", "gpu", ",", "output_file", ")", ":", "\n", "    ", "adda", ".", "util", ".", "config_logging", "(", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "        ", "logging", ".", "info", "(", "'CUDA_VISIBLE_DEVICES specified, ignoring --gpu flag'", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu", "\n", "", "logging", ".", "info", "(", "'Using GPU {}'", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", ")", "\n", "\n", "f", "=", "open", "(", "output_file", ",", "'w'", ")", "\n", "\n", "dataset", "=", "adda", ".", "data", ".", "get_dataset", "(", "dataset", ",", "path", "=", "data_root", ",", "shuffle", "=", "False", ")", "\n", "split", "=", "getattr", "(", "dataset", ",", "split", ")", "\n", "model_fn", "=", "adda", ".", "models", ".", "get_model_fn", "(", "model", ")", "\n", "im", ",", "label", "=", "split", ".", "tf_ops", "(", "capacity", "=", "2", ")", "\n", "im", "=", "adda", ".", "models", ".", "preprocessing", "(", "im", ",", "model_fn", ")", "\n", "im_batch", ",", "label_batch", "=", "tf", ".", "train", ".", "batch", "(", "[", "im", ",", "label", "]", ",", "batch_size", "=", "1", ")", "\n", "\n", "net", ",", "layers", "=", "model_fn", "(", "im_batch", ",", "is_training", "=", "False", ",", "num_classes", "=", "int", "(", "dataset", ".", "num_classes", ")", ")", "\n", "net", "=", "tf", ".", "argmax", "(", "net", ",", "-", "1", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "var_dict", "=", "adda", ".", "util", ".", "collect_vars", "(", "model", ")", "\n", "restorer", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "var_dict", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "weights", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "weights", ")", "\n", "", "logging", ".", "info", "(", "'Evaluating {}'", ".", "format", "(", "weights", ")", ")", "\n", "restorer", ".", "restore", "(", "sess", ",", "weights", ")", "\n", "\n", "class_correct", "=", "np", ".", "zeros", "(", "dataset", ".", "num_classes", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "class_counts", "=", "np", ".", "zeros", "(", "dataset", ".", "num_classes", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "predictions_list", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "split", ")", ")", ")", ":", "\n", "        ", "predictions", ",", "gt", "=", "sess", ".", "run", "(", "[", "net", ",", "label_batch", "]", ")", "\n", "predictions_list", ".", "append", "(", "predictions", "[", "0", "]", ")", "\n", "class_counts", "[", "gt", "[", "0", "]", "]", "+=", "1", "\n", "if", "predictions", "[", "0", "]", "==", "gt", "[", "0", "]", ":", "\n", "            ", "class_correct", "[", "gt", "[", "0", "]", "]", "+=", "1", "\n", "", "", "logging", ".", "info", "(", "'Class accuracies:'", ")", "\n", "logging", ".", "info", "(", "'    '", "+", "format_array", "(", "class_correct", "/", "class_counts", ")", ")", "\n", "logging", ".", "info", "(", "'Overall accuracy:'", ")", "\n", "logging", ".", "info", "(", "'    '", "+", "str", "(", "np", ".", "sum", "(", "class_correct", ")", "/", "np", ".", "sum", "(", "class_counts", ")", ")", ")", "\n", "logging", ".", "info", "(", "'Writing to the %s'", "%", "output_file", ")", "\n", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "map", "(", "str", ",", "predictions_list", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "coord", ".", "request_stop", "(", ")", "\n", "coord", ".", "join", "(", "threads", ")", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.preprocessing": [[14, 24], ["tensorflow.cast", "tensorflow.image.resize_images", "tensorflow.constant"], "function", ["None"], ["def", "preprocessing", "(", "inputs", ",", "model_fn", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "cast", "(", "inputs", ",", "tf", ".", "float32", ")", "\n", "if", "model_fn", ".", "default_image_size", "is", "not", "None", ":", "\n", "        ", "size", "=", "model_fn", ".", "default_image_size", "\n", "inputs", "=", "tf", ".", "image", ".", "resize_images", "(", "inputs", ",", "[", "size", ",", "size", "]", ")", "\n", "", "if", "model_fn", ".", "mean", "is", "not", "None", ":", "\n", "        ", "inputs", "=", "inputs", "-", "tf", ".", "constant", "(", "model_fn", ".", "mean", ")", "\n", "", "if", "model_fn", ".", "bgr", ":", "\n", "        ", "inputs", "=", "inputs", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.remove_first_scope": [[25, 27], ["name.split"], "function", ["None"], ["", "def", "remove_first_scope", "(", "name", ")", ":", "\n", "    ", "return", "'/'", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.collect_vars": [[28, 49], ["tensorflow.get_collection", "collections.OrderedDict", "isinstance", "isinstance", "enumerate", "enumerate", "eval_segmentation.remove_first_scope", "eval_segmentation.remove_first_scope", "os.path.join.startswith", "eval_segmentation.remove_first_scope", "os.path.join.startswith", "os.path.join"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.remove_first_scope", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.remove_first_scope", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.remove_first_scope"], ["", "def", "collect_vars", "(", "scope", ",", "start", "=", "None", ",", "end", "=", "None", ",", "prepend_scope", "=", "None", ")", ":", "\n", "    ", "vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "scope", ")", "\n", "var_dict", "=", "OrderedDict", "(", ")", "\n", "if", "isinstance", "(", "start", ",", "str", ")", ":", "\n", "        ", "for", "i", ",", "var", "in", "enumerate", "(", "vars", ")", ":", "\n", "            ", "var_name", "=", "remove_first_scope", "(", "var", ".", "op", ".", "name", ")", "\n", "if", "var_name", ".", "startswith", "(", "start", ")", ":", "\n", "                ", "start", "=", "i", "\n", "break", "\n", "", "", "", "if", "isinstance", "(", "end", ",", "str", ")", ":", "\n", "        ", "for", "i", ",", "var", "in", "enumerate", "(", "vars", ")", ":", "\n", "            ", "var_name", "=", "remove_first_scope", "(", "var", ".", "op", ".", "name", ")", "\n", "if", "var_name", ".", "startswith", "(", "end", ")", ":", "\n", "                ", "end", "=", "i", "\n", "break", "\n", "", "", "", "for", "var", "in", "vars", "[", "start", ":", "end", "]", ":", "\n", "        ", "var_name", "=", "remove_first_scope", "(", "var", ".", "op", ".", "name", ")", "\n", "if", "prepend_scope", "is", "not", "None", ":", "\n", "            ", "var_name", "=", "os", ".", "path", ".", "join", "(", "prepend_scope", ",", "var_name", ")", "\n", "", "var_dict", "[", "var_name", "]", "=", "var", "\n", "", "return", "var_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.count_intersection_and_union": [[51, 65], ["predictions.copy.copy", "numpy.zeros", "numpy.zeros", "range", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "count_intersection_and_union", "(", "predictions", ",", "gt", ",", "num_classes", ",", "ignore", "=", "[", "]", ")", ":", "\n", "    ", "predictions", "=", "predictions", ".", "copy", "(", ")", "\n", "for", "ignore_label", "in", "ignore", ":", "\n", "        ", "predictions", "[", "gt", "==", "ignore_label", "]", "=", "ignore_label", "\n", "", "intersections", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ")", "\n", "unions", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ")", "\n", "for", "label", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "if", "label", "in", "ignore", ":", "\n", "            ", "continue", "\n", "", "pred_map", "=", "predictions", "==", "label", "\n", "gt_map", "=", "gt", "==", "label", "\n", "intersections", "[", "label", "]", "=", "np", ".", "sum", "(", "pred_map", "&", "gt_map", ")", "\n", "unions", "[", "label", "]", "=", "np", ".", "sum", "(", "pred_map", "|", "gt_map", ")", "\n", "", "return", "intersections", ",", "unions", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.iou_str": [[66, 71], ["result.append"], "function", ["None"], ["", "def", "iou_str", "(", "iou", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "for", "val", "in", "iou", ":", "\n", "        ", "result", ".", "append", "(", "'{:4.2f}'", ".", "format", "(", "val", ")", ")", "\n", "", "return", "'  '", ".", "join", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.main": [[73, 134], ["click.command", "click.argument", "click.argument", "click.argument", "click.argument", "click.option", "adda.util.config_logging", "adda.data.get_dataset", "getattr", "adda.models.get_model_fn", "getattr.tf_ops", "eval_segmentation.preprocessing", "tensorflow.train.batch", "adda.models.get_model_fn.", "tensorflow.argmax", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "tf.Session.run", "eval_segmentation.collect_vars", "tensorflow.train.Saver", "os.path.isdir", "logging.info", "tf.train.Saver.restore", "numpy.zeros", "numpy.zeros", "tqdm.tqdm", "print", "print", "logging.info", "logging.info", "tensorflow.global_variables_initializer", "tensorflow.train.latest_checkpoint", "range", "time.time", "tf.Session.run", "time.time", "eval_segmentation.count_intersection_and_union", "logging.info", "numpy.mean", "logging.info", "numpy.mean", "dict", "len", "time.time", "time.time", "eval_segmentation.iou_str"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.config_logging", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.get_dataset", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.get_model_fn", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.tf_ops", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.preprocessing", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.count_intersection_and_union", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.eval_segmentation.iou_str"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'dataset'", ")", "\n", "@", "click", ".", "argument", "(", "'split'", ")", "\n", "@", "click", ".", "argument", "(", "'model'", ")", "\n", "@", "click", ".", "argument", "(", "'weights'", ")", "\n", "@", "click", ".", "option", "(", "'--gpu'", ",", "default", "=", "'0'", ")", "\n", "def", "main", "(", "dataset", ",", "split", ",", "model", ",", "weights", ",", "gpu", ")", ":", "\n", "    ", "adda", ".", "util", ".", "config_logging", "(", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "        ", "logging", ".", "info", "(", "'CUDA_VISIBLE_DEVICES specified, ignoring --gpu flag'", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu", "\n", "logging", ".", "info", "(", "'Using GPU {}'", ".", "format", "(", "gpu", ")", ")", "\n", "\n", "", "dataset_name", "=", "dataset", "\n", "split_name", "=", "split", "\n", "dataset", "=", "adda", ".", "data", ".", "get_dataset", "(", "dataset", ",", "shuffle", "=", "False", ")", "\n", "split", "=", "getattr", "(", "dataset", ",", "split", ")", "\n", "model_fn", "=", "adda", ".", "models", ".", "get_model_fn", "(", "model", ")", "\n", "im", ",", "label", "=", "split", ".", "tf_ops", "(", "capacity", "=", "2", ")", "\n", "im", "=", "preprocessing", "(", "im", ",", "model_fn", ")", "\n", "im_batch", ",", "label_batch", "=", "tf", ".", "train", ".", "batch", "(", "[", "im", ",", "label", "]", ",", "num_threads", "=", "4", ",", "batch_size", "=", "1", ")", "\n", "\n", "net", ",", "layers", "=", "model_fn", "(", "im_batch", ",", "is_training", "=", "False", ")", "\n", "net", "=", "tf", ".", "argmax", "(", "net", ",", "3", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "dict", "(", "GPU", "=", "1", ")", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "var_dict", "=", "collect_vars", "(", "model", ")", "\n", "restorer", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "var_dict", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "weights", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "weights", ")", "\n", "", "logging", ".", "info", "(", "'Evaluating {}'", ".", "format", "(", "weights", ")", ")", "\n", "restorer", ".", "restore", "(", "sess", ",", "weights", ")", "\n", "\n", "intersections", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_classes", ",", ")", ")", "\n", "unions", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_classes", ",", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "split", ")", ")", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "predictions", ",", "im", ",", "gt", "=", "sess", ".", "run", "(", "[", "net", ",", "im_batch", ",", "label_batch", "]", ")", "\n", "forward_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "im_intersection", ",", "im_union", "=", "count_intersection_and_union", "(", "\n", "predictions", "[", "0", "]", ",", "gt", "[", "0", "]", ",", "dataset", ".", "num_classes", ",", "\n", "ignore", "=", "dataset", ".", "ignore_labels", ")", "\n", "iou_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "intersections", "+=", "im_intersection", "\n", "unions", "+=", "im_union", "\n", "logging", ".", "info", "(", "'Image {}: forward: {:.4f} seconds,\\tiou: {:.4f} seconds'", "\n", ".", "format", "(", "i", ",", "forward_time", ",", "iou_time", ")", ")", "\n", "ious", "=", "intersections", "/", "unions", "\n", "miou", "=", "np", ".", "mean", "(", "ious", ")", "\n", "logging", ".", "info", "(", "'        IoU so far: {}    AVG: {:.2f}'", "\n", ".", "format", "(", "iou_str", "(", "ious", ")", ",", "miou", ")", ")", "\n", "", "ious", "=", "intersections", "/", "unions", "\n", "print", "(", "ious", ")", "\n", "print", "(", "np", ".", "mean", "(", "ious", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.train.main": [[17, 120], ["click.command", "click.argument", "click.argument", "click.argument", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "adda.util.config_logging", "logging.info", "logging.info", "random.seed", "numpy.random.seed", "tensorflow.set_random_seed", "adda.data.get_dataset", "getattr", "adda.models.get_model_fn", "getattr.tf_ops", "adda.models.preprocessing", "tensorflow.train.batch", "adda.models.get_model_fn.", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.losses.get_total_loss", "tensorflow.Variable", "tensorflow.get_collection", "tf.train.AdamOptimizer.minimize", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "tf.Session.run", "adda.util.collect_vars", "tensorflow.train.Saver", "os.path.join", "collections.deque", "tqdm.tqdm", "tqdm.tqdm.set_description", "tqdm.tqdm.refresh", "tf.train.Coordinator.request_stop", "tf.train.Coordinator.join", "tf.Session.close", "logging.info", "random.randrange", "tensorflow.not_equal", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.train.MomentumOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.global_variables_initializer", "adda.util.collect_vars", "logging.info", "adda.util.collect_vars.items", "tensorflow.train.Saver", "tf.train.Saver.restore", "os.path.exists", "os.mkdir", "range", "tf.Session.run", "collections.deque.append", "dict", "logging.info", "logging.info", "tf.Session.run", "logging.info", "tqdm.tqdm.set_description", "tf.train.Saver.save", "logging.info", "tf.Variable.assign", "os.path.join", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.config_logging", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.get_dataset", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.get_model_fn", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.tf_ops", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.preprocessing", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'data_root'", ")", "\n", "@", "click", ".", "argument", "(", "'dataset'", ")", "\n", "@", "click", ".", "argument", "(", "'split'", ")", "\n", "@", "click", ".", "argument", "(", "'model'", ")", "\n", "@", "click", ".", "argument", "(", "'output'", ")", "\n", "@", "click", ".", "option", "(", "'--gpu'", ",", "default", "=", "'0'", ")", "\n", "@", "click", ".", "option", "(", "'--iterations'", ",", "default", "=", "20000", ")", "\n", "@", "click", ".", "option", "(", "'--batch_size'", ",", "default", "=", "50", ")", "\n", "@", "click", ".", "option", "(", "'--display'", ",", "default", "=", "10", ")", "\n", "@", "click", ".", "option", "(", "'--lr'", ",", "default", "=", "1e-4", ")", "\n", "@", "click", ".", "option", "(", "'--stepsize'", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "'--snapshot'", ",", "default", "=", "5000", ")", "\n", "@", "click", ".", "option", "(", "'--weights'", ")", "\n", "@", "click", ".", "option", "(", "'--weights_end'", ")", "\n", "@", "click", ".", "option", "(", "'--weights_scope'", ",", "default", "=", "None", ")", "\n", "@", "click", ".", "option", "(", "'--train_scope'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--ignore_label'", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "'--solver'", ",", "default", "=", "'sgd'", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "type", "=", "int", ")", "\n", "def", "main", "(", "data_root", ",", "dataset", ",", "split", ",", "model", ",", "output", ",", "gpu", ",", "iterations", ",", "batch_size", ",", "display", ",", "\n", "lr", ",", "stepsize", ",", "snapshot", ",", "weights", ",", "weights_end", ",", "weights_scope", ",", "train_scope", ",", "\n", "ignore_label", ",", "solver", ",", "seed", ")", ":", "\n", "    ", "adda", ".", "util", ".", "config_logging", "(", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "        ", "logging", ".", "info", "(", "'CUDA_VISIBLE_DEVICES specified, ignoring --gpu flag'", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu", "\n", "", "logging", ".", "info", "(", "'Using GPU {}'", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", ")", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "random", ".", "randrange", "(", "2", "**", "32", "-", "2", ")", "\n", "", "logging", ".", "info", "(", "'Using random seed {}'", ".", "format", "(", "seed", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "1", ")", "\n", "tf", ".", "set_random_seed", "(", "seed", "+", "2", ")", "\n", "dataset_name", "=", "dataset", "\n", "split_name", "=", "split", "\n", "dataset_object", "=", "adda", ".", "data", ".", "get_dataset", "(", "dataset", ",", "path", "=", "data_root", ")", "\n", "dataset", "=", "getattr", "(", "dataset_object", ",", "split", ")", "\n", "model_fn", "=", "adda", ".", "models", ".", "get_model_fn", "(", "model", ")", "\n", "im", ",", "label", "=", "dataset", ".", "tf_ops", "(", ")", "\n", "im", "=", "adda", ".", "models", ".", "preprocessing", "(", "im", ",", "model_fn", ")", "\n", "im_batch", ",", "label_batch", "=", "tf", ".", "train", ".", "batch", "(", "[", "im", ",", "label", "]", ",", "batch_size", "=", "batch_size", ")", "\n", "net", ",", "layers", "=", "model_fn", "(", "im_batch", ",", "num_classes", "=", "dataset_object", ".", "num_classes", ")", "\n", "if", "ignore_label", "is", "not", "None", ":", "\n", "        ", "mask", "=", "tf", ".", "not_equal", "(", "label_batch", ",", "ignore_label", ")", "\n", "label_batch", "=", "tf", ".", "boolean_mask", "(", "label_batch", ",", "mask", ")", "\n", "net", "=", "tf", ".", "boolean_mask", "(", "net", ",", "mask", ")", "\n", "", "class_loss", "=", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "label_batch", ",", "net", ")", "\n", "loss", "=", "tf", ".", "losses", ".", "get_total_loss", "(", ")", "\n", "\n", "lr_var", "=", "tf", ".", "Variable", "(", "lr", ",", "name", "=", "'learning_rate'", ",", "trainable", "=", "False", ")", "\n", "if", "solver", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr_var", ",", "0.99", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr_var", ")", "\n", "\n", "", "vars_to_update", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "model", "+", "'/'", "+", "train_scope", ")", "\n", "step", "=", "optimizer", ".", "minimize", "(", "loss", ",", "var_list", "=", "vars_to_update", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "dict", "(", "GPU", "=", "1", ")", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "if", "weights", ":", "\n", "        ", "var_dict", "=", "adda", ".", "util", ".", "collect_vars", "(", "model", ",", "end", "=", "weights_end", ",", "prepend_scope", "=", "weights_scope", ")", "\n", "logging", ".", "info", "(", "'Restoring weights from {}:'", ".", "format", "(", "weights", ")", ")", "\n", "for", "src", ",", "tgt", "in", "var_dict", ".", "items", "(", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'    {:30} -> {:30}'", ".", "format", "(", "src", ",", "tgt", ".", "name", ")", ")", "\n", "", "restorer", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "var_dict", ")", "\n", "restorer", ".", "restore", "(", "sess", ",", "weights", ")", "\n", "\n", "", "model_vars", "=", "adda", ".", "util", ".", "collect_vars", "(", "model", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "model_vars", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "'snapshot'", ",", "output", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "losses", "=", "deque", "(", "maxlen", "=", "10", ")", "\n", "bar", "=", "tqdm", "(", "range", "(", "iterations", ")", ")", "\n", "bar", ".", "set_description", "(", "'{} (lr: {:.0e})'", ".", "format", "(", "output", ",", "lr", ")", ")", "\n", "bar", ".", "refresh", "(", ")", "\n", "for", "i", "in", "bar", ":", "\n", "        ", "loss_val", ",", "_", "=", "sess", ".", "run", "(", "[", "loss", ",", "step", "]", ")", "\n", "losses", ".", "append", "(", "loss_val", ")", "\n", "if", "i", "%", "display", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'{:20} {:10.4f}     (avg: {:10.4f})'", "\n", ".", "format", "(", "'Iteration {}:'", ".", "format", "(", "i", ")", ",", "\n", "loss_val", ",", "\n", "np", ".", "mean", "(", "losses", ")", ")", ")", "\n", "", "if", "stepsize", "is", "not", "None", "and", "(", "i", "+", "1", ")", "%", "stepsize", "==", "0", ":", "\n", "            ", "lr", "=", "sess", ".", "run", "(", "lr_var", ".", "assign", "(", "lr", "*", "0.1", ")", ")", "\n", "logging", ".", "info", "(", "'Changed learning rate to {:.0e}'", ".", "format", "(", "lr", ")", ")", "\n", "bar", ".", "set_description", "(", "'{} (lr: {:.0e})'", ".", "format", "(", "output", ",", "lr", ")", ")", "\n", "", "if", "(", "i", "+", "1", ")", "%", "snapshot", "==", "0", ":", "\n", "            ", "snapshot_path", "=", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output", ")", ",", "\n", "global_step", "=", "i", "+", "1", ")", "\n", "logging", ".", "info", "(", "'Saved snapshot to {}'", ".", "format", "(", "snapshot_path", ")", ")", "\n", "\n", "", "", "coord", ".", "request_stop", "(", ")", "\n", "coord", ".", "join", "(", "threads", ")", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.tools.train_adda.main": [[16, 180], ["click.command", "click.argument", "click.argument", "click.argument", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "adda.util.config_logging", "logging.info", "logging.info", "random.seed", "numpy.random.seed", "tensorflow.set_random_seed", "logging.info", "adda.data.get_dataset", "getattr", "adda.data.get_dataset", "getattr", "getattr.tf_ops", "getattr.tf_ops", "adda.models.get_model_fn", "adda.models.preprocessing", "adda.models.preprocessing", "tensorflow.train.batch", "tensorflow.train.batch", "adda.models.get_model_fn.", "adda.models.get_model_fn.", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.zeros", "tensorflow.ones", "tensorflow.concat", "adda.adversary.adversarial_discriminator", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.losses.sparse_softmax_cross_entropy", "adda.util.collect_vars", "adda.util.collect_vars", "adda.util.collect_vars", "tensorflow.Variable", "tf.train.AdamOptimizer.minimize", "tf.train.AdamOptimizer.minimize", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "tf.Session.run", "os.path.isdir", "logging.info", "logging.info", "adda.util.collect_vars.items", "tensorflow.train.Saver", "tf.train.Saver.restore", "logging.info", "adda.util.collect_vars.items", "tensorflow.train.Saver", "tf.train.Saver.restore", "os.path.join", "collections.deque", "collections.deque", "tqdm.tqdm", "tqdm.tqdm.set_description", "tqdm.tqdm.refresh", "tf.train.Coordinator.request_stop", "tf.train.Coordinator.join", "tf.Session.close", "logging.info", "random.randrange", "source.split", "target.split", "tensorflow.train.MomentumOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.global_variables_initializer", "tensorflow.train.latest_checkpoint", "logging.info", "logging.info", "os.path.exists", "os.mkdir", "range", "tf.Session.run", "collections.deque.append", "collections.deque.append", "logging.error", "logging.error", "int", "int", "list", "list", "dict", "logging.info", "tf.Session.run", "logging.info", "tqdm.tqdm.set_description", "tf.train.Saver.save", "logging.info", "tensorflow.shape", "tensorflow.shape", "adda.util.collect_vars.values", "adda.util.collect_vars.values", "tf.Variable.assign", "os.path.join", "tf.reshape.get_shape", "tf.reshape.get_shape", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.config_logging", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.get_dataset", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.get_dataset", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.tf_ops", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.tf_ops", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.get_model_fn", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.preprocessing", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.preprocessing", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.adversary.adversarial_discriminator", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'data_root'", ")", "\n", "@", "click", ".", "argument", "(", "'source'", ")", "\n", "@", "click", ".", "argument", "(", "'target'", ")", "\n", "@", "click", ".", "argument", "(", "'model'", ")", "\n", "@", "click", ".", "argument", "(", "'output'", ")", "\n", "@", "click", ".", "option", "(", "'--gpu'", ",", "default", "=", "'0'", ")", "\n", "@", "click", ".", "option", "(", "'--iterations'", ",", "default", "=", "20000", ")", "\n", "@", "click", ".", "option", "(", "'--batch_size'", ",", "default", "=", "50", ")", "\n", "@", "click", ".", "option", "(", "'--display'", ",", "default", "=", "10", ")", "\n", "@", "click", ".", "option", "(", "'--lr'", ",", "default", "=", "1e-4", ")", "\n", "@", "click", ".", "option", "(", "'--stepsize'", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "'--snapshot'", ",", "default", "=", "5000", ")", "\n", "@", "click", ".", "option", "(", "'--weights'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--solver'", ",", "default", "=", "'sgd'", ")", "\n", "@", "click", ".", "option", "(", "'--adversary'", ",", "'adversary_layers'", ",", "default", "=", "[", "500", ",", "500", "]", ",", "\n", "multiple", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--adversary_leaky/--adversary_relu'", ",", "default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "type", "=", "int", ")", "\n", "def", "main", "(", "data_root", ",", "source", ",", "target", ",", "model", ",", "output", ",", "\n", "gpu", ",", "iterations", ",", "batch_size", ",", "display", ",", "lr", ",", "stepsize", ",", "snapshot", ",", "weights", ",", "\n", "solver", ",", "adversary_layers", ",", "adversary_leaky", ",", "seed", ")", ":", "\n", "# miscellaneous setup", "\n", "    ", "adda", ".", "util", ".", "config_logging", "(", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "        ", "logging", ".", "info", "(", "'CUDA_VISIBLE_DEVICES specified, ignoring --gpu flag'", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu", "\n", "", "logging", ".", "info", "(", "'Using GPU {}'", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", ")", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "random", ".", "randrange", "(", "2", "**", "32", "-", "2", ")", "\n", "", "logging", ".", "info", "(", "'Using random seed {}'", ".", "format", "(", "seed", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "1", ")", "\n", "tf", ".", "set_random_seed", "(", "seed", "+", "2", ")", "\n", "error", "=", "False", "\n", "\n", "try", ":", "\n", "        ", "source_dataset_name", ",", "source_split_name", "=", "source", ".", "split", "(", "':'", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "error", "=", "True", "\n", "logging", ".", "error", "(", "\n", "'Unexpected source dataset {} (should be in format dataset:split)'", "\n", ".", "format", "(", "source", ")", ")", "\n", "raise", "click", ".", "Abort", "\n", "\n", "", "try", ":", "\n", "        ", "target_dataset_name", ",", "target_split_name", "=", "target", ".", "split", "(", "':'", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "logging", ".", "error", "(", "\n", "'Unexpected target dataset {} (should be in format dataset:split)'", "\n", ".", "format", "(", "target", ")", ")", "\n", "raise", "click", ".", "Abort", "\n", "\n", "# setup data", "\n", "", "logging", ".", "info", "(", "'Adapting {} -> {}'", ".", "format", "(", "source", ",", "target", ")", ")", "\n", "souce_data_object", "=", "adda", ".", "data", ".", "get_dataset", "(", "source_dataset_name", ",", "path", "=", "data_root", ")", "\n", "source_dataset", "=", "getattr", "(", "souce_data_object", ",", "source_split_name", ")", "\n", "target_data_object", "=", "adda", ".", "data", ".", "get_dataset", "(", "target_dataset_name", ",", "path", "=", "data_root", ")", "\n", "target_dataset", "=", "getattr", "(", "target_data_object", ",", "target_split_name", ")", "\n", "source_im", ",", "source_label", "=", "source_dataset", ".", "tf_ops", "(", ")", "\n", "target_im", ",", "target_label", "=", "target_dataset", ".", "tf_ops", "(", ")", "\n", "model_fn", "=", "adda", ".", "models", ".", "get_model_fn", "(", "model", ")", "\n", "source_im", "=", "adda", ".", "models", ".", "preprocessing", "(", "source_im", ",", "model_fn", ")", "\n", "target_im", "=", "adda", ".", "models", ".", "preprocessing", "(", "target_im", ",", "model_fn", ")", "\n", "source_im_batch", ",", "source_label_batch", "=", "tf", ".", "train", ".", "batch", "(", "\n", "[", "source_im", ",", "source_label", "]", ",", "batch_size", "=", "batch_size", ")", "\n", "target_im_batch", ",", "target_label_batch", "=", "tf", ".", "train", ".", "batch", "(", "\n", "[", "target_im", ",", "target_label", "]", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "# base network", "\n", "source_ft", ",", "_", "=", "model_fn", "(", "source_im_batch", ",", "scope", "=", "'source'", ",", "num_classes", "=", "souce_data_object", ".", "num_classes", ")", "\n", "target_ft", ",", "_", "=", "model_fn", "(", "target_im_batch", ",", "scope", "=", "'target'", ",", "num_classes", "=", "souce_data_object", ".", "num_classes", ")", "\n", "\n", "# adversarial network", "\n", "source_ft", "=", "tf", ".", "reshape", "(", "source_ft", ",", "[", "-", "1", ",", "int", "(", "source_ft", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n", "target_ft", "=", "tf", ".", "reshape", "(", "target_ft", ",", "[", "-", "1", ",", "int", "(", "target_ft", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", "]", ")", "\n", "adversary_ft", "=", "tf", ".", "concat", "(", "[", "source_ft", ",", "target_ft", "]", ",", "0", ")", "\n", "source_adversary_label", "=", "tf", ".", "zeros", "(", "[", "tf", ".", "shape", "(", "source_ft", ")", "[", "0", "]", "]", ",", "tf", ".", "int32", ")", "\n", "target_adversary_label", "=", "tf", ".", "ones", "(", "[", "tf", ".", "shape", "(", "target_ft", ")", "[", "0", "]", "]", ",", "tf", ".", "int32", ")", "\n", "adversary_label", "=", "tf", ".", "concat", "(", "\n", "[", "source_adversary_label", ",", "target_adversary_label", "]", ",", "0", ")", "\n", "adversary_logits", "=", "adda", ".", "adversary", ".", "adversarial_discriminator", "(", "\n", "adversary_ft", ",", "adversary_layers", ",", "leaky", "=", "adversary_leaky", ")", "\n", "\n", "# losses", "\n", "mapping_loss", "=", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "\n", "1", "-", "adversary_label", ",", "adversary_logits", ")", "\n", "adversary_loss", "=", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "\n", "adversary_label", ",", "adversary_logits", ")", "\n", "\n", "# variable collection", "\n", "source_vars", "=", "adda", ".", "util", ".", "collect_vars", "(", "'source'", ")", "\n", "target_vars", "=", "adda", ".", "util", ".", "collect_vars", "(", "'target'", ")", "\n", "adversary_vars", "=", "adda", ".", "util", ".", "collect_vars", "(", "'adversary'", ")", "\n", "\n", "# optimizer", "\n", "lr_var", "=", "tf", ".", "Variable", "(", "lr", ",", "name", "=", "'learning_rate'", ",", "trainable", "=", "False", ")", "\n", "if", "solver", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr_var", ",", "0.99", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr_var", ",", "0.5", ")", "\n", "", "mapping_step", "=", "optimizer", ".", "minimize", "(", "\n", "mapping_loss", ",", "var_list", "=", "list", "(", "target_vars", ".", "values", "(", ")", ")", ")", "\n", "adversary_step", "=", "optimizer", ".", "minimize", "(", "\n", "adversary_loss", ",", "var_list", "=", "list", "(", "adversary_vars", ".", "values", "(", ")", ")", ")", "\n", "\n", "# set up session and initialize", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "dict", "(", "GPU", "=", "1", ")", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "# restore weights", "\n", "if", "os", ".", "path", ".", "isdir", "(", "weights", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "weights", ")", "\n", "", "logging", ".", "info", "(", "'Restoring weights from {}:'", ".", "format", "(", "weights", ")", ")", "\n", "logging", ".", "info", "(", "'    Restoring source model:'", ")", "\n", "for", "src", ",", "tgt", "in", "source_vars", ".", "items", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'        {:30} -> {:30}'", ".", "format", "(", "src", ",", "tgt", ".", "name", ")", ")", "\n", "", "source_restorer", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "source_vars", ")", "\n", "source_restorer", ".", "restore", "(", "sess", ",", "weights", ")", "\n", "logging", ".", "info", "(", "'    Restoring target model:'", ")", "\n", "for", "src", ",", "tgt", "in", "target_vars", ".", "items", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'        {:30} -> {:30}'", ".", "format", "(", "src", ",", "tgt", ".", "name", ")", ")", "\n", "", "target_restorer", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "target_vars", ")", "\n", "target_restorer", ".", "restore", "(", "sess", ",", "weights", ")", "\n", "\n", "# optimization loop (finally)", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "'snapshot'", ",", "output", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "mapping_losses", "=", "deque", "(", "maxlen", "=", "10", ")", "\n", "adversary_losses", "=", "deque", "(", "maxlen", "=", "10", ")", "\n", "bar", "=", "tqdm", "(", "range", "(", "iterations", ")", ")", "\n", "bar", ".", "set_description", "(", "'{} (lr: {:.0e})'", ".", "format", "(", "output", ",", "lr", ")", ")", "\n", "bar", ".", "refresh", "(", ")", "\n", "for", "i", "in", "bar", ":", "\n", "        ", "mapping_loss_val", ",", "adversary_loss_val", ",", "_", ",", "_", "=", "sess", ".", "run", "(", "\n", "[", "mapping_loss", ",", "adversary_loss", ",", "mapping_step", ",", "adversary_step", "]", ")", "\n", "mapping_losses", ".", "append", "(", "mapping_loss_val", ")", "\n", "adversary_losses", ".", "append", "(", "adversary_loss_val", ")", "\n", "if", "i", "%", "display", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'{:20} Mapping: {:10.4f}     (avg: {:10.4f})'", "\n", "'    Adversary: {:10.4f}     (avg: {:10.4f})'", "\n", ".", "format", "(", "'Iteration {}:'", ".", "format", "(", "i", ")", ",", "\n", "mapping_loss_val", ",", "\n", "np", ".", "mean", "(", "mapping_losses", ")", ",", "\n", "adversary_loss_val", ",", "\n", "np", ".", "mean", "(", "adversary_losses", ")", ")", ")", "\n", "", "if", "stepsize", "is", "not", "None", "and", "(", "i", "+", "1", ")", "%", "stepsize", "==", "0", ":", "\n", "            ", "lr", "=", "sess", ".", "run", "(", "lr_var", ".", "assign", "(", "lr", "*", "0.1", ")", ")", "\n", "logging", ".", "info", "(", "'Changed learning rate to {:.0e}'", ".", "format", "(", "lr", ")", ")", "\n", "bar", ".", "set_description", "(", "'{} (lr: {:.0e})'", ".", "format", "(", "output", ",", "lr", ")", ")", "\n", "", "if", "(", "i", "+", "1", ")", "%", "snapshot", "==", "0", ":", "\n", "            ", "snapshot_path", "=", "target_restorer", ".", "save", "(", "\n", "sess", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output", ")", ",", "global_step", "=", "i", "+", "1", ")", "\n", "logging", ".", "info", "(", "'Saved snapshot to {}'", ".", "format", "(", "snapshot_path", ")", ")", "\n", "\n", "", "", "coord", ".", "request_stop", "(", ")", "\n", "coord", ".", "join", "(", "threads", ")", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.adversary.adversarial_discriminator": [[8, 24], ["contextlib.ExitStack", "stack.enter_context", "stack.enter_context", "tensorflow.contrib.slim.fully_connected", "tensorflow.variable_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.fully_connected", "tensorflow.contrib.slim.l2_regularizer"], "function", ["None"], ["def", "adversarial_discriminator", "(", "net", ",", "layers", ",", "scope", "=", "'adversary'", ",", "leaky", "=", "False", ")", ":", "\n", "    ", "if", "leaky", ":", "\n", "        ", "activation_fn", "=", "tflearn", ".", "activations", ".", "leaky_relu", "\n", "", "else", ":", "\n", "        ", "activation_fn", "=", "tf", ".", "nn", ".", "relu", "\n", "", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "stack", ".", "enter_context", "(", "tf", ".", "variable_scope", "(", "scope", ")", ")", "\n", "stack", ".", "enter_context", "(", "\n", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "fully_connected", "]", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "2.5e-5", ")", ")", ")", "\n", "for", "dim", "in", "layers", ":", "\n", "            ", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "dim", ")", "\n", "", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "2", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.TqdmHandler.__init__": [[14, 16], ["logging.StreamHandler.__init__", "logging.StreamHandler.__init__", "logging.StreamHandler.__init__", "logging.StreamHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "logging", ".", "StreamHandler", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.TqdmHandler.emit": [[17, 20], ["util.TqdmHandler.format", "tqdm.tqdm.tqdm.write"], "methods", ["None"], ["", "def", "emit", "(", "self", ",", "record", ")", ":", "\n", "        ", "msg", "=", "self", ".", "format", "(", "record", ")", "\n", "tqdm", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.config_logging": [[22, 32], ["os.path.join", "logging.config.dictConfig", "logging.config.dictConfig", "os.path.dirname", "open", "yaml.load", "f.read"], "function", ["None"], ["", "", "def", "config_logging", "(", "logfile", "=", "None", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'logging.yml'", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ".", "read", "(", ")", ")", "\n", "", "if", "logfile", "is", "None", ":", "\n", "        ", "del", "config", "[", "'handlers'", "]", "[", "'file_handler'", "]", "\n", "del", "config", "[", "'root'", "]", "[", "'handlers'", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "config", "[", "'handlers'", "]", "[", "'file_handler'", "]", "[", "'filename'", "]", "=", "logfile", "\n", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.remove_first_scope": [[34, 36], ["name.split"], "function", ["None"], ["", "def", "remove_first_scope", "(", "name", ")", ":", "\n", "    ", "return", "'/'", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.collect_vars": [[38, 59], ["tensorflow.get_collection", "collections.OrderedDict", "isinstance", "isinstance", "enumerate", "enumerate", "util.remove_first_scope", "util.remove_first_scope", "os.path.join.startswith", "util.remove_first_scope", "os.path.join.startswith", "os.path.join"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.remove_first_scope", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.remove_first_scope", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.adda.util.remove_first_scope"], ["", "def", "collect_vars", "(", "scope", ",", "start", "=", "None", ",", "end", "=", "None", ",", "prepend_scope", "=", "None", ")", ":", "\n", "    ", "vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "scope", ")", "\n", "var_dict", "=", "OrderedDict", "(", ")", "\n", "if", "isinstance", "(", "start", ",", "str", ")", ":", "\n", "        ", "for", "i", ",", "var", "in", "enumerate", "(", "vars", ")", ":", "\n", "            ", "var_name", "=", "remove_first_scope", "(", "var", ".", "op", ".", "name", ")", "\n", "if", "var_name", ".", "startswith", "(", "start", ")", ":", "\n", "                ", "start", "=", "i", "\n", "break", "\n", "", "", "", "if", "isinstance", "(", "end", ",", "str", ")", ":", "\n", "        ", "for", "i", ",", "var", "in", "enumerate", "(", "vars", ")", ":", "\n", "            ", "var_name", "=", "remove_first_scope", "(", "var", ".", "op", ".", "name", ")", "\n", "if", "var_name", ".", "startswith", "(", "end", ")", ":", "\n", "                ", "end", "=", "i", "\n", "break", "\n", "", "", "", "for", "var", "in", "vars", "[", "start", ":", "end", "]", ":", "\n", "        ", "var_name", "=", "remove_first_scope", "(", "var", ".", "op", ".", "name", ")", "\n", "if", "prepend_scope", "is", "not", "None", ":", "\n", "            ", "var_name", "=", "os", ".", "path", ".", "join", "(", "prepend_scope", ",", "var_name", ")", "\n", "", "var_dict", "[", "var_name", "]", "=", "var", "\n", "", "return", "var_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.lenet.lenet": [[10, 37], ["adda.models.register_model_fn", "collections.OrderedDict", "tensorflow.variable_scope", "contextlib.ExitStack", "stack.enter_context", "stack.enter_context", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.layers.flatten", "tensorflow.contrib.slim.fully_connected", "tensorflow.contrib.slim.fully_connected", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.l2_regularizer"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.register_model_fn"], ["@", "register_model_fn", "(", "'lenet'", ")", "\n", "def", "lenet", "(", "inputs", ",", "scope", "=", "'lenet'", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "layers", "=", "OrderedDict", "(", ")", "\n", "net", "=", "inputs", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "            ", "stack", ".", "enter_context", "(", "\n", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "fully_connected", ",", "slim", ".", "conv2d", "]", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "2.5e-5", ")", ")", ")", "\n", "stack", ".", "enter_context", "(", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "padding", "=", "'VALID'", ")", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "20", ",", "5", ",", "scope", "=", "'conv1'", ")", "\n", "layers", "[", "'conv1'", "]", "=", "net", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "2", ",", "stride", "=", "2", ",", "scope", "=", "'pool1'", ")", "\n", "layers", "[", "'pool1'", "]", "=", "net", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "50", ",", "5", ",", "scope", "=", "'conv2'", ")", "\n", "layers", "[", "'conv2'", "]", "=", "net", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "2", ",", "stride", "=", "2", ",", "scope", "=", "'pool2'", ")", "\n", "layers", "[", "'pool2'", "]", "=", "net", "\n", "net", "=", "tf", ".", "contrib", ".", "layers", ".", "flatten", "(", "net", ")", "\n", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "500", ",", "scope", "=", "'fc3'", ")", "\n", "layers", "[", "'fc3'", "]", "=", "net", "\n", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc4'", ")", "\n", "layers", "[", "'fc4'", "]", "=", "net", "\n", "\n", "", "", "return", "net", ",", "layers", "\n", "", "lenet", ".", "default_image_size", "=", "28", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.vgg_arg_scope": [[12, 28], ["tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.l2_regularizer", "tensorflow.zeros_initializer", "tensorflow.contrib.slim.arg_scope"], "function", ["None"], ["def", "vgg_arg_scope", "(", "weight_decay", "=", "0.0005", ")", ":", "\n", "  ", "\"\"\"Defines the VGG arg scope.\n\n  Args:\n    weight_decay: The l2 regularization coefficient.\n\n  Returns:\n    An arg_scope.\n  \"\"\"", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "padding", "=", "'SAME'", ")", "as", "arg_sc", ":", "\n", "          ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "max_pool2d", "]", ",", "padding", "=", "'SAME'", ")", "as", "arg_sc", ":", "\n", "              ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.upscale": [[30, 34], ["tensorflow.image.resize_bilinear", "tensorflow.shape"], "function", ["None"], ["", "", "", "", "def", "upscale", "(", "inputs", ",", "scale_factor", ",", "name", "=", "None", ")", ":", "\n", "    ", "new_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "1", ":", "3", "]", "*", "scale_factor", "+", "scale_factor", "\n", "out", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "inputs", ",", "new_shape", ",", "name", "=", "name", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.crop": [[35, 43], ["inputs.get_shape", "tensorflow.slice", "tf.slice.set_shape", "tensorflow.shape"], "function", ["None"], ["", "def", "crop", "(", "inputs", ",", "size", ",", "offset", ",", "name", "=", "None", ")", ":", "\n", "    ", "size_shape", "=", "tf", ".", "shape", "(", "size", ")", "[", "1", ":", "3", "]", "\n", "h", ",", "w", "=", "size_shape", "[", "0", "]", ",", "size_shape", "[", "1", "]", "\n", "in_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "b", ",", "c", "=", "in_shape", "[", "0", "]", ",", "in_shape", "[", "3", "]", "\n", "result", "=", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "offset", ",", "offset", ",", "0", "]", ",", "[", "-", "1", ",", "h", ",", "w", ",", "-", "1", "]", ",", "name", "=", "name", ")", "\n", "result", ".", "set_shape", "(", "[", "b", ",", "None", ",", "None", ",", "c", "]", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.vgg_16_fcn8s": [[45, 127], ["adda.models.register_model_fn", "contextlib.ExitStack", "cm.enter_context", "cm.enter_context", "cm.enter_context", "tensorflow.pad", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.repeat", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.repeat", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.repeat", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.repeat", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.dropout", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.dropout", "tensorflow.contrib.slim.conv2d", "vgg_16_fcn8s.upscale", "tensorflow.add_to_collection", "tensorflow.contrib.slim.conv2d", "vgg_16_fcn8s.crop", "tensorflow.add_to_collection", "tensorflow.add", "tensorflow.add_to_collection", "vgg_16_fcn8s.upscale", "tensorflow.add_to_collection", "tensorflow.contrib.slim.conv2d", "vgg_16_fcn8s.crop", "tensorflow.add_to_collection", "tensorflow.add", "tensorflow.add_to_collection", "vgg_16_fcn8s.upscale", "tensorflow.add_to_collection", "vgg_16_fcn8s.crop", "tensorflow.add_to_collection", "tensorflow.contrib.slim.utils.convert_collection_to_dict", "tensorflow.contrib.slim.arg_scope", "tensorflow.variable_scope", "tensorflow.contrib.slim.arg_scope", "vgg_16_fcn8s.vgg_arg_scope", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.register_model_fn", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.upscale", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.crop", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.upscale", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.crop", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.upscale", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.crop", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg16_imagenet.vgg_arg_scope"], ["", "@", "register_model_fn", "(", "'vgg_16_fcn8s'", ")", "\n", "def", "vgg_16_fcn8s", "(", "inputs", ",", "\n", "num_classes", "=", "19", ",", "\n", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.5", ",", "\n", "scope", "=", "'vgg_16_fcn8s'", ")", ":", "\n", "    ", "\"\"\"Oxford Net VGG 16-Layers version D Example.\n\n    Note: All the fully_connected layers have been transformed to conv2d layers.\n          To use in classification mode, resize input to 224x224.\n\n    Args:\n      inputs: a tensor of size [batch_size, height, width, channels].\n      num_classes: number of predicted classes.\n      is_training: whether or not the model is being trained.\n      dropout_keep_prob: the probability that activations are kept in the\n        dropout layers during training.\n      scope: Optional scope for the variables.\n\n    Returns:\n      the last op containing the log predictions and end_points dict.\n    \"\"\"", "\n", "net", "=", "inputs", "\n", "with", "ExitStack", "(", ")", "as", "cm", ":", "\n", "        ", "cm", ".", "enter_context", "(", "slim", ".", "arg_scope", "(", "vgg_arg_scope", "(", ")", ")", ")", "\n", "sc", "=", "cm", ".", "enter_context", "(", "tf", ".", "variable_scope", "(", "scope", ",", "'vgg_16'", ",", "[", "inputs", "]", ")", ")", "\n", "end_points_collection", "=", "sc", ".", "name", "+", "'_end_points'", "\n", "# Collect outputs for conv2d, fully_connected and max_pool2d.", "\n", "cm", ".", "enter_context", "(", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ")", "\n", "#net = slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')", "\n", "net", "=", "tf", ".", "pad", "(", "net", ",", "[", "[", "0", ",", "0", "]", ",", "[", "100", ",", "100", "]", ",", "[", "100", ",", "100", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "64", ",", "3", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv1/conv1_1'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "64", ",", "3", ",", "scope", "=", "'conv1/conv1_2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "pool3", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "pool4", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv5'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool5'", ")", "\n", "# Use conv2d instead of fully_connected layers.", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "7", ",", "7", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'fc6'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'fc7'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "scope", "=", "'fc8'", ")", "\n", "upscore2a", "=", "upscale", "(", "net", ",", "2", ",", "name", "=", "'upscore2a'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "upscore2a", ")", "\n", "score_pool4", "=", "slim", ".", "conv2d", "(", "pool4", "*", "0.01", ",", "19", ",", "1", ",", "activation_fn", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "scope", "=", "'score_pool4'", ")", "\n", "score_pool4c", "=", "crop", "(", "score_pool4", ",", "upscore2a", ",", "5", ",", "name", "=", "'score_pool4c'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "score_pool4c", ")", "\n", "fuse_pool4", "=", "tf", ".", "add", "(", "upscore2a", ",", "score_pool4c", ",", "name", "=", "'fuse_pool4'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "fuse_pool4", ")", "\n", "upscore_pool4a", "=", "upscale", "(", "fuse_pool4", ",", "2", ",", "name", "=", "'upscore_pool4a'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "upscore_pool4a", ")", "\n", "score_pool3", "=", "slim", ".", "conv2d", "(", "pool3", "*", "0.0001", ",", "19", ",", "1", ",", "activation_fn", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "scope", "=", "'score_pool3'", ")", "\n", "score_pool3c", "=", "crop", "(", "score_pool3", ",", "upscore_pool4a", ",", "9", ",", "name", "=", "'score_pool3c'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "score_pool3c", ")", "\n", "fuse_pool3", "=", "tf", ".", "add", "(", "upscore_pool4a", ",", "score_pool3c", ",", "name", "=", "'fuse_pool3'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "fuse_pool3", ")", "\n", "upscore8a", "=", "upscale", "(", "fuse_pool3", ",", "8", ",", "name", "=", "'upscore8a'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "upscore8a", ")", "\n", "net", "=", "score", "=", "crop", "(", "upscore8a", ",", "inputs", ",", "31", ",", "name", "=", "'score'", ")", "\n", "tf", ".", "add_to_collection", "(", "end_points_collection", ",", "score", ")", "\n", "# Convert end_points_collection into a end_point dict.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "\n", "end_points_collection", ")", "\n", "return", "net", ",", "end_points", "\n", "", "", "vgg_16_fcn8s", ".", "default_image_size", "=", "None", "# fully convolutional", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.main": [[133, 153], ["click.command", "click.option", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "vgg_16_fcn8s.vgg_16_fcn8s", "numpy.zeros", "end_points.values", "tensorflow.reduce_sum", "tensorflow.train.MomentumOptimizer().minimize", "tf.Session.run", "tf.Session.run", "tf.Session.run", "zip", "shape_ops.append", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.global_variables_initializer", "end_points.keys", "print", "tensorflow.shape", "tensorflow.train.MomentumOptimizer", "dummy[].astype", "dummy[].astype"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg_16_fcn8s.vgg_16_fcn8s"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--gpu'", ",", "default", "=", "'0'", ")", "\n", "def", "main", "(", "gpu", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "shape", "=", "[", "1", ",", "1024", ",", "2048", ",", "3", "]", "\n", "inputs", "=", "tf", ".", "placeholder", "(", "'float'", ",", "shape", ")", "\n", "labels", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "shape", "[", "0", ":", "3", "]", ")", "\n", "net", ",", "end_points", "=", "vgg_16_fcn8s", "(", "inputs", ")", "\n", "dummy", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "shape_ops", "=", "[", "]", "\n", "for", "tensor", "in", "end_points", ".", "values", "(", ")", ":", "\n", "        ", "shape_ops", ".", "append", "(", "tf", ".", "shape", "(", "tensor", ")", ")", "\n", "", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "net", ",", "labels", "=", "labels", ")", ")", "\n", "step", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "0.01", ",", "0.9", ")", ".", "minimize", "(", "loss", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "shapes", "=", "sess", ".", "run", "(", "shape_ops", ",", "feed_dict", "=", "{", "inputs", ":", "dummy", ",", "labels", ":", "dummy", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "}", ")", "\n", "sess", ".", "run", "(", "step", ",", "feed_dict", "=", "{", "inputs", ":", "dummy", ",", "labels", ":", "dummy", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "}", ")", "\n", "for", "end_point", ",", "shape", "in", "zip", "(", "end_points", ".", "keys", "(", ")", ",", "shapes", ")", ":", "\n", "        ", "print", "(", "'{:40} {}'", ".", "format", "(", "end_point", ",", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.register_model_fn": [[9, 18], ["None"], "function", ["None"], ["def", "register_model_fn", "(", "name", ")", ":", "\n", "    ", "def", "decorator", "(", "fn", ")", ":", "\n", "        ", "models", "[", "name", "]", "=", "fn", "\n", "# set default parameters", "\n", "fn", ".", "range", "=", "None", "\n", "fn", ".", "mean", "=", "None", "\n", "fn", ".", "bgr", "=", "False", "\n", "return", "fn", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.get_model_fn": [[19, 21], ["None"], "function", ["None"], ["", "def", "get_model_fn", "(", "name", ")", ":", "\n", "    ", "return", "models", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.preprocessing": [[22, 45], ["tensorflow.cast", "rgb2gray.get_shape", "logging.info", "model.gray2rgb", "logging.info", "logging.info", "tensorflow.image.resize_images", "logging.info", "logging.info", "logging.info", "model.rgb2gray", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.gray2rgb", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.rgb2gray"], ["", "def", "preprocessing", "(", "inputs", ",", "model_fn", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "cast", "(", "inputs", ",", "tf", ".", "float32", ")", "\n", "channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", "\n", "if", "channels", "==", "1", "and", "model_fn", ".", "num_channels", "==", "3", ":", "\n", "        ", "logging", ".", "info", "(", "'Converting grayscale images to RGB'", ")", "\n", "inputs", "=", "gray2rgb", "(", "inputs", ")", "\n", "", "elif", "channels", "==", "3", "and", "model_fn", ".", "num_channels", "==", "1", ":", "\n", "        ", "logging", ".", "info", "(", "'Converting RGB images to grayscale'", ")", "\n", "inputs", "=", "rgb2gray", "(", "inputs", ")", "\n", "", "if", "model_fn", ".", "range", "is", "not", "None", ":", "\n", "        ", "logging", ".", "info", "(", "'Scaling images to range {}.'", ".", "format", "(", "model_fn", ".", "range", ")", ")", "\n", "inputs", "=", "model_fn", ".", "range", "*", "inputs", "\n", "", "if", "model_fn", ".", "default_image_size", "is", "not", "None", ":", "\n", "        ", "size", "=", "model_fn", ".", "default_image_size", "\n", "logging", ".", "info", "(", "'Resizing images to [{}, {}]'", ".", "format", "(", "size", ",", "size", ")", ")", "\n", "inputs", "=", "tf", ".", "image", ".", "resize_images", "(", "inputs", ",", "[", "size", ",", "size", "]", ")", "\n", "", "if", "model_fn", ".", "mean", "is", "not", "None", ":", "\n", "        ", "logging", ".", "info", "(", "'Performing mean subtraction.'", ")", "\n", "inputs", "=", "inputs", "-", "tf", ".", "constant", "(", "model_fn", ".", "mean", ")", "\n", "", "if", "model_fn", ".", "bgr", ":", "\n", "        ", "logging", ".", "info", "(", "'Performing BGR transposition.'", ")", "\n", "inputs", "=", "inputs", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.rgb2gray": [[48, 52], ["tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.constant"], "function", ["None"], ["def", "rgb2gray", "(", "image", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "image", ",", "tf", ".", "constant", "(", "RGB2GRAY", ")", ")", ",", "\n", "2", ",", "\n", "keep_dims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.gray2rgb": [[53, 55], ["tensorflow.multiply", "tensorflow.constant"], "function", ["None"], ["", "def", "gray2rgb", "(", "image", ")", ":", "\n", "    ", "return", "tf", ".", "multiply", "(", "image", ",", "tf", ".", "constant", "(", "RGB2GRAY", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.svhnnet.svhnnet": [[11, 41], ["adda.models.register_model_fn", "collections.OrderedDict", "tensorflow.variable_scope", "contextlib.ExitStack", "stack.enter_context", "stack.enter_context", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.max_pool2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.layers.flatten", "tensorflow.contrib.slim.fully_connected", "tensorflow.contrib.slim.fully_connected", "tensorflow.contrib.slim.fully_connected", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.l2_regularizer"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.register_model_fn"], ["@", "register_model_fn", "(", "'svhnnet'", ")", "\n", "def", "svhnnet", "(", "inputs", ",", "scope", "=", "'svhnnet'", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "layers", "=", "OrderedDict", "(", ")", "\n", "net", "=", "inputs", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "with", "ExitStack", "(", ")", "as", "stack", ":", "\n", "            ", "stack", ".", "enter_context", "(", "\n", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "fully_connected", ",", "slim", ".", "conv2d", "]", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "2.5e-5", ")", ")", ")", "\n", "stack", ".", "enter_context", "(", "\n", "slim", ".", "arg_scope", "(", "[", "slim", ".", "max_pool2d", ",", "slim", ".", "conv2d", "]", ",", "\n", "padding", "=", "'SAME'", ")", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "64", ",", "5", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "3", ",", "stride", "=", "2", ",", "scope", "=", "'pool1'", ")", "\n", "layers", "[", "'pool1'", "]", "=", "net", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "64", ",", "5", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "3", ",", "stride", "=", "2", ",", "scope", "=", "'pool2'", ")", "\n", "layers", "[", "'pool2'", "]", "=", "net", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "128", ",", "5", ",", "scope", "=", "'conv3'", ")", "\n", "layers", "[", "'conv3'", "]", "=", "net", "\n", "net", "=", "tf", ".", "contrib", ".", "layers", ".", "flatten", "(", "net", ")", "\n", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "3072", ",", "scope", "=", "'fc4'", ")", "\n", "layers", "[", "'fc4'", "]", "=", "net", "\n", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "2048", ",", "scope", "=", "'fc5'", ")", "\n", "layers", "[", "'fc5'", "]", "=", "net", "\n", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "10", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc6'", ")", "\n", "layers", "[", "'fc6'", "]", "=", "net", "\n", "", "", "return", "net", ",", "layers", "\n", "", "svhnnet", ".", "default_image_size", "=", "32", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg16_imagenet.vgg_arg_scope": [[52, 67], ["slim.arg_scope", "slim.arg_scope", "slim.l2_regularizer", "tensorflow.zeros_initializer"], "function", ["None"], ["def", "vgg_arg_scope", "(", "weight_decay", "=", "0.0005", ")", ":", "\n", "    ", "\"\"\"Defines the VGG arg scope.\n\n  Args:\n    weight_decay: The l2 regularization coefficient.\n\n  Returns:\n    An arg_scope.\n  \"\"\"", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "padding", "=", "'SAME'", ")", "as", "arg_sc", ":", "\n", "            ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg16_imagenet.vgg_a": [[69, 131], ["tensorflow.variable_scope", "slim.arg_scope", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.utils.convert_collection_to_dict", "tensorflow.squeeze"], "function", ["None"], ["", "", "", "def", "vgg_a", "(", "inputs", ",", "\n", "num_classes", "=", "1000", ",", "\n", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.5", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "scope", "=", "'vgg_a'", ",", "\n", "fc_conv_padding", "=", "'VALID'", ")", ":", "\n", "    ", "\"\"\"Oxford Net VGG 11-Layers version A Example.\n\n  Note: All the fully_connected layers have been transformed to conv2d layers.\n        To use in classification mode, resize input to 224x224.\n\n  Args:\n    inputs: a tensor of size [batch_size, height, width, channels].\n    num_classes: number of predicted classes.\n    is_training: whether or not the model is being trained.\n    dropout_keep_prob: the probability that activations are kept in the dropout\n      layers during training.\n    spatial_squeeze: whether or not should squeeze the spatial dimensions of the\n      outputs. Useful to remove unnecessary dimensions for classification.\n    scope: Optional scope for the variables.\n    fc_conv_padding: the type of padding to use for the fully connected layer\n      that is implemented as a convolutional layer. Use 'SAME' padding if you\n      are applying the network in a fully convolutional manner and want to\n      get a prediction map downsampled by a factor of 32 as an output. Otherwise,\n      the output prediction map will be (input / 32) - 6 in case of 'VALID' padding.\n\n  Returns:\n    the last op containing the log predictions and end_points dict.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'vgg_a'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "        ", "end_points_collection", "=", "sc", ".", "name", "+", "'_end_points'", "\n", "# Collect outputs for conv2d, fully_connected and max_pool2d.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "            ", "net", "=", "slim", ".", "repeat", "(", "inputs", ",", "1", ",", "slim", ".", "conv2d", ",", "64", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "1", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv5'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool5'", ")", "\n", "# Use conv2d instead of fully_connected layers.", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "7", ",", "7", "]", ",", "padding", "=", "fc_conv_padding", ",", "scope", "=", "'fc6'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'fc7'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'fc8'", ")", "\n", "# Convert end_points_collection into a end_point dict.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "if", "spatial_squeeze", ":", "\n", "                ", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'fc8/squeezed'", ")", "\n", "end_points", "[", "sc", ".", "name", "+", "'/fc8'", "]", "=", "net", "\n", "", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg16_imagenet.vgg_16": [[135, 198], ["adda.models.register_model_fn", "tensorflow.variable_scope", "slim.arg_scope", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.utils.convert_collection_to_dict", "tensorflow.squeeze"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.model.register_model_fn"], ["@", "register_model_fn", "(", "'vgg_16'", ")", "\n", "def", "vgg_16", "(", "inputs", ",", "\n", "num_classes", "=", "1000", ",", "\n", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.5", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "scope", "=", "'vgg_16'", ",", "\n", "fc_conv_padding", "=", "'VALID'", ")", ":", "\n", "    ", "\"\"\"Oxford Net VGG 16-Layers version D Example.\n\n  Note: All the fully_connected layers have been transformed to conv2d layers.\n        To use in classification mode, resize input to 224x224.\n\n  Args:\n    inputs: a tensor of size [batch_size, height, width, channels].\n    num_classes: number of predicted classes.\n    is_training: whether or not the model is being trained.\n    dropout_keep_prob: the probability that activations are kept in the dropout\n      layers during training.\n    spatial_squeeze: whether or not should squeeze the spatial dimensions of the\n      outputs. Useful to remove unnecessary dimensions for classification.\n    scope: Optional scope for the variables.\n    fc_conv_padding: the type of padding to use for the fully connected layer\n      that is implemented as a convolutional layer. Use 'SAME' padding if you\n      are applying the network in a fully convolutional manner and want to\n      get a prediction map downsampled by a factor of 32 as an output. Otherwise,\n      the output prediction map will be (input / 32) - 6 in case of 'VALID' padding.\n\n  Returns:\n    the last op containing the log predictions and end_points dict.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'vgg_16'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "        ", "end_points_collection", "=", "sc", ".", "name", "+", "'_end_points'", "\n", "# Collect outputs for conv2d, fully_connected and max_pool2d.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "            ", "net", "=", "slim", ".", "repeat", "(", "inputs", ",", "2", ",", "slim", ".", "conv2d", ",", "64", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv5'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool5'", ")", "\n", "# Use conv2d instead of fully_connected layers.", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "7", ",", "7", "]", ",", "padding", "=", "fc_conv_padding", ",", "scope", "=", "'fc6'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'fc7'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'fc8'", ")", "\n", "# Convert end_points_collection into a end_point dict.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "if", "spatial_squeeze", ":", "\n", "                ", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'fc8/squeezed'", ")", "\n", "end_points", "[", "sc", ".", "name", "+", "'/fc8'", "]", "=", "net", "\n", "", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.models.vgg16_imagenet.vgg_19": [[205, 267], ["tensorflow.variable_scope", "slim.arg_scope", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.utils.convert_collection_to_dict", "tensorflow.squeeze"], "function", ["None"], ["def", "vgg_19", "(", "inputs", ",", "\n", "num_classes", "=", "1000", ",", "\n", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.5", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "scope", "=", "'vgg_19'", ",", "\n", "fc_conv_padding", "=", "'VALID'", ")", ":", "\n", "    ", "\"\"\"Oxford Net VGG 19-Layers version E Example.\n\n  Note: All the fully_connected layers have been transformed to conv2d layers.\n        To use in classification mode, resize input to 224x224.\n\n  Args:\n    inputs: a tensor of size [batch_size, height, width, channels].\n    num_classes: number of predicted classes.\n    is_training: whether or not the model is being trained.\n    dropout_keep_prob: the probability that activations are kept in the dropout\n      layers during training.\n    spatial_squeeze: whether or not should squeeze the spatial dimensions of the\n      outputs. Useful to remove unnecessary dimensions for classification.\n    scope: Optional scope for the variables.\n    fc_conv_padding: the type of padding to use for the fully connected layer\n      that is implemented as a convolutional layer. Use 'SAME' padding if you\n      are applying the network in a fully convolutional manner and want to\n      get a prediction map downsampled by a factor of 32 as an output. Otherwise,\n      the output prediction map will be (input / 32) - 6 in case of 'VALID' padding.\n\n  Returns:\n    the last op containing the log predictions and end_points dict.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'vgg_19'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "        ", "end_points_collection", "=", "sc", ".", "name", "+", "'_end_points'", "\n", "# Collect outputs for conv2d, fully_connected and max_pool2d.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "            ", "net", "=", "slim", ".", "repeat", "(", "inputs", ",", "2", ",", "slim", ".", "conv2d", ",", "64", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "4", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "4", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "4", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv5'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool5'", ")", "\n", "# Use conv2d instead of fully_connected layers.", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "7", ",", "7", "]", ",", "padding", "=", "fc_conv_padding", ",", "scope", "=", "'fc6'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'fc7'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'fc8'", ")", "\n", "# Convert end_points_collection into a end_point dict.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "if", "spatial_squeeze", ":", "\n", "                ", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'fc8/squeezed'", ")", "\n", "end_points", "[", "sc", ".", "name", "+", "'/fc8'", "]", "=", "net", "\n", "", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.vda2017.VDA2017Synthetic.__init__": [[17, 32], ["adda.data.DatasetGroup.__init__", "os.path.join", "vda2017.VDA2017Synthetic.file_names.keys", "adda.data.dataset.FilenameDataset", "setattr", "open", "zip", "os.path.join", "list", "os.path.join", "map", "line.split", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "shuffle", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "DatasetGroup", ".", "__init__", "(", "self", ",", "'vda2017s'", ",", "path", "=", "path", ",", "download", "=", "False", ")", "\n", "self", ".", "image_shape", "=", "(", "384", ",", "216", ",", "3", ")", "\n", "self", ".", "label_shape", "=", "(", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "base_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'train'", ")", "\n", "\n", "for", "split", "in", "self", ".", "file_names", ".", "keys", "(", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "self", ".", "file_names", "[", "split", "]", ")", ")", "as", "f", ":", "\n", "                ", "img_file_names", ",", "labels", "=", "zip", "(", "*", "[", "line", ".", "split", "(", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", ")", "\n", "\n", "", "full_file_names", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "x", ")", "for", "x", "in", "img_file_names", "]", "\n", "\n", "dataset", "=", "FilenameDataset", "(", "full_file_names", ",", "list", "(", "map", "(", "int", ",", "labels", ")", ")", ",", "'png'", ")", "\n", "setattr", "(", "self", ",", "split", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.vda2017.VDA2017Coco.__init__": [[41, 59], ["adda.data.DatasetGroup.__init__", "os.path.join", "vda2017.VDA2017Coco.file_names.keys", "logging.info", "list", "max", "adda.data.dataset.FilenameDataset", "setattr", "open", "zip", "os.path.join", "map", "os.path.join", "numpy.max", "line.split", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "shuffle", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "DatasetGroup", ".", "__init__", "(", "self", ",", "'vda2017coco'", ",", "path", "=", "path", ",", "download", "=", "False", ")", "\n", "self", ".", "image_shape", "=", "(", "None", ",", "None", ",", "3", ")", "\n", "self", ".", "label_shape", "=", "(", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "base_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'validation'", ")", "\n", "\n", "for", "split", "in", "self", ".", "file_names", ".", "keys", "(", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "self", ".", "file_names", "[", "split", "]", ")", ")", "as", "f", ":", "\n", "                ", "img_file_names", ",", "labels", "=", "zip", "(", "*", "[", "line", ".", "split", "(", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", ")", "\n", "\n", "", "full_file_names", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "x", ")", "for", "x", "in", "img_file_names", "]", "\n", "int_label_list", "=", "list", "(", "map", "(", "int", ",", "labels", ")", ")", "\n", "self", ".", "num_classes", "=", "max", "(", "self", ".", "num_classes", ",", "np", ".", "max", "(", "int_label_list", ")", "+", "1", ")", "\n", "dataset", "=", "FilenameDataset", "(", "full_file_names", ",", "int_label_list", ",", "'jpeg'", ")", "\n", "setattr", "(", "self", ",", "split", ",", "dataset", ")", "\n", "\n", "", "logging", ".", "info", "(", "'detected %d classes in input data'", "%", "self", ".", "num_classes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.usps.USPS.__init__": [[31, 37], ["adda.data.DatasetGroup.__init__", "usps.USPS._load_datasets"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN._load_datasets"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "shuffle", "=", "True", ",", "download", "=", "True", ")", ":", "\n", "        ", "DatasetGroup", ".", "__init__", "(", "self", ",", "'usps'", ",", "path", "=", "path", ",", "download", "=", "download", ")", "\n", "self", ".", "image_shape", "=", "(", "16", ",", "16", ",", "1", ")", "\n", "self", ".", "label_shape", "=", "(", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "_load_datasets", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.usps.USPS.download": [[38, 47], ["usps.USPS.get_path", "usps.USPS.data_files.values", "os.path.exists", "os.mkdir", "usps.USPS.get_path", "os.path.exists", "urllib.parse.urljoin", "adda.data.util.maybe_download"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.util.maybe_download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "data_dir", "=", "self", ".", "get_path", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "data_dir", ")", "\n", "", "for", "filename", "in", "self", ".", "data_files", ".", "values", "(", ")", ":", "\n", "            ", "path", "=", "self", ".", "get_path", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "url", "=", "urljoin", "(", "self", ".", "base_url", ",", "filename", ")", "\n", "util", ".", "maybe_download", "(", "url", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.usps.USPS._load_datasets": [[48, 61], ["usps.USPS._read_datafile", "usps.USPS._read_datafile", "adda.data.ImageDataset", "adda.data.ImageDataset", "usps.USPS.get_path", "usps.USPS.data_files.items"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_datafile", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_datafile", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path"], ["", "", "", "def", "_load_datasets", "(", "self", ")", ":", "\n", "        ", "abspaths", "=", "{", "name", ":", "self", ".", "get_path", "(", "path", ")", "\n", "for", "name", ",", "path", "in", "self", ".", "data_files", ".", "items", "(", ")", "}", "\n", "train_images", ",", "train_labels", "=", "self", ".", "_read_datafile", "(", "abspaths", "[", "'train'", "]", ")", "\n", "test_images", ",", "test_labels", "=", "self", ".", "_read_datafile", "(", "abspaths", "[", "'test'", "]", ")", "\n", "self", ".", "train", "=", "ImageDataset", "(", "train_images", ",", "train_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "test", "=", "ImageDataset", "(", "test_images", ",", "test_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.usps.USPS._read_datafile": [[62, 75], ["numpy.array", "numpy.array().reshape", "gzip.GzipFile", "line.strip().split", "numpy.array.append", "numpy.array().reshape.append", "numpy.array", "float", "line.strip", "float"], "methods", ["None"], ["", "def", "_read_datafile", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Read the proprietary USPS digits data file.\"\"\"", "\n", "labels", ",", "images", "=", "[", "]", ",", "[", "]", "\n", "with", "gzip", ".", "GzipFile", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "vals", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "labels", ".", "append", "(", "float", "(", "vals", "[", "0", "]", ")", ")", "\n", "images", ".", "append", "(", "[", "float", "(", "val", ")", "for", "val", "in", "vals", "[", "1", ":", "]", "]", ")", "\n", "", "", "labels", "=", "np", ".", "array", "(", "labels", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "[", "labels", "==", "10", "]", "=", "0", "# fix weird 0 labels", "\n", "images", "=", "np", ".", "array", "(", "images", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "16", ",", "16", ",", "1", ")", "\n", "images", "=", "(", "images", "+", "1", ")", "/", "2", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.usps.USPS1800.__init__": [[82, 88], ["usps.USPS.__init__", "hash"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ",", "path", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "self", ".", "seed", "=", "hash", "(", "self", ".", "name", ")", "&", "0xffffffff", "\n", "", "else", ":", "\n", "            ", "self", ".", "seed", "=", "seed", "\n", "", "USPS", ".", "__init__", "(", "self", ",", "path", "=", "path", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.usps.USPS1800._load_datasets": [[89, 107], ["numpy.random.RandomState", "usps.USPS1800._read_datafile", "inds.sort", "usps.USPS1800._read_datafile", "adda.data.ImageDataset", "adda.data.ImageDataset", "usps.USPS1800.get_path", "numpy.random.RandomState.permutation", "usps.USPS1800.data_files.items", "len"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_datafile", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_datafile", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path"], ["", "def", "_load_datasets", "(", "self", ")", ":", "\n", "        ", "abspaths", "=", "{", "name", ":", "self", ".", "get_path", "(", "path", ")", "\n", "for", "name", ",", "path", "in", "self", ".", "data_files", ".", "items", "(", ")", "}", "\n", "rand", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "train_images", ",", "train_labels", "=", "self", ".", "_read_datafile", "(", "abspaths", "[", "'train'", "]", ")", "\n", "inds", "=", "rand", ".", "permutation", "(", "len", "(", "train_images", ")", ")", "[", ":", "1800", "]", "\n", "inds", ".", "sort", "(", ")", "\n", "train_images", "=", "train_images", "[", "inds", "]", "\n", "train_labels", "=", "train_labels", "[", "inds", "]", "\n", "test_images", ",", "test_labels", "=", "self", ".", "_read_datafile", "(", "abspaths", "[", "'test'", "]", ")", "\n", "self", ".", "train", "=", "ImageDataset", "(", "train_images", ",", "train_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "test", "=", "ImageDataset", "(", "test_images", ",", "test_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST.__init__": [[37, 43], ["adda.data.DatasetGroup.__init__", "mnist.MNIST._load_datasets"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN._load_datasets"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "DatasetGroup", ".", "__init__", "(", "self", ",", "'mnist'", ",", "path", ")", "\n", "self", ".", "image_shape", "=", "(", "28", ",", "28", ",", "1", ")", "\n", "self", ".", "label_shape", "=", "(", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "_load_datasets", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST.download": [[44, 53], ["mnist.MNIST.get_path", "mnist.MNIST.data_files.values", "os.path.exists", "os.mkdir", "mnist.MNIST.get_path", "os.path.exists", "urllib.parse.urljoin", "adda.data.util.maybe_download"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.util.maybe_download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "data_dir", "=", "self", ".", "get_path", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "data_dir", ")", "\n", "", "for", "filename", "in", "self", ".", "data_files", ".", "values", "(", ")", ":", "\n", "            ", "path", "=", "self", ".", "get_path", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "url", "=", "urljoin", "(", "self", ".", "base_url", ",", "filename", ")", "\n", "util", ".", "maybe_download", "(", "url", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._load_datasets": [[54, 69], ["mnist.MNIST._read_images", "mnist.MNIST._read_labels", "mnist.MNIST._read_images", "mnist.MNIST._read_labels", "adda.data.ImageDataset", "adda.data.ImageDataset", "mnist.MNIST.get_path", "mnist.MNIST.data_files.items"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_images", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_labels", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_images", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_labels", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path"], ["", "", "", "def", "_load_datasets", "(", "self", ")", ":", "\n", "        ", "abspaths", "=", "{", "name", ":", "self", ".", "get_path", "(", "path", ")", "\n", "for", "name", ",", "path", "in", "self", ".", "data_files", ".", "items", "(", ")", "}", "\n", "train_images", "=", "self", ".", "_read_images", "(", "abspaths", "[", "'train_images'", "]", ")", "\n", "train_labels", "=", "self", ".", "_read_labels", "(", "abspaths", "[", "'train_labels'", "]", ")", "\n", "test_images", "=", "self", ".", "_read_images", "(", "abspaths", "[", "'test_images'", "]", ")", "\n", "test_labels", "=", "self", ".", "_read_labels", "(", "abspaths", "[", "'test_labels'", "]", ")", "\n", "self", ".", "train", "=", "ImageDataset", "(", "train_images", ",", "train_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "test", "=", "ImageDataset", "(", "test_images", ",", "test_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_datafile": [[70, 86], ["gzip.GzipFile", "struct.unpack", "f.read", "numpy.frombuffer", "data.reshape.reshape.reshape", "struct.unpack", "ValueError", "f.read", "functools.reduce", "f.read"], "methods", ["None"], ["", "def", "_read_datafile", "(", "self", ",", "path", ",", "expected_dims", ")", ":", "\n", "        ", "\"\"\"Helper function to read a file in IDX format.\"\"\"", "\n", "base_magic_num", "=", "2048", "\n", "with", "gzip", ".", "GzipFile", "(", "path", ")", "as", "f", ":", "\n", "            ", "magic_num", "=", "struct", ".", "unpack", "(", "'>I'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "expected_magic_num", "=", "base_magic_num", "+", "expected_dims", "\n", "if", "magic_num", "!=", "expected_magic_num", ":", "\n", "                ", "raise", "ValueError", "(", "'Incorrect MNIST magic number (expected '", "\n", "'{}, got {})'", "\n", ".", "format", "(", "expected_magic_num", ",", "magic_num", ")", ")", "\n", "", "dims", "=", "struct", ".", "unpack", "(", "'>'", "+", "'I'", "*", "expected_dims", ",", "\n", "f", ".", "read", "(", "4", "*", "expected_dims", ")", ")", "\n", "buf", "=", "f", ".", "read", "(", "reduce", "(", "operator", ".", "mul", ",", "dims", ")", ")", "\n", "data", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "data", "=", "data", ".", "reshape", "(", "*", "dims", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_images": [[87, 93], ["mnist.MNIST._read_datafile().astype().reshape", "mnist.MNIST._read_datafile().astype", "mnist.MNIST._read_datafile"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_datafile"], ["", "", "def", "_read_images", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Read an MNIST image file.\"\"\"", "\n", "return", "(", "self", ".", "_read_datafile", "(", "path", ",", "3", ")", "\n", ".", "astype", "(", "np", ".", "float32", ")", "\n", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", "\n", "/", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_labels": [[94, 97], ["mnist.MNIST._read_datafile"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_datafile"], ["", "def", "_read_labels", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Read an MNIST label file.\"\"\"", "\n", "return", "self", ".", "_read_datafile", "(", "path", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST2000.__init__": [[104, 110], ["mnist.MNIST.__init__", "hash"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ",", "path", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "self", ".", "seed", "=", "hash", "(", "self", ".", "name", ")", "&", "0xffffffff", "\n", "", "else", ":", "\n", "            ", "self", ".", "seed", "=", "seed", "\n", "", "MNIST", ".", "__init__", "(", "self", ",", "path", "=", "path", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST2000._load_datasets": [[111, 131], ["numpy.random.RandomState", "mnist.MNIST2000._read_images", "mnist.MNIST2000._read_labels", "inds.sort", "mnist.MNIST2000._read_images", "mnist.MNIST2000._read_labels", "adda.data.ImageDataset", "adda.data.ImageDataset", "mnist.MNIST2000.get_path", "numpy.random.RandomState.permutation", "mnist.MNIST2000.data_files.items", "len"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_images", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_labels", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_images", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.mnist.MNIST._read_labels", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path"], ["", "def", "_load_datasets", "(", "self", ")", ":", "\n", "        ", "abspaths", "=", "{", "name", ":", "self", ".", "get_path", "(", "path", ")", "\n", "for", "name", ",", "path", "in", "self", ".", "data_files", ".", "items", "(", ")", "}", "\n", "rand", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "train_images", "=", "self", ".", "_read_images", "(", "abspaths", "[", "'train_images'", "]", ")", "\n", "train_labels", "=", "self", ".", "_read_labels", "(", "abspaths", "[", "'train_labels'", "]", ")", "\n", "inds", "=", "rand", ".", "permutation", "(", "len", "(", "train_images", ")", ")", "[", ":", "2000", "]", "\n", "inds", ".", "sort", "(", ")", "\n", "train_images", "=", "train_images", "[", "inds", "]", "\n", "train_labels", "=", "train_labels", "[", "inds", "]", "\n", "test_images", "=", "self", ".", "_read_images", "(", "abspaths", "[", "'test_images'", "]", ")", "\n", "test_labels", "=", "self", ".", "_read_labels", "(", "abspaths", "[", "'test_labels'", "]", ")", "\n", "self", ".", "train", "=", "ImageDataset", "(", "train_images", ",", "train_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "test", "=", "ImageDataset", "(", "test_images", ",", "test_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.SegmentationDataset.__init__": [[9, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "labels", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "images", "=", "images", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.SegmentationDataset.__len__": [[14, 16], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.SegmentationDataset.tf_ops": [[17, 35], ["tensorflow.train.slice_input_producer", "tensorflow.read_file", "tensorflow.image.decode_image", "tensorflow.cast", "tensorflow.cast.set_shape", "tensorflow.read_file", "tensorflow.image.decode_image", "tensorflow.cast", "tensorflow.cast.set_shape", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["", "def", "tf_ops", "(", "self", ",", "capacity", "=", "32", ",", "produce_filenames", "=", "False", ")", ":", "\n", "        ", "im_path", ",", "label_path", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "\n", "[", "tf", ".", "constant", "(", "self", ".", "images", ")", ",", "tf", ".", "constant", "(", "self", ".", "labels", ")", "]", ",", "\n", "capacity", "=", "capacity", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "im", "=", "tf", ".", "read_file", "(", "im_path", ")", "\n", "im", "=", "tf", ".", "image", ".", "decode_image", "(", "im", ",", "channels", "=", "3", ")", "\n", "im", "=", "tf", ".", "cast", "(", "im", ",", "tf", ".", "float32", ")", "\n", "im", ".", "set_shape", "(", "(", "1024", ",", "2048", ",", "3", ")", ")", "\n", "label", "=", "tf", ".", "read_file", "(", "label_path", ")", "\n", "label", "=", "tf", ".", "image", ".", "decode_image", "(", "label", ",", "channels", "=", "1", ")", "\n", "label", "=", "label", "[", ":", ",", ":", ",", "0", "]", "\n", "label", "=", "tf", ".", "cast", "(", "label", ",", "tf", ".", "int32", ")", "\n", "label", ".", "set_shape", "(", "(", "1024", ",", "2048", ")", ")", "\n", "if", "produce_filenames", ":", "\n", "            ", "return", "im", ",", "label", ",", "im_path", ",", "label_path", "\n", "", "else", ":", "\n", "            ", "return", "im", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.Cityscapes.__init__": [[43, 49], ["adda.data.dataset.DatasetGroup.__init__", "cityscapes.Cityscapes._read_datasets"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.Cityscapes._read_datasets"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "shuffle", "=", "True", ",", "download", "=", "False", ",", "\n", "half_crop", "=", "False", ")", ":", "\n", "        ", "DatasetGroup", ".", "__init__", "(", "self", ",", "'cityscapes'", ",", "path", "=", "path", ",", "download", "=", "download", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "half_crop", "=", "half_crop", "\n", "self", ".", "_read_datasets", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.Cityscapes._read_datasets": [[50, 69], ["open", "list", "open", "list", "open", "list", "open", "list", "cityscapes.HalfCropDataset", "cityscapes.HalfCropDataset", "cityscapes.SegmentationDataset", "cityscapes.SegmentationDataset", "cityscapes.Cityscapes.get_path", "cityscapes.Cityscapes.get_path", "cityscapes.Cityscapes.get_path", "cityscapes.Cityscapes.get_path", "cityscapes.Cityscapes.get_path", "cityscapes.Cityscapes.get_path", "cityscapes.Cityscapes.get_path", "cityscapes.Cityscapes.get_path", "line.strip", "line.strip", "line.strip", "line.strip"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path"], ["", "def", "_read_datasets", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "get_path", "(", "'train_image_rel.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "train_images", "=", "list", "(", "self", ".", "get_path", "(", "line", ".", "strip", "(", ")", ")", "for", "line", "in", "f", ")", "\n", "", "with", "open", "(", "self", ".", "get_path", "(", "'train_label_rel.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "train_labels", "=", "list", "(", "self", ".", "get_path", "(", "line", ".", "strip", "(", ")", ")", "for", "line", "in", "f", ")", "\n", "", "with", "open", "(", "self", ".", "get_path", "(", "'val_image_rel.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "val_images", "=", "list", "(", "self", ".", "get_path", "(", "line", ".", "strip", "(", ")", ")", "for", "line", "in", "f", ")", "\n", "", "with", "open", "(", "self", ".", "get_path", "(", "'val_label_rel.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "val_labels", "=", "list", "(", "self", ".", "get_path", "(", "line", ".", "strip", "(", ")", ")", "for", "line", "in", "f", ")", "\n", "", "if", "self", ".", "half_crop", ":", "\n", "            ", "self", ".", "train", "=", "HalfCropDataset", "(", "train_images", ",", "train_labels", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "val", "=", "HalfCropDataset", "(", "val_images", ",", "val_labels", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "=", "SegmentationDataset", "(", "train_images", ",", "train_labels", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "val", "=", "SegmentationDataset", "(", "val_images", ",", "val_labels", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.HalfCropDataset.__init__": [[73, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "labels", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "images", "=", "images", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "overlap", "=", "210", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.HalfCropDataset.__len__": [[79, 81], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.HalfCropDataset.tf_ops": [[82, 113], ["tensorflow.train.slice_input_producer", "tensorflow.FIFOQueue", "tensorflow.read_file", "tensorflow.image.decode_image", "tensorflow.cast", "left_im.set_shape", "right_im.set_shape", "tensorflow.read_file", "tensorflow.image.decode_image", "tensorflow.cast", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat.set_shape", "tensorflow.concat.set_shape", "tensorflow.stack", "tensorflow.stack", "tensorflow.FIFOQueue.enqueue_many", "tensorflow.train.QueueRunner", "tensorflow.train.add_queue_runner", "tensorflow.FIFOQueue.dequeue", "tensorflow.ones", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["", "def", "tf_ops", "(", "self", ",", "capacity", "=", "32", ")", ":", "\n", "        ", "im_path", ",", "label_path", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "\n", "[", "tf", ".", "constant", "(", "self", ".", "images", ")", ",", "tf", ".", "constant", "(", "self", ".", "labels", ")", "]", ",", "\n", "capacity", "=", "capacity", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "im_shape", "=", "[", "1024", ",", "1024", "+", "self", ".", "overlap", ",", "3", "]", "\n", "label_shape", "=", "[", "1024", ",", "1024", "+", "self", ".", "overlap", "]", "\n", "queue", "=", "tf", ".", "FIFOQueue", "(", "capacity", ",", "[", "tf", ".", "float32", ",", "tf", ".", "int32", "]", ",", "\n", "shapes", "=", "[", "im_shape", ",", "label_shape", "]", ")", "\n", "im", "=", "tf", ".", "read_file", "(", "im_path", ")", "\n", "im", "=", "tf", ".", "image", ".", "decode_image", "(", "im", ",", "channels", "=", "3", ")", "\n", "im", "=", "tf", ".", "cast", "(", "im", ",", "tf", ".", "float32", ")", "\n", "left_im", "=", "im", "[", ":", ",", ":", "1024", "+", "self", ".", "overlap", ",", ":", "]", "\n", "right_im", "=", "im", "[", ":", ",", "1024", "-", "self", ".", "overlap", ":", ",", ":", "]", "\n", "left_im", ".", "set_shape", "(", "im_shape", ")", "\n", "right_im", ".", "set_shape", "(", "im_shape", ")", "\n", "label", "=", "tf", ".", "read_file", "(", "label_path", ")", "\n", "label", "=", "tf", ".", "image", ".", "decode_image", "(", "label", ",", "channels", "=", "1", ")", "\n", "label", "=", "label", "[", ":", ",", ":", ",", "0", "]", "\n", "label", "=", "tf", ".", "cast", "(", "label", ",", "tf", ".", "int32", ")", "\n", "label_pad", "=", "tf", ".", "ones", "(", "[", "1024", ",", "self", ".", "overlap", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "255", "\n", "left_label", "=", "tf", ".", "concat", "(", "[", "label", "[", ":", ",", ":", "1024", "]", ",", "label_pad", "]", ",", "1", ")", "\n", "right_label", "=", "tf", ".", "concat", "(", "[", "label_pad", ",", "label", "[", ":", ",", "1024", ":", "]", "]", ",", "1", ")", "\n", "left_label", ".", "set_shape", "(", "label_shape", ")", "\n", "right_label", ".", "set_shape", "(", "label_shape", ")", "\n", "ims", "=", "tf", ".", "stack", "(", "[", "left_im", ",", "right_im", "]", ",", "0", ")", "\n", "labels", "=", "tf", ".", "stack", "(", "[", "left_label", ",", "right_label", "]", ",", "0", ")", "\n", "enqueue_op", "=", "queue", ".", "enqueue_many", "(", "[", "ims", ",", "labels", "]", ")", "\n", "qr", "=", "tf", ".", "train", ".", "QueueRunner", "(", "queue", ",", "[", "enqueue_op", "]", ")", "\n", "tf", ".", "train", ".", "add_queue_runner", "(", "qr", ")", "\n", "return", "queue", ".", "dequeue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.cityscapes.CityscapesHalfCrop": [[114, 117], ["adda.data.dataset.register_dataset", "cityscapes.Cityscapes"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.register_dataset"], ["", "", "@", "register_dataset", "(", "'cityscapes_half_crop'", ")", "\n", "def", "CityscapesHalfCrop", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "Cityscapes", "(", "half_crop", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.__init__": [[12, 19], ["os.path.join", "dataset.DatasetGroup.download", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.download"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path", "=", "None", ",", "download", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'data'", ")", "\n", "", "self", ".", "path", "=", "path", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path": [[20, 22], ["os.path.join"], "methods", ["None"], ["", "", "def", "get_path", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "self", ".", "name", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.download": [[23, 30], ["None"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download the dataset(s).\n\n        This method only performs the download if necessary. If the dataset\n        already resides on disk, it is a no-op.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.ImageDataset.__init__": [[33, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "labels", ",", "image_shape", "=", "None", ",", "label_shape", "=", "None", ",", "\n", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "images", "=", "images", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "label_shape", "=", "label_shape", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.ImageDataset.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.ImageDataset.__iter__": [[44, 50], ["numpy.arange", "len", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "inds", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "", "for", "ind", "in", "inds", ":", "\n", "            ", "yield", "self", ".", "images", "[", "ind", "]", ",", "self", ".", "labels", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.ImageDataset.feed": [[51, 57], ["None"], "methods", ["None"], ["", "", "def", "feed", "(", "self", ",", "im", ",", "label", ",", "epochs", "=", "None", ")", ":", "\n", "        ", "epochs_elapsed", "=", "0", "\n", "while", "epochs", "is", "None", "or", "epochs_elapsed", "<", "epochs", ":", "\n", "            ", "for", "entry", "in", "self", ":", "\n", "                ", "yield", "{", "im", ":", "entry", "[", "0", "]", ",", "label", ":", "entry", "[", "1", "]", "}", "\n", "", "epochs_elapsed", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.ImageDataset.tf_ops": [[58, 71], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.FIFOQueue", "tensorflow.FIFOQueue.enqueue", "tensorflow.contrib.learn.python.learn.dataframe.queues.feeding_queue_runner.FeedingQueueRunner", "tensorflow.train.add_queue_runner", "tensorflow.FIFOQueue.dequeue", "dataset.ImageDataset.feed"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.ImageDataset.feed"], ["", "", "def", "tf_ops", "(", "self", ",", "capacity", "=", "32", ")", ":", "\n", "        ", "im", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "self", ".", "image_shape", ")", "\n", "label", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "self", ".", "label_shape", ")", "\n", "if", "self", ".", "image_shape", "is", "None", "or", "self", ".", "label_shape", "is", "None", ":", "\n", "            ", "shapes", "=", "None", "\n", "", "else", ":", "\n", "            ", "shapes", "=", "[", "self", ".", "image_shape", ",", "self", ".", "label_shape", "]", "\n", "", "queue", "=", "tf", ".", "FIFOQueue", "(", "capacity", ",", "[", "tf", ".", "float32", ",", "tf", ".", "int32", "]", ",", "shapes", "=", "shapes", ")", "\n", "enqueue_op", "=", "queue", ".", "enqueue", "(", "[", "im", ",", "label", "]", ")", "\n", "fqr", "=", "FeedingQueueRunner", "(", "queue", ",", "[", "enqueue_op", "]", ",", "\n", "feed_fns", "=", "[", "self", ".", "feed", "(", "im", ",", "label", ")", ".", "__next__", "]", ")", "\n", "tf", ".", "train", ".", "add_queue_runner", "(", "fqr", ")", "\n", "return", "queue", ".", "dequeue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.__init__": [[74, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_fn_list", ",", "label_list", ",", "filetype", ")", ":", "\n", "        ", "assert", "filetype", "in", "[", "'png'", ",", "'jpeg'", "]", "\n", "self", ".", "_image_fn_list", "=", "image_fn_list", "\n", "self", ".", "_label_list", "=", "label_list", "\n", "_decoders", "=", "{", "\n", "'jpeg'", ":", "tf", ".", "image", ".", "decode_jpeg", ",", "\n", "'png'", ":", "tf", ".", "image", ".", "decode_png", "\n", "}", "\n", "self", ".", "_decoder", "=", "_decoders", "[", "filetype", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.FilenameDataset.tf_ops": [[87, 99], ["tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.train.slice_input_producer", "tensorflow.read_file", "dataset.FilenameDataset._decoder"], "methods", ["None"], ["", "def", "tf_ops", "(", "self", ",", "capacity", "=", "32", ")", ":", "\n", "        ", "images", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_image_fn_list", ",", "dtype", "=", "dtypes", ".", "string", ")", "\n", "labels", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_label_list", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "\n", "# Makes an input queue", "\n", "im_fn_q", ",", "labl_q", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "\n", "[", "images", ",", "labels", "]", ",", "capacity", "=", "capacity", ",", "shuffle", "=", "True", ")", "\n", "\n", "file_contents_q", "=", "tf", ".", "read_file", "(", "im_fn_q", ")", "\n", "im_q", "=", "self", ".", "_decoder", "(", "file_contents_q", ",", "channels", "=", "3", ")", "\n", "\n", "return", "im_q", ",", "labl_q", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.register_dataset": [[104, 110], ["None"], "function", ["None"], ["def", "register_dataset", "(", "name", ")", ":", "\n", "    ", "def", "decorator", "(", "cls", ")", ":", "\n", "        ", "datasets", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.get_dataset": [[112, 114], ["None"], "function", ["None"], ["", "def", "get_dataset", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "datasets", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.util.maybe_download": [[9, 16], ["os.path.exists", "logger.info", "util.download"], "function", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.download"], ["from", "tqdm", "import", "tqdm", "\n", "\n", "\n", "class", "TqdmHandler", "(", "logging", ".", "StreamHandler", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "logging", ".", "StreamHandler", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.util.download": [[18, 25], ["requests.get", "open", "requests.get.iter_content", "f.write"], "function", ["None"], ["        ", "msg", "=", "self", ".", "format", "(", "record", ")", "\n", "tqdm", ".", "write", "(", "msg", ")", "\n", "\n", "\n", "", "", "def", "config_logging", "(", "logfile", "=", "None", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'logging.yml'", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ".", "read", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__": [[32, 39], ["adda.data.DatasetGroup.__init__", "svhn.SVHN._load_datasets"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.__init__", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN._load_datasets"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "DatasetGroup", ".", "__init__", "(", "self", ",", "'svhn'", ",", "path", "=", "path", ")", "\n", "self", ".", "train_on_extra", "=", "False", "# disabled", "\n", "self", ".", "image_shape", "=", "(", "32", ",", "32", ",", "3", ")", "\n", "self", ".", "label_shape", "=", "(", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "_load_datasets", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN.download": [[40, 49], ["svhn.SVHN.get_path", "svhn.SVHN.data_files.values", "os.path.exists", "os.mkdir", "svhn.SVHN.get_path", "os.path.exists", "urllib.parse.urljoin", "adda.data.util.maybe_download"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.util.maybe_download"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "data_dir", "=", "self", ".", "get_path", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "data_dir", ")", "\n", "", "for", "filename", "in", "self", ".", "data_files", ".", "values", "(", ")", ":", "\n", "            ", "path", "=", "self", ".", "get_path", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "url", "=", "urljoin", "(", "self", ".", "base_url", ",", "filename", ")", "\n", "util", ".", "maybe_download", "(", "url", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.svhn.SVHN._load_datasets": [[50, 78], ["scipy.io.loadmat", "train_mat[].transpose", "train_mat[].squeeze", "scipy.io.loadmat", "test_mat[].transpose", "test_mat[].squeeze", "adda.data.ImageDataset", "adda.data.ImageDataset", "svhn.SVHN.get_path", "scipy.io.loadmat", "numpy.vstack", "numpy.concatenate", "numpy.vstack.astype", "test_mat[].transpose.astype", "svhn.SVHN.data_files.items", "extra_mat[].transpose", "extra_mat[].squeeze"], "methods", ["home.repos.pwc.inspect_result.VisionLearningGroup_taskcv-2017-public.data.dataset.DatasetGroup.get_path"], ["", "", "", "def", "_load_datasets", "(", "self", ")", ":", "\n", "        ", "abspaths", "=", "{", "name", ":", "self", ".", "get_path", "(", "path", ")", "\n", "for", "name", ",", "path", "in", "self", ".", "data_files", ".", "items", "(", ")", "}", "\n", "train_mat", "=", "loadmat", "(", "abspaths", "[", "'train'", "]", ")", "\n", "train_images", "=", "train_mat", "[", "'X'", "]", ".", "transpose", "(", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "train_labels", "=", "train_mat", "[", "'y'", "]", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "train_on_extra", ":", "\n", "            ", "extra_mat", "=", "loadmat", "(", "abspaths", "[", "'extra'", "]", ")", "\n", "train_images", "=", "np", ".", "vstack", "(", "(", "train_images", ",", "\n", "extra_mat", "[", "'X'", "]", ".", "transpose", "(", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", ")", ")", "\n", "train_labels", "=", "np", ".", "concatenate", "(", "(", "train_labels", ",", "\n", "extra_mat", "[", "'y'", "]", ".", "squeeze", "(", ")", ")", ")", "\n", "", "train_labels", "[", "train_labels", "==", "10", "]", "=", "0", "\n", "train_images", "=", "train_images", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "test_mat", "=", "loadmat", "(", "abspaths", "[", "'test'", "]", ")", "\n", "test_images", "=", "test_mat", "[", "'X'", "]", ".", "transpose", "(", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "test_images", "=", "test_images", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "test_labels", "=", "test_mat", "[", "'y'", "]", ".", "squeeze", "(", ")", "\n", "test_labels", "[", "test_labels", "==", "10", "]", "=", "0", "\n", "# raise", "\n", "self", ".", "train", "=", "ImageDataset", "(", "train_images", ",", "train_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "self", ".", "test", "=", "ImageDataset", "(", "test_images", ",", "test_labels", ",", "\n", "image_shape", "=", "self", ".", "image_shape", ",", "\n", "label_shape", "=", "self", ".", "label_shape", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "", "", ""]]}