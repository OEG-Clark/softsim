{"home.repos.pwc.inspect_result.agupt013_enhancedRec.None.savePredictedStack.saveImgs": [[13, 21], ["torchvision.utils.save_image", "torch.cat"], "function", ["None"], ["def", "saveImgs", "(", "img1", ",", "img2", ",", "savePath", ")", ":", "\n", "\n", "\t", "utils", ".", "save_image", "(", "\n", "torch", ".", "cat", "(", "[", "img1", ",", "img2", "]", ",", "0", ")", ",", "\n", "savePath", ",", "\n", "nrow", "=", "2", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.savePredictedStack.saveImg": [[23, 30], ["torchvision.utils.save_image"], "function", ["None"], ["", "def", "saveImg", "(", "img", ",", "savePath", ")", ":", "\n", "\n", "\t", "utils", ".", "save_image", "(", "img", ",", "\n", "savePath", ",", "\n", "nrow", "=", "1", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.savePredictedStack.make_out_path_structure": [[31, 47], ["os.path.exists", "print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "shutil.rmtree", "savePredictedStack.make_out_path_structure", "sys.exit", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.savePredictedStack.make_out_path_structure"], ["", "def", "make_out_path_structure", "(", "output_path", ",", "jump", "=", "1", ",", "force", "=", "False", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "print", "(", "'Creating output folder structure...'", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'predicted'", ",", "'{}'", ".", "format", "(", "int", "(", "1", ")", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'predicted'", ",", "'{}'", ".", "format", "(", "int", "(", "jump", "+", "1", ")", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'predicted'", ",", "'{}'", ".", "format", "(", "int", "(", "2", "*", "jump", "+", "1", ")", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'comparison'", ",", "'1_{}'", ".", "format", "(", "int", "(", "1", ")", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'comparison'", ",", "'1_{}'", ".", "format", "(", "int", "(", "jump", "+", "1", ")", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'comparison'", ",", "'1_{}'", ".", "format", "(", "int", "(", "2", "*", "jump", "+", "1", ")", ")", ")", ")", "\n", "print", "(", "'Created output folder structure.'", ")", "\n", "", "elif", "force", "==", "True", ":", "\n", "        ", "print", "(", "'Deleting output directory forcibly'", ")", "\n", "shutil", ".", "rmtree", "(", "output_path", ")", "\n", "make_out_path_structure", "(", "output_path", ",", "jump", ",", "force", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Output folder structure already exists. Please provide new out_path.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CosineLR.__init__": [[7, 14], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CosineLR.get_lr": [[15, 25], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "lr_min", "+", "0.5", "*", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "*", "(", "\n", "1", "+", "cos", "(", "self", ".", "iteration", "/", "self", ".", "step_size", "*", "pi", ")", "\n", ")", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.PowerLR.__init__": [[28, 35], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "warmup", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.PowerLR.get_lr": [[36, 48], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", "<", "self", ".", "warmup", ":", "\n", "            ", "lr", "=", "(", "\n", "self", ".", "lr_min", "+", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "/", "self", ".", "warmup", "*", "self", ".", "iteration", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "lr", "=", "self", ".", "lr_max", "*", "(", "self", ".", "iteration", "-", "self", ".", "warmup", "+", "1", ")", "**", "-", "0.5", "\n", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.SineLR.__init__": [[51, 58], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.SineLR.get_lr": [[59, 69], ["math.sin"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "lr_min", "+", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "*", "sin", "(", "\n", "self", ".", "iteration", "/", "self", ".", "step_size", "*", "pi", "\n", ")", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.LinearLR.__init__": [[72, 80], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "warmup", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.LinearLR.get_lr": [[81, 95], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", "<", "self", ".", "warmup", ":", "\n", "            ", "lr", "=", "self", ".", "lr_max", "\n", "\n", "", "else", ":", "\n", "            ", "lr", "=", "self", ".", "lr_max", "+", "(", "self", ".", "iteration", "-", "self", ".", "warmup", ")", "*", "(", "\n", "self", ".", "lr_min", "-", "self", ".", "lr_max", "\n", ")", "/", "(", "self", ".", "step_size", "-", "self", ".", "warmup", ")", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CLR.__init__": [[98, 106], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "current_lr", "=", "lr_min", "\n", "self", ".", "step_size", "=", "step_size", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CLR.get_lr": [[107, 116], ["math.floor", "abs", "max"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "cycle", "=", "floor", "(", "1", "+", "self", ".", "epoch", "/", "(", "2", "*", "self", ".", "step_size", ")", ")", "\n", "x", "=", "abs", "(", "self", ".", "epoch", "/", "self", ".", "step_size", "-", "2", "*", "cycle", "+", "1", ")", "\n", "lr", "=", "self", ".", "lr_min", "+", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "*", "max", "(", "0", ",", "1", "-", "x", ")", "\n", "self", ".", "current_lr", "=", "lr", "\n", "\n", "self", ".", "epoch", "+=", "1", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Warmup.__init__": [[119, 127], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "model_dim", ",", "factor", "=", "1", ",", "warmup", "=", "16000", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "model_dim", "=", "model_dim", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Warmup.get_lr": [[128, 137], ["min"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "self", ".", "iteration", "+=", "1", "\n", "lr", "=", "(", "\n", "self", ".", "factor", "\n", "*", "self", ".", "model_dim", "**", "(", "-", "0.5", ")", "\n", "*", "min", "(", "self", ".", "iteration", "**", "(", "-", "0.5", ")", ",", "self", ".", "iteration", "*", "self", ".", "warmup", "**", "(", "-", "1.5", ")", ")", "\n", ")", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleAnnealScheduler.__init__": [[158, 169], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "optimizer", ",", "lr_max", ",", "lr_divider", ",", "cut_point", ",", "step_size", ",", "momentum", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "lr_divider", "=", "lr_divider", "\n", "self", ".", "cut_point", "=", "step_size", "//", "cut_point", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "cycle_step", "=", "int", "(", "step_size", "*", "(", "1", "-", "cut_point", "/", "100", ")", "/", "2", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleAnnealScheduler.get_lr": [[170, 186], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", ">", "2", "*", "self", ".", "cycle_step", ":", "\n", "            ", "cut", "=", "(", "self", ".", "iteration", "-", "2", "*", "self", ".", "cycle_step", ")", "/", "(", "\n", "self", ".", "step_size", "-", "2", "*", "self", ".", "cycle_step", "\n", ")", "\n", "lr", "=", "self", ".", "lr_max", "*", "(", "1", "+", "(", "cut", "*", "(", "1", "-", "100", ")", "/", "100", ")", ")", "/", "self", ".", "lr_divider", "\n", "\n", "", "elif", "self", ".", "iteration", ">", "self", ".", "cycle_step", ":", "\n", "            ", "cut", "=", "1", "-", "(", "self", ".", "iteration", "-", "self", ".", "cycle_step", ")", "/", "self", ".", "cycle_step", "\n", "lr", "=", "self", ".", "lr_max", "*", "(", "1", "+", "cut", "*", "(", "self", ".", "lr_divider", "-", "1", ")", ")", "/", "self", ".", "lr_divider", "\n", "\n", "", "else", ":", "\n", "            ", "cut", "=", "self", ".", "iteration", "/", "self", ".", "cycle_step", "\n", "lr", "=", "self", ".", "lr_max", "*", "(", "1", "+", "cut", "*", "(", "self", ".", "lr_divider", "-", "1", ")", ")", "/", "self", ".", "lr_divider", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleAnnealScheduler.get_momentum": [[187, 200], ["None"], "methods", ["None"], ["", "def", "get_momentum", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", ">", "2", "*", "self", ".", "cycle_step", ":", "\n", "            ", "momentum", "=", "self", ".", "momentum", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "iteration", ">", "self", ".", "cycle_step", ":", "\n", "            ", "cut", "=", "1", "-", "(", "self", ".", "iteration", "-", "self", ".", "cycle_step", ")", "/", "self", ".", "cycle_step", "\n", "momentum", "=", "self", ".", "momentum", "[", "0", "]", "+", "cut", "*", "(", "self", ".", "momentum", "[", "1", "]", "-", "self", ".", "momentum", "[", "0", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "cut", "=", "self", ".", "iteration", "/", "self", ".", "cycle_step", "\n", "momentum", "=", "self", ".", "momentum", "[", "0", "]", "+", "cut", "*", "(", "self", ".", "momentum", "[", "1", "]", "-", "self", ".", "momentum", "[", "0", "]", ")", "\n", "\n", "", "return", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleAnnealScheduler.step": [[201, 219], ["scheduler.CycleAnnealScheduler.get_lr", "scheduler.CycleAnnealScheduler.get_momentum"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.LRFinder.get_lr", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleAnnealScheduler.get_momentum"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "get_lr", "(", ")", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "            ", "momentum", "=", "self", ".", "get_momentum", "(", ")", "\n", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "==", "self", ".", "step_size", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "                ", "group", "[", "'betas'", "]", "=", "(", "momentum", ",", "group", "[", "'betas'", "]", "[", "1", "]", ")", "\n", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Phase.__init__": [[232, 237], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start", ",", "end", ",", "n_iter", ",", "anneal_fn", ")", ":", "\n", "        ", "self", ".", "start", ",", "self", ".", "end", "=", "start", ",", "end", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "anneal_fn", "=", "anneal_fn", "\n", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Phase.step": [[238, 242], ["scheduler.Phase.anneal_fn"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "+=", "1", "\n", "\n", "return", "self", ".", "anneal_fn", "(", "self", ".", "start", ",", "self", ".", "end", ",", "self", ".", "n", "/", "self", ".", "n_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Phase.reset": [[243, 245], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Phase.is_done": [[246, 249], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", ">=", "self", ".", "n_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleScheduler.__init__": [[252, 288], ["int", "scheduler.Phase", "scheduler.Phase", "scheduler.Phase", "scheduler.Phase"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "lr_max", ",", "\n", "n_iter", ",", "\n", "momentum", "=", "(", "0.95", ",", "0.85", ")", ",", "\n", "divider", "=", "25", ",", "\n", "warmup_proportion", "=", "0.3", ",", "\n", "phase", "=", "(", "'linear'", ",", "'cos'", ")", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "phase1", "=", "int", "(", "n_iter", "*", "warmup_proportion", ")", "\n", "phase2", "=", "n_iter", "-", "phase1", "\n", "lr_min", "=", "lr_max", "/", "divider", "\n", "\n", "phase_map", "=", "{", "'linear'", ":", "anneal_linear", ",", "'cos'", ":", "anneal_cos", "}", "\n", "\n", "self", ".", "lr_phase", "=", "[", "\n", "Phase", "(", "lr_min", ",", "lr_max", ",", "phase1", ",", "phase_map", "[", "phase", "[", "0", "]", "]", ")", ",", "\n", "Phase", "(", "lr_max", ",", "lr_min", "/", "1e4", ",", "phase2", ",", "phase_map", "[", "phase", "[", "1", "]", "]", ")", ",", "\n", "]", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "if", "momentum", "is", "not", "None", ":", "\n", "            ", "mom1", ",", "mom2", "=", "momentum", "\n", "self", ".", "momentum_phase", "=", "[", "\n", "Phase", "(", "mom1", ",", "mom2", ",", "phase1", ",", "phase_map", "[", "phase", "[", "0", "]", "]", ")", ",", "\n", "Phase", "(", "mom2", ",", "mom1", ",", "phase2", ",", "phase_map", "[", "phase", "[", "1", "]", "]", ")", ",", "\n", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "momentum_phase", "=", "[", "]", "\n", "\n", "", "self", ".", "phase", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleScheduler.step": [[289, 321], ["scheduler.CycleScheduler.lr_phase[].step", "scheduler.CycleScheduler.momentum_phase[].step", "len", "phase.reset", "phase.reset"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.CycleScheduler.step", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Phase.reset", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.Phase.reset"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "lr_phase", "[", "self", ".", "phase", "]", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "            ", "momentum", "=", "self", ".", "momentum_phase", "[", "self", ".", "phase", "]", ".", "step", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "momentum", "=", "None", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "if", "self", ".", "momentum", "is", "not", "None", ":", "\n", "                ", "if", "'betas'", "in", "group", ":", "\n", "                    ", "group", "[", "'betas'", "]", "=", "(", "momentum", ",", "group", "[", "'betas'", "]", "[", "1", "]", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "group", "[", "'momentum'", "]", "=", "momentum", "\n", "\n", "", "", "", "if", "self", ".", "lr_phase", "[", "self", ".", "phase", "]", ".", "is_done", ":", "\n", "            ", "self", ".", "phase", "+=", "1", "\n", "\n", "", "if", "self", ".", "phase", ">=", "len", "(", "self", ".", "lr_phase", ")", ":", "\n", "            ", "for", "phase", "in", "self", ".", "lr_phase", ":", "\n", "                ", "phase", ".", "reset", "(", ")", "\n", "\n", "", "for", "phase", "in", "self", ".", "momentum_phase", ":", "\n", "                ", "phase", ".", "reset", "(", ")", "\n", "\n", "", "self", ".", "phase", "=", "0", "\n", "\n", "", "return", "lr", ",", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.LRFinder.__init__": [[324, 334], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "lr_min", ",", "lr_max", ",", "step_size", ",", "linear", "=", "False", ")", ":", "\n", "        ", "ratio", "=", "lr_max", "/", "lr_min", "\n", "self", ".", "linear", "=", "linear", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_mult", "=", "(", "ratio", "/", "step_size", ")", "if", "linear", "else", "ratio", "**", "(", "1", "/", "step_size", ")", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "lrs", "=", "[", "]", "\n", "self", ".", "losses", "=", "[", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.LRFinder.get_lr": [[335, 347], ["scheduler.LRFinder.lrs.append"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "(", "\n", "self", ".", "lr_mult", "*", "self", ".", "iteration", "\n", "if", "self", ".", "linear", "\n", "else", "self", ".", "lr_mult", "**", "self", ".", "iteration", "\n", ")", "\n", "lr", "=", "self", ".", "lr_min", "+", "lr", "if", "self", ".", "linear", "else", "self", ".", "lr_min", "*", "lr", "\n", "\n", "self", ".", "iteration", "+=", "1", "\n", "self", ".", "lrs", ".", "append", "(", "lr", ")", "\n", "\n", "return", "[", "lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.LRFinder.record": [[348, 350], ["scheduler.LRFinder.losses.append"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "losses", ".", "append", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.LRFinder.save": [[351, 355], ["open", "zip", "f.write"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "lr", ",", "loss", "in", "zip", "(", "self", ".", "lrs", ",", "self", ".", "losses", ")", ":", "\n", "                ", "f", ".", "write", "(", "'{},{}\\n'", ".", "format", "(", "lr", ",", "loss", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.anneal_linear": [[221, 223], ["None"], "function", ["None"], ["", "", "def", "anneal_linear", "(", "start", ",", "end", ",", "proportion", ")", ":", "\n", "    ", "return", "start", "+", "proportion", "*", "(", "end", "-", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.scheduler.anneal_cos": [[225, 229], ["math.cos"], "function", ["None"], ["", "def", "anneal_cos", "(", "start", ",", "end", ",", "proportion", ")", ":", "\n", "    ", "cos_val", "=", "cos", "(", "pi", "*", "proportion", ")", "+", "1", "\n", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2", "*", "cos_val", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Quantize.__init__": [[26, 38], ["torch.nn.Module.__init__", "torch.randn", "model.Quantize.register_buffer", "model.Quantize.register_buffer", "model.Quantize.register_buffer", "torch.zeros", "torch.randn.clone"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "n_embed", ",", "decay", "=", "0.99", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_embed", "=", "n_embed", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "embed", "=", "torch", ".", "randn", "(", "dim", ",", "n_embed", ")", "\n", "self", ".", "register_buffer", "(", "'embed'", ",", "embed", ")", "\n", "self", ".", "register_buffer", "(", "'cluster_size'", ",", "torch", ".", "zeros", "(", "n_embed", ")", ")", "\n", "self", ".", "register_buffer", "(", "'embed_avg'", ",", "embed", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Quantize.forward": [[39, 68], ["input.reshape", "torch.nn.functional.one_hot().type", "embed_ind.view.view.view", "model.Quantize.embed_code", "model.Quantize.embed.pow().sum", "model.Quantize.cluster_size.data.mul_().add_", "model.Quantize.embed_avg.data.mul_().add_", "model.Quantize.cluster_size.sum", "model.Quantize.embed.data.copy_", "input.reshape.pow().sum", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot().type.sum", "input.reshape.transpose", "cluster_size.unsqueeze", "model.Quantize.embed.pow", "model.Quantize.cluster_size.data.mul_", "model.Quantize.embed_avg.data.mul_", "input.reshape.pow", "model.Quantize.detach"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Quantize.embed_code"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "flatten", "=", "input", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim", ")", "\n", "dist", "=", "(", "\n", "flatten", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "-", "2", "*", "flatten", "@", "self", ".", "embed", "\n", "+", "self", ".", "embed", ".", "pow", "(", "2", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", ")", "\n", "_", ",", "embed_ind", "=", "(", "-", "dist", ")", ".", "max", "(", "1", ")", "\n", "embed_onehot", "=", "F", ".", "one_hot", "(", "embed_ind", ",", "self", ".", "n_embed", ")", ".", "type", "(", "flatten", ".", "dtype", ")", "\n", "embed_ind", "=", "embed_ind", ".", "view", "(", "*", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "quantize", "=", "self", ".", "embed_code", "(", "embed_ind", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "cluster_size", ".", "data", ".", "mul_", "(", "self", ".", "decay", ")", ".", "add_", "(", "\n", "1", "-", "self", ".", "decay", ",", "embed_onehot", ".", "sum", "(", "0", ")", "\n", ")", "\n", "embed_sum", "=", "flatten", ".", "transpose", "(", "0", ",", "1", ")", "@", "embed_onehot", "\n", "self", ".", "embed_avg", ".", "data", ".", "mul_", "(", "self", ".", "decay", ")", ".", "add_", "(", "1", "-", "self", ".", "decay", ",", "embed_sum", ")", "\n", "n", "=", "self", ".", "cluster_size", ".", "sum", "(", ")", "\n", "cluster_size", "=", "(", "\n", "(", "self", ".", "cluster_size", "+", "self", ".", "eps", ")", "/", "(", "n", "+", "self", ".", "n_embed", "*", "self", ".", "eps", ")", "*", "n", "\n", ")", "\n", "embed_normalized", "=", "self", ".", "embed_avg", "/", "cluster_size", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "embed", ".", "data", ".", "copy_", "(", "embed_normalized", ")", "\n", "\n", "", "diff", "=", "(", "quantize", ".", "detach", "(", ")", "-", "input", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "quantize", "=", "input", "+", "(", "quantize", "-", "input", ")", ".", "detach", "(", ")", "\n", "\n", "return", "quantize", ",", "diff", ",", "embed_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Quantize.embed_code": [[69, 71], ["torch.nn.functional.embedding", "model.Quantize.embed.transpose"], "methods", ["None"], ["", "def", "embed_code", "(", "self", ",", "embed_id", ")", ":", "\n", "        ", "return", "F", ".", "embedding", "(", "embed_id", ",", "self", ".", "embed", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.ResBlock.__init__": [[74, 82], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "in_channel", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.ResBlock.forward": [[84, 89], ["model.ResBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "input", ")", "\n", "out", "+=", "input", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Encoder.__init__": [[92, 117], ["torch.nn.Module.__init__", "range", "blocks.append", "torch.nn.Sequential", "blocks.append", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "model.ResBlock", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "stride", "==", "4", ":", "\n", "            ", "blocks", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", "//", "2", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "elif", "stride", "==", "2", ":", "\n", "            ", "blocks", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", "//", "2", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_res_block", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "ResBlock", "(", "channel", ",", "n_res_channel", ")", ")", "\n", "\n", "", "blocks", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Encoder.forward": [[118, 120], ["model.Encoder.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "blocks", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Decoder.__init__": [[123, 152], ["torch.nn.Module.__init__", "range", "blocks.append", "torch.nn.Sequential", "torch.nn.Conv2d", "blocks.append", "torch.nn.ReLU", "blocks.extend", "model.ResBlock", "blocks.append", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channel", ",", "out_channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "blocks", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_res_block", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "ResBlock", "(", "channel", ",", "n_res_channel", ")", ")", "\n", "\n", "", "blocks", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "if", "stride", "==", "4", ":", "\n", "            ", "blocks", ".", "extend", "(", "\n", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "channel", ",", "channel", "//", "2", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "channel", "//", "2", ",", "out_channel", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "elif", "stride", "==", "2", ":", "\n", "            ", "blocks", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "channel", ",", "out_channel", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n", "\n", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Decoder.forward": [[153, 155], ["model.Decoder.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "blocks", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.__init__": [[158, 214], ["torch.nn.Module.__init__", "model.Encoder", "model.Encoder", "torch.nn.Conv2d", "model.Quantize", "model.Decoder", "torch.nn.Conv2d", "model.Quantize", "torch.nn.ConvTranspose2d", "model.Decoder", "torch.nn.ConvTranspose2d", "model.Decoder", "torch.nn.ConvTranspose2d", "model.Decoder"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channel", "=", "3", ",", "\n", "channel", "=", "128", ",", "\n", "n_res_block", "=", "2", ",", "\n", "n_res_channel", "=", "32", ",", "\n", "embed_dim", "=", "64", ",", "\n", "n_embed", "=", "512", ",", "\n", "decay", "=", "0.99", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc_b", "=", "Encoder", "(", "in_channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "4", ")", "\n", "self", ".", "enc_t", "=", "Encoder", "(", "channel", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "2", ")", "\n", "self", ".", "quantize_conv_t", "=", "nn", ".", "Conv2d", "(", "channel", ",", "embed_dim", ",", "1", ")", "\n", "self", ".", "quantize_t", "=", "Quantize", "(", "embed_dim", ",", "n_embed", ")", "\n", "self", ".", "dec_t", "=", "Decoder", "(", "\n", "embed_dim", ",", "embed_dim", ",", "channel", ",", "n_res_block", ",", "n_res_channel", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "quantize_conv_b", "=", "nn", ".", "Conv2d", "(", "embed_dim", "+", "channel", ",", "embed_dim", ",", "1", ")", "\n", "self", ".", "quantize_b", "=", "Quantize", "(", "embed_dim", ",", "n_embed", ")", "\n", "self", ".", "upsample_t", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "embed_dim", ",", "embed_dim", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "dec", "=", "Decoder", "(", "\n", "embed_dim", "+", "embed_dim", ",", "\n", "in_channel", ",", "\n", "channel", ",", "\n", "n_res_block", ",", "\n", "n_res_channel", ",", "\n", "stride", "=", "4", ",", "\n", ")", "\n", "self", ".", "upsample_t2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "embed_dim", ",", "embed_dim", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "dec2", "=", "Decoder", "(", "\n", "embed_dim", "+", "embed_dim", ",", "\n", "in_channel", ",", "\n", "channel", ",", "\n", "n_res_block", ",", "\n", "n_res_channel", ",", "\n", "stride", "=", "4", ",", "\n", ")", "\n", "self", ".", "upsample_t3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "embed_dim", ",", "embed_dim", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "dec3", "=", "Decoder", "(", "\n", "embed_dim", "+", "embed_dim", ",", "\n", "in_channel", ",", "\n", "channel", ",", "\n", "n_res_block", ",", "\n", "n_res_channel", ",", "\n", "stride", "=", "4", ",", "\n", ")", "\n", "'''self.lstm2 = nn.LSTM(embed_dim + embed_dim,embed_dim + embed_dim)\n        self.lstm3 = nn.LSTM(embed_dim + embed_dim,embed_dim + embed_dim)'''", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.forward": [[215, 223], ["model.DQLR.encode", "model.DQLR.decode", "model.DQLR.decode2", "model.DQLR.decode3"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.encode", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode2", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode3"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quant_t", ",", "quant_b", ",", "diff", ",", "_", ",", "_", "=", "self", ".", "encode", "(", "input", ")", "\n", "dec", "=", "[", "]", "\n", "dec", "=", "self", ".", "decode", "(", "quant_t", ",", "quant_b", ")", "\n", "dec2", "=", "self", ".", "decode2", "(", "quant_t", ",", "quant_b", ")", "\n", "dec3", "=", "self", ".", "decode3", "(", "quant_t", ",", "quant_b", ")", "\n", "\n", "return", "[", "dec", ",", "dec2", ",", "dec3", "]", ",", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.encode": [[224, 242], ["model.DQLR.enc_b", "model.DQLR.enc_t", "model.DQLR.quantize_conv_t().permute", "model.DQLR.quantize_t", "quant_t.permute.permute.permute", "diff_t.unsqueeze.unsqueeze.unsqueeze", "model.DQLR.dec_t", "torch.cat", "model.DQLR.quantize_conv_b().permute", "model.DQLR.quantize_b", "quant_b.permute.permute.permute", "diff_b.unsqueeze.unsqueeze.unsqueeze", "model.DQLR.quantize_conv_t", "model.DQLR.quantize_conv_b"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "input", ")", ":", "\n", "        ", "enc_b", "=", "self", ".", "enc_b", "(", "input", ")", "\n", "enc_t", "=", "self", ".", "enc_t", "(", "enc_b", ")", "\n", "\n", "quant_t", "=", "self", ".", "quantize_conv_t", "(", "enc_t", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "quant_t", ",", "diff_t", ",", "id_t", "=", "self", ".", "quantize_t", "(", "quant_t", ")", "\n", "quant_t", "=", "quant_t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "diff_t", "=", "diff_t", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "dec_t", "=", "self", ".", "dec_t", "(", "quant_t", ")", "\n", "enc_b", "=", "torch", ".", "cat", "(", "[", "dec_t", ",", "enc_b", "]", ",", "1", ")", "\n", "\n", "quant_b", "=", "self", ".", "quantize_conv_b", "(", "enc_b", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "quant_b", ",", "diff_b", ",", "id_b", "=", "self", ".", "quantize_b", "(", "quant_b", ")", "\n", "quant_b", "=", "quant_b", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "diff_b", "=", "diff_b", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "quant_t", ",", "quant_b", ",", "diff_t", "+", "diff_b", ",", "id_t", ",", "id_b", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode": [[243, 249], ["model.DQLR.upsample_t", "torch.cat", "model.DQLR.dec"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "quant_t", ",", "quant_b", ")", ":", "\n", "        ", "upsample_t", "=", "self", ".", "upsample_t", "(", "quant_t", ")", "\n", "quant", "=", "torch", ".", "cat", "(", "[", "upsample_t", ",", "quant_b", "]", ",", "1", ")", "\n", "dec", "=", "self", ".", "dec", "(", "quant", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode2": [[250, 258], ["quant_t.detach.detach.detach", "quant_b.detach.detach.detach", "model.DQLR.upsample_t2", "torch.cat", "model.DQLR.dec2"], "methods", ["None"], ["", "def", "decode2", "(", "self", ",", "quant_t", ",", "quant_b", ")", ":", "\n", "        ", "quant_t", "=", "quant_t", ".", "detach", "(", ")", "\n", "quant_b", "=", "quant_b", ".", "detach", "(", ")", "\n", "upsample_t", "=", "self", ".", "upsample_t2", "(", "quant_t", ")", "\n", "quant", "=", "torch", ".", "cat", "(", "[", "upsample_t", ",", "quant_b", "]", ",", "1", ")", "\n", "dec2", "=", "self", ".", "dec2", "(", "quant", ")", "\n", "\n", "return", "dec2", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode3": [[259, 267], ["quant_t.detach.detach.detach", "quant_b.detach.detach.detach", "model.DQLR.upsample_t3", "torch.cat", "model.DQLR.dec3"], "methods", ["None"], ["", "def", "decode3", "(", "self", ",", "quant_t", ",", "quant_b", ")", ":", "\n", "        ", "quant_t", "=", "quant_t", ".", "detach", "(", ")", "\n", "quant_b", "=", "quant_b", ".", "detach", "(", ")", "\n", "upsample_t", "=", "self", ".", "upsample_t3", "(", "quant_t", ")", "\n", "quant", "=", "torch", ".", "cat", "(", "[", "upsample_t", ",", "quant_b", "]", ",", "1", ")", "\n", "dec3", "=", "self", ".", "dec3", "(", "quant", ")", "\n", "\n", "return", "dec3", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode_code": [[269, 278], ["model.DQLR.quantize_t.embed_code", "quant_t.permute.permute.permute", "model.DQLR.quantize_b.embed_code", "quant_b.permute.permute.permute", "model.DQLR.decode"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Quantize.embed_code", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.Quantize.embed_code", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.model.DQLR.decode"], ["", "def", "decode_code", "(", "self", ",", "code_t", ",", "code_b", ")", ":", "\n", "        ", "quant_t", "=", "self", ".", "quantize_t", ".", "embed_code", "(", "code_t", ")", "\n", "quant_t", "=", "quant_t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "quant_b", "=", "self", ".", "quantize_b", ".", "embed_code", "(", "code_b", ")", "\n", "quant_b", "=", "quant_b", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "dec", "=", "self", ".", "decode", "(", "quant_t", ",", "quant_b", ")", "\n", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.sequential_dataloader.SequentialDataset.__init__": [[25, 61], ["print", "os.path.join", "sorted", "print", "numpy.array", "os.listdir", "os.listdir", "len", "len", "os.path.join", "sequential_dataloader.SequentialDataset.stack_names.append", "sorted", "len", "range", "labels.append", "len", "enumerate", "os.path.join", "os.listdir", "sequential_dataloader.SequentialDataset.frame_names.append", "sorted", "os.path.join", "set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stack_dir", ",", "transform", ",", "clip_len", "=", "16", ",", "clip_jump", "=", "1", ",", "preprocess", "=", "False", ",", "deeper_layer", "=", "False", ")", ":", "\n", "        ", "print", "(", "'Incomplete implementation. Works only for one stack in the plant.'", ")", "\n", "\n", "self", ".", "stack_dir", "=", "stack_dir", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "stack_dir", ")", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "clip_jump", "=", "clip_jump", "\n", "self", ".", "transform", "=", "transform", "\n", "# The following three parameters are chosen as described in the paper section 4.1", "\n", "self", ".", "resize_height", "=", "256", "\n", "self", ".", "resize_width", "=", "256", "\n", "self", ".", "crop_size", "=", "256", "\n", "\n", "#assert (self.clip_len % self.clip_jump) == 0", "\n", "#assert self.clip_len > self.clip_jump ", "\n", "\n", "self", ".", "stack_names", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "frame_names", "=", "[", "]", "\n", "self", ".", "stack_len", "=", "[", "]", "\n", "for", "label", "in", "sorted", "(", "os", ".", "listdir", "(", "folder", ")", ")", ":", "\n", "            ", "for", "fname", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "label", ")", ")", ":", "\n", "                ", "self", ".", "stack_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "label", ",", "fname", ")", ")", "\n", "stack_fnames", "=", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "stack_names", "[", "-", "1", "]", ")", ")", "\n", "stack_len", "=", "len", "(", "stack_fnames", ")", "\n", "assert", "(", "stack_len", "-", "self", ".", "clip_len", "*", "self", ".", "clip_jump", ")", ">=", "0", "\n", "for", "f_idx", "in", "range", "(", "stack_len", ")", ":", "# - self.clip_len*self.clip_jump):", "\n", "                     ", "self", ".", "frame_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "stack_names", "[", "-", "1", "]", ",", "stack_fnames", "[", "f_idx", "]", ")", ")", "\n", "", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "assert", "len", "(", "labels", ")", "==", "len", "(", "self", ".", "stack_names", ")", "\n", "print", "(", "'Number of stack in {} : {:d}'", ".", "format", "(", "folder", ",", "len", "(", "self", ".", "stack_names", ")", ")", ")", "\n", "\n", "# Prepare a mapping between the label names (strings) and indices (ints)", "\n", "self", ".", "label2index", "=", "{", "label", ":", "index", "for", "index", ",", "label", "in", "enumerate", "(", "sorted", "(", "set", "(", "labels", ")", ")", ")", "}", "\n", "# Convert the list of label names into an array of label indices", "\n", "self", ".", "label_array", "=", "np", ".", "array", "(", "[", "self", ".", "label2index", "[", "label", "]", "for", "label", "in", "labels", "]", ",", "dtype", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.sequential_dataloader.SequentialDataset.__len__": [[62, 64], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frame_names", ")", "-", "self", ".", "clip_len", "*", "self", ".", "clip_jump", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.sequential_dataloader.SequentialDataset.__getitem__": [[65, 77], ["sequential_dataloader.SequentialDataset.load_frames", "numpy.empty", "sequential_dataloader.SequentialDataset.get_nFrames", "range", "numpy.dtype", "len", "sequential_dataloader.SequentialDataset.transform", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.load_frames", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.get_nFrames"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Loading and preprocessing.", "\n", "#print(index)", "\n", "\n", "        ", "buffer_list", "=", "self", ".", "load_frames", "(", "self", ".", "frame_names", ")", "\n", "buffer", "=", "np", ".", "empty", "(", "(", "self", ".", "clip_len", ",", "3", ",", "self", ".", "resize_height", ",", "self", ".", "resize_width", ")", ",", "np", ".", "dtype", "(", "'float32'", ")", ")", "\n", "buffer_list", "=", "self", ".", "get_nFrames", "(", "buffer_list", ",", "self", ".", "clip_len", ",", "self", ".", "clip_jump", ",", "index", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "buffer_list", ")", ")", ":", "\n", "            ", "buffer", "[", "i", "]", "=", "self", ".", "transform", "(", "buffer_list", "[", "i", "]", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "buffer", "[", "0", "]", ")", ",", "torch", ".", "from_numpy", "(", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.sequential_dataloader.SequentialDataset.load_frames": [[78, 85], ["enumerate", "PIL.Image.open().convert", "buffer_list.append", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_frames", "(", "self", ",", "frames", ")", ":", "\n", "        ", "buffer_list", "=", "[", "]", "\n", "for", "i", ",", "frame_name", "in", "enumerate", "(", "frames", ")", ":", "\n", "            ", "frame", "=", "Image", ".", "open", "(", "frame_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "buffer_list", ".", "append", "(", "frame", ")", "\n", "\n", "", "return", "buffer_list", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.sequential_dataloader.SequentialDataset.get_nFrames": [[87, 100], ["len", "len", "numpy.random.randint", "len", "len"], "methods", ["None"], ["", "def", "get_nFrames", "(", "self", ",", "buffer_list", ",", "clip_len", ",", "clip_jump", "=", "1", ",", "init_time_idx", "=", "-", "1", ")", ":", "\n", "# randomly select time index for temporal jittering", "\n", "        ", "if", "init_time_idx", ">", "0", "and", "init_time_idx", "<", "len", "(", "buffer_list", ")", ":", "\n", "            ", "time_index", "=", "init_time_idx", "\n", "", "elif", "init_time_idx", ">", "len", "(", "buffer_list", ")", ":", "\n", "            ", "assert", "init_time_idx", ">", "(", "len", "(", "buffer_list", ")", "-", "clip_jump", "*", "clip_len", ")", "\n", "", "else", ":", "\n", "#import pdb; pdb.set_trace()", "\n", "            ", "time_index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "buffer_list", ")", "-", "clip_jump", "*", "clip_len", "+", "1", ")", "\n", "\n", "", "buffer_list", "=", "buffer_list", "[", "time_index", ":", "time_index", "+", "clip_jump", "*", "clip_len", ":", "clip_jump", "]", "\n", "\n", "return", "buffer_list", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__init__": [[25, 51], ["os.path.join", "sorted", "print", "numpy.array", "os.listdir", "os.listdir", "len", "len", "os.path.join", "dataloader.VideoDataset.fnames.append", "labels.append", "len", "enumerate", "os.path.join", "sorted", "set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_dir", ",", "transform", ",", "split", "=", "'train'", ",", "clip_len", "=", "16", ",", "clip_jump", "=", "1", ",", "preprocess", "=", "False", ",", "deeper_layer", "=", "False", ")", ":", "\n", "#self.root_dir, self.output_dir = Path.db_dir(dataset)", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "split", ")", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "clip_jump", "=", "clip_jump", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "transform", "=", "transform", "\n", "# The following three parameters are chosen as described in the paper section 4.1", "\n", "self", ".", "resize_height", "=", "256", "\n", "self", ".", "resize_width", "=", "256", "\n", "self", ".", "crop_size", "=", "256", "\n", "\n", "self", ".", "fnames", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "for", "label", "in", "sorted", "(", "os", ".", "listdir", "(", "folder", ")", ")", ":", "\n", "            ", "for", "fname", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "label", ")", ")", ":", "\n", "                ", "self", ".", "fnames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "label", ",", "fname", ")", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "assert", "len", "(", "labels", ")", "==", "len", "(", "self", ".", "fnames", ")", "\n", "print", "(", "'Number of {} videos: {:d}'", ".", "format", "(", "split", ",", "len", "(", "self", ".", "fnames", ")", ")", ")", "\n", "\n", "# Prepare a mapping between the label names (strings) and indices (ints)", "\n", "self", ".", "label2index", "=", "{", "label", ":", "index", "for", "index", ",", "label", "in", "enumerate", "(", "sorted", "(", "set", "(", "labels", ")", ")", ")", "}", "\n", "# Convert the list of label names into an array of label indices", "\n", "self", ".", "label_array", "=", "np", ".", "array", "(", "[", "self", ".", "label2index", "[", "label", "]", "for", "label", "in", "labels", "]", ",", "dtype", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "150", "*", "len", "(", "self", ".", "fnames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.__getitem__": [[56, 68], ["dataloader.VideoDataset.load_frames", "numpy.empty", "dataloader.VideoDataset.get_nFrames", "range", "numpy.dtype", "len", "dataloader.VideoDataset.transform", "torch.from_numpy", "torch.from_numpy", "int"], "methods", ["home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.load_frames", "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.get_nFrames"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# Loading and preprocessing.", "\n", "        ", "buffer_list", ",", "frame_count", "=", "self", ".", "load_frames", "(", "self", ".", "fnames", "[", "int", "(", "index", "/", "150", ")", "]", ")", "\n", "\n", "buffer", "=", "np", ".", "empty", "(", "(", "self", ".", "clip_len", ",", "3", ",", "self", ".", "resize_height", ",", "self", ".", "resize_width", ")", ",", "np", ".", "dtype", "(", "'float32'", ")", ")", "\n", "\n", "buffer_list", "=", "self", ".", "get_nFrames", "(", "buffer_list", ",", "self", ".", "clip_len", ",", "self", ".", "clip_jump", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "buffer_list", ")", ")", ":", "\n", "            ", "buffer", "[", "i", "]", "=", "self", ".", "transform", "(", "buffer_list", "[", "i", "]", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "buffer", "[", "0", "]", ")", ",", "torch", ".", "from_numpy", "(", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.load_frames": [[69, 77], ["sorted", "len", "enumerate", "PIL.Image.open().convert", "buffer_list.append", "os.path.join", "os.listdir", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_frames", "(", "self", ",", "file_dir", ")", ":", "\n", "        ", "frames", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "file_dir", ",", "img", ")", "for", "img", "in", "os", ".", "listdir", "(", "file_dir", ")", "]", ")", "\n", "frame_count", "=", "len", "(", "frames", ")", "\n", "buffer_list", "=", "[", "]", "\n", "for", "i", ",", "frame_name", "in", "enumerate", "(", "frames", ")", ":", "\n", "            ", "frame", "=", "Image", ".", "open", "(", "frame_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "buffer_list", ".", "append", "(", "frame", ")", "\n", "", "return", "buffer_list", ",", "frame_count", "\n", "\n"]], "home.repos.pwc.inspect_result.agupt013_enhancedRec.None.dataloader.VideoDataset.get_nFrames": [[79, 91], ["numpy.random.randint", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "get_nFrames", "(", "self", ",", "buffer_list", ",", "clip_len", ",", "clip_jump", ",", "init_time_idx", "=", "-", "1", ")", ":", "\n", "# randomly select time index for temporal jittering", "\n", "        ", "if", "init_time_idx", ">", "0", "and", "init_time_idx", "<", "(", "len", "(", "buffer_list", ")", "-", "clip_jump", "*", "clip_len", ")", ":", "\n", "            ", "time_index", "=", "init_time_idx", "\n", "", "elif", "init_time_idx", ">", "(", "len", "(", "buffer_list", ")", "-", "clip_jump", "*", "clip_len", ")", ":", "\n", "            ", "assert", "init_time_idx", ">", "(", "len", "(", "buffer_list", ")", "-", "clip_jump", "*", "clip_len", ")", "\n", "", "else", ":", "\n", "            ", "time_index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "buffer_list", ")", "-", "clip_jump", "*", "clip_len", ")", "\n", "\n", "", "buffer_list", "=", "buffer_list", "[", "time_index", ":", "time_index", "+", "clip_jump", "*", "clip_len", ":", "clip_jump", "]", "\n", "\n", "return", "buffer_list", "\n", "\n"]]}